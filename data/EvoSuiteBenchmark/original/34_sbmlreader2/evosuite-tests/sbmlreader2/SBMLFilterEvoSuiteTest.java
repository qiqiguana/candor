/*
 * This file was automatically generated by EvoSuite
 */

package sbmlreader2;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import sbmlreader2.SBMLFilter;
import sbmlreader2.SBMLGraphReader;

@RunWith(EvoSuiteRunner.class)
public class SBMLFilterEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = false; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 sbmlreader2.SBMLFilter.getReader(Ljava/lang/String;)Lcytoscape/data/readers/GraphReader;: root-Branch
   * 2 sbmlreader2.SBMLFilter.<init>()V: root-Branch
   */
  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SBMLFilter sBMLFilter0 = new SBMLFilter();
          SBMLGraphReader sBMLGraphReader0 = (SBMLGraphReader)sBMLFilter0.getReader("<} xmlsbml");
          assertNotNull(sBMLGraphReader0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  //Test case number: 1
  /*
   * 5 covered goals:
   * 1 sbmlreader2.SBMLFilter.accept(Ljava/io/File;)Z: I17 Branch 1 IF_ICMPGE L95 - true
   * 2 sbmlreader2.SBMLFilter.accept(Ljava/io/File;)Z: I17 Branch 1 IF_ICMPGE L95 - false
   * 3 sbmlreader2.SBMLFilter.accept(Ljava/io/File;)Z: I25 Branch 2 IFLE L96 - true
   * 4 sbmlreader2.SBMLFilter.accept(Ljava/io/File;)Z: I25 Branch 2 IFLE L96 - false
   * 5 sbmlreader2.SBMLFilter.accept(Ljava/io/File;)Z: I37 Branch 3 IFEQ L101 - false
   */
  @Test
  public void test1()  throws Throwable  {
      SBMLFilter sBMLFilter0 = new SBMLFilter();
      boolean boolean0 = sBMLFilter0.accept("<} xmlsbml");
      assertEquals(false, boolean0);
  }

  //Test case number: 2
  /*
   * 5 covered goals:
   * 1 sbmlreader2.SBMLFilter.accept(Ljava/io/File;)Z: I37 Branch 3 IFEQ L101 - true
   * 2 sbmlreader2.SBMLFilter.<init>()V: root-Branch
   * 3 sbmlreader2.SBMLFilter.accept(Ljava/io/File;)Z: I17 Branch 1 IF_ICMPGE L95 - true
   * 4 sbmlreader2.SBMLFilter.accept(Ljava/io/File;)Z: I17 Branch 1 IF_ICMPGE L95 - false
   * 5 sbmlreader2.SBMLFilter.accept(Ljava/io/File;)Z: I25 Branch 2 IFLE L96 - true
   */
  @Test
  public void test2()  throws Throwable  {
      SBMLFilter sBMLFilter0 = new SBMLFilter();
      boolean boolean0 = sBMLFilter0.accept("rl.dozwnloam");
      assertEquals(false, boolean0);
  }
}
