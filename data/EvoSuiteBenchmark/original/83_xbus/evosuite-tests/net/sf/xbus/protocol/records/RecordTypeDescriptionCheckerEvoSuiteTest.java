/*
 * This file was automatically generated by EvoSuite
 */

package net.sf.xbus.protocol.records;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.lang.reflect.Array;
import java.util.LinkedList;
import java.util.TreeMap;
import net.sf.xbus.base.core.XException;
import net.sf.xbus.protocol.records.RecordTypeDescriptionChecker;
import org.apache.axis.message.SOAPEnvelope;
import org.apache.axis.message.SOAPFaultElement;
import org.apache.axis.soap.SOAP12Constants;
import org.apache.axis.soap.SOAPConstants;
import org.apache.html.dom.HTMLDirectoryElementImpl;
import org.apache.html.dom.HTMLDocumentImpl;
import org.apache.html.dom.HTMLHtmlElementImpl;
import org.apache.html.dom.HTMLMetaElementImpl;
import org.apache.html.dom.HTMLTableCaptionElementImpl;
import org.apache.html.dom.HTMLTableCellElementImpl;
import org.apache.html.dom.HTMLTableElementImpl;
import org.apache.html.dom.HTMLUListElementImpl;
import org.apache.wml.dom.WMLBElementImpl;
import org.apache.wml.dom.WMLDocumentImpl;
import org.apache.wml.dom.WMLStrongElementImpl;
import org.apache.xerces.dom.CoreDocumentImpl;
import org.apache.xerces.dom.DeferredElementNSImpl;
import org.apache.xerces.dom.DocumentTypeImpl;
import org.evosuite.runtime.System;
import org.junit.BeforeClass;
import org.w3c.dom.DocumentType;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

@RunWith(EvoSuiteRunner.class)
public class RecordTypeDescriptionCheckerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      RecordTypeDescriptionChecker recordTypeDescriptionChecker0 = new RecordTypeDescriptionChecker();
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTableCellElementImpl hTMLTableCellElementImpl0 = new HTMLTableCellElementImpl(hTMLDocumentImpl0, ",zUQe!` 5%{#1Ht");
      recordTypeDescriptionChecker0.checkHeaderSpecification((Element) hTMLTableCellElementImpl0, (Node) hTMLDocumentImpl0, true);
      assertEquals("", hTMLTableCellElementImpl0.getScope());
  }

  @Test
  public void test1()  throws Throwable  {
      RecordTypeDescriptionChecker recordTypeDescriptionChecker0 = RecordTypeDescriptionChecker.getInstance();
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTableCellElementImpl hTMLTableCellElementImpl0 = new HTMLTableCellElementImpl(hTMLDocumentImpl0, "G:IPG:$O1");
      // Undeclared exception!
      try {
        recordTypeDescriptionChecker0.checkHeaderSpecification((Element) hTMLTableCellElementImpl0, (Node) hTMLDocumentImpl0, false);
        fail("Expecting exception: System.SystemExitException");
      } catch(System.SystemExitException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      RecordTypeDescriptionChecker recordTypeDescriptionChecker0 = RecordTypeDescriptionChecker.getInstance();
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl((CoreDocumentImpl) null, "%n(#*/upHzVEkh z:");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl((DocumentType) documentTypeImpl0);
      WMLBElementImpl wMLBElementImpl0 = new WMLBElementImpl(wMLDocumentImpl0, "%n(#*/upHzVEkh z:");
      // Undeclared exception!
      try {
        recordTypeDescriptionChecker0.checkLinesSpecification((Element) wMLBElementImpl0, false);
        fail("Expecting exception: System.SystemExitException");
      } catch(System.SystemExitException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      RecordTypeDescriptionChecker recordTypeDescriptionChecker0 = RecordTypeDescriptionChecker.getInstance();
      SOAPEnvelope sOAPEnvelope0 = new SOAPEnvelope();
      DeferredElementNSImpl deferredElementNSImpl0 = (DeferredElementNSImpl)sOAPEnvelope0.getAsDOM();
      // Undeclared exception!
      try {
        recordTypeDescriptionChecker0.checkLinesSpecification((Element) deferredElementNSImpl0, true);
        fail("Expecting exception: System.SystemExitException");
      } catch(System.SystemExitException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      RecordTypeDescriptionChecker recordTypeDescriptionChecker0 = new RecordTypeDescriptionChecker();
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl((DocumentType) null);
      WMLStrongElementImpl wMLStrongElementImpl0 = new WMLStrongElementImpl(wMLDocumentImpl0, ";hBP3['7j^4[z\"");
      // Undeclared exception!
      try {
        recordTypeDescriptionChecker0.checkLinesSpecification((Element) wMLStrongElementImpl0, true);
        fail("Expecting exception: System.SystemExitException");
      } catch(System.SystemExitException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      RecordTypeDescriptionChecker recordTypeDescriptionChecker0 = new RecordTypeDescriptionChecker();
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Object[] objectArray0 = new Object[3];
      recordTypeDescriptionChecker0.checkRecordTypesSpecification((Node) hTMLDocumentImpl0, (Node) hTMLDocumentImpl0, objectArray0, true);
  }

  @Test
  public void test6()  throws Throwable  {
      RecordTypeDescriptionChecker recordTypeDescriptionChecker0 = new RecordTypeDescriptionChecker();
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      hTMLDocumentImpl0.getApplets();
      Object[] objectArray0 = new Object[12];
      // Undeclared exception!
      try {
        recordTypeDescriptionChecker0.checkRecordTypesSpecification((Node) hTMLDocumentImpl0, (Node) hTMLDocumentImpl0, objectArray0, true);
        fail("Expecting exception: System.SystemExitException");
      } catch(System.SystemExitException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      RecordTypeDescriptionChecker recordTypeDescriptionChecker0 = RecordTypeDescriptionChecker.getInstance();
      HTMLMetaElementImpl hTMLMetaElementImpl0 = new HTMLMetaElementImpl(hTMLDocumentImpl0, "");
      // Undeclared exception!
      try {
        recordTypeDescriptionChecker0.checkTrailerSpecification((Element) hTMLMetaElementImpl0, (Node) null, false);
        fail("Expecting exception: System.SystemExitException");
      } catch(System.SystemExitException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      RecordTypeDescriptionChecker recordTypeDescriptionChecker0 = new RecordTypeDescriptionChecker();
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      recordTypeDescriptionChecker0.checkGroupsSpecification((Node) hTMLDocumentImpl0, true);
      assertEquals(false, hTMLDocumentImpl0.hasAttributes());
  }

  @Test
  public void test9()  throws Throwable  {
      RecordTypeDescriptionChecker recordTypeDescriptionChecker0 = new RecordTypeDescriptionChecker();
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      recordTypeDescriptionChecker0.checkGroupsSpecification((Node) hTMLDocumentImpl0, false);
  }

  @Test
  public void test10()  throws Throwable  {
      RecordTypeDescriptionChecker recordTypeDescriptionChecker0 = new RecordTypeDescriptionChecker();
      SOAPFaultElement sOAPFaultElement0 = new SOAPFaultElement();
      String[] stringArray0 = new String[10];
      LinkedList<String> linkedList0 = new LinkedList<String>();
      TreeMap<Element, RecordTypeDescriptionChecker>[] treeMapArray0 = (TreeMap<Element, RecordTypeDescriptionChecker>[]) Array.newInstance(TreeMap.class, 9);
      // Undeclared exception!
      try {
        recordTypeDescriptionChecker0.checkRecordTypeDeclaration((Node) sOAPFaultElement0, 0, 0, "RecordTypeSpec", "RecordTypeSpec", stringArray0, (LinkedList) linkedList0, (LinkedList) linkedList0, (TreeMap[]) treeMapArray0);
        fail("Expecting exception: System.SystemExitException");
      } catch(System.SystemExitException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      RecordTypeDescriptionChecker recordTypeDescriptionChecker0 = new RecordTypeDescriptionChecker();
      SOAP12Constants sOAP12Constants0 = SOAPConstants.SOAP12_CONSTANTS;
      SOAPEnvelope sOAPEnvelope0 = new SOAPEnvelope(true, (SOAPConstants) sOAP12Constants0);
      // Undeclared exception!
      try {
        recordTypeDescriptionChecker0.checkHeaderSpecification((Element) sOAPEnvelope0, (Node) sOAPEnvelope0, true);
        fail("Expecting exception: System.SystemExitException");
      } catch(System.SystemExitException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      RecordTypeDescriptionChecker recordTypeDescriptionChecker0 = RecordTypeDescriptionChecker.getInstance();
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLDirectoryElementImpl hTMLDirectoryElementImpl0 = new HTMLDirectoryElementImpl(hTMLDocumentImpl0, "8Sl|?k9LO*");
      TreeMap<TreeMap<Integer, RecordTypeDescriptionChecker>, String> treeMap0 = new TreeMap<TreeMap<Integer, RecordTypeDescriptionChecker>, String>();
      // Undeclared exception!
      try {
        recordTypeDescriptionChecker0.checkGroupReference((Element) hTMLDirectoryElementImpl0, (Node) hTMLDocumentImpl0, (TreeMap) treeMap0);
        fail("Expecting exception: System.SystemExitException");
      } catch(System.SystemExitException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      RecordTypeDescriptionChecker recordTypeDescriptionChecker0 = new RecordTypeDescriptionChecker();
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl((CoreDocumentImpl) null, "3NHI");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl((DocumentType) documentTypeImpl0);
      WMLBElementImpl wMLBElementImpl0 = new WMLBElementImpl(wMLDocumentImpl0, "3NHI");
      // Undeclared exception!
      try {
        recordTypeDescriptionChecker0.checkGroupSpecification((Element) wMLBElementImpl0);
        fail("Expecting exception: System.SystemExitException");
      } catch(System.SystemExitException e) {
      }
  }

  @Test
  public void test14()  throws Throwable  {
      RecordTypeDescriptionChecker recordTypeDescriptionChecker0 = new RecordTypeDescriptionChecker();
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      LinkedList<TreeMap<Integer, Node>> linkedList1 = new LinkedList<TreeMap<Integer, Node>>();
      TreeMap<Integer, Node> treeMap0 = new TreeMap<Integer, Node>();
      linkedList1.add(treeMap0);
      boolean boolean0 = recordTypeDescriptionChecker0.typeIdsAreUnique(linkedList1, linkedList0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      RecordTypeDescriptionChecker recordTypeDescriptionChecker0 = new RecordTypeDescriptionChecker();
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      LinkedList<TreeMap<Integer, Node>> linkedList1 = new LinkedList<TreeMap<Integer, Node>>();
      TreeMap<Integer, Node> treeMap0 = new TreeMap<Integer, Node>();
      linkedList1.add(treeMap0);
      linkedList1.add(treeMap0);
      // Undeclared exception!
      try {
        recordTypeDescriptionChecker0.typeIdsAreUnique(linkedList1, linkedList0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
      }
  }

  @Test
  public void test16()  throws Throwable  {
      RecordTypeDescriptionChecker recordTypeDescriptionChecker0 = new RecordTypeDescriptionChecker();
      LinkedList<TreeMap<Integer, Node>> linkedList0 = new LinkedList<TreeMap<Integer, Node>>();
      TreeMap<Integer, Node> treeMap0 = new TreeMap<Integer, Node>();
      linkedList0.add(treeMap0);
      // Undeclared exception!
      try {
        recordTypeDescriptionChecker0.typeIdsAreUnique(linkedList0, linkedList0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
      }
  }

  @Test
  public void test17()  throws Throwable  {
      RecordTypeDescriptionChecker recordTypeDescriptionChecker0 = new RecordTypeDescriptionChecker();
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      LinkedList<TreeMap<Integer, Node>> linkedList1 = new LinkedList<TreeMap<Integer, Node>>();
      TreeMap<Integer, Node> treeMap0 = new TreeMap<Integer, Node>();
      linkedList1.add(treeMap0);
      boolean boolean0 = recordTypeDescriptionChecker0.typeIdsAreUnique(linkedList0, linkedList1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      RecordTypeDescriptionChecker recordTypeDescriptionChecker0 = new RecordTypeDescriptionChecker();
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      LinkedList<TreeMap<Integer, Node>> linkedList1 = new LinkedList<TreeMap<Integer, Node>>();
      TreeMap<Integer, Node> treeMap0 = new TreeMap<Integer, Node>();
      linkedList1.add(treeMap0);
      linkedList1.add(treeMap0);
      // Undeclared exception!
      try {
        recordTypeDescriptionChecker0.typeIdsAreUnique(linkedList0, linkedList1);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * java.util.TreeMap cannot be cast to [Ljava.lang.String;
         */
      }
  }

  @Test
  public void test19()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLHtmlElementImpl hTMLHtmlElementImpl0 = (HTMLHtmlElementImpl)hTMLDocumentImpl0.getDocumentElement();
      int int0 = RecordTypeDescriptionChecker.computeRecordLength((Node) hTMLDocumentImpl0, (Node) hTMLHtmlElementImpl0);
      assertEquals(0, int0);
  }

  @Test
  public void test20()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTableElementImpl hTMLTableElementImpl0 = new HTMLTableElementImpl(hTMLDocumentImpl0, "G:IPG:$O1");
      HTMLTableCaptionElementImpl hTMLTableCaptionElementImpl0 = (HTMLTableCaptionElementImpl)hTMLTableElementImpl0.createCaption();
      int int0 = RecordTypeDescriptionChecker.computeGroupLength((Element) hTMLTableCaptionElementImpl0, (Node) hTMLTableElementImpl0);
      assertEquals(0, int0);
  }

  @Test
  public void test21()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLUListElementImpl hTMLUListElementImpl0 = new HTMLUListElementImpl(hTMLDocumentImpl0, ",iUUVxdzm+ {i=cnneo");
      // Undeclared exception!
      try {
        RecordTypeDescriptionChecker.getGroupSpec(",iUUVxdzm+ {i=cnneo", (Node) hTMLUListElementImpl0);
        fail("Expecting exception: System.SystemExitException");
      } catch(System.SystemExitException e) {
      }
  }
}
