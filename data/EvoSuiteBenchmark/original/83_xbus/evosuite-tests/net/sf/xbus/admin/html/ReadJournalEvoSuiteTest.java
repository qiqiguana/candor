/*
 * This file was automatically generated by EvoSuite
 */

package net.sf.xbus.admin.html;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.HashMap;
import net.sf.xbus.admin.html.ReadJournal;
import net.sf.xbus.base.core.XException;
import org.evosuite.runtime.System;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ReadJournalEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ReadJournal readJournal0 = new ReadJournal();
      String string0 = readJournal0.toString();
      assertEquals("0 | null | null | \u0000 | null | null | null | null", string0);
      assertNotNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      ReadJournal readJournal0 = new ReadJournal();
      char char0 = readJournal0.getType();
      assertEquals('\u0000', char0);
  }

  @Test
  public void test2()  throws Throwable  {
      ReadJournal readJournal0 = new ReadJournal();
      String string0 = readJournal0.getResponseMessage();
      assertNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      ReadJournal readJournal0 = new ReadJournal();
      readJournal0.setResponseMessage((String) null);
      assertEquals("0 | null | null | \u0000 | null | null | null | null", readJournal0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      ReadJournal readJournal0 = new ReadJournal();
      readJournal0.setType('k');
      assertEquals("0 | null | null | k | null | null | null | null", readJournal0.toString());
      assertEquals('k', readJournal0.getType());
  }

  @Test
  public void test5()  throws Throwable  {
      ReadJournal readJournal0 = new ReadJournal();
      int int0 = readJournal0.getNumber();
      assertEquals(0, int0);
  }

  @Test
  public void test6()  throws Throwable  {
      ReadJournal readJournal0 = new ReadJournal();
      readJournal0.setRequestTimestamp((String) null);
      assertNull(readJournal0.getMessageId());
  }

  @Test
  public void test7()  throws Throwable  {
      ReadJournal readJournal0 = new ReadJournal();
      String string0 = readJournal0.getResponseTimestamp();
      assertNull(string0);
  }

  @Test
  public void test8()  throws Throwable  {
      ReadJournal readJournal0 = new ReadJournal();
      readJournal0.setRequestMessage((String) null);
      assertNull(readJournal0.getReturncode());
  }

  @Test
  public void test9()  throws Throwable  {
      ReadJournal readJournal0 = new ReadJournal();
      String string0 = readJournal0.getErrormessage();
      assertNull(string0);
  }

  @Test
  public void test10()  throws Throwable  {
      ReadJournal readJournal0 = new ReadJournal();
      readJournal0.setReturncode("9MG~v(m=17;M0");
      assertNull(readJournal0.getMessageId());
  }

  @Test
  public void test11()  throws Throwable  {
      ReadJournal readJournal0 = new ReadJournal();
      String string0 = readJournal0.getRequestMessage();
      assertNull(string0);
  }

  @Test
  public void test12()  throws Throwable  {
      ReadJournal readJournal0 = new ReadJournal();
      int int0 = readJournal0.getErrorcode();
      assertEquals(0, int0);
  }

  @Test
  public void test13()  throws Throwable  {
      ReadJournal readJournal0 = new ReadJournal();
      readJournal0.setSystem("9MG~v(m=17;M0");
      assertNull(readJournal0.getReturncode());
  }

  @Test
  public void test14()  throws Throwable  {
      ReadJournal readJournal0 = new ReadJournal();
      String string0 = readJournal0.getRequestTimestamp();
      assertNull(string0);
  }

  @Test
  public void test15()  throws Throwable  {
      ReadJournal readJournal0 = new ReadJournal();
      String string0 = readJournal0.getMessageId();
      assertNull(string0);
  }

  @Test
  public void test16()  throws Throwable  {
      ReadJournal readJournal0 = new ReadJournal();
      String string0 = readJournal0.getSystem();
      assertNull(string0);
  }

  @Test
  public void test17()  throws Throwable  {
      ReadJournal readJournal0 = new ReadJournal();
      readJournal0.setErrorcode((-16));
      assertEquals(-16, readJournal0.getErrorcode());
  }

  @Test
  public void test18()  throws Throwable  {
      ReadJournal readJournal0 = new ReadJournal();
      readJournal0.setResponseTimestamp((String) null);
      assertEquals(0, readJournal0.getNumber());
  }

  @Test
  public void test19()  throws Throwable  {
      ReadJournal readJournal0 = new ReadJournal();
      String string0 = readJournal0.getFunction();
      assertNull(string0);
  }

  @Test
  public void test20()  throws Throwable  {
      ReadJournal readJournal0 = new ReadJournal();
      readJournal0.setNumber(1660);
      assertEquals("1660 | null | null | \u0000 | null | null | null | null", readJournal0.toString());
      assertEquals(1660, readJournal0.getNumber());
  }

  @Test
  public void test21()  throws Throwable  {
      ReadJournal readJournal0 = new ReadJournal();
      String string0 = readJournal0.getReturncode();
      assertNull(string0);
  }

  @Test
  public void test22()  throws Throwable  {
      ReadJournal readJournal0 = new ReadJournal();
      readJournal0.setMessageId("9MG~v(m=17;M0");
      assertEquals('\u0000', readJournal0.getType());
  }

  @Test
  public void test23()  throws Throwable  {
      ReadJournal readJournal0 = new ReadJournal();
      readJournal0.setFunction((String) null);
      assertNull(readJournal0.getResponseMessage());
  }

  @Test
  public void test24()  throws Throwable  {
      ReadJournal readJournal0 = new ReadJournal();
      readJournal0.setErrormessage((String) null);
      assertNull(readJournal0.getMessageId());
  }

  @Test
  public void test25()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      // Undeclared exception!
      try {
        ReadJournal.readSelected((HashMap) hashMap0, "type", "type");
        fail("Expecting exception: System.SystemExitException");
      } catch(System.SystemExitException e) {
      }
  }

  @Test
  public void test26()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("RequestTimeMax", "RequestTimeMax");
      // Undeclared exception!
      try {
        ReadJournal.readSelected((HashMap) hashMap0, "RequestMessage", "RequestMessage");
        fail("Expecting exception: System.SystemExitException");
      } catch(System.SystemExitException e) {
      }
  }

  @Test
  public void test27()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("RequestMessage", "RequestMessage");
      // Undeclared exception!
      try {
        ReadJournal.readSelected((HashMap) hashMap0, "RequestMessage", "RequestMessage");
        fail("Expecting exception: System.SystemExitException");
      } catch(System.SystemExitException e) {
      }
  }

  @Test
  public void test28()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("ResponseMessage", (Object) "ResponseMessage");
      // Undeclared exception!
      try {
        ReadJournal.readSelected((HashMap) hashMap0, "RequestTimestamp", "RequestTimestamp");
        fail("Expecting exception: System.SystemExitException");
      } catch(System.SystemExitException e) {
      }
  }

  @Test
  public void test29()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("Type", (Object) null);
      // Undeclared exception!
      try {
        ReadJournal.readSelected((HashMap) hashMap0, "Returncode", "System");
        fail("Expecting exception: System.SystemExitException");
      } catch(System.SystemExitException e) {
      }
  }

  @Test
  public void test30()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("System", (Object) null);
      // Undeclared exception!
      try {
        ReadJournal.readSelected((HashMap) hashMap0, "Returncode", "System");
        fail("Expecting exception: System.SystemExitException");
      } catch(System.SystemExitException e) {
      }
  }

  @Test
  public void test31()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("MessageId", (Object) "0 | null | null | \u0000 | null | null | null | null");
      // Undeclared exception!
      try {
        ReadJournal.readSelected((HashMap) hashMap0, "RequestTimestamp", "RequestTimestamp");
        fail("Expecting exception: System.SystemExitException");
      } catch(System.SystemExitException e) {
      }
  }

  @Test
  public void test32()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Function", "Function");
      // Undeclared exception!
      try {
        ReadJournal.readSelected((HashMap) hashMap0, (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * StringEquals is not supposed to work on a null caller
         */
      }
  }

  @Test
  public void test33()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put(" %0VR2;lY7Cf", " %0VR2;lY7Cf");
      // Undeclared exception!
      try {
        ReadJournal.readSelected((HashMap) hashMap0, (String) null, (String) null);
        fail("Expecting exception: System.SystemExitException");
      } catch(System.SystemExitException e) {
      }
  }

  @Test
  public void test34()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("RequestTimeMin", (Object) null);
      hashMap0.put("Returncode", (Object) null);
      // Undeclared exception!
      try {
        ReadJournal.readSelected((HashMap) hashMap0, "Returncode", "System");
        fail("Expecting exception: System.SystemExitException");
      } catch(System.SystemExitException e) {
      }
  }

  @Test
  public void test35()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      // Undeclared exception!
      try {
        ReadJournal.readSelected((HashMap) hashMap0, "MessageId", "MessageId");
        fail("Expecting exception: System.SystemExitException");
      } catch(System.SystemExitException e) {
      }
  }
}
