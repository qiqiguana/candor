/*
 * This file was automatically generated by EvoSuite
 */

package net.sf.xbus.base.xml;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Hashtable;
import javax.xml.soap.SOAPException;
import net.sf.xbus.base.core.XException;
import net.sf.xbus.base.xml.XMLHelper;
import org.apache.axis.message.Detail;
import org.apache.axis.message.RPCParam;
import org.apache.axis.message.SOAPFaultElement;
import org.apache.html.dom.HTMLDocumentImpl;
import org.apache.xerces.dom.DeferredDocumentImpl;
import org.evosuite.runtime.System;
import org.junit.BeforeClass;
import org.w3c.dom.Document;
import org.w3c.dom.Node;

@RunWith(EvoSuiteRunner.class)
public class XMLHelperEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      XMLHelper xMLHelper0 = new XMLHelper();
      assertNotNull(xMLHelper0);
  }

  @Test
  public void test1()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl(true);
      deferredDocumentImpl0.createDeferredEntityReference((String) null, (String) null);
      String string0 = XMLHelper.getTagAttribute((Document) deferredDocumentImpl0, (String) null, (String) null);
      assertNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      SOAPFaultElement sOAPFaultElement0 = new SOAPFaultElement();
      String string0 = XMLHelper.getAttribute((Node) sOAPFaultElement0, "");
      assertNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl(true);
      deferredDocumentImpl0.createDeferredEntityReference((String) null, (String) null);
      String string0 = XMLHelper.getTagCDATA((Document) deferredDocumentImpl0, (String) null);
      assertNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl(true);
      deferredDocumentImpl0.createDeferredEntityReference((String) null, (String) null);
      String string0 = XMLHelper.getTagText((Document) deferredDocumentImpl0, (String) null);
      assertNull(string0);
  }

  @Test
  public void test5()  throws Throwable  {
      Detail detail0 = new Detail();
      Detail detail1 = (Detail)detail0.addTextNode("");
      String string0 = XMLHelper.getNodeText((Node) detail1);
      assertEquals("", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      Detail detail0 = new Detail();
      detail0.addChildElement("", "", "");
      String string0 = XMLHelper.getNodeText((Node) detail0);
      assertNull(string0);
  }

  @Test
  public void test7()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Hashtable<Object, Object> hashtable0 = XMLHelper.getTagTextList((Document) hTMLDocumentImpl0, "NRa'~0 QO&!M0')}D");
      assertNull(hashtable0);
  }

  @Test
  public void test8()  throws Throwable  {
      RPCParam rPCParam0 = new RPCParam("f7Lye0h0", "f7Lye0h0");
      DeferredDocumentImpl deferredDocumentImpl0 = (DeferredDocumentImpl)rPCParam0.getAsDocument();
      Hashtable<Object, Object> hashtable0 = XMLHelper.getTagTextList((Document) deferredDocumentImpl0, "f7Lye0h0");
      assertEquals(true, hashtable0.isEmpty());
  }

  @Test
  public void test9()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      XMLHelper.setTagTextList((Document) hTMLDocumentImpl0, "", (Hashtable) null);
      assertEquals(1, hTMLDocumentImpl0.getLength());
  }

  @Test
  public void test10()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      XMLHelper.setTagText((Document) hTMLDocumentImpl0, "", "");
      assertEquals(true, hTMLDocumentImpl0.hasChildNodes());
  }

  @Test
  public void test11()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      XMLHelper.setTagCDATA((Document) hTMLDocumentImpl0, "", "");
      assertNull(hTMLDocumentImpl0.getDocumentURI());
  }

  @Test
  public void test12()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      XMLHelper.deleteTag((Document) hTMLDocumentImpl0, "");
      assertEquals(false, hTMLDocumentImpl0.getReadOnly());
  }

  @Test
  public void test13()  throws Throwable  {
      Document document0 = XMLHelper.parseXML("", "", "");
      assertNull(document0);
  }

  @Test
  public void test14()  throws Throwable  {
      Document document0 = XMLHelper.parseXML((String) null, (String) null, (String) null);
      assertNull(document0);
  }

  @Test
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try {
        XMLHelper.parseXML("y5uLX{b^)*eXO 8W", "y5uLX{b^)*eXO 8W", "y5uLX{b^)*eXO 8W");
        fail("Expecting exception: System.SystemExitException");
      } catch(System.SystemExitException e) {
      }
  }

  @Test
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try {
        XMLHelper.getDocumentBuilder("", "");
        fail("Expecting exception: System.SystemExitException");
      } catch(System.SystemExitException e) {
      }
  }

  @Test
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try {
        XMLHelper.getDocumentBuilder((String) null, "?b$73o}uCM^$H<B");
        fail("Expecting exception: System.SystemExitException");
      } catch(System.SystemExitException e) {
      }
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = XMLHelper.serializeXML((Document) null, ",");
      assertNull(string0);
  }

  @Test
  public void test19()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      // Undeclared exception!
      try {
        XMLHelper.serializeXML((Document) hTMLDocumentImpl0, "9iYNFM+");
        fail("Expecting exception: System.SystemExitException");
      } catch(System.SystemExitException e) {
      }
  }
}
