/*
 * This file was automatically generated by EvoSuite
 */

package net.sf.xbus.base.xml;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.List;
import javax.xml.soap.SOAPException;
import net.sf.xbus.base.core.XException;
import net.sf.xbus.base.xml.IteratedNodeOperation;
import net.sf.xbus.base.xml.IteratedWhitespaceInElementAndCommentDeletion;
import net.sf.xbus.base.xml.IteratedWhitespaceInElementDeletion;
import net.sf.xbus.base.xml.XDomSupport;
import org.apache.axis.message.SOAPEnvelope;
import org.apache.axis.schema.SchemaVersion;
import org.apache.axis.schema.SchemaVersion2000;
import org.apache.axis.soap.SOAP11Constants;
import org.apache.axis.soap.SOAPConstants;
import org.apache.html.dom.HTMLDocumentImpl;
import org.apache.html.dom.HTMLTableColElementImpl;
import org.apache.wml.dom.WMLDocumentImpl;
import org.apache.xerces.dom.CoreDocumentImpl;
import org.apache.xerces.dom.DocumentImpl;
import org.apache.xerces.dom.DocumentTypeImpl;
import org.apache.xerces.dom.PSVIDocumentImpl;
import org.junit.BeforeClass;
import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.DocumentType;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoSuiteRunner.class)
public class XDomSupportEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      XDomSupport.deleteWhitespaceTextInElementNodes((Document) hTMLDocumentImpl0);
      List<Object> list0 = XDomSupport.getChildNodesByAttrValue((Node) hTMLDocumentImpl0, "{di>F+W?}7)6b\"Bv", "", "");
      assertNotNull(list0);
      assertEquals(0, list0.size());
  }

  @Test
  public void test1()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      XDomSupport.deleteWhitespaceTextInElementNodesAndComments((Document) hTMLDocumentImpl0);
      List<Object> list0 = XDomSupport.getChildNodesByAttrValue((Node) hTMLDocumentImpl0, "HTML", "HTML", "HTML");
      assertEquals(true, list0.isEmpty());
      assertNotNull(list0);
  }

  @Test
  public void test2()  throws Throwable  {
      DocumentImpl documentImpl0 = new DocumentImpl();
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl((CoreDocumentImpl) documentImpl0, "d/.", "d/.", "d/.");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl((DocumentType) documentTypeImpl0);
      List<Object> list0 = XDomSupport.getChildNodesByAttrValue((Node) wMLDocumentImpl0, "d/.", "d/.", "d/.");
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test3()  throws Throwable  {
      try {
        XDomSupport.getChildNodesByAttrValue((Node) null, "", "", "");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Parent node may not be null
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      try {
        XDomSupport.getChildNodesByAttrValue((Node) hTMLDocumentImpl0, (String) null, "{di>F+W?}7)6b\"Bv", "");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Attribute name may not be empty
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      try {
        XDomSupport.getChildNodesByAttrValue((Node) hTMLDocumentImpl0, "", "", "");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Attribute name may not be empty
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      XDomSupport.deleteWhitespaceTextInElementNodes((Document) hTMLDocumentImpl0);
      List<Object> list0 = XDomSupport.getChildNodesByAttrValue((Node) hTMLDocumentImpl0, "[dtd]", "", "{di>F+W?}7)6b\"Bv");
      assertNotNull(list0);
      assertEquals(1, list0.size());
  }

  @Test
  public void test7()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      XDomSupport.deleteWhitespaceTextInElementNodesAndComments((Document) hTMLDocumentImpl0);
      List<Object> list0 = XDomSupport.getChildNodesByAttrValue((Node) hTMLDocumentImpl0, "Mde<9M+o;2<{", "", "HTML");
      assertNotNull(list0);
      assertEquals(false, list0.isEmpty());
  }

  @Test
  public void test8()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      IteratedWhitespaceInElementAndCommentDeletion iteratedWhitespaceInElementAndCommentDeletion0 = new IteratedWhitespaceInElementAndCommentDeletion();
      XDomSupport.traversePostOrder((Document) hTMLDocumentImpl0, (IteratedNodeOperation) iteratedWhitespaceInElementAndCommentDeletion0);
      String string0 = XDomSupport.getNodeText((Node) hTMLDocumentImpl0);
      assertEquals("", string0);
  }

  @Test
  public void test9()  throws Throwable  {
      SOAP11Constants sOAP11Constants0 = SOAPConstants.SOAP11_CONSTANTS;
      SchemaVersion2000 schemaVersion2000_0 = (SchemaVersion2000)SchemaVersion.SCHEMA_2000;
      SOAPEnvelope sOAPEnvelope0 = new SOAPEnvelope((SOAPConstants) sOAP11Constants0, (SchemaVersion) schemaVersion2000_0);
      SOAPEnvelope sOAPEnvelope1 = (SOAPEnvelope)sOAPEnvelope0.addTextNode((String) null);
      // Undeclared exception!
      try {
        XDomSupport.getTrimedNodeText((Node) sOAPEnvelope1);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      try {
        XDomSupport.getChildElementsByValue((Node) null, "V-%/mKR)[>IU", "V-%/mKR)[>IU");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Parent node may not be null
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTableColElementImpl hTMLTableColElementImpl0 = new HTMLTableColElementImpl(hTMLDocumentImpl0, "");
      try {
        XDomSupport.getChildElementsByValue((Node) hTMLTableColElementImpl0, (String) null, "");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Value may not be null
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      IteratedWhitespaceInElementAndCommentDeletion iteratedWhitespaceInElementAndCommentDeletion0 = new IteratedWhitespaceInElementAndCommentDeletion();
      XDomSupport.traversePostOrder((Document) hTMLDocumentImpl0, (IteratedNodeOperation) iteratedWhitespaceInElementAndCommentDeletion0);
      List<Object> list0 = XDomSupport.getChildElementsByValue((Node) hTMLDocumentImpl0, "", "InvalidCharInTextDecl");
      assertNotNull(list0);
      assertEquals(0, list0.size());
  }

  @Test
  public void test13()  throws Throwable  {
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
      DocumentTypeImpl documentTypeImpl0 = (DocumentTypeImpl)pSVIDocumentImpl0.createDocumentType("", "", "");
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl((DocumentType) documentTypeImpl0);
      List<Object> list0 = XDomSupport.getChildElementsByValue((Node) coreDocumentImpl0, "", "");
      assertEquals(true, list0.isEmpty());
      assertNotNull(list0);
  }

  @Test
  public void test14()  throws Throwable  {
      SOAP11Constants sOAP11Constants0 = SOAPConstants.SOAP11_CONSTANTS;
      SchemaVersion2000 schemaVersion2000_0 = (SchemaVersion2000)SchemaVersion.SCHEMA_2000;
      SOAPEnvelope sOAPEnvelope0 = new SOAPEnvelope((SOAPConstants) sOAP11Constants0, (SchemaVersion) schemaVersion2000_0);
      List<Object> list0 = XDomSupport.getChildElementsByValue((Node) sOAPEnvelope0, "+(KUN7}mttaEm@f#E", (String) null);
      assertEquals(true, list0.isEmpty());
      assertNotNull(list0);
  }

  @Test
  public void test15()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      IteratedWhitespaceInElementDeletion iteratedWhitespaceInElementDeletion0 = new IteratedWhitespaceInElementDeletion();
      XDomSupport.traversePreOrder((Document) hTMLDocumentImpl0, (IteratedNodeOperation) iteratedWhitespaceInElementDeletion0);
      List<Object> list0 = XDomSupport.getChildElementsByValue((Node) hTMLDocumentImpl0, "", "");
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test
  public void test16()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      XDomSupport.deleteWhitespaceTextInElementNodesAndComments((Document) hTMLDocumentImpl0);
      List<Object> list0 = XDomSupport.getChildElementsByValue((Node) hTMLDocumentImpl0, "Mde<9M+o;2<{", "HTML");
      assertNotNull(list0);
      assertEquals(0, list0.size());
  }

  @Test
  public void test17()  throws Throwable  {
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
      int int0 = XDomSupport.getNextNodeIndexIgnoringFormatingText((NodeList) pSVIDocumentImpl0, (-1193));
      assertEquals((-1), int0);
  }

  @Test
  public void test18()  throws Throwable  {
      SOAP11Constants sOAP11Constants0 = SOAPConstants.SOAP11_CONSTANTS;
      SchemaVersion2000 schemaVersion2000_0 = (SchemaVersion2000)SchemaVersion.SCHEMA_2000;
      SOAPEnvelope sOAPEnvelope0 = new SOAPEnvelope((SOAPConstants) sOAP11Constants0, (SchemaVersion) schemaVersion2000_0);
      int int0 = XDomSupport.getNextNodeIndexIgnoringFormatingText((NodeList) sOAPEnvelope0, 0);
      assertEquals(0, int0);
  }

  @Test
  public void test19()  throws Throwable  {
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
      XDomSupport.traversePreOrder((Document) pSVIDocumentImpl0, (IteratedNodeOperation) null);
      assertEquals(false, pSVIDocumentImpl0.getStandalone());
  }

  @Test
  public void test20()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      hTMLDocumentImpl0.getAnchors();
      XDomSupport.deleteWhitespaceTextInElementNodesAndComments((Document) hTMLDocumentImpl0);
      assertEquals(false, hTMLDocumentImpl0.getReadOnly());
  }

  @Test
  public void test21()  throws Throwable  {
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
      XDomSupport.traversePostOrder((Document) pSVIDocumentImpl0, (IteratedNodeOperation) null);
      assertEquals(false, pSVIDocumentImpl0.hasAttributes());
  }

  @Test
  public void test22()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      IteratedWhitespaceInElementDeletion iteratedWhitespaceInElementDeletion0 = new IteratedWhitespaceInElementDeletion();
      XDomSupport.traversePreOrder((Document) hTMLDocumentImpl0, (IteratedNodeOperation) iteratedWhitespaceInElementDeletion0);
      XDomSupport.recursivePostOrder((Node) hTMLDocumentImpl0, (IteratedNodeOperation) iteratedWhitespaceInElementDeletion0);
      assertEquals("1.0", hTMLDocumentImpl0.getVersion());
  }

  @Test
  public void test23()  throws Throwable  {
      boolean boolean0 = XDomSupport.isValidTagName("");
      assertEquals(false, boolean0);
  }

  @Test
  public void test24()  throws Throwable  {
      boolean boolean0 = XDomSupport.isValidTagName("[dtd]");
      assertEquals(false, boolean0);
  }

  @Test
  public void test25()  throws Throwable  {
      boolean boolean0 = XDomSupport.isValidTagName("V_K~Dj K");
      assertEquals(false, boolean0);
  }

  @Test
  public void test26()  throws Throwable  {
      boolean boolean0 = XDomSupport.isValidTagName("_[AinrT@g:IVBkah?lX");
      assertEquals(false, boolean0);
  }

  @Test
  public void test27()  throws Throwable  {
      boolean boolean0 = XDomSupport.isValidTagName("kLJ8^|0yduP)^(");
      assertEquals(false, boolean0);
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = XDomSupport.makeTagNameValid("1'ZDot_HpU_A<J|yZYV");
      assertEquals("1ZDot_HpU_AJyZYV", string0);
      assertNotNull(string0);
  }
}
