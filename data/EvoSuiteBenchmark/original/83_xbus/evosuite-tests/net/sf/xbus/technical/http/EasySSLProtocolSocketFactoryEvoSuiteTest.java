/*
 * This file was automatically generated by EvoSuite
 */

package net.sf.xbus.technical.http;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import java.net.BindException;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import net.sf.xbus.technical.http.EasySSLProtocolSocketFactory;
import org.apache.commons.httpclient.ConnectTimeoutException;
import org.apache.commons.httpclient.params.HttpConnectionParams;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class EasySSLProtocolSocketFactoryEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      EasySSLProtocolSocketFactory easySSLProtocolSocketFactory0 = new EasySSLProtocolSocketFactory();
      // Undeclared exception!
      try {
        easySSLProtocolSocketFactory0.createSocket((Socket) null, "", (-319), true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          EasySSLProtocolSocketFactory easySSLProtocolSocketFactory0 = new EasySSLProtocolSocketFactory();
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          try {
            easySSLProtocolSocketFactory0.createSocket("A=Gi)_D&X0I*", 6, (InetAddress) inet4Address0, 6);
            fail("Expecting exception: BindException");
          } catch(BindException e) {
            /*
             * Permission denied
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
      EasySSLProtocolSocketFactory easySSLProtocolSocketFactory0 = new EasySSLProtocolSocketFactory();
      // Undeclared exception!
      try {
        easySSLProtocolSocketFactory0.createSocket((String) null, 8);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * hostname can't be null
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      EasySSLProtocolSocketFactory easySSLProtocolSocketFactory0 = new EasySSLProtocolSocketFactory();
      int int0 = easySSLProtocolSocketFactory0.hashCode();
      assertEquals(133062524, int0);
  }

  @Test
  public void test4()  throws Throwable  {
      EasySSLProtocolSocketFactory easySSLProtocolSocketFactory0 = new EasySSLProtocolSocketFactory();
      HttpConnectionParams httpConnectionParams0 = new HttpConnectionParams();
      try {
        easySSLProtocolSocketFactory0.createSocket("|g", 87, (InetAddress) null, 87, httpConnectionParams0);
        fail("Expecting exception: BindException");
      } catch(BindException e) {
        /*
         * Permission denied
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      EasySSLProtocolSocketFactory easySSLProtocolSocketFactory0 = new EasySSLProtocolSocketFactory();
      Inet4Address inet4Address0 = (Inet4Address)InetAddress.getByName("");
      // Undeclared exception!
      try {
        easySSLProtocolSocketFactory0.createSocket("", 1531, (InetAddress) inet4Address0, 1531, (HttpConnectionParams) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Parameters may not be null
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          EasySSLProtocolSocketFactory easySSLProtocolSocketFactory0 = new EasySSLProtocolSocketFactory();
          HttpConnectionParams httpConnectionParams0 = new HttpConnectionParams();
          httpConnectionParams0.setConnectionTimeout(87);
          // Undeclared exception!
          try {
            easySSLProtocolSocketFactory0.createSocket("|g", 87, (InetAddress) null, 87, httpConnectionParams0);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.net.SocketPermission |g resolve)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkConnect(SecurityManager.java:1031)
             * java.net.InetAddress.getAllByName0(InetAddress.java:1145)
             * java.net.InetAddress.getAllByName(InetAddress.java:1083)
             * java.net.InetAddress.getAllByName(InetAddress.java:1019)
             * java.net.InetAddress.getByName(InetAddress.java:969)
             * java.net.InetSocketAddress.<init>(InetSocketAddress.java:124)
             * net.sf.xbus.technical.http.EasySSLProtocolSocketFactory.createSocket(EasySSLProtocolSocketFactory.java:201)
             * sun.reflect.GeneratedMethodAccessor155.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
      EasySSLProtocolSocketFactory easySSLProtocolSocketFactory0 = new EasySSLProtocolSocketFactory();
      boolean boolean0 = easySSLProtocolSocketFactory0.equals((Object) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      EasySSLProtocolSocketFactory easySSLProtocolSocketFactory0 = new EasySSLProtocolSocketFactory();
      boolean boolean0 = easySSLProtocolSocketFactory0.equals((Object) "http.socket.receivebuffer");
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      EasySSLProtocolSocketFactory easySSLProtocolSocketFactory0 = new EasySSLProtocolSocketFactory();
      boolean boolean0 = easySSLProtocolSocketFactory0.equals((Object) easySSLProtocolSocketFactory0);
      assertEquals(true, boolean0);
  }
}
