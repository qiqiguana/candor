/*
 * This file was automatically generated by EvoSuite
 */

package org.firebirdsql.jdbc.field;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.sql.SQLException;
import org.firebirdsql.jdbc.FBSQLException;
import org.firebirdsql.jdbc.field.TranslatingReader;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TranslatingReaderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      FileDescriptor fileDescriptor0 = FileDescriptor.in;
      FileInputStream fileInputStream0 = new FileInputStream(fileDescriptor0);
      try {
        TranslatingReader.getInstance((InputStream) fileInputStream0, (String) null, "!U/<M!+");
        fail("Expecting exception: FBSQLException");
      } catch(FBSQLException e) {
        /*
         * Character translation !U/<M!+ could not be found.
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      try {
        TranslatingReader.getInstance((InputStream) pushbackInputStream0, "Cp866", "Cp866");
        fail("Expecting exception: FBSQLException");
      } catch(FBSQLException e) {
        /*
         * Character translation Cp866 could not be found.
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      TranslatingReader translatingReader0 = TranslatingReader.getInstance((InputStream) byteArrayInputStream0, "Cp437", (String) null);
      assertEquals("Cp437", translatingReader0.getEncoding());
      assertNotNull(translatingReader0);
  }

  @Test
  public void test3()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1712);
      TranslatingReader translatingReader0 = TranslatingReader.getInstance((InputStream) pipedInputStream0, (String) null, (String) null);
      try {
        translatingReader0.read();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Pipe not connected
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      TranslatingReader translatingReader0 = TranslatingReader.getInstance((InputStream) byteArrayInputStream0, (String) null, (String) null);
      assertEquals(0, byteArrayInputStream0.available());
      
      char[] charArray0 = new char[9];
      int int0 = translatingReader0.read(charArray0);
      assertEquals(9, int0);
  }
}
