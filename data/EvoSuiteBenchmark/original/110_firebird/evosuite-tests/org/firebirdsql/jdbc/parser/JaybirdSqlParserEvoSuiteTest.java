/*
 * This file was automatically generated by EvoSuite
 */

package org.firebirdsql.jdbc.parser;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import org.antlr.runtime.ANTLRFileStream;
import org.antlr.runtime.ANTLRInputStream;
import org.antlr.runtime.ANTLRReaderStream;
import org.antlr.runtime.ANTLRStringStream;
import org.antlr.runtime.BufferedTokenStream;
import org.antlr.runtime.CharStream;
import org.antlr.runtime.CommonTokenStream;
import org.antlr.runtime.LegacyCommonTokenStream;
import org.antlr.runtime.Parser;
import org.antlr.runtime.RecognitionException;
import org.antlr.runtime.RecognizerSharedState;
import org.antlr.runtime.TokenRewriteStream;
import org.antlr.runtime.TokenSource;
import org.antlr.runtime.TokenStream;
import org.firebirdsql.jdbc.parser.JaybirdSqlLexer;
import org.firebirdsql.jdbc.parser.JaybirdSqlParser;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class JaybirdSqlParserEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      JaybirdSqlParser.insertValues_return jaybirdSqlParser_insertValues_return0 = new JaybirdSqlParser.insertValues_return();
      assertNotNull(jaybirdSqlParser_insertValues_return0);
  }

  @Test
  public void test1()  throws Throwable  {
      ANTLRFileStream aNTLRFileStream0 = new ANTLRFileStream((String) null, "?mU64Fvx|]Hkoln&c");
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRFileStream0, recognizerSharedState0);
      TokenRewriteStream tokenRewriteStream0 = new TokenRewriteStream((TokenSource) jaybirdSqlLexer0, 0);
      JaybirdSqlParser jaybirdSqlParser0 = new JaybirdSqlParser((TokenStream) tokenRewriteStream0, recognizerSharedState0);
      jaybirdSqlParser0.nonCharType();
      assertEquals(1, recognizerSharedState0.syntaxErrors);
      assertEquals(1, jaybirdSqlLexer0.getNumberOfSyntaxErrors());
  }

  @Test
  public void test2()  throws Throwable  {
      LegacyCommonTokenStream legacyCommonTokenStream0 = new LegacyCommonTokenStream((TokenSource) null);
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      JaybirdSqlParser jaybirdSqlParser0 = new JaybirdSqlParser((TokenStream) legacyCommonTokenStream0, recognizerSharedState0);
      // Undeclared exception!
      try {
        jaybirdSqlParser0.substringFunction();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      ANTLRInputStream aNTLRInputStream0 = new ANTLRInputStream();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRInputStream0, recognizerSharedState0);
      BufferedTokenStream bufferedTokenStream0 = new BufferedTokenStream((TokenSource) jaybirdSqlLexer0);
      JaybirdSqlParser jaybirdSqlParser0 = new JaybirdSqlParser((TokenStream) bufferedTokenStream0);
      jaybirdSqlParser0.charSetCharType();
      assertEquals(1, jaybirdSqlParser0.getNumberOfSyntaxErrors());
      assertEquals(2, jaybirdSqlParser0.getMismatchCount());
  }

  @Test
  public void test4()  throws Throwable  {
      ANTLRInputStream aNTLRInputStream0 = new ANTLRInputStream();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRInputStream0, recognizerSharedState0);
      BufferedTokenStream bufferedTokenStream0 = new BufferedTokenStream((TokenSource) jaybirdSqlLexer0);
      JaybirdSqlParser jaybirdSqlParser0 = new JaybirdSqlParser((TokenStream) bufferedTokenStream0);
      jaybirdSqlParser0.simpleValue();
      assertEquals(0, bufferedTokenStream0.range());
      assertEquals(0, bufferedTokenStream0.index());
  }

  @Test
  public void test5()  throws Throwable  {
      JaybirdSqlParser.simpleValue_return jaybirdSqlParser_simpleValue_return0 = new JaybirdSqlParser.simpleValue_return();
      Object object0 = jaybirdSqlParser_simpleValue_return0.getTree();
      assertNull(object0);
  }

  @Test
  public void test6()  throws Throwable  {
      ANTLRFileStream aNTLRFileStream0 = new ANTLRFileStream((String) null, "?mU64Fvx|]Hkoln&c");
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRFileStream0, recognizerSharedState0);
      TokenRewriteStream tokenRewriteStream0 = new TokenRewriteStream((TokenSource) jaybirdSqlLexer0, 0);
      JaybirdSqlParser jaybirdSqlParser0 = new JaybirdSqlParser((TokenStream) tokenRewriteStream0, recognizerSharedState0);
      jaybirdSqlParser0.extractFunction();
      assertEquals(2, jaybirdSqlParser0.getMismatchCount());
      assertEquals(1, jaybirdSqlLexer0.getNumberOfSyntaxErrors());
  }

  @Test
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ANTLRInputStream aNTLRInputStream0 = new ANTLRInputStream((InputStream) byteArrayInputStream0);
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRInputStream0);
      TokenRewriteStream tokenRewriteStream0 = new TokenRewriteStream((TokenSource) jaybirdSqlLexer0);
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      JaybirdSqlParser jaybirdSqlParser0 = new JaybirdSqlParser((TokenStream) tokenRewriteStream0, recognizerSharedState0);
      jaybirdSqlParser0.arraySpec();
      assertEquals(true, recognizerSharedState0.errorRecovery);
      assertEquals(2, jaybirdSqlParser0.getMismatchCount());
  }

  @Test
  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ANTLRInputStream aNTLRInputStream0 = new ANTLRInputStream((InputStream) byteArrayInputStream0);
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRInputStream0);
      TokenRewriteStream tokenRewriteStream0 = new TokenRewriteStream((TokenSource) jaybirdSqlLexer0);
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      JaybirdSqlParser jaybirdSqlParser0 = new JaybirdSqlParser((TokenStream) tokenRewriteStream0, recognizerSharedState0);
      // Undeclared exception!
      try {
        jaybirdSqlParser0.selectClause();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      ANTLRInputStream aNTLRInputStream0 = new ANTLRInputStream();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRInputStream0, recognizerSharedState0);
      BufferedTokenStream bufferedTokenStream0 = new BufferedTokenStream((TokenSource) jaybirdSqlLexer0);
      JaybirdSqlParser jaybirdSqlParser0 = new JaybirdSqlParser((TokenStream) bufferedTokenStream0);
      jaybirdSqlParser0.dataTypeDescriptor();
      assertEquals(0, bufferedTokenStream0.range());
      assertEquals(1, jaybirdSqlParser0.getNumberOfSyntaxErrors());
  }

  @Test
  public void test10()  throws Throwable  {
      ANTLRFileStream aNTLRFileStream0 = new ANTLRFileStream((String) null, "?mU64Fvx|]Hkoln&c");
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRFileStream0, recognizerSharedState0);
      TokenRewriteStream tokenRewriteStream0 = new TokenRewriteStream((TokenSource) jaybirdSqlLexer0, 0);
      JaybirdSqlParser jaybirdSqlParser0 = new JaybirdSqlParser((TokenStream) tokenRewriteStream0, recognizerSharedState0);
      jaybirdSqlParser0.fullIdentifier();
      assertEquals(true, recognizerSharedState0.errorRecovery);
      assertEquals(2, jaybirdSqlParser0.getMismatchCount());
  }

  @Test
  public void test11()  throws Throwable  {
      JaybirdSqlParser.trimSpecification_return jaybirdSqlParser_trimSpecification_return0 = new JaybirdSqlParser.trimSpecification_return();
      Object object0 = jaybirdSqlParser_trimSpecification_return0.getTree();
      assertNull(object0);
  }

  @Test
  public void test12()  throws Throwable  {
      JaybirdSqlParser.blobSubtype_return jaybirdSqlParser_blobSubtype_return0 = new JaybirdSqlParser.blobSubtype_return();
      assertNotNull(jaybirdSqlParser_blobSubtype_return0);
  }

  @Test
  public void test13()  throws Throwable  {
      JaybirdSqlParser.nonArrayType_return jaybirdSqlParser_nonArrayType_return0 = new JaybirdSqlParser.nonArrayType_return();
      Object object0 = jaybirdSqlParser_nonArrayType_return0.getTree();
      assertNull(object0);
  }

  @Test
  public void test14()  throws Throwable  {
      CommonTokenStream commonTokenStream0 = new CommonTokenStream();
      JaybirdSqlParser jaybirdSqlParser0 = new JaybirdSqlParser((TokenStream) commonTokenStream0);
      // Undeclared exception!
      try {
        jaybirdSqlParser0.tableName();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test15()  throws Throwable  {
      ANTLRReaderStream aNTLRReaderStream0 = new ANTLRReaderStream();
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRReaderStream0);
      BufferedTokenStream bufferedTokenStream0 = new BufferedTokenStream((TokenSource) jaybirdSqlLexer0);
      JaybirdSqlParser jaybirdSqlParser0 = new JaybirdSqlParser((TokenStream) bufferedTokenStream0);
      jaybirdSqlParser0.valueList();
      assertEquals(0, bufferedTokenStream0.range());
      assertEquals(1, jaybirdSqlParser0.getNumberOfSyntaxErrors());
  }

  @Test
  public void test16()  throws Throwable  {
      JaybirdSqlParser.valueList_return jaybirdSqlParser_valueList_return0 = new JaybirdSqlParser.valueList_return();
      Object object0 = jaybirdSqlParser_valueList_return0.getTree();
      assertNull(object0);
  }

  @Test
  public void test17()  throws Throwable  {
      ANTLRInputStream aNTLRInputStream0 = new ANTLRInputStream();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRInputStream0, recognizerSharedState0);
      BufferedTokenStream bufferedTokenStream0 = new BufferedTokenStream((TokenSource) jaybirdSqlLexer0);
      JaybirdSqlParser jaybirdSqlParser0 = new JaybirdSqlParser((TokenStream) bufferedTokenStream0);
      Parser[] parserArray0 = jaybirdSqlParser0.getDelegates();
      assertNotNull(parserArray0);
  }

  @Test
  public void test18()  throws Throwable  {
      JaybirdSqlParser.trimFunction_return jaybirdSqlParser_trimFunction_return0 = new JaybirdSqlParser.trimFunction_return();
      assertNotNull(jaybirdSqlParser_trimFunction_return0);
  }

  @Test
  public void test19()  throws Throwable  {
      ANTLRInputStream aNTLRInputStream0 = new ANTLRInputStream();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRInputStream0, recognizerSharedState0);
      BufferedTokenStream bufferedTokenStream0 = new BufferedTokenStream((TokenSource) jaybirdSqlLexer0);
      JaybirdSqlParser jaybirdSqlParser0 = new JaybirdSqlParser((TokenStream) bufferedTokenStream0);
      jaybirdSqlParser0.assignments();
      assertEquals(1, jaybirdSqlParser0.getNumberOfSyntaxErrors());
      assertEquals(2, jaybirdSqlParser0.getMismatchCount());
  }

  @Test
  public void test20()  throws Throwable  {
      JaybirdSqlParser.assignments_return jaybirdSqlParser_assignments_return0 = new JaybirdSqlParser.assignments_return();
      Object object0 = jaybirdSqlParser_assignments_return0.getTree();
      assertNull(object0);
  }

  @Test
  public void test21()  throws Throwable  {
      JaybirdSqlParser.defaultValuesClause_return jaybirdSqlParser_defaultValuesClause_return0 = new JaybirdSqlParser.defaultValuesClause_return();
      Object object0 = jaybirdSqlParser_defaultValuesClause_return0.getTree();
      assertNull(object0);
  }

  @Test
  public void test22()  throws Throwable  {
      JaybirdSqlParser.simpleType_return jaybirdSqlParser_simpleType_return0 = new JaybirdSqlParser.simpleType_return();
      Object object0 = jaybirdSqlParser_simpleType_return0.getTree();
      assertNull(object0);
  }

  @Test
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)58;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ANTLRInputStream aNTLRInputStream0 = new ANTLRInputStream((InputStream) byteArrayInputStream0);
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRInputStream0);
      TokenRewriteStream tokenRewriteStream0 = new TokenRewriteStream((TokenSource) jaybirdSqlLexer0);
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      JaybirdSqlParser jaybirdSqlParser0 = new JaybirdSqlParser((TokenStream) tokenRewriteStream0, recognizerSharedState0);
      jaybirdSqlParser0.returningClause();
      assertEquals(1, recognizerSharedState0.syntaxErrors);
      assertEquals(2, jaybirdSqlParser0.getMismatchCount());
  }

  @Test
  public void test24()  throws Throwable  {
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream("L#-fN");
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRStringStream0, recognizerSharedState0);
      CommonTokenStream commonTokenStream0 = new CommonTokenStream((TokenSource) jaybirdSqlLexer0);
      JaybirdSqlParser jaybirdSqlParser0 = new JaybirdSqlParser((TokenStream) commonTokenStream0, recognizerSharedState0);
      JaybirdSqlParser.blobSegSize_return jaybirdSqlParser_blobSegSize_return0 = jaybirdSqlParser0.blobSegSize();
      jaybirdSqlParser_blobSegSize_return0.getTree();
      assertEquals(0, recognizerSharedState0.lastErrorIndex);
      assertEquals(2, jaybirdSqlParser0.getMismatchCount());
  }

  @Test
  public void test25()  throws Throwable  {
      JaybirdSqlParser.castExpression_return jaybirdSqlParser_castExpression_return0 = new JaybirdSqlParser.castExpression_return();
      assertNotNull(jaybirdSqlParser_castExpression_return0);
  }

  @Test
  public void test26()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      JaybirdSqlParser jaybirdSqlParser0 = new JaybirdSqlParser((TokenStream) null, recognizerSharedState0);
      // Undeclared exception!
      try {
        jaybirdSqlParser0.nullValue();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test27()  throws Throwable  {
      JaybirdSqlParser.arrayType_return jaybirdSqlParser_arrayType_return0 = new JaybirdSqlParser.arrayType_return();
      assertNotNull(jaybirdSqlParser_arrayType_return0);
  }

  @Test
  public void test28()  throws Throwable  {
      JaybirdSqlParser.updateStatement_return jaybirdSqlParser_updateStatement_return0 = new JaybirdSqlParser.updateStatement_return();
      assertNotNull(jaybirdSqlParser_updateStatement_return0);
  }

  @Test
  public void test29()  throws Throwable  {
      JaybirdSqlParser.updateOrInsertStatement_return jaybirdSqlParser_updateOrInsertStatement_return0 = new JaybirdSqlParser.updateOrInsertStatement_return();
      Object object0 = jaybirdSqlParser_updateOrInsertStatement_return0.getTree();
      assertNull(object0);
  }

  @Test
  public void test30()  throws Throwable  {
      JaybirdSqlParser.charType_return jaybirdSqlParser_charType_return0 = new JaybirdSqlParser.charType_return();
      assertNotNull(jaybirdSqlParser_charType_return0);
  }

  @Test
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ANTLRInputStream aNTLRInputStream0 = new ANTLRInputStream((InputStream) byteArrayInputStream0);
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRInputStream0);
      TokenRewriteStream tokenRewriteStream0 = new TokenRewriteStream((TokenSource) jaybirdSqlLexer0);
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      JaybirdSqlParser jaybirdSqlParser0 = new JaybirdSqlParser((TokenStream) tokenRewriteStream0, recognizerSharedState0);
      JaybirdSqlParser.returningClause_return jaybirdSqlParser_returningClause_return0 = jaybirdSqlParser0.returningClause();
      jaybirdSqlParser_returningClause_return0.getTree();
      assertEquals(2, jaybirdSqlParser0.getMismatchCount());
  }

  @Test
  public void test32()  throws Throwable  {
      CommonTokenStream commonTokenStream0 = new CommonTokenStream((TokenSource) null, (-1808));
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      JaybirdSqlParser jaybirdSqlParser0 = new JaybirdSqlParser((TokenStream) commonTokenStream0, recognizerSharedState0);
      // Undeclared exception!
      try {
        jaybirdSqlParser0.blobType();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test33()  throws Throwable  {
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream("L#-fN");
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRStringStream0, recognizerSharedState0);
      CommonTokenStream commonTokenStream0 = new CommonTokenStream((TokenSource) jaybirdSqlLexer0);
      JaybirdSqlParser jaybirdSqlParser0 = new JaybirdSqlParser((TokenStream) commonTokenStream0, recognizerSharedState0);
      jaybirdSqlParser0.parameter();
      assertEquals(1, commonTokenStream0.range());
      assertEquals(2, jaybirdSqlParser0.getMismatchCount());
  }

  @Test
  public void test34()  throws Throwable  {
      JaybirdSqlParser.nextValueExpression_return jaybirdSqlParser_nextValueExpression_return0 = new JaybirdSqlParser.nextValueExpression_return();
      Object object0 = jaybirdSqlParser_nextValueExpression_return0.getTree();
      assertNull(object0);
  }

  @Test
  public void test35()  throws Throwable  {
      JaybirdSqlParser.arrayElement_return jaybirdSqlParser_arrayElement_return0 = new JaybirdSqlParser.arrayElement_return();
      Object object0 = jaybirdSqlParser_arrayElement_return0.getTree();
      assertNull(object0);
  }

  @Test
  public void test36()  throws Throwable  {
      JaybirdSqlParser.deleteStatement_return jaybirdSqlParser_deleteStatement_return0 = new JaybirdSqlParser.deleteStatement_return();
      assertNotNull(jaybirdSqlParser_deleteStatement_return0);
  }

  @Test
  public void test37()  throws Throwable  {
      JaybirdSqlParser.insertStatement_return jaybirdSqlParser_insertStatement_return0 = new JaybirdSqlParser.insertStatement_return();
      assertNotNull(jaybirdSqlParser_insertStatement_return0);
  }

  @Test
  public void test38()  throws Throwable  {
      TokenRewriteStream tokenRewriteStream0 = new TokenRewriteStream((TokenSource) null, 0);
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      JaybirdSqlParser jaybirdSqlParser0 = new JaybirdSqlParser((TokenStream) tokenRewriteStream0, recognizerSharedState0);
      // Undeclared exception!
      try {
        jaybirdSqlParser0.insertColumns();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test39()  throws Throwable  {
      ANTLRReaderStream aNTLRReaderStream0 = new ANTLRReaderStream();
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRReaderStream0);
      BufferedTokenStream bufferedTokenStream0 = new BufferedTokenStream((TokenSource) jaybirdSqlLexer0);
      JaybirdSqlParser jaybirdSqlParser0 = new JaybirdSqlParser((TokenStream) bufferedTokenStream0);
      jaybirdSqlParser0.statement();
      assertEquals(0, bufferedTokenStream0.range());
      assertEquals(1, jaybirdSqlParser0.getNumberOfSyntaxErrors());
  }

  @Test
  public void test40()  throws Throwable  {
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream("L#-fN");
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRStringStream0, recognizerSharedState0);
      CommonTokenStream commonTokenStream0 = new CommonTokenStream((TokenSource) jaybirdSqlLexer0);
      JaybirdSqlParser jaybirdSqlParser0 = new JaybirdSqlParser((TokenStream) commonTokenStream0, recognizerSharedState0);
      jaybirdSqlParser0.updateOrInsertStatement();
      assertEquals(true, recognizerSharedState0.errorRecovery);
      assertEquals(2, jaybirdSqlParser0.getMismatchCount());
  }

  @Test
  public void test41()  throws Throwable  {
      ANTLRFileStream aNTLRFileStream0 = new ANTLRFileStream((String) null, "?mU64Fvx|]Hkoln&c");
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRFileStream0, recognizerSharedState0);
      TokenRewriteStream tokenRewriteStream0 = new TokenRewriteStream((TokenSource) jaybirdSqlLexer0, 0);
      JaybirdSqlParser jaybirdSqlParser0 = new JaybirdSqlParser((TokenStream) tokenRewriteStream0, recognizerSharedState0);
      jaybirdSqlParser0.nonArrayType();
      assertEquals(1, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.lastErrorIndex);
  }

  @Test
  public void test42()  throws Throwable  {
      ANTLRInputStream aNTLRInputStream0 = new ANTLRInputStream();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRInputStream0, recognizerSharedState0);
      BufferedTokenStream bufferedTokenStream0 = new BufferedTokenStream((TokenSource) jaybirdSqlLexer0);
      JaybirdSqlParser jaybirdSqlParser0 = new JaybirdSqlParser((TokenStream) bufferedTokenStream0);
      jaybirdSqlParser0.arrayElement();
      assertEquals(1, bufferedTokenStream0.range());
      assertEquals(2, jaybirdSqlParser0.getMismatchCount());
  }

  @Test
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)58;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ANTLRInputStream aNTLRInputStream0 = new ANTLRInputStream((InputStream) byteArrayInputStream0);
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRInputStream0);
      TokenRewriteStream tokenRewriteStream0 = new TokenRewriteStream((TokenSource) jaybirdSqlLexer0);
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      JaybirdSqlParser jaybirdSqlParser0 = new JaybirdSqlParser((TokenStream) tokenRewriteStream0, recognizerSharedState0);
      assertNotNull(jaybirdSqlParser0);
      
      jaybirdSqlParser0.selectClause();
      assertEquals(2, jaybirdSqlParser0.getMismatchCount());
  }
}
