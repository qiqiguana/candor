/*
 * This file was automatically generated by EvoSuite
 */

package org.firebirdsql.jdbc.field;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.InputStreamReader;
import java.sql.Clob;
import java.sql.SQLException;
import org.firebirdsql.jdbc.FBCachedBlob;
import org.firebirdsql.jdbc.FBDriverNotCapableException;
import org.firebirdsql.jdbc.FBSQLException;
import org.firebirdsql.jdbc.field.FBCachedClob;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class FBCachedClobEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      FBCachedBlob fBCachedBlob0 = new FBCachedBlob(byteArray0);
      FBCachedClob fBCachedClob0 = new FBCachedClob(fBCachedBlob0, "!{4#ksMSw=K3P|<aF");
      try {
        fBCachedClob0.setString((long) (byte) (-56), "!{4#ksMSw=K3P|<aF", (int) (byte)0, (int) (byte) (-56));
        fail("Expecting exception: FBSQLException");
      } catch(FBSQLException e) {
        /*
         * Clob in auto-commit mode is read-only.
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      FBCachedBlob fBCachedBlob0 = new FBCachedBlob(byteArray0);
      FBCachedClob fBCachedClob0 = new FBCachedClob(fBCachedBlob0, "4?2YO~@W!|,");
      try {
        fBCachedClob0.setString((long) (byte) (-109), "4?2YO~@W!|,");
        fail("Expecting exception: FBSQLException");
      } catch(FBSQLException e) {
        /*
         * Clob in auto-commit mode is read-only.
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FBCachedBlob fBCachedBlob0 = new FBCachedBlob(byteArray0);
      FBCachedClob fBCachedClob0 = new FBCachedClob(fBCachedBlob0, "%Lk#'W[yUGr<wv$!a");
      try {
        fBCachedClob0.setAsciiStream((long) (byte)0);
        fail("Expecting exception: FBSQLException");
      } catch(FBSQLException e) {
        /*
         * Clob in auto-commit mode is read-only.
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FBCachedBlob fBCachedBlob0 = new FBCachedBlob(byteArray0);
      FBCachedClob fBCachedClob0 = new FBCachedClob(fBCachedBlob0, "C9");
      try {
        fBCachedClob0.position((Clob) fBCachedClob0, (long) (byte)37);
        fail("Expecting exception: FBSQLException");
      } catch(FBSQLException e) {
        /*
         * Not implemented
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      FBCachedClob fBCachedClob0 = new FBCachedClob((FBCachedBlob) null, "");
      try {
        fBCachedClob0.getSubString((long) (byte) (-119), (int) (byte) (-119));
        fail("Expecting exception: FBSQLException");
      } catch(FBSQLException e) {
        /*
         * Not implemented
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      FBCachedClob fBCachedClob0 = new FBCachedClob((FBCachedBlob) null, "T");
      // Undeclared exception!
      try {
        fBCachedClob0.getAsciiStream();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      FBCachedBlob fBCachedBlob0 = new FBCachedBlob(byteArray0);
      FBCachedClob fBCachedClob0 = new FBCachedClob(fBCachedBlob0, "");
      try {
        fBCachedClob0.length();
        fail("Expecting exception: FBSQLException");
      } catch(FBSQLException e) {
        /*
         * Not implemented
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FBCachedBlob fBCachedBlob0 = new FBCachedBlob(byteArray0);
      FBCachedClob fBCachedClob0 = new FBCachedClob(fBCachedBlob0, (String) null);
      fBCachedClob0.free();
      assertEquals((-1L), fBCachedBlob0.length());
  }

  @Test
  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      FBCachedBlob fBCachedBlob0 = new FBCachedBlob(byteArray0);
      FBCachedClob fBCachedClob0 = new FBCachedClob(fBCachedBlob0, "' like ? escape '' ");
      try {
        fBCachedClob0.setCharacterStream((long) (byte)29);
        fail("Expecting exception: FBSQLException");
      } catch(FBSQLException e) {
        /*
         * Clob in auto-commit mode is read-only.
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FBCachedBlob fBCachedBlob0 = new FBCachedBlob(byteArray0);
      FBCachedClob fBCachedClob0 = new FBCachedClob(fBCachedBlob0, "_1bJ&seBiR!KP*D");
      try {
        fBCachedClob0.truncate((long) (byte)0);
        fail("Expecting exception: FBDriverNotCapableException");
      } catch(FBDriverNotCapableException e) {
        /*
         * Not yet implemented.
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      FBCachedBlob fBCachedBlob0 = new FBCachedBlob(byteArray0);
      FBCachedClob fBCachedClob0 = new FBCachedClob(fBCachedBlob0, "I");
      try {
        fBCachedClob0.position("I", (long) (byte) (-1));
        fail("Expecting exception: FBSQLException");
      } catch(FBSQLException e) {
        /*
         * Not implemented
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[32];
      FBCachedBlob fBCachedBlob0 = new FBCachedBlob(byteArray0);
      FBCachedClob fBCachedClob0 = new FBCachedClob(fBCachedBlob0, "[zi");
      try {
        fBCachedClob0.getCharacterStream();
        fail("Expecting exception: FBSQLException");
      } catch(FBSQLException e) {
        /*
         * Exception. [zi
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FBCachedBlob fBCachedBlob0 = new FBCachedBlob(byteArray0);
      FBCachedClob fBCachedClob0 = new FBCachedClob(fBCachedBlob0, (String) null);
      InputStreamReader inputStreamReader0 = (InputStreamReader)fBCachedClob0.getCharacterStream();
      assertEquals(0, inputStreamReader0.read());
  }
}
