/*
 * This file was automatically generated by EvoSuite
 */

package org.firebirdsql.jdbc;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.sql.Connection;
import java.sql.DriverPropertyInfo;
import java.sql.SQLException;
import java.util.Properties;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.firebirdsql.jca.FBManagedConnectionFactory;
import org.firebirdsql.jdbc.FBConnectionProperties;
import org.firebirdsql.jdbc.FBDriver;
import org.firebirdsql.jdbc.FBSQLException;
import org.firebirdsql.jdbc.FirebirdConnectionProperties;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class AbstractDriverEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      FBDriver fBDriver0 = new FBDriver();
      int int0 = fBDriver0.getMinorVersion();
      assertEquals(0, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      FBDriver fBDriver0 = new FBDriver();
      Properties properties0 = new Properties();
      DriverPropertyInfo[] driverPropertyInfoArray0 = fBDriver0.getPropertyInfo("jdbc:firebirdsql:java:You cannot commit a closed connecton.", properties0);
      assertNotNull(driverPropertyInfoArray0);
  }

  @Test
  public void test2()  throws Throwable  {
      FBDriver fBDriver0 = new FBDriver();
      FBConnectionProperties fBConnectionProperties0 = (FBConnectionProperties)fBDriver0.newConnectionProperties();
      try {
        fBDriver0.connect((FirebirdConnectionProperties) fBConnectionProperties0);
        fail("Expecting exception: FBSQLException");
      } catch(FBSQLException e) {
        /*
         * GDS Exception. 0. Connection string missing
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      FBDriver fBDriver0 = new FBDriver();
      boolean boolean0 = fBDriver0.jdbcCompliant();
      assertEquals(true, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      FBDriver fBDriver0 = new FBDriver();
      int int0 = fBDriver0.getMajorVersion();
      assertEquals(2, int0);
  }

  @Test
  public void test5()  throws Throwable  {
      FBDriver fBDriver0 = new FBDriver();
      Properties properties0 = new Properties();
      Connection connection0 = fBDriver0.connect("ThisGstatement is alread", properties0);
      assertNull(connection0);
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          FBDriver fBDriver0 = new FBDriver();
          // Undeclared exception!
          try {
            fBDriver0.connect("jdbc:firebirdsql:j:va:[?J#%G.%JaoV", (Properties) null);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.net.SocketPermission j resolve)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkConnect(SecurityManager.java:1031)
             * java.net.InetAddress.getAllByName0(InetAddress.java:1145)
             * java.net.InetAddress.getAllByName(InetAddress.java:1083)
             * java.net.InetAddress.getAllByName(InetAddress.java:1019)
             * java.net.InetAddress.getByName(InetAddress.java:969)
             * java.net.InetSocketAddress.<init>(InetSocketAddress.java:124)
             * java.net.Socket.<init>(Socket.java:189)
             * org.firebirdsql.gds.impl.wire.JavaGDSImpl.getSocket(JavaGDSImpl.java:40)
             * org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl.openSocket(AbstractJavaGDSImpl.java:2096)
             * org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl.connect(AbstractJavaGDSImpl.java:1962)
             * org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl.internalAttachDatabase(AbstractJavaGDSImpl.java:435)
             * org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl.iscAttachDatabase(AbstractJavaGDSImpl.java:411)
             * org.firebirdsql.jca.FBManagedConnection.<init>(FBManagedConnection.java:104)
             * org.firebirdsql.jca.FBManagedConnectionFactory.createManagedConnection(FBManagedConnectionFactory.java:480)
             * org.firebirdsql.jca.FBStandAloneConnectionManager.allocateConnection(FBStandAloneConnectionManager.java:69)
             * org.firebirdsql.jdbc.FBDataSource.getConnection(FBDataSource.java:120)
             * org.firebirdsql.jdbc.AbstractDriver.connect(AbstractDriver.java:125)
             * sun.reflect.GeneratedMethodAccessor84.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
      FBDriver fBDriver0 = new FBDriver();
      Properties properties0 = new Properties();
      properties0.put((Object) "userName", (Object) "userName");
      // Undeclared exception!
      try {
        fBDriver0.connect("jdbc:firebirdsql:native:((^b", properties0);
        fail("Expecting exception: NoClassDefFoundError");
      } catch(NoClassDefFoundError e) {
        /*
         * Could not initialize class org.firebirdsql.gds.impl.jni.NativeGDSFactoryPlugin$GDSHolder
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      FBDriver fBDriver0 = new FBDriver();
      FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory();
      try {
        fBDriver0.connect((FirebirdConnectionProperties) fBManagedConnectionFactory0);
        fail("Expecting exception: FBSQLException");
      } catch(FBSQLException e) {
        /*
         * GDS Exception. 0. Connection string missing
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      FBDriver fBDriver0 = new FBDriver();
      boolean boolean0 = fBDriver0.acceptsURL("ThisGstatement is alread");
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      FBDriver fBDriver0 = new FBDriver();
      boolean boolean0 = fBDriver0.acceptsURL("jdbc:firebirdsql:java:You cannot commit a closed connecton.");
      assertEquals(true, boolean0);
  }
}
