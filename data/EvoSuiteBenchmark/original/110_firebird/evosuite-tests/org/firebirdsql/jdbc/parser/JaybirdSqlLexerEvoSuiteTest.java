/*
 * This file was automatically generated by EvoSuite
 */

package org.firebirdsql.jdbc.parser;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import java.util.Collection;
import org.antlr.runtime.ANTLRFileStream;
import org.antlr.runtime.ANTLRInputStream;
import org.antlr.runtime.ANTLRReaderStream;
import org.antlr.runtime.ANTLRStringStream;
import org.antlr.runtime.BitSet;
import org.antlr.runtime.CharStream;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.EarlyExitException;
import org.antlr.runtime.IntStream;
import org.antlr.runtime.Lexer;
import org.antlr.runtime.MismatchedTokenException;
import org.antlr.runtime.RecognitionException;
import org.antlr.runtime.RecognizerSharedState;
import org.firebirdsql.jdbc.parser.JaybirdSqlLexer;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class JaybirdSqlLexerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer();
      // Undeclared exception!
      try {
        jaybirdSqlLexer0.mUPDATE();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer();
      // Undeclared exception!
      try {
        jaybirdSqlLexer0.mKW_TIMESTAMP();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer();
      // Undeclared exception!
      try {
        jaybirdSqlLexer0.mCURRENT_DATE();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer();
      // Undeclared exception!
      try {
        jaybirdSqlLexer0.mINTO();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      ANTLRReaderStream aNTLRReaderStream0 = new ANTLRReaderStream();
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRReaderStream0);
      try {
        jaybirdSqlLexer0.mFOR();
        fail("Expecting exception: MismatchedTokenException");
      } catch(MismatchedTokenException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      char[] charArray0 = new char[9];
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream(charArray0, 76);
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRStringStream0);
      try {
        jaybirdSqlLexer0.mOR();
        fail("Expecting exception: MismatchedTokenException");
      } catch(MismatchedTokenException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) null);
      // Undeclared exception!
      try {
        jaybirdSqlLexer0.mKW_CHAR();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer();
      // Undeclared exception!
      try {
        jaybirdSqlLexer0.mMINIMUM();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer();
      // Undeclared exception!
      try {
        jaybirdSqlLexer0.mT__79();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      char[] charArray0 = new char[10];
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream(charArray0, (-943));
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRStringStream0);
      try {
        jaybirdSqlLexer0.mKW_NUMERIC();
        fail("Expecting exception: MismatchedTokenException");
      } catch(MismatchedTokenException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer();
      // Undeclared exception!
      try {
        jaybirdSqlLexer0.mRETURNING();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer();
      // Undeclared exception!
      try {
        jaybirdSqlLexer0.mT__77();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer();
      // Undeclared exception!
      try {
        jaybirdSqlLexer0.mCOUNT();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer();
      Lexer[] lexerArray0 = jaybirdSqlLexer0.getDelegates();
      assertNotNull(lexerArray0);
  }

  @Test
  public void test14()  throws Throwable  {
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRStringStream0, recognizerSharedState0);
      BitSet bitSet0 = new BitSet(1713);
      jaybirdSqlLexer0.mismatchIsMissingToken((IntStream) aNTLRStringStream0, bitSet0);
      assertEquals(1, jaybirdSqlLexer0.getMismatchCount());
  }

  @Test
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '|';
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream(charArray0, (int) 'W');
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRStringStream0);
      // Undeclared exception!
      try {
        jaybirdSqlLexer0.nextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test16()  throws Throwable  {
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer();
      // Undeclared exception!
      try {
        jaybirdSqlLexer0.mKW_VARCHAR();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test17()  throws Throwable  {
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) null);
      // Undeclared exception!
      try {
        jaybirdSqlLexer0.mCOLLATE();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test18()  throws Throwable  {
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer();
      // Undeclared exception!
      try {
        jaybirdSqlLexer0.mGEN_ID();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test19()  throws Throwable  {
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer();
      ANTLRReaderStream aNTLRReaderStream0 = new ANTLRReaderStream();
      jaybirdSqlLexer0.mismatchIsUnwantedToken((IntStream) aNTLRReaderStream0, (-351));
      assertEquals(1, jaybirdSqlLexer0.getMismatchCount());
  }

  @Test
  public void test20()  throws Throwable  {
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer();
      String string0 = jaybirdSqlLexer0.getGrammarFileName();
      assertEquals("D:\\Users\\rrokytskyy\\workspace\\client-java\\src\\main\\org\\firebirdsql\\jdbc\\parser\\JaybirdSql.g", string0);
  }

  @Test
  public void test21()  throws Throwable  {
      ANTLRInputStream aNTLRInputStream0 = new ANTLRInputStream();
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRInputStream0);
      try {
        jaybirdSqlLexer0.mNEXT();
        fail("Expecting exception: MismatchedTokenException");
      } catch(MismatchedTokenException e) {
      }
  }

  @Test
  public void test22()  throws Throwable  {
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer();
      // Undeclared exception!
      try {
        jaybirdSqlLexer0.mKW_DOUBLE();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test23()  throws Throwable  {
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer();
      // Undeclared exception!
      try {
        jaybirdSqlLexer0.mKW_DECIMAL();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[9];
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream(charArray0, (-1288));
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRStringStream0);
      try {
        jaybirdSqlLexer0.mDELETE();
        fail("Expecting exception: MismatchedTokenException");
      } catch(MismatchedTokenException e) {
      }
  }

  @Test
  public void test25()  throws Throwable  {
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) null);
      // Undeclared exception!
      try {
        jaybirdSqlLexer0.mKW_SIZE();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test26()  throws Throwable  {
      ANTLRFileStream aNTLRFileStream0 = new ANTLRFileStream((String) null);
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRFileStream0);
      try {
        jaybirdSqlLexer0.mPROCEDURE();
        fail("Expecting exception: MismatchedTokenException");
      } catch(MismatchedTokenException e) {
      }
  }

  @Test
  public void test27()  throws Throwable  {
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRStringStream0, recognizerSharedState0);
      try {
        jaybirdSqlLexer0.mKW_FLOAT();
        fail("Expecting exception: MismatchedTokenException");
      } catch(MismatchedTokenException e) {
      }
  }

  @Test
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[9];
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream(charArray0, 76);
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRStringStream0);
      Collection<Object> collection0 = jaybirdSqlLexer0.getErrorMessages();
      assertEquals(0, collection0.size());
  }

  @Test
  public void test29()  throws Throwable  {
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer();
      // Undeclared exception!
      try {
        jaybirdSqlLexer0.mVALUE();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test30()  throws Throwable  {
      ANTLRReaderStream aNTLRReaderStream0 = new ANTLRReaderStream();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRReaderStream0, recognizerSharedState0);
      try {
        jaybirdSqlLexer0.mTRAILING();
        fail("Expecting exception: MismatchedTokenException");
      } catch(MismatchedTokenException e) {
      }
  }

  @Test
  public void test31()  throws Throwable  {
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer();
      int int0 = jaybirdSqlLexer0.getMismatchCount();
      assertEquals(0, int0);
  }

  @Test
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'O';
      charArray0[2] = '$';
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream(charArray0, (int) 'L');
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRStringStream0);
      CommonToken commonToken0 = (CommonToken)jaybirdSqlLexer0.nextToken();
      assertEquals(3, aNTLRStringStream0.getCharPositionInLine());
      assertEquals("[@-1,1:2='O$',<26>,1:1]", commonToken0.toString());
  }

  @Test
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'B';
      charArray0[1] = '2';
      charArray0[2] = '\'';
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream(charArray0, (int) 'L');
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRStringStream0);
      jaybirdSqlLexer0.nextToken();
      assertEquals(2, aNTLRStringStream0.index());
      assertEquals(2, jaybirdSqlLexer0.getCharIndex());
  }

  @Test
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[5] = 'A';
      charArray0[6] = '>';
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream(charArray0, (int) 'L');
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRStringStream0);
      jaybirdSqlLexer0.nextToken();
      assertEquals(6, aNTLRStringStream0.getCharPositionInLine());
      assertEquals("A", jaybirdSqlLexer0.getText());
  }

  @Test
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[2] = '$';
      charArray0[3] = '2';
      charArray0[4] = 'u';
      charArray0[5] = 'A';
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream(charArray0, (int) 'L');
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRStringStream0);
      jaybirdSqlLexer0.nextToken();
      assertEquals(6, jaybirdSqlLexer0.getCharPositionInLine());
      assertEquals(6, aNTLRStringStream0.index());
  }

  @Test
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[4] = 'k';
      charArray0[5] = 'H';
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream(charArray0, (int) 'W');
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRStringStream0);
      jaybirdSqlLexer0.nextToken();
      assertEquals(6, jaybirdSqlLexer0.getCharPositionInLine());
      assertEquals(6, aNTLRStringStream0.index());
  }

  @Test
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[5] = '2';
      charArray0[2] = '$';
      charArray0[3] = '2';
      charArray0[4] = 'u';
      charArray0[6] = 'R';
      charArray0[7] = '7';
      charArray0[8] = 'L';
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream(charArray0, (int) 'L');
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRStringStream0);
      // Undeclared exception!
      try {
        jaybirdSqlLexer0.nextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream(charArray0, (int) 'L');
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRStringStream0);
      jaybirdSqlLexer0.nextToken();
      assertEquals(2, aNTLRStringStream0.index());
      assertEquals(2, jaybirdSqlLexer0.getCharPositionInLine());
  }

  @Test
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[6] = 'R';
      charArray0[7] = '7';
      charArray0[8] = 'W';
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream(charArray0, (int) 'W');
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRStringStream0);
      // Undeclared exception!
      try {
        jaybirdSqlLexer0.nextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[2] = 'B';
      charArray0[3] = 'Z';
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream(charArray0, (int) 'L');
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRStringStream0);
      jaybirdSqlLexer0.nextToken();
      assertEquals(4, aNTLRStringStream0.getCharPositionInLine());
      assertEquals(4, jaybirdSqlLexer0.getCharPositionInLine());
  }

  @Test
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[2] = '$';
      charArray0[3] = '_';
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream(charArray0, (int) 'L');
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRStringStream0);
      jaybirdSqlLexer0.nextToken();
      assertEquals(4, jaybirdSqlLexer0.getCharPositionInLine());
      assertEquals(4, aNTLRStringStream0.index());
  }

  @Test
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[5] = 'o';
      charArray0[6] = 'a';
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream(charArray0, (int) 'L');
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRStringStream0);
      jaybirdSqlLexer0.nextToken();
      assertEquals(7, jaybirdSqlLexer0.getCharPositionInLine());
      assertEquals(7, aNTLRStringStream0.index());
  }

  @Test
  public void test43()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[3] = 'Z';
      charArray0[4] = 'k';
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream(charArray0, (int) 'W');
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRStringStream0);
      jaybirdSqlLexer0.nextToken();
      assertEquals(5, jaybirdSqlLexer0.getCharIndex());
      assertEquals(5, aNTLRStringStream0.index());
  }

  @Test
  public void test44()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream(charArray0, (int) 'L');
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRStringStream0);
      jaybirdSqlLexer0.nextToken();
      assertEquals(2, jaybirdSqlLexer0.getCharIndex());
      assertEquals(2, aNTLRStringStream0.getCharPositionInLine());
  }

  @Test
  public void test45()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[1] = '7';
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream(charArray0, (int) 'L');
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRStringStream0);
      jaybirdSqlLexer0.nextToken();
      assertEquals(2, aNTLRStringStream0.index());
      assertEquals(2, jaybirdSqlLexer0.getCharPositionInLine());
  }

  @Test
  public void test46()  throws Throwable  {
      ANTLRInputStream aNTLRInputStream0 = new ANTLRInputStream();
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRInputStream0);
      try {
        jaybirdSqlLexer0.mWS();
        fail("Expecting exception: EarlyExitException");
      } catch(EarlyExitException e) {
      }
  }

  @Test
  public void test47()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      charArray0[1] = 'B';
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream(charArray0, (int) 'L');
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRStringStream0);
      // Undeclared exception!
      try {
        jaybirdSqlLexer0.nextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test48()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      charArray0[7] = '\'';
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream(charArray0, (int) 'L');
      JaybirdSqlLexer jaybirdSqlLexer0 = new JaybirdSqlLexer((CharStream) aNTLRStringStream0);
      jaybirdSqlLexer0.nextToken();
      assertEquals(8, jaybirdSqlLexer0.getCharIndex());
      assertEquals(8, aNTLRStringStream0.index());
  }
}
