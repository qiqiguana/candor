/*
 * This file was automatically generated by EvoSuite
 */

package org.firebirdsql.jdbc.field;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.math.BigDecimal;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.TimeZone;
import org.firebirdsql.gds.XSQLVAR;
import org.firebirdsql.gds.impl.GDSHelper;
import org.firebirdsql.jdbc.FBBlob;
import org.firebirdsql.jdbc.FBClob;
import org.firebirdsql.jdbc.FBDriverNotCapableException;
import org.firebirdsql.jdbc.FBSQLException;
import org.firebirdsql.jdbc.field.FBBigDecimalField;
import org.firebirdsql.jdbc.field.FBBlobField;
import org.firebirdsql.jdbc.field.FBCachedBlobField;
import org.firebirdsql.jdbc.field.FBCachedLongVarCharField;
import org.firebirdsql.jdbc.field.FBField;
import org.firebirdsql.jdbc.field.FBNullField;
import org.firebirdsql.jdbc.field.FBStringField;
import org.firebirdsql.jdbc.field.FBWorkaroundStringField;
import org.firebirdsql.jdbc.field.FieldDataProvider;
import org.firebirdsql.jdbc.field.TypeConversionException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class FBFieldEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      FBBlobField fBBlobField0 = new FBBlobField(xSQLVAR0, (FieldDataProvider) null, 0);
      try {
        fBBlobField0.setByte((byte) (-41));
        fail("Expecting exception: TypeConversionException");
      } catch(TypeConversionException e) {
        /*
         * Error converting to byte.
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      FBBlobField fBBlobField0 = new FBBlobField(xSQLVAR0, (FieldDataProvider) null, (-1674));
      try {
        fBBlobField0.getDouble();
        fail("Expecting exception: TypeConversionException");
      } catch(TypeConversionException e) {
        /*
         * Error converting to double.
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      FBCachedBlobField fBCachedBlobField0 = new FBCachedBlobField(xSQLVAR0, (FieldDataProvider) null, 1);
      try {
        fBCachedBlobField0.getDate();
        fail("Expecting exception: TypeConversionException");
      } catch(TypeConversionException e) {
        /*
         * Error converting to date.
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      FBWorkaroundStringField fBWorkaroundStringField0 = new FBWorkaroundStringField(xSQLVAR0, (FieldDataProvider) null, 0);
      String string0 = fBWorkaroundStringField0.getAlias();
      assertNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      FBBlobField fBBlobField0 = new FBBlobField(xSQLVAR0, (FieldDataProvider) null, 1875);
      try {
        fBBlobField0.getBigDecimal(1875);
        fail("Expecting exception: TypeConversionException");
      } catch(TypeConversionException e) {
        /*
         * Error converting to big decimal.
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      FBWorkaroundStringField fBWorkaroundStringField0 = new FBWorkaroundStringField(xSQLVAR0, (FieldDataProvider) null, 0);
      try {
        fBWorkaroundStringField0.setClob((FBClob) null);
        fail("Expecting exception: TypeConversionException");
      } catch(TypeConversionException e) {
        /*
         * Error converting to Firebird CLOB object
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      FBCachedLongVarCharField fBCachedLongVarCharField0 = new FBCachedLongVarCharField(xSQLVAR0, (FieldDataProvider) null, 0);
      HashMap<String, Class<?>> hashMap0 = new HashMap<String, Class<?>>();
      try {
        fBCachedLongVarCharField0.getObject((Map<String, Class<?>>) hashMap0);
        fail("Expecting exception: FBDriverNotCapableException");
      } catch(FBDriverNotCapableException e) {
        /*
         * Not yet implemented.
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      FBNullField fBNullField0 = new FBNullField(xSQLVAR0, (FieldDataProvider) null, 0);
      try {
        fBNullField0.getArray();
        fail("Expecting exception: FBDriverNotCapableException");
      } catch(FBDriverNotCapableException e) {
        /*
         * Not yet implemented.
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      FBCachedBlobField fBCachedBlobField0 = new FBCachedBlobField(xSQLVAR0, (FieldDataProvider) null, 0);
      assertNotNull(fBCachedBlobField0);
      
      Locale locale0 = Locale.GERMAN;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      try {
        fBCachedBlobField0.getDate((Calendar) gregorianCalendar0);
        fail("Expecting exception: TypeConversionException");
      } catch(TypeConversionException e) {
        /*
         * Error converting to date.
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      FBCachedBlobField fBCachedBlobField0 = new FBCachedBlobField(xSQLVAR0, (FieldDataProvider) null, 0);
      try {
        fBCachedBlobField0.setFloat((float) 0);
        fail("Expecting exception: TypeConversionException");
      } catch(TypeConversionException e) {
        /*
         * Error converting to float.
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      FBWorkaroundStringField fBWorkaroundStringField0 = new FBWorkaroundStringField(xSQLVAR0, (FieldDataProvider) null, 0);
      try {
        fBWorkaroundStringField0.setBlob((FBBlob) null);
        fail("Expecting exception: TypeConversionException");
      } catch(TypeConversionException e) {
        /*
         * Error converting to Firebird BLOB object
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      FBCachedBlobField fBCachedBlobField0 = new FBCachedBlobField(xSQLVAR0, (FieldDataProvider) null, 0);
      try {
        fBCachedBlobField0.setInteger(0);
        fail("Expecting exception: TypeConversionException");
      } catch(TypeConversionException e) {
        /*
         * Error converting to int.
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      FBCachedLongVarCharField fBCachedLongVarCharField0 = new FBCachedLongVarCharField(xSQLVAR0, (FieldDataProvider) null, 839);
      // Undeclared exception!
      try {
        fBCachedLongVarCharField0.setObject((Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      FBNullField fBNullField0 = new FBNullField(xSQLVAR0, (FieldDataProvider) null, 0);
      // Undeclared exception!
      try {
        fBNullField0.getCharacterStream();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test14()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      FBWorkaroundStringField fBWorkaroundStringField0 = new FBWorkaroundStringField(xSQLVAR0, (FieldDataProvider) null, 0);
      fBWorkaroundStringField0.setRequiredType(0);
      assertNull(fBWorkaroundStringField0.getAlias());
  }

  @Test
  public void test15()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      FBCachedBlobField fBCachedBlobField0 = new FBCachedBlobField(xSQLVAR0, (FieldDataProvider) null, 111);
      try {
        fBCachedBlobField0.getByte();
        fail("Expecting exception: TypeConversionException");
      } catch(TypeConversionException e) {
        /*
         * Error converting to byte.
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      FBWorkaroundStringField fBWorkaroundStringField0 = new FBWorkaroundStringField(xSQLVAR0, (FieldDataProvider) null, 889);
      try {
        fBWorkaroundStringField0.getBlob();
        fail("Expecting exception: TypeConversionException");
      } catch(TypeConversionException e) {
        /*
         * Error converting to Firebird BLOB object
         */
      }
  }

  @Test
  public void test17()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      FBCachedBlobField fBCachedBlobField0 = new FBCachedBlobField(xSQLVAR0, (FieldDataProvider) null, 0);
      try {
        fBCachedBlobField0.getBoolean();
        fail("Expecting exception: TypeConversionException");
      } catch(TypeConversionException e) {
        /*
         * Error converting to boolean.
         */
      }
  }

  @Test
  public void test18()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      FBCachedBlobField fBCachedBlobField0 = new FBCachedBlobField(xSQLVAR0, (FieldDataProvider) null, 0);
      try {
        fBCachedBlobField0.getInt();
        fail("Expecting exception: TypeConversionException");
      } catch(TypeConversionException e) {
        /*
         * Error converting to int.
         */
      }
  }

  @Test
  public void test19()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      FBNullField fBNullField0 = new FBNullField(xSQLVAR0, (FieldDataProvider) null, 0);
      String string0 = fBNullField0.getName();
      assertNull(string0);
  }

  @Test
  public void test20()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      FBNullField fBNullField0 = new FBNullField(xSQLVAR0, (FieldDataProvider) null, 0);
      fBNullField0.close();
      assertEquals(false, fBNullField0.isInvertTimeZone());
  }

  @Test
  public void test21()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      FBCachedBlobField fBCachedBlobField0 = new FBCachedBlobField(xSQLVAR0, (FieldDataProvider) null, 0);
      try {
        fBCachedBlobField0.getShort();
        fail("Expecting exception: TypeConversionException");
      } catch(TypeConversionException e) {
        /*
         * Error converting to short.
         */
      }
  }

  @Test
  public void test22()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      FBCachedBlobField fBCachedBlobField0 = new FBCachedBlobField(xSQLVAR0, (FieldDataProvider) null, 0);
      try {
        fBCachedBlobField0.getTimestamp();
        fail("Expecting exception: TypeConversionException");
      } catch(TypeConversionException e) {
        /*
         * Error converting to timestamp.
         */
      }
  }

  @Test
  public void test23()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      FBCachedBlobField fBCachedBlobField0 = new FBCachedBlobField(xSQLVAR0, (FieldDataProvider) null, (byte)79);
      try {
        fBCachedBlobField0.setShort((short) (byte)0);
        fail("Expecting exception: TypeConversionException");
      } catch(TypeConversionException e) {
        /*
         * Error converting to short.
         */
      }
  }

  @Test
  public void test24()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      FBCachedBlobField fBCachedBlobField0 = new FBCachedBlobField(xSQLVAR0, (FieldDataProvider) null, (-1543));
      assertNotNull(fBCachedBlobField0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(timeZone0);
      try {
        fBCachedBlobField0.getTime((Calendar) gregorianCalendar0);
        fail("Expecting exception: TypeConversionException");
      } catch(TypeConversionException e) {
        /*
         * Error converting to time.
         */
      }
  }

  @Test
  public void test25()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      FBWorkaroundStringField fBWorkaroundStringField0 = new FBWorkaroundStringField(xSQLVAR0, (FieldDataProvider) null, 0);
      // Undeclared exception!
      try {
        fBWorkaroundStringField0.copyOI();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test26()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      FBCachedLongVarCharField fBCachedLongVarCharField0 = new FBCachedLongVarCharField(xSQLVAR0, (FieldDataProvider) null, 0);
      String string0 = fBCachedLongVarCharField0.getRelationName();
      assertNull(string0);
  }

  @Test
  public void test27()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      FBStringField fBStringField0 = new FBStringField(xSQLVAR0, (FieldDataProvider) null, 0);
      try {
        fBStringField0.getClob();
        fail("Expecting exception: TypeConversionException");
      } catch(TypeConversionException e) {
        /*
         * Error converting to Firebird BLOB object
         */
      }
  }

  @Test
  public void test28()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      try {
        FBField.createField(xSQLVAR0, (FieldDataProvider) null, (GDSHelper) null, false);
        fail("Expecting exception: TypeConversionException");
      } catch(TypeConversionException e) {
        /*
         * SQL type for this field is not yet supported.
         */
      }
  }

  @Test
  public void test29()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      FBCachedBlobField fBCachedBlobField0 = new FBCachedBlobField(xSQLVAR0, (FieldDataProvider) null, 0);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      try {
        fBCachedBlobField0.setObject((Object) bigDecimal0);
        fail("Expecting exception: TypeConversionException");
      } catch(TypeConversionException e) {
        /*
         * Error converting to big decimal.
         */
      }
  }

  @Test
  public void test30()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      FBBlobField fBBlobField0 = new FBBlobField(xSQLVAR0, (FieldDataProvider) null, 0);
      try {
        fBBlobField0.getTime();
        fail("Expecting exception: TypeConversionException");
      } catch(TypeConversionException e) {
        /*
         * Error converting to time.
         */
      }
  }

  @Test
  public void test31()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      FBCachedLongVarCharField fBCachedLongVarCharField0 = new FBCachedLongVarCharField(xSQLVAR0, (FieldDataProvider) null, (-1));
      try {
        fBCachedLongVarCharField0.getRef();
        fail("Expecting exception: FBDriverNotCapableException");
      } catch(FBDriverNotCapableException e) {
        /*
         * Not yet implemented.
         */
      }
  }

  @Test
  public void test32()  throws Throwable  {
      FBBigDecimalField fBBigDecimalField0 = null;
      try {
        fBBigDecimalField0 = new FBBigDecimalField((XSQLVAR) null, (FieldDataProvider) null, 86);
        fail("Expecting exception: FBSQLException");
      } catch(FBSQLException e) {
        /*
         * Cannot create FBField instance for null as XSQLVAR.
         */
      }
  }

  @Test
  public void test33()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      FBCachedLongVarCharField fBCachedLongVarCharField0 = new FBCachedLongVarCharField(xSQLVAR0, (FieldDataProvider) null, (byte)0);
      fBCachedLongVarCharField0.setConnection((GDSHelper) null);
      assertEquals(false, fBCachedLongVarCharField0.isInvertTimeZone());
  }

  @Test
  public void test34()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      boolean boolean0 = FBField.isCompatible(xSQLVAR0, 0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test35()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      FBCachedBlobField fBCachedBlobField0 = new FBCachedBlobField(xSQLVAR0, (FieldDataProvider) null, 0);
      fBCachedBlobField0.setObject((Object) "Error converting to long.");
      assertNull(fBCachedBlobField0.getAlias());
  }

  @Test
  public void test36()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      FBCachedBlobField fBCachedBlobField0 = new FBCachedBlobField(xSQLVAR0, (FieldDataProvider) null, 0);
      assertNotNull(fBCachedBlobField0);
      
      boolean boolean0 = fBCachedBlobField0.isInvertTimeZone();
      assertEquals(false, boolean0);
  }
}
