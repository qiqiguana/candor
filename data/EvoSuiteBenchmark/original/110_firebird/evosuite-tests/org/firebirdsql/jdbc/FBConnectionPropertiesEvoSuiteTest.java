/*
 * This file was automatically generated by EvoSuite
 */

package org.firebirdsql.jdbc;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.sql.SQLException;
import org.firebirdsql.gds.TransactionParameterBuffer;
import org.firebirdsql.gds.impl.wire.DatabaseParameterBufferImp;
import org.firebirdsql.jca.FBResourceException;
import org.firebirdsql.jdbc.FBConnectionProperties;
import org.firebirdsql.jdbc.FBTpbMapper;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class FBConnectionPropertiesEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.getUserName();
      assertEquals(2, fBConnectionProperties0.getDefaultTransactionIsolation());
  }

  @Test
  public void test1()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      String string0 = fBConnectionProperties0.getTpbMapping();
      assertNull(string0);
      assertEquals(2, fBConnectionProperties0.getDefaultTransactionIsolation());
      assertEquals("TRANSACTION_READ_COMMITTED", fBConnectionProperties0.getDefaultIsolation());
  }

  @Test
  public void test2()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.setType("TRANSACTION_READ_COMMITTED");
      // Undeclared exception!
      try {
        fBConnectionProperties0.getMapper();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Unknown GDS type TRANSACTION_READ_COMMITTED
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      int int0 = fBConnectionProperties0.getBlobBufferSize();
      assertEquals(0, int0);
      assertEquals(2, fBConnectionProperties0.getDefaultTransactionIsolation());
  }

  @Test
  public void test4()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.setBuffersNumber(532);
      assertEquals(532, fBConnectionProperties0.getBuffersNumber());
      assertEquals(true, fBConnectionProperties0.isDefaultResultSetHoldable());
  }

  @Test
  public void test5()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      boolean boolean0 = fBConnectionProperties0.isTimestampUsesLocalTimezone();
      assertEquals(2, fBConnectionProperties0.getDefaultTransactionIsolation());
      assertEquals(true, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      // Undeclared exception!
      try {
        fBConnectionProperties0.setNonStandardProperty("defaultIsolation", "defaultIsolation");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Invalid isolation name.
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      String string0 = fBConnectionProperties0.getType();
      assertEquals(2, fBConnectionProperties0.getDefaultTransactionIsolation());
      assertNull(string0);
  }

  @Test
  public void test8()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      String string0 = fBConnectionProperties0.getDefaultIsolation();
      assertNotNull(string0);
      assertEquals("TRANSACTION_READ_COMMITTED", string0);
      assertEquals(2, fBConnectionProperties0.getDefaultTransactionIsolation());
  }

  @Test
  public void test9()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      int int0 = fBConnectionProperties0.getBuffersNumber();
      assertEquals(0, int0);
      assertEquals(2, fBConnectionProperties0.getDefaultTransactionIsolation());
  }

  @Test
  public void test10()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      boolean boolean0 = fBConnectionProperties0.isUseStreamBlobs();
      assertEquals(true, boolean0);
      assertEquals(2, fBConnectionProperties0.getDefaultTransactionIsolation());
  }

  @Test
  public void test11()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.setDefaultResultSetHoldable(true);
      assertEquals(true, fBConnectionProperties0.isDefaultResultSetHoldable());
      assertEquals(true, fBConnectionProperties0.isUseStandardUdf());
  }

  @Test
  public void test12()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.getCharSet();
      assertEquals(2, fBConnectionProperties0.getDefaultTransactionIsolation());
  }

  @Test
  public void test13()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.setSocketBufferSize(532);
      int int0 = fBConnectionProperties0.getSocketBufferSize();
      assertEquals(true, fBConnectionProperties0.isUseStreamBlobs());
      assertEquals(532, int0);
  }

  @Test
  public void test14()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.getSqlDialect();
      assertEquals(2, fBConnectionProperties0.getDefaultTransactionIsolation());
  }

  @Test
  public void test15()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      boolean boolean0 = fBConnectionProperties0.isUseStandardUdf();
      assertEquals(true, boolean0);
      assertEquals(2, fBConnectionProperties0.getDefaultTransactionIsolation());
  }

  @Test
  public void test16()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.setPassword("isc_dpb_result_set_holdable");
      assertEquals(true, fBConnectionProperties0.isDefaultResultSetHoldable());
      assertEquals(2, fBConnectionProperties0.getDefaultTransactionIsolation());
  }

  @Test
  public void test17()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      boolean boolean0 = fBConnectionProperties0.isDefaultResultSetHoldable();
      assertEquals(2, fBConnectionProperties0.getDefaultTransactionIsolation());
      assertEquals(true, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.getUseTranslation();
      assertEquals(2, fBConnectionProperties0.getDefaultTransactionIsolation());
  }

  @Test
  public void test19()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      String string0 = fBConnectionProperties0.getDatabase();
      assertNull(string0);
      assertEquals(2, fBConnectionProperties0.getDefaultTransactionIsolation());
  }

  @Test
  public void test20()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.getPassword();
      assertEquals(2, fBConnectionProperties0.getDefaultTransactionIsolation());
  }

  @Test
  public void test21()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.getNonStandardProperty("defaultIsolation");
      assertEquals(2, fBConnectionProperties0.getDefaultTransactionIsolation());
  }

  @Test
  public void test22()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      int int0 = fBConnectionProperties0.getSoTimeout();
      assertEquals(0, int0);
      assertEquals(2, fBConnectionProperties0.getDefaultTransactionIsolation());
  }

  @Test
  public void test23()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.setDatabase("");
      int int0 = fBConnectionProperties0.hashCode();
      assertEquals(387617, int0);
      assertEquals(2, fBConnectionProperties0.getDefaultTransactionIsolation());
  }

  @Test
  public void test24()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.getRoleName();
      assertEquals(2, fBConnectionProperties0.getDefaultTransactionIsolation());
  }

  @Test
  public void test25()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.setUseStandardUdf(false);
      assertEquals(true, fBConnectionProperties0.isTimestampUsesLocalTimezone());
      assertEquals(2, fBConnectionProperties0.getDefaultTransactionIsolation());
  }

  @Test
  public void test26()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.setSoTimeout(0);
      assertEquals(true, fBConnectionProperties0.isUseStandardUdf());
      assertEquals(true, fBConnectionProperties0.isTimestampUsesLocalTimezone());
  }

  @Test
  public void test27()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.setUserName(" int: ");
      assertEquals(true, fBConnectionProperties0.isUseStreamBlobs());
      assertEquals(true, fBConnectionProperties0.isDefaultResultSetHoldable());
  }

  @Test
  public void test28()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.setBlobBufferSize(0);
      fBConnectionProperties0.getDatabaseParameterBuffer();
      assertEquals(true, fBConnectionProperties0.isUseStreamBlobs());
      assertEquals(0, fBConnectionProperties0.getBlobBufferSize());
  }

  @Test
  public void test29()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.getEncoding();
      assertEquals(2, fBConnectionProperties0.getDefaultTransactionIsolation());
      assertEquals("TRANSACTION_READ_COMMITTED", fBConnectionProperties0.getDefaultIsolation());
  }

  @Test
  public void test30()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.setEncoding("ISO8859_1");
      fBConnectionProperties0.setEncoding(" int: ");
      assertEquals(true, fBConnectionProperties0.isDefaultResultSetHoldable());
      assertEquals(true, fBConnectionProperties0.isUseStandardUdf());
  }

  @Test
  public void test31()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.setNonStandardProperty("database");
      assertEquals(true, fBConnectionProperties0.isUseStreamBlobs());
      assertEquals(true, fBConnectionProperties0.isUseStandardUdf());
  }

  @Test
  public void test32()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.setNonStandardProperty("type", "type");
      assertEquals(true, fBConnectionProperties0.isTimestampUsesLocalTimezone());
      assertEquals("type", fBConnectionProperties0.getType());
  }

  @Test
  public void test33()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      int int0 = fBConnectionProperties0.hashCode();
      assertEquals(387617, int0);
      assertEquals(2, fBConnectionProperties0.getDefaultTransactionIsolation());
  }

  @Test
  public void test34()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.setType("isc_info_sql_sub_type");
      int int0 = fBConnectionProperties0.hashCode();
      assertEquals(1805075908, int0);
      assertEquals(2, fBConnectionProperties0.getDefaultTransactionIsolation());
  }

  @Test
  public void test35()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      boolean boolean0 = fBConnectionProperties0.equals((Object) "u/");
      assertEquals(2, fBConnectionProperties0.getDefaultTransactionIsolation());
      assertEquals(false, boolean0);
  }

  @Test
  public void test36()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.setType("\"\"/-Nm7nH");
      FBConnectionProperties fBConnectionProperties1 = (FBConnectionProperties)fBConnectionProperties0.clone();
      assertNotNull(fBConnectionProperties1);
      
      boolean boolean0 = fBConnectionProperties0.equals((Object) fBConnectionProperties1);
      assertEquals(true, boolean0);
      assertNotSame(fBConnectionProperties1, fBConnectionProperties0);
      assertEquals("\"\"/-Nm7nH", fBConnectionProperties1.getType());
      assertEquals(2, fBConnectionProperties1.getDefaultTransactionIsolation());
  }

  @Test
  public void test37()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.setType("\"\"/-Nm7nH");
      FBConnectionProperties fBConnectionProperties1 = (FBConnectionProperties)fBConnectionProperties0.clone();
      FBConnectionProperties fBConnectionProperties2 = new FBConnectionProperties();
      boolean boolean0 = fBConnectionProperties2.equals((Object) fBConnectionProperties1);
      assertEquals(false, boolean0);
      assertEquals("\"\"/-Nm7nH", fBConnectionProperties1.getType());
      assertTrue(fBConnectionProperties1.equals(fBConnectionProperties0));
      assertNotSame(fBConnectionProperties1, fBConnectionProperties0);
      assertEquals(2, fBConnectionProperties2.getDefaultTransactionIsolation());
  }

  @Test
  public void test38()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.setDatabase("");
      FBConnectionProperties fBConnectionProperties1 = (FBConnectionProperties)fBConnectionProperties0.clone();
      assertNotNull(fBConnectionProperties1);
      
      boolean boolean0 = fBConnectionProperties0.equals((Object) fBConnectionProperties1);
      assertEquals("", fBConnectionProperties0.getDatabase());
      assertEquals(true, boolean0);
      assertEquals(2, fBConnectionProperties0.getDefaultTransactionIsolation());
      assertNotSame(fBConnectionProperties0, fBConnectionProperties1);
  }

  @Test
  public void test39()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.setDatabase("\"\"/-Nm7nH");
      FBConnectionProperties fBConnectionProperties1 = (FBConnectionProperties)fBConnectionProperties0.clone();
      assertNotNull(fBConnectionProperties1);
      
      FBConnectionProperties fBConnectionProperties2 = new FBConnectionProperties();
      boolean boolean0 = fBConnectionProperties2.equals((Object) fBConnectionProperties1);
      assertTrue(fBConnectionProperties0.equals(fBConnectionProperties1));
      assertEquals(false, boolean0);
      assertNotSame(fBConnectionProperties0, fBConnectionProperties1);
      assertEquals(2, fBConnectionProperties2.getDefaultTransactionIsolation());
      assertEquals("\"\"/-Nm7nH", fBConnectionProperties0.getDatabase());
  }

  @Test
  public void test40()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.setTpbMapping("\"\"/-Nm7nH");
      FBConnectionProperties fBConnectionProperties1 = (FBConnectionProperties)fBConnectionProperties0.clone();
      assertNotNull(fBConnectionProperties1);
      
      boolean boolean0 = fBConnectionProperties0.equals((Object) fBConnectionProperties1);
      assertEquals(2, fBConnectionProperties0.getDefaultTransactionIsolation());
      assertEquals(true, boolean0);
      assertEquals("\"\"/-Nm7nH", fBConnectionProperties0.getTpbMapping());
  }

  @Test
  public void test41()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.setTpbMapping("\"\"/-Nm7nH");
      FBConnectionProperties fBConnectionProperties1 = (FBConnectionProperties)fBConnectionProperties0.clone();
      assertNotNull(fBConnectionProperties1);
      
      FBConnectionProperties fBConnectionProperties2 = new FBConnectionProperties();
      boolean boolean0 = fBConnectionProperties2.equals((Object) fBConnectionProperties1);
      assertEquals("\"\"/-Nm7nH", fBConnectionProperties1.getTpbMapping());
      assertEquals(false, boolean0);
      assertEquals(2, fBConnectionProperties1.getDefaultTransactionIsolation());
      assertTrue(fBConnectionProperties1.equals(fBConnectionProperties2));
      assertNotSame(fBConnectionProperties1, fBConnectionProperties0);
  }

  @Test
  public void test42()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      FBConnectionProperties fBConnectionProperties1 = (FBConnectionProperties)fBConnectionProperties0.clone();
      fBConnectionProperties0.setDefaultTransactionIsolation(0);
      boolean boolean0 = fBConnectionProperties0.equals((Object) fBConnectionProperties1);
      assertEquals(0, fBConnectionProperties0.getDefaultTransactionIsolation());
      assertEquals(false, boolean0);
  }

  @Test
  public void test43()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      FBTpbMapper fBTpbMapper0 = fBConnectionProperties0.getMapper();
      assertNotNull(fBTpbMapper0);
      
      FBConnectionProperties fBConnectionProperties1 = (FBConnectionProperties)fBConnectionProperties0.clone();
      assertNotNull(fBConnectionProperties1);
      
      boolean boolean0 = fBConnectionProperties0.equals((Object) fBConnectionProperties1);
      assertEquals(2, fBConnectionProperties0.getDefaultTransactionIsolation());
      assertEquals(true, boolean0);
      assertNotSame(fBConnectionProperties0, fBConnectionProperties1);
  }

  @Test
  public void test44()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.setCharSet("");
      DatabaseParameterBufferImp databaseParameterBufferImp0 = (DatabaseParameterBufferImp)fBConnectionProperties0.getDatabaseParameterBuffer();
      assertEquals(true, fBConnectionProperties0.isDefaultResultSetHoldable());
      assertEquals(1, databaseParameterBufferImp0.getLength());
  }

  @Test
  public void test45()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.setCharSet((String) null);
      assertEquals(2, fBConnectionProperties0.getDefaultTransactionIsolation());
      assertEquals(true, fBConnectionProperties0.isTimestampUsesLocalTimezone());
      assertEquals(true, fBConnectionProperties0.isDefaultResultSetHoldable());
  }

  @Test
  public void test46()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.setCharSet("ISO8859_1");
      assertEquals(true, fBConnectionProperties0.isTimestampUsesLocalTimezone());
      assertEquals(true, fBConnectionProperties0.isUseStreamBlobs());
  }

  @Test
  public void test47()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.setEncoding((String) null);
      assertEquals(2, fBConnectionProperties0.getDefaultTransactionIsolation());
      assertEquals(true, fBConnectionProperties0.isDefaultResultSetHoldable());
      assertEquals(true, fBConnectionProperties0.isTimestampUsesLocalTimezone());
  }

  @Test
  public void test48()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.setEncoding("u/");
      DatabaseParameterBufferImp databaseParameterBufferImp0 = (DatabaseParameterBufferImp)fBConnectionProperties0.getDatabaseParameterBuffer();
      assertEquals(true, fBConnectionProperties0.isUseStandardUdf());
      assertEquals(4, databaseParameterBufferImp0.getLength());
  }

  @Test
  public void test49()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.setRoleName("");
      fBConnectionProperties0.getDatabaseParameterBuffer();
      assertEquals(true, fBConnectionProperties0.isTimestampUsesLocalTimezone());
      assertEquals(true, fBConnectionProperties0.isUseStreamBlobs());
  }

  @Test
  public void test50()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.setRoleName((String) null);
      assertEquals(2, fBConnectionProperties0.getDefaultTransactionIsolation());
      assertEquals(true, fBConnectionProperties0.isTimestampUsesLocalTimezone());
      assertEquals(true, fBConnectionProperties0.isDefaultResultSetHoldable());
  }

  @Test
  public void test51()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.setSqlDialect("");
      assertEquals(true, fBConnectionProperties0.isTimestampUsesLocalTimezone());
      assertEquals(2, fBConnectionProperties0.getDefaultTransactionIsolation());
  }

  @Test
  public void test52()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.setSqlDialect((String) null);
      assertEquals(2, fBConnectionProperties0.getDefaultTransactionIsolation());
      assertEquals(true, fBConnectionProperties0.isUseStreamBlobs());
      assertEquals(true, fBConnectionProperties0.isUseStandardUdf());
  }

  @Test
  public void test53()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.setUseTranslation("ql(NDv/}DYF_3o+");
      assertEquals(true, fBConnectionProperties0.isDefaultResultSetHoldable());
      assertEquals(true, fBConnectionProperties0.isUseStreamBlobs());
  }

  @Test
  public void test54()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.setUseTranslation((String) null);
      assertEquals(true, fBConnectionProperties0.isDefaultResultSetHoldable());
      assertEquals(2, fBConnectionProperties0.getDefaultTransactionIsolation());
      assertEquals(true, fBConnectionProperties0.isTimestampUsesLocalTimezone());
  }

  @Test
  public void test55()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.setUseStreamBlobs(false);
      assertEquals(2, fBConnectionProperties0.getDefaultTransactionIsolation());
      assertEquals(true, fBConnectionProperties0.isTimestampUsesLocalTimezone());
      assertEquals(true, fBConnectionProperties0.isDefaultResultSetHoldable());
  }

  @Test
  public void test56()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.setUseStreamBlobs(true);
      assertEquals(true, fBConnectionProperties0.isTimestampUsesLocalTimezone());
      assertEquals(true, fBConnectionProperties0.isUseStandardUdf());
  }

  @Test
  public void test57()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.setUseStandardUdf(true);
      assertEquals(true, fBConnectionProperties0.isUseStreamBlobs());
      assertEquals("TRANSACTION_READ_COMMITTED", fBConnectionProperties0.getDefaultIsolation());
  }

  @Test
  public void test58()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.setTimestampUsesLocalTimezone(false);
      assertEquals(true, fBConnectionProperties0.isUseStreamBlobs());
      assertEquals(2, fBConnectionProperties0.getDefaultTransactionIsolation());
  }

  @Test
  public void test59()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.setTimestampUsesLocalTimezone(true);
      assertEquals(true, fBConnectionProperties0.isTimestampUsesLocalTimezone());
      assertEquals(true, fBConnectionProperties0.isUseStreamBlobs());
  }

  @Test
  public void test60()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      // Undeclared exception!
      try {
        fBConnectionProperties0.setNonStandardProperty("isolation", "isolation");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Invalid isolation name.
         */
      }
  }

  @Test
  public void test61()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.setDefaultResultSetHoldable(false);
      assertEquals(2, fBConnectionProperties0.getDefaultTransactionIsolation());
      assertEquals(true, fBConnectionProperties0.isTimestampUsesLocalTimezone());
  }

  @Test
  public void test62()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.setNonStandardProperty(" int: ");
      assertEquals(true, fBConnectionProperties0.isTimestampUsesLocalTimezone());
      assertEquals(true, fBConnectionProperties0.isUseStreamBlobs());
  }

  @Test
  public void test63()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.setNonStandardProperty("HY`=oiHp}H[H2");
      assertEquals(true, fBConnectionProperties0.isUseStreamBlobs());
      assertEquals(true, fBConnectionProperties0.isDefaultResultSetHoldable());
  }

  @Test
  public void test64()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.setNonStandardProperty("isc_dpb_result_set_holdable");
      DatabaseParameterBufferImp databaseParameterBufferImp0 = (DatabaseParameterBufferImp)fBConnectionProperties0.getDatabaseParameterBuffer();
      assertEquals(true, fBConnectionProperties0.isTimestampUsesLocalTimezone());
      assertEquals(0, databaseParameterBufferImp0.getLength());
  }

  @Test
  public void test65()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.setNonStandardProperty("u/");
      fBConnectionProperties0.getDatabaseParameterBuffer();
      assertEquals(true, fBConnectionProperties0.isUseStreamBlobs());
      assertEquals(true, fBConnectionProperties0.isTimestampUsesLocalTimezone());
  }

  @Test
  public void test66()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      FBTpbMapper fBTpbMapper0 = fBConnectionProperties0.getMapper();
      assertNotNull(fBTpbMapper0);
      
      // Undeclared exception!
      try {
        fBConnectionProperties0.setTpbMapping("ISO8859_1");
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Properties are already initialized.
         */
      }
  }

  @Test
  public void test67()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      FBTpbMapper fBTpbMapper0 = fBConnectionProperties0.getMapper();
      assertNotNull(fBTpbMapper0);
      
      String string0 = fBConnectionProperties0.getDefaultIsolation();
      assertNotNull(string0);
      assertEquals("TRANSACTION_READ_COMMITTED", string0);
      assertEquals(2, fBConnectionProperties0.getDefaultTransactionIsolation());
  }

  @Test
  public void test68()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.getMapper();
      fBConnectionProperties0.setDefaultTransactionIsolation(387617);
      assertEquals(387617, fBConnectionProperties0.getDefaultTransactionIsolation());
  }

  @Test
  public void test69()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.getTransactionParameters(1301);
      assertEquals(2, fBConnectionProperties0.getDefaultTransactionIsolation());
      assertEquals("TRANSACTION_READ_COMMITTED", fBConnectionProperties0.getDefaultIsolation());
  }

  @Test
  public void test70()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      FBTpbMapper fBTpbMapper0 = fBConnectionProperties0.getMapper();
      assertNotNull(fBTpbMapper0);
      
      // Undeclared exception!
      try {
        fBConnectionProperties0.getTransactionParameters((-887));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Transaction isolation level -887 is not supported.
         */
      }
  }

  @Test
  public void test71()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.setTransactionParameters(1301, (TransactionParameterBuffer) null);
      // Undeclared exception!
      try {
        fBConnectionProperties0.getMapper();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Transaction isolation level 1301 is not supported.
         */
      }
  }

  @Test
  public void test72()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      FBTpbMapper fBTpbMapper0 = fBConnectionProperties0.getMapper();
      assertNotNull(fBTpbMapper0);
      
      // Undeclared exception!
      try {
        fBConnectionProperties0.setTransactionParameters(387617, (TransactionParameterBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Transaction isolation level 387617 is not supported.
         */
      }
  }

  @Test
  public void test73()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      FBTpbMapper fBTpbMapper0 = fBConnectionProperties0.getMapper();
      assertNotNull(fBTpbMapper0);
      
      FBTpbMapper fBTpbMapper1 = fBConnectionProperties0.getMapper();
      assertNotNull(fBTpbMapper1);
      assertSame(fBTpbMapper1, fBTpbMapper0);
      assertEquals(2, fBTpbMapper1.getDefaultTransactionIsolation());
  }

  @Test
  public void test74()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.setTpbMapping("Y0F");
      try {
        fBConnectionProperties0.getMapper();
        fail("Expecting exception: FBResourceException");
      } catch(FBResourceException e) {
        /*
         * Cannot load TPB mapping.Can't find bundle for base name Y0F, locale ko, error code: HY000
         */
      }
  }
}
