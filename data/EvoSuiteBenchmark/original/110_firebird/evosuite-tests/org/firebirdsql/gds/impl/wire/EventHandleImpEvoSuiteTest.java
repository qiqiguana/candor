/*
 * This file was automatically generated by EvoSuite
 */

package org.firebirdsql.gds.impl.wire;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import org.firebirdsql.gds.impl.wire.EventHandleImp;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class EventHandleImpEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      EventHandleImp eventHandleImp0 = new EventHandleImp("");
      assertNotNull(eventHandleImp0);
      
      String string0 = eventHandleImp0.toString();
      assertEquals("EventHandle: internal id = -1, external id = -1", string0);
      assertEquals(-1, eventHandleImp0.getEventCount());
      assertNotNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      EventHandleImp eventHandleImp0 = new EventHandleImp("");
      assertNotNull(eventHandleImp0);
      assertEquals(-1, eventHandleImp0.getEventCount());
      
      eventHandleImp0.calculateCount();
      assertEquals(0, eventHandleImp0.getEventCount());
  }

  @Test
  public void test2()  throws Throwable  {
      EventHandleImp eventHandleImp0 = new EventHandleImp("&Bo|n");
      assertNotNull(eventHandleImp0);
      
      eventHandleImp0.getParameterBuffer();
      assertEquals(-1, eventHandleImp0.getEventCount());
      assertEquals("EventHandle: internal id = -1, external id = -1", eventHandleImp0.toString());
      assertEquals(-1, eventHandleImp0.getEventId());
  }

  @Test
  public void test3()  throws Throwable  {
      EventHandleImp eventHandleImp0 = new EventHandleImp("uC[55");
      assertNotNull(eventHandleImp0);
      
      String string0 = eventHandleImp0.getEventName();
      assertEquals(-1, eventHandleImp0.getEventCount());
      assertEquals("EventHandle: internal id = -1, external id = -1", eventHandleImp0.toString());
      assertNotNull(string0);
      assertEquals(-1, eventHandleImp0.getLocalId());
  }

  @Test
  public void test4()  throws Throwable  {
      EventHandleImp eventHandleImp0 = new EventHandleImp("");
      assertNotNull(eventHandleImp0);
      
      int int0 = eventHandleImp0.getLocalId();
      assertEquals(-1, eventHandleImp0.getEventId());
      assertEquals(-1, eventHandleImp0.getEventCount());
      assertEquals((-1), int0);
  }

  @Test
  public void test5()  throws Throwable  {
      EventHandleImp eventHandleImp0 = new EventHandleImp("");
      assertNotNull(eventHandleImp0);
      
      int int0 = eventHandleImp0.getEventCount();
      assertEquals("EventHandle: internal id = -1, external id = -1", eventHandleImp0.toString());
      assertEquals((-1), int0);
  }

  @Test
  public void test6()  throws Throwable  {
      EventHandleImp eventHandleImp0 = new EventHandleImp("");
      assertNotNull(eventHandleImp0);
      
      eventHandleImp0.setLocalId((-1540));
      assertEquals(-1540, eventHandleImp0.getLocalId());
      assertEquals(-1, eventHandleImp0.getEventId());
  }

  @Test
  public void test7()  throws Throwable  {
      EventHandleImp eventHandleImp0 = new EventHandleImp("");
      assertNotNull(eventHandleImp0);
      
      eventHandleImp0.setInternalCount(0);
      assertEquals(-1, eventHandleImp0.getEventCount());
      assertEquals("EventHandle: internal id = -1, external id = -1", eventHandleImp0.toString());
      assertEquals(-1, eventHandleImp0.getEventId());
  }

  @Test
  public void test8()  throws Throwable  {
      EventHandleImp eventHandleImp0 = new EventHandleImp("");
      assertNotNull(eventHandleImp0);
      assertEquals("EventHandle: internal id = -1, external id = -1", eventHandleImp0.toString());
      
      eventHandleImp0.setEventId(0);
      assertEquals(0, eventHandleImp0.getEventId());
      assertEquals("EventHandle: internal id = -1, external id = 0", eventHandleImp0.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      EventHandleImp eventHandleImp0 = new EventHandleImp("");
      assertNotNull(eventHandleImp0);
      
      int int0 = eventHandleImp0.getEventId();
      assertEquals(-1, eventHandleImp0.getEventCount());
      assertEquals("EventHandle: internal id = -1, external id = -1", eventHandleImp0.toString());
      assertEquals((-1), int0);
  }

  @Test
  public void test10()  throws Throwable  {
      EventHandleImp eventHandleImp0 = null;
      try {
        eventHandleImp0 = new EventHandleImp((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      EventHandleImp eventHandleImp0 = new EventHandleImp("EventHandle: internal id = ");
      assertNotNull(eventHandleImp0);
      
      byte[] byteArray0 = eventHandleImp0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(-1, eventHandleImp0.getEventCount());
      assertEquals("EventHandle: internal id = -1, external id = -1", eventHandleImp0.toString());
      assertEquals(-1, eventHandleImp0.getLocalId());
  }
}
