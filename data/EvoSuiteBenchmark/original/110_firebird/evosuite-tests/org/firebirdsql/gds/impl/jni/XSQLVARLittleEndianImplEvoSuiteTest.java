/*
 * This file was automatically generated by EvoSuite
 */

package org.firebirdsql.gds.impl.jni;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.sql.Date;
import java.sql.SQLException;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.TimeZone;
import org.firebirdsql.gds.impl.jni.XSQLVARLittleEndianImpl;
import org.firebirdsql.jdbc.FBSQLException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class XSQLVARLittleEndianImplEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl();
      Time time0 = xSQLVARLittleEndianImpl0.decodeTime(xSQLVARLittleEndianImpl0.sqldata);
      assertEquals(0, time0.getSeconds());
  }

  @Test
  public void test1()  throws Throwable  {
      XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl();
      Date date0 = xSQLVARLittleEndianImpl0.decodeDate(xSQLVARLittleEndianImpl0.sqldata);
      byte[] byteArray0 = xSQLVARLittleEndianImpl0.encodeDate(date0);
      assertNotNull(byteArray0);
  }

  @Test
  public void test2()  throws Throwable  {
      XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl();
      // Undeclared exception!
      try {
        xSQLVARLittleEndianImpl0.encodeTimestamp((Timestamp) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl();
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(1721119, (int) (byte) (-31), (int) (byte)0, (int) (byte) (-31), (-1474));
      Time time0 = xSQLVARLittleEndianImpl0.decodeTimeCalendar(xSQLVARLittleEndianImpl0.sqldata, (Calendar) gregorianCalendar0);
      byte[] byteArray0 = xSQLVARLittleEndianImpl0.encodeTime(time0);
      assertNotNull(byteArray0);
  }

  @Test
  public void test4()  throws Throwable  {
      XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl();
      byte[] byteArray0 = xSQLVARLittleEndianImpl0.encodeLong((-1022L));
      assertNotNull(byteArray0);
      
      Timestamp timestamp0 = xSQLVARLittleEndianImpl0.decodeTimestamp(byteArray0);
      assertNotNull(timestamp0);
      
      Timestamp timestamp1 = xSQLVARLittleEndianImpl0.encodeTimestamp(timestamp0, (Calendar) null);
      assertNotNull(timestamp1);
      assertEquals("1856-01-29 23:59:59.943", timestamp1.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl();
      float float0 = xSQLVARLittleEndianImpl0.decodeFloat(byteArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test6()  throws Throwable  {
      XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl();
      // Undeclared exception!
      try {
        xSQLVARLittleEndianImpl0.decodeDouble(xSQLVARLittleEndianImpl0.sqldata);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl(1613, 1613, (-770), 1613, byteArray0, "", "", "", "", "");
      Timestamp timestamp0 = new Timestamp((long) (byte)106);
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar();
      Timestamp timestamp1 = xSQLVARLittleEndianImpl0.encodeTimestamp(timestamp0, (Calendar) gregorianCalendar0);
      assertEquals("java.util.GregorianCalendar[time=1372787714131,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=,offset=1057,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=55,SECOND=15,MILLISECOND=188,ZONE_OFFSET=1057,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(0, timestamp1.getSeconds());
  }

  @Test
  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl((-791), (-791), (-1842), 0, byteArray0, (String) null, (String) null, (String) null, (String) null);
      xSQLVARLittleEndianImpl0.decodeString(byteArray0, (String) null, (String) null);
      byte[] byteArray1 = xSQLVARLittleEndianImpl0.encodeString("Cp864", "\u0010'\u000E\u0000", "_");
      assertFalse(byteArray1.equals(byteArray0));
  }

  @Test
  public void test9()  throws Throwable  {
      XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl();
      // Undeclared exception!
      try {
        xSQLVARLittleEndianImpl0.decodeShort(xSQLVARLittleEndianImpl0.sqldata);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl();
      byte[] byteArray0 = xSQLVARLittleEndianImpl0.encodeShort((short) (byte) (-1));
      assertNotNull(byteArray0);
  }

  @Test
  public void test11()  throws Throwable  {
      XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl();
      byte[] byteArray0 = xSQLVARLittleEndianImpl0.encodeDouble((double) (byte)94);
      assertNotNull(byteArray0);
  }

  @Test
  public void test12()  throws Throwable  {
      XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl();
      XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl1 = (XSQLVARLittleEndianImpl)xSQLVARLittleEndianImpl0.deepCopy();
      assertNotSame(xSQLVARLittleEndianImpl0, xSQLVARLittleEndianImpl1);
  }

  @Test
  public void test13()  throws Throwable  {
      XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl();
      byte[] byteArray0 = xSQLVARLittleEndianImpl0.encodeFloat((float) 0);
      assertNotNull(byteArray0);
  }

  @Test
  public void test14()  throws Throwable  {
      XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl();
      try {
        xSQLVARLittleEndianImpl0.encodeString("", "", "#;8+8");
        fail("Expecting exception: FBSQLException");
      } catch(FBSQLException e) {
        /*
         * Character translation #;8+8 could not be found.
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl();
      try {
        xSQLVARLittleEndianImpl0.encodeString(xSQLVARLittleEndianImpl0.sqldata, "", "");
        fail("Expecting exception: FBSQLException");
      } catch(FBSQLException e) {
        /*
         * Character translation  could not be found.
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl();
      byte[] byteArray0 = xSQLVARLittleEndianImpl0.encodeString(xSQLVARLittleEndianImpl0.sqldata, (String) null, (String) null);
      assertNull(byteArray0);
  }

  @Test
  public void test17()  throws Throwable  {
      XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl();
      byte[] byteArray0 = new byte[3];
      String string0 = xSQLVARLittleEndianImpl0.decodeString(byteArray0, (String) null, (String) null);
      assertNotNull(string0);
      
      byte[] byteArray1 = xSQLVARLittleEndianImpl0.encodeString(byteArray0, "", "");
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
  }

  @Test
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl((-791), (-791), (-1842), 0, byteArray0, (String) null, (String) null, (String) null, (String) null);
      String string0 = xSQLVARLittleEndianImpl0.decodeString(byteArray0, (String) null, (String) null);
      String string1 = xSQLVARLittleEndianImpl0.decodeString(xSQLVARLittleEndianImpl0.sqldata, (String) null, "\u0010'\u000E\u0000");
      assertTrue(string1.equals(string0));
  }

  @Test
  public void test19()  throws Throwable  {
      XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl();
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(1721119, (int) (byte) (-31), (int) (byte)0, (int) (byte) (-31), (-1474));
      Timestamp timestamp0 = new Timestamp(0L);
      Timestamp timestamp1 = xSQLVARLittleEndianImpl0.decodeTimestamp(timestamp0, (Calendar) gregorianCalendar0);
      assertNotNull(timestamp1);
      assertEquals("1970-01-01 00:00:02.057", timestamp1.toString());
  }

  @Test
  public void test20()  throws Throwable  {
      XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl();
      Timestamp timestamp0 = new Timestamp((long) 0);
      Timestamp timestamp1 = xSQLVARLittleEndianImpl0.decodeTimestamp(timestamp0, (Calendar) null);
      assertEquals(0, timestamp1.getTimezoneOffset());
  }

  @Test
  public void test21()  throws Throwable  {
      XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl();
      byte[] byteArray0 = new byte[10];
      // Undeclared exception!
      try {
        xSQLVARLittleEndianImpl0.decodeTimestamp(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Bad parameter to decode
         */
      }
  }

  @Test
  public void test22()  throws Throwable  {
      XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl();
      Time time0 = new Time((long) 0);
      Locale locale0 = Locale.KOREA;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      Time time1 = xSQLVARLittleEndianImpl0.encodeTime(time0, (Calendar) gregorianCalendar0);
      assertEquals(0L, gregorianCalendar0.getTimeInMillis());
      assertTrue(time1.equals(time0));
  }

  @Test
  public void test23()  throws Throwable  {
      XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl();
      Time time0 = new Time((long) 0);
      Time time1 = xSQLVARLittleEndianImpl0.encodeTime(time0, (Calendar) null);
      assertEquals(0L, time1.getTime());
  }

  @Test
  public void test24()  throws Throwable  {
      XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl();
      Time time0 = new Time((long) 0);
      Locale locale0 = Locale.KOREA;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      Time time1 = xSQLVARLittleEndianImpl0.decodeTime(time0, (Calendar) gregorianCalendar0);
      assertEquals(0L, gregorianCalendar0.getTimeInMillis());
      assertNotSame(time0, time1);
  }

  @Test
  public void test25()  throws Throwable  {
      XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl();
      Time time0 = new Time((long) 0);
      Time time1 = xSQLVARLittleEndianImpl0.decodeTime(time0, (Calendar) null);
      assertSame(time1, time0);
  }

  @Test
  public void test26()  throws Throwable  {
      XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl();
      Date date0 = xSQLVARLittleEndianImpl0.decodeDate(xSQLVARLittleEndianImpl0.sqldata);
      Locale locale0 = Locale.getDefault();
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance(locale0);
      Date date1 = xSQLVARLittleEndianImpl0.encodeDate(date0, (Calendar) gregorianCalendar0);
      assertEquals("java.util.GregorianCalendar[time=-62170156801057,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=,offset=1057,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=2,MONTH=10,WEEK_OF_YEAR=48,WEEK_OF_MONTH=4,DAY_OF_MONTH=30,DAY_OF_YEAR=334,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=1057,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertTrue(date1.equals(date0));
  }

  @Test
  public void test27()  throws Throwable  {
      XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl();
      Date date0 = xSQLVARLittleEndianImpl0.encodeDate((Date) null, (Calendar) null);
      assertNull(date0);
  }

  @Test
  public void test28()  throws Throwable  {
      XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl();
      Date date0 = xSQLVARLittleEndianImpl0.decodeDate(xSQLVARLittleEndianImpl0.sqldata);
      Date date1 = xSQLVARLittleEndianImpl0.decodeDate(date0, (Calendar) null);
      assertEquals("30-Nov-0002 00:00:00", date1.toLocaleString());
  }

  @Test
  public void test29()  throws Throwable  {
      XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl();
      Date date0 = xSQLVARLittleEndianImpl0.decodeDate(xSQLVARLittleEndianImpl0.sqldata);
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(timeZone0);
      Date date1 = xSQLVARLittleEndianImpl0.decodeDate(date0, (Calendar) gregorianCalendar0);
      assertEquals("java.util.GregorianCalendar[time=-62170156801057,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=2,MONTH=10,WEEK_OF_YEAR=48,WEEK_OF_MONTH=4,DAY_OF_MONTH=29,DAY_OF_YEAR=333,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=58,MILLISECOND=943,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertTrue(date0.equals(date1));
  }

  @Test
  public void test30()  throws Throwable  {
      XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl();
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(1721119, (int) (byte) (-31), (int) (byte)0, (int) (byte) (-31), (-1474));
      Date date0 = xSQLVARLittleEndianImpl0.decodeDate((Date) null, (Calendar) gregorianCalendar0);
      assertNull(date0);
  }

  @Test
  public void test31()  throws Throwable  {
      XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl();
      byte[] byteArray0 = new byte[5];
      Date date0 = xSQLVARLittleEndianImpl0.decodeDate(byteArray0);
      assertNotNull(date0);
      assertEquals(3, date0.getDay());
  }

  @Test
  public void test32()  throws Throwable  {
      XSQLVARLittleEndianImpl xSQLVARLittleEndianImpl0 = new XSQLVARLittleEndianImpl();
      byte[] byteArray0 = new byte[22];
      byteArray0[3] = (byte)82;
      Date date0 = xSQLVARLittleEndianImpl0.decodeDate(byteArray0);
      assertNotNull(date0);
      
      byte[] byteArray1 = xSQLVARLittleEndianImpl0.encodeDate(date0);
      assertNotNull(byteArray1);
      assertEquals(9, date0.getDate());
      assertEquals(0, date0.getDay());
  }
}
