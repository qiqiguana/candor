/*
 * This file was automatically generated by EvoSuite
 */

package org.firebirdsql.gds.impl.jni;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.firebirdsql.gds.impl.jni.EventHandleImp;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class EventHandleImpEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      EventHandleImp eventHandleImp0 = new EventHandleImp("eventHandle: ");
      assertNotNull(eventHandleImp0);
      
      eventHandleImp0.setEventId(1564);
      assertEquals(1564, eventHandleImp0.getEventId());
      assertEquals("eventHandle: -1, size: -1, eventCount: -1", eventHandleImp0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      EventHandleImp eventHandleImp0 = new EventHandleImp("*NhS(}@4z\";<");
      assertNotNull(eventHandleImp0);
      
      int int0 = eventHandleImp0.getSize();
      assertEquals(-1, eventHandleImp0.getEventId());
      assertEquals("eventHandle: -1, size: -1, eventCount: -1", eventHandleImp0.toString());
      assertEquals(false, eventHandleImp0.isCancelled());
      assertEquals((-1), int0);
  }

  @Test
  public void test2()  throws Throwable  {
      EventHandleImp eventHandleImp0 = new EventHandleImp("*NhS(}@4z\";<");
      assertNotNull(eventHandleImp0);
      assertEquals(-1, eventHandleImp0.getEventCount());
      
      eventHandleImp0.setEventCount(0);
      assertEquals("eventHandle: -1, size: -1, eventCount: 0", eventHandleImp0.toString());
      assertEquals(0, eventHandleImp0.getEventCount());
  }

  @Test
  public void test3()  throws Throwable  {
      EventHandleImp eventHandleImp0 = new EventHandleImp();
      int int0 = eventHandleImp0.getEventStructHandle();
      assertEquals(-1, eventHandleImp0.getEventId());
      assertEquals("eventHandle: -1, size: -1, eventCount: -1", eventHandleImp0.toString());
      assertEquals((-1), int0);
      assertEquals(false, eventHandleImp0.isCancelled());
  }

  @Test
  public void test4()  throws Throwable  {
      EventHandleImp eventHandleImp0 = new EventHandleImp("*NhS(}@4z\";<");
      assertNotNull(eventHandleImp0);
      
      String string0 = eventHandleImp0.toString();
      assertNotNull(string0);
      assertEquals("eventHandle: -1, size: -1, eventCount: -1", string0);
      assertEquals(false, eventHandleImp0.isCancelled());
      assertEquals(-1, eventHandleImp0.getEventId());
  }

  @Test
  public void test5()  throws Throwable  {
      EventHandleImp eventHandleImp0 = new EventHandleImp("*NhS(}@4z\";<");
      assertNotNull(eventHandleImp0);
      
      int int0 = eventHandleImp0.getEventCount();
      assertEquals(-1, eventHandleImp0.getEventId());
      assertEquals((-1), int0);
      assertEquals(false, eventHandleImp0.isCancelled());
      assertEquals("eventHandle: -1, size: -1, eventCount: -1", eventHandleImp0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      EventHandleImp eventHandleImp0 = new EventHandleImp("*NhS(}@4z\";<");
      assertNotNull(eventHandleImp0);
      
      String string0 = eventHandleImp0.getEventName();
      assertNotNull(string0);
      assertEquals(-1, eventHandleImp0.getEventId());
      assertEquals(false, eventHandleImp0.isCancelled());
      assertEquals("eventHandle: -1, size: -1, eventCount: -1", eventHandleImp0.toString());
      assertEquals(-1, eventHandleImp0.getEventStructHandle());
  }

  @Test
  public void test7()  throws Throwable  {
      EventHandleImp eventHandleImp0 = new EventHandleImp("*NhS(}@4z\";<");
      assertEquals(false, eventHandleImp0.isCancelled());
      assertNotNull(eventHandleImp0);
      
      eventHandleImp0.cancel();
      assertEquals(true, eventHandleImp0.isCancelled());
      assertEquals("eventHandle: -1, size: -1, eventCount: -1", eventHandleImp0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      EventHandleImp eventHandleImp0 = new EventHandleImp("*NhS(}@4z\";<");
      assertNotNull(eventHandleImp0);
      
      int int0 = eventHandleImp0.getEventId();
      assertEquals((-1), int0);
      assertEquals(false, eventHandleImp0.isCancelled());
      assertEquals("eventHandle: -1, size: -1, eventCount: -1", eventHandleImp0.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      EventHandleImp eventHandleImp0 = new EventHandleImp("");
      assertNotNull(eventHandleImp0);
      
      eventHandleImp0.setSize(442);
      assertEquals(442, eventHandleImp0.getSize());
      assertEquals(false, eventHandleImp0.isValid());
  }

  @Test
  public void test10()  throws Throwable  {
      EventHandleImp eventHandleImp0 = new EventHandleImp("*NhS(}@4z\";<");
      assertNotNull(eventHandleImp0);
      
      boolean boolean0 = eventHandleImp0.isCancelled();
      assertEquals(false, boolean0);
      assertEquals(-1, eventHandleImp0.getEventId());
      assertEquals("eventHandle: -1, size: -1, eventCount: -1", eventHandleImp0.toString());
  }

  @Test
  public void test11()  throws Throwable  {
      EventHandleImp eventHandleImp0 = null;
      try {
        eventHandleImp0 = new EventHandleImp((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      EventHandleImp eventHandleImp0 = new EventHandleImp("*NhS(}@4z\";<");
      assertNotNull(eventHandleImp0);
      
      boolean boolean0 = eventHandleImp0.isValid();
      assertEquals(false, eventHandleImp0.isCancelled());
      assertEquals(false, boolean0);
      assertEquals(-1, eventHandleImp0.getEventId());
      assertEquals("eventHandle: -1, size: -1, eventCount: -1", eventHandleImp0.toString());
  }

  @Test
  public void test13()  throws Throwable  {
      EventHandleImp eventHandleImp0 = new EventHandleImp();
      eventHandleImp0.setEventStructHandle(1195);
      boolean boolean0 = eventHandleImp0.isValid();
      assertEquals(1195, eventHandleImp0.getEventStructHandle());
      assertEquals(true, boolean0);
  }
}
