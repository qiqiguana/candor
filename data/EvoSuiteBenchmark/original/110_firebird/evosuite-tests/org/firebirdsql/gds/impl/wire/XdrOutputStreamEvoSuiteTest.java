/*
 * This file was automatically generated by EvoSuite
 */

package org.firebirdsql.gds.impl.wire;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import org.firebirdsql.gds.XSQLDA;
import org.firebirdsql.gds.XSQLVAR;
import org.firebirdsql.gds.impl.wire.BlobParameterBufferImp;
import org.firebirdsql.gds.impl.wire.XdrOutputStream;
import org.firebirdsql.gds.impl.wire.Xdrable;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class XdrOutputStreamEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      XdrOutputStream xdrOutputStream0 = new XdrOutputStream();
      byte[] byteArray0 = new byte[8];
      xdrOutputStream0.write(byteArray0);
  }

  @Test
  public void test1()  throws Throwable  {
      XdrOutputStream xdrOutputStream0 = new XdrOutputStream();
      xdrOutputStream0.writeString("h+@(^Y$B#6+");
  }

  @Test
  public void test2()  throws Throwable  {
      XdrOutputStream xdrOutputStream0 = new XdrOutputStream();
      // Undeclared exception!
      try {
        xdrOutputStream0.close();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      XdrOutputStream xdrOutputStream0 = new XdrOutputStream();
      xdrOutputStream0.writeLong((long) (byte)61);
  }

  @Test
  public void test4()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PrintStream printStream0 = new PrintStream((OutputStream) pipedOutputStream0);
      XdrOutputStream xdrOutputStream0 = new XdrOutputStream((OutputStream) printStream0);
      xdrOutputStream0.write(1604);
      byte[] byteArray0 = new byte[2];
      xdrOutputStream0.write(byteArray0, 1482, 17);
      assertEquals(true, printStream0.checkError());
  }

  @Test
  public void test5()  throws Throwable  {
      XdrOutputStream xdrOutputStream0 = new XdrOutputStream();
      xdrOutputStream0.writeBuffer((byte[]) null);
  }

  @Test
  public void test6()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PrintStream printStream0 = new PrintStream((OutputStream) pipedOutputStream0);
      XdrOutputStream xdrOutputStream0 = new XdrOutputStream((OutputStream) printStream0);
      byte[] byteArray0 = new byte[2];
      xdrOutputStream0.writeBlobBuffer(byteArray0);
      assertEquals(false, printStream0.checkError());
  }

  @Test
  public void test7()  throws Throwable  {
      XdrOutputStream xdrOutputStream0 = new XdrOutputStream();
      xdrOutputStream0.writeString("0 HV<pi\".{8cS*4yY", (String) null);
  }

  @Test
  public void test8()  throws Throwable  {
      XdrOutputStream xdrOutputStream0 = new XdrOutputStream();
      try {
        xdrOutputStream0.writeString(",", ",");
        fail("Expecting exception: UnsupportedEncodingException");
      } catch(UnsupportedEncodingException e) {
        /*
         * ,
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      XdrOutputStream xdrOutputStream0 = new XdrOutputStream();
      byte[] byteArray0 = new byte[8];
      xdrOutputStream0.writeSet((int) (byte)0, byteArray0);
  }

  @Test
  public void test10()  throws Throwable  {
      XdrOutputStream xdrOutputStream0 = new XdrOutputStream();
      xdrOutputStream0.writeSet((int) (byte) (-6), (byte[]) null);
  }

  @Test
  public void test11()  throws Throwable  {
      XdrOutputStream xdrOutputStream0 = new XdrOutputStream();
      BlobParameterBufferImp blobParameterBufferImp0 = new BlobParameterBufferImp();
      xdrOutputStream0.writeTyped((int) (byte) (-79), (Xdrable) blobParameterBufferImp0);
      assertEquals(0, blobParameterBufferImp0.getLength());
  }

  @Test
  public void test12()  throws Throwable  {
      XdrOutputStream xdrOutputStream0 = new XdrOutputStream();
      xdrOutputStream0.writeTyped(1405, (Xdrable) null);
  }

  @Test
  public void test13()  throws Throwable  {
      XdrOutputStream xdrOutputStream0 = new XdrOutputStream((OutputStream) null);
      XSQLDA xSQLDA0 = new XSQLDA();
      xdrOutputStream0.writeSQLData(xSQLDA0);
      assertEquals(0, xSQLDA0.sqld);
  }

  @Test
  public void test14()  throws Throwable  {
      XdrOutputStream xdrOutputStream0 = new XdrOutputStream();
      XSQLDA xSQLDA0 = new XSQLDA(121);
      int[] intArray0 = new int[10];
      intArray0[0] = 121;
      xSQLDA0.ioLength = intArray0;
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[5];
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      xSQLVARArray0[0] = xSQLVAR0;
      xSQLDA0.sqlvar = (org.firebirdsql.gds.XSQLVAR[]) xSQLVARArray0;
      // Undeclared exception!
      try {
        xdrOutputStream0.writeSQLData(xSQLDA0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test15()  throws Throwable  {
      XdrOutputStream xdrOutputStream0 = new XdrOutputStream();
      XSQLDA xSQLDA0 = new XSQLDA(121);
      int[] intArray0 = new int[10];
      xSQLDA0.ioLength = intArray0;
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[5];
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      xSQLVARArray0[0] = xSQLVAR0;
      intArray0[4] = (-1);
      xSQLVARArray0[1] = xSQLVARArray0[0];
      xSQLVARArray0[2] = xSQLVARArray0[0];
      xSQLVARArray0[3] = xSQLVARArray0[2];
      xSQLVARArray0[4] = xSQLVARArray0[1];
      xSQLDA0.sqlvar = (org.firebirdsql.gds.XSQLVAR[]) xSQLVARArray0;
      // Undeclared exception!
      try {
        xdrOutputStream0.writeSQLData(xSQLDA0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 5
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PrintStream printStream0 = new PrintStream((OutputStream) pipedOutputStream0);
      XdrOutputStream xdrOutputStream0 = new XdrOutputStream((OutputStream) printStream0);
      byte[] byteArray0 = new byte[2];
      xdrOutputStream0.write(byteArray0, 1594, 1401);
      assertEquals(true, printStream0.checkError());
  }

  @Test
  public void test17()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PrintStream printStream0 = new PrintStream((OutputStream) pipedOutputStream0);
      XdrOutputStream xdrOutputStream0 = new XdrOutputStream((OutputStream) printStream0);
      assertNotNull(xdrOutputStream0);
      
      xdrOutputStream0.flush();
      assertEquals(false, printStream0.checkError());
  }

  @Test
  public void test18()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PrintStream printStream0 = new PrintStream((OutputStream) pipedOutputStream0);
      XdrOutputStream xdrOutputStream0 = new XdrOutputStream((OutputStream) printStream0);
      xdrOutputStream0.write(1604);
      xdrOutputStream0.flush();
      assertEquals(true, printStream0.checkError());
  }

  @Test
  public void test19()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PrintStream printStream0 = new PrintStream((OutputStream) pipedOutputStream0);
      XdrOutputStream xdrOutputStream0 = new XdrOutputStream((OutputStream) printStream0);
      byte[] byteArray0 = new byte[10];
      // Undeclared exception!
      try {
        xdrOutputStream0.write(byteArray0, (int) (byte)0, 65536);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }
}
