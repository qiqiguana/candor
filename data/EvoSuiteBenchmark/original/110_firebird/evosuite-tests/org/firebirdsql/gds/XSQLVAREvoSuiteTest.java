/*
 * This file was automatically generated by EvoSuite
 */

package org.firebirdsql.gds;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.sql.Date;
import java.sql.SQLException;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Locale;
import org.firebirdsql.gds.XSQLVAR;
import org.firebirdsql.jdbc.FBSQLException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class XSQLVAREvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      byte[] byteArray0 = new byte[8];
      Timestamp timestamp0 = xSQLVAR0.decodeTimestamp(byteArray0);
      assertNotNull(timestamp0);
      
      byte[] byteArray1 = xSQLVAR0.encodeTimestamp(timestamp0);
      assertNotNull(byteArray1);
      assertEquals("17 Nov 1858 00:00:00 GMT", timestamp0.toGMTString());
      assertEquals(10, timestamp0.getMonth());
  }

  @Test
  public void test1()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      Date date0 = xSQLVAR0.decodeDate((byte[]) null);
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(745, 0, 0, 745, 0, 0);
      byte[] byteArray0 = xSQLVAR0.encodeDateCalendar(date0, (Calendar) gregorianCalendar0);
      assertNotNull(byteArray0);
  }

  @Test
  public void test2()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      XSQLVAR xSQLVAR1 = xSQLVAR0.deepCopy();
      assertNotSame(xSQLVAR1, xSQLVAR0);
      assertEquals(0, xSQLVAR1.sqlsubtype);
      assertEquals(0, xSQLVAR1.sqllen);
      assertEquals(0, xSQLVAR1.sqltype);
      assertEquals(0, xSQLVAR1.sqlscale);
      assertNotNull(xSQLVAR1);
  }

  @Test
  public void test3()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      // Undeclared exception!
      try {
        xSQLVAR0.decodeDouble(xSQLVAR0.sqldata);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      // Undeclared exception!
      try {
        xSQLVAR0.decodeShort(xSQLVAR0.sqldata);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      byte[] byteArray0 = xSQLVAR0.encodeShort((short)0);
      assertNotNull(byteArray0);
  }

  @Test
  public void test6()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      Time time0 = xSQLVAR0.decodeTime((byte[]) null);
      Locale locale0 = Locale.JAPANESE;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      xSQLVAR0.encodeTime(time0, (Calendar) gregorianCalendar0, false);
      assertEquals(1372788573431L, gregorianCalendar0.getTimeInMillis());
      assertEquals("java.util.GregorianCalendar[time=1372788573431,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Belfast\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/Belfast,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=9,SECOND=33,MILLISECOND=431,ZONE_OFFSET=0,DST_OFFSET=3600000]", gregorianCalendar0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      // Undeclared exception!
      try {
        xSQLVAR0.decodeFloat(xSQLVAR0.sqldata);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      Timestamp timestamp0 = new Timestamp((long) 0);
      Timestamp timestamp1 = xSQLVAR0.decodeTimestamp(timestamp0, (Calendar) null);
      assertEquals(0, timestamp1.getMinutes());
  }

  @Test
  public void test9()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      byte[] byteArray0 = xSQLVAR0.encodeDouble((double) 8);
      assertNotNull(byteArray0);
  }

  @Test
  public void test10()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      Time time0 = new Time((long) 0);
      byte[] byteArray0 = xSQLVAR0.encodeTime(time0);
      assertNotNull(byteArray0);
  }

  @Test
  public void test11()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      byte[] byteArray0 = xSQLVAR0.encodeFloat((float) 0);
      assertNotNull(byteArray0);
  }

  @Test
  public void test12()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      Timestamp timestamp0 = new Timestamp((long) 0);
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(0, 0, 0);
      Timestamp timestamp1 = xSQLVAR0.encodeTimestamp(timestamp0, (Calendar) gregorianCalendar0);
      assertEquals(0, timestamp1.getNanos());
      assertNotSame(timestamp0, timestamp1);
      assertNotNull(timestamp1);
  }

  @Test
  public void test13()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      Date date0 = new Date((-1376L));
      byte[] byteArray0 = xSQLVAR0.encodeDate(date0);
      assertNotNull(byteArray0);
  }

  @Test
  public void test14()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      byte[] byteArray0 = new byte[22];
      xSQLVAR0.sqldata = byteArray0;
      XSQLVAR xSQLVAR1 = xSQLVAR0.deepCopy();
      assertNotNull(xSQLVAR1);
      assertEquals(0, xSQLVAR1.sqllen);
      assertEquals(0, xSQLVAR1.sqlsubtype);
      assertEquals(0, xSQLVAR1.sqltype);
      assertEquals(0, xSQLVAR1.sqlscale);
      assertNotSame(xSQLVAR1, xSQLVAR0);
  }

  @Test
  public void test15()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      byte[] byteArray0 = new byte[22];
      xSQLVAR0.sqldata = byteArray0;
      xSQLVAR0.copyFrom(xSQLVAR0, false);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlscale);
  }

  @Test
  public void test16()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      xSQLVAR0.encodeString("", "", (String) null);
      // Undeclared exception!
      try {
        xSQLVAR0.encodeString((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test17()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      try {
        xSQLVAR0.encodeString((byte[]) null, "j1H|HOy%", "j1H|HOy%");
        fail("Expecting exception: FBSQLException");
      } catch(FBSQLException e) {
        /*
         * Character translation j1H|HOy% could not be found.
         */
      }
  }

  @Test
  public void test18()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      byte[] byteArray0 = xSQLVAR0.encodeString(xSQLVAR0.sqldata, (String) null, (String) null);
      assertNull(byteArray0);
  }

  @Test
  public void test19()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      byte[] byteArray0 = new byte[4];
      xSQLVAR0.decodeString(byteArray0, (String) null, (String) null);
      // Undeclared exception!
      try {
        xSQLVAR0.encodeString((byte[]) null, "j1H|HOy%", "j1H|HOy%");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test20()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      byte[] byteArray0 = new byte[4];
      xSQLVAR0.decodeString(byteArray0, (String) null, (String) null);
      String string0 = xSQLVAR0.decodeString(byteArray0, "888\uFFFD", "888\uFFFD");
      assertEquals("\u0000\u0000\u0000\u0000", string0);
  }

  @Test
  public void test21()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      byte[] byteArray0 = new byte[8];
      Timestamp timestamp0 = xSQLVAR0.decodeTimestamp(byteArray0);
      assertNotNull(timestamp0);
      
      Timestamp timestamp1 = xSQLVAR0.encodeTimestamp(timestamp0, (Calendar) null, false);
      assertEquals(17, timestamp1.getDate());
  }

  @Test
  public void test22()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      Timestamp timestamp0 = new Timestamp((long) 0);
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(0, 0, 0);
      Timestamp timestamp1 = xSQLVAR0.encodeTimestamp(timestamp0, (Calendar) gregorianCalendar0, true);
      assertNotNull(timestamp1);
      assertNotSame(timestamp1, timestamp0);
      assertEquals(0, timestamp1.getMinutes());
  }

  @Test
  public void test23()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      Timestamp timestamp0 = new Timestamp((long) 0);
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(0, 0, 0);
      Timestamp timestamp1 = xSQLVAR0.decodeTimestamp(timestamp0, (Calendar) gregorianCalendar0);
      assertNotSame(timestamp0, timestamp1);
      assertEquals(0, timestamp1.getMinutes());
      assertNotNull(timestamp1);
  }

  @Test
  public void test24()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      Timestamp timestamp0 = new Timestamp((long) 0);
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(0, 0, 0);
      Timestamp timestamp1 = xSQLVAR0.decodeTimestamp(timestamp0, (Calendar) gregorianCalendar0, true);
      assertNotNull(timestamp1);
      assertNotSame(timestamp0, timestamp1);
      assertEquals(0L, timestamp1.getTime());
  }

  @Test
  public void test25()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      byte[] byteArray0 = new byte[15];
      // Undeclared exception!
      try {
        xSQLVAR0.decodeTimestamp(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Bad parameter to decode
         */
      }
  }

  @Test
  public void test26()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      Time time0 = new Time((long) 0);
      Time time1 = xSQLVAR0.encodeTime(time0, (Calendar) null, false);
      assertSame(time0, time1);
  }

  @Test
  public void test27()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      Time time0 = new Time((long) 0);
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar((int) (byte)0, 8, 0, 0, 0, 8);
      Time time1 = xSQLVAR0.encodeTime(time0, (Calendar) gregorianCalendar0, true);
      assertNotNull(time1);
      assertNotSame(time0, time1);
      assertEquals("1970-01-01 01:00:00", time1.toLocaleString());
  }

  @Test
  public void test28()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      Time time0 = xSQLVAR0.decodeTime((byte[]) null);
      Locale locale0 = Locale.JAPANESE;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      Time time1 = xSQLVAR0.decodeTime(time0, (Calendar) gregorianCalendar0, false);
      assertEquals(1372788603607L, gregorianCalendar0.getTimeInMillis());
      assertTrue(time0.equals(time1));
  }

  @Test
  public void test29()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      Time time0 = xSQLVAR0.decodeTime((byte[]) null);
      Time time1 = xSQLVAR0.decodeTime(time0, (Calendar) null, true);
      assertEquals(0, time1.getSeconds());
  }

  @Test
  public void test30()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(0, 0, 0);
      Time time0 = new Time((long) 0);
      Time time1 = xSQLVAR0.decodeTime(time0, (Calendar) gregorianCalendar0, true);
      assertEquals(0L, time1.getTime());
      assertNotSame(time1, time0);
      assertNotNull(time1);
  }

  @Test
  public void test31()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar((-1702), 0, 0, 0, 0, 0);
      Date date0 = xSQLVAR0.decodeDateCalendar((byte[]) null, (Calendar) gregorianCalendar0);
      Date date1 = xSQLVAR0.encodeDate(date0, (Calendar) gregorianCalendar0);
      assertEquals((-62138534400000L), gregorianCalendar0.getTimeInMillis());
      assertTrue(date1.equals(date0));
  }

  @Test
  public void test32()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      Date date0 = xSQLVAR0.decodeDate((byte[]) null);
      Date date1 = xSQLVAR0.encodeDate(date0, (Calendar) null);
      assertSame(date0, date1);
  }

  @Test
  public void test33()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      Date date0 = xSQLVAR0.decodeDate((byte[]) null);
      Date date1 = xSQLVAR0.decodeDate(date0, (Calendar) null);
      assertSame(date1, date0);
  }

  @Test
  public void test34()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(0, 0, 0);
      Date date0 = xSQLVAR0.decodeDate((Date) null, (Calendar) gregorianCalendar0);
      assertNull(date0);
  }

  @Test
  public void test35()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar((-1702), 0, 0, 0, 0, 0);
      Date date0 = xSQLVAR0.decodeDateCalendar((byte[]) null, (Calendar) gregorianCalendar0);
      Date date1 = xSQLVAR0.decodeDate(date0, (Calendar) gregorianCalendar0);
      assertEquals("java.util.GregorianCalendar[time=-62138534400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Belfast\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/Belfast,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=10,WEEK_OF_YEAR=49,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=335,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertTrue(date0.equals(date1));
  }

  @Test
  public void test36()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-119);
      byteArray0[3] = (byte)15;
      Timestamp timestamp0 = xSQLVAR0.decodeTimestamp(byteArray0);
      assertNotNull(timestamp0);
      assertEquals("415269-01-12 00:00:00.0", timestamp0.toString());
  }
}
