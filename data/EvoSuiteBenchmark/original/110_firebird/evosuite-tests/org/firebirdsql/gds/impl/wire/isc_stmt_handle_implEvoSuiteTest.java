/*
 * This file was automatically generated by EvoSuite
 */

package org.firebirdsql.gds.impl.wire;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.firebirdsql.gds.XSQLDA;
import org.firebirdsql.gds.impl.AbstractIscTrHandle;
import org.firebirdsql.gds.impl.wire.isc_db_handle_impl;
import org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class isc_stmt_handle_implEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(false, isc_stmt_handle_impl0.isSingletonResult());
      
      isc_stmt_handle_impl0.setSingletonResult(true);
      assertEquals(true, isc_stmt_handle_impl0.isSingletonResult());
  }

  @Test
  public void test1()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      int int0 = isc_stmt_handle_impl0.size();
      assertEquals(false, isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, int0);
      assertEquals(false, isc_stmt_handle_impl0.isAllRowsFetched());
  }

  @Test
  public void test2()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.setDeleteCount((-1488));
      assertEquals(-1488, isc_stmt_handle_impl0.getDeleteCount());
  }

  @Test
  public void test3()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      boolean boolean0 = isc_stmt_handle_impl0.isSingletonResult();
      assertEquals(false, isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.setSelectCount((-5));
      assertEquals(-5, isc_stmt_handle_impl0.getSelectCount());
  }

  @Test
  public void test5()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      int int0 = isc_stmt_handle_impl0.getStatementType();
      assertEquals(0, int0);
      assertEquals(false, isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(false, isc_stmt_handle_impl0.isAllRowsFetched());
  }

  @Test
  public void test6()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(false, isc_stmt_handle_impl0.isAllRowsFetched());
      
      isc_stmt_handle_impl0.setAllRowsFetched(true);
      assertEquals(true, isc_stmt_handle_impl0.isAllRowsFetched());
  }

  @Test
  public void test7()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.notifyOpenResultSet();
      assertEquals(true, isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(false, isc_stmt_handle_impl0.isSingletonResult());
  }

  @Test
  public void test8()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.getRows();
      assertEquals(false, isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(false, isc_stmt_handle_impl0.isSingletonResult());
  }

  @Test
  public void test9()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.getRsr_rdb();
      assertEquals(false, isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(false, isc_stmt_handle_impl0.isSingletonResult());
  }

  @Test
  public void test10()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.setInsertCount(0);
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(false, isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(false, isc_stmt_handle_impl0.isSingletonResult());
  }

  @Test
  public void test11()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.unregisterTransaction();
      assertEquals(false, isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(false, isc_stmt_handle_impl0.isSingletonResult());
  }

  @Test
  public void test12()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      int int0 = isc_stmt_handle_impl0.getDeleteCount();
      assertEquals(false, isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(false, isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, int0);
  }

  @Test
  public void test13()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.setRsr_id((-5));
      assertEquals(-5, isc_stmt_handle_impl0.getRsr_id());
  }

  @Test
  public void test14()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      int int0 = isc_stmt_handle_impl0.getRsr_id();
      assertEquals(false, isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(false, isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, int0);
  }

  @Test
  public void test15()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.registerTransaction((AbstractIscTrHandle) null);
      assertEquals(false, isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(false, isc_stmt_handle_impl0.isSingletonResult());
  }

  @Test
  public void test16()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      XSQLDA xSQLDA0 = new XSQLDA(129);
      isc_stmt_handle_impl0.setInSqlda(xSQLDA0);
      assertEquals(false, isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(false, isc_stmt_handle_impl0.isAllRowsFetched());
  }

  @Test
  public void test17()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      int int0 = isc_stmt_handle_impl0.getUpdateCount();
      assertEquals(false, isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, int0);
      assertEquals(false, isc_stmt_handle_impl0.isAllRowsFetched());
  }

  @Test
  public void test18()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      int int0 = isc_stmt_handle_impl0.getInsertCount();
      assertEquals(false, isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, int0);
      assertEquals(false, isc_stmt_handle_impl0.isSingletonResult());
  }

  @Test
  public void test19()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      boolean boolean0 = isc_stmt_handle_impl0.isAllRowsFetched();
      assertEquals(false, isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(false, boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.setUpdateCount(0);
      assertEquals(false, isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(false, isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
  }

  @Test
  public void test21()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      byte[][] byteArray0 = new byte[6][2];
      // Undeclared exception!
      try {
        isc_stmt_handle_impl0.addRow(byteArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test22()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      int int0 = isc_stmt_handle_impl0.getSelectCount();
      assertEquals(0, int0);
      assertEquals(false, isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(false, isc_stmt_handle_impl0.isSingletonResult());
  }

  @Test
  public void test23()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.getInSqlda();
      assertEquals(false, isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(false, isc_stmt_handle_impl0.isSingletonResult());
  }

  @Test
  public void test24()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.getTransaction();
      assertEquals(false, isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(false, isc_stmt_handle_impl0.isAllRowsFetched());
  }

  @Test
  public void test25()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.setStatementType(0);
      assertEquals(false, isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(false, isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
  }

  @Test
  public void test26()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.getOutSqlda();
      assertEquals(false, isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(false, isc_stmt_handle_impl0.isAllRowsFetched());
  }

  @Test
  public void test27()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.removeRows();
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(false, isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(false, isc_stmt_handle_impl0.isSingletonResult());
  }

  @Test
  public void test28()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.hasOpenResultSet();
      assertEquals(false, isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(false, isc_stmt_handle_impl0.isSingletonResult());
  }

  @Test
  public void test29()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      isc_stmt_handle_impl0.setRsr_rdb(isc_db_handle_impl0);
      boolean boolean0 = isc_stmt_handle_impl0.isValid();
      assertEquals(true, isc_stmt_handle_impl0.isValid());
      assertEquals(true, boolean0);
  }

  @Test
  public void test30()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.setOutSqlda((XSQLDA) null);
      assertEquals(false, isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(false, isc_stmt_handle_impl0.isSingletonResult());
  }

  @Test
  public void test31()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.ensureCapacity(0);
      isc_stmt_handle_impl0.ensureCapacity((int) (byte)36);
      assertEquals(false, isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(false, isc_stmt_handle_impl0.isAllRowsFetched());
  }

  @Test
  public void test32()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.ensureCapacity(0);
      isc_stmt_handle_impl0.ensureCapacity(0);
      assertEquals(false, isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(false, isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.size());
  }

  @Test
  public void test33()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.clearRows();
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(false, isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(false, isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(false, isc_stmt_handle_impl0.isSingletonResult());
  }

  @Test
  public void test34()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.ensureCapacity(0);
      isc_stmt_handle_impl0.clearRows();
      assertEquals(false, isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(false, isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(false, isc_stmt_handle_impl0.isAllRowsFetched());
  }

  @Test
  public void test35()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      boolean boolean0 = isc_stmt_handle_impl0.isValid();
      assertEquals(false, isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(false, boolean0);
      assertEquals(false, isc_stmt_handle_impl0.isSingletonResult());
  }

  @Test
  public void test36()  throws Throwable  {
      isc_stmt_handle_impl.printRow((byte[][]) null);
  }

  @Test
  public void test37()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][7];
      byteArray0[0] = null;
      isc_stmt_handle_impl.printRow(byteArray0);
  }

  @Test
  public void test38()  throws Throwable  {
      byte[][] byteArray0 = new byte[2][4];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)74;
      byteArray0[1] = byteArray1;
      isc_stmt_handle_impl.printRow(byteArray0);
  }
}
