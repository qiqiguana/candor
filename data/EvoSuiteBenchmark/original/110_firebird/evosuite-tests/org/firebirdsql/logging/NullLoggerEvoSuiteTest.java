/*
 * This file was automatically generated by EvoSuite
 */

package org.firebirdsql.logging;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.firebirdsql.logging.NullLogger;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class NullLoggerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      NullLogger nullLogger0 = new NullLogger("");
      boolean boolean0 = nullLogger0.isTraceEnabled();
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      NullLogger nullLogger0 = new NullLogger("");
      Object object0 = new Object();
      nullLogger0.info(object0, (Throwable) null);
      assertEquals(false, nullLogger0.isDebugEnabled());
  }

  @Test
  public void test2()  throws Throwable  {
      NullLogger nullLogger0 = new NullLogger("");
      boolean boolean0 = nullLogger0.isFatalEnabled();
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      NullLogger nullLogger0 = new NullLogger("");
      Object object0 = new Object();
      nullLogger0.error(object0);
      assertEquals(false, nullLogger0.isErrorEnabled());
  }

  @Test
  public void test4()  throws Throwable  {
      NullLogger nullLogger0 = new NullLogger("");
      Object object0 = new Object();
      nullLogger0.debug(object0, (Throwable) null);
      assertEquals(false, nullLogger0.isInfoEnabled());
  }

  @Test
  public void test5()  throws Throwable  {
      NullLogger nullLogger0 = new NullLogger("");
      Object object0 = new Object();
      nullLogger0.error(object0, (Throwable) null);
      assertEquals(false, nullLogger0.isInfoEnabled());
  }

  @Test
  public void test6()  throws Throwable  {
      NullLogger nullLogger0 = new NullLogger("&rFRt`");
      nullLogger0.trace((Object) "&rFRt`");
      assertEquals(false, nullLogger0.isDebugEnabled());
  }

  @Test
  public void test7()  throws Throwable  {
      NullLogger nullLogger0 = new NullLogger("");
      Object object0 = new Object();
      nullLogger0.fatal(object0, (Throwable) null);
      assertEquals(false, nullLogger0.isDebugEnabled());
  }

  @Test
  public void test8()  throws Throwable  {
      NullLogger nullLogger0 = new NullLogger("");
      boolean boolean0 = nullLogger0.isDebugEnabled();
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      NullLogger nullLogger0 = new NullLogger("");
      boolean boolean0 = nullLogger0.isWarnEnabled();
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      NullLogger nullLogger0 = new NullLogger("");
      Object object0 = new Object();
      nullLogger0.warn(object0, (Throwable) null);
      assertEquals(false, nullLogger0.isDebugEnabled());
  }

  @Test
  public void test11()  throws Throwable  {
      NullLogger nullLogger0 = new NullLogger("");
      boolean boolean0 = nullLogger0.isInfoEnabled();
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      NullLogger nullLogger0 = new NullLogger("");
      Object object0 = new Object();
      nullLogger0.info(object0);
      assertEquals(false, nullLogger0.isFatalEnabled());
  }

  @Test
  public void test13()  throws Throwable  {
      NullLogger nullLogger0 = new NullLogger("");
      Object object0 = new Object();
      nullLogger0.fatal(object0);
      assertEquals(false, nullLogger0.isFatalEnabled());
  }

  @Test
  public void test14()  throws Throwable  {
      NullLogger nullLogger0 = new NullLogger("");
      boolean boolean0 = nullLogger0.isErrorEnabled();
      assertEquals(false, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      NullLogger nullLogger0 = new NullLogger("");
      Object object0 = new Object();
      nullLogger0.trace(object0, (Throwable) null);
      assertEquals(false, nullLogger0.isFatalEnabled());
  }

  @Test
  public void test16()  throws Throwable  {
      NullLogger nullLogger0 = new NullLogger("");
      Object object0 = new Object();
      nullLogger0.warn(object0);
      assertEquals(false, nullLogger0.isErrorEnabled());
  }

  @Test
  public void test17()  throws Throwable  {
      NullLogger nullLogger0 = new NullLogger("");
      Object object0 = new Object();
      nullLogger0.debug(object0);
      assertEquals(false, nullLogger0.isDebugEnabled());
  }
}
