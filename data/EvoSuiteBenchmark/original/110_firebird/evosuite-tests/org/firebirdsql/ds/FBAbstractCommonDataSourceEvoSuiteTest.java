/*
 * This file was automatically generated by EvoSuite
 */

package org.firebirdsql.ds;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.sql.SQLException;
import javax.naming.NamingException;
import javax.naming.Reference;
import org.firebirdsql.ds.FBConnectionPoolDataSource;
import org.firebirdsql.ds.FBXADataSource;
import org.firebirdsql.gds.TransactionParameterBuffer;
import org.firebirdsql.gds.impl.wire.DatabaseParameterBufferImp;
import org.firebirdsql.jdbc.FBConnectionProperties;
import org.firebirdsql.jdbc.FBSQLException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class FBAbstractCommonDataSourceEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource();
      boolean boolean0 = fBConnectionPoolDataSource0.isDefaultResultSetHoldable();
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource();
      String string0 = fBConnectionPoolDataSource0.getCharSet();
      assertNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      FBXADataSource fBXADataSource0 = new FBXADataSource();
      fBXADataSource0.setBlobBufferSize(401);
      assertEquals(401, fBXADataSource0.getBlobBufferSize());
  }

  @Test
  public void test3()  throws Throwable  {
      FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource();
      DatabaseParameterBufferImp databaseParameterBufferImp0 = (DatabaseParameterBufferImp)fBConnectionPoolDataSource0.getDatabaseParameterBuffer();
      assertEquals(0, databaseParameterBufferImp0.getLength());
  }

  @Test
  public void test4()  throws Throwable  {
      FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource();
      String string0 = fBConnectionPoolDataSource0.getEncoding();
      assertNull(string0);
  }

  @Test
  public void test5()  throws Throwable  {
      FBXADataSource fBXADataSource0 = new FBXADataSource();
      fBXADataSource0.setLoginTimeout(128);
      assertEquals(128, fBXADataSource0.getLoginTimeout());
      assertEquals(128000, fBXADataSource0.getSoTimeout());
  }

  @Test
  public void test6()  throws Throwable  {
      FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource();
      fBConnectionPoolDataSource0.setUseTranslation(".zip");
      assertNull(fBConnectionPoolDataSource0.getUser());
  }

  @Test
  public void test7()  throws Throwable  {
      FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource();
      fBConnectionPoolDataSource0.setSocketBufferSize(0);
      assertEquals(0, fBConnectionPoolDataSource0.getSocketBufferSize());
  }

  @Test
  public void test8()  throws Throwable  {
      FBXADataSource fBXADataSource0 = new FBXADataSource();
      String string0 = fBXADataSource0.getUseTranslation();
      assertNull(string0);
  }

  @Test
  public void test9()  throws Throwable  {
      FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource();
      FBConnectionProperties fBConnectionProperties0 = fBConnectionPoolDataSource0.getConnectionProperties();
      fBConnectionPoolDataSource0.setConnectionProperties(fBConnectionProperties0);
      assertEquals(false, fBConnectionPoolDataSource0.isDefaultResultSetHoldable());
  }

  @Test
  public void test10()  throws Throwable  {
      FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource();
      fBConnectionPoolDataSource0.setBuffersNumber((-125));
      assertEquals(-125, fBConnectionPoolDataSource0.getBuffersNumber());
  }

  @Test
  public void test11()  throws Throwable  {
      FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource();
      fBConnectionPoolDataSource0.setTimestampUsesLocalTimezone(true);
      assertEquals(true, fBConnectionPoolDataSource0.isTimestampUsesLocalTimezone());
  }

  @Test
  public void test12()  throws Throwable  {
      FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource();
      try {
        fBConnectionPoolDataSource0.getPooledConnection();
        fail("Expecting exception: FBSQLException");
      } catch(FBSQLException e) {
        /*
         * GDS Exception. 0. Connection string missing
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      FBXADataSource fBXADataSource0 = new FBXADataSource();
      fBXADataSource0.setType("");
      assertEquals(0, fBXADataSource0.getBuffersNumber());
  }

  @Test
  public void test14()  throws Throwable  {
      FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource();
      TransactionParameterBuffer transactionParameterBuffer0 = fBConnectionPoolDataSource0.getTransactionParameters((-6));
      assertNull(transactionParameterBuffer0);
  }

  @Test
  public void test15()  throws Throwable  {
      FBXADataSource fBXADataSource0 = new FBXADataSource();
      Reference reference0 = fBXADataSource0.getReference();
      assertNotNull(reference0);
      assertEquals("Reference Class Name: org.firebirdsql.ds.FBXADataSource\nType: description\nContent: null\nType: serverName\nContent: null\nType: databaseName\nContent: null\nAddress Type: properties\nAddressContents: ffffffac ffffffed 0 5 73 72 0 2b 6f 72 67 2e 66 69 72 65 62 69 72 64 73 71 6c 2e 6a 64 62 63 2e 46 42 43  ...\n", reference0.toString());
  }

  @Test
  public void test16()  throws Throwable  {
      FBXADataSource fBXADataSource0 = new FBXADataSource();
      String string0 = fBXADataSource0.getDefaultIsolation();
      assertEquals("TRANSACTION_READ_COMMITTED", string0);
  }

  @Test
  public void test17()  throws Throwable  {
      FBXADataSource fBXADataSource0 = new FBXADataSource();
      fBXADataSource0.setServerName("");
      assertNull(fBXADataSource0.getCharSet());
  }

  @Test
  public void test18()  throws Throwable  {
      FBXADataSource fBXADataSource0 = new FBXADataSource();
      int int0 = fBXADataSource0.getSocketBufferSize();
      assertEquals(0, int0);
  }

  @Test
  public void test19()  throws Throwable  {
      FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource();
      fBConnectionPoolDataSource0.setSqlDialect(".zip");
      assertNull(fBConnectionPoolDataSource0.getDescription());
  }

  @Test
  public void test20()  throws Throwable  {
      FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource();
      fBConnectionPoolDataSource0.setEncoding("XLas~qYoN8");
      assertEquals(0, fBConnectionPoolDataSource0.getPortNumber());
  }

  @Test
  public void test21()  throws Throwable  {
      FBXADataSource fBXADataSource0 = new FBXADataSource();
      fBXADataSource0.setPassword((String) null);
      assertEquals(false, fBXADataSource0.isUseStandardUdf());
  }

  @Test
  public void test22()  throws Throwable  {
      FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource();
      fBConnectionPoolDataSource0.setDescription("");
      assertEquals(0, fBConnectionPoolDataSource0.getSoTimeout());
  }

  @Test
  public void test23()  throws Throwable  {
      FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource();
      fBConnectionPoolDataSource0.setDefaultTransactionIsolation(764);
      assertEquals(764, fBConnectionPoolDataSource0.getDefaultTransactionIsolation());
  }

  @Test
  public void test24()  throws Throwable  {
      FBXADataSource fBXADataSource0 = new FBXADataSource();
      fBXADataSource0.setNonStandardProperty("");
      assertNull(fBXADataSource0.getDatabaseName());
  }

  @Test
  public void test25()  throws Throwable  {
      FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource();
      int int0 = fBConnectionPoolDataSource0.getSoTimeout();
      assertEquals(0, int0);
  }

  @Test
  public void test26()  throws Throwable  {
      FBXADataSource fBXADataSource0 = new FBXADataSource();
      String string0 = fBXADataSource0.getTpbMapping();
      assertNull(string0);
  }

  @Test
  public void test27()  throws Throwable  {
      FBXADataSource fBXADataSource0 = new FBXADataSource();
      boolean boolean0 = fBXADataSource0.isTimestampUsesLocalTimezone();
      assertEquals(false, boolean0);
  }

  @Test
  public void test28()  throws Throwable  {
      FBXADataSource fBXADataSource0 = new FBXADataSource();
      int int0 = fBXADataSource0.getBuffersNumber();
      assertEquals(0, int0);
  }

  @Test
  public void test29()  throws Throwable  {
      FBXADataSource fBXADataSource0 = new FBXADataSource();
      int int0 = fBXADataSource0.getBlobBufferSize();
      assertEquals(0, int0);
  }

  @Test
  public void test30()  throws Throwable  {
      FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource();
      // Undeclared exception!
      try {
        fBConnectionPoolDataSource0.setDefaultIsolation("");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Invalid isolation name.
         */
      }
  }

  @Test
  public void test31()  throws Throwable  {
      FBXADataSource fBXADataSource0 = new FBXADataSource();
      fBXADataSource0.setUseStandardUdf(false);
      assertEquals(false, fBXADataSource0.isUseStandardUdf());
  }

  @Test
  public void test32()  throws Throwable  {
      FBXADataSource fBXADataSource0 = new FBXADataSource();
      // Undeclared exception!
      try {
        fBXADataSource0.setNonStandardProperty((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test33()  throws Throwable  {
      FBXADataSource fBXADataSource0 = new FBXADataSource();
      fBXADataSource0.setSoTimeout((-6));
      assertEquals(-6, fBXADataSource0.getSoTimeout());
  }

  @Test
  public void test34()  throws Throwable  {
      FBXADataSource fBXADataSource0 = new FBXADataSource();
      fBXADataSource0.setUseStreamBlobs(false);
      assertEquals(false, fBXADataSource0.isUseStreamBlobs());
  }

  @Test
  public void test35()  throws Throwable  {
      FBXADataSource fBXADataSource0 = new FBXADataSource();
      String string0 = fBXADataSource0.getNonStandardProperty("");
      assertNull(string0);
  }

  @Test
  public void test36()  throws Throwable  {
      FBXADataSource fBXADataSource0 = new FBXADataSource();
      fBXADataSource0.setDatabaseName(".java");
      assertEquals(".java", fBXADataSource0.getDatabase());
  }

  @Test
  public void test37()  throws Throwable  {
      FBXADataSource fBXADataSource0 = new FBXADataSource();
      fBXADataSource0.setTransactionParameters(1830, (TransactionParameterBuffer) null);
      assertEquals(0, fBXADataSource0.getSocketBufferSize());
  }

  @Test
  public void test38()  throws Throwable  {
      FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource();
      int int0 = fBConnectionPoolDataSource0.getDefaultTransactionIsolation();
      assertEquals(2, int0);
  }

  @Test
  public void test39()  throws Throwable  {
      FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource();
      boolean boolean0 = fBConnectionPoolDataSource0.isUseStandardUdf();
      assertEquals(false, boolean0);
  }

  @Test
  public void test40()  throws Throwable  {
      FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource();
      fBConnectionPoolDataSource0.setDefaultResultSetHoldable(false);
      assertEquals(false, fBConnectionPoolDataSource0.isDefaultResultSetHoldable());
  }

  @Test
  public void test41()  throws Throwable  {
      FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource();
      fBConnectionPoolDataSource0.setUser("");
      assertEquals(2, fBConnectionPoolDataSource0.getDefaultTransactionIsolation());
  }

  @Test
  public void test42()  throws Throwable  {
      FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource();
      String string0 = fBConnectionPoolDataSource0.getSqlDialect();
      assertNull(string0);
  }

  @Test
  public void test43()  throws Throwable  {
      FBXADataSource fBXADataSource0 = new FBXADataSource();
      int int0 = fBXADataSource0.getLoginTimeout();
      assertEquals(0, int0);
  }

  @Test
  public void test44()  throws Throwable  {
      FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource();
      fBConnectionPoolDataSource0.setTpbMapping("");
      assertNull(fBConnectionPoolDataSource0.getRoleName());
  }

  @Test
  public void test45()  throws Throwable  {
      FBXADataSource fBXADataSource0 = new FBXADataSource();
      fBXADataSource0.setPortNumber((-1993));
      Reference reference0 = fBXADataSource0.getReference();
      assertNotNull(reference0);
      assertEquals(-1993, fBXADataSource0.getPortNumber());
  }

  @Test
  public void test46()  throws Throwable  {
      FBXADataSource fBXADataSource0 = new FBXADataSource();
      fBXADataSource0.setRoleName("XLas~qYoN8");
      assertNull(fBXADataSource0.getTpbMapping());
  }

  @Test
  public void test47()  throws Throwable  {
      FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource();
      boolean boolean0 = fBConnectionPoolDataSource0.isUseStreamBlobs();
      assertEquals(false, boolean0);
  }

  @Test
  public void test48()  throws Throwable  {
      FBXADataSource fBXADataSource0 = new FBXADataSource();
      fBXADataSource0.setCharSet("XLas~qYoN8");
      assertNull(fBXADataSource0.getCharSet());
  }

  @Test
  public void test49()  throws Throwable  {
      FBConnectionPoolDataSource fBConnectionPoolDataSource0 = new FBConnectionPoolDataSource();
      String string0 = fBConnectionPoolDataSource0.getRoleName();
      assertNull(string0);
  }

  @Test
  public void test50()  throws Throwable  {
      FBXADataSource fBXADataSource0 = new FBXADataSource();
      fBXADataSource0.setServerName("qUM*^)ID^B");
      fBXADataSource0.setPortNumber(1);
      assertEquals(1, fBXADataSource0.getPortNumber());
      assertEquals("//qUM*^)ID^B:1/", fBXADataSource0.getDatabase());
  }
}
