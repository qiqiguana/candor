/*
 * This file was automatically generated by EvoSuite
 */

package jahuwaldt.plot;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import jahuwaldt.plot.BoxURSymbol;
import jahuwaldt.plot.PlotDatum;
import jahuwaldt.plot.PlotSymbol;
import jahuwaldt.plot.RTriangle1Symbol;
import jahuwaldt.plot.SquareSymbol;
import jahuwaldt.plot.TabLSymbol;
import jahuwaldt.plot.Triangle1Symbol;
import java.awt.Color;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PlotDatumEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BoxURSymbol boxURSymbol0 = new BoxURSymbol();
      PlotDatum plotDatum0 = new PlotDatum((-1861.3454653652368), 298.15, false, (PlotSymbol) boxURSymbol0);
      TabLSymbol tabLSymbol0 = new TabLSymbol();
      plotDatum0.setPlotSymbol((PlotSymbol) tabLSymbol0);
      assertEquals(false, plotDatum0.hasErrorBar());
      assertEquals((-1861.3454653652368), plotDatum0.x, 0.01D);
      assertEquals(298.15, plotDatum0.y, 0.01D);
      assertEquals(false, plotDatum0.connected());
      assertEquals(298.15, plotDatum0.getY(), 0.01D);
  }

  @Test
  public void test1()  throws Throwable  {
      PlotDatum plotDatum0 = new PlotDatum((-1023.4339357697838), (-1023.4339357697838), false, (PlotSymbol) null);
      plotDatum0.getPlotSymbol();
      assertEquals(false, plotDatum0.hasErrorBar());
      assertEquals((-1023.4339357697838), plotDatum0.y, 0.01D);
      assertEquals((-1023.4339357697838), plotDatum0.x, 0.01D);
      assertEquals(false, plotDatum0.connected());
      assertEquals((-1023.4339357697838), plotDatum0.getX(), 0.01D);
  }

  @Test
  public void test2()  throws Throwable  {
      BoxURSymbol boxURSymbol0 = new BoxURSymbol();
      PlotDatum plotDatum0 = new PlotDatum((-1861.3454653652368), 298.15, false, (PlotSymbol) boxURSymbol0);
      double double0 = plotDatum0.getY();
      assertEquals((-1861.3454653652368), plotDatum0.x, 0.01D);
      assertEquals(false, plotDatum0.connected());
      assertEquals(298.15, double0, 0.01D);
      assertEquals(false, plotDatum0.hasErrorBar());
  }

  @Test
  public void test3()  throws Throwable  {
      BoxURSymbol boxURSymbol0 = new BoxURSymbol();
      PlotDatum plotDatum0 = new PlotDatum((-1861.3454653652368), 298.15, false, (PlotSymbol) boxURSymbol0);
      boolean boolean0 = plotDatum0.hasErrorBar();
      assertEquals(298.15, plotDatum0.y, 0.01D);
      assertEquals((-1861.3454653652368), plotDatum0.x, 0.01D);
      assertEquals(false, plotDatum0.connected());
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      PlotDatum plotDatum0 = new PlotDatum((-1023.4339357697838), (-1023.4339357697838), false, (PlotSymbol) null);
      assertEquals(false, plotDatum0.connected());
      
      plotDatum0.setConnected(true);
      assertEquals(true, plotDatum0.connected());
      assertEquals((-1023.4339357697838), plotDatum0.getY(), 0.01D);
  }

  @Test
  public void test5()  throws Throwable  {
      PlotDatum plotDatum0 = new PlotDatum((-1023.4339357697838), (-1023.4339357697838), false, (PlotSymbol) null);
      double double0 = plotDatum0.getYError();
      assertEquals(false, plotDatum0.connected());
      assertEquals(false, plotDatum0.hasErrorBar());
      assertEquals(0.0, double0, 0.01D);
      assertEquals((-1023.4339357697838), plotDatum0.x, 0.01D);
      assertEquals((-1023.4339357697838), plotDatum0.y, 0.01D);
  }

  @Test
  public void test6()  throws Throwable  {
      PlotDatum plotDatum0 = new PlotDatum((-1023.4339357697838), (-1023.4339357697838), false, (PlotSymbol) null);
      double double0 = plotDatum0.getX();
      assertEquals(false, plotDatum0.connected());
      assertEquals((-1023.4339357697838), double0, 0.01D);
      assertEquals((-1023.4339357697838), plotDatum0.y, 0.01D);
      assertEquals(false, plotDatum0.hasErrorBar());
  }

  @Test
  public void test7()  throws Throwable  {
      PlotDatum plotDatum0 = new PlotDatum(0.1, 1546.9490896998946, false);
      plotDatum0.setX((-1148.4510527400234));
      assertEquals((-1148.4510527400234), plotDatum0.x, 0.01D);
      assertEquals(1546.9490896998946, plotDatum0.getY(), 0.01D);
  }

  @Test
  public void test8()  throws Throwable  {
      BoxURSymbol boxURSymbol0 = new BoxURSymbol();
      PlotDatum plotDatum0 = new PlotDatum((-1861.3454653652368), 298.15, false, (PlotSymbol) boxURSymbol0);
      Color color0 = plotDatum0.getLineColor();
      assertNotNull(color0);
      assertEquals(false, plotDatum0.hasErrorBar());
      assertEquals(298.15, plotDatum0.y, 0.01D);
      assertEquals(false, plotDatum0.connected());
      assertEquals((-1861.3454653652368), plotDatum0.x, 0.01D);
  }

  @Test
  public void test9()  throws Throwable  {
      SquareSymbol squareSymbol0 = new SquareSymbol();
      PlotDatum plotDatum0 = new PlotDatum((-1.0), (-1470.9394516069547), true, (PlotSymbol) squareSymbol0);
      boolean boolean0 = plotDatum0.connected();
      assertEquals((-1.0), plotDatum0.x, 0.01D);
      assertEquals(false, plotDatum0.hasErrorBar());
      assertEquals(true, boolean0);
      assertEquals((-1470.9394516069547), plotDatum0.y, 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      PlotDatum plotDatum0 = new PlotDatum((-1023.4339357697838), (-1023.4339357697838), false, (PlotSymbol) null);
      plotDatum0.setY((-1869.6384348003546));
      assertEquals((-1869.6384348003546), plotDatum0.y, 0.01D);
      assertEquals(false, plotDatum0.connected());
  }

  @Test
  public void test11()  throws Throwable  {
      PlotDatum plotDatum0 = new PlotDatum((-368.7514334229566), (-1.0), true, (PlotSymbol) null);
      plotDatum0.setYError(1597.396237024517);
      assertEquals(1597.396237024517, plotDatum0.getYError(), 0.01D);
      assertEquals((-368.7514334229566), plotDatum0.getX(), 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      PlotDatum plotDatum0 = new PlotDatum((-1023.4339357697838), (-1023.4339357697838), false, (PlotSymbol) null);
      plotDatum0.setYError(0.0);
      assertEquals((-1023.4339357697838), plotDatum0.y, 0.01D);
      assertEquals(0.0, plotDatum0.getYError(), 0.01D);
      assertEquals((-1023.4339357697838), plotDatum0.x, 0.01D);
      assertEquals(false, plotDatum0.hasErrorBar());
      assertEquals(false, plotDatum0.connected());
  }

  @Test
  public void test13()  throws Throwable  {
      RTriangle1Symbol rTriangle1Symbol0 = new RTriangle1Symbol();
      PlotDatum plotDatum0 = new PlotDatum(0.0, 0.0, false, (PlotSymbol) rTriangle1Symbol0);
      plotDatum0.setLineColor((Color) null);
      assertEquals(false, plotDatum0.connected());
      assertEquals(0.0, plotDatum0.x, 0.01D);
      assertEquals(0.0, plotDatum0.y, 0.01D);
      assertEquals(false, plotDatum0.hasErrorBar());
  }

  @Test
  public void test14()  throws Throwable  {
      PlotDatum plotDatum0 = new PlotDatum(0.0, 100.0, true);
      Color color0 = Color.getHSBColor(120.313385F, 120.313385F, 120.313385F);
      plotDatum0.setLineColor(color0);
      assertEquals(0.0, plotDatum0.x, 0.01D);
      assertEquals(false, plotDatum0.hasErrorBar());
      assertEquals(true, plotDatum0.connected());
      assertEquals(100.0, plotDatum0.y, 0.01D);
      assertEquals(100.0, plotDatum0.getY(), 0.01D);
  }

  @Test
  public void test15()  throws Throwable  {
      PlotDatum plotDatum0 = new PlotDatum(0.0, 0.0, true);
      PlotDatum plotDatum1 = (PlotDatum)plotDatum0.clone();
      assertNotSame(plotDatum1, plotDatum0);
      assertEquals(true, plotDatum1.connected());
      assertEquals(false, plotDatum1.hasErrorBar());
      assertNotNull(plotDatum1);
      assertEquals(0.0, plotDatum1.y, 0.01D);
      assertEquals(0.0, plotDatum1.x, 0.01D);
  }

  @Test
  public void test16()  throws Throwable  {
      Triangle1Symbol triangle1Symbol0 = new Triangle1Symbol();
      PlotDatum plotDatum0 = new PlotDatum(0.0, 0.0, false, (PlotSymbol) triangle1Symbol0);
      PlotDatum plotDatum1 = (PlotDatum)plotDatum0.clone();
      assertEquals(0.0, plotDatum1.y, 0.01D);
      assertNotNull(plotDatum1);
      assertEquals(0.0, plotDatum1.x, 0.01D);
      assertEquals(false, plotDatum1.connected());
      assertEquals(false, plotDatum1.hasErrorBar());
      assertNotSame(plotDatum1, plotDatum0);
  }
}
