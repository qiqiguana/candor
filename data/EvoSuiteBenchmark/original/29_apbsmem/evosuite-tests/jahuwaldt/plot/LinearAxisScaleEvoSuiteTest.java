/*
 * This file was automatically generated by EvoSuite
 */

package jahuwaldt.plot;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import jahuwaldt.plot.AxisLimitData;
import jahuwaldt.plot.BoxULSymbol;
import jahuwaldt.plot.LinearAxisScale;
import jahuwaldt.plot.PlotDatum;
import jahuwaldt.plot.PlotSymbol;
import jahuwaldt.plot.TickMarkData;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class LinearAxisScaleEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      BoxULSymbol boxULSymbol0 = new BoxULSymbol();
      PlotDatum plotDatum0 = new PlotDatum((-701.8681803943748), 590.3645845826583, false, (PlotSymbol) boxULSymbol0);
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits(590.3645845826583, 1628.5252957384466);
      linearAxisScale0.adjustForErrorBars(plotDatum0, 590.3645845826583, (-701.8681803943748), axisLimitData0);
      assertEquals(false, plotDatum0.connected());
  }

  @Test
  public void test1()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      linearAxisScale0.findGoodLimits(0.0, 0.0);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01D);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01D);
  }

  @Test
  public void test2()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits(298.15, 298.15);
      assertNotNull(axisLimitData0);
  }

  @Test
  public void test3()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits((-1940.3506854235914), (-1600.9665645644068));
      assertNotNull(axisLimitData0);
  }

  @Test
  public void test4()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits(648.2721064859757, (-1483.1460909595176));
      assertNotNull(axisLimitData0);
  }

  @Test
  public void test5()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits((-1940.3506854235914), (-825.3165658814831));
      assertNotNull(axisLimitData0);
  }

  @Test
  public void test6()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      TickMarkData tickMarkData0 = linearAxisScale0.calcTickMarks((-1.0), 0.1, (-33.430541397886884), (-1688.6533110211037), (-1688.6533110211037));
      assertNotNull(tickMarkData0);
  }

  @Test
  public void test7()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      // Undeclared exception!
      try {
        linearAxisScale0.calcTickMarks(1196.349639363201, 1196.349639363201, (-11.728209349374518), 0.0, 0.0);
        fail("Expecting exception: NegativeArraySizeException");
      } catch(NegativeArraySizeException e) {
      }
  }
}
