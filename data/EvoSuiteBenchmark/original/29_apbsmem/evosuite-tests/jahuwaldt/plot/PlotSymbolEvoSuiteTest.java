/*
 * This file was automatically generated by EvoSuite
 */

package jahuwaldt.plot;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import jahuwaldt.plot.RTriangle2Symbol;
import jahuwaldt.plot.ThinRect2Symbol;
import jahuwaldt.plot.Triangle3Symbol;
import jahuwaldt.plot.Triangle4Symbol;
import java.awt.Color;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PlotSymbolEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ThinRect2Symbol thinRect2Symbol0 = new ThinRect2Symbol();
      Triangle4Symbol triangle4Symbol0 = new Triangle4Symbol();
      Color color0 = triangle4Symbol0.getBorderColor();
      assertNotNull(color0);
      
      thinRect2Symbol0.setFillColor(color0);
      assertEquals(8, triangle4Symbol0.getSize());
      assertEquals(8, thinRect2Symbol0.getSize());
  }

  @Test
  public void test1()  throws Throwable  {
      Triangle3Symbol triangle3Symbol0 = new Triangle3Symbol();
      triangle3Symbol0.getFillColor();
      assertEquals(8, triangle3Symbol0.getSize());
  }

  @Test
  public void test2()  throws Throwable  {
      RTriangle2Symbol rTriangle2Symbol0 = new RTriangle2Symbol();
      rTriangle2Symbol0.setSize(1200);
      assertEquals(1200, rTriangle2Symbol0.getSize());
  }

  @Test
  public void test3()  throws Throwable  {
      ThinRect2Symbol thinRect2Symbol0 = new ThinRect2Symbol();
      Triangle4Symbol triangle4Symbol0 = new Triangle4Symbol();
      Color color0 = triangle4Symbol0.getBorderColor();
      assertNotNull(color0);
      
      thinRect2Symbol0.setBorderColor(color0);
      assertEquals(8, thinRect2Symbol0.getSize());
      assertEquals(8, triangle4Symbol0.getSize());
  }

  @Test
  public void test4()  throws Throwable  {
      ThinRect2Symbol thinRect2Symbol0 = new ThinRect2Symbol();
      ThinRect2Symbol thinRect2Symbol1 = (ThinRect2Symbol)thinRect2Symbol0.clone();
      assertEquals(8, thinRect2Symbol1.getSize());
      assertNotSame(thinRect2Symbol1, thinRect2Symbol0);
  }

  @Test
  public void test5()  throws Throwable  {
      ThinRect2Symbol thinRect2Symbol0 = new ThinRect2Symbol();
      int int0 = thinRect2Symbol0.getSize();
      assertEquals(8, int0);
  }
}
