/*
 * This file was automatically generated by EvoSuite
 */

package jahuwaldt.plot;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import jahuwaldt.plot.BoxLRSymbol;
import jahuwaldt.plot.PlotRun;
import jahuwaldt.plot.PlotRunList;
import jahuwaldt.plot.PlotSymbol;
import jahuwaldt.plot.TabLSymbol;
import java.awt.AWTKeyStroke;
import java.awt.Color;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Set;
import java.util.TreeSet;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JSpinner;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PlotRunListEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LinkedList<PlotRun> linkedList0 = new LinkedList<PlotRun>();
      PlotRunList plotRunList0 = new PlotRunList((Collection) linkedList0);
      // Undeclared exception!
      try {
        plotRunList0.set(1400, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 1400, Size: 0
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[10];
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      assertNotNull(plotRunList0);
      
      // Undeclared exception!
      try {
        plotRunList0.remove((-13));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * -13
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      plotRunList0.clear();
      assertEquals(4.9E-324, plotRunList0.getMaxX(), 0.01D);
  }

  @Test
  public void test3()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[6];
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      assertNotNull(plotRunList0);
      
      // Undeclared exception!
      try {
        plotRunList0.get((-140));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      PlotRunList plotRunList1 = new PlotRunList((Collection) plotRunList0);
      assertEquals(4.9E-324, plotRunList1.getMaxY(), 0.01D);
  }

  @Test
  public void test5()  throws Throwable  {
      TreeSet<PlotRun> treeSet0 = new TreeSet<PlotRun>();
      PlotRun plotRun0 = new PlotRun((Collection) treeSet0);
      treeSet0.add(plotRun0);
      PlotRunList plotRunList0 = new PlotRunList((Collection) treeSet0);
      assertNotNull(plotRunList0);
      
      double double0 = plotRunList0.getMaxY();
      assertEquals(4.9E-324, double0, 0.01D);
      assertEquals(1, plotRunList0.size());
  }

  @Test
  public void test6()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[5];
      PlotRun plotRun0 = new PlotRun();
      plotRunArray0[0] = plotRun0;
      PlotRunList plotRunList0 = new PlotRunList((Collection) plotRunArray0[0]);
      assertNotNull(plotRunList0);
      
      double double0 = plotRunList0.getMinX();
      assertEquals(1.7976931348623157E308, double0, 0.01D);
  }

  @Test
  public void test7()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[4];
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      assertNotNull(plotRunList0);
      
      // Undeclared exception!
      try {
        plotRunList0.getMinX();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      LinkedList<PlotRun> linkedList0 = new LinkedList<PlotRun>();
      PlotRunList plotRunList0 = new PlotRunList((Collection) linkedList0);
      assertNotNull(plotRunList0);
      
      double double0 = plotRunList0.getMaxX();
      assertEquals(4.9E-324, double0, 0.01D);
  }

  @Test
  public void test9()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[4];
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      assertNotNull(plotRunList0);
      
      // Undeclared exception!
      try {
        plotRunList0.getMaxX();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      LinkedList<PlotRun> linkedList0 = new LinkedList<PlotRun>();
      PlotRunList plotRunList0 = new PlotRunList((Collection) linkedList0);
      assertNotNull(plotRunList0);
      
      double double0 = plotRunList0.getMinY();
      assertEquals(1.7976931348623157E308, double0, 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      plotRunList0.add((Object) null);
      // Undeclared exception!
      try {
        plotRunList0.getMinY();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField();
      Set<AWTKeyStroke> set0 = jPasswordField0.getFocusTraversalKeys(0);
      PlotRunList plotRunList0 = new PlotRunList((Collection) set0);
      assertNotNull(plotRunList0);
      
      double double0 = plotRunList0.getMaxY();
      assertEquals(4.9E-324, double0, 0.01D);
      assertEquals(0, plotRunList0.size());
  }

  @Test
  public void test13()  throws Throwable  {
      JSpinner jSpinner0 = new JSpinner();
      Set<AWTKeyStroke> set0 = jSpinner0.getFocusTraversalKeys(0);
      PlotRunList plotRunList0 = new PlotRunList((Collection) set0);
      assertNotNull(plotRunList0);
      
      BoxLRSymbol boxLRSymbol0 = new BoxLRSymbol();
      plotRunList0.setPlotSymbol((PlotSymbol) boxLRSymbol0);
      assertEquals(0, plotRunList0.size());
      assertEquals(true, plotRunList0.isEmpty());
  }

  @Test
  public void test14()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[6];
      TabLSymbol tabLSymbol0 = new TabLSymbol();
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      assertNotNull(plotRunList0);
      
      // Undeclared exception!
      try {
        plotRunList0.setPlotSymbol((PlotSymbol) tabLSymbol0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test15()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      JOptionPane jOptionPane0 = new JOptionPane((Object) "java.awt.geom.Rectangle2D$Float[x=-1442.2383,y=-1442.2383,w=1.0,h=1.0]");
      Color color0 = jOptionPane0.getForeground();
      plotRunList0.setLineColor(color0);
      assertEquals(255, color0.getAlpha());
  }

  @Test
  public void test16()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[5];
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      assertNotNull(plotRunList0);
      
      JFormattedTextField jFormattedTextField0 = new JFormattedTextField((Object) "rolloverSelectedIcon");
      Color color0 = jFormattedTextField0.getSelectedTextColor();
      // Undeclared exception!
      try {
        plotRunList0.setLineColor(color0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test17()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[8];
      PlotRun plotRun0 = new PlotRun();
      plotRunArray0[0] = plotRun0;
      plotRunArray0[1] = plotRunArray0[0];
      plotRunArray0[2] = plotRunArray0[1];
      plotRunArray0[3] = plotRunArray0[2];
      plotRunArray0[4] = plotRunArray0[0];
      plotRunArray0[5] = plotRun0;
      plotRunArray0[6] = plotRunArray0[0];
      plotRunArray0[7] = plotRunArray0[3];
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      assertNotNull(plotRunList0);
      
      PlotRunList plotRunList1 = (PlotRunList)plotRunList0.clone();
      assertEquals("[[], [], [], [], [], [], [], []]", plotRunList1.toString());
      assertNotSame(plotRunList0, plotRunList1);
      assertNotNull(plotRunList1);
      assertEquals("[[], [], [], [], [], [], [], []]", plotRunList0.toString());
  }
}
