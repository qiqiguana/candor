/*
 * This file was automatically generated by EvoSuite
 */

package com.rakegroup;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.rakegroup.JoomlaOutput;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.types.FileSet;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.jdom.Content;
import org.jdom.Element;
import org.jdom.IllegalAddException;
import org.jdom.IllegalDataException;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class JoomlaOutputEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      JoomlaOutput.Params joomlaOutput_Params0 = new JoomlaOutput.Params();
      JoomlaOutput.Param joomlaOutput_Param0 = new JoomlaOutput.Param();
      joomlaOutput_Params0.addConfiguredParam(joomlaOutput_Param0);
      assertEquals(1, joomlaOutput_Params0.getContentSize());
  }

  @Test
  public void test1()  throws Throwable  {
      JoomlaOutput.Description joomlaOutput_Description0 = new JoomlaOutput.Description();
      JoomlaOutput.Install joomlaOutput_Install0 = new JoomlaOutput.Install();
      joomlaOutput_Install0.addConfiguredDescription(joomlaOutput_Description0);
      assertEquals(1, joomlaOutput_Install0.getContentSize());
  }

  @Test
  public void test2()  throws Throwable  {
      JoomlaOutput.Folder joomlaOutput_Folder0 = new JoomlaOutput.Folder();
      JoomlaOutput.Files joomlaOutput_Files0 = new JoomlaOutput.Files();
      joomlaOutput_Files0.addConfiguredFolder(joomlaOutput_Folder0);
      assertEquals(1, joomlaOutput_Files0.getContentSize());
  }

  @Test
  public void test3()  throws Throwable  {
      JoomlaOutput.Install joomlaOutput_Install0 = new JoomlaOutput.Install();
      JoomlaOutput.Positions joomlaOutput_Positions0 = new JoomlaOutput.Positions();
      joomlaOutput_Install0.addConfiguredPositions(joomlaOutput_Positions0);
      assertEquals(1, joomlaOutput_Install0.getContentSize());
  }

  @Test
  public void test4()  throws Throwable  {
      JoomlaOutput.Install joomlaOutput_Install0 = new JoomlaOutput.Install();
      // Undeclared exception!
      try {
        joomlaOutput_Install0.addConfiguredCreationDate((JoomlaOutput.CreationDate) null);
        fail("Expecting exception: IllegalAddException");
      } catch(IllegalAddException e) {
        /*
         * Cannot add null object
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      JoomlaOutput.Install joomlaOutput_Install0 = new JoomlaOutput.Install();
      JoomlaOutput.Author joomlaOutput_Author0 = new JoomlaOutput.Author();
      joomlaOutput_Install0.addConfiguredAuthor(joomlaOutput_Author0);
      assertEquals(1, joomlaOutput_Install0.getContentSize());
  }

  @Test
  public void test6()  throws Throwable  {
      JoomlaOutput.Install joomlaOutput_Install0 = new JoomlaOutput.Install();
      JoomlaOutput.Copyright joomlaOutput_Copyright0 = new JoomlaOutput.Copyright();
      joomlaOutput_Install0.addConfiguredCopyright(joomlaOutput_Copyright0);
      assertEquals(1, joomlaOutput_Install0.getContentSize());
  }

  @Test
  public void test7()  throws Throwable  {
      JoomlaOutput.Install joomlaOutput_Install0 = new JoomlaOutput.Install();
      JoomlaOutput.AuthorUrl joomlaOutput_AuthorUrl0 = new JoomlaOutput.AuthorUrl();
      joomlaOutput_Install0.addConfiguredAuthorUrl(joomlaOutput_AuthorUrl0);
      assertEquals(1, joomlaOutput_Install0.getContentSize());
  }

  @Test
  public void test8()  throws Throwable  {
      JoomlaOutput.Install joomlaOutput_Install0 = new JoomlaOutput.Install();
      JoomlaOutput.Languages joomlaOutput_Languages0 = new JoomlaOutput.Languages();
      joomlaOutput_Install0.addConfiguredLanguages(joomlaOutput_Languages0);
      assertEquals(1, joomlaOutput_Install0.getContentSize());
  }

  @Test
  public void test9()  throws Throwable  {
      JoomlaOutput.Install joomlaOutput_Install0 = new JoomlaOutput.Install();
      JoomlaOutput.AuthorEmail joomlaOutput_AuthorEmail0 = new JoomlaOutput.AuthorEmail();
      joomlaOutput_Install0.addConfiguredAuthorEmail(joomlaOutput_AuthorEmail0);
      assertEquals(1, joomlaOutput_Install0.getContentSize());
  }

  @Test
  public void test10()  throws Throwable  {
      JoomlaOutput.Install joomlaOutput_Install0 = new JoomlaOutput.Install();
      JoomlaOutput.License joomlaOutput_License0 = new JoomlaOutput.License();
      joomlaOutput_Install0.addConfiguredLicense(joomlaOutput_License0);
      assertEquals(1, joomlaOutput_Install0.getContentSize());
  }

  @Test
  public void test11()  throws Throwable  {
      JoomlaOutput.Install joomlaOutput_Install0 = new JoomlaOutput.Install();
      // Undeclared exception!
      try {
        joomlaOutput_Install0.addConfiguredVersion((JoomlaOutput.Version) null);
        fail("Expecting exception: IllegalAddException");
      } catch(IllegalAddException e) {
        /*
         * Cannot add null object
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      JoomlaOutput.Install joomlaOutput_Install0 = new JoomlaOutput.Install();
      JoomlaOutput.Name joomlaOutput_Name0 = new JoomlaOutput.Name();
      joomlaOutput_Install0.addConfiguredName(joomlaOutput_Name0);
      assertEquals(1, joomlaOutput_Install0.getContentSize());
  }

  @Test
  public void test13()  throws Throwable  {
      JoomlaOutput.Install joomlaOutput_Install0 = new JoomlaOutput.Install();
      JoomlaOutput.Params joomlaOutput_Params0 = new JoomlaOutput.Params();
      joomlaOutput_Install0.addConfiguredParams(joomlaOutput_Params0);
      assertEquals(1, joomlaOutput_Install0.getContentSize());
  }

  @Test
  public void test14()  throws Throwable  {
      JoomlaOutput.Install joomlaOutput_Install0 = new JoomlaOutput.Install();
      joomlaOutput_Install0.setClient("=7>x,:f9");
      assertEquals("", joomlaOutput_Install0.getTextNormalize());
  }

  @Test
  public void test15()  throws Throwable  {
      JoomlaOutput.Install joomlaOutput_Install0 = new JoomlaOutput.Install();
      JoomlaOutput.Administration joomlaOutput_Administration0 = new JoomlaOutput.Administration();
      joomlaOutput_Install0.addConfiguredAdministraton(joomlaOutput_Administration0);
      assertEquals(1, joomlaOutput_Install0.getContentSize());
  }

  @Test
  public void test16()  throws Throwable  {
      JoomlaOutput.Install joomlaOutput_Install0 = new JoomlaOutput.Install();
      // Undeclared exception!
      try {
        joomlaOutput_Install0.setType((String) null);
        fail("Expecting exception: IllegalDataException");
      } catch(IllegalDataException e) {
        /*
         * The data \"null\" is not legal for a JDOM attribute: A null is not a legal XML value.
         */
      }
  }

  @Test
  public void test17()  throws Throwable  {
      JoomlaOutput.Install joomlaOutput_Install0 = new JoomlaOutput.Install();
      joomlaOutput_Install0.setVersion("       This class may be in a separate JAR that is not installed.");
      assertEquals("", joomlaOutput_Install0.getNamespacePrefix());
  }

  @Test
  public void test18()  throws Throwable  {
      JoomlaOutput.Install joomlaOutput_Install0 = new JoomlaOutput.Install();
      JoomlaOutput.Files joomlaOutput_Files0 = new JoomlaOutput.Files();
      joomlaOutput_Install0.addConfiguredFiles(joomlaOutput_Files0);
      assertEquals(1, joomlaOutput_Install0.getContentSize());
  }

  @Test
  public void test19()  throws Throwable  {
      JoomlaOutput.Positions joomlaOutput_Positions0 = new JoomlaOutput.Positions();
      // Undeclared exception!
      try {
        joomlaOutput_Positions0.addConfiguredPosition((JoomlaOutput.Position) null);
        fail("Expecting exception: IllegalAddException");
      } catch(IllegalAddException e) {
        /*
         * Cannot add null object
         */
      }
  }

  @Test
  public void test20()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          JoomlaOutput joomlaOutput0 = new JoomlaOutput();
          // Undeclared exception!
          try {
            joomlaOutput0.execute();
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission templateDetails.xml write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:183)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:84)
             * java.io.PrintStream.<init>(PrintStream.java:156)
             * com.rakegroup.JoomlaOutput.validate(JoomlaOutput.java:52)
             * com.rakegroup.JoomlaOutput.execute(JoomlaOutput.java:92)
             * sun.reflect.GeneratedMethodAccessor201.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test21()  throws Throwable  {
      JoomlaOutput joomlaOutput0 = new JoomlaOutput();
      joomlaOutput0.setDocsystem("40m5bxLdC}};E8");
      assertNull(joomlaOutput0.getTaskType());
  }

  @Test
  public void test22()  throws Throwable  {
      JoomlaOutput joomlaOutput0 = new JoomlaOutput();
      joomlaOutput0.setDocpublic("\"");
      assertNull(joomlaOutput0.getDescription());
  }

  @Test
  public void test23()  throws Throwable  {
      JoomlaOutput joomlaOutput0 = new JoomlaOutput();
      joomlaOutput0.setDocelement("40m5bxLdC}};E8");
      assertNull(joomlaOutput0.getDescription());
  }

  @Test
  public void test24()  throws Throwable  {
      JoomlaOutput.Copyright joomlaOutput_Copyright0 = new JoomlaOutput.Copyright();
      joomlaOutput_Copyright0.addText("!HlLUy3<25");
      assertEquals("!HlLUy3<25", joomlaOutput_Copyright0.getText());
      assertEquals("!HlLUy3<25", joomlaOutput_Copyright0.getValue());
  }

  @Test
  public void test25()  throws Throwable  {
      JoomlaOutput.Languages joomlaOutput_Languages0 = new JoomlaOutput.Languages();
      JoomlaOutput.Files joomlaOutput_Files0 = new JoomlaOutput.Files();
      joomlaOutput_Files0.addElement((Element) joomlaOutput_Languages0);
      assertEquals(1, joomlaOutput_Files0.getContentSize());
  }

  @Test
  public void test26()  throws Throwable  {
      JoomlaOutput.Files joomlaOutput_Files0 = new JoomlaOutput.Files();
      joomlaOutput_Files0.setFolder("Y}f[Hv69`qBs~;%");
      assertEquals(false, joomlaOutput_Files0.isRootElement());
  }

  @Test
  public void test27()  throws Throwable  {
      JoomlaOutput.Files joomlaOutput_Files0 = new JoomlaOutput.Files();
      Vector<FileSet> vector0 = joomlaOutput_Files0.getFileSets();
      assertEquals(10, vector0.capacity());
  }

  @Test
  public void test28()  throws Throwable  {
      JoomlaOutput.Files joomlaOutput_Files0 = new JoomlaOutput.Files();
      JoomlaOutput.Filename joomlaOutput_Filename0 = new JoomlaOutput.Filename();
      joomlaOutput_Files0.addConfiguredFilename(joomlaOutput_Filename0);
      assertEquals(1, joomlaOutput_Files0.getContentSize());
  }

  @Test
  public void test29()  throws Throwable  {
      JoomlaOutput.Files joomlaOutput_Files0 = new JoomlaOutput.Files();
      FileSet fileSet0 = new FileSet();
      joomlaOutput_Files0.addConfiguredFileSet(fileSet0);
      assertEquals(true, fileSet0.getDefaultexcludes());
  }

  @Test
  public void test30()  throws Throwable  {
      JoomlaOutput.Administration joomlaOutput_Administration0 = new JoomlaOutput.Administration();
      // Undeclared exception!
      try {
        joomlaOutput_Administration0.addConfiguredAdministraton(joomlaOutput_Administration0);
        fail("Expecting exception: IllegalAddException");
      } catch(IllegalAddException e) {
        /*
         * The Element cannot be added to itself
         */
      }
  }

  @Test
  public void test31()  throws Throwable  {
      JoomlaOutput.Administration joomlaOutput_Administration0 = new JoomlaOutput.Administration();
      JoomlaOutput.Files joomlaOutput_Files0 = new JoomlaOutput.Files();
      joomlaOutput_Administration0.addConfiguredFiles(joomlaOutput_Files0);
      assertEquals(1, joomlaOutput_Administration0.getContentSize());
  }

  @Test
  public void test32()  throws Throwable  {
      JoomlaOutput.Administration joomlaOutput_Administration0 = new JoomlaOutput.Administration();
      JoomlaOutput.Languages joomlaOutput_Languages0 = new JoomlaOutput.Languages();
      joomlaOutput_Administration0.addConfiguredLanguages(joomlaOutput_Languages0);
      assertEquals(1, joomlaOutput_Administration0.getContentSize());
  }

  @Test
  public void test33()  throws Throwable  {
      JoomlaOutput.Param joomlaOutput_Param0 = new JoomlaOutput.Param();
      // Undeclared exception!
      try {
        joomlaOutput_Param0.setDefault((String) null);
        fail("Expecting exception: IllegalDataException");
      } catch(IllegalDataException e) {
        /*
         * The data \"null\" is not legal for a JDOM attribute: A null is not a legal XML value.
         */
      }
  }

  @Test
  public void test34()  throws Throwable  {
      JoomlaOutput.Param joomlaOutput_Param0 = new JoomlaOutput.Param();
      joomlaOutput_Param0.setCols("");
      assertEquals("", joomlaOutput_Param0.getTextNormalize());
  }

  @Test
  public void test35()  throws Throwable  {
      JoomlaOutput.Param joomlaOutput_Param0 = new JoomlaOutput.Param();
      joomlaOutput_Param0.setNamE("");
      assertEquals("", joomlaOutput_Param0.getTextTrim());
  }

  @Test
  public void test36()  throws Throwable  {
      JoomlaOutput.Param joomlaOutput_Param0 = new JoomlaOutput.Param();
      // Undeclared exception!
      try {
        joomlaOutput_Param0.setSize((String) null);
        fail("Expecting exception: IllegalDataException");
      } catch(IllegalDataException e) {
        /*
         * The data \"null\" is not legal for a JDOM attribute: A null is not a legal XML value.
         */
      }
  }

  @Test
  public void test37()  throws Throwable  {
      JoomlaOutput.Param joomlaOutput_Param0 = new JoomlaOutput.Param();
      joomlaOutput_Param0.setMenu_type("-hs_v");
      assertEquals("", joomlaOutput_Param0.getTextNormalize());
  }

  @Test
  public void test38()  throws Throwable  {
      JoomlaOutput.Param joomlaOutput_Param0 = new JoomlaOutput.Param();
      joomlaOutput_Param0.setScope("2|x~_zs");
      assertEquals("", joomlaOutput_Param0.getValue());
  }

  @Test
  public void test39()  throws Throwable  {
      JoomlaOutput.Param joomlaOutput_Param0 = new JoomlaOutput.Param();
      joomlaOutput_Param0.setDirectory("");
      assertEquals("", joomlaOutput_Param0.getText());
  }

  @Test
  public void test40()  throws Throwable  {
      JoomlaOutput.Param joomlaOutput_Param0 = new JoomlaOutput.Param();
      joomlaOutput_Param0.setClient("}'sJh#Q7mLC{cDs");
      assertEquals("", joomlaOutput_Param0.getText());
  }

  @Test
  public void test41()  throws Throwable  {
      JoomlaOutput.Param joomlaOutput_Param0 = new JoomlaOutput.Param();
      joomlaOutput_Param0.setSection("       This class may be in a separate JAR that is not installed.");
      assertEquals("", joomlaOutput_Param0.getValue());
  }

  @Test
  public void test42()  throws Throwable  {
      JoomlaOutput.Param joomlaOutput_Param0 = new JoomlaOutput.Param();
      // Undeclared exception!
      try {
        joomlaOutput_Param0.setId((String) null);
        fail("Expecting exception: IllegalDataException");
      } catch(IllegalDataException e) {
        /*
         * The data \"null\" is not legal for a JDOM attribute: A null is not a legal XML value.
         */
      }
  }

  @Test
  public void test43()  throws Throwable  {
      JoomlaOutput.Param joomlaOutput_Param0 = new JoomlaOutput.Param();
      joomlaOutput_Param0.setFilter("");
      assertEquals("", joomlaOutput_Param0.getNamespaceURI());
  }

  @Test
  public void test44()  throws Throwable  {
      JoomlaOutput.Param joomlaOutput_Param0 = new JoomlaOutput.Param();
      JoomlaOutput.Option joomlaOutput_Option0 = new JoomlaOutput.Option();
      joomlaOutput_Param0.addConfiguredOption(joomlaOutput_Option0);
      assertEquals(1, joomlaOutput_Param0.getContentSize());
  }

  @Test
  public void test45()  throws Throwable  {
      JoomlaOutput.Param joomlaOutput_Param0 = new JoomlaOutput.Param();
      joomlaOutput_Param0.setExclude("#h5%W|cwei6loD");
      assertEquals("", joomlaOutput_Param0.getNamespaceURI());
  }

  @Test
  public void test46()  throws Throwable  {
      JoomlaOutput.Param joomlaOutput_Param0 = new JoomlaOutput.Param();
      joomlaOutput_Param0.setRows("=7>x,:f9");
      assertEquals("", joomlaOutput_Param0.getTextTrim());
  }

  @Test
  public void test47()  throws Throwable  {
      JoomlaOutput.Param joomlaOutput_Param0 = new JoomlaOutput.Param();
      joomlaOutput_Param0.setHide_none("#h5%W|cwei6loD");
      assertEquals("", joomlaOutput_Param0.getText());
  }

  @Test
  public void test48()  throws Throwable  {
      JoomlaOutput.Param joomlaOutput_Param0 = new JoomlaOutput.Param();
      joomlaOutput_Param0.setType(") fr type ");
      assertEquals("", joomlaOutput_Param0.getTextTrim());
  }

  @Test
  public void test49()  throws Throwable  {
      JoomlaOutput.Param joomlaOutput_Param0 = new JoomlaOutput.Param();
      joomlaOutput_Param0.setLabel("#h5%W|cwei6loD");
      assertEquals("", joomlaOutput_Param0.getTextNormalize());
  }

  @Test
  public void test50()  throws Throwable  {
      JoomlaOutput.Param joomlaOutput_Param0 = new JoomlaOutput.Param();
      joomlaOutput_Param0.setState("");
      assertEquals("", joomlaOutput_Param0.getValue());
  }

  @Test
  public void test51()  throws Throwable  {
      JoomlaOutput.Param joomlaOutput_Param0 = new JoomlaOutput.Param();
      joomlaOutput_Param0.setHide_default("t");
      assertEquals("", joomlaOutput_Param0.getValue());
  }

  @Test
  public void test52()  throws Throwable  {
      JoomlaOutput.Param joomlaOutput_Param0 = new JoomlaOutput.Param();
      joomlaOutput_Param0.setStripext("}'sJh#Q7mLC{cDs");
      assertEquals("[Element: <param/>]", joomlaOutput_Param0.toString());
  }

  @Test
  public void test53()  throws Throwable  {
      JoomlaOutput.Param joomlaOutput_Param0 = new JoomlaOutput.Param();
      joomlaOutput_Param0.setDescription("#h5%W|cwei6loD");
      assertEquals("", joomlaOutput_Param0.getNamespacePrefix());
  }

  @Test
  public void test54()  throws Throwable  {
      JoomlaOutput.Option joomlaOutput_Option0 = new JoomlaOutput.Option();
      joomlaOutput_Option0.setValue("-hs_v");
      assertEquals("option", joomlaOutput_Option0.getQualifiedName());
  }

  @Test
  public void test55()  throws Throwable  {
      JoomlaOutput.CreationDate joomlaOutput_CreationDate0 = new JoomlaOutput.CreationDate();
      assertEquals("[Element: <creationDate/>]", joomlaOutput_CreationDate0.toString());
  }

  @Test
  public void test56()  throws Throwable  {
      JoomlaOutput.Languages joomlaOutput_Languages0 = new JoomlaOutput.Languages();
      // Undeclared exception!
      try {
        joomlaOutput_Languages0.setFolder((String) null);
        fail("Expecting exception: IllegalDataException");
      } catch(IllegalDataException e) {
        /*
         * The data \"null\" is not legal for a JDOM attribute: A null is not a legal XML value.
         */
      }
  }

  @Test
  public void test57()  throws Throwable  {
      JoomlaOutput.Languages joomlaOutput_Languages0 = new JoomlaOutput.Languages();
      JoomlaOutput.Language joomlaOutput_Language0 = new JoomlaOutput.Language();
      joomlaOutput_Languages0.addConfiguredLanguage(joomlaOutput_Language0);
      assertEquals(1, joomlaOutput_Languages0.getContentSize());
  }

  @Test
  public void test58()  throws Throwable  {
      JoomlaOutput.Position joomlaOutput_Position0 = new JoomlaOutput.Position();
      assertEquals("", joomlaOutput_Position0.getTextTrim());
  }

  @Test
  public void test59()  throws Throwable  {
      JoomlaOutput joomlaOutput0 = new JoomlaOutput();
      joomlaOutput0.setOutput("");
      // Undeclared exception!
      try {
        joomlaOutput0.execute();
        fail("Expecting exception: BuildException");
      } catch(BuildException e) {
        /*
         * install not defined
         */
      }
  }

  @Test
  public void test60()  throws Throwable  {
      JoomlaOutput joomlaOutput0 = new JoomlaOutput();
      joomlaOutput0.setOutput("");
      JoomlaOutput.Install joomlaOutput_Install0 = new JoomlaOutput.Install();
      joomlaOutput0.addConfiguredInstall(joomlaOutput_Install0);
      joomlaOutput0.execute();
      assertNull(joomlaOutput0.getTaskType());
  }

  @Test
  public void test61()  throws Throwable  {
      JoomlaOutput joomlaOutput0 = new JoomlaOutput();
      joomlaOutput0.setOutput("\"");
      assertNull(joomlaOutput0.getTaskType());
  }

  @Test
  public void test62()  throws Throwable  {
      JoomlaOutput joomlaOutput0 = new JoomlaOutput();
      joomlaOutput0.setOverwrite(true);
      assertNull(joomlaOutput0.getDescription());
  }

  @Test
  public void test63()  throws Throwable  {
      JoomlaOutput joomlaOutput0 = new JoomlaOutput();
      joomlaOutput0.setOverwrite(false);
      assertNull(joomlaOutput0.getDescription());
  }

  @Test
  public void test64()  throws Throwable  {
      JoomlaOutput.SimpleElement.fixup((Project) null, (Content) null);
  }

  @Test
  public void test65()  throws Throwable  {
      JoomlaOutput.Folder joomlaOutput_Folder0 = new JoomlaOutput.Folder();
      JoomlaOutput.Files joomlaOutput_Files0 = new JoomlaOutput.Files();
      joomlaOutput_Folder0.setContent((Content) joomlaOutput_Files0);
      JoomlaOutput.SimpleElement.fixup((Project) null, (Content) joomlaOutput_Folder0);
      assertEquals("", joomlaOutput_Folder0.getTextNormalize());
  }

  @Test
  public void test66()  throws Throwable  {
      JoomlaOutput.Folder joomlaOutput_Folder0 = new JoomlaOutput.Folder();
      joomlaOutput_Folder0.addContent("40m5bxLdC}};E8");
      // Undeclared exception!
      try {
        JoomlaOutput.SimpleElement.fixup((Project) null, (Content) joomlaOutput_Folder0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test67()  throws Throwable  {
      JoomlaOutput.Copyright joomlaOutput_Copyright0 = new JoomlaOutput.Copyright();
      JoomlaOutput.Version joomlaOutput_Version0 = new JoomlaOutput.Version();
      JoomlaOutput.Copyright joomlaOutput_Copyright1 = (JoomlaOutput.Copyright)joomlaOutput_Copyright0.addContent((Content) joomlaOutput_Version0);
      JoomlaOutput.SimpleElement.fixup((Project) null, (Content) joomlaOutput_Copyright1);
      assertEquals("", joomlaOutput_Copyright1.getTextTrim());
  }

  @Test
  public void test68()  throws Throwable  {
      JoomlaOutput.Files joomlaOutput_Files0 = new JoomlaOutput.Files();
      JoomlaOutput.Filename joomlaOutput_Filename0 = new JoomlaOutput.Filename();
      FileSet fileSet0 = new FileSet();
      // Undeclared exception!
      try {
        joomlaOutput_Files0.update(joomlaOutput_Filename0, fileSet0);
        fail("Expecting exception: BuildException");
      } catch(BuildException e) {
        /*
         * FileSet used in filename mode
         */
      }
  }
}
