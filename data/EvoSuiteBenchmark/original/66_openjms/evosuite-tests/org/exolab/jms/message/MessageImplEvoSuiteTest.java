/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.message;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.Enumeration;
import javax.jms.Destination;
import javax.jms.JMSException;
import javax.jms.MessageNotReadableException;
import javax.jms.MessageNotWriteableException;
import org.exolab.jms.client.JmsTopic;
import org.exolab.jms.message.BytesMessageImpl;
import org.exolab.jms.message.DestinationImpl;
import org.exolab.jms.message.MapMessageImpl;
import org.exolab.jms.message.MessageImpl;
import org.exolab.jms.message.MessageSessionIfc;
import org.exolab.jms.message.ObjectMessageImpl;
import org.exolab.jms.message.StreamMessageImpl;
import org.exolab.jms.message.TextMessageImpl;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MessageImplEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      TextMessageImpl textMessageImpl0 = new TextMessageImpl();
      assertNotNull(textMessageImpl0);
      
      textMessageImpl0.propertyExists("StreamMessage corrupted");
      assertEquals(false, textMessageImpl0.getProcessed());
  }

  @Test
  public void test1()  throws Throwable  {
      MessageImpl messageImpl0 = new MessageImpl();
      messageImpl0.setJMSCorrelationID("#@M<PeT");
      assertEquals(false, messageImpl0.getProcessed());
  }

  @Test
  public void test2()  throws Throwable  {
      MessageImpl messageImpl0 = new MessageImpl();
      messageImpl0.getConsumerId();
      assertEquals(false, messageImpl0.getProcessed());
  }

  @Test
  public void test3()  throws Throwable  {
      TextMessageImpl textMessageImpl0 = new TextMessageImpl();
      assertNotNull(textMessageImpl0);
      
      textMessageImpl0.setJMSRedelivered(false);
      assertEquals(false, textMessageImpl0.getJMSRedelivered());
      assertEquals(false, textMessageImpl0.getProcessed());
  }

  @Test
  public void test4()  throws Throwable  {
      MapMessageImpl mapMessageImpl0 = new MapMessageImpl();
      assertNotNull(mapMessageImpl0);
      
      // Undeclared exception!
      try {
        mapMessageImpl0.getFloatProperty("M");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      MessageImpl messageImpl0 = new MessageImpl();
      try {
        messageImpl0.getJMSTimestamp();
        fail("Expecting exception: JMSException");
      } catch(JMSException e) {
        /*
         * No Timestamp set
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl();
      assertNotNull(streamMessageImpl0);
      
      DestinationImpl destinationImpl0 = new DestinationImpl();
      streamMessageImpl0.setJMSDestination((Destination) destinationImpl0);
      assertEquals(false, streamMessageImpl0.getProcessed());
  }

  @Test
  public void test7()  throws Throwable  {
      TextMessageImpl textMessageImpl0 = new TextMessageImpl();
      assertNotNull(textMessageImpl0);
      
      try {
        textMessageImpl0.setStringProperty("", (String) null);
        fail("Expecting exception: JMSException");
      } catch(JMSException e) {
        /*
         * zero-length name is not a valid property name
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      MessageImpl messageImpl0 = new MessageImpl();
      messageImpl0.setJMSExpiration((-1158L));
      assertEquals((-1158L), messageImpl0.getJMSExpiration());
  }

  @Test
  public void test9()  throws Throwable  {
      TextMessageImpl textMessageImpl0 = new TextMessageImpl();
      assertNotNull(textMessageImpl0);
      
      long long0 = textMessageImpl0.getAcceptedTime();
      assertEquals(0L, long0);
      assertEquals(false, textMessageImpl0.getProcessed());
  }

  @Test
  public void test10()  throws Throwable  {
      MessageImpl messageImpl0 = new MessageImpl();
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try {
        messageImpl0.setJMSCorrelationIDAsBytes(byteArray0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Provider native correlation identifier not supported
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      BytesMessageImpl bytesMessageImpl0 = new BytesMessageImpl();
      assertNotNull(bytesMessageImpl0);
      
      try {
        bytesMessageImpl0.setLongProperty("", 1702L);
        fail("Expecting exception: JMSException");
      } catch(JMSException e) {
        /*
         * zero-length name is not a valid property name
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      MapMessageImpl mapMessageImpl0 = new MapMessageImpl();
      assertNotNull(mapMessageImpl0);
      
      // Undeclared exception!
      try {
        mapMessageImpl0.getByteProperty("(");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
        /*
         * null
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      MessageImpl messageImpl0 = new MessageImpl();
      messageImpl0.setJMSPriority(0);
      assertEquals(0, messageImpl0.getJMSPriority());
      assertEquals(false, messageImpl0.getProcessed());
  }

  @Test
  public void test14()  throws Throwable  {
      TextMessageImpl textMessageImpl0 = new TextMessageImpl();
      assertEquals(false, textMessageImpl0.getProcessed());
      assertNotNull(textMessageImpl0);
      
      textMessageImpl0.setProcessed(true);
      assertEquals(true, textMessageImpl0.getProcessed());
  }

  @Test
  public void test15()  throws Throwable  {
      TextMessageImpl textMessageImpl0 = new TextMessageImpl();
      assertNotNull(textMessageImpl0);
      
      textMessageImpl0.getJMSCorrelationIDAsBytes();
      assertEquals(false, textMessageImpl0.getProcessed());
  }

  @Test
  public void test16()  throws Throwable  {
      MapMessageImpl mapMessageImpl0 = new MapMessageImpl();
      assertNotNull(mapMessageImpl0);
      
      mapMessageImpl0.setJMSTimestamp(1093L);
      assertEquals(false, mapMessageImpl0.getProcessed());
      assertEquals(1093L, mapMessageImpl0.getJMSTimestamp());
  }

  @Test
  public void test17()  throws Throwable  {
      BytesMessageImpl bytesMessageImpl0 = new BytesMessageImpl();
      assertNotNull(bytesMessageImpl0);
      
      bytesMessageImpl0.setSequenceNumber(0L);
      assertEquals(false, bytesMessageImpl0.getProcessed());
      assertEquals(0L, bytesMessageImpl0.getSequenceNumber());
  }

  @Test
  public void test18()  throws Throwable  {
      BytesMessageImpl bytesMessageImpl0 = new BytesMessageImpl();
      assertNotNull(bytesMessageImpl0);
      
      bytesMessageImpl0.setConsumerId(0L);
      assertEquals(false, bytesMessageImpl0.getProcessed());
      assertEquals(0L, bytesMessageImpl0.getConsumerId());
  }

  @Test
  public void test19()  throws Throwable  {
      MapMessageImpl mapMessageImpl0 = new MapMessageImpl();
      assertNotNull(mapMessageImpl0);
      
      long long0 = mapMessageImpl0.getConnectionId();
      assertEquals(0L, long0);
      assertEquals(false, mapMessageImpl0.getProcessed());
  }

  @Test
  public void test20()  throws Throwable  {
      MessageImpl messageImpl0 = new MessageImpl();
      messageImpl0.getJMSReplyTo();
      assertEquals(false, messageImpl0.getProcessed());
  }

  @Test
  public void test21()  throws Throwable  {
      MapMessageImpl mapMessageImpl0 = new MapMessageImpl();
      assertNotNull(mapMessageImpl0);
      
      mapMessageImpl0.getJMSPriority();
      assertEquals(false, mapMessageImpl0.getProcessed());
  }

  @Test
  public void test22()  throws Throwable  {
      StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl();
      assertNotNull(streamMessageImpl0);
      
      streamMessageImpl0.getMessageId();
      assertEquals(false, streamMessageImpl0.getProcessed());
  }

  @Test
  public void test23()  throws Throwable  {
      TextMessageImpl textMessageImpl0 = new TextMessageImpl();
      assertNotNull(textMessageImpl0);
      
      // Undeclared exception!
      try {
        textMessageImpl0.getIntProperty("StreamMessage corrupted");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
        /*
         * null
         */
      }
  }

  @Test
  public void test24()  throws Throwable  {
      BytesMessageImpl bytesMessageImpl0 = new BytesMessageImpl();
      assertNotNull(bytesMessageImpl0);
      
      long long0 = bytesMessageImpl0.getSequenceNumber();
      assertEquals(0L, long0);
      assertEquals(false, bytesMessageImpl0.getProcessed());
  }

  @Test
  public void test25()  throws Throwable  {
      MessageImpl messageImpl0 = new MessageImpl();
      boolean boolean0 = messageImpl0.getProcessed();
      assertEquals(false, boolean0);
  }

  @Test
  public void test26()  throws Throwable  {
      BytesMessageImpl bytesMessageImpl0 = new BytesMessageImpl();
      assertNotNull(bytesMessageImpl0);
      
      bytesMessageImpl0.getJMSCorrelationID();
      assertEquals(false, bytesMessageImpl0.getProcessed());
  }

  @Test
  public void test27()  throws Throwable  {
      MapMessageImpl mapMessageImpl0 = new MapMessageImpl();
      assertNotNull(mapMessageImpl0);
      
      mapMessageImpl0.clearProperties();
      assertEquals(false, mapMessageImpl0.getProcessed());
  }

  @Test
  public void test28()  throws Throwable  {
      MapMessageImpl mapMessageImpl0 = new MapMessageImpl();
      assertNotNull(mapMessageImpl0);
      
      // Undeclared exception!
      try {
        mapMessageImpl0.getLongProperty((String) null);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
        /*
         * null
         */
      }
  }

  @Test
  public void test29()  throws Throwable  {
      TextMessageImpl textMessageImpl0 = new TextMessageImpl();
      assertNotNull(textMessageImpl0);
      
      Enumeration<Object> enumeration0 = textMessageImpl0.getPropertyNames();
      assertEquals(false, textMessageImpl0.getProcessed());
      assertNotNull(enumeration0);
  }

  @Test
  public void test30()  throws Throwable  {
      ObjectMessageImpl objectMessageImpl0 = new ObjectMessageImpl();
      assertNotNull(objectMessageImpl0);
      
      // Undeclared exception!
      try {
        objectMessageImpl0.getDoubleProperty("");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test31()  throws Throwable  {
      StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl();
      assertNotNull(streamMessageImpl0);
      
      // Undeclared exception!
      try {
        streamMessageImpl0.getShortProperty((String) null);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
        /*
         * null
         */
      }
  }

  @Test
  public void test32()  throws Throwable  {
      TextMessageImpl textMessageImpl0 = new TextMessageImpl();
      assertNotNull(textMessageImpl0);
      
      textMessageImpl0.setFloatProperty("uO", (float) (-1659));
      assertEquals(false, textMessageImpl0.getProcessed());
  }

  @Test
  public void test33()  throws Throwable  {
      MessageImpl messageImpl0 = new MessageImpl();
      messageImpl0.getWildcard();
      assertEquals(false, messageImpl0.getProcessed());
  }

  @Test
  public void test34()  throws Throwable  {
      TextMessageImpl textMessageImpl0 = new TextMessageImpl();
      assertNotNull(textMessageImpl0);
      
      textMessageImpl0.getBooleanProperty((String) null);
      assertEquals(false, textMessageImpl0.getProcessed());
  }

  @Test
  public void test35()  throws Throwable  {
      MessageImpl messageImpl0 = new MessageImpl();
      try {
        messageImpl0.setShortProperty((String) null, (short)1209);
        fail("Expecting exception: JMSException");
      } catch(JMSException e) {
        /*
         * <null> is not a valid property name
         */
      }
  }

  @Test
  public void test36()  throws Throwable  {
      MapMessageImpl mapMessageImpl0 = new MapMessageImpl();
      assertNotNull(mapMessageImpl0);
      
      String string0 = mapMessageImpl0.getJMSType();
      assertEquals(false, mapMessageImpl0.getProcessed());
      assertNotNull(string0);
  }

  @Test
  public void test37()  throws Throwable  {
      StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl();
      assertNotNull(streamMessageImpl0);
      
      try {
        streamMessageImpl0.getJMSDeliveryMode();
        fail("Expecting exception: JMSException");
      } catch(JMSException e) {
        /*
         * No Delivery Mode set
         */
      }
  }

  @Test
  public void test38()  throws Throwable  {
      MessageImpl messageImpl0 = new MessageImpl();
      messageImpl0.setJMSMessageID((String) null);
      assertEquals(false, messageImpl0.getProcessed());
  }

  @Test
  public void test39()  throws Throwable  {
      MessageImpl messageImpl0 = new MessageImpl();
      messageImpl0.setWildcard("ObjecHWLtMessage");
      assertEquals(false, messageImpl0.getProcessed());
  }

  @Test
  public void test40()  throws Throwable  {
      MapMessageImpl mapMessageImpl0 = new MapMessageImpl();
      assertNotNull(mapMessageImpl0);
      
      mapMessageImpl0.setJMSXRcvTimestamp(0L);
      assertEquals(false, mapMessageImpl0.getProcessed());
  }

  @Test
  public void test41()  throws Throwable  {
      StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl();
      assertNotNull(streamMessageImpl0);
      
      // Undeclared exception!
      try {
        streamMessageImpl0.getId();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test42()  throws Throwable  {
      MapMessageImpl mapMessageImpl0 = new MapMessageImpl();
      assertNotNull(mapMessageImpl0);
      
      mapMessageImpl0.getJMSExpiration();
      assertEquals(false, mapMessageImpl0.getProcessed());
  }

  @Test
  public void test43()  throws Throwable  {
      TextMessageImpl textMessageImpl0 = new TextMessageImpl();
      assertNotNull(textMessageImpl0);
      
      textMessageImpl0.setAcceptedTime((-1917L));
      assertEquals((-1917L), textMessageImpl0.getAcceptedTime());
  }

  @Test
  public void test44()  throws Throwable  {
      MapMessageImpl mapMessageImpl0 = new MapMessageImpl();
      assertNotNull(mapMessageImpl0);
      
      try {
        mapMessageImpl0.setBooleanProperty("is", false);
        fail("Expecting exception: JMSException");
      } catch(JMSException e) {
        /*
         * name=is is a reserved word; it cannot be used as a property name
         */
      }
  }

  @Test
  public void test45()  throws Throwable  {
      TextMessageImpl textMessageImpl0 = new TextMessageImpl();
      assertNotNull(textMessageImpl0);
      
      textMessageImpl0.setIntProperty("uO", (-1659));
      assertEquals(false, textMessageImpl0.getProcessed());
  }

  @Test
  public void test46()  throws Throwable  {
      MapMessageImpl mapMessageImpl0 = new MapMessageImpl();
      assertNotNull(mapMessageImpl0);
      
      try {
        mapMessageImpl0.acknowledge();
        fail("Expecting exception: JMSException");
      } catch(JMSException e) {
        /*
         * Cannot acknowledge message: no identifier
         */
      }
  }

  @Test
  public void test47()  throws Throwable  {
      MessageImpl messageImpl0 = new MessageImpl();
      messageImpl0.getJMSRedelivered();
      assertEquals(false, messageImpl0.getProcessed());
  }

  @Test
  public void test48()  throws Throwable  {
      TextMessageImpl textMessageImpl0 = new TextMessageImpl();
      assertNotNull(textMessageImpl0);
      
      try {
        textMessageImpl0.setJMSDeliveryMode(669);
        fail("Expecting exception: JMSException");
      } catch(JMSException e) {
        /*
         * Invalid Mode
         */
      }
  }

  @Test
  public void test49()  throws Throwable  {
      TextMessageImpl textMessageImpl0 = new TextMessageImpl();
      assertNotNull(textMessageImpl0);
      
      textMessageImpl0.getObjectProperty("StreamMessage corrupted");
      assertEquals(false, textMessageImpl0.getProcessed());
  }

  @Test
  public void test50()  throws Throwable  {
      MapMessageImpl mapMessageImpl0 = new MapMessageImpl();
      assertNotNull(mapMessageImpl0);
      
      mapMessageImpl0.setObjectProperty("M", (Object) null);
      assertEquals(false, mapMessageImpl0.getProcessed());
  }

  @Test
  public void test51()  throws Throwable  {
      MessageImpl messageImpl0 = new MessageImpl();
      MessageImpl messageImpl1 = (MessageImpl)messageImpl0.clone();
      assertEquals(false, messageImpl0.getProcessed());
      assertNotNull(messageImpl1);
      assertNotSame(messageImpl0, messageImpl1);
  }

  @Test
  public void test52()  throws Throwable  {
      MessageImpl messageImpl0 = new MessageImpl();
      messageImpl0.clearBody();
      assertEquals(false, messageImpl0.getProcessed());
  }

  @Test
  public void test53()  throws Throwable  {
      ObjectMessageImpl objectMessageImpl0 = new ObjectMessageImpl();
      assertNotNull(objectMessageImpl0);
      
      JmsTopic jmsTopic0 = new JmsTopic("");
      objectMessageImpl0.setJMSReplyTo((Destination) jmsTopic0);
      assertEquals(false, objectMessageImpl0.getProcessed());
  }

  @Test
  public void test54()  throws Throwable  {
      TextMessageImpl textMessageImpl0 = new TextMessageImpl();
      assertNotNull(textMessageImpl0);
      
      textMessageImpl0.getStringProperty("");
      assertEquals(false, textMessageImpl0.getProcessed());
  }

  @Test
  public void test55()  throws Throwable  {
      MessageImpl messageImpl0 = new MessageImpl();
      messageImpl0.setConnectionId((long) 0);
      assertEquals(0L, messageImpl0.getConnectionId());
      assertEquals(false, messageImpl0.getProcessed());
  }

  @Test
  public void test56()  throws Throwable  {
      TextMessageImpl textMessageImpl0 = new TextMessageImpl();
      assertNotNull(textMessageImpl0);
      
      try {
        textMessageImpl0.setByteProperty((String) null, (byte)0);
        fail("Expecting exception: JMSException");
      } catch(JMSException e) {
        /*
         * <null> is not a valid property name
         */
      }
  }

  @Test
  public void test57()  throws Throwable  {
      StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl();
      assertNotNull(streamMessageImpl0);
      
      streamMessageImpl0.getJMSMessageID();
      assertEquals(false, streamMessageImpl0.getProcessed());
  }

  @Test
  public void test58()  throws Throwable  {
      MessageImpl messageImpl0 = new MessageImpl();
      messageImpl0.setReadOnly(true);
      messageImpl0.checkRead();
      assertEquals(true, messageImpl0.getReadOnly());
      assertEquals(false, messageImpl0.getProcessed());
  }

  @Test
  public void test59()  throws Throwable  {
      MessageImpl messageImpl0 = new MessageImpl();
      messageImpl0.getJMSDestination();
      assertEquals(false, messageImpl0.getProcessed());
  }

  @Test
  public void test60()  throws Throwable  {
      StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl();
      assertNotNull(streamMessageImpl0);
      
      streamMessageImpl0.setReadOnly(true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1740);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      streamMessageImpl0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(371, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005w\u001A\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000sr\u0000$org.exolab.jms.message.MessageHeader\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\f\u0000\u0000xpw\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001pppw\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000psr\u0000\u001Borg.exolab.jms.message.Type\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\f\u0000\u0000xpw&\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\r\u0000S\u0000t\u0000r\u0000e\u0000a\u0000m\u0000M\u0000e\u0000s\u0000s\u0000a\u0000g\u0000expppppw\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000xsr\u0000(org.exolab.jms.message.MessageProperties\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\f\u0000\u0000xpw\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001sr\u0000\u0011java.util.HashMap\u0005\u0007\uFFFD\uFFFD\uFFFD\u0016`\uFFFD\u0003\u0000\u0002F\u0000\nloadFactorI\u0000\tthresholdxp?@\u0000\u0000\u0000\u0000\u0000\u0018w\b\u0000\u0000\u0000 \u0000\u0000\u0000\u0000xxw\f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test
  public void test61()  throws Throwable  {
      MessageImpl messageImpl0 = new MessageImpl();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      messageImpl0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(273, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005w\u001A\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000sr\u0000$org.exolab.jms.message.MessageHeader\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\f\u0000\u0000xpw\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001pppw\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000pppppppw\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000xsr\u0000(org.exolab.jms.message.MessageProperties\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\f\u0000\u0000xpw\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001sr\u0000\u0011java.util.HashMap\u0005\u0007\uFFFD\uFFFD\uFFFD\u0016`\uFFFD\u0003\u0000\u0002F\u0000\nloadFactorI\u0000\tthresholdxp?@\u0000\u0000\u0000\u0000\u0000\u0018w\b\u0000\u0000\u0000 \u0000\u0000\u0000\u0000xx", byteArrayOutputStream0.toString());
  }

  @Test
  public void test62()  throws Throwable  {
      BytesMessageImpl bytesMessageImpl0 = new BytesMessageImpl();
      assertNotNull(bytesMessageImpl0);
      
      bytesMessageImpl0.setSession((MessageSessionIfc) null);
      assertEquals(false, bytesMessageImpl0.getProcessed());
  }

  @Test
  public void test63()  throws Throwable  {
      ObjectMessageImpl objectMessageImpl0 = new ObjectMessageImpl();
      assertNotNull(objectMessageImpl0);
      
      objectMessageImpl0.setReadOnly(true);
      try {
        objectMessageImpl0.setDoubleProperty("KF:cxbldP%s4_mKHqMt", (-1.0));
        fail("Expecting exception: MessageNotWriteableException");
      } catch(MessageNotWriteableException e) {
        /*
         * Message in read-only mode
         */
      }
  }

  @Test
  public void test64()  throws Throwable  {
      BytesMessageImpl bytesMessageImpl0 = new BytesMessageImpl();
      assertNotNull(bytesMessageImpl0);
      
      bytesMessageImpl0.writeFloat((-565.806F));
      assertEquals(false, bytesMessageImpl0.getProcessed());
  }

  @Test
  public void test65()  throws Throwable  {
      MessageImpl messageImpl0 = new MessageImpl();
      messageImpl0.setReadOnly(true);
      try {
        messageImpl0.checkWrite();
        fail("Expecting exception: MessageNotWriteableException");
      } catch(MessageNotWriteableException e) {
        /*
         * Message in read-only mode
         */
      }
  }

  @Test
  public void test66()  throws Throwable  {
      BytesMessageImpl bytesMessageImpl0 = new BytesMessageImpl();
      assertNotNull(bytesMessageImpl0);
      
      try {
        bytesMessageImpl0.checkRead();
        fail("Expecting exception: MessageNotReadableException");
      } catch(MessageNotReadableException e) {
        /*
         * Message in write-only mode
         */
      }
  }

  @Test
  public void test67()  throws Throwable  {
      TextMessageImpl textMessageImpl0 = new TextMessageImpl();
      assertNotNull(textMessageImpl0);
      
      boolean boolean0 = textMessageImpl0.getReadOnly();
      assertEquals(false, textMessageImpl0.getProcessed());
      assertEquals(false, boolean0);
  }

  @Test
  public void test68()  throws Throwable  {
      MessageImpl messageImpl0 = new MessageImpl();
      messageImpl0.setReadOnly(true);
      boolean boolean0 = messageImpl0.getReadOnly();
      assertEquals(true, messageImpl0.getReadOnly());
      assertEquals(true, boolean0);
  }
}
