/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.net.http;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sun.net.ssl.internal.www.protocol.https.Handler;
import com.sun.net.ssl.internal.www.protocol.https.HttpsURLConnectionOldImpl;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLStreamHandler;
import org.exolab.jms.net.http.HTTPRequestInfo;
import org.exolab.jms.net.http.TunnelHelper;
import org.exolab.jms.net.uri.URI;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TunnelHelperEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      TunnelHelper tunnelHelper0 = new TunnelHelper();
      assertNotNull(tunnelHelper0);
  }

  @Test
  public void test1()  throws Throwable  {
      Handler handler0 = new Handler();
      URL uRL0 = new URL("Argument fragment is illegal if path includes fragment identifier", "Argument fragment is illegal if path includes fragment identifier", 18, "Argument fragment is illegal if path includes fragment identifier", (URLStreamHandler) handler0);
      URI uRI0 = new URI();
      HTTPRequestInfo hTTPRequestInfo0 = new HTTPRequestInfo(uRI0);
      HttpsURLConnectionOldImpl httpsURLConnectionOldImpl0 = (HttpsURLConnectionOldImpl)TunnelHelper.create(uRL0, "Argument fragment is illegal if path includes fragment identifier", (String) null, hTTPRequestInfo0);
      assertEquals(false, httpsURLConnectionOldImpl0.getUseCaches());
      assertEquals("POST", httpsURLConnectionOldImpl0.getRequestMethod());
      assertNotNull(httpsURLConnectionOldImpl0);
  }

  @Test
  public void test2()  throws Throwable  {
      Handler handler0 = new Handler();
      URL uRL0 = new URL("Argument fragment is illegal if path includes fragment identifier", "Argument fragment is illegal if path includes fragment identifier", 18, "Argument fragment is illegal if path includes fragment identifier", (URLStreamHandler) handler0);
      URI uRI0 = new URI();
      HTTPRequestInfo hTTPRequestInfo0 = new HTTPRequestInfo(uRI0);
      hTTPRequestInfo0.setProxyUser("Argument fragment is illegal if path includes fragment identifier");
      HttpsURLConnectionOldImpl httpsURLConnectionOldImpl0 = (HttpsURLConnectionOldImpl)TunnelHelper.create(uRL0, (String) null, "Argument fragment is illegal if path includes fragment identifier", hTTPRequestInfo0);
      assertNotNull(httpsURLConnectionOldImpl0);
      assertEquals(false, httpsURLConnectionOldImpl0.getUseCaches());
      assertEquals("POST", httpsURLConnectionOldImpl0.getRequestMethod());
  }

  @Test
  public void test3()  throws Throwable  {
      Handler handler0 = new Handler();
      URL uRL0 = new URL("Argument fragment is illegal if path includes fragment identifier", "Argument fragment is illegal if path includes fragment identifier", 18, "Argument fragment is illegal if path includes fragment identifier", (URLStreamHandler) handler0);
      URI uRI0 = new URI();
      HTTPRequestInfo hTTPRequestInfo0 = new HTTPRequestInfo(uRI0);
      hTTPRequestInfo0.setProxyUser("Argument fragment is illegal if path includes fragment identifier");
      hTTPRequestInfo0.setProxyPassword("Argument fragment is illegal if path includes fragment identifier");
      // Undeclared exception!
      try {
        TunnelHelper.connect(uRL0, "Argument fragment is illegal if path includes fragment identifier", (String) null, hTTPRequestInfo0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * URI can't be null.
         */
      }
  }
}
