/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.persistence;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.exolab.jms.config.Configuration;
import org.exolab.jms.persistence.DatabaseService;
import org.exolab.jms.persistence.PersistenceException;
import org.exolab.jms.service.ServiceException;
import org.exolab.jms.service.ServiceThreadListener;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DatabaseServiceEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      try {
        DatabaseService.getInstance();
        fail("Expecting exception: PersistenceException");
      } catch(PersistenceException e) {
        /*
         * No DatabaseService registered
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      DatabaseService databaseService0 = new DatabaseService(configuration0);
      databaseService0.begin();
      try {
        databaseService0.begin();
        fail("Expecting exception: PersistenceException");
      } catch(PersistenceException e) {
        /*
         * Transaction already in progress
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      DatabaseService databaseService0 = new DatabaseService(configuration0);
      ServiceThreadListener serviceThreadListener0 = new ServiceThreadListener();
      databaseService0.setServiceThreadListener(serviceThreadListener0);
      // Undeclared exception!
      try {
        databaseService0.doStop();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      DatabaseService.Monitor databaseService_Monitor0 = new DatabaseService.Monitor();
      databaseService_Monitor0.begin((Runnable) null);
  }

  @Test
  public void test4()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      DatabaseService databaseService0 = new DatabaseService(configuration0);
      try {
        databaseService0.begin();
        fail("Expecting exception: PersistenceException");
      } catch(PersistenceException e) {
        /*
         * State not associated with current service
         */
      }
      assertEquals("Service:[name=DatabaseServicestarted=false]", databaseService0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      DatabaseService databaseService0 = new DatabaseService(configuration0);
      boolean boolean0 = databaseService0.isTransacted();
      assertEquals(true, boolean0);
      
      // Undeclared exception!
      try {
        databaseService0.start();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      DatabaseService databaseService0 = new DatabaseService(configuration0);
      // Undeclared exception!
      try {
        databaseService0.doStop();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      DatabaseService databaseService0 = new DatabaseService(configuration0);
      try {
        databaseService0.commit();
        fail("Expecting exception: PersistenceException");
      } catch(PersistenceException e) {
        /*
         * State not associated with current service
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      DatabaseService.Monitor databaseService_Monitor0 = new DatabaseService.Monitor();
      databaseService_Monitor0.end((Runnable) null);
  }
}
