/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.message;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import java.io.ObjectOutput;
import javax.jms.JMSException;
import org.exolab.jms.message.Priority;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PriorityEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Priority priority0 = new Priority();
      // Undeclared exception!
      try {
        priority0.writeExternal((ObjectOutput) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      Priority priority0 = new Priority(1);
      assertNotNull(priority0);
      
      int int0 = priority0.getPriority();
      assertEquals(1, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      Priority priority0 = null;
      try {
        priority0 = new Priority((-891));
        fail("Expecting exception: JMSException");
      } catch(JMSException e) {
        /*
         * Invalid priority
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      Priority priority0 = null;
      try {
        priority0 = new Priority(252);
        fail("Expecting exception: JMSException");
      } catch(JMSException e) {
        /*
         * Invalid priority
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      Priority priority0 = new Priority();
      boolean boolean0 = priority0.isExpedited();
      assertEquals(false, boolean0);
      assertEquals(0, priority0.getPriority());
  }

  @Test
  public void test5()  throws Throwable  {
      Priority priority0 = new Priority(8);
      assertNotNull(priority0);
      
      boolean boolean0 = priority0.isExpedited();
      assertEquals(8, priority0.getPriority());
      assertEquals(true, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      Priority priority0 = new Priority();
      boolean boolean0 = priority0.isGreater(priority0);
      assertEquals(false, boolean0);
      assertEquals(0, priority0.getPriority());
  }

  @Test
  public void test7()  throws Throwable  {
      Priority priority0 = new Priority(1);
      assertNotNull(priority0);
      
      Priority priority1 = new Priority();
      boolean boolean0 = priority0.isGreater(priority1);
      assertEquals(true, boolean0);
      assertEquals(1, priority0.getPriority());
  }

  @Test
  public void test8()  throws Throwable  {
      Priority priority0 = new Priority(1);
      assertNotNull(priority0);
      
      Priority priority1 = new Priority();
      boolean boolean0 = priority0.isEqual(priority1);
      assertEquals(false, boolean0);
      assertEquals(1, priority0.getPriority());
  }

  @Test
  public void test9()  throws Throwable  {
      Priority priority0 = new Priority();
      boolean boolean0 = priority0.isEqual(priority0);
      assertEquals(0, priority0.getPriority());
      assertEquals(true, boolean0);
  }
}
