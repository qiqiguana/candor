/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.config;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.Reader;
import java.io.Writer;
import org.exolab.castor.util.NestedIOException;
import org.exolab.castor.xml.MarshalException;
import org.exolab.castor.xml.ValidationException;
import org.exolab.jms.config.GarbageCollectionConfiguration;
import org.junit.BeforeClass;
import org.xml.sax.ContentHandler;
import org.xml.sax.ext.DefaultHandler2;

@RunWith(EvoSuiteRunner.class)
public class GarbageCollectionConfigurationEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      GarbageCollectionConfiguration garbageCollectionConfiguration0 = new GarbageCollectionConfiguration();
      int int0 = garbageCollectionConfiguration0.getLowWaterThreshold();
      assertEquals(20, int0);
      assertEquals(5, garbageCollectionConfiguration0.getGarbageCollectionThreadPriority());
      assertEquals(600, garbageCollectionConfiguration0.getGarbageCollectionInterval());
      assertEquals(30, garbageCollectionConfiguration0.getMemoryCheckInterval());
  }

  @Test
  public void test1()  throws Throwable  {
      GarbageCollectionConfiguration garbageCollectionConfiguration0 = new GarbageCollectionConfiguration();
      garbageCollectionConfiguration0.setLowWaterThreshold((-360));
      assertEquals(true, garbageCollectionConfiguration0.hasLowWaterThreshold());
      assertEquals(600, garbageCollectionConfiguration0.getGarbageCollectionInterval());
  }

  @Test
  public void test2()  throws Throwable  {
      GarbageCollectionConfiguration garbageCollectionConfiguration0 = new GarbageCollectionConfiguration();
      garbageCollectionConfiguration0.setGarbageCollectionThreadPriority(0);
      boolean boolean0 = garbageCollectionConfiguration0.isValid();
      assertEquals(false, garbageCollectionConfiguration0.isValid());
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      GarbageCollectionConfiguration garbageCollectionConfiguration0 = new GarbageCollectionConfiguration();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      try {
        garbageCollectionConfiguration0.marshal((ContentHandler) defaultHandler2_0);
        fail("Expecting exception: NestedIOException");
      } catch(NestedIOException e) {
        /*
         * System property org.xml.sax.parser not specified
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      GarbageCollectionConfiguration garbageCollectionConfiguration0 = new GarbageCollectionConfiguration();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter((int) '\u0000');
      garbageCollectionConfiguration0.marshal((Writer) charArrayWriter0);
      assertEquals(120, charArrayWriter0.size());
      assertEquals(20, garbageCollectionConfiguration0.getLowWaterThreshold());
  }

  @Test
  public void test5()  throws Throwable  {
      GarbageCollectionConfiguration garbageCollectionConfiguration0 = new GarbageCollectionConfiguration();
      garbageCollectionConfiguration0.deleteMemoryCheckInterval();
      assertEquals(20, garbageCollectionConfiguration0.getLowWaterThreshold());
      assertEquals(5, garbageCollectionConfiguration0.getGarbageCollectionThreadPriority());
      assertEquals(600, garbageCollectionConfiguration0.getGarbageCollectionInterval());
      assertEquals(false, garbageCollectionConfiguration0.hasMemoryCheckInterval());
      assertEquals(30, garbageCollectionConfiguration0.getMemoryCheckInterval());
  }

  @Test
  public void test6()  throws Throwable  {
      GarbageCollectionConfiguration garbageCollectionConfiguration0 = new GarbageCollectionConfiguration();
      garbageCollectionConfiguration0.deleteGarbageCollectionInterval();
      assertEquals(20, garbageCollectionConfiguration0.getLowWaterThreshold());
      assertEquals(5, garbageCollectionConfiguration0.getGarbageCollectionThreadPriority());
      assertEquals(false, garbageCollectionConfiguration0.hasGarbageCollectionInterval());
      assertEquals(600, garbageCollectionConfiguration0.getGarbageCollectionInterval());
      assertEquals(30, garbageCollectionConfiguration0.getMemoryCheckInterval());
  }

  @Test
  public void test7()  throws Throwable  {
      GarbageCollectionConfiguration garbageCollectionConfiguration0 = new GarbageCollectionConfiguration();
      garbageCollectionConfiguration0.deleteLowWaterThreshold();
      assertEquals(30, garbageCollectionConfiguration0.getMemoryCheckInterval());
      assertEquals(20, garbageCollectionConfiguration0.getLowWaterThreshold());
      assertEquals(false, garbageCollectionConfiguration0.hasLowWaterThreshold());
      assertEquals(5, garbageCollectionConfiguration0.getGarbageCollectionThreadPriority());
      assertEquals(600, garbageCollectionConfiguration0.getGarbageCollectionInterval());
  }

  @Test
  public void test8()  throws Throwable  {
      GarbageCollectionConfiguration garbageCollectionConfiguration0 = new GarbageCollectionConfiguration();
      garbageCollectionConfiguration0.setMemoryCheckInterval(600);
      boolean boolean0 = garbageCollectionConfiguration0.isValid();
      assertEquals(600, garbageCollectionConfiguration0.getMemoryCheckInterval());
      assertEquals(true, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      GarbageCollectionConfiguration garbageCollectionConfiguration0 = new GarbageCollectionConfiguration();
      garbageCollectionConfiguration0.deleteGarbageCollectionThreadPriority();
      assertEquals(false, garbageCollectionConfiguration0.hasGarbageCollectionThreadPriority());
      assertEquals(600, garbageCollectionConfiguration0.getGarbageCollectionInterval());
      assertEquals(5, garbageCollectionConfiguration0.getGarbageCollectionThreadPriority());
      assertEquals(20, garbageCollectionConfiguration0.getLowWaterThreshold());
      assertEquals(30, garbageCollectionConfiguration0.getMemoryCheckInterval());
  }

  @Test
  public void test10()  throws Throwable  {
      GarbageCollectionConfiguration garbageCollectionConfiguration0 = new GarbageCollectionConfiguration();
      garbageCollectionConfiguration0.setGarbageCollectionInterval(1546);
      assertEquals(true, garbageCollectionConfiguration0.hasGarbageCollectionInterval());
      assertEquals(5, garbageCollectionConfiguration0.getGarbageCollectionThreadPriority());
  }

  @Test
  public void test11()  throws Throwable  {
      GarbageCollectionConfiguration garbageCollectionConfiguration0 = new GarbageCollectionConfiguration();
      int int0 = garbageCollectionConfiguration0.getGarbageCollectionInterval();
      assertEquals(20, garbageCollectionConfiguration0.getLowWaterThreshold());
      assertEquals(5, garbageCollectionConfiguration0.getGarbageCollectionThreadPriority());
      assertEquals(600, int0);
      assertEquals(30, garbageCollectionConfiguration0.getMemoryCheckInterval());
  }

  @Test
  public void test12()  throws Throwable  {
      try {
        GarbageCollectionConfiguration.unmarshal((Reader) null);
        fail("Expecting exception: MarshalException");
      } catch(MarshalException e) {
        /*
         * 
         */
      }
  }
}
