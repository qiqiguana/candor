/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.net.http;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.exolab.jms.net.connector.ResourceException;
import org.exolab.jms.net.http.HTTPRequestInfo;
import org.exolab.jms.net.uri.URI;
import org.exolab.jms.net.util.Properties;
import org.exolab.jms.net.util.SSLProperties;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class HTTPRequestInfoEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      URI uRI0 = new URI();
      HTTPRequestInfo hTTPRequestInfo0 = new HTTPRequestInfo(uRI0);
      Properties properties0 = new Properties("9Xi<tvai");
      hTTPRequestInfo0.export(properties0);
      assertEquals(0, hTTPRequestInfo0.getProxyPort());
  }

  @Test
  public void test1()  throws Throwable  {
      URI uRI0 = new URI();
      HTTPRequestInfo hTTPRequestInfo0 = new HTTPRequestInfo(uRI0);
      hTTPRequestInfo0.setProxyPassword("7[z4M!'Cpa}FT");
      boolean boolean0 = hTTPRequestInfo0.equals((Object) hTTPRequestInfo0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      URI uRI0 = new URI();
      HTTPRequestInfo hTTPRequestInfo0 = new HTTPRequestInfo(uRI0);
      Properties properties0 = new Properties("9Xi<tvai");
      SSLProperties sSLProperties0 = new SSLProperties(properties0);
      hTTPRequestInfo0.setSSLProperties(sSLProperties0);
      hTTPRequestInfo0.export(properties0);
      assertEquals(0, hTTPRequestInfo0.getProxyPort());
  }

  @Test
  public void test3()  throws Throwable  {
      URI uRI0 = new URI();
      HTTPRequestInfo hTTPRequestInfo0 = new HTTPRequestInfo(uRI0);
      boolean boolean0 = hTTPRequestInfo0.equals((Object) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      URI uRI0 = new URI();
      HTTPRequestInfo hTTPRequestInfo0 = new HTTPRequestInfo(uRI0);
      boolean boolean0 = hTTPRequestInfo0.equals((Object) hTTPRequestInfo0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      URI uRI0 = new URI();
      Properties properties0 = new Properties("");
      HTTPRequestInfo hTTPRequestInfo0 = new HTTPRequestInfo(uRI0);
      HTTPRequestInfo hTTPRequestInfo1 = new HTTPRequestInfo(uRI0, properties0);
      assertTrue(hTTPRequestInfo1.equals(hTTPRequestInfo0));
      
      hTTPRequestInfo0.setProxyHost("");
      boolean boolean0 = hTTPRequestInfo1.equals((Object) hTTPRequestInfo0);
      assertFalse(hTTPRequestInfo0.equals(hTTPRequestInfo1));
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      URI uRI0 = new URI();
      Properties properties0 = new Properties("*cN+U1");
      HTTPRequestInfo hTTPRequestInfo0 = new HTTPRequestInfo(uRI0, properties0);
      HTTPRequestInfo hTTPRequestInfo1 = new HTTPRequestInfo(uRI0, properties0);
      assertTrue(hTTPRequestInfo1.equals(hTTPRequestInfo0));
      
      hTTPRequestInfo1.setProxyPassword("*cN+U1");
      boolean boolean0 = hTTPRequestInfo0.equals((Object) hTTPRequestInfo1);
      assertFalse(hTTPRequestInfo0.equals(hTTPRequestInfo1));
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      URI uRI0 = new URI();
      HTTPRequestInfo hTTPRequestInfo0 = new HTTPRequestInfo(uRI0);
      Properties properties0 = new Properties("9Xi<tvai");
      SSLProperties sSLProperties0 = new SSLProperties(properties0);
      hTTPRequestInfo0.setSSLProperties(sSLProperties0);
      HTTPRequestInfo hTTPRequestInfo1 = new HTTPRequestInfo(uRI0);
      boolean boolean0 = hTTPRequestInfo0.equals((Object) hTTPRequestInfo1);
      assertFalse(hTTPRequestInfo1.equals(hTTPRequestInfo0));
      assertEquals(false, boolean0);
  }
}
