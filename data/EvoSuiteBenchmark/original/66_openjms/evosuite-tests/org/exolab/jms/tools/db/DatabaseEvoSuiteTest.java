/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.tools.db;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.FileDescriptor;
import java.io.FileReader;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.Writer;
import java.util.Enumeration;
import org.exolab.castor.xml.MarshalException;
import org.exolab.castor.xml.ValidationException;
import org.exolab.jms.tools.db.Database;
import org.exolab.jms.tools.db.Deprecated;
import org.exolab.jms.tools.db.Table;
import org.junit.BeforeClass;
import org.xml.sax.ContentHandler;

@RunWith(EvoSuiteRunner.class)
public class DatabaseEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Database database0 = new Database();
      int int0 = database0.getTableCount();
      assertEquals(0, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      Database database0 = new Database();
      Table table0 = new Table();
      database0.addTable(table0);
      Table[] tableArray0 = database0.getTable();
      database0.setTable(tableArray0);
      assertEquals(1, database0.getTableCount());
      assertEquals(false, database0.isValid());
  }

  @Test
  public void test2()  throws Throwable  {
      Database database0 = new Database();
      Enumeration<Object> enumeration0 = database0.enumerateTable();
      assertEquals(false, enumeration0.hasMoreElements());
  }

  @Test
  public void test3()  throws Throwable  {
      Database database0 = new Database();
      PipedWriter pipedWriter0 = new PipedWriter();
      try {
        database0.marshal((Writer) pipedWriter0);
        fail("Expecting exception: MarshalException");
      } catch(MarshalException e) {
        /*
         * Pipe not connected
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      FileDescriptor fileDescriptor0 = FileDescriptor.out;
      FileReader fileReader0 = new FileReader(fileDescriptor0);
      try {
        Database.unmarshal((Reader) fileReader0);
        fail("Expecting exception: MarshalException");
      } catch(MarshalException e) {
        /*
         * Bad file descriptor
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      Database database0 = new Database();
      Table table0 = new Table();
      database0.addTable(0, table0);
      assertEquals(1, database0.getTableCount());
      assertEquals(false, database0.isValid());
  }

  @Test
  public void test6()  throws Throwable  {
      Database database0 = new Database();
      database0.addDeprecated(0, (Deprecated) null);
      boolean boolean0 = database0.isValid();
      assertEquals(1, database0.getDeprecatedCount());
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      Database database0 = new Database();
      database0.clearTable();
      assertEquals(0, database0.getDeprecatedCount());
  }

  @Test
  public void test8()  throws Throwable  {
      Database database0 = new Database();
      Deprecated deprecated0 = new Deprecated();
      database0.addDeprecated(deprecated0);
      assertEquals(1, database0.getDeprecatedCount());
      assertEquals(false, database0.isValid());
  }

  @Test
  public void test9()  throws Throwable  {
      Database database0 = new Database();
      database0.clearDeprecated();
      assertEquals(true, database0.isValid());
  }

  @Test
  public void test10()  throws Throwable  {
      Database database0 = new Database();
      // Undeclared exception!
      try {
        database0.marshal((ContentHandler) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Argument 'handler' is null.
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Database database0 = new Database();
      Enumeration<Object> enumeration0 = database0.enumerateDeprecated();
      assertEquals(false, enumeration0.hasMoreElements());
  }

  @Test
  public void test12()  throws Throwable  {
      Database database0 = new Database();
      int int0 = database0.getDeprecatedCount();
      assertEquals(0, int0);
  }

  @Test
  public void test13()  throws Throwable  {
      Database database0 = new Database();
      Table table0 = new Table();
      boolean boolean0 = database0.removeTable(table0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      Database database0 = new Database();
      boolean boolean0 = database0.removeDeprecated((Deprecated) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      Database database0 = new Database();
      try {
        database0.getDeprecated((-207));
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test16()  throws Throwable  {
      Database database0 = new Database();
      try {
        database0.getDeprecated(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 0, Size: 0
         */
      }
  }

  @Test
  public void test17()  throws Throwable  {
      Database database0 = new Database();
      try {
        database0.getDeprecated(1915);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test18()  throws Throwable  {
      Database database0 = new Database();
      try {
        database0.getTable((-1233));
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test19()  throws Throwable  {
      Database database0 = new Database();
      try {
        database0.getTable(779);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test20()  throws Throwable  {
      Database database0 = new Database();
      try {
        database0.getTable(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 0, Size: 0
         */
      }
  }

  @Test
  public void test21()  throws Throwable  {
      Database database0 = new Database();
      Deprecated deprecated0 = new Deprecated();
      try {
        database0.setDeprecated(11264, deprecated0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test22()  throws Throwable  {
      Database database0 = new Database();
      Deprecated[] deprecatedArray0 = new Deprecated[2];
      try {
        database0.setDeprecated(0, deprecatedArray0[1]);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 0, Size: 0
         */
      }
  }

  @Test
  public void test23()  throws Throwable  {
      Database database0 = new Database();
      Deprecated[] deprecatedArray0 = new Deprecated[2];
      database0.setDeprecated(deprecatedArray0);
      assertEquals(2, database0.getDeprecatedCount());
      assertEquals(false, database0.isValid());
  }

  @Test
  public void test24()  throws Throwable  {
      Database database0 = new Database();
      Table table0 = new Table();
      try {
        database0.setTable(0, table0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 0, Size: 0
         */
      }
  }

  @Test
  public void test25()  throws Throwable  {
      Database database0 = new Database();
      Table[] tableArray0 = database0.getTable();
      database0.setTable(tableArray0);
      assertEquals(0, database0.getTableCount());
  }
}
