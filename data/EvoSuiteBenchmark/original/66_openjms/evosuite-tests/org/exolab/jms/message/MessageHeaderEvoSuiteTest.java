/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.message;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import javax.jms.Destination;
import javax.jms.JMSException;
import org.exolab.jms.client.JmsTemporaryQueue;
import org.exolab.jms.message.DestinationImpl;
import org.exolab.jms.message.MessageHeader;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MessageHeaderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      messageHeader0.setJMSRedelivered(false);
      assertEquals(false, messageHeader0.getJMSRedelivered());
      assertEquals(0L, messageHeader0.getJMSExpiration());
  }

  @Test
  public void test1()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      messageHeader0.setJMSExpiration(0L);
      assertEquals(0L, messageHeader0.getJMSExpiration());
      assertEquals(false, messageHeader0.getJMSRedelivered());
  }

  @Test
  public void test2()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      long long0 = messageHeader0.getJMSExpiration();
      assertEquals(0L, long0);
      assertEquals(false, messageHeader0.getJMSRedelivered());
  }

  @Test
  public void test3()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      PipedInputStream pipedInputStream0 = new PipedInputStream(1210);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) pipedOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) filterOutputStream0);
      messageHeader0.writeExternal((ObjectOutput) objectOutputStream0);
  }

  @Test
  public void test4()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      long long0 = messageHeader0.getConsumerId();
      assertEquals(false, messageHeader0.getJMSRedelivered());
      assertEquals(0L, long0);
      assertEquals(0L, messageHeader0.getJMSExpiration());
  }

  @Test
  public void test5()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      byte[] byteArray0 = new byte[17];
      // Undeclared exception!
      try {
        messageHeader0.setJMSCorrelationIDAsBytes(byteArray0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Provider native correlation identifier not supported
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      messageHeader0.getAckMessageID();
      assertEquals(false, messageHeader0.getJMSRedelivered());
      assertEquals(0L, messageHeader0.getJMSExpiration());
  }

  @Test
  public void test7()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      messageHeader0.setAckMessageID("ID:1]/");
      assertEquals(0L, messageHeader0.getJMSExpiration());
      assertEquals(false, messageHeader0.getJMSRedelivered());
  }

  @Test
  public void test8()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      messageHeader0.getWildcard();
      assertEquals(false, messageHeader0.getJMSRedelivered());
      assertEquals(0L, messageHeader0.getJMSExpiration());
  }

  @Test
  public void test9()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      messageHeader0.getJMSReplyTo();
      assertEquals(0L, messageHeader0.getJMSExpiration());
      assertEquals(false, messageHeader0.getJMSRedelivered());
  }

  @Test
  public void test10()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      messageHeader0.setWildcard("a6$Ti~CrYgRM?m");
      MessageHeader messageHeader1 = (MessageHeader)messageHeader0.clone();
      assertEquals(0L, messageHeader1.getJMSExpiration());
      assertEquals(false, messageHeader1.getJMSRedelivered());
      assertNotSame(messageHeader1, messageHeader0);
      assertEquals(0L, messageHeader1.getConsumerId());
  }

  @Test
  public void test11()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      messageHeader0.setJMSTimestamp(692L);
      long long0 = messageHeader0.getJMSTimestamp();
      assertEquals(false, messageHeader0.getJMSRedelivered());
      assertEquals(692L, long0);
      assertEquals(0L, messageHeader0.getJMSExpiration());
  }

  @Test
  public void test12()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      try {
        messageHeader0.setJMSDeliveryMode(90);
        fail("Expecting exception: JMSException");
      } catch(JMSException e) {
        /*
         * Invalid Mode
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      messageHeader0.getJMSDestination();
      assertEquals(false, messageHeader0.getJMSRedelivered());
      assertEquals(0L, messageHeader0.getJMSExpiration());
  }

  @Test
  public void test14()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      boolean boolean0 = messageHeader0.getJMSRedelivered();
      assertEquals(0L, messageHeader0.getJMSExpiration());
      assertEquals(false, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      messageHeader0.setConsumerId((long) 0);
      assertEquals(0L, messageHeader0.getJMSExpiration());
      assertEquals(0L, messageHeader0.getConsumerId());
      assertEquals(false, messageHeader0.getJMSRedelivered());
  }

  @Test
  public void test16()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      messageHeader0.setJMSPriority(0);
      int int0 = messageHeader0.getJMSPriority();
      assertEquals(0, int0);
      assertEquals(0L, messageHeader0.getJMSExpiration());
      assertEquals(false, messageHeader0.getJMSRedelivered());
  }

  @Test
  public void test17()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      messageHeader0.getMessageId();
      assertEquals(false, messageHeader0.getJMSRedelivered());
      assertEquals(0L, messageHeader0.getJMSExpiration());
  }

  @Test
  public void test18()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      MessageHeader messageHeader1 = (MessageHeader)messageHeader0.clone();
      assertNotSame(messageHeader1, messageHeader0);
      assertEquals(0L, messageHeader1.getJMSExpiration());
      assertEquals(0L, messageHeader1.getConsumerId());
      assertEquals(false, messageHeader1.getJMSRedelivered());
  }

  @Test
  public void test19()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      try {
        messageHeader0.setJMSReplyTo((Destination) null);
        fail("Expecting exception: JMSException");
      } catch(JMSException e) {
        /*
         * Unknown Destination Type
         */
      }
  }

  @Test
  public void test20()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      JmsTemporaryQueue jmsTemporaryQueue0 = new JmsTemporaryQueue();
      messageHeader0.setJMSReplyTo((Destination) jmsTemporaryQueue0);
      assertEquals(false, messageHeader0.getJMSRedelivered());
      assertEquals(0L, messageHeader0.getJMSExpiration());
  }

  @Test
  public void test21()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      try {
        messageHeader0.setJMSDestination((Destination) null);
        fail("Expecting exception: JMSException");
      } catch(JMSException e) {
        /*
         * Unknown Destination Type
         */
      }
  }

  @Test
  public void test22()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      DestinationImpl destinationImpl0 = new DestinationImpl();
      messageHeader0.setJMSDestination((Destination) destinationImpl0);
      assertEquals(false, messageHeader0.getJMSRedelivered());
      assertEquals(0L, messageHeader0.getJMSExpiration());
  }

  @Test
  public void test23()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      messageHeader0.setJMSMessageID((String) null);
      assertEquals(0L, messageHeader0.getJMSExpiration());
      assertEquals(false, messageHeader0.getJMSRedelivered());
  }

  @Test
  public void test24()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      try {
        messageHeader0.setJMSMessageID("T This version =");
        fail("Expecting exception: JMSException");
      } catch(JMSException e) {
        /*
         * Invalid JMSMessageID: T This version =
         */
      }
  }

  @Test
  public void test25()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      messageHeader0.setJMSMessageID("ID:1]/");
      String string0 = messageHeader0.getJMSMessageID();
      assertEquals(0L, messageHeader0.getJMSExpiration());
      assertEquals(false, messageHeader0.getJMSRedelivered());
      assertNotNull(string0);
  }

  @Test
  public void test26()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      messageHeader0.getJMSMessageID();
      assertEquals(false, messageHeader0.getJMSRedelivered());
      assertEquals(0L, messageHeader0.getJMSExpiration());
  }

  @Test
  public void test27()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      try {
        messageHeader0.getJMSTimestamp();
        fail("Expecting exception: JMSException");
      } catch(JMSException e) {
        /*
         * No Timestamp set
         */
      }
  }

  @Test
  public void test28()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      messageHeader0.getJMSCorrelationIDAsBytes();
      assertEquals(false, messageHeader0.getJMSRedelivered());
      assertEquals(0L, messageHeader0.getJMSExpiration());
  }

  @Test
  public void test29()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      messageHeader0.setJMSCorrelationID("a6$Ti~CrYgRM?m");
      // Undeclared exception!
      try {
        messageHeader0.getJMSCorrelationIDAsBytes();
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Provider native correlation identifier not supported
         */
      }
  }

  @Test
  public void test30()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      messageHeader0.setJMSCorrelationID((String) null);
      assertEquals(false, messageHeader0.getJMSRedelivered());
      assertEquals(0L, messageHeader0.getJMSExpiration());
  }

  @Test
  public void test31()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      messageHeader0.getJMSCorrelationID();
      assertEquals(false, messageHeader0.getJMSRedelivered());
      assertEquals(0L, messageHeader0.getJMSExpiration());
  }

  @Test
  public void test32()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      messageHeader0.setJMSCorrelationID("a6$Ti~CrYgRM?m");
      String string0 = messageHeader0.getJMSCorrelationID();
      assertEquals(false, messageHeader0.getJMSRedelivered());
      assertNotNull(string0);
      assertEquals(0L, messageHeader0.getJMSExpiration());
  }

  @Test
  public void test33()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      try {
        messageHeader0.getJMSDeliveryMode();
        fail("Expecting exception: JMSException");
      } catch(JMSException e) {
        /*
         * No Delivery Mode set
         */
      }
  }

  @Test
  public void test34()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      messageHeader0.setJMSType((String) null);
      assertEquals(0L, messageHeader0.getJMSExpiration());
      assertEquals(false, messageHeader0.getJMSRedelivered());
  }

  @Test
  public void test35()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      messageHeader0.setJMSType("Connection closed");
      String string0 = messageHeader0.getJMSType();
      assertEquals(0L, messageHeader0.getJMSExpiration());
      assertNotNull(string0);
      assertEquals(false, messageHeader0.getJMSRedelivered());
  }

  @Test
  public void test36()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      messageHeader0.getJMSType();
      assertEquals(false, messageHeader0.getJMSRedelivered());
      assertEquals(0L, messageHeader0.getJMSExpiration());
  }

  @Test
  public void test37()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      int int0 = messageHeader0.getJMSPriority();
      assertEquals(0, int0);
      assertEquals(false, messageHeader0.getJMSRedelivered());
      assertEquals(0L, messageHeader0.getJMSExpiration());
  }
}
