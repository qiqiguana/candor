/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.selector;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.HashSet;
import org.exolab.jms.selector.DefaultExpressionFactory;
import org.exolab.jms.selector.Expression;
import org.exolab.jms.selector.SelectorException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DefaultExpressionFactoryEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      Expression expression0 = defaultExpressionFactory0.unaryOperator(4, (Expression) null);
      Expression expression1 = defaultExpressionFactory0.between(expression0, expression0, (Expression) null);
      assertNotSame(expression1, expression0);
  }

  @Test
  public void test1()  throws Throwable  {
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      Expression expression0 = defaultExpressionFactory0.identifier("");
      try {
        defaultExpressionFactory0.like(expression0, "", "");
        fail("Expecting exception: SelectorException");
      } catch(SelectorException e) {
        /*
         * Invalid escape: 
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      Expression expression0 = defaultExpressionFactory0.binaryOperator(17, (Expression) null, (Expression) null);
      HashSet<String> hashSet0 = new HashSet<String>();
      // Undeclared exception!
      try {
        defaultExpressionFactory0.in(expression0, (HashSet) hashSet0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * org.exolab.jms.selector.Divide cannot be cast to org.exolab.jms.selector.Identifier
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      Expression expression0 = defaultExpressionFactory0.identifier("");
      Expression expression1 = defaultExpressionFactory0.isNull(expression0);
      assertNotSame(expression0, expression1);
  }

  @Test
  public void test4()  throws Throwable  {
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      Expression expression0 = defaultExpressionFactory0.identifier("");
      Expression expression1 = defaultExpressionFactory0.binaryOperator(5, expression0, expression0);
      assertEquals("( or )", expression1.toString());
      assertNotNull(expression1);
  }

  @Test
  public void test5()  throws Throwable  {
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      Expression expression0 = defaultExpressionFactory0.identifier("e+k+8[G^nl;9ev4");
      Expression expression1 = defaultExpressionFactory0.binaryOperator(6, expression0, expression0);
      assertNotNull(expression1);
      assertEquals("(e+k+8[G^nl;9ev4 and e+k+8[G^nl;9ev4)", expression1.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      Expression expression0 = defaultExpressionFactory0.identifier("gG");
      Expression expression1 = defaultExpressionFactory0.binaryOperator(8, expression0, expression0);
      assertEquals("(gG = gG)", expression1.toString());
      assertNotNull(expression1);
  }

  @Test
  public void test7()  throws Throwable  {
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      Expression expression0 = defaultExpressionFactory0.identifier(",$:UXMa&}QG+8JW");
      Expression expression1 = defaultExpressionFactory0.binaryOperator(9, expression0, expression0);
      assertNotNull(expression1);
      assertEquals("(,$:UXMa&}QG+8JW <> ,$:UXMa&}QG+8JW)", expression1.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      Expression expression0 = defaultExpressionFactory0.identifier("G");
      Expression expression1 = defaultExpressionFactory0.binaryOperator(10, expression0, expression0);
      assertNotNull(expression1);
      assertEquals("(G < G)", expression1.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      Expression expression0 = defaultExpressionFactory0.identifier("Ys$rcN(H4>`XgonkF");
      Expression expression1 = defaultExpressionFactory0.binaryOperator(11, expression0, expression0);
      assertNotNull(expression1);
      assertEquals("(Ys$rcN(H4>`XgonkF > Ys$rcN(H4>`XgonkF)", expression1.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      Expression expression0 = defaultExpressionFactory0.identifier("");
      Expression expression1 = defaultExpressionFactory0.binaryOperator(12, expression0, expression0);
      assertNotNull(expression1);
      assertEquals("( <= )", expression1.toString());
  }

  @Test
  public void test11()  throws Throwable  {
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      Expression expression0 = defaultExpressionFactory0.binaryOperator(13, (Expression) null, (Expression) null);
      assertNotNull(expression0);
  }

  @Test
  public void test12()  throws Throwable  {
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      Expression expression0 = defaultExpressionFactory0.identifier("[<e-=fxPpA5T|3");
      Expression expression1 = defaultExpressionFactory0.binaryOperator(14, expression0, expression0);
      assertEquals("([<e-=fxPpA5T|3 + [<e-=fxPpA5T|3)", expression1.toString());
      assertNotNull(expression1);
  }

  @Test
  public void test13()  throws Throwable  {
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      Expression expression0 = defaultExpressionFactory0.identifier("8f'");
      Expression expression1 = defaultExpressionFactory0.binaryOperator(15, expression0, expression0);
      assertNotNull(expression1);
      assertEquals("(8f' - 8f')", expression1.toString());
  }

  @Test
  public void test14()  throws Throwable  {
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      Expression expression0 = defaultExpressionFactory0.binaryOperator(16, (Expression) null, (Expression) null);
      assertNotNull(expression0);
  }

  @Test
  public void test15()  throws Throwable  {
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      Expression expression0 = defaultExpressionFactory0.identifier("");
      try {
        defaultExpressionFactory0.binaryOperator((-2001), expression0, expression0);
        fail("Expecting exception: SelectorException");
      } catch(SelectorException e) {
        /*
         * Unknown binary operator type: -2001
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      Expression expression0 = defaultExpressionFactory0.identifier("");
      Expression expression1 = defaultExpressionFactory0.unaryOperator(7, expression0);
      assertEquals("(not )", expression1.toString());
      assertNotNull(expression1);
  }

  @Test
  public void test17()  throws Throwable  {
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      Expression expression0 = defaultExpressionFactory0.literal(32, "-");
      assertNotNull(expression0);
      
      try {
        defaultExpressionFactory0.unaryOperator(32, expression0);
        fail("Expecting exception: SelectorException");
      } catch(SelectorException e) {
        /*
         * Unknown unary operator type: 32
         */
      }
  }

  @Test
  public void test18()  throws Throwable  {
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      Expression expression0 = defaultExpressionFactory0.literal(26, (String) null);
      assertNotNull(expression0);
  }

  @Test
  public void test19()  throws Throwable  {
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      try {
        defaultExpressionFactory0.literal(27, "3");
        fail("Expecting exception: SelectorException");
      } catch(SelectorException e) {
        /*
         * Unknown literal type: 27
         */
      }
  }

  @Test
  public void test20()  throws Throwable  {
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      try {
        defaultExpressionFactory0.literal(28, "gG");
        fail("Expecting exception: SelectorException");
      } catch(SelectorException e) {
        /*
         * Unknown literal type: 28
         */
      }
  }

  @Test
  public void test21()  throws Throwable  {
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      try {
        defaultExpressionFactory0.literal(29, "nP\"lid pattern: ");
        fail("Expecting exception: SelectorException");
      } catch(SelectorException e) {
        /*
         * invalid integer: nP\"lid pattern: 
         */
      }
  }

  @Test
  public void test22()  throws Throwable  {
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      try {
        defaultExpressionFactory0.literal(30, "blaAnk");
        fail("Expecting exception: SelectorException");
      } catch(SelectorException e) {
        /*
         * invalid float: blaAnk
         */
      }
  }

  @Test
  public void test23()  throws Throwable  {
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      Expression expression0 = defaultExpressionFactory0.literal(31, "<Q$>0)mA1~.@9vMy ;C1");
      assertNotNull(expression0);
      assertEquals("false", expression0.toString());
  }

  @Test
  public void test24()  throws Throwable  {
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      try {
        defaultExpressionFactory0.literal(15, "8f'");
        fail("Expecting exception: SelectorException");
      } catch(SelectorException e) {
        /*
         * Unknown literal type: 15
         */
      }
  }
}
