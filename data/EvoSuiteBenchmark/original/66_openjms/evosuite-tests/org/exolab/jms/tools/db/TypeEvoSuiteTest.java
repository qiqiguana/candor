/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.tools.db;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.exolab.jms.persistence.PersistenceException;
import org.exolab.jms.tools.db.Type;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TypeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Type type0 = new Type(0, (long) 0, false);
      assertNotNull(type0);
      
      String string0 = type0.getName();
      assertEquals("type=NULL, name=NULL, precision=0, parameters=false", type0.toString());
      assertNotNull(string0);
      assertEquals("NULL", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      Type type0 = new Type(1, 0L, true);
      assertNotNull(type0);
      
      type0.getPrecision();
      assertEquals("type=CHAR, name=CHAR, precision=0, parameters=true", type0.toString());
      assertEquals(true, type0.getParameters());
  }

  @Test
  public void test2()  throws Throwable  {
      Type type0 = new Type((-1), 1521L, true);
      assertNotNull(type0);
      
      int int0 = type0.getType();
      assertEquals(true, type0.getParameters());
      assertEquals((-1), int0);
      assertEquals("type=LONGVARCHAR, name=LONGVARCHAR, precision=1521, parameters=true", type0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      Type type0 = new Type((-1), 1521L, true);
      assertNotNull(type0);
      
      String string0 = type0.toString();
      assertEquals(true, type0.getParameters());
      assertNotNull(string0);
      assertEquals("type=LONGVARCHAR, name=LONGVARCHAR, precision=1521, parameters=true", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      Type type0 = new Type((-1), 1521L, true);
      assertNotNull(type0);
      
      boolean boolean0 = type0.getParameters();
      assertEquals(true, boolean0);
      assertEquals("type=LONGVARCHAR, name=LONGVARCHAR, precision=1521, parameters=true", type0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      Type type0 = null;
      try {
        type0 = new Type(40, (long) 40, true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Type id=40 is not a valid type
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      Type type0 = new Type((-1), "(", (long) (-1), true);
      assertNotNull(type0);
      
      String string0 = type0.getSQL();
      assertEquals(true, type0.getParameters());
      assertEquals("(", string0);
      assertEquals("type=LONGVARCHAR, name=(, precision=-1, parameters=true", type0.toString());
      assertNotNull(string0);
  }

  @Test
  public void test7()  throws Throwable  {
      Type type0 = null;
      try {
        type0 = new Type((-1854), " is not a valid type", (long) (-1854), true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Type id=-1854 is not a valid type
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      Type type0 = new Type(0, (long) 0, false);
      assertNotNull(type0);
      
      String string0 = type0.getSymbolicType();
      assertNotNull(string0);
      assertEquals("type=NULL, name=NULL, precision=0, parameters=false", type0.toString());
      assertEquals("NULL", string0);
  }

  @Test
  public void test9()  throws Throwable  {
      Type type0 = new Type(1, 0L, true);
      assertNotNull(type0);
      
      String string0 = type0.getSymbolicType();
      assertNotNull(string0);
      assertEquals(true, type0.getParameters());
      assertEquals("type=CHAR, name=CHAR, precision=0, parameters=true", type0.toString());
      assertEquals("CHAR", string0);
  }

  @Test
  public void test10()  throws Throwable  {
      Type type0 = new Type(1, ", precision=", (long) 1, true);
      assertNotNull(type0);
      
      String string0 = type0.getSymbolicType();
      assertNotNull(string0);
      assertEquals(true, type0.getParameters());
      assertEquals("CHAR(1)", string0);
  }

  @Test
  public void test11()  throws Throwable  {
      Type type0 = new Type(0, (long) 0, false);
      assertNotNull(type0);
      
      String string0 = type0.getSQL();
      assertEquals("type=NULL, name=NULL, precision=0, parameters=false", type0.toString());
      assertNotNull(string0);
      assertEquals("NULL", string0);
  }

  @Test
  public void test12()  throws Throwable  {
      Type type0 = new Type((-1), 1521L, true);
      assertNotNull(type0);
      
      String string0 = type0.getSQL();
      assertNotNull(string0);
      assertEquals("LONGVARCHAR(1521)", string0);
      assertEquals(true, type0.getParameters());
  }

  @Test
  public void test13()  throws Throwable  {
      try {
        Type.getType("");
        fail("Expecting exception: PersistenceException");
      } catch(PersistenceException e) {
        /*
         * Type name= is not a valid type
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      try {
        Type.getType("(");
        fail("Expecting exception: PersistenceException");
      } catch(PersistenceException e) {
        /*
         * Illegal type: (
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      Type type0 = Type.getType("LONGVARCHAR(1521)");
      assertEquals(true, type0.getParameters());
      assertNotNull(type0);
      assertEquals("LONGVARCHAR(1521)", type0.getSQL());
  }
}
