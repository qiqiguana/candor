/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.selector.parser;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import antlr.ASTFactory;
import antlr.CommonAST;
import antlr.CommonASTWithHiddenTokens;
import antlr.MismatchedTokenException;
import antlr.NoViableAltException;
import antlr.RecognitionException;
import antlr.collections.AST;
import org.evosuite.testcase.CodeUnderTestException;
import org.exolab.jms.selector.DefaultExpressionFactory;
import org.exolab.jms.selector.ExpressionFactory;
import org.exolab.jms.selector.parser.SelectorAST;
import org.exolab.jms.selector.parser.SelectorTreeParser;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SelectorTreeParserEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SelectorTreeParser selectorTreeParser0 = new SelectorTreeParser();
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      selectorTreeParser0.initialise((ExpressionFactory) defaultExpressionFactory0);
  }

  @Test
  public void test1()  throws Throwable  {
      SelectorTreeParser selectorTreeParser0 = new SelectorTreeParser();
  }

  @Test
  public void test2()  throws Throwable  {
      SelectorTreeParser selectorTreeParser0 = new SelectorTreeParser();
      // Undeclared exception!
      try {
        selectorTreeParser0.selector((AST) null);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * antlr.ASTNULLType cannot be cast to org.exolab.jms.selector.parser.SelectorAST
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      SelectorTreeParser selectorTreeParser0 = new SelectorTreeParser();
      SelectorAST selectorAST0 = new SelectorAST();
      try {
        selectorTreeParser0.expression((AST) selectorAST0);
        fail("Expecting exception: NoViableAltException");
      } catch(NoViableAltException e) {
        /*
         * unexpected AST node: null
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      SelectorTreeParser selectorTreeParser0 = new SelectorTreeParser();
  }

  @Test
  public void test5()  throws Throwable  {
      SelectorTreeParser selectorTreeParser0 = new SelectorTreeParser();
      try {
        selectorTreeParser0.booleanExpression((AST) null);
        fail("Expecting exception: NoViableAltException");
      } catch(NoViableAltException e) {
        /*
         * unexpected end of subtree
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      SelectorTreeParser selectorTreeParser0 = new SelectorTreeParser();
  }

  @Test
  public void test7()  throws Throwable  {
      SelectorTreeParser selectorTreeParser0 = new SelectorTreeParser();
      try {
        selectorTreeParser0.term((AST) null);
        fail("Expecting exception: NoViableAltException");
      } catch(NoViableAltException e) {
        /*
         * unexpected end of subtree
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      SelectorTreeParser selectorTreeParser0 = new SelectorTreeParser();
  }

  @Test
  public void test9()  throws Throwable  {
      SelectorTreeParser selectorTreeParser0 = new SelectorTreeParser();
      try {
        selectorTreeParser0.isExpression((AST) null);
        fail("Expecting exception: MismatchedTokenException");
      } catch(MismatchedTokenException e) {
        /*
         * expecting \"is\", found '<empty tree>'
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      SelectorTreeParser selectorTreeParser0 = new SelectorTreeParser();
  }

  @Test
  public void test11()  throws Throwable  {
      SelectorTreeParser selectorTreeParser0 = new SelectorTreeParser();
      ASTFactory aSTFactory0 = selectorTreeParser0.getASTFactory();
      CommonAST commonAST0 = (CommonAST)aSTFactory0.create();
      // Undeclared exception!
      try {
        selectorTreeParser0.betweenExpression((AST) commonAST0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * antlr.CommonAST cannot be cast to org.exolab.jms.selector.parser.SelectorAST
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      SelectorTreeParser selectorTreeParser0 = new SelectorTreeParser();
  }

  @Test
  public void test13()  throws Throwable  {
      SelectorTreeParser selectorTreeParser0 = new SelectorTreeParser();
      try {
        selectorTreeParser0.likeExpression((AST) null);
        fail("Expecting exception: MismatchedTokenException");
      } catch(MismatchedTokenException e) {
        /*
         * expecting \"like\", found '<empty tree>'
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      SelectorTreeParser selectorTreeParser0 = new SelectorTreeParser();
  }

  @Test
  public void test15()  throws Throwable  {
      SelectorTreeParser selectorTreeParser0 = new SelectorTreeParser();
      CommonASTWithHiddenTokens commonASTWithHiddenTokens0 = new CommonASTWithHiddenTokens();
      // Undeclared exception!
      try {
        selectorTreeParser0.inExpression((AST) commonASTWithHiddenTokens0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * antlr.CommonASTWithHiddenTokens cannot be cast to org.exolab.jms.selector.parser.SelectorAST
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      SelectorTreeParser selectorTreeParser0 = new SelectorTreeParser();
      ASTFactory aSTFactory0 = new ASTFactory();
      CommonAST commonAST0 = (CommonAST)aSTFactory0.create();
      // Undeclared exception!
      try {
        selectorTreeParser0.valueList((AST) commonAST0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * antlr.CommonAST cannot be cast to org.exolab.jms.selector.parser.SelectorAST
         */
      }
  }

  @Test
  public void test17()  throws Throwable  {
      SelectorTreeParser selectorTreeParser0 = new SelectorTreeParser();
  }

  @Test
  public void test18()  throws Throwable  {
      SelectorTreeParser selectorTreeParser0 = new SelectorTreeParser();
      try {
        selectorTreeParser0.unaryTerm((AST) null);
        fail("Expecting exception: NoViableAltException");
      } catch(NoViableAltException e) {
        /*
         * unexpected end of subtree
         */
      }
  }

  @Test
  public void test19()  throws Throwable  {
      SelectorTreeParser selectorTreeParser0 = new SelectorTreeParser();
  }

  @Test
  public void test20()  throws Throwable  {
      SelectorTreeParser selectorTreeParser0 = new SelectorTreeParser();
      try {
        selectorTreeParser0.literal((AST) null);
        fail("Expecting exception: NoViableAltException");
      } catch(NoViableAltException e) {
        /*
         * unexpected end of subtree
         */
      }
  }

  @Test
  public void test21()  throws Throwable  {
      SelectorTreeParser selectorTreeParser0 = new SelectorTreeParser();
  }
}
