/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.net.connector;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.security.Principal;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import javax.management.remote.JMXPrincipal;
import org.exolab.jms.authentication.AuthenticationMgr;
import org.exolab.jms.authentication.UserManager;
import org.exolab.jms.config.Configuration;
import org.exolab.jms.net.connector.Authenticator;
import org.exolab.jms.net.connector.CallerListener;
import org.exolab.jms.net.connector.ConnectionFactory;
import org.exolab.jms.net.connector.ConnectionManager;
import org.exolab.jms.net.connector.ConnectionPool;
import org.exolab.jms.net.connector.ConnectionRequestInfo;
import org.exolab.jms.net.connector.ContextInvocationHandler;
import org.exolab.jms.net.connector.InvocationHandler;
import org.exolab.jms.net.connector.ManagedConnection;
import org.exolab.jms.net.connector.ManagedConnectionFactory;
import org.exolab.jms.net.connector.MulticastCallerListener;
import org.exolab.jms.net.connector.ResourceException;
import org.exolab.jms.net.connector.URIRequestInfo;
import org.exolab.jms.net.orb.DefaultConnectionManager;
import org.exolab.jms.net.rmi.RMIManagedConnectionFactory;
import org.exolab.jms.net.uri.URI;
import org.exolab.jms.net.vm.VMManagedConnectionFactory;
import org.exolab.jms.persistence.DatabaseService;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class AbstractConnectionManagerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ContextInvocationHandler contextInvocationHandler0 = new ContextInvocationHandler((InvocationHandler) null, (ConnectionFactory) null, (ManagedConnection) null);
      Configuration configuration0 = new Configuration();
      DatabaseService databaseService0 = new DatabaseService(configuration0);
      UserManager userManager0 = new UserManager(configuration0, databaseService0);
      AuthenticationMgr authenticationMgr0 = new AuthenticationMgr(userManager0);
      HashMap<ConnectionPool, ConnectionFactory> hashMap0 = new HashMap<ConnectionPool, ConnectionFactory>();
      DefaultConnectionManager defaultConnectionManager0 = new DefaultConnectionManager((InvocationHandler) contextInvocationHandler0, (Authenticator) authenticationMgr0, (Map) hashMap0);
      defaultConnectionManager0.close();
  }

  @Test
  public void test1()  throws Throwable  {
      RMIManagedConnectionFactory rMIManagedConnectionFactory0 = new RMIManagedConnectionFactory();
      ConnectionFactory connectionFactory0 = rMIManagedConnectionFactory0.createConnectionFactory((ConnectionManager) null);
      Configuration configuration0 = new Configuration();
      DatabaseService databaseService0 = new DatabaseService(configuration0);
      UserManager userManager0 = new UserManager(configuration0, databaseService0);
      AuthenticationMgr authenticationMgr0 = new AuthenticationMgr(userManager0);
      ContextInvocationHandler contextInvocationHandler0 = new ContextInvocationHandler((InvocationHandler) null, connectionFactory0, (ManagedConnection) null);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DefaultConnectionManager defaultConnectionManager0 = new DefaultConnectionManager((InvocationHandler) contextInvocationHandler0, (Authenticator) authenticationMgr0, (Map) hashMap0);
      URI uRI0 = new URI();
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("Service:[name=AuthenticationMgrstarted=false]");
      try {
        defaultConnectionManager0.getConnection((Principal) jMXPrincipal0, uRI0);
        fail("Expecting exception: ResourceException");
      } catch(ResourceException e) {
        /*
         * No connector for URI=
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      VMManagedConnectionFactory vMManagedConnectionFactory0 = new VMManagedConnectionFactory();
      ConnectionFactory connectionFactory0 = vMManagedConnectionFactory0.createConnectionFactory((ConnectionManager) null);
      URI uRI0 = new URI();
      ContextInvocationHandler contextInvocationHandler0 = new ContextInvocationHandler((InvocationHandler) null, connectionFactory0, (ManagedConnection) null);
      Configuration configuration0 = new Configuration();
      DatabaseService databaseService0 = new DatabaseService(configuration0);
      UserManager userManager0 = new UserManager(configuration0, databaseService0);
      AuthenticationMgr authenticationMgr0 = new AuthenticationMgr(userManager0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      DefaultConnectionManager defaultConnectionManager0 = new DefaultConnectionManager((InvocationHandler) contextInvocationHandler0, (Authenticator) authenticationMgr0, (Map) hashMap0);
      try {
        defaultConnectionManager0.accept(uRI0);
        fail("Expecting exception: ResourceException");
      } catch(ResourceException e) {
        /*
         * No connector for URI=
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      RMIManagedConnectionFactory rMIManagedConnectionFactory0 = new RMIManagedConnectionFactory();
      ConnectionFactory connectionFactory0 = rMIManagedConnectionFactory0.createConnectionFactory((ConnectionManager) null);
      Configuration configuration0 = new Configuration();
      DatabaseService databaseService0 = new DatabaseService(configuration0);
      UserManager userManager0 = new UserManager(configuration0, databaseService0);
      AuthenticationMgr authenticationMgr0 = new AuthenticationMgr(userManager0);
      ContextInvocationHandler contextInvocationHandler0 = new ContextInvocationHandler((InvocationHandler) null, connectionFactory0, (ManagedConnection) null);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DefaultConnectionManager defaultConnectionManager0 = new DefaultConnectionManager((InvocationHandler) contextInvocationHandler0, (Authenticator) authenticationMgr0, (Map) hashMap0);
      assertNotNull(defaultConnectionManager0);
      
      Collection<Object> collection0 = defaultConnectionManager0.getManagedConnectionFactories();
      assertNotNull(collection0);
      assertEquals(false, collection0.isEmpty());
  }

  @Test
  public void test4()  throws Throwable  {
      DefaultConnectionManager defaultConnectionManager0 = null;
      try {
        defaultConnectionManager0 = new DefaultConnectionManager((InvocationHandler) null, (Authenticator) null, (Map) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Argument 'handler' is null
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      ContextInvocationHandler contextInvocationHandler0 = new ContextInvocationHandler((InvocationHandler) null, (ConnectionFactory) null, (ManagedConnection) null);
      HashMap<ConnectionPool, ConnectionFactory> hashMap0 = new HashMap<ConnectionPool, ConnectionFactory>();
      DefaultConnectionManager defaultConnectionManager0 = null;
      try {
        defaultConnectionManager0 = new DefaultConnectionManager((InvocationHandler) contextInvocationHandler0, (Authenticator) null, (Map) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Argument 'authenticator' is null
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      RMIManagedConnectionFactory rMIManagedConnectionFactory0 = new RMIManagedConnectionFactory();
      ConnectionFactory connectionFactory0 = rMIManagedConnectionFactory0.createConnectionFactory((ConnectionManager) null);
      Configuration configuration0 = new Configuration();
      DatabaseService databaseService0 = new DatabaseService(configuration0);
      UserManager userManager0 = new UserManager(configuration0, databaseService0);
      AuthenticationMgr authenticationMgr0 = new AuthenticationMgr(userManager0);
      ContextInvocationHandler contextInvocationHandler0 = new ContextInvocationHandler((InvocationHandler) null, connectionFactory0, (ManagedConnection) null);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DefaultConnectionManager defaultConnectionManager0 = new DefaultConnectionManager((InvocationHandler) contextInvocationHandler0, (Authenticator) authenticationMgr0, (Map) hashMap0);
      assertNotNull(defaultConnectionManager0);
      
      URI uRI0 = new URI();
      boolean boolean0 = defaultConnectionManager0.canConnect(uRI0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      RMIManagedConnectionFactory rMIManagedConnectionFactory0 = new RMIManagedConnectionFactory();
      ConnectionFactory connectionFactory0 = rMIManagedConnectionFactory0.createConnectionFactory((ConnectionManager) null);
      Configuration configuration0 = new Configuration();
      DatabaseService databaseService0 = new DatabaseService(configuration0);
      UserManager userManager0 = new UserManager(configuration0, databaseService0);
      AuthenticationMgr authenticationMgr0 = new AuthenticationMgr(userManager0);
      ContextInvocationHandler contextInvocationHandler0 = new ContextInvocationHandler((InvocationHandler) null, connectionFactory0, (ManagedConnection) null);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DefaultConnectionManager defaultConnectionManager0 = new DefaultConnectionManager((InvocationHandler) contextInvocationHandler0, (Authenticator) authenticationMgr0, (Map) hashMap0);
      assertNotNull(defaultConnectionManager0);
      
      URI uRI0 = new URI();
      boolean boolean0 = defaultConnectionManager0.canAccept(uRI0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      RMIManagedConnectionFactory rMIManagedConnectionFactory0 = new RMIManagedConnectionFactory();
      ConnectionFactory connectionFactory0 = rMIManagedConnectionFactory0.createConnectionFactory((ConnectionManager) null);
      Configuration configuration0 = new Configuration();
      DatabaseService databaseService0 = new DatabaseService(configuration0);
      UserManager userManager0 = new UserManager(configuration0, databaseService0);
      AuthenticationMgr authenticationMgr0 = new AuthenticationMgr(userManager0);
      ContextInvocationHandler contextInvocationHandler0 = new ContextInvocationHandler((InvocationHandler) null, connectionFactory0, (ManagedConnection) null);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DefaultConnectionManager defaultConnectionManager0 = new DefaultConnectionManager((InvocationHandler) contextInvocationHandler0, (Authenticator) authenticationMgr0, (Map) hashMap0);
      MulticastCallerListener multicastCallerListener0 = new MulticastCallerListener();
      defaultConnectionManager0.setCallerListener((CallerListener) multicastCallerListener0);
  }

  @Test
  public void test9()  throws Throwable  {
      ContextInvocationHandler contextInvocationHandler0 = new ContextInvocationHandler((InvocationHandler) null, (ConnectionFactory) null, (ManagedConnection) null);
      Configuration configuration0 = new Configuration();
      DatabaseService databaseService0 = new DatabaseService(configuration0);
      UserManager userManager0 = new UserManager(configuration0, databaseService0);
      AuthenticationMgr authenticationMgr0 = new AuthenticationMgr(userManager0);
      HashMap<ConnectionPool, ConnectionFactory> hashMap0 = new HashMap<ConnectionPool, ConnectionFactory>();
      DefaultConnectionManager defaultConnectionManager0 = new DefaultConnectionManager((InvocationHandler) contextInvocationHandler0, (Authenticator) authenticationMgr0, (Map) hashMap0);
      URI uRI0 = new URI();
      URIRequestInfo uRIRequestInfo0 = new URIRequestInfo(uRI0);
      try {
        defaultConnectionManager0.accept((ManagedConnectionFactory) null, (ConnectionRequestInfo) uRIRequestInfo0);
        fail("Expecting exception: ResourceException");
      } catch(ResourceException e) {
        /*
         * Connection pool not found
         */
      }
  }
}
