/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.net.orb;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.rmi.NoSuchObjectException;
import java.rmi.server.ObjID;
import org.exolab.jms.net.orb.ObjectRef;
import org.exolab.jms.net.uri.URI;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ObjectRefEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ObjID objID0 = new ObjID(65535);
      Object object0 = new Object();
      Class<?> class0 = ObjectRef.class;
      ObjectRef objectRef0 = new ObjectRef(objID0, object0, (Class) class0);
      int int0 = objectRef0.hashCode();
      assertEquals(65535, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      ObjID objID0 = new ObjID(1620);
      Class<?> class0 = ObjectRef.class;
      ObjectRef objectRef0 = new ObjectRef(objID0, (Object) "", (Class) class0);
      ObjID objID1 = objectRef0.getObjID();
      assertSame(objID0, objID1);
  }

  @Test
  public void test2()  throws Throwable  {
      Class<?> class0 = Class.class;
      ObjectRef objectRef0 = new ObjectRef((ObjID) null, (Object) null, (Class) class0);
      Class<Object> class1 = objectRef0.getProxyClass();
      assertEquals(false, class1.isLocalClass());
  }

  @Test
  public void test3()  throws Throwable  {
      ObjID objID0 = new ObjID(1620);
      Class<?> class0 = ObjectRef.class;
      ObjectRef objectRef0 = new ObjectRef(objID0, (Object) "", (Class) class0);
      URI[] uRIArray0 = objectRef0.getURIs();
      assertNotNull(uRIArray0);
  }

  @Test
  public void test4()  throws Throwable  {
      ObjID objID0 = new ObjID(65535);
      Object object0 = new Object();
      Class<?> class0 = ObjectRef.class;
      ObjectRef objectRef0 = new ObjectRef(objID0, object0, (Class) class0);
      Object object1 = objectRef0.getObject();
      assertSame(object0, object1);
  }

  @Test
  public void test5()  throws Throwable  {
      Class<?> class0 = Class.class;
      ObjectRef objectRef0 = new ObjectRef((ObjID) null, (Object) null, (Class) class0);
      try {
        objectRef0.getProxy((URI) null);
        fail("Expecting exception: NoSuchObjectException");
      } catch(NoSuchObjectException e) {
        /*
         * Object not exported on URI=null
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      ObjID objID0 = new ObjID(65535);
      Object object0 = new Object();
      Class<?> class0 = ObjectRef.class;
      ObjectRef objectRef0 = new ObjectRef(objID0, object0, (Class) class0);
      boolean boolean0 = objectRef0.equals(object0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      ObjID objID0 = new ObjID(1620);
      Class<?> class0 = ObjectRef.class;
      ObjectRef objectRef0 = new ObjectRef(objID0, (Object) "", (Class) class0);
      boolean boolean0 = objectRef0.equals((Object) objectRef0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      ObjID objID0 = new ObjID(1620);
      Class<?> class0 = ObjectRef.class;
      ObjectRef objectRef0 = new ObjectRef(objID0, (Object) "", (Class) class0);
      ObjectRef objectRef1 = new ObjectRef(objID0, (Object) objectRef0, (Class) class0);
      boolean boolean0 = objectRef0.equals((Object) objectRef1);
      assertEquals(true, boolean0);
  }
}
