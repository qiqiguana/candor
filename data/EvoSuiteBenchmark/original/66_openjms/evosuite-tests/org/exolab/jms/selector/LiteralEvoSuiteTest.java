/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.selector;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.exolab.jms.selector.Literal;
import org.exolab.jms.selector.SelectorException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class LiteralEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Literal literal0 = Literal.stringLiteral("F,z^c");
      String string0 = literal0.toString();
      assertNotNull(string0);
      assertEquals("'F,z^c'", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      try {
        Literal.approxNumericLiteral("true");
        fail("Expecting exception: SelectorException");
      } catch(SelectorException e) {
        /*
         * invalid float: true
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      Literal literal0 = Literal.booleanLiteral(true);
      String string0 = literal0.toString();
      assertEquals("true", string0);
      assertNotNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      try {
        Literal.exactNumericLiteral("'F,z^c'");
        fail("Expecting exception: SelectorException");
      } catch(SelectorException e) {
        /*
         * invalid integer: 'F,z^c'
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      Literal literal0 = Literal.booleanLiteral(false);
      assertEquals("false", literal0.toString());
  }
}
