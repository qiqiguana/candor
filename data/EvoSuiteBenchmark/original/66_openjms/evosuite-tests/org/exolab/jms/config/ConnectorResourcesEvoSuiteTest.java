/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.config;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.Reader;
import java.io.Writer;
import java.util.Enumeration;
import org.exolab.castor.util.NestedIOException;
import org.exolab.castor.xml.MarshalException;
import org.exolab.castor.xml.ValidationException;
import org.exolab.jms.config.ConnectorResource;
import org.exolab.jms.config.ConnectorResources;
import org.junit.BeforeClass;
import org.xml.sax.ContentHandler;
import org.xml.sax.helpers.XMLFilterImpl;

@RunWith(EvoSuiteRunner.class)
public class ConnectorResourcesEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ConnectorResources connectorResources0 = new ConnectorResources();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter((Writer) charArrayWriter0);
      try {
        connectorResources0.marshal((Writer) bufferedWriter0);
        fail("Expecting exception: ValidationException");
      } catch(ValidationException e) {
        /*
         * A minimum of 1 connectorResource object(s) are required.
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      ConnectorResources connectorResources0 = new ConnectorResources();
      ConnectorResource connectorResource0 = new ConnectorResource();
      try {
        connectorResources0.addConnectorResource(1480, connectorResource0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 1480, Size: 0
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      ConnectorResources connectorResources0 = new ConnectorResources();
      ConnectorResource connectorResource0 = new ConnectorResource();
      connectorResources0.addConnectorResource(connectorResource0);
      ConnectorResource[] connectorResourceArray0 = connectorResources0.getConnectorResource();
      connectorResources0.setConnectorResource(connectorResourceArray0);
      assertEquals(1, connectorResources0.getConnectorResourceCount());
  }

  @Test
  public void test3()  throws Throwable  {
      ConnectorResources connectorResources0 = new ConnectorResources();
      boolean boolean0 = connectorResources0.isValid();
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      ConnectorResources connectorResources0 = new ConnectorResources();
      Enumeration<Object> enumeration0 = connectorResources0.enumerateConnectorResource();
      assertEquals(false, enumeration0.hasMoreElements());
  }

  @Test
  public void test5()  throws Throwable  {
      ConnectorResources connectorResources0 = new ConnectorResources();
      ConnectorResource connectorResource0 = new ConnectorResource();
      boolean boolean0 = connectorResources0.removeConnectorResource(connectorResource0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      ConnectorResources connectorResources0 = new ConnectorResources();
      connectorResources0.clearConnectorResource();
      assertEquals(0, connectorResources0.getConnectorResourceCount());
  }

  @Test
  public void test7()  throws Throwable  {
      ConnectorResources connectorResources0 = new ConnectorResources();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      try {
        connectorResources0.marshal((ContentHandler) xMLFilterImpl0);
        fail("Expecting exception: NestedIOException");
      } catch(NestedIOException e) {
        /*
         * System property org.xml.sax.parser not specified
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      ConnectorResources connectorResources0 = new ConnectorResources();
      int int0 = connectorResources0.getConnectorResourceCount();
      assertEquals(0, int0);
  }

  @Test
  public void test9()  throws Throwable  {
      ConnectorResources connectorResources0 = new ConnectorResources();
      try {
        connectorResources0.getConnectorResource((-1817));
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      ConnectorResources connectorResources0 = new ConnectorResources();
      try {
        connectorResources0.getConnectorResource(794);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      ConnectorResources connectorResources0 = new ConnectorResources();
      try {
        connectorResources0.getConnectorResource(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 0, Size: 0
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      ConnectorResources connectorResources0 = new ConnectorResources();
      try {
        connectorResources0.setConnectorResource((-554), (ConnectorResource) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      ConnectorResources connectorResources0 = new ConnectorResources();
      ConnectorResource connectorResource0 = new ConnectorResource();
      try {
        connectorResources0.setConnectorResource(0, connectorResource0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 0, Size: 0
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      ConnectorResources connectorResources0 = new ConnectorResources();
      ConnectorResource connectorResource0 = new ConnectorResource();
      try {
        connectorResources0.setConnectorResource(10, connectorResource0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test15()  throws Throwable  {
      ConnectorResources connectorResources0 = new ConnectorResources();
      ConnectorResource[] connectorResourceArray0 = connectorResources0.getConnectorResource();
      connectorResources0.setConnectorResource(connectorResourceArray0);
      assertEquals(0, connectorResources0.getConnectorResourceCount());
  }

  @Test
  public void test16()  throws Throwable  {
      try {
        ConnectorResources.unmarshal((Reader) null);
        fail("Expecting exception: MarshalException");
      } catch(MarshalException e) {
        /*
         * 
         */
      }
  }
}
