/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.common.security;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.exolab.jms.common.security.BasicPrincipal;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BasicPrincipalEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BasicPrincipal basicPrincipal0 = new BasicPrincipal("", "");
      String string0 = basicPrincipal0.toString();
      assertNotNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      BasicPrincipal basicPrincipal0 = null;
      try {
        basicPrincipal0 = new BasicPrincipal((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Argument 'name' is null
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      BasicPrincipal basicPrincipal0 = null;
      try {
        basicPrincipal0 = new BasicPrincipal("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Argument 'password' is null
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      BasicPrincipal basicPrincipal0 = new BasicPrincipal("5:MV'~+e&N/WI", "5:MV'~+e&N/WI");
      assertNotNull(basicPrincipal0);
      
      boolean boolean0 = basicPrincipal0.equals((Object) "5:MV'~+e&N/WI");
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      BasicPrincipal basicPrincipal0 = new BasicPrincipal("5:MV'~+e&N/WI", "5:MV'~+e&N/WI");
      assertNotNull(basicPrincipal0);
      
      boolean boolean0 = basicPrincipal0.equals((Object) basicPrincipal0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      BasicPrincipal basicPrincipal0 = new BasicPrincipal("5:MV'~+e&N/WI", "5:MV'~+e&N/WI");
      assertNotNull(basicPrincipal0);
      
      BasicPrincipal basicPrincipal1 = new BasicPrincipal("5:MV'~+e&N/WI", "5:MV'~+e&N/WI");
      boolean boolean0 = basicPrincipal0.equals((Object) basicPrincipal1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      BasicPrincipal basicPrincipal0 = new BasicPrincipal("p#:H%)2RH~'Wss>", "p#:H%)2RH~'Wss>");
      assertNotNull(basicPrincipal0);
      
      BasicPrincipal basicPrincipal1 = new BasicPrincipal("LsV=((vP|\"7cs.J@Hc", "LsV=((vP|\"7cs.J@Hc");
      boolean boolean0 = basicPrincipal1.equals((Object) basicPrincipal0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      BasicPrincipal basicPrincipal0 = new BasicPrincipal("", "");
      assertNotNull(basicPrincipal0);
      
      BasicPrincipal basicPrincipal1 = new BasicPrincipal("", "Kr");
      boolean boolean0 = basicPrincipal0.equals((Object) basicPrincipal1);
      assertEquals("", basicPrincipal1.getName());
      assertEquals(false, boolean0);
  }
}
