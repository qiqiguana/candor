/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.tools.db;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.Reader;
import java.io.Writer;
import java.util.Enumeration;
import org.exolab.castor.util.NestedIOException;
import org.exolab.castor.xml.MarshalException;
import org.exolab.castor.xml.ValidationException;
import org.exolab.jms.tools.db.Column;
import org.exolab.jms.tools.db.Index;
import org.junit.BeforeClass;
import org.xml.sax.ContentHandler;
import org.xml.sax.helpers.DefaultHandler;

@RunWith(EvoSuiteRunner.class)
public class IndexEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Index index0 = new Index();
      boolean boolean0 = index0.getUnique();
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      Index index0 = new Index();
      DefaultHandler defaultHandler0 = new DefaultHandler();
      try {
        index0.marshal((ContentHandler) defaultHandler0);
        fail("Expecting exception: NestedIOException");
      } catch(NestedIOException e) {
        /*
         * System property org.xml.sax.parser not specified
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      Index index0 = new Index();
      try {
        index0.addColumn((-1368), (Column) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: -1368, Size: 0
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      Index index0 = new Index();
      int int0 = index0.getColumnCount();
      assertEquals(0, int0);
  }

  @Test
  public void test4()  throws Throwable  {
      Index index0 = new Index();
      boolean boolean0 = index0.hasUnique();
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      try {
        Index.unmarshal((Reader) null);
        fail("Expecting exception: MarshalException");
      } catch(MarshalException e) {
        /*
         * 
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      Index index0 = new Index();
      Enumeration<Object> enumeration0 = index0.enumerateColumn();
      assertEquals(false, enumeration0.hasMoreElements());
  }

  @Test
  public void test7()  throws Throwable  {
      Index index0 = new Index();
      Column column0 = new Column();
      boolean boolean0 = index0.removeColumn(column0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      Index index0 = new Index();
      index0.setName("6HSX}B9MV%\":s");
      assertEquals(false, index0.isValid());
  }

  @Test
  public void test9()  throws Throwable  {
      Index index0 = new Index();
      index0.deleteUnique();
      assertEquals(false, index0.hasUnique());
  }

  @Test
  public void test10()  throws Throwable  {
      Index index0 = new Index();
      index0.clearColumn();
      assertEquals(false, index0.hasUnique());
  }

  @Test
  public void test11()  throws Throwable  {
      Index index0 = new Index();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter((int) 'P');
      try {
        index0.marshal((Writer) charArrayWriter0);
        fail("Expecting exception: ValidationException");
      } catch(ValidationException e) {
        /*
         * A minimum of 1 column object(s) are required.
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      Index index0 = new Index();
      index0.setUnique(true);
      assertEquals(true, index0.getUnique());
      assertEquals(true, index0.hasUnique());
  }

  @Test
  public void test13()  throws Throwable  {
      Index index0 = new Index();
      Column column0 = new Column();
      index0.addColumn(column0);
      boolean boolean0 = index0.isValid();
      assertEquals(1, index0.getColumnCount());
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      Index index0 = new Index();
      String string0 = index0.getName();
      assertNull(string0);
  }

  @Test
  public void test15()  throws Throwable  {
      Index index0 = new Index();
      try {
        index0.getColumn((-1601));
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test16()  throws Throwable  {
      Index index0 = new Index();
      try {
        index0.getColumn(43);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test17()  throws Throwable  {
      Index index0 = new Index();
      try {
        index0.getColumn(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 0, Size: 0
         */
      }
  }

  @Test
  public void test18()  throws Throwable  {
      Index index0 = new Index();
      Column column0 = new Column();
      try {
        index0.setColumn((-1), column0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test19()  throws Throwable  {
      Index index0 = new Index();
      Column column0 = new Column();
      try {
        index0.setColumn(0, column0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 0, Size: 0
         */
      }
  }

  @Test
  public void test20()  throws Throwable  {
      Index index0 = new Index();
      Column column0 = new Column();
      try {
        index0.setColumn(3, column0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test21()  throws Throwable  {
      Index index0 = new Index();
      Column[] columnArray0 = new Column[10];
      index0.setColumn(columnArray0);
      assertEquals(10, index0.getColumnCount());
  }
}
