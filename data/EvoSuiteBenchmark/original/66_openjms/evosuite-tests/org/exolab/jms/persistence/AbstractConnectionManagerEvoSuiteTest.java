/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.persistence;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.exolab.jms.persistence.DBCPConnectionManager;
import org.exolab.jms.persistence.PersistenceException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class AbstractConnectionManagerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DBCPConnectionManager dBCPConnectionManager0 = new DBCPConnectionManager();
      dBCPConnectionManager0.setPassword("");
      assertEquals(false, dBCPConnectionManager0.getTestBeforeUse());
  }

  @Test
  public void test1()  throws Throwable  {
      DBCPConnectionManager dBCPConnectionManager0 = new DBCPConnectionManager();
      dBCPConnectionManager0.init();
      assertEquals(false, dBCPConnectionManager0.getTestBeforeUse());
      assertEquals(0, dBCPConnectionManager0.getMaxActive());
      assertEquals(0, dBCPConnectionManager0.getMaxIdle());
  }

  @Test
  public void test2()  throws Throwable  {
      DBCPConnectionManager dBCPConnectionManager0 = new DBCPConnectionManager();
      dBCPConnectionManager0.setMaxIdle((-602));
      assertEquals(-602, dBCPConnectionManager0.getMaxIdle());
  }

  @Test
  public void test3()  throws Throwable  {
      DBCPConnectionManager dBCPConnectionManager0 = new DBCPConnectionManager();
      dBCPConnectionManager0.setEvictionInterval(0L);
      assertEquals(false, dBCPConnectionManager0.getTestBeforeUse());
  }

  @Test
  public void test4()  throws Throwable  {
      DBCPConnectionManager dBCPConnectionManager0 = new DBCPConnectionManager();
      dBCPConnectionManager0.setDriver("");
      assertEquals(false, dBCPConnectionManager0.getTestBeforeUse());
  }

  @Test
  public void test5()  throws Throwable  {
      DBCPConnectionManager dBCPConnectionManager0 = new DBCPConnectionManager();
      dBCPConnectionManager0.setMinIdleTime(0L);
      assertEquals(false, dBCPConnectionManager0.getTestBeforeUse());
  }

  @Test
  public void test6()  throws Throwable  {
      DBCPConnectionManager dBCPConnectionManager0 = new DBCPConnectionManager();
      dBCPConnectionManager0.setMaxActive(1);
      assertEquals(1, dBCPConnectionManager0.getMaxActive());
  }

  @Test
  public void test7()  throws Throwable  {
      DBCPConnectionManager dBCPConnectionManager0 = new DBCPConnectionManager();
      dBCPConnectionManager0.setUser("q<xSTi4;Jw.");
      assertEquals(false, dBCPConnectionManager0.getTestBeforeUse());
  }

  @Test
  public void test8()  throws Throwable  {
      DBCPConnectionManager dBCPConnectionManager0 = new DBCPConnectionManager();
      dBCPConnectionManager0.setURL((String) null);
      assertEquals(false, dBCPConnectionManager0.getTestBeforeUse());
  }

  @Test
  public void test9()  throws Throwable  {
      DBCPConnectionManager dBCPConnectionManager0 = new DBCPConnectionManager();
      dBCPConnectionManager0.setTestQuery("U6EU>");
      assertEquals(false, dBCPConnectionManager0.getTestBeforeUse());
  }

  @Test
  public void test10()  throws Throwable  {
      DBCPConnectionManager dBCPConnectionManager0 = new DBCPConnectionManager();
      assertEquals(false, dBCPConnectionManager0.getTestBeforeUse());
      
      dBCPConnectionManager0.setTestBeforeUse(true);
      assertEquals(true, dBCPConnectionManager0.getTestBeforeUse());
  }
}
