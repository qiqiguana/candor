/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.common.threads;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import EDU.oswego.cs.dl.util.concurrent.BoundedLinkedQueue;
import EDU.oswego.cs.dl.util.concurrent.Channel;
import org.exolab.jms.common.threads.DefaultThreadPoolFactory;
import org.exolab.jms.common.threads.ThreadListener;
import org.exolab.jms.common.threads.ThreadPool;
import org.exolab.jms.service.ServiceThreadListener;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DefaultThreadPoolFactoryEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ServiceThreadListener serviceThreadListener0 = new ServiceThreadListener();
      DefaultThreadPoolFactory defaultThreadPoolFactory0 = new DefaultThreadPoolFactory((ThreadListener) serviceThreadListener0);
      ThreadPool threadPool0 = (ThreadPool)defaultThreadPoolFactory0.create("", 1767);
      assertEquals(1767, threadPool0.getMaximumPoolSize());
      assertNotNull(threadPool0);
  }

  @Test
  public void test1()  throws Throwable  {
      ServiceThreadListener serviceThreadListener0 = new ServiceThreadListener();
      DefaultThreadPoolFactory defaultThreadPoolFactory0 = new DefaultThreadPoolFactory((ThreadListener) serviceThreadListener0);
      BoundedLinkedQueue boundedLinkedQueue0 = new BoundedLinkedQueue(1767);
      ThreadPool threadPool0 = (ThreadPool)defaultThreadPoolFactory0.create("", (Channel) boundedLinkedQueue0, 1);
      assertNotNull(threadPool0);
      assertEquals(1, threadPool0.getMaximumPoolSize());
  }
}
