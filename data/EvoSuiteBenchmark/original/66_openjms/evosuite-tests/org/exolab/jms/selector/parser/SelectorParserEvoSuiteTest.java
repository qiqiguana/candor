/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.selector.parser;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import antlr.ANTLRLexer;
import antlr.ANTLRTokdefLexer;
import antlr.LexerSharedInputState;
import antlr.NoViableAltException;
import antlr.ParserSharedInputState;
import antlr.RecognitionException;
import antlr.TokenBuffer;
import antlr.TokenStream;
import antlr.TokenStreamBasicFilter;
import antlr.TokenStreamException;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.LineNumberReader;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.StringReader;
import org.exolab.jms.selector.SelectorException;
import org.exolab.jms.selector.parser.SelectorAST;
import org.exolab.jms.selector.parser.SelectorParser;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SelectorParserEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) (byte) (-15), (int) (byte) (-15));
      ANTLRTokdefLexer aNTLRTokdefLexer0 = new ANTLRTokdefLexer((InputStream) byteArrayInputStream0);
      TokenBuffer tokenBuffer0 = new TokenBuffer((TokenStream) aNTLRTokdefLexer0);
      SelectorParser selectorParser0 = new SelectorParser(tokenBuffer0);
      SelectorAST selectorAST0 = new SelectorAST();
      try {
        selectorParser0.comparisonExpression(selectorAST0);
        fail("Expecting exception: NoViableAltException");
      } catch(NoViableAltException e) {
        /*
         * unexpected token: null
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      ParserSharedInputState parserSharedInputState0 = new ParserSharedInputState();
      SelectorParser selectorParser0 = new SelectorParser(parserSharedInputState0);
      selectorParser0.initialise();
      assertNull(selectorParser0.getFilename());
  }

  @Test
  public void test2()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'j';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader((Reader) charArrayReader0);
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) bufferedReader0);
      ANTLRTokdefLexer aNTLRTokdefLexer0 = new ANTLRTokdefLexer((Reader) lineNumberReader0);
      SelectorParser selectorParser0 = new SelectorParser((TokenStream) aNTLRTokdefLexer0, (int) 'j');
      try {
        selectorParser0.selector();
        fail("Expecting exception: SelectorException");
      } catch(SelectorException e) {
        /*
         * line 1, column 1: unexpected token: j
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)50;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ANTLRTokdefLexer aNTLRTokdefLexer0 = new ANTLRTokdefLexer((InputStream) byteArrayInputStream0);
      SelectorParser selectorParser0 = new SelectorParser((TokenStream) aNTLRTokdefLexer0, (int) (byte)0);
      try {
        selectorParser0.orExpression();
        fail("Expecting exception: NoViableAltException");
      } catch(NoViableAltException e) {
        /*
         * unexpected token: 2
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'x';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      ANTLRLexer aNTLRLexer0 = new ANTLRLexer((Reader) charArrayReader0);
      SelectorParser selectorParser0 = new SelectorParser((TokenStream) aNTLRLexer0, (int) 'x');
      try {
        selectorParser0.notExpression();
        fail("Expecting exception: NoViableAltException");
      } catch(NoViableAltException e) {
        /*
         * unexpected token: x
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      ANTLRLexer aNTLRLexer0 = new ANTLRLexer((Reader) charArrayReader0);
      TokenStreamBasicFilter tokenStreamBasicFilter0 = new TokenStreamBasicFilter((TokenStream) aNTLRLexer0);
      charArrayReader0.read(charArray0);
      SelectorParser selectorParser0 = new SelectorParser((TokenStream) tokenStreamBasicFilter0);
      SelectorAST selectorAST0 = new SelectorAST();
      try {
        selectorParser0.booleanExpression(selectorAST0);
        fail("Expecting exception: NoViableAltException");
      } catch(NoViableAltException e) {
        /*
         * unexpected token: null
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'S';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      ANTLRLexer aNTLRLexer0 = new ANTLRLexer((Reader) charArrayReader0);
      TokenStreamBasicFilter tokenStreamBasicFilter0 = new TokenStreamBasicFilter((TokenStream) aNTLRLexer0);
      SelectorParser selectorParser0 = new SelectorParser((TokenStream) tokenStreamBasicFilter0);
      SelectorAST selectorAST0 = new SelectorAST();
      // Undeclared exception!
      try {
        selectorParser0.booleanExpression(selectorAST0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * antlr.CommonAST cannot be cast to org.exolab.jms.selector.parser.SelectorAST
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      StringReader stringReader0 = new StringReader("S :8");
      PushbackReader pushbackReader0 = new PushbackReader((Reader) stringReader0);
      ANTLRLexer aNTLRLexer0 = new ANTLRLexer((Reader) pushbackReader0);
      TokenBuffer tokenBuffer0 = new TokenBuffer((TokenStream) aNTLRLexer0);
      SelectorParser selectorParser0 = new SelectorParser(tokenBuffer0, (-1796));
      try {
        selectorParser0.expression();
        fail("Expecting exception: NoViableAltException");
      } catch(NoViableAltException e) {
        /*
         * unexpected token: S
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      ANTLRLexer aNTLRLexer0 = new ANTLRLexer((Reader) charArrayReader0);
      charArray0[0] = '3';
      SelectorParser selectorParser0 = new SelectorParser((TokenStream) aNTLRLexer0);
      // Undeclared exception!
      try {
        selectorParser0.expression();
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * antlr.CommonAST cannot be cast to org.exolab.jms.selector.parser.SelectorAST
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)62;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 85);
      LexerSharedInputState lexerSharedInputState0 = new LexerSharedInputState((InputStream) byteArrayInputStream0);
      ANTLRLexer aNTLRLexer0 = new ANTLRLexer(lexerSharedInputState0);
      TokenBuffer tokenBuffer0 = new TokenBuffer((TokenStream) aNTLRLexer0);
      SelectorParser selectorParser0 = new SelectorParser(tokenBuffer0, (-502));
      // Undeclared exception!
      try {
        selectorParser0.unaryExpression();
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * antlr.CommonAST cannot be cast to org.exolab.jms.selector.parser.SelectorAST
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[10];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      ANTLRLexer aNTLRLexer0 = new ANTLRLexer((Reader) charArrayReader0);
      TokenStreamBasicFilter tokenStreamBasicFilter0 = new TokenStreamBasicFilter((TokenStream) aNTLRLexer0);
      charArray0[0] = 'x';
      SelectorParser selectorParser0 = new SelectorParser((TokenStream) tokenStreamBasicFilter0);
      try {
        selectorParser0.expression();
        fail("Expecting exception: NoViableAltException");
      } catch(NoViableAltException e) {
        /*
         * unexpected token: x
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) (byte)17, (int) (byte)17);
      ANTLRLexer aNTLRLexer0 = new ANTLRLexer((InputStream) byteArrayInputStream0);
      SelectorParser selectorParser0 = new SelectorParser((TokenStream) aNTLRLexer0, (int) (byte)17);
      try {
        selectorParser0.unaryExpression();
        fail("Expecting exception: NoViableAltException");
      } catch(NoViableAltException e) {
        /*
         * unexpected token: null
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'h';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      ANTLRLexer aNTLRLexer0 = new ANTLRLexer((Reader) charArrayReader0);
      SelectorParser selectorParser0 = new SelectorParser((TokenStream) aNTLRLexer0);
      try {
        selectorParser0.term();
        fail("Expecting exception: NoViableAltException");
      } catch(NoViableAltException e) {
        /*
         * unexpected token: h
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) (byte)20, (int) (byte)20);
      ANTLRLexer aNTLRLexer0 = new ANTLRLexer((InputStream) byteArrayInputStream0);
      SelectorParser selectorParser0 = new SelectorParser((TokenStream) aNTLRLexer0);
      try {
        selectorParser0.term();
        fail("Expecting exception: NoViableAltException");
      } catch(NoViableAltException e) {
        /*
         * unexpected token: null
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      ANTLRLexer aNTLRLexer0 = new ANTLRLexer((Reader) charArrayReader0);
      SelectorParser selectorParser0 = new SelectorParser((TokenStream) aNTLRLexer0);
      charArray0[0] = 'x';
      try {
        selectorParser0.literal();
        fail("Expecting exception: NoViableAltException");
      } catch(NoViableAltException e) {
        /*
         * unexpected token: x
         */
      }
  }
}
