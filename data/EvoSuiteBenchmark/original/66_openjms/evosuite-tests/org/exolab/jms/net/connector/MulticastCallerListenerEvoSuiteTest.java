/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.net.connector;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.exolab.jms.net.connector.Caller;
import org.exolab.jms.net.connector.CallerImpl;
import org.exolab.jms.net.connector.CallerListener;
import org.exolab.jms.net.connector.MulticastCallerListener;
import org.exolab.jms.net.uri.InvalidURIException;
import org.exolab.jms.net.uri.URI;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MulticastCallerListenerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      MulticastCallerListener multicastCallerListener0 = new MulticastCallerListener();
      multicastCallerListener0.removeCallerListener((CallerListener) multicastCallerListener0);
  }

  @Test
  public void test1()  throws Throwable  {
      MulticastCallerListener multicastCallerListener0 = new MulticastCallerListener();
      multicastCallerListener0.addCallerListener("xXnHc/QX:$@/5", (CallerListener) multicastCallerListener0);
      multicastCallerListener0.addCallerListener("xXnHc/QX:$@/5", (CallerListener) multicastCallerListener0);
  }

  @Test
  public void test2()  throws Throwable  {
      MulticastCallerListener multicastCallerListener0 = new MulticastCallerListener();
      multicastCallerListener0.removeCallerListener("xXnHc/QX:$@/5", (CallerListener) multicastCallerListener0);
  }

  @Test
  public void test3()  throws Throwable  {
      MulticastCallerListener multicastCallerListener0 = new MulticastCallerListener();
      multicastCallerListener0.addCallerListener("xXnHc/QX:$@/5", (CallerListener) multicastCallerListener0);
      multicastCallerListener0.removeCallerListener("xXnHc/QX:$@/5", (CallerListener) multicastCallerListener0);
  }

  @Test
  public void test4()  throws Throwable  {
      MulticastCallerListener multicastCallerListener0 = new MulticastCallerListener();
      URI uRI0 = new URI("xXnHc/QX:$@/5");
      CallerImpl callerImpl0 = new CallerImpl(uRI0, uRI0);
      multicastCallerListener0.disconnected((Caller) callerImpl0);
  }

  @Test
  public void test5()  throws Throwable  {
      MulticastCallerListener multicastCallerListener0 = new MulticastCallerListener();
      URI uRI0 = new URI("xXnHc/QX:$@/5");
      multicastCallerListener0.addCallerListener("xXnHc/QX:$@/5", (CallerListener) multicastCallerListener0);
      CallerImpl callerImpl0 = new CallerImpl(uRI0, uRI0);
      // Undeclared exception!
      try {
        multicastCallerListener0.disconnected((Caller) callerImpl0);
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      MulticastCallerListener multicastCallerListener0 = new MulticastCallerListener();
      URI uRI0 = new URI();
      multicastCallerListener0.addCallerListener((CallerListener) multicastCallerListener0);
      CallerImpl callerImpl0 = new CallerImpl(uRI0, uRI0);
      // Undeclared exception!
      try {
        multicastCallerListener0.disconnected((Caller) callerImpl0);
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }
}
