/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.selector.parser;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import antlr.ASTNULLType;
import antlr.collections.AST;
import org.exolab.jms.selector.Type;
import org.exolab.jms.selector.TypeMismatchException;
import org.exolab.jms.selector.parser.SelectorAST;
import org.exolab.jms.selector.parser.TypeChecker;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TypeCheckerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SelectorAST selectorAST0 = new SelectorAST();
      Type type0 = Type.NUMERIC;
      TypeChecker.check("a?j8@E(gBJCCn]", selectorAST0, selectorAST0, type0);
      assertEquals(" null", selectorAST0.toStringTree());
  }

  @Test
  public void test1()  throws Throwable  {
      Type type0 = Type.STRING;
      SelectorAST selectorAST0 = new SelectorAST();
      selectorAST0.setReturnType(type0);
      TypeChecker.check(selectorAST0, type0);
      assertEquals(0, selectorAST0.getType());
  }

  @Test
  public void test2()  throws Throwable  {
      SelectorAST selectorAST0 = new SelectorAST();
      TypeChecker.check(selectorAST0, (Type) null);
      assertEquals(" null", selectorAST0.toStringTree());
  }

  @Test
  public void test3()  throws Throwable  {
      SelectorAST selectorAST0 = new SelectorAST();
      Type type0 = Type.NUMERIC;
      selectorAST0.setReturnType(type0);
      // Undeclared exception!
      try {
        TypeChecker.check(selectorAST0, (Type) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      SelectorAST selectorAST0 = new SelectorAST();
      Type type0 = Type.NUMERIC;
      selectorAST0.setReturnType(type0);
      TypeChecker.check("a?j8@E(gBJCCn]", selectorAST0, selectorAST0, type0);
      assertEquals(" null", selectorAST0.toStringTree());
  }

  @Test
  public void test5()  throws Throwable  {
      SelectorAST selectorAST0 = new SelectorAST();
      Type type0 = Type.STRING;
      selectorAST0.setReturnType(type0);
      // Undeclared exception!
      try {
        TypeChecker.check(";;", selectorAST0, selectorAST0, (Type) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      SelectorAST selectorAST0 = new SelectorAST();
      TypeChecker.checkComparison("a?j8@E(gBJCCn]", selectorAST0, selectorAST0);
      assertEquals(" null", selectorAST0.toStringList());
  }

  @Test
  public void test7()  throws Throwable  {
      SelectorAST selectorAST0 = new SelectorAST();
      Type type0 = Type.NUMERIC;
      selectorAST0.setReturnType(type0);
      TypeChecker.checkComparison("a?j8@E(gBJCCn]", selectorAST0, selectorAST0);
      assertNull(selectorAST0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      SelectorAST selectorAST0 = new SelectorAST();
      SelectorAST selectorAST1 = new SelectorAST();
      Type type0 = Type.NUMERIC;
      selectorAST1.setReturnType(type0);
      TypeChecker.checkComparison("a?j8@E(gBJCCn]", selectorAST1, selectorAST0);
      assertEquals(" null", selectorAST0.toStringTree());
  }

  @Test
  public void test9()  throws Throwable  {
      SelectorAST selectorAST0 = new SelectorAST();
      Type type0 = Type.STRING;
      selectorAST0.setReturnType(type0);
      TypeChecker.checkComparison(";;", selectorAST0, selectorAST0);
      assertNull(selectorAST0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      SelectorAST selectorAST0 = new SelectorAST();
      Type type0 = Type.BOOLEAN;
      selectorAST0.setReturnType(type0);
      TypeChecker.checkComparison("'k,v=Qa. 6^wHM?sh", selectorAST0, selectorAST0);
      assertEquals(0, selectorAST0.getNumberOfChildren());
  }

  @Test
  public void test11()  throws Throwable  {
      SelectorAST selectorAST0 = new SelectorAST();
      selectorAST0.setType(20);
      TypeChecker.checkStringComparison("'", selectorAST0, selectorAST0);
      assertEquals(" null", selectorAST0.toStringTree());
  }

  @Test
  public void test12()  throws Throwable  {
      SelectorAST selectorAST0 = new SelectorAST();
      selectorAST0.setType(26);
      TypeChecker.checkStringComparison("h6I8f*?`p#", selectorAST0, selectorAST0);
      assertEquals(26, selectorAST0.getType());
  }

  @Test
  public void test13()  throws Throwable  {
      SelectorAST selectorAST0 = new SelectorAST();
      ASTNULLType aSTNULLType0 = new ASTNULLType();
      selectorAST0.initialize((AST) aSTNULLType0);
      TypeChecker.checkIdentifierComparison(selectorAST0, selectorAST0);
      assertEquals(" <ASTNULL>", selectorAST0.toStringTree());
  }

  @Test
  public void test14()  throws Throwable  {
      SelectorAST selectorAST0 = new SelectorAST();
      selectorAST0.setText("JMSDeliveryMode");
      // Undeclared exception!
      try {
        TypeChecker.checkIdentifierComparison(selectorAST0, selectorAST0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
