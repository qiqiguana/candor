/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.net.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.exolab.jms.net.connector.ResourceException;
import org.exolab.jms.net.util.Properties;
import org.exolab.jms.net.util.SSLProperties;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SSLPropertiesEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SSLProperties sSLProperties0 = new SSLProperties();
      sSLProperties0.setKeyStore("");
      boolean boolean0 = sSLProperties0.isEmpty();
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      Properties properties0 = new Properties("");
      SSLProperties sSLProperties0 = new SSLProperties(properties0);
      boolean boolean0 = sSLProperties0.isEmpty();
      assertEquals(true, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      Properties properties0 = new Properties("KoI");
      SSLProperties sSLProperties0 = new SSLProperties(properties0);
      assertEquals(true, sSLProperties0.isEmpty());
      
      sSLProperties0.setKeyStorePassword("}bh1|~R<uO%36$");
      boolean boolean0 = sSLProperties0.isEmpty();
      assertEquals(false, sSLProperties0.isEmpty());
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      SSLProperties sSLProperties0 = new SSLProperties();
      assertEquals(true, sSLProperties0.isEmpty());
      
      sSLProperties0.setKeyStoreType("3%2S !'WJN$L=QZ5R");
      boolean boolean0 = sSLProperties0.isEmpty();
      assertEquals(false, sSLProperties0.isEmpty());
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      SSLProperties sSLProperties0 = new SSLProperties();
      assertEquals(true, sSLProperties0.isEmpty());
      
      sSLProperties0.setTrustStore("Portcannot be set when host is nu!");
      boolean boolean0 = sSLProperties0.isEmpty();
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      Properties properties0 = new Properties("");
      SSLProperties sSLProperties0 = new SSLProperties(properties0);
      assertEquals(true, sSLProperties0.isEmpty());
      
      sSLProperties0.setTrustStorePassword("");
      boolean boolean0 = sSLProperties0.isEmpty();
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      Properties properties0 = new Properties("");
      SSLProperties sSLProperties0 = new SSLProperties(properties0);
      assertEquals(true, sSLProperties0.isEmpty());
      
      sSLProperties0.setTrustStoreType("ax");
      boolean boolean0 = sSLProperties0.isEmpty();
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      Properties properties0 = new Properties("");
      SSLProperties sSLProperties0 = new SSLProperties(properties0);
      sSLProperties0.setTrustStoreType("ax");
      SSLProperties sSLProperties1 = new SSLProperties(properties0);
      boolean boolean0 = sSLProperties0.equals((Object) sSLProperties1);
      assertFalse(sSLProperties1.equals(sSLProperties0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      SSLProperties sSLProperties0 = new SSLProperties();
      boolean boolean0 = sSLProperties0.equals((Object) sSLProperties0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      Properties properties0 = new Properties("KoI");
      SSLProperties sSLProperties0 = new SSLProperties(properties0);
      boolean boolean0 = sSLProperties0.equals((Object) "KoI");
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      Properties properties0 = new Properties("ax");
      SSLProperties sSLProperties0 = new SSLProperties(properties0);
      SSLProperties sSLProperties1 = new SSLProperties(properties0);
      assertTrue(sSLProperties1.equals(sSLProperties0));
      
      sSLProperties1.setKeyStore("ax");
      boolean boolean0 = sSLProperties0.equals((Object) sSLProperties1);
      assertFalse(sSLProperties1.equals(sSLProperties0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      SSLProperties sSLProperties0 = new SSLProperties();
      SSLProperties sSLProperties1 = new SSLProperties();
      assertTrue(sSLProperties1.equals(sSLProperties0));
      
      sSLProperties0.setKeyStorePassword("seB= #>raO< {Zon@f");
      boolean boolean0 = sSLProperties0.equals((Object) sSLProperties1);
      assertFalse(sSLProperties0.equals(sSLProperties1));
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      SSLProperties sSLProperties0 = new SSLProperties();
      sSLProperties0.setKeyStoreType("3%2S !'WJN$L=QZ5R");
      Properties properties0 = new Properties(".");
      SSLProperties sSLProperties1 = new SSLProperties(properties0);
      boolean boolean0 = sSLProperties0.equals((Object) sSLProperties1);
      assertFalse(sSLProperties1.equals(sSLProperties0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      Properties properties0 = new Properties("ax");
      SSLProperties sSLProperties0 = new SSLProperties(properties0);
      sSLProperties0.setTrustStore("ax");
      SSLProperties sSLProperties1 = new SSLProperties(properties0);
      boolean boolean0 = sSLProperties0.equals((Object) sSLProperties1);
      assertEquals(false, boolean0);
      assertFalse(sSLProperties1.equals(sSLProperties0));
  }

  @Test
  public void test14()  throws Throwable  {
      Properties properties0 = new Properties("");
      SSLProperties sSLProperties0 = new SSLProperties(properties0);
      sSLProperties0.setTrustStorePassword("");
      SSLProperties sSLProperties1 = new SSLProperties(properties0);
      boolean boolean0 = sSLProperties0.equals((Object) sSLProperties1);
      assertFalse(sSLProperties1.equals(sSLProperties0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      Properties properties0 = new Properties(":[_L!o,y*|");
      SSLProperties sSLProperties0 = new SSLProperties(properties0);
      SSLProperties sSLProperties1 = new SSLProperties();
      boolean boolean0 = sSLProperties0.equals((Object) sSLProperties1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      Properties properties0 = new Properties("ax");
      SSLProperties sSLProperties0 = new SSLProperties(properties0);
      sSLProperties0.setKeyStorePassword("ax");
      sSLProperties0.export(properties0);
      SSLProperties sSLProperties1 = new SSLProperties(properties0);
      boolean boolean0 = sSLProperties0.equals((Object) sSLProperties1);
      assertEquals(true, boolean0);
  }
}
