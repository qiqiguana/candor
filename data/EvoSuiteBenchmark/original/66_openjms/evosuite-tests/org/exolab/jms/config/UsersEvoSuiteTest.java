/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.config;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.Writer;
import java.util.Enumeration;
import org.exolab.castor.xml.MarshalException;
import org.exolab.castor.xml.ValidationException;
import org.exolab.jms.config.User;
import org.exolab.jms.config.Users;
import org.junit.BeforeClass;
import org.xml.sax.ContentHandler;

@RunWith(EvoSuiteRunner.class)
public class UsersEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Users users0 = new Users();
      boolean boolean0 = users0.isValid();
      assertEquals(true, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      Users users0 = new Users();
      int int0 = users0.getUserCount();
      assertEquals(0, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      Users users0 = new Users();
      Enumeration<Object> enumeration0 = users0.enumerateUser();
      assertEquals(false, enumeration0.hasMoreElements());
  }

  @Test
  public void test3()  throws Throwable  {
      Users users0 = new Users();
      // Undeclared exception!
      try {
        users0.marshal((ContentHandler) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Argument 'handler' is null.
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      Users users0 = new Users();
      User user0 = new User();
      users0.addUser(user0);
      try {
        users0.setUser(1, user0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 1, Size: 1
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      Users users0 = new Users();
      User user0 = new User();
      boolean boolean0 = users0.removeUser(user0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      Users users0 = new Users();
      users0.clearUser();
      assertEquals(true, users0.isValid());
  }

  @Test
  public void test7()  throws Throwable  {
      Users users0 = new Users();
      User user0 = new User();
      users0.addUser(0, user0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try {
        users0.marshal((Writer) pipedWriter0);
        fail("Expecting exception: ValidationException");
      } catch(ValidationException e) {
        /*
         * name is a required field.
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      Users users0 = new Users();
      PipedWriter pipedWriter0 = new PipedWriter();
      try {
        users0.marshal((Writer) pipedWriter0);
        fail("Expecting exception: MarshalException");
      } catch(MarshalException e) {
        /*
         * Pipe not connected
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      Users users0 = new Users();
      try {
        users0.getUser((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      Users users0 = new Users();
      try {
        users0.getUser(1598);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Users users0 = new Users();
      try {
        users0.getUser(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 0, Size: 0
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      Users users0 = new Users();
      User user0 = new User();
      try {
        users0.setUser((-1647), user0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      Users users0 = new Users();
      User user0 = new User();
      try {
        users0.setUser(207, user0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test14()  throws Throwable  {
      Users users0 = new Users();
      User[] userArray0 = new User[5];
      users0.setUser(userArray0);
      assertEquals(5, users0.getUserCount());
      assertEquals(false, users0.isValid());
  }

  @Test
  public void test15()  throws Throwable  {
      try {
        Users.unmarshal((Reader) null);
        fail("Expecting exception: MarshalException");
      } catch(MarshalException e) {
        /*
         * 
         */
      }
  }
}
