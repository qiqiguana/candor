/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.server;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import org.codehaus.spice.jndikit.RemoteContext;
import org.codehaus.spice.jndikit.rmi.server.RMINamingProviderImpl;
import org.exolab.jms.config.Configuration;
import org.exolab.jms.config.JndiConfiguration;
import org.exolab.jms.config.Property;
import org.exolab.jms.config.ServerConfiguration;
import org.exolab.jms.server.NameService;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class NameServiceEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      NameService nameService0 = null;
      try {
        nameService0 = new NameService((Configuration) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Argument 'config' is null
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      configuration0.setServerConfiguration(serverConfiguration0);
      NameService nameService0 = new NameService(configuration0);
      RemoteContext remoteContext0 = (RemoteContext)nameService0.getInitialContext();
      assertEquals("", remoteContext0.getNameInNamespace());
  }

  @Test
  public void test2()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      configuration0.setServerConfiguration(serverConfiguration0);
      JndiConfiguration jndiConfiguration0 = new JndiConfiguration();
      configuration0.setJndiConfiguration(jndiConfiguration0);
      serverConfiguration0.setEmbeddedJNDI(false);
      NameService nameService0 = new NameService(configuration0);
      InitialContext initialContext0 = (InitialContext)nameService0.getInitialContext();
      assertNotNull(initialContext0);
  }

  @Test
  public void test3()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      configuration0.setServerConfiguration(serverConfiguration0);
      JndiConfiguration jndiConfiguration0 = new JndiConfiguration();
      configuration0.setJndiConfiguration(jndiConfiguration0);
      serverConfiguration0.setEmbeddedJNDI(false);
      jndiConfiguration0.addProperty((Property) null);
      NameService nameService0 = null;
      try {
        nameService0 = new NameService(configuration0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      configuration0.setServerConfiguration(serverConfiguration0);
      JndiConfiguration jndiConfiguration0 = new JndiConfiguration();
      configuration0.setJndiConfiguration(jndiConfiguration0);
      serverConfiguration0.setEmbeddedJNDI(false);
      NameService nameService0 = new NameService(configuration0);
      RMINamingProviderImpl rMINamingProviderImpl0 = (RMINamingProviderImpl)nameService0.getNamingProvider();
      assertNull(rMINamingProviderImpl0);
  }

  @Test
  public void test5()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      configuration0.setServerConfiguration(serverConfiguration0);
      NameService nameService0 = new NameService(configuration0);
      RMINamingProviderImpl rMINamingProviderImpl0 = (RMINamingProviderImpl)nameService0.getNamingProvider();
      assertNotNull(rMINamingProviderImpl0);
  }
}
