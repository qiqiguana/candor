/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.net.tcp;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.exolab.jms.net.connector.ResourceException;
import org.exolab.jms.net.tcp.TCPSRequestInfo;
import org.exolab.jms.net.uri.URI;
import org.exolab.jms.net.util.Properties;
import org.exolab.jms.net.util.SSLProperties;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TCPSRequestInfoEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      URI uRI0 = new URI();
      TCPSRequestInfo tCPSRequestInfo0 = new TCPSRequestInfo(uRI0);
      Properties properties0 = new Properties("Kl7*Kv'*p}5g3f");
      tCPSRequestInfo0.export(properties0);
      assertEquals(false, tCPSRequestInfo0.getNeedClientAuth());
  }

  @Test
  public void test1()  throws Throwable  {
      URI uRI0 = new URI();
      TCPSRequestInfo tCPSRequestInfo0 = new TCPSRequestInfo(uRI0);
      Properties properties0 = new Properties((String) null);
      SSLProperties sSLProperties0 = new SSLProperties(properties0);
      tCPSRequestInfo0.setSSLProperties(sSLProperties0);
      tCPSRequestInfo0.export(properties0);
      assertEquals(false, tCPSRequestInfo0.getNeedClientAuth());
  }

  @Test
  public void test2()  throws Throwable  {
      URI uRI0 = new URI();
      Properties properties0 = new Properties("Argument 'password' is null");
      properties0.set("keyStore", "Argument 'password' is null");
      TCPSRequestInfo tCPSRequestInfo0 = new TCPSRequestInfo(uRI0, properties0);
      assertEquals(false, tCPSRequestInfo0.getNeedClientAuth());
  }

  @Test
  public void test3()  throws Throwable  {
      URI uRI0 = new URI();
      TCPSRequestInfo tCPSRequestInfo0 = new TCPSRequestInfo(uRI0);
      boolean boolean0 = tCPSRequestInfo0.equals((Object) "Kl7*Kv'*p}5g3f");
      assertEquals(false, boolean0);
      assertEquals(false, tCPSRequestInfo0.getNeedClientAuth());
  }

  @Test
  public void test4()  throws Throwable  {
      URI uRI0 = new URI();
      TCPSRequestInfo tCPSRequestInfo0 = new TCPSRequestInfo(uRI0);
      boolean boolean0 = tCPSRequestInfo0.equals((Object) tCPSRequestInfo0);
      assertEquals(false, tCPSRequestInfo0.getNeedClientAuth());
      assertEquals(true, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      URI uRI0 = new URI();
      TCPSRequestInfo tCPSRequestInfo0 = new TCPSRequestInfo(uRI0);
      tCPSRequestInfo0.setAlternativeHost("Argument 'password' is null");
      Properties properties0 = new Properties("Argument 'password' is null");
      TCPSRequestInfo tCPSRequestInfo1 = new TCPSRequestInfo(uRI0, properties0);
      boolean boolean0 = tCPSRequestInfo0.equals((Object) tCPSRequestInfo1);
      assertEquals(false, tCPSRequestInfo1.getNeedClientAuth());
      assertEquals(false, tCPSRequestInfo0.getNeedClientAuth());
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      URI uRI0 = new URI();
      TCPSRequestInfo tCPSRequestInfo0 = new TCPSRequestInfo(uRI0);
      Properties properties0 = new Properties((String) null);
      SSLProperties sSLProperties0 = new SSLProperties(properties0);
      tCPSRequestInfo0.setSSLProperties(sSLProperties0);
      TCPSRequestInfo tCPSRequestInfo1 = new TCPSRequestInfo(uRI0);
      boolean boolean0 = tCPSRequestInfo0.equals((Object) tCPSRequestInfo1);
      assertFalse(tCPSRequestInfo1.equals(tCPSRequestInfo0));
      assertEquals(false, boolean0);
      assertEquals(false, tCPSRequestInfo1.getNeedClientAuth());
  }
}
