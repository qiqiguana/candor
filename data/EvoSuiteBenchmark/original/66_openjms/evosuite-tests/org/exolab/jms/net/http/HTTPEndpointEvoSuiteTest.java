/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.net.http;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.exolab.jms.net.connector.ResourceException;
import org.exolab.jms.net.http.HTTPEndpoint;
import org.exolab.jms.net.http.HTTPRequestInfo;
import org.exolab.jms.net.uri.URI;
import org.exolab.jms.net.util.Properties;
import org.exolab.jms.net.util.SSLProperties;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class HTTPEndpointEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          URI uRI0 = new URI("https", "https", "https", "https", "https");
          HTTPRequestInfo hTTPRequestInfo0 = new HTTPRequestInfo(uRI0);
          SSLProperties sSLProperties0 = new SSLProperties();
          hTTPRequestInfo0.setSSLProperties(sSLProperties0);
          HTTPEndpoint hTTPEndpoint0 = null;
          try {
            hTTPEndpoint0 = new HTTPEndpoint(hTTPRequestInfo0);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.net.SocketPermission httpshttps:443 connect,resolve)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkConnect(SecurityManager.java:1034)
             * sun.net.www.http.HttpClient.openServer(HttpClient.java:528)
             * sun.net.www.protocol.https.HttpsClient.<init>(HttpsClient.java:272)
             * sun.net.www.protocol.https.HttpsClient.New(HttpsClient.java:329)
             * sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.getNewHttpClient(AbstractDelegateHttpsURLConnection.java:172)
             * sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:911)
             * sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:158)
             * sun.net.www.protocol.https.HttpsURLConnectionImpl.connect(HttpsURLConnectionImpl.java:133)
             * org.exolab.jms.net.http.TunnelHelper.connect(TunnelHelper.java:114)
             * org.exolab.jms.net.http.HTTPEndpoint.getConnection(HTTPEndpoint.java:242)
             * org.exolab.jms.net.http.HTTPEndpoint.<init>(HTTPEndpoint.java:168)
             * sun.reflect.GeneratedConstructorAccessor31.newInstance(Unknown Source)
             * sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)
             * java.lang.reflect.Constructor.newInstance(Constructor.java:513)
             * org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          URI uRI0 = new URI("http", "http", "http", "http", "http");
          Properties properties0 = new Properties("http");
          HTTPRequestInfo hTTPRequestInfo0 = new HTTPRequestInfo(uRI0, properties0);
          hTTPRequestInfo0.setProxyHost("http");
          HTTPEndpoint hTTPEndpoint0 = null;
          try {
            hTTPEndpoint0 = new HTTPEndpoint(hTTPRequestInfo0);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.net.SocketPermission httphttp:80 connect,resolve)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkConnect(SecurityManager.java:1034)
             * sun.net.www.http.HttpClient.openServer(HttpClient.java:519)
             * sun.net.www.http.HttpClient.<init>(HttpClient.java:234)
             * sun.net.www.http.HttpClient.New(HttpClient.java:307)
             * sun.net.www.http.HttpClient.New(HttpClient.java:324)
             * sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:970)
             * sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:911)
             * sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:836)
             * org.exolab.jms.net.http.TunnelHelper.connect(TunnelHelper.java:114)
             * org.exolab.jms.net.http.HTTPEndpoint.getConnection(HTTPEndpoint.java:242)
             * org.exolab.jms.net.http.HTTPEndpoint.<init>(HTTPEndpoint.java:168)
             * sun.reflect.GeneratedConstructorAccessor31.newInstance(Unknown Source)
             * sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)
             * java.lang.reflect.Constructor.newInstance(Constructor.java:513)
             * org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          URI uRI0 = new URI("https", "https", "https", "https", "https");
          HTTPRequestInfo hTTPRequestInfo0 = new HTTPRequestInfo(uRI0);
          hTTPRequestInfo0.setProxyHost("https");
          HTTPEndpoint hTTPEndpoint0 = null;
          try {
            hTTPEndpoint0 = new HTTPEndpoint(hTTPRequestInfo0);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.net.SocketPermission httpshttps:443 connect,resolve)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkConnect(SecurityManager.java:1034)
             * sun.net.www.http.HttpClient.openServer(HttpClient.java:519)
             * sun.net.www.protocol.https.HttpsClient.<init>(HttpsClient.java:272)
             * sun.net.www.protocol.https.HttpsClient.New(HttpsClient.java:329)
             * sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.getNewHttpClient(AbstractDelegateHttpsURLConnection.java:172)
             * sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:911)
             * sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:158)
             * sun.net.www.protocol.https.HttpsURLConnectionImpl.connect(HttpsURLConnectionImpl.java:133)
             * org.exolab.jms.net.http.TunnelHelper.connect(TunnelHelper.java:114)
             * org.exolab.jms.net.http.HTTPEndpoint.getConnection(HTTPEndpoint.java:242)
             * org.exolab.jms.net.http.HTTPEndpoint.<init>(HTTPEndpoint.java:168)
             * sun.reflect.GeneratedConstructorAccessor31.newInstance(Unknown Source)
             * sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)
             * java.lang.reflect.Constructor.newInstance(Constructor.java:513)
             * org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
      URI uRI0 = new URI("https", "https", "https", "https", "https");
      HTTPRequestInfo hTTPRequestInfo0 = new HTTPRequestInfo(uRI0);
      hTTPRequestInfo0.setProxyPort((-16));
      hTTPRequestInfo0.setProxyHost("https");
      HTTPEndpoint hTTPEndpoint0 = null;
      try {
        hTTPEndpoint0 = new HTTPEndpoint(hTTPRequestInfo0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * port out of range:-16
         */
      }
  }
}
