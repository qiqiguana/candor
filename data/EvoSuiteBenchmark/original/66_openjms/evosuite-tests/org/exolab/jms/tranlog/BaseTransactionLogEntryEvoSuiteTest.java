/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.tranlog;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import org.evosuite.runtime.System;
import org.exolab.jms.tranlog.DataTransactionLogEntry;
import org.exolab.jms.tranlog.ExternalXid;
import org.exolab.jms.tranlog.StateTransactionLogEntry;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BaseTransactionLogEntryEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DataTransactionLogEntry dataTransactionLogEntry0 = new DataTransactionLogEntry();
      dataTransactionLogEntry0.getExternalXid();
      assertEquals((-1L), dataTransactionLogEntry0.getCreated());
      assertEquals(0L, dataTransactionLogEntry0.getExpiryTime());
  }

  @Test
  public void test1()  throws Throwable  {
      ExternalXid externalXid0 = new ExternalXid();
      StateTransactionLogEntry stateTransactionLogEntry0 = new StateTransactionLogEntry(externalXid0, "", 2L);
      long long0 = stateTransactionLogEntry0.getExpiryTime();
      assertEquals(0L, long0);
      assertEquals(2L, stateTransactionLogEntry0.getCreated());
  }

  @Test
  public void test2()  throws Throwable  {
      StateTransactionLogEntry stateTransactionLogEntry0 = new StateTransactionLogEntry();
      long long0 = stateTransactionLogEntry0.getCreated();
      assertEquals((-1L), long0);
      assertEquals(0L, stateTransactionLogEntry0.getExpiryTime());
  }

  @Test
  public void test3()  throws Throwable  {
      ExternalXid externalXid0 = new ExternalXid();
      StateTransactionLogEntry stateTransactionLogEntry0 = new StateTransactionLogEntry(externalXid0, "N support for StateTransactionLogEnr with versio ");
      stateTransactionLogEntry0.setCreated((-1L));
      boolean boolean0 = stateTransactionLogEntry0.isValid();
      assertEquals((-1L), stateTransactionLogEntry0.getCreated());
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      ExternalXid externalXid0 = new ExternalXid();
      StateTransactionLogEntry stateTransactionLogEntry0 = new StateTransactionLogEntry(externalXid0, "", 2L);
      String string0 = stateTransactionLogEntry0.getResourceId();
      assertNotNull(string0);
      assertEquals(2L, stateTransactionLogEntry0.getCreated());
      assertEquals(0L, stateTransactionLogEntry0.getExpiryTime());
  }

  @Test
  public void test5()  throws Throwable  {
      DataTransactionLogEntry dataTransactionLogEntry0 = new DataTransactionLogEntry();
      assertEquals((-1L), dataTransactionLogEntry0.getCreated());
      
      dataTransactionLogEntry0.setCreated();
      assertEquals(false, dataTransactionLogEntry0.transactionExpired());
  }

  @Test
  public void test6()  throws Throwable  {
      DataTransactionLogEntry dataTransactionLogEntry0 = new DataTransactionLogEntry();
      dataTransactionLogEntry0.setExpiryTime(10L);
      assertEquals(10L, dataTransactionLogEntry0.getExpiryTime());
      assertEquals((-1L), dataTransactionLogEntry0.getCreated());
  }

  @Test
  public void test7()  throws Throwable  {
      StateTransactionLogEntry stateTransactionLogEntry0 = new StateTransactionLogEntry();
      stateTransactionLogEntry0.setResourceId("n~7 zO&6");
      assertEquals((-1L), stateTransactionLogEntry0.getCreated());
      assertEquals(0L, stateTransactionLogEntry0.getExpiryTime());
  }

  @Test
  public void test8()  throws Throwable  {
      DataTransactionLogEntry dataTransactionLogEntry0 = new DataTransactionLogEntry();
      boolean boolean0 = dataTransactionLogEntry0.transactionExpired();
      assertEquals(0L, dataTransactionLogEntry0.getExpiryTime());
      assertEquals((-1L), dataTransactionLogEntry0.getCreated());
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      ExternalXid externalXid0 = new ExternalXid();
      StateTransactionLogEntry stateTransactionLogEntry0 = new StateTransactionLogEntry(externalXid0, "", 2L);
      assertEquals(false, stateTransactionLogEntry0.transactionExpired());
      
      System.setCurrentTimeMillis(2L);
      boolean boolean0 = stateTransactionLogEntry0.transactionExpired();
      assertEquals(true, stateTransactionLogEntry0.transactionExpired());
      assertEquals(true, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      DataTransactionLogEntry dataTransactionLogEntry0 = new DataTransactionLogEntry();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((int) (byte)0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      try {
        dataTransactionLogEntry0.writeExternal((ObjectOutput) objectOutputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * writeExternal : entry has invalid state
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      ExternalXid externalXid0 = new ExternalXid(1203, byteArray0, byteArray0);
      StateTransactionLogEntry stateTransactionLogEntry0 = new StateTransactionLogEntry(externalXid0, "");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((int) (byte)0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      stateTransactionLogEntry0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(143, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005w\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001pw\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002sr\u0000\"org.exolab.jms.tranlog.ExternalXid\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\f\u0000\u0000xpw@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\uFFFD\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000x", byteArrayOutputStream0.toString());
  }

  @Test
  public void test12()  throws Throwable  {
      DataTransactionLogEntry dataTransactionLogEntry0 = new DataTransactionLogEntry();
      byte[] byteArray0 = new byte[22];
      ExternalXid externalXid0 = new ExternalXid(1203, byteArray0, byteArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((int) (byte)0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      dataTransactionLogEntry0.setExternalXid(externalXid0);
      try {
        dataTransactionLogEntry0.writeExternal((ObjectOutput) objectOutputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * writeExternal : entry has invalid state
         */
      }
  }
}
