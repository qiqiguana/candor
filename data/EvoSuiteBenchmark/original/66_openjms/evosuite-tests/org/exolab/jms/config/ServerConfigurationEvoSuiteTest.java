/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.config;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.PipedReader;
import java.io.Reader;
import java.io.Writer;
import org.exolab.castor.util.NestedIOException;
import org.exolab.castor.xml.MarshalException;
import org.exolab.castor.xml.ValidationException;
import org.exolab.jms.config.ServerConfiguration;
import org.junit.BeforeClass;
import org.xml.sax.ContentHandler;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoSuiteRunner.class)
public class ServerConfigurationEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      serverConfiguration0.setEmbeddedJNDI(true);
      assertEquals(true, serverConfiguration0.hasEmbeddedJNDI());
  }

  @Test
  public void test1()  throws Throwable  {
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      serverConfiguration0.deleteEmbeddedJNDI();
      assertEquals(false, serverConfiguration0.hasEmbeddedJNDI());
      assertEquals("localhost", serverConfiguration0.getHost());
      assertEquals(100, serverConfiguration0.getMaxThreads());
      assertEquals(true, serverConfiguration0.getEmbeddedJNDI());
  }

  @Test
  public void test2()  throws Throwable  {
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      boolean boolean0 = serverConfiguration0.getEmbeddedJNDI();
      assertEquals("localhost", serverConfiguration0.getHost());
      assertEquals(true, boolean0);
      assertEquals(100, serverConfiguration0.getMaxThreads());
  }

  @Test
  public void test3()  throws Throwable  {
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter((Writer) charArrayWriter0);
      serverConfiguration0.marshal((Writer) bufferedWriter0);
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ServerConfiguration host=\"localhost\" xmlns=\"http://openjms.exolab.org/configuration\"/>", charArrayWriter0.toString());
      assertEquals(100, serverConfiguration0.getMaxThreads());
  }

  @Test
  public void test4()  throws Throwable  {
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      serverConfiguration0.deleteMaxThreads();
      assertEquals(true, serverConfiguration0.getEmbeddedJNDI());
      assertEquals(100, serverConfiguration0.getMaxThreads());
      assertEquals(false, serverConfiguration0.hasMaxThreads());
      assertEquals("localhost", serverConfiguration0.getHost());
  }

  @Test
  public void test5()  throws Throwable  {
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      serverConfiguration0.setMaxThreads(825);
      boolean boolean0 = serverConfiguration0.isValid();
      assertEquals(825, serverConfiguration0.getMaxThreads());
      assertEquals(true, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      try {
        serverConfiguration0.marshal((ContentHandler) xMLReaderAdapter0);
        fail("Expecting exception: NestedIOException");
      } catch(NestedIOException e) {
        /*
         * System property org.xml.sax.parser not specified
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      BufferedReader bufferedReader0 = new BufferedReader((Reader) pipedReader0);
      try {
        ServerConfiguration.unmarshal((Reader) bufferedReader0);
        fail("Expecting exception: MarshalException");
      } catch(MarshalException e) {
        /*
         * Pipe not connected
         */
      }
  }
}
