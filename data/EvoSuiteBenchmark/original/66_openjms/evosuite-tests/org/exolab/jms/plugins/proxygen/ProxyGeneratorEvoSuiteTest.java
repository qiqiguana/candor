/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.plugins.proxygen;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.Writer;
import java.lang.reflect.Array;
import java.nio.charset.Charset;
import org.exolab.jms.plugins.proxygen.ProxyGenerator;
import org.exolab.jms.plugins.proxygen.SourceWriter;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ProxyGeneratorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Class<?> class0 = Writer.class;
      ProxyGenerator proxyGenerator0 = new ProxyGenerator((Class) class0, (Class[]) null);
      assertNotNull(proxyGenerator0);
      
      String string0 = proxyGenerator0.getAdapterInstanceName(class0);
      assertEquals("WRITER_ffffffffb8376d8f", string0);
      assertNotNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      Class<?> class0 = Short.class;
      ProxyGenerator proxyGenerator0 = new ProxyGenerator((Class) class0, (Class[]) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try {
        proxyGenerator0.generate((OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Pipe not connected
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      Class<?>[] classArray0 = (Class<?>[]) Array.newInstance(Class.class, 10);
      ProxyGenerator proxyGenerator0 = null;
      try {
        proxyGenerator0 = new ProxyGenerator((Class) null, (Class[]) classArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Argument 'clazz' is null
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      Class<?> class0 = ProxyGenerator.class;
      Class<?>[] classArray0 = (Class<?>[]) Array.newInstance(Class.class, 7);
      ProxyGenerator proxyGenerator0 = null;
      try {
        proxyGenerator0 = new ProxyGenerator((Class) class0, (Class[]) classArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Cannot generate proxy for class org.exolab.jms.plugins.proxygen.ProxyGenerator: class doesn't implement any interfaces
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      Class<?> class0 = SourceWriter.class;
      ProxyGenerator proxyGenerator0 = new ProxyGenerator((Class) class0, (Class[]) null);
      assertNotNull(proxyGenerator0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      proxyGenerator0.generate((OutputStream) byteArrayOutputStream0);
      assertEquals(230, byteArrayOutputStream0.size());
      assertEquals("package org.exolab.jms.plugins.proxygen;\npublic class SourceWriter__Proxy\n    extends java.io.Writer__Proxy\n     {\n    public SourceWriter__Proxy(org.exolab.jms.net.proxy.Delegate delegate) {\n        super(delegate);\n    }\n    \n}\n", byteArrayOutputStream0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      Class<?> class0 = Charset.class;
      Class<?>[] classArray0 = (Class<?>[]) Array.newInstance(Class.class, 2);
      ProxyGenerator proxyGenerator0 = null;
      try {
        proxyGenerator0 = new ProxyGenerator((Class) class0, (Class[]) classArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      Class<?> class0 = Writer.class;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ProxyGenerator proxyGenerator0 = new ProxyGenerator((Class) class0, (Class[]) null);
      proxyGenerator0.generate((OutputStream) byteArrayOutputStream0);
      assertEquals(4480, byteArrayOutputStream0.size());
      assertEquals("package java.io;\npublic class Writer__Proxy\n    extends org.exolab.jms.net.proxy.Proxy\n    implements java.lang.Appendable, java.io.Closeable, java.io.Flushable {\n    \n    private static final java.lang.reflect.Method APPEND_3f507f74abe4cf1a;\n    private static final java.lang.reflect.Method APPEND_3f507f74abe4cf1a;\n    private static final java.lang.reflect.Method APPEND_ffd16ca9abe4cf1a;\n    private static final java.lang.reflect.Method CLOSE_ffffffffb4d384da;\n    private static final java.lang.reflect.Method FLUSH_ffffffffae7a9552;\n    \n    \n    public Writer__Proxy(org.exolab.jms.net.proxy.Delegate delegate) {\n        super(delegate);\n    }\n    \n    public java.lang.Appendable append(java.lang.CharSequence arg0)\n        throws java.io.IOException { \n        Object[] args = new Object[] {arg0};\n        Object result;\n        try {\n            result = invoke(APPEND_3f507f74abe4cf1a, args, 0x3f507f74abe4cf1aL);\n        } catch (java.io.IOException exception) {\n            throw exception;\n        } catch (org.exolab.jms.net.proxy.RemoteInvocationException exception) {\n            throw exception;\n        } catch (java.lang.Throwable exception) {\n            throw new org.exolab.jms.net.proxy.RemoteInvocationException(exception);\n        }\n        return (java.lang.Appendable) result;\n    }\n    \n    public java.lang.Appendable append(java.lang.CharSequence arg0, int arg1, int arg2)\n        throws java.io.IOException { \n        Object[] args = new Object[] {arg0, new java.lang.Integer(arg1), new java.lang.Integer(arg2)};\n        Object result;\n        try {\n            result = invoke(APPEND_3f507f74abe4cf1a, args, 0x3f507f74abe4cf1aL);\n        } catch (java.io.IOException exception) {\n            throw exception;\n        } catch (org.exolab.jms.net.proxy.RemoteInvocationException exception) {\n            throw exception;\n        } catch (java.lang.Throwable exception) {\n            throw new org.exolab.jms.net.proxy.RemoteInvocationException(exception);\n        }\n        return (java.lang.Appendable) result;\n    }\n    \n    public java.lang.Appendable append(char arg0)\n        throws java.io.IOException { \n        Object[] args = new Object[] {new java.lang.Character(arg0)};\n        Object result;\n        try {\n            result = invoke(APPEND_ffd16ca9abe4cf1a, args, 0xffd16ca9abe4cf1aL);\n        } catch (java.io.IOException exception) {\n            throw exception;\n        } catch (org.exolab.jms.net.proxy.RemoteInvocationException exception) {\n            throw exception;\n        } catch (java.lang.Throwable exception) {\n            throw new org.exolab.jms.net.proxy.RemoteInvocationException(exception);\n        }\n        return (java.lang.Appendable) result;\n    }\n    \n    public void close()\n        throws java.io.IOException { \n        try {\n            invoke(CLOSE_ffffffffb4d384da, null, 0xffffffffb4d384daL);\n        } catch (java.io.IOException exception) {\n            throw exception;\n        } catch (org.exolab.jms.net.proxy.RemoteInvocationException exception) {\n            throw exception;\n        } catch (java.lang.Throwable exception) {\n            throw new org.exolab.jms.net.proxy.RemoteInvocationException(exception);\n        }\n        \n    }\n    \n    public void flush()\n        throws java.io.IOException { \n        try {\n            invoke(FLUSH_ffffffffae7a9552, null, 0xffffffffae7a9552L);\n        } catch (java.io.IOException exception) {\n            throw exception;\n        } catch (org.exolab.jms.net.proxy.RemoteInvocationException exception) {\n            throw exception;\n        } catch (java.lang.Throwable exception) {\n            throw new org.exolab.jms.net.proxy.RemoteInvocationException(exception);\n        }\n        \n    }\n    \n    static {\n        try {\n            APPEND_3f507f74abe4cf1a = java.lang.Appendable.class.getMethod(\"append\", new Class[] {java.lang.CharSequence.class});\n            APPEND_3f507f74abe4cf1a = java.lang.Appendable.class.getMethod(\"append\", new Class[] {java.lang.CharSequence.class, int.class, int.class});\n            APPEND_ffd16ca9abe4cf1a = java.lang.Appendable.class.getMethod(\"append\", new Class[] {char.class});\n            CLOSE_ffffffffb4d384da = java.io.Closeable.class.getMethod(\"close\", new Class[] {});\n            FLUSH_ffffffffae7a9552 = java.io.Flushable.class.getMethod(\"flush\", new Class[] {});\n        } catch (NoSuchMethodException exception) {\n            throw new NoSuchMethodError(exception.getMessage());\n        }\n    }\n    \n}\n", byteArrayOutputStream0.toString());
  }
}
