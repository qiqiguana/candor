/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.tools.migration.proxy;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.List;
import org.exolab.jms.client.JmsDestination;
import org.exolab.jms.client.JmsQueue;
import org.exolab.jms.client.JmsTemporaryQueue;
import org.exolab.jms.tools.migration.proxy.Consumer;
import org.exolab.jms.tools.migration.proxy.Subscription;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ConsumerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Consumer consumer0 = new Consumer("", "");
      String string0 = consumer0.getName();
      assertNotNull(string0);
      assertEquals(false, consumer0.isQueueConsumer());
  }

  @Test
  public void test1()  throws Throwable  {
      Consumer consumer0 = new Consumer("+KfrI?7qij-n", "JmsTemporaryTopic with version ");
      boolean boolean0 = consumer0.isQueueConsumer();
      assertEquals("+KfrI?7qij-n", consumer0.getName());
      assertEquals("JmsTemporaryTopic with version ", consumer0.getClientID());
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      Consumer consumer0 = new Consumer("+KfrI?7qij-n", "JmsTemporaryTopic with version ");
      List<Object> list0 = consumer0.getSubscriptions();
      assertNotNull(list0);
      assertEquals("+KfrI?7qij-n", consumer0.getName());
      assertEquals("JmsTemporaryTopic with version ", consumer0.getClientID());
      assertEquals(false, consumer0.isQueueConsumer());
  }

  @Test
  public void test3()  throws Throwable  {
      JmsTemporaryQueue jmsTemporaryQueue0 = new JmsTemporaryQueue();
      Consumer consumer0 = new Consumer((JmsQueue) jmsTemporaryQueue0);
      JmsQueue jmsQueue0 = new JmsQueue("vBr/!E|-T@mEr!JDO");
      Subscription subscription0 = new Subscription((JmsDestination) jmsQueue0);
      // Undeclared exception!
      try {
        consumer0.addSubscription(subscription0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Queue consumer subscription mismatch
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      Consumer consumer0 = new Consumer("", "");
      String string0 = consumer0.getClientID();
      assertNotNull(string0);
      assertEquals(false, consumer0.isQueueConsumer());
  }

  @Test
  public void test5()  throws Throwable  {
      Consumer consumer0 = new Consumer("", "");
      JmsTemporaryQueue jmsTemporaryQueue0 = new JmsTemporaryQueue();
      Subscription subscription0 = new Subscription((JmsDestination) jmsTemporaryQueue0);
      consumer0.addSubscription(subscription0);
      assertEquals(false, consumer0.isQueueConsumer());
  }

  @Test
  public void test6()  throws Throwable  {
      JmsQueue jmsQueue0 = new JmsQueue("efo60/#!T~<7M");
      Consumer consumer0 = new Consumer(jmsQueue0);
      Subscription subscription0 = new Subscription((JmsDestination) jmsQueue0);
      consumer0.addSubscription(subscription0);
      // Undeclared exception!
      try {
        consumer0.addSubscription(subscription0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Consumer cannot have multiple subscriptions
         */
      }
  }
}
