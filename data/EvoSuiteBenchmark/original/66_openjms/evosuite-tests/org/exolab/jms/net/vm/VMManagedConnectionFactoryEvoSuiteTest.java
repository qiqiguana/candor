/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.net.vm;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.security.Principal;
import java.util.LinkedList;
import java.util.List;
import javax.management.remote.JMXPrincipal;
import org.evosuite.testcase.TestCaseExecutor;
import org.exolab.jms.authentication.AuthenticationMgr;
import org.exolab.jms.authentication.UserManager;
import org.exolab.jms.config.Configuration;
import org.exolab.jms.net.connector.Authenticator;
import org.exolab.jms.net.connector.ConnectionFactory;
import org.exolab.jms.net.connector.ConnectionManager;
import org.exolab.jms.net.connector.ConnectionRequestInfo;
import org.exolab.jms.net.connector.ManagedConnection;
import org.exolab.jms.net.connector.ManagedConnectionAcceptor;
import org.exolab.jms.net.connector.ResourceException;
import org.exolab.jms.net.connector.URIRequestInfo;
import org.exolab.jms.net.uri.URI;
import org.exolab.jms.net.vm.VMManagedConnectionFactory;
import org.exolab.jms.persistence.DatabaseService;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class VMManagedConnectionFactoryEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      VMManagedConnectionFactory vMManagedConnectionFactory0 = new VMManagedConnectionFactory();
      ConnectionFactory connectionFactory0 = vMManagedConnectionFactory0.createConnectionFactory((ConnectionManager) null);
      assertNotNull(connectionFactory0);
  }

  @Test
  public void test1()  throws Throwable  {
      VMManagedConnectionFactory vMManagedConnectionFactory0 = new VMManagedConnectionFactory();
      URI uRI0 = new URI();
      URIRequestInfo uRIRequestInfo0 = new URIRequestInfo(uRI0);
      vMManagedConnectionFactory0.createManagedConnection((Principal) null, (ConnectionRequestInfo) uRIRequestInfo0);
  }

  @Test
  public void test2()  throws Throwable  {
      VMManagedConnectionFactory vMManagedConnectionFactory0 = new VMManagedConnectionFactory();
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("Path contains invalid character!");
      try {
        vMManagedConnectionFactory0.createManagedConnection((Principal) jMXPrincipal0, (ConnectionRequestInfo) null);
        fail("Expecting exception: ResourceException");
      } catch(ResourceException e) {
        /*
         * Argument 'info' must be of type org.exolab.jms.net.connector.URIRequestInfo
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      VMManagedConnectionFactory vMManagedConnectionFactory0 = new VMManagedConnectionFactory();
      URI uRI0 = new URI("org.exolab.jms.config.HttpConfiguration", "org.exolab.jms.config.HttpConfiguration", "org.exolab.jms.config.HttpConfiguration", "org.exolab.jms.config.HttpConfiguration", "org.exolab.jms.config.HttpConfiguration");
      URIRequestInfo uRIRequestInfo0 = new URIRequestInfo(uRI0);
      Configuration configuration0 = new Configuration();
      DatabaseService databaseService0 = new DatabaseService(configuration0);
      UserManager userManager0 = new UserManager(configuration0, databaseService0);
      AuthenticationMgr authenticationMgr0 = new AuthenticationMgr(userManager0);
      ManagedConnectionAcceptor managedConnectionAcceptor0 = vMManagedConnectionFactory0.createManagedConnectionAcceptor((Authenticator) authenticationMgr0, (ConnectionRequestInfo) uRIRequestInfo0);
      assertNotNull(managedConnectionAcceptor0);
  }

  @Test
  public void test4()  throws Throwable  {
      VMManagedConnectionFactory vMManagedConnectionFactory0 = new VMManagedConnectionFactory();
      try {
        vMManagedConnectionFactory0.createManagedConnectionAcceptor((Authenticator) null, (ConnectionRequestInfo) null);
        fail("Expecting exception: ResourceException");
      } catch(ResourceException e) {
        /*
         * Argument 'info' must be of type org.exolab.jms.net.connector.URIRequestInfo
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      VMManagedConnectionFactory vMManagedConnectionFactory0 = new VMManagedConnectionFactory();
      LinkedList<URIRequestInfo> linkedList0 = new LinkedList<URIRequestInfo>();
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("Path contains invalid character!");
      ManagedConnection managedConnection0 = vMManagedConnectionFactory0.matchManagedConnections((List) linkedList0, (Principal) jMXPrincipal0, (ConnectionRequestInfo) null);
      assertNull(managedConnection0);
  }

  @Test
  public void test6()  throws Throwable  {
      VMManagedConnectionFactory vMManagedConnectionFactory0 = new VMManagedConnectionFactory();
      LinkedList<URIRequestInfo> linkedList0 = new LinkedList<URIRequestInfo>();
      URI uRI0 = new URI();
      URIRequestInfo uRIRequestInfo0 = new URIRequestInfo(uRI0);
      ManagedConnection managedConnection0 = vMManagedConnectionFactory0.matchManagedConnections((List) linkedList0, (Principal) null, (ConnectionRequestInfo) uRIRequestInfo0);
      assertNull(managedConnection0);
  }

  @Test
  public void test7()  throws Throwable  {
      VMManagedConnectionFactory vMManagedConnectionFactory0 = new VMManagedConnectionFactory();
      LinkedList<URIRequestInfo> linkedList0 = new LinkedList<URIRequestInfo>();
      URI uRI0 = new URI();
      URIRequestInfo uRIRequestInfo0 = new URIRequestInfo(uRI0);
      linkedList0.addFirst(uRIRequestInfo0);
      // Undeclared exception!
      try {
        vMManagedConnectionFactory0.matchManagedConnections((List) linkedList0, (Principal) null, (ConnectionRequestInfo) uRIRequestInfo0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * org.exolab.jms.net.connector.URIRequestInfo cannot be cast to org.exolab.jms.net.vm.VMManagedConnection
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      VMManagedConnectionFactory vMManagedConnectionFactory0 = new VMManagedConnectionFactory();
      LinkedList<URIRequestInfo> linkedList0 = new LinkedList<URIRequestInfo>();
      ManagedConnectionAcceptor managedConnectionAcceptor0 = vMManagedConnectionFactory0.matchManagedConnectionAcceptors((List) linkedList0, (ConnectionRequestInfo) null);
      assertNull(managedConnectionAcceptor0);
  }

  @Test
  public void test9()  throws Throwable  {
      VMManagedConnectionFactory vMManagedConnectionFactory0 = new VMManagedConnectionFactory();
      LinkedList<URIRequestInfo> linkedList0 = new LinkedList<URIRequestInfo>();
      URI uRI0 = new URI("org.exolab.jms.config.HttpConfiguration", "org.exolab.jms.config.HttpConfiguration", "org.exolab.jms.config.HttpConfiguration", "org.exolab.jms.config.HttpConfiguration", "org.exolab.jms.config.HttpConfiguration");
      URIRequestInfo uRIRequestInfo0 = new URIRequestInfo(uRI0);
      ManagedConnectionAcceptor managedConnectionAcceptor0 = vMManagedConnectionFactory0.matchManagedConnectionAcceptors((List) linkedList0, (ConnectionRequestInfo) uRIRequestInfo0);
      assertNull(managedConnectionAcceptor0);
  }

  @Test
  public void test10()  throws Throwable  {
      VMManagedConnectionFactory vMManagedConnectionFactory0 = new VMManagedConnectionFactory();
      LinkedList<URIRequestInfo> linkedList0 = new LinkedList<URIRequestInfo>();
      URI uRI0 = new URI("org.exolab.jms.config.HttpConfiguration", "org.exolab.jms.config.HttpConfiguration", "org.exolab.jms.config.HttpConfiguration", "org.exolab.jms.config.HttpConfiguration", "org.exolab.jms.config.HttpConfiguration");
      URIRequestInfo uRIRequestInfo0 = new URIRequestInfo(uRI0);
      linkedList0.add(uRIRequestInfo0);
      // Undeclared exception!
      try {
        vMManagedConnectionFactory0.matchManagedConnectionAcceptors((List) linkedList0, (ConnectionRequestInfo) uRIRequestInfo0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * org.exolab.jms.net.connector.URIRequestInfo cannot be cast to org.exolab.jms.net.vm.VMManagedConnectionAcceptor
         */
      }
  }
}
