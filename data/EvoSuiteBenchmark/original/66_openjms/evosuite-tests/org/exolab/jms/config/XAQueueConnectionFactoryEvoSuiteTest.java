/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.config;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.Writer;
import org.exolab.castor.util.NestedIOException;
import org.exolab.castor.xml.MarshalException;
import org.exolab.castor.xml.ValidationException;
import org.exolab.jms.config.XAQueueConnectionFactory;
import org.junit.BeforeClass;
import org.xml.sax.ContentHandler;
import org.xml.sax.ext.DefaultHandler2;

@RunWith(EvoSuiteRunner.class)
public class XAQueueConnectionFactoryEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      XAQueueConnectionFactory xAQueueConnectionFactory0 = new XAQueueConnectionFactory();
      boolean boolean0 = xAQueueConnectionFactory0.isValid();
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      XAQueueConnectionFactory xAQueueConnectionFactory0 = new XAQueueConnectionFactory();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PrintWriter printWriter0 = new PrintWriter((OutputStream) byteArrayOutputStream0);
      try {
        xAQueueConnectionFactory0.marshal((Writer) printWriter0);
        fail("Expecting exception: ValidationException");
      } catch(ValidationException e) {
        /*
         * name is a required field.
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      XAQueueConnectionFactory xAQueueConnectionFactory0 = new XAQueueConnectionFactory();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      try {
        xAQueueConnectionFactory0.marshal((ContentHandler) defaultHandler2_0);
        fail("Expecting exception: NestedIOException");
      } catch(NestedIOException e) {
        /*
         * System property org.xml.sax.parser not specified
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      try {
        XAQueueConnectionFactory.unmarshal((Reader) null);
        fail("Expecting exception: MarshalException");
      } catch(MarshalException e) {
        /*
         * 
         */
      }
  }
}
