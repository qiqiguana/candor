/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.authentication;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Iterator;
import org.exolab.jms.authentication.User;
import org.exolab.jms.authentication.UserManager;
import org.exolab.jms.config.Configuration;
import org.exolab.jms.config.SecurityConfiguration;
import org.exolab.jms.persistence.DatabaseService;
import org.exolab.jms.service.ServiceException;

@RunWith(EvoSuiteRunner.class)
public class UserManagerEvoSuiteTest {


  //Test case number: 0
  /*
   * 3 covered goals:
   * 1 org.exolab.jms.authentication.UserManager.getUser(Lorg/exolab/jms/authentication/User;)Lorg/exolab/jms/authentication/User;: root-Branch
   * 2 org.exolab.jms.authentication.UserManager.<init>(Lorg/exolab/jms/config/Configuration;Lorg/exolab/jms/persistence/DatabaseService;)V: I14 Branch 1 IFNONNULL L101 - true
   * 3 org.exolab.jms.authentication.UserManager.<init>(Lorg/exolab/jms/config/Configuration;Lorg/exolab/jms/persistence/DatabaseService;)V: I25 Branch 2 IFNONNULL L104 - true
   */
  @Test
  public void test0()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      DatabaseService databaseService0 = new DatabaseService(configuration0);
      UserManager userManager0 = new UserManager(configuration0, databaseService0);
      User user0 = new User("\" was loaded by ", "\" was loaded by ");
      User user1 = userManager0.getUser(user0);
      assertNull(user1);
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * 1 org.exolab.jms.authentication.UserManager.doStart()V: root-Branch
   * 2 org.exolab.jms.authentication.UserManager.rollback()V: root-Branch
   */
  @Test
  public void test1()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      DatabaseService databaseService0 = new DatabaseService(configuration0);
      UserManager userManager0 = new UserManager(configuration0, databaseService0);
      try {
        userManager0.start();
        fail("Expecting exception: ServiceException");
      } catch(ServiceException e) {
      }
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 org.exolab.jms.authentication.UserManager.userNames()Ljava/util/Iterator;: root-Branch
   */
  @Test
  public void test2()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      DatabaseService databaseService0 = new DatabaseService(configuration0);
      UserManager userManager0 = new UserManager(configuration0, databaseService0);
      Iterator<Object> iterator0 = userManager0.userNames();
      assertEquals(false, iterator0.hasNext());
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 org.exolab.jms.authentication.UserManager.<init>(Lorg/exolab/jms/config/Configuration;Lorg/exolab/jms/persistence/DatabaseService;)V: I25 Branch 2 IFNONNULL L104 - false
   */
  @Test
  public void test3()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      UserManager userManager0 = null;
      try {
        userManager0 = new UserManager(configuration0, (DatabaseService) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Argument 'database' is null
         */
      }
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 org.exolab.jms.authentication.UserManager.createUser(Lorg/exolab/jms/authentication/User;)Z: I17 Branch 3 IFNONNULL L122 - false
   */
  @Test
  public void test4()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      DatabaseService databaseService0 = new DatabaseService(configuration0);
      UserManager userManager0 = new UserManager(configuration0, databaseService0);
      assertNotNull(userManager0);
      
      User user0 = new User("\" was loaded by ", "\" was loaded by ");
      boolean boolean0 = userManager0.createUser(user0);
      assertEquals(false, boolean0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 org.exolab.jms.authentication.UserManager.updateUser(Lorg/exolab/jms/authentication/User;)Z: I17 Branch 4 IFNULL L154 - true
   */
  @Test
  public void test5()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      DatabaseService databaseService0 = new DatabaseService(configuration0);
      UserManager userManager0 = new UserManager(configuration0, databaseService0);
      assertNotNull(userManager0);
      
      User user0 = new User();
      boolean boolean0 = userManager0.updateUser(user0);
      assertEquals(false, boolean0);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 org.exolab.jms.authentication.UserManager.deleteUser(Lorg/exolab/jms/authentication/User;)Z: I17 Branch 5 IFNULL L181 - true
   */
  @Test
  public void test6()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      DatabaseService databaseService0 = new DatabaseService(configuration0);
      UserManager userManager0 = new UserManager(configuration0, databaseService0);
      assertNotNull(userManager0);
      
      User user0 = new User();
      boolean boolean0 = userManager0.deleteUser(user0);
      assertEquals(false, boolean0);
  }

  //Test case number: 7
  /*
   * 3 covered goals:
   * 1 org.exolab.jms.authentication.UserManager.validateUser(Ljava/lang/String;Ljava/lang/String;)Z: I14 Branch 6 IFNE L230 - false
   * 2 org.exolab.jms.authentication.UserManager.<init>(Lorg/exolab/jms/config/Configuration;Lorg/exolab/jms/persistence/DatabaseService;)V: I14 Branch 1 IFNONNULL L101 - true
   * 3 org.exolab.jms.authentication.UserManager.<init>(Lorg/exolab/jms/config/Configuration;Lorg/exolab/jms/persistence/DatabaseService;)V: I25 Branch 2 IFNONNULL L104 - true
   */
  @Test
  public void test7()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      SecurityConfiguration securityConfiguration0 = new SecurityConfiguration();
      configuration0.setSecurityConfiguration(securityConfiguration0);
      DatabaseService databaseService0 = new DatabaseService(configuration0);
      UserManager userManager0 = new UserManager(configuration0, databaseService0);
      assertNotNull(userManager0);
      
      boolean boolean0 = userManager0.validateUser((String) null, (String) null);
      assertEquals(true, boolean0);
  }
}
