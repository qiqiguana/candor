/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.message;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.Enumeration;
import javax.jms.JMSException;
import javax.jms.MessageFormatException;
import javax.jms.MessageNotWriteableException;
import org.exolab.jms.message.MapMessageImpl;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MapMessageImplEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      MapMessageImpl mapMessageImpl0 = new MapMessageImpl();
      assertNotNull(mapMessageImpl0);
      
      mapMessageImpl0.setObject((String) null, ".");
      String string0 = (String)mapMessageImpl0.getObject((String) null);
      assertEquals("MapMessage", mapMessageImpl0.getJMSType());
      assertNotNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      MapMessageImpl mapMessageImpl0 = new MapMessageImpl();
      assertNotNull(mapMessageImpl0);
      
      // Undeclared exception!
      try {
        mapMessageImpl0.getByte((String) null);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
        /*
         * null
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      MapMessageImpl mapMessageImpl0 = new MapMessageImpl();
      assertNotNull(mapMessageImpl0);
      
      // Undeclared exception!
      try {
        mapMessageImpl0.getFloat("u");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      MapMessageImpl mapMessageImpl0 = new MapMessageImpl();
      assertNotNull(mapMessageImpl0);
      
      Enumeration<Object> enumeration0 = mapMessageImpl0.getMapNames();
      assertEquals("MapMessage", mapMessageImpl0.getJMSType());
      assertNotNull(enumeration0);
  }

  @Test
  public void test4()  throws Throwable  {
      MapMessageImpl mapMessageImpl0 = new MapMessageImpl();
      assertNotNull(mapMessageImpl0);
      
      mapMessageImpl0.getString("(~11i9\"eja8QIM$T'");
      assertEquals("MapMessage", mapMessageImpl0.getJMSType());
  }

  @Test
  public void test5()  throws Throwable  {
      MapMessageImpl mapMessageImpl0 = new MapMessageImpl();
      assertNotNull(mapMessageImpl0);
      
      // Undeclared exception!
      try {
        mapMessageImpl0.getDouble("MapMessage");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      MapMessageImpl mapMessageImpl0 = new MapMessageImpl();
      assertNotNull(mapMessageImpl0);
      
      mapMessageImpl0.setInt("", 0);
      Integer integer0 = (Integer)mapMessageImpl0.getObject("");
      assertEquals("MapMessage", mapMessageImpl0.getJMSType());
      assertEquals(0, (int)integer0);
  }

  @Test
  public void test7()  throws Throwable  {
      MapMessageImpl mapMessageImpl0 = new MapMessageImpl();
      assertNotNull(mapMessageImpl0);
      
      mapMessageImpl0.setFloat("", (float) (byte)0);
      assertEquals("MapMessage", mapMessageImpl0.getJMSType());
  }

  @Test
  public void test8()  throws Throwable  {
      MapMessageImpl mapMessageImpl0 = new MapMessageImpl();
      assertNotNull(mapMessageImpl0);
      
      mapMessageImpl0.setByte("Cannot create MessageConsumer for destination=", (byte) (-46));
      Byte byte0 = (Byte)mapMessageImpl0.getObject("Cannot create MessageConsumer for destination=");
      assertEquals((byte) (-46), (byte)byte0);
      assertEquals("MapMessage", mapMessageImpl0.getJMSType());
  }

  @Test
  public void test9()  throws Throwable  {
      MapMessageImpl mapMessageImpl0 = new MapMessageImpl();
      assertNotNull(mapMessageImpl0);
      
      MapMessageImpl mapMessageImpl1 = (MapMessageImpl)mapMessageImpl0.clone();
      assertNotSame(mapMessageImpl0, mapMessageImpl1);
      assertEquals("MapMessage", mapMessageImpl0.getJMSType());
      assertNotNull(mapMessageImpl1);
  }

  @Test
  public void test10()  throws Throwable  {
      MapMessageImpl mapMessageImpl0 = new MapMessageImpl();
      assertNotNull(mapMessageImpl0);
      
      mapMessageImpl0.getBoolean("(~11i9\"eja8QIM$T'");
      assertEquals("MapMessage", mapMessageImpl0.getJMSType());
  }

  @Test
  public void test11()  throws Throwable  {
      MapMessageImpl mapMessageImpl0 = new MapMessageImpl();
      assertNotNull(mapMessageImpl0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(13);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) byteArrayOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) dataOutputStream0);
      mapMessageImpl0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(386, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005w\u001A\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000sr\u0000$org.exolab.jms.message.MessageHeader\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\f\u0000\u0000xpw\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001pppw\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000psr\u0000\u001Borg.exolab.jms.message.Type\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\f\u0000\u0000xpw \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\n\u0000M\u0000a\u0000p\u0000M\u0000e\u0000s\u0000s\u0000a\u0000g\u0000expppppw\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000xsr\u0000(org.exolab.jms.message.MessageProperties\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\f\u0000\u0000xpw\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001sr\u0000\u0011java.util.HashMap\u0005\u0007\uFFFD\uFFFD\uFFFD\u0016`\uFFFD\u0003\u0000\u0002F\u0000\nloadFactorI\u0000\tthresholdxp?@\u0000\u0000\u0000\u0000\u0000\u0018w\b\u0000\u0000\u0000 \u0000\u0000\u0000\u0000xxw\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002sq\u0000~\u0000\u0006?@\u0000\u0000\u0000\u0000\u0000\u0018w\b\u0000\u0000\u0000 \u0000\u0000\u0000\u0000x", byteArrayOutputStream0.toString());
  }

  @Test
  public void test12()  throws Throwable  {
      MapMessageImpl mapMessageImpl0 = new MapMessageImpl();
      assertNotNull(mapMessageImpl0);
      
      // Undeclared exception!
      try {
        mapMessageImpl0.getInt("Z5m9%.ns");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
        /*
         * null
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      MapMessageImpl mapMessageImpl0 = new MapMessageImpl();
      assertNotNull(mapMessageImpl0);
      
      // Undeclared exception!
      try {
        mapMessageImpl0.getShort("");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
        /*
         * null
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      MapMessageImpl mapMessageImpl0 = new MapMessageImpl();
      assertNotNull(mapMessageImpl0);
      
      mapMessageImpl0.setShort("(~11i9\"eja8QIM$T'", (short)37);
      Short short0 = (Short)mapMessageImpl0.getObject("(~11i9\"eja8QIM$T'");
      assertEquals((short)37, (short)short0);
      
      mapMessageImpl0.setObject("(~11i9\"eja8QIM$T'", (Object) short0);
      assertEquals("MapMessage", mapMessageImpl0.getJMSType());
  }

  @Test
  public void test15()  throws Throwable  {
      MapMessageImpl mapMessageImpl0 = new MapMessageImpl();
      assertNotNull(mapMessageImpl0);
      
      // Undeclared exception!
      try {
        mapMessageImpl0.getChar("Parsed \"");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * Cannot convert null value to char
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      MapMessageImpl mapMessageImpl0 = new MapMessageImpl();
      assertNotNull(mapMessageImpl0);
      
      mapMessageImpl0.clearBody();
      assertEquals("MapMessage", mapMessageImpl0.getJMSType());
  }

  @Test
  public void test17()  throws Throwable  {
      MapMessageImpl mapMessageImpl0 = new MapMessageImpl();
      assertNotNull(mapMessageImpl0);
      
      Character character0 = Character.valueOf('*');
      mapMessageImpl0.setObject("Parsed \"", (Object) character0);
      assertEquals("MapMessage", mapMessageImpl0.getJMSType());
  }

  @Test
  public void test18()  throws Throwable  {
      MapMessageImpl mapMessageImpl0 = new MapMessageImpl();
      assertNotNull(mapMessageImpl0);
      
      byte[] byteArray0 = new byte[3];
      mapMessageImpl0.setBytes("", byteArray0);
      Object object0 = mapMessageImpl0.getObject("");
      assertNotNull(object0);
      
      mapMessageImpl0.setObject("", object0);
      assertEquals("MapMessage", mapMessageImpl0.getJMSType());
  }

  @Test
  public void test19()  throws Throwable  {
      MapMessageImpl mapMessageImpl0 = new MapMessageImpl();
      assertNotNull(mapMessageImpl0);
      
      Boolean boolean0 = Boolean.FALSE;
      mapMessageImpl0.setObject("K6>A7fudiR:YVlmgv%", (Object) boolean0);
      assertEquals("MapMessage", mapMessageImpl0.getJMSType());
  }

  @Test
  public void test20()  throws Throwable  {
      MapMessageImpl mapMessageImpl0 = new MapMessageImpl();
      assertNotNull(mapMessageImpl0);
      
      mapMessageImpl0.itemExists("");
      assertEquals("MapMessage", mapMessageImpl0.getJMSType());
  }

  @Test
  public void test21()  throws Throwable  {
      MapMessageImpl mapMessageImpl0 = new MapMessageImpl();
      assertNotNull(mapMessageImpl0);
      
      Double double0 = new Double(0.0);
      mapMessageImpl0.setObject("u", (Object) double0);
      assertEquals("MapMessage", mapMessageImpl0.getJMSType());
  }

  @Test
  public void test22()  throws Throwable  {
      MapMessageImpl mapMessageImpl0 = new MapMessageImpl();
      assertNotNull(mapMessageImpl0);
      
      mapMessageImpl0.setLong("Z5m9%.ns<T", 0L);
      Long long0 = (Long)mapMessageImpl0.getObject("Z5m9%.ns<T");
      assertEquals("MapMessage", mapMessageImpl0.getJMSType());
      assertEquals(0L, (long)long0);
  }

  @Test
  public void test23()  throws Throwable  {
      MapMessageImpl mapMessageImpl0 = new MapMessageImpl();
      assertNotNull(mapMessageImpl0);
      
      // Undeclared exception!
      try {
        mapMessageImpl0.getLong("");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
        /*
         * null
         */
      }
  }

  @Test
  public void test24()  throws Throwable  {
      MapMessageImpl mapMessageImpl0 = new MapMessageImpl();
      assertNotNull(mapMessageImpl0);
      
      mapMessageImpl0.getObject("Z5m9%.ns");
      assertEquals("MapMessage", mapMessageImpl0.getJMSType());
  }

  @Test
  public void test25()  throws Throwable  {
      MapMessageImpl mapMessageImpl0 = new MapMessageImpl();
      assertNotNull(mapMessageImpl0);
      
      mapMessageImpl0.setChar("j^6,&0jWe%l", 'a');
      Character character0 = (Character)mapMessageImpl0.getObject("j^6,&0jWe%l");
      assertEquals("MapMessage", mapMessageImpl0.getJMSType());
      assertEquals('a', (char)character0);
  }

  @Test
  public void test26()  throws Throwable  {
      MapMessageImpl mapMessageImpl0 = new MapMessageImpl();
      assertNotNull(mapMessageImpl0);
      
      mapMessageImpl0.setDouble("", 588.8625305232833);
      Double double0 = (Double)mapMessageImpl0.getObject("");
      assertEquals("MapMessage", mapMessageImpl0.getJMSType());
      assertEquals(588.8625305232833, (double)double0, 0.01D);
  }

  @Test
  public void test27()  throws Throwable  {
      MapMessageImpl mapMessageImpl0 = new MapMessageImpl();
      assertNotNull(mapMessageImpl0);
      
      mapMessageImpl0.setBytes("Z5m9%.ns", (byte[]) null);
      assertEquals("MapMessage", mapMessageImpl0.getJMSType());
  }

  @Test
  public void test28()  throws Throwable  {
      MapMessageImpl mapMessageImpl0 = new MapMessageImpl();
      assertNotNull(mapMessageImpl0);
      
      mapMessageImpl0.setBytes("Z5m9%.ns", (byte[]) null, (-885), (-885));
      assertEquals("MapMessage", mapMessageImpl0.getJMSType());
  }

  @Test
  public void test29()  throws Throwable  {
      MapMessageImpl mapMessageImpl0 = new MapMessageImpl();
      assertNotNull(mapMessageImpl0);
      
      byte[] byteArray0 = new byte[21];
      mapMessageImpl0.setBytes("<:q-8", byteArray0, (int) (byte)0, (int) (byte)0);
      assertEquals("MapMessage", mapMessageImpl0.getJMSType());
  }

  @Test
  public void test30()  throws Throwable  {
      MapMessageImpl mapMessageImpl0 = new MapMessageImpl();
      assertNotNull(mapMessageImpl0);
      
      mapMessageImpl0.setObject("", (Object) null);
      assertEquals("MapMessage", mapMessageImpl0.getJMSType());
  }

  @Test
  public void test31()  throws Throwable  {
      MapMessageImpl mapMessageImpl0 = new MapMessageImpl();
      assertNotNull(mapMessageImpl0);
      
      Long long0 = new Long((-8L));
      mapMessageImpl0.setObject("", (Object) long0);
      assertEquals("MapMessage", mapMessageImpl0.getJMSType());
  }

  @Test
  public void test32()  throws Throwable  {
      MapMessageImpl mapMessageImpl0 = new MapMessageImpl();
      assertNotNull(mapMessageImpl0);
      
      try {
        mapMessageImpl0.setObject("%MfQ7WG2+CYd]~", (Object) mapMessageImpl0);
        fail("Expecting exception: MessageFormatException");
      } catch(MessageFormatException e) {
        /*
         * MapMessage does not support objects of type=org.exolab.jms.message.MapMessageImpl
         */
      }
  }
}
