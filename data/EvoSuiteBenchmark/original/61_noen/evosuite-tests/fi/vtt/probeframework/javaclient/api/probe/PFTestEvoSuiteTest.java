/*
 * This file was automatically generated by EvoSuite
 */

package fi.vtt.probeframework.javaclient.api.probe;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import fi.vtt.probeframework.javaclient.api.probe.PFTest;
import fi.vtt.probeframework.javaclient.protocol.messages.Precision;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PFTestEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Precision precision0 = Precision.MINUTE;
      PFTest pFTest0 = new PFTest("", "", "", precision0, "", (String) null);
      pFTest0.getName();
      assertEquals(1, pFTest0.getTestId());
  }

  @Test
  public void test1()  throws Throwable  {
      Precision precision0 = Precision.MINUTE;
      PFTest pFTest0 = new PFTest("", "", "", precision0, "", (String) null);
      pFTest0.startTime();
      assertEquals(19, pFTest0.getTestId());
  }

  @Test
  public void test2()  throws Throwable  {
      PFTest pFTest0 = new PFTest("<^ol", "<^ol", "<^ol", (Precision) null, "<^ol", "<^ol");
      pFTest0.getProject();
      assertEquals(4, pFTest0.getTestId());
  }

  @Test
  public void test3()  throws Throwable  {
      PFTest.reset();
  }

  @Test
  public void test4()  throws Throwable  {
      Precision precision0 = Precision.MINUTE;
      PFTest pFTest0 = new PFTest("", "", "", precision0, "", "");
      pFTest0.getTestTarget();
      assertEquals(0, pFTest0.getTestId());
  }

  @Test
  public void test5()  throws Throwable  {
      Precision precision0 = Precision.MINUTE;
      PFTest pFTest0 = new PFTest("", "", "", precision0, "", "");
      pFTest0.getAccuracy();
      assertEquals(5, pFTest0.getTestId());
  }

  @Test
  public void test6()  throws Throwable  {
      PFTest pFTest0 = new PFTest("<^ol", "<^ol", "<^ol", (Precision) null, "<^ol", "<^ol");
      int int0 = pFTest0.getTestId();
      assertEquals(2, int0);
  }

  @Test
  public void test7()  throws Throwable  {
      Precision precision0 = Precision.MINUTE;
      PFTest pFTest0 = new PFTest("", "", "", precision0, "", (String) null);
      pFTest0.getSuite();
      assertEquals(-9, pFTest0.getTestId());
  }

  @Test
  public void test8()  throws Throwable  {
      Precision precision0 = Precision.MINUTE;
      PFTest pFTest0 = new PFTest("", "", "", precision0, "", "");
      pFTest0.getProjectVersion();
      assertEquals(23, pFTest0.getTestId());
  }

  @Test
  public void test9()  throws Throwable  {
      PFTest pFTest0 = new PFTest("<^ol", "<^ol", "<^ol", (Precision) null, "<^ol", "<^ol");
      long long0 = pFTest0.timeDelta();
      assertEquals(7, pFTest0.getTestId());
      assertEquals(0L, long0);
  }

  @Test
  public void test10()  throws Throwable  {
      Precision precision0 = Precision.SECOND;
      PFTest pFTest0 = new PFTest((String) null, (String) null, (String) null, precision0, (String) null, (String) null);
      long long0 = pFTest0.timeDelta();
      assertEquals(6, pFTest0.getTestId());
      assertEquals(0L, long0);
  }

  @Test
  public void test11()  throws Throwable  {
      Precision precision0 = Precision.MINUTE;
      PFTest pFTest0 = new PFTest((String) null, (String) null, (String) null, precision0, (String) null, (String) null);
      long long0 = pFTest0.timeDelta();
      assertEquals(8, pFTest0.getTestId());
      assertEquals(0L, long0);
  }

  @Test
  public void test12()  throws Throwable  {
      PFTest pFTest0 = new PFTest("<^ol", "<^ol", "<^ol", (Precision) null, "<^ol", "<^ol");
      boolean boolean0 = pFTest0.equals((Object) "<^ol");
      assertEquals(23, pFTest0.getTestId());
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      Precision precision0 = Precision.MINUTE;
      PFTest pFTest0 = new PFTest("", "", "", precision0, "", (String) null);
      boolean boolean0 = pFTest0.equals((Object) null);
      assertEquals(1, pFTest0.getTestId());
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      Precision precision0 = Precision.MINUTE;
      PFTest pFTest0 = new PFTest("", "", "", precision0, "", "");
      PFTest pFTest1 = new PFTest("", "", "", precision0, "", "");
      boolean boolean0 = pFTest1.equals((Object) pFTest0);
      assertEquals(24, pFTest1.getTestId());
      assertEquals(false, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      Precision precision0 = Precision.SECOND;
      PFTest pFTest0 = new PFTest((String) null, (String) null, (String) null, precision0, (String) null, (String) null);
      int int0 = pFTest0.hashCode();
      assertEquals(97, pFTest0.getTestId());
      assertEquals((-905155656), int0);
  }

  @Test
  public void test16()  throws Throwable  {
      PFTest pFTest0 = new PFTest("<^ol", "<^ol", "<^ol", (Precision) null, "<^ol", "<^ol");
      int int0 = pFTest0.hashCode();
      assertEquals(25, pFTest0.getTestId());
      assertEquals(1044587725, int0);
  }
}
