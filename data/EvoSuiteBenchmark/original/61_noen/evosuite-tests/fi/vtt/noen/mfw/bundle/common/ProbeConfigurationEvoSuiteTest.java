/*
 * This file was automatically generated by EvoSuite
 */

package fi.vtt.noen.mfw.bundle.common;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import fi.vtt.noen.mfw.bundle.common.ProbeConfiguration;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ProbeConfigurationEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ProbeConfiguration probeConfiguration0 = new ProbeConfiguration("", "", true, (Object) null);
      assertNotNull(probeConfiguration0);
      
      probeConfiguration0.getValue();
      assertEquals(true, probeConfiguration0.isMandatory());
  }

  @Test
  public void test1()  throws Throwable  {
      ProbeConfiguration probeConfiguration0 = new ProbeConfiguration((String) null, (String) null, true, (Object) null);
      assertNotNull(probeConfiguration0);
      
      boolean boolean0 = probeConfiguration0.isMandatory();
      assertEquals(true, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      ProbeConfiguration probeConfiguration0 = new ProbeConfiguration("", "", true, (Object) "");
      String string0 = probeConfiguration0.toString();
      assertEquals(true, probeConfiguration0.isMandatory());
      assertNotNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      Object object0 = new Object();
      ProbeConfiguration probeConfiguration0 = new ProbeConfiguration("@zr", "@zr", true, object0);
      String string0 = probeConfiguration0.getName();
      assertNotNull(string0);
      assertEquals(true, probeConfiguration0.isMandatory());
  }

  @Test
  public void test4()  throws Throwable  {
      ProbeConfiguration probeConfiguration0 = new ProbeConfiguration("", "", true, (Object) "");
      probeConfiguration0.setMandatory(true);
      assertEquals(true, probeConfiguration0.isMandatory());
  }

  @Test
  public void test5()  throws Throwable  {
      Object object0 = new Object();
      ProbeConfiguration probeConfiguration0 = new ProbeConfiguration("@zr", "@zr", true, object0);
      probeConfiguration0.setName((String) null);
      int int0 = probeConfiguration0.hashCode();
      assertEquals(true, probeConfiguration0.isMandatory());
      assertEquals(0, int0);
  }

  @Test
  public void test6()  throws Throwable  {
      ProbeConfiguration probeConfiguration0 = new ProbeConfiguration("", "", true, (Object) null);
      assertNotNull(probeConfiguration0);
      
      probeConfiguration0.setDescription("-$RI!c1v9S'Pc;");
      assertEquals(true, probeConfiguration0.isMandatory());
  }

  @Test
  public void test7()  throws Throwable  {
      ProbeConfiguration probeConfiguration0 = new ProbeConfiguration((String) null, (String) null, true, (Object) null);
      assertNotNull(probeConfiguration0);
      
      probeConfiguration0.getDescription();
      assertEquals(true, probeConfiguration0.isMandatory());
  }

  @Test
  public void test8()  throws Throwable  {
      ProbeConfiguration probeConfiguration0 = new ProbeConfiguration((String) null, (String) null, true, (Object) null);
      assertNotNull(probeConfiguration0);
      
      probeConfiguration0.setValue((String) null);
      assertEquals(true, probeConfiguration0.isMandatory());
  }

  @Test
  public void test9()  throws Throwable  {
      Object object0 = new Object();
      ProbeConfiguration probeConfiguration0 = new ProbeConfiguration("0", "0", true, object0);
      boolean boolean0 = probeConfiguration0.equals(object0);
      assertEquals(true, probeConfiguration0.isMandatory());
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      ProbeConfiguration probeConfiguration0 = new ProbeConfiguration((String) null, (String) null, true, (Object) null);
      assertNotNull(probeConfiguration0);
      
      boolean boolean0 = probeConfiguration0.equals((Object) null);
      assertEquals(true, probeConfiguration0.isMandatory());
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      ProbeConfiguration probeConfiguration0 = new ProbeConfiguration("@zr", "@zr", true, object0);
      ProbeConfiguration probeConfiguration1 = new ProbeConfiguration("@zr", "@zr", false, (Object) "@zr");
      boolean boolean0 = probeConfiguration1.equals((Object) probeConfiguration0);
      assertEquals(true, probeConfiguration0.isMandatory());
      assertEquals(true, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      ProbeConfiguration probeConfiguration0 = new ProbeConfiguration("@zr", "@zr", true, object0);
      ProbeConfiguration probeConfiguration1 = new ProbeConfiguration("@zr", "@zr", false, (Object) null);
      assertNotNull(probeConfiguration1);
      assertTrue(probeConfiguration1.equals(probeConfiguration0));
      
      probeConfiguration0.setName((String) null);
      boolean boolean0 = probeConfiguration0.equals((Object) probeConfiguration1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      ProbeConfiguration probeConfiguration0 = new ProbeConfiguration("", "", true, (Object) null);
      assertNotNull(probeConfiguration0);
      
      ProbeConfiguration probeConfiguration1 = new ProbeConfiguration("-$RI!c1v9S'Pc;", "", true, (Object) null);
      boolean boolean0 = probeConfiguration0.equals((Object) probeConfiguration1);
      assertEquals(true, probeConfiguration0.isMandatory());
      assertEquals("", probeConfiguration1.getDescription());
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      ProbeConfiguration probeConfiguration0 = new ProbeConfiguration("", "", true, (Object) "");
      ProbeConfiguration probeConfiguration1 = new ProbeConfiguration("", "", true, (Object) "");
      probeConfiguration1.setName((String) null);
      assertFalse(probeConfiguration1.equals(probeConfiguration0));
      
      probeConfiguration0.setName((String) null);
      boolean boolean0 = probeConfiguration0.equals((Object) probeConfiguration1);
      assertTrue(probeConfiguration0.equals(probeConfiguration1));
      assertEquals(true, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      Object object0 = new Object();
      ProbeConfiguration probeConfiguration0 = new ProbeConfiguration("@zr", "@zr", true, object0);
      int int0 = probeConfiguration0.hashCode();
      assertEquals(true, probeConfiguration0.isMandatory());
      assertEquals(65400, int0);
  }
}
