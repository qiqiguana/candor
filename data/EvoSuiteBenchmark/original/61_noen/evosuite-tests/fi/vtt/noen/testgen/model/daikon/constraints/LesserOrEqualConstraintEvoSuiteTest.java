/*
 * This file was automatically generated by EvoSuite
 */

package fi.vtt.noen.testgen.model.daikon.constraints;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import fi.vtt.noen.testgen.model.daikon.constraints.LesserOrEqualConstraint;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class LesserOrEqualConstraintEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LesserOrEqualConstraint lesserOrEqualConstraint0 = new LesserOrEqualConstraint("r_m:?2", "r_m:?2");
      assertNotNull(lesserOrEqualConstraint0);
      
      String string0 = lesserOrEqualConstraint0.guardMethod();
      assertNotNull(string0);
      assertEquals("  public boolean r_m:IsNotLesserOrEqualr_m:() {\n    if (r_m: <= r_m:) {\n      return false;\n    }\n    return true;\n  }\n", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      LesserOrEqualConstraint lesserOrEqualConstraint0 = new LesserOrEqualConstraint("r_m:?2", "r_m:?2");
      assertNotNull(lesserOrEqualConstraint0);
      
      lesserOrEqualConstraint0.min();
      assertEquals("    if (r_m: <= r_m:) {\n      return false;\n    }\n", lesserOrEqualConstraint0.toJava());
      assertEquals(false, lesserOrEqualConstraint0.isEnabled());
      assertEquals("reference:r_m: <= reference:r_m:", lesserOrEqualConstraint0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      LesserOrEqualConstraint lesserOrEqualConstraint0 = null;
      try {
        lesserOrEqualConstraint0 = new LesserOrEqualConstraint("sizesireizsize(\"O)t!~X;k", "sizesireizsize(\"O)t!~X;k");
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * java.lang.String cannot be cast to fi.vtt.noen.testgen.model.daikon.constraints.ReferenceValue
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      LesserOrEqualConstraint lesserOrEqualConstraint0 = new LesserOrEqualConstraint("r_m:?2", "r_m:?2");
      assertNotNull(lesserOrEqualConstraint0);
      
      lesserOrEqualConstraint0.max();
      assertEquals("    if (r_m: <= r_m:) {\n      return false;\n    }\n", lesserOrEqualConstraint0.toJava());
      assertEquals(false, lesserOrEqualConstraint0.isEnabled());
  }

  @Test
  public void test4()  throws Throwable  {
      LesserOrEqualConstraint lesserOrEqualConstraint0 = new LesserOrEqualConstraint("r_m:?2", "r_m:?2");
      assertNotNull(lesserOrEqualConstraint0);
      
      String string0 = lesserOrEqualConstraint0.toString();
      assertNotNull(string0);
      assertEquals("reference:r_m: <= reference:r_m:", string0);
  }
}
