/*
 * This file was automatically generated by EvoSuite
 */

package fi.vtt.noen.testgen.model.daikon;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import fi.vtt.noen.testgen.model.daikon.DaikonState;
import fi.vtt.noen.testgen.model.daikon.constraints.AlwaysInArrayConstraint;
import fi.vtt.noen.testgen.model.daikon.constraints.ArrayElementsConstraint;
import fi.vtt.noen.testgen.model.daikon.constraints.DaikonConstraint;
import fi.vtt.noen.testgen.model.daikon.constraints.GreaterOrEqualConstraint;
import java.util.HashSet;
import java.util.Set;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DaikonStateEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DaikonState daikonState0 = new DaikonState("d,)+xlVcDea?g");
      HashSet<String> hashSet0 = new HashSet<String>();
      String string0 = daikonState0.guardContentMethods((Set<String>) hashSet0);
      assertEquals("", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      DaikonState daikonState0 = new DaikonState("d,)+xlVcDea?g");
      double double0 = daikonState0.min(0);
      assertEquals((-2.147483648E9), double0, 0.01D);
      
      double double1 = daikonState0.max(0);
      assertEquals(2.147483647E9, double1, 0.01D);
  }

  @Test
  public void test2()  throws Throwable  {
      DaikonState daikonState0 = new DaikonState("d,)+xlVcDea?g");
      double double0 = daikonState0.max(0);
      assertEquals(2.147483647E9, double0, 0.01D);
  }

  @Test
  public void test3()  throws Throwable  {
      DaikonState daikonState0 = new DaikonState("d,)+xlVcDea?g");
      AlwaysInArrayConstraint alwaysInArrayConstraint0 = new AlwaysInArrayConstraint("d,)+xlVcDea?g", "d,)+xlVcDea?g");
      daikonState0.addConstraint((DaikonConstraint) alwaysInArrayConstraint0);
      String string0 = daikonState0.parameterValues("d,)+xlVcDea?g");
      assertEquals("    return (d,)+xlVcDea?g) randomItemFrom(d,)+xlVcDea);\n", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      DaikonState daikonState0 = new DaikonState("d,)V@/8a?g");
      GreaterOrEqualConstraint greaterOrEqualConstraint0 = new GreaterOrEqualConstraint("d,)V@/8a?g", "d,)V@/8a?g");
      daikonState0.addConstraint((DaikonConstraint) greaterOrEqualConstraint0);
      String string0 = daikonState0.parameterValues("");
      assertNull(string0);
  }

  @Test
  public void test5()  throws Throwable  {
      DaikonState daikonState0 = new DaikonState("6=dJ?7?4^aWcZto8]");
      ArrayElementsConstraint arrayElementsConstraint0 = new ArrayElementsConstraint("6=dJ?7?4^aWcZto8]", "6=dJ?7?4^aWcZto8]");
      daikonState0.addConstraint((DaikonConstraint) arrayElementsConstraint0);
      String string0 = daikonState0.createGuardInvocations();
      assertEquals("", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      DaikonState daikonState0 = new DaikonState("d,)V@/8a?g");
      GreaterOrEqualConstraint greaterOrEqualConstraint0 = new GreaterOrEqualConstraint("d,)V@/8a?g", "d,)V@/8a?g");
      daikonState0.addConstraint((DaikonConstraint) greaterOrEqualConstraint0);
      String string0 = daikonState0.createGuardInvocations();
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      DaikonState daikonState0 = new DaikonState("d,)+xlVcDea?g");
      AlwaysInArrayConstraint alwaysInArrayConstraint0 = new AlwaysInArrayConstraint("d,)+xlVcDea?g", "d,)+xlVcDea?g");
      daikonState0.addConstraint((DaikonConstraint) alwaysInArrayConstraint0);
      double double0 = daikonState0.min(0);
      assertEquals((-2.147483648E9), double0, 0.01D);
  }

  @Test
  public void test8()  throws Throwable  {
      DaikonState daikonState0 = new DaikonState("d,)V@/8a?g");
      GreaterOrEqualConstraint greaterOrEqualConstraint0 = new GreaterOrEqualConstraint("d,)V@/8a?g", "d,)V@/8a?g");
      daikonState0.addConstraint((DaikonConstraint) greaterOrEqualConstraint0);
      double double0 = daikonState0.min((-1));
      assertEquals((-2.147483648E9), double0, 0.01D);
  }

  @Test
  public void test9()  throws Throwable  {
      DaikonState daikonState0 = new DaikonState("d,)V@/8a?g");
      GreaterOrEqualConstraint greaterOrEqualConstraint0 = new GreaterOrEqualConstraint("d,)V@/8a?g", "d,)V@/8a?g");
      daikonState0.addConstraint((DaikonConstraint) greaterOrEqualConstraint0);
      boolean boolean0 = daikonState0.booleanTrue((-45));
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      DaikonState daikonState0 = new DaikonState("d,)V@/8a?g");
      GreaterOrEqualConstraint greaterOrEqualConstraint0 = new GreaterOrEqualConstraint("d,)V@/8a?g", "d,)V@/8a?g");
      daikonState0.addConstraint((DaikonConstraint) greaterOrEqualConstraint0);
      boolean boolean0 = daikonState0.booleanTrue((-1));
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      DaikonState daikonState0 = new DaikonState("d,)V@/8a?g");
      GreaterOrEqualConstraint greaterOrEqualConstraint0 = new GreaterOrEqualConstraint("d,)V@/8a?g", "d,)V@/8a?g");
      daikonState0.addConstraint((DaikonConstraint) greaterOrEqualConstraint0);
      boolean boolean0 = daikonState0.booleanFalse((-45));
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      DaikonState daikonState0 = new DaikonState("d,)V@/8a?g");
      GreaterOrEqualConstraint greaterOrEqualConstraint0 = new GreaterOrEqualConstraint("d,)V@/8a?g", "d,)V@/8a?g");
      daikonState0.addConstraint((DaikonConstraint) greaterOrEqualConstraint0);
      boolean boolean0 = daikonState0.booleanFalse((-1));
      assertEquals(false, boolean0);
  }
}
