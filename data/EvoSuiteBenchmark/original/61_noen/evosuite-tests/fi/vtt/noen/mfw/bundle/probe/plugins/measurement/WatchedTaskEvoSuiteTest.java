/*
 * This file was automatically generated by EvoSuite
 */

package fi.vtt.noen.mfw.bundle.probe.plugins.measurement;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import fi.vtt.noen.mfw.bundle.blackboard.Blackboard;
import fi.vtt.noen.mfw.bundle.blackboard.BlackboardImpl;
import fi.vtt.noen.mfw.bundle.probe.plugins.measurement.MeasurementTask;
import fi.vtt.noen.mfw.bundle.probe.plugins.measurement.WatchedTask;
import fi.vtt.noen.mfw.bundle.probe.plugins.xmlrpc.ProbeAgentConfig;
import fi.vtt.noen.mfw.bundle.probe.plugins.xmlrpc.XmlRpcServerClient;
import fi.vtt.noen.mfw.bundle.probe.shared.MeasurementRequest;
import fi.vtt.noen.mfw.bundle.probe.shared.Probe;
import fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation;
import fi.vtt.noen.mfw.bundle.server.shared.ServerAgent;
import fi.vtt.noen.mfw.probes.tester.TestProbe1;
import fi.vtt.noen.mfw.probes.tester.TestProbeWithCompareMode;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.Future;
import java.util.concurrent.FutureTask;
import org.evosuite.runtime.System;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class WatchedTaskEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ProbeAgentConfig probeAgentConfig0 = new ProbeAgentConfig(30, "w", 30, 30, 30);
      XmlRpcServerClient xmlRpcServerClient0 = (XmlRpcServerClient)probeAgentConfig0.getDestination();
      TestProbeWithCompareMode testProbeWithCompareMode0 = new TestProbeWithCompareMode();
      MeasurementRequest measurementRequest0 = new MeasurementRequest((ServerAgent) xmlRpcServerClient0, "w", (Probe) testProbeWithCompareMode0);
      BlackboardImpl blackboardImpl0 = new BlackboardImpl();
      MeasurementTask measurementTask0 = new MeasurementTask(measurementRequest0, (Blackboard) blackboardImpl0);
      FutureTask<Long> futureTask0 = new FutureTask<Long>((Runnable) measurementTask0, (Long) null);
      WatchedTask watchedTask0 = new WatchedTask((Future) futureTask0, measurementTask0, (Map<Long, WatchedTask>) null, false, (ServerAgent) xmlRpcServerClient0);
      watchedTask0.getServerAgent();
  }

  @Test
  public void test1()  throws Throwable  {
      ProbeAgentConfig probeAgentConfig0 = new ProbeAgentConfig(30, "w", 30, 30, 30);
      XmlRpcServerClient xmlRpcServerClient0 = (XmlRpcServerClient)probeAgentConfig0.getDestination();
      TestProbeWithCompareMode testProbeWithCompareMode0 = new TestProbeWithCompareMode();
      MeasurementRequest measurementRequest0 = new MeasurementRequest((ServerAgent) xmlRpcServerClient0, "w", (Probe) testProbeWithCompareMode0);
      BlackboardImpl blackboardImpl0 = new BlackboardImpl();
      MeasurementTask measurementTask0 = new MeasurementTask(measurementRequest0, (Blackboard) blackboardImpl0);
      FutureTask<Long> futureTask0 = new FutureTask<Long>((Runnable) measurementTask0, (Long) null);
      WatchedTask watchedTask0 = new WatchedTask((Future) futureTask0, measurementTask0, (Map<Long, WatchedTask>) null, false, (ServerAgent) xmlRpcServerClient0);
      ProbeInformation probeInformation0 = watchedTask0.getProbeInfo();
      assertEquals(1, probeInformation0.getPrecision());
  }

  @Test
  public void test2()  throws Throwable  {
      TestProbe1 testProbe1_0 = new TestProbe1();
      MeasurementRequest measurementRequest0 = new MeasurementRequest((ServerAgent) null, "dcaDh:L{lm", (Probe) testProbe1_0, 692L);
      BlackboardImpl blackboardImpl0 = new BlackboardImpl();
      MeasurementTask measurementTask0 = new MeasurementTask(measurementRequest0, (Blackboard) blackboardImpl0);
      HashMap<Long, WatchedTask> hashMap0 = new HashMap<Long, WatchedTask>();
      WatchedTask watchedTask0 = new WatchedTask((Future) null, measurementTask0, (Map<Long, WatchedTask>) hashMap0, true, (ServerAgent) null);
      // Undeclared exception!
      try {
        watchedTask0.cancel();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      TestProbe1 testProbe1_0 = new TestProbe1();
      MeasurementRequest measurementRequest0 = new MeasurementRequest((ServerAgent) null, "dcaDh:L{lm", (Probe) testProbe1_0, 692L);
      BlackboardImpl blackboardImpl0 = new BlackboardImpl();
      MeasurementTask measurementTask0 = new MeasurementTask(measurementRequest0, (Blackboard) blackboardImpl0);
      HashMap<Long, WatchedTask> hashMap0 = new HashMap<Long, WatchedTask>();
      WatchedTask watchedTask0 = new WatchedTask((Future) null, measurementTask0, (Map<Long, WatchedTask>) hashMap0, true, (ServerAgent) null);
      MeasurementTask measurementTask1 = watchedTask0.getMeasurementTask();
      assertEquals(0L, measurementTask1.getRunningTime());
  }

  @Test
  public void test4()  throws Throwable  {
      ProbeAgentConfig probeAgentConfig0 = new ProbeAgentConfig(30, "w", 30, 30, 30);
      XmlRpcServerClient xmlRpcServerClient0 = (XmlRpcServerClient)probeAgentConfig0.getDestination();
      TestProbeWithCompareMode testProbeWithCompareMode0 = new TestProbeWithCompareMode();
      MeasurementRequest measurementRequest0 = new MeasurementRequest((ServerAgent) xmlRpcServerClient0, "w", (Probe) testProbeWithCompareMode0);
      BlackboardImpl blackboardImpl0 = new BlackboardImpl();
      MeasurementTask measurementTask0 = new MeasurementTask(measurementRequest0, (Blackboard) blackboardImpl0);
      FutureTask<Long> futureTask0 = new FutureTask<Long>((Runnable) measurementTask0, (Long) null);
      WatchedTask watchedTask0 = new WatchedTask((Future) futureTask0, measurementTask0, (Map<Long, WatchedTask>) null, false, (ServerAgent) xmlRpcServerClient0);
      long long0 = watchedTask0.getRunningTime();
      assertEquals(0L, long0);
  }

  @Test
  public void test5()  throws Throwable  {
      ProbeAgentConfig probeAgentConfig0 = new ProbeAgentConfig(30, "w", 30, 30, 30);
      XmlRpcServerClient xmlRpcServerClient0 = (XmlRpcServerClient)probeAgentConfig0.getDestination();
      TestProbeWithCompareMode testProbeWithCompareMode0 = new TestProbeWithCompareMode();
      MeasurementRequest measurementRequest0 = new MeasurementRequest((ServerAgent) xmlRpcServerClient0, "w", (Probe) testProbeWithCompareMode0);
      BlackboardImpl blackboardImpl0 = new BlackboardImpl();
      MeasurementTask measurementTask0 = new MeasurementTask(measurementRequest0, (Blackboard) blackboardImpl0);
      FutureTask<Long> futureTask0 = new FutureTask<Long>((Runnable) measurementTask0, (Long) null);
      WatchedTask watchedTask0 = new WatchedTask((Future) futureTask0, measurementTask0, (Map<Long, WatchedTask>) null, true, (ServerAgent) xmlRpcServerClient0);
      watchedTask0.checkState();
      assertEquals(0L, watchedTask0.getRunningTime());
  }

  @Test
  public void test6()  throws Throwable  {
      ProbeAgentConfig probeAgentConfig0 = new ProbeAgentConfig(30, "w", 30, 30, 30);
      XmlRpcServerClient xmlRpcServerClient0 = (XmlRpcServerClient)probeAgentConfig0.getDestination();
      TestProbeWithCompareMode testProbeWithCompareMode0 = new TestProbeWithCompareMode();
      MeasurementRequest measurementRequest0 = new MeasurementRequest((ServerAgent) xmlRpcServerClient0, "w", (Probe) testProbeWithCompareMode0);
      BlackboardImpl blackboardImpl0 = new BlackboardImpl();
      MeasurementTask measurementTask0 = new MeasurementTask(measurementRequest0, (Blackboard) blackboardImpl0);
      FutureTask<Long> futureTask0 = new FutureTask<Long>((Runnable) measurementTask0, (Long) null);
      WatchedTask watchedTask0 = new WatchedTask((Future) futureTask0, measurementTask0, (Map<Long, WatchedTask>) null, false, (ServerAgent) xmlRpcServerClient0);
      watchedTask0.checkState();
      assertEquals(0L, watchedTask0.getRunningTime());
  }

  @Test
  public void test7()  throws Throwable  {
      System.setCurrentTimeMillis(692L);
      TestProbe1 testProbe1_0 = new TestProbe1();
      MeasurementRequest measurementRequest0 = new MeasurementRequest((ServerAgent) null, "dcaDh:L{lm", (Probe) testProbe1_0, 692L);
      BlackboardImpl blackboardImpl0 = new BlackboardImpl();
      MeasurementTask measurementTask0 = new MeasurementTask(measurementRequest0, (Blackboard) blackboardImpl0);
      HashMap<Long, WatchedTask> hashMap0 = new HashMap<Long, WatchedTask>();
      WatchedTask watchedTask0 = new WatchedTask((Future) null, measurementTask0, (Map<Long, WatchedTask>) hashMap0, true, (ServerAgent) null);
      measurementTask0.run();
      watchedTask0.checkState();
      assertEquals(0L, watchedTask0.getRunningTime());
  }
}
