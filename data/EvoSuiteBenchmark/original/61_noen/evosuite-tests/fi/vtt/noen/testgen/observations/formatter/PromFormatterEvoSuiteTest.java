/*
 * This file was automatically generated by EvoSuite
 */

package fi.vtt.noen.testgen.observations.formatter;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import fi.vtt.noen.testgen.observations.data.Event;
import fi.vtt.noen.testgen.observations.data.ProgramRun;
import fi.vtt.noen.testgen.observations.formatter.PromFormatter;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PromFormatterEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PromFormatter promFormatter0 = new PromFormatter((OutputStream) byteArrayOutputStream0);
      promFormatter0.header();
      assertEquals(862, byteArrayOutputStream0.size());
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<WorkflowLog xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"WorkflowLog.xsd\" description=\"Test data\">\n<Source program=\"Test suite for blaablaa\"/>\n<Process id=\"0\" description=\"test suite name\">\n</Process>\n</WorkflowLog>\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<WorkflowLog xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"WorkflowLog.xsd\" description=\"Test data\">\n<Source program=\"Test suite for blaablaa\"/>\n<Process id=\"0\" description=\"test suite name\">\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<WorkflowLog xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"WorkflowLog.xsd\" description=\"Test data\">\n<Source program=\"Test suite for blaablaa\"/>\n<Process id=\"0\" description=\"test suite name\">\n</Process>\n</WorkflowLog>\n", byteArrayOutputStream0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          PromFormatter promFormatter0 = null;
          try {
            promFormatter0 = new PromFormatter("VAfatkE[\u0003Id4b4dj!");
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission VAfatkE[\u0003Id4b4dj!.mxml write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:183)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:84)
             * fi.vtt.noen.testgen.observations.formatter.BasicFormatter.<init>(BasicFormatter.java:46)
             * fi.vtt.noen.testgen.observations.formatter.PromFormatter.<init>(PromFormatter.java:47)
             * sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             * sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)
             * sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)
             * java.lang.reflect.Constructor.newInstance(Constructor.java:513)
             * org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
      PromFormatter.reset();
  }

  @Test
  public void test3()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PromFormatter promFormatter0 = new PromFormatter((OutputStream) byteArrayOutputStream0);
      promFormatter0.footer();
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<WorkflowLog xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"WorkflowLog.xsd\" description=\"Test data\">\n<Source program=\"Test suite for blaablaa\"/>\n<Process id=\"0\" description=\"test suite name\">\n</Process>\n</WorkflowLog>\n</Process>\n</WorkflowLog>\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<WorkflowLog xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"WorkflowLog.xsd\" description=\"Test data\">\n<Source program=\"Test suite for blaablaa\"/>\n<Process id=\"0\" description=\"test suite name\">\n</Process>\n</WorkflowLog>\n", byteArrayOutputStream0.toString());
      assertEquals(618, byteArrayOutputStream0.size());
  }

  @Test
  public void test4()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PromFormatter promFormatter0 = new PromFormatter((OutputStream) byteArrayOutputStream0);
      ProgramRun programRun0 = new ProgramRun("VAfatkE[\u0003Id4b4dj!");
      Event event0 = new Event("VAfatkE[\u0003Id4b4dj!", 1076L);
      programRun0.add(event0);
      promFormatter0.observations(programRun0);
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<WorkflowLog xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"WorkflowLog.xsd\" description=\"Test data\">\n<Source program=\"Test suite for blaablaa\"/>\n<Process id=\"0\" description=\"test suite name\">\n</Process>\n</WorkflowLog>\n<ProcessInstance id=\"1\" description=\"VAfatkE[\u0003Id4b4dj!\">\n<AuditTrailEntry>\n<WorkflowModelElement>VAfatkE[\u0003Id4b4dj!</WorkflowModelElement>\n<EventType>start</EventType>\n<Timestamp>1970-01-01T1:0:0.0</Timestamp>\n</AuditTrailEntry>\n</ProcessInstance>\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<WorkflowLog xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"WorkflowLog.xsd\" description=\"Test data\">\n<Source program=\"Test suite for blaablaa\"/>\n<Process id=\"0\" description=\"test suite name\">\n</Process>\n</WorkflowLog>\n", byteArrayOutputStream0.toString());
      assertEquals(839, byteArrayOutputStream0.size());
  }

  @Test
  public void test5()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PromFormatter promFormatter0 = new PromFormatter((OutputStream) byteArrayOutputStream0);
      ProgramRun programRun0 = new ProgramRun("VAfatkE[\u0003Id4b4dj!");
      Event event0 = new Event("VAfatkE[\u0003Id4b4dj!", true);
      programRun0.add(event0);
      event0.addAttribute("VAfatkE[\u0003Id4b4dj!", "VAfatkE[\u0003Id4b4dj!");
      promFormatter0.observations(programRun0);
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<WorkflowLog xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"WorkflowLog.xsd\" description=\"Test data\">\n<Source program=\"Test suite for blaablaa\"/>\n<Process id=\"0\" description=\"test suite name\">\n</Process>\n</WorkflowLog>\n<ProcessInstance id=\"22\" description=\"VAfatkE[\u0003Id4b4dj!\">\n<AuditTrailEntry>\n<WorkflowModelElement>VAfatkE[\u0003Id4b4dj!</WorkflowModelElement>\n<EventType>complete</EventType>\n<Data>\n<Attribute name=\"VAfatkE[\u0003Id4b4dj!\">VAfatkE[\u0003Id4b4dj!</Attribute>\n</Data>\n<Timestamp>1970-01-01T1:0:0.0</Timestamp>\n</AuditTrailEntry>\n</ProcessInstance>\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<WorkflowLog xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"WorkflowLog.xsd\" description=\"Test data\">\n<Source program=\"Test suite for blaablaa\"/>\n<Process id=\"0\" description=\"test suite name\">\n</Process>\n</WorkflowLog>\n", byteArrayOutputStream0.toString());
      assertEquals(924, byteArrayOutputStream0.size());
  }
}
