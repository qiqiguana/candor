/*
 * This file was automatically generated by EvoSuite
 */

package fi.vtt.noen.testgen.model.daikon.constraints;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import fi.vtt.noen.testgen.model.daikon.constraints.ReferenceValue;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ReferenceValueEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ReferenceValue referenceValue0 = ReferenceValue.EMPTY_ARRAY;
      int int0 = referenceValue0.getIndex();
      assertEquals((-1), int0);
  }

  @Test
  public void test1()  throws Throwable  {
      ReferenceValue referenceValue0 = ReferenceValue.EMPTY_ARRAY;
      String string0 = referenceValue0.toString();
      assertNotNull(string0);
      assertEquals("reference:null", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      ReferenceValue referenceValue0 = ReferenceValue.EMPTY_ARRAY;
      String string0 = referenceValue0.getReferredVariable();
      assertNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      ReferenceValue referenceValue0 = ReferenceValue.EMPTY_ARRAY;
      boolean boolean0 = referenceValue0.isGlobal();
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      ReferenceValue referenceValue0 = new ReferenceValue("#V*%..?0", true);
      assertNotNull(referenceValue0);
      
      boolean boolean0 = referenceValue0.isArray();
      assertEquals(false, referenceValue0.isReturnValue());
      assertEquals(0, referenceValue0.getIndex());
      assertEquals(true, boolean0);
      assertEquals("#V*%..", referenceValue0.getReferredVariable());
      assertEquals(false, referenceValue0.isGlobal());
  }

  @Test
  public void test5()  throws Throwable  {
      ReferenceValue referenceValue0 = ReferenceValue.EMPTY_ARRAY;
      boolean boolean0 = referenceValue0.isReturnValue();
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      ReferenceValue referenceValue0 = new ReferenceValue("{cQ>>kJ[LJ?r", false);
      assertEquals(-1, referenceValue0.getIndex());
      assertEquals(false, referenceValue0.isGlobal());
      assertNotNull(referenceValue0);
      assertEquals(true, referenceValue0.isReturnValue());
      assertEquals("reference:{cQ>>kJ[LJ", referenceValue0.toString());
      assertEquals(false, referenceValue0.isArray());
  }
}
