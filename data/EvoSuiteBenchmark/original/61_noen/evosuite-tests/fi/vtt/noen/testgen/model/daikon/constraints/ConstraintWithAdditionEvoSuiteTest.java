/*
 * This file was automatically generated by EvoSuite
 */

package fi.vtt.noen.testgen.model.daikon.constraints;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import fi.vtt.noen.testgen.model.daikon.constraints.LesserOrEqualConstraint;
import fi.vtt.noen.testgen.model.daikon.constraints.SizeOfConstraint;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ConstraintWithAdditionEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LesserOrEqualConstraint lesserOrEqualConstraint0 = new LesserOrEqualConstraint("f?6", "f?6");
      String string0 = lesserOrEqualConstraint0.guardMethod();
      assertEquals("  public boolean fIsNotLesserOrEqualf() {\n    if (f <= f) {\n      return false;\n    }\n    return true;\n  }\n", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      SizeOfConstraint sizeOfConstraint0 = null;
      try {
        sizeOfConstraint0 = new SizeOfConstraint("<Y :+5", "<Y :+5");
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * java.lang.String cannot be cast to fi.vtt.noen.testgen.model.daikon.constraints.ReferenceValue
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      SizeOfConstraint sizeOfConstraint0 = null;
      try {
        sizeOfConstraint0 = new SizeOfConstraint("  return false;", "  return false;");
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * java.lang.String cannot be cast to fi.vtt.noen.testgen.model.daikon.constraints.ReferenceValue
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      SizeOfConstraint sizeOfConstraint0 = null;
      try {
        sizeOfConstraint0 = new SizeOfConstraint("WIL;4>wm&7|3?9sX-4", "WIL;4>wm&7|3?9sX-4");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
        /*
         * For input string: \"9sX\"
         */
      }
  }
}
