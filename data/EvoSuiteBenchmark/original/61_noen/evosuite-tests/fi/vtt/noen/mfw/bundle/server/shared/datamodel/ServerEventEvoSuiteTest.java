/*
 * This file was automatically generated by EvoSuite
 */

package fi.vtt.noen.mfw.bundle.server.shared.datamodel;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import fi.vtt.noen.mfw.bundle.common.EventType;
import fi.vtt.noen.mfw.bundle.server.shared.datamodel.ServerEvent;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ServerEventEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      EventType eventType0 = EventType.NEW_MEASUREMENT_REQUEST;
      ServerEvent serverEvent0 = new ServerEvent(401L, eventType0, "P4-xOLsV=:((", "P4-xOLsV=:((", (-1739L));
      String string0 = serverEvent0.getTimeString();
      assertEquals((-1739L), serverEvent0.getSubscriptionId());
      assertEquals("01-Jan-1970 01:00:00", string0);
      assertNotNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      EventType eventType0 = EventType.NEW_MEASUREMENT_REQUEST;
      ServerEvent serverEvent0 = new ServerEvent(401L, eventType0, "P4-xOLsV=:((", "P4-xOLsV=:((", (-1739L));
      long long0 = serverEvent0.getSubscriptionId();
      assertEquals((-1739L), long0);
      assertEquals(401L, serverEvent0.getTime());
  }

  @Test
  public void test2()  throws Throwable  {
      ServerEvent serverEvent0 = new ServerEvent();
      String string0 = serverEvent0.getMessage();
      assertNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      ServerEvent serverEvent0 = new ServerEvent();
      // Undeclared exception!
      try {
        serverEvent0.getTime();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      ServerEvent serverEvent0 = new ServerEvent();
      String string0 = serverEvent0.getSource();
      assertNull(string0);
  }

  @Test
  public void test5()  throws Throwable  {
      EventType eventType0 = EventType.PROBE_HUNG;
      ServerEvent serverEvent0 = new ServerEvent(0L, eventType0, "Qd6M=Of", "Qd6M=Of");
      assertEquals((-1L), serverEvent0.getSubscriptionId());
  }
}
