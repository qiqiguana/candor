/*
 * This file was automatically generated by EvoSuite
 */

package fi.vtt.noen.testgen.model.daikon.constraints;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import fi.vtt.noen.testgen.model.daikon.constraints.AlwaysInArrayConstraint;
import fi.vtt.noen.testgen.model.daikon.constraints.ArrayElementsConstraint;
import fi.vtt.noen.testgen.model.daikon.constraints.EqualsConstraint;
import fi.vtt.noen.testgen.model.daikon.constraints.GreaterConstraint;
import fi.vtt.noen.testgen.model.daikon.constraints.GreaterOrEqualConstraint;
import fi.vtt.noen.testgen.model.daikon.constraints.LesserOrEqualConstraint;
import fi.vtt.noen.testgen.model.daikon.constraints.NonEqualConstraint;
import java.util.Collection;
import java.util.LinkedList;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DaikonConstraintEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LesserOrEqualConstraint lesserOrEqualConstraint0 = new LesserOrEqualConstraint("up?1", "up?1");
      assertNotNull(lesserOrEqualConstraint0);
      
      boolean boolean0 = lesserOrEqualConstraint0.isTrue();
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      GreaterConstraint greaterConstraint0 = new GreaterConstraint("up?1", "up?1");
      assertNotNull(greaterConstraint0);
      
      double double0 = greaterConstraint0.max();
      assertEquals((-2.147483648E9), double0, 0.01D);
  }

  @Test
  public void test2()  throws Throwable  {
      GreaterConstraint greaterConstraint0 = new GreaterConstraint("IrLpE?1", "IrLpE?1");
      String string0 = greaterConstraint0.parameterValues("true");
      assertNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      LesserOrEqualConstraint lesserOrEqualConstraint0 = new LesserOrEqualConstraint("up?1", "up?1");
      assertNotNull(lesserOrEqualConstraint0);
      
      String string0 = lesserOrEqualConstraint0.guardMethod();
      assertNotNull(string0);
      assertEquals("  public boolean upIsNotLesserOrEqualup() {\n    if (up <= up) {\n      return false;\n    }\n    return true;\n  }\n", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      GreaterConstraint greaterConstraint0 = new GreaterConstraint("up?1", "up?1");
      assertNotNull(greaterConstraint0);
      
      int int0 = greaterConstraint0.getIndex();
      assertEquals(1, int0);
  }

  @Test
  public void test5()  throws Throwable  {
      ArrayElementsConstraint arrayElementsConstraint0 = new ArrayElementsConstraint("IrLpE?1", "IrLpE?1");
      double double0 = arrayElementsConstraint0.min();
      assertEquals(2.147483647E9, double0, 0.01D);
  }

  @Test
  public void test6()  throws Throwable  {
      EqualsConstraint equalsConstraint0 = new EqualsConstraint("up?1", "    if (up <= up) {\n      return false;\n    }\n");
      boolean boolean0 = equalsConstraint0.isFalse();
      assertEquals(true, equalsConstraint0.isEnabled());
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      LesserOrEqualConstraint lesserOrEqualConstraint0 = new LesserOrEqualConstraint("IrLpE?1", "IrLpE?1");
      Collection<String> collection0 = lesserOrEqualConstraint0.arrayNames();
      assertEquals(true, collection0.isEmpty());
  }

  @Test
  public void test8()  throws Throwable  {
      ArrayElementsConstraint arrayElementsConstraint0 = new ArrayElementsConstraint("IrLpE?1", "IrLpE?1");
      String string0 = arrayElementsConstraint0.lexicalAssert("IrLpE?1", "IrLpE?1", "IrLpE?1");
      assertEquals("    Iterator i1 = IrLpE?1.iterator();\n    Iterator i2 = IrLpE?1.iterator();\n    while (i1.hasNext()) {\n      Number n1 = (Number)i1.next();\n      Number n2 = (Number)i2.next();\n      assertTrue(n1 IrLpE?1 n2);\n    }\n", string0);
      assertNotNull(string0);
  }

  @Test
  public void test9()  throws Throwable  {
      ArrayElementsConstraint arrayElementsConstraint0 = new ArrayElementsConstraint("uLp!F?2", "uLp!F?2");
      String string0 = arrayElementsConstraint0.guardInvocation();
      assertEquals("", string0);
  }

  @Test
  public void test10()  throws Throwable  {
      NonEqualConstraint nonEqualConstraint0 = new NonEqualConstraint("dLp-?1", "dLp-?1");
      // Undeclared exception!
      try {
        nonEqualConstraint0.parseArrayName("false");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 1
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      ArrayElementsConstraint arrayElementsConstraint0 = new ArrayElementsConstraint("up?1", "up?1");
      String string0 = arrayElementsConstraint0.lexicalJava("    if (up <= up) {\n      return false;\n    }\n", "    if (up <= up) {\n      return false;\n    }\n", "    if (up <= up) {\n      return false;\n    }\n");
      assertEquals("    Iterator i1 =     if (up <= up) {\n      return false;\n    }\n.iterator();\n    Iterator i2 =     if (up <= up) {\n      return false;\n    }\n.iterator();\n    while (i1.hasNext()) {\n      Object o1 = i1.next();\n      Object o2 = i2.next();\n      if (o1.hashCode()     if (up <= up) {\n      return false;\n    }\n o2.hashCode()) {\n        return false;\n      }\n    }\n", string0);
      assertNotNull(string0);
  }

  @Test
  public void test12()  throws Throwable  {
      ArrayElementsConstraint arrayElementsConstraint0 = new ArrayElementsConstraint("IrLpE?1", "IrLpE?1");
      boolean boolean0 = arrayElementsConstraint0.isGlobal();
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      LesserOrEqualConstraint lesserOrEqualConstraint0 = new LesserOrEqualConstraint("up?1", "up?1");
      // Undeclared exception!
      try {
        lesserOrEqualConstraint0.asAssert("    Iterator i1 =     if (up <= up) {\n      return false;\n    }\n.iterator();\n    Iterator i2 =     if (up <= up) {\n      return false;\n    }\n.iterator();\n    while (i1.hasNext()) {\n      Object o1 = i1.next();\n      Object o2 = i2.next();\n      if (o1.hashCode()     if (up <= up) {\n      return false;\n    }\n o2.hashCode()) {\n        return false;\n      }\n    }\n");
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Assert generation is not supported for this constraint.
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      GreaterOrEqualConstraint greaterOrEqualConstraint0 = new GreaterOrEqualConstraint("L%p^WE?1", "L%p^WE?1");
      // Undeclared exception!
      try {
        greaterOrEqualConstraint0.returnValue();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * This is not a return value constraint:reference:L%p^WE >= reference:L%p^WE
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      EqualsConstraint equalsConstraint0 = new EqualsConstraint("uLp!F?2", "    if (uLp!F <= uLp!F) {\n      return false;\n    }\n");
      boolean boolean0 = equalsConstraint0.isEnabled();
      assertEquals(true, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      ArrayElementsConstraint arrayElementsConstraint0 = new ArrayElementsConstraint("up?1", "up?1");
      boolean boolean0 = arrayElementsConstraint0.isEnabled();
      assertEquals(false, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      GreaterOrEqualConstraint greaterOrEqualConstraint0 = new GreaterOrEqualConstraint("uLpa{E?r", "uLpa{E?r");
      assertNotNull(greaterOrEqualConstraint0);
      
      String string0 = greaterOrEqualConstraint0.returnValue();
      assertEquals("uLpa{E", string0);
      assertNotNull(string0);
  }

  @Test
  public void test18()  throws Throwable  {
      ArrayElementsConstraint arrayElementsConstraint0 = new ArrayElementsConstraint("up?1", "up?1");
      String string0 = arrayElementsConstraint0.createCondition("up?1", 1);
      assertNotNull(string0);
      assertEquals("    Object expected = up;\n    for (Object o : up) {\n      if (expected.equals(o)) {\n        return false;\n      }\n    }\n", arrayElementsConstraint0.toJava());
      assertEquals("      if (up?1) {\n        return false;\n      }\n", string0);
  }

  @Test
  public void test19()  throws Throwable  {
      NonEqualConstraint nonEqualConstraint0 = new NonEqualConstraint("up?1", "up?1");
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      linkedList0.add((Boolean) false);
      linkedList0.add((Boolean) false);
      String string0 = nonEqualConstraint0.stringFrom((Collection) linkedList0);
      assertNotNull(string0);
      assertEquals("false,false", string0);
  }

  @Test
  public void test20()  throws Throwable  {
      LesserOrEqualConstraint lesserOrEqualConstraint0 = new LesserOrEqualConstraint("dLp-?1", "dLp-?1");
      assertNotNull(lesserOrEqualConstraint0);
      
      Boolean boolean0 = new Boolean("dLp-?1");
      String string0 = lesserOrEqualConstraint0.valueObjectToString((Object) boolean0);
      assertNotNull(string0);
      assertEquals("    if (dLp- <= dLp-) {\n      return false;\n    }\n", lesserOrEqualConstraint0.toJava());
  }

  @Test
  public void test21()  throws Throwable  {
      ArrayElementsConstraint arrayElementsConstraint0 = new ArrayElementsConstraint("dLp-?1", "-1");
      String string0 = arrayElementsConstraint0.toString();
      assertNotNull(string0);
      assertEquals(true, arrayElementsConstraint0.isEnabled());
      assertEquals("reference:dLp- elements == -1.0", string0);
  }

  @Test
  public void test22()  throws Throwable  {
      GreaterOrEqualConstraint greaterOrEqualConstraint0 = new GreaterOrEqualConstraint("uLpa{E?r", "uLpa{E?r");
      assertNotNull(greaterOrEqualConstraint0);
      
      // Undeclared exception!
      try {
        greaterOrEqualConstraint0.valueObjectToString((Object) greaterOrEqualConstraint0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Unsupport Daikon value object:class fi.vtt.noen.testgen.model.daikon.constraints.GreaterOrEqualConstraint
         */
      }
  }

  @Test
  public void test23()  throws Throwable  {
      LesserOrEqualConstraint lesserOrEqualConstraint0 = new LesserOrEqualConstraint("uLp!F?2", "uLp!F?2");
      assertNotNull(lesserOrEqualConstraint0);
      
      String string0 = lesserOrEqualConstraint0.valueObjectToString((Object) "uLp!FIsNotInuLp!F");
      assertEquals("\"uLp!FIsNotInuLp!F\"", string0);
      assertNotNull(string0);
  }

  @Test
  public void test24()  throws Throwable  {
      GreaterOrEqualConstraint greaterOrEqualConstraint0 = new GreaterOrEqualConstraint("dLp-?1", "dLp-?1");
      assertNotNull(greaterOrEqualConstraint0);
      
      Short short0 = new Short((short) (-1));
      String string0 = greaterOrEqualConstraint0.valueObjectToGuardString((Object) short0);
      assertNotNull(string0);
      assertEquals("-1", string0);
  }

  @Test
  public void test25()  throws Throwable  {
      AlwaysInArrayConstraint alwaysInArrayConstraint0 = new AlwaysInArrayConstraint("uLp!F?2", "uLp!F?2");
      String string0 = alwaysInArrayConstraint0.valueObjectToGuardString((Object) true);
      assertNotNull(string0);
      assertEquals("  public boolean uLp!FIsNotInuLp!F() {\n    if (uLp!F.contains(uLp!F)) {\n      return false;\n    }\n    return true;\n  }\n", alwaysInArrayConstraint0.guardMethod());
  }

  @Test
  public void test26()  throws Throwable  {
      GreaterOrEqualConstraint greaterOrEqualConstraint0 = new GreaterOrEqualConstraint("dLp-?1", "dLp-?1");
      String string0 = greaterOrEqualConstraint0.valueObjectToGuardString((Object) "reference:dLp- elements == -1.0");
      assertEquals("reference:dLp- elements == -1.0", string0);
  }

  @Test
  public void test27()  throws Throwable  {
      AlwaysInArrayConstraint alwaysInArrayConstraint0 = new AlwaysInArrayConstraint("uLp!F?2", "uLp!F?2");
      String string0 = alwaysInArrayConstraint0.guardName();
      assertEquals("uLp!FIsNotInuLp!F", string0);
      assertNotNull(string0);
  }

  @Test
  public void test28()  throws Throwable  {
      LesserOrEqualConstraint lesserOrEqualConstraint0 = new LesserOrEqualConstraint("uLp!F?2", "uLp!F?2");
      assertNotNull(lesserOrEqualConstraint0);
      
      AlwaysInArrayConstraint alwaysInArrayConstraint0 = new AlwaysInArrayConstraint("uLp!F?2", "uLp!F?2");
      // Undeclared exception!
      try {
        lesserOrEqualConstraint0.valueObjectToGuardString((Object) alwaysInArrayConstraint0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Unsupport Daikon value object:class fi.vtt.noen.testgen.model.daikon.constraints.AlwaysInArrayConstraint
         */
      }
  }

  @Test
  public void test29()  throws Throwable  {
      LesserOrEqualConstraint lesserOrEqualConstraint0 = new LesserOrEqualConstraint("IrLpE?1", "IrLpE?1");
      assertNotNull(lesserOrEqualConstraint0);
      
      Boolean boolean0 = Boolean.TRUE;
      String string0 = lesserOrEqualConstraint0.valueObjectToGuardObject((Object) boolean0);
      assertNotNull(string0);
      assertEquals("IrLpEIsNotLesserOrEqualIrLpE", lesserOrEqualConstraint0.guardName());
  }

  @Test
  public void test30()  throws Throwable  {
      GreaterConstraint greaterConstraint0 = new GreaterConstraint("IrLpE?1", "IrLpE?1");
      assertNotNull(greaterConstraint0);
      
      Integer integer0 = new Integer((-1));
      String string0 = greaterConstraint0.valueObjectToGuardObject((Object) integer0);
      assertEquals("-1", string0);
      assertEquals("  public boolean IrLpEIsNotGreaterThanIrLpE() {\n    if (IrLpE > IrLpE) {\n      return false;\n    }\n    return true;\n  }\n", greaterConstraint0.guardMethod());
      assertNotNull(string0);
  }

  @Test
  public void test31()  throws Throwable  {
      ArrayElementsConstraint arrayElementsConstraint0 = new ArrayElementsConstraint("IrLpE?1", "IrLpE?1");
      // Undeclared exception!
      try {
        arrayElementsConstraint0.valueObjectToGuardObject((Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test32()  throws Throwable  {
      LesserOrEqualConstraint lesserOrEqualConstraint0 = new LesserOrEqualConstraint("up?1", "up?1");
      assertNotNull(lesserOrEqualConstraint0);
      
      String string0 = lesserOrEqualConstraint0.valueObjectToGuardObject((Object) "    Iterator i1 =     if (up <= up) {\n      return false;\n    }\n.iterator();\n    Iterator i2 =     if (up <= up) {\n      return false;\n    }\n.iterator();\n    while (i1.hasNext()) {\n      Object o1 = i1.next();\n      Object o2 = i2.next();\n      if (o1.hashCode()     if (up <= up) {\n      return false;\n    }\n o2.hashCode()) {\n        return false;\n      }\n    }\n");
      assertNotNull(string0);
      assertEquals("_    Iterator i1 =     if (up <= up) {\n      return false;\n    }\n.iterator();\n    Iterator i2 =     if (up <= up) {\n      return false;\n    }\n.iterator();\n    while (i1.hasNext()) {\n      Object o1 = i1.next();\n      Object o2 = i2.next();\n      if (o1.hashCode()     if (up <= up) {\n      return false;\n    }\n o2.hashCode()) {\n        return false;\n      }\n    }\n_", string0);
  }
}
