/*
 * This file was automatically generated by EvoSuite
 */

package fi.vtt.noen.testgen.parser;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import fi.vtt.noen.testgen.model.daikon.constraints.DaikonConstraint;
import fi.vtt.noen.testgen.parser.DaikonParser;
import java.util.Collection;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DaikonParserEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      String string0 = DaikonParser.parseEventName("WSzki=");
      assertEquals("WSzki=", string0);
      assertNotNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      DaikonParser daikonParser0 = null;
      try {
        daikonParser0 = new DaikonParser("ae");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      Collection<String> collection0 = DaikonParser.items("c:z\n");
      assertEquals(1, collection0.size());
      assertNotNull(collection0);
  }

  @Test
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try {
        DaikonParser.constraint(" == \"E");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Cannot parseLexical value from empty string
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      DaikonConstraint daikonConstraint0 = DaikonParser.constraint("");
      assertNull(daikonConstraint0);
  }

  @Test
  public void test5()  throws Throwable  {
      DaikonConstraint daikonConstraint0 = DaikonParser.constraint("\"%*XUJOk@]fm{^WKO");
      assertNull(daikonConstraint0);
  }

  @Test
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try {
        DaikonParser.constraint("Parameterindex should be >= 0, 'g' for globals or 'r' for return values. Was:");
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * java.lang.String cannot be cast to fi.vtt.noen.testgen.model.daikon.constraints.ReferenceValue
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      // Undeclared exception!
      try {
        DaikonParser.constraint("size( == zsizE`(");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
        /*
         * String index out of range: -1
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      // Undeclared exception!
      try {
        DaikonParser.constraint("size(2v;S-}X");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 1
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      // Undeclared exception!
      try {
        DaikonParser.constraint("c:z\n");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Unsupported contraint:c:z
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      Collection<Object> collection0 = DaikonParser.parseObjectList("[*N?z8e[gm>'[]");
      assertNotNull(collection0);
      assertEquals(1, collection0.size());
  }

  @Test
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try {
        DaikonParser.parseObjectList("[I^FAY?{M");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
        /*
         * For input string: \"{M\"
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      Collection<Object> collection0 = DaikonParser.parseObjectList("*N(A$eQgm>'[]");
      assertNotNull(collection0);
      assertEquals(false, collection0.isEmpty());
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = (String)DaikonParser.parseValueObject("\"b/3uUOkowfmU~{^WKK\"");
      assertEquals("b/3uUOkowfmU~{^WKK", string0);
      assertNotNull(string0);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = (String)DaikonParser.parseValueObject("\"%*XUJOk@]fm{^WKO");
      assertNotNull(string0);
      assertEquals("\"%*XUJOk@]fm{^WKO", string0);
  }

  @Test
  public void test15()  throws Throwable  {
      Boolean boolean0 = (Boolean)DaikonParser.parseValueObject("true");
      assertEquals(true, (boolean)boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      Boolean boolean0 = (Boolean)DaikonParser.parseValueObject("false");
      assertEquals(false, (boolean)boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      Collection<String> collection0 = DaikonParser.parseStringList("ae");
      assertNotNull(collection0);
      assertEquals(0, collection0.size());
  }

  @Test
  public void test18()  throws Throwable  {
      Collection<Object> collection0 = DaikonParser.parseObjectList("");
      assertEquals(0, collection0.size());
  }
}
