/*
 * This file was automatically generated by EvoSuite
 */

package fi.vtt.noen.testgen.model.daikon.constraints;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import fi.vtt.noen.testgen.model.daikon.constraints.GreaterOrEqualConstraint;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class GreaterOrEqualConstraintEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      GreaterOrEqualConstraint greaterOrEqualConstraint0 = new GreaterOrEqualConstraint("iUxb:`G?2", "iUxb:`G?2");
      assertNotNull(greaterOrEqualConstraint0);
      
      greaterOrEqualConstraint0.max();
      assertEquals(false, greaterOrEqualConstraint0.isEnabled());
      assertEquals("  public boolean iUxb:`GIsNotGreaterOrEqualThaniUxb:`G() {\n    if (iUxb:`G >= iUxb:`G) {\n      return false;\n    }\n    return true;\n  }\n", greaterOrEqualConstraint0.guardMethod());
  }

  @Test
  public void test1()  throws Throwable  {
      GreaterOrEqualConstraint greaterOrEqualConstraint0 = new GreaterOrEqualConstraint("iUxb:`G?2", "iUxb:`G?2");
      assertNotNull(greaterOrEqualConstraint0);
      
      String string0 = greaterOrEqualConstraint0.guardMethod();
      assertEquals("  public boolean iUxb:`GIsNotGreaterOrEqualThaniUxb:`G() {\n    if (iUxb:`G >= iUxb:`G) {\n      return false;\n    }\n    return true;\n  }\n", string0);
      assertNotNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      GreaterOrEqualConstraint greaterOrEqualConstraint0 = new GreaterOrEqualConstraint("TWf[^{:>F{`@?2", "TWf[^{:>F{`@?2");
      assertNotNull(greaterOrEqualConstraint0);
      
      String string0 = greaterOrEqualConstraint0.asAssert("TWf[^{:>F{`@?2");
      assertEquals("  public boolean TWf[^{:>F{`@IsNotGreaterOrEqualThanTWf[^{:>F{`@() {\n    if (TWf[^{:>F{`@ >= TWf[^{:>F{`@) {\n      return false;\n    }\n    return true;\n  }\n", greaterOrEqualConstraint0.guardMethod());
      assertEquals("assertTrue(TWf[^{:>F{`@?2 >= TWf[^{:>F{`@);\n", string0);
      assertNotNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      GreaterOrEqualConstraint greaterOrEqualConstraint0 = null;
      try {
        greaterOrEqualConstraint0 = new GreaterOrEqualConstraint("size-", "size-");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
        /*
         * For input string: \"-\"
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      GreaterOrEqualConstraint greaterOrEqualConstraint0 = null;
      try {
        greaterOrEqualConstraint0 = new GreaterOrEqualConstraint("", "sizeOB<p@HWMX)");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 1
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      GreaterOrEqualConstraint greaterOrEqualConstraint0 = new GreaterOrEqualConstraint("TWf[^{:>F{`@?2", "TWf[^{:>F{`@?2");
      assertNotNull(greaterOrEqualConstraint0);
      
      greaterOrEqualConstraint0.min();
      assertEquals(false, greaterOrEqualConstraint0.isEnabled());
      assertEquals("reference:TWf[^{:>F{`@ >= reference:TWf[^{:>F{`@", greaterOrEqualConstraint0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      GreaterOrEqualConstraint greaterOrEqualConstraint0 = new GreaterOrEqualConstraint("TWf[^{:>F{`@?2", "TWf[^{:>F{`@?2");
      assertNotNull(greaterOrEqualConstraint0);
      
      String string0 = greaterOrEqualConstraint0.toString();
      assertEquals("reference:TWf[^{:>F{`@ >= reference:TWf[^{:>F{`@", string0);
      assertNotNull(string0);
  }

  @Test
  public void test7()  throws Throwable  {
      GreaterOrEqualConstraint greaterOrEqualConstraint0 = new GreaterOrEqualConstraint("iUxb:`G?2", "iUxb:`G?2");
      assertNotNull(greaterOrEqualConstraint0);
      
      String string0 = greaterOrEqualConstraint0.guardInvocation();
      assertNotNull(string0);
      assertEquals(false, greaterOrEqualConstraint0.isEnabled());
      assertEquals("  public boolean iUxb:`GIsNotGreaterOrEqualThaniUxb:`G() {\n    if (iUxb:`G >= iUxb:`G) {\n      return false;\n    }\n    return true;\n  }\n", greaterOrEqualConstraint0.guardMethod());
  }
}
