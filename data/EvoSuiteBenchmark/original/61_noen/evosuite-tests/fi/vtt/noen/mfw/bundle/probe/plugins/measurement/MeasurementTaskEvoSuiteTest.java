/*
 * This file was automatically generated by EvoSuite
 */

package fi.vtt.noen.mfw.bundle.probe.plugins.measurement;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import fi.vtt.noen.mfw.bundle.blackboard.Blackboard;
import fi.vtt.noen.mfw.bundle.blackboard.BlackboardImpl;
import fi.vtt.noen.mfw.bundle.probe.plugins.measurement.MeasurementTask;
import fi.vtt.noen.mfw.bundle.probe.shared.MeasurementRequest;
import fi.vtt.noen.mfw.bundle.probe.shared.Probe;
import fi.vtt.noen.mfw.bundle.server.shared.ServerAgent;
import fi.vtt.noen.mfw.probes.http.HTTPProbeAgent;
import fi.vtt.noen.mfw.probes.tester.TestProbe1;
import fi.vtt.noen.mfw.probes.tester.TestProbe2;
import fi.vtt.noen.mfw.probes.tester.TestProbe4;
import fi.vtt.noen.mfw.probes.tester.TestProbeWithCompareMode;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MeasurementTaskEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      TestProbe4 testProbe4_0 = new TestProbe4();
      MeasurementRequest measurementRequest0 = new MeasurementRequest((ServerAgent) null, "", (Probe) testProbe4_0, 0L, 0L);
      BlackboardImpl blackboardImpl0 = new BlackboardImpl();
      MeasurementTask measurementTask0 = new MeasurementTask(measurementRequest0, (Blackboard) blackboardImpl0);
      measurementTask0.setCompare(true);
  }

  @Test
  public void test1()  throws Throwable  {
      HTTPProbeAgent hTTPProbeAgent0 = new HTTPProbeAgent();
      MeasurementRequest measurementRequest0 = new MeasurementRequest((ServerAgent) null, "^]J", (Probe) hTTPProbeAgent0, (-853L), (-853L));
      BlackboardImpl blackboardImpl0 = new BlackboardImpl();
      MeasurementTask measurementTask0 = new MeasurementTask(measurementRequest0, (Blackboard) blackboardImpl0);
      assertNotNull(measurementTask0);
      
      measurementTask0.getProbeInfo();
      assertEquals(false, measurementTask0.isRunning());
  }

  @Test
  public void test2()  throws Throwable  {
      TestProbeWithCompareMode testProbeWithCompareMode0 = new TestProbeWithCompareMode();
      MeasurementRequest measurementRequest0 = new MeasurementRequest((ServerAgent) null, "\"@rX3q;HZaJE/&bKO", (Probe) testProbeWithCompareMode0, 302L);
      BlackboardImpl blackboardImpl0 = new BlackboardImpl();
      MeasurementTask measurementTask0 = new MeasurementTask(measurementRequest0, (Blackboard) blackboardImpl0);
      assertNotNull(measurementTask0);
      
      measurementTask0.getStartTime();
      assertEquals(false, measurementTask0.isRunning());
  }

  @Test
  public void test3()  throws Throwable  {
      HTTPProbeAgent hTTPProbeAgent0 = new HTTPProbeAgent();
      MeasurementRequest measurementRequest0 = new MeasurementRequest((ServerAgent) null, "^]J", (Probe) hTTPProbeAgent0, (-853L), (-853L));
      BlackboardImpl blackboardImpl0 = new BlackboardImpl();
      MeasurementTask measurementTask0 = new MeasurementTask(measurementRequest0, (Blackboard) blackboardImpl0);
      assertNotNull(measurementTask0);
      
      Long long0 = measurementTask0.getSubscriptionId();
      assertEquals(false, measurementTask0.isRunning());
      assertEquals((-853L), (long)long0);
  }

  @Test
  public void test4()  throws Throwable  {
      TestProbeWithCompareMode testProbeWithCompareMode0 = new TestProbeWithCompareMode();
      MeasurementRequest measurementRequest0 = new MeasurementRequest((ServerAgent) null, "\"Zz({gKjR_t", (Probe) testProbeWithCompareMode0, (-1L), (-1L));
      BlackboardImpl blackboardImpl0 = new BlackboardImpl();
      MeasurementTask measurementTask0 = new MeasurementTask(measurementRequest0, (Blackboard) blackboardImpl0);
      assertNotNull(measurementTask0);
      
      TestProbeWithCompareMode testProbeWithCompareMode1 = (TestProbeWithCompareMode)measurementTask0.getProbe();
      assertNotNull(testProbeWithCompareMode1);
      assertEquals(false, measurementTask0.isRunning());
  }

  @Test
  public void test5()  throws Throwable  {
      TestProbe2 testProbe2_0 = new TestProbe2();
      MeasurementRequest measurementRequest0 = new MeasurementRequest((ServerAgent) null, "", (Probe) testProbe2_0);
      BlackboardImpl blackboardImpl0 = new BlackboardImpl();
      MeasurementTask measurementTask0 = new MeasurementTask(measurementRequest0, (Blackboard) blackboardImpl0);
      assertNotNull(measurementTask0);
      
      boolean boolean0 = measurementTask0.isRunning();
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      TestProbeWithCompareMode testProbeWithCompareMode0 = new TestProbeWithCompareMode();
      MeasurementRequest measurementRequest0 = new MeasurementRequest((ServerAgent) null, "\"@rX3q;HZaJE/&bKO", (Probe) testProbeWithCompareMode0, 302L);
      BlackboardImpl blackboardImpl0 = new BlackboardImpl();
      MeasurementTask measurementTask0 = new MeasurementTask(measurementRequest0, (Blackboard) blackboardImpl0);
      assertNotNull(measurementTask0);
      
      measurementTask0.setReference("\"@rX3q;HZaJE/&bKO");
      measurementTask0.run();
      assertEquals(false, measurementTask0.isRunning());
  }

  @Test
  public void test7()  throws Throwable  {
      TestProbeWithCompareMode testProbeWithCompareMode0 = new TestProbeWithCompareMode();
      MeasurementRequest measurementRequest0 = new MeasurementRequest((ServerAgent) null, "\"Zz({gKjR_t", (Probe) testProbeWithCompareMode0, (-1L), (-1L));
      BlackboardImpl blackboardImpl0 = new BlackboardImpl();
      MeasurementTask measurementTask0 = new MeasurementTask(measurementRequest0, (Blackboard) blackboardImpl0);
      assertNotNull(measurementTask0);
      
      measurementTask0.run();
      assertEquals(false, measurementTask0.isRunning());
  }

  @Test
  public void test8()  throws Throwable  {
      TestProbe2 testProbe2_0 = new TestProbe2();
      MeasurementRequest measurementRequest0 = new MeasurementRequest((ServerAgent) null, "", (Probe) testProbe2_0);
      BlackboardImpl blackboardImpl0 = new BlackboardImpl();
      MeasurementTask measurementTask0 = new MeasurementTask(measurementRequest0, (Blackboard) blackboardImpl0);
      assertNotNull(measurementTask0);
      
      measurementTask0.run();
      assertEquals(false, measurementTask0.isRunning());
  }

  @Test
  public void test9()  throws Throwable  {
      TestProbe1 testProbe1_0 = new TestProbe1();
      MeasurementRequest measurementRequest0 = new MeasurementRequest((ServerAgent) null, "l8^m4eL'5[", (Probe) testProbe1_0, 107L);
      BlackboardImpl blackboardImpl0 = new BlackboardImpl();
      MeasurementTask measurementTask0 = new MeasurementTask(measurementRequest0, (Blackboard) blackboardImpl0);
      assertNotNull(measurementTask0);
      
      long long0 = measurementTask0.getRunningTime();
      assertEquals(false, measurementTask0.isRunning());
      assertEquals(0L, long0);
  }
}
