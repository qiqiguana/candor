/*
 * This file was automatically generated by EvoSuite
 */

package fi.vtt.noen.mfw.bundle.server.plugins.webui.availabilitypage;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import fi.vtt.noen.mfw.bundle.server.plugins.webui.availabilitypage.DeviceDesc;
import fi.vtt.noen.mfw.bundle.server.plugins.webui.availabilitypage.DeviceListDataProvider;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DeviceListDataProviderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LinkedList<DeviceDesc> linkedList0 = new LinkedList<DeviceDesc>();
      DeviceListDataProvider deviceListDataProvider0 = new DeviceListDataProvider((List<DeviceDesc>) linkedList0);
      DeviceDesc deviceDesc0 = new DeviceDesc((-1741L), "XFz4", "XFz4", true);
      deviceListDataProvider0.model(deviceDesc0);
  }

  @Test
  public void test1()  throws Throwable  {
      LinkedList<DeviceDesc> linkedList0 = new LinkedList<DeviceDesc>();
      DeviceListDataProvider deviceListDataProvider0 = new DeviceListDataProvider((List<DeviceDesc>) linkedList0);
      int int0 = deviceListDataProvider0.size();
      assertEquals(0, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      LinkedList<DeviceDesc> linkedList0 = new LinkedList<DeviceDesc>();
      DeviceListDataProvider deviceListDataProvider0 = new DeviceListDataProvider((List<DeviceDesc>) linkedList0);
      deviceListDataProvider0.setSort("Zo.keJaaFmH?qZU", false);
      // Undeclared exception!
      try {
        deviceListDataProvider0.iterator((-373), (-373));
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * fromIndex = -373
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      LinkedList<DeviceDesc> linkedList0 = new LinkedList<DeviceDesc>();
      DeviceListDataProvider deviceListDataProvider0 = new DeviceListDataProvider((List<DeviceDesc>) linkedList0);
      Iterator<DeviceDesc> iterator0 = deviceListDataProvider0.iterator(0, 0);
      assertEquals(false, iterator0.hasNext());
  }
}
