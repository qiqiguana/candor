/*
 * This file was automatically generated by EvoSuite
 */

package fi.vtt.noen.testgen.model.invariants;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import fi.vtt.noen.testgen.model.invariants.InvariantValueRange;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class InvariantValueRangeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      InvariantValueRange invariantValueRange0 = new InvariantValueRange("VALUE_RANGE");
      int int0 = invariantValueRange0.getMax();
      assertEquals(2147483647, invariantValueRange0.getMin());
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      InvariantValueRange invariantValueRange0 = new InvariantValueRange("VALUE_RANGE");
      assertEquals(-2147483648, invariantValueRange0.getMax());
      
      invariantValueRange0.setMax(0);
      assertEquals(2147483647, invariantValueRange0.getMin());
  }

  @Test
  public void test2()  throws Throwable  {
      InvariantValueRange invariantValueRange0 = new InvariantValueRange("VALUE_RANGE");
      int int0 = invariantValueRange0.getMin();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(-2147483648, invariantValueRange0.getMax());
  }

  @Test
  public void test3()  throws Throwable  {
      InvariantValueRange invariantValueRange0 = new InvariantValueRange("VALUE_RANGE");
      assertEquals(2147483647, invariantValueRange0.getMin());
      
      invariantValueRange0.setMin(Integer.MIN_VALUE);
      assertEquals(-2147483648, invariantValueRange0.getMin());
      assertEquals(-2147483648, invariantValueRange0.getMax());
  }
}
