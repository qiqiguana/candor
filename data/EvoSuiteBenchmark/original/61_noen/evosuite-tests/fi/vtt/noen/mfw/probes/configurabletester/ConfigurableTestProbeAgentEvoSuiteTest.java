/*
 * This file was automatically generated by EvoSuite
 */

package fi.vtt.noen.mfw.probes.configurabletester;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import fi.vtt.noen.mfw.bundle.common.ProbeConfiguration;
import fi.vtt.noen.mfw.bundle.probe.shared.BaseMeasure;
import fi.vtt.noen.mfw.probes.configurabletester.ConfigurableTestProbeAgent;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ConfigurableTestProbeAgentEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ConfigurableTestProbeAgent configurableTestProbeAgent0 = new ConfigurableTestProbeAgent();
      BaseMeasure baseMeasure0 = configurableTestProbeAgent0.measure();
      assertEquals("null measure 1", baseMeasure0.getMeasure());
      assertNotNull(baseMeasure0);
  }

  @Test
  public void test1()  throws Throwable  {
      ConfigurableTestProbeAgent configurableTestProbeAgent0 = new ConfigurableTestProbeAgent();
      Properties properties0 = new Properties();
      // Undeclared exception!
      try {
        configurableTestProbeAgent0.init(properties0);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
        /*
         * null
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      ConfigurableTestProbeAgent configurableTestProbeAgent0 = new ConfigurableTestProbeAgent();
      configurableTestProbeAgent0.startProbe();
  }

  @Test
  public void test3()  throws Throwable  {
      ConfigurableTestProbeAgent configurableTestProbeAgent0 = new ConfigurableTestProbeAgent();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      configurableTestProbeAgent0.setConfiguration((Map<String, String>) hashMap0);
      assertEquals(0, hashMap0.size());
  }

  @Test
  public void test4()  throws Throwable  {
      ConfigurableTestProbeAgent configurableTestProbeAgent0 = new ConfigurableTestProbeAgent();
      Collection<ProbeConfiguration> collection0 = configurableTestProbeAgent0.getConfigurationParameters();
      assertNull(collection0);
  }

  @Test
  public void test5()  throws Throwable  {
      ConfigurableTestProbeAgent configurableTestProbeAgent0 = new ConfigurableTestProbeAgent();
      configurableTestProbeAgent0.stopProbe();
  }
}
