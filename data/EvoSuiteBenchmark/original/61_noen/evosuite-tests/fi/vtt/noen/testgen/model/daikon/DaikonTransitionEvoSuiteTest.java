/*
 * This file was automatically generated by EvoSuite
 */

package fi.vtt.noen.testgen.model.daikon;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import fi.vtt.noen.testgen.model.daikon.DaikonTransition;
import fi.vtt.noen.testgen.model.daikon.constraints.DaikonConstraint;
import fi.vtt.noen.testgen.model.daikon.constraints.LesserConstraint;
import java.util.HashSet;
import java.util.Set;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DaikonTransitionEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DaikonTransition daikonTransition0 = new DaikonTransition("@,> 3FI?4");
      assertNotNull(daikonTransition0);
      
      String string0 = daikonTransition0.getTarget();
      assertEquals("> 3FI?4", string0);
      assertEquals("@", daikonTransition0.getSource());
      assertNotNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      DaikonTransition daikonTransition0 = new DaikonTransition("@,> 3FI?4");
      assertNotNull(daikonTransition0);
      
      String string0 = daikonTransition0.getSource();
      assertNotNull(string0);
      assertEquals("> 3FI?4", daikonTransition0.getTarget());
      assertEquals("@", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      DaikonTransition daikonTransition0 = null;
      try {
        daikonTransition0 = new DaikonTransition("jhvO+eRUY>.");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Transition format must be 'source,target' but it was 'jhvO+eRUY>.'
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      DaikonTransition daikonTransition0 = new DaikonTransition("@,> 3FI?4");
      assertNotNull(daikonTransition0);
      
      LesserConstraint lesserConstraint0 = new LesserConstraint("@,> 3FI?4", "@,> 3FI?4");
      daikonTransition0.addConstraint((DaikonConstraint) lesserConstraint0);
      HashSet<String> hashSet0 = new HashSet<String>();
      String string0 = daikonTransition0.guardContentMethods((Set<String>) hashSet0);
      assertEquals("", string0);
      assertEquals("@", daikonTransition0.getSource());
      assertEquals("> 3FI?4", daikonTransition0.getTarget());
      assertNotNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      DaikonTransition daikonTransition0 = new DaikonTransition("@,> 3FI?4");
      assertNotNull(daikonTransition0);
      
      LesserConstraint lesserConstraint0 = new LesserConstraint("@,> 3FI?4", "@,> 3FI?4");
      daikonTransition0.addConstraint((DaikonConstraint) lesserConstraint0);
      String string0 = daikonTransition0.createAsserts("@,> 3FI?4");
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("> 3FI?4", daikonTransition0.getTarget());
      assertEquals("@", daikonTransition0.getSource());
  }

  @Test
  public void test5()  throws Throwable  {
      DaikonTransition daikonTransition0 = new DaikonTransition("@,> 3FI?4");
      assertNotNull(daikonTransition0);
      
      LesserConstraint lesserConstraint0 = new LesserConstraint("@,> 3FI?4", "@,> 3FI?4");
      daikonTransition0.addConstraint((DaikonConstraint) lesserConstraint0);
      String string0 = daikonTransition0.createTransitionGuards();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("@", daikonTransition0.getSource());
      assertEquals("> 3FI?4", daikonTransition0.getTarget());
  }
}
