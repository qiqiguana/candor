/*
 * This file was automatically generated by EvoSuite
 */

package fi.vtt.noen.testgen.model.daikon.constraints;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import fi.vtt.noen.testgen.model.daikon.constraints.NonEqualConstraint;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class NonEqualConstraintEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      NonEqualConstraint nonEqualConstraint0 = new NonEqualConstraint("s~ osiq>ua1[H?8", "s~ osiq>ua1[H?8");
      assertNotNull(nonEqualConstraint0);
      
      String string0 = nonEqualConstraint0.guardMethod();
      assertNotNull(string0);
      assertEquals("  public boolean s~ osiq>ua1[HEqualss~ osiq>ua1[H() {\n    if (s~ osiq>ua1[H != s~ osiq>ua1[H) {\n      return false;\n    }\n    return true;\n  }\n", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      NonEqualConstraint nonEqualConstraint0 = null;
      try {
        nonEqualConstraint0 = new NonEqualConstraint("sizev", "sizev");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 1
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      NonEqualConstraint nonEqualConstraint0 = null;
      try {
        nonEqualConstraint0 = new NonEqualConstraint("sizesizen],", "w|=U:j+ (ndnX6>OdRW");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 1
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      NonEqualConstraint nonEqualConstraint0 = new NonEqualConstraint("sb+C1b@S_Y|$h?2", "sb+C1b@S_Y|$h?2");
      assertNotNull(nonEqualConstraint0);
      
      String string0 = nonEqualConstraint0.asAssert("    if (sb+C1b@S_Y|$h != sb+C1b@S_Y|$h) {\n      return false;\n    }\n");
      assertNotNull(string0);
      assertEquals("assertTrue(    if (sb+C1b@S_Y|$h != sb+C1b@S_Y|$h) {\n      return false;\n    }\n != sb+C1b@S_Y|$h);\n", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      NonEqualConstraint nonEqualConstraint0 = new NonEqualConstraint("sb+C1b@S_Y|$h?2", "sb+C1b@S_Y|$h?2");
      assertNotNull(nonEqualConstraint0);
      
      String string0 = nonEqualConstraint0.toString();
      assertEquals("reference:sb+C1b@S_Y|$h != reference:sb+C1b@S_Y|$h", string0);
      assertNotNull(string0);
  }
}
