/*
 * This file was automatically generated by EvoSuite
 */

package fi.vtt.noen.testgen.model.daikon.constraints;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import fi.vtt.noen.testgen.model.daikon.constraints.LesserConstraint;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class LesserConstraintEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LesserConstraint lesserConstraint0 = new LesserConstraint("siN^IM8-8!cUHDuJ?1", "siN^IM8-8!cUHDuJ?1");
      assertNotNull(lesserConstraint0);
      
      lesserConstraint0.min();
      assertEquals("reference:siN^IM8-8!cUHDuJ < reference:siN^IM8-8!cUHDuJ", lesserConstraint0.toString());
      assertEquals(false, lesserConstraint0.isEnabled());
      assertEquals("    if (siN^IM8-8!cUHDuJ < siN^IM8-8!cUHDuJ) {\n      return false;\n    }\n", lesserConstraint0.toJava());
  }

  @Test
  public void test1()  throws Throwable  {
      LesserConstraint lesserConstraint0 = new LesserConstraint("siN^IM8-8!cUHDuJ?1", "siN^IM8-8!cUHDuJ?1");
      assertNotNull(lesserConstraint0);
      
      String string0 = lesserConstraint0.guardMethod();
      assertNotNull(string0);
      assertEquals("  public boolean siN^IM8-8!cUHDuJIsNotLesserThansiN^IM8-8!cUHDuJ() {\n    if (siN^IM8-8!cUHDuJ < siN^IM8-8!cUHDuJ) {\n      return false;\n    }\n    return true;\n  }\n", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      LesserConstraint lesserConstraint0 = new LesserConstraint("siN^IM8-8!cUHDuJ?1", "siN^IM8-8!cUHDuJ?1");
      assertNotNull(lesserConstraint0);
      
      String string0 = lesserConstraint0.asAssert("siN^IM8-8!cUHDuJ?1");
      assertNotNull(string0);
      assertEquals("reference:siN^IM8-8!cUHDuJ < reference:siN^IM8-8!cUHDuJ", lesserConstraint0.toString());
      assertEquals("assertTrue(siN^IM8-8!cUHDuJ?1 < siN^IM8-8!cUHDuJ);\n", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      LesserConstraint lesserConstraint0 = null;
      try {
        lesserConstraint0 = new LesserConstraint("size07", "size07");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 1
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      LesserConstraint lesserConstraint0 = null;
      try {
        lesserConstraint0 = new LesserConstraint("}", "size");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 1
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      LesserConstraint lesserConstraint0 = new LesserConstraint("Lse_MY8T?1", "Lse_MY8T?1");
      assertNotNull(lesserConstraint0);
      
      lesserConstraint0.max();
      assertEquals(false, lesserConstraint0.isEnabled());
      assertEquals("reference:Lse_MY8T < reference:Lse_MY8T", lesserConstraint0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      LesserConstraint lesserConstraint0 = new LesserConstraint("Lse_MY8T?1", "Lse_MY8T?1");
      assertNotNull(lesserConstraint0);
      
      String string0 = lesserConstraint0.toString();
      assertNotNull(string0);
      assertEquals("reference:Lse_MY8T < reference:Lse_MY8T", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      LesserConstraint lesserConstraint0 = new LesserConstraint("siN^IM8-8!cUHDuJ?1", "    if (siN^IM8-8!cUHDuJ < siN^IM8-8!cUHDuJ) {\n      return false;\n    }\n");
      assertNotNull(lesserConstraint0);
      
      String string0 = lesserConstraint0.toJava();
      assertEquals("reference:siN^IM8-8!cUHDuJ < if (siN^IM8-8!cUHDuJ < siN^IM8-8!cUHDuJ) {\n      return false;\n    }", lesserConstraint0.toString());
      assertEquals("    if (siN^IM8-8!cUHDuJ < \"if (siN^IM8-8!cUHDuJ < siN^IM8-8!cUHDuJ) {\n      return false;\n    }\") {\n      return false;\n    }\n", string0);
      assertNotNull(string0);
  }
}
