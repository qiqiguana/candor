/*
 * This file was automatically generated by EvoSuite
 */

package fi.vtt.noen.testgen.model.daikon.constraints;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import fi.vtt.noen.testgen.model.daikon.constraints.OneOfConstraint;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class OneOfConstraintEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      OneOfConstraint oneOfConstraint0 = new OneOfConstraint("Xe2k+/IaJ]`&zP?17", "4VR],qo@kN{07*-");
      assertNotNull(oneOfConstraint0);
      
      double double0 = oneOfConstraint0.min();
      assertEquals("  public boolean Xe2k+/IaJ]`&zPNotOneOf_VR__o@kN{07*_() {\n    HashSet validValues = new HashSet();\n    Collection value = new ArrayList();\n    value = new ArrayList();\n    value.add(\"VR\");\n    validValues.add(value);\n    value = new ArrayList();\n    value.add(\"o@kN{07*\");\n    validValues.add(value);\n    if (validValues.contains(Xe2k+/IaJ]`&zP)) {\n      return false;\n    }\n    return true;\n  }\n", oneOfConstraint0.guardMethod());
      assertEquals(2.147483647E9, double0, 0.01D);
  }

  @Test
  public void test1()  throws Throwable  {
      OneOfConstraint oneOfConstraint0 = null;
      try {
        oneOfConstraint0 = new OneOfConstraint("elements", "elements");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Cannot parseLexical value from empty string
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      OneOfConstraint oneOfConstraint0 = new OneOfConstraint("Xe2k+/IaJ]`&zP?17", "6,8V");
      assertNotNull(oneOfConstraint0);
      
      double double0 = oneOfConstraint0.min();
      assertEquals("  public boolean Xe2k+/IaJ]`&zPNotOneOf_6__8_() {\n    HashSet validValues = new HashSet();\n    validValues.add(6.0);\n    validValues.add(8.0);\n    if (validValues.contains(Xe2k+/IaJ]`&zP)) {\n      return false;\n    }\n    return true;\n  }\n", oneOfConstraint0.guardMethod());
      assertEquals(6.0, double0, 0.01D);
  }

  @Test
  public void test3()  throws Throwable  {
      OneOfConstraint oneOfConstraint0 = new OneOfConstraint("Xe2k+/IaJ]`&zP?17", "reference:Xe2k+/IaJ]`&zP one of {[VR],[o@kN{07*]}");
      assertNotNull(oneOfConstraint0);
      assertEquals("    HashSet validValues = new HashSet();\n    Collection value = new ArrayList();\n    value = new ArrayList();\n    value.add(\"eference:Xe2k+/IaJ]`&zP one of {[VR\");\n    validValues.add(value);\n    value = new ArrayList();\n    value.add(\"o@kN{07*\");\n    validValues.add(value);\n    if (validValues.contains(Xe2k+/IaJ]`&zP)) {\n      return false;\n    }\n", oneOfConstraint0.toJava());
  }

  @Test
  public void test4()  throws Throwable  {
      OneOfConstraint oneOfConstraint0 = new OneOfConstraint("Xe2k+/IaJ]`&zP?17", "4VR],qo@kN{07*-");
      assertNotNull(oneOfConstraint0);
      
      double double0 = oneOfConstraint0.max();
      assertEquals((-2.147483648E9), double0, 0.01D);
      assertEquals("    HashSet validValues = new HashSet();\n    Collection value = new ArrayList();\n    value = new ArrayList();\n    value.add(\"VR\");\n    validValues.add(value);\n    value = new ArrayList();\n    value.add(\"o@kN{07*\");\n    validValues.add(value);\n    if (validValues.contains(Xe2k+/IaJ]`&zP)) {\n      return false;\n    }\n", oneOfConstraint0.toJava());
  }

  @Test
  public void test5()  throws Throwable  {
      OneOfConstraint oneOfConstraint0 = new OneOfConstraint("Xe2k+/IaJ]`&zP?17", "6,8V");
      assertNotNull(oneOfConstraint0);
      
      double double0 = oneOfConstraint0.max();
      assertEquals("    if(Xe2k+/IaJ]`&zP.isEmpty()) return false;\n", oneOfConstraint0.guardInvocation());
      assertEquals(8.0, double0, 0.01D);
  }

  @Test
  public void test6()  throws Throwable  {
      OneOfConstraint oneOfConstraint0 = new OneOfConstraint("Xe2k+/IaJ]`&zP?17", "4VR],qo@kN{07*-");
      assertNotNull(oneOfConstraint0);
      
      String string0 = oneOfConstraint0.asAssert("reference:Xe2k+/IaJ]`&zP one of {[VR],[o@kN{07*]}");
      assertEquals("HashSet validValues = new HashSet();\nCollection value = new ArrayList();\nvalue = new ArrayList();\nvalue.add(\"VR\");\nvalidValues.add(value);\nvalue = new ArrayList();\nvalue.add(\"o@kN{07*\");\nvalidValues.add(value);\nassertTrue(validValues.contains(reference:Xe2k+/IaJ]`&zP one of {[VR],[o@kN{07*]}));\n", string0);
      assertNotNull(string0);
  }

  @Test
  public void test7()  throws Throwable  {
      OneOfConstraint oneOfConstraint0 = new OneOfConstraint("Xe2k+/IaJ]`&zP?17", "4VR],qo@kN{07*-");
      assertNotNull(oneOfConstraint0);
      
      String string0 = oneOfConstraint0.toString();
      assertEquals("reference:Xe2k+/IaJ]`&zP one of {[VR],[o@kN{07*]}", string0);
      assertNotNull(string0);
  }

  @Test
  public void test8()  throws Throwable  {
      OneOfConstraint oneOfConstraint0 = new OneOfConstraint("Xe2k}+Iw&bD?7", "5i[");
      assertNotNull(oneOfConstraint0);
      
      String string0 = oneOfConstraint0.toString();
      assertEquals("reference:Xe2k}+Iw&bD one of {\"5i\"}", string0);
      assertNotNull(string0);
  }

  @Test
  public void test9()  throws Throwable  {
      OneOfConstraint oneOfConstraint0 = new OneOfConstraint("Xe2k+/IaJ]`&zP?17", "4VR],qo@kN{07*-");
      assertNotNull(oneOfConstraint0);
      
      String string0 = oneOfConstraint0.guardMethod();
      assertEquals("  public boolean Xe2k+/IaJ]`&zPNotOneOf_VR__o@kN{07*_() {\n    HashSet validValues = new HashSet();\n    Collection value = new ArrayList();\n    value = new ArrayList();\n    value.add(\"VR\");\n    validValues.add(value);\n    value = new ArrayList();\n    value.add(\"o@kN{07*\");\n    validValues.add(value);\n    if (validValues.contains(Xe2k+/IaJ]`&zP)) {\n      return false;\n    }\n    return true;\n  }\n", string0);
      assertNotNull(string0);
  }

  @Test
  public void test10()  throws Throwable  {
      OneOfConstraint oneOfConstraint0 = new OneOfConstraint("Xe2k+/IaJ]`&zP?17", "6,8V");
      assertNotNull(oneOfConstraint0);
      
      String string0 = oneOfConstraint0.guardMethod();
      assertNotNull(string0);
      assertEquals("  public boolean Xe2k+/IaJ]`&zPNotOneOf_6__8_() {\n    HashSet validValues = new HashSet();\n    validValues.add(6.0);\n    validValues.add(8.0);\n    if (validValues.contains(Xe2k+/IaJ]`&zP)) {\n      return false;\n    }\n    return true;\n  }\n", string0);
  }

  @Test
  public void test11()  throws Throwable  {
      OneOfConstraint oneOfConstraint0 = new OneOfConstraint("Xe2k+/IaJ]`&zP?17", "4VR],qo@kN{07*-");
      assertNotNull(oneOfConstraint0);
      
      String string0 = oneOfConstraint0.guardInvocation();
      assertNotNull(string0);
      assertEquals("    HashSet validValues = new HashSet();\n    Collection value = new ArrayList();\n    value = new ArrayList();\n    value.add(\"VR\");\n    validValues.add(value);\n    value = new ArrayList();\n    value.add(\"o@kN{07*\");\n    validValues.add(value);\n    if (validValues.contains(Xe2k+/IaJ]`&zP)) {\n      return false;\n    }\n", oneOfConstraint0.toJava());
      assertEquals("    if(Xe2k+/IaJ]`&zP.isEmpty()) return false;\n", string0);
  }

  @Test
  public void test12()  throws Throwable  {
      OneOfConstraint oneOfConstraint0 = new OneOfConstraint("Ze2Lk}w./I-x&*?7", "S");
      assertNotNull(oneOfConstraint0);
      
      String string0 = oneOfConstraint0.guardInvocation();
      assertNotNull(string0);
      assertEquals("reference:Ze2Lk}w./I-x&* one of {", oneOfConstraint0.toString());
      assertEquals("", string0);
  }

  @Test
  public void test13()  throws Throwable  {
      OneOfConstraint oneOfConstraint0 = new OneOfConstraint("Xe2k}+Iw&bD?7", "5i[");
      assertNotNull(oneOfConstraint0);
      
      String string0 = oneOfConstraint0.guardInvocation();
      assertNotNull(string0);
      assertEquals("    if(Xe2k}+Iw&bD.isEmpty()) return false;\n", string0);
      assertEquals("reference:Xe2k}+Iw&bD one of {\"5i\"}", oneOfConstraint0.toString());
  }
}
