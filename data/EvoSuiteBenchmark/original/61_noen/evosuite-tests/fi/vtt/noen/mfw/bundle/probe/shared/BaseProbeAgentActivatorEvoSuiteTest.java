/*
 * This file was automatically generated by EvoSuite
 */

package fi.vtt.noen.mfw.bundle.probe.shared;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import fi.vtt.noen.mfw.bundle.probe.shared.BaseProbeAgentActivator;
import fi.vtt.noen.mfw.bundle.probe.shared.Probe;
import fi.vtt.noen.mfw.bundle.probe.shared.ProbeEventBus;
import fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation;
import fi.vtt.noen.mfw.probes.configurabletester.ConfigurableTestProbeActivator;
import fi.vtt.noen.mfw.probes.http.HttpProbeAgentActivator;
import fi.vtt.noen.mfw.probes.tester.TestProbe2;
import fi.vtt.noen.mfw.probes.tester.TestProbeActivator;
import java.util.Collection;
import java.util.Map;
import java.util.Properties;
import org.junit.BeforeClass;
import org.osgi.framework.BundleContext;

@RunWith(EvoSuiteRunner.class)
public class BaseProbeAgentActivatorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      HttpProbeAgentActivator httpProbeAgentActivator0 = null;
      try {
        httpProbeAgentActivator0 = new HttpProbeAgentActivator();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Unable to read required initialization properties from file 'noen-mfw.properties'
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      TestProbe2 testProbe2_0 = new TestProbe2();
      TestProbeActivator testProbeActivator0 = new TestProbeActivator((Properties) null);
      // Undeclared exception!
      try {
        testProbeActivator0.register((BundleContext) null, (Probe) testProbe2_0, 3761);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      Properties properties0 = new Properties();
      TestProbeActivator testProbeActivator0 = new TestProbeActivator(properties0);
      Map<Integer, Probe> map0 = testProbeActivator0.getProbes();
      assertEquals(true, map0.isEmpty());
  }

  @Test
  public void test3()  throws Throwable  {
      TestProbeActivator testProbeActivator0 = new TestProbeActivator((Properties) null);
      Class<?> class0 = BaseProbeAgentActivator.class;
      // Undeclared exception!
      try {
        testProbeActivator0.register((BundleContext) null, class0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      TestProbeActivator testProbeActivator0 = new TestProbeActivator((Properties) null);
      Class<?> class0 = BaseProbeAgentActivator.class;
      // Undeclared exception!
      try {
        testProbeActivator0.register((ProbeEventBus) null, (BundleContext) null, class0, (-6));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      ConfigurableTestProbeActivator configurableTestProbeActivator0 = new ConfigurableTestProbeActivator((Properties) null);
      Collection<Properties> collection0 = configurableTestProbeActivator0.getProbeProperties();
      assertEquals(true, collection0.isEmpty());
  }

  @Test
  public void test6()  throws Throwable  {
      Properties properties0 = new Properties();
      TestProbeActivator testProbeActivator0 = new TestProbeActivator(properties0);
      properties0.setProperty("test.probe1.test.8obe6-1.", "test.probe1.test.8obe6-1.");
      Properties properties1 = testProbeActivator0.configSubSetFor(1);
      assertNotNull(properties1);
      assertEquals("{test.8obe6-1.=test.probe1.test.8obe6-1.}", properties1.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      Properties properties0 = new Properties();
      TestProbeActivator testProbeActivator0 = new TestProbeActivator(properties0);
      properties0.setProperty("test.probe1.test.8obe6-1.", "test.probe1.test.8obe6-1.");
      ProbeInformation probeInformation0 = testProbeActivator0.getProbeInfo((-39));
      assertNotNull(probeInformation0);
      assertEquals(0, probeInformation0.getPrecision());
  }
}
