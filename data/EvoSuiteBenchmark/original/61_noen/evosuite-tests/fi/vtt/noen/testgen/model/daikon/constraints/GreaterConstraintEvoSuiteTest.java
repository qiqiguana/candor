/*
 * This file was automatically generated by EvoSuite
 */

package fi.vtt.noen.testgen.model.daikon.constraints;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import fi.vtt.noen.testgen.model.daikon.constraints.GreaterConstraint;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class GreaterConstraintEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      GreaterConstraint greaterConstraint0 = new GreaterConstraint("?9?;Pl:e", "sizex>.size(x.@ <");
      assertNotNull(greaterConstraint0);
      
      String string0 = greaterConstraint0.guardMethod();
      assertNotNull(string0);
      assertEquals("  public boolean IsNotGreaterThan_x.@ <_() {\n    if ( > x.@ <.size()) {\n      return false;\n    }\n    return true;\n  }\n", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      GreaterConstraint greaterConstraint0 = new GreaterConstraint("?9?;Pl:e", "sizex>.size(x.@ <");
      assertNotNull(greaterConstraint0);
      
      greaterConstraint0.max();
      assertEquals("reference: > sizeof(x.@ <)", greaterConstraint0.toString());
      assertEquals("IsNotGreaterThan_x.@ <_", greaterConstraint0.guardName());
  }

  @Test
  public void test2()  throws Throwable  {
      GreaterConstraint greaterConstraint0 = new GreaterConstraint("?9?;U:d=.", "?9?;U:d=.");
      assertNotNull(greaterConstraint0);
      
      String string0 = greaterConstraint0.asAssert("reference: > reference:");
      assertNotNull(string0);
      assertEquals("assertTrue(reference: > reference: > );\n", string0);
      assertEquals("reference: > reference:", greaterConstraint0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      GreaterConstraint greaterConstraint0 = new GreaterConstraint("?9?;Pl:e", "sizex>.size(x.@ <");
      assertNotNull(greaterConstraint0);
      
      greaterConstraint0.min();
      assertEquals("reference: > sizeof(x.@ <)", greaterConstraint0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      GreaterConstraint greaterConstraint0 = new GreaterConstraint("?9?;Pl:e", "sizex>.size(x.@ <");
      assertNotNull(greaterConstraint0);
      
      String string0 = greaterConstraint0.asAssert("?9?;Pl:e");
      assertNotNull(string0);
      assertEquals("assertTrue(?9?;Pl:e > \"x.@ <\".size());\n", string0);
      assertEquals("reference: > sizeof(x.@ <)", greaterConstraint0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      GreaterConstraint greaterConstraint0 = new GreaterConstraint("?9?;U:d=.", "?9?;U:d=.");
      assertNotNull(greaterConstraint0);
      
      String string0 = greaterConstraint0.toString();
      assertEquals("reference: > reference:", string0);
      assertNotNull(string0);
  }

  @Test
  public void test6()  throws Throwable  {
      GreaterConstraint greaterConstraint0 = new GreaterConstraint("?9?;Pl:e", "sizex>.size(x.@ <");
      assertNotNull(greaterConstraint0);
      
      // Undeclared exception!
      try {
        greaterConstraint0.returnValue();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * This is not a return value constraint:reference: > sizeof(x.@ <)
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      GreaterConstraint greaterConstraint0 = new GreaterConstraint("?9?;U:d=.", "?9?;U:d=.");
      assertNotNull(greaterConstraint0);
      
      String string0 = greaterConstraint0.guardMethod();
      assertEquals("  public boolean IsNotGreaterThan() {\n    if ( > ) {\n      return false;\n    }\n    return true;\n  }\n", string0);
      assertNotNull(string0);
  }
}
