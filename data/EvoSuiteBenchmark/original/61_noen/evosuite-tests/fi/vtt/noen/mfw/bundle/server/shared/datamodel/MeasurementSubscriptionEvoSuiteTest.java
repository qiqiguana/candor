/*
 * This file was automatically generated by EvoSuite
 */

package fi.vtt.noen.mfw.bundle.server.shared.datamodel;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import fi.vtt.noen.mfw.bundle.server.shared.datamodel.BMDescription;
import fi.vtt.noen.mfw.bundle.server.shared.datamodel.MeasurementSubscription;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MeasurementSubscriptionEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      MeasurementSubscription measurementSubscription0 = new MeasurementSubscription(3L, (BMDescription) null, 0L, 3L, 0L);
      long long0 = measurementSubscription0.getSacId();
      assertEquals(0L, long0);
      assertEquals(3L, measurementSubscription0.getSubscriptionId());
      assertEquals(0L, measurementSubscription0.getProbeId());
      assertEquals(3L, measurementSubscription0.getFrequency());
  }

  @Test
  public void test1()  throws Throwable  {
      MeasurementSubscription measurementSubscription0 = new MeasurementSubscription(3L, (BMDescription) null, 0L, 3L, 0L);
      measurementSubscription0.setProbeId(1849L);
      assertEquals(1849L, measurementSubscription0.getProbeId());
      assertEquals(3L, measurementSubscription0.getFrequency());
  }

  @Test
  public void test2()  throws Throwable  {
      MeasurementSubscription measurementSubscription0 = new MeasurementSubscription(1122L, (BMDescription) null, 0L, 1122L, 1L);
      long long0 = measurementSubscription0.getProbeId();
      assertEquals(1122L, measurementSubscription0.getSubscriptionId());
      assertEquals(1122L, measurementSubscription0.getFrequency());
      assertEquals(1L, long0);
      assertEquals(0L, measurementSubscription0.getSacId());
  }

  @Test
  public void test3()  throws Throwable  {
      MeasurementSubscription measurementSubscription0 = new MeasurementSubscription(1122L, (BMDescription) null, 0L, 1122L, 1L);
      measurementSubscription0.setFrequency((-1666L));
      assertEquals((-1666L), measurementSubscription0.getFrequency());
  }

  @Test
  public void test4()  throws Throwable  {
      MeasurementSubscription measurementSubscription0 = new MeasurementSubscription(1122L, (BMDescription) null, 0L, 1122L, 1L);
      long long0 = measurementSubscription0.getSubscriptionId();
      assertEquals(1L, measurementSubscription0.getProbeId());
      assertEquals(0L, measurementSubscription0.getSacId());
      assertEquals(1122L, long0);
      assertEquals(1122L, measurementSubscription0.getFrequency());
  }

  @Test
  public void test5()  throws Throwable  {
      MeasurementSubscription measurementSubscription0 = new MeasurementSubscription((-1L), (BMDescription) null, (-1L), (-1724L), 777L);
      long long0 = measurementSubscription0.getFrequency();
      assertEquals(777L, measurementSubscription0.getProbeId());
      assertEquals((-1L), measurementSubscription0.getSubscriptionId());
      assertEquals((-1L), measurementSubscription0.getSacId());
      assertEquals((-1724L), long0);
  }

  @Test
  public void test6()  throws Throwable  {
      MeasurementSubscription measurementSubscription0 = new MeasurementSubscription((-1116L), (BMDescription) null, (-1116L), 0L, 1L);
      // Undeclared exception!
      try {
        measurementSubscription0.getBmId();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
