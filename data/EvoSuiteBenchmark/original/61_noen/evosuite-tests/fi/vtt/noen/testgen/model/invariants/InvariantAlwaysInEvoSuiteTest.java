/*
 * This file was automatically generated by EvoSuite
 */

package fi.vtt.noen.testgen.model.invariants;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import fi.vtt.noen.testgen.model.invariants.InvariantAlwaysIn;
import java.util.Collection;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class InvariantAlwaysInEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      InvariantAlwaysIn invariantAlwaysIn0 = new InvariantAlwaysIn("dqdda");
      boolean boolean0 = invariantAlwaysIn0.isEmpty();
      assertEquals(true, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      InvariantAlwaysIn invariantAlwaysIn0 = new InvariantAlwaysIn("dqdda");
      Object object0 = new Object();
      boolean boolean0 = invariantAlwaysIn0.equals(object0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      InvariantAlwaysIn invariantAlwaysIn0 = new InvariantAlwaysIn("dqdda");
      invariantAlwaysIn0.add("");
      assertEquals(true, invariantAlwaysIn0.isEmpty());
  }

  @Test
  public void test3()  throws Throwable  {
      InvariantAlwaysIn invariantAlwaysIn0 = new InvariantAlwaysIn("dqdda");
      int int0 = invariantAlwaysIn0.hashCode();
      assertEquals(95817780, int0);
  }

  @Test
  public void test4()  throws Throwable  {
      InvariantAlwaysIn invariantAlwaysIn0 = new InvariantAlwaysIn("dqdda");
      Collection<String> collection0 = invariantAlwaysIn0.getVariables();
      assertEquals(true, collection0.isEmpty());
  }
}
