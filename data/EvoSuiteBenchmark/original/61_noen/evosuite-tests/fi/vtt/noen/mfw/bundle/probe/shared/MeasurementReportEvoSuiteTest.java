/*
 * This file was automatically generated by EvoSuite
 */

package fi.vtt.noen.mfw.bundle.probe.shared;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import fi.vtt.noen.mfw.bundle.probe.shared.BaseMeasure;
import fi.vtt.noen.mfw.bundle.probe.shared.MeasurementReport;
import fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation;
import fi.vtt.noen.mfw.bundle.server.shared.ServerAgent;
import fi.vtt.noen.mfw.probes.tester.TestProbe3;
import fi.vtt.noen.mfw.probes.tester.TestProbe4;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MeasurementReportEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      TestProbe3 testProbe3_0 = new TestProbe3();
      BaseMeasure baseMeasure0 = testProbe3_0.measure();
      MeasurementReport measurementReport0 = new MeasurementReport(baseMeasure0, (ServerAgent) null, (ProbeInformation) null, (-848L), true, (String) null);
      measurementReport0.getReference();
  }

  @Test
  public void test1()  throws Throwable  {
      TestProbe3 testProbe3_0 = new TestProbe3();
      BaseMeasure baseMeasure0 = testProbe3_0.measure();
      MeasurementReport measurementReport0 = new MeasurementReport(baseMeasure0, (ServerAgent) null, (ProbeInformation) null, (-1074L), true, "sm!2}pH{MELOT@r[");
      long long0 = measurementReport0.getSubscriptionId();
      assertEquals(true, measurementReport0.isMatchReference());
      assertEquals((-1074L), long0);
  }

  @Test
  public void test2()  throws Throwable  {
      TestProbe4 testProbe4_0 = new TestProbe4();
      BaseMeasure baseMeasure0 = testProbe4_0.measure();
      MeasurementReport measurementReport0 = new MeasurementReport(baseMeasure0, (ServerAgent) null, (ProbeInformation) null, (-2048L), false, "iwWs|`b");
      BaseMeasure baseMeasure1 = measurementReport0.getMeasure();
      assertNotNull(baseMeasure1);
      assertEquals((-2048L), measurementReport0.getSubscriptionId());
      assertEquals(false, measurementReport0.isMatchReference());
  }

  @Test
  public void test3()  throws Throwable  {
      ProbeInformation probeInformation0 = new ProbeInformation("SAC ", "SAC ", "SAC ", "SAC ", "SAC ", "WP$M", 1516, "WP$M");
      MeasurementReport measurementReport0 = new MeasurementReport((BaseMeasure) null, (ServerAgent) null, probeInformation0, 100L, false, "WP$M");
      measurementReport0.getServer();
      assertEquals(false, measurementReport0.isMatchReference());
      assertEquals(100L, measurementReport0.getSubscriptionId());
  }

  @Test
  public void test4()  throws Throwable  {
      BaseMeasure baseMeasure0 = new BaseMeasure("");
      TestProbe4 testProbe4_0 = new TestProbe4();
      ProbeInformation probeInformation0 = testProbe4_0.getInformation();
      MeasurementReport measurementReport0 = new MeasurementReport(baseMeasure0, (ServerAgent) null, probeInformation0, 0L, true, "");
      ProbeInformation probeInformation1 = measurementReport0.getProbeInfo();
      assertNotNull(probeInformation1);
      assertEquals(true, measurementReport0.isMatchReference());
  }

  @Test
  public void test5()  throws Throwable  {
      TestProbe3 testProbe3_0 = new TestProbe3();
      BaseMeasure baseMeasure0 = testProbe3_0.measure();
      MeasurementReport measurementReport0 = new MeasurementReport(baseMeasure0, (ServerAgent) null, (ProbeInformation) null, (-1074L), true, "sm!2}pH{MELOT@r[");
      boolean boolean0 = measurementReport0.isMatchReference();
      assertEquals(true, boolean0);
      assertEquals((-1074L), measurementReport0.getSubscriptionId());
  }
}
