/*
 * This file was automatically generated by EvoSuite
 */

package fi.vtt.noen.mfw.bundle.server.shared.datamodel;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import fi.vtt.noen.mfw.bundle.common.DataType;
import fi.vtt.noen.mfw.bundle.server.shared.datamodel.BMDescription;
import fi.vtt.noen.mfw.bundle.server.shared.datamodel.Value;
import java.util.Date;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ValueEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Value value0 = new Value();
      Date date0 = value0.getTime();
      assertNull(date0);
  }

  @Test
  public void test1()  throws Throwable  {
      Value value0 = new Value((BMDescription) null, 412, "~cx;{'v]5fRvxwJ ", (long) 412);
      Value value1 = new Value((BMDescription) null, 412, "~cx;{'v]5fRvxwJ ", (long) 412, (long) 412);
      boolean boolean0 = value0.equals((Object) value1);
      assertEquals(false, value1.isError());
      assertEquals("01-Jan-1970 01:00:00", value0.getTimeFormatted());
      assertEquals((-1L), value0.getSubscriptionId());
      assertEquals(false, boolean0);
      assertEquals(412, value1.getPrecision());
  }

  @Test
  public void test2()  throws Throwable  {
      Value value0 = new Value();
      // Undeclared exception!
      try {
        value0.getMeasureURI();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      Value value0 = new Value((BMDescription) null, 19, "q", (long) 19);
      // Undeclared exception!
      try {
        value0.getId();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      Value value0 = new Value();
      String string0 = value0.getString();
      assertNull(string0);
  }

  @Test
  public void test5()  throws Throwable  {
      Value value0 = new Value((BMDescription) null, (-1378), "~cx;{'v]5fRvxwJ ", (long) (-1378), (long) (-1378), false);
      value0.getBm();
      assertEquals((-1378L), value0.getSubscriptionId());
      assertEquals("01-Jan-1970 00:59:58", value0.getTimeFormatted());
      assertEquals(false, value0.isError());
      assertEquals(-1378, value0.getPrecision());
  }

  @Test
  public void test6()  throws Throwable  {
      Value value0 = new Value();
      int int0 = value0.getPrecision();
      assertEquals(0, int0);
  }

  @Test
  public void test7()  throws Throwable  {
      Value value0 = new Value();
      boolean boolean0 = value0.isError();
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      Value value0 = new Value((BMDescription) null, (-1378), "~cx;{'v]5fRvxwJ ", (long) (-1378), (long) (-1378), false);
      String string0 = value0.getTimeFormatted();
      assertEquals("01-Jan-1970 00:59:58", string0);
      assertEquals(false, value0.isError());
      assertEquals((-1378L), value0.getSubscriptionId());
      assertNotNull(string0);
      assertEquals(-1378, value0.getPrecision());
  }

  @Test
  public void test9()  throws Throwable  {
      Value value0 = new Value((BMDescription) null, (-1378), "~cx;{'v]5fRvxwJ ", (long) (-1378), (long) (-1378), false);
      // Undeclared exception!
      try {
        value0.toString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      Value value0 = new Value((BMDescription) null, 19, "q", (long) 19);
      long long0 = value0.getSubscriptionId();
      assertEquals("01-Jan-1970 01:00:00", value0.getTimeFormatted());
      assertEquals(19, value0.getPrecision());
      assertEquals(false, value0.isError());
      assertEquals((-1L), long0);
  }

  @Test
  public void test11()  throws Throwable  {
      Value value0 = new Value();
      DataType dataType0 = DataType.DM_VALUE;
      value0.setType(dataType0);
      // Undeclared exception!
      try {
        value0.getString();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Not STRINGVALUE type value (actually DM_VALUE).
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      Value value0 = new Value();
      assertEquals("\"null\"", value0.valueString());
      
      DataType dataType0 = DataType.DM_VALUE;
      value0.setType(dataType0);
      String string0 = value0.valueString();
      assertEquals("null", value0.valueString());
      assertEquals("null", string0);
  }

  @Test
  public void test13()  throws Throwable  {
      Value value0 = new Value();
      String string0 = value0.valueString();
      assertEquals("\"null\"", string0);
      assertNotNull(string0);
  }

  @Test
  public void test14()  throws Throwable  {
      Value value0 = new Value((BMDescription) null, (-1378), "~cx;{'v]5fRvxwJ ", (long) (-1378), (long) (-1378), false);
      Value value1 = new Value((BMDescription) null, 412, "~cx;{'v]5fRvxwJ ", (long) 412);
      boolean boolean0 = value1.equals((Object) value0);
      assertEquals(-1378, value0.getPrecision());
      assertEquals((-1L), value1.getSubscriptionId());
      assertEquals("01-Jan-1970 01:00:00", value1.getTimeFormatted());
      assertEquals(false, value0.isError());
      assertEquals(false, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      Value value0 = new Value();
      boolean boolean0 = value0.equals((Object) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      Value value0 = new Value();
      boolean boolean0 = value0.equals((Object) "\"null\"");
      assertEquals(false, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      Value value0 = new Value();
      Value value1 = new Value((BMDescription) null, 0, "wF2(hG{g{ODwR", (long) 0, (long) 0);
      boolean boolean0 = value0.equals((Object) value1);
      assertEquals(false, boolean0);
      assertEquals(0, value1.getPrecision());
      assertEquals(false, value1.isError());
  }

  @Test
  public void test18()  throws Throwable  {
      Value value0 = new Value((BMDescription) null, 8579, "XX.", (-1941L), (long) 8579);
      Value value1 = new Value((BMDescription) null, 8579, "XX.", (long) 8579);
      boolean boolean0 = value0.equals((Object) value1);
      assertEquals("01-Jan-1970 00:59:58", value0.getTimeFormatted());
      assertEquals(false, value0.isError());
      assertEquals(8579L, value0.getSubscriptionId());
      assertEquals(false, boolean0);
      assertEquals(8579, value0.getPrecision());
  }

  @Test
  public void test19()  throws Throwable  {
      Value value0 = new Value();
      Value value1 = new Value();
      boolean boolean0 = value0.equals((Object) value1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      Value value0 = new Value((BMDescription) null, 19, "q", (long) 19);
      Value value1 = new Value((BMDescription) null, 19, "&x(:%e", (long) 19, (long) 19);
      boolean boolean0 = value0.equals((Object) value1);
      assertEquals("01-Jan-1970 01:00:00", value0.getTimeFormatted());
      assertEquals(false, value1.isError());
      assertEquals((-1L), value0.getSubscriptionId());
      assertEquals(false, boolean0);
      assertEquals(19, value1.getPrecision());
  }

  @Test
  public void test21()  throws Throwable  {
      Value value0 = new Value((BMDescription) null, (-1378), "~cx;{'v]5fRvxwJ ", (long) (-1378), (long) (-1378), false);
      int int0 = value0.hashCode();
      assertEquals(false, value0.isError());
      assertEquals(27776807, int0);
  }

  @Test
  public void test22()  throws Throwable  {
      Value value0 = new Value();
      // Undeclared exception!
      try {
        value0.hashCode();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
