/*
 * This file was automatically generated by EvoSuite
 */

package fi.vtt.noen.mfw.bundle.server.shared.datamodel;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import fi.vtt.noen.mfw.bundle.server.shared.datamodel.BMDescription;
import fi.vtt.noen.mfw.bundle.server.shared.datamodel.DMDefinition;
import fi.vtt.noen.mfw.bundle.server.shared.datamodel.DMValue;
import java.util.Collection;
import java.util.LinkedList;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DMValueEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DMDefinition dMDefinition0 = new DMDefinition(13, "<7fa4I", "<7fa4I");
      DMValue dMValue0 = new DMValue(dMDefinition0, "<7fa4I", (long) 13);
      long long0 = dMValue0.getTime();
      assertEquals("DMValue{missingBM=[], value=<7fa4I, time=13}", dMValue0.toString());
      assertEquals(13L, long0);
  }

  @Test
  public void test1()  throws Throwable  {
      DMDefinition dMDefinition0 = new DMDefinition((-1), "", "");
      DMValue dMValue0 = new DMValue(dMDefinition0, 0.0, 0L);
      int int0 = dMValue0.getId();
      assertEquals((-1), int0);
      assertEquals("DMValue{missingBM=[], value=0.0, time=0}", dMValue0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      DMDefinition dMDefinition0 = new DMDefinition(13, "<7fa4I", "<7fa4I");
      DMValue dMValue0 = new DMValue(dMDefinition0, "<7fa4I", (long) 13);
      Collection<BMDescription> collection0 = dMValue0.getMissingBM();
      assertEquals("DMValue{missingBM=[], value=<7fa4I, time=13}", dMValue0.toString());
      assertNotNull(collection0);
      assertEquals(13L, dMValue0.getTime());
  }

  @Test
  public void test3()  throws Throwable  {
      DMDefinition dMDefinition0 = new DMDefinition(585, "UNSUBSCRIPTcON_REQUEgT", "UNSUBSCRIPTcON_REQUEgT");
      LinkedList<BMDescription> linkedList0 = new LinkedList<BMDescription>();
      DMValue dMValue0 = new DMValue(dMDefinition0, (long) 585, (Collection<BMDescription>) linkedList0);
      String string0 = dMValue0.getName();
      assertNotNull(string0);
      assertEquals(585L, dMValue0.getTime());
      assertEquals("DMValue{missingBM=[], value=null, time=585}", dMValue0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      DMDefinition dMDefinition0 = new DMDefinition(585, "UNSUBSCRIPTcON_REQUEgT", "UNSUBSCRIPTcON_REQUEgT");
      DMValue dMValue0 = new DMValue(dMDefinition0, true, (long) 0);
      assertEquals("DMValue{missingBM=[], value=true, time=0}", dMValue0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      DMDefinition dMDefinition0 = new DMDefinition(273, "^ib#ID( oLR<^", "^ib#ID( oLR<^");
      DMValue dMValue0 = new DMValue(dMDefinition0, "^ib#ID( oLR<^", (long) 273);
      String string0 = dMValue0.toString();
      assertNotNull(string0);
      assertEquals("DMValue{missingBM=[], value=^ib#ID( oLR<^, time=273}", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      DMDefinition dMDefinition0 = new DMDefinition(13, "<7fa4I", "<7fa4I");
      DMValue dMValue0 = new DMValue(dMDefinition0, "<7fa4I", (long) 13);
      String string0 = dMValue0.getValue();
      assertEquals("<7fa4I", string0);
      assertNotNull(string0);
      assertEquals(13L, dMValue0.getTime());
  }

  @Test
  public void test7()  throws Throwable  {
      DMDefinition dMDefinition0 = new DMDefinition(585, "UNSUBSCRIPTcON_REQUEgT", "UNSUBSCRIPTcON_REQUEgT");
      LinkedList<BMDescription> linkedList0 = new LinkedList<BMDescription>();
      linkedList0.add((BMDescription) null);
      DMValue dMValue0 = new DMValue(dMDefinition0, (long) 585, (Collection<BMDescription>) linkedList0);
      String string0 = dMValue0.getValue();
      assertNotNull(string0);
      assertEquals("Unknown", string0);
      assertEquals("DMValue{missingBM=[null], value=null, time=585}", dMValue0.toString());
  }
}
