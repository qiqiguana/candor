/*
 * This file was automatically generated by EvoSuite
 */

package fi.vtt.noen.mfw.bundle.probe.plugins.xmlrpc;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import fi.vtt.noen.mfw.bundle.probe.plugins.xmlrpc.XmlRpcServerClient;
import java.net.URL;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class XmlRpcServerClientEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      XmlRpcServerClient xmlRpcServerClient0 = new XmlRpcServerClient((URL) null);
      xmlRpcServerClient0.unregister((-270L));
  }

  @Test
  public void test1()  throws Throwable  {
      XmlRpcServerClient xmlRpcServerClient0 = new XmlRpcServerClient((URL) null);
      // Undeclared exception!
      try {
        xmlRpcServerClient0.register((Map<String, String>) null);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Error while calling server over XMLRPC
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      XmlRpcServerClient xmlRpcServerClient0 = new XmlRpcServerClient((URL) null);
      assertNotNull(xmlRpcServerClient0);
      
      xmlRpcServerClient0.event(0L, "?H@Hp0Vstdf5", "?H@Hp0Vstdf5", "?H@Hp0Vstdf5", (-1L));
      assertEquals("XmlRpcServerClient{url=null}", xmlRpcServerClient0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      XmlRpcServerClient xmlRpcServerClient0 = new XmlRpcServerClient((URL) null);
      assertNotNull(xmlRpcServerClient0);
      
      boolean boolean0 = xmlRpcServerClient0.measurement((-270L), "BOOLEAN", 46, "BOOLEAN", (long) 46);
      assertEquals(false, boolean0);
      assertEquals("XmlRpcServerClient{url=null}", xmlRpcServerClient0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      XmlRpcServerClient xmlRpcServerClient0 = new XmlRpcServerClient((URL) null);
      assertNotNull(xmlRpcServerClient0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      xmlRpcServerClient0.checkSubscriptions(610L, (List<Long>) linkedList0);
      assertEquals("XmlRpcServerClient{url=null}", xmlRpcServerClient0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      XmlRpcServerClient xmlRpcServerClient0 = new XmlRpcServerClient((URL) null);
      assertNotNull(xmlRpcServerClient0);
      
      boolean boolean0 = xmlRpcServerClient0.BMReport(0L, "?H@Hp0Vstdf5", "?H@Hp0Vstdf5", 0L, true, "?H@Hp0Vstdf5");
      assertEquals("XmlRpcServerClient{url=null}", xmlRpcServerClient0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      XmlRpcServerClient xmlRpcServerClient0 = new XmlRpcServerClient((URL) null);
      assertNotNull(xmlRpcServerClient0);
      
      // Undeclared exception!
      try {
        xmlRpcServerClient0.keepAlive(444L);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Error while calling server over XMLRPC
         */
      }
  }
}
