/*
 * This file was automatically generated by EvoSuite
 */

package fi.vtt.noen.mfw.bundle.probe.shared;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import fi.vtt.noen.mfw.bundle.probe.plugins.xmlrpc.ProbeAgentConfig;
import fi.vtt.noen.mfw.bundle.probe.plugins.xmlrpc.XmlRpcServerClient;
import fi.vtt.noen.mfw.bundle.probe.shared.MeasurementRequest;
import fi.vtt.noen.mfw.bundle.probe.shared.Probe;
import fi.vtt.noen.mfw.bundle.server.shared.ServerAgent;
import fi.vtt.noen.mfw.probes.configurabletester.ConfigurableTestProbeAgent;
import fi.vtt.noen.mfw.probes.http.HTTPProbeAgent;
import fi.vtt.noen.mfw.probes.tester.TestProbe1;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MeasurementRequestEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      MeasurementRequest measurementRequest0 = new MeasurementRequest((ServerAgent) null, "", (Probe) null);
      measurementRequest0.setLastMeasureTime((-6L));
      assertEquals((-6L), measurementRequest0.getLastMeasureTime());
      assertEquals("MeasurementRequest{measureURI='', interval=-1, server=null, subscriptionId=-1}", measurementRequest0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      MeasurementRequest measurementRequest0 = new MeasurementRequest((ServerAgent) null, "", (Probe) null);
      measurementRequest0.getProbe();
      assertEquals((-1L), measurementRequest0.getLastMeasureTime());
      assertEquals("MeasurementRequest{measureURI='', interval=-1, server=null, subscriptionId=-1}", measurementRequest0.toString());
      assertEquals((-1L), measurementRequest0.getInterval());
  }

  @Test
  public void test2()  throws Throwable  {
      MeasurementRequest measurementRequest0 = new MeasurementRequest((ServerAgent) null, "", (Probe) null);
      long long0 = measurementRequest0.getSubscriptionId();
      assertEquals((-1L), long0);
      assertEquals((-1L), measurementRequest0.getLastMeasureTime());
      assertEquals((-1L), measurementRequest0.getInterval());
  }

  @Test
  public void test3()  throws Throwable  {
      HTTPProbeAgent hTTPProbeAgent0 = new HTTPProbeAgent();
      MeasurementRequest measurementRequest0 = new MeasurementRequest((ServerAgent) null, "", (Probe) hTTPProbeAgent0, (long) (-487));
      long long0 = measurementRequest0.getLastMeasureTime();
      assertEquals((-1L), long0);
      assertEquals("MeasurementRequest{measureURI='', interval=-487, server=null, subscriptionId=-1}", measurementRequest0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      HTTPProbeAgent hTTPProbeAgent0 = new HTTPProbeAgent();
      MeasurementRequest measurementRequest0 = new MeasurementRequest((ServerAgent) null, "", (Probe) hTTPProbeAgent0, (long) (-487));
      long long0 = measurementRequest0.getInterval();
      assertEquals((-487L), long0);
      assertEquals((-1L), measurementRequest0.getLastMeasureTime());
      assertEquals((-1L), measurementRequest0.getSubscriptionId());
  }

  @Test
  public void test5()  throws Throwable  {
      MeasurementRequest measurementRequest0 = new MeasurementRequest((ServerAgent) null, "", (Probe) null);
      String string0 = measurementRequest0.getMeasureURI();
      assertEquals((-1L), measurementRequest0.getLastMeasureTime());
      assertNotNull(string0);
      assertEquals("MeasurementRequest{measureURI='', interval=-1, server=null, subscriptionId=-1}", measurementRequest0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      TestProbe1 testProbe1_0 = new TestProbe1();
      MeasurementRequest measurementRequest0 = new MeasurementRequest((ServerAgent) null, (String) null, (Probe) testProbe1_0, (-1L), (-4L));
      measurementRequest0.getServer();
  }

  @Test
  public void test7()  throws Throwable  {
      MeasurementRequest measurementRequest0 = new MeasurementRequest((ServerAgent) null, "", (Probe) null);
      String string0 = measurementRequest0.toString();
      assertEquals((-1L), measurementRequest0.getLastMeasureTime());
      assertEquals("MeasurementRequest{measureURI='', interval=-1, server=null, subscriptionId=-1}", string0);
      assertNotNull(string0);
  }

  @Test
  public void test8()  throws Throwable  {
      HTTPProbeAgent hTTPProbeAgent0 = new HTTPProbeAgent();
      MeasurementRequest measurementRequest0 = new MeasurementRequest((ServerAgent) null, "", (Probe) hTTPProbeAgent0, (long) (-487));
      boolean boolean0 = measurementRequest0.equals((Object) "-487");
      assertEquals("MeasurementRequest{measureURI='', interval=-487, server=null, subscriptionId=-1}", measurementRequest0.toString());
      assertEquals((-1L), measurementRequest0.getLastMeasureTime());
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      TestProbe1 testProbe1_0 = new TestProbe1();
      MeasurementRequest measurementRequest0 = new MeasurementRequest((ServerAgent) null, (String) null, (Probe) testProbe1_0, (-1L), (-4L));
      boolean boolean0 = measurementRequest0.equals((Object) null);
      assertEquals((-1L), measurementRequest0.getLastMeasureTime());
      assertEquals("MeasurementRequest{measureURI='null', interval=-1, server=null, subscriptionId=-4}", measurementRequest0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      TestProbe1 testProbe1_0 = new TestProbe1();
      MeasurementRequest measurementRequest0 = new MeasurementRequest((ServerAgent) null, (String) null, (Probe) testProbe1_0, (-1L), (-1L));
      MeasurementRequest measurementRequest1 = new MeasurementRequest((ServerAgent) null, (String) null, (Probe) testProbe1_0);
      boolean boolean0 = measurementRequest0.equals((Object) measurementRequest1);
      assertEquals("MeasurementRequest{measureURI='null', interval=-1, server=null, subscriptionId=-1}", measurementRequest0.toString());
      assertEquals(true, boolean0);
      assertEquals((-1L), measurementRequest0.getLastMeasureTime());
  }

  @Test
  public void test11()  throws Throwable  {
      TestProbe1 testProbe1_0 = new TestProbe1();
      MeasurementRequest measurementRequest0 = new MeasurementRequest((ServerAgent) null, (String) null, (Probe) testProbe1_0, (-1L), (-4L));
      MeasurementRequest measurementRequest1 = new MeasurementRequest((ServerAgent) null, (String) null, (Probe) testProbe1_0, (long) 474);
      boolean boolean0 = measurementRequest0.equals((Object) measurementRequest1);
      assertEquals(false, boolean0);
      assertEquals("MeasurementRequest{measureURI='null', interval=474, server=null, subscriptionId=-1}", measurementRequest1.toString());
      assertEquals((-1L), measurementRequest1.getLastMeasureTime());
  }

  @Test
  public void test12()  throws Throwable  {
      TestProbe1 testProbe1_0 = new TestProbe1();
      MeasurementRequest measurementRequest0 = new MeasurementRequest((ServerAgent) null, (String) null, (Probe) testProbe1_0, (-1L), (-4L));
      MeasurementRequest measurementRequest1 = new MeasurementRequest((ServerAgent) null, (String) null, (Probe) testProbe1_0);
      boolean boolean0 = measurementRequest0.equals((Object) measurementRequest1);
      assertEquals((-1L), measurementRequest1.getLastMeasureTime());
      assertFalse(measurementRequest1.equals(measurementRequest0));
      assertEquals(false, boolean0);
      assertEquals("MeasurementRequest{measureURI='null', interval=-1, server=null, subscriptionId=-4}", measurementRequest0.toString());
  }

  @Test
  public void test13()  throws Throwable  {
      TestProbe1 testProbe1_0 = new TestProbe1();
      MeasurementRequest measurementRequest0 = new MeasurementRequest((ServerAgent) null, (String) null, (Probe) testProbe1_0, (-1L), (-1L));
      int int0 = measurementRequest0.hashCode();
      assertEquals((-1L), measurementRequest0.getLastMeasureTime());
      assertEquals((-962), int0);
  }

  @Test
  public void test14()  throws Throwable  {
      ProbeAgentConfig probeAgentConfig0 = new ProbeAgentConfig(3, " zAx:tH7+-#", 3, 3, 3);
      XmlRpcServerClient xmlRpcServerClient0 = (XmlRpcServerClient)probeAgentConfig0.getDestination();
      ConfigurableTestProbeAgent configurableTestProbeAgent0 = new ConfigurableTestProbeAgent();
      MeasurementRequest measurementRequest0 = new MeasurementRequest((ServerAgent) xmlRpcServerClient0, " zAx:tH7+-#", (Probe) configurableTestProbeAgent0, (long) 3);
      int int0 = measurementRequest0.hashCode();
      assertEquals(2026888120, int0);
  }
}
