/*
 * This file was automatically generated by EvoSuite
 */

package fi.vtt.noen.testgen.model.daikon.constraints;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import fi.vtt.noen.testgen.model.daikon.constraints.AlwaysInArrayConstraint;
import java.util.Collection;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class AlwaysInArrayConstraintEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      AlwaysInArrayConstraint alwaysInArrayConstraint0 = new AlwaysInArrayConstraint("<F Q|x{[?7", "<F Q|x{[?7");
      assertNotNull(alwaysInArrayConstraint0);
      
      boolean boolean0 = alwaysInArrayConstraint0.isEnabled();
      assertEquals("reference:<F Q|x{[ always in reference:<F Q|x{[", alwaysInArrayConstraint0.toString());
      assertEquals(true, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      AlwaysInArrayConstraint alwaysInArrayConstraint0 = new AlwaysInArrayConstraint("<F Q|x{[?7", "<F Q|x{[?7");
      assertNotNull(alwaysInArrayConstraint0);
      
      String string0 = alwaysInArrayConstraint0.parameterValues("assertTrue(<F Q|x{[.contains(<F Q|x{[?7));\n");
      assertEquals("    return (assertTrue(<F Q|x{[.contains(<F Q|x{[?7));\n) randomItemFrom(<F Q|x{[);\n", string0);
      assertEquals("reference:<F Q|x{[ always in reference:<F Q|x{[", alwaysInArrayConstraint0.toString());
      assertNotNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      AlwaysInArrayConstraint alwaysInArrayConstraint0 = new AlwaysInArrayConstraint("<F Q|x{[?7", "<F Q|x{[?7");
      assertNotNull(alwaysInArrayConstraint0);
      
      String string0 = alwaysInArrayConstraint0.asAssert("<F Q|x{[?7");
      assertNotNull(string0);
      assertEquals("reference:<F Q|x{[ always in reference:<F Q|x{[", alwaysInArrayConstraint0.toString());
      assertEquals("assertTrue(<F Q|x{[.contains(<F Q|x{[?7));\n", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      AlwaysInArrayConstraint alwaysInArrayConstraint0 = new AlwaysInArrayConstraint("<F Q|x{[?7", "<F Q|x{[?7");
      assertNotNull(alwaysInArrayConstraint0);
      
      String string0 = alwaysInArrayConstraint0.guardMethod();
      assertNotNull(string0);
      assertEquals("  public boolean <F Q|x{[IsNotIn<F Q|x{[() {\n    if (<F Q|x{[.contains(<F Q|x{[)) {\n      return false;\n    }\n    return true;\n  }\n", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      AlwaysInArrayConstraint alwaysInArrayConstraint0 = new AlwaysInArrayConstraint("<F Q|x{[?7", "<F Q|x{[?7");
      assertNotNull(alwaysInArrayConstraint0);
      
      String string0 = alwaysInArrayConstraint0.toString();
      assertEquals("reference:<F Q|x{[ always in reference:<F Q|x{[", string0);
      assertNotNull(string0);
  }

  @Test
  public void test5()  throws Throwable  {
      AlwaysInArrayConstraint alwaysInArrayConstraint0 = new AlwaysInArrayConstraint("<F Q|x{[?7", "<F Q|x{[?7");
      assertNotNull(alwaysInArrayConstraint0);
      
      Collection<String> collection0 = alwaysInArrayConstraint0.arrayNames();
      assertNotNull(collection0);
      assertEquals("reference:<F Q|x{[ always in reference:<F Q|x{[", alwaysInArrayConstraint0.toString());
      assertEquals(1, collection0.size());
  }
}
