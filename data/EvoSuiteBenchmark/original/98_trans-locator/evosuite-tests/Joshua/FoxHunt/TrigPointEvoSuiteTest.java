/*
 * This file was automatically generated by EvoSuite
 */

package Joshua.FoxHunt;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import Joshua.FoxHunt.TrigPoint;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TrigPointEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      TrigPoint trigPoint0 = new TrigPoint(1183.7535250360597, 1183.7535250360597, (-1));
      double double0 = trigPoint0.getY();
      assertEquals(false, trigPoint0.fox);
      assertEquals((-0.017453292519943295), trigPoint0.theta, 0.01D);
      assertEquals(1183.7535250360597, double0, 0.01D);
      assertEquals(1183.7535250360597, trigPoint0.x, 0.01D);
  }

  @Test
  public void test1()  throws Throwable  {
      TrigPoint trigPoint0 = new TrigPoint(1208.9138972758783, 1183.7535250360597, (-1), true);
      assertEquals(true, trigPoint0.isFox());
      assertEquals((-0.017453292519943295), trigPoint0.theta, 0.01D);
      assertEquals(1208.9138972758783, trigPoint0.y, 0.01D);
      assertEquals(1183.7535250360597, trigPoint0.x, 0.01D);
  }

  @Test
  public void test2()  throws Throwable  {
      TrigPoint trigPoint0 = new TrigPoint((-1458.1925701725627), (-748.727854124765), 0.0);
      double double0 = trigPoint0.getTheta();
      assertEquals((-748.727854124765), trigPoint0.x, 0.01D);
      assertEquals(false, trigPoint0.fox);
      assertEquals((-1458.1925701725627), trigPoint0.y, 0.01D);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test3()  throws Throwable  {
      TrigPoint trigPoint0 = new TrigPoint(1183.7535250360597, 1183.7535250360597, (-1));
      boolean boolean0 = trigPoint0.isFox();
      assertEquals((-0.017453292519943295), trigPoint0.theta, 0.01D);
      assertEquals(1183.7535250360597, trigPoint0.y, 0.01D);
      assertEquals(1183.7535250360597, trigPoint0.x, 0.01D);
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      TrigPoint trigPoint0 = new TrigPoint((-1.0), 0.0, 1183.7535250360597, false);
      assertEquals(false, trigPoint0.fox);
      assertEquals((-1.0), trigPoint0.y, 0.01D);
      assertEquals(0.0, trigPoint0.x, 0.01D);
      assertEquals(1183.7535250360597, trigPoint0.theta, 0.01D);
  }

  @Test
  public void test5()  throws Throwable  {
      TrigPoint trigPoint0 = new TrigPoint(1183.7535250360597, 1183.7535250360597, (-1));
      double double0 = trigPoint0.getX();
      assertEquals(1183.7535250360597, trigPoint0.y, 0.01D);
      assertEquals((-0.017453292519943295), trigPoint0.theta, 0.01D);
      assertEquals(false, trigPoint0.fox);
      assertEquals(1183.7535250360597, double0, 0.01D);
  }
}
