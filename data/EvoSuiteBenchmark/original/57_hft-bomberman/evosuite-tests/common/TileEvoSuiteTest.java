/*
 * This file was automatically generated by EvoSuite
 */

package common;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import common.GameObject;
import common.Tile;
import java.awt.Point;
import java.util.Collection;
import java.util.TreeSet;
import javax.swing.JDesktopPane;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TileEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      Point point0 = jDesktopPane0.getLocation();
      Tile tile0 = new Tile(point0);
      tile0.setType("_J");
      assertEquals(false, tile0.isBombable());
      assertEquals(1.0, tile0.getSpeedFactor(), 0.01D);
      assertEquals(true, tile0.isAccessible());
      assertEquals(true, tile0.isVisible());
  }

  @Test
  public void test1()  throws Throwable  {
      Tile tile0 = new Tile((Point) null);
      tile0.setBombable(true);
      tile0.destroy();
      assertEquals(false, tile0.isActive());
      assertEquals(true, tile0.isBombable());
  }

  @Test
  public void test2()  throws Throwable  {
      Tile tile0 = new Tile((Point) null);
      // Undeclared exception!
      try {
        tile0.getCollisionRectangle();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      Tile tile0 = new Tile((Point) null);
      boolean boolean0 = tile0.collide((GameObject) tile0);
      assertEquals(false, tile0.isBombable());
      assertEquals(1.0, tile0.getSpeedFactor(), 0.01D);
      assertEquals(true, tile0.isVisible());
      assertEquals(true, tile0.isAccessable());
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      Tile tile0 = new Tile((Point) null);
      boolean boolean0 = tile0.isAccessible();
      assertEquals(true, boolean0);
      assertEquals(true, tile0.isVisible());
      assertEquals(false, tile0.isBombable());
      assertEquals(1.0, tile0.getSpeedFactor(), 0.01D);
  }

  @Test
  public void test5()  throws Throwable  {
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      Point point0 = jDesktopPane0.getLocation();
      Tile tile0 = new Tile(point0);
      tile0.setAccessible(true);
      assertEquals(1.0, tile0.getSpeedFactor(), 0.01D);
      assertEquals(false, tile0.isBombable());
      assertEquals(true, tile0.isVisible());
      assertEquals(true, tile0.isAccessible());
  }

  @Test
  public void test6()  throws Throwable  {
      Tile tile0 = new Tile((Point) null);
      double double0 = tile0.getSpeedFactor();
      assertEquals(false, tile0.isBombable());
      assertEquals(true, tile0.isAccessible());
      assertEquals(true, tile0.isVisible());
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test7()  throws Throwable  {
      Tile tile0 = new Tile((Point) null);
      tile0.update();
      assertEquals(true, tile0.isVisible());
      assertEquals(1.0, tile0.getSpeedFactor(), 0.01D);
      assertEquals(false, tile0.isBombable());
      assertEquals(true, tile0.isAccessible());
  }

  @Test
  public void test8()  throws Throwable  {
      Tile tile0 = new Tile((Point) null);
      tile0.getType();
      assertEquals(false, tile0.isBombable());
      assertEquals(true, tile0.isVisible());
      assertEquals(true, tile0.isAccessable());
      assertEquals(1.0, tile0.getSpeedFactor(), 0.01D);
  }

  @Test
  public void test9()  throws Throwable  {
      Tile tile0 = new Tile((Point) null);
      tile0.destroy();
      assertEquals(false, tile0.isActive());
      assertEquals(true, tile0.isVisible());
  }

  @Test
  public void test10()  throws Throwable  {
      Tile tile0 = new Tile((Point) null);
      assertEquals(false, tile0.isBombable());
      
      tile0.setProperties((String) null, true, true);
      assertEquals(true, tile0.isBombable());
  }

  @Test
  public void test11()  throws Throwable  {
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      Point point0 = jDesktopPane0.getLocation();
      Tile tile0 = new Tile(point0);
      boolean boolean0 = tile0.isAccessable();
      assertEquals(true, boolean0);
      assertEquals(true, tile0.isVisible());
      assertEquals(false, tile0.isBombable());
      assertEquals(1.0, tile0.getSpeedFactor(), 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      Tile tile0 = new Tile((Point) null);
      boolean boolean0 = tile0.isBombable();
      assertEquals(1.0, tile0.getSpeedFactor(), 0.01D);
      assertEquals(true, tile0.isAccessible());
      assertEquals(false, boolean0);
      assertEquals(true, tile0.isVisible());
  }

  @Test
  public void test13()  throws Throwable  {
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      Point point0 = jDesktopPane0.getLocation();
      Tile tile0 = new Tile(point0);
      TreeSet<GameObject> treeSet0 = new TreeSet<GameObject>();
      tile0.updateWithCollisionCheck((Collection<GameObject>) treeSet0);
      assertEquals(true, tile0.isAccessible());
      assertEquals(false, tile0.isBombable());
      assertEquals(true, tile0.isVisible());
      assertEquals(1.0, tile0.getSpeedFactor(), 0.01D);
      assertEquals(true, tile0.isAccessable());
  }

  @Test
  public void test14()  throws Throwable  {
      Tile tile0 = new Tile((Point) null);
      boolean boolean0 = tile0.isVisible();
      assertEquals(true, boolean0);
      assertEquals(1.0, tile0.getSpeedFactor(), 0.01D);
      assertEquals(false, tile0.isBombable());
      assertEquals(true, tile0.isAccessable());
  }

  @Test
  public void test15()  throws Throwable  {
      Tile tile0 = new Tile((Point) null);
      tile0.setVisible(true);
      assertEquals(1.0, tile0.getSpeedFactor(), 0.01D);
      assertEquals(false, tile0.isBombable());
      assertEquals(true, tile0.isAccessible());
      assertEquals(true, tile0.isVisible());
  }
}
