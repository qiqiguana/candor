/*
 * This file was automatically generated by EvoSuite
 */

package common;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import common.PowerUp;
import common.Tile;
import java.awt.Point;
import javax.swing.text.DefaultCaret;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class GameObjectEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      PowerUp powerUp0 = new PowerUp((Point) null);
      boolean boolean0 = powerUp0.isVisible();
      assertEquals(true, powerUp0.isActive());
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      PowerUp powerUp0 = new PowerUp((Point) null);
      // Undeclared exception!
      try {
        powerUp0.setPosition((Point) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      Point point0 = defaultCaret0.getLocation();
      PowerUp powerUp0 = new PowerUp(point0);
      int int0 = powerUp0.getId();
      assertEquals(false, powerUp0.isVisible());
      assertEquals(0, int0);
      assertEquals(true, powerUp0.isActive());
  }

  @Test
  public void test3()  throws Throwable  {
      Tile tile0 = new Tile((Point) null);
      tile0.setVisible();
      assertEquals(true, tile0.isActive());
  }

  @Test
  public void test4()  throws Throwable  {
      Tile tile0 = new Tile((Point) null);
      tile0.getPosition();
      assertEquals(true, tile0.isActive());
  }

  @Test
  public void test5()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      Point point0 = defaultCaret0.getLocation();
      PowerUp powerUp0 = new PowerUp(point0);
      assertEquals(true, powerUp0.isActive());
      
      powerUp0.setInactive();
      assertEquals(false, powerUp0.isActive());
      assertEquals(false, powerUp0.isVisible());
  }

  @Test
  public void test6()  throws Throwable  {
      Tile tile0 = new Tile((Point) null);
      boolean boolean0 = tile0.isActive();
      assertEquals(true, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      Tile tile0 = new Tile((Point) null);
      tile0.setId(0);
      assertEquals(0, tile0.getId());
      assertEquals(true, tile0.isActive());
  }
}
