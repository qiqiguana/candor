/*
 * This file was automatically generated by EvoSuite
 */

package com.gbshape.dbe.derby;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.gbshape.dbe.derby.DerbyTableStructure;
import com.gbshape.dbe.struts.bean.ColumnBean;
import com.gbshape.dbe.struts.bean.DBDataBean;
import com.gbshape.dbe.struts.bean.TableStatusBean;
import com.gbshape.dbe.struts.bean.TableStructureBean;
import com.gbshape.dbe.struts.form.ColumnForm;
import com.gbshape.dbe.xml.CreateTableXmlBean;
import java.util.ArrayList;
import javax.servlet.http.HttpServletRequest;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DerbyTableStructureEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DerbyTableStructure derbyTableStructure0 = new DerbyTableStructure();
      DBDataBean dBDataBean0 = new DBDataBean();
      // Undeclared exception!
      try {
        derbyTableStructure0.addIndex((HttpServletRequest) null, dBDataBean0, "", "");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      DerbyTableStructure derbyTableStructure0 = new DerbyTableStructure();
      DBDataBean dBDataBean0 = new DBDataBean();
      // Undeclared exception!
      try {
        derbyTableStructure0.dropUnique((HttpServletRequest) null, dBDataBean0, "jh)6#k\"YZFa&,}a", "jh)6#k\"YZFa&,}a", "jh)6#k\"YZFa&,}a");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      DerbyTableStructure derbyTableStructure0 = new DerbyTableStructure();
      DBDataBean dBDataBean0 = new DBDataBean();
      // Undeclared exception!
      try {
        derbyTableStructure0.drop((HttpServletRequest) null, dBDataBean0, "' doesn't map to a String object");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      DerbyTableStructure derbyTableStructure0 = new DerbyTableStructure();
      DBDataBean dBDataBean0 = new DBDataBean();
      // Undeclared exception!
      try {
        derbyTableStructure0.dropIndex((HttpServletRequest) null, dBDataBean0, "nv2XCOUD''", "nv2XCOUD''", "nv2XCOUD''");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      DerbyTableStructure derbyTableStructure0 = new DerbyTableStructure();
      DBDataBean dBDataBean0 = new DBDataBean();
      // Undeclared exception!
      try {
        derbyTableStructure0.dropPrimary((HttpServletRequest) null, dBDataBean0, "hF%!qW)-WmWax<)nN|X", "hF%!qW)-WmWax<)nN|X", "hF%!qW)-WmWax<)nN|X");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      DerbyTableStructure derbyTableStructure0 = new DerbyTableStructure();
      DBDataBean dBDataBean0 = new DBDataBean();
      // Undeclared exception!
      try {
        derbyTableStructure0.truncate((HttpServletRequest) null, dBDataBean0, "Empty stack (returning null)");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      DerbyTableStructure derbyTableStructure0 = new DerbyTableStructure();
      DBDataBean dBDataBean0 = new DBDataBean();
      // Undeclared exception!
      try {
        derbyTableStructure0.addUnique((HttpServletRequest) null, dBDataBean0, "\"r-WE", "\"r-WE");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      DerbyTableStructure derbyTableStructure0 = new DerbyTableStructure();
      DBDataBean dBDataBean0 = new DBDataBean();
      // Undeclared exception!
      try {
        derbyTableStructure0.alterDrop((HttpServletRequest) null, dBDataBean0, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      DerbyTableStructure derbyTableStructure0 = new DerbyTableStructure();
      DBDataBean dBDataBean0 = new DBDataBean();
      TableStatusBean tableStatusBean0 = derbyTableStructure0.getStatus(dBDataBean0, "nv2XCOUD''", false);
      assertEquals("nv2XCOUD''", tableStatusBean0.getTableName());
  }

  @Test
  public void test9()  throws Throwable  {
      DerbyTableStructure derbyTableStructure0 = new DerbyTableStructure();
      DBDataBean dBDataBean0 = new DBDataBean();
      TableStatusBean tableStatusBean0 = derbyTableStructure0.getStatus(dBDataBean0, "' doesn't map to a String object", true);
      assertEquals("' doesn't map to a String object", tableStatusBean0.getTableName());
  }

  @Test
  public void test10()  throws Throwable  {
      DerbyTableStructure derbyTableStructure0 = new DerbyTableStructure();
      DBDataBean dBDataBean0 = new DBDataBean();
      TableStructureBean tableStructureBean0 = derbyTableStructure0.getStructure(dBDataBean0, "' doesn't map to a String object");
      assertNotNull(tableStructureBean0);
      assertEquals("' doesn't map to a String object", tableStructureBean0.getTableName());
  }

  @Test
  public void test11()  throws Throwable  {
      DerbyTableStructure derbyTableStructure0 = new DerbyTableStructure();
      DBDataBean dBDataBean0 = new DBDataBean();
      ColumnForm columnForm0 = new ColumnForm();
      columnForm0.setNotnull("t5ue");
      ColumnBean columnBean0 = new ColumnBean();
      ArrayList<Object> arrayList0 = derbyTableStructure0.alterModify((HttpServletRequest) null, dBDataBean0, "t5ue", columnBean0, columnForm0);
      assertEquals("[ALTER TABLE t5ue CHANGE      DEFAULT '' ]", arrayList0.toString());
      assertNotNull(arrayList0);
  }

  @Test
  public void test12()  throws Throwable  {
      DerbyTableStructure derbyTableStructure0 = new DerbyTableStructure();
      DBDataBean dBDataBean0 = new DBDataBean();
      ColumnBean columnBean0 = new ColumnBean();
      ColumnForm columnForm0 = new ColumnForm();
      columnForm0.setNotnull("true");
      ArrayList<Object> arrayList0 = derbyTableStructure0.alterModify((HttpServletRequest) null, dBDataBean0, "true", columnBean0, columnForm0);
      assertNotNull(arrayList0);
      assertEquals("[ALTER TABLE true CHANGE      DEFAULT ''  NOT NULL ]", arrayList0.toString());
  }

  @Test
  public void test13()  throws Throwable  {
      DerbyTableStructure derbyTableStructure0 = new DerbyTableStructure();
      DBDataBean dBDataBean0 = new DBDataBean();
      ColumnForm columnForm0 = new ColumnForm();
      columnForm0.setDefaultValue("[LOOKUP] No propertieC file nf name '");
      // Undeclared exception!
      try {
        derbyTableStructure0.alterAdd((HttpServletRequest) null, dBDataBean0, "[LOOKUP] No propertieC file nf name '", columnForm0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * StringEquals is not supposed to work on a null caller
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      DerbyTableStructure derbyTableStructure0 = new DerbyTableStructure();
      DBDataBean dBDataBean0 = new DBDataBean();
      ColumnForm columnForm0 = new ColumnForm();
      columnForm0.setNotnull("t5ue");
      ArrayList<Object> arrayList0 = derbyTableStructure0.alterAdd((HttpServletRequest) null, dBDataBean0, "t5ue", columnForm0);
      assertEquals("[ALTER TABLE t5ue ADD    ]", arrayList0.toString());
      assertNotNull(arrayList0);
  }

  @Test
  public void test15()  throws Throwable  {
      DerbyTableStructure derbyTableStructure0 = new DerbyTableStructure();
      DBDataBean dBDataBean0 = new DBDataBean();
      CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean();
      createTableXmlBean0.addColumn((ColumnBean) null);
      ArrayList<Object> arrayList0 = derbyTableStructure0.create((HttpServletRequest) null, dBDataBean0, createTableXmlBean0);
      assertNotNull(arrayList0);
      assertEquals("[CREATE TABLE '' ()]", arrayList0.toString());
  }

  @Test
  public void test16()  throws Throwable  {
      DerbyTableStructure derbyTableStructure0 = new DerbyTableStructure();
      DBDataBean dBDataBean0 = new DBDataBean();
      CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean();
      ColumnBean columnBean0 = new ColumnBean();
      createTableXmlBean0.addColumn(columnBean0);
      ArrayList<Object> arrayList0 = derbyTableStructure0.create((HttpServletRequest) null, dBDataBean0, createTableXmlBean0);
      assertEquals("[CREATE TABLE '' ()]", arrayList0.toString());
      assertNotNull(arrayList0);
  }

  @Test
  public void test17()  throws Throwable  {
      DerbyTableStructure derbyTableStructure0 = new DerbyTableStructure();
      DBDataBean dBDataBean0 = new DBDataBean();
      CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean();
      ColumnBean columnBean0 = new ColumnBean();
      createTableXmlBean0.addColumn(columnBean0);
      columnBean0.setLen(1);
      columnBean0.setName("startlement(");
      ArrayList<Object> arrayList0 = derbyTableStructure0.create((HttpServletRequest) null, dBDataBean0, createTableXmlBean0);
      assertEquals("[CREATE TABLE '' (startlement(   (1)  NOT NULL )]", arrayList0.toString());
      assertNotNull(arrayList0);
  }

  @Test
  public void test18()  throws Throwable  {
      DerbyTableStructure derbyTableStructure0 = new DerbyTableStructure();
      DBDataBean dBDataBean0 = new DBDataBean();
      CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean();
      ColumnBean columnBean0 = new ColumnBean();
      createTableXmlBean0.addColumn(columnBean0);
      columnBean0.setName("startlement(");
      columnBean0.setNullable(true);
      ArrayList<Object> arrayList0 = derbyTableStructure0.create((HttpServletRequest) null, dBDataBean0, createTableXmlBean0);
      assertEquals("[CREATE TABLE '' (startlement(   NULL )]", arrayList0.toString());
      assertNotNull(arrayList0);
  }

  @Test
  public void test19()  throws Throwable  {
      DerbyTableStructure derbyTableStructure0 = new DerbyTableStructure();
      DBDataBean dBDataBean0 = new DBDataBean();
      CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean();
      ColumnBean columnBean0 = new ColumnBean();
      createTableXmlBean0.addColumn(columnBean0);
      columnBean0.setName("startlement(");
      columnBean0.setDefaultValue("startlement(");
      ArrayList<Object> arrayList0 = derbyTableStructure0.create((HttpServletRequest) null, dBDataBean0, createTableXmlBean0);
      assertNotNull(arrayList0);
      assertEquals("[CREATE TABLE '' (startlement(   NOT NULL  default 'startlement(' )]", arrayList0.toString());
  }

  @Test
  public void test20()  throws Throwable  {
      DerbyTableStructure derbyTableStructure0 = new DerbyTableStructure();
      DBDataBean dBDataBean0 = new DBDataBean();
      CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean();
      ColumnBean columnBean0 = new ColumnBean();
      createTableXmlBean0.addColumn(columnBean0);
      columnBean0.setComment("startlement(");
      columnBean0.setName("startlement(");
      ArrayList<Object> arrayList0 = derbyTableStructure0.create((HttpServletRequest) null, dBDataBean0, createTableXmlBean0);
      assertNotNull(arrayList0);
      assertEquals("[CREATE TABLE '' (startlement(   NOT NULL  COMMENT 'startlement(' )]", arrayList0.toString());
  }

  @Test
  public void test21()  throws Throwable  {
      DerbyTableStructure derbyTableStructure0 = new DerbyTableStructure();
      DBDataBean dBDataBean0 = new DBDataBean();
      CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean();
      ColumnBean columnBean0 = new ColumnBean();
      createTableXmlBean0.addColumn(columnBean0);
      columnBean0.setExtra("startlement(");
      columnBean0.setName("startlement(");
      ArrayList<Object> arrayList0 = derbyTableStructure0.create((HttpServletRequest) null, dBDataBean0, createTableXmlBean0);
      assertNotNull(arrayList0);
      assertEquals("[CREATE TABLE '' (startlement(   NOT NULL  startlement( )]", arrayList0.toString());
  }

  @Test
  public void test22()  throws Throwable  {
      DerbyTableStructure derbyTableStructure0 = new DerbyTableStructure();
      DBDataBean dBDataBean0 = new DBDataBean();
      CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean();
      ColumnBean columnBean0 = new ColumnBean();
      createTableXmlBean0.addColumn(columnBean0);
      createTableXmlBean0.addColumn(columnBean0);
      columnBean0.setKey(true);
      columnBean0.setName("startlement(");
      ArrayList<Object> arrayList0 = derbyTableStructure0.create((HttpServletRequest) null, dBDataBean0, createTableXmlBean0);
      assertEquals("[CREATE TABLE '' (startlement(   NOT NULL ,startlement(   NOT NULL , PRIMARY KEY  (startlement(,startlement())]", arrayList0.toString());
      assertNotNull(arrayList0);
  }

  @Test
  public void test23()  throws Throwable  {
      DerbyTableStructure derbyTableStructure0 = new DerbyTableStructure();
      DBDataBean dBDataBean0 = new DBDataBean();
      CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean();
      ColumnBean columnBean0 = new ColumnBean();
      createTableXmlBean0.addColumn(columnBean0);
      createTableXmlBean0.addColumn(columnBean0);
      columnBean0.setName("startlement(");
      columnBean0.setIndex(true);
      ArrayList<Object> arrayList0 = derbyTableStructure0.create((HttpServletRequest) null, dBDataBean0, createTableXmlBean0);
      assertNotNull(arrayList0);
      assertEquals("[CREATE TABLE '' (startlement(   NOT NULL ,startlement(   NOT NULL , INDEX  (startlement(,startlement())]", arrayList0.toString());
  }

  @Test
  public void test24()  throws Throwable  {
      DerbyTableStructure derbyTableStructure0 = new DerbyTableStructure();
      DBDataBean dBDataBean0 = new DBDataBean();
      CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean();
      ColumnBean columnBean0 = new ColumnBean();
      createTableXmlBean0.addColumn(columnBean0);
      columnBean0.setUnique(true);
      createTableXmlBean0.addColumn(columnBean0);
      columnBean0.setName("startlement(");
      ArrayList<Object> arrayList0 = derbyTableStructure0.create((HttpServletRequest) null, dBDataBean0, createTableXmlBean0);
      assertEquals("[CREATE TABLE '' (startlement(   NOT NULL ,startlement(   NOT NULL , UNIQUE  (startlement(,startlement())]", arrayList0.toString());
      assertNotNull(arrayList0);
  }

  @Test
  public void test25()  throws Throwable  {
      DerbyTableStructure derbyTableStructure0 = new DerbyTableStructure();
      DBDataBean dBDataBean0 = new DBDataBean();
      CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean();
      createTableXmlBean0.setComment("startlement(");
      ArrayList<Object> arrayList0 = derbyTableStructure0.create((HttpServletRequest) null, dBDataBean0, createTableXmlBean0);
      assertNotNull(arrayList0);
      assertEquals("[CREATE TABLE '' () COMMENT = 'startlement(' ]", arrayList0.toString());
  }

  @Test
  public void test26()  throws Throwable  {
      DerbyTableStructure derbyTableStructure0 = new DerbyTableStructure();
      DBDataBean dBDataBean0 = new DBDataBean();
      CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean();
      ArrayList<Object> arrayList0 = derbyTableStructure0.create((HttpServletRequest) null, dBDataBean0, createTableXmlBean0);
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      try {
        derbyTableStructure0.changePrimary((HttpServletRequest) null, dBDataBean0, "startlement(", (ArrayList) arrayList0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * java.lang.String cannot be cast to com.gbshape.dbe.struts.bean.ColumnBean
         */
      }
  }

  @Test
  public void test27()  throws Throwable  {
      DerbyTableStructure derbyTableStructure0 = new DerbyTableStructure();
      DBDataBean dBDataBean0 = new DBDataBean();
      CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean();
      ColumnBean columnBean0 = new ColumnBean();
      createTableXmlBean0.addColumn(columnBean0);
      ArrayList<Object> arrayList0 = createTableXmlBean0.getColumns();
      // Undeclared exception!
      try {
        derbyTableStructure0.changePrimary((HttpServletRequest) null, dBDataBean0, "startlement(", (ArrayList) arrayList0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test28()  throws Throwable  {
      DerbyTableStructure derbyTableStructure0 = new DerbyTableStructure();
      DBDataBean dBDataBean0 = new DBDataBean();
      CreateTableXmlBean createTableXmlBean0 = new CreateTableXmlBean();
      ColumnBean columnBean0 = new ColumnBean();
      createTableXmlBean0.addColumn(columnBean0);
      createTableXmlBean0.addColumn(columnBean0);
      columnBean0.setKey(true);
      columnBean0.setName("startlement(");
      ArrayList<Object> arrayList0 = createTableXmlBean0.getColumns();
      // Undeclared exception!
      try {
        derbyTableStructure0.changePrimary((HttpServletRequest) null, dBDataBean0, "startlement(", (ArrayList) arrayList0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
