/*
 * This file was automatically generated by EvoSuite
 */

package com.gbshape.dbe.struts.bean;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.gbshape.dbe.struts.bean.ColumnBean;
import java.util.ArrayList;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ColumnBeanEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ColumnBean columnBean0 = new ColumnBean();
      String string0 = columnBean0.getExtra();
      assertEquals(0, columnBean0.getLen());
      assertNotNull(string0);
      assertEquals(0, columnBean0.getDec());
  }

  @Test
  public void test1()  throws Throwable  {
      ColumnBean columnBean0 = new ColumnBean();
      String string0 = columnBean0.getOwner();
      assertEquals(0, columnBean0.getLen());
      assertNotNull(string0);
      assertEquals(0, columnBean0.getDec());
  }

  @Test
  public void test2()  throws Throwable  {
      ColumnBean columnBean0 = new ColumnBean();
      int int0 = columnBean0.getDec();
      assertEquals(0, columnBean0.getLen());
      assertEquals(0, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      ColumnBean columnBean0 = new ColumnBean();
      columnBean0.isNullable();
      assertEquals(0, columnBean0.getDec());
      assertEquals(0, columnBean0.getLen());
  }

  @Test
  public void test4()  throws Throwable  {
      ColumnBean columnBean0 = new ColumnBean();
      columnBean0.setNullable(false);
      assertEquals(0, columnBean0.getLen());
      assertEquals(false, columnBean0.isNullable());
      assertEquals(0, columnBean0.getDec());
  }

  @Test
  public void test5()  throws Throwable  {
      ColumnBean columnBean0 = new ColumnBean();
      columnBean0.setOriginalDT("");
      assertEquals(0, columnBean0.getLen());
      assertEquals(0, columnBean0.getDec());
  }

  @Test
  public void test6()  throws Throwable  {
      ColumnBean columnBean0 = new ColumnBean();
      ArrayList<Object> arrayList0 = columnBean0.getConstraintList();
      assertEquals(0, columnBean0.getLen());
      assertEquals(0, columnBean0.getDec());
      assertNotNull(arrayList0);
  }

  @Test
  public void test7()  throws Throwable  {
      ColumnBean columnBean0 = new ColumnBean();
      columnBean0.setName("");
      assertEquals(0, columnBean0.getDec());
      assertEquals(0, columnBean0.getLen());
  }

  @Test
  public void test8()  throws Throwable  {
      ColumnBean columnBean0 = new ColumnBean();
      columnBean0.setDec(0);
      assertEquals(0, columnBean0.getDec());
      assertEquals(0, columnBean0.getLen());
  }

  @Test
  public void test9()  throws Throwable  {
      ColumnBean columnBean0 = new ColumnBean();
      columnBean0.setDataType("5>$sYgW");
      assertEquals(0, columnBean0.getDec());
      assertEquals(0, columnBean0.getLen());
  }

  @Test
  public void test10()  throws Throwable  {
      ColumnBean columnBean0 = new ColumnBean();
      String string0 = columnBean0.getClassName();
      assertNotNull(string0);
      assertEquals(0, columnBean0.getLen());
      assertEquals(0, columnBean0.getDec());
  }

  @Test
  public void test11()  throws Throwable  {
      ColumnBean columnBean0 = new ColumnBean();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      columnBean0.setConstraintList(arrayList0);
      assertEquals(0, columnBean0.getDec());
      assertEquals(0, columnBean0.getLen());
  }

  @Test
  public void test12()  throws Throwable  {
      ColumnBean columnBean0 = new ColumnBean();
      columnBean0.isIndex();
      assertEquals(0, columnBean0.getDec());
      assertEquals(0, columnBean0.getLen());
  }

  @Test
  public void test13()  throws Throwable  {
      ColumnBean columnBean0 = new ColumnBean();
      columnBean0.setExtra("3>4Chq(P<N");
      assertEquals(0, columnBean0.getDec());
      assertEquals(0, columnBean0.getLen());
  }

  @Test
  public void test14()  throws Throwable  {
      ColumnBean columnBean0 = new ColumnBean();
      columnBean0.setTableName("CkJ>a<om7#uf8}}9/");
      assertEquals(0, columnBean0.getDec());
      assertEquals(0, columnBean0.getLen());
  }

  @Test
  public void test15()  throws Throwable  {
      ColumnBean columnBean0 = new ColumnBean();
      String string0 = columnBean0.getDim();
      assertEquals(0, columnBean0.getLen());
      assertNotNull(string0);
      assertEquals(0, columnBean0.getDec());
  }

  @Test
  public void test16()  throws Throwable  {
      ColumnBean columnBean0 = new ColumnBean();
      String string0 = columnBean0.getOriginalDT();
      assertEquals(0, columnBean0.getDec());
      assertNotNull(string0);
      assertEquals(0, columnBean0.getLen());
  }

  @Test
  public void test17()  throws Throwable  {
      ColumnBean columnBean0 = new ColumnBean();
      columnBean0.setUnique(false);
      assertEquals(0, columnBean0.getLen());
      assertEquals(0, columnBean0.getDec());
      assertEquals(false, columnBean0.isUnique());
  }

  @Test
  public void test18()  throws Throwable  {
      ColumnBean columnBean0 = new ColumnBean();
      columnBean0.setCodeType("^(a4KWj,P]}jjR");
      assertEquals(0, columnBean0.getDec());
      assertEquals(0, columnBean0.getLen());
  }

  @Test
  public void test19()  throws Throwable  {
      ColumnBean columnBean0 = new ColumnBean();
      String string0 = columnBean0.getName();
      assertEquals(0, columnBean0.getDec());
      assertEquals(0, columnBean0.getLen());
      assertNotNull(string0);
  }

  @Test
  public void test20()  throws Throwable  {
      ColumnBean columnBean0 = new ColumnBean();
      int int0 = columnBean0.getLen();
      assertEquals(0, columnBean0.getDec());
      assertEquals(0, int0);
  }

  @Test
  public void test21()  throws Throwable  {
      ColumnBean columnBean0 = new ColumnBean();
      columnBean0.setMode("CkJ>a<om7#uf8}}9/");
      assertEquals(0, columnBean0.getLen());
      assertEquals(0, columnBean0.getDec());
  }

  @Test
  public void test22()  throws Throwable  {
      ColumnBean columnBean0 = new ColumnBean();
      columnBean0.setOwner("3>4Chq(P<N");
      assertEquals(0, columnBean0.getDec());
      assertEquals(0, columnBean0.getLen());
  }

  @Test
  public void test23()  throws Throwable  {
      ColumnBean columnBean0 = new ColumnBean();
      columnBean0.isUnique();
      assertEquals(0, columnBean0.getDec());
      assertEquals(0, columnBean0.getLen());
  }

  @Test
  public void test24()  throws Throwable  {
      ColumnBean columnBean0 = new ColumnBean();
      columnBean0.setClassName("");
      assertEquals(0, columnBean0.getDec());
      assertEquals(0, columnBean0.getLen());
  }

  @Test
  public void test25()  throws Throwable  {
      ColumnBean columnBean0 = new ColumnBean();
      String string0 = columnBean0.getDataType();
      assertEquals(0, columnBean0.getLen());
      assertNotNull(string0);
      assertEquals(0, columnBean0.getDec());
  }

  @Test
  public void test26()  throws Throwable  {
      ColumnBean columnBean0 = new ColumnBean();
      columnBean0.setIndex(true);
      assertEquals(true, columnBean0.isIndex());
  }

  @Test
  public void test27()  throws Throwable  {
      ColumnBean columnBean0 = new ColumnBean();
      columnBean0.setDefaultValue("");
      assertEquals(0, columnBean0.getDec());
      assertEquals(0, columnBean0.getLen());
  }

  @Test
  public void test28()  throws Throwable  {
      ColumnBean columnBean0 = new ColumnBean();
      columnBean0.isKey();
      assertEquals(0, columnBean0.getLen());
      assertEquals(0, columnBean0.getDec());
  }

  @Test
  public void test29()  throws Throwable  {
      ColumnBean columnBean0 = new ColumnBean();
      String string0 = columnBean0.getComment();
      assertEquals(0, columnBean0.getDec());
      assertEquals(0, columnBean0.getLen());
      assertNotNull(string0);
  }

  @Test
  public void test30()  throws Throwable  {
      ColumnBean columnBean0 = new ColumnBean();
      String string0 = columnBean0.getDefaultValue();
      assertEquals(0, columnBean0.getDec());
      assertEquals(0, columnBean0.getLen());
      assertNotNull(string0);
  }

  @Test
  public void test31()  throws Throwable  {
      ColumnBean columnBean0 = new ColumnBean();
      columnBean0.setKey(true);
      assertEquals(true, columnBean0.isKey());
  }

  @Test
  public void test32()  throws Throwable  {
      ColumnBean columnBean0 = new ColumnBean();
      String string0 = columnBean0.getTableName();
      assertEquals(0, columnBean0.getDec());
      assertNotNull(string0);
      assertEquals(0, columnBean0.getLen());
  }

  @Test
  public void test33()  throws Throwable  {
      ColumnBean columnBean0 = new ColumnBean();
      columnBean0.setComment(";");
      assertEquals(0, columnBean0.getLen());
      assertEquals(0, columnBean0.getDec());
  }

  @Test
  public void test34()  throws Throwable  {
      ColumnBean columnBean0 = new ColumnBean();
      String string0 = columnBean0.getCodeType();
      assertEquals(0, columnBean0.getLen());
      assertNotNull(string0);
      assertEquals(0, columnBean0.getDec());
  }

  @Test
  public void test35()  throws Throwable  {
      ColumnBean columnBean0 = new ColumnBean();
      columnBean0.setLen((-1));
      assertEquals(-1, columnBean0.getLen());
  }

  @Test
  public void test36()  throws Throwable  {
      ColumnBean columnBean0 = new ColumnBean();
      String string0 = columnBean0.getMode();
      assertEquals(0, columnBean0.getDec());
      assertNotNull(string0);
      assertEquals(0, columnBean0.getLen());
  }

  @Test
  public void test37()  throws Throwable  {
      ColumnBean columnBean0 = new ColumnBean();
      columnBean0.setDim("");
      assertEquals(0, columnBean0.getLen());
      assertEquals(0, columnBean0.getDec());
  }
}
