/*
 * This file was automatically generated by EvoSuite
 */

package com.gbshape.dbe.utils;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.gbshape.dbe.struts.bean.ColumnBean;
import com.gbshape.dbe.struts.bean.DBDataBean;
import com.gbshape.dbe.struts.bean.DataTypeBean;
import com.gbshape.dbe.struts.bean.TableStructureBean;
import com.gbshape.dbe.utils.DBEHelper;
import java.io.StringWriter;
import java.util.HashMap;
import javax.servlet.http.HttpServletRequest;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DBEHelperEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DBDataBean dBDataBean0 = new DBDataBean();
      String string0 = DBEHelper.decodeAjax(dBDataBean0, "Azk#B9");
      assertEquals("Azk#B9", string0);
      assertNotNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      DBDataBean dBDataBean0 = new DBDataBean();
      String string0 = DBEHelper.decodeISO(dBDataBean0, "?");
      assertEquals("?", string0);
      assertNotNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      DBEHelper dBEHelper0 = new DBEHelper();
      assertNotNull(dBEHelper0);
  }

  @Test
  public void test3()  throws Throwable  {
      boolean boolean0 = DBEHelper.isDBAvailable("");
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = DBEHelper.parseJSON("\"8F:i{UNS47V#)u");
      assertNotNull(hashMap0);
      assertEquals("{8F=i{UNS47V#)u}", hashMap0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = DBEHelper.parseJSON("F:i{U@a47V#)u");
      assertEquals(false, hashMap0.isEmpty());
      assertNotNull(hashMap0);
  }

  @Test
  public void test6()  throws Throwable  {
      DBDataBean dBDataBean0 = new DBDataBean();
      StringWriter stringWriter0 = new StringWriter(548);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      ColumnBean columnBean0 = new ColumnBean();
      // Undeclared exception!
      try {
        DBEHelper.appendValue(dBDataBean0, stringBuffer0, columnBean0, "[>9yhl;Ae<2Ty1b>}");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      DBDataBean dBDataBean0 = new DBDataBean();
      StringWriter stringWriter0 = new StringWriter(552);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      ColumnBean columnBean0 = new ColumnBean();
      DBEHelper.appendValue(dBDataBean0, stringBuffer0, columnBean0, "");
      assertEquals("= NULL ", stringBuffer0.toString());
      assertEquals("= NULL ", stringWriter0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      DBDataBean dBDataBean0 = new DBDataBean();
      TableStructureBean tableStructureBean0 = new TableStructureBean();
      StringBuffer stringBuffer0 = DBEHelper.createInsertQuery((HttpServletRequest) null, dBDataBean0, "8A<%rr@*dR10", tableStructureBean0);
      assertNotNull(stringBuffer0);
      
      ColumnBean columnBean0 = new ColumnBean();
      // Undeclared exception!
      try {
        DBEHelper.appendValueNoDecodeAjax(dBDataBean0, stringBuffer0, columnBean0, "8A<%rr@*dR10");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      DBDataBean dBDataBean0 = new DBDataBean();
      TableStructureBean tableStructureBean0 = new TableStructureBean();
      StringBuffer stringBuffer0 = DBEHelper.createInsertQuery((HttpServletRequest) null, dBDataBean0, "", tableStructureBean0);
      assertNotNull(stringBuffer0);
      
      ColumnBean columnBean0 = new ColumnBean();
      DBEHelper.appendValueNoDecodeAjax(dBDataBean0, stringBuffer0, columnBean0, "");
      assertEquals(33, stringBuffer0.length());
      assertEquals(62, stringBuffer0.capacity());
  }

  @Test
  public void test10()  throws Throwable  {
      DBDataBean dBDataBean0 = new DBDataBean();
      ColumnBean columnBean0 = new ColumnBean();
      // Undeclared exception!
      try {
        DBEHelper.appendValues(dBDataBean0, (StringBuffer) null, columnBean0, "t");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      DBDataBean dBDataBean0 = new DBDataBean();
      ColumnBean columnBean0 = new ColumnBean();
      // Undeclared exception!
      try {
        DBEHelper.appendValues(dBDataBean0, (StringBuffer) null, columnBean0, "");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      DBDataBean dBDataBean0 = new DBDataBean();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      ColumnBean columnBean0 = new ColumnBean();
      // Undeclared exception!
      try {
        DBEHelper.appendValuesNoDecodeAjax(dBDataBean0, stringBuffer0, columnBean0, "M}D");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      DBDataBean dBDataBean0 = new DBDataBean();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      ColumnBean columnBean0 = new ColumnBean();
      DBEHelper.appendValuesNoDecodeAjax(dBDataBean0, stringBuffer0, columnBean0, "");
      assertEquals(" NULL ", stringWriter0.toString());
      assertEquals(6, stringBuffer0.length());
  }

  @Test
  public void test14()  throws Throwable  {
      DBDataBean dBDataBean0 = new DBDataBean();
      DataTypeBean dataTypeBean0 = DBEHelper.getDataTypeBean(dBDataBean0, "Connection.close() has already been called. Invalid operation in this state.");
      assertNull(dataTypeBean0);
  }

  @Test
  public void test15()  throws Throwable  {
      DBDataBean dBDataBean0 = new DBDataBean();
      TableStructureBean tableStructureBean0 = new TableStructureBean();
      String string0 = DBEHelper.createInsertQuery((String[]) null, dBDataBean0, "", tableStructureBean0, "");
      assertEquals("INSERT INTO  () VALUES () ", string0);
      assertNotNull(string0);
  }
}
