/*
 * This file was automatically generated by EvoSuite
 */

package com.gbshape.dbe.struts.form;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.gbshape.dbe.struts.form.SequenceForm;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SequenceFormEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SequenceForm sequenceForm0 = new SequenceForm();
      String string0 = sequenceForm0.getCache();
      assertNotNull(string0);
      assertEquals("no", sequenceForm0.getCycle());
      assertEquals("1", sequenceForm0.getIncrement());
  }

  @Test
  public void test1()  throws Throwable  {
      SequenceForm sequenceForm0 = new SequenceForm();
      String string0 = sequenceForm0.getIncrement();
      assertEquals("1", string0);
      assertEquals("no", sequenceForm0.getCycle());
      assertNotNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      SequenceForm sequenceForm0 = new SequenceForm();
      sequenceForm0.setCache("");
      assertEquals("1", sequenceForm0.getIncrement());
      assertEquals("no", sequenceForm0.getCycle());
  }

  @Test
  public void test3()  throws Throwable  {
      SequenceForm sequenceForm0 = new SequenceForm();
      sequenceForm0.setComment(">|-YAN|%*\"");
      assertEquals("no", sequenceForm0.getCycle());
      assertEquals("1", sequenceForm0.getIncrement());
  }

  @Test
  public void test4()  throws Throwable  {
      SequenceForm sequenceForm0 = new SequenceForm();
      sequenceForm0.setName("4E");
      assertEquals("no", sequenceForm0.getCycle());
      assertEquals("1", sequenceForm0.getIncrement());
  }

  @Test
  public void test5()  throws Throwable  {
      SequenceForm sequenceForm0 = new SequenceForm();
      sequenceForm0.setMin("");
      assertEquals("1", sequenceForm0.getIncrement());
      assertEquals("no", sequenceForm0.getCycle());
  }

  @Test
  public void test6()  throws Throwable  {
      SequenceForm sequenceForm0 = new SequenceForm();
      String string0 = sequenceForm0.getCycle();
      assertEquals("1", sequenceForm0.getIncrement());
      assertNotNull(string0);
      assertEquals("no", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      SequenceForm sequenceForm0 = new SequenceForm();
      String string0 = sequenceForm0.getMax();
      assertNotNull(string0);
      assertEquals("no", sequenceForm0.getCycle());
      assertEquals("1", sequenceForm0.getIncrement());
  }

  @Test
  public void test8()  throws Throwable  {
      SequenceForm sequenceForm0 = new SequenceForm();
      String string0 = sequenceForm0.getName();
      assertEquals("1", sequenceForm0.getIncrement());
      assertEquals("no", sequenceForm0.getCycle());
      assertNotNull(string0);
  }

  @Test
  public void test9()  throws Throwable  {
      SequenceForm sequenceForm0 = new SequenceForm();
      String string0 = sequenceForm0.getComment();
      assertNotNull(string0);
      assertEquals("1", sequenceForm0.getIncrement());
      assertEquals("no", sequenceForm0.getCycle());
  }

  @Test
  public void test10()  throws Throwable  {
      SequenceForm sequenceForm0 = new SequenceForm();
      String string0 = sequenceForm0.getStart();
      assertEquals("1", sequenceForm0.getIncrement());
      assertEquals("no", sequenceForm0.getCycle());
      assertNotNull(string0);
  }

  @Test
  public void test11()  throws Throwable  {
      SequenceForm sequenceForm0 = new SequenceForm();
      assertEquals("no", sequenceForm0.getCycle());
      
      sequenceForm0.setCycle("");
      assertEquals("1", sequenceForm0.getIncrement());
  }

  @Test
  public void test12()  throws Throwable  {
      SequenceForm sequenceForm0 = new SequenceForm();
      String string0 = sequenceForm0.toString();
      assertEquals("1", sequenceForm0.getIncrement());
      assertNotNull(string0);
      assertEquals("no", sequenceForm0.getCycle());
  }

  @Test
  public void test13()  throws Throwable  {
      SequenceForm sequenceForm0 = new SequenceForm();
      String string0 = sequenceForm0.getMin();
      assertEquals("no", sequenceForm0.getCycle());
      assertEquals("1", sequenceForm0.getIncrement());
      assertNotNull(string0);
  }

  @Test
  public void test14()  throws Throwable  {
      SequenceForm sequenceForm0 = new SequenceForm();
      assertEquals("1", sequenceForm0.getIncrement());
      
      sequenceForm0.setIncrement("");
      assertEquals("no", sequenceForm0.getCycle());
  }

  @Test
  public void test15()  throws Throwable  {
      SequenceForm sequenceForm0 = new SequenceForm();
      sequenceForm0.setMax("4E");
      assertEquals("1", sequenceForm0.getIncrement());
      assertEquals("no", sequenceForm0.getCycle());
  }

  @Test
  public void test16()  throws Throwable  {
      SequenceForm sequenceForm0 = new SequenceForm();
      sequenceForm0.setStart("");
      assertEquals("no", sequenceForm0.getCycle());
      assertEquals("1", sequenceForm0.getIncrement());
  }
}
