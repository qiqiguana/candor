/*
 * This file was automatically generated by EvoSuite
 */

package net.sf.sugar.fspath;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.File;
import java.io.IOException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import net.sf.sugar.fspath.Callback;
import net.sf.sugar.fspath.FSPathResult;
import net.sf.sugar.fspath.FSPathResultListImpl;
import net.sf.sugar.fspath.FSPathResultModificationListImpl;
import net.sf.sugar.fspath.OperationNotPermittedException;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class FSPathResultListImplEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      FSPathResultListImpl fSPathResultListImpl0 = new FSPathResultListImpl();
      FSPathResultListImpl fSPathResultListImpl1 = (FSPathResultListImpl)fSPathResultListImpl0.each((Callback) null);
      assertSame(fSPathResultListImpl1, fSPathResultListImpl0);
  }

  @Test
  public void test1()  throws Throwable  {
      FSPathResultListImpl fSPathResultListImpl0 = new FSPathResultListImpl();
      fSPathResultListImpl0.add((FSPathResult) null);
      // Undeclared exception!
      try {
        fSPathResultListImpl0.each((Callback) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          FSPathResultListImpl fSPathResultListImpl0 = new FSPathResultListImpl();
          File file0 = new File(".");
          FSPathResult fSPathResult0 = new FSPathResult(file0);
          fSPathResultListImpl0.add(fSPathResult0);
          FSPathResultModificationListImpl fSPathResultModificationListImpl0 = (FSPathResultModificationListImpl)fSPathResultListImpl0.delete();
          assertEquals(true, fSPathResultListImpl0.isListOfFiles());
          assertEquals(1, fSPathResultModificationListImpl0.size());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
      FSPathResultListImpl fSPathResultListImpl0 = new FSPathResultListImpl();
      try {
        fSPathResultListImpl0.delete();
        fail("Expecting exception: OperationNotPermittedException");
      } catch(OperationNotPermittedException e) {
        /*
         * Delete is only permitted on FSPathResult objects containing a File object
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      FSPathResultListImpl fSPathResultListImpl0 = new FSPathResultListImpl();
      File file0 = new File(" is not writable");
      FSPathResult fSPathResult0 = new FSPathResult(file0);
      fSPathResultListImpl0.add(fSPathResult0);
      try {
        fSPathResultListImpl0.move(" is not writable");
        fail("Expecting exception: OperationNotPermittedException");
      } catch(OperationNotPermittedException e) {
        /*
         * Unable to copy to a directory that doesn't exist
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      FSPathResultListImpl fSPathResultListImpl0 = new FSPathResultListImpl();
      try {
        fSPathResultListImpl0.copy("f");
        fail("Expecting exception: OperationNotPermittedException");
      } catch(OperationNotPermittedException e) {
        /*
         * Copy is only permitted on FSPathResult objects containing a java.io.File object
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          FSPathResultListImpl fSPathResultListImpl0 = new FSPathResultListImpl();
          File file0 = new File(".");
          FSPathResult fSPathResult0 = new FSPathResult(file0);
          fSPathResultListImpl0.add(fSPathResult0);
          try {
            fSPathResultListImpl0.move(".");
            fail("Expecting exception: OperationNotPermittedException");
          } catch(OperationNotPermittedException e) {
            /*
             * The current process does not have sufficent priveledges to access /mnt/fastdata/ac1gf/SF110/dist/60_sugar/.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
      FSPathResultListImpl fSPathResultListImpl0 = new FSPathResultListImpl();
      FSPathResult fSPathResult0 = new FSPathResult("&Tm&{b$Im0}bR:QC(#");
      fSPathResultListImpl0.add(fSPathResult0);
      try {
        fSPathResultListImpl0.move("&Tm&{b$Im0}bR:QC(#");
        fail("Expecting exception: OperationNotPermittedException");
      } catch(OperationNotPermittedException e) {
        /*
         * move is only permitted on FSPathResult objects containing a java.io.File object
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          FSPathResultListImpl fSPathResultListImpl0 = new FSPathResultListImpl();
          File file0 = new File(" is not writable");
          FSPathResult fSPathResult0 = new FSPathResult(file0);
          fSPathResultListImpl0.add(fSPathResult0);
          FSPathResultModificationListImpl fSPathResultModificationListImpl0 = (FSPathResultModificationListImpl)fSPathResultListImpl0.rename(" is not writable", " is not writable");
          assertEquals(true, fSPathResultListImpl0.isListOfFiles());
          assertEquals("[/mnt/fastdata/ac1gf/SF110/dist/60_sugar/ is not writable]", fSPathResultModificationListImpl0.toString());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test9()  throws Throwable  {
      FSPathResultListImpl fSPathResultListImpl0 = new FSPathResultListImpl();
      try {
        fSPathResultListImpl0.rename("X", "X");
        fail("Expecting exception: OperationNotPermittedException");
      } catch(OperationNotPermittedException e) {
        /*
         * Copy is only permitted on FSPathResult objects containing a java.io.File object
         */
      }
  }
}
