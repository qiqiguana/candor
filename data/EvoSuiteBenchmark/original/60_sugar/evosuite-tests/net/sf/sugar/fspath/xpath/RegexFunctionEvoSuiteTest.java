/*
 * This file was automatically generated by EvoSuite
 */

package net.sf.sugar.fspath.xpath;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import java.util.regex.Pattern;
import javax.imageio.metadata.IIOMetadataNode;
import javax.xml.xpath.XPathFunctionException;
import net.sf.sugar.fspath.xpath.RegexFunction;
import org.junit.BeforeClass;
import org.w3c.dom.NodeList;

@RunWith(EvoSuiteRunner.class)
public class RegexFunctionEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double((double) 0);
      linkedList0.add(0, double0);
      RegexFunction regexFunction0 = new RegexFunction();
      // Undeclared exception!
      try {
        regexFunction0.evaluate((List) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 1, Size: 1
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      RegexFunction regexFunction0 = new RegexFunction();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      Boolean boolean0 = Boolean.TRUE;
      linkedList0.add(boolean0);
      // Undeclared exception!
      try {
        regexFunction0.evaluate((List) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 1, Size: 1
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      linkedList0.add((Double) null);
      RegexFunction regexFunction0 = new RegexFunction();
      try {
        regexFunction0.evaluate((List) linkedList0);
        fail("Expecting exception: XPathFunctionException");
      } catch(XPathFunctionException e) {
        /*
         * Unable to evaluate fs:match() function, could not convert argument type
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      RegexFunction regexFunction0 = new RegexFunction();
      LinkedList<NodeList> linkedList0 = new LinkedList<NodeList>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("(");
      linkedList0.add((NodeList) iIOMetadataNode0);
      // Undeclared exception!
      try {
        regexFunction0.evaluate((List) linkedList0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      RegexFunction regexFunction0 = new RegexFunction();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("<\"^.2-dId");
      linkedList0.add("<\"^.2-dId");
      Pattern pattern0 = regexFunction0.getPattern((List) linkedList0);
      assertNotNull(pattern0);
      
      Boolean boolean0 = (Boolean)regexFunction0.evaluate((List) linkedList0);
      assertEquals(true, (boolean)boolean0);
  }
}
