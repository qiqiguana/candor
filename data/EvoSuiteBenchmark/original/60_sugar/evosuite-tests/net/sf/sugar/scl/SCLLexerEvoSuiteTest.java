/*
 * This file was automatically generated by EvoSuite
 */

package net.sf.sugar.scl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import java.io.Reader;
import net.sf.sugar.scl.SCLLexer;
import org.antlr.runtime.ANTLRReaderStream;
import org.antlr.runtime.ANTLRStringStream;
import org.antlr.runtime.CharStream;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.IntStream;
import org.antlr.runtime.MismatchedSetException;
import org.antlr.runtime.MismatchedTokenException;
import org.antlr.runtime.NoViableAltException;
import org.antlr.runtime.RecognitionException;
import org.antlr.runtime.RecognizerSharedState;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SCLLexerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ANTLRReaderStream aNTLRReaderStream0 = new ANTLRReaderStream();
      SCLLexer sCLLexer0 = new SCLLexer();
      SCLLexer.DFA8 sCLLexer_DFA8_0 = sCLLexer0.new DFA8(sCLLexer0);
      try {
        sCLLexer_DFA8_0.predict((IntStream) aNTLRReaderStream0);
        fail("Expecting exception: NoViableAltException");
      } catch(NoViableAltException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '.';
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream(charArray0, 1);
      SCLLexer sCLLexer0 = new SCLLexer((CharStream) aNTLRStringStream0);
      CommonToken commonToken0 = (CommonToken)sCLLexer0.nextToken();
      assertEquals(1, sCLLexer0.getCharIndex());
      assertEquals("[@-1,0:0='.',<19>,1:0]", commonToken0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream("2Z:3\".");
      SCLLexer sCLLexer0 = new SCLLexer((CharStream) aNTLRStringStream0);
      try {
        sCLLexer0.mEND_INCLUDE();
        fail("Expecting exception: MismatchedTokenException");
      } catch(MismatchedTokenException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      SCLLexer sCLLexer0 = new SCLLexer();
      // Undeclared exception!
      try {
        sCLLexer0.mCLOSE_NESTING();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      SCLLexer sCLLexer0 = new SCLLexer();
      // Undeclared exception!
      try {
        sCLLexer0.mSTART_UNPARSED_INCLUDE();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      SCLLexer sCLLexer0 = new SCLLexer();
      // Undeclared exception!
      try {
        sCLLexer0.mOPEN_NESTING();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[1] = ':';
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream(charArray0, (int) 'k');
      SCLLexer sCLLexer0 = new SCLLexer((CharStream) aNTLRStringStream0);
      sCLLexer0.mTokens();
      sCLLexer0.mTokens();
      assertEquals(2, sCLLexer0.getCharPositionInLine());
      assertEquals(2, aNTLRStringStream0.index());
  }

  @Test
  public void test7()  throws Throwable  {
      SCLLexer sCLLexer0 = new SCLLexer();
      // Undeclared exception!
      try {
        sCLLexer0.mSTRING_LITERAL();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      ANTLRReaderStream aNTLRReaderStream0 = new ANTLRReaderStream();
      SCLLexer sCLLexer0 = new SCLLexer((CharStream) aNTLRReaderStream0);
      String string0 = sCLLexer0.getGrammarFileName();
      assertEquals("net/sf/sugar/scl/SCL.g", string0);
  }

  @Test
  public void test9()  throws Throwable  {
      SCLLexer sCLLexer0 = new SCLLexer();
      // Undeclared exception!
      try {
        sCLLexer0.mSTART_INCLUDE();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '~';
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream(charArray0, (int) '~');
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      SCLLexer sCLLexer0 = new SCLLexer((CharStream) aNTLRStringStream0, recognizerSharedState0);
      sCLLexer0.mTokens();
      assertEquals(1, aNTLRStringStream0.getCharPositionInLine());
      assertEquals(13, recognizerSharedState0.type);
  }

  @Test
  public void test11()  throws Throwable  {
      ANTLRReaderStream aNTLRReaderStream0 = new ANTLRReaderStream();
      SCLLexer sCLLexer0 = new SCLLexer((CharStream) aNTLRReaderStream0);
      try {
        sCLLexer0.mVALID_NAME_CHARS();
        fail("Expecting exception: MismatchedSetException");
      } catch(MismatchedSetException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream("2Z:3\".");
      SCLLexer sCLLexer0 = new SCLLexer((CharStream) aNTLRStringStream0);
      sCLLexer0.mTokens();
      assertEquals(1, aNTLRStringStream0.index());
      assertEquals(1, sCLLexer0.getCharIndex());
  }

  @Test
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'k';
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream(charArray0, (int) 'k');
      SCLLexer sCLLexer0 = new SCLLexer((CharStream) aNTLRStringStream0);
      sCLLexer0.nextToken();
      assertEquals(1, sCLLexer0.getCharPositionInLine());
      assertEquals(1, aNTLRStringStream0.index());
  }

  @Test
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[9];
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream(charArray0, 1);
      SCLLexer sCLLexer0 = new SCLLexer((CharStream) aNTLRStringStream0);
      try {
        sCLLexer0.mWS();
        fail("Expecting exception: MismatchedSetException");
      } catch(MismatchedSetException e) {
      }
  }

  @Test
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[1] = ':';
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream(charArray0, (int) 'k');
      SCLLexer sCLLexer0 = new SCLLexer((CharStream) aNTLRStringStream0);
      sCLLexer0.mTokens();
      try {
        sCLLexer0.mWS();
        fail("Expecting exception: MismatchedSetException");
      } catch(MismatchedSetException e) {
      }
  }

  @Test
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = ' ';
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream(charArray0, (int) ' ');
      SCLLexer sCLLexer0 = new SCLLexer((CharStream) aNTLRStringStream0);
      try {
        sCLLexer0.mAS_KEYWORD();
        fail("Expecting exception: NoViableAltException");
      } catch(NoViableAltException e) {
      }
  }

  @Test
  public void test17()  throws Throwable  {
      ANTLRReaderStream aNTLRReaderStream0 = new ANTLRReaderStream((Reader) null, 0, 0);
      SCLLexer sCLLexer0 = new SCLLexer((CharStream) aNTLRReaderStream0);
      try {
        sCLLexer0.mAS_KEYWORD();
        fail("Expecting exception: NoViableAltException");
      } catch(NoViableAltException e) {
      }
  }

  @Test
  public void test18()  throws Throwable  {
      ANTLRReaderStream aNTLRReaderStream0 = new ANTLRReaderStream();
      SCLLexer sCLLexer0 = new SCLLexer((CharStream) aNTLRReaderStream0);
      try {
        sCLLexer0.mSTRING_SEQUENCE_CHAR();
        fail("Expecting exception: NoViableAltException");
      } catch(NoViableAltException e) {
      }
  }

  @Test
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '#';
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream(charArray0, (int) '-');
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      SCLLexer sCLLexer0 = new SCLLexer((CharStream) aNTLRStringStream0, recognizerSharedState0);
      sCLLexer0.mTokens();
      assertEquals(1, sCLLexer0.getCharIndex());
      assertEquals(16, recognizerSharedState0.type);
  }

  @Test
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '`';
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream(charArray0, 1);
      SCLLexer sCLLexer0 = new SCLLexer((CharStream) aNTLRStringStream0);
      CommonToken commonToken0 = (CommonToken)sCLLexer0.nextToken();
      assertEquals(1, aNTLRStringStream0.getCharPositionInLine());
      assertEquals("[@-1,0:0='`',<16>,1:0]", commonToken0.toString());
  }

  @Test
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[9];
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream(charArray0, 1);
      SCLLexer sCLLexer0 = new SCLLexer((CharStream) aNTLRStringStream0);
      sCLLexer0.setBacktrackingLevel((int) (byte)13);
      sCLLexer0.mLINE_COMMENT();
      assertEquals(1, aNTLRStringStream0.getCharPositionInLine());
      assertEquals(1, sCLLexer0.getCharIndex());
  }
}
