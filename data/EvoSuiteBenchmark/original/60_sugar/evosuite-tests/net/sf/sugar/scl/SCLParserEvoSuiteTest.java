/*
 * This file was automatically generated by EvoSuite
 */

package net.sf.sugar.scl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sun.org.apache.xerces.internal.dom.DocumentImpl;
import java.net.URI;
import java.util.List;
import javax.imageio.metadata.IIOMetadataNode;
import net.sf.sugar.scl.DefaultLocalReferenceProcessor;
import net.sf.sugar.scl.IncludeException;
import net.sf.sugar.scl.IncludeProcessor;
import net.sf.sugar.scl.LocalReference;
import net.sf.sugar.scl.LocalReferenceProcessor;
import net.sf.sugar.scl.SCLLexer;
import net.sf.sugar.scl.SCLParser;
import org.antlr.runtime.ANTLRInputStream;
import org.antlr.runtime.ANTLRReaderStream;
import org.antlr.runtime.ANTLRStringStream;
import org.antlr.runtime.BufferedTokenStream;
import org.antlr.runtime.CharStream;
import org.antlr.runtime.CommonTokenStream;
import org.antlr.runtime.LegacyCommonTokenStream;
import org.antlr.runtime.Parser;
import org.antlr.runtime.RecognitionException;
import org.antlr.runtime.RecognizerSharedState;
import org.antlr.runtime.TokenRewriteStream;
import org.antlr.runtime.TokenSource;
import org.antlr.runtime.TokenStream;
import org.antlr.runtime.UnbufferedTokenStream;
import org.evosuite.testcase.CodeUnderTestException;
import org.junit.BeforeClass;
import org.w3c.dom.DOMException;
import org.w3c.dom.Element;

@RunWith(EvoSuiteRunner.class)
public class SCLParserEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      SCLLexer sCLLexer0 = new SCLLexer((CharStream) aNTLRStringStream0);
      BufferedTokenStream bufferedTokenStream0 = new BufferedTokenStream((TokenSource) sCLLexer0);
      SCLParser sCLParser0 = new SCLParser((TokenStream) bufferedTokenStream0, recognizerSharedState0);
      sCLParser0.varName();
      assertEquals(6, recognizerSharedState0.lastErrorIndex);
      assertEquals(6, bufferedTokenStream0.index());
  }

  @Test
  public void test1()  throws Throwable  {
      UnbufferedTokenStream unbufferedTokenStream0 = new UnbufferedTokenStream((TokenSource) null);
      SCLParser sCLParser0 = new SCLParser((TokenStream) unbufferedTokenStream0);
      sCLParser0.prepareLocalRefTree((Element) null, (String) null);
      assertEquals(0, sCLParser0.getRuleMemoizationCacheSize());
  }

  @Test
  public void test2()  throws Throwable  {
      ANTLRReaderStream aNTLRReaderStream0 = new ANTLRReaderStream();
      SCLLexer sCLLexer0 = new SCLLexer((CharStream) aNTLRReaderStream0);
      UnbufferedTokenStream unbufferedTokenStream0 = new UnbufferedTokenStream((TokenSource) sCLLexer0);
      SCLParser sCLParser0 = new SCLParser((TokenStream) unbufferedTokenStream0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      sCLParser0.prepareLocalRef((Element) iIOMetadataNode0, (String) null, (String) null);
      assertNull(iIOMetadataNode0.getNodeName());
  }

  @Test
  public void test3()  throws Throwable  {
      ANTLRInputStream aNTLRInputStream0 = new ANTLRInputStream();
      SCLLexer sCLLexer0 = new SCLLexer((CharStream) aNTLRInputStream0, (RecognizerSharedState) null);
      CommonTokenStream commonTokenStream0 = new CommonTokenStream((TokenSource) sCLLexer0);
      SCLParser sCLParser0 = new SCLParser((TokenStream) commonTokenStream0);
      sCLParser0.namespaceName();
      assertEquals(6, commonTokenStream0.mark());
      assertEquals(6, commonTokenStream0.range());
  }

  @Test
  public void test4()  throws Throwable  {
      TokenRewriteStream tokenRewriteStream0 = new TokenRewriteStream();
      SCLParser sCLParser0 = new SCLParser((TokenStream) tokenRewriteStream0, (RecognizerSharedState) null);
      assertEquals(0, tokenRewriteStream0.range());
      
      SCLParser.DFA2 sCLParser_DFA2_0 = sCLParser0.new DFA2(sCLParser0);
      String string0 = sCLParser_DFA2_0.getDescription();
      assertEquals("170:1: statement : ( namespaceDecl | assignment | includeTree | t= localRefTree );", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      ANTLRReaderStream aNTLRReaderStream0 = new ANTLRReaderStream();
      SCLLexer sCLLexer0 = new SCLLexer((CharStream) aNTLRReaderStream0);
      UnbufferedTokenStream unbufferedTokenStream0 = new UnbufferedTokenStream((TokenSource) sCLLexer0);
      SCLParser sCLParser0 = new SCLParser((TokenStream) unbufferedTokenStream0);
      // Undeclared exception!
      try {
        sCLParser0.varValue();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
      assertEquals(5, unbufferedTokenStream0.range());
      assertEquals(5, unbufferedTokenStream0.mark());
  }

  @Test
  public void test6()  throws Throwable  {
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      SCLLexer sCLLexer0 = new SCLLexer((CharStream) aNTLRStringStream0);
      BufferedTokenStream bufferedTokenStream0 = new BufferedTokenStream((TokenSource) sCLLexer0);
      SCLParser sCLParser0 = new SCLParser((TokenStream) bufferedTokenStream0, recognizerSharedState0);
      sCLParser0.includeValue();
      assertEquals(1, recognizerSharedState0.syntaxErrors);
      assertEquals(6, bufferedTokenStream0.range());
  }

  @Test
  public void test7()  throws Throwable  {
      ANTLRInputStream aNTLRInputStream0 = new ANTLRInputStream();
      SCLLexer sCLLexer0 = new SCLLexer((CharStream) aNTLRInputStream0, (RecognizerSharedState) null);
      CommonTokenStream commonTokenStream0 = new CommonTokenStream((TokenSource) sCLLexer0);
      SCLParser sCLParser0 = new SCLParser((TokenStream) commonTokenStream0);
      sCLParser0.compositeNamespaceName();
      assertEquals(6, commonTokenStream0.index());
      assertEquals(7, commonTokenStream0.size());
  }

  @Test
  public void test8()  throws Throwable  {
      ANTLRInputStream aNTLRInputStream0 = new ANTLRInputStream();
      SCLLexer sCLLexer0 = new SCLLexer((CharStream) aNTLRInputStream0, (RecognizerSharedState) null);
      CommonTokenStream commonTokenStream0 = new CommonTokenStream((TokenSource) sCLLexer0);
      SCLParser sCLParser0 = new SCLParser((TokenStream) commonTokenStream0);
      // Undeclared exception!
      try {
        sCLParser0.scl();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      SCLLexer sCLLexer0 = new SCLLexer();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      TokenRewriteStream tokenRewriteStream0 = new TokenRewriteStream((TokenSource) sCLLexer0);
      SCLParser sCLParser0 = new SCLParser((TokenStream) tokenRewriteStream0, recognizerSharedState0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try {
        sCLParser0.loadInclude((Element) iIOMetadataNode0, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      LegacyCommonTokenStream legacyCommonTokenStream0 = new LegacyCommonTokenStream();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      SCLParser sCLParser0 = new SCLParser((TokenStream) legacyCommonTokenStream0, recognizerSharedState0);
      sCLParser0.setIncludeProcessor((IncludeProcessor) null);
      assertEquals("net/sf/sugar/scl/SCL.g", sCLParser0.getGrammarFileName());
  }

  @Test
  public void test11()  throws Throwable  {
      UnbufferedTokenStream unbufferedTokenStream0 = new UnbufferedTokenStream((TokenSource) null);
      SCLParser sCLParser0 = new SCLParser((TokenStream) unbufferedTokenStream0);
      assertNotNull(sCLParser0);
      
      String string0 = sCLParser0.sanitiseText(")3x%ia ]u9_KIW");
      assertEquals("3x%ia ]u9_KI", string0);
      assertNotNull(string0);
  }

  @Test
  public void test12()  throws Throwable  {
      LegacyCommonTokenStream legacyCommonTokenStream0 = new LegacyCommonTokenStream();
      SCLParser sCLParser0 = new SCLParser((TokenStream) legacyCommonTokenStream0);
      DefaultLocalReferenceProcessor defaultLocalReferenceProcessor0 = (DefaultLocalReferenceProcessor)sCLParser0.getLocalReferenceProcessor();
      assertNull(defaultLocalReferenceProcessor0);
  }

  @Test
  public void test13()  throws Throwable  {
      BufferedTokenStream bufferedTokenStream0 = new BufferedTokenStream((TokenSource) null);
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      SCLParser sCLParser0 = new SCLParser((TokenStream) bufferedTokenStream0, recognizerSharedState0);
      // Undeclared exception!
      try {
        sCLParser0.addChildElement((Element) null, (String) null);
        fail("Expecting exception: DOMException");
      } catch(DOMException e) {
        /*
         * INVALID_CHARACTER_ERR: An invalid or illegal XML character is specified. 
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      CommonTokenStream commonTokenStream0 = new CommonTokenStream();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      SCLParser sCLParser0 = new SCLParser((TokenStream) commonTokenStream0, recognizerSharedState0);
      DefaultLocalReferenceProcessor defaultLocalReferenceProcessor0 = new DefaultLocalReferenceProcessor();
      sCLParser0.setLocalReferenceProcessor((LocalReferenceProcessor) defaultLocalReferenceProcessor0);
      assertEquals(false, sCLParser0.failed());
  }

  @Test
  public void test15()  throws Throwable  {
      CommonTokenStream commonTokenStream0 = new CommonTokenStream();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      SCLParser sCLParser0 = new SCLParser((TokenStream) commonTokenStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0._fsp);
      
      DocumentImpl documentImpl0 = (DocumentImpl)sCLParser0.getRootDocument();
      assertEquals(true, documentImpl0.hasChildNodes());
  }

  @Test
  public void test16()  throws Throwable  {
      ANTLRInputStream aNTLRInputStream0 = new ANTLRInputStream();
      SCLLexer sCLLexer0 = new SCLLexer((CharStream) aNTLRInputStream0, (RecognizerSharedState) null);
      CommonTokenStream commonTokenStream0 = new CommonTokenStream((TokenSource) sCLLexer0);
      SCLParser sCLParser0 = new SCLParser((TokenStream) commonTokenStream0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IIOMetadataNode iIOMetadataNode1 = (IIOMetadataNode)sCLParser0.addChildElements((Element) iIOMetadataNode0, "");
      assertEquals(1, iIOMetadataNode1.getNodeType());
  }

  @Test
  public void test17()  throws Throwable  {
      BufferedTokenStream bufferedTokenStream0 = new BufferedTokenStream();
      SCLParser sCLParser0 = new SCLParser((TokenStream) bufferedTokenStream0);
      // Undeclared exception!
      try {
        sCLParser0.namespaceDecl();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test18()  throws Throwable  {
      ANTLRReaderStream aNTLRReaderStream0 = new ANTLRReaderStream();
      SCLLexer sCLLexer0 = new SCLLexer((CharStream) aNTLRReaderStream0);
      UnbufferedTokenStream unbufferedTokenStream0 = new UnbufferedTokenStream((TokenSource) sCLLexer0);
      SCLParser sCLParser0 = new SCLParser((TokenStream) unbufferedTokenStream0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      // Undeclared exception!
      try {
        sCLParser0.loadUnparsedInclude((Element) iIOMetadataNode0, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test19()  throws Throwable  {
      LegacyCommonTokenStream legacyCommonTokenStream0 = new LegacyCommonTokenStream();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      SCLParser sCLParser0 = new SCLParser((TokenStream) legacyCommonTokenStream0, recognizerSharedState0);
      List<LocalReference> list0 = sCLParser0.getLocalRefs();
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test20()  throws Throwable  {
      UnbufferedTokenStream unbufferedTokenStream0 = new UnbufferedTokenStream((TokenSource) null);
      SCLParser sCLParser0 = new SCLParser((TokenStream) unbufferedTokenStream0);
      URI uRI0 = sCLParser0.getRootSCLFile();
      assertNull(uRI0);
  }

  @Test
  public void test21()  throws Throwable  {
      CommonTokenStream commonTokenStream0 = new CommonTokenStream();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      SCLParser sCLParser0 = new SCLParser((TokenStream) commonTokenStream0, recognizerSharedState0);
      // Undeclared exception!
      try {
        sCLParser0.localRefTree();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test22()  throws Throwable  {
      UnbufferedTokenStream unbufferedTokenStream0 = new UnbufferedTokenStream((TokenSource) null);
      SCLParser sCLParser0 = new SCLParser((TokenStream) unbufferedTokenStream0);
      // Undeclared exception!
      try {
        sCLParser0.unparsedIncludeValue();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test23()  throws Throwable  {
      TokenRewriteStream tokenRewriteStream0 = new TokenRewriteStream();
      SCLParser sCLParser0 = new SCLParser((TokenStream) tokenRewriteStream0, (RecognizerSharedState) null);
      assertEquals(0, tokenRewriteStream0.range());
      
      String string0 = sCLParser0.getGrammarFileName();
      assertEquals("net/sf/sugar/scl/SCL.g", string0);
  }

  @Test
  public void test24()  throws Throwable  {
      LegacyCommonTokenStream legacyCommonTokenStream0 = new LegacyCommonTokenStream();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      SCLParser sCLParser0 = new SCLParser((TokenStream) legacyCommonTokenStream0, recognizerSharedState0);
      sCLParser0.setRootSCLFile((URI) null);
      assertEquals(0, sCLParser0.getNumberOfSyntaxErrors());
  }

  @Test
  public void test25()  throws Throwable  {
      LegacyCommonTokenStream legacyCommonTokenStream0 = new LegacyCommonTokenStream();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      Parser parser0 = new Parser((TokenStream) legacyCommonTokenStream0, recognizerSharedState0);
  }

  @Test
  public void test26()  throws Throwable  {
      LegacyCommonTokenStream legacyCommonTokenStream0 = new LegacyCommonTokenStream();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      SCLParser sCLParser0 = new SCLParser((TokenStream) legacyCommonTokenStream0, recognizerSharedState0);
      // Undeclared exception!
      try {
        sCLParser0.loadIncludeNodes((Element) null, "", "");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test27()  throws Throwable  {
      TokenRewriteStream tokenRewriteStream0 = new TokenRewriteStream();
      SCLParser sCLParser0 = new SCLParser((TokenStream) tokenRewriteStream0, (RecognizerSharedState) null);
      // Undeclared exception!
      try {
        sCLParser0.addAttribute((Element) null, (String) null, "net/sf/sugar/scl/SCL.g");
        fail("Expecting exception: DOMException");
      } catch(DOMException e) {
        /*
         * INVALID_CHARACTER_ERR: An invalid or illegal XML character is specified. 
         */
      }
  }

  @Test
  public void test28()  throws Throwable  {
      LegacyCommonTokenStream legacyCommonTokenStream0 = new LegacyCommonTokenStream();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      SCLParser sCLParser0 = new SCLParser((TokenStream) legacyCommonTokenStream0, recognizerSharedState0);
      IncludeProcessor includeProcessor0 = sCLParser0.getIncludeProcessor();
      assertNull(includeProcessor0);
  }
}
