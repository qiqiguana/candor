/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.beanbin.query;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.ConcurrentModificationException;
import net.sourceforge.beanbin.query.Conditional;
import net.sourceforge.beanbin.query.Criteria;
import net.sourceforge.beanbin.query.Query;
import net.sourceforge.beanbin.query.SearchType;
import net.sourceforge.beanbin.query.SortBy;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class QueryEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Query query0 = new Query();
      SortBy sortBy0 = query0.getSortType();
      query0.setSortBy("", sortBy0);
      assertEquals(-1, query0.getPosition());
      assertEquals(-1, query0.getFetchSize());
  }

  @Test
  public void test1()  throws Throwable  {
      Query query0 = new Query();
      query0.setFetchSize((-1989));
      assertEquals(-1989, query0.getFetchSize());
      assertEquals(0, query0.getPosition());
  }

  @Test
  public void test2()  throws Throwable  {
      Query query0 = new Query();
      int int0 = query0.getPosition();
      assertEquals(-1, query0.getFetchSize());
      assertEquals((-1), int0);
  }

  @Test
  public void test3()  throws Throwable  {
      SearchType searchType0 = SearchType.EQUALS;
      Criteria criteria0 = new Criteria(" bd>Za*KVxE-]", (Object) null, searchType0);
      Query query0 = new Query(criteria0);
      assertNotNull(query0);
      
      int int0 = query0.getFetchSize();
      assertEquals(" bd>Za*KVxE-] EQUALS null", query0.toString());
      assertEquals((-1), int0);
      assertEquals(-1, query0.getPosition());
  }

  @Test
  public void test4()  throws Throwable  {
      Query query0 = new Query();
      query0.getSortByProperty();
      assertEquals(-1, query0.getFetchSize());
      assertEquals(-1, query0.getPosition());
  }

  @Test
  public void test5()  throws Throwable  {
      Query query0 = new Query();
      Conditional conditional0 = Conditional.AND;
      query0.setNextConditional(conditional0);
      query0.add((Criteria) null);
      assertEquals(-1, query0.getPosition());
      assertEquals(-1, query0.getFetchSize());
  }

  @Test
  public void test6()  throws Throwable  {
      SearchType searchType0 = SearchType.EQUALS;
      Criteria criteria0 = new Criteria(" bd>Za*KVxE-]", (Object) null, searchType0);
      Query query0 = new Query(criteria0);
      assertNotNull(query0);
      
      Conditional conditional0 = Conditional.OR;
      query0.setNextConditional(conditional0);
      // Undeclared exception!
      try {
        query0.add(query0);
        fail("Expecting exception: ConcurrentModificationException");
      } catch(ConcurrentModificationException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      SearchType searchType0 = SearchType.EQUALS;
      Criteria criteria0 = new Criteria(" bd>Za*KVxE-]", (Object) null, searchType0);
      Query query0 = new Query(criteria0);
      assertNotNull(query0);
      
      Query query1 = new Query(criteria0);
      query0.add(query1);
      assertEquals(" AND  bd>Za*KVxE-] EQUALS null AND  bd>Za*KVxE-] EQUALS null", query0.toString());
      assertFalse(query1.equals(query0));
  }

  @Test
  public void test8()  throws Throwable  {
      Query query0 = new Query();
      SearchType searchType0 = SearchType.GREATERTHANOREQUALTO;
      Criteria criteria0 = new Criteria("zdrIX/vB\"mSzh'T$hHb", (Object) "", searchType0);
      query0.or(criteria0);
      String string0 = query0.toString();
      assertNotNull(string0);
      assertEquals("zdrIX/vB\"mSzh'T$hHb GREATERTHANOREQUALTO ", query0.toString());
      assertEquals("zdrIX/vB\"mSzh'T$hHb GREATERTHANOREQUALTO ", string0);
  }

  @Test
  public void test9()  throws Throwable  {
      Query query0 = new Query();
      Object object0 = new Object();
      boolean boolean0 = query0.equals(object0);
      assertEquals(-1, query0.getPosition());
      assertEquals(-1, query0.getFetchSize());
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      Query query0 = new Query();
      boolean boolean0 = query0.equals((Object) query0);
      assertEquals(-1, query0.getPosition());
      assertEquals(-1, query0.getFetchSize());
      assertEquals(true, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      Query query0 = new Query();
      SearchType searchType0 = SearchType.CONTAINS;
      Criteria criteria0 = new Criteria("", (Object) "DESENDING", searchType0);
      query0.and(criteria0);
      query0.or(criteria0);
      int int0 = query0.hashCode();
      assertEquals(" OR  CONTAINS DESENDING OR  CONTAINS DESENDING", query0.toString());
      assertEquals((-740382304), int0);
  }
}
