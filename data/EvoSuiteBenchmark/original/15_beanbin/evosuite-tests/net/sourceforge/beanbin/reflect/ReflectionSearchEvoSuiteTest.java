/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.beanbin.reflect;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import java.util.List;
import net.sourceforge.beanbin.BeanBinException;
import net.sourceforge.beanbin.reflect.ReflectionSearch;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ReflectionSearchEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Class<?> class0 = ReflectionSearch.class;
      ReflectionSearch reflectionSearch0 = new ReflectionSearch(class0);
      ReflectionSearch reflectionSearch1 = reflectionSearch0.and();
      assertSame(reflectionSearch0, reflectionSearch1);
  }

  @Test
  public void test1()  throws Throwable  {
      Class<?> class0 = ReflectionSearch.class;
      ReflectionSearch reflectionSearch0 = new ReflectionSearch(class0);
      ReflectionSearch reflectionSearch1 = reflectionSearch0.methodsThatHave("$GoTh");
      assertSame(reflectionSearch0, reflectionSearch1);
  }

  @Test
  public void test2()  throws Throwable  {
      Class<?> class0 = ReflectionSearch.class;
      ReflectionSearch reflectionSearch0 = new ReflectionSearch(class0);
      ReflectionSearch reflectionSearch1 = reflectionSearch0.or();
      assertSame(reflectionSearch1, reflectionSearch0);
  }

  @Test
  public void test3()  throws Throwable  {
      Class<?> class0 = ReflectionSearch.class;
      ReflectionSearch reflectionSearch0 = new ReflectionSearch(class0);
      ReflectionSearch reflectionSearch1 = reflectionSearch0.methodsThatDontHave("$GoTh");
      assertNotNull(reflectionSearch1);
      
      List<Method> list0 = reflectionSearch0.getMethods();
      assertNotNull(list0);
      
      reflectionSearch0.intersect(list0, list0);
      assertEquals(17, list0.size());
      assertEquals(false, list0.isEmpty());
  }

  @Test
  public void test4()  throws Throwable  {
      Class<?> class0 = Method.class;
      ReflectionSearch reflectionSearch0 = new ReflectionSearch(class0);
      boolean boolean0 = reflectionSearch0.hasAnnotation("E");
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      Class<?> class0 = ReflectionSearch.class;
      ReflectionSearch reflectionSearch0 = new ReflectionSearch(class0);
      List<Method> list0 = reflectionSearch0.getMethods();
      reflectionSearch0.intersect(list0, list0);
      assertEquals(0, list0.size());
  }

  @Test
  public void test6()  throws Throwable  {
      Class<?> class0 = ReflectionSearch.class;
      ReflectionSearch reflectionSearch0 = new ReflectionSearch(class0);
      ReflectionSearch reflectionSearch1 = reflectionSearch0.methodsThatDontHave("$GoTh");
      assertNotNull(reflectionSearch1);
      
      List<Method> list0 = reflectionSearch0.getMethods();
      assertNotNull(list0);
      
      reflectionSearch1.union(list0, list0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
  }
}
