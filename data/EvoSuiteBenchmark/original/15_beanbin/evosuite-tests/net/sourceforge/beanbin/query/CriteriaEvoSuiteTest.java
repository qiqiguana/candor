/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.beanbin.query;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import net.sourceforge.beanbin.query.Conditional;
import net.sourceforge.beanbin.query.Criteria;
import net.sourceforge.beanbin.query.SearchType;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class CriteriaEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Object object0 = new Object();
      SearchType searchType0 = SearchType.DOESNOTEQUAL;
      Criteria criteria0 = new Criteria("", object0, searchType0);
      Conditional conditional0 = criteria0.getPreviousCondition();
      criteria0.setPreviousCondition(conditional0);
      assertEquals("", criteria0.getProperty());
  }

  @Test
  public void test1()  throws Throwable  {
      SearchType searchType0 = SearchType.LESSTHAN;
      Criteria criteria0 = new Criteria("i2G4^BrQI^;", (Object) null, searchType0);
      int int0 = criteria0.hashCode();
      assertEquals(1800063514, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      SearchType searchType0 = SearchType.GREATERTHANOREQUALTO;
      Criteria criteria0 = new Criteria("OR", (Object) null, searchType0);
      criteria0.setType(searchType0);
      assertNull(criteria0.getPreviousCondition());
  }

  @Test
  public void test3()  throws Throwable  {
      SearchType searchType0 = SearchType.LESSTHAN;
      Criteria criteria0 = new Criteria("i2G4^BrQI^;", (Object) null, searchType0);
      criteria0.setProperty("AND");
      assertEquals(SearchType.LESSTHAN, criteria0.getType());
  }

  @Test
  public void test4()  throws Throwable  {
      SearchType searchType0 = SearchType.LESSTHAN;
      Criteria criteria0 = new Criteria("", (Object) "AND", searchType0);
      criteria0.setTerm((Object) "OR");
      assertEquals("", criteria0.getProperty());
  }

  @Test
  public void test5()  throws Throwable  {
      SearchType searchType0 = SearchType.GREATERTHANOREQUALTO;
      Criteria criteria0 = new Criteria("", (Object) "", searchType0);
      Object object0 = new Object();
      boolean boolean0 = criteria0.equals(object0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      SearchType searchType0 = SearchType.GREATERTHANOREQUALTO;
      Criteria criteria0 = new Criteria("", (Object) "", searchType0);
      boolean boolean0 = criteria0.equals((Object) criteria0);
      assertEquals(" GREATERTHANOREQUALTO ", criteria0.toString());
      assertEquals(true, boolean0);
  }
}
