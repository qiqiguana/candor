/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.beanbin.reflect;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Method;
import java.util.List;
import net.sourceforge.beanbin.BeanBinException;
import net.sourceforge.beanbin.query.Conditional;
import net.sourceforge.beanbin.query.SearchType;
import net.sourceforge.beanbin.reflect.MethodReflectionCriteria;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MethodReflectionCriteriaEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Class<?> class0 = AccessibleObject.class;
      SearchType searchType0 = SearchType.DOESNOTEQUAL;
      MethodReflectionCriteria methodReflectionCriteria0 = new MethodReflectionCriteria((Class) class0, "k%}*@Y9xT:Fx5?Q", searchType0);
      List<Method> list0 = methodReflectionCriteria0.getResults();
      assertEquals(16, list0.size());
      assertNotNull(list0);
  }

  @Test
  public void test1()  throws Throwable  {
      Class<?> class0 = Method.class;
      SearchType searchType0 = SearchType.EQUALS;
      MethodReflectionCriteria methodReflectionCriteria0 = new MethodReflectionCriteria((Class) class0, "equals", searchType0);
      List<Method> list0 = methodReflectionCriteria0.getResults();
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test
  public void test2()  throws Throwable  {
      Class<?> class0 = Conditional.class;
      SearchType searchType0 = SearchType.CONTAINS;
      MethodReflectionCriteria methodReflectionCriteria0 = new MethodReflectionCriteria((Class) class0, "notifyAll", searchType0);
      List<Method> list0 = methodReflectionCriteria0.getResults();
      assertNotNull(list0);
      assertEquals(1, list0.size());
  }

  @Test
  public void test3()  throws Throwable  {
      Class<?> class0 = Object.class;
      SearchType searchType0 = SearchType.LESSTHANOREQUALTO;
      MethodReflectionCriteria methodReflectionCriteria0 = new MethodReflectionCriteria((Class) class0, "6#@/A<BtfzV yry", searchType0);
      try {
        methodReflectionCriteria0.getResults();
        fail("Expecting exception: BeanBinException");
      } catch(BeanBinException e) {
        /*
         * SearchType: LESSTHANOREQUALTO is invalid for MethodReflectionCriteria!
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      Class<?> class0 = MethodReflectionCriteria.class;
      SearchType searchType0 = SearchType.EQUALS;
      MethodReflectionCriteria methodReflectionCriteria0 = new MethodReflectionCriteria((Class) class0, "@*", searchType0);
      List<Method> list0 = methodReflectionCriteria0.getResults();
      assertEquals(0, list0.size());
  }

  @Test
  public void test5()  throws Throwable  {
      Class<?> class0 = MethodReflectionCriteria.class;
      SearchType searchType0 = SearchType.EQUALS;
      MethodReflectionCriteria methodReflectionCriteria0 = new MethodReflectionCriteria((Class) class0, "@*", searchType0);
      SearchType searchType1 = SearchType.CONTAINS;
      methodReflectionCriteria0.setType(searchType1);
      List<Method> list0 = methodReflectionCriteria0.getResults();
      assertEquals(0, list0.size());
  }

  @Test
  public void test6()  throws Throwable  {
      Class<?> class0 = MethodReflectionCriteria.class;
      SearchType searchType0 = SearchType.CONTAINS;
      MethodReflectionCriteria methodReflectionCriteria0 = new MethodReflectionCriteria((Class) class0, "Y$@/,*<BtFfz1VuyrV", searchType0);
      List<Method> list0 = methodReflectionCriteria0.getResults();
      assertNotNull(list0);
      assertEquals(0, list0.size());
  }

  @Test
  public void test7()  throws Throwable  {
      Class<?> class0 = MethodReflectionCriteria.class;
      SearchType searchType0 = SearchType.CONTAINS;
      MethodReflectionCriteria methodReflectionCriteria0 = new MethodReflectionCriteria((Class) class0, "*", searchType0);
      List<Method> list0 = methodReflectionCriteria0.getResults();
      assertEquals(17, list0.size());
      assertNotNull(list0);
  }

  @Test
  public void test8()  throws Throwable  {
      Class<?> class0 = Class.class;
      SearchType searchType0 = SearchType.DOESNOTEQUAL;
      MethodReflectionCriteria methodReflectionCriteria0 = new MethodReflectionCriteria((Class) class0, "@*", searchType0);
      List<Method> list0 = methodReflectionCriteria0.getResults();
      assertNotNull(list0);
      assertEquals(65, list0.size());
  }

  @Test
  public void test9()  throws Throwable  {
      Class<?> class0 = Class.class;
      SearchType searchType0 = SearchType.DOESNOTEQUAL;
      MethodReflectionCriteria methodReflectionCriteria0 = new MethodReflectionCriteria((Class) class0, "*", searchType0);
      List<Method> list0 = methodReflectionCriteria0.getResults();
      assertNotNull(list0);
      assertEquals(0, list0.size());
  }
}
