/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.beanbin.data.ejb3.dao.search;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.HashMap;
import java.util.Map;
import net.sourceforge.beanbin.BeanBinException;
import net.sourceforge.beanbin.data.ejb3.dao.Parameters;
import net.sourceforge.beanbin.data.ejb3.dao.search.LessThanBuilder;
import net.sourceforge.beanbin.query.Criteria;
import net.sourceforge.beanbin.query.SearchType;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class LessThanBuilderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LessThanBuilder lessThanBuilder0 = new LessThanBuilder();
      SearchType searchType0 = SearchType.EQUALS;
      Criteria criteria0 = new Criteria("$N>-", (Object) null, searchType0);
      HashMap<String, Parameters> hashMap0 = new HashMap<String, Parameters>();
      lessThanBuilder0.initialize(criteria0, (Map<String, Parameters>) hashMap0);
      try {
        lessThanBuilder0.getQueryString();
        fail("Expecting exception: BeanBinException");
      } catch(BeanBinException e) {
        /*
         * Invalid SearchType EQUALS was passed to LessThanBuilder
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      LessThanBuilder lessThanBuilder0 = new LessThanBuilder();
      Object object0 = new Object();
      SearchType searchType0 = SearchType.LESSTHAN;
      Criteria criteria0 = new Criteria("n`MBt6I9Q=_(F*ReA(", object0, searchType0);
      HashMap<String, Parameters> hashMap0 = new HashMap<String, Parameters>();
      lessThanBuilder0.initialize(criteria0, (Map<String, Parameters>) hashMap0);
      String string0 = lessThanBuilder0.getQueryString();
      assertEquals("n`MBt6I9Q=_(F*ReA( < :n`MBt6I9Q=_(F*ReA(2", string0);
      assertNotNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      LessThanBuilder lessThanBuilder0 = new LessThanBuilder();
      SearchType searchType0 = SearchType.LESSTHANOREQUALTO;
      HashMap<String, Parameters> hashMap0 = new HashMap<String, Parameters>();
      Criteria criteria0 = new Criteria("", (Object) "LESSTHANOREQUALTO", searchType0);
      lessThanBuilder0.initialize(criteria0, (Map<String, Parameters>) hashMap0);
      String string0 = lessThanBuilder0.getQueryString();
      assertNotNull(string0);
      assertEquals(" <= :3", lessThanBuilder0.getQueryString());
      assertEquals(" <= :2", string0);
  }
}
