/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.beanbin.data;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Method;
import java.util.List;
import net.sourceforge.beanbin.BeanBinException;
import net.sourceforge.beanbin.data.EntityUtils;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class EntityUtilsEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Class<?> class0 = EntityUtils.class;
      try {
        EntityUtils.getIdProperty(class0);
        fail("Expecting exception: BeanBinException");
      } catch(BeanBinException e) {
        /*
         * You can only have one method with the @Id annotation
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      Class<?> class0 = EntityUtils.class;
      List<Method> list0 = EntityUtils.getSubEntityMethods(class0);
      assertNotNull(list0);
      assertEquals(0, list0.size());
  }

  @Test
  public void test2()  throws Throwable  {
      Class<?> class0 = EntityUtils.class;
      boolean boolean0 = EntityUtils.hasBlobs(class0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      Class<?> class0 = AccessibleObject.class;
      List<Method> list0 = EntityUtils.getGettersWithoutId(class0);
      try {
        EntityUtils.mergeEntities((Object) list0, (Object) list0);
        fail("Expecting exception: BeanBinException");
      } catch(BeanBinException e) {
        /*
         * EntityUtls.mergeEntities: null
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      Class<?> class0 = EntityUtils.class;
      Method method0 = EntityUtils.getMethod((Class) class0, "get*");
      Method method1 = EntityUtils.getSetter(method0);
      assertNull(method1);
  }

  @Test
  public void test5()  throws Throwable  {
      Class<?> class0 = EntityUtils.class;
      boolean boolean0 = EntityUtils.isAbstract(class0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      EntityUtils entityUtils0 = new EntityUtils();
      assertNotNull(entityUtils0);
  }

  @Test
  public void test7()  throws Throwable  {
      try {
        EntityUtils.getId((Object) "setGettersWithoutId");
        fail("Expecting exception: BeanBinException");
      } catch(BeanBinException e) {
        /*
         * EntityUtils exception: You can only have one method with the @Id annotation
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      Class<?> class0 = Object.class;
      try {
        EntityUtils.getMethod((Class) class0, "gse<geD]clari>giHass");
        fail("Expecting exception: BeanBinException");
      } catch(BeanBinException e) {
        /*
         * Could not determine getter Method from the property: Gse<geD]clari>giHass
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      Object object0 = new Object();
      EntityUtils.mergeEntities(object0, object0);
  }
}
