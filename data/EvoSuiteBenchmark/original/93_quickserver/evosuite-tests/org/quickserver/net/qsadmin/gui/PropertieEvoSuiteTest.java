/*
 * This file was automatically generated by EvoSuite
 */

package org.quickserver.net.qsadmin.gui;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.awt.Container;
import java.awt.GridBagConstraints;
import javax.swing.Icon;
import javax.swing.JPasswordField;
import javax.swing.JRadioButton;
import org.junit.BeforeClass;
import org.quickserver.net.qsadmin.gui.Propertie;
import org.quickserver.net.qsadmin.gui.PropertiePanel;
import org.quickserver.net.qsadmin.gui.QSAdminMain;

@RunWith(EvoSuiteRunner.class)
public class PropertieEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Propertie propertie0 = new Propertie();
      String string0 = propertie0.getTarget();
      assertEquals("server", string0);
      assertNotNull(string0);
      assertEquals("<propertie>\n\t<name>null</name>\n\t<command>null</command>\n\t<get>no</get>\n\t<set>no</set>\n\t<type>edit</type>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</propertie>\n", propertie0.toXML());
  }

  @Test
  public void test1()  throws Throwable  {
      Propertie propertie0 = new Propertie();
      propertie0.getSaveButton();
      assertEquals("<propertie>\n\t<name>null</name>\n\t<command>null</command>\n\t<get>no</get>\n\t<set>no</set>\n\t<type>edit</type>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</propertie>\n", propertie0.toXML());
      assertEquals("server", propertie0.getTarget());
  }

  @Test
  public void test2()  throws Throwable  {
      Propertie propertie0 = new Propertie();
      String string0 = propertie0.getTargetNeeded();
      assertNotNull(string0);
      assertEquals("<propertie>\n\t<name>null</name>\n\t<command>null</command>\n\t<get>no</get>\n\t<set>no</set>\n\t<type>edit</type>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</propertie>\n", propertie0.toXML());
      assertEquals("get server null", propertie0.getGetCommand());
      assertEquals("yes", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      Propertie propertie0 = new Propertie();
      propertie0.getEditField();
      assertEquals("<propertie>\n\t<name>null</name>\n\t<command>null</command>\n\t<get>no</get>\n\t<set>no</set>\n\t<type>edit</type>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</propertie>\n", propertie0.toXML());
      assertEquals("server", propertie0.getTarget());
  }

  @Test
  public void test4()  throws Throwable  {
      Propertie propertie0 = new Propertie();
      propertie0.getComboBox();
      assertEquals("server", propertie0.getTarget());
      assertEquals("<propertie>\n\t<name>null</name>\n\t<command>null</command>\n\t<get>no</get>\n\t<set>no</set>\n\t<type>edit</type>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</propertie>\n", propertie0.toXML());
      assertEquals(false, propertie0.isGet());
  }

  @Test
  public void test5()  throws Throwable  {
      Propertie propertie0 = new Propertie();
      String string0 = propertie0.getVersion();
      assertNotNull(string0);
      assertEquals("server", propertie0.getTarget());
      assertEquals("<propertie>\n\t<name>null</name>\n\t<command>null</command>\n\t<get>no</get>\n\t<set>no</set>\n\t<type>edit</type>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</propertie>\n", propertie0.toXML());
      assertEquals("1.3", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      Propertie propertie0 = new Propertie();
      assertEquals("<propertie>\n\t<name>null</name>\n\t<command>null</command>\n\t<get>no</get>\n\t<set>no</set>\n\t<type>edit</type>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</propertie>\n", propertie0.toXML());
      
      propertie0.setTargetNeeded("edit");
      String string0 = propertie0.getGetCommand();
      assertEquals("get null", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      Propertie propertie0 = new Propertie();
      assertEquals("<propertie>\n\t<name>null</name>\n\t<command>null</command>\n\t<get>no</get>\n\t<set>no</set>\n\t<type>edit</type>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</propertie>\n", propertie0.toXML());
      
      propertie0.setTargetNeeded("");
      String string0 = propertie0.getSetCommand("get server null");
      assertEquals("set null get server null", string0);
  }

  @Test
  public void test8()  throws Throwable  {
      Propertie propertie0 = new Propertie();
      String string0 = propertie0.getSetCommand("1.3");
      assertNotNull(string0);
      assertEquals("<propertie>\n\t<name>null</name>\n\t<command>null</command>\n\t<get>no</get>\n\t<set>no</set>\n\t<type>edit</type>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</propertie>\n", propertie0.toXML());
      assertEquals("set server null 1.3", string0);
  }

  @Test
  public void test9()  throws Throwable  {
      Propertie propertie0 = new Propertie();
      propertie0.setName((String) null);
      assertEquals("<propertie>\n\t<name>null</name>\n\t<command>null</command>\n\t<get>no</get>\n\t<set>no</set>\n\t<type>edit</type>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</propertie>\n", propertie0.toXML());
      assertEquals("server", propertie0.getTarget());
      assertEquals("yes", propertie0.getTargetNeeded());
  }

  @Test
  public void test10()  throws Throwable  {
      Propertie propertie0 = new Propertie();
      propertie0.setName("");
      assertEquals("server", propertie0.getTarget());
      assertEquals("<propertie>\n\t<name>null</name>\n\t<command>null</command>\n\t<get>no</get>\n\t<set>no</set>\n\t<type>edit</type>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</propertie>\n", propertie0.toXML());
      assertEquals(false, propertie0.isGet());
  }

  @Test
  public void test11()  throws Throwable  {
      Propertie propertie0 = new Propertie();
      propertie0.setTarget((String) null);
      assertEquals("<propertie>\n\t<name>null</name>\n\t<command>null</command>\n\t<get>no</get>\n\t<set>no</set>\n\t<type>edit</type>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</propertie>\n", propertie0.toXML());
      assertEquals("server", propertie0.getTarget());
  }

  @Test
  public void test12()  throws Throwable  {
      Propertie propertie0 = new Propertie();
      propertie0.setTarget("");
      assertEquals("get server null", propertie0.getGetCommand());
      assertEquals("<propertie>\n\t<name>null</name>\n\t<command>null</command>\n\t<get>no</get>\n\t<set>no</set>\n\t<type>edit</type>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</propertie>\n", propertie0.toXML());
      assertEquals(1.3F, propertie0.getVersionNo(), 0.01F);
  }

  @Test
  public void test13()  throws Throwable  {
      Propertie propertie0 = new Propertie();
      propertie0.setCommand((String) null);
      assertEquals("<propertie>\n\t<name>null</name>\n\t<command>null</command>\n\t<get>no</get>\n\t<set>no</set>\n\t<type>edit</type>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</propertie>\n", propertie0.toXML());
      assertEquals("server", propertie0.getTarget());
  }

  @Test
  public void test14()  throws Throwable  {
      Propertie propertie0 = new Propertie();
      propertie0.setCommand("");
      assertEquals("server", propertie0.getTarget());
      assertEquals("<propertie>\n\t<name>null</name>\n\t<command>null</command>\n\t<get>no</get>\n\t<set>no</set>\n\t<type>edit</type>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</propertie>\n", propertie0.toXML());
  }

  @Test
  public void test15()  throws Throwable  {
      Propertie propertie0 = new Propertie();
      propertie0.setGet((String) null);
      assertEquals("<propertie>\n\t<name>null</name>\n\t<command>null</command>\n\t<get>no</get>\n\t<set>no</set>\n\t<type>edit</type>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</propertie>\n", propertie0.toXML());
      assertEquals("server", propertie0.getTarget());
  }

  @Test
  public void test16()  throws Throwable  {
      Propertie propertie0 = new Propertie();
      propertie0.setSet((String) null);
      assertEquals("<propertie>\n\t<name>null</name>\n\t<command>null</command>\n\t<get>no</get>\n\t<set>no</set>\n\t<type>edit</type>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</propertie>\n", propertie0.toXML());
      assertEquals("server", propertie0.getTarget());
      assertEquals(false, propertie0.isSet());
  }

  @Test
  public void test17()  throws Throwable  {
      Propertie propertie0 = new Propertie();
      propertie0.setType((String) null);
      assertEquals("<propertie>\n\t<name>null</name>\n\t<command>null</command>\n\t<get>no</get>\n\t<set>no</set>\n\t<type>edit</type>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</propertie>\n", propertie0.toXML());
      assertEquals("get server null", propertie0.getGetCommand());
      assertEquals("server", propertie0.getTarget());
  }

  @Test
  public void test18()  throws Throwable  {
      Propertie propertie0 = new Propertie();
      propertie0.setType("");
      assertEquals("server", propertie0.getTarget());
      assertEquals("<propertie>\n\t<name>null</name>\n\t<command>null</command>\n\t<get>no</get>\n\t<set>no</set>\n\t<type>edit</type>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</propertie>\n", propertie0.toXML());
  }

  @Test
  public void test19()  throws Throwable  {
      Propertie propertie0 = new Propertie();
      propertie0.setDesc((String) null);
      assertEquals("get server null", propertie0.getGetCommand());
      assertEquals("<propertie>\n\t<name>null</name>\n\t<command>null</command>\n\t<get>no</get>\n\t<set>no</set>\n\t<type>edit</type>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</propertie>\n", propertie0.toXML());
      assertEquals("edit", propertie0.getType());
  }

  @Test
  public void test20()  throws Throwable  {
      Propertie propertie0 = new Propertie();
      propertie0.setDesc("");
      assertEquals("<propertie>\n\t<name>null</name>\n\t<command>null</command>\n\t<get>no</get>\n\t<set>no</set>\n\t<type>edit</type>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</propertie>\n", propertie0.toXML());
      assertEquals("get server null", propertie0.getGetCommand());
  }

  @Test
  public void test21()  throws Throwable  {
      Propertie propertie0 = new Propertie();
      propertie0.setSelect((String) null);
      assertEquals("<propertie>\n\t<name>null</name>\n\t<command>null</command>\n\t<get>no</get>\n\t<set>no</set>\n\t<type>edit</type>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</propertie>\n", propertie0.toXML());
      assertEquals("get server null", propertie0.getGetCommand());
  }

  @Test
  public void test22()  throws Throwable  {
      Propertie propertie0 = new Propertie();
      propertie0.setSelect("");
      assertEquals("<propertie>\n\t<name>null</name>\n\t<command>null</command>\n\t<get>no</get>\n\t<set>no</set>\n\t<type>edit</type>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</propertie>\n", propertie0.toXML());
      assertEquals("get server null", propertie0.getGetCommand());
      assertEquals(false, propertie0.isSet());
  }

  @Test
  public void test23()  throws Throwable  {
      Propertie propertie0 = new Propertie();
      propertie0.setVersion("Message for excess clients");
      float float0 = propertie0.getVersionNo();
      assertEquals("message for excess clients", propertie0.getVersion());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test24()  throws Throwable  {
      Propertie propertie0 = new Propertie();
      float float0 = propertie0.getVersionNo();
      assertEquals("<propertie>\n\t<name>null</name>\n\t<command>null</command>\n\t<get>no</get>\n\t<set>no</set>\n\t<type>edit</type>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</propertie>\n", propertie0.toXML());
      assertEquals(1.3F, float0, 0.01F);
      assertEquals("server", propertie0.getTarget());
  }

  @Test
  public void test25()  throws Throwable  {
      Propertie propertie0 = new Propertie();
      propertie0.setVersion("");
      assertEquals("<propertie>\n\t<name>null</name>\n\t<command>null</command>\n\t<get>no</get>\n\t<set>no</set>\n\t<type>edit</type>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</propertie>\n", propertie0.toXML());
      assertEquals("server", propertie0.getTarget());
  }

  @Test
  public void test26()  throws Throwable  {
      Propertie propertie0 = new Propertie();
      assertEquals(false, propertie0.isGet());
      
      propertie0.setGet("yes");
      String string0 = propertie0.toXML();
      assertEquals(true, propertie0.isGet());
      assertEquals("<propertie>\n\t<name>null</name>\n\t<command>null</command>\n\t<get>yes</get>\n\t<set>no</set>\n\t<type>edit</type>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</propertie>\n", string0);
  }

  @Test
  public void test27()  throws Throwable  {
      Propertie propertie0 = new Propertie();
      assertEquals(false, propertie0.isSet());
      
      propertie0.setSet("yes");
      String string0 = propertie0.toXML();
      assertEquals(true, propertie0.isSet());
      assertEquals("<propertie>\n\t<name>null</name>\n\t<command>null</command>\n\t<get>no</get>\n\t<set>yes</set>\n\t<type>edit</type>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</propertie>\n", string0);
  }

  @Test
  public void test28()  throws Throwable  {
      Propertie propertie0 = new Propertie();
      propertie0.setSelect("edit");
      String string0 = propertie0.toXML();
      assertNotNull(string0);
      assertEquals("<propertie>\n\t<name>null</name>\n\t<command>null</command>\n\t<get>no</get>\n\t<set>no</set>\n\t<type>edit</type>\n\t<select>edit</select>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</propertie>\n", propertie0.toXML());
      assertEquals("<propertie>\n\t<name>null</name>\n\t<command>null</command>\n\t<get>no</get>\n\t<set>no</set>\n\t<type>edit</type>\n\t<select>edit</select>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</propertie>\n", string0);
  }

  @Test
  public void test29()  throws Throwable  {
      Propertie propertie0 = new Propertie();
      propertie0.setDesc("edit");
      String string0 = propertie0.toXML();
      assertNotNull(string0);
      assertEquals("<propertie>\n\t<name>null</name>\n\t<command>null</command>\n\t<get>no</get>\n\t<set>no</set>\n\t<type>edit</type>\n\t<desc>edit</desc>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</propertie>\n", propertie0.toXML());
      assertEquals("<propertie>\n\t<name>null</name>\n\t<command>null</command>\n\t<get>no</get>\n\t<set>no</set>\n\t<type>edit</type>\n\t<desc>edit</desc>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</propertie>\n", string0);
  }

  @Test
  public void test30()  throws Throwable  {
      Propertie propertie0 = new Propertie();
      assertEquals("yes", propertie0.getTargetNeeded());
      
      propertie0.setTargetNeeded("edit");
      String string0 = propertie0.toXML();
      assertEquals("<propertie>\n\t<name>null</name>\n\t<command>null</command>\n\t<get>no</get>\n\t<set>no</set>\n\t<type>edit</type>\n\t<version>1.3</version>\n\t<target-needed>no</target-needed>\n</propertie>\n", propertie0.toXML());
      assertEquals("<propertie>\n\t<name>null</name>\n\t<command>null</command>\n\t<get>no</get>\n\t<set>no</set>\n\t<type>edit</type>\n\t<version>1.3</version>\n\t<target-needed>no</target-needed>\n</propertie>\n", string0);
  }

  @Test
  public void test31()  throws Throwable  {
      Propertie propertie0 = new Propertie();
      assertEquals(false, propertie0.isGet());
      
      propertie0.setGet("yes");
      PropertiePanel propertiePanel0 = new PropertiePanel((QSAdminMain) null);
      // Undeclared exception!
      try {
        propertie0.load(propertiePanel0, (QSAdminMain) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test32()  throws Throwable  {
      Propertie propertie0 = new Propertie();
      propertie0.setType("get server null");
      QSAdminMain qSAdminMain0 = new QSAdminMain();
      PropertiePanel propertiePanel0 = new PropertiePanel(qSAdminMain0);
      propertie0.load(propertiePanel0, qSAdminMain0);
      assertEquals("get server null", propertie0.getType());
      assertEquals(1.3F, propertie0.getVersionNo(), 0.01F);
  }

  @Test
  public void test33()  throws Throwable  {
      Propertie propertie0 = new Propertie();
      JPasswordField jPasswordField0 = new JPasswordField();
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      QSAdminMain qSAdminMain0 = new QSAdminMain();
      PropertiePanel propertiePanel0 = new PropertiePanel(qSAdminMain0);
      propertie0.addToPanel((Container) jPasswordField0, gridBagConstraints0, propertiePanel0, qSAdminMain0);
      assertEquals(7, jPasswordField0.countComponents());
      
      propertie0.load(propertiePanel0, qSAdminMain0);
      assertEquals(false, propertie0.isGet());
  }

  @Test
  public void test34()  throws Throwable  {
      Propertie propertie0 = new Propertie();
      JRadioButton jRadioButton0 = new JRadioButton((Icon) null, true);
      propertie0.setType("server");
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      QSAdminMain qSAdminMain0 = new QSAdminMain();
      PropertiePanel propertiePanel0 = new PropertiePanel(qSAdminMain0);
      // Undeclared exception!
      try {
        propertie0.addToPanel((Container) jRadioButton0, gridBagConstraints0, propertiePanel0, qSAdminMain0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
