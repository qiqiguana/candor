/*
 * This file was automatically generated by EvoSuite
 */

package org.quickserver.net.qsadmin.gui;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import org.quickserver.net.qsadmin.gui.SimpleCommand;

@RunWith(EvoSuiteRunner.class)
public class SimpleCommandEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SimpleCommand simpleCommand0 = new SimpleCommand();
      float float0 = simpleCommand0.getVersionNo();
      assertEquals("null server", simpleCommand0.getSimpleCommand());
      assertEquals("no", simpleCommand0.getMultiLineResponse());
      assertEquals("<simple-command>\n\t<name>null</name>\n\t<command>null</command>\n\t<multi-line-response>no</multi-line-response>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</simple-command>\n", simpleCommand0.toXML());
      assertEquals(1.3F, float0, 0.01F);
  }

  @Test
  public void test1()  throws Throwable  {
      SimpleCommand simpleCommand0 = new SimpleCommand();
      simpleCommand0.getCommand();
      assertEquals("<simple-command>\n\t<name>null</name>\n\t<command>null</command>\n\t<multi-line-response>no</multi-line-response>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</simple-command>\n", simpleCommand0.toXML());
      assertEquals("null server", simpleCommand0.getSimpleCommand());
      assertEquals("no", simpleCommand0.getMultiLineResponse());
  }

  @Test
  public void test2()  throws Throwable  {
      SimpleCommand simpleCommand0 = new SimpleCommand();
      assertEquals("no", simpleCommand0.getMultiLineResponse());
      
      simpleCommand0.setMultiLineResponse("yes");
      String string0 = simpleCommand0.toXML();
      assertEquals("<simple-command>\n\t<name>null</name>\n\t<command>null</command>\n\t<multi-line-response>yes</multi-line-response>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</simple-command>\n", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      SimpleCommand simpleCommand0 = new SimpleCommand();
      simpleCommand0.getDesc();
      assertEquals("<simple-command>\n\t<name>null</name>\n\t<command>null</command>\n\t<multi-line-response>no</multi-line-response>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</simple-command>\n", simpleCommand0.toXML());
      assertEquals("no", simpleCommand0.getMultiLineResponse());
      assertEquals("server", simpleCommand0.getTarget());
  }

  @Test
  public void test4()  throws Throwable  {
      SimpleCommand simpleCommand0 = new SimpleCommand();
      simpleCommand0.setCommand("<simple-command>\n\t<name>null</name>\n\t<command>null</command>\n\t<multi-line-response>no</multi-line-response>\n\t<version>1.3</version>\n\t<target-needed>no</target-needed>\n</simple-command>\n");
      assertEquals("<simple-command>\n\t<name>null</name>\n\t<command><simple-command>\n\t<name>null</name>\n\t<command>null</command>\n\t<multi-line-response>no</multi-line-response>\n\t<version>1.3</version>\n\t<target-needed>no</target-needed>\n</simple-command>\n</command>\n\t<multi-line-response>no</multi-line-response>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</simple-command>\n", simpleCommand0.toXML());
      assertEquals("<simple-command>\n\t<name>null</name>\n\t<command>null</command>\n\t<multi-line-response>no</multi-line-response>\n\t<version>1.3</version>\n\t<target-needed>no</target-needed>\n</simple-command>\n server", simpleCommand0.getSimpleCommand());
  }

  @Test
  public void test5()  throws Throwable  {
      SimpleCommand simpleCommand0 = new SimpleCommand();
      simpleCommand0.setDesc("yes");
      String string0 = simpleCommand0.toXML();
      assertEquals("<simple-command>\n\t<name>null</name>\n\t<command>null</command>\n\t<multi-line-response>no</multi-line-response>\n\t<desc>yes</desc>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</simple-command>\n", simpleCommand0.toXML());
      assertNotNull(string0);
      assertEquals("<simple-command>\n\t<name>null</name>\n\t<command>null</command>\n\t<multi-line-response>no</multi-line-response>\n\t<desc>yes</desc>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</simple-command>\n", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      SimpleCommand simpleCommand0 = new SimpleCommand();
      simpleCommand0.setName("<simple-command>\n\t<name>null</name>\n\t<command>null</command>\n\t<multi-line-response>no</multi-line-response>\n\t<version>1.3</version>\n\t<target-needed>no</target-needed>\n</simple-command>\n");
      assertEquals("<simple-command>\n\t<name><simple-command>\n\t<name>null</name>\n\t<command>null</command>\n\t<multi-line-response>no</multi-line-response>\n\t<version>1.3</version>\n\t<target-needed>no</target-needed>\n</simple-command>\n</name>\n\t<command>null</command>\n\t<multi-line-response>no</multi-line-response>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</simple-command>\n", simpleCommand0.toXML());
      assertEquals("yes", simpleCommand0.getTargetNeeded());
  }

  @Test
  public void test7()  throws Throwable  {
      SimpleCommand simpleCommand0 = new SimpleCommand();
      assertEquals("server", simpleCommand0.getTarget());
      
      simpleCommand0.setTarget("yes");
      assertEquals("<simple-command>\n\t<name>null</name>\n\t<command>null</command>\n\t<multi-line-response>no</multi-line-response>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</simple-command>\n", simpleCommand0.toXML());
  }

  @Test
  public void test8()  throws Throwable  {
      SimpleCommand simpleCommand0 = new SimpleCommand();
      String string0 = simpleCommand0.getTargetNeeded();
      assertNotNull(string0);
      assertEquals("<simple-command>\n\t<name>null</name>\n\t<command>null</command>\n\t<multi-line-response>no</multi-line-response>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</simple-command>\n", simpleCommand0.toXML());
      assertEquals("server", simpleCommand0.getTarget());
      assertEquals("no", simpleCommand0.getMultiLineResponse());
      assertEquals("yes", string0);
  }

  @Test
  public void test9()  throws Throwable  {
      SimpleCommand simpleCommand0 = new SimpleCommand();
      simpleCommand0.getName();
      assertEquals("no", simpleCommand0.getMultiLineResponse());
      assertEquals("server", simpleCommand0.getTarget());
      assertEquals("<simple-command>\n\t<name>null</name>\n\t<command>null</command>\n\t<multi-line-response>no</multi-line-response>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</simple-command>\n", simpleCommand0.toXML());
      assertEquals("null server", simpleCommand0.getSimpleCommand());
  }

  @Test
  public void test10()  throws Throwable  {
      SimpleCommand simpleCommand0 = new SimpleCommand();
      assertEquals("<simple-command>\n\t<name>null</name>\n\t<command>null</command>\n\t<multi-line-response>no</multi-line-response>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</simple-command>\n", simpleCommand0.toXML());
      
      simpleCommand0.setTargetNeeded("Euc2");
      simpleCommand0.getSimpleCommand();
      assertEquals("server", simpleCommand0.getTarget());
  }

  @Test
  public void test11()  throws Throwable  {
      SimpleCommand simpleCommand0 = new SimpleCommand();
      String string0 = simpleCommand0.getVersion();
      assertEquals("null server", simpleCommand0.getSimpleCommand());
      assertEquals("<simple-command>\n\t<name>null</name>\n\t<command>null</command>\n\t<multi-line-response>no</multi-line-response>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</simple-command>\n", simpleCommand0.toXML());
      assertNotNull(string0);
      assertEquals("no", simpleCommand0.getMultiLineResponse());
      assertEquals("1.3", string0);
  }

  @Test
  public void test12()  throws Throwable  {
      SimpleCommand simpleCommand0 = new SimpleCommand();
      String string0 = simpleCommand0.getMultiLineResponse();
      assertEquals("server", simpleCommand0.getTarget());
      assertNotNull(string0);
      assertEquals("<simple-command>\n\t<name>null</name>\n\t<command>null</command>\n\t<multi-line-response>no</multi-line-response>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</simple-command>\n", simpleCommand0.toXML());
      assertEquals("no", string0);
  }

  @Test
  public void test13()  throws Throwable  {
      SimpleCommand simpleCommand0 = new SimpleCommand();
      String string0 = simpleCommand0.getTarget();
      assertNotNull(string0);
      assertEquals("server", string0);
      assertEquals("<simple-command>\n\t<name>null</name>\n\t<command>null</command>\n\t<multi-line-response>no</multi-line-response>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</simple-command>\n", simpleCommand0.toXML());
      assertEquals("no", simpleCommand0.getMultiLineResponse());
  }

  @Test
  public void test14()  throws Throwable  {
      SimpleCommand simpleCommand0 = new SimpleCommand();
      String string0 = simpleCommand0.getSimpleCommand();
      assertEquals("null server", string0);
      assertEquals("<simple-command>\n\t<name>null</name>\n\t<command>null</command>\n\t<multi-line-response>no</multi-line-response>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</simple-command>\n", simpleCommand0.toXML());
      assertEquals("no", simpleCommand0.getMultiLineResponse());
      assertNotNull(string0);
  }

  @Test
  public void test15()  throws Throwable  {
      SimpleCommand simpleCommand0 = new SimpleCommand();
      simpleCommand0.setVersion((String) null);
      assertEquals("server", simpleCommand0.getTarget());
      assertEquals("<simple-command>\n\t<name>null</name>\n\t<command>null</command>\n\t<multi-line-response>no</multi-line-response>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</simple-command>\n", simpleCommand0.toXML());
      assertEquals("no", simpleCommand0.getMultiLineResponse());
      assertEquals("yes", simpleCommand0.getTargetNeeded());
  }

  @Test
  public void test16()  throws Throwable  {
      SimpleCommand simpleCommand0 = new SimpleCommand();
      simpleCommand0.setVersion("null server");
      // Undeclared exception!
      try {
        simpleCommand0.getVersionNo();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Corrupt QuickServer
         */
      }
  }

  @Test
  public void test17()  throws Throwable  {
      SimpleCommand simpleCommand0 = new SimpleCommand();
      simpleCommand0.setVersion("");
      assertEquals("server", simpleCommand0.getTarget());
      assertEquals("<simple-command>\n\t<name>null</name>\n\t<command>null</command>\n\t<multi-line-response>no</multi-line-response>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</simple-command>\n", simpleCommand0.toXML());
      assertEquals("no", simpleCommand0.getMultiLineResponse());
      assertEquals("1.3", simpleCommand0.getVersion());
  }

  @Test
  public void test18()  throws Throwable  {
      SimpleCommand simpleCommand0 = new SimpleCommand();
      String string0 = simpleCommand0.toXML();
      assertEquals("null server", simpleCommand0.getSimpleCommand());
      assertEquals("<simple-command>\n\t<name>null</name>\n\t<command>null</command>\n\t<multi-line-response>no</multi-line-response>\n\t<version>1.3</version>\n\t<target-needed>yes</target-needed>\n</simple-command>\n", string0);
      assertEquals("no", simpleCommand0.getMultiLineResponse());
      assertNotNull(string0);
  }

  @Test
  public void test19()  throws Throwable  {
      SimpleCommand simpleCommand0 = new SimpleCommand();
      assertEquals("yes", simpleCommand0.getTargetNeeded());
      
      simpleCommand0.setTargetNeeded("Euc2");
      String string0 = simpleCommand0.toXML();
      assertEquals("<simple-command>\n\t<name>null</name>\n\t<command>null</command>\n\t<multi-line-response>no</multi-line-response>\n\t<version>1.3</version>\n\t<target-needed>no</target-needed>\n</simple-command>\n", simpleCommand0.toXML());
      assertEquals("<simple-command>\n\t<name>null</name>\n\t<command>null</command>\n\t<multi-line-response>no</multi-line-response>\n\t<version>1.3</version>\n\t<target-needed>no</target-needed>\n</simple-command>\n", string0);
  }
}
