/*
 * This file was automatically generated by EvoSuite
 */

package org.quickserver.net.server.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Iterator;
import org.apache.commons.pool.PoolableObjectFactory;
import org.junit.BeforeClass;
import org.quickserver.net.server.ClientHandler;
import org.quickserver.net.server.impl.NonBlockingClientHandler;
import org.quickserver.net.server.impl.SyncClientIdentifier;
import org.quickserver.util.pool.BasicObjectPool;
import org.quickserver.util.pool.ClientHandlerObjectFactory;
import org.quickserver.util.pool.QSObjectPool;

@RunWith(EvoSuiteRunner.class)
public class SyncClientIdentifierEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SyncClientIdentifier syncClientIdentifier0 = new SyncClientIdentifier();
      ClientHandlerObjectFactory clientHandlerObjectFactory0 = new ClientHandlerObjectFactory(false);
      BasicObjectPool.Config basicObjectPool_Config0 = new BasicObjectPool.Config();
      BasicObjectPool basicObjectPool0 = new BasicObjectPool((PoolableObjectFactory) clientHandlerObjectFactory0, basicObjectPool_Config0);
      syncClientIdentifier0.setClientHandlerPool((QSObjectPool) basicObjectPool0);
      basicObjectPool0.borrowObject();
      ClientHandler clientHandler0 = syncClientIdentifier0.findFirstClientById("\t<byte-buffer-size>");
      assertNull(clientHandler0);
  }

  @Test
  public void test1()  throws Throwable  {
      SyncClientIdentifier syncClientIdentifier0 = new SyncClientIdentifier();
      ClientHandlerObjectFactory clientHandlerObjectFactory0 = new ClientHandlerObjectFactory(false);
      BasicObjectPool.Config basicObjectPool_Config0 = new BasicObjectPool.Config();
      BasicObjectPool basicObjectPool0 = new BasicObjectPool((PoolableObjectFactory) clientHandlerObjectFactory0, basicObjectPool_Config0);
      syncClientIdentifier0.setClientHandlerPool((QSObjectPool) basicObjectPool0);
      NonBlockingClientHandler nonBlockingClientHandler0 = (NonBlockingClientHandler)basicObjectPool0.borrowObject();
      assertEquals("<ClientHandler-Pool#9-ID:1>", nonBlockingClientHandler0.getName());
      
      Iterator<Object> iterator0 = syncClientIdentifier0.findAllClientById("\t<byte-buffer-size>");
      assertEquals(false, iterator0.hasNext());
  }

  @Test
  public void test2()  throws Throwable  {
      SyncClientIdentifier syncClientIdentifier0 = new SyncClientIdentifier();
      ClientHandlerObjectFactory clientHandlerObjectFactory0 = new ClientHandlerObjectFactory(false);
      BasicObjectPool.Config basicObjectPool_Config0 = new BasicObjectPool.Config();
      BasicObjectPool basicObjectPool0 = new BasicObjectPool((PoolableObjectFactory) clientHandlerObjectFactory0, basicObjectPool_Config0);
      syncClientIdentifier0.setClientHandlerPool((QSObjectPool) basicObjectPool0);
      basicObjectPool0.borrowObject();
      ClientHandler clientHandler0 = syncClientIdentifier0.findClientByKey("\t<byte-buffer-size>");
      assertNull(clientHandler0);
  }

  @Test
  public void test3()  throws Throwable  {
      SyncClientIdentifier syncClientIdentifier0 = new SyncClientIdentifier();
      ClientHandlerObjectFactory clientHandlerObjectFactory0 = new ClientHandlerObjectFactory(false);
      BasicObjectPool.Config basicObjectPool_Config0 = new BasicObjectPool.Config();
      BasicObjectPool basicObjectPool0 = new BasicObjectPool((PoolableObjectFactory) clientHandlerObjectFactory0, basicObjectPool_Config0);
      syncClientIdentifier0.setClientHandlerPool((QSObjectPool) basicObjectPool0);
      NonBlockingClientHandler nonBlockingClientHandler0 = (NonBlockingClientHandler)basicObjectPool0.borrowObject();
      assertEquals("{<ClientHandler-Pool#27-ID:1> - [non-connected]}", nonBlockingClientHandler0.toString());
      
      Iterator<Object> iterator0 = syncClientIdentifier0.findAllClientByKey("\t<byte-buffer-size>");
      assertEquals(false, iterator0.hasNext());
  }
}
