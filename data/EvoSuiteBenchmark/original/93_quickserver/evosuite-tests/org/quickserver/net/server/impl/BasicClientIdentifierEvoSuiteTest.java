/*
 * This file was automatically generated by EvoSuite
 */

package org.quickserver.net.server.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.regex.Pattern;
import org.junit.BeforeClass;
import org.quickserver.net.server.ClientHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.impl.BlockingClientHandler;
import org.quickserver.net.server.impl.NonBlockingClientHandler;
import org.quickserver.net.server.impl.OptimisticClientIdentifier;
import org.quickserver.net.server.impl.SyncClientIdentifier;
import org.quickserver.util.pool.BasicObjectPool;
import org.quickserver.util.pool.QSObjectPool;

@RunWith(EvoSuiteRunner.class)
public class BasicClientIdentifierEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SyncClientIdentifier syncClientIdentifier0 = new SyncClientIdentifier();
      BasicObjectPool basicObjectPool0 = new BasicObjectPool();
      syncClientIdentifier0.setClientHandlerPool((QSObjectPool) basicObjectPool0);
      ClientHandler clientHandler0 = syncClientIdentifier0.findFirstClientById("");
      assertNull(clientHandler0);
  }

  @Test
  public void test1()  throws Throwable  {
      SyncClientIdentifier syncClientIdentifier0 = new SyncClientIdentifier();
      syncClientIdentifier0.setQuickServer((QuickServer) null);
  }

  @Test
  public void test2()  throws Throwable  {
      OptimisticClientIdentifier optimisticClientIdentifier0 = new OptimisticClientIdentifier();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler();
      optimisticClientIdentifier0.checkClientId((ClientHandler) nonBlockingClientHandler0, "Error in BavicObjectPool.maiKtain : ");
      assertEquals("{<ClientHandler-Pool#-1-ID:1> - [non-connected]}", nonBlockingClientHandler0.toString());
      assertEquals("<ClientHandler-Pool#-1-ID:1>", nonBlockingClientHandler0.getName());
  }

  @Test
  public void test3()  throws Throwable  {
      OptimisticClientIdentifier optimisticClientIdentifier0 = new OptimisticClientIdentifier();
      Pattern pattern0 = Pattern.compile("Error in BavicObjectPool.maiKtain : ");
      ClientHandler clientHandler0 = optimisticClientIdentifier0.checkClientId((ClientHandler) null, pattern0);
      assertNull(clientHandler0);
  }

  @Test
  public void test4()  throws Throwable  {
      OptimisticClientIdentifier optimisticClientIdentifier0 = new OptimisticClientIdentifier();
      ClientHandler clientHandler0 = optimisticClientIdentifier0.checkClientKey((ClientHandler) null, "Error in BavicObjectPool.maiKtain : ");
      assertNull(clientHandler0);
  }

  @Test
  public void test5()  throws Throwable  {
      SyncClientIdentifier syncClientIdentifier0 = new SyncClientIdentifier();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler(0);
      Pattern pattern0 = Pattern.compile("/object-pool/byte-buffer-object-pool/init-size", 0);
      syncClientIdentifier0.checkClientKey((ClientHandler) blockingClientHandler0, pattern0);
      assertEquals("<ClientHandler-Pool#0-ID:1>", blockingClientHandler0.getName());
      assertEquals("{<ClientHandler-Pool#0-ID:1> - [non-connected]}", blockingClientHandler0.info());
  }
}
