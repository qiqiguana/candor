/*
 * This file was automatically generated by EvoSuite
 */

package org.quickserver.util.pool;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.apache.commons.pool.ObjectPool;
import org.apache.commons.pool.PoolableObjectFactory;
import org.apache.commons.pool.impl.GenericObjectPool;
import org.apache.commons.pool.impl.SoftReferenceObjectPool;
import org.apache.commons.pool.impl.StackObjectPool;
import org.junit.BeforeClass;
import org.quickserver.util.pool.ByteBufferObjectFactory;
import org.quickserver.util.pool.ClientHandlerObjectFactory;
import org.quickserver.util.pool.MakeQSObjectPool;

@RunWith(EvoSuiteRunner.class)
public class MakeQSObjectPoolEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool();
      // Undeclared exception!
      try {
        makeQSObjectPool0.getAllActiveObjects();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool();
      try {
        makeQSObjectPool0.invalidateObject((Object) "");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      ClientHandlerObjectFactory clientHandlerObjectFactory0 = new ClientHandlerObjectFactory(false);
      SoftReferenceObjectPool softReferenceObjectPool0 = new SoftReferenceObjectPool((PoolableObjectFactory) clientHandlerObjectFactory0);
      MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool((ObjectPool) softReferenceObjectPool0);
      makeQSObjectPool0.borrowObject();
      assertEquals(1, softReferenceObjectPool0.getNumActive());
  }

  @Test
  public void test3()  throws Throwable  {
      StackObjectPool stackObjectPool0 = new StackObjectPool();
      MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool((ObjectPool) stackObjectPool0);
      makeQSObjectPool0.setFactory((PoolableObjectFactory) null);
      assertEquals(0, makeQSObjectPool0.getNumIdle());
  }

  @Test
  public void test4()  throws Throwable  {
      ClientHandlerObjectFactory clientHandlerObjectFactory0 = new ClientHandlerObjectFactory(false);
      SoftReferenceObjectPool softReferenceObjectPool0 = new SoftReferenceObjectPool((PoolableObjectFactory) clientHandlerObjectFactory0);
      MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool((ObjectPool) softReferenceObjectPool0);
      makeQSObjectPool0.close();
      assertEquals(true, softReferenceObjectPool0.isClosed());
  }

  @Test
  public void test5()  throws Throwable  {
      ByteBufferObjectFactory byteBufferObjectFactory0 = new ByteBufferObjectFactory(27, true);
      SoftReferenceObjectPool softReferenceObjectPool0 = new SoftReferenceObjectPool((PoolableObjectFactory) byteBufferObjectFactory0);
      MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool((ObjectPool) softReferenceObjectPool0);
      makeQSObjectPool0.addObject();
      assertEquals(1, softReferenceObjectPool0.getNumIdle());
  }

  @Test
  public void test6()  throws Throwable  {
      MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool();
      // Undeclared exception!
      try {
        makeQSObjectPool0.getNumActive();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      ByteBufferObjectFactory byteBufferObjectFactory0 = new ByteBufferObjectFactory(27, true);
      SoftReferenceObjectPool softReferenceObjectPool0 = new SoftReferenceObjectPool((PoolableObjectFactory) byteBufferObjectFactory0);
      MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool((ObjectPool) softReferenceObjectPool0);
      int int0 = makeQSObjectPool0.getNumIdle();
      assertEquals(0, int0);
  }

  @Test
  public void test8()  throws Throwable  {
      MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool();
      Object object0 = makeQSObjectPool0.getObjectToSynchronize();
      assertNull(object0);
  }

  @Test
  public void test9()  throws Throwable  {
      GenericObjectPool genericObjectPool0 = new GenericObjectPool((PoolableObjectFactory) null);
      MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool((ObjectPool) genericObjectPool0);
      Object object0 = new Object();
      makeQSObjectPool0.returnObject(object0);
      assertEquals(0, makeQSObjectPool0.getNumActive());
  }

  @Test
  public void test10()  throws Throwable  {
      MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool((ObjectPool) null);
      try {
        makeQSObjectPool0.clear();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool();
      MakeQSObjectPool makeQSObjectPool1 = (MakeQSObjectPool)makeQSObjectPool0.getQSObjectPool((ObjectPool) null);
      assertFalse(makeQSObjectPool1.equals(makeQSObjectPool0));
  }
}
