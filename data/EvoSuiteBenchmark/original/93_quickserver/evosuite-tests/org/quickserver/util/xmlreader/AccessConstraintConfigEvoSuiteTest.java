/*
 * This file was automatically generated by EvoSuite
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.net.Proxy;
import java.net.Socket;
import org.junit.BeforeClass;
import org.quickserver.util.xmlreader.AccessConstraintConfig;
import org.quickserver.util.xmlreader.IpFilterConfig;

@RunWith(EvoSuiteRunner.class)
public class AccessConstraintConfigEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      AccessConstraintConfig accessConstraintConfig0 = new AccessConstraintConfig();
      String string0 = accessConstraintConfig0.toXML((String) null);
      assertEquals("<access-constraint>\n</access-constraint>\n", string0);
      assertNotNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      AccessConstraintConfig accessConstraintConfig0 = new AccessConstraintConfig();
      String string0 = accessConstraintConfig0.toXML("<access-constraint>\n</access-constraint>\n");
      assertEquals("<access-constraint>\n</access-constraint>\n<access-constraint>\n<access-constraint>\n</access-constraint>\n</access-constraint>\n", string0);
      assertNotNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      AccessConstraintConfig accessConstraintConfig0 = new AccessConstraintConfig();
      IpFilterConfig ipFilterConfig0 = new IpFilterConfig();
      accessConstraintConfig0.setIpFilterConfig(ipFilterConfig0);
      String string0 = accessConstraintConfig0.toXML("<access-constraint>\n</access-constraint>\n");
      assertEquals("<access-constraint>\n</access-constraint>\n<access-constraint>\n<access-constraint>\n</access-constraint>\n\t<ip-filter>\n<access-constraint>\n</access-constraint>\n\t\t<enable>false</enable>\n<access-constraint>\n</access-constraint>\n\t\t<allow-access>false</allow-access>\n<access-constraint>\n</access-constraint>\n\t\t<ip-collection>\n<access-constraint>\n</access-constraint>\n\t\t</ip-collection>\n<access-constraint>\n</access-constraint>\n\t</ip-filter>\n<access-constraint>\n</access-constraint>\n</access-constraint>\n", string0);
      assertNotNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      AccessConstraintConfig accessConstraintConfig0 = new AccessConstraintConfig();
      accessConstraintConfig0.checkAccept((Socket) null);
  }

  @Test
  public void test4()  throws Throwable  {
      AccessConstraintConfig accessConstraintConfig0 = new AccessConstraintConfig();
      Socket socket0 = new Socket();
      accessConstraintConfig0.checkAccept(socket0);
      assertEquals(false, socket0.isOutputShutdown());
  }

  @Test
  public void test5()  throws Throwable  {
      AccessConstraintConfig accessConstraintConfig0 = new AccessConstraintConfig();
      Socket socket0 = new Socket();
      IpFilterConfig ipFilterConfig0 = new IpFilterConfig();
      accessConstraintConfig0.setIpFilterConfig(ipFilterConfig0);
      accessConstraintConfig0.checkAccept(socket0);
      assertEquals(false, socket0.isBound());
  }

  @Test
  public void test6()  throws Throwable  {
      AccessConstraintConfig accessConstraintConfig0 = new AccessConstraintConfig();
      IpFilterConfig ipFilterConfig0 = new IpFilterConfig();
      accessConstraintConfig0.setIpFilterConfig(ipFilterConfig0);
      ipFilterConfig0.setEnable(true);
      Proxy proxy0 = Proxy.NO_PROXY;
      Socket socket0 = new Socket(proxy0);
      // Undeclared exception!
      try {
        accessConstraintConfig0.checkAccept(socket0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
