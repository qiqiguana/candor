/*
 * This file was automatically generated by EvoSuite
 */

package org.quickserver.util.pool.thread;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.NoSuchElementException;
import org.apache.commons.pool.ObjectPool;
import org.apache.commons.pool.PoolableObjectFactory;
import org.apache.commons.pool.impl.GenericObjectPool;
import org.apache.commons.pool.impl.StackObjectPool;
import org.junit.BeforeClass;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.impl.BlockingClientHandler;
import org.quickserver.net.server.impl.NonBlockingClientHandler;
import org.quickserver.util.pool.BasicObjectPool;
import org.quickserver.util.pool.MakeQSObjectPool;
import org.quickserver.util.pool.QSObjectPool;
import org.quickserver.util.pool.thread.ClientPool;
import org.quickserver.util.pool.thread.ClientThread;
import org.quickserver.util.xmlreader.ByteBufferObjectPoolConfig;
import org.quickserver.util.xmlreader.ClientDataObjectPoolConfig;
import org.quickserver.util.xmlreader.ClientHandlerObjectPoolConfig;
import org.quickserver.util.xmlreader.ObjectPoolConfig;
import org.quickserver.util.xmlreader.PoolConfig;
import org.quickserver.util.xmlreader.QuickServerConfig;

@RunWith(EvoSuiteRunner.class)
public class ClientPoolEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool();
      QuickServerConfig quickServerConfig0 = new QuickServerConfig();
      ObjectPoolConfig objectPoolConfig0 = quickServerConfig0.getObjectPoolConfig();
      ClientPool clientPool0 = new ClientPool((QSObjectPool) makeQSObjectPool0, (PoolConfig) objectPoolConfig0);
      assertNotNull(clientPool0);
      
      clientPool0.finalize();
      assertEquals(10, clientPool0.getMaxThreadsForNioWrite());
  }

  @Test
  public void test1()  throws Throwable  {
      MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool();
      QuickServerConfig quickServerConfig0 = new QuickServerConfig();
      ObjectPoolConfig objectPoolConfig0 = quickServerConfig0.getObjectPoolConfig();
      ClientPool clientPool0 = new ClientPool((QSObjectPool) makeQSObjectPool0, (PoolConfig) objectPoolConfig0);
      assertNotNull(clientPool0);
      
      int int0 = clientPool0.getMaxThreadsForNioWrite();
      assertEquals(10, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool();
      QuickServerConfig quickServerConfig0 = new QuickServerConfig();
      ObjectPoolConfig objectPoolConfig0 = quickServerConfig0.getObjectPoolConfig();
      ClientPool clientPool0 = new ClientPool((QSObjectPool) makeQSObjectPool0, (PoolConfig) objectPoolConfig0);
      assertNotNull(clientPool0);
      
      clientPool0.getObjectToSynchronize();
      assertEquals(10, clientPool0.getMaxThreadsForNioWrite());
  }

  @Test
  public void test3()  throws Throwable  {
      MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool();
      QuickServerConfig quickServerConfig0 = new QuickServerConfig();
      ObjectPoolConfig objectPoolConfig0 = quickServerConfig0.getObjectPoolConfig();
      ClientPool clientPool0 = new ClientPool((QSObjectPool) makeQSObjectPool0, (PoolConfig) objectPoolConfig0);
      assertNotNull(clientPool0);
      
      // Undeclared exception!
      try {
        clientPool0.getAllClientThread();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool();
      QuickServerConfig quickServerConfig0 = new QuickServerConfig();
      ObjectPoolConfig objectPoolConfig0 = quickServerConfig0.getObjectPoolConfig();
      ClientPool clientPool0 = new ClientPool((QSObjectPool) makeQSObjectPool0, (PoolConfig) objectPoolConfig0);
      assertNotNull(clientPool0);
      
      ObjectPoolConfig objectPoolConfig1 = (ObjectPoolConfig)clientPool0.getPoolConfig();
      assertNotNull(objectPoolConfig1);
      assertEquals(10, clientPool0.getMaxThreadsForNioWrite());
  }

  @Test
  public void test5()  throws Throwable  {
      MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool();
      ClientDataObjectPoolConfig clientDataObjectPoolConfig0 = new ClientDataObjectPoolConfig();
      ClientPool clientPool0 = new ClientPool((QSObjectPool) makeQSObjectPool0, (PoolConfig) clientDataObjectPoolConfig0);
      assertNotNull(clientPool0);
      
      // Undeclared exception!
      try {
        clientPool0.getNumActive();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool();
      ClientDataObjectPoolConfig clientDataObjectPoolConfig0 = new ClientDataObjectPoolConfig();
      ClientPool clientPool0 = new ClientPool((QSObjectPool) makeQSObjectPool0, (PoolConfig) clientDataObjectPoolConfig0);
      assertNotNull(clientPool0);
      
      // Undeclared exception!
      try {
        clientPool0.getNumIdle();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      BasicObjectPool basicObjectPool0 = new BasicObjectPool();
      ObjectPoolConfig objectPoolConfig0 = new ObjectPoolConfig();
      ByteBufferObjectPoolConfig byteBufferObjectPoolConfig0 = objectPoolConfig0.getByteBufferObjectPoolConfig();
      ClientPool clientPool0 = new ClientPool((QSObjectPool) basicObjectPool0, (PoolConfig) byteBufferObjectPoolConfig0);
      assertNotNull(clientPool0);
      assertEquals(10, clientPool0.getMaxThreadsForNioWrite());
      
      clientPool0.setMaxThreadsForNioWrite(1);
      clientPool0.nioWriteStart();
      boolean boolean0 = clientPool0.shouldNioWriteHappen();
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool();
      QuickServerConfig quickServerConfig0 = new QuickServerConfig();
      ObjectPoolConfig objectPoolConfig0 = quickServerConfig0.getObjectPoolConfig();
      ClientPool clientPool0 = new ClientPool((QSObjectPool) makeQSObjectPool0, (PoolConfig) objectPoolConfig0);
      assertNotNull(clientPool0);
      
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      clientPool0.addClient((Runnable) blockingClientHandler0);
      assertEquals(true, clientPool0.isClientAvailable());
      
      clientPool0.getClient();
      assertEquals(10, clientPool0.getMaxThreadsForNioWrite());
  }

  @Test
  public void test9()  throws Throwable  {
      MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool();
      QuickServerConfig quickServerConfig0 = new QuickServerConfig();
      ObjectPoolConfig objectPoolConfig0 = quickServerConfig0.getObjectPoolConfig();
      ClientPool clientPool0 = new ClientPool((QSObjectPool) makeQSObjectPool0, (PoolConfig) objectPoolConfig0);
      assertNotNull(clientPool0);
      
      MakeQSObjectPool makeQSObjectPool1 = (MakeQSObjectPool)clientPool0.getObjectPool();
      assertEquals(10, clientPool0.getMaxThreadsForNioWrite());
      assertNotNull(makeQSObjectPool1);
  }

  @Test
  public void test10()  throws Throwable  {
      BasicObjectPool basicObjectPool0 = new BasicObjectPool();
      ObjectPoolConfig objectPoolConfig0 = new ObjectPoolConfig();
      ByteBufferObjectPoolConfig byteBufferObjectPoolConfig0 = objectPoolConfig0.getByteBufferObjectPoolConfig();
      ClientPool clientPool0 = new ClientPool((QSObjectPool) basicObjectPool0, (PoolConfig) byteBufferObjectPoolConfig0);
      assertNotNull(clientPool0);
      
      QuickServer quickServer0 = new QuickServer();
      // Undeclared exception!
      try {
        clientPool0.returnObject((Object) quickServer0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * org.quickserver.net.server.QuickServer cannot be cast to java.lang.Thread
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool();
      QuickServerConfig quickServerConfig0 = new QuickServerConfig();
      ObjectPoolConfig objectPoolConfig0 = quickServerConfig0.getObjectPoolConfig();
      ClientPool clientPool0 = new ClientPool((QSObjectPool) makeQSObjectPool0, (PoolConfig) objectPoolConfig0);
      assertNotNull(clientPool0);
      
      try {
        clientPool0.clear();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      GenericObjectPool genericObjectPool0 = new GenericObjectPool((PoolableObjectFactory) null, 0, (byte)0, (long) 0, (int) (byte)0, (int) (byte)0, true, true, (long) (byte)0, (int) (byte)0, (long) (byte)0, true, (long) (byte)0, true);
      MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool((ObjectPool) genericObjectPool0);
      PoolConfig poolConfig0 = new PoolConfig();
      ClientPool clientPool0 = new ClientPool((QSObjectPool) makeQSObjectPool0, poolConfig0);
      assertNotNull(clientPool0);
      
      ClientThread clientThread0 = new ClientThread(clientPool0, (int) (byte)0);
      try {
        clientPool0.addClient((Runnable) clientThread0, true);
        fail("Expecting exception: NoSuchElementException");
      } catch(NoSuchElementException e) {
        /*
         * Pool exhausted
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      StackObjectPool stackObjectPool0 = new StackObjectPool(12);
      MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool((ObjectPool) stackObjectPool0);
      ClientHandlerObjectPoolConfig clientHandlerObjectPoolConfig0 = new ClientHandlerObjectPoolConfig();
      ClientPool clientPool0 = new ClientPool((QSObjectPool) makeQSObjectPool0, (PoolConfig) clientHandlerObjectPoolConfig0);
      assertNotNull(clientPool0);
      
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler(12);
      try {
        clientPool0.addClient((Runnable) nonBlockingClientHandler0);
        fail("Expecting exception: NoSuchElementException");
      } catch(NoSuchElementException e) {
      }
  }

  @Test
  public void test14()  throws Throwable  {
      MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool();
      ClientDataObjectPoolConfig clientDataObjectPoolConfig0 = new ClientDataObjectPoolConfig();
      ClientPool clientPool0 = new ClientPool((QSObjectPool) makeQSObjectPool0, (PoolConfig) clientDataObjectPoolConfig0);
      assertNotNull(clientPool0);
      
      clientPool0.getClient();
      assertEquals(10, clientPool0.getMaxThreadsForNioWrite());
  }

  @Test
  public void test15()  throws Throwable  {
      MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool();
      QuickServerConfig quickServerConfig0 = new QuickServerConfig();
      ObjectPoolConfig objectPoolConfig0 = quickServerConfig0.getObjectPoolConfig();
      ClientPool clientPool0 = new ClientPool((QSObjectPool) makeQSObjectPool0, (PoolConfig) objectPoolConfig0);
      assertNotNull(clientPool0);
      
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      clientPool0.addClient((Runnable) blockingClientHandler0);
      assertEquals("<ClientHandler-Pool#-1-ID:25>", blockingClientHandler0.getName());
      
      boolean boolean0 = clientPool0.isClientAvailable();
      assertEquals(true, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool();
      QuickServerConfig quickServerConfig0 = new QuickServerConfig();
      ObjectPoolConfig objectPoolConfig0 = quickServerConfig0.getObjectPoolConfig();
      ClientPool clientPool0 = new ClientPool((QSObjectPool) makeQSObjectPool0, (PoolConfig) objectPoolConfig0);
      assertNotNull(clientPool0);
      
      boolean boolean0 = clientPool0.isClientAvailable();
      assertEquals(false, boolean0);
      assertEquals(10, clientPool0.getMaxThreadsForNioWrite());
  }

  @Test
  public void test17()  throws Throwable  {
      MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool();
      QuickServerConfig quickServerConfig0 = new QuickServerConfig();
      ObjectPoolConfig objectPoolConfig0 = quickServerConfig0.getObjectPoolConfig();
      ClientPool clientPool0 = new ClientPool((QSObjectPool) makeQSObjectPool0, (PoolConfig) objectPoolConfig0);
      assertNotNull(clientPool0);
      
      clientPool0.nioWriteStart();
      clientPool0.nioWriteEnd();
      assertEquals(10, clientPool0.getMaxThreadsForNioWrite());
  }

  @Test
  public void test18()  throws Throwable  {
      MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool();
      ClientDataObjectPoolConfig clientDataObjectPoolConfig0 = new ClientDataObjectPoolConfig();
      ClientPool clientPool0 = new ClientPool((QSObjectPool) makeQSObjectPool0, (PoolConfig) clientDataObjectPoolConfig0);
      assertNotNull(clientPool0);
      
      clientPool0.nioWriteEnd();
      assertEquals(10, clientPool0.getMaxThreadsForNioWrite());
  }

  @Test
  public void test19()  throws Throwable  {
      MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool();
      QuickServerConfig quickServerConfig0 = new QuickServerConfig();
      ObjectPoolConfig objectPoolConfig0 = quickServerConfig0.getObjectPoolConfig();
      ClientPool clientPool0 = new ClientPool((QSObjectPool) makeQSObjectPool0, (PoolConfig) objectPoolConfig0);
      assertNotNull(clientPool0);
      
      clientPool0.setMaxThreadsForNioWrite((-37));
      boolean boolean0 = clientPool0.shouldNioWriteHappen();
      assertEquals(-37, clientPool0.getMaxThreadsForNioWrite());
      assertEquals(true, boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      BasicObjectPool basicObjectPool0 = new BasicObjectPool();
      ObjectPoolConfig objectPoolConfig0 = new ObjectPoolConfig();
      ByteBufferObjectPoolConfig byteBufferObjectPoolConfig0 = objectPoolConfig0.getByteBufferObjectPoolConfig();
      ClientPool clientPool0 = new ClientPool((QSObjectPool) basicObjectPool0, (PoolConfig) byteBufferObjectPoolConfig0);
      assertNotNull(clientPool0);
      
      boolean boolean0 = clientPool0.shouldNioWriteHappen();
      assertEquals(10, clientPool0.getMaxThreadsForNioWrite());
      assertEquals(true, boolean0);
  }
}
