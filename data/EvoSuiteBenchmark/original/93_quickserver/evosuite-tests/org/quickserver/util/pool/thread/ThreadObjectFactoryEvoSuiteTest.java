/*
 * This file was automatically generated by EvoSuite
 */

package org.quickserver.util.pool.thread;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.apache.commons.pool.PoolableObjectFactory;
import org.junit.BeforeClass;
import org.quickserver.util.pool.BasicObjectPool;
import org.quickserver.util.pool.MakeQSObjectPool;
import org.quickserver.util.pool.QSObjectPool;
import org.quickserver.util.pool.thread.ClientPool;
import org.quickserver.util.pool.thread.ClientThread;
import org.quickserver.util.pool.thread.ThreadObjectFactory;
import org.quickserver.util.xmlreader.PoolConfig;

@RunWith(EvoSuiteRunner.class)
public class ThreadObjectFactoryEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ThreadObjectFactory threadObjectFactory0 = new ThreadObjectFactory();
      BasicObjectPool.Config basicObjectPool_Config0 = new BasicObjectPool.Config();
      BasicObjectPool basicObjectPool0 = new BasicObjectPool((PoolableObjectFactory) threadObjectFactory0, basicObjectPool_Config0);
      PoolConfig poolConfig0 = new PoolConfig();
      ClientPool clientPool0 = new ClientPool((QSObjectPool) basicObjectPool0, poolConfig0);
      threadObjectFactory0.setClientPool(clientPool0);
      assertEquals(10, clientPool0.getMaxThreadsForNioWrite());
  }

  @Test
  public void test1()  throws Throwable  {
      ThreadObjectFactory threadObjectFactory0 = new ThreadObjectFactory();
      // Undeclared exception!
      try {
        threadObjectFactory0.passivateObject((Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      ThreadObjectFactory threadObjectFactory0 = new ThreadObjectFactory();
      ClientThread clientThread0 = (ClientThread)threadObjectFactory0.makeObject();
      threadObjectFactory0.validateObject((Object) clientThread0);
      assertEquals(1746L, clientThread0.getId());
      assertEquals("<ClientThread-Pool#1-ID:1>", clientThread0.getName());
  }

  @Test
  public void test3()  throws Throwable  {
      ThreadObjectFactory threadObjectFactory0 = new ThreadObjectFactory();
      BasicObjectPool basicObjectPool0 = new BasicObjectPool();
      PoolConfig poolConfig0 = new PoolConfig();
      ClientPool clientPool0 = new ClientPool((QSObjectPool) basicObjectPool0, poolConfig0);
      ClientThread clientThread0 = new ClientThread(clientPool0);
      threadObjectFactory0.activateObject((Object) clientThread0);
      assertEquals("Thread[<ClientThread-Pool#-1-ID:1>,5,Test Execution] - U - Client null", clientThread0.toString());
      assertEquals(1, clientThread0.getInstanceId());
  }

  @Test
  public void test4()  throws Throwable  {
      ThreadObjectFactory threadObjectFactory0 = new ThreadObjectFactory();
      MakeQSObjectPool makeQSObjectPool0 = new MakeQSObjectPool();
      ClientPool clientPool0 = new ClientPool((QSObjectPool) makeQSObjectPool0, (PoolConfig) null);
      ClientThread clientThread0 = new ClientThread(clientPool0);
      threadObjectFactory0.destroyObject((Object) clientThread0);
      assertEquals("Thread[<ClientThread-Pool#-1-ID:14>,5,Test Execution] - U - Client null", clientThread0.toString());
      assertEquals("<ClientThread-Pool#-1-ID:14>", clientThread0.getName());
  }

  @Test
  public void test5()  throws Throwable  {
      ThreadObjectFactory threadObjectFactory0 = new ThreadObjectFactory();
      threadObjectFactory0.destroyObject((Object) null);
  }

  @Test
  public void test6()  throws Throwable  {
      ThreadObjectFactory threadObjectFactory0 = new ThreadObjectFactory();
      boolean boolean0 = threadObjectFactory0.validateObject((Object) null);
      assertEquals(false, boolean0);
  }
}
