/*
 * This file was automatically generated by EvoSuite
 */

package org.quickserver.util.pool;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Iterator;
import java.util.NoSuchElementException;
import org.apache.commons.pool.PoolableObjectFactory;
import org.junit.BeforeClass;
import org.quickserver.net.server.impl.BlockingClientHandler;
import org.quickserver.net.server.impl.NonBlockingClientHandler;
import org.quickserver.util.pool.BasicObjectPool;
import org.quickserver.util.pool.ByteBufferObjectFactory;
import org.quickserver.util.pool.ClientHandlerObjectFactory;

@RunWith(EvoSuiteRunner.class)
public class BasicObjectPoolEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BasicObjectPool basicObjectPool0 = new BasicObjectPool();
      Object object0 = basicObjectPool0.getObjectToSynchronize();
      assertNotNull(object0);
  }

  @Test
  public void test1()  throws Throwable  {
      BasicObjectPool basicObjectPool0 = new BasicObjectPool();
      Iterator<Object> iterator0 = basicObjectPool0.getAllActiveObjects();
      assertEquals(false, iterator0.hasNext());
  }

  @Test
  public void test2()  throws Throwable  {
      BasicObjectPool.Config basicObjectPool_Config0 = new BasicObjectPool.Config();
      assertEquals((-1), basicObjectPool_Config0.maxActive);
      
      basicObjectPool_Config0.maxActive = 10;
      ClientHandlerObjectFactory clientHandlerObjectFactory0 = new ClientHandlerObjectFactory(true);
      BasicObjectPool basicObjectPool0 = new BasicObjectPool((PoolableObjectFactory) clientHandlerObjectFactory0, basicObjectPool_Config0);
      BlockingClientHandler blockingClientHandler0 = (BlockingClientHandler)basicObjectPool0.borrowObject();
      assertEquals("{<ClientHandler-Pool#1-ID:1> - [non-connected]}", blockingClientHandler0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      BasicObjectPool basicObjectPool0 = new BasicObjectPool();
      ClientHandlerObjectFactory clientHandlerObjectFactory0 = new ClientHandlerObjectFactory(false);
      basicObjectPool0.setFactory((PoolableObjectFactory) clientHandlerObjectFactory0);
      NonBlockingClientHandler nonBlockingClientHandler0 = (NonBlockingClientHandler)basicObjectPool0.borrowObject();
      NonBlockingClientHandler nonBlockingClientHandler1 = (NonBlockingClientHandler)basicObjectPool0.borrowObject();
      basicObjectPool0.addObject();
      basicObjectPool0.addObject();
      basicObjectPool0.addObject();
      basicObjectPool0.addObject();
      basicObjectPool0.addObject();
      basicObjectPool0.addObject();
      basicObjectPool0.addObject();
      basicObjectPool0.addObject();
      basicObjectPool0.returnObject((Object) nonBlockingClientHandler1);
      basicObjectPool0.addObject();
      assertEquals(1, basicObjectPool0.getNumActive());
      
      basicObjectPool0.returnObject((Object) nonBlockingClientHandler0);
      assertEquals(10, basicObjectPool0.getNumIdle());
      assertEquals("{<ClientHandler-Pool#80-ID:1> - [non-connected]}", nonBlockingClientHandler0.info());
  }

  @Test
  public void test4()  throws Throwable  {
      BasicObjectPool basicObjectPool0 = new BasicObjectPool((PoolableObjectFactory) null, (BasicObjectPool.Config) null);
      assertEquals(0, basicObjectPool0.getNumIdle());
  }

  @Test
  public void test5()  throws Throwable  {
      ByteBufferObjectFactory byteBufferObjectFactory0 = new ByteBufferObjectFactory(13, true);
      BasicObjectPool.Config basicObjectPool_Config0 = new BasicObjectPool.Config();
      BasicObjectPool basicObjectPool0 = new BasicObjectPool((PoolableObjectFactory) byteBufferObjectFactory0, basicObjectPool_Config0);
      assertEquals(10, basicObjectPool_Config0.maxIdle);
      
      basicObjectPool_Config0.maxIdle = (-1);
      Object object0 = basicObjectPool0.borrowObject();
      basicObjectPool0.returnObject(object0);
      assertEquals(1, basicObjectPool0.getNumIdle());
  }

  @Test
  public void test6()  throws Throwable  {
      BasicObjectPool.Config basicObjectPool_Config0 = new BasicObjectPool.Config();
      assertEquals(10, basicObjectPool_Config0.maxIdle);
      
      basicObjectPool_Config0.maxIdle = 0;
      ClientHandlerObjectFactory clientHandlerObjectFactory0 = new ClientHandlerObjectFactory(true);
      BasicObjectPool basicObjectPool0 = new BasicObjectPool((PoolableObjectFactory) clientHandlerObjectFactory0, basicObjectPool_Config0);
      try {
        basicObjectPool0.borrowObject();
        fail("Expecting exception: NoSuchElementException");
      } catch(NoSuchElementException e) {
        /*
         * No free objects! MaxActive:-1, NumActive:0
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      BasicObjectPool basicObjectPool0 = new BasicObjectPool();
      ClientHandlerObjectFactory clientHandlerObjectFactory0 = new ClientHandlerObjectFactory(false);
      basicObjectPool0.setFactory((PoolableObjectFactory) clientHandlerObjectFactory0);
      basicObjectPool0.addObject();
      NonBlockingClientHandler nonBlockingClientHandler0 = (NonBlockingClientHandler)basicObjectPool0.borrowObject();
      assertEquals(1, basicObjectPool0.getNumActive());
      assertEquals(0, basicObjectPool0.getNumIdle());
      assertEquals("{<ClientHandler-Pool#272-ID:1> - [non-connected]}", nonBlockingClientHandler0.info());
  }

  @Test
  public void test8()  throws Throwable  {
      ClientHandlerObjectFactory clientHandlerObjectFactory0 = new ClientHandlerObjectFactory(false);
      BasicObjectPool.Config basicObjectPool_Config0 = new BasicObjectPool.Config();
      BasicObjectPool basicObjectPool0 = new BasicObjectPool((PoolableObjectFactory) clientHandlerObjectFactory0, basicObjectPool_Config0);
      assertEquals((-1), basicObjectPool_Config0.maxActive);
      
      basicObjectPool_Config0.maxActive = (-2);
      try {
        basicObjectPool0.borrowObject();
        fail("Expecting exception: NoSuchElementException");
      } catch(NoSuchElementException e) {
        /*
         * No free objects! MaxActive:-2, NumActive:0
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      ByteBufferObjectFactory byteBufferObjectFactory0 = new ByteBufferObjectFactory(13, true);
      BasicObjectPool.Config basicObjectPool_Config0 = new BasicObjectPool.Config();
      BasicObjectPool basicObjectPool0 = new BasicObjectPool((PoolableObjectFactory) byteBufferObjectFactory0, basicObjectPool_Config0);
      Object object0 = basicObjectPool0.borrowObject();
      assertNotNull(object0);
      
      basicObjectPool0.returnObject(object0);
      assertEquals(1, basicObjectPool0.getNumIdle());
      
      basicObjectPool0.close();
      assertEquals(0, basicObjectPool0.getNumIdle());
  }

  @Test
  public void test10()  throws Throwable  {
      ClientHandlerObjectFactory clientHandlerObjectFactory0 = new ClientHandlerObjectFactory(false);
      BasicObjectPool.Config basicObjectPool_Config0 = new BasicObjectPool.Config();
      BasicObjectPool basicObjectPool0 = new BasicObjectPool((PoolableObjectFactory) clientHandlerObjectFactory0, basicObjectPool_Config0);
      basicObjectPool0.returnObject((Object) null);
      assertEquals(10, basicObjectPool_Config0.maxIdle);
      assertEquals((-1), basicObjectPool_Config0.maxActive);
  }
}
