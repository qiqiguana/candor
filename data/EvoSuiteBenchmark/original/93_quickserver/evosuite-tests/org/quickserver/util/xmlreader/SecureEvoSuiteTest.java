/*
 * This file was automatically generated by EvoSuite
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import org.quickserver.util.xmlreader.Secure;
import org.quickserver.util.xmlreader.SecureStore;

@RunWith(EvoSuiteRunner.class)
public class SecureEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Secure secure0 = new Secure();
      boolean boolean0 = secure0.isClientAuthEnable();
      assertEquals(false, boolean0);
      assertEquals(-1, secure0.getPort());
      assertEquals(false, secure0.getEnable());
      assertEquals("TLS", secure0.getProtocol());
      assertEquals(false, secure0.isLoad());
  }

  @Test
  public void test1()  throws Throwable  {
      Secure secure0 = new Secure();
      boolean boolean0 = secure0.isLoad();
      assertEquals(-1, secure0.getPort());
      assertEquals("TLS", secure0.getProtocol());
      assertEquals(false, boolean0);
      assertEquals(false, secure0.getClientAuthEnable());
      assertEquals(false, secure0.getEnable());
  }

  @Test
  public void test2()  throws Throwable  {
      Secure secure0 = new Secure();
      secure0.setEnable(true);
      assertEquals(true, secure0.isEnable());
      assertEquals(true, secure0.getLoad());
      assertEquals(-1, secure0.getPort());
  }

  @Test
  public void test3()  throws Throwable  {
      Secure secure0 = new Secure();
      boolean boolean0 = secure0.isEnable();
      assertEquals("TLS", secure0.getProtocol());
      assertEquals(false, secure0.getClientAuthEnable());
      assertEquals(false, boolean0);
      assertEquals(-1, secure0.getPort());
      assertEquals(false, secure0.getLoad());
  }

  @Test
  public void test4()  throws Throwable  {
      Secure secure0 = new Secure();
      secure0.setClientAuthEnable(false);
      assertEquals("TLS", secure0.getProtocol());
      assertEquals(-1, secure0.getPort());
      assertEquals(false, secure0.getEnable());
      assertEquals(false, secure0.getClientAuthEnable());
      assertEquals(false, secure0.isLoad());
  }

  @Test
  public void test5()  throws Throwable  {
      Secure secure0 = new Secure();
      secure0.setEnable(false);
      assertEquals("TLS", secure0.getProtocol());
      assertEquals(false, secure0.isLoad());
      assertEquals(false, secure0.isEnable());
      assertEquals(-1, secure0.getPort());
      assertEquals(false, secure0.getClientAuthEnable());
      assertEquals(false, secure0.getLoad());
  }

  @Test
  public void test6()  throws Throwable  {
      Secure secure0 = new Secure();
      secure0.setPort((-1994));
      assertEquals(false, secure0.getEnable());
      assertEquals("TLS", secure0.getProtocol());
      assertEquals(false, secure0.getClientAuthEnable());
      assertEquals(false, secure0.getLoad());
      assertEquals(-1, secure0.getPort());
  }

  @Test
  public void test7()  throws Throwable  {
      Secure secure0 = new Secure();
      secure0.setPort(535);
      String string0 = secure0.toXML("TLS");
      assertEquals(535, secure0.getPort());
      assertEquals("TLS<secure>\nTLS\t<enable>false</enable>\nTLS\t<load>false</load>\nTLS\t<port>535</port>\nTLS\t<protocol>TLS</protocol>\nTLS\t<client-auth-enable>false</client-auth-enable>\nTLS\t<secure-store>\nTLS\t\t<type>JKS</type>\nTLS\t\t<algorithm>SunX509</algorithm>\nTLS\t\t<secure-store-manager>org.quickserver.security.SecureStoreManager</secure-store-manager>\nTLS\t</secure-store>\nTLS</secure>\n", string0);
  }

  @Test
  public void test8()  throws Throwable  {
      Secure secure0 = new Secure();
      secure0.setProtocol((String) null);
      assertEquals(-1, secure0.getPort());
      assertEquals(false, secure0.getClientAuthEnable());
      assertEquals("TLS", secure0.getProtocol());
      assertEquals(false, secure0.getLoad());
      assertEquals(false, secure0.isEnable());
  }

  @Test
  public void test9()  throws Throwable  {
      Secure secure0 = new Secure();
      secure0.setProtocol("");
      assertEquals(false, secure0.isClientAuthEnable());
      assertEquals("TLS", secure0.getProtocol());
      assertEquals(false, secure0.isEnable());
      assertEquals(-1, secure0.getPort());
      assertEquals(false, secure0.getLoad());
      assertEquals(false, secure0.getEnable());
  }

  @Test
  public void test10()  throws Throwable  {
      Secure secure0 = new Secure();
      secure0.setProtocol("sBV-4t6Xh38`V^");
      assertEquals("sBV-4t6Xh38`V^", secure0.getProtocol());
  }

  @Test
  public void test11()  throws Throwable  {
      Secure secure0 = new Secure();
      secure0.setSecureStore((SecureStore) null);
      assertEquals(false, secure0.isClientAuthEnable());
      assertEquals("TLS", secure0.getProtocol());
      assertEquals(-1, secure0.getPort());
      assertEquals(false, secure0.isEnable());
      assertEquals(false, secure0.getLoad());
  }

  @Test
  public void test12()  throws Throwable  {
      Secure secure0 = new Secure();
      SecureStore secureStore0 = secure0.getSecureStore();
      assertNotNull(secureStore0);
      
      secure0.setSecureStore(secureStore0);
      assertEquals(false, secure0.isClientAuthEnable());
      assertEquals(-1, secure0.getPort());
      assertEquals(false, secure0.isEnable());
      assertEquals(false, secure0.isLoad());
      assertEquals("TLS", secure0.getProtocol());
      assertEquals(false, secure0.getLoad());
  }

  @Test
  public void test13()  throws Throwable  {
      Secure secure0 = new Secure();
      String string0 = secure0.toXML((String) null);
      assertEquals("<secure>\n\t<enable>false</enable>\n\t<load>false</load>\n\t<protocol>TLS</protocol>\n\t<client-auth-enable>false</client-auth-enable>\n\t<secure-store>\n\t\t<type>JKS</type>\n\t\t<algorithm>SunX509</algorithm>\n\t\t<secure-store-manager>org.quickserver.security.SecureStoreManager</secure-store-manager>\n\t</secure-store>\n</secure>\n", string0);
      assertNotNull(string0);
  }
}
