/*
 * This file was automatically generated by EvoSuite
 */

package org.quickserver.util.pool;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import org.quickserver.net.server.impl.BlockingClientHandler;
import org.quickserver.net.server.impl.NonBlockingClientHandler;
import org.quickserver.util.pool.ClientHandlerObjectFactory;

@RunWith(EvoSuiteRunner.class)
public class ClientHandlerObjectFactoryEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ClientHandlerObjectFactory clientHandlerObjectFactory0 = new ClientHandlerObjectFactory(false);
      // Undeclared exception!
      try {
        clientHandlerObjectFactory0.destroyObject((Object) "<ClientHandler-Pool#1175-ID:7>");
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * java.lang.String cannot be cast to org.quickserver.net.server.ClientHandler
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      ClientHandlerObjectFactory clientHandlerObjectFactory0 = new ClientHandlerObjectFactory(false);
      clientHandlerObjectFactory0.activateObject((Object) null);
  }

  @Test
  public void test2()  throws Throwable  {
      ClientHandlerObjectFactory clientHandlerObjectFactory0 = new ClientHandlerObjectFactory(false);
      NonBlockingClientHandler nonBlockingClientHandler0 = (NonBlockingClientHandler)clientHandlerObjectFactory0.makeObject();
      assertEquals("<ClientHandler-Pool#1-ID:1>", nonBlockingClientHandler0.getName());
  }

  @Test
  public void test3()  throws Throwable  {
      ClientHandlerObjectFactory clientHandlerObjectFactory0 = new ClientHandlerObjectFactory(true);
      BlockingClientHandler blockingClientHandler0 = (BlockingClientHandler)clientHandlerObjectFactory0.makeObject();
      boolean boolean0 = clientHandlerObjectFactory0.validateObject((Object) blockingClientHandler0);
      assertEquals("{<ClientHandler-Pool#6-ID:3> - [non-connected]}", blockingClientHandler0.toString());
      assertEquals(true, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      ClientHandlerObjectFactory clientHandlerObjectFactory0 = new ClientHandlerObjectFactory(false);
      clientHandlerObjectFactory0.destroyObject((Object) null);
  }

  @Test
  public void test5()  throws Throwable  {
      ClientHandlerObjectFactory clientHandlerObjectFactory0 = new ClientHandlerObjectFactory(false);
      boolean boolean0 = clientHandlerObjectFactory0.validateObject((Object) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      ClientHandlerObjectFactory clientHandlerObjectFactory0 = new ClientHandlerObjectFactory(true);
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler(1981);
      boolean boolean0 = clientHandlerObjectFactory0.validateObject((Object) blockingClientHandler0);
      assertEquals("<ClientHandler-Pool#1981-ID:1>", blockingClientHandler0.getName());
      assertEquals(false, boolean0);
  }
}
