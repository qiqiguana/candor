/*
 * This file was automatically generated by EvoSuite
 */

package org.quickserver.util.pool.thread.app;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.junit.BeforeClass;
import org.quickserver.util.pool.thread.app.AppThreadPool;
import org.quickserver.util.pool.thread.app.NamedThreadFactory;

@RunWith(EvoSuiteRunner.class)
public class AppThreadPoolEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      TimeUnit timeUnit0 = AppThreadPool.getDefaultTimeUnit();
      AppThreadPool.setDefaultTimeUnit(timeUnit0);
      assertEquals(3, timeUnit0.ordinal());
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = AppThreadPool.getDefaultKeepAliveTime();
      assertEquals(120, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = AppThreadPool.getDefaultMaximumPoolSize();
      assertEquals(50, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = AppThreadPool.getDefaultCorePoolSize();
      assertEquals(10, int0);
  }

  @Test
  public void test4()  throws Throwable  {
      ThreadPoolExecutor threadPoolExecutor0 = AppThreadPool.getPool("");
      assertNull(threadPoolExecutor0);
  }

  @Test
  public void test5()  throws Throwable  {
      AppThreadPool appThreadPool0 = new AppThreadPool();
      assertEquals(10, appThreadPool0.getDefaultCorePoolSize());
  }

  @Test
  public void test6()  throws Throwable  {
      AppThreadPool.setDefaultKeepAliveTime((-1));
  }

  @Test
  public void test7()  throws Throwable  {
      AppThreadPool.setDefaultMaximumPoolSize(0);
  }

  @Test
  public void test8()  throws Throwable  {
      AppThreadPool.setDefaultCorePoolSize(1627);
  }

  @Test
  public void test9()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      AppThreadPool.initPool("", 0, 120, 817, timeUnit0);
  }

  @Test
  public void test10()  throws Throwable  {
      NamedThreadFactory namedThreadFactory0 = new NamedThreadFactory("");
      Thread thread0 = namedThreadFactory0.newThread((Runnable) null);
      AppThreadPool.addTask("", (Runnable) thread0);
  }

  @Test
  public void test11()  throws Throwable  {
      NamedThreadFactory namedThreadFactory0 = new NamedThreadFactory("Uncaught Exception [");
      Thread thread0 = namedThreadFactory0.newThread((Runnable) null);
      // Undeclared exception!
      try {
        AppThreadPool.addTask("Uncaught Exception [", (Runnable) thread0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }
}
