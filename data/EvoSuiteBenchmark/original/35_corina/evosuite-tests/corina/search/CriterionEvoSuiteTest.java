/*
 * This file was automatically generated by EvoSuite
 */

package corina.search;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import corina.search.Criterion;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class CriterionEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Criterion.StringEndsWith criterion_StringEndsWith0 = new Criterion.StringEndsWith();
      String string0 = criterion_StringEndsWith0.toString();
      assertEquals("null=*null", string0);
      assertNotNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      Object[] objectArray0 = Criterion.getRHSValues(3, "7a4ZLbMorwD");
      assertNull(objectArray0);
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = Criterion.getRHSType(1, "ends with");
      assertEquals(1, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      Criterion.StringEndsWith criterion_StringEndsWith0 = new Criterion.StringEndsWith();
      // Undeclared exception!
      try {
        criterion_StringEndsWith0.test((Object) "IS NULL m.null", (Object) criterion_StringEndsWith0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * corina.search.Criterion$StringEndsWith cannot be cast to java.lang.String
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      Criterion.StringEndsWith criterion_StringEndsWith0 = new Criterion.StringEndsWith();
      String string0 = criterion_StringEndsWith0.toSQL();
      assertNotNull(string0);
      assertEquals("m.null like '~null'", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      Object[] objectArray0 = Criterion.getRHSValues(2, "is greater than");
      assertNull(objectArray0);
  }

  @Test
  public void test6()  throws Throwable  {
      Criterion.YearIsBefore criterion_YearIsBefore0 = new Criterion.YearIsBefore();
      String string0 = criterion_YearIsBefore0.toString();
      assertNotNull(string0);
      assertEquals("null<null", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      Criterion.YearIsExactly criterion_YearIsExactly0 = (Criterion.YearIsExactly)Criterion.getCriterion(4, "is exactly");
      assertEquals("null=null", criterion_YearIsExactly0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      Criterion.YearIsBefore criterion_YearIsBefore0 = new Criterion.YearIsBefore();
      String string0 = criterion_YearIsBefore0.toSQL();
      assertNotNull(string0);
      assertEquals("r.null < null", string0);
  }

  @Test
  public void test9()  throws Throwable  {
      Criterion.DateIsBefore criterion_DateIsBefore0 = new Criterion.DateIsBefore();
      String string0 = criterion_DateIsBefore0.toString();
      assertEquals("null modified before null", string0);
      assertNotNull(string0);
  }

  @Test
  public void test10()  throws Throwable  {
      Criterion.DateIsBefore criterion_DateIsBefore0 = new Criterion.DateIsBefore();
      Criterion.DateIsExactly criterion_DateIsExactly0 = new Criterion.DateIsExactly();
      // Undeclared exception!
      try {
        criterion_DateIsBefore0.test((Object) "null=null*", (Object) criterion_DateIsExactly0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * java.lang.String cannot be cast to java.util.Date
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Criterion.DateIsBefore criterion_DateIsBefore0 = new Criterion.DateIsBefore();
      String string0 = criterion_DateIsBefore0.toSQL();
      assertEquals("???", string0);
  }

  @Test
  public void test12()  throws Throwable  {
      Criterion.NumberIsGreaterThan criterion_NumberIsGreaterThan0 = new Criterion.NumberIsGreaterThan();
      String string0 = criterion_NumberIsGreaterThan0.toSQL();
      assertNotNull(string0);
      assertEquals("m.null > null", string0);
  }

  @Test
  public void test13()  throws Throwable  {
      Criterion.NumberIsGreaterThan criterion_NumberIsGreaterThan0 = new Criterion.NumberIsGreaterThan();
      String string0 = criterion_NumberIsGreaterThan0.toString();
      assertEquals("null>null", string0);
      assertNotNull(string0);
  }

  @Test
  public void test14()  throws Throwable  {
      Criterion.OneOfIs criterion_OneOfIs0 = new Criterion.OneOfIs();
      String string0 = criterion_OneOfIs0.toString();
      assertNotNull(string0);
      assertEquals("null=null", string0);
  }

  @Test
  public void test15()  throws Throwable  {
      Criterion.OneOfIs criterion_OneOfIs0 = new Criterion.OneOfIs();
      boolean boolean0 = criterion_OneOfIs0.test((Object) "null>null", (Object) "???");
      assertEquals(false, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      Criterion.OneOfIs criterion_OneOfIs0 = new Criterion.OneOfIs();
      String[] stringArray0 = criterion_OneOfIs0.getRHSValues();
      assertNull(stringArray0);
  }

  @Test
  public void test17()  throws Throwable  {
      Criterion.OneOfIs criterion_OneOfIs0 = new Criterion.OneOfIs();
      String string0 = criterion_OneOfIs0.toSQL();
      assertEquals("m.null = 'null'", string0);
      assertNotNull(string0);
  }

  @Test
  public void test18()  throws Throwable  {
      Criterion.OneOfIs criterion_OneOfIs0 = (Criterion.OneOfIs)Criterion.getCriterion(5, "r.null > null");
      assertNull(criterion_OneOfIs0);
  }

  @Test
  public void test19()  throws Throwable  {
      String[] stringArray0 = Criterion.getComparisonsForType(2);
      assertNotNull(stringArray0);
  }

  @Test
  public void test20()  throws Throwable  {
      Criterion.NumberIsNotEqualTo criterion_NumberIsNotEqualTo0 = new Criterion.NumberIsNotEqualTo();
      String string0 = criterion_NumberIsNotEqualTo0.toString();
      assertNotNull(string0);
      assertEquals("null\u2260null", string0);
  }

  @Test
  public void test21()  throws Throwable  {
      Criterion.NumberIsNotEqualTo criterion_NumberIsNotEqualTo0 = new Criterion.NumberIsNotEqualTo();
      String string0 = criterion_NumberIsNotEqualTo0.toSQL();
      assertEquals("NOT m.null = 'null'", string0);
      assertNotNull(string0);
  }

  @Test
  public void test22()  throws Throwable  {
      Criterion.NumberIsEqualTo criterion_NumberIsEqualTo0 = new Criterion.NumberIsEqualTo();
      String string0 = criterion_NumberIsEqualTo0.toSQL();
      assertEquals("m.null = 'null'", string0);
      assertNotNull(string0);
  }

  @Test
  public void test23()  throws Throwable  {
      Criterion.NumberIsEqualTo criterion_NumberIsEqualTo0 = new Criterion.NumberIsEqualTo();
      Criterion.StringEndsWith criterion_StringEndsWith0 = new Criterion.StringEndsWith();
      // Undeclared exception!
      try {
        criterion_NumberIsEqualTo0.test((Object) criterion_StringEndsWith0, (Object) "null=*null");
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * corina.search.Criterion$StringEndsWith cannot be cast to java.lang.Integer
         */
      }
  }

  @Test
  public void test24()  throws Throwable  {
      Criterion.NumberIsEqualTo criterion_NumberIsEqualTo0 = new Criterion.NumberIsEqualTo();
      String string0 = criterion_NumberIsEqualTo0.toString();
      assertEquals("null=null", string0);
      assertNotNull(string0);
  }

  @Test
  public void test25()  throws Throwable  {
      Criterion.DateIsWithin criterion_DateIsWithin0 = new Criterion.DateIsWithin();
      int int0 = criterion_DateIsWithin0.getRHSType();
      assertEquals(5, int0);
  }

  @Test
  public void test26()  throws Throwable  {
      Criterion.DateIsWithin criterion_DateIsWithin0 = new Criterion.DateIsWithin();
      String string0 = criterion_DateIsWithin0.toString();
      assertEquals("null modified within null", string0);
      assertNotNull(string0);
  }

  @Test
  public void test27()  throws Throwable  {
      Criterion.DateIsWithin criterion_DateIsWithin0 = new Criterion.DateIsWithin();
      String string0 = criterion_DateIsWithin0.toSQL();
      assertEquals("???", string0);
  }

  @Test
  public void test28()  throws Throwable  {
      Criterion.DateIsWithin criterion_DateIsWithin0 = new Criterion.DateIsWithin();
      String[] stringArray0 = criterion_DateIsWithin0.getRHSValues();
      assertNotNull(stringArray0);
  }

  @Test
  public void test29()  throws Throwable  {
      Criterion.OneOfNotSet criterion_OneOfNotSet0 = new Criterion.OneOfNotSet();
      String[] stringArray0 = criterion_OneOfNotSet0.getRHSValues();
      assertNull(stringArray0);
  }

  @Test
  public void test30()  throws Throwable  {
      Criterion.OneOfNotSet criterion_OneOfNotSet0 = new Criterion.OneOfNotSet();
      String string0 = criterion_OneOfNotSet0.toString();
      assertEquals("null not set", string0);
      assertNotNull(string0);
  }

  @Test
  public void test31()  throws Throwable  {
      Criterion.OneOfNotSet criterion_OneOfNotSet0 = new Criterion.OneOfNotSet();
      String string0 = criterion_OneOfNotSet0.toSQL();
      assertEquals("IS NULL m.null", string0);
      assertNotNull(string0);
  }

  @Test
  public void test32()  throws Throwable  {
      Criterion.OneOfNotSet criterion_OneOfNotSet0 = new Criterion.OneOfNotSet();
      boolean boolean0 = criterion_OneOfNotSet0.test((Object) "not set", (Object) "not set");
      assertEquals(false, boolean0);
  }

  @Test
  public void test33()  throws Throwable  {
      Criterion.OneOfNotSet criterion_OneOfNotSet0 = new Criterion.OneOfNotSet();
      int int0 = criterion_OneOfNotSet0.getLHSType();
      assertEquals(5, int0);
  }

  @Test
  public void test34()  throws Throwable  {
      Criterion.OneOfNotSet criterion_OneOfNotSet0 = new Criterion.OneOfNotSet();
      int int0 = criterion_OneOfNotSet0.getRHSType();
      assertEquals(0, int0);
  }

  @Test
  public void test35()  throws Throwable  {
      Criterion.OneOfNotSet criterion_OneOfNotSet0 = new Criterion.OneOfNotSet();
      String string0 = criterion_OneOfNotSet0.getComparison();
      assertEquals("not set", string0);
  }

  @Test
  public void test36()  throws Throwable  {
      Criterion.OneOfIsNot criterion_OneOfIsNot0 = new Criterion.OneOfIsNot();
      String[] stringArray0 = criterion_OneOfIsNot0.getRHSValues();
      assertNull(stringArray0);
  }

  @Test
  public void test37()  throws Throwable  {
      Criterion.OneOfIsNot criterion_OneOfIsNot0 = new Criterion.OneOfIsNot();
      String string0 = criterion_OneOfIsNot0.toSQL();
      assertEquals("NOT m.null = 'null'", string0);
      assertNotNull(string0);
  }

  @Test
  public void test38()  throws Throwable  {
      Criterion.OneOfIsNot criterion_OneOfIsNot0 = new Criterion.OneOfIsNot();
      String string0 = criterion_OneOfIsNot0.toString();
      assertNotNull(string0);
      assertEquals("null\u2260null", string0);
  }

  @Test
  public void test39()  throws Throwable  {
      Criterion.DateIsToday criterion_DateIsToday0 = new Criterion.DateIsToday();
      String string0 = criterion_DateIsToday0.toSQL();
      assertEquals("???", string0);
  }

  @Test
  public void test40()  throws Throwable  {
      Criterion.DateIsToday criterion_DateIsToday0 = new Criterion.DateIsToday();
      String string0 = criterion_DateIsToday0.toString();
      assertEquals("null modified today", string0);
      assertNotNull(string0);
  }

  @Test
  public void test41()  throws Throwable  {
      Criterion.DateIsToday criterion_DateIsToday0 = new Criterion.DateIsToday();
      int int0 = criterion_DateIsToday0.getRHSType();
      assertEquals(0, int0);
  }

  @Test
  public void test42()  throws Throwable  {
      Criterion.StringContains criterion_StringContains0 = new Criterion.StringContains();
      Criterion.DateIsToday criterion_DateIsToday0 = new Criterion.DateIsToday();
      // Undeclared exception!
      try {
        criterion_DateIsToday0.test((Object) criterion_StringContains0, (Object) "null modified within null");
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * corina.search.Criterion$StringContains cannot be cast to java.util.Date
         */
      }
  }

  @Test
  public void test43()  throws Throwable  {
      Criterion.DateIsExactly criterion_DateIsExactly0 = new Criterion.DateIsExactly();
      Criterion.DateIsBefore criterion_DateIsBefore0 = new Criterion.DateIsBefore();
      // Undeclared exception!
      try {
        criterion_DateIsExactly0.test((Object) "???", (Object) criterion_DateIsBefore0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * java.lang.String cannot be cast to java.util.Date
         */
      }
  }

  @Test
  public void test44()  throws Throwable  {
      Criterion.DateIsExactly criterion_DateIsExactly0 = new Criterion.DateIsExactly();
      String string0 = criterion_DateIsExactly0.toSQL();
      assertEquals("???", string0);
  }

  @Test
  public void test45()  throws Throwable  {
      Criterion.DateIsExactly criterion_DateIsExactly0 = new Criterion.DateIsExactly();
      String string0 = criterion_DateIsExactly0.toString();
      assertEquals("null modified on null", string0);
      assertNotNull(string0);
  }

  @Test
  public void test46()  throws Throwable  {
      Criterion.LengthIsGreaterThan criterion_LengthIsGreaterThan0 = new Criterion.LengthIsGreaterThan();
      String string0 = criterion_LengthIsGreaterThan0.toSQL();
      assertEquals("r.null > null", string0);
      assertNotNull(string0);
  }

  @Test
  public void test47()  throws Throwable  {
      Criterion.LengthIsGreaterThan criterion_LengthIsGreaterThan0 = new Criterion.LengthIsGreaterThan();
      String string0 = criterion_LengthIsGreaterThan0.toString();
      assertEquals("null>null", string0);
      assertNotNull(string0);
  }

  @Test
  public void test48()  throws Throwable  {
      Criterion.StringIs criterion_StringIs0 = new Criterion.StringIs();
      // Undeclared exception!
      try {
        criterion_StringIs0.test((Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test49()  throws Throwable  {
      Criterion.StringContains criterion_StringContains0 = (Criterion.StringContains)Criterion.getCriterion(1, "C");
      assertNull(criterion_StringContains0);
  }

  @Test
  public void test50()  throws Throwable  {
      Criterion.StringIs criterion_StringIs0 = new Criterion.StringIs();
      String string0 = criterion_StringIs0.toString();
      assertNotNull(string0);
      assertEquals("null=null", string0);
  }

  @Test
  public void test51()  throws Throwable  {
      Criterion.StringIs criterion_StringIs0 = new Criterion.StringIs();
      String string0 = criterion_StringIs0.toSQL();
      assertNotNull(string0);
      assertEquals("m.null = 'null'", string0);
  }

  @Test
  public void test52()  throws Throwable  {
      Criterion.StringStartsWith criterion_StringStartsWith0 = new Criterion.StringStartsWith();
      String string0 = criterion_StringStartsWith0.toSQL();
      assertEquals("m.null like 'null~'", string0);
      assertNotNull(string0);
  }

  @Test
  public void test53()  throws Throwable  {
      Criterion.StringStartsWith criterion_StringStartsWith0 = new Criterion.StringStartsWith();
      boolean boolean0 = criterion_StringStartsWith0.test((Object) "m.null < null", (Object) "m.null < null");
      assertEquals(true, boolean0);
  }

  @Test
  public void test54()  throws Throwable  {
      Criterion.StringStartsWith criterion_StringStartsWith0 = new Criterion.StringStartsWith();
      String string0 = criterion_StringStartsWith0.toString();
      assertNotNull(string0);
      assertEquals("null=null*", string0);
  }

  @Test
  public void test55()  throws Throwable  {
      Criterion.YearIsExactly criterion_YearIsExactly0 = new Criterion.YearIsExactly();
      Criterion.StringContains criterion_StringContains0 = new Criterion.StringContains();
      // Undeclared exception!
      try {
        criterion_YearIsExactly0.test((Object) "m.null like '~null~'", (Object) criterion_StringContains0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * java.lang.String cannot be cast to corina.Year
         */
      }
  }

  @Test
  public void test56()  throws Throwable  {
      Criterion.YearIsExactly criterion_YearIsExactly0 = new Criterion.YearIsExactly();
      String string0 = criterion_YearIsExactly0.toSQL();
      assertEquals("r.null = 'null'", string0);
      assertNotNull(string0);
  }

  @Test
  public void test57()  throws Throwable  {
      Criterion.YearIsExactly criterion_YearIsExactly0 = new Criterion.YearIsExactly();
      String string0 = criterion_YearIsExactly0.toString();
      assertNotNull(string0);
      assertEquals("null=null", string0);
  }

  @Test
  public void test58()  throws Throwable  {
      Criterion.YearIsAfter criterion_YearIsAfter0 = new Criterion.YearIsAfter();
      String string0 = criterion_YearIsAfter0.toString();
      assertNotNull(string0);
      assertEquals("null>null", string0);
  }

  @Test
  public void test59()  throws Throwable  {
      Criterion.YearIsAfter criterion_YearIsAfter0 = new Criterion.YearIsAfter();
      String string0 = criterion_YearIsAfter0.toSQL();
      assertNotNull(string0);
      assertEquals("r.null > null", string0);
  }

  @Test
  public void test60()  throws Throwable  {
      Criterion.LengthIsLessThan criterion_LengthIsLessThan0 = new Criterion.LengthIsLessThan();
      String string0 = criterion_LengthIsLessThan0.toString();
      assertNotNull(string0);
      assertEquals("null<null", string0);
  }

  @Test
  public void test61()  throws Throwable  {
      int int0 = Criterion.getRHSType(6, (String) null);
      assertEquals(0, int0);
  }

  @Test
  public void test62()  throws Throwable  {
      Criterion.LengthIsLessThan criterion_LengthIsLessThan0 = new Criterion.LengthIsLessThan();
      String string0 = criterion_LengthIsLessThan0.toSQL();
      assertEquals("r.null < null", string0);
      assertNotNull(string0);
  }

  @Test
  public void test63()  throws Throwable  {
      Criterion.StringContains criterion_StringContains0 = new Criterion.StringContains();
      String string0 = criterion_StringContains0.toString();
      assertEquals("null=*null*", string0);
      assertNotNull(string0);
  }

  @Test
  public void test64()  throws Throwable  {
      Criterion.StringContains criterion_StringContains0 = new Criterion.StringContains();
      String string0 = criterion_StringContains0.toSQL();
      assertNotNull(string0);
      assertEquals("m.null like '~null~'", string0);
  }

  @Test
  public void test65()  throws Throwable  {
      Criterion.DateIsAfter criterion_DateIsAfter0 = new Criterion.DateIsAfter();
      // Undeclared exception!
      try {
        criterion_DateIsAfter0.test((Object) "null<null", (Object) "");
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * java.lang.String cannot be cast to java.util.Date
         */
      }
  }

  @Test
  public void test66()  throws Throwable  {
      Criterion.DateIsAfter criterion_DateIsAfter0 = new Criterion.DateIsAfter();
      String string0 = criterion_DateIsAfter0.toSQL();
      assertEquals("???", string0);
  }

  @Test
  public void test67()  throws Throwable  {
      Criterion.DateIsAfter criterion_DateIsAfter0 = new Criterion.DateIsAfter();
      String string0 = criterion_DateIsAfter0.toString();
      assertEquals("null modified after null", string0);
      assertNotNull(string0);
  }

  @Test
  public void test68()  throws Throwable  {
      Criterion.NumberIsLessThan criterion_NumberIsLessThan0 = new Criterion.NumberIsLessThan();
      String string0 = criterion_NumberIsLessThan0.toSQL();
      assertNotNull(string0);
      assertEquals("m.null < null", string0);
  }

  @Test
  public void test69()  throws Throwable  {
      Criterion.NumberIsLessThan criterion_NumberIsLessThan0 = new Criterion.NumberIsLessThan();
      String string0 = criterion_NumberIsLessThan0.toString();
      assertEquals("null<null", string0);
      assertNotNull(string0);
  }

  @Test
  public void test70()  throws Throwable  {
      Criterion.StringEndsWith criterion_StringEndsWith0 = (Criterion.StringEndsWith)Criterion.makeCriterion(1, "ends with", "ends with", (Object) "null>null");
      assertEquals("ends with=*null>null", criterion_StringEndsWith0.toString());
  }

  @Test
  public void test71()  throws Throwable  {
      Criterion criterion0 = Criterion.makeCriterion((-154), "???", "???", (Object) "null modified before null");
      assertNull(criterion0);
  }

  @Test
  public void test72()  throws Throwable  {
      Criterion.StringContains criterion_StringContains0 = new Criterion.StringContains();
      boolean boolean0 = criterion_StringContains0.test((Object) "is before", (Object) "is less than");
      assertEquals(false, boolean0);
  }

  @Test
  public void test73()  throws Throwable  {
      Criterion.StringContains criterion_StringContains0 = new Criterion.StringContains();
      boolean boolean0 = criterion_StringContains0.test((Object) "null>null", (Object) "null>null");
      assertEquals(true, boolean0);
  }

  @Test
  public void test74()  throws Throwable  {
      Criterion.OneOfIsNot criterion_OneOfIsNot0 = new Criterion.OneOfIsNot();
      boolean boolean0 = criterion_OneOfIsNot0.test((Object) criterion_OneOfIsNot0, (Object) criterion_OneOfIsNot0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test75()  throws Throwable  {
      Criterion.OneOfIsNot criterion_OneOfIsNot0 = new Criterion.OneOfIsNot();
      Criterion.DateIsAfter criterion_DateIsAfter0 = new Criterion.DateIsAfter();
      boolean boolean0 = criterion_OneOfIsNot0.test((Object) "??", (Object) criterion_DateIsAfter0);
      assertEquals(true, boolean0);
  }
}
