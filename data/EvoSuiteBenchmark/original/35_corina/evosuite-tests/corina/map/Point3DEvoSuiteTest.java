/*
 * This file was automatically generated by EvoSuite
 */

package corina.map;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import corina.map.Point3D;
import corina.site.Location;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class Point3DEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Point3D point3D0 = new Point3D();
      float float0 = point3D0.getY();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test1()  throws Throwable  {
      Point3D point3D0 = new Point3D();
      point3D0.setZ(0.0F);
      assertEquals(0.0F, point3D0.getZ(), 0.01F);
  }

  @Test
  public void test2()  throws Throwable  {
      Point3D point3D0 = new Point3D();
      float float0 = point3D0.getX();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test3()  throws Throwable  {
      Point3D point3D0 = new Point3D();
      float float0 = point3D0.distanceTo(point3D0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test4()  throws Throwable  {
      Point3D point3D0 = new Point3D();
      point3D0.setX(180.0F);
      assertEquals(180.0F, point3D0.getX(), 0.01F);
  }

  @Test
  public void test5()  throws Throwable  {
      Point3D point3D0 = new Point3D();
      float float0 = point3D0.getZ();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test6()  throws Throwable  {
      Point3D point3D0 = new Point3D();
      Location location0 = new Location();
      point3D0.setFromLocation(location0);
      assertEquals(-0.0F, point3D0.getX(), 0.01F);
      assertEquals(6380.0F, point3D0.getZ(), 0.01F);
  }

  @Test
  public void test7()  throws Throwable  {
      Point3D point3D0 = new Point3D();
      point3D0.scale(0.0F);
      assertEquals(0.0F, point3D0.getX(), 0.01F);
      assertEquals(0.0F, point3D0.getY(), 0.01F);
      assertEquals(0.0F, point3D0.getZ(), 0.01F);
  }

  @Test
  public void test8()  throws Throwable  {
      Point3D point3D0 = new Point3D();
      point3D0.setY(797.3006F);
      assertEquals(797.3006F, point3D0.getY(), 0.01F);
  }
}
