/*
 * This file was automatically generated by EvoSuite
 */

package corina.map;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import corina.map.PngEncoder;
import java.awt.Image;
import java.awt.image.ColorModel;
import java.awt.image.DirectColorModel;
import java.awt.image.ImageProducer;
import java.awt.image.MemoryImageSource;
import java.util.Hashtable;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JRadioButtonMenuItem;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PngEncoderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ImageIcon imageIcon0 = new ImageIcon("3<Y\"C[,qoqCw");
      Image image0 = imageIcon0.getImage();
      PngEncoder pngEncoder0 = new PngEncoder(image0, true, (-16));
      byte[] byteArray0 = pngEncoder0.pngEncode();
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = new byte[8];
      // Undeclared exception!
      try {
        pngEncoder0.writeBytes(byteArray1, 8934, (int) (byte) (-74));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem(">GsJW9=&hM'", (Icon) null, false);
      DirectColorModel directColorModel0 = (DirectColorModel)ColorModel.getRGBdefault();
      int[] intArray0 = new int[2];
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      MemoryImageSource memoryImageSource0 = new MemoryImageSource(1, 1, (ColorModel) directColorModel0, intArray0, 0, 1, (Hashtable<?, ?>) hashtable0);
      Image image0 = jRadioButtonMenuItem0.createImage((ImageProducer) memoryImageSource0);
      PngEncoder pngEncoder0 = new PngEncoder(image0, false);
      assertEquals(0, pngEncoder0.getFilter());
      assertEquals(false, pngEncoder0.getEncodeAlpha());
      assertEquals(0, pngEncoder0.getCompressionLevel());
  }

  @Test
  public void test2()  throws Throwable  {
      PngEncoder pngEncoder0 = new PngEncoder();
      // Undeclared exception!
      try {
        pngEncoder0.writeInt2(0, 1473);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      PngEncoder pngEncoder0 = new PngEncoder((Image) null);
      boolean boolean0 = pngEncoder0.getEncodeAlpha();
      assertEquals(0, pngEncoder0.getCompressionLevel());
      assertEquals(0, pngEncoder0.getFilter());
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      PngEncoder pngEncoder0 = new PngEncoder();
      int int0 = pngEncoder0.getCompressionLevel();
      assertEquals(false, pngEncoder0.getEncodeAlpha());
      assertEquals(0, int0);
      assertEquals(0, pngEncoder0.getFilter());
  }

  @Test
  public void test5()  throws Throwable  {
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem(">GsJW9=&hM'", (Icon) null, false);
      DirectColorModel directColorModel0 = (DirectColorModel)ColorModel.getRGBdefault();
      int[] intArray0 = new int[2];
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      MemoryImageSource memoryImageSource0 = new MemoryImageSource(1, 1, (ColorModel) directColorModel0, intArray0, 0, 1, (Hashtable<?, ?>) hashtable0);
      Image image0 = jRadioButtonMenuItem0.createImage((ImageProducer) memoryImageSource0);
      PngEncoder pngEncoder0 = new PngEncoder(image0);
      pngEncoder0.setEncodeAlpha(true);
      byte[] byteArray0 = pngEncoder0.pngEncode();
      assertEquals(0, pngEncoder0.getFilter());
      assertEquals(0, pngEncoder0.getCompressionLevel());
      assertNotNull(byteArray0);
  }

  @Test
  public void test6()  throws Throwable  {
      PngEncoder pngEncoder0 = new PngEncoder();
      int int0 = pngEncoder0.getFilter();
      assertEquals(false, pngEncoder0.getEncodeAlpha());
      assertEquals(0, pngEncoder0.getCompressionLevel());
      assertEquals(0, int0);
  }

  @Test
  public void test7()  throws Throwable  {
      PngEncoder pngEncoder0 = new PngEncoder();
      pngEncoder0.setImage((Image) null);
      assertEquals(false, pngEncoder0.getEncodeAlpha());
      assertEquals(0, pngEncoder0.getFilter());
      assertEquals(0, pngEncoder0.getCompressionLevel());
  }

  @Test
  public void test8()  throws Throwable  {
      PngEncoder pngEncoder0 = new PngEncoder((Image) null, true, (-1093), (-1093));
      assertEquals(true, pngEncoder0.getEncodeAlpha());
      assertEquals(0, pngEncoder0.getCompressionLevel());
      assertEquals(-1093, pngEncoder0.getFilter());
  }

  @Test
  public void test9()  throws Throwable  {
      PngEncoder pngEncoder0 = new PngEncoder((Image) null, true, 1014, 1014);
      pngEncoder0.setCompressionLevel((-1619));
      assertEquals(0, pngEncoder0.getFilter());
      assertEquals(true, pngEncoder0.getEncodeAlpha());
      assertEquals(0, pngEncoder0.getCompressionLevel());
  }

  @Test
  public void test10()  throws Throwable  {
      PngEncoder pngEncoder0 = new PngEncoder();
      pngEncoder0.pngEncode();
      assertEquals(0, pngEncoder0.getFilter());
      assertEquals(0, pngEncoder0.getCompressionLevel());
  }

  @Test
  public void test11()  throws Throwable  {
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem(">GsJW9=&hM'", (Icon) null, false);
      DirectColorModel directColorModel0 = (DirectColorModel)ColorModel.getRGBdefault();
      int[] intArray0 = new int[8];
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      MemoryImageSource memoryImageSource0 = new MemoryImageSource(26, 26, (ColorModel) directColorModel0, intArray0, 26, 26, (Hashtable<?, ?>) hashtable0);
      Image image0 = jRadioButtonMenuItem0.createImage((ImageProducer) memoryImageSource0);
      PngEncoder pngEncoder0 = new PngEncoder(image0);
      byte[] byteArray0 = pngEncoder0.pngEncode();
      assertEquals(0, pngEncoder0.getFilter());
      assertNull(byteArray0);
      assertEquals(0, pngEncoder0.getCompressionLevel());
  }

  @Test
  public void test12()  throws Throwable  {
      PngEncoder pngEncoder0 = new PngEncoder((Image) null);
      pngEncoder0.setCompressionLevel(656);
      assertEquals(0, pngEncoder0.getFilter());
      assertEquals(false, pngEncoder0.getEncodeAlpha());
      assertEquals(0, pngEncoder0.getCompressionLevel());
  }

  @Test
  public void test13()  throws Throwable  {
      PngEncoder pngEncoder0 = new PngEncoder();
      pngEncoder0.setCompressionLevel(0);
      assertEquals(0, pngEncoder0.getCompressionLevel());
      assertEquals(false, pngEncoder0.getEncodeAlpha());
      assertEquals(0, pngEncoder0.getFilter());
  }

  @Test
  public void test14()  throws Throwable  {
      PngEncoder pngEncoder0 = new PngEncoder((Image) null);
      byte[] byteArray0 = new byte[7];
      pngEncoder0.filterUp(byteArray0, (int) (byte)0, (int) (byte)0);
      assertEquals(0, pngEncoder0.getFilter());
      assertEquals(0, pngEncoder0.getCompressionLevel());
      assertEquals(false, pngEncoder0.getEncodeAlpha());
  }

  @Test
  public void test15()  throws Throwable  {
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem(">GsJW9=&hM'", (Icon) null, false);
      DirectColorModel directColorModel0 = (DirectColorModel)ColorModel.getRGBdefault();
      int[] intArray0 = new int[2];
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      MemoryImageSource memoryImageSource0 = new MemoryImageSource(1, 1, (ColorModel) directColorModel0, intArray0, 0, 1, (Hashtable<?, ?>) hashtable0);
      Image image0 = jRadioButtonMenuItem0.createImage((ImageProducer) memoryImageSource0);
      PngEncoder pngEncoder0 = new PngEncoder(image0);
      pngEncoder0.pngEncode();
      pngEncoder0.setFilter(1);
      boolean boolean0 = pngEncoder0.writeImageData();
      assertEquals(1, pngEncoder0.getFilter());
      assertEquals(true, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem(">GsJW9=&hM'", (Icon) null, false);
      DirectColorModel directColorModel0 = (DirectColorModel)ColorModel.getRGBdefault();
      int[] intArray0 = new int[2];
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      MemoryImageSource memoryImageSource0 = new MemoryImageSource(1, 1, (ColorModel) directColorModel0, intArray0, 0, 1, (Hashtable<?, ?>) hashtable0);
      Image image0 = jRadioButtonMenuItem0.createImage((ImageProducer) memoryImageSource0);
      PngEncoder pngEncoder0 = new PngEncoder(image0);
      pngEncoder0.pngEncode();
      pngEncoder0.setFilter((-371));
      pngEncoder0.writeImageData();
      assertEquals(-371, pngEncoder0.getFilter());
  }
}
