/*
 * This file was automatically generated by EvoSuite
 */

package corina.gui.layouts;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import corina.gui.layouts.ButtonLayout;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import javax.swing.JInternalFrame;
import javax.swing.JRootPane;
import javax.swing.JScrollPane;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ButtonLayoutEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ButtonLayout buttonLayout0 = new ButtonLayout();
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      buttonLayout0.addLayoutComponent("mousO=ele_.ased", (Component) jInternalFrame0);
      assertEquals(true, jInternalFrame0.isFocusCycleRoot());
  }

  @Test
  public void test1()  throws Throwable  {
      ButtonLayout buttonLayout0 = new ButtonLayout();
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      JInternalFrame.JDesktopIcon jInternalFrame_JDesktopIcon0 = jInternalFrame0.getDesktopIcon();
      Dimension dimension0 = buttonLayout0.minimumLayoutSize((Container) jInternalFrame_JDesktopIcon0);
      assertEquals("java.awt.Dimension[width=118,height=31]", dimension0.toString());
      assertNotNull(dimension0);
  }

  @Test
  public void test2()  throws Throwable  {
      ButtonLayout buttonLayout0 = new ButtonLayout();
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      JInternalFrame.JDesktopIcon jInternalFrame_JDesktopIcon0 = jInternalFrame0.getDesktopIcon();
      Dimension dimension0 = buttonLayout0.preferredLayoutSize((Container) jInternalFrame_JDesktopIcon0);
      assertEquals("java.awt.Dimension[width=118,height=31]", dimension0.toString());
      assertNotNull(dimension0);
  }

  @Test
  public void test3()  throws Throwable  {
      ButtonLayout buttonLayout0 = new ButtonLayout();
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      JInternalFrame.JDesktopIcon jInternalFrame_JDesktopIcon0 = jInternalFrame0.getDesktopIcon();
      buttonLayout0.removeLayoutComponent((Component) jInternalFrame_JDesktopIcon0);
      assertEquals(0, jInternalFrame_JDesktopIcon0.getDebugGraphicsOptions());
  }

  @Test
  public void test4()  throws Throwable  {
      ButtonLayout buttonLayout0 = new ButtonLayout();
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      JInternalFrame.JDesktopIcon jInternalFrame_JDesktopIcon0 = jInternalFrame0.getDesktopIcon();
      buttonLayout0.layoutContainer((Container) jInternalFrame_JDesktopIcon0);
      assertNull(jInternalFrame_JDesktopIcon0.getToolTipText());
  }

  @Test
  public void test5()  throws Throwable  {
      ButtonLayout buttonLayout0 = new ButtonLayout();
      JRootPane jRootPane0 = new JRootPane();
      buttonLayout0.layoutContainer((Container) jRootPane0);
      assertEquals(false, jRootPane0.isPaintingForPrint());
  }

  @Test
  public void test6()  throws Throwable  {
      ButtonLayout buttonLayout0 = new ButtonLayout();
      JScrollPane jScrollPane0 = new JScrollPane();
      buttonLayout0.layoutContainer((Container) jScrollPane0);
      assertEquals(true, jScrollPane0.isRequestFocusEnabled());
  }
}
