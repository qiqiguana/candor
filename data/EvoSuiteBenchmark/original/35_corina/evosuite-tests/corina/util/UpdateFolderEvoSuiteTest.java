/*
 * This file was automatically generated by EvoSuite
 */

package corina.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import corina.util.UpdateFolder;
import java.io.File;
import java.io.IOException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.runtime.System;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class UpdateFolderEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      File file0 = new File(",iUUVxdzm+ {i=cnnNo");
      UpdateFolder updateFolder0 = new UpdateFolder(file0, file0);
      assertNotNull(updateFolder0);
      
      updateFolder0.getCurrent();
      assertEquals(0, updateFolder0.getNumberDone());
  }

  @Test
  public void test1()  throws Throwable  {
      File file0 = new File("");
      UpdateFolder updateFolder0 = new UpdateFolder(file0, file0);
      assertNotNull(updateFolder0);
      
      updateFolder0.run();
      assertEquals(0, updateFolder0.getNumberDone());
  }

  @Test
  public void test2()  throws Throwable  {
      File file0 = new File("");
      UpdateFolder updateFolder0 = new UpdateFolder(file0, file0);
      assertNotNull(updateFolder0);
      
      int int0 = updateFolder0.getNumberDone();
      assertEquals(0, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      File file0 = new File("");
      UpdateFolder updateFolder0 = new UpdateFolder(file0, file0);
      assertNotNull(updateFolder0);
      
      int int0 = updateFolder0.estimateTimeRemaining(0);
      assertEquals(0, updateFolder0.getNumberDone());
      assertEquals((-1), int0);
  }

  @Test
  public void test4()  throws Throwable  {
      File file0 = new File("");
      File file1 = file0.getAbsoluteFile();
      UpdateFolder updateFolder0 = new UpdateFolder(file1, file1);
      assertNotNull(updateFolder0);
      
      updateFolder0.run();
      int int0 = updateFolder0.estimateTimeRemaining(0);
      assertEquals(116, updateFolder0.getNumberDone());
      assertEquals(0, int0);
  }

  @Test
  public void test5()  throws Throwable  {
      File file0 = new File("");
      File file1 = file0.getAbsoluteFile();
      System.setCurrentTimeMillis((long) (-1));
      UpdateFolder updateFolder0 = new UpdateFolder(file1, file1);
      assertNotNull(updateFolder0);
      
      updateFolder0.run();
      int int0 = updateFolder0.estimateTimeRemaining((-1));
      assertEquals(116, updateFolder0.getNumberDone());
      assertEquals((-1), int0);
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          File file0 = new File("SVGConverter.error.unable.to.create.output.dir");
          File file1 = file0.getCanonicalFile();
          File file2 = file1.getParentFile();
          UpdateFolder updateFolder0 = new UpdateFolder(file2, file1);
          assertNotNull(updateFolder0);
          
          // Undeclared exception!
          try {
            updateFolder0.run();
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission /mnt/fastdata/ac1gf/SF110/dist/35_corina/SVGConverter.error.unable.to.create.output.dir write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.mkdir(File.java:1155)
             * corina.util.UpdateFolder.update(UpdateFolder.java:90)
             * corina.util.UpdateFolder.run(UpdateFolder.java:28)
             * sun.reflect.GeneratedMethodAccessor82.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
      File file0 = new File("");
      File file1 = file0.getAbsoluteFile();
      UpdateFolder updateFolder0 = new UpdateFolder(file1, file1);
      assertNotNull(updateFolder0);
      
      updateFolder0.stop();
      updateFolder0.run();
      assertEquals(0, updateFolder0.getNumberDone());
  }

  @Test
  public void test8()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          File file0 = new File("");
          File file1 = file0.getCanonicalFile();
          File file2 = file1.getParentFile();
          UpdateFolder updateFolder0 = new UpdateFolder(file2, file1);
          assertNotNull(updateFolder0);
          
          // Undeclared exception!
          try {
            updateFolder0.run();
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission /mnt/fastdata/ac1gf/SF110/dist/35_corina/66_openjms write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.mkdir(File.java:1155)
             * corina.util.UpdateFolder.update(UpdateFolder.java:108)
             * corina.util.UpdateFolder.run(UpdateFolder.java:28)
             * sun.reflect.GeneratedMethodAccessor82.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test9()  throws Throwable  {
      File file0 = new File((File) null, "$8l?J");
      UpdateFolder updateFolder0 = new UpdateFolder(file0, file0);
      assertNotNull(updateFolder0);
      
      // Undeclared exception!
      try {
        updateFolder0.copy((File) null, file0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * name can't be null
         */
      }
  }
}
