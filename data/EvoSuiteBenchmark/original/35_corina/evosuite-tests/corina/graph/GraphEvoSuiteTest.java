/*
 * This file was automatically generated by EvoSuite
 */

package corina.graph;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import corina.Range;
import corina.Sample;
import corina.Year;
import corina.graph.CorinaGraphPlotter;
import corina.graph.Graph;
import corina.graph.Graphable;
import java.awt.Color;
import java.util.List;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class GraphEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Sample sample0 = new Sample();
      Graph graph0 = new Graph((Graphable) sample0);
      Range range0 = graph0.getRange();
      assertNotNull(range0);
      assertEquals(1, graph0.printerlineThickness);
      assertEquals("<graph scale=\"1.0\" xoffset=\"0\" yoffset=\"0\">null</graph>", graph0.toXML());
      assertEquals("(1001 - 1000, n=0)", range0.toStringWithSpan());
      assertEquals(1, graph0.lineThickness);
  }

  @Test
  public void test1()  throws Throwable  {
      Year year0 = Year.DEFAULT;
      Graph graph0 = new Graph((List) null, year0, "X-{<EAj&H!mf:");
      assertNotNull(graph0);
      
      Color color0 = Color.green;
      graph0.setColor(color0, color0);
      assertEquals(0, graph0.yoffset);
      assertEquals(1, graph0.lineThickness);
      assertEquals(1, graph0.printerlineThickness);
      assertEquals(0, graph0.xoffset);
      assertEquals(1.0F, graph0.scale, 0.01F);
  }

  @Test
  public void test2()  throws Throwable  {
      Sample sample0 = new Sample();
      Graph graph0 = new Graph((Graphable) sample0);
      graph0.left();
      assertEquals((-1), graph0.xoffset);
      assertEquals("<graph scale=\"1.0\" xoffset=\"-1\" yoffset=\"0\">null</graph>", graph0.toXML());
  }

  @Test
  public void test3()  throws Throwable  {
      Sample sample0 = new Sample();
      Graph graph0 = new Graph((Graphable) sample0);
      graph0.getAgent();
      assertEquals(1, graph0.printerlineThickness);
      assertEquals(1, graph0.lineThickness);
      assertEquals("<graph scale=\"1.0\" xoffset=\"0\" yoffset=\"0\">null</graph>", graph0.toXML());
  }

  @Test
  public void test4()  throws Throwable  {
      Sample sample0 = new Sample();
      Graph graph0 = new Graph((Graphable) sample0);
      graph0.setAgent((CorinaGraphPlotter) null);
      assertEquals("<graph scale=\"1.0\" xoffset=\"0\" yoffset=\"0\">null</graph>", graph0.toXML());
      assertEquals(1, graph0.printerlineThickness);
      assertEquals(1, graph0.lineThickness);
  }

  @Test
  public void test5()  throws Throwable  {
      Sample sample0 = new Sample();
      Graph graph0 = new Graph((Graphable) sample0);
      graph0.right();
      assertEquals(1, graph0.xoffset);
      assertEquals(1, graph0.printerlineThickness);
  }

  @Test
  public void test6()  throws Throwable  {
      Graph graph0 = new Graph((List) null, (Year) null, "");
      assertNotNull(graph0);
      
      graph0.slide(1);
      assertEquals(1, graph0.yoffset);
  }

  @Test
  public void test7()  throws Throwable  {
      Sample sample0 = new Sample();
      Graph graph0 = new Graph((Graphable) sample0);
      graph0.setGraphName("!Tdr)pX hU");
      assertEquals(1, graph0.printerlineThickness);
      assertEquals("<graph scale=\"1.0\" xoffset=\"0\" yoffset=\"0\">null</graph>", graph0.toXML());
      assertEquals(1, graph0.lineThickness);
  }

  @Test
  public void test8()  throws Throwable  {
      Year year0 = Year.DEFAULT;
      Graph graph0 = new Graph((List) null, year0, "X-{<EAj&H!mf:");
      assertNotNull(graph0);
      
      graph0.bigger();
      assertEquals(1.25F, graph0.scale, 0.01F);
  }

  @Test
  public void test9()  throws Throwable  {
      Sample sample0 = new Sample();
      Graph graph0 = new Graph((Graphable) sample0);
      graph0.smaller();
      assertEquals(0.8F, graph0.scale, 0.01F);
      assertEquals("<graph scale=\"0.8\" xoffset=\"0\" yoffset=\"0\">null</graph>", graph0.toXML());
  }

  @Test
  public void test10()  throws Throwable  {
      Sample sample0 = new Sample();
      Graph graph0 = new Graph((Graphable) sample0);
      String string0 = graph0.getGraphName();
      assertEquals("<graph scale=\"1.0\" xoffset=\"0\" yoffset=\"0\">null</graph>", graph0.toXML());
      assertEquals(1, graph0.lineThickness);
      assertNotNull(string0);
      assertEquals(1, graph0.printerlineThickness);
  }

  @Test
  public void test11()  throws Throwable  {
      Sample sample0 = new Sample();
      Graph graph0 = new Graph((Graphable) sample0);
      String string0 = graph0.toXML();
      assertEquals(1, graph0.lineThickness);
      assertEquals(1, graph0.printerlineThickness);
      assertEquals("<graph scale=\"1.0\" xoffset=\"0\" yoffset=\"0\">null</graph>", string0);
      assertNotNull(string0);
  }

  @Test
  public void test12()  throws Throwable  {
      Year year0 = Year.DEFAULT;
      Graph graph0 = new Graph((List) null, year0, "X-{<EAj&H!mf:");
      assertNotNull(graph0);
      
      String string0 = graph0.toXML();
      assertEquals(1, graph0.lineThickness);
      assertNotNull(string0);
      assertEquals("<!-- not a sample (X-{<EAj&H!mf:) -->", string0);
      assertEquals(1.0F, graph0.scale, 0.01F);
      assertEquals(0, graph0.xoffset);
      assertEquals(0, graph0.yoffset);
      assertEquals(1, graph0.printerlineThickness);
  }

  @Test
  public void test13()  throws Throwable  {
      Sample sample0 = new Sample();
      Graph graph0 = new Graph((Graphable) sample0);
      graph0.setColor((Color) null, false);
      assertEquals(1, graph0.printerlineThickness);
      assertEquals(1, graph0.lineThickness);
      assertEquals("<graph scale=\"1.0\" xoffset=\"0\" yoffset=\"0\">null</graph>", graph0.toXML());
  }

  @Test
  public void test14()  throws Throwable  {
      Year year0 = Year.DEFAULT;
      Graph graph0 = new Graph((List) null, year0, "X-{<EAj&H!mf:");
      assertNotNull(graph0);
      
      Color color0 = Color.green;
      graph0.setColor(color0, true);
      assertEquals(1.0F, graph0.scale, 0.01F);
      assertEquals(0, graph0.xoffset);
      assertEquals(0, graph0.yoffset);
      assertEquals(1, graph0.lineThickness);
      assertEquals(1, graph0.printerlineThickness);
  }

  @Test
  public void test15()  throws Throwable  {
      Sample sample0 = new Sample();
      Graph graph0 = new Graph((Graphable) sample0);
      graph0.getColor(false);
      assertEquals(1, graph0.lineThickness);
      assertEquals(1, graph0.printerlineThickness);
      assertEquals("<graph scale=\"1.0\" xoffset=\"0\" yoffset=\"0\">null</graph>", graph0.toXML());
  }

  @Test
  public void test16()  throws Throwable  {
      Sample sample0 = new Sample();
      Graph graph0 = new Graph((Graphable) sample0);
      graph0.getColor(true);
      assertEquals("<graph scale=\"1.0\" xoffset=\"0\" yoffset=\"0\">null</graph>", graph0.toXML());
      assertEquals(1, graph0.lineThickness);
      assertEquals(1, graph0.printerlineThickness);
  }

  @Test
  public void test17()  throws Throwable  {
      Sample sample0 = new Sample();
      Graph graph0 = new Graph((Graphable) sample0);
      graph0.setThickness(1, false);
      assertEquals("<graph scale=\"1.0\" xoffset=\"0\" yoffset=\"0\">null</graph>", graph0.toXML());
      assertEquals(1, graph0.lineThickness);
      assertEquals(1, graph0.printerlineThickness);
  }

  @Test
  public void test18()  throws Throwable  {
      Sample sample0 = new Sample();
      Graph graph0 = new Graph((Graphable) sample0);
      assertEquals(1, graph0.printerlineThickness);
      
      graph0.setThickness(0, true);
      assertEquals(0, graph0.printerlineThickness);
      assertEquals(1, graph0.lineThickness);
  }

  @Test
  public void test19()  throws Throwable  {
      Sample sample0 = new Sample();
      Graph graph0 = new Graph((Graphable) sample0);
      int int0 = graph0.getThickness(false);
      assertEquals(1, graph0.printerlineThickness);
      assertEquals(1, int0);
      assertEquals("<graph scale=\"1.0\" xoffset=\"0\" yoffset=\"0\">null</graph>", graph0.toXML());
  }

  @Test
  public void test20()  throws Throwable  {
      Sample sample0 = new Sample();
      Graph graph0 = new Graph((Graphable) sample0);
      int int0 = graph0.getThickness(true);
      assertEquals(1, int0);
      assertEquals("<graph scale=\"1.0\" xoffset=\"0\" yoffset=\"0\">null</graph>", graph0.toXML());
      assertEquals(1, graph0.lineThickness);
  }
}
