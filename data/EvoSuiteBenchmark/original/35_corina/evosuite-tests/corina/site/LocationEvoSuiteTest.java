/*
 * This file was automatically generated by EvoSuite
 */

package corina.site;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import corina.site.Location;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class LocationEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Location location0 = new Location();
      boolean boolean0 = location0.isNear(location0, (-1161));
      assertEquals(false, boolean0);
      assertEquals(0.0F, location0.getLatitudeAsDegrees(), 0.01F);
      assertEquals(0.0F, location0.getLongitudeAsDegrees(), 0.01F);
  }

  @Test
  public void test1()  throws Throwable  {
      Location location0 = new Location();
      Location.copy(location0, location0);
      assertEquals("+000000+0000000/", location0.toISO6709());
      assertEquals(0, location0.getLongitudeAsSeconds());
  }

  @Test
  public void test2()  throws Throwable  {
      Location location0 = new Location();
      int int0 = location0.hashCode();
      assertEquals(0, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      Location location0 = null;
      try {
        location0 = new Location("-0B1921-1531#11^/");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
        /*
         * don't know how to parse all ISO-6709 locations yet!
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      Location location0 = new Location();
      Location location1 = (Location)location0.clone();
      boolean boolean0 = location0.equals((Object) location1);
      assertEquals("0\u00B00'S 0\u00B00'W", location0.toString());
      assertNotSame(location0, location1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      Location location0 = new Location();
      location0.setLatitudeAsDegrees(710.79663F);
      String string0 = location0.getEasyString();
      assertEquals("+900000+0000000/", location0.toISO6709());
      assertEquals("90,0,N,0,0,W", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      Location location0 = new Location();
      location0.setLatitudeAsDegrees((-1782.8914F));
      Location location1 = (Location)location0.clone();
      Location location2 = new Location("90\u00B00'S 0\u00B09'W");
      boolean boolean0 = location2.equals((Object) location1);
      assertEquals(true, location0.valid());
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      Location location0 = new Location();
      location0.setLatitudeAsDegrees((-6.2398252F));
      boolean boolean0 = location0.valid();
      assertEquals("6\u00B014'S", location0.getLatitudeAsString());
      assertEquals(true, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      Location location0 = new Location();
      location0.setLongitudeAsDegrees((float) 0);
      assertEquals(false, location0.valid());
      assertEquals("0\u00B00'S 0\u00B00'W", location0.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      Location location0 = new Location();
      location0.setLongitudeAsDegrees((-1233.2363F));
      String string0 = location0.toISO6709();
      assertEquals(true, location0.valid());
      assertEquals("+000000-1531411/", string0);
  }

  @Test
  public void test10()  throws Throwable  {
      Location location0 = new Location();
      location0.setLatitudeAsSeconds((-1196));
      String string0 = location0.toISO6709();
      assertEquals("0\u00B019'S 0\u00B00'W", location0.toString());
      assertEquals("-001956+0000000/", string0);
  }

  @Test
  public void test11()  throws Throwable  {
      Location location0 = new Location();
      location0.setLatitudeAsSeconds((-648000));
      assertEquals((-90.0F), location0.getLatitudeAsDegrees(), 0.01F);
      assertEquals("-900000+0000000/", location0.toISO6709());
  }

  @Test
  public void test12()  throws Throwable  {
      Location location0 = new Location();
      location0.setLatitudeAsSeconds(647998);
      assertEquals("+900000+0000000/", location0.toISO6709());
      assertEquals("90\u00B00'N 0\u00B00'W", location0.toString());
  }

  @Test
  public void test13()  throws Throwable  {
      Location location0 = new Location("-001956+0000000/");
      assertNotNull(location0);
      assertEquals("-001956+0000000/", location0.toISO6709());
  }

  @Test
  public void test14()  throws Throwable  {
      Location location0 = null;
      try {
        location0 = new Location("N");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
        /*
         * bad number of terms in location!
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      Location location0 = new Location("90\u00B00'S 0\u00B09'W");
      assertNotNull(location0);
      assertEquals("-900000-0000900/", location0.toISO6709());
  }

  @Test
  public void test16()  throws Throwable  {
      Location location0 = null;
      try {
        location0 = new Location("0,0,S,180,0,E");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
        /*
         * bad number of terms in location!
         */
      }
  }

  @Test
  public void test17()  throws Throwable  {
      Location location0 = new Location("+000000-1531411/");
      assertEquals("+000000-1531411/", location0.toISO6709());
      assertNotNull(location0);
  }

  @Test
  public void test18()  throws Throwable  {
      Location location0 = new Location();
      String string0 = location0.getEasyString();
      assertNotNull(string0);
      assertEquals("0,0,S,0,0,W", string0);
      assertEquals("+000000+0000000/", location0.toISO6709());
  }

  @Test
  public void test19()  throws Throwable  {
      Location location0 = new Location();
      location0.setLongitudeAsDegrees(180.0F);
      String string0 = location0.getEasyString();
      assertEquals(648000, location0.getLongitudeAsSeconds());
      assertEquals("0,0,S,180,0,E", string0);
  }

  @Test
  public void test20()  throws Throwable  {
      Location location0 = new Location();
      location0.setLatitudeAsDegrees(710.79663F);
      String string0 = location0.toString();
      assertEquals(90.0F, location0.getLatitudeAsDegrees(), 0.01F);
      assertEquals("90\u00B00'N 0\u00B00'W", string0);
  }

  @Test
  public void test21()  throws Throwable  {
      Location location0 = new Location();
      Location location1 = new Location("-0\u00B00'S 180\u00B00'E");
      assertNotNull(location1);
      
      Location location2 = Location.midpoint(location0, location1);
      assertNotNull(location2);
      
      String string0 = location2.toString();
      assertNotNull(string0);
      assertEquals(0, location1.getLatitudeAsSeconds());
      assertEquals(90.0F, location2.getLongitudeAsDegrees(), 0.01F);
      assertEquals("0\u00B00'S 90\u00B00'E", string0);
  }

  @Test
  public void test22()  throws Throwable  {
      Location location0 = new Location();
      String string0 = location0.toISO6709();
      assertNotNull(string0);
      assertEquals("+000000+0000000/", string0);
  }

  @Test
  public void test23()  throws Throwable  {
      Location location0 = new Location();
      boolean boolean0 = location0.equals((Object) "0\u00B00'W");
      assertEquals(false, boolean0);
      assertEquals("+000000+0000000/", location0.toISO6709());
  }

  @Test
  public void test24()  throws Throwable  {
      Location location0 = new Location();
      Location location1 = (Location)location0.clone();
      location0.setLatitudeAsDegrees(710.79663F);
      boolean boolean0 = location0.equals((Object) location1);
      assertEquals("+900000+0000000/", location0.toISO6709());
      assertEquals(false, boolean0);
  }

  @Test
  public void test25()  throws Throwable  {
      Location location0 = new Location();
      boolean boolean0 = location0.isNear((Location) null, (-648000));
      assertEquals(false, boolean0);
      assertEquals("0\u00B00'S 0\u00B00'W", location0.toString());
  }

  @Test
  public void test26()  throws Throwable  {
      Location location0 = new Location();
      boolean boolean0 = location0.isNear(location0, 0);
      assertEquals(true, boolean0);
      assertEquals(0.0F, location0.getLatitudeAsDegrees(), 0.01F);
      assertEquals(0.0F, location0.getLongitudeAsDegrees(), 0.01F);
  }

  @Test
  public void test27()  throws Throwable  {
      Location location0 = new Location();
      Location location1 = Location.midpoint(location0, location0);
      assertNotSame(location1, location0);
      assertEquals(0.0F, location0.getLongitudeAsDegrees(), 0.01F);
      assertEquals(false, location1.valid());
      assertNotNull(location1);
  }

  @Test
  public void test28()  throws Throwable  {
      Location location0 = new Location();
      boolean boolean0 = location0.valid();
      assertEquals(false, boolean0);
  }

  @Test
  public void test29()  throws Throwable  {
      Location location0 = new Location();
      location0.setLongitudeAsDegrees((-1233.2363F));
      boolean boolean0 = location0.valid();
      assertEquals("0,0,S,153,14,W", location0.getEasyString());
      assertEquals(true, boolean0);
  }
}
