/*
  strategy:
  -- write gui layouts as scheme sexps

  -- write a scheme program to convert the sexps to java

  -- translate and compile them from ant
  (no runtime performance penalty)

  syntax:
  -- attributes are followed by a colon, like "title:"

  -- if one of the first 2 args is a string, that's the
  title

  -- if one of the first 2 args is a symbol, that's
  the id

  -- (where's the output go?  in the toplevel symbol!)
*/

/*
  example: input =

  (define ok-cancel
    (panel layout: buttons
           (button "cancel")
           (button ok "ok")))

  (define content ...)

  (dialog redate_dialog "Redate Sample"
          resizable: #f
          (panel layout: border
	  ()
	  () (content) ()
	  ok-cancel))

   output =
*/

// (this is messy, but i never have to look at it --
// note that it's 3x as long as the scheme)
class redate_dialog extends JDialog {
    JButton ok;
    public redate_dialog() {
	setTitle("Redate Sample");

	JPanel ok_cancel = new JPanel();
	ok_cancel.setLayout(new ButtonLayout());
	{
	    JButton tmp = new JButton();
	    tmp.setText("cancel");
	    ok_cancel.add(tmp);
	}
	{
	    JButton ok = new JButton();
	    ok.setText("ok");
	    ok_cancel.add(ok);
	}

	JPanel tmp = new JPanel();
	tmp.setLayout(new BorderLayout())
	setContentPane(tmp);

	tmp.add(content, BorderLayout.CENTER);
	tmp.add(ok_cancel, BorderLayout.CENTER);

	pack();
	setResizable(false);
	// can't show() here, no listeners yet
    }
}

// and to use it:

// ...
redate_dialog d = new redate_dialog();
// -- add listeners, e.g., for d.ok
// -- set defaults, e.g., text on d.field1
d.show();
// ...
