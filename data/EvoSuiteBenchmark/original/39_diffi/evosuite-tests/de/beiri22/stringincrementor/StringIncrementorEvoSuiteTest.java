/*
 * This file was automatically generated by EvoSuite
 */

package de.beiri22.stringincrementor;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import de.beiri22.stringincrementor.StringIncrementor;
import de.beiri22.stringincrementor.relativestring.RelativeString;
import de.beiri22.stringincrementor.relativestring.StringLink;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class StringIncrementorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      RelativeString relativeString0 = StringIncrementor.diff("1p?^D2nyAYgC`", "1p?^D2nyAYgC`1p?^D2nyAYgC`");
      assertNotNull(relativeString0);
      assertEquals(2, relativeString0.linksCount());
  }

  @Test
  public void test1()  throws Throwable  {
      RelativeString relativeString0 = StringIncrementor.diff("1p?^D2nyAYgC`", "1p?^D2nyAYgC`", true);
      assertNotNull(relativeString0);
      
      String string0 = StringIncrementor.patch("1p?^D2nyAYgC`", relativeString0);
      assertNotNull(string0);
      assertEquals("1p?^D2nyAYgC`", string0);
      assertEquals(1, relativeString0.linksCount());
  }

  @Test
  public void test2()  throws Throwable  {
      StringIncrementor stringIncrementor0 = new StringIncrementor();
      assertNotNull(stringIncrementor0);
  }

  @Test
  public void test3()  throws Throwable  {
      RelativeString relativeString0 = StringIncrementor.diff("k@xWQ i17:2)qZyrbx", "Q.x6sb\"=OXSvoDx", false);
      assertEquals(0, relativeString0.linksCount());
      assertNotNull(relativeString0);
  }

  @Test
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try {
        StringIncrementor.diff("", "]VN%je<iGdlxyz)'2", true);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      RelativeString relativeString0 = StringIncrementor.diff("k@xWQ i17:2)qZyrbx", "k@xWQ i17:2)qZyrbx");
      assertEquals("", relativeString0.getAbsolute());
      assertNotNull(relativeString0);
  }

  @Test
  public void test6()  throws Throwable  {
      RelativeString relativeString0 = new RelativeString();
      StringLink stringLink0 = new StringLink(0, 22, 22);
      relativeString0.addLink(stringLink0);
      // Undeclared exception!
      try {
        StringIncrementor.patch("7eF", relativeString0, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
        /*
         * String index out of range: 22
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      RelativeString relativeString0 = new RelativeString();
      StringLink stringLink0 = new StringLink(0, 8, 8);
      relativeString0.addLink(stringLink0);
      // Undeclared exception!
      try {
        StringIncrementor.patch("x+NWx2", relativeString0, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
        /*
         * String index out of range: 8
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      RelativeString relativeString0 = StringIncrementor.diff("1p?^D2nyAYgC`", "1p?^D2nyAYgC`", true);
      assertNotNull(relativeString0);
      
      String string0 = StringIncrementor.patch("1p?^D2nyAYgC`", relativeString0, true);
      assertEquals("1p?^D2nyAYgC`", string0);
      assertNotNull(string0);
      assertEquals("", relativeString0.getAbsolute());
  }
}
