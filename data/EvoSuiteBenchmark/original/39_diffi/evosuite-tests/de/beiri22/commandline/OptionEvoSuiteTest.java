/*
 * This file was automatically generated by EvoSuite
 */

package de.beiri22.commandline;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import de.beiri22.commandline.Option;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class OptionEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Option option0 = new Option("", "-");
      String string0 = option0.getBeschriebung();
      assertEquals(false, option0.isIsSet());
      assertNotNull(string0);
      assertEquals("-", string0);
      assertEquals(false, option0.isHasArg());
      assertEquals("", option0.getDelim());
      assertEquals("", option0.getName());
      assertEquals("", option0.getDefaultv());
  }

  @Test
  public void test1()  throws Throwable  {
      Option option0 = new Option("", "-");
      String string0 = option0.getDefaultv();
      assertEquals("-", option0.getBeschriebung());
      assertEquals("", option0.getDelim());
      assertEquals(false, option0.isIsSet());
      assertEquals("", string0);
      assertEquals("", option0.getName());
      assertNotNull(string0);
      assertEquals(false, option0.isHasArg());
  }

  @Test
  public void test2()  throws Throwable  {
      Option option0 = new Option("", "-");
      boolean boolean0 = option0.isIsSet();
      assertEquals("", option0.getDelim());
      assertEquals(false, option0.isHasArg());
      assertEquals("-", option0.getBeschriebung());
      assertEquals("", option0.getDefaultv());
      assertEquals("", option0.getName());
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      Option option0 = new Option("", "#LSg=", true, "", "");
      boolean boolean0 = option0.isHasArg();
      assertEquals("", option0.getName());
      assertEquals(true, boolean0);
      assertEquals("", option0.getDelim());
      assertEquals("#LSg=", option0.getBeschriebung());
      assertEquals(false, option0.isIsSet());
      assertEquals("", option0.getDefaultv());
  }

  @Test
  public void test4()  throws Throwable  {
      Option option0 = new Option("h$*hrL8:5Eq $wCg#k", "h$*hrL8:5Eq $wCg#k");
      String string0 = option0.getName();
      assertEquals(false, option0.isIsSet());
      assertNotNull(string0);
      assertEquals("", option0.getDefaultv());
      assertEquals("", option0.getDelim());
      assertEquals("h$*hrL8:5Eq $wCg#k", option0.getBeschriebung());
      assertEquals(false, option0.isHasArg());
      assertEquals("h$*hrL8:5Eq $wCg#k", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      Option option0 = new Option("", "-");
      String string0 = option0.getDelim();
      assertNotNull(string0);
      assertEquals(false, option0.isHasArg());
      assertEquals("", option0.getDefaultv());
      assertEquals("", string0);
      assertEquals(false, option0.isIsSet());
      assertEquals("-", option0.getBeschriebung());
      assertEquals("", option0.getName());
  }

  @Test
  public void test6()  throws Throwable  {
      Option option0 = new Option("", true, "", "");
      // Undeclared exception!
      try {
        option0.getValue();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Option is not set.
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      Option option0 = new Option("", "");
      // Undeclared exception!
      try {
        option0.getValue();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Option has no argument.
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      Option option0 = new Option("", true, "", "");
      assertEquals(false, option0.isIsSet());
      
      option0.parse("");
      option0.getValue();
      assertEquals(true, option0.isIsSet());
      assertEquals(true, option0.isHasArg());
  }

  @Test
  public void test9()  throws Throwable  {
      Option option0 = new Option("'P?*%)(");
      boolean boolean0 = option0.is("XGFy");
      assertEquals("", option0.getDefaultv());
      assertEquals("", option0.getDelim());
      assertEquals(false, boolean0);
      assertEquals(false, option0.isIsSet());
      assertEquals("", option0.getBeschriebung());
      assertEquals(false, option0.isHasArg());
  }

  @Test
  public void test10()  throws Throwable  {
      Option option0 = new Option("", "#LSg=", true, "", "");
      boolean boolean0 = option0.is("#LSg=");
      assertEquals("", option0.getDelim());
      assertEquals(true, boolean0);
      assertEquals("#LSg=", option0.getBeschriebung());
      assertEquals(true, option0.isHasArg());
      assertEquals("", option0.getDefaultv());
  }

  @Test
  public void test11()  throws Throwable  {
      Option option0 = new Option("", "-");
      assertEquals(false, option0.isIsSet());
      
      option0.parse("");
      boolean boolean0 = option0.is("");
      assertEquals(true, option0.isIsSet());
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      Option option0 = new Option("4T^fj+H;0)RS", true, "4T^fj+H;0)RS", "4T^fj+H;0)RS");
      assertEquals(false, option0.isIsSet());
      
      // Undeclared exception!
      try {
        option0.parse("4T^fj+H;0)RS");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
        /*
         * String index out of range: -14
         */
      }
  }
}
