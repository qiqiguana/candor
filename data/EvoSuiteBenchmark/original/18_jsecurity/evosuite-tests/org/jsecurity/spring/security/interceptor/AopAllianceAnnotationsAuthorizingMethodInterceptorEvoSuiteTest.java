/*
 * This file was automatically generated by EvoSuite
 */

package org.jsecurity.spring.security.interceptor;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Collection;
import java.util.LinkedList;
import org.aopalliance.intercept.MethodInvocation;
import org.jsecurity.authz.aop.AuthorizingAnnotationMethodInterceptor;
import org.jsecurity.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class AopAllianceAnnotationsAuthorizingMethodInterceptorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      AopAllianceAnnotationsAuthorizingMethodInterceptor aopAllianceAnnotationsAuthorizingMethodInterceptor0 = new AopAllianceAnnotationsAuthorizingMethodInterceptor();
      try {
        aopAllianceAnnotationsAuthorizingMethodInterceptor0.continueInvocation((Object) aopAllianceAnnotationsAuthorizingMethodInterceptor0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * org.jsecurity.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor cannot be cast to org.aopalliance.intercept.MethodInvocation
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      AopAllianceAnnotationsAuthorizingMethodInterceptor aopAllianceAnnotationsAuthorizingMethodInterceptor0 = new AopAllianceAnnotationsAuthorizingMethodInterceptor();
      try {
        aopAllianceAnnotationsAuthorizingMethodInterceptor0.invoke((MethodInvocation) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      AopAllianceAnnotationsAuthorizingMethodInterceptor aopAllianceAnnotationsAuthorizingMethodInterceptor0 = new AopAllianceAnnotationsAuthorizingMethodInterceptor();
      LinkedList<AuthorizingAnnotationMethodInterceptor> linkedList0 = new LinkedList<AuthorizingAnnotationMethodInterceptor>();
      aopAllianceAnnotationsAuthorizingMethodInterceptor0.setMethodInterceptors((Collection<AuthorizingAnnotationMethodInterceptor>) linkedList0);
      try {
        aopAllianceAnnotationsAuthorizingMethodInterceptor0.invoke((MethodInvocation) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
