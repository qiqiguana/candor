/*
 * This file was automatically generated by EvoSuite
 */

package org.jsecurity.cache;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Set;
import org.jsecurity.cache.CacheException;
import org.jsecurity.cache.HashtableCache;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class HashtableCacheEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      HashtableCache hashtableCache0 = new HashtableCache("i1v");
      hashtableCache0.clear();
      assertEquals(0, hashtableCache0.size());
  }

  @Test
  public void test1()  throws Throwable  {
      HashtableCache hashtableCache0 = new HashtableCache("i1v");
      int int0 = hashtableCache0.size();
      assertEquals(0, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      HashtableCache hashtableCache0 = new HashtableCache("#^oz[-uRZV(&");
      Object object0 = hashtableCache0.get((Object) "#^oz[-uRZV(&");
      assertNull(object0);
  }

  @Test
  public void test3()  throws Throwable  {
      HashtableCache hashtableCache0 = new HashtableCache("#^oz[-uRZV(&");
      // Undeclared exception!
      try {
        hashtableCache0.remove((Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      HashtableCache hashtableCache0 = new HashtableCache("#^oz[-uRZV(&");
      String string0 = hashtableCache0.toString();
      assertEquals("HashtableCache [#^oz[-uRZV(&]", string0);
      assertNotNull(string0);
  }

  @Test
  public void test5()  throws Throwable  {
      HashtableCache hashtableCache0 = new HashtableCache("#^oz[-uRZV(&");
      hashtableCache0.put((Object) "HashtableCache [#^oz[-uRZV(&]", (Object) "HashtableCache [#^oz[-uRZV(&]");
      Set<Object> set0 = hashtableCache0.keys();
      assertEquals(1, hashtableCache0.size());
      assertEquals(false, set0.isEmpty());
  }

  @Test
  public void test6()  throws Throwable  {
      HashtableCache hashtableCache0 = new HashtableCache("i1v");
      Set<Object> set0 = hashtableCache0.keys();
      assertEquals(0, set0.size());
  }

  @Test
  public void test7()  throws Throwable  {
      HashtableCache hashtableCache0 = new HashtableCache("i1v");
      Set<Object> set0 = hashtableCache0.values();
      assertEquals(0, set0.size());
  }

  @Test
  public void test8()  throws Throwable  {
      HashtableCache hashtableCache0 = new HashtableCache("#^oz[-uRZV(&");
      hashtableCache0.put((Object) "HashtableCache [#^oz[-uRZV(&]", (Object) "HashtableCache [#^oz[-uRZV(&]");
      hashtableCache0.values();
      assertEquals(1, hashtableCache0.size());
  }
}
