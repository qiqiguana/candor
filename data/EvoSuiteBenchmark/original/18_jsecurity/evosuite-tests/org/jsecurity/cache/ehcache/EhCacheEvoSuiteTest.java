/*
 * This file was automatically generated by EvoSuite
 */

package org.jsecurity.cache.ehcache;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import net.sf.ehcache.Cache;
import net.sf.ehcache.Element;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.jsecurity.cache.CacheException;
import org.jsecurity.cache.ehcache.EhCache;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class EhCacheEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      Cache cache0 = new Cache("# s", 0, false, false, (long) 0, (long) 0);
      EhCache ehCache0 = new EhCache(cache0);
      // Undeclared exception!
      try {
        ehCache0.size();
        fail("Expecting exception: CacheException");
      } catch(CacheException e) {
        /*
         * java.lang.IllegalStateException: The # s Cache is not alive.
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      Cache cache0 = new Cache("u5)YQ.LTf;>S28h", (-1578), true, true, (long) (-1578), (long) (-1578));
      EhCache ehCache0 = new EhCache(cache0);
      long long0 = ehCache0.getMemoryUsage();
      assertEquals("localhost/127.0.0.1-50065caa:13fa0c76ea4:5e18", cache0.getGuid());
      assertEquals((-1L), long0);
  }

  @Test
  public void test2()  throws Throwable  {
      Cache cache0 = new Cache("\";r!]4GX[:", 3, true, true, (long) 3, (long) 3);
      EhCache ehCache0 = new EhCache(cache0);
      String string0 = ehCache0.toString();
      assertEquals("localhost/127.0.0.1-50065caa:13fa0c76ea4:5e1f", cache0.getGuid());
      assertEquals("EhCache [\";r!]4GX[:]", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      Cache cache0 = new Cache("Z6", (-8), true, true, (long) (-8), (long) (-8));
      EhCache ehCache0 = new EhCache(cache0);
      // Undeclared exception!
      try {
        ehCache0.getMemoryStoreSize();
        fail("Expecting exception: CacheException");
      } catch(CacheException e) {
        /*
         * java.lang.IllegalStateException: The Z6 Cache is not alive.
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      Cache cache0 = new Cache("], Rderd class: [", (-1002), true, true, (long) (-1002), (long) (-1002), true, (long) (-1002));
      EhCache ehCache0 = new EhCache(cache0);
      // Undeclared exception!
      try {
        ehCache0.getDiskStoreSize();
        fail("Expecting exception: CacheException");
      } catch(CacheException e) {
        /*
         * java.lang.IllegalStateException: The ], Rderd class: [ Cache is not alive.
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      EhCache ehCache0 = null;
      try {
        ehCache0 = new EhCache((Cache) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Cache argument cannot be null.
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      Cache cache0 = new Cache("Z6", (-8), true, true, (long) (-8), (long) (-8));
      EhCache ehCache0 = new EhCache(cache0);
      ehCache0.get((Object) null);
      assertEquals("localhost/127.0.0.1-50065caa:13fa0c76ea4:5e31", cache0.getGuid());
  }

  @Test
  public void test7()  throws Throwable  {
      Cache cache0 = new Cache("G.fqY?", 0, false, false, (long) 0, (long) 0);
      cache0.initialise();
      EhCache ehCache0 = new EhCache(cache0);
      ehCache0.get((Object) "net.sf.ehcache.enableShutdownHook");
      assertEquals("[ name = G.fqY? status = STATUS_ALIVE eternal = false overflowToDisk = false maxElementsInMemory = 0 maxElementsOnDisk = 0 memoryStoreEvictionPolicy = LRU timeToLiveSeconds = 0 timeToIdleSeconds = 0 diskPersistent = false diskExpiryThreadIntervalSeconds = 120 cacheEventListeners:  hitCount = 0 memoryStoreHitCount = 0 diskStoreHitCount = 0 missCountNotFound = 1 missCountExpired = 0 ]", cache0.toString());
      assertEquals("localhost/127.0.0.1-50065caa:13fa0c76ea4:5e37", cache0.getGuid());
  }

  @Test
  public void test8()  throws Throwable  {
      Cache cache0 = new Cache("5", (-21), false, false, 11L, 11L, false, 11L);
      EhCache ehCache0 = new EhCache(cache0);
      try {
        ehCache0.put((Object) null, (Object) null);
        fail("Expecting exception: CacheException");
      } catch(CacheException e) {
        /*
         * java.lang.IllegalStateException: The 5 Cache is not alive.
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      Cache cache0 = new Cache("yJXK5jAbU", 0, true, true, (-23L), (-23L));
      EhCache ehCache0 = new EhCache(cache0);
      try {
        ehCache0.remove((Object) "0.0.0.0/0.0.0.0:0");
        fail("Expecting exception: CacheException");
      } catch(CacheException e) {
        /*
         * java.lang.IllegalStateException: The yJXK5jAbU Cache is not alive.
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      Cache cache0 = new Cache(",0u ~7i<F+HC1u5", 1012, true, true, (long) 1012, (long) 1012);
      EhCache ehCache0 = new EhCache(cache0);
      try {
        ehCache0.clear();
        fail("Expecting exception: CacheException");
      } catch(CacheException e) {
        /*
         * java.lang.IllegalStateException: The ,0u ~7i<F+HC1u5 Cache is not alive.
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Cache cache0 = new Cache("G.fqY?", 0, false, false, (long) 0, (long) 0);
      cache0.initialise();
      EhCache ehCache0 = new EhCache(cache0);
      ehCache0.keys();
      assertEquals("localhost/127.0.0.1-50065caa:13fa0c76ea4:5e5a", cache0.getGuid());
  }

  @Test
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          Cache cache0 = new Cache("G.fqYQ", 9, true, true, (long) 9, (long) 9);
          cache0.initialise();
          Element element0 = new Element((Object) 9, (Object) 9);
          cache0.put(element0);
          EhCache ehCache0 = new EhCache(cache0);
          ehCache0.keys();
          assertEquals("localhost/127.0.0.1-50065caa:13fa0c76ea4:5e64", cache0.getGuid());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test13()  throws Throwable  {
      Cache cache0 = new Cache("G.fqY?", 0, false, false, (long) 0, (long) 0);
      cache0.initialise();
      EhCache ehCache0 = new EhCache(cache0);
      ehCache0.values();
      assertEquals("localhost/127.0.0.1-50065caa:13fa0c76ea4:5e6e", cache0.getGuid());
  }

  @Test
  public void test14()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          Cache cache0 = new Cache("\";r!]4GX[:", 3, true, true, (long) 3, (long) 3);
          cache0.initialise();
          EhCache ehCache0 = new EhCache(cache0);
          Element element0 = new Element((Object) "default", (Object) "EhCache [\";r!]4GX[:]");
          cache0.put(element0);
          Set<Object> set0 = ehCache0.values();
          assertEquals(1, cache0.getHitCount());
          assertEquals(false, set0.isEmpty());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
