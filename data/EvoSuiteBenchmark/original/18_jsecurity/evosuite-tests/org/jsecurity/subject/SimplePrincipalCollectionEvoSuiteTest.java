/*
 * This file was automatically generated by EvoSuite
 */

package org.jsecurity.subject;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import org.jsecurity.subject.PrincipalCollection;
import org.jsecurity.subject.SimplePrincipalCollection;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SimplePrincipalCollectionEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection((Object) "[]", "[]");
      assertNotNull(simplePrincipalCollection0);
      
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection((Object) simplePrincipalCollection0, "[]");
      assertNotNull(simplePrincipalCollection1);
      
      Class<?> class0 = PrincipalCollection.class;
      Set<Set<String>> set0 = simplePrincipalCollection1.oneByType((Class<Set<Set<String>>>) class0);
      assertNotNull(set0);
      assertFalse(simplePrincipalCollection1.equals(simplePrincipalCollection0));
  }

  @Test
  public void test1()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      Collection<Object> collection0 = simplePrincipalCollection0.fromRealm("[]");
      SimplePrincipalCollection simplePrincipalCollection1 = null;
      try {
        simplePrincipalCollection1 = new SimplePrincipalCollection((Object) collection0, "[]");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * principals argument cannot be an empty collection.
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offerLast("$B#o");
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection((Collection) linkedList0, "$B#o");
      assertNotNull(simplePrincipalCollection0);
      
      simplePrincipalCollection0.getPrincipalsLazy("[$B#o]");
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection((PrincipalCollection) simplePrincipalCollection0);
      assertNotNull(simplePrincipalCollection1);
      assertEquals(false, simplePrincipalCollection1.isEmpty());
  }

  @Test
  public void test3()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offerLast("$B#o");
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection((Collection) linkedList0, "$B#o");
      assertNotNull(simplePrincipalCollection0);
      
      simplePrincipalCollection0.addAll((Collection) linkedList0, "$B#o");
      assertEquals(false, simplePrincipalCollection0.isEmpty());
  }

  @Test
  public void test4()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = null;
      try {
        simplePrincipalCollection0 = new SimplePrincipalCollection((Object) null, "principals argument cannot be null.");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * principal argument cannot be null.
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      Collection<Object> collection0 = simplePrincipalCollection0.fromRealm("[]");
      SimplePrincipalCollection simplePrincipalCollection1 = null;
      try {
        simplePrincipalCollection1 = new SimplePrincipalCollection((Collection) collection0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * realmName argument cannot be null.
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = null;
      try {
        simplePrincipalCollection0 = new SimplePrincipalCollection((Collection) null, "Mk,gfwR;aHiQ<&2Xv");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * principals argument cannot be null.
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection((PrincipalCollection) simplePrincipalCollection0);
      assertNotNull(simplePrincipalCollection1);
      
      simplePrincipalCollection1.getPrincipalsLazy("7xpc~>\"");
      boolean boolean0 = simplePrincipalCollection0.equals((Object) simplePrincipalCollection1);
      assertEquals(false, simplePrincipalCollection1.isEmpty());
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      Class<?> class0 = SimplePrincipalCollection.class;
      Set<Set<String>> set0 = simplePrincipalCollection0.oneByType((Class<Set<Set<String>>>) class0);
      assertNull(set0);
  }

  @Test
  public void test9()  throws Throwable  {
      Class<?> class0 = SimplePrincipalCollection.class;
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection((Object) "[]", "[]");
      assertNotNull(simplePrincipalCollection0);
      
      simplePrincipalCollection0.oneByType((Class<Integer>) class0);
      assertEquals(false, simplePrincipalCollection0.isEmpty());
  }

  @Test
  public void test10()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      Class<?> class0 = SimplePrincipalCollection.class;
      Collection<Object> collection0 = simplePrincipalCollection0.byType((Class<Object>) class0);
      assertEquals(true, collection0.isEmpty());
  }

  @Test
  public void test11()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offerLast("$B#o");
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection((Collection) linkedList0, "$B#o");
      assertNotNull(simplePrincipalCollection0);
      
      Class<?> class0 = PrincipalCollection.class;
      Collection<String> collection0 = simplePrincipalCollection0.byType((Class<String>) class0);
      assertNotNull(collection0);
      assertEquals(false, simplePrincipalCollection0.isEmpty());
      assertEquals(true, collection0.isEmpty());
  }

  @Test
  public void test12()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offerLast("$B#o");
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection((Collection) linkedList0, "$B#o");
      assertNotNull(simplePrincipalCollection0);
      
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection((Object) simplePrincipalCollection0, "$B#o");
      assertNotNull(simplePrincipalCollection1);
      
      Class<?> class0 = PrincipalCollection.class;
      Collection<String> collection0 = simplePrincipalCollection1.byType((Class<String>) class0);
      assertNotNull(collection0);
      assertEquals(false, collection0.isEmpty());
      assertEquals(false, simplePrincipalCollection0.isEmpty());
  }

  @Test
  public void test13()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection((Object) "", "");
      assertNotNull(simplePrincipalCollection0);
      
      List<Object> list0 = simplePrincipalCollection0.asList();
      assertNotNull(list0);
      assertEquals(false, list0.isEmpty());
  }

  @Test
  public void test14()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      List<Object> list0 = simplePrincipalCollection0.asList();
      assertEquals(0, list0.size());
  }

  @Test
  public void test15()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      simplePrincipalCollection0.getPrincipalsLazy((String) null);
      simplePrincipalCollection0.iterator();
      assertEquals(false, simplePrincipalCollection0.isEmpty());
  }

  @Test
  public void test16()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offerLast("$B#o");
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection((Collection) linkedList0, "$B#o");
      assertNotNull(simplePrincipalCollection0);
      
      Collection<Object> collection0 = simplePrincipalCollection0.fromRealm("[$B#o]");
      assertEquals(false, simplePrincipalCollection0.isEmpty());
      assertNotNull(collection0);
  }

  @Test
  public void test17()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      boolean boolean0 = simplePrincipalCollection0.isEmpty();
      assertEquals(true, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection((Object) "[]", "[]");
      assertNotNull(simplePrincipalCollection0);
      
      boolean boolean0 = simplePrincipalCollection0.isEmpty();
      assertEquals(false, boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      simplePrincipalCollection0.getPrincipalsLazy("7xpc~>\"");
      assertEquals(false, simplePrincipalCollection0.isEmpty());
      
      simplePrincipalCollection0.clear();
      assertEquals(true, simplePrincipalCollection0.isEmpty());
  }

  @Test
  public void test20()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      boolean boolean0 = simplePrincipalCollection0.equals((Object) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection((Object) "", "");
      assertNotNull(simplePrincipalCollection0);
      
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection((PrincipalCollection) simplePrincipalCollection0);
      assertNotNull(simplePrincipalCollection1);
      
      boolean boolean0 = simplePrincipalCollection0.equals((Object) simplePrincipalCollection1);
      assertEquals(false, simplePrincipalCollection0.isEmpty());
      assertEquals(true, boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection((PrincipalCollection) simplePrincipalCollection0);
      assertNotNull(simplePrincipalCollection1);
      
      boolean boolean0 = simplePrincipalCollection0.equals((Object) simplePrincipalCollection1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      int int0 = simplePrincipalCollection0.hashCode();
      assertEquals(697146446, int0);
  }
}
