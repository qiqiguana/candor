/*
 * This file was automatically generated by EvoSuite
 */

package org.jsecurity.jndi;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.nio.CharBuffer;
import java.util.Properties;
import javax.naming.NamingException;
import javax.naming.NoInitialContextException;
import org.jsecurity.jndi.JndiLocator;
import org.jsecurity.jndi.JndiTemplate;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class JndiLocatorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      JndiLocator jndiLocator0 = new JndiLocator();
      jndiLocator0.getJndiEnvironment();
      assertEquals(false, jndiLocator0.isResourceRef());
  }

  @Test
  public void test1()  throws Throwable  {
      JndiLocator jndiLocator0 = new JndiLocator();
      try {
        jndiLocator0.lookup("VO");
        fail("Expecting exception: NoInitialContextException");
      } catch(NoInitialContextException e) {
        /*
         * Need to specify class name in environment or system property, or as an applet parameter, or in an application resource file:  java.naming.factory.initial
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      JndiLocator jndiLocator0 = new JndiLocator();
      assertEquals(false, jndiLocator0.isResourceRef());
      
      jndiLocator0.setResourceRef(true);
      Class<?> class0 = CharBuffer.class;
      try {
        jndiLocator0.lookup("{hj1^5mtFJZ%8}", (Class) class0);
        fail("Expecting exception: NoInitialContextException");
      } catch(NoInitialContextException e) {
        /*
         * Need to specify class name in environment or system property, or as an applet parameter, or in an application resource file:  java.naming.factory.initial
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      JndiLocator jndiLocator0 = new JndiLocator();
      jndiLocator0.setJndiEnvironment((Properties) null);
      assertEquals(false, jndiLocator0.isResourceRef());
  }

  @Test
  public void test4()  throws Throwable  {
      JndiLocator jndiLocator0 = new JndiLocator();
      jndiLocator0.setJndiTemplate((JndiTemplate) null);
      assertEquals(false, jndiLocator0.isResourceRef());
  }

  @Test
  public void test5()  throws Throwable  {
      JndiLocator jndiLocator0 = new JndiLocator();
      JndiTemplate jndiTemplate0 = jndiLocator0.getJndiTemplate();
      assertNotNull(jndiTemplate0);
      
      jndiLocator0.setJndiTemplate(jndiTemplate0);
      assertEquals(false, jndiLocator0.isResourceRef());
  }

  @Test
  public void test6()  throws Throwable  {
      JndiLocator jndiLocator0 = new JndiLocator();
      // Undeclared exception!
      try {
        jndiLocator0.lookup((String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * jndiName argument must not be null
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      JndiLocator jndiLocator0 = new JndiLocator();
      assertEquals(false, jndiLocator0.isResourceRef());
      
      jndiLocator0.setResourceRef(true);
      Class<?> class0 = Object.class;
      try {
        jndiLocator0.lookup("java:comp/env/ - i< dependspon som other class th/t cann0t", (Class) class0);
        fail("Expecting exception: NoInitialContextException");
      } catch(NoInitialContextException e) {
        /*
         * Need to specify class name in environment or system property, or as an applet parameter, or in an application resource file:  java.naming.factory.initial
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      JndiLocator jndiLocator0 = new JndiLocator();
      assertEquals(false, jndiLocator0.isResourceRef());
      
      jndiLocator0.setResourceRef(true);
      String string0 = jndiLocator0.convertJndiName("=e94IL_om:H0g`");
      assertEquals(true, jndiLocator0.isResourceRef());
      assertEquals("=e94IL_om:H0g`", string0);
  }
}
