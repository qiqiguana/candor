/*
 * This file was automatically generated by EvoSuite
 */

package org.jsecurity.codec;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.jsecurity.authc.AuthenticationInfo;
import org.jsecurity.authc.AuthenticationToken;
import org.jsecurity.authc.UsernamePasswordToken;
import org.jsecurity.authc.credential.Md2CredentialsMatcher;
import org.jsecurity.authc.credential.Sha1CredentialsMatcher;
import org.jsecurity.codec.CodecException;
import org.jsecurity.codec.CodecSupport;
import org.jsecurity.crypto.hash.Md2Hash;
import org.jsecurity.crypto.hash.Sha1Hash;
import org.jsecurity.crypto.hash.Sha256Hash;
import org.jsecurity.crypto.hash.Sha384Hash;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class CodecSupportEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Sha256Hash sha256Hash0 = new Sha256Hash((Object) "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", (Object) "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", (int) (byte) (-3));
      assertEquals("N0cI//dxndWXnsh11WzSKG9tPPfsMXo7JWMqqyjsN7s=", sha256Hash0.toBase64());
      assertNotNull(sha256Hash0);
  }

  @Test
  public void test1()  throws Throwable  {
      Md2CredentialsMatcher md2CredentialsMatcher0 = new Md2CredentialsMatcher();
      char[] charArray0 = new char[4];
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("org.apa.log4jCategoyKey", charArray0, true);
      // Undeclared exception!
      try {
        md2CredentialsMatcher0.doCredentialsMatch((AuthenticationToken) usernamePasswordToken0, (AuthenticationInfo) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      char[] charArray0 = new char[1];
      try {
        CodecSupport.toBytes(charArray0, "Nk?C2`m$NuxKdsYo&");
        fail("Expecting exception: CodecException");
      } catch(CodecException e) {
        /*
         * Unable to convert source [\u0000] to byte array using encoding 'Nk?C2`m$NuxKdsYo&'
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      Sha384Hash sha384Hash0 = Sha384Hash.fromBase64String("");
      assertNotNull(sha384Hash0);
      
      Sha1Hash sha1Hash0 = null;
      try {
        sha1Hash0 = new Sha1Hash((Object) sha384Hash0, (Object) sha384Hash0);
        fail("Expecting exception: CodecException");
      } catch(CodecException e) {
        /*
         * The org.jsecurity.crypto.hash.Sha1Hash implementation only supports conversion to byte[] if the source is of type byte[], char[] or String.  The instance provided as a method argument is of type [org.jsecurity.crypto.hash.Sha384Hash].  If you would like to convert this argument type to a byte[], you can 1) convert the argument to a byte[], char[] or String yourself and then use that as the method argument or 2) subclass org.jsecurity.crypto.hash.Sha1Hash and override the objectToBytes(Object o) method.
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      char[] charArray0 = CodecSupport.toChars(byteArray0);
      assertNotNull(charArray0);
  }

  @Test
  public void test5()  throws Throwable  {
      Sha384Hash sha384Hash0 = Sha384Hash.fromHexString("");
      String string0 = sha384Hash0.toString((Object) sha384Hash0);
      assertEquals("", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      Md2CredentialsMatcher md2CredentialsMatcher0 = new Md2CredentialsMatcher();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      // Undeclared exception!
      try {
        md2CredentialsMatcher0.doCredentialsMatch((AuthenticationToken) usernamePasswordToken0, (AuthenticationInfo) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Argument for byte conversion cannot be null.
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      Md2Hash md2Hash0 = new Md2Hash();
      // Undeclared exception!
      try {
        md2Hash0.toString((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Argument for String conversion cannot be null.
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Sha384Hash sha384Hash0 = Sha384Hash.fromBase64String("");
      assertNotNull(sha384Hash0);
      
      String string0 = sha384Hash0.toString((Object) byteArray0);
      assertNotNull(string0);
      assertEquals("", sha384Hash0.toBase64());
      assertEquals("", sha384Hash0.toHex());
  }

  @Test
  public void test9()  throws Throwable  {
      Sha1CredentialsMatcher sha1CredentialsMatcher0 = new Sha1CredentialsMatcher();
      String string0 = sha1CredentialsMatcher0.toString((Object) "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }
}
