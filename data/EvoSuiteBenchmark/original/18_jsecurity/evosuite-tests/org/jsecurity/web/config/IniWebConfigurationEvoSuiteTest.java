/*
 * This file was automatically generated by EvoSuite
 */

package org.jsecurity.web.config;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.jsecurity.JSecurityException;
import org.jsecurity.config.ConfigurationException;
import org.jsecurity.util.AntPathMatcher;
import org.jsecurity.util.PatternMatcher;
import org.jsecurity.web.config.IniWebConfiguration;
import org.jsecurity.web.filter.authc.BasicHttpAuthenticationFilter;
import org.jsecurity.web.servlet.ProxiedFilterChain;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class IniWebConfigurationEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      IniWebConfiguration iniWebConfiguration0 = new IniWebConfiguration();
      boolean boolean0 = iniWebConfiguration0.pathMatches("]zzL1+Paq}4)X", "]zzL1+Paq}4)X");
      assertEquals(true, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          IniWebConfiguration iniWebConfiguration0 = new IniWebConfiguration();
          iniWebConfiguration0.init();
          assertNull(iniWebConfiguration0.getConfig());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
      IniWebConfiguration iniWebConfiguration0 = new IniWebConfiguration();
      iniWebConfiguration0.setFilterConfig((FilterConfig) null);
      assertNull(iniWebConfiguration0.getConfig());
  }

  @Test
  public void test3()  throws Throwable  {
      IniWebConfiguration iniWebConfiguration0 = new IniWebConfiguration();
      // Undeclared exception!
      try {
        iniWebConfiguration0.getPathWithinApplication((ServletRequest) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      IniWebConfiguration iniWebConfiguration0 = new IniWebConfiguration();
      AntPathMatcher antPathMatcher0 = new AntPathMatcher();
      iniWebConfiguration0.setPathMatcher((PatternMatcher) antPathMatcher0);
      assertNull(iniWebConfiguration0.getConfig());
  }

  @Test
  public void test5()  throws Throwable  {
      IniWebConfiguration iniWebConfiguration0 = new IniWebConfiguration();
      HashMap<String, List<Filter>> hashMap0 = new HashMap<String, List<Filter>>();
      LinkedList<Filter> linkedList0 = new LinkedList<Filter>();
      hashMap0.put((String) null, (List<Filter>) linkedList0);
      BasicHttpAuthenticationFilter basicHttpAuthenticationFilter0 = new BasicHttpAuthenticationFilter();
      linkedList0.add((Filter) basicHttpAuthenticationFilter0);
      // Undeclared exception!
      try {
        iniWebConfiguration0.initFilters((Map<String, List<Filter>>) hashMap0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      IniWebConfiguration iniWebConfiguration0 = new IniWebConfiguration();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Map<String, Filter> map0 = iniWebConfiguration0.getFilters((Map<String, String>) hashMap0);
      assertNotNull(map0);
      
      iniWebConfiguration0.createChains((Map<String, String>) hashMap0, map0);
      assertEquals(6, map0.size());
  }

  @Test
  public void test7()  throws Throwable  {
      IniWebConfiguration iniWebConfiguration0 = new IniWebConfiguration();
      LinkedList<Filter> linkedList0 = new LinkedList<Filter>();
      ProxiedFilterChain proxiedFilterChain0 = (ProxiedFilterChain)iniWebConfiguration0.createChain((List<Filter>) linkedList0, (FilterChain) null);
      assertNotNull(proxiedFilterChain0);
  }

  @Test
  public void test8()  throws Throwable  {
      IniWebConfiguration iniWebConfiguration0 = new IniWebConfiguration();
      HashMap<String, Map<String, String>> hashMap0 = new HashMap<String, Map<String, String>>();
      iniWebConfiguration0.afterSecurityManagerSet((Map<String, Map<String, String>>) hashMap0);
      assertNull(iniWebConfiguration0.getConfig());
  }

  @Test
  public void test9()  throws Throwable  {
      IniWebConfiguration iniWebConfiguration0 = new IniWebConfiguration();
      FilterChain filterChain0 = iniWebConfiguration0.getChain((ServletRequest) null, (ServletResponse) null, (FilterChain) null);
      assertNull(filterChain0);
  }

  @Test
  public void test10()  throws Throwable  {
      IniWebConfiguration iniWebConfiguration0 = new IniWebConfiguration();
      FilterChain filterChain0 = iniWebConfiguration0.getChain(")_x^k", (FilterChain) null);
      assertNull(filterChain0);
  }

  @Test
  public void test11()  throws Throwable  {
      IniWebConfiguration iniWebConfiguration0 = new IniWebConfiguration();
      HashMap<String, List<Filter>> hashMap0 = new HashMap<String, List<Filter>>();
      iniWebConfiguration0.initFilters((Map<String, List<Filter>>) hashMap0);
      assertNull(iniWebConfiguration0.getConfig());
  }

  @Test
  public void test12()  throws Throwable  {
      IniWebConfiguration iniWebConfiguration0 = new IniWebConfiguration();
      HashMap<String, List<Filter>> hashMap0 = new HashMap<String, List<Filter>>();
      LinkedList<Filter> linkedList0 = new LinkedList<Filter>();
      hashMap0.put((String) null, (List<Filter>) linkedList0);
      iniWebConfiguration0.initFilters((Map<String, List<Filter>>) hashMap0);
      assertNull(iniWebConfiguration0.getConfig());
  }

  @Test
  public void test13()  throws Throwable  {
      IniWebConfiguration iniWebConfiguration0 = new IniWebConfiguration();
      iniWebConfiguration0.assertFilters((Map<String, ?>) null);
      assertNull(iniWebConfiguration0.getConfig());
  }

  @Test
  public void test14()  throws Throwable  {
      IniWebConfiguration iniWebConfiguration0 = new IniWebConfiguration();
      HashMap<String, IniWebConfiguration> hashMap0 = new HashMap<String, IniWebConfiguration>();
      iniWebConfiguration0.assertFilters((Map<String, ?>) hashMap0);
      assertEquals(0, hashMap0.size());
  }

  @Test
  public void test15()  throws Throwable  {
      IniWebConfiguration iniWebConfiguration0 = new IniWebConfiguration();
      Map<String, Filter> map0 = iniWebConfiguration0.createDefaultFilters();
      iniWebConfiguration0.assertFilters(map0);
      assertEquals(6, map0.size());
  }

  @Test
  public void test16()  throws Throwable  {
      IniWebConfiguration iniWebConfiguration0 = new IniWebConfiguration();
      try {
        iniWebConfiguration0.assertFilter("]zzL1+Paq}4)X", "POST");
        fail("Expecting exception: ConfigurationException");
      } catch(ConfigurationException e) {
        /*
         * [filters] section specified a filter named ']zzL1+Paq}4)X', which does not implement the javax.servlet.Filter interface.  Only Filter implementations may be defined.
         */
      }
  }

  @Test
  public void test17()  throws Throwable  {
      IniWebConfiguration iniWebConfiguration0 = new IniWebConfiguration();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Map<String, Filter> map0 = iniWebConfiguration0.getFilters((Map<String, String>) hashMap0);
      assertNotNull(map0);
      
      hashMap0.put("HQ[;_w#HxG", "HQ[;_w#HxG");
      // Undeclared exception!
      try {
        iniWebConfiguration0.createChains((Map<String, String>) hashMap0, map0);
        fail("Expecting exception: ConfigurationException");
      } catch(ConfigurationException e) {
        /*
         * Path [HQ[;_w#HxG] specified a filter named 'HQ', but that filter has not been specified in the [filters] section.
         */
      }
  }

  @Test
  public void test18()  throws Throwable  {
      IniWebConfiguration iniWebConfiguration0 = new IniWebConfiguration();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Map<String, Filter> map0 = iniWebConfiguration0.getFilters((Map<String, String>) hashMap0);
      assertNotNull(map0);
      
      hashMap0.put(")_x^k", ")_x^k");
      // Undeclared exception!
      try {
        iniWebConfiguration0.createChains((Map<String, String>) hashMap0, map0);
        fail("Expecting exception: ConfigurationException");
      } catch(ConfigurationException e) {
        /*
         * Path [)_x^k] specified a filter named ')_x^k', but that filter has not been specified in the [filters] section.
         */
      }
  }
}
