/*
 * This file was automatically generated by EvoSuite
 */

package org.jsecurity.web.filter.authc;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import org.jsecurity.web.filter.authc.BasicHttpAuthenticationFilter;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BasicHttpAuthenticationFilterEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BasicHttpAuthenticationFilter basicHttpAuthenticationFilter0 = new BasicHttpAuthenticationFilter();
      // Undeclared exception!
      try {
        basicHttpAuthenticationFilter0.createToken((ServletRequest) null, (ServletResponse) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      BasicHttpAuthenticationFilter basicHttpAuthenticationFilter0 = new BasicHttpAuthenticationFilter();
      boolean boolean0 = basicHttpAuthenticationFilter0.isLoginAttempt(".AdG|@U*V@YV");
      assertEquals("BASIC", basicHttpAuthenticationFilter0.getAuthzScheme());
      assertEquals(false, boolean0);
      assertEquals("application", basicHttpAuthenticationFilter0.getApplicationName());
      assertEquals("BASIC", basicHttpAuthenticationFilter0.getAuthcScheme());
  }

  @Test
  public void test2()  throws Throwable  {
      BasicHttpAuthenticationFilter basicHttpAuthenticationFilter0 = new BasicHttpAuthenticationFilter();
      basicHttpAuthenticationFilter0.setAuthzScheme("Attemptin to execute login wth headers [");
      assertEquals("Attemptin to execute login wth headers [", basicHttpAuthenticationFilter0.getAuthzScheme());
  }

  @Test
  public void test3()  throws Throwable  {
      BasicHttpAuthenticationFilter basicHttpAuthenticationFilter0 = new BasicHttpAuthenticationFilter();
      String string0 = basicHttpAuthenticationFilter0.getAuthcScheme();
      assertEquals("BASIC", string0);
      assertEquals("BASIC", basicHttpAuthenticationFilter0.getAuthzScheme());
      assertEquals("application", basicHttpAuthenticationFilter0.getApplicationName());
      assertNotNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      BasicHttpAuthenticationFilter basicHttpAuthenticationFilter0 = new BasicHttpAuthenticationFilter();
      String string0 = basicHttpAuthenticationFilter0.getApplicationName();
      assertEquals("BASIC", basicHttpAuthenticationFilter0.getAuthcScheme());
      assertEquals("application", string0);
      assertEquals("BASIC", basicHttpAuthenticationFilter0.getAuthzScheme());
      assertNotNull(string0);
  }

  @Test
  public void test5()  throws Throwable  {
      BasicHttpAuthenticationFilter basicHttpAuthenticationFilter0 = new BasicHttpAuthenticationFilter();
      basicHttpAuthenticationFilter0.setAuthcScheme(".AdG|@U*V@YV");
      assertEquals(".AdG|@U*V@YV", basicHttpAuthenticationFilter0.getAuthcScheme());
  }

  @Test
  public void test6()  throws Throwable  {
      BasicHttpAuthenticationFilter basicHttpAuthenticationFilter0 = new BasicHttpAuthenticationFilter();
      String[] stringArray0 = basicHttpAuthenticationFilter0.getPrincipalsAndCredentials("SspM) _hC", (ServletRequest) null);
      assertEquals("BASIC", basicHttpAuthenticationFilter0.getAuthcScheme());
      assertNotNull(stringArray0);
      assertEquals("application", basicHttpAuthenticationFilter0.getApplicationName());
      assertEquals("BASIC", basicHttpAuthenticationFilter0.getAuthzScheme());
  }

  @Test
  public void test7()  throws Throwable  {
      BasicHttpAuthenticationFilter basicHttpAuthenticationFilter0 = new BasicHttpAuthenticationFilter();
      basicHttpAuthenticationFilter0.setApplicationName("BASIC");
      assertEquals("BASIC", basicHttpAuthenticationFilter0.getApplicationName());
      assertEquals("BASIC", basicHttpAuthenticationFilter0.getAuthcScheme());
  }

  @Test
  public void test8()  throws Throwable  {
      BasicHttpAuthenticationFilter basicHttpAuthenticationFilter0 = new BasicHttpAuthenticationFilter();
      // Undeclared exception!
      try {
        basicHttpAuthenticationFilter0.sendChallenge((ServletRequest) null, (ServletResponse) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      BasicHttpAuthenticationFilter basicHttpAuthenticationFilter0 = new BasicHttpAuthenticationFilter();
      basicHttpAuthenticationFilter0.getPrincipalsAndCredentials((String) null, (ServletRequest) null);
      assertEquals("BASIC", basicHttpAuthenticationFilter0.getAuthzScheme());
      assertEquals("BASIC", basicHttpAuthenticationFilter0.getAuthcScheme());
      assertEquals("application", basicHttpAuthenticationFilter0.getApplicationName());
  }

  @Test
  public void test10()  throws Throwable  {
      BasicHttpAuthenticationFilter basicHttpAuthenticationFilter0 = new BasicHttpAuthenticationFilter();
      String[] stringArray0 = basicHttpAuthenticationFilter0.getPrincipalsAndCredentials(".AdG|@U*V@YV", (ServletRequest) null);
      assertEquals("application", basicHttpAuthenticationFilter0.getApplicationName());
      assertEquals("BASIC", basicHttpAuthenticationFilter0.getAuthzScheme());
      assertEquals("BASIC", basicHttpAuthenticationFilter0.getAuthcScheme());
      assertNull(stringArray0);
  }
}
