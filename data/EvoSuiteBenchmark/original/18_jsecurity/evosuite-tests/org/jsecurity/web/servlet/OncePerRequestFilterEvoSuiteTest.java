/*
 * This file was automatically generated by EvoSuite
 */

package org.jsecurity.web.servlet;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import org.jsecurity.web.servlet.JSecurityFilter;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class OncePerRequestFilterEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      JSecurityFilter jSecurityFilter0 = new JSecurityFilter();
      jSecurityFilter0.setName("2Kft");
      String string0 = jSecurityFilter0.getAlreadyFilteredAttributeName();
      assertEquals("2Kft.FILTERED", jSecurityFilter0.getAlreadyFilteredAttributeName());
      assertNotNull(string0);
      assertEquals("2Kft.FILTERED", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      JSecurityFilter jSecurityFilter0 = new JSecurityFilter();
      // Undeclared exception!
      try {
        jSecurityFilter0.init((FilterConfig) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      JSecurityFilter jSecurityFilter0 = new JSecurityFilter();
      boolean boolean0 = jSecurityFilter0.shouldNotFilter((ServletRequest) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      JSecurityFilter jSecurityFilter0 = new JSecurityFilter();
      // Undeclared exception!
      try {
        jSecurityFilter0.doFilter((ServletRequest) null, (ServletResponse) null, (FilterChain) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
