/*
 * This file was automatically generated by EvoSuite
 */

package org.jsecurity.web;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.jsecurity.web.WebRememberMeManager;
import org.jsecurity.web.attr.RequestParamAttribute;
import org.jsecurity.web.attr.WebAttribute;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class WebRememberMeManagerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager();
      int int0 = webRememberMeManager0.getCookieMaxAge();
      assertEquals("rememberMe", webRememberMeManager0.getCookieName());
      assertEquals(94608000, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager();
      RequestParamAttribute<String> requestParamAttribute0 = new RequestParamAttribute<String>();
      webRememberMeManager0.setIdentityAttribute((WebAttribute<String>) requestParamAttribute0);
      // Undeclared exception!
      try {
        webRememberMeManager0.isCookieSecure();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Attempting to access a Cookie property, but the underlying org.jsecurity.web.attr.WebAttribute instance is not a org.jsecurity.web.attr.CookieAttribute instance.  This is expected if you are accessing or modifying a cookie property.
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager();
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try {
        webRememberMeManager0.rememberSerializedIdentity(byteArray0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager();
      webRememberMeManager0.setCookieMaxAge(94608000);
      assertEquals("rememberMe", webRememberMeManager0.getCookieName());
      assertEquals(94608000, webRememberMeManager0.getCookieMaxAge());
  }

  @Test
  public void test4()  throws Throwable  {
      WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager();
      WebAttribute<String> webAttribute0 = webRememberMeManager0.getIdentityAttribute();
      assertEquals("rememberMe", webRememberMeManager0.getCookieName());
      assertEquals(94608000, webRememberMeManager0.getCookieMaxAge());
      assertNotNull(webAttribute0);
  }

  @Test
  public void test5()  throws Throwable  {
      WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager();
      webRememberMeManager0.setCookieSecure(true);
      assertEquals(true, webRememberMeManager0.isCookieSecure());
      assertEquals(94608000, webRememberMeManager0.getCookieMaxAge());
  }

  @Test
  public void test6()  throws Throwable  {
      WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager();
      // Undeclared exception!
      try {
        webRememberMeManager0.getRememberedPrincipals();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager();
      webRememberMeManager0.getCookiePath();
      assertEquals("rememberMe", webRememberMeManager0.getCookieName());
      assertEquals(94608000, webRememberMeManager0.getCookieMaxAge());
  }

  @Test
  public void test8()  throws Throwable  {
      WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager();
      String string0 = webRememberMeManager0.getCookieName();
      assertEquals("rememberMe", string0);
      assertNotNull(string0);
      assertEquals(94608000, webRememberMeManager0.getCookieMaxAge());
  }

  @Test
  public void test9()  throws Throwable  {
      WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager();
      webRememberMeManager0.setCookiePath(":UR");
      assertEquals(94608000, webRememberMeManager0.getCookieMaxAge());
      assertEquals(":UR", webRememberMeManager0.getCookiePath());
      assertEquals("rememberMe", webRememberMeManager0.getCookieName());
  }

  @Test
  public void test10()  throws Throwable  {
      WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager();
      webRememberMeManager0.setCookieName(":UR");
      assertEquals(":UR", webRememberMeManager0.getCookieName());
      assertEquals(94608000, webRememberMeManager0.getCookieMaxAge());
  }
}
