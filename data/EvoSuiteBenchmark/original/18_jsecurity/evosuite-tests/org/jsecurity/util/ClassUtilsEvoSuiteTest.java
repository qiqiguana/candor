/*
 * This file was automatically generated by EvoSuite
 */

package org.jsecurity.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.InputStream;
import java.lang.reflect.Constructor;
import org.jsecurity.util.ClassUtils;
import org.jsecurity.util.InstantiationException;
import org.jsecurity.util.UnknownClassException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ClassUtilsEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Class<?> class0 = ClassUtils.class;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) class0;
      objectArray0[4] = (Object) class0;
      objectArray0[5] = objectArray0[1];
      objectArray0[6] = (Object) class0;
      objectArray0[7] = (Object) class0;
      objectArray0[8] = (Object) class0;
      // Undeclared exception!
      try {
        ClassUtils.newInstance((Class) class0, objectArray0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * java.lang.NoSuchMethodException: org.jsecurity.util.ClassUtils.<init>(java.lang.Class, java.lang.Class, java.lang.Class, java.lang.Class, java.lang.Class, java.lang.Class, java.lang.Class, java.lang.Class, java.lang.Class)
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try {
        ClassUtils.newInstance("Please initialize the log4j syst.m properly.", objectArray0);
        fail("Expecting exception: UnknownClassException");
      } catch(UnknownClassException e) {
        /*
         * Unable to load class named [Please initialize the log4j syst.m properly.] from the thread context, current, or system/application ClassLoaders.  All heuristics have been exausted.  Class could not be found.
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try {
        ClassUtils.instantiate((Constructor) null, (Object[]) null);
        fail("Expecting exception: InstantiationException");
      } catch(InstantiationException e) {
        /*
         * Unable to instantiate Permission instance with constructor [null]
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try {
        ClassUtils.newInstance("org.apache.log4j.CategoryKey");
        fail("Expecting exception: InstantiationException");
      } catch(InstantiationException e) {
        /*
         * Unable to instantiate class [org.apache.log4j.CategoryKey]
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      boolean boolean0 = ClassUtils.isAvailable("Please initialize the log4j syst.m properly.");
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      ClassUtils classUtils0 = new ClassUtils();
      assertNotNull(classUtils0);
  }

  @Test
  public void test6()  throws Throwable  {
      InputStream inputStream0 = ClassUtils.getResourceAsStream("Please initialize the log4j syst.m properly.");
      assertNull(inputStream0);
  }

  @Test
  public void test7()  throws Throwable  {
      // Undeclared exception!
      try {
        ClassUtils.newInstance((Class) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Class method parameter cannot be null.
         */
      }
  }
}
