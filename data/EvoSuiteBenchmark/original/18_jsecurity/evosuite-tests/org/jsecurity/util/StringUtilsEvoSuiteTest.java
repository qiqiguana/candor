/*
 * This file was automatically generated by EvoSuite
 */

package org.jsecurity.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.text.ParseException;
import java.util.Collection;
import org.jsecurity.util.StringUtils;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class StringUtilsEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("");
      assertNull(stringArray0);
  }

  @Test
  public void test1()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
  }

  @Test
  public void test2()  throws Throwable  {
      String[] stringArray0 = StringUtils.tokenizeToStringArray((String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test
  public void test3()  throws Throwable  {
      boolean boolean0 = StringUtils.hasText(" ");
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      boolean boolean0 = StringUtils.hasText((String) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      boolean boolean0 = StringUtils.hasText("=1iL4BmN>N<m+&[");
      assertEquals(true, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      boolean boolean0 = StringUtils.hasLength("");
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase((String) null, (String) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase("WYJk@+\"6?c,<@aoZ", (String) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase("WC1T@#8ul_PJY \"\"", "WC1T@#8ul_PJY \"\"");
      assertEquals(true, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase("n1YrjW=E+", "n7/#/<GYI.@");
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase("n7/#/<GYI.@", "n1YrjW=E+");
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitKeyValue((String) null);
      assertNull(stringArray0);
  }

  @Test
  public void test13()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Unable to determine Key/Value pair from line [", '*', 'U', '*', true, true);
      assertNotNull(stringArray0);
  }

  @Test
  public void test14()  throws Throwable  {
      String[] stringArray0 = StringUtils.tokenizeToStringArray("@Gz(u^2+xts282", ".7f'C,TwM3Z", false, false);
      assertNotNull(stringArray0);
  }

  @Test
  public void test15()  throws Throwable  {
      String[] stringArray0 = StringUtils.tokenizeToStringArray("No corresponding value could be found in line [", "91aTVmI)eSd\"piYLn");
      assertNotNull(stringArray0);
  }

  @Test
  public void test16()  throws Throwable  {
      String[] stringArray0 = StringUtils.toStringArray((Collection) null);
      assertNull(stringArray0);
  }

  @Test
  public void test17()  throws Throwable  {
      try {
        StringUtils.splitKeyValue("=1iL4BmN>N<m+&[");
        fail("Expecting exception: ParseException");
      } catch(ParseException e) {
        /*
         * No valid key could be found in line [=1iL4BmN>N<m+&[] to form a key/value pair.
         */
      }
  }

  @Test
  public void test18()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitKeyValue("No corresponding value could be found in line [");
      assertNotNull(stringArray0);
  }

  @Test
  public void test19()  throws Throwable  {
      try {
        StringUtils.splitKeyValue("n7/#/<GYI.@");
        fail("Expecting exception: ParseException");
      } catch(ParseException e) {
        /*
         * Unable to determine Key/Value pair from line [n7/#/<GYI.@].  There is no space from which the split location could be determined.
         */
      }
  }

  @Test
  public void test20()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitKeyValue("IX==%r-/");
      assertNotNull(stringArray0);
  }

  @Test
  public void test21()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("@Gz(u^2+xts282", '+', '8', '+');
      assertNotNull(stringArray0);
  }

  @Test
  public void test22()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("WC1T@#8ul_PJY \"\"");
      assertNotNull(stringArray0);
  }

  @Test
  public void test23()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("No corresponding value could be found in line [", 'r', 'r', 'N', true, true);
      assertNotNull(stringArray0);
  }

  @Test
  public void test24()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("No corresponding value could be found in line [", '9', '9', 'r', true, true);
      assertNotNull(stringArray0);
  }

  @Test
  public void test25()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("WYJk@+\"6?c,<@aoZ");
      assertNotNull(stringArray0);
  }

  @Test
  public void test26()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("@Gz(u^2+xts282", '+');
      assertNotNull(stringArray0);
  }

  @Test
  public void test27()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("@Gz(u^2+xts282", '+', '8', '8', false, false);
      assertNotNull(stringArray0);
  }
}
