/*
 * This file was automatically generated by EvoSuite
 */

package org.jsecurity.realm;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.TreeSet;
import org.jsecurity.authc.SimpleAccount;
import org.jsecurity.authz.AuthorizationException;
import org.jsecurity.authz.AuthorizationInfo;
import org.jsecurity.authz.Permission;
import org.jsecurity.authz.SimpleAuthorizationInfo;
import org.jsecurity.authz.SimpleAuthorizingAccount;
import org.jsecurity.authz.UnauthorizedException;
import org.jsecurity.authz.permission.AllPermission;
import org.jsecurity.authz.permission.PermissionResolver;
import org.jsecurity.authz.permission.WildcardPermission;
import org.jsecurity.authz.permission.WildcardPermissionResolver;
import org.jsecurity.cache.Cache;
import org.jsecurity.cache.CacheManager;
import org.jsecurity.cache.HashtableCache;
import org.jsecurity.cache.HashtableCacheManager;
import org.jsecurity.realm.SimpleAccountRealm;
import org.jsecurity.subject.PrincipalCollection;
import org.jsecurity.subject.SimplePrincipalCollection;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class AuthorizingRealmEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("]4{vO,$h(NN'|#L%");
      assertNotNull(simpleAccountRealm0);
      
      boolean boolean0 = simpleAccountRealm0.isPermitted((PrincipalCollection) null, "]4{vO,$h(NN'|#L%");
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      assertNotNull(simpleAccountRealm0);
      
      WildcardPermissionResolver wildcardPermissionResolver0 = (WildcardPermissionResolver)simpleAccountRealm0.getPermissionResolver();
      simpleAccountRealm0.setPermissionResolver((PermissionResolver) wildcardPermissionResolver0);
      assertEquals("org.jsecurity.realm.SimpleAccountRealm_35", simpleAccountRealm0.getName());
  }

  @Test
  public void test2()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      assertNotNull(simpleAccountRealm0);
      
      HashtableCacheManager hashtableCacheManager0 = new HashtableCacheManager();
      simpleAccountRealm0.setCacheManager((CacheManager) hashtableCacheManager0);
      simpleAccountRealm0.setCacheManager((CacheManager) hashtableCacheManager0);
      assertEquals("org.jsecurity.realm.SimpleAccountRealm_52", simpleAccountRealm0.getName());
  }

  @Test
  public void test3()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("]4{vO,$h(NN'|#L%");
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      simpleAccountRealm0.onLogout((PrincipalCollection) simplePrincipalCollection0);
      assertEquals("]4{vO,$h(NN'|#L%", simpleAccountRealm0.getName());
  }

  @Test
  public void test4()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      assertNotNull(simpleAccountRealm0);
      
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection((Object) simpleAccountRealm0, "u^E9f");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "u^E9f";
      // Undeclared exception!
      try {
        simpleAccountRealm0.isPermitted((PrincipalCollection) simplePrincipalCollection0, stringArray0);
        fail("Expecting exception: NoSuchElementException");
      } catch(NoSuchElementException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      assertNotNull(simpleAccountRealm0);
      
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection((Object) simpleAccountRealm0, "");
      // Undeclared exception!
      try {
        simpleAccountRealm0.hasRole((PrincipalCollection) simplePrincipalCollection0, "");
        fail("Expecting exception: NoSuchElementException");
      } catch(NoSuchElementException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("QQ");
      try {
        simpleAccountRealm0.checkRole((PrincipalCollection) null, "QQ");
        fail("Expecting exception: UnauthorizedException");
      } catch(UnauthorizedException e) {
        /*
         * User does not have role [QQ]
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm(";t^");
      simpleAccountRealm0.checkPermissions((PrincipalCollection) null, (Collection<Permission>) null);
      assertNull(simpleAccountRealm0.getAuthorizationCacheName());
  }

  @Test
  public void test8()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("V");
      simpleAccountRealm0.checkRoles((PrincipalCollection) null, (Collection<String>) null);
      assertNull(simpleAccountRealm0.getAuthorizationCacheName());
  }

  @Test
  public void test9()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      assertNotNull(simpleAccountRealm0);
      
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "s";
      // Undeclared exception!
      try {
        simpleAccountRealm0.checkPermissions((PrincipalCollection) simplePrincipalCollection0, stringArray0);
        fail("Expecting exception: NoSuchElementException");
      } catch(NoSuchElementException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("] to Level.");
      simpleAccountRealm0.setAuthorizationCache((Cache) null);
      assertEquals("] to Level.", simpleAccountRealm0.getName());
  }

  @Test
  public void test11()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      assertNotNull(simpleAccountRealm0);
      
      HashtableCacheManager hashtableCacheManager0 = new HashtableCacheManager();
      HashtableCache hashtableCache0 = (HashtableCache)hashtableCacheManager0.getCache("WynHYt|ePFEd8at\bDz");
      simpleAccountRealm0.setAuthorizationCache((Cache) hashtableCache0);
      simpleAccountRealm0.init();
      assertEquals("org.jsecurity.realm.SimpleAccountRealm_329", simpleAccountRealm0.getName());
  }

  @Test
  public void test12()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      assertNotNull(simpleAccountRealm0);
      
      HashtableCacheManager hashtableCacheManager0 = new HashtableCacheManager();
      simpleAccountRealm0.setCacheManager((CacheManager) hashtableCacheManager0);
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "s";
      // Undeclared exception!
      try {
        simpleAccountRealm0.checkPermissions((PrincipalCollection) simplePrincipalCollection0, stringArray0);
        fail("Expecting exception: NoSuchElementException");
      } catch(NoSuchElementException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      assertNotNull(simpleAccountRealm0);
      
      simpleAccountRealm0.clearCachedAuthorizationInfo((PrincipalCollection) null);
      assertEquals("org.jsecurity.realm.SimpleAccountRealm_431", simpleAccountRealm0.getName());
  }

  @Test
  public void test14()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      assertNotNull(simpleAccountRealm0);
      
      HashtableCache hashtableCache0 = new HashtableCache("rD(w+wi<[[[+gY`M=");
      simpleAccountRealm0.setAuthorizationCache((Cache) hashtableCache0);
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      // Undeclared exception!
      try {
        simpleAccountRealm0.onLogout((PrincipalCollection) simplePrincipalCollection0);
        fail("Expecting exception: NoSuchElementException");
      } catch(NoSuchElementException e) {
      }
  }

  @Test
  public void test15()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("]4{vO,$h(NN'|#L%");
      assertNotNull(simpleAccountRealm0);
      
      LinkedList<Permission> linkedList0 = new LinkedList<Permission>();
      SimpleAuthorizationInfo simpleAuthorizationInfo0 = new SimpleAuthorizationInfo();
      AllPermission allPermission0 = new AllPermission();
      linkedList0.add((Permission) allPermission0);
      boolean boolean0 = simpleAccountRealm0.isPermittedAll((Collection<Permission>) linkedList0, (AuthorizationInfo) simpleAuthorizationInfo0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("]4{vO,$h(NN'|#L%");
      assertNotNull(simpleAccountRealm0);
      
      LinkedList<Permission> linkedList0 = new LinkedList<Permission>();
      SimpleAuthorizationInfo simpleAuthorizationInfo0 = new SimpleAuthorizationInfo();
      AllPermission allPermission0 = new AllPermission();
      simpleAuthorizationInfo0.addObjectPermission((Permission) allPermission0);
      linkedList0.add((Permission) allPermission0);
      boolean boolean0 = simpleAccountRealm0.isPermittedAll((Collection<Permission>) linkedList0, (AuthorizationInfo) simpleAuthorizationInfo0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      assertNotNull(simpleAccountRealm0);
      
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      WildcardPermission wildcardPermission0 = (WildcardPermission)wildcardPermissionResolver0.resolvePermission("/a");
      SimpleAccount simpleAccount0 = new SimpleAccount((Object) "UTF-8", (Object) simpleAccountRealm0, "/a");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      simpleAccount0.setStringPermissions((Set<String>) linkedHashSet0);
      linkedHashSet0.add("UTF-8");
      // Undeclared exception!
      try {
        simpleAccountRealm0.checkPermission((Permission) wildcardPermission0, (AuthorizationInfo) simpleAccount0);
        fail("Expecting exception: UnauthorizedException");
      } catch(UnauthorizedException e) {
        /*
         * User is not permitted [org.jsecurity.authz.permission.WildcardPermission@39f3e309]
         */
      }
  }

  @Test
  public void test18()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("]4{vO,$h(NN'|#L%");
      LinkedList<Permission> linkedList0 = new LinkedList<Permission>();
      SimpleAuthorizationInfo simpleAuthorizationInfo0 = new SimpleAuthorizationInfo();
      boolean[] booleanArray0 = simpleAccountRealm0.isPermitted((List<Permission>) linkedList0, (AuthorizationInfo) simpleAuthorizationInfo0);
      assertNotNull(booleanArray0);
  }

  @Test
  public void test19()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      assertNotNull(simpleAccountRealm0);
      
      LinkedList<Permission> linkedList0 = new LinkedList<Permission>();
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      simpleAccountRealm0.isPermitted((List<Permission>) linkedList0, (AuthorizationInfo) simpleAuthorizingAccount0);
      assertEquals("org.jsecurity.realm.SimpleAccountRealm_653", simpleAccountRealm0.getName());
  }

  @Test
  public void test20()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      assertNotNull(simpleAccountRealm0);
      
      simpleAccountRealm0.isPermitted((List<Permission>) null, (AuthorizationInfo) null);
      assertEquals("org.jsecurity.realm.SimpleAccountRealm_671", simpleAccountRealm0.getName());
  }

  @Test
  public void test21()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      assertNotNull(simpleAccountRealm0);
      
      LinkedList<Permission> linkedList0 = new LinkedList<Permission>();
      WildcardPermission wildcardPermission0 = new WildcardPermission("GB");
      linkedList0.offerFirst((Permission) wildcardPermission0);
      simpleAccountRealm0.isPermitted((PrincipalCollection) null, (List<Permission>) linkedList0);
      assertEquals("org.jsecurity.realm.SimpleAccountRealm_690", simpleAccountRealm0.getName());
  }

  @Test
  public void test22()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("#");
      assertNotNull(simpleAccountRealm0);
      
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      boolean boolean0 = simpleAccountRealm0.isPermittedAll((PrincipalCollection) simplePrincipalCollection0, (String[]) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm(";t^");
      assertNotNull(simpleAccountRealm0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = ";t^";
      stringArray0[1] = ";t^";
      stringArray0[2] = ";t^";
      stringArray0[3] = ";t^";
      stringArray0[4] = ";t^";
      stringArray0[5] = ";t^";
      boolean boolean0 = simpleAccountRealm0.isPermittedAll((PrincipalCollection) null, stringArray0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test24()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm(";t^");
      assertNotNull(simpleAccountRealm0);
      
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount((PrincipalCollection) simplePrincipalCollection0, (Object) simplePrincipalCollection0);
      boolean boolean0 = simpleAccountRealm0.isPermittedAll((Collection<Permission>) null, (AuthorizationInfo) simpleAuthorizingAccount0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test25()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm(";t^");
      assertNotNull(simpleAccountRealm0);
      
      SimpleAuthorizationInfo simpleAuthorizationInfo0 = new SimpleAuthorizationInfo((Set<String>) null);
      boolean boolean0 = simpleAccountRealm0.isPermittedAll((Collection<Permission>) null, (AuthorizationInfo) simpleAuthorizationInfo0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test26()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("]4{vO,$h(NN'|#L%");
      assertNotNull(simpleAccountRealm0);
      
      LinkedList<Permission> linkedList0 = new LinkedList<Permission>();
      SimpleAuthorizationInfo simpleAuthorizationInfo0 = new SimpleAuthorizationInfo();
      boolean boolean0 = simpleAccountRealm0.isPermittedAll((Collection<Permission>) linkedList0, (AuthorizationInfo) simpleAuthorizationInfo0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test27()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      assertNotNull(simpleAccountRealm0);
      
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      WildcardPermission wildcardPermission0 = (WildcardPermission)wildcardPermissionResolver0.resolvePermission("/a");
      SimpleAccount simpleAccount0 = new SimpleAccount((Object) "UTF-8", (Object) simpleAccountRealm0, "UTF-8");
      simpleAccount0.addObjectPermission((Permission) wildcardPermission0);
      simpleAccountRealm0.checkPermission((Permission) wildcardPermission0, (AuthorizationInfo) simpleAccount0);
      assertEquals("org.jsecurity.realm.SimpleAccountRealm_868", simpleAccountRealm0.getName());
  }

  @Test
  public void test28()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("#");
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      simpleAccountRealm0.checkPermissions((PrincipalCollection) simplePrincipalCollection0, (String[]) null);
      assertEquals(true, simplePrincipalCollection0.isEmpty());
  }

  @Test
  public void test29()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm(";t^");
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount((PrincipalCollection) simplePrincipalCollection0, (Object) simplePrincipalCollection0);
      simpleAccountRealm0.checkPermissions((Collection<Permission>) null, (AuthorizationInfo) simpleAuthorizingAccount0);
      assertNull(simpleAccountRealm0.getAuthorizationCacheName());
  }

  @Test
  public void test30()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      assertNotNull(simpleAccountRealm0);
      
      HashSet<Permission> hashSet0 = new HashSet<Permission>();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      SimpleAuthorizationInfo simpleAuthorizationInfo0 = new SimpleAuthorizationInfo((Set<String>) treeSet0);
      simpleAccountRealm0.checkPermissions((Collection<Permission>) hashSet0, (AuthorizationInfo) simpleAuthorizationInfo0);
      assertEquals("org.jsecurity.realm.SimpleAccountRealm_948", simpleAccountRealm0.getName());
  }

  @Test
  public void test31()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      assertNotNull(simpleAccountRealm0);
      
      HashSet<Permission> hashSet0 = new HashSet<Permission>();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      WildcardPermission wildcardPermission0 = new WildcardPermission("rD(w+wi<[[[+gcY`M=", true);
      SimpleAuthorizationInfo simpleAuthorizationInfo0 = new SimpleAuthorizationInfo((Set<String>) treeSet0);
      hashSet0.add((Permission) wildcardPermission0);
      // Undeclared exception!
      try {
        simpleAccountRealm0.checkPermissions((Collection<Permission>) hashSet0, (AuthorizationInfo) simpleAuthorizationInfo0);
        fail("Expecting exception: UnauthorizedException");
      } catch(UnauthorizedException e) {
        /*
         * User is not permitted [org.jsecurity.authz.permission.WildcardPermission@2c06b4e6]
         */
      }
  }

  @Test
  public void test32()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm(";t^");
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount((PrincipalCollection) simplePrincipalCollection0, (Object) simplePrincipalCollection0);
      boolean boolean0 = simpleAccountRealm0.hasRole(";t^", (AuthorizationInfo) simpleAuthorizingAccount0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test33()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      assertNotNull(simpleAccountRealm0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      SimpleAuthorizationInfo simpleAuthorizationInfo0 = new SimpleAuthorizationInfo((Set<String>) treeSet0);
      boolean boolean0 = simpleAccountRealm0.hasRole("rD(w+wi<[[[+gY`M=", (AuthorizationInfo) simpleAuthorizationInfo0);
      assertEquals("org.jsecurity.realm.SimpleAccountRealm_1040", simpleAccountRealm0.getName());
      assertEquals(false, boolean0);
  }

  @Test
  public void test34()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      assertNotNull(simpleAccountRealm0);
      
      SimpleAuthorizationInfo simpleAuthorizationInfo0 = new SimpleAuthorizationInfo();
      boolean boolean0 = simpleAccountRealm0.hasRole("WynHYt|ePFEd8at\bDz", (AuthorizationInfo) simpleAuthorizationInfo0);
      assertEquals("org.jsecurity.realm.SimpleAccountRealm_1066", simpleAccountRealm0.getName());
      assertEquals(false, boolean0);
  }

  @Test
  public void test35()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      assertNotNull(simpleAccountRealm0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("u^E9f");
      SimpleAuthorizationInfo simpleAuthorizationInfo0 = new SimpleAuthorizationInfo((Set<String>) linkedHashSet0);
      simpleAccountRealm0.checkRoles((Collection<String>) linkedHashSet0, (AuthorizationInfo) simpleAuthorizationInfo0);
      assertEquals("org.jsecurity.realm.SimpleAccountRealm_1087", simpleAccountRealm0.getName());
  }

  @Test
  public void test36()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("V");
      boolean[] booleanArray0 = simpleAccountRealm0.hasRoles((PrincipalCollection) null, (List<String>) null);
      assertNotNull(booleanArray0);
  }

  @Test
  public void test37()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      assertNotNull(simpleAccountRealm0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      simpleAccountRealm0.hasRoles((PrincipalCollection) null, (List<String>) linkedList0);
      assertEquals("org.jsecurity.realm.SimpleAccountRealm_1148", simpleAccountRealm0.getName());
  }

  @Test
  public void test38()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean[] booleanArray0 = simpleAccountRealm0.hasRoles((List<String>) linkedList0, (AuthorizationInfo) null);
      assertNotNull(booleanArray0);
  }

  @Test
  public void test39()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm(";t^");
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount((PrincipalCollection) simplePrincipalCollection0, (Object) simplePrincipalCollection0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean[] booleanArray0 = simpleAccountRealm0.hasRoles((List<String>) linkedList0, (AuthorizationInfo) simpleAuthorizingAccount0);
      assertNotNull(booleanArray0);
  }

  @Test
  public void test40()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      assertNotNull(simpleAccountRealm0);
      
      SimpleAuthorizationInfo simpleAuthorizationInfo0 = new SimpleAuthorizationInfo();
      simpleAccountRealm0.hasRoles((List<String>) null, (AuthorizationInfo) simpleAuthorizationInfo0);
      assertEquals("org.jsecurity.realm.SimpleAccountRealm_1210", simpleAccountRealm0.getName());
  }

  @Test
  public void test41()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      boolean[] booleanArray0 = simpleAccountRealm0.hasRoles((List<String>) linkedList0, (AuthorizationInfo) null);
      assertNotNull(booleanArray0);
  }

  @Test
  public void test42()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("QQ");
      assertNotNull(simpleAccountRealm0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = simpleAccountRealm0.hasAllRoles((PrincipalCollection) null, (Collection<String>) linkedList0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test43()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      assertNotNull(simpleAccountRealm0);
      
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection((Object) simpleAccountRealm0, "");
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount((PrincipalCollection) simplePrincipalCollection0, (Object) "\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
      simpleAccountRealm0.checkRoles((Collection<String>) null, (AuthorizationInfo) simpleAuthorizingAccount0);
      assertEquals("org.jsecurity.realm.SimpleAccountRealm_1289", simpleAccountRealm0.getName());
  }

  @Test
  public void test44()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      assertNotNull(simpleAccountRealm0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      SimpleAuthorizationInfo simpleAuthorizationInfo0 = new SimpleAuthorizationInfo((Set<String>) linkedHashSet0);
      simpleAccountRealm0.checkRoles((Collection<String>) linkedHashSet0, (AuthorizationInfo) simpleAuthorizationInfo0);
      assertEquals("org.jsecurity.realm.SimpleAccountRealm_1307", simpleAccountRealm0.getName());
  }
}
