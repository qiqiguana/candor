/*
 * This file was automatically generated by EvoSuite
 */

package org.jsecurity.realm.text;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.jsecurity.cache.CacheManager;
import org.jsecurity.cache.HashtableCacheManager;
import org.jsecurity.realm.text.PropertiesRealm;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PropertiesRealmEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      PropertiesRealm propertiesRealm0 = new PropertiesRealm();
      propertiesRealm0.startReloadThread();
      assertEquals("org.jsecurity.realm.text.PropertiesRealm_0", propertiesRealm0.getName());
  }

  @Test
  public void test1()  throws Throwable  {
      HashtableCacheManager hashtableCacheManager0 = new HashtableCacheManager();
      PropertiesRealm propertiesRealm0 = new PropertiesRealm((CacheManager) hashtableCacheManager0);
      assertNotNull(propertiesRealm0);
      
      propertiesRealm0.setUseXmlFormat(true);
      assertEquals("org.jsecurity.realm.text.PropertiesRealm_28", propertiesRealm0.getName());
  }

  @Test
  public void test2()  throws Throwable  {
      HashtableCacheManager hashtableCacheManager0 = new HashtableCacheManager();
      PropertiesRealm propertiesRealm0 = new PropertiesRealm((CacheManager) hashtableCacheManager0);
      assertNotNull(propertiesRealm0);
      
      propertiesRealm0.setReloadIntervalSeconds((-1760));
      assertEquals("org.jsecurity.realm.text.PropertiesRealm_129", propertiesRealm0.getName());
  }

  @Test
  public void test3()  throws Throwable  {
      PropertiesRealm propertiesRealm0 = null;
      try {
        propertiesRealm0 = new PropertiesRealm((CacheManager) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * cacheManager argument cannot be null.
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      HashtableCacheManager hashtableCacheManager0 = new HashtableCacheManager();
      PropertiesRealm propertiesRealm0 = new PropertiesRealm((CacheManager) hashtableCacheManager0);
      assertNotNull(propertiesRealm0);
      
      propertiesRealm0.destroy();
      assertEquals("org.jsecurity.realm.text.PropertiesRealm_240", propertiesRealm0.getName());
  }

  @Test
  public void test5()  throws Throwable  {
      PropertiesRealm propertiesRealm0 = new PropertiesRealm();
      propertiesRealm0.run();
      assertEquals("org.jsecurity.realm.text.PropertiesRealm_341", propertiesRealm0.getName());
  }

  @Test
  public void test6()  throws Throwable  {
      HashtableCacheManager hashtableCacheManager0 = new HashtableCacheManager();
      PropertiesRealm propertiesRealm0 = new PropertiesRealm((CacheManager) hashtableCacheManager0);
      assertNotNull(propertiesRealm0);
      
      boolean boolean0 = propertiesRealm0.isRolename("<");
      assertEquals("org.jsecurity.realm.text.PropertiesRealm_359", propertiesRealm0.getName());
      assertEquals(false, boolean0);
  }
}
