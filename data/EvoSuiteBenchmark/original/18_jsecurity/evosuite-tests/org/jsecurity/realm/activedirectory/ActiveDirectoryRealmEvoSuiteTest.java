/*
 * This file was automatically generated by EvoSuite
 */

package org.jsecurity.realm.activedirectory;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.naming.NamingException;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.jsecurity.authc.AuthenticationToken;
import org.jsecurity.authc.UsernamePasswordToken;
import org.jsecurity.authz.SimpleAuthorizationInfo;
import org.jsecurity.realm.activedirectory.ActiveDirectoryRealm;
import org.jsecurity.realm.ldap.DefaultLdapContextFactory;
import org.jsecurity.realm.ldap.LdapContextFactory;
import org.jsecurity.subject.PrincipalCollection;
import org.jsecurity.subject.SimplePrincipalCollection;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ActiveDirectoryRealmEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          ActiveDirectoryRealm activeDirectoryRealm0 = new ActiveDirectoryRealm();
          DefaultLdapContextFactory defaultLdapContextFactory0 = new DefaultLdapContextFactory();
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("_", "_", (InetAddress) inet4Address0);
          // Undeclared exception!
          try {
            activeDirectoryRealm0.queryForAuthenticationInfo((AuthenticationToken) usernamePasswordToken0, (LdapContextFactory) defaultLdapContextFactory0);
            fail("Expecting exception: IllegalStateException");
          } catch(IllegalStateException e) {
            /*
             * A search base must be specified.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
      ActiveDirectoryRealm activeDirectoryRealm0 = new ActiveDirectoryRealm();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      // Undeclared exception!
      try {
        activeDirectoryRealm0.getAuthorizationInfo((PrincipalCollection) simplePrincipalCollection0);
        fail("Expecting exception: NoSuchElementException");
      } catch(NoSuchElementException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      ActiveDirectoryRealm activeDirectoryRealm0 = new ActiveDirectoryRealm();
      SimpleAuthorizationInfo simpleAuthorizationInfo0 = (SimpleAuthorizationInfo)activeDirectoryRealm0.buildAuthorizationInfo((Set<String>) null);
      assertNotNull(simpleAuthorizationInfo0);
  }

  @Test
  public void test3()  throws Throwable  {
      ActiveDirectoryRealm activeDirectoryRealm0 = new ActiveDirectoryRealm();
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try {
        activeDirectoryRealm0.buildAuthenticationInfo((String) null, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * principal argument cannot be null.
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      ActiveDirectoryRealm activeDirectoryRealm0 = new ActiveDirectoryRealm();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      activeDirectoryRealm0.getRoleNamesForGroups((Collection<String>) linkedList0);
      assertEquals("org.jsecurity.realm.activedirectory.ActiveDirectoryRealm_14", activeDirectoryRealm0.getName());
  }

  @Test
  public void test5()  throws Throwable  {
      ActiveDirectoryRealm activeDirectoryRealm0 = new ActiveDirectoryRealm();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("$_n");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      activeDirectoryRealm0.setGroupRolesMap((Map<String, String>) hashMap0);
      activeDirectoryRealm0.getRoleNamesForGroups((Collection<String>) linkedList0);
      assertEquals("org.jsecurity.realm.activedirectory.ActiveDirectoryRealm_18", activeDirectoryRealm0.getName());
  }

  @Test
  public void test6()  throws Throwable  {
      ActiveDirectoryRealm activeDirectoryRealm0 = new ActiveDirectoryRealm();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = "Zu\\8BK,&Q\\xtqw";
      linkedList0.add(string0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      activeDirectoryRealm0.setGroupRolesMap((Map<String, String>) hashMap0);
      hashMap0.put(string0, string0);
      Collection<String> collection0 = activeDirectoryRealm0.getRoleNamesForGroups((Collection<String>) linkedList0);
      assertEquals("org.jsecurity.realm.activedirectory.ActiveDirectoryRealm_30", activeDirectoryRealm0.getName());
      assertEquals(false, collection0.isEmpty());
  }
}
