/*
 * This file was automatically generated by EvoSuite
 */

package org.jsecurity.authc;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.TreeSet;
import org.jsecurity.authc.AuthenticationInfo;
import org.jsecurity.authc.SimpleAccount;
import org.jsecurity.authc.SimpleAuthenticationInfo;
import org.jsecurity.authz.Permission;
import org.jsecurity.subject.MutablePrincipalCollection;
import org.jsecurity.subject.PrincipalCollection;
import org.jsecurity.subject.SimplePrincipalCollection;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SimpleAuthenticationInfoEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SimpleAuthenticationInfo simpleAuthenticationInfo0 = new SimpleAuthenticationInfo();
      SimpleAuthenticationInfo simpleAuthenticationInfo1 = new SimpleAuthenticationInfo((Object) "[]", (Object) "[]", "[]");
      assertFalse(simpleAuthenticationInfo1.equals(simpleAuthenticationInfo0));
      
      simpleAuthenticationInfo0.merge((AuthenticationInfo) simpleAuthenticationInfo1);
      boolean boolean0 = simpleAuthenticationInfo1.equals((Object) simpleAuthenticationInfo0);
      assertTrue(simpleAuthenticationInfo0.equals(simpleAuthenticationInfo1));
      assertTrue(simpleAuthenticationInfo1.equals(simpleAuthenticationInfo0));
      assertEquals(true, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      SimpleAuthenticationInfo simpleAuthenticationInfo0 = new SimpleAuthenticationInfo();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      simpleAuthenticationInfo0.setPrincipals((PrincipalCollection) simplePrincipalCollection0);
      SimpleAuthenticationInfo simpleAuthenticationInfo1 = new SimpleAuthenticationInfo();
      boolean boolean0 = simpleAuthenticationInfo0.equals((Object) simpleAuthenticationInfo1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      Object object0 = new Object();
      SimpleAuthenticationInfo simpleAuthenticationInfo0 = new SimpleAuthenticationInfo(object0, (Object) "hV4", "hV4");
      simpleAuthenticationInfo0.merge((AuthenticationInfo) simpleAuthenticationInfo0);
      simpleAuthenticationInfo0.merge((AuthenticationInfo) simpleAuthenticationInfo0);
  }

  @Test
  public void test3()  throws Throwable  {
      SimpleAuthenticationInfo simpleAuthenticationInfo0 = new SimpleAuthenticationInfo();
      // Undeclared exception!
      try {
        simpleAuthenticationInfo0.toString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      Object object0 = new Object();
      SimpleAuthenticationInfo simpleAuthenticationInfo0 = new SimpleAuthenticationInfo(object0, (Object) "hV4", "hV4");
      simpleAuthenticationInfo0.merge((AuthenticationInfo) null);
  }

  @Test
  public void test5()  throws Throwable  {
      SimpleAuthenticationInfo simpleAuthenticationInfo0 = new SimpleAuthenticationInfo();
      simpleAuthenticationInfo0.merge((AuthenticationInfo) simpleAuthenticationInfo0);
  }

  @Test
  public void test6()  throws Throwable  {
      SimpleAuthenticationInfo simpleAuthenticationInfo0 = new SimpleAuthenticationInfo();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      HashSet<String> hashSet1 = new HashSet<String>();
      TreeSet<Permission> treeSet0 = new TreeSet<Permission>();
      SimpleAccount simpleAccount0 = new SimpleAccount((PrincipalCollection) simplePrincipalCollection0, (Object) hashSet0, (Set<String>) hashSet1, (Set<Permission>) treeSet0);
      simpleAuthenticationInfo0.merge((AuthenticationInfo) simpleAccount0);
      assertEquals(false, simpleAccount0.isLocked());
  }

  @Test
  public void test7()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection((Object) "", "");
      SimpleAuthenticationInfo simpleAuthenticationInfo0 = new SimpleAuthenticationInfo();
      SimpleAuthenticationInfo simpleAuthenticationInfo1 = new SimpleAuthenticationInfo((PrincipalCollection) simplePrincipalCollection0, (Object) null);
      simpleAuthenticationInfo0.merge((AuthenticationInfo) simpleAuthenticationInfo1);
      assertTrue(simpleAuthenticationInfo1.equals(simpleAuthenticationInfo0));
      assertTrue(simpleAuthenticationInfo0.equals(simpleAuthenticationInfo1));
  }

  @Test
  public void test8()  throws Throwable  {
      SimpleAuthenticationInfo simpleAuthenticationInfo0 = new SimpleAuthenticationInfo();
      LinkedHashSet<MutablePrincipalCollection> linkedHashSet0 = new LinkedHashSet<MutablePrincipalCollection>();
      boolean boolean0 = simpleAuthenticationInfo0.equals((Object) linkedHashSet0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      HashSet<SimpleAuthenticationInfo> hashSet0 = new HashSet<SimpleAuthenticationInfo>();
      SimpleAuthenticationInfo simpleAuthenticationInfo0 = new SimpleAuthenticationInfo();
      hashSet0.add(simpleAuthenticationInfo0);
      SimpleAuthenticationInfo simpleAuthenticationInfo1 = new SimpleAuthenticationInfo();
      boolean boolean0 = hashSet0.add(simpleAuthenticationInfo1);
      assertEquals(1, hashSet0.size());
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      HashSet<SimpleAuthenticationInfo> hashSet0 = new HashSet<SimpleAuthenticationInfo>();
      SimpleAuthenticationInfo simpleAuthenticationInfo0 = new SimpleAuthenticationInfo();
      hashSet0.add(simpleAuthenticationInfo0);
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      simpleAuthenticationInfo0.setPrincipals((PrincipalCollection) simplePrincipalCollection0);
      SimpleAuthenticationInfo simpleAuthenticationInfo1 = new SimpleAuthenticationInfo();
      boolean boolean0 = hashSet0.add(simpleAuthenticationInfo1);
      assertEquals(2, hashSet0.size());
      assertEquals(true, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection((Object) "", "");
      SimpleAuthenticationInfo simpleAuthenticationInfo0 = new SimpleAuthenticationInfo((PrincipalCollection) simplePrincipalCollection0, (Object) null);
      int int0 = simpleAuthenticationInfo0.hashCode();
      assertEquals(0, int0);
  }
}
