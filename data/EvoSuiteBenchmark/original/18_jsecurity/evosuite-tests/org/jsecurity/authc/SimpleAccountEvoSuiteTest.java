/*
 * This file was automatically generated by EvoSuite
 */

package org.jsecurity.authc;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import org.jsecurity.authc.AuthenticationInfo;
import org.jsecurity.authc.SimpleAccount;
import org.jsecurity.authc.SimpleAuthenticationInfo;
import org.jsecurity.authz.Permission;
import org.jsecurity.authz.permission.WildcardPermission;
import org.jsecurity.subject.PrincipalCollection;
import org.jsecurity.subject.SimplePrincipalCollection;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SimpleAccountEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      SimpleAccount simpleAccount0 = new SimpleAccount((Object) simplePrincipalCollection0, (Object) simplePrincipalCollection0, "=D_)l}FcP?{2Qj");
      simpleAccount0.addRole("=D_)l}FcP?{2Qj");
      assertEquals(false, simpleAccount0.isLocked());
  }

  @Test
  public void test1()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      SimpleAccount simpleAccount0 = new SimpleAccount((PrincipalCollection) simplePrincipalCollection0, (Object) "O");
      SimpleAccount simpleAccount1 = new SimpleAccount();
      // Undeclared exception!
      try {
        simpleAccount0.equals((Object) simpleAccount1);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      Object object0 = new Object();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      LinkedHashSet<Permission> linkedHashSet1 = new LinkedHashSet<Permission>();
      SimpleAccount simpleAccount0 = new SimpleAccount(object0, object0, "", (Set<String>) linkedHashSet0, (Set<Permission>) linkedHashSet1);
      Object object1 = simpleAccount0.getCredentials();
      assertSame(object0, object1);
  }

  @Test
  public void test3()  throws Throwable  {
      SimpleAccount simpleAccount0 = new SimpleAccount();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try {
        simpleAccount0.setRoles((Set<String>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      SimpleAccount simpleAccount0 = new SimpleAccount((Object) simplePrincipalCollection0, (Object) simplePrincipalCollection0, "=D_)l}FcP?{2Qj");
      simpleAccount0.addStringPermission("=D_)l}FcP?{2Qj");
      assertEquals(false, simpleAccount0.isCredentialsExpired());
  }

  @Test
  public void test5()  throws Throwable  {
      WildcardPermission wildcardPermission0 = new WildcardPermission("naBMez#", true);
      SimpleAccount simpleAccount0 = new SimpleAccount();
      SimpleAccount simpleAccount1 = new SimpleAccount((Object) wildcardPermission0, (Object) simpleAccount0, "naBMez#");
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection((Object) simpleAccount1, "naBMez#");
      assertNotNull(simplePrincipalCollection0);
      
      List<Object> list0 = simplePrincipalCollection0.asList();
      Object object0 = new Object();
      SimpleAccount simpleAccount2 = new SimpleAccount((Collection) list0, object0, "naBMez#");
      assertFalse(simpleAccount1.equals(simpleAccount2));
  }

  @Test
  public void test6()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      SimpleAccount simpleAccount0 = new SimpleAccount((PrincipalCollection) simplePrincipalCollection0, (Object) null, (Set<String>) treeSet0);
      simpleAccount0.setLocked(true);
      simpleAccount0.merge((AuthenticationInfo) simpleAccount0);
      assertEquals(true, simpleAccount0.isLocked());
  }

  @Test
  public void test7()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      TreeSet<String> treeSet0 = new TreeSet<String>((Comparator<? super String>) null);
      TreeSet<Permission> treeSet1 = new TreeSet<Permission>();
      SimpleAccount simpleAccount0 = new SimpleAccount((PrincipalCollection) simplePrincipalCollection0, (Object) treeSet0, (Set<String>) treeSet0, (Set<Permission>) treeSet1);
      assertNotNull(simpleAccount0);
      
      simpleAccount0.merge((AuthenticationInfo) simpleAccount0);
      assertEquals(false, simpleAccount0.isLocked());
      assertEquals(false, simpleAccount0.isCredentialsExpired());
  }

  @Test
  public void test8()  throws Throwable  {
      WildcardPermission wildcardPermission0 = new WildcardPermission("naBMez#", true);
      SimpleAccount simpleAccount0 = new SimpleAccount();
      // Undeclared exception!
      try {
        simpleAccount0.addObjectPermission((Permission) wildcardPermission0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      WildcardPermission wildcardPermission0 = new WildcardPermission("naBMez#", true);
      SimpleAccount simpleAccount0 = new SimpleAccount();
      SimpleAccount simpleAccount1 = new SimpleAccount((Object) wildcardPermission0, (Object) simpleAccount0, "naBMez#");
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection((Object) simpleAccount1, "naBMez#");
      assertNotNull(simplePrincipalCollection0);
      
      List<Object> list0 = simplePrincipalCollection0.asList();
      Object object0 = new Object();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      LinkedHashSet<Permission> linkedHashSet1 = new LinkedHashSet<Permission>();
      SimpleAccount simpleAccount2 = new SimpleAccount((Collection) list0, object0, "naBMez#", (Set<String>) linkedHashSet0, (Set<Permission>) linkedHashSet1);
      assertNotNull(simpleAccount2);
      assertFalse(simpleAccount1.equals(simpleAccount2));
  }

  @Test
  public void test10()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      SimpleAccount simpleAccount0 = new SimpleAccount((PrincipalCollection) simplePrincipalCollection0, (Object) simplePrincipalCollection0);
      simpleAccount0.setPrincipals((PrincipalCollection) null);
      int int0 = simpleAccount0.hashCode();
      assertEquals(0, int0);
  }

  @Test
  public void test11()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      TreeSet<String> treeSet0 = new TreeSet<String>((Comparator<? super String>) null);
      TreeSet<Permission> treeSet1 = new TreeSet<Permission>();
      SimpleAccount simpleAccount0 = new SimpleAccount((PrincipalCollection) simplePrincipalCollection0, (Object) treeSet0, (Set<String>) treeSet0, (Set<Permission>) treeSet1);
      assertNotNull(simpleAccount0);
      
      simpleAccount0.setCredentialsExpired(true);
      simpleAccount0.merge((AuthenticationInfo) simpleAccount0);
      assertEquals(true, simpleAccount0.isCredentialsExpired());
  }

  @Test
  public void test12()  throws Throwable  {
      SimpleAccount simpleAccount0 = new SimpleAccount();
      Object object0 = new Object();
      // Undeclared exception!
      try {
        simpleAccount0.setCredentials(object0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      TreeSet<String> treeSet0 = new TreeSet<String>((Comparator<? super String>) null);
      TreeSet<Permission> treeSet1 = new TreeSet<Permission>();
      SimpleAccount simpleAccount0 = new SimpleAccount((PrincipalCollection) simplePrincipalCollection0, (Object) treeSet0, (Set<String>) treeSet0, (Set<Permission>) treeSet1);
      Collection<String> collection0 = simpleAccount0.getStringPermissions();
      assertNull(collection0);
  }

  @Test
  public void test14()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      TreeSet<String> treeSet0 = new TreeSet<String>((Comparator<? super String>) null);
      TreeSet<Permission> treeSet1 = new TreeSet<Permission>();
      SimpleAccount simpleAccount0 = new SimpleAccount((PrincipalCollection) simplePrincipalCollection0, (Object) treeSet0, (Set<String>) treeSet0, (Set<Permission>) treeSet1);
      simpleAccount0.setObjectPermissions((Set<Permission>) treeSet1);
      assertEquals(true, treeSet1.isEmpty());
  }

  @Test
  public void test15()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      SimpleAccount simpleAccount0 = new SimpleAccount((Object) simplePrincipalCollection0, (Object) simplePrincipalCollection0, "=D_)l}FcP?{2Qj");
      Collection<String> collection0 = simpleAccount0.getRoles();
      assertNull(collection0);
  }

  @Test
  public void test16()  throws Throwable  {
      SimpleAccount simpleAccount0 = new SimpleAccount();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try {
        simpleAccount0.addStringPermissions((Collection<String>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test17()  throws Throwable  {
      Object object0 = new Object();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      LinkedHashSet<Permission> linkedHashSet1 = new LinkedHashSet<Permission>();
      SimpleAccount simpleAccount0 = new SimpleAccount(object0, object0, "", (Set<String>) linkedHashSet0, (Set<Permission>) linkedHashSet1);
      simpleAccount0.addRole((Collection<String>) linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
  }

  @Test
  public void test18()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      TreeSet<String> treeSet0 = new TreeSet<String>((Comparator<? super String>) null);
      TreeSet<Permission> treeSet1 = new TreeSet<Permission>();
      SimpleAccount simpleAccount0 = new SimpleAccount((PrincipalCollection) simplePrincipalCollection0, (Object) treeSet0, (Set<String>) treeSet0, (Set<Permission>) treeSet1);
      simpleAccount0.setStringPermissions((Set<String>) treeSet0);
      assertEquals(true, treeSet0.isEmpty());
  }

  @Test
  public void test19()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      SimpleAccount simpleAccount0 = new SimpleAccount((PrincipalCollection) simplePrincipalCollection0, (Object) null, (Set<String>) treeSet0);
      Collection<Permission> collection0 = simpleAccount0.getObjectPermissions();
      assertNull(collection0);
  }

  @Test
  public void test20()  throws Throwable  {
      Object object0 = new Object();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      LinkedHashSet<Permission> linkedHashSet1 = new LinkedHashSet<Permission>();
      SimpleAccount simpleAccount0 = new SimpleAccount(object0, object0, "", (Set<String>) linkedHashSet0, (Set<Permission>) linkedHashSet1);
      simpleAccount0.addObjectPermissions((Collection<Permission>) linkedHashSet1);
      assertEquals(0, linkedHashSet1.size());
  }

  @Test
  public void test21()  throws Throwable  {
      WildcardPermission wildcardPermission0 = new WildcardPermission("naBMez#", true);
      SimpleAccount simpleAccount0 = new SimpleAccount();
      SimpleAccount simpleAccount1 = new SimpleAccount((Object) wildcardPermission0, (Object) simpleAccount0, "naBMez#");
      SimpleAuthenticationInfo simpleAuthenticationInfo0 = new SimpleAuthenticationInfo();
      simpleAccount1.merge((AuthenticationInfo) simpleAuthenticationInfo0);
      assertEquals(false, simpleAccount1.isCredentialsExpired());
  }

  @Test
  public void test22()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      SimpleAccount simpleAccount0 = new SimpleAccount((Object) simplePrincipalCollection0, (Object) simplePrincipalCollection0, "=D_)l}FcP?{2Qj");
      boolean boolean0 = simpleAccount0.equals((Object) simplePrincipalCollection0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      SimpleAccount simpleAccount0 = new SimpleAccount((PrincipalCollection) simplePrincipalCollection0, (Object) simplePrincipalCollection0);
      simpleAccount0.setPrincipals((PrincipalCollection) null);
      SimpleAccount simpleAccount1 = new SimpleAccount();
      // Undeclared exception!
      try {
        simpleAccount0.equals((Object) simpleAccount1);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test24()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      SimpleAccount simpleAccount0 = new SimpleAccount((PrincipalCollection) simplePrincipalCollection0, (Object) simplePrincipalCollection0);
      simpleAccount0.setPrincipals((PrincipalCollection) null);
      String string0 = simpleAccount0.toString();
      assertEquals("empty", string0);
      assertNotNull(string0);
  }

  @Test
  public void test25()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      TreeSet<String> treeSet0 = new TreeSet<String>((Comparator<? super String>) null);
      TreeSet<Permission> treeSet1 = new TreeSet<Permission>();
      SimpleAccount simpleAccount0 = new SimpleAccount((PrincipalCollection) simplePrincipalCollection0, (Object) treeSet0, (Set<String>) treeSet0, (Set<Permission>) treeSet1);
      String string0 = simpleAccount0.toString();
      assertNotNull(string0);
  }
}
