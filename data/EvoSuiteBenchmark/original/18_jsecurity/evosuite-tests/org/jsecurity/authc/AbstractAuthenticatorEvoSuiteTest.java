/*
 * This file was automatically generated by EvoSuite
 */

package org.jsecurity.authc;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Collection;
import java.util.LinkedList;
import org.jsecurity.authc.AuthenticationException;
import org.jsecurity.authc.AuthenticationListener;
import org.jsecurity.authc.AuthenticationToken;
import org.jsecurity.authc.UsernamePasswordToken;
import org.jsecurity.authc.pam.ModularRealmAuthenticator;
import org.jsecurity.realm.Realm;
import org.jsecurity.realm.SimpleAccountRealm;
import org.jsecurity.subject.PrincipalCollection;
import org.jsecurity.subject.SimplePrincipalCollection;

@RunWith(EvoSuiteRunner.class)
public class AbstractAuthenticatorEvoSuiteTest {


  //Test case number: 0
  /*
   * 3 covered goals:
   * 1 org.jsecurity.authc.AbstractAuthenticator.onLogout(Lorg/jsecurity/subject/PrincipalCollection;)V: root-Branch
   * 2 org.jsecurity.authc.AbstractAuthenticator.<init>()V: root-Branch
   * 3 org.jsecurity.authc.AbstractAuthenticator.notifyLogout(Lorg/jsecurity/subject/PrincipalCollection;)V: I9 Branch 4 IFEQ L131 - true
   */
  @Test
  public void test0()  throws Throwable  {
      ModularRealmAuthenticator modularRealmAuthenticator0 = new ModularRealmAuthenticator();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      modularRealmAuthenticator0.onLogout((PrincipalCollection) simplePrincipalCollection0);
      assertEquals(true, simplePrincipalCollection0.isEmpty());
  }

  //Test case number: 1
  /*
   * 8 covered goals:
   * 1 org.jsecurity.authc.AbstractAuthenticator.notifyFailure(Lorg/jsecurity/authc/AuthenticationToken;Lorg/jsecurity/authc/AuthenticationException;)V: I9 Branch 3 IFEQ L117 - false
   * 2 org.jsecurity.authc.AbstractAuthenticator.authenticate(Lorg/jsecurity/authc/AuthenticationToken;)Lorg/jsecurity/authc/AuthenticationInfo;: I140 Branch 11 IFEQ L207 - false
   * 3 org.jsecurity.authc.AbstractAuthenticator.add(Lorg/jsecurity/authc/AuthenticationListener;)V: root-Branch
   * 4 org.jsecurity.authc.AbstractAuthenticator.authenticate(Lorg/jsecurity/authc/AuthenticationToken;)Lorg/jsecurity/authc/AuthenticationInfo;: I3 Branch 5 IFNONNULL L170 - true
   * 5 org.jsecurity.authc.AbstractAuthenticator.authenticate(Lorg/jsecurity/authc/AuthenticationToken;)Lorg/jsecurity/authc/AuthenticationInfo;: I15 Branch 6 IFEQ L174 - true
   * 6 org.jsecurity.authc.AbstractAuthenticator.authenticate(Lorg/jsecurity/authc/AuthenticationToken;)Lorg/jsecurity/authc/AuthenticationInfo;: I76 Branch 8 IFEQ L188 - true
   * 7 org.jsecurity.authc.AbstractAuthenticator.authenticate(Lorg/jsecurity/authc/AuthenticationToken;)Lorg/jsecurity/authc/AuthenticationInfo;: I85 Branch 9 IFNONNULL L191 - false
   * 8 org.jsecurity.authc.AbstractAuthenticator.authenticate(Lorg/jsecurity/authc/AuthenticationToken;)Lorg/jsecurity/authc/AuthenticationInfo;: I113 Branch 10 IFEQ L197 - false
   */
  @Test
  public void test1()  throws Throwable  {
      ModularRealmAuthenticator modularRealmAuthenticator0 = new ModularRealmAuthenticator();
      modularRealmAuthenticator0.add((AuthenticationListener) null);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, (String) null, true);
      try {
        modularRealmAuthenticator0.authenticate((AuthenticationToken) usernamePasswordToken0);
        fail("Expecting exception: AuthenticationException");
      } catch(AuthenticationException e) {
        /*
         * Authentication failed for token submission [org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=true].  Possible unexpected error? (Typical or expected login exceptions should extend from AuthenticationException).
         */
      }
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 org.jsecurity.authc.AbstractAuthenticator.remove(Lorg/jsecurity/authc/AuthenticationListener;)Z: root-Branch
   */
  @Test
  public void test2()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      ModularRealmAuthenticator modularRealmAuthenticator0 = new ModularRealmAuthenticator((Realm) simpleAccountRealm0);
      modularRealmAuthenticator0.remove((AuthenticationListener) null);
      assertEquals("org.jsecurity.realm.SimpleAccountRealm_0", simpleAccountRealm0.getName());
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 org.jsecurity.authc.AbstractAuthenticator.setAuthenticationListeners(Ljava/util/Collection;)V: I3 Branch 1 IFNONNULL L73 - true
   */
  @Test
  public void test3()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      ModularRealmAuthenticator modularRealmAuthenticator0 = new ModularRealmAuthenticator((Realm) simpleAccountRealm0);
      LinkedList<AuthenticationListener> linkedList0 = new LinkedList<AuthenticationListener>();
      modularRealmAuthenticator0.setAuthenticationListeners((Collection<AuthenticationListener>) linkedList0);
      assertEquals("org.jsecurity.realm.SimpleAccountRealm_3", simpleAccountRealm0.getName());
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 org.jsecurity.authc.AbstractAuthenticator.setAuthenticationListeners(Ljava/util/Collection;)V: I3 Branch 1 IFNONNULL L73 - false
   */
  @Test
  public void test4()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      ModularRealmAuthenticator modularRealmAuthenticator0 = new ModularRealmAuthenticator((Realm) simpleAccountRealm0);
      modularRealmAuthenticator0.setAuthenticationListeners((Collection<AuthenticationListener>) null);
      assertEquals("org.jsecurity.realm.SimpleAccountRealm_5", simpleAccountRealm0.getName());
  }

  //Test case number: 5
  /*
   * 6 covered goals:
   * 1 org.jsecurity.authc.AbstractAuthenticator.notifyFailure(Lorg/jsecurity/authc/AuthenticationToken;Lorg/jsecurity/authc/AuthenticationException;)V: I9 Branch 3 IFEQ L117 - true
   * 2 org.jsecurity.authc.AbstractAuthenticator.authenticate(Lorg/jsecurity/authc/AuthenticationToken;)Lorg/jsecurity/authc/AuthenticationInfo;: I3 Branch 5 IFNONNULL L170 - true
   * 3 org.jsecurity.authc.AbstractAuthenticator.authenticate(Lorg/jsecurity/authc/AuthenticationToken;)Lorg/jsecurity/authc/AuthenticationInfo;: I15 Branch 6 IFEQ L174 - true
   * 4 org.jsecurity.authc.AbstractAuthenticator.authenticate(Lorg/jsecurity/authc/AuthenticationToken;)Lorg/jsecurity/authc/AuthenticationInfo;: I76 Branch 8 IFEQ L188 - true
   * 5 org.jsecurity.authc.AbstractAuthenticator.authenticate(Lorg/jsecurity/authc/AuthenticationToken;)Lorg/jsecurity/authc/AuthenticationInfo;: I85 Branch 9 IFNONNULL L191 - false
   * 6 org.jsecurity.authc.AbstractAuthenticator.authenticate(Lorg/jsecurity/authc/AuthenticationToken;)Lorg/jsecurity/authc/AuthenticationInfo;: I113 Branch 10 IFEQ L197 - false
   */
  @Test
  public void test5()  throws Throwable  {
      ModularRealmAuthenticator modularRealmAuthenticator0 = new ModularRealmAuthenticator();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      try {
        modularRealmAuthenticator0.authenticate((AuthenticationToken) usernamePasswordToken0);
        fail("Expecting exception: AuthenticationException");
      } catch(AuthenticationException e) {
        /*
         * Authentication failed for token submission [org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false].  Possible unexpected error? (Typical or expected login exceptions should extend from AuthenticationException).
         */
      }
  }

  //Test case number: 6
  /*
   * 3 covered goals:
   * 1 org.jsecurity.authc.AbstractAuthenticator.notifyLogout(Lorg/jsecurity/subject/PrincipalCollection;)V: I9 Branch 4 IFEQ L131 - false
   * 2 org.jsecurity.authc.AbstractAuthenticator.onLogout(Lorg/jsecurity/subject/PrincipalCollection;)V: root-Branch
   * 3 org.jsecurity.authc.AbstractAuthenticator.add(Lorg/jsecurity/authc/AuthenticationListener;)V: root-Branch
   */
  @Test
  public void test6()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      ModularRealmAuthenticator modularRealmAuthenticator0 = new ModularRealmAuthenticator((Realm) simpleAccountRealm0);
      modularRealmAuthenticator0.add((AuthenticationListener) null);
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      // Undeclared exception!
      try {
        modularRealmAuthenticator0.onLogout((PrincipalCollection) simplePrincipalCollection0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  //Test case number: 7
  /*
   * 2 covered goals:
   * 1 org.jsecurity.authc.AbstractAuthenticator.authenticate(Lorg/jsecurity/authc/AuthenticationToken;)Lorg/jsecurity/authc/AuthenticationInfo;: I3 Branch 5 IFNONNULL L170 - false
   * 2 org.jsecurity.authc.AbstractAuthenticator.<init>()V: root-Branch
   */
  @Test
  public void test7()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      ModularRealmAuthenticator modularRealmAuthenticator0 = new ModularRealmAuthenticator((Realm) simpleAccountRealm0);
      // Undeclared exception!
      try {
        modularRealmAuthenticator0.authenticate((AuthenticationToken) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Method argumet (authentication token) cannot be null.
         */
      }
  }
}
