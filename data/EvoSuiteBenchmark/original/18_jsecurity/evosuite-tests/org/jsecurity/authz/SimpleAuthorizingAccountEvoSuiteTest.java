/*
 * This file was automatically generated by EvoSuite
 */

package org.jsecurity.authz;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import org.jsecurity.authc.Account;
import org.jsecurity.authc.SimpleAccount;
import org.jsecurity.authc.SimpleAuthenticationInfo;
import org.jsecurity.authz.AuthorizationException;
import org.jsecurity.authz.Permission;
import org.jsecurity.authz.SimpleAuthorizingAccount;
import org.jsecurity.authz.SimpleRole;
import org.jsecurity.authz.UnauthorizedException;
import org.jsecurity.authz.permission.AllPermission;
import org.jsecurity.authz.permission.WildcardPermission;
import org.jsecurity.subject.PrincipalCollection;
import org.jsecurity.subject.SimplePrincipalCollection;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SimpleAuthorizingAccountEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LinkedHashSet<Permission> linkedHashSet0 = new LinkedHashSet<Permission>();
      AllPermission allPermission0 = new AllPermission();
      linkedHashSet0.add((Permission) allPermission0);
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount((Collection) linkedHashSet0, (Object) "[]", "[]", (Set<String>) null, (Set<Permission>) linkedHashSet0);
      assertNotNull(simpleAuthorizingAccount0);
      
      Set<Permission> set0 = simpleAuthorizingAccount0.getPermissions();
      assertEquals(1, set0.size());
      assertNotNull(set0);
  }

  @Test
  public void test1()  throws Throwable  {
      AllPermission allPermission0 = new AllPermission();
      HashSet<Permission> hashSet0 = new HashSet<Permission>();
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount((Object) allPermission0, (Object) "", "", (Set<String>) null, (Set<Permission>) hashSet0);
      assertEquals(false, simpleAuthorizingAccount0.isLocked());
  }

  @Test
  public void test2()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount((PrincipalCollection) simplePrincipalCollection0, (Object) simplePrincipalCollection0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean[] booleanArray0 = simpleAuthorizingAccount0.hasRoles((List<String>) linkedList0);
      assertNotNull(booleanArray0);
  }

  @Test
  public void test3()  throws Throwable  {
      Object object0 = new Object();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection(object0, ")@8-Nr2GW");
      Set<Object> set0 = simplePrincipalCollection0.asSet();
      Set<String> set1 = simplePrincipalCollection0.getRealmNames();
      HashSet<Permission> hashSet0 = new HashSet<Permission>(12, 12);
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount((Collection) set0, object0, ")@8-Nr2GW", set1, (Set<Permission>) hashSet0);
      SimpleAuthorizingAccount simpleAuthorizingAccount1 = new SimpleAuthorizingAccount((Object) simpleAuthorizingAccount0, object0, ")@8-Nr2GW", set1, (Set<Permission>) null);
      assertNotSame(simpleAuthorizingAccount1, simpleAuthorizingAccount0);
  }

  @Test
  public void test4()  throws Throwable  {
      Object object0 = new Object();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection(object0, "cEt-DMl_^8Z7");
      Set<Object> set0 = simplePrincipalCollection0.asSet();
      Set<String> set1 = simplePrincipalCollection0.getRealmNames();
      HashSet<Permission> hashSet0 = new HashSet<Permission>(1, 1);
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount((Collection) set0, object0, "cEt-DMl_^8Z7", set1, (Set<Permission>) hashSet0);
      HashSet<String> hashSet1 = new HashSet<String>();
      hashSet0.add((Permission) null);
      SimpleAuthorizingAccount simpleAuthorizingAccount1 = new SimpleAuthorizingAccount((Object) simpleAuthorizingAccount0, object0, "cEt-DMl_^8Z7", (Set<String>) hashSet1, (Set<Permission>) hashSet0);
      assertEquals(false, simpleAuthorizingAccount1.isLocked());
  }

  @Test
  public void test5()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection((Object) "[]", "[]");
      Set<String> set0 = simplePrincipalCollection0.getRealmNames();
      SimpleRole simpleRole0 = new SimpleRole();
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount((Collection) set0, (Object) simpleRole0, "[]", set0, (Set<Permission>) null);
      assertNotNull(simpleAuthorizingAccount0);
      
      Set<String> set1 = simpleAuthorizingAccount0.getRolenames();
      assertTrue(set1.equals(set0));
      assertNotNull(set1);
  }

  @Test
  public void test6()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount((PrincipalCollection) simplePrincipalCollection0, (Object) simplePrincipalCollection0, "?Qxc}[`y]+&JvQY/z=}", (Set<String>) treeSet0, (Set<Permission>) null);
      // Undeclared exception!
      try {
        simpleAuthorizingAccount0.checkRole("?Qxc}[`y]+&JvQY/z=}");
        fail("Expecting exception: UnauthorizedException");
      } catch(UnauthorizedException e) {
        /*
         * User does not have role [?Qxc}[`y]+&JvQY/z=}]
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      Object object0 = new Object();
      SimpleAuthenticationInfo simpleAuthenticationInfo0 = new SimpleAuthenticationInfo(object0, object0, ")@8-Nr2GW");
      SimplePrincipalCollection simplePrincipalCollection0 = (SimplePrincipalCollection)simpleAuthenticationInfo0.getPrincipals();
      HashSet<String> hashSet0 = new HashSet<String>();
      LinkedHashSet<Permission> linkedHashSet0 = new LinkedHashSet<Permission>();
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount((PrincipalCollection) simplePrincipalCollection0, object0, ")@8-Nr2GW", (Set<String>) hashSet0, (Set<Permission>) linkedHashSet0);
      simpleAuthorizingAccount0.merge((Account) simpleAuthorizingAccount0);
      assertEquals(false, simpleAuthorizingAccount0.isCredentialsExpired());
  }

  @Test
  public void test8()  throws Throwable  {
      Object object0 = new Object();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection(object0, ")@8-Nr2GW");
      Set<String> set0 = simplePrincipalCollection0.getRealmNames();
      HashSet<Permission> hashSet0 = new HashSet<Permission>(12, 12);
      WildcardPermission wildcardPermission0 = new WildcardPermission("[]");
      hashSet0.add((Permission) wildcardPermission0);
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount((PrincipalCollection) simplePrincipalCollection0, object0, "[]", set0, (Set<Permission>) hashSet0);
      assertEquals(false, simpleAuthorizingAccount0.isLocked());
  }

  @Test
  public void test9()  throws Throwable  {
      Object object0 = new Object();
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount(object0, object0, "Js]*I");
      SimpleAccount simpleAccount0 = new SimpleAccount(object0, object0, "Js]*I");
      simpleAuthorizingAccount0.merge((Account) simpleAccount0);
      assertEquals(false, simpleAuthorizingAccount0.isLocked());
  }

  @Test
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection(object0, ")@8-Nr2GW");
      Set<Object> set0 = simplePrincipalCollection0.asSet();
      Set<String> set1 = simplePrincipalCollection0.getRealmNames();
      HashSet<Permission> hashSet0 = new HashSet<Permission>(12, 12);
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount((Collection) set0, object0, ")@8-Nr2GW", set1, (Set<Permission>) hashSet0);
      simpleAuthorizingAccount0.merge((Account) simpleAuthorizingAccount0);
      assertEquals(false, simpleAuthorizingAccount0.isCredentialsExpired());
  }

  @Test
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection(object0, ")@8-Nr2GW");
      Set<Object> set0 = simplePrincipalCollection0.asSet();
      Set<String> set1 = simplePrincipalCollection0.getRealmNames();
      HashSet<Permission> hashSet0 = new HashSet<Permission>(12, 12);
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount((Collection) set0, object0, ")@8-Nr2GW", set1, (Set<Permission>) hashSet0);
      SimpleRole simpleRole0 = new SimpleRole(")@8-Nr2GW", (Set<Permission>) hashSet0);
      simpleAuthorizingAccount0.merge(simpleRole0);
      assertEquals(")@8-Nr2GW", simpleRole0.getName());
  }

  @Test
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection(object0, ")@8-Nr2GW");
      Set<Object> set0 = simplePrincipalCollection0.asSet();
      Set<String> set1 = simplePrincipalCollection0.getRealmNames();
      HashSet<Permission> hashSet0 = new HashSet<Permission>(12, 12);
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount((Collection) set0, object0, ")@8-Nr2GW", set1, (Set<Permission>) hashSet0);
      WildcardPermission wildcardPermission0 = new WildcardPermission("[]");
      hashSet0.add((Permission) wildcardPermission0);
      SimpleRole simpleRole0 = new SimpleRole(")@8-Nr2GW", (Set<Permission>) hashSet0);
      simpleAuthorizingAccount0.merge(simpleRole0);
      assertEquals(")@8-Nr2GW", simpleRole0.getName());
  }

  @Test
  public void test13()  throws Throwable  {
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      simpleAuthorizingAccount0.addPrivateRole((PrincipalCollection) null, (Collection<Permission>) null);
      SimpleRole simpleRole0 = new SimpleRole((String) null, (Set<Permission>) null);
      simpleAuthorizingAccount0.merge(simpleRole0);
      assertEquals(false, simpleAuthorizingAccount0.isCredentialsExpired());
  }

  @Test
  public void test14()  throws Throwable  {
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      LinkedHashSet<Permission> linkedHashSet0 = new LinkedHashSet<Permission>();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      simpleAuthorizingAccount0.addPrivateRole((PrincipalCollection) simplePrincipalCollection0, (Collection<Permission>) linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
  }

  @Test
  public void test15()  throws Throwable  {
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      HashSet<SimpleRole> hashSet0 = new HashSet<SimpleRole>();
      simpleAuthorizingAccount0.setSimpleRoles((Set<SimpleRole>) hashSet0);
      simpleAuthorizingAccount0.addRole("YJ;(vd!");
      assertEquals(false, simpleAuthorizingAccount0.isLocked());
  }

  @Test
  public void test16()  throws Throwable  {
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      simpleAuthorizingAccount0.addRole("");
      simpleAuthorizingAccount0.addRole("");
      assertEquals(false, simpleAuthorizingAccount0.isLocked());
  }

  @Test
  public void test17()  throws Throwable  {
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      simpleAuthorizingAccount0.addAll((Collection<SimpleRole>) null);
      assertEquals(false, simpleAuthorizingAccount0.isLocked());
  }

  @Test
  public void test18()  throws Throwable  {
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      HashSet<SimpleRole> hashSet0 = new HashSet<SimpleRole>();
      simpleAuthorizingAccount0.addAll((Collection<SimpleRole>) hashSet0);
      assertEquals(false, simpleAuthorizingAccount0.isCredentialsExpired());
  }

  @Test
  public void test19()  throws Throwable  {
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      HashSet<SimpleRole> hashSet0 = new HashSet<SimpleRole>();
      SimpleRole simpleRole0 = new SimpleRole();
      hashSet0.add(simpleRole0);
      simpleAuthorizingAccount0.addAll((Collection<SimpleRole>) hashSet0);
      assertEquals(false, hashSet0.isEmpty());
  }

  @Test
  public void test20()  throws Throwable  {
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      simpleAuthorizingAccount0.addPrivateRole((PrincipalCollection) null, (Collection<Permission>) null);
      HashSet<SimpleRole> hashSet0 = new HashSet<SimpleRole>();
      SimpleRole simpleRole0 = new SimpleRole();
      hashSet0.add(simpleRole0);
      simpleAuthorizingAccount0.addAll((Collection<SimpleRole>) hashSet0);
      assertEquals("[null]", hashSet0.toString());
  }

  @Test
  public void test21()  throws Throwable  {
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      treeSet0.add("[8@[]UPZQ1:CG{TwkQ");
      boolean boolean0 = simpleAuthorizingAccount0.hasAllRoles((Collection<String>) treeSet0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      Object object0 = new Object();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection(object0, ")@8-Nr2GW");
      Set<Object> set0 = simplePrincipalCollection0.asSet();
      Set<String> set1 = simplePrincipalCollection0.getRealmNames();
      HashSet<Permission> hashSet0 = new HashSet<Permission>(12, 12);
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount((Collection) set0, object0, ")@8-Nr2GW", set1, (Set<Permission>) hashSet0);
      simpleAuthorizingAccount0.checkRoles((Collection<String>) set1);
      assertEquals(1, set1.size());
  }

  @Test
  public void test23()  throws Throwable  {
      Object object0 = new Object();
      SimpleAuthenticationInfo simpleAuthenticationInfo0 = new SimpleAuthenticationInfo(object0, object0, ")@8-Nr2GW");
      SimplePrincipalCollection simplePrincipalCollection0 = (SimplePrincipalCollection)simpleAuthenticationInfo0.getPrincipals();
      LinkedList<Permission> linkedList0 = new LinkedList<Permission>();
      WildcardPermission wildcardPermission0 = new WildcardPermission("[]");
      HashSet<String> hashSet0 = new HashSet<String>();
      LinkedHashSet<Permission> linkedHashSet0 = new LinkedHashSet<Permission>();
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount((PrincipalCollection) simplePrincipalCollection0, object0, ")@8-Nr2GW", (Set<String>) hashSet0, (Set<Permission>) linkedHashSet0);
      linkedList0.add((Permission) wildcardPermission0);
      boolean[] booleanArray0 = simpleAuthorizingAccount0.isPermitted((List<Permission>) linkedList0);
      assertNotNull(booleanArray0);
  }

  @Test
  public void test24()  throws Throwable  {
      LinkedHashSet<Permission> linkedHashSet0 = new LinkedHashSet<Permission>();
      AllPermission allPermission0 = new AllPermission();
      linkedHashSet0.add((Permission) allPermission0);
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount((Collection) linkedHashSet0, (Object) "[]", "[]", (Set<String>) null, (Set<Permission>) linkedHashSet0);
      simpleAuthorizingAccount0.checkPermissions((Collection<Permission>) linkedHashSet0);
      assertEquals(1, linkedHashSet0.size());
  }

  @Test
  public void test25()  throws Throwable  {
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      HashSet<SimpleRole> hashSet0 = new HashSet<SimpleRole>();
      simpleAuthorizingAccount0.setSimpleRoles((Set<SimpleRole>) hashSet0);
      AllPermission allPermission0 = new AllPermission();
      boolean boolean0 = simpleAuthorizingAccount0.isPermitted((Permission) allPermission0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test26()  throws Throwable  {
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      simpleAuthorizingAccount0.addRole("");
      WildcardPermission wildcardPermission0 = new WildcardPermission("", false);
      try {
        simpleAuthorizingAccount0.checkPermission((Permission) wildcardPermission0);
        fail("Expecting exception: UnauthorizedException");
      } catch(UnauthorizedException e) {
        /*
         * User is not permitted [org.jsecurity.authz.permission.WildcardPermission@1fabd311]
         */
      }
  }

  @Test
  public void test27()  throws Throwable  {
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      boolean[] booleanArray0 = simpleAuthorizingAccount0.hasRoles((List<String>) null);
      assertNotNull(booleanArray0);
  }

  @Test
  public void test28()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount((PrincipalCollection) simplePrincipalCollection0, (Object) simplePrincipalCollection0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("t6E");
      boolean[] booleanArray0 = simpleAuthorizingAccount0.hasRoles((List<String>) linkedList0);
      assertNotNull(booleanArray0);
  }

  @Test
  public void test29()  throws Throwable  {
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      boolean boolean0 = simpleAuthorizingAccount0.hasAllRoles((Collection<String>) null);
      assertEquals(true, boolean0);
  }

  @Test
  public void test30()  throws Throwable  {
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      boolean boolean0 = simpleAuthorizingAccount0.hasAllRoles((Collection<String>) treeSet0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test31()  throws Throwable  {
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      treeSet0.add("YJ;(vd!");
      simpleAuthorizingAccount0.addRole("YJ;(vd!");
      boolean boolean0 = simpleAuthorizingAccount0.hasAllRoles((Collection<String>) treeSet0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test32()  throws Throwable  {
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      boolean[] booleanArray0 = simpleAuthorizingAccount0.isPermitted((List<Permission>) null);
      assertNotNull(booleanArray0);
  }

  @Test
  public void test33()  throws Throwable  {
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      LinkedList<Permission> linkedList0 = new LinkedList<Permission>();
      boolean[] booleanArray0 = simpleAuthorizingAccount0.isPermitted((List<Permission>) linkedList0);
      assertNotNull(booleanArray0);
  }

  @Test
  public void test34()  throws Throwable  {
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      boolean boolean0 = simpleAuthorizingAccount0.isPermittedAll((Collection<Permission>) null);
      assertEquals(true, boolean0);
  }

  @Test
  public void test35()  throws Throwable  {
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      LinkedList<Permission> linkedList0 = new LinkedList<Permission>();
      boolean boolean0 = simpleAuthorizingAccount0.isPermittedAll((Collection<Permission>) linkedList0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test36()  throws Throwable  {
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      LinkedList<Permission> linkedList0 = new LinkedList<Permission>();
      WildcardPermission wildcardPermission0 = new WildcardPermission("[8@[]UPZQ1:CG{TwkQ");
      linkedList0.add((Permission) wildcardPermission0);
      boolean boolean0 = simpleAuthorizingAccount0.isPermittedAll((Collection<Permission>) linkedList0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test37()  throws Throwable  {
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      TreeSet<Permission> treeSet0 = new TreeSet<Permission>();
      AllPermission allPermission0 = new AllPermission();
      treeSet0.add((Permission) allPermission0);
      SimpleRole simpleRole0 = new SimpleRole();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection((Object) simpleRole0, ".c{m%/.kpp");
      simpleAuthorizingAccount0.addPrivateRole((PrincipalCollection) simplePrincipalCollection0, (Collection<Permission>) treeSet0);
      boolean boolean0 = simpleAuthorizingAccount0.isPermittedAll((Collection<Permission>) treeSet0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test38()  throws Throwable  {
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      simpleAuthorizingAccount0.checkPermissions((Collection<Permission>) null);
      assertEquals(false, simpleAuthorizingAccount0.isLocked());
  }

  @Test
  public void test39()  throws Throwable  {
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      LinkedHashSet<Permission> linkedHashSet0 = new LinkedHashSet<Permission>();
      simpleAuthorizingAccount0.checkPermissions((Collection<Permission>) linkedHashSet0);
      assertEquals(false, simpleAuthorizingAccount0.isCredentialsExpired());
  }

  @Test
  public void test40()  throws Throwable  {
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      simpleAuthorizingAccount0.checkRoles((Collection<String>) null);
      assertEquals(false, simpleAuthorizingAccount0.isLocked());
  }

  @Test
  public void test41()  throws Throwable  {
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      simpleAuthorizingAccount0.checkRoles((Collection<String>) linkedList0);
      assertEquals("[]", linkedList0.toString());
  }
}
