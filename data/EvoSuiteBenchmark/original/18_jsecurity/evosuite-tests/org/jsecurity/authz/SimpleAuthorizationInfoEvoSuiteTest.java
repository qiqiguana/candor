/*
 * This file was automatically generated by EvoSuite
 */

package org.jsecurity.authz;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Set;
import java.util.TreeSet;
import org.jsecurity.authz.Permission;
import org.jsecurity.authz.SimpleAuthorizationInfo;
import org.jsecurity.authz.permission.WildcardPermission;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SimpleAuthorizationInfoEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SimpleAuthorizationInfo simpleAuthorizationInfo0 = new SimpleAuthorizationInfo();
      LinkedHashSet<Permission> linkedHashSet0 = new LinkedHashSet<Permission>();
      simpleAuthorizationInfo0.setObjectPermissions((Set<Permission>) linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      SimpleAuthorizationInfo simpleAuthorizationInfo0 = new SimpleAuthorizationInfo();
      Set<Permission> set0 = (Set<Permission>)simpleAuthorizationInfo0.getObjectPermissions();
      assertNull(set0);
  }

  @Test
  public void test2()  throws Throwable  {
      SimpleAuthorizationInfo simpleAuthorizationInfo0 = new SimpleAuthorizationInfo();
      HashSet<String> hashSet0 = new HashSet<String>();
      simpleAuthorizationInfo0.setStringPermissions((Set<String>) hashSet0);
      simpleAuthorizationInfo0.addStringPermission("C/?");
  }

  @Test
  public void test3()  throws Throwable  {
      SimpleAuthorizationInfo simpleAuthorizationInfo0 = new SimpleAuthorizationInfo();
      HashSet<String> hashSet0 = new HashSet<String>();
      simpleAuthorizationInfo0.setRoles((Set<String>) hashSet0);
      assertEquals(0, hashSet0.size());
  }

  @Test
  public void test4()  throws Throwable  {
      SimpleAuthorizationInfo simpleAuthorizationInfo0 = new SimpleAuthorizationInfo();
      Set<String> set0 = (Set<String>)simpleAuthorizationInfo0.getRoles();
      // Undeclared exception!
      try {
        simpleAuthorizationInfo0.addStringPermissions((Collection<String>) set0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      SimpleAuthorizationInfo simpleAuthorizationInfo0 = new SimpleAuthorizationInfo((Set<String>) null);
      assertNotNull(simpleAuthorizationInfo0);
  }

  @Test
  public void test6()  throws Throwable  {
      SimpleAuthorizationInfo simpleAuthorizationInfo0 = new SimpleAuthorizationInfo();
      Set<String> set0 = (Set<String>)simpleAuthorizationInfo0.getStringPermissions();
      assertNull(set0);
  }

  @Test
  public void test7()  throws Throwable  {
      SimpleAuthorizationInfo simpleAuthorizationInfo0 = new SimpleAuthorizationInfo();
      simpleAuthorizationInfo0.addRole("");
      simpleAuthorizationInfo0.addRole("u(&d`%7]$ihT5yl$W");
  }

  @Test
  public void test8()  throws Throwable  {
      SimpleAuthorizationInfo simpleAuthorizationInfo0 = new SimpleAuthorizationInfo();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      simpleAuthorizationInfo0.addRoles((Collection<String>) treeSet0);
      simpleAuthorizationInfo0.addRoles((Collection<String>) treeSet0);
      assertEquals("[]", treeSet0.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      SimpleAuthorizationInfo simpleAuthorizationInfo0 = new SimpleAuthorizationInfo();
      simpleAuthorizationInfo0.addStringPermission("");
  }

  @Test
  public void test10()  throws Throwable  {
      SimpleAuthorizationInfo simpleAuthorizationInfo0 = new SimpleAuthorizationInfo();
      HashSet<String> hashSet0 = new HashSet<String>();
      simpleAuthorizationInfo0.setStringPermissions((Set<String>) hashSet0);
      // Undeclared exception!
      try {
        simpleAuthorizationInfo0.addStringPermissions((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      SimpleAuthorizationInfo simpleAuthorizationInfo0 = new SimpleAuthorizationInfo();
      LinkedList<Permission> linkedList0 = new LinkedList<Permission>();
      simpleAuthorizationInfo0.addObjectPermissions((Collection<Permission>) linkedList0);
      WildcardPermission wildcardPermission0 = new WildcardPermission("zK'y8rm");
      simpleAuthorizationInfo0.addObjectPermission((Permission) wildcardPermission0);
  }

  @Test
  public void test12()  throws Throwable  {
      SimpleAuthorizationInfo simpleAuthorizationInfo0 = new SimpleAuthorizationInfo();
      WildcardPermission wildcardPermission0 = new WildcardPermission("*", false);
      simpleAuthorizationInfo0.addObjectPermission((Permission) wildcardPermission0);
  }

  @Test
  public void test13()  throws Throwable  {
      SimpleAuthorizationInfo simpleAuthorizationInfo0 = new SimpleAuthorizationInfo();
      LinkedList<Permission> linkedList0 = new LinkedList<Permission>();
      simpleAuthorizationInfo0.addObjectPermissions((Collection<Permission>) linkedList0);
      simpleAuthorizationInfo0.addObjectPermissions((Collection<Permission>) linkedList0);
      assertEquals("[]", linkedList0.toString());
  }
}
