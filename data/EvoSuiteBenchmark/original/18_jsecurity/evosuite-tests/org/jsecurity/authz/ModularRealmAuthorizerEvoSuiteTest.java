/*
 * This file was automatically generated by EvoSuite
 */

package org.jsecurity.authz;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import org.jsecurity.authz.AuthorizationException;
import org.jsecurity.authz.ModularRealmAuthorizer;
import org.jsecurity.authz.Permission;
import org.jsecurity.authz.UnauthorizedException;
import org.jsecurity.authz.permission.AllPermission;
import org.jsecurity.authz.permission.PermissionResolver;
import org.jsecurity.authz.permission.WildcardPermission;
import org.jsecurity.authz.permission.WildcardPermissionResolver;
import org.jsecurity.realm.Realm;
import org.jsecurity.realm.SimpleAccountRealm;
import org.jsecurity.subject.PrincipalCollection;
import org.jsecurity.subject.SimplePrincipalCollection;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ModularRealmAuthorizerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection((Object) "org.jsecurity.realm.SimpleAccountRealm_21076", "org.jsecurity.realm.SimpleAccountRealm_21076");
      Set<String> set0 = simplePrincipalCollection0.getRealmNames();
      // Undeclared exception!
      try {
        modularRealmAuthorizer0.hasAllRoles((PrincipalCollection) simplePrincipalCollection0, (Collection<String>) set0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Configuration error:  No realms have been configured!  One or more realms must be present to execute an authorization operation.
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      LinkedList<Realm> linkedList0 = new LinkedList<Realm>();
      ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer((Collection<Realm>) linkedList0);
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      linkedList0.add((Realm) simpleAccountRealm0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.addFirst("[]");
      boolean[] booleanArray0 = modularRealmAuthorizer0.hasRoles((PrincipalCollection) null, (List<String>) linkedList1);
      assertNotNull(booleanArray0);
  }

  @Test
  public void test2()  throws Throwable  {
      ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer();
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      modularRealmAuthorizer0.setPermissionResolver((PermissionResolver) wildcardPermissionResolver0);
  }

  @Test
  public void test3()  throws Throwable  {
      ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer();
      TreeSet<Realm> treeSet0 = new TreeSet<Realm>();
      modularRealmAuthorizer0.setRealms((Collection<Realm>) treeSet0);
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      modularRealmAuthorizer0.setPermissionResolver((PermissionResolver) wildcardPermissionResolver0);
  }

  @Test
  public void test4()  throws Throwable  {
      ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer();
      TreeSet<Realm> treeSet0 = new TreeSet<Realm>();
      modularRealmAuthorizer0.setRealms((Collection<Realm>) treeSet0);
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      treeSet0.add((Realm) simpleAccountRealm0);
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      modularRealmAuthorizer0.setPermissionResolver((PermissionResolver) wildcardPermissionResolver0);
  }

  @Test
  public void test5()  throws Throwable  {
      ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer();
      TreeSet<Realm> treeSet0 = new TreeSet<Realm>();
      modularRealmAuthorizer0.setRealms((Collection<Realm>) treeSet0);
      treeSet0.add((Realm) null);
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      modularRealmAuthorizer0.setPermissionResolver((PermissionResolver) wildcardPermissionResolver0);
  }

  @Test
  public void test6()  throws Throwable  {
      LinkedList<Realm> linkedList0 = new LinkedList<Realm>();
      ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer((Collection<Realm>) linkedList0);
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      linkedList0.add((Realm) simpleAccountRealm0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "[]";
      try {
        modularRealmAuthorizer0.checkPermissions((PrincipalCollection) null, stringArray0);
        fail("Expecting exception: UnauthorizedException");
      } catch(UnauthorizedException e) {
        /*
         * Subject does not have permission [[]]
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer();
      TreeSet<Realm> treeSet0 = new TreeSet<Realm>();
      modularRealmAuthorizer0.setRealms((Collection<Realm>) treeSet0);
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      treeSet0.add((Realm) simpleAccountRealm0);
      WildcardPermission wildcardPermission0 = new WildcardPermission("UTF-8");
      try {
        modularRealmAuthorizer0.checkPermission((PrincipalCollection) null, (Permission) wildcardPermission0);
        fail("Expecting exception: UnauthorizedException");
      } catch(UnauthorizedException e) {
        /*
         * Subject does not have permission [org.jsecurity.authz.permission.WildcardPermission@4b95fb97]
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      TreeSet<Realm> treeSet0 = new TreeSet<Realm>();
      ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer((Collection<Realm>) treeSet0);
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      boolean[] booleanArray0 = modularRealmAuthorizer0.isPermitted((PrincipalCollection) simplePrincipalCollection0, (String[]) null);
      assertNotNull(booleanArray0);
  }

  @Test
  public void test9()  throws Throwable  {
      LinkedList<Realm> linkedList0 = new LinkedList<Realm>();
      ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer((Collection<Realm>) linkedList0);
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      linkedList0.add((Realm) simpleAccountRealm0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "3@H.6G>Y0rz";
      stringArray0[1] = "3@H.6G>Y0rz";
      stringArray0[2] = "3@H.6G>Y0rz";
      stringArray0[3] = "3@H.6G>Y0rz";
      stringArray0[4] = "3@H.6G>Y0rz";
      stringArray0[5] = "3@H.6G>Y0rz";
      stringArray0[6] = "3@H.6G>Y0rz";
      stringArray0[7] = "3@H.6G>Y0rz";
      stringArray0[8] = "3@H.6G>Y0rz";
      boolean[] booleanArray0 = modularRealmAuthorizer0.isPermitted((PrincipalCollection) null, stringArray0);
      assertNotNull(booleanArray0);
  }

  @Test
  public void test10()  throws Throwable  {
      TreeSet<Realm> treeSet0 = new TreeSet<Realm>();
      ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer((Collection<Realm>) treeSet0);
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      boolean[] booleanArray0 = modularRealmAuthorizer0.isPermitted((PrincipalCollection) simplePrincipalCollection0, (List<Permission>) null);
      assertNotNull(booleanArray0);
  }

  @Test
  public void test11()  throws Throwable  {
      ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      LinkedList<Permission> linkedList0 = new LinkedList<Permission>();
      boolean[] booleanArray0 = modularRealmAuthorizer0.isPermitted((PrincipalCollection) simplePrincipalCollection0, (List<Permission>) linkedList0);
      assertNotNull(booleanArray0);
  }

  @Test
  public void test12()  throws Throwable  {
      ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      LinkedList<Permission> linkedList0 = new LinkedList<Permission>();
      AllPermission allPermission0 = new AllPermission();
      linkedList0.add((Permission) allPermission0);
      // Undeclared exception!
      try {
        modularRealmAuthorizer0.isPermitted((PrincipalCollection) simplePrincipalCollection0, (List<Permission>) linkedList0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Configuration error:  No realms have been configured!  One or more realms must be present to execute an authorization operation.
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      boolean boolean0 = modularRealmAuthorizer0.isPermittedAll((PrincipalCollection) simplePrincipalCollection0, (String[]) null);
      assertEquals(true, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      LinkedList<Realm> linkedList0 = new LinkedList<Realm>();
      ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer((Collection<Realm>) linkedList0);
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try {
        modularRealmAuthorizer0.isPermittedAll((PrincipalCollection) null, stringArray0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Configuration error:  No realms have been configured!  One or more realms must be present to execute an authorization operation.
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      LinkedList<Realm> linkedList0 = new LinkedList<Realm>();
      ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer((Collection<Realm>) linkedList0);
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      linkedList0.add((Realm) simpleAccountRealm0);
      assertEquals("org.jsecurity.realm.SimpleAccountRealm_157", simpleAccountRealm0.getName());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "3@H.6G>Y0rz";
      boolean boolean0 = modularRealmAuthorizer0.isPermittedAll((PrincipalCollection) null, stringArray0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      TreeSet<Realm> treeSet0 = new TreeSet<Realm>();
      ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer((Collection<Realm>) treeSet0);
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      boolean boolean0 = modularRealmAuthorizer0.isPermittedAll((PrincipalCollection) simplePrincipalCollection0, (Collection<Permission>) null);
      assertEquals(true, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      HashSet<Permission> hashSet0 = new HashSet<Permission>();
      boolean boolean0 = modularRealmAuthorizer0.isPermittedAll((PrincipalCollection) simplePrincipalCollection0, (Collection<Permission>) hashSet0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      HashSet<Permission> hashSet0 = new HashSet<Permission>();
      AllPermission allPermission0 = new AllPermission();
      hashSet0.add((Permission) allPermission0);
      // Undeclared exception!
      try {
        modularRealmAuthorizer0.isPermittedAll((PrincipalCollection) simplePrincipalCollection0, (Collection<Permission>) hashSet0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Configuration error:  No realms have been configured!  One or more realms must be present to execute an authorization operation.
         */
      }
  }

  @Test
  public void test19()  throws Throwable  {
      TreeSet<Realm> treeSet0 = new TreeSet<Realm>();
      ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer((Collection<Realm>) treeSet0);
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      modularRealmAuthorizer0.checkPermissions((PrincipalCollection) simplePrincipalCollection0, (Collection<Permission>) null);
      assertEquals(true, simplePrincipalCollection0.isEmpty());
  }

  @Test
  public void test20()  throws Throwable  {
      ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      LinkedList<Permission> linkedList0 = new LinkedList<Permission>();
      modularRealmAuthorizer0.checkPermissions((PrincipalCollection) simplePrincipalCollection0, (Collection<Permission>) linkedList0);
      assertEquals(true, simplePrincipalCollection0.isEmpty());
  }

  @Test
  public void test21()  throws Throwable  {
      ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      LinkedList<Permission> linkedList0 = new LinkedList<Permission>();
      linkedList0.add((Permission) null);
      // Undeclared exception!
      try {
        modularRealmAuthorizer0.checkPermissions((PrincipalCollection) simplePrincipalCollection0, (Collection<Permission>) linkedList0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Configuration error:  No realms have been configured!  One or more realms must be present to execute an authorization operation.
         */
      }
  }

  @Test
  public void test22()  throws Throwable  {
      TreeSet<Realm> treeSet0 = new TreeSet<Realm>();
      ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer((Collection<Realm>) treeSet0);
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      boolean[] booleanArray0 = modularRealmAuthorizer0.hasRoles((PrincipalCollection) simplePrincipalCollection0, (List<String>) null);
      assertNotNull(booleanArray0);
  }

  @Test
  public void test23()  throws Throwable  {
      LinkedList<Realm> linkedList0 = new LinkedList<Realm>();
      ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer((Collection<Realm>) linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      boolean[] booleanArray0 = modularRealmAuthorizer0.hasRoles((PrincipalCollection) null, (List<String>) linkedList1);
      assertNotNull(booleanArray0);
  }

  @Test
  public void test24()  throws Throwable  {
      HashSet<Realm> hashSet0 = new HashSet<Realm>();
      ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer((Collection<Realm>) hashSet0);
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection((Object) "UTF-8", "UTF-8");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      boolean boolean0 = modularRealmAuthorizer0.hasAllRoles((PrincipalCollection) simplePrincipalCollection0, (Collection<String>) treeSet0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test25()  throws Throwable  {
      LinkedList<Realm> linkedList0 = new LinkedList<Realm>();
      ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer((Collection<Realm>) linkedList0);
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      linkedList0.add((Realm) simpleAccountRealm0);
      try {
        modularRealmAuthorizer0.checkRole((PrincipalCollection) null, "3@H.6G>Y0rz");
        fail("Expecting exception: UnauthorizedException");
      } catch(UnauthorizedException e) {
        /*
         * Subject does not have role [3@H.6G>Y0rz]
         */
      }
  }

  @Test
  public void test26()  throws Throwable  {
      TreeSet<Realm> treeSet0 = new TreeSet<Realm>();
      ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer((Collection<Realm>) treeSet0);
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      modularRealmAuthorizer0.checkRoles((PrincipalCollection) simplePrincipalCollection0, (Collection<String>) null);
      assertEquals(true, simplePrincipalCollection0.isEmpty());
  }

  @Test
  public void test27()  throws Throwable  {
      ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      modularRealmAuthorizer0.checkRoles((PrincipalCollection) null, (Collection<String>) treeSet0);
      assertEquals(0, treeSet0.size());
  }
}
