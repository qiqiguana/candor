/*
 * This file was automatically generated by EvoSuite
 */

package org.jsecurity.authz;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.TreeSet;
import org.jsecurity.authz.Permission;
import org.jsecurity.authz.SimpleRole;
import org.jsecurity.authz.permission.AllPermission;
import org.jsecurity.authz.permission.WildcardPermission;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SimpleRoleEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LinkedHashSet<Permission> linkedHashSet0 = new LinkedHashSet<Permission>();
      SimpleRole simpleRole0 = new SimpleRole("c('L#dQ-^pohv\"", (Set<Permission>) linkedHashSet0);
      int int0 = simpleRole0.hashCode();
      assertEquals(527863006, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      LinkedHashSet<Permission> linkedHashSet0 = new LinkedHashSet<Permission>();
      AllPermission allPermission0 = new AllPermission();
      linkedHashSet0.add((Permission) allPermission0);
      SimpleRole simpleRole0 = new SimpleRole("c('L#dQ-^pohv\"", (Set<Permission>) linkedHashSet0);
      simpleRole0.addAll((Collection<Permission>) linkedHashSet0);
      assertEquals(1, linkedHashSet0.size());
  }

  @Test
  public void test2()  throws Throwable  {
      SimpleRole simpleRole0 = new SimpleRole("|ua$)W`Z*pQ5\"");
      String string0 = simpleRole0.toString();
      assertEquals("|ua$)W`Z*pQ5\"", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      SimpleRole simpleRole0 = new SimpleRole();
      TreeSet<Permission> treeSet0 = new TreeSet<Permission>();
      SimpleRole simpleRole1 = new SimpleRole("Wildcard string cannot contain only dividers. Make sure permission strings are properly formatted.", (Set<Permission>) treeSet0);
      boolean boolean0 = simpleRole0.equals((Object) simpleRole1);
      assertEquals(false, boolean0);
      assertTrue(simpleRole1.equals(simpleRole0));
  }

  @Test
  public void test4()  throws Throwable  {
      SimpleRole simpleRole0 = new SimpleRole("kQd6M=");
      AllPermission allPermission0 = new AllPermission();
      simpleRole0.add((Permission) allPermission0);
      simpleRole0.add((Permission) null);
      assertEquals("kQd6M=", simpleRole0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      SimpleRole simpleRole0 = new SimpleRole("kQd6M=");
      simpleRole0.addAll((Collection<Permission>) null);
      assertEquals("kQd6M=", simpleRole0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      SimpleRole simpleRole0 = new SimpleRole("kQd6M=");
      TreeSet<Permission> treeSet0 = new TreeSet<Permission>();
      simpleRole0.addAll((Collection<Permission>) treeSet0);
      assertEquals("kQd6M=", simpleRole0.getName());
  }

  @Test
  public void test7()  throws Throwable  {
      LinkedHashSet<Permission> linkedHashSet0 = new LinkedHashSet<Permission>();
      AllPermission allPermission0 = new AllPermission();
      linkedHashSet0.add((Permission) allPermission0);
      SimpleRole simpleRole0 = new SimpleRole("");
      simpleRole0.addAll((Collection<Permission>) linkedHashSet0);
      assertEquals("", simpleRole0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      SimpleRole simpleRole0 = new SimpleRole((String) null);
      AllPermission allPermission0 = new AllPermission();
      boolean boolean0 = simpleRole0.isPermitted((Permission) allPermission0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      SimpleRole simpleRole0 = new SimpleRole("|ua$)W`Z*pQ5\"");
      WildcardPermission wildcardPermission0 = new WildcardPermission("|ua$)W`Z*pQ5\"", true);
      simpleRole0.add((Permission) wildcardPermission0);
      boolean boolean0 = simpleRole0.isPermitted((Permission) wildcardPermission0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      AllPermission allPermission0 = new AllPermission();
      TreeSet<Permission> treeSet0 = new TreeSet<Permission>();
      SimpleRole simpleRole0 = new SimpleRole("", (Set<Permission>) treeSet0);
      boolean boolean0 = simpleRole0.isPermitted((Permission) allPermission0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      SimpleRole simpleRole0 = new SimpleRole("|ua$)W`Z*pQ5\"");
      WildcardPermission wildcardPermission0 = new WildcardPermission("|ua$)W`Z*pQ5\"", true);
      simpleRole0.add((Permission) wildcardPermission0);
      WildcardPermission wildcardPermission1 = new WildcardPermission("|ua$)W`Z*pQ5\"", false);
      boolean boolean0 = simpleRole0.isPermitted((Permission) wildcardPermission1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      SimpleRole simpleRole0 = new SimpleRole((String) null);
      int int0 = simpleRole0.hashCode();
      assertEquals(0, int0);
  }

  @Test
  public void test13()  throws Throwable  {
      SimpleRole simpleRole0 = new SimpleRole((String) null);
      boolean boolean0 = simpleRole0.equals((Object) "[]");
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      SimpleRole simpleRole0 = new SimpleRole("kQd6M=");
      SimpleRole simpleRole1 = new SimpleRole("", (Set<Permission>) null);
      boolean boolean0 = simpleRole0.equals((Object) simpleRole1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      SimpleRole simpleRole0 = new SimpleRole((String) null);
      SimpleRole simpleRole1 = new SimpleRole();
      boolean boolean0 = simpleRole0.equals((Object) simpleRole1);
      assertEquals(true, boolean0);
  }
}
