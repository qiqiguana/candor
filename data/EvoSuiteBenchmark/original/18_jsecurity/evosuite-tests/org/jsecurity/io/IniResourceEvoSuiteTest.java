/*
 * This file was automatically generated by EvoSuite
 */

package org.jsecurity.io;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.CharArrayReader;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.Reader;
import java.util.Map;
import java.util.Scanner;
import org.jsecurity.io.IniResource;
import org.jsecurity.io.ResourceException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class IniResourceEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      IniResource iniResource0 = new IniResource();
      Scanner scanner0 = new Scanner("#.\u0000H\u00000Jlb.");
      iniResource0.load(scanner0);
      assertEquals("java.util.Scanner[delimiters=\\p{javaWhitespace}+][position=10][match valid=false][need input=false][source closed=true][skipped=false][group separator=\\,][decimal separator=\\.][positive prefix=][negative prefix=\\Q-\\E][positive suffix=][negative suffix=][NaN string=\\Q\uFFFD\\E][infinity string=\\Q\u221E\\E]", scanner0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      IniResource iniResource0 = null;
      try {
        iniResource0 = new IniResource("]");
        fail("Expecting exception: ResourceException");
      } catch(ResourceException e) {
        /*
         * Unable to load text resource from the resource path []]
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IniResource iniResource0 = new IniResource((InputStream) pipedInputStream0);
      Map<String, Map<String, String>> map0 = iniResource0.getSections();
      iniResource0.setSections(map0);
      assertNull(iniResource0.getCharsetName());
  }

  @Test
  public void test3()  throws Throwable  {
      IniResource iniResource0 = null;
      try {
        iniResource0 = new IniResource("[Z6 7`lb7YjS}e0[C", "[Z6 7`lb7YjS}e0[C");
        fail("Expecting exception: ResourceException");
      } catch(ResourceException e) {
        /*
         * Unable to load text resource from the resource path [[Z6 7`lb7YjS}e0[C]
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      char[] charArray0 = new char[24];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      Scanner scanner0 = new Scanner((Readable) charArrayReader0);
      IniResource iniResource0 = new IniResource(scanner0);
      assertNull(iniResource0.getCharsetName());
  }

  @Test
  public void test5()  throws Throwable  {
      IniResource iniResource0 = new IniResource();
      Scanner scanner0 = new Scanner("[$^\uFFFD]");
      iniResource0.load(scanner0);
      assertEquals(false, scanner0.hasNextLine());
  }

  @Test
  public void test6()  throws Throwable  {
      char[] charArray0 = new char[9];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArray0[8] = ';';
      IniResource iniResource0 = new IniResource((Reader) charArrayReader0);
      assertNull(iniResource0.getCharsetName());
  }

  @Test
  public void test7()  throws Throwable  {
      char[] charArray0 = new char[24];
      charArray0[3] = '=';
      charArray0[0] = '*';
      charArray0[8] = '*';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      Scanner scanner0 = new Scanner((Readable) charArrayReader0);
      IniResource iniResource0 = new IniResource(scanner0);
      assertNull(iniResource0.getCharsetName());
  }

  @Test
  public void test8()  throws Throwable  {
      boolean boolean0 = IniResource.isSectionHeader("");
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      boolean boolean0 = IniResource.isSectionHeader("[.\u0000h\u00000<tv.");
      assertEquals(false, boolean0);
  }
}
