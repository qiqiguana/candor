/*
 * This file was automatically generated by EvoSuite
 */

package org.jsecurity.io;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.net.MalformedURLException;
import org.jsecurity.io.ResourceUtils;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ResourceUtilsEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      try {
        ResourceUtils.getInputStreamForPath("url:Ha6 Q\"~9~CD[W&U");
        fail("Expecting exception: MalformedURLException");
      } catch(MalformedURLException e) {
        /*
         * no protocol: Ha6 Q\"~9~CD[W&U
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      boolean boolean0 = ResourceUtils.hasResourcePrefix((String) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      boolean boolean0 = ResourceUtils.hasResourcePrefix("a");
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      boolean boolean0 = ResourceUtils.hasResourcePrefix("classpath:;");
      assertEquals(true, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      boolean boolean0 = ResourceUtils.hasResourcePrefix("url:");
      assertEquals(true, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      boolean boolean0 = ResourceUtils.hasResourcePrefix("file:cnn>_(");
      assertEquals(true, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      boolean boolean0 = ResourceUtils.resourceExists("a");
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      // Undeclared exception!
      try {
        ResourceUtils.resourceExists((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      boolean boolean0 = ResourceUtils.resourceExists("classpath:;");
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      try {
        ResourceUtils.getInputStreamForPath("file:cnn>_(");
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
        /*
         * cnn>_( (No such file or directory)
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      ResourceUtils.close((InputStream) null);
  }

  @Test
  public void test11()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ResourceUtils.close((InputStream) pipedInputStream0);
      assertEquals(false, pipedInputStream0.markSupported());
  }
}
