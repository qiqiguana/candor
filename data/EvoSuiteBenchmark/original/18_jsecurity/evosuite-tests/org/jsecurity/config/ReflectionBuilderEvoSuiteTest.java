/*
 * This file was automatically generated by EvoSuite
 */

package org.jsecurity.config;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.HashMap;
import java.util.Map;
import net.sf.ehcache.CacheManager;
import org.jsecurity.config.ConfigurationException;
import org.jsecurity.config.ReflectionBuilder;
import org.jsecurity.config.UnresolveableReferenceException;
import org.jsecurity.util.Nameable;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ReflectionBuilderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ReflectionBuilder reflectionBuilder0 = new ReflectionBuilder();
      Map<Object, Object> map0 = reflectionBuilder0.getObjects();
      assertEquals(true, map0.isEmpty());
  }

  @Test
  public void test1()  throws Throwable  {
      ReflectionBuilder reflectionBuilder0 = new ReflectionBuilder();
      // Undeclared exception!
      try {
        reflectionBuilder0.getId("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
        /*
         * String index out of range: -1
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      HashMap<String, ReflectionBuilder> hashMap0 = new HashMap<String, ReflectionBuilder>();
      ReflectionBuilder reflectionBuilder0 = new ReflectionBuilder((Map) hashMap0);
      hashMap0.put("", reflectionBuilder0);
      // Undeclared exception!
      try {
        reflectionBuilder0.createNewInstance((Map) hashMap0, "", "I");
        fail("Expecting exception: ConfigurationException");
      } catch(ConfigurationException e) {
        /*
         * Unable to instantiate class [I] for object named ''.  Please ensure you've specified the fully qualified class name correctly.
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      ReflectionBuilder reflectionBuilder0 = new ReflectionBuilder();
      Map<Object, Object> map0 = reflectionBuilder0.buildObjects((Map<String, String>) null);
      reflectionBuilder0.createNewInstance((Map) map0, "net.sf.ehcache.CacheManager", "net.sf.ehcache.CacheManager");
      CacheManager cacheManager0 = (CacheManager)reflectionBuilder0.getReferencedObject("net.sf.ehcache.CacheManager");
      assertNotNull(cacheManager0);
  }

  @Test
  public void test4()  throws Throwable  {
      ReflectionBuilder reflectionBuilder0 = new ReflectionBuilder();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Map<Object, Object> map0 = reflectionBuilder0.buildObjects((Map<String, String>) hashMap0);
      assertEquals(true, map0.isEmpty());
  }

  @Test
  public void test5()  throws Throwable  {
      ReflectionBuilder reflectionBuilder0 = new ReflectionBuilder();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Attempting to inject the FilterConfig (using 'setFilterConfig' method) into the instantiated WebConfiguration for any wrapped Filter initialization...", "Attempting to inject the FilterConfig (using 'setFilterConfig' method) into the instantiated WebConfiguration for any wrapped Filter initialization...");
      // Undeclared exception!
      try {
        reflectionBuilder0.buildObjects((Map<String, String>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Configuration error.  Specified object [Attempting to inject the FilterConfig (using 'setFilterConfig' method) into the instantiated WebConfiguration for any wrapped Filter initialization] with property [..] without first defining that object's class.  Please first specify the class property first, e.g. myObject.class = fully_qualified_class_name and then define additional properties.
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      ReflectionBuilder reflectionBuilder0 = new ReflectionBuilder();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put(" to manage classloader ", " to manage classloader ");
      // Undeclared exception!
      try {
        reflectionBuilder0.buildObjects((Map<String, String>) hashMap0);
        fail("Expecting exception: ConfigurationException");
      } catch(ConfigurationException e) {
        /*
         * Unable to instantiate class [ to manage classloader ] for object named ' to manage classloader '.  Please ensure you've specified the fully qualified class name correctly.
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      ReflectionBuilder reflectionBuilder0 = new ReflectionBuilder();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put(".class", ".class");
      // Undeclared exception!
      try {
        reflectionBuilder0.buildObjects((Map<String, String>) hashMap0);
        fail("Expecting exception: ConfigurationException");
      } catch(ConfigurationException e) {
        /*
         * Unable to instantiate class [.class] for object named '.class'.  Please ensure you've specified the fully qualified class name correctly.
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      ReflectionBuilder reflectionBuilder0 = new ReflectionBuilder();
      HashMap<Map.Entry<String, Nameable>, Nameable> hashMap0 = new HashMap<Map.Entry<String, Nameable>, Nameable>();
      // Undeclared exception!
      try {
        reflectionBuilder0.applyProperty("J", "J", (Map) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * All property keys must contain a '.' character. (e.g. myBean.property = value)  These should already be separated out by buildObjects().
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      ReflectionBuilder reflectionBuilder0 = new ReflectionBuilder();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("v#O2N!eiQxEIp", "v#O2N!eiQxEIp");
      reflectionBuilder0.applyGlobalProperty((Map) hashMap0, "v#O2N!eiQxEIp", "v#O2N!eiQxEIp");
      assertEquals("{v#O2N!eiQxEIp=v#O2N!eiQxEIp}", hashMap0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      ReflectionBuilder reflectionBuilder0 = new ReflectionBuilder();
      HashMap<Nameable, Nameable> hashMap0 = new HashMap<Nameable, Nameable>();
      // Undeclared exception!
      try {
        reflectionBuilder0.applyProperty(".class", "2@TIeY90FUJA0!v`AT", (Map) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Property keys should not contain 'class' properties since these should already be separated out by buildObjects().
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      HashMap<String, ReflectionBuilder> hashMap0 = new HashMap<String, ReflectionBuilder>();
      ReflectionBuilder reflectionBuilder0 = new ReflectionBuilder((Map) hashMap0);
      hashMap0.put("I", reflectionBuilder0);
      reflectionBuilder0.applySingleProperty((Map) hashMap0, "I", "I", "I");
      assertEquals(false, hashMap0.isEmpty());
  }

  @Test
  public void test12()  throws Throwable  {
      ReflectionBuilder reflectionBuilder0 = new ReflectionBuilder();
      // Undeclared exception!
      try {
        reflectionBuilder0.applyProperty((Object) null, (String) null, (String) null);
        fail("Expecting exception: ConfigurationException");
      } catch(ConfigurationException e) {
        /*
         * Unable to set property [null] with value [null].  If 'null' is a reference to another (previously defined) object, please prefix it with '$' to indicate that the referenced object should be used as the actual value.  For example, $null
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      ReflectionBuilder reflectionBuilder0 = new ReflectionBuilder();
      String string0 = "$!rWu7Ff-=y\\9|";
      boolean boolean0 = reflectionBuilder0.isReference(string0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      ReflectionBuilder reflectionBuilder0 = new ReflectionBuilder((Map) null);
      // Undeclared exception!
      try {
        reflectionBuilder0.getReferencedObject((String) null);
        fail("Expecting exception: UnresolveableReferenceException");
      } catch(UnresolveableReferenceException e) {
        /*
         * The object with id [null] has not yet been defined and therefore cannot be referenced.  Please ensure objects are defined in the order in which they should be created and made avaialable for future reference.
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      ReflectionBuilder reflectionBuilder0 = new ReflectionBuilder();
      String string0 = "$!rWu7Ff-=y\\9|";
      // Undeclared exception!
      try {
        reflectionBuilder0.getReferencedObject(string0);
        fail("Expecting exception: UnresolveableReferenceException");
      } catch(UnresolveableReferenceException e) {
        /*
         * The object with id [$!rWu7Ff-=y\\9|] has not yet been defined and therefore cannot be referenced.  Please ensure objects are defined in the order in which they should be created and made avaialable for future reference.
         */
      }
  }
}
