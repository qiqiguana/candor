/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.client.session.parser.kernel.completions;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.completions.SQLSelectStatement;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.completions.SQLStatement;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.completions.SQLTable;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SQLTableEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(1850);
      SQLTable sQLTable0 = new SQLTable((SQLStatement) sQLSelectStatement0, 1850, 1850);
      assertNotNull(sQLTable0);
      
      sQLTable0.setName("", 1850);
      // Undeclared exception!
      try {
        sQLTable0.getCompletions(1850);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      SQLStatement sQLStatement0 = new SQLStatement(0);
      SQLTable sQLTable0 = new SQLTable(sQLStatement0, 0);
      String string0 = sQLTable0.getText(0, "GQ");
      assertEquals("GQ", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      SQLTable sQLTable0 = new SQLTable((SQLStatement) null, (-944));
      assertNotNull(sQLTable0);
      
      boolean boolean0 = sQLTable0.isRepeatable();
      assertEquals(true, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      SQLTable sQLTable0 = new SQLTable((SQLStatement) null, (-944));
      assertNotNull(sQLTable0);
      
      sQLTable0.setAlias("l", 16);
      assertEquals(961, sQLTable0.getLength());
  }

  @Test
  public void test4()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(1850);
      SQLTable sQLTable0 = new SQLTable((SQLStatement) sQLSelectStatement0, 1850, 1850);
      assertNotNull(sQLTable0);
      
      // Undeclared exception!
      try {
        sQLTable0.getCompletions(1850);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      SQLStatement sQLStatement0 = new SQLStatement(0);
      SQLTable sQLTable0 = new SQLTable(sQLStatement0, 0);
      assertNotNull(sQLTable0);
      
      sQLTable0.setCatalog("GQ", 0);
      assertEquals(2, sQLTable0.getLength());
  }

  @Test
  public void test6()  throws Throwable  {
      SQLTable sQLTable0 = new SQLTable((SQLStatement) null, (-944));
      assertNotNull(sQLTable0);
      
      sQLTable0.setSchema("l", 16);
      assertEquals(961, sQLTable0.getLength());
  }

  @Test
  public void test7()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(1850);
      SQLTable sQLTable0 = new SQLTable((SQLStatement) sQLSelectStatement0, 1850, 1850);
      assertNotNull(sQLTable0);
      
      sQLTable0.setName("K!cg`8j&Vu-Dz#ag", 1850);
      // Undeclared exception!
      try {
        sQLTable0.getCompletions(1851);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      SQLTable sQLTable0 = new SQLTable((SQLStatement) null, (-944));
      assertNotNull(sQLTable0);
      
      boolean boolean0 = sQLTable0.isConcrete();
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(1850);
      SQLTable sQLTable0 = new SQLTable((SQLStatement) sQLSelectStatement0, 1850, 1850);
      assertNotNull(sQLTable0);
      
      sQLTable0.setName("", 1850);
      boolean boolean0 = sQLTable0.isConcrete();
      assertEquals(true, sQLTable0.isConcrete());
      assertEquals(true, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      SQLTable sQLTable0 = new SQLTable((SQLStatement) null, (-944));
      assertNotNull(sQLTable0);
      
      boolean boolean0 = sQLTable0.mustReplace(16);
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(1850);
      SQLTable sQLTable0 = new SQLTable((SQLStatement) sQLSelectStatement0, 1850, 1850);
      assertNotNull(sQLTable0);
      
      sQLTable0.setName("", 1850);
      boolean boolean0 = sQLTable0.mustReplace(1850);
      assertEquals(true, sQLTable0.isConcrete());
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(1850);
      SQLTable sQLTable0 = new SQLTable((SQLStatement) sQLSelectStatement0, 1850, 1850);
      assertNotNull(sQLTable0);
      
      sQLTable0.setName("K!cg`8j&Vu-Dz#ag", 1850);
      boolean boolean0 = sQLTable0.mustReplace(1);
      assertEquals(true, sQLTable0.isConcrete());
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(1850);
      SQLTable sQLTable0 = new SQLTable((SQLStatement) sQLSelectStatement0, 1850, 1850);
      assertNotNull(sQLTable0);
      
      sQLTable0.setName("K!cg`8j&Vu-Dz#ag", 1850);
      boolean boolean0 = sQLTable0.mustReplace(1850);
      assertEquals(true, sQLTable0.isConcrete());
      assertEquals(true, boolean0);
  }
}
