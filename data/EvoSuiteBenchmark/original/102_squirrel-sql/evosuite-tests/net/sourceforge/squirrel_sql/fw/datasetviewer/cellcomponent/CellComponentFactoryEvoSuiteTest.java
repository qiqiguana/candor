/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.sql.ResultSet;
import java.util.HashMap;
import javax.swing.JLayeredPane;
import javax.swing.JTable;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableModel;
import net.sourceforge.squirrel_sql.fw.datasetviewer.ColumnDisplayDefinition;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.CellComponentFactory;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.CellEditorUsingRenderer;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.DataTypeDouble;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.IDataTypeComponent;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.RestorableJTextArea;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.whereClause.IWhereClausePart;
import net.sourceforge.squirrel_sql.fw.dialects.DialectType;
import net.sourceforge.squirrel_sql.fw.gui.OkJPanel;
import net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData;
import org.jfree.data.xy.XYDatasetTableModel;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class CellComponentFactoryEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      CellComponentFactory cellComponentFactory0 = new CellComponentFactory();
      assertNotNull(cellComponentFactory0);
  }

  @Test
  public void test1()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, "");
      TableCellRenderer tableCellRenderer0 = CellComponentFactory.getTableCellRenderer(columnDisplayDefinition0);
      assertNotNull(tableCellRenderer0);
  }

  @Test
  public void test2()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, "");
      String string0 = columnDisplayDefinition0.getClassName();
      assertNotNull(string0);
      assertEquals("java.lang.Object", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      DialectType dialectType0 = DialectType.AXION;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(263, "*a", "*a", "*a", 5, "*a", true, 263, 5, 5, true, true, true, dialectType0);
      String string0 = columnDisplayDefinition0.getClassName();
      assertNotNull(string0);
      assertEquals("java.lang.Short", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      DialectType dialectType0 = DialectType.DERBY;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-7), "Blobs may not beaccessed after serLalization", "Blobs may not beaccessed after serLalization", "Blobs may not beaccessed after serLalization", (-7), "Blobs may not beaccessed after serLalization", true, (-7), (-7), (-7), true, true, true, dialectType0);
      boolean boolean0 = CellComponentFactory.areEqual(columnDisplayDefinition0, (Object) "North", (Object) "North");
      assertEquals(true, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, (String) null);
      String string0 = CellComponentFactory.renderObject((Object) null, columnDisplayDefinition0);
      assertNotNull(string0);
      assertEquals("<null>", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, "CancelSelection");
      String string0 = CellComponentFactory.renderObject((Object) "CancelSelection", columnDisplayDefinition0);
      assertEquals("CancelSelection", string0);
      assertNotNull(string0);
  }

  @Test
  public void test7()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-1), "MAXDB");
      boolean boolean0 = CellComponentFactory.isEditableInCell(columnDisplayDefinition0, (Object) "borderPainted");
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      DialectType dialectType0 = DialectType.DERBY;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, (String) null, (String) null, (String) null, 7, (String) null, true, 0, 7, 0, true, true, true, dialectType0);
      boolean boolean0 = CellComponentFactory.isEditableInCell(columnDisplayDefinition0, (Object) "Name");
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-1), "MAXDB");
      columnDisplayDefinition0.setSqlType((-1));
      boolean boolean0 = CellComponentFactory.isEditableInCell(columnDisplayDefinition0, (Object) "borderPainted");
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-1923), "");
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      boolean boolean0 = CellComponentFactory.needToReRead(columnDisplayDefinition0, (Object) integer0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      DialectType dialectType0 = DialectType.HADB;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-950), "e2J&o1*=38(+", "e2J&o1*=38(+", "e2J&o1*=38(+", 631, "f-`f", true, (-950), (-950), 631, true, true, true, dialectType0);
      CellComponentFactory.needToReRead(columnDisplayDefinition0, (Object) null);
      assertEquals("java.lang.String", columnDisplayDefinition0.getClassName());
  }

  @Test
  public void test12()  throws Throwable  {
      JTable jTable0 = new JTable(0, 0);
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, "S/VP?u]");
      CellEditorUsingRenderer cellEditorUsingRenderer0 = (CellEditorUsingRenderer)CellComponentFactory.getInCellEditor(jTable0, columnDisplayDefinition0);
      assertEquals(1, cellEditorUsingRenderer0.getClickCountToStart());
      assertNotNull(cellEditorUsingRenderer0);
  }

  @Test
  public void test13()  throws Throwable  {
      DialectType dialectType0 = DialectType.AXION;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, "\"16'k9!", "\"16'k9!", "\"16'k9!", 0, "d9^j`L", false, 0, 1932, 1318, false, false, false, dialectType0);
      String string0 = (String)CellComponentFactory.validateAndConvert(columnDisplayDefinition0, (Object) "document-name", "document-name", (StringBuffer) null);
      assertEquals("document-name", string0);
  }

  @Test
  public void test14()  throws Throwable  {
      DialectType dialectType0 = DialectType.AXION;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(91, "\"16'k9!", "\"16'k9!", "\"16'k9!", 91, "d9^j`L", false, 0, 1932, 0, false, false, false, dialectType0);
      // Undeclared exception!
      try {
        CellComponentFactory.validateAndConvert(columnDisplayDefinition0, (Object) "document-name", "document-name", (StringBuffer) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test15()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, (String) null);
      boolean boolean0 = CellComponentFactory.useBinaryEditingPanel(columnDisplayDefinition0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      DialectType dialectType0 = DialectType.AXION;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(263, "*a", "*a", "*a", 5, "*a", true, 263, 5, 5, true, true, true, dialectType0);
      boolean boolean0 = CellComponentFactory.isEditableInPopup(columnDisplayDefinition0, (Object) "default");
      assertEquals(false, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      DialectType dialectType0 = DialectType.POSTGRES;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(238, "<null>", "<null>", "<null>", (-16), "<null>", false, 238, 238, 238, false, false, false, dialectType0);
      boolean boolean0 = CellComponentFactory.isEditableInPopup(columnDisplayDefinition0, (Object) "default");
      assertEquals(true, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-8), "CancelSelection");
      RestorableJTextArea restorableJTextArea0 = (RestorableJTextArea)CellComponentFactory.getJTextArea(columnDisplayDefinition0, (Object) "CancelSelection");
      assertNotNull(restorableJTextArea0);
      assertEquals("CancelSelection", restorableJTextArea0.getText());
  }

  @Test
  public void test19()  throws Throwable  {
      DialectType dialectType0 = DialectType.DERBY;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, (String) null, (String) null, (String) null, 7, (String) null, true, 0, 7, 0, true, true, true, dialectType0);
      RestorableJTextArea restorableJTextArea0 = (RestorableJTextArea)CellComponentFactory.getJTextArea(columnDisplayDefinition0, (Object) "Name");
      assertEquals("java.lang.Float", columnDisplayDefinition0.getClassName());
      assertNotNull(restorableJTextArea0);
  }

  @Test
  public void test20()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, "CancelSelection");
      RestorableJTextArea restorableJTextArea0 = (RestorableJTextArea)CellComponentFactory.getJTextArea(columnDisplayDefinition0, (Object) null);
      assertEquals(false, restorableJTextArea0.isFocusTraversalPolicySet());
  }

  @Test
  public void test21()  throws Throwable  {
      DialectType dialectType0 = DialectType.FRONTBASE;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-950), "e2J&o1*=38(+", "", "e2J&o1*=38(+", 0, "", true, (-950), (-950), 0, true, true, true, dialectType0);
      StringBuffer stringBuffer0 = new StringBuffer(151);
      String string0 = (String)CellComponentFactory.validateAndConvertInPopup(columnDisplayDefinition0, (Object) "LOWER_TRAILING_CORNER", "", stringBuffer0);
      assertEquals("", string0);
  }

  @Test
  public void test22()  throws Throwable  {
      DialectType dialectType0 = DialectType.HADB;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-950), "e2J&o1*=38(+", "e2J&o1*=38(+", "e2J&o1*=38(+", 631, "f-`f", true, (-950), (-950), 631, true, true, true, dialectType0);
      StringBuffer stringBuffer0 = new StringBuffer(169);
      String string0 = (String)CellComponentFactory.validateAndConvertInPopup(columnDisplayDefinition0, (Object) "LOWER_TRAILING_CORNER", "f-`f", stringBuffer0);
      assertNull(string0);
      assertEquals("java.lang.String", columnDisplayDefinition0.getClassName());
  }

  @Test
  public void test23()  throws Throwable  {
      DialectType dialectType0 = DialectType.MSSQL;
      Object object0 = CellComponentFactory.readResultWithPluginRegisteredDataType((ResultSet) null, 1915, "*Z>Z=", 1915, dialectType0);
      assertNull(object0);
  }

  @Test
  public void test24()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(1115, "<");
      IWhereClausePart iWhereClausePart0 = CellComponentFactory.getWhereClauseValue(columnDisplayDefinition0, (Object) null, (ISQLDatabaseMetaData) null);
      assertNull(iWhereClausePart0);
  }

  @Test
  public void test25()  throws Throwable  {
      HashMap<ColumnDisplayDefinition, IDataTypeComponent> hashMap0 = CellComponentFactory._colDataTypeObjects;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(1108, "");
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      JTable jTable0 = new JTable((TableModel) xYDatasetTableModel0);
      DataTypeDouble dataTypeDouble0 = new DataTypeDouble(jTable0, columnDisplayDefinition0);
      hashMap0.put(columnDisplayDefinition0, (IDataTypeComponent) dataTypeDouble0);
      assertEquals(20, hashMap0.size());
      
      // Undeclared exception!
      try {
        CellComponentFactory.getWhereClauseValue(columnDisplayDefinition0, (Object) null, (ISQLDatabaseMetaData) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * columnDef contains not an usable columnName
         */
      }
  }

  @Test
  public void test26()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(475, "{X[^h)!F/ kN");
      Object object0 = CellComponentFactory.getDefaultValue(columnDisplayDefinition0, "{X[^h)!F/ kN");
      assertNull(object0);
  }

  @Test
  public void test27()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(488, "{X[^h)!F/ kN");
      columnDisplayDefinition0.setSqlType(488);
      CellComponentFactory.getDefaultValue(columnDisplayDefinition0, "{X[^h)!F/ kN");
      assertEquals("java.lang.Object", columnDisplayDefinition0.getClassName());
  }

  @Test
  public void test28()  throws Throwable  {
      DialectType dialectType0 = DialectType.INFORMIX;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(92, "ViewportUI", "ViewportUI", "ViewportUI", 92, "ViewportUI", false, 92, 92, 92, false, false, false, dialectType0);
      boolean boolean0 = CellComponentFactory.canDoFileIO(columnDisplayDefinition0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test29()  throws Throwable  {
      OkJPanel[] okJPanelArray0 = CellComponentFactory.getControlPanels();
      assertNotNull(okJPanelArray0);
  }

  @Test
  public void test30()  throws Throwable  {
      DialectType dialectType0 = DialectType.AXION;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(1, "04W(|9", "vR_;", "04W(|9", (-102), "vR_;", true, 1, 1, (-102), true, true, true, dialectType0);
      boolean boolean0 = CellComponentFactory.canDoFileIO(columnDisplayDefinition0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test31()  throws Throwable  {
      DialectType dialectType0 = DialectType.TIMESTEN;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(228, "pfS6Q\"E", "pfS6Q\"E", "pfS6Q\"E", (-4), "pfS6Q\"E", false, 228, 228, 228, false, false, false, dialectType0);
      boolean boolean0 = CellComponentFactory.isEditableInPopup(columnDisplayDefinition0, (Object) "default");
      assertEquals(true, boolean0);
  }

  @Test
  public void test32()  throws Throwable  {
      DialectType dialectType0 = DialectType.MCKOI;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(3, "1FY}", "1FY}", "1FY}", 3, "1FY}", false, 3, 3, 3, false, false, false, dialectType0);
      String string0 = CellComponentFactory.getClassName(columnDisplayDefinition0);
      assertEquals("java.math.BigDecimal", string0);
      assertNotNull(string0);
  }

  @Test
  public void test33()  throws Throwable  {
      DialectType dialectType0 = DialectType.TIMESTEN;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(244, "*a", "*a", "*a", 12, "*a", false, 244, 12, 244, false, false, false, dialectType0);
      boolean boolean0 = CellComponentFactory.isEditableInPopup(columnDisplayDefinition0, (Object) "default");
      assertEquals(true, boolean0);
  }

  @Test
  public void test34()  throws Throwable  {
      DialectType dialectType0 = DialectType.INFORMIX;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(16, "", "", "", 16, "", true, 16, 16, 16, true, true, true, dialectType0);
      boolean boolean0 = CellComponentFactory.canDoFileIO(columnDisplayDefinition0);
      assertEquals(true, boolean0);
  }
}
