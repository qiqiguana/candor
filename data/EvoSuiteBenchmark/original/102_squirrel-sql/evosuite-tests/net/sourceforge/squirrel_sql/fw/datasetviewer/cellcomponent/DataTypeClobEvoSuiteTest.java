/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.awt.RenderingHints;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JTable;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import javax.swing.text.AttributeSet;
import javax.swing.text.StyleConstants;
import net.sourceforge.squirrel_sql.fw.datasetviewer.ColumnDisplayDefinition;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.ClobDescriptor;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.DataTypeClob;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.RestorableJTextArea;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.RestorableJTextField;
import net.sourceforge.squirrel_sql.fw.dialects.DialectType;
import net.sourceforge.squirrel_sql.fw.gui.OkJPanel;
import net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DataTypeClobEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-928), "jP^VT95qt=+~TZK]");
      DataTypeClob dataTypeClob0 = new DataTypeClob((JTable) null, columnDisplayDefinition0);
      RestorableJTextField restorableJTextField0 = (RestorableJTextField)dataTypeClob0.getJTextField();
      assertEquals(false, restorableJTextField0.getInheritsPopupMenu());
  }

  @Test
  public void test1()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(1000, 1470);
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTable jTable0 = new JTable((TableModel) defaultTableModel0, (TableColumnModel) defaultTableColumnModel0);
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(1470, "K");
      DataTypeClob dataTypeClob0 = new DataTypeClob(jTable0, columnDisplayDefinition0);
      RestorableJTextArea restorableJTextArea0 = (RestorableJTextArea)dataTypeClob0.getJTextArea((Object) null);
      assertEquals("<null>", restorableJTextArea0.getText());
      assertNotNull(restorableJTextArea0);
  }

  @Test
  public void test2()  throws Throwable  {
      JTable jTable0 = new JTable(0, 439);
      DialectType dialectType0 = DialectType.SYBASEASE;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, "d&6Q/vA.X#|`>", "d&6Q/vA.X#|`>", "d&6Q/vA.X#|`>", 0, "d&6Q/vA.X#|`>", false, (-1), 0, 0, true, false, false, dialectType0);
      DataTypeClob dataTypeClob0 = new DataTypeClob(jTable0, columnDisplayDefinition0);
      boolean boolean0 = dataTypeClob0.useBinaryEditingPanel();
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      OkJPanel okJPanel0 = DataTypeClob.getControlPanel();
      assertEquals(true, okJPanel0.isBackgroundSet());
  }

  @Test
  public void test4()  throws Throwable  {
      JTable jTable0 = new JTable(0, 439);
      DialectType dialectType0 = DialectType.SYBASEASE;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, "d&6Q/vA.X#|`>", "d&6Q/vA.X#|`>", "d&6Q/vA.X#|`>", 0, "d&6Q/vA.X#|`>", false, (-1), 0, 0, true, false, false, dialectType0);
      DataTypeClob dataTypeClob0 = new DataTypeClob(jTable0, columnDisplayDefinition0);
      boolean boolean0 = dataTypeClob0.canDoFileIO();
      assertEquals(true, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      DataTypeClob.setReadCompleteClob(true);
  }

  @Test
  public void test6()  throws Throwable  {
      Object[][] objectArray0 = new Object[9][1];
      Object[] objectArray1 = new Object[26];
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.ResolveAttribute;
      objectArray1[1] = (Object) styleConstants0;
      Object[] objectArray2 = new Object[2];
      objectArray2[0] = objectArray1[1];
      objectArray2[1] = objectArray1[1];
      objectArray0[2] = objectArray2;
      objectArray0[8] = objectArray0[2];
      JTable jTable0 = new JTable(objectArray0, objectArray0[8]);
      DialectType dialectType0 = DialectType.MAXDB;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-314), "qddn]/q'3<", (String) null, (String) null, (-314), "qddn]/q'3<", false, (-314), (-314), (-314), false, false, false, dialectType0);
      DataTypeClob dataTypeClob0 = new DataTypeClob(jTable0, columnDisplayDefinition0);
      // Undeclared exception!
      try {
        dataTypeClob0.readResultSet((ResultSet) null, (-314), false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      DialectType dialectType0 = DialectType.TIMESTEN;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(1177, "GNCWUN:(zQ", "GNCWUN:(zQ", "GNCWUN:(zQ", 1177, "GNCWUN:(zQ", false, 1177, 1177, 1177, false, false, false, dialectType0);
      DataTypeClob dataTypeClob0 = new DataTypeClob((JTable) null, columnDisplayDefinition0);
      String string0 = dataTypeClob0.getClassName();
      assertEquals("net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.ClobDescriptor", string0);
  }

  @Test
  public void test8()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(481, "9<'SktNcfb");
      DataTypeClob dataTypeClob0 = new DataTypeClob((JTable) null, columnDisplayDefinition0);
      ClobDescriptor clobDescriptor0 = (ClobDescriptor)dataTypeClob0.getDefaultValue("9<'SktNcfb");
      assertNotNull(clobDescriptor0);
      
      boolean boolean0 = dataTypeClob0.isEditableInPopup((Object) clobDescriptor0);
      assertEquals(0, clobDescriptor0.getUserSetClobLimit());
      assertEquals(true, boolean0);
      assertEquals("9<'SktNcfb", clobDescriptor0.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(286, "&H");
      DataTypeClob dataTypeClob0 = new DataTypeClob((JTable) null, columnDisplayDefinition0);
      StringBuffer stringBuffer0 = new StringBuffer(1842);
      // Undeclared exception!
      try {
        dataTypeClob0.validateAndConvertInPopup("&H", (Object) "job-impressions-completed", stringBuffer0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * java.lang.String cannot be cast to net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.ClobDescriptor
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      boolean boolean0 = DataTypeClob.getReadCompleteClob();
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(481, "9<'SktNcfb");
      DataTypeClob dataTypeClob0 = new DataTypeClob((JTable) null, columnDisplayDefinition0);
      boolean boolean0 = dataTypeClob0.needToReRead((Object) "CancelSelection");
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(1000, 1470);
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTable jTable0 = new JTable((TableModel) defaultTableModel0, (TableColumnModel) defaultTableColumnModel0);
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(1470, "K");
      DataTypeClob dataTypeClob0 = new DataTypeClob(jTable0, columnDisplayDefinition0);
      String string0 = dataTypeClob0.renderObject((Object) null);
      assertEquals("<null>", string0);
      assertNotNull(string0);
  }

  @Test
  public void test13()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(481, "9<'SktNcfb");
      DataTypeClob dataTypeClob0 = new DataTypeClob((JTable) null, columnDisplayDefinition0);
      ClobDescriptor clobDescriptor0 = (ClobDescriptor)dataTypeClob0.getDefaultValue("9<'SktNcfb");
      assertNotNull(clobDescriptor0);
      
      boolean boolean0 = dataTypeClob0.isEditableInCell((Object) clobDescriptor0);
      assertEquals("9<'SktNcfb", clobDescriptor0.toString());
      assertEquals(true, boolean0);
      assertEquals(0, clobDescriptor0.getUserSetClobLimit());
  }

  @Test
  public void test14()  throws Throwable  {
      DialectType dialectType0 = DialectType.HADB;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(1177, "You are attempting to add an observation for ", "You are attempting to add an observation for ", "You are attempting to add an observation for ", 1177, "You are attempting to add an observation for ", false, 1177, 1177, 1177, false, false, false, dialectType0);
      DataTypeClob dataTypeClob0 = new DataTypeClob((JTable) null, columnDisplayDefinition0);
      boolean boolean0 = dataTypeClob0.isEditableInCell((Object) null);
      assertEquals(true, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(1000, 1470);
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTable jTable0 = new JTable((TableModel) defaultTableModel0, (TableColumnModel) defaultTableColumnModel0);
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(1470, "K");
      DataTypeClob dataTypeClob0 = new DataTypeClob(jTable0, columnDisplayDefinition0);
      ClobDescriptor clobDescriptor0 = (ClobDescriptor)dataTypeClob0.getDefaultValue("<null>");
      assertNull(clobDescriptor0);
  }

  @Test
  public void test16()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(481, "9<'SktNcfb");
      DataTypeClob dataTypeClob0 = new DataTypeClob((JTable) null, columnDisplayDefinition0);
      ClobDescriptor clobDescriptor0 = (ClobDescriptor)dataTypeClob0.getDefaultValue("9<'SktNcfb");
      assertNotNull(clobDescriptor0);
      
      dataTypeClob0.getWhereClauseValue((Object) clobDescriptor0, (ISQLDatabaseMetaData) null);
      assertEquals("9<'SktNcfb", clobDescriptor0.toString());
      assertEquals(0, clobDescriptor0.getUserSetClobLimit());
  }

  @Test
  public void test17()  throws Throwable  {
      JTable jTable0 = new JTable();
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, "Gb");
      DataTypeClob dataTypeClob0 = new DataTypeClob(jTable0, columnDisplayDefinition0);
      // Undeclared exception!
      try {
        dataTypeClob0.setPreparedStatementValue((PreparedStatement) null, (Object) null, 0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test18()  throws Throwable  {
      JTable jTable0 = new JTable();
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(1446, "Gb");
      DataTypeClob dataTypeClob0 = new DataTypeClob(jTable0, columnDisplayDefinition0);
      // Undeclared exception!
      try {
        dataTypeClob0.setPreparedStatementValue((PreparedStatement) null, (Object) 1446, 1446);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * java.lang.Integer cannot be cast to net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.ClobDescriptor
         */
      }
  }

  @Test
  public void test19()  throws Throwable  {
      DialectType dialectType0 = DialectType.TIMESTEN;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(1177, "GNCWUN:(zQ", "GNCWUN:(zQ", "GNCWUN:(zQ", 1177, "GNCWUN:(zQ", false, 1177, 1177, 1177, false, false, false, dialectType0);
      DataTypeClob dataTypeClob0 = new DataTypeClob((JTable) null, columnDisplayDefinition0);
      Object object0 = dataTypeClob0.getDefaultValue((String) null);
      assertNull(object0);
  }

  @Test
  public void test20()  throws Throwable  {
      Object[][] objectArray0 = new Object[4][10];
      Object[] objectArray1 = new Object[9];
      Object object0 = RenderingHints.VALUE_STROKE_NORMALIZE;
      objectArray1[1] = object0;
      objectArray1[6] = object0;
      Object[] objectArray2 = new Object[8];
      objectArray2[0] = objectArray1[6];
      objectArray2[1] = objectArray1[6];
      objectArray2[2] = object0;
      objectArray2[3] = objectArray1[1];
      objectArray2[4] = object0;
      objectArray2[5] = (Object) "uninitializedValue";
      objectArray2[6] = objectArray1[6];
      objectArray2[7] = objectArray1[1];
      JTable jTable0 = new JTable(objectArray0, objectArray2);
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, (String) null);
      DataTypeClob dataTypeClob0 = new DataTypeClob(jTable0, columnDisplayDefinition0);
      Object object1 = dataTypeClob0.getDefaultValue((String) null);
      assertNull(object1);
  }

  @Test
  public void test21()  throws Throwable  {
      DialectType dialectType0 = DialectType.HADB;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(1177, "You are attempting to add an observation for ", "You are attempting to add an observation for ", "You are attempting to add an observation for ", 1177, "You are attempting to add an observation for ", false, 1177, 1177, 1177, false, false, false, dialectType0);
      DataTypeClob dataTypeClob0 = new DataTypeClob((JTable) null, columnDisplayDefinition0);
      FileDescriptor fileDescriptor0 = FileDescriptor.out;
      FileInputStream fileInputStream0 = new FileInputStream(fileDescriptor0);
      // Undeclared exception!
      try {
        dataTypeClob0.importObject(fileInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * -1
         */
      }
  }
}
