/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.Writer;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.swing.DebugGraphics;
import net.sourceforge.squirrel_sql.fw.util.FileWrapper;
import net.sourceforge.squirrel_sql.fw.util.FileWrapperFactory;
import net.sourceforge.squirrel_sql.fw.util.FileWrapperFactoryImpl;
import net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl;
import net.sourceforge.squirrel_sql.fw.util.IOUtilitiesImpl;
import net.sourceforge.squirrel_sql.fw.util.IProxySettings;
import net.sourceforge.squirrel_sql.fw.util.ProxySettings;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class IOUtilitiesImplEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      IOUtilitiesImpl iOUtilitiesImpl0 = new IOUtilitiesImpl();
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      iOUtilitiesImpl0.setFileWrapperFactory((FileWrapperFactory) fileWrapperFactoryImpl0);
  }

  @Test
  public void test1()  throws Throwable  {
      IOUtilitiesImpl iOUtilitiesImpl0 = new IOUtilitiesImpl();
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("/v");
      try {
        iOUtilitiesImpl0.getCheckSum((FileWrapper) fileWrapperImpl0);
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
        /*
         * /v (No such file or directory)
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      IOUtilitiesImpl iOUtilitiesImpl0 = new IOUtilitiesImpl();
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) (byte) (-128), (int) (byte)0);
      iOUtilitiesImpl0.closeInputStream((InputStream) byteArrayInputStream0);
      assertEquals(true, byteArrayInputStream0.markSupported());
  }

  @Test
  public void test3()  throws Throwable  {
      IOUtilitiesImpl iOUtilitiesImpl0 = new IOUtilitiesImpl();
      PrintStream printStream0 = DebugGraphics.logStream();
      iOUtilitiesImpl0.closeOutputStream((OutputStream) printStream0);
      assertEquals(true, printStream0.checkError());
  }

  @Test
  public void test4()  throws Throwable  {
      IOUtilitiesImpl iOUtilitiesImpl0 = new IOUtilitiesImpl();
      iOUtilitiesImpl0.closeReader((Reader) null);
  }

  @Test
  public void test5()  throws Throwable  {
      IOUtilitiesImpl iOUtilitiesImpl0 = new IOUtilitiesImpl();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      iOUtilitiesImpl0.closeReader((Reader) pipedReader0);
  }

  @Test
  public void test6()  throws Throwable  {
      IOUtilitiesImpl iOUtilitiesImpl0 = new IOUtilitiesImpl();
      iOUtilitiesImpl0.closeWriter((Writer) null);
  }

  @Test
  public void test7()  throws Throwable  {
      IOUtilitiesImpl iOUtilitiesImpl0 = new IOUtilitiesImpl();
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      iOUtilitiesImpl0.closeWriter((Writer) pipedWriter0);
  }

  @Test
  public void test8()  throws Throwable  {
      IOUtilitiesImpl iOUtilitiesImpl0 = new IOUtilitiesImpl();
      iOUtilitiesImpl0.flushWriter((Writer) null);
  }

  @Test
  public void test9()  throws Throwable  {
      IOUtilitiesImpl iOUtilitiesImpl0 = new IOUtilitiesImpl();
      PrintStream printStream0 = DebugGraphics.logStream();
      PrintWriter printWriter0 = new PrintWriter((OutputStream) printStream0, true);
      iOUtilitiesImpl0.flushWriter((Writer) printWriter0);
      assertEquals(true, printWriter0.checkError());
  }

  @Test
  public void test10()  throws Throwable  {
      IOUtilitiesImpl iOUtilitiesImpl0 = new IOUtilitiesImpl();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) byteArrayInputStream0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      iOUtilitiesImpl0.copyBytes((InputStream) pushbackInputStream0, (OutputStream) objectOutputStream0);
      assertEquals(0, pushbackInputStream0.available());
  }

  @Test
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          IOUtilitiesImpl iOUtilitiesImpl0 = new IOUtilitiesImpl();
          PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
          PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
          BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) pipedInputStream0);
          FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("httpWJCgJO3]}q");
          // Undeclared exception!
          try {
            iOUtilitiesImpl0.copyBytesToFile((InputStream) bufferedInputStream0, (FileWrapper) fileWrapperImpl0);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission httpWJCgJO3]}q write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.createNewFile(File.java:882)
             * net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl.createNewFile(FileWrapperImpl.java:351)
             * net.sourceforge.squirrel_sql.fw.util.IOUtilitiesImpl.copyBytesToFile(IOUtilitiesImpl.java:194)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test12()  throws Throwable  {
      IOUtilitiesImpl iOUtilitiesImpl0 = new IOUtilitiesImpl();
      try {
        iOUtilitiesImpl0.constructHttpUrl("httpLog4jLogger.init", (-886), "httpLog4jLogger.init");
        fail("Expecting exception: MalformedURLException");
      } catch(MalformedURLException e) {
        /*
         * Invalid port number :-886
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      IOUtilitiesImpl iOUtilitiesImpl0 = new IOUtilitiesImpl();
      URL uRL0 = iOUtilitiesImpl0.constructHttpUrl("FT=r:k9$'yJfB-ZY", 80, "FT=r:k9$'yJfB-ZY");
      assertNotNull(uRL0);
      assertEquals("http://[FT=r:k9$'yJfB-ZY]FT=r:k9$'yJfB-ZY", uRL0.toExternalForm());
  }

  @Test
  public void test14()  throws Throwable  {
      IOUtilitiesImpl iOUtilitiesImpl0 = new IOUtilitiesImpl();
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("Hh,+", "Hh,+");
      ProxySettings proxySettings0 = new ProxySettings();
      // Undeclared exception!
      try {
        iOUtilitiesImpl0.downloadHttpFile((URL) null, (FileWrapper) fileWrapperImpl0, (IProxySettings) proxySettings0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
