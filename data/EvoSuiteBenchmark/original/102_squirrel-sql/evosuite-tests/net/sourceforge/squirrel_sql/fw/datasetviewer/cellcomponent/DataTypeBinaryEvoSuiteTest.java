/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Vector;
import javax.swing.DefaultListSelectionModel;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import net.sourceforge.squirrel_sql.fw.datasetviewer.ColumnDisplayDefinition;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.DataTypeBinary;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.RestorableJTextArea;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.RestorableJTextField;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.whereClause.IsNullWhereClausePart;
import net.sourceforge.squirrel_sql.fw.dialects.DialectType;
import net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DataTypeBinaryEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-956), "r");
      DataTypeBinary dataTypeBinary0 = new DataTypeBinary((JTable) null, columnDisplayDefinition0);
      RestorableJTextField restorableJTextField0 = (RestorableJTextField)dataTypeBinary0.getJTextField();
      assertEquals(true, restorableJTextField0.isBackgroundSet());
  }

  @Test
  public void test1()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(437, "");
      DataTypeBinary dataTypeBinary0 = new DataTypeBinary((JTable) null, columnDisplayDefinition0);
      boolean boolean0 = dataTypeBinary0.isEditableInCell((Object) "icon");
      assertEquals(true, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      DialectType dialectType0 = DialectType.HADB;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(1, "SQLD2(B", "SQLD2(B", "SQLD2(B", 1, "SQLD2(B", true, 1, 1, 1000, true, false, false, dialectType0);
      DataTypeBinary dataTypeBinary0 = new DataTypeBinary((JTable) null, columnDisplayDefinition0);
      RestorableJTextArea restorableJTextArea0 = (RestorableJTextArea)dataTypeBinary0.getJTextArea((Object) "sides");
      assertNotNull(restorableJTextArea0);
      assertEquals("73  69  64  65  73  ", restorableJTextArea0.getText());
  }

  @Test
  public void test3()  throws Throwable  {
      JTable jTable0 = new JTable();
      DialectType dialectType0 = DialectType.DB2;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(1432, "", "", "", 1432, "", true, 1432, 1432, 1432, true, false, true, dialectType0);
      DataTypeBinary dataTypeBinary0 = new DataTypeBinary(jTable0, columnDisplayDefinition0);
      boolean boolean0 = dataTypeBinary0.isEditableInPopup((Object) "1142");
      assertEquals(true, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(437, "");
      DataTypeBinary dataTypeBinary0 = new DataTypeBinary((JTable) null, columnDisplayDefinition0);
      boolean boolean0 = dataTypeBinary0.useBinaryEditingPanel();
      assertEquals(true, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(437, "");
      DataTypeBinary dataTypeBinary0 = new DataTypeBinary((JTable) null, columnDisplayDefinition0);
      boolean boolean0 = dataTypeBinary0.needToReRead((Object) "AccessibleSelection");
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      JTable jTable0 = new JTable();
      DialectType dialectType0 = DialectType.DB2;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(1432, "", "", "", 1432, "", true, 1432, 1432, 1432, true, false, true, dialectType0);
      DataTypeBinary dataTypeBinary0 = new DataTypeBinary(jTable0, columnDisplayDefinition0);
      String string0 = dataTypeBinary0.getClassName();
      assertEquals("[Ljava.lang.Byte", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      DefaultListSelectionModel defaultListSelectionModel0 = new DefaultListSelectionModel();
      JTable jTable0 = new JTable((TableModel) defaultTableModel0, (TableColumnModel) defaultTableColumnModel0, (ListSelectionModel) defaultListSelectionModel0);
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(135, "Requires start >= 0.");
      DataTypeBinary dataTypeBinary0 = new DataTypeBinary(jTable0, columnDisplayDefinition0);
      // Undeclared exception!
      try {
        dataTypeBinary0.exportObject((FileOutputStream) null, "");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      JTable jTable0 = new JTable(123, 123);
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(123, "orientation");
      DataTypeBinary dataTypeBinary0 = new DataTypeBinary(jTable0, columnDisplayDefinition0);
      boolean boolean0 = dataTypeBinary0.canDoFileIO();
      assertEquals(true, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(437, "");
      DataTypeBinary dataTypeBinary0 = new DataTypeBinary((JTable) null, columnDisplayDefinition0);
      boolean boolean0 = dataTypeBinary0.areEqual((Object) "AccessibleSelection", (Object) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      DialectType dialectType0 = DialectType.HADB;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(1, "SQLD2(B", "SQLD2(B", "SQLD2(B", 1, "SQLD2(B", true, 1, 1, 1000, true, false, false, dialectType0);
      DataTypeBinary dataTypeBinary0 = new DataTypeBinary((JTable) null, columnDisplayDefinition0);
      boolean boolean0 = dataTypeBinary0.areEqual((Object) null, (Object) null);
      assertEquals(true, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      JTable jTable0 = new JTable();
      DialectType dialectType0 = DialectType.DB2;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(1432, "", "", "", 1432, "", true, 1432, 1432, 1432, true, false, true, dialectType0);
      DataTypeBinary dataTypeBinary0 = new DataTypeBinary(jTable0, columnDisplayDefinition0);
      boolean boolean0 = dataTypeBinary0.areEqual((Object) null, (Object) "selection-end-word");
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      JTable jTable0 = new JTable();
      DialectType dialectType0 = DialectType.DB2;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(1432, "", "", "", 1432, "", true, 1432, 1432, 1432, true, false, true, dialectType0);
      DataTypeBinary dataTypeBinary0 = new DataTypeBinary(jTable0, columnDisplayDefinition0);
      boolean boolean0 = dataTypeBinary0.areEqual((Object) "selection-end-word", (Object) "selection-end-word");
      assertEquals(true, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      JTable jTable0 = new JTable(123, 123);
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(123, "orientation");
      DataTypeBinary dataTypeBinary0 = new DataTypeBinary(jTable0, columnDisplayDefinition0);
      boolean boolean0 = dataTypeBinary0.areEqual((Object) "selection-end-word", (Object) "selection-backward");
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      JTable jTable0 = new JTable();
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-32), "content-length");
      DataTypeBinary dataTypeBinary0 = new DataTypeBinary(jTable0, columnDisplayDefinition0);
      RestorableJTextArea restorableJTextArea0 = (RestorableJTextArea)dataTypeBinary0.getJTextArea((Object) null);
      assertEquals("<null>", restorableJTextArea0.getText());
      assertNotNull(restorableJTextArea0);
  }

  @Test
  public void test15()  throws Throwable  {
      JTable jTable0 = new JTable();
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-1520), (String) null);
      DataTypeBinary dataTypeBinary0 = new DataTypeBinary(jTable0, columnDisplayDefinition0);
      StringBuffer stringBuffer0 = new StringBuffer("ControlButtonsAreShownChangedProperty");
      Object object0 = dataTypeBinary0.validateAndConvertInPopup((String) null, (Object) "ControlButtonsAreShownChangedProperty", stringBuffer0);
      assertNull(object0);
  }

  @Test
  public void test16()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      DefaultListSelectionModel defaultListSelectionModel0 = new DefaultListSelectionModel();
      JTable jTable0 = new JTable((TableModel) defaultTableModel0, (TableColumnModel) defaultTableColumnModel0, (ListSelectionModel) defaultListSelectionModel0);
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-1186), "Requires start >= 0.");
      DataTypeBinary dataTypeBinary0 = new DataTypeBinary(jTable0, columnDisplayDefinition0);
      // Undeclared exception!
      try {
        dataTypeBinary0.exportObject((FileOutputStream) null, "<null>");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test17()  throws Throwable  {
      JTable jTable0 = new JTable();
      DialectType dialectType0 = DialectType.H2;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, "] using ClassLoader.gePSystemResource().", "] using ClassLoader.gePSystemResource().", "] using ClassLoader.gePSystemResource().", 1, "] using ClassLoader.gePSystemResource().", true, 216, (-1118), (-1118), true, true, true, dialectType0);
      DataTypeBinary dataTypeBinary0 = new DataTypeBinary(jTable0, columnDisplayDefinition0);
      IsNullWhereClausePart isNullWhereClausePart0 = (IsNullWhereClausePart)dataTypeBinary0.getWhereClauseValue((Object) null, (ISQLDatabaseMetaData) null);
      assertEquals(false, isNullWhereClausePart0.isParameterUsed());
  }

  @Test
  public void test18()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      Vector<Object> vector0 = defaultTableModel0.getDataVector();
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      DefaultListSelectionModel defaultListSelectionModel0 = new DefaultListSelectionModel();
      JTable jTable0 = new JTable((TableModel) defaultTableModel0, (TableColumnModel) defaultTableColumnModel0, (ListSelectionModel) defaultListSelectionModel0);
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(135, "Requires start >= 0.");
      DataTypeBinary dataTypeBinary0 = new DataTypeBinary(jTable0, columnDisplayDefinition0);
      dataTypeBinary0.getWhereClauseValue((Object) vector0, (ISQLDatabaseMetaData) null);
      assertEquals("javax.swing.DefaultListSelectionModel 10437928 ={}", defaultListSelectionModel0.toString());
  }

  @Test
  public void test19()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-956), "r");
      DataTypeBinary dataTypeBinary0 = new DataTypeBinary((JTable) null, columnDisplayDefinition0);
      // Undeclared exception!
      try {
        dataTypeBinary0.setPreparedStatementValue((PreparedStatement) null, (Object) "selectedIcon", 30);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * java.lang.String cannot be cast to [Ljava.lang.Byte;
         */
      }
  }

  @Test
  public void test20()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-956), "");
      DataTypeBinary dataTypeBinary0 = new DataTypeBinary((JTable) null, columnDisplayDefinition0);
      // Undeclared exception!
      try {
        dataTypeBinary0.setPreparedStatementValue((PreparedStatement) null, (Object) null, 30);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test21()  throws Throwable  {
      JTable jTable0 = new JTable();
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-1520), (String) null);
      DataTypeBinary dataTypeBinary0 = new DataTypeBinary(jTable0, columnDisplayDefinition0);
      Object object0 = dataTypeBinary0.getDefaultValue((String) null);
      assertNull(object0);
  }

  @Test
  public void test22()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(437, "");
      DataTypeBinary dataTypeBinary0 = new DataTypeBinary((JTable) null, columnDisplayDefinition0);
      Object object0 = dataTypeBinary0.getDefaultValue("");
      assertNull(object0);
  }

  @Test
  public void test23()  throws Throwable  {
      JTable jTable0 = new JTable();
      DialectType dialectType0 = DialectType.FIREBIRD;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-32), "content-length", "zKOl/-|7T&cr", "zKOl/-|7T&cr", 0, "zKOl/-|7T&cr", false, 0, 110, 1, false, false, true, dialectType0);
      DataTypeBinary dataTypeBinary0 = new DataTypeBinary(jTable0, columnDisplayDefinition0);
      Object object0 = dataTypeBinary0.getDefaultValue("content-length");
      assertNotNull(object0);
  }

  @Test
  public void test24()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, "");
      DataTypeBinary dataTypeBinary0 = new DataTypeBinary((JTable) null, columnDisplayDefinition0);
      FileDescriptor fileDescriptor0 = FileDescriptor.out;
      FileInputStream fileInputStream0 = new FileInputStream(fileDescriptor0);
      String string0 = dataTypeBinary0.importObject(fileInputStream0);
      assertEquals("", string0);
  }
}
