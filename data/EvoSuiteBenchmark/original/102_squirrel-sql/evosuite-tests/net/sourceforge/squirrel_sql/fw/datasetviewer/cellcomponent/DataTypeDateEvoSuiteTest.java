/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.Date;
import java.util.Vector;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import net.sourceforge.squirrel_sql.fw.datasetviewer.ColumnDisplayDefinition;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.DataTypeDate;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.RestorableJTextArea;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.RestorableJTextField;
import net.sourceforge.squirrel_sql.fw.dialects.DialectType;
import net.sourceforge.squirrel_sql.fw.gui.OkJPanel;
import net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData;
import org.jfree.data.xy.XYDatasetTableModel;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DataTypeDateEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DataTypeDate.DateFormatTypeCombo dataTypeDate_DateFormatTypeCombo0 = new DataTypeDate.DateFormatTypeCombo();
      assertNotNull(dataTypeDate_DateFormatTypeCombo0);
      
      dataTypeDate_DateFormatTypeCombo0.setSelectedIndex(296);
      assertEquals(4, dataTypeDate_DateFormatTypeCombo0.getItemCount());
      assertEquals("net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.DataTypeDate$DateFormatTypeCombo[,0,0,0x0,invalid,layout=javax.swing.plaf.metal.MetalComboBoxUI$MetalComboBoxLayoutManager,alignmentX=0.0,alignmentY=0.0,border=,flags=328,maximumSize=,minimumSize=,preferredSize=,isEditable=false,lightWeightPopupEnabled=true,maximumRowCount=8,selectedItemReminder=Full (Tuesday, 2 July 2013)]", dataTypeDate_DateFormatTypeCombo0.toString());
      assertEquals(0, dataTypeDate_DateFormatTypeCombo0.getSelectedIndex());
  }

  @Test
  public void test1()  throws Throwable  {
      JTable jTable0 = new JTable(151, 151);
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(151, "LNM?,y%,N-v0I=|5TK");
      DataTypeDate dataTypeDate0 = new DataTypeDate(jTable0, columnDisplayDefinition0);
      RestorableJTextField restorableJTextField0 = (RestorableJTextField)dataTypeDate0.getJTextField();
      assertEquals(false, dataTypeDate0.getReadDateAsTimestamp());
      assertNotNull(restorableJTextField0);
  }

  @Test
  public void test2()  throws Throwable  {
      OkJPanel okJPanel0 = DataTypeDate.getControlPanel();
      assertEquals(true, okJPanel0.isRequestFocusEnabled());
  }

  @Test
  public void test3()  throws Throwable  {
      JTable jTable0 = new JTable(0, 1597);
      DialectType dialectType0 = DialectType.HADB;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, "j13k~0Cw9k", "j13k~0Cw9k", "j13k~0Cw9k", 1597, "j13k~0Cw9k", false, 1597, 0, 2001, false, false, false, dialectType0);
      DataTypeDate dataTypeDate0 = new DataTypeDate(jTable0, columnDisplayDefinition0);
      boolean boolean0 = dataTypeDate0.canDoFileIO();
      assertEquals(true, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      JTable jTable0 = new JTable(151, 151);
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(151, "LNM?,y%,N-v0I=|5TK");
      DataTypeDate dataTypeDate0 = new DataTypeDate(jTable0, columnDisplayDefinition0);
      RestorableJTextArea restorableJTextArea0 = (RestorableJTextArea)dataTypeDate0.getJTextArea((Object) jTable0);
      assertEquals(false, dataTypeDate0.getReadDateAsTimestamp());
      assertEquals("javax.swing.JTable[,0,0,0x0,invalid,alignmentX=0.0,alignmentY=0.0,border=,flags=251658568,maximumSize=,minimumSize=,preferredSize=,autoCreateColumnsFromModel=true,autoResizeMode=AUTO_RESIZE_SUBSEQUENT_COLUMNS,cellSelectionEnabled=false,editingColumn=-1,editingRow=-1,gridColor=javax.swing.plaf.ColorUIResource[r=122,g=138,b=153],preferredViewportSize=java.awt.Dimension[width=450,height=400],rowHeight=16,rowMargin=1,rowSelectionAllowed=true,selectionBackground=javax.swing.plaf.ColorUIResource[r=184,g=207,b=229],selectionForeground=sun.swing.PrintColorUIResource[r=51,g=51,b=51],showHorizontalLines=true,showVerticalLines=true]", restorableJTextArea0.getText());
      assertNotNull(restorableJTextArea0);
  }

  @Test
  public void test5()  throws Throwable  {
      JTable jTable0 = new JTable(0, 1597);
      DialectType dialectType0 = DialectType.HADB;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, "j13k~0Cw9k", "j13k~0Cw9k", "j13k~0Cw9k", 1597, "j13k~0Cw9k", false, 1597, 0, 2001, false, false, false, dialectType0);
      DataTypeDate dataTypeDate0 = new DataTypeDate(jTable0, columnDisplayDefinition0);
      StringBuffer stringBuffer0 = new StringBuffer();
      dataTypeDate0.validateAndConvertInPopup("j13k~0Cw9k", (Object) null, stringBuffer0);
      assertEquals(35, stringBuffer0.length());
      assertEquals("java.lang.IllegalArgumentException\n", stringBuffer0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(153, "M-'");
      DataTypeDate dataTypeDate0 = new DataTypeDate((JTable) null, columnDisplayDefinition0);
      boolean boolean0 = dataTypeDate0.isEditableInPopup((Object) null);
      assertEquals(true, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      JTable jTable0 = new JTable(151, 151);
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(151, "LNM?,y%,N-v0I=|5TK");
      DataTypeDate dataTypeDate0 = new DataTypeDate(jTable0, columnDisplayDefinition0);
      boolean boolean0 = dataTypeDate0.isEditableInCell((Object) "jis-b0");
      assertEquals(false, dataTypeDate0.getReadDateAsTimestamp());
      assertEquals(true, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      JTable jTable0 = new JTable();
      DialectType dialectType0 = DialectType.GENERIC;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(31, "{!H8?0TP$9~; e", "{!H8?0TP$9~; e", "{!H8?0TP$9~; e", 31, "{!H8?0TP$9~; e", false, 2003, 642, 2003, false, false, false, dialectType0);
      DataTypeDate dataTypeDate0 = new DataTypeDate(jTable0, columnDisplayDefinition0);
      boolean boolean0 = dataTypeDate0.needToReRead((Object) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      JTable jTable0 = new JTable();
      DialectType dialectType0 = DialectType.GENERIC;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(1, "1Wg9Bx*qtJk/Q;3<", "1Wg9Bx*qtJk/Q;3<", "1Wg9Bx*qtJk/Q;3<", 1, "1Wg9Bx*qtJk/Q;3<", false, (-1), 1, 1, false, false, true, dialectType0);
      DataTypeDate dataTypeDate0 = new DataTypeDate(jTable0, columnDisplayDefinition0);
      String string0 = dataTypeDate0.getClassName();
      assertEquals("java.sql.Date", string0);
  }

  @Test
  public void test10()  throws Throwable  {
      JTable jTable0 = new JTable(0, 1597);
      DialectType dialectType0 = DialectType.HADB;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, "j13k~0Cw9k", "j13k~0Cw9k", "j13k~0Cw9k", 1597, "j13k~0Cw9k", false, 1597, 0, 2001, false, false, false, dialectType0);
      DataTypeDate dataTypeDate0 = new DataTypeDate(jTable0, columnDisplayDefinition0);
      boolean boolean0 = dataTypeDate0.useBinaryEditingPanel();
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      boolean boolean0 = DataTypeDate.getReadDateAsTimestamp();
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      DialectType dialectType0 = DialectType.AXION;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-1694), "", "", "", (-1694), "", true, (-1694), (-1694), (-1694), true, true, true, dialectType0);
      DataTypeDate dataTypeDate0 = new DataTypeDate((JTable) null, columnDisplayDefinition0);
      Object object0 = dataTypeDate0.getDefaultValue("");
      assertNull(object0);
  }

  @Test
  public void test13()  throws Throwable  {
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      JTable jTable0 = new JTable((TableModel) xYDatasetTableModel0);
      DialectType dialectType0 = DialectType.HADB;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-364), "", "", "", (-364), "", false, (-364), (-364), 1845, false, false, false, dialectType0);
      DataTypeDate dataTypeDate0 = new DataTypeDate(jTable0, columnDisplayDefinition0);
      // Undeclared exception!
      try {
        dataTypeDate0.getWhereClauseValue((Object) "NORMAL", (ISQLDatabaseMetaData) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * column must be not empty
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(153, "M-'");
      DataTypeDate dataTypeDate0 = new DataTypeDate((JTable) null, columnDisplayDefinition0);
      Date date0 = (Date)dataTypeDate0.getDefaultValue("M-'");
      assertNull(date0);
  }

  @Test
  public void test15()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel((Vector) null, 0);
      Vector<Object> vector0 = defaultTableModel0.getDataVector();
      JTable jTable0 = new JTable(vector0, (Vector) null);
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, "-'");
      DataTypeDate dataTypeDate0 = new DataTypeDate(jTable0, columnDisplayDefinition0);
      FileDescriptor fileDescriptor0 = FileDescriptor.out;
      FileInputStream fileInputStream0 = new FileInputStream(fileDescriptor0);
      // Undeclared exception!
      try {
        dataTypeDate0.importObject(fileInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * -1
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      DataTypeDate.DateFormatTypeCombo dataTypeDate_DateFormatTypeCombo0 = new DataTypeDate.DateFormatTypeCombo();
      assertNotNull(dataTypeDate_DateFormatTypeCombo0);
      
      int int0 = dataTypeDate_DateFormatTypeCombo0.getValue();
      assertEquals("net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.DataTypeDate$DateFormatTypeCombo[,0,0,0x0,invalid,layout=javax.swing.plaf.metal.MetalComboBoxUI$MetalComboBoxLayoutManager,alignmentX=0.0,alignmentY=0.0,border=,flags=328,maximumSize=,minimumSize=,preferredSize=,isEditable=false,lightWeightPopupEnabled=true,maximumRowCount=8,selectedItemReminder=Full (Tuesday, 2 July 2013)]", dataTypeDate_DateFormatTypeCombo0.toString());
      assertEquals(4, dataTypeDate_DateFormatTypeCombo0.getItemCount());
      assertEquals(0, int0);
  }
}
