/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.sql;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.List;
import net.sourceforge.squirrel_sql.fw.preferences.BaseQueryTokenizerPreferenceBean;
import net.sourceforge.squirrel_sql.fw.preferences.IQueryTokenizerPreferenceBean;
import net.sourceforge.squirrel_sql.fw.sql.QueryTokenizer;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class QueryTokenizerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BaseQueryTokenizerPreferenceBean baseQueryTokenizerPreferenceBean0 = new BaseQueryTokenizerPreferenceBean();
      QueryTokenizer queryTokenizer0 = new QueryTokenizer((IQueryTokenizerPreferenceBean) baseQueryTokenizerPreferenceBean0);
      assertEquals(";", queryTokenizer0.getQuerySep());
      
      queryTokenizer0.setQuerySep(";");
      assertEquals("--", queryTokenizer0.getLineCommentBegin());
      assertEquals(false, queryTokenizer0.isRemoveMultiLineComment());
  }

  @Test
  public void test1()  throws Throwable  {
      BaseQueryTokenizerPreferenceBean baseQueryTokenizerPreferenceBean0 = new BaseQueryTokenizerPreferenceBean();
      QueryTokenizer queryTokenizer0 = new QueryTokenizer((IQueryTokenizerPreferenceBean) baseQueryTokenizerPreferenceBean0);
      queryTokenizer0.setRemoveMultiLineComment(false);
      assertEquals(false, queryTokenizer0.isRemoveMultiLineComment());
      assertEquals("--", queryTokenizer0.getLineCommentBegin());
      assertEquals(";", queryTokenizer0.getSQLStatementSeparator());
      assertEquals(";", queryTokenizer0.getQuerySep());
  }

  @Test
  public void test2()  throws Throwable  {
      BaseQueryTokenizerPreferenceBean baseQueryTokenizerPreferenceBean0 = new BaseQueryTokenizerPreferenceBean();
      QueryTokenizer queryTokenizer0 = new QueryTokenizer((IQueryTokenizerPreferenceBean) baseQueryTokenizerPreferenceBean0);
      assertEquals("--", queryTokenizer0.getLineCommentBegin());
      
      queryTokenizer0.setLineCommentBegin("hBTg");
      assertEquals(";", queryTokenizer0.getQuerySep());
  }

  @Test
  public void test3()  throws Throwable  {
      QueryTokenizer queryTokenizer0 = new QueryTokenizer();
      queryTokenizer0.getQuerySep();
      assertEquals(true, queryTokenizer0.isRemoveMultiLineComment());
  }

  @Test
  public void test4()  throws Throwable  {
      BaseQueryTokenizerPreferenceBean baseQueryTokenizerPreferenceBean0 = new BaseQueryTokenizerPreferenceBean();
      QueryTokenizer queryTokenizer0 = new QueryTokenizer((IQueryTokenizerPreferenceBean) baseQueryTokenizerPreferenceBean0);
      String string0 = queryTokenizer0.getLineCommentBegin();
      assertEquals("--", string0);
      assertEquals(";", queryTokenizer0.getQuerySep());
      assertNotNull(string0);
      assertEquals(false, queryTokenizer0.isRemoveMultiLineComment());
  }

  @Test
  public void test5()  throws Throwable  {
      BaseQueryTokenizerPreferenceBean baseQueryTokenizerPreferenceBean0 = new BaseQueryTokenizerPreferenceBean();
      QueryTokenizer queryTokenizer0 = new QueryTokenizer((IQueryTokenizerPreferenceBean) baseQueryTokenizerPreferenceBean0);
      String string0 = queryTokenizer0.getSQLStatementSeparator();
      assertEquals(";", string0);
      assertEquals(false, queryTokenizer0.isRemoveMultiLineComment());
      assertEquals("--", queryTokenizer0.getLineCommentBegin());
      assertNotNull(string0);
  }

  @Test
  public void test6()  throws Throwable  {
      BaseQueryTokenizerPreferenceBean baseQueryTokenizerPreferenceBean0 = new BaseQueryTokenizerPreferenceBean();
      QueryTokenizer queryTokenizer0 = new QueryTokenizer((IQueryTokenizerPreferenceBean) baseQueryTokenizerPreferenceBean0);
      boolean boolean0 = queryTokenizer0.isRemoveMultiLineComment();
      assertEquals(false, boolean0);
      assertEquals(";", queryTokenizer0.getSQLStatementSeparator());
      assertEquals("--", queryTokenizer0.getLineCommentBegin());
  }

  @Test
  public void test7()  throws Throwable  {
      QueryTokenizer queryTokenizer0 = new QueryTokenizer("H^hHYX,;BVZmqoy'", "H^hHYX,;BVZmqoy'", true);
      queryTokenizer0.getTokenizerSessPropsInteractions();
      assertEquals(true, queryTokenizer0.isRemoveMultiLineComment());
  }

  @Test
  public void test8()  throws Throwable  {
      QueryTokenizer queryTokenizer0 = new QueryTokenizer();
      // Undeclared exception!
      try {
        queryTokenizer0.nextQuery();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      BaseQueryTokenizerPreferenceBean baseQueryTokenizerPreferenceBean0 = new BaseQueryTokenizerPreferenceBean();
      QueryTokenizer queryTokenizer0 = new QueryTokenizer((IQueryTokenizerPreferenceBean) baseQueryTokenizerPreferenceBean0);
      // Undeclared exception!
      try {
        queryTokenizer0.hasQuery();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      BaseQueryTokenizerPreferenceBean baseQueryTokenizerPreferenceBean0 = new BaseQueryTokenizerPreferenceBean();
      QueryTokenizer queryTokenizer0 = new QueryTokenizer((IQueryTokenizerPreferenceBean) baseQueryTokenizerPreferenceBean0);
      // Undeclared exception!
      try {
        queryTokenizer0.setScriptToTokenize("\n)!F+ua5Qbnu1lh");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
        /*
         * String index out of range: -1
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      QueryTokenizer queryTokenizer0 = new QueryTokenizer("/*}jp*/X=", "/*}jp*/X=", true);
      queryTokenizer0.setScriptToTokenize("/*}jp*/X=");
      assertEquals(true, queryTokenizer0.isRemoveMultiLineComment());
      assertEquals(0, queryTokenizer0.getQueryCount());
      assertEquals(false, queryTokenizer0.hasQuery());
  }

  @Test
  public void test12()  throws Throwable  {
      BaseQueryTokenizerPreferenceBean baseQueryTokenizerPreferenceBean0 = new BaseQueryTokenizerPreferenceBean();
      QueryTokenizer queryTokenizer0 = new QueryTokenizer((IQueryTokenizerPreferenceBean) baseQueryTokenizerPreferenceBean0);
      // Undeclared exception!
      try {
        queryTokenizer0.setScriptToTokenize("/*<F+ke1u58Qbn^uT7h");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
        /*
         * String index out of range: -1
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      BaseQueryTokenizerPreferenceBean baseQueryTokenizerPreferenceBean0 = new BaseQueryTokenizerPreferenceBean();
      QueryTokenizer queryTokenizer0 = new QueryTokenizer((IQueryTokenizerPreferenceBean) baseQueryTokenizerPreferenceBean0);
      queryTokenizer0.getQueryCount();
      assertEquals("--", queryTokenizer0.getLineCommentBegin());
      assertEquals(";", queryTokenizer0.getQuerySep());
      assertEquals(false, queryTokenizer0.isRemoveMultiLineComment());
  }

  @Test
  public void test14()  throws Throwable  {
      BaseQueryTokenizerPreferenceBean baseQueryTokenizerPreferenceBean0 = new BaseQueryTokenizerPreferenceBean();
      QueryTokenizer queryTokenizer0 = new QueryTokenizer((IQueryTokenizerPreferenceBean) baseQueryTokenizerPreferenceBean0);
      queryTokenizer0.expandFileIncludes("-]8>1");
      assertEquals("--", queryTokenizer0.getLineCommentBegin());
      assertEquals(false, queryTokenizer0.isRemoveMultiLineComment());
      assertEquals(";", queryTokenizer0.getSQLStatementSeparator());
  }

  @Test
  public void test15()  throws Throwable  {
      QueryTokenizer queryTokenizer0 = new QueryTokenizer();
      queryTokenizer0.expandFileIncludes((String) null);
      assertEquals(true, queryTokenizer0.isRemoveMultiLineComment());
  }

  @Test
  public void test16()  throws Throwable  {
      QueryTokenizer queryTokenizer0 = new QueryTokenizer("H^hHYX,;BVZmqoy'", "H^hHYX,;BVZmqoy'", true);
      List<String> list0 = queryTokenizer0.getStatementsFromIncludeFile("H^hHYX,;BVZmqoy'");
      assertEquals(true, queryTokenizer0.isRemoveMultiLineComment());
      assertNotNull(list0);
  }

  @Test
  public void test17()  throws Throwable  {
      QueryTokenizer queryTokenizer0 = new QueryTokenizer();
      List<String> list0 = queryTokenizer0.getStatementsFromIncludeFile("'$\n");
      assertNotNull(list0);
      assertEquals(true, queryTokenizer0.isRemoveMultiLineComment());
  }
}
