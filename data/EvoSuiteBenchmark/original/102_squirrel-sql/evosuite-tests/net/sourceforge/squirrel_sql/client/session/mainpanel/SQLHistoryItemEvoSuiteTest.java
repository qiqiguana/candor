/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.client.session.mainpanel;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Date;
import net.sourceforge.squirrel_sql.client.session.mainpanel.SQLHistoryItem;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SQLHistoryItemEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SQLHistoryItem sQLHistoryItem0 = new SQLHistoryItem();
      assertNotNull(sQLHistoryItem0);
      
      Date date0 = new Date();
      sQLHistoryItem0.setLastUsageTime(date0);
      assertEquals(1372741028038L, date0.getTime());
  }

  @Test
  public void test1()  throws Throwable  {
      SQLHistoryItem sQLHistoryItem0 = new SQLHistoryItem("", "");
      sQLHistoryItem0.setAliasName("");
      assertEquals("", sQLHistoryItem0.getAliasName());
  }

  @Test
  public void test2()  throws Throwable  {
      SQLHistoryItem sQLHistoryItem0 = new SQLHistoryItem("", "");
      Date date0 = sQLHistoryItem0.getLastUsageTime();
      assertNull(date0);
  }

  @Test
  public void test3()  throws Throwable  {
      SQLHistoryItem sQLHistoryItem0 = new SQLHistoryItem();
      String string0 = sQLHistoryItem0.toString();
      assertEquals("", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      SQLHistoryItem sQLHistoryItem0 = new SQLHistoryItem("", "");
      SQLHistoryItem sQLHistoryItem1 = (SQLHistoryItem)sQLHistoryItem0.clone();
      assertNotSame(sQLHistoryItem1, sQLHistoryItem0);
  }

  @Test
  public void test5()  throws Throwable  {
      SQLHistoryItem sQLHistoryItem0 = new SQLHistoryItem("", "");
      int int0 = sQLHistoryItem0.hashCode();
      assertEquals(0, int0);
  }

  @Test
  public void test6()  throws Throwable  {
      SQLHistoryItem sQLHistoryItem0 = new SQLHistoryItem();
      String string0 = sQLHistoryItem0.getAliasName();
      assertEquals("", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      SQLHistoryItem sQLHistoryItem0 = null;
      try {
        sQLHistoryItem0 = new SQLHistoryItem((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * sql == null
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      SQLHistoryItem sQLHistoryItem0 = new SQLHistoryItem("sU*t)", "sU*t)");
      assertEquals("sU*t)", sQLHistoryItem0.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      SQLHistoryItem sQLHistoryItem0 = new SQLHistoryItem();
      assertNotNull(sQLHistoryItem0);
      
      boolean boolean0 = sQLHistoryItem0.equals((Object) "");
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      SQLHistoryItem sQLHistoryItem0 = new SQLHistoryItem();
      assertNotNull(sQLHistoryItem0);
      
      boolean boolean0 = sQLHistoryItem0.equals((Object) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      SQLHistoryItem sQLHistoryItem0 = new SQLHistoryItem("", "");
      assertNotNull(sQLHistoryItem0);
      
      SQLHistoryItem sQLHistoryItem1 = new SQLHistoryItem();
      boolean boolean0 = sQLHistoryItem0.equals((Object) sQLHistoryItem1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      SQLHistoryItem sQLHistoryItem0 = new SQLHistoryItem();
      // Undeclared exception!
      try {
        sQLHistoryItem0.setSQL((String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * sql == null
         */
      }
  }
}
