/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.awt.Component;
import java.awt.RenderingHints;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import net.sourceforge.squirrel_sql.fw.datasetviewer.ColumnDisplayDefinition;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.DataTypeJavaObject;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.RestorableJTextArea;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.RestorableJTextField;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.whereClause.ParameterWhereClausePart;
import net.sourceforge.squirrel_sql.fw.dialects.DialectType;
import net.sourceforge.squirrel_sql.fw.gui.OkJPanel;
import net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData;
import org.jfree.data.xy.XYDatasetTableModel;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DataTypeJavaObjectEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      OkJPanel okJPanel0 = DataTypeJavaObject.getControlPanel();
      assertNotNull(okJPanel0);
      assertEquals(Component.BaselineResizeBehavior.CONSTANT_ASCENT, okJPanel0.getBaselineResizeBehavior());
      assertEquals(1, okJPanel0.countComponents());
  }

  @Test
  public void test1()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, "'");
      DataTypeJavaObject dataTypeJavaObject0 = new DataTypeJavaObject((JTable) null, columnDisplayDefinition0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      boolean boolean0 = dataTypeJavaObject0.isEditableInCell((Object) bigDecimal0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(0, 0);
      JTable jTable0 = new JTable((TableModel) defaultTableModel0);
      DialectType dialectType0 = DialectType.DAFFODIL;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, "", "", "", 0, "", false, 0, 0, 0, false, false, false, dialectType0);
      DataTypeJavaObject dataTypeJavaObject0 = new DataTypeJavaObject(jTable0, columnDisplayDefinition0);
      try {
        dataTypeJavaObject0.importObject((FileInputStream) null);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Can not import data type JAVA_OBJECT
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, 64);
      JTable jTable0 = new JTable((TableModel) defaultTableModel0);
      DialectType dialectType0 = DialectType.FIREBIRD;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(64, "", "", "", 64, "", false, 64, 64, 64, false, false, false, dialectType0);
      DataTypeJavaObject dataTypeJavaObject0 = new DataTypeJavaObject(jTable0, columnDisplayDefinition0);
      boolean boolean0 = dataTypeJavaObject0.useBinaryEditingPanel();
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      JTable jTable0 = new JTable();
      DialectType dialectType0 = DialectType.INTERBASE;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, "", "", "", 0, "", true, 0, 0, 0, true, true, true, dialectType0);
      DataTypeJavaObject dataTypeJavaObject0 = new DataTypeJavaObject(jTable0, columnDisplayDefinition0);
      boolean boolean0 = dataTypeJavaObject0.canDoFileIO();
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = RenderingHints.VALUE_DITHER_DEFAULT;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, 64);
      JTable jTable0 = new JTable((TableModel) defaultTableModel0);
      DialectType dialectType0 = DialectType.FIREBIRD;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(64, "", "", "", 64, "", false, 64, 64, 64, false, false, false, dialectType0);
      DataTypeJavaObject dataTypeJavaObject0 = new DataTypeJavaObject(jTable0, columnDisplayDefinition0);
      RestorableJTextArea restorableJTextArea0 = (RestorableJTextArea)dataTypeJavaObject0.getJTextArea(object0);
      assertNotNull(restorableJTextArea0);
      assertEquals("Default dithering mode", restorableJTextArea0.getText());
  }

  @Test
  public void test6()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, "'");
      DataTypeJavaObject dataTypeJavaObject0 = new DataTypeJavaObject((JTable) null, columnDisplayDefinition0);
      boolean boolean0 = dataTypeJavaObject0.needToReRead((Object) "layeredPane");
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      JTable jTable0 = new JTable((TableModel) xYDatasetTableModel0, (TableColumnModel) null);
      DialectType dialectType0 = DialectType.MCKOI;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(1787, "", "", "", 1787, "", false, 1787, 1787, 1787, false, false, false, dialectType0);
      DataTypeJavaObject dataTypeJavaObject0 = new DataTypeJavaObject(jTable0, columnDisplayDefinition0);
      boolean boolean0 = dataTypeJavaObject0.isEditableInPopup((Object) "");
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      JTable jTable0 = new JTable();
      DialectType dialectType0 = DialectType.DERBY;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-1318), "", "", "", (-1318), "", false, (-1318), (-1318), (-1318), false, false, false, dialectType0);
      DataTypeJavaObject dataTypeJavaObject0 = new DataTypeJavaObject(jTable0, columnDisplayDefinition0);
      Object object0 = dataTypeJavaObject0.getDefaultValue("");
      assertNull(object0);
  }

  @Test
  public void test9()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-1335), "1h3|,VHJ@cDP8-%J");
      DataTypeJavaObject dataTypeJavaObject0 = new DataTypeJavaObject((JTable) null, columnDisplayDefinition0);
      String string0 = dataTypeJavaObject0.getClassName();
      assertEquals("java.lang.String", string0);
  }

  @Test
  public void test10()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, "'");
      DataTypeJavaObject dataTypeJavaObject0 = new DataTypeJavaObject((JTable) null, columnDisplayDefinition0);
      RestorableJTextField restorableJTextField0 = (RestorableJTextField)dataTypeJavaObject0.getJTextField();
      assertEquals(true, restorableJTextField0.isOpaque());
  }

  @Test
  public void test11()  throws Throwable  {
      JTable jTable0 = new JTable(0, 0);
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, (String) null);
      DataTypeJavaObject dataTypeJavaObject0 = new DataTypeJavaObject(jTable0, columnDisplayDefinition0);
      try {
        dataTypeJavaObject0.exportObject((FileOutputStream) null, (String) null);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Can not export data type JAVA_OBJECT
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      JTable jTable0 = new JTable();
      DialectType dialectType0 = DialectType.INGRES;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, "Invalid 'index': ", "Invalid 'index': ", "Invalid 'index': ", 0, "Invalid 'index': ", true, 0, 0, 0, true, true, true, dialectType0);
      DataTypeJavaObject dataTypeJavaObject0 = new DataTypeJavaObject(jTable0, columnDisplayDefinition0);
      // Undeclared exception!
      try {
        dataTypeJavaObject0.readResultSet((ResultSet) null, 0, true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-1335), "1h3|,VHJ@cDP8-%J");
      DataTypeJavaObject dataTypeJavaObject0 = new DataTypeJavaObject((JTable) null, columnDisplayDefinition0);
      ParameterWhereClausePart parameterWhereClausePart0 = (ParameterWhereClausePart)dataTypeJavaObject0.getWhereClauseValue((Object) "1h3|,VHJ@cDP8-%J", (ISQLDatabaseMetaData) null);
      assertEquals(true, parameterWhereClausePart0.shouldBeUsed());
  }

  @Test
  public void test14()  throws Throwable  {
      Object object0 = RenderingHints.VALUE_FRACTIONALMETRICS_DEFAULT;
      JTable jTable0 = new JTable(193, 193);
      DialectType dialectType0 = DialectType.FIREBIRD;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(193, "CQG", "CQG", "CQG", 193, "CQG", true, 193, 193, 193, true, true, true, dialectType0);
      DataTypeJavaObject dataTypeJavaObject0 = new DataTypeJavaObject(jTable0, columnDisplayDefinition0);
      // Undeclared exception!
      try {
        dataTypeJavaObject0.setPreparedStatementValue((PreparedStatement) null, object0, 193);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * sun.awt.SunHints$Value cannot be cast to java.lang.String
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      JTable jTable0 = new JTable((TableModel) defaultTableModel0);
      DialectType dialectType0 = DialectType.ORACLE;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(996, (String) null, (String) null, (String) null, 996, (String) null, false, 996, 996, 996, false, false, false, dialectType0);
      DataTypeJavaObject dataTypeJavaObject0 = new DataTypeJavaObject(jTable0, columnDisplayDefinition0);
      Object object0 = dataTypeJavaObject0.getDefaultValue((String) null);
      assertNull(object0);
  }

  @Test
  public void test16()  throws Throwable  {
      JTable jTable0 = new JTable(0, 0);
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, (String) null);
      DataTypeJavaObject dataTypeJavaObject0 = new DataTypeJavaObject(jTable0, columnDisplayDefinition0);
      Object object0 = dataTypeJavaObject0.getDefaultValue((String) null);
      assertNull(object0);
  }
}
