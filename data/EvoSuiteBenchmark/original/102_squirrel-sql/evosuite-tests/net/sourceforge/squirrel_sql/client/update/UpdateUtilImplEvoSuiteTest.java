/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.client.update;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.List;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.swing.table.TableRowSorter;
import net.sourceforge.squirrel_sql.client.plugin.IPluginManager;
import net.sourceforge.squirrel_sql.client.preferences.IUpdateSettings;
import net.sourceforge.squirrel_sql.client.preferences.UpdateSettings;
import net.sourceforge.squirrel_sql.client.update.UpdateCheckFrequency;
import net.sourceforge.squirrel_sql.client.update.UpdateUtilImpl;
import net.sourceforge.squirrel_sql.client.update.gui.ArtifactStatus;
import net.sourceforge.squirrel_sql.client.update.util.PathUtils;
import net.sourceforge.squirrel_sql.client.update.util.PathUtilsImpl;
import net.sourceforge.squirrel_sql.client.update.xmlbeans.ChannelXmlBean;
import net.sourceforge.squirrel_sql.client.update.xmlbeans.UpdateXmlSerializer;
import net.sourceforge.squirrel_sql.client.update.xmlbeans.UpdateXmlSerializerImpl;
import net.sourceforge.squirrel_sql.client.util.ApplicationFileWrappers;
import net.sourceforge.squirrel_sql.client.util.ApplicationFileWrappersImpl;
import net.sourceforge.squirrel_sql.fw.util.FileWrapper;
import net.sourceforge.squirrel_sql.fw.util.FileWrapperFactory;
import net.sourceforge.squirrel_sql.fw.util.FileWrapperFactoryImpl;
import net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl;
import net.sourceforge.squirrel_sql.fw.util.IOUtilities;
import net.sourceforge.squirrel_sql.fw.util.IOUtilitiesImpl;
import net.sourceforge.squirrel_sql.fw.util.IProxySettings;
import net.sourceforge.squirrel_sql.fw.util.ProxySettings;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.jfree.data.xy.XYDatasetTableModel;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class UpdateUtilImplEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          UpdateUtilImpl updateUtilImpl0 = new UpdateUtilImpl();
          // Undeclared exception!
          try {
            updateUtilImpl0.getI18nDownloadsDir();
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission /mnt/fastdata/ac1gf/SF110/dist/102_squirrel-sql/update write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.mkdir(File.java:1155)
             * net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl.mkdir(FileWrapperImpl.java:415)
             * net.sourceforge.squirrel_sql.client.update.UpdateUtilImpl.getDir(UpdateUtilImpl.java:1027)
             * net.sourceforge.squirrel_sql.client.update.UpdateUtilImpl.getSquirrelUpdateDir(UpdateUtilImpl.java:492)
             * net.sourceforge.squirrel_sql.client.update.UpdateUtilImpl.getDownloadsDir(UpdateUtilImpl.java:500)
             * net.sourceforge.squirrel_sql.client.update.UpdateUtilImpl.getI18nDownloadsDir(UpdateUtilImpl.java:524)
             * sun.reflect.GeneratedMethodAccessor111.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          UpdateUtilImpl updateUtilImpl0 = new UpdateUtilImpl();
          // Undeclared exception!
          try {
            updateUtilImpl0.getI18nBackupDir();
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission /mnt/fastdata/ac1gf/SF110/dist/102_squirrel-sql/update write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.mkdir(File.java:1155)
             * net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl.mkdir(FileWrapperImpl.java:415)
             * net.sourceforge.squirrel_sql.client.update.UpdateUtilImpl.getDir(UpdateUtilImpl.java:1027)
             * net.sourceforge.squirrel_sql.client.update.UpdateUtilImpl.getSquirrelUpdateDir(UpdateUtilImpl.java:492)
             * net.sourceforge.squirrel_sql.client.update.UpdateUtilImpl.getBackupDir(UpdateUtilImpl.java:532)
             * net.sourceforge.squirrel_sql.client.update.UpdateUtilImpl.getI18nBackupDir(UpdateUtilImpl.java:548)
             * sun.reflect.GeneratedMethodAccessor112.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
      UpdateUtilImpl updateUtilImpl0 = new UpdateUtilImpl();
      IPluginManager iPluginManager0 = updateUtilImpl0.getPluginManager();
      assertNull(iPluginManager0);
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          UpdateUtilImpl updateUtilImpl0 = new UpdateUtilImpl();
          ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
          FileWrapperImpl fileWrapperImpl0 = (FileWrapperImpl)applicationFileWrappersImpl0.getLibraryDirectory();
          // Undeclared exception!
          try {
            updateUtilImpl0.moveFiles((FileWrapper) fileWrapperImpl0, "jfreechart-1.", false, (FileWrapper) fileWrapperImpl0);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission /mnt/fastdata/ac1gf/SF110/dist/102_squirrel-sql/lib/fest-assert-1.2.jar delete)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkDelete(SecurityManager.java:990)
             * java.io.File.delete(File.java:902)
             * net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl.delete(FileWrapperImpl.java:359)
             * net.sourceforge.squirrel_sql.client.update.UpdateUtilImpl.moveFiles(UpdateUtilImpl.java:326)
             * sun.reflect.GeneratedMethodAccessor134.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
      UpdateUtilImpl updateUtilImpl0 = new UpdateUtilImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      updateUtilImpl0.setApplicationFileWrappers((ApplicationFileWrappers) applicationFileWrappersImpl0);
  }

  @Test
  public void test5()  throws Throwable  {
      UpdateUtilImpl updateUtilImpl0 = new UpdateUtilImpl();
      updateUtilImpl0.setPluginManager((IPluginManager) null);
  }

  @Test
  public void test6()  throws Throwable  {
      UpdateUtilImpl updateUtilImpl0 = new UpdateUtilImpl();
      FileWrapperImpl fileWrapperImpl0 = (FileWrapperImpl)updateUtilImpl0.getInstalledSquirrelMainJarLocation();
      assertNotNull(fileWrapperImpl0);
      
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      FileWrapperImpl fileWrapperImpl1 = (FileWrapperImpl)applicationFileWrappersImpl0.getLibraryDirectory();
      // Undeclared exception!
      try {
        updateUtilImpl0.copyDir((FileWrapper) fileWrapperImpl1, "-", false, (FileWrapper) fileWrapperImpl0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Expected toDir(/mnt/fastdata/ac1gf/SF110/dist/102_squirrel-sql/squirrel-sql.jar) to be a directory.
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          UpdateUtilImpl updateUtilImpl0 = new UpdateUtilImpl();
          // Undeclared exception!
          try {
            updateUtilImpl0.getPluginDownloadsDir();
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission /mnt/fastdata/ac1gf/SF110/dist/102_squirrel-sql/update write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.mkdir(File.java:1155)
             * net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl.mkdir(FileWrapperImpl.java:415)
             * net.sourceforge.squirrel_sql.client.update.UpdateUtilImpl.getDir(UpdateUtilImpl.java:1027)
             * net.sourceforge.squirrel_sql.client.update.UpdateUtilImpl.getSquirrelUpdateDir(UpdateUtilImpl.java:492)
             * net.sourceforge.squirrel_sql.client.update.UpdateUtilImpl.getDownloadsDir(UpdateUtilImpl.java:500)
             * net.sourceforge.squirrel_sql.client.update.UpdateUtilImpl.getPluginDownloadsDir(UpdateUtilImpl.java:516)
             * sun.reflect.GeneratedMethodAccessor137.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test8()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          UpdateUtilImpl updateUtilImpl0 = new UpdateUtilImpl();
          // Undeclared exception!
          try {
            updateUtilImpl0.getCoreDownloadsDir();
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission /mnt/fastdata/ac1gf/SF110/dist/102_squirrel-sql/update write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.mkdir(File.java:1155)
             * net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl.mkdir(FileWrapperImpl.java:415)
             * net.sourceforge.squirrel_sql.client.update.UpdateUtilImpl.getDir(UpdateUtilImpl.java:1027)
             * net.sourceforge.squirrel_sql.client.update.UpdateUtilImpl.getSquirrelUpdateDir(UpdateUtilImpl.java:492)
             * net.sourceforge.squirrel_sql.client.update.UpdateUtilImpl.getDownloadsDir(UpdateUtilImpl.java:500)
             * net.sourceforge.squirrel_sql.client.update.UpdateUtilImpl.getCoreDownloadsDir(UpdateUtilImpl.java:508)
             * sun.reflect.GeneratedMethodAccessor138.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test9()  throws Throwable  {
      UpdateUtilImpl updateUtilImpl0 = new UpdateUtilImpl();
      UpdateXmlSerializerImpl updateXmlSerializerImpl0 = new UpdateXmlSerializerImpl();
      updateUtilImpl0.setUpdateXmlSerializer((UpdateXmlSerializer) updateXmlSerializerImpl0);
  }

  @Test
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          UpdateUtilImpl updateUtilImpl0 = new UpdateUtilImpl();
          TableRowSorter<XYDatasetTableModel> tableRowSorter0 = new TableRowSorter<XYDatasetTableModel>();
          List<?> list0 = tableRowSorter0.getSortKeys();
          // Undeclared exception!
          try {
            updateUtilImpl0.saveChangeList(list0);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission /mnt/fastdata/ac1gf/SF110/dist/102_squirrel-sql/update write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.mkdir(File.java:1155)
             * net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl.mkdir(FileWrapperImpl.java:415)
             * net.sourceforge.squirrel_sql.client.update.UpdateUtilImpl.getDir(UpdateUtilImpl.java:1027)
             * net.sourceforge.squirrel_sql.client.update.UpdateUtilImpl.getSquirrelUpdateDir(UpdateUtilImpl.java:492)
             * net.sourceforge.squirrel_sql.client.update.UpdateUtilImpl.getChangeListFile(UpdateUtilImpl.java:564)
             * net.sourceforge.squirrel_sql.client.update.UpdateUtilImpl.saveChangeList(UpdateUtilImpl.java:576)
             * sun.reflect.GeneratedMethodAccessor145.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test11()  throws Throwable  {
      UpdateUtilImpl updateUtilImpl0 = new UpdateUtilImpl();
      FileWrapperImpl fileWrapperImpl0 = (FileWrapperImpl)updateUtilImpl0.getSquirrelHomeDir();
      updateUtilImpl0.copyDir((FileWrapper) fileWrapperImpl0, (FileWrapper) fileWrapperImpl0);
      assertEquals("/mnt/fastdata/ac1gf/SF110/dist/102_squirrel-sql", fileWrapperImpl0.getCanonicalPath());
  }

  @Test
  public void test12()  throws Throwable  {
      UpdateUtilImpl updateUtilImpl0 = new UpdateUtilImpl();
      FileWrapperImpl fileWrapperImpl0 = (FileWrapperImpl)updateUtilImpl0.getSquirrelPluginsDir();
      try {
        updateUtilImpl0.getChangeList((FileWrapper) fileWrapperImpl0);
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
        /*
         * /mnt/fastdata/ac1gf/SF110/dist/102_squirrel-sql/plugins (No such file or directory)
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          UpdateUtilImpl updateUtilImpl0 = new UpdateUtilImpl();
          // Undeclared exception!
          try {
            updateUtilImpl0.getChangeList();
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission /mnt/fastdata/ac1gf/SF110/dist/102_squirrel-sql/update write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.mkdir(File.java:1155)
             * net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl.mkdir(FileWrapperImpl.java:415)
             * net.sourceforge.squirrel_sql.client.update.UpdateUtilImpl.getDir(UpdateUtilImpl.java:1027)
             * net.sourceforge.squirrel_sql.client.update.UpdateUtilImpl.getSquirrelUpdateDir(UpdateUtilImpl.java:492)
             * net.sourceforge.squirrel_sql.client.update.UpdateUtilImpl.getChangeListFile(UpdateUtilImpl.java:564)
             * net.sourceforge.squirrel_sql.client.update.UpdateUtilImpl.getChangeList(UpdateUtilImpl.java:584)
             * sun.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test14()  throws Throwable  {
      UpdateUtilImpl updateUtilImpl0 = new UpdateUtilImpl();
      ChannelXmlBean channelXmlBean0 = new ChannelXmlBean();
      // Undeclared exception!
      try {
        updateUtilImpl0.getArtifactStatus(channelXmlBean0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test15()  throws Throwable  {
      UpdateUtilImpl updateUtilImpl0 = new UpdateUtilImpl();
      PathUtilsImpl pathUtilsImpl0 = new PathUtilsImpl();
      updateUtilImpl0.setPathUtils((PathUtils) pathUtilsImpl0);
  }

  @Test
  public void test16()  throws Throwable  {
      UpdateUtilImpl updateUtilImpl0 = new UpdateUtilImpl();
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      updateUtilImpl0.setFileWrapperFactory((FileWrapperFactory) fileWrapperFactoryImpl0);
  }

  @Test
  public void test17()  throws Throwable  {
      UpdateUtilImpl updateUtilImpl0 = new UpdateUtilImpl();
      IOUtilitiesImpl iOUtilitiesImpl0 = new IOUtilitiesImpl();
      updateUtilImpl0.setIOUtilities((IOUtilities) iOUtilitiesImpl0);
  }

  @Test
  public void test18()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          UpdateUtilImpl updateUtilImpl0 = new UpdateUtilImpl();
          // Undeclared exception!
          try {
            updateUtilImpl0.getPluginBackupDir();
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission /mnt/fastdata/ac1gf/SF110/dist/102_squirrel-sql/update write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.mkdir(File.java:1155)
             * net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl.mkdir(FileWrapperImpl.java:415)
             * net.sourceforge.squirrel_sql.client.update.UpdateUtilImpl.getDir(UpdateUtilImpl.java:1027)
             * net.sourceforge.squirrel_sql.client.update.UpdateUtilImpl.getSquirrelUpdateDir(UpdateUtilImpl.java:492)
             * net.sourceforge.squirrel_sql.client.update.UpdateUtilImpl.getBackupDir(UpdateUtilImpl.java:532)
             * net.sourceforge.squirrel_sql.client.update.UpdateUtilImpl.getPluginBackupDir(UpdateUtilImpl.java:556)
             * sun.reflect.GeneratedMethodAccessor150.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test19()  throws Throwable  {
      UpdateUtilImpl updateUtilImpl0 = new UpdateUtilImpl();
      FileWrapper[] fileWrapperArray0 = new FileWrapper[1];
      // Undeclared exception!
      try {
        updateUtilImpl0.createZipFile((FileWrapper) null, fileWrapperArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test20()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          UpdateUtilImpl updateUtilImpl0 = new UpdateUtilImpl();
          // Undeclared exception!
          try {
            updateUtilImpl0.getCoreBackupDir();
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission /mnt/fastdata/ac1gf/SF110/dist/102_squirrel-sql/update write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.mkdir(File.java:1155)
             * net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl.mkdir(FileWrapperImpl.java:415)
             * net.sourceforge.squirrel_sql.client.update.UpdateUtilImpl.getDir(UpdateUtilImpl.java:1027)
             * net.sourceforge.squirrel_sql.client.update.UpdateUtilImpl.getSquirrelUpdateDir(UpdateUtilImpl.java:492)
             * net.sourceforge.squirrel_sql.client.update.UpdateUtilImpl.getBackupDir(UpdateUtilImpl.java:532)
             * net.sourceforge.squirrel_sql.client.update.UpdateUtilImpl.getCoreBackupDir(UpdateUtilImpl.java:540)
             * sun.reflect.GeneratedMethodAccessor151.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test21()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          UpdateUtilImpl updateUtilImpl0 = new UpdateUtilImpl();
          ProxySettings proxySettings0 = new ProxySettings();
          try {
            updateUtilImpl0.downloadCurrentRelease(", ", 1, ", ", ", ", (IProxySettings) proxySettings0);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission /mnt/fastdata/ac1gf/SF110/dist/102_squirrel-sql/update write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.mkdir(File.java:1155)
             * net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl.mkdir(FileWrapperImpl.java:415)
             * net.sourceforge.squirrel_sql.client.update.UpdateUtilImpl.getDir(UpdateUtilImpl.java:1027)
             * net.sourceforge.squirrel_sql.client.update.UpdateUtilImpl.getSquirrelUpdateDir(UpdateUtilImpl.java:492)
             * net.sourceforge.squirrel_sql.client.update.UpdateUtilImpl.getDownloadsDir(UpdateUtilImpl.java:500)
             * net.sourceforge.squirrel_sql.client.update.UpdateUtilImpl.downloadCurrentReleaseHttp(UpdateUtilImpl.java:1055)
             * net.sourceforge.squirrel_sql.client.update.UpdateUtilImpl.downloadCurrentRelease(UpdateUtilImpl.java:204)
             * sun.reflect.GeneratedMethodAccessor161.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test22()  throws Throwable  {
      UpdateUtilImpl updateUtilImpl0 = new UpdateUtilImpl();
      ChannelXmlBean channelXmlBean0 = updateUtilImpl0.loadUpdateFromFileSystem("lib");
      assertNull(channelXmlBean0);
  }

  @Test
  public void test23()  throws Throwable  {
      UpdateUtilImpl updateUtilImpl0 = new UpdateUtilImpl();
      ChannelXmlBean channelXmlBean0 = updateUtilImpl0.loadUpdateFromFileSystem("v~K6/Bo");
      assertNull(channelXmlBean0);
  }

  @Test
  public void test24()  throws Throwable  {
      UpdateUtilImpl updateUtilImpl0 = new UpdateUtilImpl();
      boolean boolean0 = updateUtilImpl0.downloadLocalUpdateFile("O6ZxwIsqWXMZ", "O6ZxwIsqWXMZ");
      assertEquals(false, boolean0);
  }

  @Test
  public void test25()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          UpdateUtilImpl updateUtilImpl0 = new UpdateUtilImpl();
          // Undeclared exception!
          try {
            updateUtilImpl0.downloadLocalUpdateFile("hs_err_pid4363.log", "hs_err_pid4363.log");
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission /mnt/fastdata/ac1gf/SF110/dist/102_squirrel-sql/hs_err_pid4363.log/hs_err_pid4363.log write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:183)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:84)
             * net.sourceforge.squirrel_sql.fw.util.IOUtilitiesImpl.copyFile(IOUtilitiesImpl.java:258)
             * net.sourceforge.squirrel_sql.client.update.UpdateUtilImpl.copyFile(UpdateUtilImpl.java:300)
             * net.sourceforge.squirrel_sql.client.update.UpdateUtilImpl.downloadLocalUpdateFile(UpdateUtilImpl.java:253)
             * sun.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test26()  throws Throwable  {
      UpdateUtilImpl updateUtilImpl0 = new UpdateUtilImpl();
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("pR@kXf@#n$w2X");
      updateUtilImpl0.copyFile((FileWrapper) fileWrapperImpl0, (FileWrapper) fileWrapperImpl0);
      assertEquals(0L, fileWrapperImpl0.length());
  }

  @Test
  public void test27()  throws Throwable  {
      UpdateUtilImpl updateUtilImpl0 = new UpdateUtilImpl();
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("pR@kXf@#n$w2X");
      // Undeclared exception!
      try {
        updateUtilImpl0.moveFiles((FileWrapper) fileWrapperImpl0, "pR@kXf@#n$w2X", false, (FileWrapper) fileWrapperImpl0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Expected fromDir(/mnt/fastdata/ac1gf/SF110/dist/102_squirrel-sql/pR@kXf@#n$w2X) to be a directory.
         */
      }
  }

  @Test
  public void test28()  throws Throwable  {
      UpdateUtilImpl updateUtilImpl0 = new UpdateUtilImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      FileWrapperImpl fileWrapperImpl0 = (FileWrapperImpl)applicationFileWrappersImpl0.getLibraryDirectory();
      updateUtilImpl0.moveFiles((FileWrapper) fileWrapperImpl0, "joss-commo-", true, (FileWrapper) fileWrapperImpl0);
      assertEquals("/mnt/fastdata/ac1gf/SF110/dist/102_squirrel-sql/lib", fileWrapperImpl0.getAbsolutePath());
  }

  @Test
  public void test29()  throws Throwable  {
      UpdateUtilImpl updateUtilImpl0 = new UpdateUtilImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      FileWrapperImpl fileWrapperImpl0 = (FileWrapperImpl)applicationFileWrappersImpl0.getPluginsDirectory();
      // Undeclared exception!
      try {
        updateUtilImpl0.copyDir((FileWrapper) fileWrapperImpl0, "75b", true, (FileWrapper) fileWrapperImpl0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Expected fromDir(/mnt/fastdata/ac1gf/SF110/dist/102_squirrel-sql/plugins) to be a directory.
         */
      }
  }

  @Test
  public void test30()  throws Throwable  {
      UpdateUtilImpl updateUtilImpl0 = new UpdateUtilImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      FileWrapperImpl fileWrapperImpl0 = (FileWrapperImpl)applicationFileWrappersImpl0.getDatabaseAliasesTreeStructureFile();
      // Undeclared exception!
      try {
        updateUtilImpl0.copyDir((FileWrapper) fileWrapperImpl0, "", false, (FileWrapper) fileWrapperImpl0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * filePattern arg cannot be empty or null
         */
      }
  }

  @Test
  public void test31()  throws Throwable  {
      UpdateUtilImpl updateUtilImpl0 = new UpdateUtilImpl();
      ChannelXmlBean channelXmlBean0 = updateUtilImpl0.getLocalReleaseInfo("O6ZxwIsqWXMZ");
      assertNull(channelXmlBean0);
  }

  @Test
  public void test32()  throws Throwable  {
      UpdateUtilImpl updateUtilImpl0 = new UpdateUtilImpl();
      Set<String> set0 = updateUtilImpl0.getInstalledTranslations();
      assertNotNull(set0);
      assertEquals(true, set0.isEmpty());
  }

  @Test
  public void test33()  throws Throwable  {
      UpdateUtilImpl updateUtilImpl0 = new UpdateUtilImpl();
      try {
        updateUtilImpl0.getLocalReleaseFile();
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
        /*
         * File release.xml could not be found
         */
      }
  }

  @Test
  public void test34()  throws Throwable  {
      UpdateUtilImpl updateUtilImpl0 = new UpdateUtilImpl();
      FileWrapperImpl fileWrapperImpl0 = (FileWrapperImpl)updateUtilImpl0.checkDir((FileWrapper) null, "hs_err_pid4545.log");
      assertNotNull(fileWrapperImpl0);
      assertEquals(1372729315000L, fileWrapperImpl0.lastModified());
  }

  @Test
  public void test35()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          UpdateUtilImpl updateUtilImpl0 = new UpdateUtilImpl();
          ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
          FileWrapperImpl fileWrapperImpl0 = (FileWrapperImpl)applicationFileWrappersImpl0.getCellImportExportSelectionsFile();
          // Undeclared exception!
          try {
            updateUtilImpl0.checkDir((FileWrapper) fileWrapperImpl0, "[m<[F>)BM0rrc.0\"");
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission /home/ac1gf/.squirrel-sql/cellImportExport.xml/[m<[F>)BM0rrc.0\" write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.mkdir(File.java:1155)
             * net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl.mkdir(FileWrapperImpl.java:415)
             * net.sourceforge.squirrel_sql.client.update.UpdateUtilImpl.checkDir(UpdateUtilImpl.java:720)
             * sun.reflect.GeneratedMethodAccessor170.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test36()  throws Throwable  {
      UpdateUtilImpl updateUtilImpl0 = new UpdateUtilImpl();
      FileWrapperImpl fileWrapperImpl0 = (FileWrapperImpl)updateUtilImpl0.getSquirrelPluginsDir();
      assertNotNull(fileWrapperImpl0);
      
      boolean boolean0 = updateUtilImpl0.deleteFile((FileWrapper) fileWrapperImpl0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test37()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          UpdateUtilImpl updateUtilImpl0 = new UpdateUtilImpl();
          ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
          FileWrapperImpl fileWrapperImpl0 = (FileWrapperImpl)applicationFileWrappersImpl0.getUserSettingsDirectory();
          // Undeclared exception!
          try {
            updateUtilImpl0.deleteFile((FileWrapper) fileWrapperImpl0);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission /home/ac1gf/.squirrel-sql/logs delete)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkDelete(SecurityManager.java:990)
             * java.io.File.delete(File.java:902)
             * net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl.delete(FileWrapperImpl.java:359)
             * net.sourceforge.squirrel_sql.client.update.UpdateUtilImpl.deleteFile(UpdateUtilImpl.java:774)
             * net.sourceforge.squirrel_sql.client.update.UpdateUtilImpl.deleteFile(UpdateUtilImpl.java:772)
             * sun.reflect.GeneratedMethodAccessor172.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test38()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          UpdateUtilImpl updateUtilImpl0 = new UpdateUtilImpl();
          FileWrapperImpl fileWrapperImpl0 = (FileWrapperImpl)updateUtilImpl0.getSquirrelHomeDir();
          // Undeclared exception!
          try {
            updateUtilImpl0.deleteFile((FileWrapper) fileWrapperImpl0);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission /mnt/fastdata/ac1gf/SF110/dist/102_squirrel-sql/hs_err_pid4436.log delete)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkDelete(SecurityManager.java:990)
             * java.io.File.delete(File.java:902)
             * net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl.delete(FileWrapperImpl.java:359)
             * net.sourceforge.squirrel_sql.client.update.UpdateUtilImpl.deleteFile(UpdateUtilImpl.java:754)
             * net.sourceforge.squirrel_sql.client.update.UpdateUtilImpl.deleteFile(UpdateUtilImpl.java:772)
             * sun.reflect.GeneratedMethodAccessor172.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test39()  throws Throwable  {
      UpdateUtilImpl updateUtilImpl0 = new UpdateUtilImpl();
      FileWrapperImpl fileWrapperImpl0 = (FileWrapperImpl)updateUtilImpl0.getSquirrelHomeDir();
      try {
        updateUtilImpl0.extractZipFile((FileWrapper) fileWrapperImpl0, (FileWrapper) fileWrapperImpl0);
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
        /*
         * /mnt/fastdata/ac1gf/SF110/dist/102_squirrel-sql (Is a directory)
         */
      }
  }

  @Test
  public void test40()  throws Throwable  {
      UpdateUtilImpl updateUtilImpl0 = new UpdateUtilImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      FileWrapperImpl fileWrapperImpl0 = (FileWrapperImpl)applicationFileWrappersImpl0.getPluginsDirectory();
      updateUtilImpl0.extractZipFile((FileWrapper) fileWrapperImpl0, (FileWrapper) fileWrapperImpl0);
      assertEquals(false, fileWrapperImpl0.isDirectory());
  }

  @Test
  public void test41()  throws Throwable  {
      UpdateUtilImpl updateUtilImpl0 = new UpdateUtilImpl();
      ProxySettings proxySettings0 = new ProxySettings();
      try {
        updateUtilImpl0.downloadHttpUpdateFile(";'\"\"M?J:I7L~|'[Hc", 0, ";'\"\"M?J:I7L~|'[Hc", ";'\"\"M?J:I7L~|'[Hc", 13L, 0L, (IProxySettings) proxySettings0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test42()  throws Throwable  {
      UpdateUtilImpl updateUtilImpl0 = new UpdateUtilImpl();
      ArtifactStatus artifactStatus0 = new ArtifactStatus();
      FileWrapper fileWrapper0 = updateUtilImpl0.getDownloadFileLocation(artifactStatus0);
      assertNull(fileWrapper0);
  }

  @Test
  public void test43()  throws Throwable  {
      UpdateUtilImpl updateUtilImpl0 = new UpdateUtilImpl();
      UpdateSettings updateSettings0 = new UpdateSettings();
      updateSettings0.setUpdateCheckFrequency("HTTP/");
      UpdateCheckFrequency updateCheckFrequency0 = updateUtilImpl0.getUpdateCheckFrequency((IUpdateSettings) updateSettings0);
      assertEquals(UpdateCheckFrequency.STARTUP, updateCheckFrequency0);
  }

  @Test
  public void test44()  throws Throwable  {
      UpdateUtilImpl updateUtilImpl0 = new UpdateUtilImpl();
      UpdateSettings updateSettings0 = new UpdateSettings();
      UpdateCheckFrequency updateCheckFrequency0 = updateUtilImpl0.getUpdateCheckFrequency((IUpdateSettings) updateSettings0);
      assertEquals(UpdateCheckFrequency.WEEKLY, updateCheckFrequency0);
  }
}
