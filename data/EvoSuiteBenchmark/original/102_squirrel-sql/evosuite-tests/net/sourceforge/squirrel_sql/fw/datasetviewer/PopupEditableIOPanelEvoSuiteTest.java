/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.datasetviewer;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import net.sourceforge.squirrel_sql.fw.datasetviewer.ColumnDisplayDefinition;
import net.sourceforge.squirrel_sql.fw.datasetviewer.PopupEditableIOPanel;
import net.sourceforge.squirrel_sql.fw.dialects.DialectType;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PopupEditableIOPanelEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-1344), "margin");
      PopupEditableIOPanel popupEditableIOPanel0 = new PopupEditableIOPanel(columnDisplayDefinition0, (Object) "caret-begin-line", true);
      popupEditableIOPanel0.addNotify();
      popupEditableIOPanel0.addNotify();
      assertEquals(false, popupEditableIOPanel0.isMaximumSizeSet());
  }

  @Test
  public void test1()  throws Throwable  {
      DialectType dialectType0 = DialectType.HADB;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(691, "popupeditableIoPanel.commandReturnNot0", "popupeditableIoPanel.commandReturnNot0", "popupeditableIoPanel.commandReturnNot0", 691, "popupeditableIoPanel.commandReturnNot0", false, 691, 691, 691, false, false, false, dialectType0);
      PopupEditableIOPanel popupEditableIOPanel0 = new PopupEditableIOPanel(columnDisplayDefinition0, (Object) "margin", false);
      assertNotNull(popupEditableIOPanel0);
      
      StringBuffer stringBuffer0 = new StringBuffer(691);
      popupEditableIOPanel0.getObject(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
  }

  @Test
  public void test2()  throws Throwable  {
      DialectType dialectType0 = DialectType.HADB;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(691, "popupeditableIoPanel.commandReturnNot0", "popupeditableIoPanel.commandReturnNot0", "popupeditableIoPanel.commandReturnNot0", 691, "popupeditableIoPanel.commandReturnNot0", false, 691, 691, 691, false, false, false, dialectType0);
      PopupEditableIOPanel popupEditableIOPanel0 = new PopupEditableIOPanel(columnDisplayDefinition0, (Object) "margin", false);
      popupEditableIOPanel0.requestFocus();
      assertEquals(0, popupEditableIOPanel0.getHeight());
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          DialectType dialectType0 = DialectType.FRONTBASE;
          ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-2), "", "", "", (-2), "", false, (-2), 1648, 1648, false, false, false, dialectType0);
          PopupEditableIOPanel popupEditableIOPanel0 = new PopupEditableIOPanel(columnDisplayDefinition0, (Object) "text/plain", false);
          ActionEvent actionEvent0 = new ActionEvent((Object) "text/plain", (-2), "text/plain");
          // Undeclared exception!
          try {
            popupEditableIOPanel0.actionPerformed(actionEvent0);
            fail("Expecting exception: HeadlessException");
          } catch(HeadlessException e) {
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
      DialectType dialectType0 = DialectType.DAFFODIL;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-995), "sP|8h-o?", "sP|8h-o?", "sP|8h-o?", (-5), "sP|8h-o?", true, (-995), (-5), (-995), true, true, true, dialectType0);
      PopupEditableIOPanel popupEditableIOPanel0 = new PopupEditableIOPanel(columnDisplayDefinition0, (Object) "margin", true);
      assertEquals(true, popupEditableIOPanel0.getFocusTraversalKeysEnabled());
  }

  @Test
  public void test5()  throws Throwable  {
      DialectType dialectType0 = DialectType.HADB;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(691, "popupeditableIoPanel.commandReturnNot0", "popupeditableIoPanel.commandReturnNot0", "popupeditableIoPanel.commandReturnNot0", 691, "popupeditableIoPanel.commandReturnNot0", false, 691, 691, 691, false, false, false, dialectType0);
      PopupEditableIOPanel popupEditableIOPanel0 = new PopupEditableIOPanel(columnDisplayDefinition0, (Object) "margin", false);
      popupEditableIOPanel0.removeNotify();
      assertEquals(false, popupEditableIOPanel0.getAutoscrolls());
  }

  @Test
  public void test6()  throws Throwable  {
      DialectType dialectType0 = DialectType.MSSQL;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(666, "=a}S_T1>6<; ", "=a}S_T1>6<; ", "=a}S_T1>6<; ", 666, "=a}S_T1>6<; ", false, 666, 666, 666, false, false, false, dialectType0);
      PopupEditableIOPanel popupEditableIOPanel0 = new PopupEditableIOPanel(columnDisplayDefinition0, (Object) null, false);
      assertNotNull(popupEditableIOPanel0);
      
      StringBuffer stringBuffer0 = new StringBuffer(666);
      popupEditableIOPanel0.getObject(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      DialectType dialectType0 = DialectType.AXION;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(691, "", "", "", 691, "", false, 691, 691, 691, false, false, false, dialectType0);
      PopupEditableIOPanel popupEditableIOPanel0 = new PopupEditableIOPanel(columnDisplayDefinition0, (Object) "", false);
      assertNotNull(popupEditableIOPanel0);
      
      StringBuffer stringBuffer0 = new StringBuffer(691);
      popupEditableIOPanel0.getObject(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
  }
}
