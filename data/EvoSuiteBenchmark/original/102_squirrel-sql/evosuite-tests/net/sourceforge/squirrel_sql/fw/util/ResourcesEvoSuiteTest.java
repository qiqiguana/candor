/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.MissingResourceException;
import java.util.PropertyResourceBundle;
import javax.swing.Action;
import javax.swing.JMenu;
import javax.swing.JPopupMenu;
import javax.swing.TransferHandler;
import javax.swing.text.DefaultEditorKit;
import net.sourceforge.squirrel_sql.fw.resources.LibraryResources;
import net.sourceforge.squirrel_sql.fw.util.Resources;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ResourcesEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LibraryResources libraryResources0 = new LibraryResources();
      // Undeclared exception!
      try {
        libraryResources0.getString("<f'5'fD6?/n");
        fail("Expecting exception: MissingResourceException");
      } catch(MissingResourceException e) {
        /*
         * Can't find resource for bundle java.util.PropertyResourceBundle, key <f'5'fD6?/n
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      LibraryResources libraryResources0 = new LibraryResources();
      assertNotNull(libraryResources0);
      
      DefaultEditorKit.InsertBreakAction defaultEditorKit_InsertBreakAction0 = new DefaultEditorKit.InsertBreakAction();
      JMenu jMenu0 = new JMenu("");
      try {
        libraryResources0.addToMenuAsCheckBoxMenuItem((Action) defaultEditorKit_InsertBreakAction0, jMenu0);
        fail("Expecting exception: MissingResourceException");
      } catch(MissingResourceException e) {
        /*
         * Can't find resource for bundle java.util.PropertyResourceBundle, key menuitem.javax.swing.text.DefaultEditorKit$InsertBreakAction.mnemonic
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      LibraryResources libraryResources0 = new LibraryResources();
      assertNotNull(libraryResources0);
      
      DefaultEditorKit.InsertContentAction defaultEditorKit_InsertContentAction0 = new DefaultEditorKit.InsertContentAction();
      JMenu jMenu0 = new JMenu((Action) defaultEditorKit_InsertContentAction0);
      try {
        libraryResources0.addToMenu((Action) defaultEditorKit_InsertContentAction0, jMenu0);
        fail("Expecting exception: MissingResourceException");
      } catch(MissingResourceException e) {
        /*
         * Can't find resource for bundle java.util.PropertyResourceBundle, key menuitem.javax.swing.text.DefaultEditorKit$InsertContentAction.mnemonic
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      LibraryResources libraryResources0 = new LibraryResources();
      // Undeclared exception!
      try {
        libraryResources0.addToMenuAsCheckBoxMenuItem((Action) null, (JPopupMenu) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      LibraryResources libraryResources0 = new LibraryResources();
      PropertyResourceBundle propertyResourceBundle0 = (PropertyResourceBundle)libraryResources0.getBundle();
      assertNotNull(propertyResourceBundle0);
  }

  @Test
  public void test5()  throws Throwable  {
      LibraryResources libraryResources0 = new LibraryResources();
      // Undeclared exception!
      try {
        libraryResources0.getIcon("9$D-.A2&");
        fail("Expecting exception: MissingResourceException");
      } catch(MissingResourceException e) {
        /*
         * Can't find resource for bundle java.util.PropertyResourceBundle, key 9$D-.A2&.image
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      LibraryResources libraryResources0 = new LibraryResources();
      Class<?> class0 = Resources.class;
      // Undeclared exception!
      try {
        libraryResources0.getIcon(class0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * propName == null
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      LibraryResources libraryResources0 = new LibraryResources();
      assertNotNull(libraryResources0);
      
      DefaultEditorKit.PasteAction defaultEditorKit_PasteAction0 = new DefaultEditorKit.PasteAction();
      JMenu jMenu0 = new JMenu();
      JPopupMenu jPopupMenu0 = jMenu0.getPopupMenu();
      try {
        libraryResources0.addToPopupMenu((Action) defaultEditorKit_PasteAction0, jPopupMenu0);
        fail("Expecting exception: MissingResourceException");
      } catch(MissingResourceException e) {
        /*
         * Can't find resource for bundle java.util.PropertyResourceBundle, key menuitem.javax.swing.text.DefaultEditorKit$PasteAction.mnemonic
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      LibraryResources libraryResources0 = new LibraryResources();
      Action action0 = TransferHandler.getCutAction();
      // Undeclared exception!
      try {
        libraryResources0.setupAction(action0, false);
        fail("Expecting exception: MissingResourceException");
      } catch(MissingResourceException e) {
        /*
         * Can't find resource for bundle java.util.PropertyResourceBundle, key action.javax.swing.TransferHandler$TransferAction.name
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      LibraryResources libraryResources0 = new LibraryResources();
      // Undeclared exception!
      try {
        libraryResources0.setupAction((Action) null, true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Action == null
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      LibraryResources libraryResources0 = new LibraryResources();
      // Undeclared exception!
      try {
        libraryResources0.getIcon((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * keyName == null
         */
      }
  }
}
