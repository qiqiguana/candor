/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.client.session;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import net.sourceforge.squirrel_sql.client.session.DataSetUpdateableTableModelImpl;
import net.sourceforge.squirrel_sql.client.session.ISession;
import net.sourceforge.squirrel_sql.fw.datasetviewer.ColumnDisplayDefinition;
import net.sourceforge.squirrel_sql.fw.datasetviewer.DataSetUpdateableTableModelListener;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.whereClause.IWhereClausePartUtil;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.whereClause.WhereClausePartUtil;
import net.sourceforge.squirrel_sql.fw.sql.ITableInfo;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DataSetUpdateableTableModelImplEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DataSetUpdateableTableModelImpl dataSetUpdateableTableModelImpl0 = new DataSetUpdateableTableModelImpl();
      assertNotNull(dataSetUpdateableTableModelImpl0);
      
      dataSetUpdateableTableModelImpl0.removeListener((DataSetUpdateableTableModelListener) null);
      assertEquals(false, dataSetUpdateableTableModelImpl0.editModeIsForced());
      assertEquals((-1), dataSetUpdateableTableModelImpl0._rowIDcol);
      assertEquals(-1, dataSetUpdateableTableModelImpl0.getRowidCol());
  }

  @Test
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try {
        DataSetUpdateableTableModelImpl.getUnambiguousTableName((ISession) null, "");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      DataSetUpdateableTableModelImpl dataSetUpdateableTableModelImpl0 = new DataSetUpdateableTableModelImpl();
      assertNotNull(dataSetUpdateableTableModelImpl0);
      
      int int0 = dataSetUpdateableTableModelImpl0.getRowidCol();
      assertEquals(false, dataSetUpdateableTableModelImpl0.editModeIsForced());
      assertEquals((-1), int0);
  }

  @Test
  public void test3()  throws Throwable  {
      DataSetUpdateableTableModelImpl dataSetUpdateableTableModelImpl0 = new DataSetUpdateableTableModelImpl();
      assertNotNull(dataSetUpdateableTableModelImpl0);
      
      dataSetUpdateableTableModelImpl0.addListener((DataSetUpdateableTableModelListener) null);
      assertEquals((-1), dataSetUpdateableTableModelImpl0._rowIDcol);
      assertEquals(false, dataSetUpdateableTableModelImpl0.editModeIsForced());
      assertEquals(-1, dataSetUpdateableTableModelImpl0.getRowidCol());
  }

  @Test
  public void test4()  throws Throwable  {
      DataSetUpdateableTableModelImpl dataSetUpdateableTableModelImpl0 = new DataSetUpdateableTableModelImpl();
      assertNotNull(dataSetUpdateableTableModelImpl0);
      
      dataSetUpdateableTableModelImpl0.setRowIDCol((-1));
      assertEquals((-1), dataSetUpdateableTableModelImpl0._rowIDcol);
      assertEquals(false, dataSetUpdateableTableModelImpl0.editModeIsForced());
      assertEquals(-1, dataSetUpdateableTableModelImpl0.getRowidCol());
  }

  @Test
  public void test5()  throws Throwable  {
      DataSetUpdateableTableModelImpl dataSetUpdateableTableModelImpl0 = new DataSetUpdateableTableModelImpl();
      assertEquals(false, dataSetUpdateableTableModelImpl0.editModeIsForced());
      assertNotNull(dataSetUpdateableTableModelImpl0);
      
      dataSetUpdateableTableModelImpl0.setEditModeForced(true);
      // Undeclared exception!
      try {
        dataSetUpdateableTableModelImpl0.getDestinationClassName();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      DataSetUpdateableTableModelImpl dataSetUpdateableTableModelImpl0 = new DataSetUpdateableTableModelImpl();
      assertNotNull(dataSetUpdateableTableModelImpl0);
      
      dataSetUpdateableTableModelImpl0.setTableInfo((ITableInfo) null);
      assertEquals((-1), dataSetUpdateableTableModelImpl0._rowIDcol);
      assertEquals(false, dataSetUpdateableTableModelImpl0.editModeIsForced());
  }

  @Test
  public void test7()  throws Throwable  {
      DataSetUpdateableTableModelImpl dataSetUpdateableTableModelImpl0 = new DataSetUpdateableTableModelImpl();
      assertNotNull(dataSetUpdateableTableModelImpl0);
      
      dataSetUpdateableTableModelImpl0.setSession((ISession) null);
      assertEquals((-1), dataSetUpdateableTableModelImpl0._rowIDcol);
      assertEquals(false, dataSetUpdateableTableModelImpl0.editModeIsForced());
      assertEquals(-1, dataSetUpdateableTableModelImpl0.getRowidCol());
  }

  @Test
  public void test8()  throws Throwable  {
      DataSetUpdateableTableModelImpl dataSetUpdateableTableModelImpl0 = new DataSetUpdateableTableModelImpl();
      assertNotNull(dataSetUpdateableTableModelImpl0);
      
      WhereClausePartUtil whereClausePartUtil0 = new WhereClausePartUtil();
      dataSetUpdateableTableModelImpl0.setWhereClausePartUtil((IWhereClausePartUtil) whereClausePartUtil0);
      assertEquals(false, dataSetUpdateableTableModelImpl0.editModeIsForced());
      assertEquals((-1), dataSetUpdateableTableModelImpl0._rowIDcol);
      assertEquals(-1, dataSetUpdateableTableModelImpl0.getRowidCol());
  }

  @Test
  public void test9()  throws Throwable  {
      DataSetUpdateableTableModelImpl dataSetUpdateableTableModelImpl0 = new DataSetUpdateableTableModelImpl();
      assertNotNull(dataSetUpdateableTableModelImpl0);
      
      boolean boolean0 = dataSetUpdateableTableModelImpl0.editModeIsForced();
      assertEquals((-1), dataSetUpdateableTableModelImpl0._rowIDcol);
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      DataSetUpdateableTableModelImpl dataSetUpdateableTableModelImpl0 = new DataSetUpdateableTableModelImpl();
      assertNotNull(dataSetUpdateableTableModelImpl0);
      
      String string0 = dataSetUpdateableTableModelImpl0.getFullTableName();
      assertEquals(false, dataSetUpdateableTableModelImpl0.editModeIsForced());
      assertNull(string0);
      assertEquals((-1), dataSetUpdateableTableModelImpl0._rowIDcol);
      assertEquals(-1, dataSetUpdateableTableModelImpl0.getRowidCol());
  }

  @Test
  public void test11()  throws Throwable  {
      DataSetUpdateableTableModelImpl dataSetUpdateableTableModelImpl0 = new DataSetUpdateableTableModelImpl();
      assertNotNull(dataSetUpdateableTableModelImpl0);
      
      // Undeclared exception!
      try {
        dataSetUpdateableTableModelImpl0.getDestinationClassName();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      DataSetUpdateableTableModelImpl dataSetUpdateableTableModelImpl0 = new DataSetUpdateableTableModelImpl();
      assertNotNull(dataSetUpdateableTableModelImpl0);
      
      Object[] objectArray0 = new Object[10];
      ColumnDisplayDefinition[] columnDisplayDefinitionArray0 = new ColumnDisplayDefinition[5];
      String string0 = dataSetUpdateableTableModelImpl0.getWarningOnCurrentData(objectArray0, columnDisplayDefinitionArray0, (-1), (Object) null);
      assertEquals((-1), dataSetUpdateableTableModelImpl0._rowIDcol);
      assertEquals(false, dataSetUpdateableTableModelImpl0.editModeIsForced());
      assertEquals("Cannot edit table because table cannot be found\nor table name is not unique in DB.", string0);
      assertNotNull(string0);
  }

  @Test
  public void test13()  throws Throwable  {
      DataSetUpdateableTableModelImpl dataSetUpdateableTableModelImpl0 = new DataSetUpdateableTableModelImpl();
      assertNotNull(dataSetUpdateableTableModelImpl0);
      
      ColumnDisplayDefinition[] columnDisplayDefinitionArray0 = new ColumnDisplayDefinition[1];
      ColumnDisplayDefinition[] columnDisplayDefinitionArray1 = new ColumnDisplayDefinition[1];
      String string0 = dataSetUpdateableTableModelImpl0.getWarningOnProjectedUpdate((Object[]) columnDisplayDefinitionArray1, columnDisplayDefinitionArray0, (-1), (Object) null);
      assertEquals((-1), dataSetUpdateableTableModelImpl0._rowIDcol);
      assertNotNull(string0);
      assertEquals("Cannot edit table because table cannot be found\nor table name is not unique in DB.", string0);
      assertEquals(false, dataSetUpdateableTableModelImpl0.editModeIsForced());
  }

  @Test
  public void test14()  throws Throwable  {
      DataSetUpdateableTableModelImpl dataSetUpdateableTableModelImpl0 = new DataSetUpdateableTableModelImpl();
      assertNotNull(dataSetUpdateableTableModelImpl0);
      
      Object[] objectArray0 = new Object[7];
      ColumnDisplayDefinition[] columnDisplayDefinitionArray0 = new ColumnDisplayDefinition[1];
      StringBuffer stringBuffer0 = new StringBuffer("");
      String string0 = (String)dataSetUpdateableTableModelImpl0.reReadDatum(objectArray0, columnDisplayDefinitionArray0, (-1), stringBuffer0);
      assertNotNull(string0);
      assertEquals("Cannot edit table because table cannot be found\nor table name is not unique in DB.", string0);
      assertEquals(false, dataSetUpdateableTableModelImpl0.editModeIsForced());
      assertEquals((-1), dataSetUpdateableTableModelImpl0._rowIDcol);
  }

  @Test
  public void test15()  throws Throwable  {
      DataSetUpdateableTableModelImpl dataSetUpdateableTableModelImpl0 = new DataSetUpdateableTableModelImpl();
      assertNotNull(dataSetUpdateableTableModelImpl0);
      
      Object[] objectArray0 = new Object[14];
      ColumnDisplayDefinition[] columnDisplayDefinitionArray0 = new ColumnDisplayDefinition[20];
      String string0 = dataSetUpdateableTableModelImpl0.updateTableComponent(objectArray0, columnDisplayDefinitionArray0, (-1), (Object) "", (Object) null);
      assertEquals("Cannot edit table because table cannot be found\nor table name is not unique in DB.", string0);
      assertNotNull(string0);
      assertEquals((-1), dataSetUpdateableTableModelImpl0._rowIDcol);
      assertEquals(false, dataSetUpdateableTableModelImpl0.editModeIsForced());
  }

  @Test
  public void test16()  throws Throwable  {
      DataSetUpdateableTableModelImpl dataSetUpdateableTableModelImpl0 = new DataSetUpdateableTableModelImpl();
      assertNotNull(dataSetUpdateableTableModelImpl0);
      
      Object[][] objectArray0 = new Object[2][3];
      ColumnDisplayDefinition[] columnDisplayDefinitionArray0 = new ColumnDisplayDefinition[20];
      String string0 = dataSetUpdateableTableModelImpl0.deleteRows(objectArray0, columnDisplayDefinitionArray0);
      assertEquals(false, dataSetUpdateableTableModelImpl0.editModeIsForced());
      assertNotNull(string0);
      assertEquals("Cannot edit table because table cannot be found\nor table name is not unique in DB.", string0);
      assertEquals((-1), dataSetUpdateableTableModelImpl0._rowIDcol);
  }

  @Test
  public void test17()  throws Throwable  {
      DataSetUpdateableTableModelImpl dataSetUpdateableTableModelImpl0 = new DataSetUpdateableTableModelImpl();
      assertNotNull(dataSetUpdateableTableModelImpl0);
      
      ColumnDisplayDefinition[] columnDisplayDefinitionArray0 = new ColumnDisplayDefinition[1];
      String[] stringArray0 = dataSetUpdateableTableModelImpl0.getDefaultValues(columnDisplayDefinitionArray0);
      assertNotNull(stringArray0);
      assertEquals(false, dataSetUpdateableTableModelImpl0.editModeIsForced());
      assertEquals((-1), dataSetUpdateableTableModelImpl0._rowIDcol);
      assertEquals(-1, dataSetUpdateableTableModelImpl0.getRowidCol());
  }

  @Test
  public void test18()  throws Throwable  {
      DataSetUpdateableTableModelImpl dataSetUpdateableTableModelImpl0 = new DataSetUpdateableTableModelImpl();
      assertNotNull(dataSetUpdateableTableModelImpl0);
      
      Object[] objectArray0 = new Object[14];
      ColumnDisplayDefinition[] columnDisplayDefinitionArray0 = new ColumnDisplayDefinition[20];
      String string0 = dataSetUpdateableTableModelImpl0.insertRow(objectArray0, columnDisplayDefinitionArray0);
      assertEquals(false, dataSetUpdateableTableModelImpl0.editModeIsForced());
      assertNotNull(string0);
      assertEquals((-1), dataSetUpdateableTableModelImpl0._rowIDcol);
      assertEquals("Cannot edit table because table cannot be found\nor table name is not unique in DB.", string0);
  }
}
