/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.awt.Component;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JTable;
import net.sourceforge.squirrel_sql.fw.datasetviewer.ColumnDisplayDefinition;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.DataTypeOther;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.RestorableJTextArea;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.RestorableJTextField;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.whereClause.ParameterWhereClausePart;
import net.sourceforge.squirrel_sql.fw.dialects.DialectType;
import net.sourceforge.squirrel_sql.fw.gui.OkJPanel;
import net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DataTypeOtherEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      JTable jTable0 = new JTable();
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-1957), "NN(Tb!Ic&9W'C6YkT");
      DataTypeOther dataTypeOther0 = new DataTypeOther(jTable0, columnDisplayDefinition0);
      RestorableJTextField restorableJTextField0 = (RestorableJTextField)dataTypeOther0.getJTextField();
      assertEquals(true, restorableJTextField0.isForegroundSet());
  }

  @Test
  public void test1()  throws Throwable  {
      JTable jTable0 = new JTable();
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-1957), "NN(Tb!Ic&9W'C6YkT");
      DataTypeOther dataTypeOther0 = new DataTypeOther(jTable0, columnDisplayDefinition0);
      boolean boolean0 = dataTypeOther0.isEditableInPopup((Object) "37777774133");
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      JTable jTable0 = new JTable();
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-1957), "NN(Tb!Ic&9W'C6YkT");
      DataTypeOther dataTypeOther0 = new DataTypeOther(jTable0, columnDisplayDefinition0);
      RestorableJTextArea restorableJTextArea0 = (RestorableJTextArea)dataTypeOther0.getJTextArea((Object) "37777774133");
      assertEquals("37777774133", restorableJTextArea0.getText());
      assertNotNull(restorableJTextArea0);
  }

  @Test
  public void test3()  throws Throwable  {
      JTable jTable0 = new JTable();
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, "}V6^");
      DataTypeOther dataTypeOther0 = new DataTypeOther(jTable0, columnDisplayDefinition0);
      boolean boolean0 = dataTypeOther0.needToReRead((Object) jTable0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      DialectType dialectType0 = DialectType.INFORMIX;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-1530), (String) null, (String) null, (String) null, 0, (String) null, false, (-1530), (-1530), (-1530), false, false, false, dialectType0);
      DataTypeOther dataTypeOther0 = new DataTypeOther((JTable) null, columnDisplayDefinition0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      Object object0 = dataTypeOther0.validateAndConvertInPopup("", (Object) "comboBoxChanged", stringBuffer0);
      assertNull(object0);
  }

  @Test
  public void test5()  throws Throwable  {
      DialectType dialectType0 = DialectType.FIREBIRD;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(983, "B19f!al}e\"4?>,", "B19f!al}e\"4?>,", "B19f!al}e\"4?>,", 983, "B19f!al}e\"4?>,", true, 983, 983, 983, true, true, true, dialectType0);
      DataTypeOther dataTypeOther0 = new DataTypeOther((JTable) null, columnDisplayDefinition0);
      boolean boolean0 = dataTypeOther0.useBinaryEditingPanel();
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      JTable jTable0 = new JTable();
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-1957), "NN(Tb!Ic&9W'C6YkT");
      DataTypeOther dataTypeOther0 = new DataTypeOther(jTable0, columnDisplayDefinition0);
      String string0 = dataTypeOther0.getClassName();
      assertEquals("java.lang.String", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      JTable jTable0 = new JTable();
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, "Argument 'd' outside valid range.");
      DataTypeOther dataTypeOther0 = new DataTypeOther(jTable0, columnDisplayDefinition0);
      boolean boolean0 = dataTypeOther0.canDoFileIO();
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      DialectType dialectType0 = DialectType.INGRES;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(48, ">Zm_!&}5", ">Zm_!&}5", ">Zm_!&}5", 48, ">Zm_!&}5", true, 48, 48, 48, true, true, true, dialectType0);
      DataTypeOther dataTypeOther0 = new DataTypeOther((JTable) null, columnDisplayDefinition0);
      try {
        dataTypeOther0.exportObject((FileOutputStream) null, ">Zm_!&}5");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Can not export data type OTHER
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      OkJPanel okJPanel0 = DataTypeOther.getControlPanel();
      assertEquals(Component.BaselineResizeBehavior.CONSTANT_ASCENT, okJPanel0.getBaselineResizeBehavior());
      assertNotNull(okJPanel0);
      assertEquals(1, okJPanel0.getComponentCount());
  }

  @Test
  public void test10()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(33, "DatabaseObjectType.sequence");
      DataTypeOther dataTypeOther0 = new DataTypeOther((JTable) null, columnDisplayDefinition0);
      boolean boolean0 = dataTypeOther0.isEditableInCell((Object) "French");
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(2003, "");
      DataTypeOther dataTypeOther0 = new DataTypeOther((JTable) null, columnDisplayDefinition0);
      FileDescriptor fileDescriptor0 = FileDescriptor.in;
      FileInputStream fileInputStream0 = new FileInputStream(fileDescriptor0);
      try {
        dataTypeOther0.importObject(fileInputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Can not import data type OTHER
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      JTable jTable0 = new JTable();
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, "Argument 'd' outside valid range.");
      DataTypeOther dataTypeOther0 = new DataTypeOther(jTable0, columnDisplayDefinition0);
      // Undeclared exception!
      try {
        dataTypeOther0.readResultSet((ResultSet) null, 0, false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      JTable jTable0 = new JTable();
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, "");
      DataTypeOther dataTypeOther0 = new DataTypeOther(jTable0, columnDisplayDefinition0);
      // Undeclared exception!
      try {
        dataTypeOther0.getWhereClauseValue((Object) null, (ISQLDatabaseMetaData) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * columnDef contains not an usable columnName
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      JTable jTable0 = new JTable();
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-1957), "NN(Tb!Ic&9W'C6YkT");
      DataTypeOther dataTypeOther0 = new DataTypeOther(jTable0, columnDisplayDefinition0);
      ParameterWhereClausePart parameterWhereClausePart0 = (ParameterWhereClausePart)dataTypeOther0.getWhereClauseValue((Object) "37777774133", (ISQLDatabaseMetaData) null);
      assertEquals(true, parameterWhereClausePart0.isParameterUsed());
  }

  @Test
  public void test15()  throws Throwable  {
      JTable jTable0 = new JTable(969, 969);
      DialectType dialectType0 = DialectType.INTERBASE;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(969, "", "", "", 969, "", true, 969, 27, 969, true, true, true, dialectType0);
      DataTypeOther dataTypeOther0 = new DataTypeOther(jTable0, columnDisplayDefinition0);
      // Undeclared exception!
      try {
        dataTypeOther0.setPreparedStatementValue((PreparedStatement) null, (Object) "job-k-octets-processed", 27);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test16()  throws Throwable  {
      DialectType dialectType0 = DialectType.FIREBIRD;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(983, "B19f!al}e\"4?>,", "B19f!al}e\"4?>,", "B19f!al}e\"4?>,", 983, "B19f!al}e\"4?>,", true, 983, 983, 983, true, true, true, dialectType0);
      DataTypeOther dataTypeOther0 = new DataTypeOther((JTable) null, columnDisplayDefinition0);
      // Undeclared exception!
      try {
        dataTypeOther0.setPreparedStatementValue((PreparedStatement) null, (Object) null, 983);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test17()  throws Throwable  {
      DialectType dialectType0 = DialectType.MCKOI;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-1093), (String) null, (String) null, (String) null, (-1093), (String) null, true, (-1093), (-1093), (-1093), true, true, true, dialectType0);
      DataTypeOther dataTypeOther0 = new DataTypeOther((JTable) null, columnDisplayDefinition0);
      Object object0 = dataTypeOther0.getDefaultValue((String) null);
      assertNull(object0);
  }

  @Test
  public void test18()  throws Throwable  {
      DialectType dialectType0 = DialectType.FIREBIRD;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(983, "B19f!al}e\"4?>,", "B19f!al}e\"4?>,", "B19f!al}e\"4?>,", 983, "B19f!al}e\"4?>,", true, 983, 983, 983, true, true, true, dialectType0);
      DataTypeOther dataTypeOther0 = new DataTypeOther((JTable) null, columnDisplayDefinition0);
      Object object0 = dataTypeOther0.getDefaultValue("B19f!al}e\"4?>,");
      assertNull(object0);
  }

  @Test
  public void test19()  throws Throwable  {
      DialectType dialectType0 = DialectType.INFORMIX;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-1530), (String) null, (String) null, (String) null, 0, (String) null, false, (-1530), (-1530), (-1530), false, false, false, dialectType0);
      DataTypeOther dataTypeOther0 = new DataTypeOther((JTable) null, columnDisplayDefinition0);
      Object object0 = dataTypeOther0.getDefaultValue((String) null);
      assertNull(object0);
  }
}
