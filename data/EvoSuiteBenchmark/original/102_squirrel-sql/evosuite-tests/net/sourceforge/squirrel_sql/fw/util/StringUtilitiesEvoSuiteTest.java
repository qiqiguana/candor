/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import net.sourceforge.squirrel_sql.fw.util.StringUtilities;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class StringUtilitiesEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      String[] stringArray0 = StringUtilities.split("\n", 'D');
      assertNotNull(stringArray0);
  }

  @Test
  public void test1()  throws Throwable  {
      String string0 = StringUtilities.escapeHtmlChars("&lt;");
      assertNotNull(string0);
      assertEquals("&amp;lt;", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      String string0 = StringUtilities.getEolStr();
      assertEquals("\n", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      StringUtilities stringUtilities0 = new StringUtilities();
      assertEquals("\n", stringUtilities0.getEolStr());
  }

  @Test
  public void test4()  throws Throwable  {
      String string0 = StringUtilities.cleanString(" *");
      assertNotNull(string0);
      assertEquals("*", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      String string0 = StringUtilities.cleanString("u3 EqwZX@5c0c");
      assertNotNull(string0);
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = StringUtilities.countOccurences("DaUC^O8e(aMqYzn>4Eo", (int) 'D');
      assertEquals(1, int0);
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = StringUtilities.countOccurences("", 0);
      assertEquals(0, int0);
  }

  @Test
  public void test8()  throws Throwable  {
      String[] stringArray0 = StringUtilities.split((String) null, 'v', true);
      assertNotNull(stringArray0);
  }

  @Test
  public void test9()  throws Throwable  {
      String[] stringArray0 = StringUtilities.split("DaUC_O8e_aMqYzn_4Eo", 'D', true);
      assertNotNull(stringArray0);
  }

  @Test
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = StringUtilities.join(stringArray0, (String) null);
      assertNotNull(string0);
      assertEquals("nullnullnull", string0);
  }

  @Test
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = StringUtilities.join(stringArray0, "");
      assertNotNull(string0);
      assertEquals("nullnullnullnull", string0);
  }

  @Test
  public void test12()  throws Throwable  {
      String[] stringArray0 = StringUtilities.segment("*", 1);
      assertNotNull(stringArray0);
  }

  @Test
  public void test13()  throws Throwable  {
      String[] stringArray0 = StringUtilities.segment("@Uem;*2.rVu0,/M[wzf", (int) (byte)6);
      assertNotNull(stringArray0);
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = StringUtilities.getTokenBeginIndex("(&fOvH=0|SaC4r<1#y", "(&fOvH=0|SaC4r<1#y");
      assertEquals((-1), int0);
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = StringUtilities.getTokenBeginIndex("\n", "\n");
      assertEquals(0, int0);
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = StringUtilities.getTokenBeginIndex(" *", "*");
      assertEquals(1, int0);
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = StringUtilities.getTokenBeginIndex("&lt;", "");
      assertEquals(0, int0);
  }

  @Test
  public void test18()  throws Throwable  {
      Byte[] byteArray0 = StringUtilities.getByteArray((byte[]) null);
      assertNotNull(byteArray0);
  }

  @Test
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Byte[] byteArray1 = StringUtilities.getByteArray(byteArray0);
      assertNotNull(byteArray1);
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = StringUtilities.chop("\n");
      assertEquals("", string0);
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = StringUtilities.chop((String) null);
      assertNull(string0);
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = StringUtilities.chop("");
      assertEquals("", string0);
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = StringUtilities.chop("-J/");
      assertEquals("-J", string0);
      assertNotNull(string0);
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = StringUtilities.javaNormalize("-J/");
      assertNotNull(string0);
      assertEquals("_J_", string0);
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = StringUtilities.javaNormalize("DaUC^O8e(aMqYzn>4Eo");
      assertEquals("DaUC_O8e_aMqYzn_4Eo", string0);
      assertNotNull(string0);
  }
}
