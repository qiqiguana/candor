/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.dialects;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import net.sourceforge.squirrel_sql.fw.dialects.DatabaseObjectQualifier;
import net.sourceforge.squirrel_sql.fw.dialects.DialectType;
import net.sourceforge.squirrel_sql.fw.dialects.H2DialectExt;
import net.sourceforge.squirrel_sql.fw.dialects.SqlGenerationPreferences;
import net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.IDatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.TableColumnInfo;
import org.hibernate.MappingException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class H2DialectExtEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      boolean boolean0 = h2DialectExt0.supportsEmptyTables();
      assertEquals(true, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      boolean boolean0 = h2DialectExt0.supportsViewDefinition();
      assertEquals(true, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        h2DialectExt0.getColumnNameAlterSQL((TableColumnInfo) null, (TableColumnInfo) null, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      boolean boolean0 = h2DialectExt0.supportsCreateIndex();
      assertEquals(true, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      boolean boolean0 = h2DialectExt0.supportsDropSequence();
      assertEquals(true, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      boolean boolean0 = h2DialectExt0.supportsSequenceInformation();
      assertEquals(true, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("", "");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = h2DialectExt0.getRenameTableSQL("", "", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertNotNull(string0);
      assertEquals("ALTER TABLE  RENAME TO ", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      boolean boolean0 = h2DialectExt0.supportsDropView();
      assertEquals(true, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      boolean boolean0 = h2DialectExt0.supportsAlterSequence();
      assertEquals(true, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("ma", "ma", "ma", "ma", 0, "ma", 0, 0, 0, 0, "ma", "ma", 0, 0, "ma");
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = h2DialectExt0.getColumnDefaultAlterSQL(tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("ALTER TABLE ma ALTER COLUMN \"ma\"  SET DEFAULT 'ma'", string0);
      assertNotNull(string0);
  }

  @Test
  public void test10()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      boolean boolean0 = h2DialectExt0.supportsCreateTable();
      assertEquals(true, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      boolean boolean0 = h2DialectExt0.supportsAccessMethods();
      assertEquals(true, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("8FV]", "8FV]");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = h2DialectExt0.getDropForeignKeySQL("8FV]", "8FV]", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertNotNull(string0);
      assertEquals("ALTER TABLE 8FV] DROP CONSTRAINT \"8FV]\"", string0);
  }

  @Test
  public void test13()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      boolean boolean0 = h2DialectExt0.supportsDropConstraint();
      assertEquals(true, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier((String) null, (String) null);
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        h2DialectExt0.getRenameViewSQL("pxS4] 7", "pxS4] 7", databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * H2 doesn't support renaming views.
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      String[] stringArray0 = h2DialectExt0.getIndexStorageOptions();
      assertNull(stringArray0);
  }

  @Test
  public void test16()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("8FV]", "8FV]");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = h2DialectExt0.getDropPrimaryKeySQL("X@#D", "X@#D", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("ALTER TABLE X@#D DROP PRIMARY KEY", string0);
  }

  @Test
  public void test17()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier((String) null, (String) null);
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = h2DialectExt0.getDropSequenceSQL("1lkP5J^Bi/=ki_y[", false, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("DROP SEQUENCE 1lkP5J^Bi/=ki_y[ ", string0);
      assertNotNull(string0);
  }

  @Test
  public void test18()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("", "");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = h2DialectExt0.getViewDefinitionSQL("TimePeriodAnchor.START", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("select view_definition from information_schema.views where table_schema = '' and UPPER(table_name) = UPPER('TimePeriodAnchor.START') ", string0);
      assertNotNull(string0);
  }

  @Test
  public void test19()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      boolean boolean0 = h2DialectExt0.supportsRenameView();
      assertEquals(false, boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      boolean boolean0 = h2DialectExt0.supportsAddForeignKeyConstraint();
      assertEquals(true, boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = h2DialectExt0.getDropConstraintSQL("^0v", "^0v", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("ALTER TABLE ^0v DROP CONSTRAINT ^0v", string0);
      assertNotNull(string0);
  }

  @Test
  public void test22()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("(e`zsu`g%Xv#x", "");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("", "[u~q91kg'op)in9!<", "(e`zsu`g%Xv#x", "(e`zsu`g%Xv#x", (-1), "supportsSchemasInTableDefinitions", (-1), (-1), (-1), 1494, "supportsSchemasInTableDefinitions", "DROP INDEX ", 1494, 0, "[u~q91kg'op)in9!<");
      String[] stringArray0 = h2DialectExt0.getAddAutoIncrementSQL(tableColumnInfo0, "[u~q91kg'op)in9!<", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test23()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      boolean boolean0 = h2DialectExt0.supportsAlterColumnType();
      assertEquals(true, boolean0);
  }

  @Test
  public void test24()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      boolean boolean0 = h2DialectExt0.supportsAddColumn();
      assertEquals(true, boolean0);
  }

  @Test
  public void test25()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      boolean boolean0 = h2DialectExt0.supportsAlterColumnNull();
      assertEquals(true, boolean0);
  }

  @Test
  public void test26()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = h2DialectExt0.getSequenceInformationSQL((String) null, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("SELECT CURRENT_VALUE, 'NONE', 'NONE', CACHE, INCREMENT, 0 FROM INFORMATION_SCHEMA.SEQUENCES WHERE SEQUENCE_SCHEMA = '' AND SEQUENCE_NAME = '' AND SEQUENCE_CATALOG = ''", string0);
  }

  @Test
  public void test27()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = h2DialectExt0.getColumnDropSQL("", "", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertNotNull(string0);
      assertEquals("ALTER TABLE  DROP COLUMN  ", string0);
  }

  @Test
  public void test28()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("FM-Y+^&gt6;nD~", "FM-Y+^&gt6;nD~");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = h2DialectExt0.getInsertIntoSQL("FM-Y+^&gt6;nD~", (List<String>) null, "FM-Y+^&gt6;nD~", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("INSERT INTO FM-Y+^&gt6;nD~\n FM-Y+^&gt6;nD~", string0);
  }

  @Test
  public void test29()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      boolean boolean0 = h2DialectExt0.supportsRenameColumn();
      assertEquals(true, boolean0);
  }

  @Test
  public void test30()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      boolean boolean0 = h2DialectExt0.supportsCorrelatedSubQuery();
      assertEquals(true, boolean0);
  }

  @Test
  public void test31()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      boolean boolean0 = h2DialectExt0.supportsCheckOptionsForViews();
      assertEquals(false, boolean0);
  }

  @Test
  public void test32()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      boolean boolean0 = h2DialectExt0.supportsColumnComment();
      assertEquals(true, boolean0);
  }

  @Test
  public void test33()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      boolean boolean0 = h2DialectExt0.supportsCreateView();
      assertEquals(true, boolean0);
  }

  @Test
  public void test34()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      boolean boolean0 = h2DialectExt0.supportsUpdate();
      assertEquals(true, boolean0);
  }

  @Test
  public void test35()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      boolean boolean0 = h2DialectExt0.supportsIndexes();
      assertEquals(true, boolean0);
  }

  @Test
  public void test36()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = h2DialectExt0.getCreateViewSQL("FM-Y+^&gt6;nD~", "FM-Y+^&gt6;nD~", "FM-Y+^&gt6;nD~", (DatabaseObjectQualifier) null, sqlGenerationPreferences0);
      assertNotNull(string0);
      assertEquals("CREATE VIEW FM-Y+^&gt6;nD~ AS FM-Y+^&gt6;nD~   ", string0);
  }

  @Test
  public void test37()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      boolean boolean0 = h2DialectExt0.supportsRenameTable();
      assertEquals(true, boolean0);
  }

  @Test
  public void test38()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      boolean boolean0 = h2DialectExt0.supportsInsertInto();
      assertEquals(true, boolean0);
  }

  @Test
  public void test39()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      boolean boolean0 = h2DialectExt0.supportsCreateSequence();
      assertEquals(true, boolean0);
  }

  @Test
  public void test40()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      boolean boolean0 = h2DialectExt0.supportsMultipleRowInserts();
      assertEquals(true, boolean0);
  }

  @Test
  public void test41()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      String[] stringArray0 = h2DialectExt0.getIndexAccessMethodsTypes();
      assertNotNull(stringArray0);
  }

  @Test
  public void test42()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      DialectType dialectType0 = h2DialectExt0.getDialectType();
      assertEquals("H2", dialectType0.toString());
  }

  @Test
  public void test43()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      boolean boolean0 = h2DialectExt0.supportsSequence();
      assertEquals(true, boolean0);
  }

  @Test
  public void test44()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      boolean boolean0 = h2DialectExt0.supportsAutoIncrement();
      assertEquals(true, boolean0);
  }

  @Test
  public void test45()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("(e`zsu`g%Xv#x", "");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("", "[u~q91kg'op)in9!<", "(e`zsu`g%Xv#x", "(e`zsu`g%Xv#x", (-1), "supportsSchemasInTableDefinitions", (-1), (-1), (-1), 1494, "supportsSchemasInTableDefinitions", "DROP INDEX ", 1494, 0, "[u~q91kg'op)in9!<");
      String[] stringArray0 = h2DialectExt0.getAddColumnSQL(tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test46()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      boolean boolean0 = h2DialectExt0.supportsDropIndex();
      assertEquals(true, boolean0);
  }

  @Test
  public void test47()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("(e`zsu`g%Xv#x", "");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = h2DialectExt0.getDropViewSQL("nNd", false, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertNotNull(string0);
      assertEquals("DROP VIEW nNd", string0);
  }

  @Test
  public void test48()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      boolean boolean0 = h2DialectExt0.supportsAddUniqueConstraint();
      assertEquals(true, boolean0);
  }

  @Test
  public void test49()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("", "", "", "", (-878), "", (-878), (-878), 1, (-878), "", "w ", 1, 1, "");
      // Undeclared exception!
      try {
        h2DialectExt0.getColumnTypeAlterSQL(tableColumnInfo0, tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: MappingException");
      } catch(MappingException e) {
        /*
         * No Dialect mapping for JDBC type: -878
         */
      }
  }

  @Test
  public void test50()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      boolean boolean0 = h2DialectExt0.supportsTablespace();
      assertEquals(false, boolean0);
  }

  @Test
  public void test51()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      int int0 = h2DialectExt0.getTimestampMaximumFractionalDigits();
      assertEquals(9, int0);
  }

  @Test
  public void test52()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("H2p<-PU9PMP", "", "H2p<-PU9PMP", "D", 17, "H2p<-PU9PMP", 17, 17, 17, 17, "", "D", 17, 17, "D");
      // Undeclared exception!
      try {
        h2DialectExt0.getColumnNullableAlterSQL(tableColumnInfo0, (DatabaseObjectQualifier) null, sqlGenerationPreferences0);
        fail("Expecting exception: MappingException");
      } catch(MappingException e) {
        /*
         * No Dialect mapping for JDBC type: 17
         */
      }
  }

  @Test
  public void test53()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("(e`zsu`g%Xv#x", "");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = h2DialectExt0.getDropIndexSQL("", "", false, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("DROP INDEX ", string0);
      assertNotNull(string0);
  }

  @Test
  public void test54()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      boolean boolean0 = h2DialectExt0.supportsAlterColumnDefault();
      assertEquals(true, boolean0);
  }

  @Test
  public void test55()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("'A).'44N", "'A).'44N", "'A).'44N");
      boolean boolean0 = h2DialectExt0.canPasteTo((IDatabaseObjectInfo) databaseObjectInfo0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test56()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      boolean boolean0 = h2DialectExt0.supportsProduct("", "");
      assertEquals(false, boolean0);
  }

  @Test
  public void test57()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      boolean boolean0 = h2DialectExt0.supportsProduct((String) null, (String) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test58()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      HashSet<String[]> hashSet0 = new HashSet<String[]>();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String[] stringArray0 = h2DialectExt0.getAddForeignKeyConstraintSQL("", "", "", (Boolean) true, (Boolean) true, (Boolean) true, true, "", (Collection<String[]>) hashSet0, "", "", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test59()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String[] stringArray0 = h2DialectExt0.getAlterSequenceSQL("", "", "", "", "", "", false, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test60()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("8FV]", "8FV]");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String[] stringArray0 = h2DialectExt0.getAlterSequenceSQL(" class loader.", " class loader.", " class loader.", "jy YK`gMZFrzq", " class loader.", " class loader.", true, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test61()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier((String) null, (String) null);
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String[] stringArray0 = new String[8];
      String string0 = h2DialectExt0.getCreateIndexSQL("MJsp,6%|Gr$`|", "MJsp,6%|Gr$`|", "1lkP5J^Bi/=ki_y[", stringArray0, false, (String) null, "q&[2V{W", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("CREATE   INDEX MJsp,6%|Gr$`| ON MJsp,6%|Gr$`| (  )", string0);
      assertNotNull(string0);
  }

  @Test
  public void test62()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      String[] stringArray0 = new String[1];
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("p<-PPMP", "p<-PPMP");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = h2DialectExt0.getCreateIndexSQL((String) null, (String) null, (String) null, stringArray0, true, "p<-PPMP", "p<-PPMP", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertNotNull(string0);
      assertEquals("CREATE UNIQUE  INDEX  ON  (  )", string0);
  }

  @Test
  public void test63()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      String[] stringArray0 = new String[1];
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = h2DialectExt0.getCreateIndexSQL("2", "2", "2", stringArray0, true, "2", "2", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("CREATE UNIQUE  INDEX 2 ON 2 (  )", string0);
  }

  @Test
  public void test64()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = h2DialectExt0.getCreateSequenceSQL("", "", "", "", "", "", false, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("CREATE SEQUENCE  START WITH  INCREMENT BY   ", string0);
      assertNotNull(string0);
  }

  @Test
  public void test65()  throws Throwable  {
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = h2DialectExt0.getCreateSequenceSQL("^0v", "^0v", "^0v", "^0v", "78/#", "78/#", true, (DatabaseObjectQualifier) null, sqlGenerationPreferences0);
      assertNotNull(string0);
      assertEquals("CREATE SEQUENCE ^0v START WITH 78/# INCREMENT BY ^0v CACHE 78/#", string0);
  }
}
