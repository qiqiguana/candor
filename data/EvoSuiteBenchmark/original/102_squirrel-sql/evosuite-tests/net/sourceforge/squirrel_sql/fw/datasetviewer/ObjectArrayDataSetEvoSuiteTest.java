/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.datasetviewer;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import net.sourceforge.squirrel_sql.fw.datasetviewer.DataSetDefinition;
import net.sourceforge.squirrel_sql.fw.datasetviewer.DataSetException;
import net.sourceforge.squirrel_sql.fw.datasetviewer.ObjectArrayDataSet;
import net.sourceforge.squirrel_sql.fw.util.IMessageHandler;
import net.sourceforge.squirrel_sql.fw.util.NullMessageHandler;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ObjectArrayDataSetEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ObjectArrayDataSet objectArrayDataSet0 = new ObjectArrayDataSet(objectArray0);
      assertNotNull(objectArrayDataSet0);
      
      DataSetDefinition dataSetDefinition0 = objectArrayDataSet0.getDataSetDefinition();
      assertNotNull(dataSetDefinition0);
      assertEquals(1, objectArrayDataSet0.getColumnCount());
  }

  @Test
  public void test1()  throws Throwable  {
      ObjectArrayDataSet objectArrayDataSet0 = null;
      try {
        objectArrayDataSet0 = new ObjectArrayDataSet((Object[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Null Object[][] passed
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      Object[][] objectArray0 = new Object[4][1];
      objectArray0[0] = (Object[]) null;
      ObjectArrayDataSet objectArrayDataSet0 = new ObjectArrayDataSet(objectArray0);
      assertEquals(1, objectArrayDataSet0.getColumnCount());
      assertNotNull(objectArrayDataSet0);
  }

  @Test
  public void test3()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ObjectArrayDataSet objectArrayDataSet0 = new ObjectArrayDataSet(objectArray0);
      assertNotNull(objectArrayDataSet0);
      
      NullMessageHandler nullMessageHandler0 = NullMessageHandler.getInstance();
      boolean boolean0 = objectArrayDataSet0.next((IMessageHandler) nullMessageHandler0);
      boolean boolean1 = objectArrayDataSet0.next((IMessageHandler) nullMessageHandler0);
      assertEquals(1, objectArrayDataSet0.getColumnCount());
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ObjectArrayDataSet objectArrayDataSet0 = new ObjectArrayDataSet(objectArray0);
      assertNotNull(objectArrayDataSet0);
      
      objectArrayDataSet0.get(1);
      assertEquals(1, objectArrayDataSet0.getColumnCount());
  }

  @Test
  public void test5()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ObjectArrayDataSet objectArrayDataSet0 = new ObjectArrayDataSet(objectArray0);
      assertNotNull(objectArrayDataSet0);
      
      NullMessageHandler nullMessageHandler0 = NullMessageHandler.getInstance();
      boolean boolean0 = objectArrayDataSet0.next((IMessageHandler) nullMessageHandler0);
      assertEquals(true, boolean0);
      
      objectArrayDataSet0.get(1);
      assertEquals(1, objectArrayDataSet0.getColumnCount());
  }

  @Test
  public void test6()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      ObjectArrayDataSet objectArrayDataSet0 = new ObjectArrayDataSet(objectArray0);
      assertNotNull(objectArrayDataSet0);
      
      NullMessageHandler nullMessageHandler0 = NullMessageHandler.getInstance();
      boolean boolean0 = objectArrayDataSet0.next((IMessageHandler) nullMessageHandler0);
      assertEquals(true, boolean0);
      
      // Undeclared exception!
      try {
        objectArrayDataSet0.get((-544));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * -544
         */
      }
  }
}
