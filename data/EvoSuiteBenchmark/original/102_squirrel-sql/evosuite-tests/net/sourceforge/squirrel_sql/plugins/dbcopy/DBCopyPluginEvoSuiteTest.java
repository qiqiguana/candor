/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.plugins.dbcopy;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import net.sourceforge.squirrel_sql.client.plugin.PluginException;
import net.sourceforge.squirrel_sql.client.session.ISession;
import net.sourceforge.squirrel_sql.fw.sql.IDatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.ISQLConnection;
import net.sourceforge.squirrel_sql.fw.sql.TableInfo;
import net.sourceforge.squirrel_sql.plugins.dbcopy.DBCopyPlugin;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DBCopyPluginEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
          dBCopyPlugin0.unload();
          assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.setCopyMenuEnabled(true);
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
  }

  @Test
  public void test2()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      List<IDatabaseObjectInfo> list0 = dBCopyPlugin0.getSourceDatabaseObjects();
      assertNull(list0);
  }

  @Test
  public void test3()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      ISession iSession0 = dBCopyPlugin0.getSourceSession();
      assertNull(iSession0);
  }

  @Test
  public void test4()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.setDestSession((ISession) null);
      assertEquals(false, dBCopyPlugin0.allowsSessionStartedInBackground());
  }

  @Test
  public void test5()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      // Undeclared exception!
      try {
        dBCopyPlugin0.sessionStarted((ISession) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.setDestDatabaseObject((IDatabaseObjectInfo) null);
      assertEquals("/mnt/fastdata/ac1gf/SF110/dist/102_squirrel-sql/plugins/dbcopy.jar", dBCopyPlugin0.getPluginJarFilePath());
  }

  @Test
  public void test7()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      String string0 = dBCopyPlugin0.getDescriptiveName();
      assertEquals("DBCopy Plugin", string0);
  }

  @Test
  public void test8()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      String string0 = dBCopyPlugin0.getPasteToTableName();
      assertNull(string0);
  }

  @Test
  public void test9()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      // Undeclared exception!
      try {
        dBCopyPlugin0.isCopiedFormDestinationSession();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
          // Undeclared exception!
          try {
            dBCopyPlugin0.initialize();
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission /home/ac1gf/.squirrel-sql/plugins/dbcopy write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.mkdir(File.java:1155)
             * java.io.File.mkdirs(File.java:1184)
             * net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl.mkdirs(FileWrapperImpl.java:423)
             * net.sourceforge.squirrel_sql.client.plugin.DefaultPlugin.getPluginUserSettingsFolder(DefaultPlugin.java:256)
             * net.sourceforge.squirrel_sql.plugins.dbcopy.prefs.PreferencesManager.initialize(PreferencesManager.java:64)
             * net.sourceforge.squirrel_sql.plugins.dbcopy.DBCopyPlugin.initialize(DBCopyPlugin.java:177)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test11()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      String string0 = dBCopyPlugin0.getHelpFileName();
      assertEquals("readme.html", string0);
  }

  @Test
  public void test12()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      String string0 = dBCopyPlugin0.getContributors();
      assertEquals("Dan Dragut", string0);
  }

  @Test
  public void test13()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      String string0 = dBCopyPlugin0.getLicenceFileName();
      assertEquals("license.txt", string0);
  }

  @Test
  public void test14()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      ISession iSession0 = dBCopyPlugin0.getDestSession();
      assertNull(iSession0);
  }

  @Test
  public void test15()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      String string0 = dBCopyPlugin0.getVersion();
      assertEquals("1.15", string0);
  }

  @Test
  public void test16()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      IDatabaseObjectInfo iDatabaseObjectInfo0 = dBCopyPlugin0.getDestDatabaseObject();
      assertNull(iDatabaseObjectInfo0);
  }

  @Test
  public void test17()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      String string0 = dBCopyPlugin0.getChangeLogFileName();
      assertEquals("changes.txt", string0);
  }

  @Test
  public void test18()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      // Undeclared exception!
      try {
        dBCopyPlugin0.getGlobalPreferencePanels();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test19()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      String string0 = dBCopyPlugin0.getAuthor();
      assertEquals("Rob Manning", string0);
  }

  @Test
  public void test20()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.setSourceDatabaseObjects((List<IDatabaseObjectInfo>) null);
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
  }

  @Test
  public void test21()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      LinkedList<IDatabaseObjectInfo> linkedList0 = new LinkedList<IDatabaseObjectInfo>();
      dBCopyPlugin0.setSourceDatabaseObjects((List<IDatabaseObjectInfo>) linkedList0);
      dBCopyPlugin0.setPasteToTableName("_P");
      // Undeclared exception!
      try {
        dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "_P", "_P");
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Invalid paste table as state
         */
      }
  }

  @Test
  public void test22()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.setSourceSession((ISession) null);
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
  }

  @Test
  public void test23()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      TableInfo tableInfo0 = dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, (String) null, (String) null);
      assertNull(tableInfo0);
  }
}
