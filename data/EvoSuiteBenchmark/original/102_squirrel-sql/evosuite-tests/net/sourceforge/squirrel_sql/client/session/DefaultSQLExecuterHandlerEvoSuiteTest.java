/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.client.session;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.sql.ResultSet;
import java.sql.SQLWarning;
import java.util.ArrayList;
import net.sourceforge.squirrel_sql.client.session.DataSetUpdateableTableModelImpl;
import net.sourceforge.squirrel_sql.client.session.DefaultSQLExecuterHandler;
import net.sourceforge.squirrel_sql.client.session.ISession;
import net.sourceforge.squirrel_sql.client.session.SQLExecutionInfo;
import net.sourceforge.squirrel_sql.fw.datasetviewer.IDataSetUpdateableTableModel;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DefaultSQLExecuterHandlerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DefaultSQLExecuterHandler defaultSQLExecuterHandler0 = new DefaultSQLExecuterHandler((ISession) null);
      SQLExecutionInfo sQLExecutionInfo0 = new SQLExecutionInfo(2024, "", 2024);
      defaultSQLExecuterHandler0.sqlExecutionComplete(sQLExecutionInfo0, 2024, 2024);
      assertEquals(0L, sQLExecutionInfo0.getSQLExecutionElapsedMillis());
  }

  @Test
  public void test1()  throws Throwable  {
      DefaultSQLExecuterHandler defaultSQLExecuterHandler0 = new DefaultSQLExecuterHandler((ISession) null);
      defaultSQLExecuterHandler0.sqlDataUpdated(382);
  }

  @Test
  public void test2()  throws Throwable  {
      DefaultSQLExecuterHandler defaultSQLExecuterHandler0 = new DefaultSQLExecuterHandler((ISession) null);
      SQLExecutionInfo sQLExecutionInfo0 = new SQLExecutionInfo(1065, "0s:$", 1065);
      DataSetUpdateableTableModelImpl dataSetUpdateableTableModelImpl0 = new DataSetUpdateableTableModelImpl();
      defaultSQLExecuterHandler0.sqlResultSetAvailable((ResultSet) null, sQLExecutionInfo0, (IDataSetUpdateableTableModel) dataSetUpdateableTableModelImpl0);
      assertEquals("0s:$", sQLExecutionInfo0.getSQL());
  }

  @Test
  public void test3()  throws Throwable  {
      DefaultSQLExecuterHandler defaultSQLExecuterHandler0 = new DefaultSQLExecuterHandler((ISession) null);
      defaultSQLExecuterHandler0.sqlExecutionCancelled();
  }

  @Test
  public void test4()  throws Throwable  {
      DefaultSQLExecuterHandler defaultSQLExecuterHandler0 = new DefaultSQLExecuterHandler((ISession) null);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      defaultSQLExecuterHandler0.sqlCloseExecutionHandler(arrayList0, "`");
      assertEquals(0, arrayList0.size());
  }

  @Test
  public void test5()  throws Throwable  {
      DefaultSQLExecuterHandler defaultSQLExecuterHandler0 = new DefaultSQLExecuterHandler((ISession) null);
      defaultSQLExecuterHandler0.sqlStatementCount(382);
  }

  @Test
  public void test6()  throws Throwable  {
      DefaultSQLExecuterHandler defaultSQLExecuterHandler0 = new DefaultSQLExecuterHandler((ISession) null);
      defaultSQLExecuterHandler0.sqlToBeExecuted("`");
  }

  @Test
  public void test7()  throws Throwable  {
      DefaultSQLExecuterHandler defaultSQLExecuterHandler0 = new DefaultSQLExecuterHandler((ISession) null);
      // Undeclared exception!
      try {
        defaultSQLExecuterHandler0.sqlExecutionWarning((SQLWarning) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      DefaultSQLExecuterHandler defaultSQLExecuterHandler0 = new DefaultSQLExecuterHandler((ISession) null);
      // Undeclared exception!
      try {
        defaultSQLExecuterHandler0.sqlExecutionException((Throwable) null, "uW>");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      DefaultSQLExecuterHandler defaultSQLExecuterHandler0 = new DefaultSQLExecuterHandler((ISession) null);
      // Undeclared exception!
      try {
        defaultSQLExecuterHandler0.sqlExecutionException((Throwable) null, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
