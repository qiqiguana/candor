/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.gui;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.awt.Font;
import javax.swing.JComponent;
import javax.swing.plaf.PanelUI;
import javax.swing.plaf.basic.BasicPanelUI;
import net.sourceforge.squirrel_sql.fw.gui.StatusBar;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class StatusBarEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      StatusBar statusBar0 = new StatusBar();
      assertNotNull(statusBar0);
      
      String string0 = statusBar0.getText();
      assertEquals(" ", string0);
      assertNotNull(string0);
      assertEquals(1, statusBar0.countComponents());
  }

  @Test
  public void test1()  throws Throwable  {
      StatusBar statusBar0 = new StatusBar();
      assertNotNull(statusBar0);
      
      // Undeclared exception!
      try {
        statusBar0.setFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Font == null
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      StatusBar statusBar0 = new StatusBar();
      assertNotNull(statusBar0);
      
      statusBar0.setText((String) null);
      assertEquals(" ", statusBar0.getText());
      assertEquals(1, statusBar0.getComponentCount());
      assertEquals(1, statusBar0.countComponents());
  }

  @Test
  public void test3()  throws Throwable  {
      StatusBar statusBar0 = new StatusBar();
      assertNotNull(statusBar0);
      
      statusBar0.setText("");
      assertEquals(" ", statusBar0.getText());
  }

  @Test
  public void test4()  throws Throwable  {
      StatusBar statusBar0 = new StatusBar();
      assertNotNull(statusBar0);
      
      statusBar0.setText("C58\"|}u");
      statusBar0.setTextWhenEmpty("");
      assertEquals("C58\"|}u", statusBar0.getText());
      assertEquals(1, statusBar0.countComponents());
  }

  @Test
  public void test5()  throws Throwable  {
      StatusBar statusBar0 = new StatusBar();
      assertNotNull(statusBar0);
      
      statusBar0.setTextWhenEmpty((String) null);
      assertEquals(1, statusBar0.countComponents());
      assertEquals(" ", statusBar0.getText());
      assertEquals(1, statusBar0.getComponentCount());
  }

  @Test
  public void test6()  throws Throwable  {
      StatusBar statusBar0 = new StatusBar();
      assertNotNull(statusBar0);
      
      statusBar0.setTextWhenEmpty("<gpZ*dbg");
      assertEquals("<gpZ*dbg", statusBar0.getText());
  }

  @Test
  public void test7()  throws Throwable  {
      StatusBar statusBar0 = new StatusBar();
      assertNotNull(statusBar0);
      
      statusBar0.setTextWhenEmpty("");
      assertEquals(1, statusBar0.countComponents());
      assertEquals(" ", statusBar0.getText());
  }

  @Test
  public void test8()  throws Throwable  {
      StatusBar statusBar0 = new StatusBar();
      assertNotNull(statusBar0);
      
      // Undeclared exception!
      try {
        statusBar0.addJComponent((JComponent) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * JComponent == null
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      StatusBar statusBar0 = new StatusBar();
      assertNotNull(statusBar0);
      
      statusBar0.setStatusBarProgress("<gpZ*dbg", (-17), (-17), (-17));
      statusBar0.setStatusBarProgress("<gpZ*dbg", (-17), (-17), (-17));
      assertEquals(" ", statusBar0.getText());
  }

  @Test
  public void test10()  throws Throwable  {
      StatusBar statusBar0 = new StatusBar();
      assertNotNull(statusBar0);
      
      statusBar0.setStatusBarProgress((String) null, 0, 0, 0);
      statusBar0.setStatusBarProgressFinished();
      assertEquals(" ", statusBar0.getText());
  }

  @Test
  public void test11()  throws Throwable  {
      StatusBar statusBar0 = new StatusBar();
      assertNotNull(statusBar0);
      
      statusBar0.setStatusBarProgressFinished();
      assertEquals(" ", statusBar0.getText());
  }

  @Test
  public void test12()  throws Throwable  {
      StatusBar statusBar0 = new StatusBar();
      assertNotNull(statusBar0);
      
      BasicPanelUI basicPanelUI0 = new BasicPanelUI();
      statusBar0.setUI((PanelUI) basicPanelUI0);
      assertEquals(" ", statusBar0.getText());
      assertEquals(1, statusBar0.getComponentCount());
  }
}
