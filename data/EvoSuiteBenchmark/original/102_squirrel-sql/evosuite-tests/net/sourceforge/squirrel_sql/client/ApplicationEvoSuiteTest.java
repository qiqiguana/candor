/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.client;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.awt.HeadlessException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import net.sourceforge.squirrel_sql.client.Application;
import net.sourceforge.squirrel_sql.client.ApplicationListener;
import net.sourceforge.squirrel_sql.client.DummyAppPlugin;
import net.sourceforge.squirrel_sql.client.FontInfoStore;
import net.sourceforge.squirrel_sql.client.IApplication;
import net.sourceforge.squirrel_sql.client.IShutdownTimer;
import net.sourceforge.squirrel_sql.client.MultipleWindowsHandler;
import net.sourceforge.squirrel_sql.client.action.ActionCollection;
import net.sourceforge.squirrel_sql.client.gui.WindowManager;
import net.sourceforge.squirrel_sql.client.gui.db.DataCache;
import net.sourceforge.squirrel_sql.client.gui.desktopcontainer.DesktopStyle;
import net.sourceforge.squirrel_sql.client.plugin.IPluginManager;
import net.sourceforge.squirrel_sql.client.resources.SquirrelResources;
import net.sourceforge.squirrel_sql.client.session.DefaultSQLEntryPanelFactory;
import net.sourceforge.squirrel_sql.client.session.ISQLEntryPanelFactory;
import net.sourceforge.squirrel_sql.client.session.SessionManager;
import net.sourceforge.squirrel_sql.client.session.mainpanel.SQLHistory;
import net.sourceforge.squirrel_sql.client.update.autocheck.UpdateCheckTimer;
import net.sourceforge.squirrel_sql.client.update.autocheck.UpdateCheckTimerImpl;
import net.sourceforge.squirrel_sql.client.update.gui.installer.PreLaunchHelperFactory;
import net.sourceforge.squirrel_sql.client.update.gui.installer.PreLaunchHelperFactoryImpl;
import net.sourceforge.squirrel_sql.fw.gui.action.wikiTable.IWikiTableConfigurationFactory;
import net.sourceforge.squirrel_sql.fw.gui.action.wikiTable.WikiTableConfigurationFactory;
import net.sourceforge.squirrel_sql.fw.sql.SQLDriverManager;
import net.sourceforge.squirrel_sql.fw.util.TaskThreadPool;
import net.sourceforge.squirrel_sql.fw.util.log.LoggerController;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ApplicationEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      Application application0 = new Application();
      // Undeclared exception!
      try {
        application0.startup();
        fail("Expecting exception: HeadlessException");
      } catch(HeadlessException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      Application application0 = new Application();
      WindowManager windowManager0 = application0.getWindowManager();
      assertNull(windowManager0);
  }

  @Test
  public void test2()  throws Throwable  {
      Application application0 = new Application();
      SQLDriverManager sQLDriverManager0 = application0.getSQLDriverManager();
      assertNull(sQLDriverManager0);
  }

  @Test
  public void test3()  throws Throwable  {
      Application application0 = new Application();
      ActionCollection actionCollection0 = application0.getActionCollection();
      assertNull(actionCollection0);
  }

  @Test
  public void test4()  throws Throwable  {
      Application application0 = new Application();
      application0.removeApplicationListener((ApplicationListener) null);
  }

  @Test
  public void test5()  throws Throwable  {
      Application application0 = new Application();
      WikiTableConfigurationFactory wikiTableConfigurationFactory0 = (WikiTableConfigurationFactory)application0.getWikiTableConfigFactory();
      application0.setWikiTableConfigFactory((IWikiTableConfigurationFactory) wikiTableConfigurationFactory0);
  }

  @Test
  public void test6()  throws Throwable  {
      Application application0 = new Application();
      DummyAppPlugin dummyAppPlugin0 = (DummyAppPlugin)application0.getDummyAppPlugin();
      assertNull(dummyAppPlugin0.getLicenceFileName());
  }

  @Test
  public void test7()  throws Throwable  {
      Application application0 = new Application();
      UpdateCheckTimerImpl updateCheckTimerImpl0 = null;
      try {
        updateCheckTimerImpl0 = new UpdateCheckTimerImpl((IApplication) application0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      Application application0 = new Application();
      SessionManager sessionManager0 = application0.getSessionManager();
      assertNull(sessionManager0);
  }

  @Test
  public void test9()  throws Throwable  {
      Application application0 = new Application();
      SQLHistory sQLHistory0 = application0.getSQLHistory();
      assertNull(sQLHistory0);
  }

  @Test
  public void test10()  throws Throwable  {
      Application application0 = new Application();
      application0.setUpdateCheckTimer((UpdateCheckTimer) null);
  }

  @Test
  public void test11()  throws Throwable  {
      Application application0 = new Application();
      DefaultSQLEntryPanelFactory defaultSQLEntryPanelFactory0 = (DefaultSQLEntryPanelFactory)application0.getSQLEntryPanelFactory();
      application0.setSQLEntryPanelFactory((ISQLEntryPanelFactory) defaultSQLEntryPanelFactory0);
  }

  @Test
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          Application application0 = new Application();
          // Undeclared exception!
          try {
            application0.openURL("sQ");
            fail("Expecting exception: HeadlessException");
          } catch(HeadlessException e) {
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test13()  throws Throwable  {
      Application application0 = new Application();
      DesktopStyle desktopStyle0 = application0.getDesktopStyle();
      assertNull(desktopStyle0);
  }

  @Test
  public void test14()  throws Throwable  {
      Application application0 = new Application();
      MultipleWindowsHandler multipleWindowsHandler0 = application0.getMultipleWindowsHandler();
      assertNotNull(multipleWindowsHandler0);
  }

  @Test
  public void test15()  throws Throwable  {
      Application application0 = new Application();
      DataCache dataCache0 = application0.getDataCache();
      assertNull(dataCache0);
  }

  @Test
  public void test16()  throws Throwable  {
      Application application0 = new Application();
      // Undeclared exception!
      try {
        application0.showErrorDialog("N4l:8O*&\u0001l");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test17()  throws Throwable  {
      Application application0 = new Application();
      // Undeclared exception!
      try {
        application0.showErrorDialog("(", (Throwable) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test18()  throws Throwable  {
      Application application0 = new Application();
      LoggerController loggerController0 = application0.getLoggerFactory();
      assertNull(loggerController0);
  }

  @Test
  public void test19()  throws Throwable  {
      Application application0 = new Application();
      SquirrelResources squirrelResources0 = application0.getResources();
      assertNull(squirrelResources0);
  }

  @Test
  public void test20()  throws Throwable  {
      Application application0 = new Application();
      PreLaunchHelperFactoryImpl preLaunchHelperFactoryImpl0 = new PreLaunchHelperFactoryImpl();
      application0.setPreLaunchHelperFactory((PreLaunchHelperFactory) preLaunchHelperFactoryImpl0);
  }

  @Test
  public void test21()  throws Throwable  {
      Application application0 = new Application();
      application0.setShutdownTimer((IShutdownTimer) null);
  }

  @Test
  public void test22()  throws Throwable  {
      Application application0 = new Application();
      // Undeclared exception!
      try {
        application0.showErrorDialog((Throwable) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test23()  throws Throwable  {
      Application application0 = new Application();
      FontInfoStore fontInfoStore0 = application0.getFontInfoStore();
      assertNotNull(fontInfoStore0);
  }

  @Test
  public void test24()  throws Throwable  {
      Application application0 = new Application();
      application0.addApplicationListener((ApplicationListener) null);
  }

  @Test
  public void test25()  throws Throwable  {
      Application application0 = new Application();
      // Undeclared exception!
      try {
        application0.getMessageHandler();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test26()  throws Throwable  {
      Application application0 = new Application();
      IPluginManager iPluginManager0 = application0.getPluginManager();
      assertNull(iPluginManager0);
  }

  @Test
  public void test27()  throws Throwable  {
      Application application0 = new Application();
      TaskThreadPool taskThreadPool0 = application0.getThreadPool();
      assertNotNull(taskThreadPool0);
  }

  @Test
  public void test28()  throws Throwable  {
      Application application0 = new Application();
      application0.setSQLEntryPanelFactory((ISQLEntryPanelFactory) null);
  }
}
