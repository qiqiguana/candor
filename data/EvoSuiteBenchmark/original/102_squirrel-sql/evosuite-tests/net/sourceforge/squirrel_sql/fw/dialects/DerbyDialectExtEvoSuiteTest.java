/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.dialects;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import net.sourceforge.squirrel_sql.fw.dialects.DatabaseObjectQualifier;
import net.sourceforge.squirrel_sql.fw.dialects.DerbyDialectExt;
import net.sourceforge.squirrel_sql.fw.dialects.DialectType;
import net.sourceforge.squirrel_sql.fw.dialects.SqlGenerationPreferences;
import net.sourceforge.squirrel_sql.fw.sql.IDatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.TableColumnInfo;
import org.hibernate.MappingException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DerbyDialectExtEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        derbyDialectExt0.getDropSequenceSQL("lB:", true, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Derby doesn't support dropping sequences.
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      boolean boolean0 = derbyDialectExt0.supportsDropColumn();
      assertEquals(true, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      boolean boolean0 = derbyDialectExt0.supportsSequence();
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      DialectType dialectType0 = derbyDialectExt0.getDialectType();
      assertEquals(3, dialectType0.ordinal());
  }

  @Test
  public void test4()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      // Undeclared exception!
      try {
        derbyDialectExt0.getDropPrimaryKeySQL("#-xw;k/yf_", "#-xw;k/yf_", databaseObjectQualifier0, (SqlGenerationPreferences) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      int int0 = derbyDialectExt0.getColumnLength(1, 1);
      assertEquals(1, int0);
  }

  @Test
  public void test6()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = derbyDialectExt0.getColumnDropSQL("lB:", "lB:", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("ALTER TABLE \"lB:\" DROP \"lB:\"", string0);
      assertNotNull(string0);
  }

  @Test
  public void test7()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo((String) null, (String) null, (String) null, (String) null, 602, (String) null, 0, 0, 1778, 0, (String) null, (String) null, 0, 602, (String) null);
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        derbyDialectExt0.getAddColumnSQL(tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: MappingException");
      } catch(MappingException e) {
        /*
         * No Dialect mapping for JDBC type: 602
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("", "", "", "", 126, "", 0, 0, 126, 126, "", "", 0, 0, "");
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("", "");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      try {
        derbyDialectExt0.getColumnCommentAlterSQL(tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Derby doesn't support column comments
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      boolean boolean0 = derbyDialectExt0.supportsDropSequence();
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      boolean boolean0 = derbyDialectExt0.supportsAlterSequence();
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        derbyDialectExt0.getSequenceInformationSQL((String) null, (DatabaseObjectQualifier) null, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Derby doesn't support gathering sequence information.
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      int int0 = derbyDialectExt0.getMaxScale((-1601));
      assertEquals(31, int0);
  }

  @Test
  public void test13()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      boolean boolean0 = derbyDialectExt0.supportsAlterColumnDefault();
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      boolean boolean0 = derbyDialectExt0.supportsAlterColumnType();
      assertEquals(true, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("ElOlu`I$y[54Wv", "ElOlu`I$y[54Wv", "ElOlu`I$y[54Wv", "ElOlu`I$y[54Wv", (-1540), "ElOlu`I$y[54Wv", (-1540), (-1540), (-1540), (-1), "ElOlu`I$y[54Wv", "ElOlu`I$y[54Wv", (-1540), (-1), "ElOlu`I$y[54Wv");
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("ElOlu`I$y[54Wv", "ElOlu`I$y[54Wv");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        derbyDialectExt0.getColumnDefaultAlterSQL(tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Derby doesn't support altering a column's default value
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      boolean boolean0 = derbyDialectExt0.supportsColumnComment();
      assertEquals(false, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("", "");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = derbyDialectExt0.getDropForeignKeySQL("", "", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("ALTER TABLE \"\" DROP CONSTRAINT \"\"", string0);
  }

  @Test
  public void test18()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      boolean boolean0 = derbyDialectExt0.supportsCreateSequence();
      assertEquals(false, boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("gr", "gr");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        derbyDialectExt0.getAlterSequenceSQL("ALTER TABLE \"gr\".\"gr\".\"gr\"\n DROP CONSTRAINT \"gr\"", "ALTER TABLE \"gr\".\"gr\".\"gr\"\n DROP CONSTRAINT \"gr\"", "gr", "gr", "fq:*", "", false, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Derby doesn't support altering sequences.
         */
      }
  }

  @Test
  public void test20()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      boolean boolean0 = derbyDialectExt0.supportsRenameColumn();
      assertEquals(false, boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        derbyDialectExt0.getCreateSequenceSQL("ADD", "ADD", "ADD", "ADD", "ADD", "ADD", true, (DatabaseObjectQualifier) null, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Derby doesn't support creating sequences.
         */
      }
  }

  @Test
  public void test22()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      boolean boolean0 = derbyDialectExt0.supportsViewDefinition();
      assertEquals(true, boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      boolean boolean0 = derbyDialectExt0.supportsAutoIncrement();
      assertEquals(false, boolean0);
  }

  @Test
  public void test24()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("Apache Derbye", "Apache Derbye", "Apache Derbye", "Apache Derbye", 479, "Apache Derbye", 479, 479, 880, 2147483, "Apache Derbye", "Apache Derbye", 479, 880, "Apache Derbye");
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("Apache Derbye", "Apache Derbye");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String[] stringArray0 = derbyDialectExt0.getColumnNullableAlterSQL(tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test25()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("ALTER TABLE \"lB:\" DROP \"lB:\"", "ApachV Derby", "lB:", "ALTER TABLE \"lB:\" DROP \"lB:\"", 7, "ALTER TABLE \"lB:\" DROP \"lB:\"", 7, 7, 7, 7, "ALTER TABLE \"lB:\" DROP \"lB:\"", "lB:", 7, 7, "ALTER TABLE \"lB:\" DROP \"lB:\"");
      boolean boolean0 = derbyDialectExt0.canPasteTo((IDatabaseObjectInfo) tableColumnInfo0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test26()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      boolean boolean0 = derbyDialectExt0.supportsSequenceInformation();
      assertEquals(false, boolean0);
  }

  @Test
  public void test27()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      boolean boolean0 = derbyDialectExt0.supportsAlterColumnNull();
      assertEquals(true, boolean0);
  }

  @Test
  public void test28()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("]=}I", "]=}I", "]=}I", "]=}I", 1561, "]=}I", 1561, 1561, 1561, 1561, "]=}I", "]=}I", 1182, 1561, "]=}I");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        derbyDialectExt0.getColumnNameAlterSQL(tableColumnInfo0, tableColumnInfo0, (DatabaseObjectQualifier) null, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Derby doesn't support altering a column's name
         */
      }
  }

  @Test
  public void test29()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        derbyDialectExt0.getViewDefinitionSQL("ADD", databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test30()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      boolean boolean0 = derbyDialectExt0.supportsProduct("Apache Derbye", "Apache Derbye");
      assertEquals(true, boolean0);
  }

  @Test
  public void test31()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      boolean boolean0 = derbyDialectExt0.supportsProduct((String) null, (String) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test32()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      boolean boolean0 = derbyDialectExt0.supportsProduct("ADD", "ADD");
      assertEquals(false, boolean0);
  }

  @Test
  public void test33()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("^1uOHWY\"ou)V^>!a", "^1uOHWY\"ou)V^>!a");
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("^1uOHWY\"ou)V^>!a", "^1uOHWY\"ou)V^>!a", "^1uOHWY\"ou)V^>!a", "^1uOHWY\"ou)V^>!a", 9, "^1uOHWY\"ou)V^>!a", 9, 9, 9, 7, "^1uOHWY\"ou)V^>!a", "^1uOHWY\"ou)V^>!a", 572, 9, "^1uOHWY\"ou)V^>!a");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      try {
        derbyDialectExt0.getColumnTypeAlterSQL(tableColumnInfo0, tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Derby only allows varchar columns to be altered
         */
      }
  }

  @Test
  public void test34()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("Apache Derbye", "Apache Derbye", "Apache Derbye", "Apache Derbye", 479, "Apache Derbye", 479, 479, 880, 2147483, "Apache Derbye", "Apache Derbye", 479, 880, "Apache Derbye");
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("Apache Derbye", "Apache Derbye");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[4];
      tableColumnInfoArray0[0] = tableColumnInfo0;
      tableColumnInfoArray0[1] = tableColumnInfo0;
      tableColumnInfoArray0[2] = tableColumnInfo0;
      tableColumnInfoArray0[3] = tableColumnInfo0;
      String[] stringArray0 = derbyDialectExt0.getAddUniqueConstraintSQL("Apache Derbye", "7@CZ~}[.6YY~`n", tableColumnInfoArray0, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertNotNull(stringArray0);
  }
}
