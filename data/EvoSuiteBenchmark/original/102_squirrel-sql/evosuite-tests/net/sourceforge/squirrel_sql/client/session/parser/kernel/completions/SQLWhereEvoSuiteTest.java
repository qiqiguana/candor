/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.client.session.parser.kernel.completions;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.SQLSchema;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.completions.SQLColumn;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.completions.SQLModifyingStatement;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.completions.SQLSelectStatement;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.completions.SQLStatement;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.completions.SQLStatementContext;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.completions.SQLWhere;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SQLWhereEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SQLModifyingStatement sQLModifyingStatement0 = new SQLModifyingStatement(14);
      SQLWhere sQLWhere0 = new SQLWhere((SQLStatement) sQLModifyingStatement0, 14);
      assertNotNull(sQLWhere0);
      
      SQLColumn sQLColumn0 = new SQLColumn((SQLStatementContext) sQLWhere0);
      SQLModifyingStatement sQLModifyingStatement1 = (SQLModifyingStatement)sQLColumn0.getStatement();
      assertEquals(99986, sQLWhere0.getLength());
      assertNotNull(sQLModifyingStatement1);
      assertEquals(99986, sQLModifyingStatement1.getLength());
  }

  @Test
  public void test1()  throws Throwable  {
      SQLModifyingStatement sQLModifyingStatement0 = new SQLModifyingStatement((-166));
      SQLWhere sQLWhere0 = new SQLWhere((SQLStatement) sQLModifyingStatement0, (-166));
      assertNotNull(sQLWhere0);
      
      // Undeclared exception!
      try {
        sQLWhere0.addContext((SQLStatementContext) sQLModifyingStatement0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * internal error: recursive schema
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      SQLModifyingStatement sQLModifyingStatement0 = new SQLModifyingStatement(1);
      SQLWhere sQLWhere0 = new SQLWhere((SQLStatement) sQLModifyingStatement0, 0);
      assertNotNull(sQLWhere0);
      
      sQLWhere0.setSqlSchema((SQLSchema) sQLModifyingStatement0);
      assertEquals(99999, sQLModifyingStatement0.getLength());
      assertEquals(100000, sQLWhere0.getLength());
  }

  @Test
  public void test3()  throws Throwable  {
      SQLModifyingStatement sQLModifyingStatement0 = new SQLModifyingStatement(14);
      SQLWhere sQLWhere0 = new SQLWhere((SQLStatement) sQLModifyingStatement0, 14);
      assertNotNull(sQLWhere0);
      
      SQLColumn sQLColumn0 = (SQLColumn)sQLWhere0.getCompletion(0);
      assertEquals(99986, sQLModifyingStatement0.getLength());
      assertEquals(99986, sQLWhere0.getLength());
      assertNull(sQLColumn0);
  }

  @Test
  public void test4()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement((-1378));
      SQLWhere sQLWhere0 = new SQLWhere((SQLStatement) sQLSelectStatement0, (-1378));
      assertNotNull(sQLWhere0);
      
      SQLColumn sQLColumn0 = new SQLColumn((SQLStatementContext) sQLWhere0, (-1378), (-1378));
      sQLWhere0.addColumn(sQLColumn0);
      SQLColumn sQLColumn1 = (SQLColumn)sQLWhere0.getCompletion((-1378));
      assertNotNull(sQLColumn1);
      assertEquals(101378, sQLWhere0.getLength());
      assertEquals(101378, sQLSelectStatement0.getLength());
      assertEquals(1, sQLColumn1.getLength());
  }

  @Test
  public void test5()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement((-1378));
      SQLWhere sQLWhere0 = new SQLWhere((SQLStatement) sQLSelectStatement0, (-1378));
      assertNotNull(sQLWhere0);
      
      SQLColumn sQLColumn0 = new SQLColumn((SQLStatementContext) sQLWhere0, (-1378), (-1378));
      sQLWhere0.addColumn(sQLColumn0);
      SQLColumn sQLColumn1 = (SQLColumn)sQLWhere0.getCompletion(0);
      assertEquals(false, sQLColumn1.isRepeatable());
      assertNotNull(sQLColumn1);
      assertEquals(101378, sQLWhere0.getLength());
      assertEquals(101378, sQLSelectStatement0.getLength());
      assertEquals(0, sQLColumn1.getStart());
  }
}
