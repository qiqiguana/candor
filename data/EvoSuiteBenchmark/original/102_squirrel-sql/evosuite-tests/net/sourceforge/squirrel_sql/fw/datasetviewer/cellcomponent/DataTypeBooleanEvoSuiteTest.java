/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import net.sourceforge.squirrel_sql.fw.datasetviewer.ColumnDisplayDefinition;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.DataTypeBoolean;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.RestorableJTextArea;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.RestorableJTextField;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.whereClause.ParameterWhereClausePart;
import net.sourceforge.squirrel_sql.fw.dialects.DialectType;
import net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData;
import org.jfree.data.xy.XYDatasetTableModel;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DataTypeBooleanEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      JTable jTable0 = new JTable(490, 490);
      DialectType dialectType0 = DialectType.DAFFODIL;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(490, "Receiving events from a series that does not belong to this collection.", "", "", 490, "Receiving events from a series that does not belong to this collection.", true, 490, 490, (-1692), true, true, true, dialectType0);
      DataTypeBoolean dataTypeBoolean0 = new DataTypeBoolean(jTable0, columnDisplayDefinition0);
      RestorableJTextArea restorableJTextArea0 = (RestorableJTextArea)dataTypeBoolean0.getJTextArea((Object) "java.lang.Boolean");
      assertNotNull(restorableJTextArea0);
      assertEquals("java.lang.Boolean", restorableJTextArea0.getText());
  }

  @Test
  public void test1()  throws Throwable  {
      JTable jTable0 = new JTable(732, 732);
      DialectType dialectType0 = DialectType.H2;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-518), "", "", "", 1, "", false, 0, 732, 883, false, true, false, dialectType0);
      DataTypeBoolean dataTypeBoolean0 = new DataTypeBoolean(jTable0, columnDisplayDefinition0);
      RestorableJTextField restorableJTextField0 = (RestorableJTextField)dataTypeBoolean0.getJTextField();
      assertEquals(false, restorableJTextField0.isPreferredSizeSet());
  }

  @Test
  public void test2()  throws Throwable  {
      JTable jTable0 = new JTable(490, 490);
      DialectType dialectType0 = DialectType.DAFFODIL;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(490, "Receiving events from a series that does not belong to this collection.", "", "", 490, "Receiving events from a series that does not belong to this collection.", true, 490, 490, (-1692), true, true, true, dialectType0);
      DataTypeBoolean dataTypeBoolean0 = new DataTypeBoolean(jTable0, columnDisplayDefinition0);
      String string0 = dataTypeBoolean0.getClassName();
      assertEquals("java.lang.Boolean", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      JTable jTable0 = new JTable(732, 732);
      DialectType dialectType0 = DialectType.MSSQL;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(732, "<null>", "<null>", "<null>", (-1470), "<null>", false, 0, (-518), 0, false, false, false, dialectType0);
      DataTypeBoolean dataTypeBoolean0 = new DataTypeBoolean(jTable0, columnDisplayDefinition0);
      boolean boolean0 = dataTypeBoolean0.isEditableInCell((Object) "ToolTipText");
      assertEquals(true, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      JTable jTable0 = new JTable((TableModel) defaultTableModel0, (TableColumnModel) null);
      DialectType dialectType0 = DialectType.INGRES;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, "", "", "", 0, "", true, 0, 0, 0, true, true, true, dialectType0);
      DataTypeBoolean dataTypeBoolean0 = new DataTypeBoolean(jTable0, columnDisplayDefinition0);
      boolean boolean0 = dataTypeBoolean0.useBinaryEditingPanel();
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, "dc:Y~");
      DataTypeBoolean dataTypeBoolean0 = new DataTypeBoolean((JTable) null, columnDisplayDefinition0);
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Boolean boolean0 = (Boolean)dataTypeBoolean0.validateAndConvert("dc:Y~", (Object) "contentAreaFilled", stringBuffer0);
      assertEquals(false, (boolean)boolean0);
      
      boolean boolean1 = dataTypeBoolean0.isEditableInPopup((Object) boolean0);
      assertEquals(true, boolean1);
  }

  @Test
  public void test6()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, "dc:Y~");
      DataTypeBoolean dataTypeBoolean0 = new DataTypeBoolean((JTable) null, columnDisplayDefinition0);
      boolean boolean0 = dataTypeBoolean0.canDoFileIO();
      assertEquals(true, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, "dc:Y~");
      DataTypeBoolean dataTypeBoolean0 = new DataTypeBoolean((JTable) null, columnDisplayDefinition0);
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Boolean boolean0 = (Boolean)dataTypeBoolean0.validateAndConvert("dc:Y~", (Object) "contentAreaFilled", stringBuffer0);
      Boolean boolean1 = (Boolean)dataTypeBoolean0.validateAndConvertInPopup("dc:Y~", (Object) boolean0, stringBuffer0);
      assertEquals(false, (boolean)boolean1);
  }

  @Test
  public void test8()  throws Throwable  {
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      Object[][] objectArray0 = new Object[3][5];
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = (Object) xYDatasetTableModel0;
      objectArray1[1] = (Object) xYDatasetTableModel0;
      objectArray1[2] = (Object) xYDatasetTableModel0;
      objectArray1[3] = (Object) xYDatasetTableModel0;
      objectArray0[0] = objectArray1;
      JTable jTable0 = new JTable(objectArray0, objectArray0[0]);
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-607), "");
      DataTypeBoolean dataTypeBoolean0 = new DataTypeBoolean(jTable0, columnDisplayDefinition0);
      boolean boolean0 = dataTypeBoolean0.needToReRead(objectArray1[3]);
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      JTable jTable0 = new JTable(732, 732);
      DialectType dialectType0 = DialectType.MSSQL;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(732, "<null>", "<null>", "<null>", (-1470), "<null>", false, 0, (-518), 0, false, false, false, dialectType0);
      DataTypeBoolean dataTypeBoolean0 = new DataTypeBoolean(jTable0, columnDisplayDefinition0);
      StringBuffer stringBuffer0 = new StringBuffer(732);
      Boolean boolean0 = (Boolean)dataTypeBoolean0.validateAndConvert("<null>", (Object) "NOID", stringBuffer0);
      assertNull(boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      DialectType dialectType0 = DialectType.POSTGRES;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, "", "", "", 0, "", false, (-143), 101, 0, true, true, false, dialectType0);
      DataTypeBoolean dataTypeBoolean0 = new DataTypeBoolean((JTable) null, columnDisplayDefinition0);
      Boolean boolean0 = (Boolean)dataTypeBoolean0.getDefaultValue("");
      assertNull(boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, "dc:Y~");
      DataTypeBoolean dataTypeBoolean0 = new DataTypeBoolean((JTable) null, columnDisplayDefinition0);
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Boolean boolean0 = (Boolean)dataTypeBoolean0.validateAndConvert("dc:Y~", (Object) "contentAreaFilled", stringBuffer0);
      ParameterWhereClausePart parameterWhereClausePart0 = (ParameterWhereClausePart)dataTypeBoolean0.getWhereClauseValue((Object) boolean0, (ISQLDatabaseMetaData) null);
      assertEquals(true, parameterWhereClausePart0.shouldBeUsed());
  }

  @Test
  public void test12()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      JTable jTable0 = new JTable((TableModel) defaultTableModel0, (TableColumnModel) null);
      DialectType dialectType0 = DialectType.INGRES;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, "", "", "", 0, "", true, 0, 0, 0, true, true, true, dialectType0);
      DataTypeBoolean dataTypeBoolean0 = new DataTypeBoolean(jTable0, columnDisplayDefinition0);
      // Undeclared exception!
      try {
        dataTypeBoolean0.setPreparedStatementValue((PreparedStatement) null, (Object) "", 0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * java.lang.String cannot be cast to java.lang.Boolean
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      DialectType dialectType0 = DialectType.AXION;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-2), "c00~\"YX!`X=Y4./hk", "c00~\"YX!`X=Y4./hk", "c00~\"YX!`X=Y4./hk", (-2), "c00~\"YX!`X=Y4./hk", false, (-2), (-2), (-2), false, false, false, dialectType0);
      JTable jTable0 = new JTable((TableModel) null);
      DataTypeBoolean dataTypeBoolean0 = new DataTypeBoolean(jTable0, columnDisplayDefinition0);
      // Undeclared exception!
      try {
        dataTypeBoolean0.setPreparedStatementValue((PreparedStatement) null, (Object) null, (-1745));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test14()  throws Throwable  {
      JTable jTable0 = new JTable();
      DialectType dialectType0 = DialectType.GENERIC;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-1882), (String) null, (String) null, (String) null, 1678, (String) null, false, 27, 2019, 2019, true, true, true, dialectType0);
      DataTypeBoolean dataTypeBoolean0 = new DataTypeBoolean(jTable0, columnDisplayDefinition0);
      Boolean boolean0 = (Boolean)dataTypeBoolean0.getDefaultValue((String) null);
      assertEquals("true", boolean0.toString());
  }

  @Test
  public void test15()  throws Throwable  {
      JTable jTable0 = new JTable();
      DialectType dialectType0 = DialectType.GENERIC;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-1882), (String) null, (String) null, (String) null, 1958, (String) null, true, 1958, 27, 786, false, true, false, dialectType0);
      DataTypeBoolean dataTypeBoolean0 = new DataTypeBoolean(jTable0, columnDisplayDefinition0);
      Boolean boolean0 = (Boolean)dataTypeBoolean0.getDefaultValue((String) null);
      assertNull(boolean0);
  }
}
