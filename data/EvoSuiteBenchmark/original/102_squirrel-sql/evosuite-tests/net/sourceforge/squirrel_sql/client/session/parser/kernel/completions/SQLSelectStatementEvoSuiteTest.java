/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.client.session.parser.kernel.completions;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.completions.SQLColumn;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.completions.SQLSelectStatement;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.completions.SQLSelectStatementListener;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.completions.SQLStatementContext;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.completions.SQLTable;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SQLSelectStatementEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(11);
      assertNotNull(sQLSelectStatement0);
      
      sQLSelectStatement0.setHavingStart(11);
      assertEquals(99989, sQLSelectStatement0.getLength());
  }

  @Test
  public void test1()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(46);
      sQLSelectStatement0.setOrderByStart(46);
      SQLColumn sQLColumn0 = (SQLColumn)sQLSelectStatement0.getCompletion(46);
      assertNotNull(sQLColumn0);
      assertEquals(46, sQLColumn0.getStart());
      assertEquals(1, sQLColumn0.getLength());
      assertEquals(false, sQLColumn0.isRepeatable());
      assertEquals(99954, sQLSelectStatement0.getLength());
  }

  @Test
  public void test2()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(46);
      assertNotNull(sQLSelectStatement0);
      
      sQLSelectStatement0.setSelectListStart(46);
      assertEquals(99954, sQLSelectStatement0.getLength());
  }

  @Test
  public void test3()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(11);
      assertNotNull(sQLSelectStatement0);
      
      sQLSelectStatement0.setGroupByStart((-1647));
      assertEquals(99989, sQLSelectStatement0.getLength());
  }

  @Test
  public void test4()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement((-15));
      assertNotNull(sQLSelectStatement0);
      
      sQLSelectStatement0.setGroupByEnd((-15));
      assertEquals(1, sQLSelectStatement0.getLength());
      assertEquals(true, sQLSelectStatement0.hasTextPosition());
  }

  @Test
  public void test5()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement((-34));
      sQLSelectStatement0.addListener((SQLSelectStatementListener) null);
      assertEquals(-34, sQLSelectStatement0.getStart());
  }

  @Test
  public void test6()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(11);
      sQLSelectStatement0.removeListener((SQLSelectStatementListener) null);
      assertEquals(11, sQLSelectStatement0.getStart());
  }

  @Test
  public void test7()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(113);
      assertNotNull(sQLSelectStatement0);
      
      sQLSelectStatement0.setFromEnd(113);
      assertEquals(1, sQLSelectStatement0.getLength());
  }

  @Test
  public void test8()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement((-15));
      assertNotNull(sQLSelectStatement0);
      
      sQLSelectStatement0.setOrderByEnd((-15));
      assertEquals(1, sQLSelectStatement0.getLength());
  }

  @Test
  public void test9()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement((-34));
      assertNotNull(sQLSelectStatement0);
      
      sQLSelectStatement0.setFromStart((-34));
      SQLTable sQLTable0 = (SQLTable)sQLSelectStatement0.getCompletion((-34));
      assertEquals(-34, sQLTable0.getStart());
      assertEquals(1, sQLTable0.getLength());
      assertNotNull(sQLTable0);
      assertEquals(100034, sQLSelectStatement0.getLength());
  }

  @Test
  public void test10()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement((-15));
      assertNotNull(sQLSelectStatement0);
      
      sQLSelectStatement0.setHavingEnd((-15));
      assertEquals(1, sQLSelectStatement0.getLength());
  }

  @Test
  public void test11()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(113);
      assertNotNull(sQLSelectStatement0);
      
      sQLSelectStatement0.setSelectListEnd(113);
      sQLSelectStatement0.getCompletion(113);
      assertEquals(1, sQLSelectStatement0.getLength());
  }

  @Test
  public void test12()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement((-246));
      // Undeclared exception!
      try {
        sQLSelectStatement0.getTables(".{", ".{", ".{");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(113);
      // Undeclared exception!
      try {
        sQLSelectStatement0.getTableForAlias("TPy#Y|rp$aF';");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test14()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement((-34));
      SQLTable sQLTable0 = (SQLTable)sQLSelectStatement0.getCompletion((-34));
      assertNull(sQLTable0);
  }

  @Test
  public void test15()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(11);
      SQLSelectStatement sQLSelectStatement1 = new SQLSelectStatement((-1647));
      SQLColumn sQLColumn0 = new SQLColumn((SQLStatementContext) sQLSelectStatement0, (-1647), 11);
      sQLSelectStatement1.addColumn(sQLColumn0);
      SQLColumn sQLColumn1 = (SQLColumn)sQLSelectStatement1.getCompletion((-1647));
      assertSame(sQLColumn1, sQLColumn0);
  }

  @Test
  public void test16()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(113);
      SQLColumn sQLColumn0 = (SQLColumn)sQLSelectStatement0.getCompletion(113);
      assertNull(sQLColumn0);
  }
}
