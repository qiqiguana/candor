/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.awt.RenderingHints;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Vector;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import net.sourceforge.squirrel_sql.fw.datasetviewer.ColumnDisplayDefinition;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.DataTypeFloat;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.RestorableJTextArea;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.RestorableJTextField;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.whereClause.EmptyWhereClausePart;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.whereClause.IsNullWhereClausePart;
import net.sourceforge.squirrel_sql.fw.dialects.DialectType;
import net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DataTypeFloatEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Object[][] objectArray0 = new Object[9][9];
      Object object0 = RenderingHints.VALUE_TEXT_ANTIALIAS_DEFAULT;
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = object0;
      objectArray0[8] = objectArray1;
      JTable jTable0 = new JTable(objectArray0, objectArray0[8]);
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, ".=eC%$");
      DataTypeFloat dataTypeFloat0 = new DataTypeFloat(jTable0, columnDisplayDefinition0);
      assertNotNull(dataTypeFloat0);
      
      StringBuffer stringBuffer0 = new StringBuffer(0);
      dataTypeFloat0.validateAndConvertInPopup(".=eC%$", (Object) (-1L), stringBuffer0);
      assertEquals("java.text.ParseException: Unparseable number: \".=eC%$\"\n", stringBuffer0.toString());
      assertEquals(55, stringBuffer0.length());
  }

  @Test
  public void test1()  throws Throwable  {
      DialectType dialectType0 = DialectType.SYBASEASE;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-1005), "\u0003EyYTw", "\u0003EyYTw", "\u0003EyYTw", (-1005), "\u0003EyYTw", false, (-1005), (-1005), (-1005), false, false, false, dialectType0);
      DataTypeFloat dataTypeFloat0 = new DataTypeFloat((JTable) null, columnDisplayDefinition0);
      assertNotNull(dataTypeFloat0);
      
      boolean boolean0 = dataTypeFloat0.isEditableInPopup((Object) "SwingSelectedKey");
      assertEquals(true, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(1, 1);
      Vector<Object> vector0 = defaultTableModel0.getDataVector();
      JTable jTable0 = new JTable(vector0, vector0);
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(1, "");
      DataTypeFloat dataTypeFloat0 = new DataTypeFloat(jTable0, columnDisplayDefinition0);
      assertNotNull(dataTypeFloat0);
      
      boolean boolean0 = dataTypeFloat0.needToReRead((Object) "ToolTipText");
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(17, 17);
      Vector<Object> vector0 = defaultTableModel0.getDataVector();
      JTable jTable0 = new JTable(vector0, vector0);
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(17, "org.jfree.data.time.Second");
      DataTypeFloat dataTypeFloat0 = new DataTypeFloat(jTable0, columnDisplayDefinition0);
      RestorableJTextField restorableJTextField0 = (RestorableJTextField)dataTypeFloat0.getJTextField();
      assertEquals(0, restorableJTextField0.getX());
  }

  @Test
  public void test4()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(17, 17);
      Vector<Object> vector0 = defaultTableModel0.getDataVector();
      JTable jTable0 = new JTable(vector0, vector0);
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(17, "org.jfree.data.time.Second");
      DataTypeFloat dataTypeFloat0 = new DataTypeFloat(jTable0, columnDisplayDefinition0);
      assertNotNull(dataTypeFloat0);
      
      boolean boolean0 = dataTypeFloat0.isEditableInCell((Object) "GBP");
      assertEquals(true, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      DialectType dialectType0 = DialectType.SYBASEASE;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-1005), "\u0003EyYTw", "\u0003EyYTw", "\u0003EyYTw", (-1005), "\u0003EyYTw", false, (-1005), (-1005), (-1005), false, false, false, dialectType0);
      DataTypeFloat dataTypeFloat0 = new DataTypeFloat((JTable) null, columnDisplayDefinition0);
      assertNotNull(dataTypeFloat0);
      
      boolean boolean0 = dataTypeFloat0.useBinaryEditingPanel();
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      DialectType dialectType0 = DialectType.SYBASEASE;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-1005), "\u0003EyYTw", "\u0003EyYTw", "\u0003EyYTw", (-1005), "\u0003EyYTw", false, (-1005), (-1005), (-1005), false, false, false, dialectType0);
      DataTypeFloat dataTypeFloat0 = new DataTypeFloat((JTable) null, columnDisplayDefinition0);
      assertNotNull(dataTypeFloat0);
      
      boolean boolean0 = dataTypeFloat0.canDoFileIO();
      assertEquals(true, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      JTable jTable0 = new JTable();
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-655), "");
      DataTypeFloat dataTypeFloat0 = new DataTypeFloat(jTable0, columnDisplayDefinition0);
      assertNotNull(dataTypeFloat0);
      
      String string0 = dataTypeFloat0.getClassName();
      assertEquals("java.lang.Float", string0);
  }

  @Test
  public void test8()  throws Throwable  {
      Vector<DataTypeFloat> vector0 = new Vector<DataTypeFloat>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel((Vector) vector0, 1498);
      JTable jTable0 = new JTable((TableModel) defaultTableModel0);
      DialectType dialectType0 = DialectType.MYSQL5;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(1498, "First", "First", "First", 1498, "First", true, 1498, 1498, 1498, true, true, true, dialectType0);
      DataTypeFloat dataTypeFloat0 = new DataTypeFloat(jTable0, columnDisplayDefinition0);
      String string0 = dataTypeFloat0.renderObject((Object) null);
      assertEquals("<null>", string0);
  }

  @Test
  public void test9()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = RenderingHints.VALUE_ANTIALIAS_DEFAULT;
      objectArray0[1] = object0;
      JTable jTable0 = new JTable((Vector) null, (Vector) null);
      DialectType dialectType0 = DialectType.MYSQL5;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, "", "", "", 0, "", true, 0, 0, 0, true, true, true, dialectType0);
      DataTypeFloat dataTypeFloat0 = new DataTypeFloat(jTable0, columnDisplayDefinition0);
      assertNotNull(dataTypeFloat0);
      
      RestorableJTextArea restorableJTextArea0 = (RestorableJTextArea)dataTypeFloat0.getJTextArea(object0);
      assertNotNull(restorableJTextArea0);
      
      RestorableJTextArea restorableJTextArea1 = (RestorableJTextArea)dataTypeFloat0.getJTextArea(objectArray0[1]);
      assertEquals("Default antialiasing rendering mode", restorableJTextArea1.getText());
  }

  @Test
  public void test10()  throws Throwable  {
      Vector<DataTypeFloat> vector0 = new Vector<DataTypeFloat>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel((Vector) vector0, 1498);
      JTable jTable0 = new JTable((TableModel) defaultTableModel0);
      DialectType dialectType0 = DialectType.MYSQL5;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(1498, "First", "First", "First", 1498, "First", true, 1498, 1498, 1498, true, true, true, dialectType0);
      DataTypeFloat dataTypeFloat0 = new DataTypeFloat(jTable0, columnDisplayDefinition0);
      Object object0 = dataTypeFloat0.getDefaultValue("<null>");
      assertNull(object0);
  }

  @Test
  public void test11()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, "");
      DataTypeFloat dataTypeFloat0 = new DataTypeFloat((JTable) null, columnDisplayDefinition0);
      Object object0 = dataTypeFloat0.getDefaultValue("");
      assertNull(object0);
  }

  @Test
  public void test12()  throws Throwable  {
      JTable jTable0 = new JTable();
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, "Finalizing appender named [");
      DataTypeFloat dataTypeFloat0 = new DataTypeFloat(jTable0, columnDisplayDefinition0);
      IsNullWhereClausePart isNullWhereClausePart0 = (IsNullWhereClausePart)dataTypeFloat0.getWhereClauseValue((Object) null, (ISQLDatabaseMetaData) null);
      assertEquals(false, isNullWhereClausePart0.isParameterUsed());
  }

  @Test
  public void test13()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, "");
      DataTypeFloat dataTypeFloat0 = new DataTypeFloat((JTable) null, columnDisplayDefinition0);
      EmptyWhereClausePart emptyWhereClausePart0 = (EmptyWhereClausePart)dataTypeFloat0.getWhereClauseValue((Object) "SmallIcon", (ISQLDatabaseMetaData) null);
      assertEquals(false, emptyWhereClausePart0.shouldBeUsed());
  }

  @Test
  public void test14()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, "");
      DataTypeFloat dataTypeFloat0 = new DataTypeFloat((JTable) null, columnDisplayDefinition0);
      // Undeclared exception!
      try {
        dataTypeFloat0.getWhereClauseValue((Object) "", (ISQLDatabaseMetaData) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * columnDef contains not an usable columnName
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(17, 17);
      Vector<Object> vector0 = defaultTableModel0.getDataVector();
      JTable jTable0 = new JTable(vector0, vector0);
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(17, "org.jfree.data.time.Second");
      DataTypeFloat dataTypeFloat0 = new DataTypeFloat(jTable0, columnDisplayDefinition0);
      // Undeclared exception!
      try {
        dataTypeFloat0.setPreparedStatementValue((PreparedStatement) null, (Object) "GBP", 17);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * java.lang.String cannot be cast to java.lang.Float
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(1, 1);
      Vector<Object> vector0 = defaultTableModel0.getDataVector();
      JTable jTable0 = new JTable(vector0, vector0);
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(1, "");
      DataTypeFloat dataTypeFloat0 = new DataTypeFloat(jTable0, columnDisplayDefinition0);
      // Undeclared exception!
      try {
        dataTypeFloat0.setPreparedStatementValue((PreparedStatement) null, (Object) null, 1);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test17()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-6), (String) null);
      DataTypeFloat dataTypeFloat0 = new DataTypeFloat((JTable) null, columnDisplayDefinition0);
      Float float0 = (Float)dataTypeFloat0.getDefaultValue((String) null);
      assertNull(float0);
  }

  @Test
  public void test18()  throws Throwable  {
      DialectType dialectType0 = DialectType.SYBASEASE;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-1005), "\u0003EyYTw", "\u0003EyYTw", "\u0003EyYTw", (-1005), "\u0003EyYTw", false, (-1005), (-1005), (-1005), false, false, false, dialectType0);
      DataTypeFloat dataTypeFloat0 = new DataTypeFloat((JTable) null, columnDisplayDefinition0);
      assertNotNull(dataTypeFloat0);
      
      Float float0 = (Float)dataTypeFloat0.getDefaultValue("\u0003EyYTw");
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test
  public void test19()  throws Throwable  {
      Object[][] objectArray0 = new Object[19][8];
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) "uninitializedValue";
      objectArray1[1] = (Object) "uninitializedValue";
      objectArray1[2] = (Object) "uninitializedValue";
      objectArray0[2] = objectArray1;
      objectArray0[3] = objectArray0[2];
      JTable jTable0 = new JTable(objectArray0, objectArray0[3]);
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(1117, "\u0007~mS");
      DataTypeFloat dataTypeFloat0 = new DataTypeFloat(jTable0, columnDisplayDefinition0);
      FileDescriptor fileDescriptor0 = FileDescriptor.err;
      FileInputStream fileInputStream0 = new FileInputStream(fileDescriptor0);
      // Undeclared exception!
      try {
        dataTypeFloat0.importObject(fileInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * -1
         */
      }
  }
}
