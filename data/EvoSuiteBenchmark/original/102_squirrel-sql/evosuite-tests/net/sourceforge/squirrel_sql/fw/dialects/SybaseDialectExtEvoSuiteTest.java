/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.dialects;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Collection;
import java.util.List;
import net.sourceforge.squirrel_sql.fw.dialects.DatabaseObjectQualifier;
import net.sourceforge.squirrel_sql.fw.dialects.DialectType;
import net.sourceforge.squirrel_sql.fw.dialects.SqlGenerationPreferences;
import net.sourceforge.squirrel_sql.fw.dialects.SybaseDialectExt;
import net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.IDatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.TableColumnInfo;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SybaseDialectExtEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        sybaseDialectExt0.getSequenceInformationSQL(" NULL", databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Sybase doesn't support gathering sequence information.
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      boolean boolean0 = sybaseDialectExt0.supportsRenameColumn();
      assertEquals(true, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      boolean boolean0 = sybaseDialectExt0.supportsCreateView();
      assertEquals(true, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      boolean boolean0 = sybaseDialectExt0.supportsAddColumn();
      assertEquals(true, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = sybaseDialectExt0.getViewDefinitionSQL("gn0Wbpg|**PnOw?", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("select text from sysobjects inner join syscomments on syscomments.id = sysobjects.id where (loginame = '' or loginame is null) and name = 'gn0Wbpg|**PnOw?' and text not like '%--%'", string0);
      assertNotNull(string0);
  }

  @Test
  public void test5()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      boolean boolean0 = sybaseDialectExt0.supportsInsertInto();
      assertEquals(true, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      boolean boolean0 = sybaseDialectExt0.supportsAlterColumnType();
      assertEquals(true, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      String[] stringArray0 = sybaseDialectExt0.getIndexStorageOptions();
      assertNotNull(stringArray0);
  }

  @Test
  public void test8()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("Methods cannot be invoked on a closed connection", "Methods cannot be invoked on a closed connection", "Methods cannot be invoked on a closed connection", "Methods cannot be invoked on a closed connection", 1, "Methods cannot be invoked on a closed connection", 17, 1, (-947), (-947), "Methods cannot be invoked on a closed connection", "Methods cannot be invoked on a closed connection", (-947), 108, "Methods cannot be invoked on a closed connection");
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("Methods cannot be invoked on a closed connection", "y7U5a.Ftjhh5bkn$");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String[] stringArray0 = sybaseDialectExt0.getAddColumnSQL(tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test9()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo(",-@|o5vIcUj+Sx", ",-@|o5vIcUj+Sx", "Zg&cC=XtA%zO", "Zg&cC=XtA%zO", 1913, "Zg&cC=XtA%zO", 1913, (-1704), 0, (-1345), ",-@|o5vIcUj+Sx", "Zg&cC=XtA%zO", 1913, 1, ",-@|o5vIcUj+Sx");
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      try {
        sybaseDialectExt0.getColumnCommentAlterSQL(tableColumnInfo0, databaseObjectQualifier0, (SqlGenerationPreferences) null);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Sybase doesn't support column comments
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("", "");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        sybaseDialectExt0.getAlterSequenceSQL((String) null, (String) null, "j%&gl >nX", (String) null, (String) null, "j%&gl >nX", true, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Sybase doesn't support altering sequences.
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      boolean boolean0 = sybaseDialectExt0.supportsAutoIncrement();
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("datalength", "datalength");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = sybaseDialectExt0.getDropPrimaryKeySQL("datalength", "datalength", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("ALTER TABLE datalength DROP CONSTRAINT \"datalength\"", string0);
      assertNotNull(string0);
  }

  @Test
  public void test13()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      boolean boolean0 = sybaseDialectExt0.supportsAccessMethods();
      assertEquals(true, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      String string0 = sybaseDialectExt0.getLengthFunction(1);
      assertEquals("datalength", string0);
  }

  @Test
  public void test15()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("`|k=#3-)tT])~K5>'r", "ALTER TABLE null\n DROP CONSTRAINT \"null\"");
      String string0 = sybaseDialectExt0.getDropViewSQL("`|k=#3-)tT])~K5>'r", true, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("DROP VIEW `|k=#3-)tT])~K5>'r", string0);
  }

  @Test
  public void test16()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      boolean boolean0 = sybaseDialectExt0.supportsDropIndex();
      assertEquals(true, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      boolean boolean0 = sybaseDialectExt0.supportsEmptyTables();
      assertEquals(false, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier(")o:aQEpQN<8U<xm:", ")o:aQEpQN<8U<xm:");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("", "", "", "", 0, "", 0, 0, 0, 0, "", ">H3nl9!cS/}S|lR", 0, 0, ">H3nl9!cS/}S|lR");
      String string0 = sybaseDialectExt0.getColumnNameAlterSQL(tableColumnInfo0, tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("exec sp_rename '.', ", string0);
      assertNotNull(string0);
  }

  @Test
  public void test19()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = sybaseDialectExt0.getColumnDropSQL("DefaultIntervalCategoryDataset: the number of categories in the start value dataset does not match the number of categories in the end value dataset.", "DefaultIntervalCategoryDataset: the number of categories in the start value dataset does not match the number of categories in the end value dataset.", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("ALTER TABLE DefaultIntervalCategoryDataset: the number of categories in the start value dataset does not match the number of categories in the end value dataset. DROP \"DefaultIntervalCategoryDataset: the number of categories in the start value dataset does not match the number of categories in the end value dataset.\"", string0);
  }

  @Test
  public void test20()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      boolean boolean0 = sybaseDialectExt0.supportsTablespace();
      assertEquals(false, boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      boolean boolean0 = sybaseDialectExt0.supportsDropColumn();
      assertEquals(true, boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      boolean boolean0 = sybaseDialectExt0.supportsSequenceInformation();
      assertEquals(false, boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      String[] stringArray0 = sybaseDialectExt0.getIndexAccessMethodsTypes();
      assertNotNull(stringArray0);
  }

  @Test
  public void test24()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      boolean boolean0 = sybaseDialectExt0.supportsAddForeignKeyConstraint();
      assertEquals(true, boolean0);
  }

  @Test
  public void test25()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      boolean boolean0 = sybaseDialectExt0.supportsAddUniqueConstraint();
      assertEquals(true, boolean0);
  }

  @Test
  public void test26()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      boolean boolean0 = sybaseDialectExt0.supportsViewDefinition();
      assertEquals(true, boolean0);
  }

  @Test
  public void test27()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      boolean boolean0 = sybaseDialectExt0.supportsAlterColumnDefault();
      assertEquals(false, boolean0);
  }

  @Test
  public void test28()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      boolean boolean0 = sybaseDialectExt0.supportsCheckOptionsForViews();
      assertEquals(true, boolean0);
  }

  @Test
  public void test29()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      boolean boolean0 = sybaseDialectExt0.supportsIndexes();
      assertEquals(true, boolean0);
  }

  @Test
  public void test30()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("adaptiveincrementb", "adaptiveincrementb");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        sybaseDialectExt0.getAddAutoIncrementSQL((TableColumnInfo) null, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Sybase doesn't support adding auto increment constraints.
         */
      }
  }

  @Test
  public void test31()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      boolean boolean0 = sybaseDialectExt0.supportsCreateSequence();
      assertEquals(false, boolean0);
  }

  @Test
  public void test32()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo(")')!z}s\"kMw", ")')!z}s\"kMw", ")')!z}s\"kMw", ")')!z}s\"kMw", (-1989), ")')!z}s\"kMw", (-1156), (-1205), (-1989), 1, ")')!z}s\"kMw", ")')!z}s\"kMw", (-1989), (-1156), ")')!z}s\"kMw");
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier(")')!z}s\"kMw", ")')!z}s\"kMw");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        sybaseDialectExt0.getColumnDefaultAlterSQL(tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Sybase doesn't support altering a column's default value
         */
      }
  }

  @Test
  public void test33()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      boolean boolean0 = sybaseDialectExt0.supportsAlterColumnNull();
      assertEquals(true, boolean0);
  }

  @Test
  public void test34()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      boolean boolean0 = sybaseDialectExt0.supportsDropConstraint();
      assertEquals(true, boolean0);
  }

  @Test
  public void test35()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      boolean boolean0 = sybaseDialectExt0.supportsCreateIndex();
      assertEquals(true, boolean0);
  }

  @Test
  public void test36()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      boolean boolean0 = sybaseDialectExt0.supportsRenameTable();
      assertEquals(true, boolean0);
  }

  @Test
  public void test37()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      // Undeclared exception!
      try {
        sybaseDialectExt0.getCreateTableSQL("", (List<TableColumnInfo>) null, (List<TableColumnInfo>) null, (SqlGenerationPreferences) null, databaseObjectQualifier0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test38()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[1];
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      // Undeclared exception!
      try {
        sybaseDialectExt0.getAddUniqueConstraintSQL(" ^+FsE", "4<j);$9(", tableColumnInfoArray0, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test39()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      boolean boolean0 = sybaseDialectExt0.supportsRenameView();
      assertEquals(true, boolean0);
  }

  @Test
  public void test40()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = sybaseDialectExt0.getRenameTableSQL((String) null, (String) null, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("sp_rename , ", string0);
  }

  @Test
  public void test41()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      boolean boolean0 = sybaseDialectExt0.supportsMultipleRowInserts();
      assertEquals(true, boolean0);
  }

  @Test
  public void test42()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      boolean boolean0 = sybaseDialectExt0.supportsCorrelatedSubQuery();
      assertEquals(true, boolean0);
  }

  @Test
  public void test43()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("Methods cannot be invoked on a closed connection", "y7U5a.Ftjhh5bkn$");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        sybaseDialectExt0.getDropSequenceSQL("Methods cannot be invoked on a closed connection", true, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Sybase doesn't support dropping sequences.
         */
      }
  }

  @Test
  public void test44()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      boolean boolean0 = sybaseDialectExt0.supportsSequence();
      assertEquals(false, boolean0);
  }

  @Test
  public void test45()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = sybaseDialectExt0.getDropIndexSQL((String) null, (String) null, true, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("DROP INDEX .", string0);
  }

  @Test
  public void test46()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      boolean boolean0 = sybaseDialectExt0.supportsDropSequence();
      assertEquals(false, boolean0);
  }

  @Test
  public void test47()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      boolean boolean0 = sybaseDialectExt0.supportsAlterSequence();
      assertEquals(false, boolean0);
  }

  @Test
  public void test48()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("sql serverv|>{c", "sql serverv|>{c");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        sybaseDialectExt0.getCreateSequenceSQL("sql serverv|>{c", "sql serverv|>{c", "sql serverv|>{c", "sql serverv|>{c", "sql serverv|>{c", "sql serverv|>{c", true, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Sybase doesn't support creating sequences.
         */
      }
  }

  @Test
  public void test49()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      byte[] byteArray0 = new byte[4];
      String string0 = sybaseDialectExt0.getBinaryLiteralString(byteArray0);
      assertEquals("0x00000000", string0);
      assertNotNull(string0);
  }

  @Test
  public void test50()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = sybaseDialectExt0.getDropForeignKeySQL("", "", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("ALTER TABLE  DROP CONSTRAINT \"\"", string0);
  }

  @Test
  public void test51()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier((String) null, (String) null);
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String[] stringArray0 = sybaseDialectExt0.getRenameViewSQL((String) null, (String) null, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test52()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      boolean boolean0 = sybaseDialectExt0.supportsDropView();
      assertEquals(true, boolean0);
  }

  @Test
  public void test53()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      DialectType dialectType0 = sybaseDialectExt0.getDialectType();
      assertEquals("SYBASEASE", dialectType0.name());
  }

  @Test
  public void test54()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = sybaseDialectExt0.getDropConstraintSQL((String) null, (String) null, (DatabaseObjectQualifier) null, sqlGenerationPreferences0);
      assertEquals("ALTER TABLE null\n DROP CONSTRAINT \"null\"", string0);
  }

  @Test
  public void test55()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      boolean boolean0 = sybaseDialectExt0.supportsColumnComment();
      assertEquals(false, boolean0);
  }

  @Test
  public void test56()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      // Undeclared exception!
      try {
        sybaseDialectExt0.getAddForeignKeyConstraintSQL("a/w", "a/w", "a/w", (Boolean) false, (Boolean) false, (Boolean) false, true, "a/w", (Collection<String[]>) null, "a/w", "a/w", databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test57()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      String string0 = sybaseDialectExt0.getNullColumnString();
      assertEquals(" NULL", string0);
  }

  @Test
  public void test58()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      boolean boolean0 = sybaseDialectExt0.supportsUpdate();
      assertEquals(true, boolean0);
  }

  @Test
  public void test59()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("Vy\"", "%a{ Ob#", "", "%a{ Ob#", 0, (String) null, 0, 0, 0, 0, (String) null, "%a{ Ob#", (-853), (-1), "Vy\"");
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String[] stringArray0 = sybaseDialectExt0.getColumnNullableAlterSQL(tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test60()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      boolean boolean0 = sybaseDialectExt0.supportsCreateTable();
      assertEquals(true, boolean0);
  }

  @Test
  public void test61()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("sql serverv|>{c", "sql serverv|>{c", "sql serverv|>{c", "sql serverv|>{c", (-1), "sql serverv|>{c", (-1), (-1), (-1), 34, "sql serverv|>{c", "sql serverv|>{c", (-1), (-1), "sql serverv|>{c");
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("sql serverv|>{c", "sql serverv|>{c");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      List<String> list0 = sybaseDialectExt0.getColumnTypeAlterSQL(tableColumnInfo0, tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals(false, list0.isEmpty());
  }

  @Test
  public void test62()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("ALTER TABLE datalength DROP CONSTRAINT \"datalength\"", "ALTER TABLE datalength DROP CONSTRAINT \"datalength\"", "ALTER TABLE datalength DROP CONSTRAINT \"datalength\"");
      boolean boolean0 = sybaseDialectExt0.canPasteTo((IDatabaseObjectInfo) databaseObjectInfo0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test63()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      int int0 = sybaseDialectExt0.getMaxScale(8);
      assertEquals(48, int0);
  }

  @Test
  public void test64()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      int int0 = sybaseDialectExt0.getMaxScale(4);
      assertEquals(38, int0);
  }

  @Test
  public void test65()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      boolean boolean0 = sybaseDialectExt0.supportsProduct("datalength", "datalength");
      assertEquals(false, boolean0);
  }

  @Test
  public void test66()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      boolean boolean0 = sybaseDialectExt0.supportsProduct((String) null, (String) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test67()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      boolean boolean0 = sybaseDialectExt0.supportsProduct("adaptiveincrementb", "adaptiveincrementb");
      assertEquals(true, boolean0);
  }

  @Test
  public void test68()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      boolean boolean0 = sybaseDialectExt0.supportsProduct("sql serverv|>{c", "sql serverv|>{c");
      assertEquals(true, boolean0);
  }

  @Test
  public void test69()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      String[] stringArray0 = new String[4];
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("", "");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = sybaseDialectExt0.getCreateIndexSQL("", "", "", stringArray0, false, (String) null, "", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("CREATE   INDEX  ON  (  )", string0);
  }

  @Test
  public void test70()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      String[] stringArray0 = new String[4];
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("DefaultIntervalCategoryDataset: the number of categories in the start value dataset does not match the number of categories in the end value dataset.", "DefaultIntervalCategoryDataset: the number of categories in the start value dataset does not match the number of categories in the end value dataset.");
      // Undeclared exception!
      try {
        sybaseDialectExt0.getCreateIndexSQL("DefaultIntervalCategoryDataset: the number of categories in the start value dataset does not match the number of categories in the end value dataset.", "DefaultIntervalCategoryDataset: the number of categories in the start value dataset does not match the number of categories in the end value dataset.", "DefaultIntervalCategoryDataset: the number of categories in the start value dataset does not match the number of categories in the end value dataset.", stringArray0, true, "DefaultIntervalCategoryDataset: the number of categories in the start value dataset does not match the number of categories in the end value dataset.", (String) null, databaseObjectQualifier0, (SqlGenerationPreferences) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test71()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = sybaseDialectExt0.getCreateViewSQL((String) null, (String) null, (String) null, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("CREATE VIEW  AS    ", string0);
      assertNotNull(string0);
  }

  @Test
  public void test72()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier(")o:aQEpQN<8U<xm:", ")o:aQEpQN<8U<xm:");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = sybaseDialectExt0.getCreateViewSQL("", "", "", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertNotNull(string0);
      assertEquals("CREATE VIEW  AS    ", string0);
  }

  @Test
  public void test73()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = sybaseDialectExt0.getCreateViewSQL("rtrim", "rtrim", "rtrim", (DatabaseObjectQualifier) null, sqlGenerationPreferences0);
      assertEquals("CREATE VIEW rtrim AS rtrim WITH  CHECK OPTION", string0);
      assertNotNull(string0);
  }

  @Test
  public void test74()  throws Throwable  {
      SybaseDialectExt sybaseDialectExt0 = new SybaseDialectExt();
      String[] stringArray0 = new String[8];
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("java.math.BigInteger", (String) null);
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String[] stringArray1 = sybaseDialectExt0.getUpdateSQL((String) null, stringArray0, stringArray0, stringArray0, stringArray0, stringArray0, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertNotSame(stringArray0, stringArray1);
  }
}
