/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.gui;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.awt.RenderingHints;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import net.sourceforge.squirrel_sql.fw.gui.SortableTableModel;
import net.sourceforge.squirrel_sql.fw.gui.SortingListener;
import org.jfree.data.xy.XYDatasetTableModel;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SortableTableModelEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      SortableTableModel sortableTableModel0 = new SortableTableModel((TableModel) defaultTableModel0);
      defaultTableModel0.setRowCount(1894);
      assertEquals(0, defaultTableModel0.getColumnCount());
  }

  @Test
  public void test1()  throws Throwable  {
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      SortableTableModel sortableTableModel0 = new SortableTableModel((TableModel) xYDatasetTableModel0);
      assertNotNull(sortableTableModel0);
      
      sortableTableModel0.removeSortingListener((SortingListener) null);
      assertEquals(-1, sortableTableModel0.getSortedColumn());
  }

  @Test
  public void test2()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      SortableTableModel sortableTableModel0 = new SortableTableModel((TableModel) defaultTableModel0);
      assertNotNull(sortableTableModel0);
      
      String string0 = sortableTableModel0.getColumnName((-138));
      assertEquals("", string0);
      assertEquals(-1, sortableTableModel0.getSortedColumn());
      assertNotNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      SortableTableModel sortableTableModel0 = new SortableTableModel((TableModel) defaultTableModel0);
      assertNotNull(sortableTableModel0);
      
      boolean boolean0 = sortableTableModel0.sortByColumn((-1));
      assertEquals(true, sortableTableModel0.isSortedAscending());
      assertEquals(true, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      SortableTableModel sortableTableModel0 = new SortableTableModel((TableModel) xYDatasetTableModel0);
      assertNotNull(sortableTableModel0);
      
      sortableTableModel0.addSortingListener((SortingListener) null);
      // Undeclared exception!
      try {
        sortableTableModel0.sortByColumn((-505));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      SortableTableModel sortableTableModel0 = new SortableTableModel((TableModel) xYDatasetTableModel0);
      assertNotNull(sortableTableModel0);
      
      sortableTableModel0.isCellEditable((-505), (-505));
      assertEquals(-1, sortableTableModel0.getSortedColumn());
  }

  @Test
  public void test6()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      SortableTableModel sortableTableModel0 = new SortableTableModel((TableModel) defaultTableModel0);
      assertNotNull(sortableTableModel0);
      
      // Undeclared exception!
      try {
        sortableTableModel0.setValueAt((Object) "qt[Aa6Ub*Up", (-1), 1894);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * -1
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      SortableTableModel sortableTableModel0 = new SortableTableModel((TableModel) xYDatasetTableModel0);
      assertNotNull(sortableTableModel0);
      
      Class<?> class0 = sortableTableModel0.getColumnClass(0);
      assertEquals(-1, sortableTableModel0.getSortedColumn());
      assertNotNull(class0);
  }

  @Test
  public void test8()  throws Throwable  {
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      SortableTableModel sortableTableModel0 = new SortableTableModel((TableModel) xYDatasetTableModel0);
      assertNotNull(sortableTableModel0);
      
      XYDatasetTableModel xYDatasetTableModel1 = (XYDatasetTableModel)sortableTableModel0.getActualModel();
      assertNotNull(xYDatasetTableModel1);
      assertEquals(-1, sortableTableModel0.getSortedColumn());
  }

  @Test
  public void test9()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      SortableTableModel sortableTableModel0 = new SortableTableModel((TableModel) defaultTableModel0);
      assertNotNull(sortableTableModel0);
      
      int int0 = sortableTableModel0.getSortedColumn();
      assertEquals((-1), int0);
  }

  @Test
  public void test10()  throws Throwable  {
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      SortableTableModel sortableTableModel0 = new SortableTableModel((TableModel) xYDatasetTableModel0);
      assertNotNull(sortableTableModel0);
      
      sortableTableModel0.isSortedAscending();
      assertEquals(-1, sortableTableModel0.getSortedColumn());
  }

  @Test
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, 0);
      SortableTableModel sortableTableModel0 = new SortableTableModel((TableModel) defaultTableModel0);
      assertNotNull(sortableTableModel0);
      
      // Undeclared exception!
      try {
        sortableTableModel0.insertRow(objectArray0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * javax.swing.table.DefaultTableModel cannot be cast to net.sourceforge.squirrel_sql.fw.datasetviewer.MyTableModel
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      SortableTableModel sortableTableModel0 = new SortableTableModel((TableModel) xYDatasetTableModel0);
      assertNotNull(sortableTableModel0);
      
      sortableTableModel0.setActualModel((TableModel) xYDatasetTableModel0);
      assertEquals(-1, sortableTableModel0.getSortedColumn());
  }

  @Test
  public void test13()  throws Throwable  {
      SortableTableModel sortableTableModel0 = new SortableTableModel((TableModel) null);
      assertNotNull(sortableTableModel0);
      
      JTable jTable0 = new JTable((TableModel) sortableTableModel0);
      assertNotNull(jTable0);
      assertEquals(-1, sortableTableModel0.getSortedColumn());
      assertEquals(0, jTable0.getRowCount());
  }

  @Test
  public void test14()  throws Throwable  {
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      SortableTableModel sortableTableModel0 = new SortableTableModel((TableModel) xYDatasetTableModel0);
      assertNotNull(sortableTableModel0);
      
      sortableTableModel0.getColumnCount();
      assertEquals(-1, sortableTableModel0.getSortedColumn());
  }

  @Test
  public void test15()  throws Throwable  {
      Object[][] objectArray0 = new Object[8][8];
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray0[3]);
      SortableTableModel sortableTableModel0 = new SortableTableModel((TableModel) defaultTableModel0);
      assertNotNull(sortableTableModel0);
      
      sortableTableModel0.getValueAt(0, 0);
      assertEquals(8, sortableTableModel0.getRowCount());
      assertEquals(-1, sortableTableModel0.getSortedColumn());
  }

  @Test
  public void test16()  throws Throwable  {
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      SortableTableModel sortableTableModel0 = new SortableTableModel((TableModel) xYDatasetTableModel0);
      assertNotNull(sortableTableModel0);
      
      sortableTableModel0.getValueAt(0, (-40));
      assertEquals(-1, sortableTableModel0.getSortedColumn());
  }

  @Test
  public void test17()  throws Throwable  {
      SortableTableModel sortableTableModel0 = new SortableTableModel((TableModel) null);
      assertNotNull(sortableTableModel0);
      
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try {
        sortableTableModel0.deleteRows(intArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test18()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      SortableTableModel sortableTableModel0 = new SortableTableModel((TableModel) defaultTableModel0);
      assertNotNull(sortableTableModel0);
      
      int[] intArray0 = new int[5];
      intArray0[2] = (-138);
      // Undeclared exception!
      try {
        sortableTableModel0.deleteRows(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * -138
         */
      }
  }

  @Test
  public void test19()  throws Throwable  {
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      SortableTableModel sortableTableModel0 = new SortableTableModel((TableModel) xYDatasetTableModel0);
      assertNotNull(sortableTableModel0);
      
      sortableTableModel0.sortByColumn(0, true);
      assertEquals(true, sortableTableModel0.isSortedAscending());
      
      boolean boolean0 = sortableTableModel0.sortByColumn(0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      SortableTableModel sortableTableModel0 = new SortableTableModel((TableModel) defaultTableModel0);
      assertNotNull(sortableTableModel0);
      
      sortableTableModel0.tableChanged();
      assertEquals(-1, sortableTableModel0.getSortedColumn());
  }

  @Test
  public void test21()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, 0);
      SortableTableModel sortableTableModel0 = new SortableTableModel((TableModel) defaultTableModel0);
      assertNotNull(sortableTableModel0);
      
      sortableTableModel0.sortByColumn(0, false);
      sortableTableModel0.tableChanged();
      assertEquals(0, sortableTableModel0.getSortedColumn());
      assertEquals(false, sortableTableModel0.isSortedAscending());
  }

  @Test
  public void test22()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      SortableTableModel sortableTableModel0 = new SortableTableModel((TableModel) defaultTableModel0);
      assertNotNull(sortableTableModel0);
      
      int int0 = sortableTableModel0.transfromToModelRow((-1));
      assertEquals((-1), int0);
      assertEquals(-1, sortableTableModel0.getSortedColumn());
  }

  @Test
  public void test23()  throws Throwable  {
      Object[][] objectArray0 = new Object[8][8];
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray0[3]);
      SortableTableModel sortableTableModel0 = new SortableTableModel((TableModel) defaultTableModel0);
      assertNotNull(sortableTableModel0);
      
      int int0 = sortableTableModel0.transfromToModelRow(0);
      assertEquals(-1, sortableTableModel0.getSortedColumn());
      assertEquals(0, int0);
  }

  @Test
  public void test24()  throws Throwable  {
      SortableTableModel sortableTableModel0 = new SortableTableModel((TableModel) null);
      assertNotNull(sortableTableModel0);
      
      int int0 = sortableTableModel0.transfromToModelRow(0);
      assertEquals(-1, sortableTableModel0.getSortedColumn());
      assertEquals((-1), int0);
  }

  @Test
  public void test25()  throws Throwable  {
      Object[][] objectArray0 = new Object[1][4];
      Object[] objectArray1 = new Object[15];
      objectArray1[0] = (Object) "uninitializedValue";
      objectArray0[0] = objectArray1;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray1);
      SortableTableModel sortableTableModel0 = new SortableTableModel((TableModel) defaultTableModel0);
      assertNotNull(sortableTableModel0);
      
      SortableTableModel.TableModelComparator sortableTableModel_TableModelComparator0 = sortableTableModel0.new TableModelComparator(0);
      assertNotNull(sortableTableModel_TableModelComparator0);
      
      int int0 = sortableTableModel_TableModelComparator0.compare((Integer) 0, (Integer) 0);
      assertEquals(0, int0);
      assertEquals(1, sortableTableModel0.getRowCount());
      assertEquals(-1, sortableTableModel0.getSortedColumn());
  }

  @Test
  public void test26()  throws Throwable  {
      Object[][] objectArray0 = new Object[8][8];
      Object[] objectArray1 = new Object[2];
      Object object0 = RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR;
      objectArray1[0] = object0;
      objectArray0[0] = objectArray1;
      objectArray0[2] = objectArray0[0];
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray0[3]);
      SortableTableModel sortableTableModel0 = new SortableTableModel((TableModel) defaultTableModel0);
      assertNotNull(sortableTableModel0);
      
      sortableTableModel0.sortByColumn(0);
      assertEquals(true, sortableTableModel0.isSortedAscending());
      assertEquals(8, sortableTableModel0.getRowCount());
  }
}
