/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.awt.event.KeyListener;
import javax.swing.JTable;
import javax.swing.table.TableModel;
import net.sourceforge.squirrel_sql.fw.datasetviewer.ColumnDisplayDefinition;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.DataTypeBinary;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.DataTypeBoolean;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.DataTypeByte;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.DataTypeClob;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.DataTypeInteger;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.DataTypeString;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.IRestorableTextComponent;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.IToolkitBeepHelper;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.RestorableJTextArea;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.ToolkitBeepHelper;
import net.sourceforge.squirrel_sql.fw.dialects.DialectType;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BaseDataTypeComponentEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DialectType dialectType0 = DialectType.SYBASEASE;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-31), "C&Pued[>|L.", "C&Pued[>|L.", "C&Pued[>|L.", (-31), "C&Pued[>|L.", false, (-31), (-31), (-31), false, false, false, dialectType0);
      JTable jTable0 = new JTable((TableModel) null);
      DataTypeBinary dataTypeBinary0 = new DataTypeBinary(jTable0, columnDisplayDefinition0);
      dataTypeBinary0.setTable(jTable0);
      assertNull(jTable0.getName());
  }

  @Test
  public void test1()  throws Throwable  {
      JTable jTable0 = new JTable();
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(1409, "");
      DataTypeInteger dataTypeInteger0 = new DataTypeInteger(jTable0, columnDisplayDefinition0);
      dataTypeInteger0.setColumnDisplayDefinition(columnDisplayDefinition0);
      assertEquals("java.lang.Object", columnDisplayDefinition0.getClassName());
  }

  @Test
  public void test2()  throws Throwable  {
      JTable jTable0 = new JTable();
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, (String) null);
      DataTypeBoolean dataTypeBoolean0 = new DataTypeBoolean(jTable0, columnDisplayDefinition0);
      RestorableJTextArea restorableJTextArea0 = new RestorableJTextArea();
      KeyListener keyListener0 = dataTypeBoolean0.getKeyListener((IRestorableTextComponent) restorableJTextArea0);
      assertNull(keyListener0);
  }

  @Test
  public void test3()  throws Throwable  {
      JTable jTable0 = new JTable();
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(1409, "");
      DataTypeByte dataTypeByte0 = new DataTypeByte(jTable0, columnDisplayDefinition0);
      ToolkitBeepHelper toolkitBeepHelper0 = new ToolkitBeepHelper();
      dataTypeByte0.setBeepHelper((IToolkitBeepHelper) toolkitBeepHelper0);
      assertEquals(true, dataTypeByte0.canDoFileIO());
  }

  @Test
  public void test4()  throws Throwable  {
      DialectType dialectType0 = DialectType.SYBASEASE;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-31), "C&Pued[>|L.", "C&Pued[>|L.", "C&Pued[>|L.", (-31), "C&Pued[>|L.", false, (-31), (-31), (-31), false, false, false, dialectType0);
      DataTypeClob dataTypeClob0 = new DataTypeClob((JTable) null, columnDisplayDefinition0);
      boolean boolean0 = dataTypeClob0.areEqual((Object) null, (Object) null);
      assertEquals(true, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      DialectType dialectType0 = DialectType.SYBASEASE;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-31), "C&Pued[>|L.", "C&Pued[>|L.", "C&Pued[>|L.", (-31), "C&Pued[>|L.", false, (-31), (-31), (-31), false, false, false, dialectType0);
      DataTypeClob dataTypeClob0 = new DataTypeClob((JTable) null, columnDisplayDefinition0);
      JTable jTable0 = new JTable((TableModel) null);
      DataTypeInteger dataTypeInteger0 = new DataTypeInteger(jTable0, columnDisplayDefinition0);
      boolean boolean0 = dataTypeInteger0.areEqual((Object) "SYBASEASE", (Object) dataTypeClob0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      JTable jTable0 = new JTable();
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(1409, "");
      DataTypeString dataTypeString0 = new DataTypeString(jTable0, columnDisplayDefinition0);
      boolean boolean0 = dataTypeString0.areEqual((Object) null, (Object) "LOWER_RIGHT_CORNER");
      assertEquals(false, boolean0);
  }
}
