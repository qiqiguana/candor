/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.dialects;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Vector;
import net.sourceforge.squirrel_sql.fw.dialects.CommonHibernateDialect;
import net.sourceforge.squirrel_sql.fw.dialects.CreateScriptPreferences;
import net.sourceforge.squirrel_sql.fw.dialects.DB2DialectExt;
import net.sourceforge.squirrel_sql.fw.dialects.DaffodilDialectExt;
import net.sourceforge.squirrel_sql.fw.dialects.DatabaseObjectQualifier;
import net.sourceforge.squirrel_sql.fw.dialects.DialectUtils;
import net.sourceforge.squirrel_sql.fw.dialects.FirebirdDialectExt;
import net.sourceforge.squirrel_sql.fw.dialects.FrontBaseDialectExt;
import net.sourceforge.squirrel_sql.fw.dialects.GenericDialectExt;
import net.sourceforge.squirrel_sql.fw.dialects.GreenplumDialectExt;
import net.sourceforge.squirrel_sql.fw.dialects.H2DialectExt;
import net.sourceforge.squirrel_sql.fw.dialects.HADBDialectExt;
import net.sourceforge.squirrel_sql.fw.dialects.HibernateDialect;
import net.sourceforge.squirrel_sql.fw.dialects.InformixDialectExt;
import net.sourceforge.squirrel_sql.fw.dialects.IngresDialectExt;
import net.sourceforge.squirrel_sql.fw.dialects.IntersystemsCacheDialectExt;
import net.sourceforge.squirrel_sql.fw.dialects.MAXDBDialectExt;
import net.sourceforge.squirrel_sql.fw.dialects.MySQL5DialectExt;
import net.sourceforge.squirrel_sql.fw.dialects.NetezzaDialextExt;
import net.sourceforge.squirrel_sql.fw.dialects.OracleDialectExt;
import net.sourceforge.squirrel_sql.fw.dialects.PointbaseDialectExt;
import net.sourceforge.squirrel_sql.fw.dialects.ProgressDialectExt;
import net.sourceforge.squirrel_sql.fw.dialects.SQLServerDialectExt;
import net.sourceforge.squirrel_sql.fw.dialects.SqlGenerationPreferences;
import net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData;
import net.sourceforge.squirrel_sql.fw.sql.ITableInfo;
import net.sourceforge.squirrel_sql.fw.sql.TableColumnInfo;
import org.antlr.stringtemplate.StringTemplate;
import org.antlr.stringtemplate.language.ASTExpr;
import org.hibernate.HibernateException;
import org.hibernate.MappingException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DialectUtilsEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo(" ON UPDATE ", " ON UPDATE ", " ON UPDATE ", " ON UPDATE ", 904, " ON UPDATE ", 904, 904, 0, 904, " ON UPDATE ", " ON UPDATE ", 904, 0, " ON UPDATE ");
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        DialectUtils.getColumnTypeAlterSQL((HibernateDialect) dB2DialectExt0, " ON UPDATE ", " ON UPDATE ", true, tableColumnInfo0, tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: MappingException");
      } catch(MappingException e) {
        /*
         * No Dialect mapping for JDBC type: 904
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo(".P", ".P", ".P", ".P", (-1), ".P", 23514, 548, 23514, 23514, ".P", ".P", 1830, 338, ".P");
      TableColumnInfo tableColumnInfo1 = DialectUtils.getRenamedColumn(tableColumnInfo0, ".P");
      assertNotSame(tableColumnInfo0, tableColumnInfo1);
      assertTrue(tableColumnInfo0.equals(tableColumnInfo1));
      assertEquals(-1, tableColumnInfo1.getDataType());
      assertEquals(1830, tableColumnInfo1.getOctetLength());
      assertEquals(23514, tableColumnInfo1.getColumnSize());
      assertEquals(338, tableColumnInfo1.getOrdinalPosition());
      assertEquals(".P", tableColumnInfo1.getColumnName());
      assertEquals(548, tableColumnInfo1.getDecimalDigits());
      assertEquals(23514, tableColumnInfo1.isNullAllowed());
      assertEquals(23514, tableColumnInfo1.getRadix());
  }

  @Test
  public void test2()  throws Throwable  {
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      MySQL5DialectExt mySQL5DialectExt0 = new MySQL5DialectExt();
      String string0 = DialectUtils.getDropForeignKeySQL("", "", (DatabaseObjectQualifier) null, sqlGenerationPreferences0, (HibernateDialect) mySQL5DialectExt0);
      assertNotNull(string0);
      assertEquals("ALTER TABLE  DROP CONSTRAINT \"\"", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      Vector<ITableInfo> vector0 = new Vector<ITableInfo>();
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      CreateScriptPreferences createScriptPreferences0 = new CreateScriptPreferences();
      List<String> list0 = DialectUtils.getCreateTableSQL((List<ITableInfo>) vector0, (ISQLDatabaseMetaData) null, (HibernateDialect) daffodilDialectExt0, createScriptPreferences0, true);
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test4()  throws Throwable  {
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      MAXDBDialectExt mAXDBDialectExt0 = new MAXDBDialectExt();
      String string0 = DialectUtils.getColumnDropSQL("6O D|HZ", "6O D|HZ", (DatabaseObjectQualifier) null, sqlGenerationPreferences0, (HibernateDialect) mAXDBDialectExt0);
      assertNotNull(string0);
      assertEquals("ALTER TABLE 6O D|HZ DROP \"6O D|HZ\"", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = dB2DialectExt0.getDropIndexSQL("Ea>VK=7p?Q>&&aq:+", " ON UPDATE ", true, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("DROP INDEX \" ON UPDATE \" ", string0);
      assertNotNull(string0);
  }

  @Test
  public void test6()  throws Throwable  {
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      ProgressDialectExt progressDialectExt0 = new ProgressDialectExt();
      // Undeclared exception!
      try {
        DialectUtils.getCreateSequenceSQL((StringTemplate) null, (HashMap<String, String>) null, databaseObjectQualifier0, sqlGenerationPreferences0, (HibernateDialect) progressDialectExt0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier(">3", ">3");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo(">3", "ALTER TABLE >3 RENAME TO >3", ">3", ">3", 39, "ALTER TABLE >3 RENAME TO >3", 39, 888, 888, (-203), ">3", "ALTER TABLE >3 RENAME TO >3", 39, 834, ">3");
      String[] stringArray0 = DialectUtils.getAddSimulatedAutoIncrementColumn(tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0, (HibernateDialect) h2DialectExt0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test8()  throws Throwable  {
      DialectUtils dialectUtils0 = new DialectUtils();
      assertNotNull(dialectUtils0);
  }

  @Test
  public void test9()  throws Throwable  {
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("n", "n");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("CREATE SEQUENCE L<Uke}n1\nINCREMENT BY L<Uke}n1 MINVALUE L<Uke}n1 MAXVALUE n \nSTART WITH n CACHE L<Uke}n1 L<Uke}n1", "L<Uke}n1", "L<Uke}n1", "n", (-1646), "D6", 292, 21, 21, (-1990), "n", "~ceEi", 21, (-268), "CREATE SEQUENCE L<Uke}n1\nINCREMENT BY L<Uke}n1 MINVALUE L<Uke}n1 MAXVALUE n \nSTART WITH n CACHE L<Uke}n1 L<Uke}n1");
      String string0 = DialectUtils.getColumnNullableAlterSQL(tableColumnInfo0, (HibernateDialect) greenplumDialectExt0, "~ceEi", false, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("ALTER TABLE L<Uke}n1 ~ceEi \"n\" NULL", string0);
      assertNotNull(string0);
  }

  @Test
  public void test10()  throws Throwable  {
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier(">3", ">3");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      String string0 = DialectUtils.getRenameTableSQL(">3", ">3", databaseObjectQualifier0, sqlGenerationPreferences0, (HibernateDialect) h2DialectExt0);
      assertEquals("ALTER TABLE >3 RENAME TO >3", string0);
  }

  @Test
  public void test11()  throws Throwable  {
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo(".P", ".P", ".P", ".P", (-1), ".P", 23514, 548, 23514, 23514, ".P", ".P", 1830, 338, ".P");
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      String string0 = DialectUtils.getAddColumSQL(tableColumnInfo0, (HibernateDialect) greenplumDialectExt0, true, true, true, (DatabaseObjectQualifier) null, sqlGenerationPreferences0);
      assertNotNull(string0);
      assertEquals("ALTER TABLE .P ADD \".P\" char(64000) DEFAULT '.P' NULL ", string0);
  }

  @Test
  public void test12()  throws Throwable  {
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("", "", "", "", 791, "", 0, 791, 791, 791, "", "", 1909, 0, "");
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      String string0 = DialectUtils.getColumnCommentAlterSQL(tableColumnInfo0, (DatabaseObjectQualifier) null, sqlGenerationPreferences0, (HibernateDialect) frontBaseDialectExt0);
      assertEquals("COMMENT ON COLUMN .\"\" IS ''", string0);
      assertNotNull(string0);
  }

  @Test
  public void test13()  throws Throwable  {
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("", "");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      MySQL5DialectExt mySQL5DialectExt0 = new MySQL5DialectExt();
      String string0 = DialectUtils.getColumnCommentAlterSQL("", (String) null, (String) null, databaseObjectQualifier0, sqlGenerationPreferences0, (HibernateDialect) mySQL5DialectExt0);
      assertEquals("COMMENT ON COLUMN .\"null\" IS ''", string0);
  }

  @Test
  public void test14()  throws Throwable  {
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("r", "r", "r", "r", 792, "r", 0, 792, 792, 792, "r", "r", 1909, 0, "r");
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      String string0 = DialectUtils.getColumnCommentAlterSQL(tableColumnInfo0, (DatabaseObjectQualifier) null, sqlGenerationPreferences0, (HibernateDialect) frontBaseDialectExt0);
      assertEquals("COMMENT ON COLUMN r.\"r\" IS 'r'", string0);
  }

  @Test
  public void test15()  throws Throwable  {
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      H2DialectExt h2DialectExt0 = new H2DialectExt();
      String string0 = DialectUtils.getColumnDropSQL("o ", "o ", "o ", true, "o ", databaseObjectQualifier0, sqlGenerationPreferences0, (HibernateDialect) h2DialectExt0);
      assertEquals("ALTER TABLE o  o  \"o \" o ", string0);
  }

  @Test
  public void test16()  throws Throwable  {
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("", "6NO");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      HADBDialectExt hADBDialectExt0 = new HADBDialectExt();
      // Undeclared exception!
      try {
        hADBDialectExt0.getTableDropSQL((ITableInfo) null, false, true, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test17()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("TEMPLATE_ARGS", "TEMPLATE_ARGS", ".P", "TEMPLATE_ARGS", 23519, ".P", (-1), 23519, (-1), (-1), "net.sourceforge.squirrel_sql.fw.dialects.IntersystemsCacheDialectExt@2889b3b9", "net.sourceforge.squirrel_sql.fw.dialects.IntersystemsCacheDialectExt@2889b3b9", (-1639), (-1032), "TEMPLATE_ARGS");
      IngresDialectExt ingresDialectExt0 = new IngresDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("`Fgj$S)q", "TEMPLATE_ARGS");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = DialectUtils.getColumnNullableAlterSQL(tableColumnInfo0, false, (HibernateDialect) ingresDialectExt0, "`Fgj$S)q", false, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("ALTER TABLE .P `Fgj$S)q \"TEMPLATE_ARGS\" NOT NULL", string0);
  }

  @Test
  public void test18()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("O)PasF ?^$!fm!S#CJ", "0twVP|b{ ey", "", "O)PasF ?^$!fm!S#CJ", 0, "", 0, 0, 91, (-1366), "O)PasF ?^$!fm!S#CJ", "0twVP|b{ ey", 0, 0, "O)PasF ?^$!fm!S#CJ");
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("0twVP|b{ ey", "O)PasF ?^$!fm!S#CJ");
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[6];
      tableColumnInfoArray0[0] = tableColumnInfo0;
      tableColumnInfoArray0[1] = tableColumnInfo0;
      tableColumnInfoArray0[2] = tableColumnInfo0;
      tableColumnInfoArray0[3] = tableColumnInfo0;
      tableColumnInfoArray0[4] = tableColumnInfo0;
      tableColumnInfoArray0[5] = tableColumnInfo0;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      DialectUtils.getMultiColNotNullSQL(tableColumnInfoArray0, (HibernateDialect) frontBaseDialectExt0, "0twVP|b{ ey", false, arrayList0, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals(6, arrayList0.size());
      assertEquals("[ALTER TABLE  0twVP|b{ ey \"O)PasF ?^$!fm!S#CJ\" NOT NULL, ALTER TABLE  0twVP|b{ ey \"O)PasF ?^$!fm!S#CJ\" NOT NULL, ALTER TABLE  0twVP|b{ ey \"O)PasF ?^$!fm!S#CJ\" NOT NULL, ALTER TABLE  0twVP|b{ ey \"O)PasF ?^$!fm!S#CJ\" NOT NULL, ALTER TABLE  0twVP|b{ ey \"O)PasF ?^$!fm!S#CJ\" NOT NULL, ALTER TABLE  0twVP|b{ ey \"O)PasF ?^$!fm!S#CJ\" NOT NULL]", arrayList0.toString());
  }

  @Test
  public void test19()  throws Throwable  {
      SQLServerDialectExt sQLServerDialectExt0 = new SQLServerDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("5VH", "5VH");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[2];
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("_=QH#2nb3zS", "S4EQ\u0004^jJ$Y|hbg", (String) null, "CREATE SEQUENCE _=QH#2nb3zS\nINCREMENT BY _=QH#2nb3zS NO MINVALUE NO MAXVALUE\n", (int) (byte) (-124), "S4EQ\u0004^jJ$Y|hbg", 0, 898, 1154, 1154, (String) null, "S4EQ\u0004^jJ$Y|hbg", (-722), 97, "S4EQ\u0004^jJ$Y|hbg");
      tableColumnInfoArray0[1] = tableColumnInfo0;
      tableColumnInfoArray0[0] = tableColumnInfo0;
      String string0 = DialectUtils.getAddUniqueConstraintSQL((String) null, "S4EQ\u0004^jJ$Y|hbg", tableColumnInfoArray0, databaseObjectQualifier0, sqlGenerationPreferences0, (HibernateDialect) sQLServerDialectExt0);
      assertEquals("ALTER TABLE null\n ADD CONSTRAINT \"S4EQ\u0004^jJ$Y|hbg\" UNIQUE (\"CREATE SEQUENCE _=QH#2nb3zS\nINCREMENT BY _=QH#2nb3zS NO MINVALUE NO MAXVALUE\n\", \"CREATE SEQUENCE _=QH#2nb3zS\nINCREMENT BY _=QH#2nb3zS NO MINVALUE NO MAXVALUE\n\")", string0);
  }

  @Test
  public void test20()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo((String) null, (String) null, (String) null, (String) null, 1380, "", 1380, (-481), (-481), 55, "", (String) null, 439, 105, (String) null);
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      String string0 = DialectUtils.getColumnNameAlterSQL(tableColumnInfo0, tableColumnInfo0, (String) null, "rXWeW\rS5hzV3v(L2#A", databaseObjectQualifier0, sqlGenerationPreferences0, (HibernateDialect) commonHibernateDialect0);
      assertNotNull(string0);
      assertEquals("ALTER TABLE null null \"null\" rXWeW\rS5hzV3v(L2#A \"null\"", string0);
  }

  @Test
  public void test21()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("O)PasF ?^$!fm!S#CJ", "0twVP|b{ ey", "", (String) null, 0, "", 0, 0, 91, (-1366), "O)PasF ?^$!fm!S#CJ", "0twVP|b{ ey", 0, 0, "O)PasF ?^$!fm!S#CJ");
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("0twVP|b{ ey", (String) null);
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = frontBaseDialectExt0.getColumnDefaultAlterSQL(tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("ALTER TABLE  ALTER COLUMN \"null\"  SET DEFAULT '0twVP|b{ ey'", string0);
  }

  @Test
  public void test22()  throws Throwable  {
      InformixDialectExt informixDialectExt0 = new InformixDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("QIiH8kq*H`p<h:wy", "`");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("QIiH8kq*H`p<h:wy", "QIiH8kq*H`p<h:wy", "QIiH8kq*H`p<h:wy", "QIiH8kq*H`p<h:wy", 1759, "QIiH8kq*H`p<h:wy", 1759, 1759, (-795), 1759, "QIiH8kq*H`p<h:wy", "QIiH8kq*H`p<h:wy", (-795), 1759, "QIiH8kq*H`p<h:wy");
      // Undeclared exception!
      try {
        informixDialectExt0.getColumnTypeAlterSQL(tableColumnInfo0, tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: MappingException");
      } catch(MappingException e) {
        /*
         * No Dialect mapping for JDBC type: 1759
         */
      }
  }

  @Test
  public void test23()  throws Throwable  {
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("n", "n");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("CREATE SEQUENCE L<Uke}n1\nINCREMENT BY L<Uke}n1 MINVALUE L<Uke}n1 MAXVALUE n \nSTART WITH n CACHE L<Uke}n1 L<Uke}n1", "L<Uke}n1", "L<Uke}n1", "n", (-1646), "D6", 292, 21, 21, (-1990), "n", "~ceEi", 21, (-268), "CREATE SEQUENCE L<Uke}n1\nINCREMENT BY L<Uke}n1 MINVALUE L<Uke}n1 MAXVALUE n \nSTART WITH n CACHE L<Uke}n1 L<Uke}n1");
      String string0 = DialectUtils.getColumnRenameSQL(tableColumnInfo0, tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0, (HibernateDialect) greenplumDialectExt0);
      assertEquals("RENAME COLUMN L<Uke}n1.\"n\" TO \"n\"", string0);
  }

  @Test
  public void test24()  throws Throwable  {
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("net.sourceforge.squirrel_sql.fw.dialects.IntersystemsCacheDialectExt@7819d0b6", "net.sourceforge.squirrel_sql.fw.dialects.IntersystemsCacheDialectExt@7819d0b6");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      // Undeclared exception!
      try {
        commonHibernateDialect0.getDropConstraintSQL("DROP SEQUENCE net.sourceforge.squirrel_sql.fw.dialects.IntersystemsCacheDialectExt@7819d0b6 CASCADE", "DROP SEQUENCE net.sourceforge.squirrel_sql.fw.dialects.IntersystemsCacheDialectExt@7819d0b6 CASCADE", databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Generic doesn't support dropping constraints.
         */
      }
  }

  @Test
  public void test25()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        frontBaseDialectExt0.getColumnNameAlterSQL((TableColumnInfo) null, (TableColumnInfo) null, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * FrontBase doesn't support altering a column's name
         */
      }
  }

  @Test
  public void test26()  throws Throwable  {
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("`Fgj$S)q", "TEMPLATE_ARGS");
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        greenplumDialectExt0.getDropPrimaryKeySQL("^Z4%4sWa", ".P", databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Greenplum doesn't support dropping primary keys
         */
      }
  }

  @Test
  public void test27()  throws Throwable  {
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      // Undeclared exception!
      try {
        commonHibernateDialect0.getAlterSequenceSQL("_R&Ns/&|tP WT", "fWXRa8v", "fWXRa8v", "_R&Ns/&|tP WT _R&Ns/&|tP WT _R&Ns/&|tP WT _R&Ns/&|tP WT", "fWXRa8v", "_R&Ns/&|tP WT", false, (DatabaseObjectQualifier) null, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Generic doesn't support altering sequences.
         */
      }
  }

  @Test
  public void test28()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      String[] stringArray0 = new String[7];
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("0twVP|b{ ey", (String) null);
      // Undeclared exception!
      try {
        frontBaseDialectExt0.getUpdateSQL("O)PasF ?^$!fm!S#CJ", stringArray0, stringArray0, stringArray0, stringArray0, stringArray0, databaseObjectQualifier0, (SqlGenerationPreferences) null);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * FrontBase doesn't support updating rows.
         */
      }
  }

  @Test
  public void test29()  throws Throwable  {
      PointbaseDialectExt pointbaseDialectExt0 = new PointbaseDialectExt();
      // Undeclared exception!
      try {
        DialectUtils.getUnsupportedMessage((HibernateDialect) pointbaseDialectExt0, (-939));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Unknown featureId: -939
         */
      }
  }

  @Test
  public void test30()  throws Throwable  {
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("", "6NO");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      HADBDialectExt hADBDialectExt0 = new HADBDialectExt();
      String string0 = hADBDialectExt0.getDropPrimaryKeySQL("ALTER TABLE 6NO DROP CONSTRAINT \"\" CASCADE", "", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("ALTER TABLE  DROP PRIMARY KEY", string0);
  }

  @Test
  public void test31()  throws Throwable  {
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("", "6NO");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      MySQL5DialectExt mySQL5DialectExt0 = new MySQL5DialectExt();
      String string0 = DialectUtils.getDropPrimaryKeySQL("", "6NO", true, true, databaseObjectQualifier0, sqlGenerationPreferences0, (HibernateDialect) mySQL5DialectExt0);
      assertEquals("ALTER TABLE 6NO DROP CONSTRAINT \"\" CASCADE", string0);
  }

  @Test
  public void test32()  throws Throwable  {
      InformixDialectExt informixDialectExt0 = new InformixDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("QIiH8kq*H`p<h:wy", "`");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = informixDialectExt0.getDropPrimaryKeySQL("QIiH8kq*H`p<h:wy", "`", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertNotNull(string0);
      assertEquals("ALTER TABLE QIiH8kq*H`p<h:wy:`.` DROP CONSTRAINT QIiH8kq*H`p<h:wy", string0);
  }

  @Test
  public void test33()  throws Throwable  {
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("", "");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      Boolean boolean0 = Boolean.FALSE;
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      String string0 = DialectUtils.getDropIndexSQL("", (String) null, boolean0, databaseObjectQualifier0, sqlGenerationPreferences0, (HibernateDialect) firebirdDialectExt0);
      assertNotNull(string0);
      assertEquals("DROP INDEX null RESTRICT ON ", string0);
  }

  @Test
  public void test34()  throws Throwable  {
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("n", "n");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      OracleDialectExt oracleDialectExt0 = new OracleDialectExt();
      String string0 = oracleDialectExt0.getDropSequenceSQL("L<Uke}n1", false, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertNotNull(string0);
      assertEquals("DROP SEQUENCE L<Uke}n1", string0);
  }

  @Test
  public void test35()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("net.sourceforge.squirrel_sql.fw.dialects.IntersystemsCacheDialectExt@7819d0b6", "net.sourceforge.squirrel_sql.fw.dialects.IntersystemsCacheDialectExt@7819d0b6");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      String string0 = DialectUtils.getDropSequenceSQL("net.sourceforge.squirrel_sql.fw.dialects.IntersystemsCacheDialectExt@7819d0b6", boolean0, databaseObjectQualifier0, sqlGenerationPreferences0, (HibernateDialect) commonHibernateDialect0);
      assertNotNull(string0);
  }

  @Test
  public void test36()  throws Throwable  {
      SQLServerDialectExt sQLServerDialectExt0 = new SQLServerDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("5VH", "5VH");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = sQLServerDialectExt0.getDropConstraintSQL("5VH", "5VH", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertNotNull(string0);
      assertEquals("ALTER TABLE 5VH\n DROP CONSTRAINT \"5VH\"", string0);
  }

  @Test
  public void test37()  throws Throwable  {
      SQLServerDialectExt sQLServerDialectExt0 = new SQLServerDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("5VH", "5VH");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = sQLServerDialectExt0.getDropViewSQL("ALTER TABLE 5VH\n DROP CONSTRAINT \"5VH\"", false, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertNotNull(string0);
      assertEquals("DROP VIEW ALTER TABLE 5VH\n DROP CONSTRAINT \"5VH\"", string0);
  }

  @Test
  public void test38()  throws Throwable  {
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("", "");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      PointbaseDialectExt pointbaseDialectExt0 = new PointbaseDialectExt();
      String[] stringArray0 = new String[10];
      String string0 = DialectUtils.getAddIndexSQL((HibernateDialect) pointbaseDialectExt0, "", "", "", stringArray0, false, "", "", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertNotNull(string0);
      assertEquals("CREATE INDEX \"\" ON  (\"null\", \"null\", \"null\", \"null\", \"null\", \"null\", \"null\", \"null\", \"null\", \"null\")", string0);
  }

  @Test
  public void test39()  throws Throwable  {
      GenericDialectExt genericDialectExt0 = new GenericDialectExt();
      String[] stringArray0 = new String[9];
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = DialectUtils.getAddIndexSQL((HibernateDialect) genericDialectExt0, (String) null, (String) null, (String) null, stringArray0, true, "Z4AJZ5P", (String) null, (DatabaseObjectQualifier) null, sqlGenerationPreferences0);
      assertEquals("CREATE UNIQUE INDEX \"null\" ON null (\"null\", \"null\", \"null\", \"null\", \"null\", \"null\", \"null\", \"null\", \"null\") \n TABLESPACE Z4AJZ5P", string0);
      assertNotNull(string0);
  }

  @Test
  public void test40()  throws Throwable  {
      SQLServerDialectExt sQLServerDialectExt0 = new SQLServerDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("5VH", "5VH");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String[] stringArray0 = new String[4];
      String string0 = DialectUtils.getAddIndexSQL((HibernateDialect) sQLServerDialectExt0, "S4EQ\u0004^jJ$Y|hbg", "S4EQ\u0004^jJ$Y|hbg", "S4EQ\u0004^jJ$Y|hbg", stringArray0, false, (String) null, "S4EQ\u0004^jJ$Y|hbg", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertNotNull(string0);
      assertEquals("CREATE INDEX \"S4EQ\u0004^jJ$Y|hbg\" ON S4EQ\u0004^jJ$Y|hbg  USING S4EQ\u0004^jJ$Y|hbg (\"null\", \"null\", \"null\", \"null\") \n WHERE S4EQ\u0004^jJ$Y|hbg", string0);
  }

  @Test
  public void test41()  throws Throwable  {
      InformixDialectExt informixDialectExt0 = new InformixDialectExt();
      String[] stringArray0 = new String[7];
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("QIiH8kq*H`p<h:wy", "QIiH8kq*H`p<h:wy");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = DialectUtils.getCreateIndexSQL("QIiH8kq*H`p<h:wy", "QIiH8kq*H`p<h:wy", "QIiH8kq*H`p<h:wy", stringArray0, false, "QIiH8kq*H`p<h:wy", "QIiH8kq*H`p<h:wy", databaseObjectQualifier0, sqlGenerationPreferences0, (HibernateDialect) informixDialectExt0);
      assertEquals("CREATE  INDEX QIiH8kq*H`p<h:wy:QIiH8kq*H`p<h:wy.QIiH8kq*H`p<h:wy ON QIiH8kq*H`p<h:wy:QIiH8kq*H`p<h:wy.QIiH8kq*H`p<h:wy(null,null,null,null,null,null,null)", string0);
      assertNotNull(string0);
  }

  @Test
  public void test42()  throws Throwable  {
      InformixDialectExt informixDialectExt0 = new InformixDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("QIiH8kq*H`p<h:wy", "`");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String[] stringArray0 = new String[7];
      String string0 = DialectUtils.getCreateIndexSQL("QIiH8kq*H`p<h:wy", "QIiH8kq*H`p<h:wy", "QIiH8kq*H`p<h:wy", stringArray0, true, (String) null, (String) null, databaseObjectQualifier0, sqlGenerationPreferences0, (HibernateDialect) informixDialectExt0);
      assertEquals("CREATE UNIQUE  INDEX QIiH8kq*H`p<h:wy:`.QIiH8kq*H`p<h:wy ON QIiH8kq*H`p<h:wy:`.QIiH8kq*H`p<h:wy(null,null,null,null,null,null,null)", string0);
      assertNotNull(string0);
  }

  @Test
  public void test43()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = frontBaseDialectExt0.getCreateViewSQL("org.apache.log4j.CategoryKey", "org.apache.log4j.CategoryKey", "org.apache.log4j.CategoryKey", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertNotNull(string0);
      assertEquals("CREATE VIEW org.apache.log4j.CategoryKey\n AS org.apache.log4j.CategoryKey", string0);
  }

  @Test
  public void test44()  throws Throwable  {
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("", "");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      PointbaseDialectExt pointbaseDialectExt0 = new PointbaseDialectExt();
      String string0 = DialectUtils.getCreateSequenceSQL((String) null, "", "", "", "", "", "", databaseObjectQualifier0, sqlGenerationPreferences0, (HibernateDialect) pointbaseDialectExt0);
      assertEquals("CREATE SEQUENCE null\nNO MINVALUE NO MAXVALUE\n", string0);
  }

  @Test
  public void test45()  throws Throwable  {
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("n", "n");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      String string0 = DialectUtils.getCreateSequenceSQL("L<Uke}n1", "L<Uke}n1", "L<Uke}n1", "n", "n", "L<Uke}n1", "L<Uke}n1", databaseObjectQualifier0, sqlGenerationPreferences0, (HibernateDialect) greenplumDialectExt0);
      assertEquals("CREATE SEQUENCE L<Uke}n1\nINCREMENT BY L<Uke}n1 MINVALUE L<Uke}n1 MAXVALUE n \nSTART WITH n CACHE L<Uke}n1 L<Uke}n1", string0);
  }

  @Test
  public void test46()  throws Throwable  {
      SQLServerDialectExt sQLServerDialectExt0 = new SQLServerDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("5VH", "5VH");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = DialectUtils.getCreateSequenceSQL("_=QH#2nb3zS", "_=QH#2nb3zS", (String) null, (String) null, (String) null, (String) null, (String) null, databaseObjectQualifier0, sqlGenerationPreferences0, (HibernateDialect) sQLServerDialectExt0);
      assertEquals("CREATE SEQUENCE _=QH#2nb3zS\nINCREMENT BY _=QH#2nb3zS NO MINVALUE NO MAXVALUE\n", string0);
      assertNotNull(string0);
  }

  @Test
  public void test47()  throws Throwable  {
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("", "");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      NetezzaDialextExt netezzaDialextExt0 = new NetezzaDialextExt();
      String string0 = DialectUtils.getAlterSequenceSQL("", (String) null, "", "", "", "", "", databaseObjectQualifier0, sqlGenerationPreferences0, (HibernateDialect) netezzaDialextExt0);
      assertNotNull(string0);
      assertEquals("ALTER SEQUENCE \nNO MINVALUE NO MAXVALUE\n", string0);
  }

  @Test
  public void test48()  throws Throwable  {
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("r", (String) null);
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      NetezzaDialextExt netezzaDialextExt0 = new NetezzaDialextExt();
      String string0 = DialectUtils.getAlterSequenceSQL("r", "r", "r", (String) null, (String) null, "r", (String) null, databaseObjectQualifier0, sqlGenerationPreferences0, (HibernateDialect) netezzaDialextExt0);
      assertEquals("ALTER SEQUENCE r\nINCREMENT BY r MINVALUE r NO MAXVALUE\nCACHE r ", string0);
      assertNotNull(string0);
  }

  @Test
  public void test49()  throws Throwable  {
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("net.sourceforge.squirrel_sql.fw.dialects.IntersystemsCacheDialectExt@7819d0b6", "net.sourceforge.squirrel_sql.fw.dialects.IntersystemsCacheDialectExt@7819d0b6");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      SQLServerDialectExt sQLServerDialectExt0 = new SQLServerDialectExt();
      String string0 = sQLServerDialectExt0.getInsertIntoSQL("net.sourceforge.squirrel_sql.fw.dialects.IntersystemsCacheDialectExt@7819d0b6", (List<String>) null, "eMzlC,K&Q4Zp,1(\"", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertNotNull(string0);
  }

  @Test
  public void test50()  throws Throwable  {
      String[] stringArray0 = new String[8];
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      HADBDialectExt hADBDialectExt0 = new HADBDialectExt();
      // Undeclared exception!
      try {
        DialectUtils.getUpdateSQL((StringTemplate) null, ";&^uG.s&m@?", stringArray0, stringArray0, stringArray0, stringArray0, stringArray0, (DatabaseObjectQualifier) null, sqlGenerationPreferences0, (HibernateDialect) hADBDialectExt0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test51()  throws Throwable  {
      String string0 = DialectUtils.formatQualified("5VH", "S4EQ\u0004^jJ$Y|hbg", false, true);
      assertEquals("5VH", string0);
  }

  @Test
  public void test52()  throws Throwable  {
      String string0 = DialectUtils.formatQualified("L<Uke}n1", "n", true, false);
      assertNotNull(string0);
      assertEquals("n.L<Uke}n1", string0);
  }

  @Test
  public void test53()  throws Throwable  {
      String string0 = DialectUtils.formatQualified("L<Uke}n1", "n", true, true);
      assertEquals("\"n\".\"L<Uke}n1\"", string0);
      assertNotNull(string0);
  }

  @Test
  public void test54()  throws Throwable  {
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      sqlGenerationPreferences0.setQualifyTableNames(false);
      String string0 = DialectUtils.getRenameViewSQL("_R&Ns/&|tP WT", "_R&Ns/&|tP WT", "_R&Ns/&|tP WT", "_R&Ns/&|tP WT", (DatabaseObjectQualifier) null, sqlGenerationPreferences0, (HibernateDialect) commonHibernateDialect0);
      assertEquals("_R&Ns/&|tP WT \"_R&Ns/&|tP WT\" _R&Ns/&|tP WT \"_R&Ns/&|tP WT\"", string0);
  }

  @Test
  public void test55()  throws Throwable  {
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      sqlGenerationPreferences0.setQuoteIdentifiers(false);
      String string0 = DialectUtils.getRenameViewSQL("_R&Ns/&|tP WT", "_R&Ns/&|tP WT", "_R&Ns/&|tP WT", "_R&Ns/&|tP WT", (DatabaseObjectQualifier) null, sqlGenerationPreferences0, (HibernateDialect) commonHibernateDialect0);
      assertEquals("_R&Ns/&|tP WT _R&Ns/&|tP WT _R&Ns/&|tP WT _R&Ns/&|tP WT", string0);
  }

  @Test
  public void test56()  throws Throwable  {
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo(".P", ".P", ".P", ".P", (-1), ".P", 23532, 548, 23532, 23532, ".P", ".P", 1830, 338, ".P");
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      String string0 = DialectUtils.getAddColumSQL(tableColumnInfo0, (HibernateDialect) greenplumDialectExt0, false, false, false, (DatabaseObjectQualifier) null, sqlGenerationPreferences0);
      assertNotNull(string0);
      assertEquals("ALTER TABLE .P ADD \".P\" char(64000)", string0);
  }

  @Test
  public void test57()  throws Throwable  {
      GenericDialectExt genericDialectExt0 = new GenericDialectExt();
      StringTemplate stringTemplate0 = ASTExpr.MAP_KEY_VALUE;
      HashMap<String, String> hashMap0 = new HashMap<String, String>(0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "I`%WtNK1h#nBsZ!t";
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      DialectUtils.bindTemplateAttributes((HibernateDialect) genericDialectExt0, stringTemplate0, hashMap0, stringArray0, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("template-<anonymous([])@3>:chunks=attributes=[columnName=\"I`%WtNK1h#nBsZ!t\"]", stringTemplate0.toDebugString());
      assertEquals("<anonymous([])@3>, attributes=[columnName]>\n", stringTemplate0.getEnclosingInstanceStackTrace());
  }

  @Test
  public void test58()  throws Throwable  {
      IntersystemsCacheDialectExt intersystemsCacheDialectExt0 = new IntersystemsCacheDialectExt();
      StringTemplate stringTemplate0 = ASTExpr.MAP_KEY_VALUE;
      Object[] objectArray0 = new Object[10];
      objectArray0[0] = (Object) intersystemsCacheDialectExt0;
      objectArray0[1] = (Object) stringTemplate0;
      objectArray0[2] = (Object) intersystemsCacheDialectExt0;
      objectArray0[3] = (Object) stringTemplate0;
      objectArray0[4] = (Object) stringTemplate0;
      objectArray0[5] = (Object) stringTemplate0;
      objectArray0[6] = (Object) stringTemplate0;
      objectArray0[7] = (Object) intersystemsCacheDialectExt0;
      objectArray0[8] = (Object) intersystemsCacheDialectExt0;
      objectArray0[9] = (Object) stringTemplate0;
      HashMap<String, String> hashMap0 = DialectUtils.getValuesMap(objectArray0);
      String[] stringArray0 = new String[6];
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      DialectUtils.getAddIndexSQL((HibernateDialect) intersystemsCacheDialectExt0, stringTemplate0, hashMap0, stringArray0, (DatabaseObjectQualifier) null, sqlGenerationPreferences0);
  }

  @Test
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      String string0 = DialectUtils.toHexString(byteArray0);
      assertEquals("00000000000000", string0);
      assertNotNull(string0);
  }
}
