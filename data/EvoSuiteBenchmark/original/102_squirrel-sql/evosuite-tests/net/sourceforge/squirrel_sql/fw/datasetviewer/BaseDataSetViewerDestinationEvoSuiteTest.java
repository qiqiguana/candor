/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.datasetviewer;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.awt.RenderingHints;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import net.sourceforge.squirrel_sql.fw.datasetviewer.BaseDataSetViewerDestination;
import net.sourceforge.squirrel_sql.fw.datasetviewer.DataSetException;
import net.sourceforge.squirrel_sql.fw.datasetviewer.DataSetListModel;
import net.sourceforge.squirrel_sql.fw.datasetviewer.DataSetViewerEditableTablePanel;
import net.sourceforge.squirrel_sql.fw.datasetviewer.DataSetViewerPropertyPanel;
import net.sourceforge.squirrel_sql.fw.datasetviewer.EmptyDataSet;
import net.sourceforge.squirrel_sql.fw.datasetviewer.IDataSet;
import net.sourceforge.squirrel_sql.fw.datasetviewer.IDataSetUpdateableModel;
import net.sourceforge.squirrel_sql.fw.datasetviewer.JavabeanArrayDataSet;
import net.sourceforge.squirrel_sql.fw.datasetviewer.MapDataSet;
import net.sourceforge.squirrel_sql.fw.datasetviewer.ResultSetDataSet;
import net.sourceforge.squirrel_sql.fw.datasetviewer.TableState;
import net.sourceforge.squirrel_sql.fw.util.IMessageHandler;
import net.sourceforge.squirrel_sql.fw.util.NullMessageHandler;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BaseDataSetViewerDestinationEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      DataSetViewerEditableTablePanel dataSetViewerEditableTablePanel0 = new DataSetViewerEditableTablePanel();
      // Undeclared exception!
      try {
        dataSetViewerEditableTablePanel0.show((IDataSet) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * IDataSet == null
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      DataSetListModel dataSetListModel0 = new DataSetListModel();
      Object[] objectArray0 = new Object[16];
      objectArray0[0] = (Object) dataSetListModel0;
      JavabeanArrayDataSet javabeanArrayDataSet0 = null;
      try {
        javabeanArrayDataSet0 = new JavabeanArrayDataSet(objectArray0);
        fail("Expecting exception: DataSetException");
      } catch(DataSetException e) {
        /*
         * java.lang.NullPointerException
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      DataSetViewerPropertyPanel dataSetViewerPropertyPanel0 = new DataSetViewerPropertyPanel();
      dataSetViewerPropertyPanel0.init((IDataSetUpdateableModel) null);
      assertEquals(true, dataSetViewerPropertyPanel0.getShowHeadings());
  }

  @Test
  public void test3()  throws Throwable  {
      DataSetViewerEditableTablePanel dataSetViewerEditableTablePanel0 = new DataSetViewerEditableTablePanel();
      assertEquals(true, dataSetViewerEditableTablePanel0.getShowHeadings());
      
      dataSetViewerEditableTablePanel0.showHeadings(false);
      assertEquals(false, dataSetViewerEditableTablePanel0.getShowHeadings());
  }

  @Test
  public void test4()  throws Throwable  {
      DataSetViewerEditableTablePanel dataSetViewerEditableTablePanel0 = new DataSetViewerEditableTablePanel();
      dataSetViewerEditableTablePanel0.setUpdateableModelReference((IDataSetUpdateableModel) null);
      assertEquals(true, dataSetViewerEditableTablePanel0.getShowHeadings());
  }

  @Test
  public void test5()  throws Throwable  {
      DataSetViewerPropertyPanel dataSetViewerPropertyPanel0 = new DataSetViewerPropertyPanel();
      dataSetViewerPropertyPanel0.applyResultSortableTableState((TableState) null);
      assertEquals(true, dataSetViewerPropertyPanel0.getShowHeadings());
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          // Undeclared exception!
          try {
            BaseDataSetViewerDestination.getInstance("Goky0", (IDataSetUpdateableModel) null);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.lang.RuntimePermission preferences)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.util.prefs.Preferences.userRoot(Preferences.java:432)
             * net.sourceforge.squirrel_sql.fw.gui.ButtonTableHeader.isAlwaysAdjustAllColWidths(ButtonTableHeader.java:267)
             * net.sourceforge.squirrel_sql.fw.gui.TablePopupMenu.<init>(TablePopupMenu.java:159)
             * net.sourceforge.squirrel_sql.fw.datasetviewer.DataSetViewerTablePanel$MyJTable.createGUI(DataSetViewerTablePanel.java:531)
             * net.sourceforge.squirrel_sql.fw.datasetviewer.DataSetViewerTablePanel$MyJTable.<init>(DataSetViewerTablePanel.java:275)
             * net.sourceforge.squirrel_sql.fw.datasetviewer.DataSetViewerTablePanel.init(DataSetViewerTablePanel.java:107)
             * net.sourceforge.squirrel_sql.fw.datasetviewer.DataSetViewerTablePanel.init(DataSetViewerTablePanel.java:97)
             * net.sourceforge.squirrel_sql.fw.datasetviewer.BaseDataSetViewerDestination.getInstance(BaseDataSetViewerDestination.java:207)
             * net.sourceforge.squirrel_sql.fw.datasetviewer.BaseDataSetViewerDestination.getInstance(BaseDataSetViewerDestination.java:183)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
      DataSetViewerPropertyPanel dataSetViewerPropertyPanel0 = new DataSetViewerPropertyPanel();
      EmptyDataSet emptyDataSet0 = new EmptyDataSet();
      dataSetViewerPropertyPanel0.show((IDataSet) emptyDataSet0, (IMessageHandler) null);
      assertEquals(true, dataSetViewerPropertyPanel0.getShowHeadings());
  }

  @Test
  public void test8()  throws Throwable  {
      DataSetViewerPropertyPanel dataSetViewerPropertyPanel0 = new DataSetViewerPropertyPanel();
      ResultSetDataSet resultSetDataSet0 = new ResultSetDataSet();
      NullMessageHandler nullMessageHandler0 = NullMessageHandler.getInstance();
      dataSetViewerPropertyPanel0.show((IDataSet) resultSetDataSet0, (IMessageHandler) nullMessageHandler0);
      assertEquals(true, dataSetViewerPropertyPanel0.getShowHeadings());
  }

  @Test
  public void test9()  throws Throwable  {
      DataSetViewerPropertyPanel dataSetViewerPropertyPanel0 = new DataSetViewerPropertyPanel();
      RenderingHints.Key renderingHints_Key0 = RenderingHints.KEY_INTERPOLATION;
      RenderingHints renderingHints0 = new RenderingHints(renderingHints_Key0, (Object) null);
      MapDataSet mapDataSet0 = new MapDataSet((Map<?, ?>) renderingHints0);
      // Undeclared exception!
      try {
        dataSetViewerPropertyPanel0.show((IDataSet) mapDataSet0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
