/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.dialects;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.List;
import net.sourceforge.squirrel_sql.fw.dialects.DatabaseObjectQualifier;
import net.sourceforge.squirrel_sql.fw.dialects.DialectType;
import net.sourceforge.squirrel_sql.fw.dialects.SqlGenerationPreferences;
import net.sourceforge.squirrel_sql.fw.dialects.TimesTenDialectExt;
import net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.IDatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.ITableInfo;
import net.sourceforge.squirrel_sql.fw.sql.TableColumnInfo;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TimesTenDialectExtEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        timesTenDialectExt0.getCreateSequenceSQL("'", "'", "'", "'", "'", "'", false, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Not yet implemented
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      // Undeclared exception!
      try {
        timesTenDialectExt0.getIndexStorageOptions();
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Not yet implemented
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      boolean boolean0 = timesTenDialectExt0.supportsAddForeignKeyConstraint();
      assertEquals(true, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("a20qAIvhM' H9=c>", "a20qAIvhM' H9=c>", "a20qAIvhM' H9=c>", "a20qAIvhM' H9=c>", 35, "hX1rd$", 35, 35, 35, 35, "a20qAIvhM' H9=c>", "hX1rd$", 35, 35, "a20qAIvhM' H9=c>");
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      try {
        timesTenDialectExt0.getColumnCommentAlterSQL(tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * TimesTen doesn't support column comments
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      boolean boolean0 = timesTenDialectExt0.supportsEmptyTables();
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      boolean boolean0 = timesTenDialectExt0.supportsDropSequence();
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        timesTenDialectExt0.getAlterSequenceSQL((String) null, (String) null, (String) null, (String) null, (String) null, (String) null, false, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Not yet implemented
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      boolean boolean0 = timesTenDialectExt0.supportsSequenceInformation();
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      boolean boolean0 = timesTenDialectExt0.supportsAlterSequence();
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      boolean boolean0 = timesTenDialectExt0.supportsAlterColumnNull();
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      boolean boolean0 = timesTenDialectExt0.supportsUpdate();
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        timesTenDialectExt0.getColumnNameAlterSQL((TableColumnInfo) null, (TableColumnInfo) null, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * TimesTen doesn't support altering a column's name
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      boolean boolean0 = timesTenDialectExt0.supportsDropColumn();
      assertEquals(true, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      boolean boolean0 = timesTenDialectExt0.supportsCreateTable();
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo((String) null, (String) null, (String) null, (String) null, 1985, (String) null, 1985, 1985, 1985, 1985, (String) null, (String) null, 1985, (-1), (String) null);
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier((String) null, (String) null);
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        timesTenDialectExt0.getColumnNullableAlterSQL(tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * TimesTen doesn't support altering a column's nullable attribute
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      // Undeclared exception!
      try {
        timesTenDialectExt0.getIndexAccessMethodsTypes();
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Not yet implemented
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("MYl1kYKs)", "MYl1kYKs)", "MYl1kYKs)", "MYl1kYKs)", 957, "MYl1kYKs)", 957, 957, (-1), 659, "MYl1kYKs)", "MYl1kYKs)", 957, 957, "MYl1kYKs)");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        timesTenDialectExt0.getColumnDefaultAlterSQL(tableColumnInfo0, (DatabaseObjectQualifier) null, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * TimesTen doesn't support altering a column's default value
         */
      }
  }

  @Test
  public void test17()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      boolean boolean0 = timesTenDialectExt0.supportsMultipleRowInserts();
      assertEquals(false, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      boolean boolean0 = timesTenDialectExt0.supportsCheckOptionsForViews();
      assertEquals(false, boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo((String) null, (String) null, (String) null, (String) null, (-1), (String) null, (-1), 63, (-1), 63, (String) null, (String) null, 63, 63, (String) null);
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String[] stringArray0 = timesTenDialectExt0.getAddColumnSQL(tableColumnInfo0, (DatabaseObjectQualifier) null, sqlGenerationPreferences0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test20()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      boolean boolean0 = timesTenDialectExt0.supportsInsertInto();
      assertEquals(false, boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      boolean boolean0 = timesTenDialectExt0.supportsDropConstraint();
      assertEquals(false, boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      boolean boolean0 = timesTenDialectExt0.supportsAlterColumnDefault();
      assertEquals(false, boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      boolean boolean0 = timesTenDialectExt0.supportsAlterColumnType();
      assertEquals(false, boolean0);
  }

  @Test
  public void test24()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      boolean boolean0 = timesTenDialectExt0.supportsRenameColumn();
      assertEquals(false, boolean0);
  }

  @Test
  public void test25()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("[,,QD|1l", "[,,QD|1l", "[,,QD|1l");
      boolean boolean0 = timesTenDialectExt0.canPasteTo((IDatabaseObjectInfo) databaseObjectInfo0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test26()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      int int0 = timesTenDialectExt0.getPrecisionDigits(1218, 1218);
      assertEquals(1218, int0);
  }

  @Test
  public void test27()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      boolean boolean0 = timesTenDialectExt0.supportsAddColumn();
      assertEquals(true, boolean0);
  }

  @Test
  public void test28()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        timesTenDialectExt0.getViewDefinitionSQL("[ENV] Extension directories (java.ext.dir): ", databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Not yet implemented
         */
      }
  }

  @Test
  public void test29()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      boolean boolean0 = timesTenDialectExt0.supportsRenameView();
      assertEquals(false, boolean0);
  }

  @Test
  public void test30()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      int int0 = timesTenDialectExt0.getColumnLength(1521, 1521);
      assertEquals(1521, int0);
  }

  @Test
  public void test31()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      boolean boolean0 = timesTenDialectExt0.supportsRenameTable();
      assertEquals(false, boolean0);
  }

  @Test
  public void test32()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        timesTenDialectExt0.getRenameViewSQL(";jQv k6W\"A(p", ";jQv k6W\"A(p", databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Not yet implemented
         */
      }
  }

  @Test
  public void test33()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      boolean boolean0 = timesTenDialectExt0.supportsCreateView();
      assertEquals(false, boolean0);
  }

  @Test
  public void test34()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      DialectType dialectType0 = timesTenDialectExt0.getDialectType();
      assertEquals("TIMESTEN", dialectType0.name());
  }

  @Test
  public void test35()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      int int0 = timesTenDialectExt0.getMaxScale(2);
      assertEquals(40, int0);
  }

  @Test
  public void test36()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        timesTenDialectExt0.getDropIndexSQL("timestencolumn", "timestencolumn", true, (DatabaseObjectQualifier) null, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Not yet implemented
         */
      }
  }

  @Test
  public void test37()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo(";{-", ";{-", ";{-", "|&vgg/$y0-W&yW", (-1), ";{-", (-1), (-1), (-1), (-1), ";{-", "T(uLa?OY\"5YDl}P-%y", (-1), 17, "T(uLa?OY\"5YDl}P-%y");
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier(";{-", "|&vgg/$y0-W&yW");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        timesTenDialectExt0.getAddAutoIncrementSQL(tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Not yet implemented
         */
      }
  }

  @Test
  public void test38()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      boolean boolean0 = timesTenDialectExt0.supportsCorrelatedSubQuery();
      assertEquals(false, boolean0);
  }

  @Test
  public void test39()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("jWMl9[%vF2vFH'snuR", "jWMl9[%vF2vFH'snuR", "jWMl9[%vF2vFH'snuR", "timestensed2", 0, "jWMl9[%vF2vFH'snuR", 1989, 1989, 1989, 1989, "timestensed2", "jWMl9[%vF2vFH'snuR", 0, 0, "timestensed2");
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("timestensed2", "timestensed2");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      try {
        timesTenDialectExt0.getColumnTypeAlterSQL(tableColumnInfo0, tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * TimesTen doesn't support altering a column's type attribute
         */
      }
  }

  @Test
  public void test40()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      boolean boolean0 = timesTenDialectExt0.supportsViewDefinition();
      assertEquals(false, boolean0);
  }

  @Test
  public void test41()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      boolean boolean0 = timesTenDialectExt0.supportsSchemasInTableDefinition();
      assertEquals(true, boolean0);
  }

  @Test
  public void test42()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("rw Fm=:eUnl s}CNW", "rw Fm=:eUnl s}CNW");
      // Undeclared exception!
      try {
        timesTenDialectExt0.getDropViewSQL("rw Fm=:eUnl s}CNW", false, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Not yet implemented
         */
      }
  }

  @Test
  public void test43()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      boolean boolean0 = timesTenDialectExt0.supportsAccessMethods();
      assertEquals(false, boolean0);
  }

  @Test
  public void test44()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = timesTenDialectExt0.getDropForeignKeySQL("21H2;\",|x@?", "", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("ALTER TABLE  DROP CONSTRAINT \"21H2;\",|x@?\"", string0);
  }

  @Test
  public void test45()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("x$%1", "x$%1");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        timesTenDialectExt0.getRenameTableSQL("x$%1", "x$%1", databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Not yet implemented
         */
      }
  }

  @Test
  public void test46()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      boolean boolean0 = timesTenDialectExt0.supportsDropIndex();
      assertEquals(false, boolean0);
  }

  @Test
  public void test47()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      boolean boolean0 = timesTenDialectExt0.supportsIndexes();
      assertEquals(false, boolean0);
  }

  @Test
  public void test48()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      boolean boolean0 = timesTenDialectExt0.supportsAddUniqueConstraint();
      assertEquals(false, boolean0);
  }

  @Test
  public void test49()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      boolean boolean0 = timesTenDialectExt0.supportsCreateIndex();
      assertEquals(false, boolean0);
  }

  @Test
  public void test50()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        timesTenDialectExt0.getTableDropSQL((ITableInfo) null, false, false, (DatabaseObjectQualifier) null, sqlGenerationPreferences0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test51()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = timesTenDialectExt0.getColumnDropSQL("21H2;\",|x@?", "21H2;\",|x@?", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("ALTER TABLE 21H2;\",|x@? DROP \"21H2;\",|x@?\"", string0);
      assertNotNull(string0);
  }

  @Test
  public void test52()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try {
        timesTenDialectExt0.getCreateIndexSQL("ALTER TABLE *b},hb<p DROP PRIMARY KEY", "*b},hb<p", "ALTER TABLE *b},hb<p DROP PRIMARY KEY", stringArray0, true, "*b},hb<p", (String) null, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Not yet implemented
         */
      }
  }

  @Test
  public void test53()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = timesTenDialectExt0.getDropPrimaryKeySQL("*b},hb<p", "*b},hb<p", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("ALTER TABLE *b},hb<p DROP PRIMARY KEY", string0);
      assertNotNull(string0);
  }

  @Test
  public void test54()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        timesTenDialectExt0.getCreateViewSQL("ZP26xLNFVSWa{^", "ZP26xLNFVSWa{^", "ZP26xLNFVSWa{^", databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Not yet implemented
         */
      }
  }

  @Test
  public void test55()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        timesTenDialectExt0.getDropConstraintSQL(",p8`4{rs<&!Sd~", "CGz8ha2B>", databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Not yet implemented
         */
      }
  }

  @Test
  public void test56()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      boolean boolean0 = timesTenDialectExt0.supportsColumnComment();
      assertEquals(false, boolean0);
  }

  @Test
  public void test57()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        timesTenDialectExt0.getSequenceInformationSQL("[,,QD|1l", (DatabaseObjectQualifier) null, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Not yet implemented
         */
      }
  }

  @Test
  public void test58()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      boolean boolean0 = timesTenDialectExt0.supportsSequence();
      assertEquals(false, boolean0);
  }

  @Test
  public void test59()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      boolean boolean0 = timesTenDialectExt0.supportsCreateSequence();
      assertEquals(false, boolean0);
  }

  @Test
  public void test60()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      boolean boolean0 = timesTenDialectExt0.supportsAutoIncrement();
      assertEquals(false, boolean0);
  }

  @Test
  public void test61()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      String[] stringArray0 = new String[6];
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("55^c", "55^c");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        timesTenDialectExt0.getUpdateSQL("55^c", stringArray0, stringArray0, stringArray0, stringArray0, stringArray0, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Not yet implemented
         */
      }
  }

  @Test
  public void test62()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      boolean boolean0 = timesTenDialectExt0.supportsTablespace();
      assertEquals(false, boolean0);
  }

  @Test
  public void test63()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      boolean boolean0 = timesTenDialectExt0.supportsDropView();
      assertEquals(false, boolean0);
  }

  @Test
  public void test64()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      // Undeclared exception!
      try {
        timesTenDialectExt0.getCreateTableSQL("Precision option (", (List<TableColumnInfo>) null, (List<TableColumnInfo>) null, sqlGenerationPreferences0, databaseObjectQualifier0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Not yet implemented
         */
      }
  }

  @Test
  public void test65()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      int int0 = timesTenDialectExt0.getMaxPrecision(6);
      assertEquals(53, int0);
  }

  @Test
  public void test66()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      boolean boolean0 = timesTenDialectExt0.supportsProduct("hX1rd$", "a20qAIvhM' H9=c>");
      assertEquals(false, boolean0);
  }

  @Test
  public void test67()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      boolean boolean0 = timesTenDialectExt0.supportsProduct((String) null, (String) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test68()  throws Throwable  {
      TimesTenDialectExt timesTenDialectExt0 = new TimesTenDialectExt();
      boolean boolean0 = timesTenDialectExt0.supportsProduct("timestensed2", "timestensed2");
      assertEquals(true, boolean0);
  }
}
