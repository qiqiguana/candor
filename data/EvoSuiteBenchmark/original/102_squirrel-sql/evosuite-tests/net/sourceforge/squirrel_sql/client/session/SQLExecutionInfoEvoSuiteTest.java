/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.client.session;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Date;
import net.sourceforge.squirrel_sql.client.session.SQLExecutionInfo;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SQLExecutionInfoEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SQLExecutionInfo sQLExecutionInfo0 = new SQLExecutionInfo(1646, "", 1646);
      assertNotNull(sQLExecutionInfo0);
      
      int int0 = sQLExecutionInfo0.getMaxRows();
      assertEquals(1646, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      SQLExecutionInfo sQLExecutionInfo0 = new SQLExecutionInfo((-1), "", 0);
      assertNotNull(sQLExecutionInfo0);
      
      Date date0 = sQLExecutionInfo0.getSQLExecutionStartTime();
      assertEquals(1372736653005L, date0.getTime());
      assertNotNull(date0);
  }

  @Test
  public void test2()  throws Throwable  {
      SQLExecutionInfo sQLExecutionInfo0 = new SQLExecutionInfo((-1), "", 0);
      assertNotNull(sQLExecutionInfo0);
      
      String string0 = sQLExecutionInfo0.getSQL();
      assertNotNull(string0);
      assertEquals(0, sQLExecutionInfo0.getMaxRows());
  }

  @Test
  public void test3()  throws Throwable  {
      SQLExecutionInfo sQLExecutionInfo0 = new SQLExecutionInfo(1960, "", 0);
      assertNotNull(sQLExecutionInfo0);
      
      sQLExecutionInfo0.getNumberResultRowsRead();
      assertEquals(0, sQLExecutionInfo0.getMaxRows());
  }

  @Test
  public void test4()  throws Throwable  {
      SQLExecutionInfo sQLExecutionInfo0 = new SQLExecutionInfo((-1), "", 0);
      assertNotNull(sQLExecutionInfo0);
      
      long long0 = sQLExecutionInfo0.getTotalElapsedMillis();
      assertEquals(0L, long0);
      assertEquals(0, sQLExecutionInfo0.getMaxRows());
  }

  @Test
  public void test5()  throws Throwable  {
      SQLExecutionInfo sQLExecutionInfo0 = null;
      try {
        sQLExecutionInfo0 = new SQLExecutionInfo(1, (String) null, 1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * SQL script == null
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      SQLExecutionInfo sQLExecutionInfo0 = new SQLExecutionInfo((-1), "", 0);
      assertNotNull(sQLExecutionInfo0);
      
      sQLExecutionInfo0.resultsProcessingComplete((-750));
      long long0 = sQLExecutionInfo0.getResultsProcessingElapsedMillis();
      assertEquals(0, sQLExecutionInfo0.getMaxRows());
      assertEquals(0L, long0);
  }

  @Test
  public void test7()  throws Throwable  {
      SQLExecutionInfo sQLExecutionInfo0 = new SQLExecutionInfo((-1), "", 0);
      assertNotNull(sQLExecutionInfo0);
      
      sQLExecutionInfo0.sqlExecutionComplete();
      sQLExecutionInfo0.resultsProcessingComplete(0);
      long long0 = sQLExecutionInfo0.getTotalElapsedMillis();
      assertEquals(0L, sQLExecutionInfo0.getSQLExecutionElapsedMillis());
      assertEquals(0, sQLExecutionInfo0.getMaxRows());
      assertEquals(0L, sQLExecutionInfo0.getTotalElapsedMillis());
      assertEquals(0L, long0);
  }
}
