/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.datasetviewer;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.File;
import java.util.Hashtable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import net.sourceforge.squirrel_sql.fw.datasetviewer.DataSetException;
import net.sourceforge.squirrel_sql.fw.datasetviewer.DataSetViewerTextFileDestination;
import net.sourceforge.squirrel_sql.fw.datasetviewer.HashtableDataSet;
import net.sourceforge.squirrel_sql.fw.datasetviewer.IDataSet;
import net.sourceforge.squirrel_sql.fw.util.IMessageHandler;
import net.sourceforge.squirrel_sql.fw.util.NullMessageHandler;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DataSetViewerTextFileDestinationEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          File file0 = new File("u", "u");
          DataSetViewerTextFileDestination dataSetViewerTextFileDestination0 = new DataSetViewerTextFileDestination(file0);
          assertNotNull(dataSetViewerTextFileDestination0);
          
          Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
          HashtableDataSet hashtableDataSet0 = new HashtableDataSet(hashtable0);
          NullMessageHandler nullMessageHandler0 = NullMessageHandler.getInstance();
          // Undeclared exception!
          try {
            dataSetViewerTextFileDestination0.show((IDataSet) hashtableDataSet0, (IMessageHandler) nullMessageHandler0);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission u/u write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:183)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:145)
             * java.io.FileWriter.<init>(FileWriter.java:73)
             * net.sourceforge.squirrel_sql.fw.datasetviewer.DataSetViewerTextFileDestination.getWriter(DataSetViewerTextFileDestination.java:121)
             * net.sourceforge.squirrel_sql.fw.datasetviewer.DataSetViewerTextFileDestination.closeWriter(DataSetViewerTextFileDestination.java:134)
             * net.sourceforge.squirrel_sql.fw.datasetviewer.DataSetViewerTextFileDestination.allRowsAdded(DataSetViewerTextFileDestination.java:95)
             * net.sourceforge.squirrel_sql.fw.datasetviewer.BaseDataSetViewerDestination.show(BaseDataSetViewerDestination.java:147)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
      File file0 = new File("u", "u");
      DataSetViewerTextFileDestination dataSetViewerTextFileDestination0 = new DataSetViewerTextFileDestination(file0);
      assertNotNull(dataSetViewerTextFileDestination0);
      
      int int0 = dataSetViewerTextFileDestination0.getRowCount();
      assertEquals(0, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      File file0 = new File("fc|yG_");
      DataSetViewerTextFileDestination dataSetViewerTextFileDestination0 = new DataSetViewerTextFileDestination(file0);
      assertNotNull(dataSetViewerTextFileDestination0);
      
      dataSetViewerTextFileDestination0.moveToTop();
      assertEquals(0, dataSetViewerTextFileDestination0.getRowCount());
  }

  @Test
  public void test3()  throws Throwable  {
      File file0 = new File("/1GjpD@");
      DataSetViewerTextFileDestination dataSetViewerTextFileDestination0 = new DataSetViewerTextFileDestination(file0);
      assertNotNull(dataSetViewerTextFileDestination0);
      
      // Undeclared exception!
      try {
        dataSetViewerTextFileDestination0.getComponent();
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * DataSetViewerTextFileDestination.getComponent()
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      DataSetViewerTextFileDestination dataSetViewerTextFileDestination0 = null;
      try {
        dataSetViewerTextFileDestination0 = new DataSetViewerTextFileDestination((File) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * File == null
         */
      }
  }
}
