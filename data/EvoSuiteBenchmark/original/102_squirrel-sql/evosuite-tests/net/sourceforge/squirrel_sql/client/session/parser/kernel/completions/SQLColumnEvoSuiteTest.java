/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.client.session.parser.kernel.completions;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.completions.SQLColumn;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.completions.SQLSelectStatement;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.completions.SQLStatementContext;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SQLColumnEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SQLColumn sQLColumn0 = new SQLColumn((SQLStatementContext) null);
      String string0 = sQLColumn0.getText(0);
      assertEquals(true, sQLColumn0.isRepeatable());
      assertNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      SQLColumn sQLColumn0 = new SQLColumn((SQLStatementContext) null);
      sQLColumn0.setColumn("?&3G%m;", 0);
      boolean boolean0 = sQLColumn0.isConcrete();
      assertEquals(true, sQLColumn0.isConcrete());
      assertEquals(true, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      SQLColumn sQLColumn0 = new SQLColumn((SQLStatementContext) null);
      sQLColumn0.setName("?&3G%m;");
      assertEquals(true, sQLColumn0.isRepeatable());
  }

  @Test
  public void test3()  throws Throwable  {
      SQLColumn sQLColumn0 = new SQLColumn((SQLStatementContext) null, (-1238));
      boolean boolean0 = sQLColumn0.isRepeatable();
      assertEquals(true, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      SQLColumn sQLColumn0 = new SQLColumn((SQLStatementContext) null, (-1238), 621);
      // Undeclared exception!
      try {
        sQLColumn0.getText((-1238), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
        /*
         * String index out of range: -1859
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(0);
      SQLColumn sQLColumn0 = new SQLColumn((SQLStatementContext) sQLSelectStatement0);
      sQLColumn0.getQualifier();
      assertEquals(true, sQLColumn0.isRepeatable());
  }

  @Test
  public void test6()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(758);
      SQLColumn sQLColumn0 = new SQLColumn((SQLStatementContext) sQLSelectStatement0);
      assertEquals(true, sQLColumn0.isRepeatable());
      
      sQLColumn0.setRepeatable(false);
      assertEquals(false, sQLColumn0.isRepeatable());
  }

  @Test
  public void test7()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(758);
      SQLColumn sQLColumn0 = new SQLColumn((SQLStatementContext) sQLSelectStatement0);
      sQLColumn0.getName();
      assertEquals(true, sQLColumn0.isRepeatable());
  }

  @Test
  public void test8()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement((-1504));
      SQLColumn sQLColumn0 = new SQLColumn((SQLStatementContext) sQLSelectStatement0, (-1504), (-1504));
      sQLColumn0.setQualifier(":");
      String string0 = sQLColumn0.getText(854, ":");
      assertEquals(1, sQLColumn0.getLength());
      assertNotNull(string0);
      assertEquals(true, sQLColumn0.isRepeatable());
      assertEquals(":.:", string0);
  }

  @Test
  public void test9()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement((-1504));
      SQLColumn sQLColumn0 = new SQLColumn((SQLStatementContext) sQLSelectStatement0, (-1504), (-1504));
      String[] stringArray0 = sQLColumn0.getCompletions((-1504));
      assertNotNull(stringArray0);
      assertEquals(1, sQLColumn0.getLength());
      assertEquals(true, sQLColumn0.isRepeatable());
  }

  @Test
  public void test10()  throws Throwable  {
      SQLColumn sQLColumn0 = new SQLColumn((SQLStatementContext) null, (-1238));
      sQLColumn0.setQualifier("", 621);
      boolean boolean0 = sQLColumn0.hasTable(917);
      assertEquals(1861, sQLColumn0.getLength());
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(133);
      SQLColumn sQLColumn0 = new SQLColumn((SQLStatementContext) sQLSelectStatement0, 133, 133);
      boolean boolean0 = sQLColumn0.hasTable(133);
      assertEquals(false, boolean0);
      assertEquals(true, sQLColumn0.isRepeatable());
      assertEquals(1, sQLColumn0.getLength());
  }

  @Test
  public void test12()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(0);
      SQLColumn sQLColumn0 = new SQLColumn((SQLStatementContext) sQLSelectStatement0);
      sQLColumn0.setQualifier("o<0C@Ut47", 0);
      boolean boolean0 = sQLColumn0.hasTable(0);
      assertEquals(12, sQLColumn0.getLength());
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(0);
      SQLColumn sQLColumn0 = new SQLColumn((SQLStatementContext) sQLSelectStatement0);
      sQLColumn0.setQualifier("supportsSchemasInTableDefinitions", 0);
      sQLColumn0.setColumn("supportsSchemasInTableDefinitions", 0);
      // Undeclared exception!
      try {
        sQLColumn0.hasTable(0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test14()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(133);
      SQLColumn sQLColumn0 = new SQLColumn((SQLStatementContext) sQLSelectStatement0, 133, 133);
      // Undeclared exception!
      try {
        sQLColumn0.getText();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test15()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(0);
      SQLColumn sQLColumn0 = new SQLColumn((SQLStatementContext) sQLSelectStatement0);
      sQLColumn0.setQualifier("o<0C@Ut47", 0);
      String string0 = sQLColumn0.getText();
      assertEquals(12, sQLColumn0.getLength());
      assertEquals("o<0C@Ut47.null", string0);
  }

  @Test
  public void test16()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(0);
      SQLColumn sQLColumn0 = new SQLColumn((SQLStatementContext) sQLSelectStatement0);
      boolean boolean0 = sQLColumn0.isConcrete();
      assertEquals(false, boolean0);
      assertEquals(true, sQLColumn0.isRepeatable());
  }

  @Test
  public void test17()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(133);
      SQLColumn sQLColumn0 = new SQLColumn((SQLStatementContext) sQLSelectStatement0, 133, 133);
      String string0 = sQLColumn0.getText(133, "S;-WAUSx;!^T");
      assertEquals(1, sQLColumn0.getLength());
      assertEquals(true, sQLColumn0.isRepeatable());
      assertEquals("S;-WAUSx;!^T", string0);
  }

  @Test
  public void test18()  throws Throwable  {
      SQLColumn sQLColumn0 = new SQLColumn((SQLStatementContext) null);
      sQLColumn0.setColumn("?&3G%m;", 0);
      String string0 = sQLColumn0.getText(0);
      assertEquals(8, sQLColumn0.getLength());
      assertEquals("?&3G%m;", string0);
  }

  @Test
  public void test19()  throws Throwable  {
      SQLColumn sQLColumn0 = new SQLColumn((SQLStatementContext) null, (-1238));
      sQLColumn0.setQualifier("", 621);
      // Undeclared exception!
      try {
        sQLColumn0.getText((-1238), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
        /*
         * String index out of range: -1859
         */
      }
  }

  @Test
  public void test20()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(133);
      SQLColumn sQLColumn0 = new SQLColumn((SQLStatementContext) sQLSelectStatement0, 133, 133);
      String string0 = sQLColumn0.getText((-2027), "S;-WAUSx;!^T");
      assertEquals("S;-WAUSx;!^T", string0);
      assertEquals(true, sQLColumn0.isRepeatable());
      assertEquals(1, sQLColumn0.getLength());
      assertNotNull(string0);
  }

  @Test
  public void test21()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement((-1504));
      SQLColumn sQLColumn0 = new SQLColumn((SQLStatementContext) sQLSelectStatement0, (-1504), (-1504));
      sQLColumn0.setQualifier(":");
      // Undeclared exception!
      try {
        sQLColumn0.getCompletions((-1504));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test22()  throws Throwable  {
      SQLColumn sQLColumn0 = new SQLColumn((SQLStatementContext) null);
      sQLColumn0.setColumn("?&3G%m;", 0);
      boolean boolean0 = sQLColumn0.mustReplace((-26));
      assertEquals(8, sQLColumn0.getLength());
      assertEquals(false, boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(0);
      SQLColumn sQLColumn0 = new SQLColumn((SQLStatementContext) sQLSelectStatement0);
      sQLColumn0.setColumn("", 0);
      boolean boolean0 = sQLColumn0.mustReplace(0);
      assertEquals(1, sQLColumn0.getLength());
      assertEquals(false, boolean0);
  }
}
