/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import net.sourceforge.squirrel_sql.fw.util.StringManager;
import net.sourceforge.squirrel_sql.fw.util.Utilities;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class UtilitiesEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      String string0 = Utilities.escapeHtmlChars("<span>");
      assertEquals("&lt;span&gt;", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      Utilities.garbageCollect();
  }

  @Test
  public void test2()  throws Throwable  {
      String string0 = Utilities.formatSize(0L);
      assertEquals("0 bytes", string0);
      assertNotNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      String string0 = (String)Utilities.cast((Object) ":");
      assertEquals(":", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Long long0 = (Long)Utilities.cloneObject((Object) 0L, classLoader0);
      assertEquals(0, long0.shortValue());
  }

  @Test
  public void test5()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1855);
      PrintStream printStream0 = new PrintStream((OutputStream) byteArrayOutputStream0, false);
      Utilities.printStackTrace(printStream0);
      assertEquals(1118, byteArrayOutputStream0.size());
      assertEquals("java.lang.Exception\n\tat net.sourceforge.squirrel_sql.fw.util.Utilities.printStackTrace(Utilities.java:78)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:597)\n\tat org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)\n\tat org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)\n\tat org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)\n\tat org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)\n\tat org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)\n\tat java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:138)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)\n\tat java.lang.Thread.run(Thread.java:662)\n\n", byteArrayOutputStream0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try {
        Utilities.printStackTrace((PrintStream) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * PrintStream == null
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      // Undeclared exception!
      try {
        Utilities.getStackTrace((Throwable) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Throwable == null
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      String string0 = Utilities.changeClassNameToFileName("ZK1^{>qi");
      assertNotNull(string0);
      assertEquals("ZK1^{>qi.class", string0);
  }

  @Test
  public void test9()  throws Throwable  {
      // Undeclared exception!
      try {
        Utilities.changeClassNameToFileName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Class Name == null
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = Utilities.changeFileNameToClassName("ZK1^{>qi.class");
      assertEquals("ZK1^{>qi", string0);
      assertNotNull(string0);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = Utilities.changeFileNameToClassName("Unexpected char [");
      assertNull(string0);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = Utilities.getFileNameSuffix("VWtZji.lut+.");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try {
        Utilities.getFileNameSuffix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * file name == null
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = Utilities.getFileNameSuffix("ZK1^{>qi");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = Utilities.getFileNameSuffix("VM 5R].U");
      assertEquals("U", string0);
      assertNotNull(string0);
  }

  @Test
  public void test16()  throws Throwable  {
      boolean boolean0 = Utilities.equalsRespectNull((Object) "", (Object) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      boolean boolean0 = Utilities.equalsRespectNull((Object) null, (Object) null);
      assertEquals(true, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      boolean boolean0 = Utilities.equalsRespectNull((Object) null, (Object) "");
      assertEquals(false, boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      boolean boolean0 = Utilities.equalsRespectNull((Object) "Korean", (Object) "ZK1^{>qi");
      assertEquals(false, boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = Utilities.removeFileNameSuffix("VM 5R].U");
      assertEquals("VM 5R]", string0);
      assertNotNull(string0);
  }

  @Test
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try {
        Utilities.removeFileNameSuffix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * file name == null
         */
      }
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = Utilities.removeFileNameSuffix("pgXCZuWxZ");
      assertEquals("pgXCZuWxZ", string0);
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = Utilities.formatSize(1073741824L, 0);
      assertNotNull(string0);
      assertEquals("1,024 MB", string0);
  }

  @Test
  public void test24()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Object object0 = Utilities.cloneObject((Object) null, classLoader0);
      assertNull(object0);
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = Utilities.replaceI18NSpanLine("DATE", (StringManager) null);
      assertEquals("DATE", string0);
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = Utilities.replaceI18NSpanLine("<span>", (StringManager) null);
      assertEquals("<span>", string0);
  }

  @Test
  public void test27()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try {
        Utilities.checkNull("java.protocol.handler.pkgs", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * java.protocol.handler.pkgs: Argument null cannot be null
         */
      }
  }

  @Test
  public void test28()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try {
        Utilities.checkNull((String) null, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Args must be specified in name/value pairs
         */
      }
  }

  @Test
  public void test29()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) "java.protocol.handler.pkgs";
      objectArray0[3] = (Object) "java.protocol.handler.pkgs";
      Utilities.checkNull("java.protocol.handler.pkgs", objectArray0);
  }

  @Test
  public void test30()  throws Throwable  {
      Utilities.sleep((-563L));
  }

  @Test
  public void test31()  throws Throwable  {
      Utilities.sleep((long) 0);
  }
}
