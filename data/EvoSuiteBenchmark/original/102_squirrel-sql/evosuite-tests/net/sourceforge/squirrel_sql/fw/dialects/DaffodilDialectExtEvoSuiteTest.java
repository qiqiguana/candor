/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.dialects;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import net.sourceforge.squirrel_sql.fw.dialects.DaffodilDialectExt;
import net.sourceforge.squirrel_sql.fw.dialects.DatabaseObjectQualifier;
import net.sourceforge.squirrel_sql.fw.dialects.DialectType;
import net.sourceforge.squirrel_sql.fw.dialects.SqlGenerationPreferences;
import net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.IDatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.TableColumnInfo;
import org.hibernate.HibernateException;
import org.hibernate.MappingException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DaffodilDialectExtEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("", "", "", "", 0, "", (-188), 0, 0, (-188), "", "", 0, 1775, "");
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("", "");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        daffodilDialectExt0.getColumnNameAlterSQL(tableColumnInfo0, tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Daffodil doesn't support altering a column's name
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      boolean boolean0 = daffodilDialectExt0.supportsAccessMethods();
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      boolean boolean0 = daffodilDialectExt0.supportsSequence();
      assertEquals(true, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      boolean boolean0 = daffodilDialectExt0.supportsDropIndex();
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      boolean boolean0 = daffodilDialectExt0.supportsDropView();
      assertEquals(true, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      String string0 = daffodilDialectExt0.getColumnDropSQL("Null 8x' vrgument.", "Null 8x' vrgument.", databaseObjectQualifier0, (SqlGenerationPreferences) null);
      assertEquals("ALTER TABLE Null 8x' vrgument. DROP COLUMN Null 8x' vrgument. CASCADE", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      boolean boolean0 = daffodilDialectExt0.supportsDropConstraint();
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      boolean boolean0 = daffodilDialectExt0.supportsAlterColumnNull();
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("]X^#)", "]X^#)");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String[] stringArray0 = daffodilDialectExt0.getAlterSequenceSQL("]X^#)", "]X^#)", "]X^#)", "]X^#)", "]X^#)", "]X^#)", true, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test9()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      boolean boolean0 = daffodilDialectExt0.supportsMultipleRowInserts();
      assertEquals(true, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      boolean boolean0 = daffodilDialectExt0.supportsEmptyTables();
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      DialectType dialectType0 = daffodilDialectExt0.getDialectType();
      assertEquals(DialectType.DAFFODIL, dialectType0);
  }

  @Test
  public void test12()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      boolean boolean0 = daffodilDialectExt0.supportsColumnComment();
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      boolean boolean0 = daffodilDialectExt0.supportsRenameColumn();
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("5v_;6csG'v~ bM%|+", "5v_;6csG'v~ bM%|+", "5v_;6csG'v~ bM%|+", "5v_;6csG'v~ bM%|+", (-832), "5v_;6csG'v~ bM%|+", (-832), 1424, (-832), 1424, "5v_;6csG'v~ bM%|+", "5v_;6csG'v~ bM%|+", (-832), 103, "5v_;6csG'v~ bM%|+");
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      try {
        daffodilDialectExt0.getColumnTypeAlterSQL(tableColumnInfo0, tableColumnInfo0, databaseObjectQualifier0, (SqlGenerationPreferences) null);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Daffodil doesn't support altering a column's type attribute
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier((String) null, "jxa");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        daffodilDialectExt0.getAddAutoIncrementSQL((TableColumnInfo) null, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Daffodil doesn't support adding auto increment constraints.
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[2];
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("cast() requires two arguments", "s~yC");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        daffodilDialectExt0.getAddUniqueConstraintSQL("cast() requires two arguments", "cast() requires two arguments", tableColumnInfoArray0, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test17()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("X", "X", "X", "X", 1402, "Assa@uGNzbq4}czI F", 1402, 1402, 1402, 1402, "Assa@uGNzbq4}czI F", "X", (-125), 1402, "Assa@uGNzbq4}czI F");
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      try {
        daffodilDialectExt0.getColumnCommentAlterSQL(tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Daffodil doesn't support column comments
         */
      }
  }

  @Test
  public void test18()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      boolean boolean0 = daffodilDialectExt0.supportsRenameTable();
      assertEquals(false, boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      boolean boolean0 = daffodilDialectExt0.supportsTablespace();
      assertEquals(false, boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      boolean boolean0 = daffodilDialectExt0.supportsCreateView();
      assertEquals(true, boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier((String) null, "jxa");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = daffodilDialectExt0.getDropForeignKeySQL("jxa", "jxa", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("ALTER TABLE \"jxa\".\"jxa\" DROP CONSTRAINT \"jxa\"", string0);
      assertNotNull(string0);
  }

  @Test
  public void test22()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("Found pr", "Found pr");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = daffodilDialectExt0.getCreateViewSQL("Found pr", "Found pr", "Found pr", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("CREATE VIEW \"Found pr\".\"Found pr\".\"Found pr\"\n AS Found pr", string0);
  }

  @Test
  public void test23()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("}3^-5>5", "}3^-5>5");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        daffodilDialectExt0.getAddColumnSQL((TableColumnInfo) null, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test24()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      boolean boolean0 = daffodilDialectExt0.supportsAddUniqueConstraint();
      assertEquals(true, boolean0);
  }

  @Test
  public void test25()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      boolean boolean0 = daffodilDialectExt0.supportsAutoIncrement();
      assertEquals(false, boolean0);
  }

  @Test
  public void test26()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        daffodilDialectExt0.getDropConstraintSQL("", "", (DatabaseObjectQualifier) null, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Daffodil doesn't support dropping constraints.
         */
      }
  }

  @Test
  public void test27()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      String[] stringArray0 = daffodilDialectExt0.getIndexAccessMethodsTypes();
      assertNull(stringArray0);
  }

  @Test
  public void test28()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      boolean boolean0 = daffodilDialectExt0.supportsAddColumn();
      assertEquals(true, boolean0);
  }

  @Test
  public void test29()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      boolean boolean0 = daffodilDialectExt0.supportsSubSecondTimestamps();
      assertEquals(false, boolean0);
  }

  @Test
  public void test30()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      boolean boolean0 = daffodilDialectExt0.supportsIndexes();
      assertEquals(true, boolean0);
  }

  @Test
  public void test31()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      try {
        daffodilDialectExt0.getTypeName(13, 13, 13, 13);
        fail("Expecting exception: MappingException");
      } catch(MappingException e) {
        /*
         * No Dialect mapping for JDBC type: 13
         */
      }
  }

  @Test
  public void test32()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      boolean boolean0 = daffodilDialectExt0.supportsDropColumn();
      assertEquals(true, boolean0);
  }

  @Test
  public void test33()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      String[] stringArray0 = daffodilDialectExt0.getIndexStorageOptions();
      assertNull(stringArray0);
  }

  @Test
  public void test34()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[2];
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("cast() requires two arguments", "s~yC");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        daffodilDialectExt0.getColumnNullableAlterSQL(tableColumnInfoArray0[0], databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Daffodil doesn't support altering a column's nullable attribute
         */
      }
  }

  @Test
  public void test35()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      boolean boolean0 = daffodilDialectExt0.supportsUpdate();
      assertEquals(true, boolean0);
  }

  @Test
  public void test36()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      boolean boolean0 = daffodilDialectExt0.supportsCreateIndex();
      assertEquals(true, boolean0);
  }

  @Test
  public void test37()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      boolean boolean0 = daffodilDialectExt0.supportsAlterColumnType();
      assertEquals(false, boolean0);
  }

  @Test
  public void test38()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      boolean boolean0 = daffodilDialectExt0.supportsAlterSequence();
      assertEquals(true, boolean0);
  }

  @Test
  public void test39()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      String string0 = daffodilDialectExt0.getAddColumnString();
      assertEquals("ADD COLUMN", string0);
  }

  @Test
  public void test40()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("A0#iYY#c", "gZ%g8<ef", "gZ%g8<ef", "A0#iYY#c", 1274, "gZ%g8<ef", 1274, 0, 0, 0, "A0#iYY#c", "A0#iYY#c", 0, 1380, "A0#iYY#c");
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("A0#iYY#c", "gZ%g8<ef");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = daffodilDialectExt0.getColumnDefaultAlterSQL(tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("ALTER TABLE \"A0#iYY#c\".\"gZ%g8<ef\".\"gZ%g8<ef\" ALTER COLUMN \"A0#iYY#c\"  SET DEFAULT 'A0#iYY#c'", string0);
  }

  @Test
  public void test41()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      boolean boolean0 = daffodilDialectExt0.supportsDropSequence();
      assertEquals(true, boolean0);
  }

  @Test
  public void test42()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      boolean boolean0 = daffodilDialectExt0.supportsAddForeignKeyConstraint();
      assertEquals(true, boolean0);
  }

  @Test
  public void test43()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      boolean boolean0 = daffodilDialectExt0.supportsCorrelatedSubQuery();
      assertEquals(true, boolean0);
  }

  @Test
  public void test44()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      boolean boolean0 = daffodilDialectExt0.supportsAlterColumnDefault();
      assertEquals(true, boolean0);
  }

  @Test
  public void test45()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      // Undeclared exception!
      try {
        daffodilDialectExt0.getRenameTableSQL("max", "max", (DatabaseObjectQualifier) null, (SqlGenerationPreferences) null);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Daffodil doesn't support renaming tables.
         */
      }
  }

  @Test
  public void test46()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("]X^#)", "]X^#)");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = daffodilDialectExt0.getDropViewSQL("]X^#)", true, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("DROP VIEW \"]X^#)\".\"]X^#)\".\"]X^#)\" CASCADE", string0);
  }

  @Test
  public void test47()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier((String) null, (String) null);
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        daffodilDialectExt0.getSequenceInformationSQL((String) null, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Daffodil doesn't support gathering sequence information.
         */
      }
  }

  @Test
  public void test48()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      boolean boolean0 = daffodilDialectExt0.supportsSequenceInformation();
      assertEquals(false, boolean0);
  }

  @Test
  public void test49()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        daffodilDialectExt0.getDropIndexSQL("Ej$*", "QsR'X", false, (DatabaseObjectQualifier) null, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Daffodil doesn't support dropping indexes.
         */
      }
  }

  @Test
  public void test50()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      boolean boolean0 = daffodilDialectExt0.supportsCreateSequence();
      assertEquals(true, boolean0);
  }

  @Test
  public void test51()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      boolean boolean0 = daffodilDialectExt0.supportsSchemasInTableDefinition();
      assertEquals(false, boolean0);
  }

  @Test
  public void test52()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("Assa@uGNzbq4}czI F", "Assa@uGNzbq4}czI F", "Assa@uGNzbq4}czI F");
      boolean boolean0 = daffodilDialectExt0.canPasteTo((IDatabaseObjectInfo) databaseObjectInfo0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test53()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      int int0 = daffodilDialectExt0.getMaxPrecision((-1844));
      assertEquals(0, int0);
  }

  @Test
  public void test54()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      int int0 = daffodilDialectExt0.getMaxPrecision(6);
      assertEquals(15, int0);
  }

  @Test
  public void test55()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      int int0 = daffodilDialectExt0.getMaxScale(2);
      assertEquals(38, int0);
  }

  @Test
  public void test56()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      boolean boolean0 = daffodilDialectExt0.supportsProduct("ALTER TABLE \"jxa\".\"jxa\" DROP CONSTRAINT \"jxa\"", "ALTER TABLE \"jxa\".\"jxa\" DROP CONSTRAINT \"jxa\"");
      assertEquals(false, boolean0);
  }

  @Test
  public void test57()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      boolean boolean0 = daffodilDialectExt0.supportsProduct("DaffodilALTER TABLE \"jxa\".\"jxa\" DROP CONSTRAINT \"jxa\"", "DaffodilALTER TABLE \"jxa\".\"jxa\" DROP CONSTRAINT \"jxa\"");
      assertEquals(true, boolean0);
  }

  @Test
  public void test58()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      String[] stringArray0 = new String[21];
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("GqOAE|V", "GqOAE|V");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = daffodilDialectExt0.getCreateIndexSQL("GqOAE|V", "GqOAE|V", "GqOAE|V", stringArray0, true, "GqOAE|V", "GqOAE|V", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("CREATE  INDEX \"GqOAE|V\".\"GqOAE|V\".\"GqOAE|V\" ON \"GqOAE|V\".\"GqOAE|V\".\"GqOAE|V\"(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null)", string0);
  }

  @Test
  public void test59()  throws Throwable  {
      DaffodilDialectExt daffodilDialectExt0 = new DaffodilDialectExt();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      String string0 = daffodilDialectExt0.getDropPrimaryKeySQL("]X^#)", "]X^#)", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("ALTER TABLE \"]X^#)\" DROP CONSTRAINT \"]X^#)\" CASCADE", string0);
  }
}
