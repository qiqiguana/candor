/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.client.util.codereformat;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import net.sourceforge.squirrel_sql.client.util.codereformat.PieceMarkerSpec;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PieceMarkerSpecEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      PieceMarkerSpec pieceMarkerSpec0 = new PieceMarkerSpec("", 0);
      assertNotNull(pieceMarkerSpec0);
      
      String string0 = pieceMarkerSpec0.getPieceMarker();
      assertNotNull(string0);
      assertEquals(0, pieceMarkerSpec0.getType());
  }

  @Test
  public void test1()  throws Throwable  {
      PieceMarkerSpec pieceMarkerSpec0 = new PieceMarkerSpec("", 0);
      assertNotNull(pieceMarkerSpec0);
      
      int int0 = pieceMarkerSpec0.getType();
      assertEquals(0, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      PieceMarkerSpec pieceMarkerSpec0 = null;
      try {
        pieceMarkerSpec0 = new PieceMarkerSpec("", (-1250));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Unknow type: -1250
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      PieceMarkerSpec pieceMarkerSpec0 = new PieceMarkerSpec("]%;", 1);
      assertNotNull(pieceMarkerSpec0);
      assertEquals(1, pieceMarkerSpec0.getType());
  }

  @Test
  public void test4()  throws Throwable  {
      PieceMarkerSpec pieceMarkerSpec0 = new PieceMarkerSpec("Y.8", 2);
      assertNotNull(pieceMarkerSpec0);
      assertEquals(2, pieceMarkerSpec0.getType());
  }

  @Test
  public void test5()  throws Throwable  {
      PieceMarkerSpec pieceMarkerSpec0 = new PieceMarkerSpec("]%;", 0);
      assertNotNull(pieceMarkerSpec0);
      
      int int0 = pieceMarkerSpec0.getLengthRightSpaced();
      assertEquals(4, int0);
      assertEquals(0, pieceMarkerSpec0.getType());
  }

  @Test
  public void test6()  throws Throwable  {
      PieceMarkerSpec pieceMarkerSpec0 = new PieceMarkerSpec(" ", 0);
      assertNotNull(pieceMarkerSpec0);
      
      int int0 = pieceMarkerSpec0.getLengthRightSpaced();
      assertEquals(0, pieceMarkerSpec0.getType());
      assertEquals(1, int0);
  }

  @Test
  public void test7()  throws Throwable  {
      PieceMarkerSpec pieceMarkerSpec0 = new PieceMarkerSpec("]%;", 0);
      assertNotNull(pieceMarkerSpec0);
      
      String string0 = pieceMarkerSpec0.getLeftSpace();
      assertNotNull(string0);
      assertEquals(0, pieceMarkerSpec0.getType());
      assertEquals(" ", string0);
  }

  @Test
  public void test8()  throws Throwable  {
      PieceMarkerSpec pieceMarkerSpec0 = new PieceMarkerSpec(" ", 0);
      assertNotNull(pieceMarkerSpec0);
      
      String string0 = pieceMarkerSpec0.getLeftSpace();
      assertEquals("", string0);
      assertEquals(0, pieceMarkerSpec0.getType());
      assertNotNull(string0);
  }

  @Test
  public void test9()  throws Throwable  {
      PieceMarkerSpec pieceMarkerSpec0 = new PieceMarkerSpec("]%;", 0);
      assertNotNull(pieceMarkerSpec0);
      
      boolean boolean0 = pieceMarkerSpec0.needsSuroundingWhiteSpaces();
      assertEquals(true, boolean0);
      assertEquals(0, pieceMarkerSpec0.getType());
  }

  @Test
  public void test10()  throws Throwable  {
      PieceMarkerSpec pieceMarkerSpec0 = new PieceMarkerSpec(" ", 0);
      assertNotNull(pieceMarkerSpec0);
      
      boolean boolean0 = pieceMarkerSpec0.needsSuroundingWhiteSpaces();
      assertEquals(0, pieceMarkerSpec0.getType());
      assertEquals(false, boolean0);
  }
}
