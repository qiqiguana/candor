/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.gui;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.awt.Frame;
import java.awt.Window;
import javax.swing.JInternalFrame;
import net.sourceforge.squirrel_sql.fw.gui.WindowState;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class WindowStateEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      WindowState windowState0 = new WindowState((Window) null);
      windowState0.aboutToBeWritten();
      assertEquals(0, windowState0.getFrameExtendedState());
      assertEquals(true, windowState0.isVisible());
  }

  @Test
  public void test1()  throws Throwable  {
      WindowState windowState0 = new WindowState();
      windowState0.copyFrom(windowState0);
      assertEquals(true, windowState0.isVisible());
      assertEquals(0, windowState0.getFrameExtendedState());
  }

  @Test
  public void test2()  throws Throwable  {
      WindowState windowState0 = new WindowState((Frame) null);
      assertEquals(true, windowState0.isVisible());
      assertEquals(0, windowState0.getFrameExtendedState());
  }

  @Test
  public void test3()  throws Throwable  {
      WindowState windowState0 = new WindowState();
      // Undeclared exception!
      try {
        windowState0.copyFrom((WindowState) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * WindowState == null
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      WindowState windowState0 = new WindowState();
      assertEquals(true, windowState0.isVisible());
      
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      WindowState windowState1 = new WindowState(jInternalFrame0);
      windowState0.copyFrom(windowState1);
      assertEquals(false, windowState0.isVisible());
      assertEquals(false, windowState1.isVisible());
  }
}
