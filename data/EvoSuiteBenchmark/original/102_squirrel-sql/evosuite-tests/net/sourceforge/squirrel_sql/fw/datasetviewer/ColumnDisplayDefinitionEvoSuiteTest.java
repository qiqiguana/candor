/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.datasetviewer;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import net.sourceforge.squirrel_sql.fw.datasetviewer.ColumnDisplayDefinition;
import net.sourceforge.squirrel_sql.fw.dialects.DialectType;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ColumnDisplayDefinitionEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-1245), "");
      assertNotNull(columnDisplayDefinition0);
      
      int int0 = columnDisplayDefinition0.getScale();
      assertEquals(0, columnDisplayDefinition0.getDisplayWidth());
      assertEquals(false, columnDisplayDefinition0.isAutoIncrement());
      assertEquals(" ", columnDisplayDefinition0.getLabel());
      assertEquals(0, int0);
      assertEquals(true, columnDisplayDefinition0.isSigned());
      assertEquals(0, columnDisplayDefinition0.getPrecision());
      assertEquals("[ columnName=, sqlType=0, sqlTypeName=null, dialectType=GENERIC ]", columnDisplayDefinition0.toString());
      assertEquals(true, columnDisplayDefinition0.isNullable());
      assertEquals(0, columnDisplayDefinition0.getColumnSize());
      assertEquals(false, columnDisplayDefinition0.isCurrency());
  }

  @Test
  public void test1()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-23), "%P");
      assertNotNull(columnDisplayDefinition0);
      
      int int0 = columnDisplayDefinition0.getColumnSize();
      assertEquals(false, columnDisplayDefinition0.isAutoIncrement());
      assertEquals("%P", columnDisplayDefinition0.getLabel());
      assertEquals(0, int0);
      assertEquals(0, columnDisplayDefinition0.getPrecision());
      assertEquals(true, columnDisplayDefinition0.isNullable());
      assertEquals(false, columnDisplayDefinition0.isCurrency());
      assertEquals(2, columnDisplayDefinition0.getDisplayWidth());
      assertEquals(0, columnDisplayDefinition0.getScale());
      assertEquals("[ columnName=%P, sqlType=0, sqlTypeName=null, dialectType=GENERIC ]", columnDisplayDefinition0.toString());
      assertEquals(true, columnDisplayDefinition0.isSigned());
  }

  @Test
  public void test2()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-5), "dataType2tring.newine'");
      assertNotNull(columnDisplayDefinition0);
      assertEquals("[ columnName=dataType2tring.newine', sqlType=0, sqlTypeName=null, dialectType=GENERIC ]", columnDisplayDefinition0.toString());
      
      columnDisplayDefinition0.setColumnName((String) null);
      assertEquals(0, columnDisplayDefinition0.getColumnSize());
  }

  @Test
  public void test3()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-23), "%P");
      assertNotNull(columnDisplayDefinition0);
      
      String string0 = columnDisplayDefinition0.getClassName();
      assertEquals(0, columnDisplayDefinition0.getColumnSize());
      assertEquals("%P", columnDisplayDefinition0.getLabel());
      assertEquals("[ columnName=%P, sqlType=0, sqlTypeName=null, dialectType=GENERIC ]", columnDisplayDefinition0.toString());
      assertEquals(0, columnDisplayDefinition0.getPrecision());
      assertEquals(true, columnDisplayDefinition0.isNullable());
      assertNotNull(string0);
      assertEquals(2, columnDisplayDefinition0.getDisplayWidth());
      assertEquals(0, columnDisplayDefinition0.getScale());
      assertEquals(false, columnDisplayDefinition0.isAutoIncrement());
      assertEquals("java.lang.Object", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      DialectType dialectType0 = DialectType.INFORMIX;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(91, "4C=z[CZ", "4C=z[CZ", "4C=z[CZ", 91, "4C=z[CZ", false, 765, 91, 91, false, false, false, dialectType0);
      columnDisplayDefinition0.isCurrency();
      assertEquals("4C=z[CZ", columnDisplayDefinition0.getLabel());
      assertEquals(91, columnDisplayDefinition0.getPrecision());
      assertEquals(765, columnDisplayDefinition0.getColumnSize());
      assertEquals(false, columnDisplayDefinition0.isNullable());
      assertEquals(91, columnDisplayDefinition0.getDisplayWidth());
      assertEquals(false, columnDisplayDefinition0.isSigned());
      assertEquals(91, columnDisplayDefinition0.getSqlType());
      assertEquals(91, columnDisplayDefinition0.getScale());
  }

  @Test
  public void test5()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-23), "%P");
      assertNotNull(columnDisplayDefinition0);
      
      String string0 = columnDisplayDefinition0.getLabel();
      assertEquals(false, columnDisplayDefinition0.isAutoIncrement());
      assertEquals(false, columnDisplayDefinition0.isCurrency());
      assertEquals("%P", string0);
      assertEquals(0, columnDisplayDefinition0.getPrecision());
      assertEquals(2, columnDisplayDefinition0.getDisplayWidth());
      assertEquals("[ columnName=%P, sqlType=0, sqlTypeName=null, dialectType=GENERIC ]", columnDisplayDefinition0.toString());
      assertEquals(true, columnDisplayDefinition0.isSigned());
      assertEquals(0, columnDisplayDefinition0.getScale());
      assertEquals(true, columnDisplayDefinition0.isNullable());
      assertEquals(0, columnDisplayDefinition0.getColumnSize());
      assertNotNull(string0);
  }

  @Test
  public void test6()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-5), "dataType2tring.newine'");
      assertNotNull(columnDisplayDefinition0);
      
      boolean boolean0 = columnDisplayDefinition0.isNullable();
      assertEquals(true, columnDisplayDefinition0.isSigned());
      assertEquals(false, columnDisplayDefinition0.isCurrency());
      assertEquals("[ columnName=dataType2tring.newine', sqlType=0, sqlTypeName=null, dialectType=GENERIC ]", columnDisplayDefinition0.toString());
      assertEquals(22, columnDisplayDefinition0.getDisplayWidth());
      assertEquals("dataType2tring.newine'", columnDisplayDefinition0.getLabel());
      assertEquals(0, columnDisplayDefinition0.getColumnSize());
      assertEquals(true, boolean0);
      assertEquals(0, columnDisplayDefinition0.getScale());
      assertEquals(0, columnDisplayDefinition0.getPrecision());
      assertEquals(false, columnDisplayDefinition0.isAutoIncrement());
  }

  @Test
  public void test7()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-5), "dataType2tring.newine'");
      assertNotNull(columnDisplayDefinition0);
      
      columnDisplayDefinition0.setAsoluteWidth((Integer) (-5));
      assertEquals("dataType2tring.newine'", columnDisplayDefinition0.getLabel());
      assertEquals(22, columnDisplayDefinition0.getDisplayWidth());
      assertEquals(0, columnDisplayDefinition0.getColumnSize());
      assertEquals(0, columnDisplayDefinition0.getScale());
      assertEquals(true, columnDisplayDefinition0.isSigned());
      assertEquals(false, columnDisplayDefinition0.isCurrency());
      assertEquals(false, columnDisplayDefinition0.isAutoIncrement());
      assertEquals("[ columnName=dataType2tring.newine', sqlType=0, sqlTypeName=null, dialectType=GENERIC ]", columnDisplayDefinition0.toString());
      assertEquals(0, columnDisplayDefinition0.getPrecision());
      assertEquals(true, columnDisplayDefinition0.isNullable());
  }

  @Test
  public void test8()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-54), "] cannot be instantiated due to acHess restrictions");
      assertNotNull(columnDisplayDefinition0);
      
      columnDisplayDefinition0.getAbsoluteWidth();
      assertEquals(51, columnDisplayDefinition0.getDisplayWidth());
      assertEquals(0, columnDisplayDefinition0.getColumnSize());
      assertEquals(false, columnDisplayDefinition0.isCurrency());
      assertEquals(0, columnDisplayDefinition0.getScale());
      assertEquals("[ columnName=] cannot be instantiated due to acHess restrictions, sqlType=0, sqlTypeName=null, dialectType=GENERIC ]", columnDisplayDefinition0.toString());
      assertEquals(0, columnDisplayDefinition0.getPrecision());
      assertEquals(false, columnDisplayDefinition0.isAutoIncrement());
      assertEquals(true, columnDisplayDefinition0.isSigned());
      assertEquals(true, columnDisplayDefinition0.isNullable());
      assertEquals("] cannot be instantiated due to acHess restrictions", columnDisplayDefinition0.getLabel());
  }

  @Test
  public void test9()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-5), "dataType2tring.newine'");
      assertNotNull(columnDisplayDefinition0);
      
      int int0 = columnDisplayDefinition0.getDisplayWidth();
      assertEquals(true, columnDisplayDefinition0.isNullable());
      assertEquals(22, int0);
      assertEquals(false, columnDisplayDefinition0.isCurrency());
      assertEquals(0, columnDisplayDefinition0.getColumnSize());
      assertEquals(true, columnDisplayDefinition0.isSigned());
      assertEquals(0, columnDisplayDefinition0.getPrecision());
      assertEquals("[ columnName=dataType2tring.newine', sqlType=0, sqlTypeName=null, dialectType=GENERIC ]", columnDisplayDefinition0.toString());
      assertEquals(0, columnDisplayDefinition0.getScale());
      assertEquals("dataType2tring.newine'", columnDisplayDefinition0.getLabel());
      assertEquals(false, columnDisplayDefinition0.isAutoIncrement());
  }

  @Test
  public void test10()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-5), "dataType2tring.newine'");
      assertNotNull(columnDisplayDefinition0);
      
      columnDisplayDefinition0.getDialectType();
      assertEquals(0, columnDisplayDefinition0.getPrecision());
      assertEquals(false, columnDisplayDefinition0.isAutoIncrement());
      assertEquals(true, columnDisplayDefinition0.isSigned());
      assertEquals("dataType2tring.newine'", columnDisplayDefinition0.getLabel());
      assertEquals(22, columnDisplayDefinition0.getDisplayWidth());
      assertEquals("[ columnName=dataType2tring.newine', sqlType=0, sqlTypeName=null, dialectType=GENERIC ]", columnDisplayDefinition0.toString());
      assertEquals(false, columnDisplayDefinition0.isCurrency());
      assertEquals(true, columnDisplayDefinition0.isNullable());
      assertEquals(0, columnDisplayDefinition0.getColumnSize());
      assertEquals(0, columnDisplayDefinition0.getScale());
  }

  @Test
  public void test11()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-5), "dataType2tring.newine'");
      assertNotNull(columnDisplayDefinition0);
      
      boolean boolean0 = columnDisplayDefinition0.isAutoIncrement();
      assertEquals(0, columnDisplayDefinition0.getColumnSize());
      assertEquals("[ columnName=dataType2tring.newine', sqlType=0, sqlTypeName=null, dialectType=GENERIC ]", columnDisplayDefinition0.toString());
      assertEquals(true, columnDisplayDefinition0.isNullable());
      assertEquals("dataType2tring.newine'", columnDisplayDefinition0.getLabel());
      assertEquals(0, columnDisplayDefinition0.getPrecision());
      assertEquals(false, columnDisplayDefinition0.isCurrency());
      assertEquals(0, columnDisplayDefinition0.getScale());
      assertEquals(false, boolean0);
      assertEquals(22, columnDisplayDefinition0.getDisplayWidth());
      assertEquals(true, columnDisplayDefinition0.isSigned());
  }

  @Test
  public void test12()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-23), "%P");
      assertNotNull(columnDisplayDefinition0);
      
      String string0 = columnDisplayDefinition0.getColumnHeading();
      assertEquals(0, columnDisplayDefinition0.getColumnSize());
      assertEquals(false, columnDisplayDefinition0.isCurrency());
      assertNotNull(string0);
      assertEquals(0, columnDisplayDefinition0.getScale());
      assertEquals(0, columnDisplayDefinition0.getPrecision());
      assertEquals(true, columnDisplayDefinition0.isNullable());
      assertEquals("[ columnName=%P, sqlType=0, sqlTypeName=null, dialectType=GENERIC ]", columnDisplayDefinition0.toString());
      assertEquals(true, columnDisplayDefinition0.isSigned());
      assertEquals("%P", columnDisplayDefinition0.getLabel());
      assertEquals(2, columnDisplayDefinition0.getDisplayWidth());
      assertEquals(false, columnDisplayDefinition0.isAutoIncrement());
  }

  @Test
  public void test13()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-5), "dataType2tring.newine'");
      assertNotNull(columnDisplayDefinition0);
      
      boolean boolean0 = columnDisplayDefinition0.isSigned();
      assertEquals("dataType2tring.newine'", columnDisplayDefinition0.getLabel());
      assertEquals(true, columnDisplayDefinition0.isNullable());
      assertEquals(true, boolean0);
      assertEquals(false, columnDisplayDefinition0.isCurrency());
      assertEquals(22, columnDisplayDefinition0.getDisplayWidth());
      assertEquals(false, columnDisplayDefinition0.isAutoIncrement());
      assertEquals(0, columnDisplayDefinition0.getColumnSize());
      assertEquals("[ columnName=dataType2tring.newine', sqlType=0, sqlTypeName=null, dialectType=GENERIC ]", columnDisplayDefinition0.toString());
      assertEquals(0, columnDisplayDefinition0.getScale());
      assertEquals(0, columnDisplayDefinition0.getPrecision());
  }

  @Test
  public void test14()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-54), "] cannot be instantiated due to acHess restrictions");
      assertNotNull(columnDisplayDefinition0);
      assertEquals(0, columnDisplayDefinition0.getSqlType());
      
      columnDisplayDefinition0.setSqlType((-54));
      assertEquals(51, columnDisplayDefinition0.getDisplayWidth());
  }

  @Test
  public void test15()  throws Throwable  {
      DialectType dialectType0 = DialectType.ORACLE;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(7, "");
      assertNotNull(columnDisplayDefinition0);
      
      columnDisplayDefinition0.setDialectType(dialectType0);
      assertEquals("[ columnName=, sqlType=0, sqlTypeName=null, dialectType=ORACLE ]", columnDisplayDefinition0.toString());
      assertEquals(0, columnDisplayDefinition0.getColumnSize());
  }

  @Test
  public void test16()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-23), "%P");
      assertNotNull(columnDisplayDefinition0);
      
      int int0 = columnDisplayDefinition0.getPrecision();
      assertEquals(0, columnDisplayDefinition0.getColumnSize());
      assertEquals(true, columnDisplayDefinition0.isNullable());
      assertEquals("[ columnName=%P, sqlType=0, sqlTypeName=null, dialectType=GENERIC ]", columnDisplayDefinition0.toString());
      assertEquals(true, columnDisplayDefinition0.isSigned());
      assertEquals(0, columnDisplayDefinition0.getScale());
      assertEquals("%P", columnDisplayDefinition0.getLabel());
      assertEquals(2, columnDisplayDefinition0.getDisplayWidth());
      assertEquals(false, columnDisplayDefinition0.isCurrency());
      assertEquals(false, columnDisplayDefinition0.isAutoIncrement());
      assertEquals(0, int0);
  }

  @Test
  public void test17()  throws Throwable  {
      DialectType dialectType0 = DialectType.INFORMIX;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(91, "4C=z[CZ", "4C=z[CZ", "4C=z[CZ", 91, "4C=z[CZ", false, 765, 91, 91, false, false, false, dialectType0);
      columnDisplayDefinition0.setIsAutoIncrement(false);
      assertEquals(false, columnDisplayDefinition0.isSigned());
      assertEquals(false, columnDisplayDefinition0.isAutoIncrement());
      assertEquals(91, columnDisplayDefinition0.getPrecision());
      assertEquals(765, columnDisplayDefinition0.getColumnSize());
      assertEquals("4C=z[CZ", columnDisplayDefinition0.getLabel());
      assertEquals(false, columnDisplayDefinition0.isNullable());
      assertEquals("java.sql.Date", columnDisplayDefinition0.getClassName());
      assertEquals(91, columnDisplayDefinition0.getScale());
      assertEquals(91, columnDisplayDefinition0.getDisplayWidth());
      assertEquals("[ columnName=4C=z[CZ, sqlType=91, sqlTypeName=4C=z[CZ, dialectType=INFORMIX ]", columnDisplayDefinition0.toString());
  }

  @Test
  public void test18()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-5), "dataType2tring.newine'");
      assertNotNull(columnDisplayDefinition0);
      
      columnDisplayDefinition0.setUserProperty("dataType2tring.newine'");
      assertEquals(0, columnDisplayDefinition0.getColumnSize());
      assertEquals(0, columnDisplayDefinition0.getPrecision());
      assertEquals(0, columnDisplayDefinition0.getScale());
      assertEquals("[ columnName=dataType2tring.newine', sqlType=0, sqlTypeName=null, dialectType=GENERIC ]", columnDisplayDefinition0.toString());
      assertEquals(false, columnDisplayDefinition0.isAutoIncrement());
      assertEquals(22, columnDisplayDefinition0.getDisplayWidth());
      assertEquals("dataType2tring.newine'", columnDisplayDefinition0.getLabel());
      assertEquals(true, columnDisplayDefinition0.isSigned());
      assertEquals(false, columnDisplayDefinition0.isCurrency());
      assertEquals(true, columnDisplayDefinition0.isNullable());
  }

  @Test
  public void test19()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-54), "] cannot be instantiated due to acHess restrictions");
      assertNotNull(columnDisplayDefinition0);
      
      columnDisplayDefinition0.getSqlTypeName();
      assertEquals(51, columnDisplayDefinition0.getDisplayWidth());
      assertEquals(true, columnDisplayDefinition0.isNullable());
      assertEquals(0, columnDisplayDefinition0.getScale());
      assertEquals(true, columnDisplayDefinition0.isSigned());
      assertEquals(0, columnDisplayDefinition0.getPrecision());
      assertEquals(0, columnDisplayDefinition0.getColumnSize());
      assertEquals("[ columnName=] cannot be instantiated due to acHess restrictions, sqlType=0, sqlTypeName=null, dialectType=GENERIC ]", columnDisplayDefinition0.toString());
      assertEquals(false, columnDisplayDefinition0.isAutoIncrement());
      assertEquals("] cannot be instantiated due to acHess restrictions", columnDisplayDefinition0.getLabel());
      assertEquals(false, columnDisplayDefinition0.isCurrency());
  }

  @Test
  public void test20()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-5), "dataType2tring.newine'");
      assertNotNull(columnDisplayDefinition0);
      
      columnDisplayDefinition0.setIsNullable(true);
      assertEquals(0, columnDisplayDefinition0.getColumnSize());
      assertEquals(true, columnDisplayDefinition0.isSigned());
      assertEquals("dataType2tring.newine'", columnDisplayDefinition0.getLabel());
      assertEquals(false, columnDisplayDefinition0.isAutoIncrement());
      assertEquals("[ columnName=dataType2tring.newine', sqlType=0, sqlTypeName=null, dialectType=GENERIC ]", columnDisplayDefinition0.toString());
      assertEquals(true, columnDisplayDefinition0.isNullable());
      assertEquals(0, columnDisplayDefinition0.getScale());
      assertEquals(false, columnDisplayDefinition0.isCurrency());
      assertEquals(22, columnDisplayDefinition0.getDisplayWidth());
      assertEquals(0, columnDisplayDefinition0.getPrecision());
  }

  @Test
  public void test21()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-5), "dataType2tring.newine'");
      assertNotNull(columnDisplayDefinition0);
      
      columnDisplayDefinition0.getUserProperty();
      assertEquals(0, columnDisplayDefinition0.getColumnSize());
      assertEquals(0, columnDisplayDefinition0.getPrecision());
      assertEquals(22, columnDisplayDefinition0.getDisplayWidth());
      assertEquals("[ columnName=dataType2tring.newine', sqlType=0, sqlTypeName=null, dialectType=GENERIC ]", columnDisplayDefinition0.toString());
      assertEquals(0, columnDisplayDefinition0.getScale());
      assertEquals(true, columnDisplayDefinition0.isSigned());
      assertEquals(false, columnDisplayDefinition0.isCurrency());
      assertEquals(true, columnDisplayDefinition0.isNullable());
      assertEquals(false, columnDisplayDefinition0.isAutoIncrement());
      assertEquals("dataType2tring.newine'", columnDisplayDefinition0.getLabel());
  }

  @Test
  public void test22()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-5), "dataType2tring.newine'");
      assertEquals("[ columnName=dataType2tring.newine', sqlType=0, sqlTypeName=null, dialectType=GENERIC ]", columnDisplayDefinition0.toString());
      assertNotNull(columnDisplayDefinition0);
      
      columnDisplayDefinition0.setSqlTypeName("dataType2tring.newine'");
      assertEquals("dataType2tring.newine'", columnDisplayDefinition0.getLabel());
  }

  @Test
  public void test23()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-1245), "");
      assertNotNull(columnDisplayDefinition0);
      
      columnDisplayDefinition0.getTableName();
      assertEquals(true, columnDisplayDefinition0.isSigned());
      assertEquals(" ", columnDisplayDefinition0.getLabel());
      assertEquals("[ columnName=, sqlType=0, sqlTypeName=null, dialectType=GENERIC ]", columnDisplayDefinition0.toString());
      assertEquals(true, columnDisplayDefinition0.isNullable());
      assertEquals(0, columnDisplayDefinition0.getPrecision());
      assertEquals(0, columnDisplayDefinition0.getScale());
      assertEquals(0, columnDisplayDefinition0.getColumnSize());
      assertEquals(false, columnDisplayDefinition0.isCurrency());
      assertEquals(false, columnDisplayDefinition0.isAutoIncrement());
      assertEquals(0, columnDisplayDefinition0.getDisplayWidth());
  }

  @Test
  public void test24()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-5), (String) null);
      assertEquals(false, columnDisplayDefinition0.isAutoIncrement());
      assertEquals(0, columnDisplayDefinition0.getColumnSize());
      assertEquals("[ columnName=null, sqlType=0, sqlTypeName=null, dialectType=GENERIC ]", columnDisplayDefinition0.toString());
      assertEquals(0, columnDisplayDefinition0.getScale());
      assertNotNull(columnDisplayDefinition0);
      assertEquals(true, columnDisplayDefinition0.isSigned());
      assertEquals(0, columnDisplayDefinition0.getPrecision());
      assertEquals(false, columnDisplayDefinition0.isCurrency());
      assertEquals(true, columnDisplayDefinition0.isNullable());
      assertEquals(1, columnDisplayDefinition0.getDisplayWidth());
  }
}
