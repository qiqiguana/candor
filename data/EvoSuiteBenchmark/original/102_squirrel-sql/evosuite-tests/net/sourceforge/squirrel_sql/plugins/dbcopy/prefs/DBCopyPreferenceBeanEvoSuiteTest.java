/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.plugins.dbcopy.prefs;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import net.sourceforge.squirrel_sql.plugins.dbcopy.prefs.DBCopyPreferenceBean;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DBCopyPreferenceBeanEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      boolean boolean0 = dBCopyPreferenceBean0.isTestColumnNames();
      assertEquals(true, dBCopyPreferenceBean0.isUseFileCaching());
      assertEquals(true, dBCopyPreferenceBean0.isCopyData());
      assertEquals(true, dBCopyPreferenceBean0.isUseTruncate());
      assertEquals(true, dBCopyPreferenceBean0.isCopyIndexDefs());
      assertEquals(true, dBCopyPreferenceBean0.isCopyForeignKeys());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
      assertEquals(true, dBCopyPreferenceBean0.isCommitAfterTableDefs());
      assertEquals(false, dBCopyPreferenceBean0.isWriteScript());
      assertEquals(false, dBCopyPreferenceBean0.isCopyPrimaryKeys());
      assertEquals(true, boolean0);
      assertEquals(true, dBCopyPreferenceBean0.isAutoCommitEnabled());
      assertEquals(true, dBCopyPreferenceBean0.isCheckKeywords());
      assertEquals(true, dBCopyPreferenceBean0.isPruneDuplicateIndexDefs());
      assertEquals(false, dBCopyPreferenceBean0.isPromptForDialect());
      assertEquals(false, dBCopyPreferenceBean0.isDelayBetweenObjects());
  }

  @Test
  public void test1()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      int int0 = dBCopyPreferenceBean0.getCommitCount();
      assertEquals(false, dBCopyPreferenceBean0.isCopyPrimaryKeys());
      assertEquals(true, dBCopyPreferenceBean0.isUseTruncate());
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
      assertEquals(true, dBCopyPreferenceBean0.isAutoCommitEnabled());
      assertEquals(true, dBCopyPreferenceBean0.isTestColumnNames());
      assertEquals(true, dBCopyPreferenceBean0.isUseFileCaching());
      assertEquals(true, dBCopyPreferenceBean0.isCopyData());
      assertEquals(false, dBCopyPreferenceBean0.isWriteScript());
      assertEquals(true, dBCopyPreferenceBean0.isPruneDuplicateIndexDefs());
      assertEquals(false, dBCopyPreferenceBean0.isPromptForDialect());
      assertEquals(true, dBCopyPreferenceBean0.isCopyForeignKeys());
      assertEquals(true, dBCopyPreferenceBean0.isCommitAfterTableDefs());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
      assertEquals(true, dBCopyPreferenceBean0.isCheckKeywords());
      assertEquals(true, dBCopyPreferenceBean0.isCopyIndexDefs());
      assertEquals(100, int0);
      assertEquals(false, dBCopyPreferenceBean0.isDelayBetweenObjects());
  }

  @Test
  public void test2()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      boolean boolean0 = dBCopyPreferenceBean0.isUseTruncate();
      assertEquals(true, dBCopyPreferenceBean0.isUseFileCaching());
      assertEquals(true, dBCopyPreferenceBean0.isAutoCommitEnabled());
      assertEquals(true, dBCopyPreferenceBean0.isCopyData());
      assertEquals(true, dBCopyPreferenceBean0.isCopyForeignKeys());
      assertEquals(true, dBCopyPreferenceBean0.isCopyIndexDefs());
      assertEquals(true, dBCopyPreferenceBean0.isPruneDuplicateIndexDefs());
      assertEquals(true, dBCopyPreferenceBean0.isTestColumnNames());
      assertEquals(true, boolean0);
      assertEquals(false, dBCopyPreferenceBean0.isPromptForDialect());
      assertEquals(true, dBCopyPreferenceBean0.isCheckKeywords());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
      assertEquals(false, dBCopyPreferenceBean0.isWriteScript());
      assertEquals(false, dBCopyPreferenceBean0.isCopyPrimaryKeys());
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
      assertEquals(false, dBCopyPreferenceBean0.isDelayBetweenObjects());
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
      assertEquals(true, dBCopyPreferenceBean0.isCommitAfterTableDefs());
  }

  @Test
  public void test3()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      int int0 = dBCopyPreferenceBean0.getSelectFetchSize();
      assertEquals(true, dBCopyPreferenceBean0.isTestColumnNames());
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
      assertEquals(false, dBCopyPreferenceBean0.isCopyPrimaryKeys());
      assertEquals(true, dBCopyPreferenceBean0.isPruneDuplicateIndexDefs());
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
      assertEquals(false, dBCopyPreferenceBean0.isPromptForDialect());
      assertEquals(true, dBCopyPreferenceBean0.isCopyData());
      assertEquals(false, dBCopyPreferenceBean0.isWriteScript());
      assertEquals(false, dBCopyPreferenceBean0.isDelayBetweenObjects());
      assertEquals(true, dBCopyPreferenceBean0.isCopyForeignKeys());
      assertEquals(true, dBCopyPreferenceBean0.isCheckKeywords());
      assertEquals(1000, int0);
      assertEquals(true, dBCopyPreferenceBean0.isAutoCommitEnabled());
      assertEquals(true, dBCopyPreferenceBean0.isUseTruncate());
      assertEquals(true, dBCopyPreferenceBean0.isCopyIndexDefs());
      assertEquals(true, dBCopyPreferenceBean0.isUseFileCaching());
      assertEquals(true, dBCopyPreferenceBean0.isCommitAfterTableDefs());
  }

  @Test
  public void test4()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      boolean boolean0 = dBCopyPreferenceBean0.isCopyPrimaryKeys();
      assertEquals(true, dBCopyPreferenceBean0.isPruneDuplicateIndexDefs());
      assertEquals(true, dBCopyPreferenceBean0.isTestColumnNames());
      assertEquals(true, dBCopyPreferenceBean0.isCopyForeignKeys());
      assertEquals(false, boolean0);
      assertEquals(true, dBCopyPreferenceBean0.isCopyData());
      assertEquals(true, dBCopyPreferenceBean0.isCheckKeywords());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
      assertEquals(true, dBCopyPreferenceBean0.isUseTruncate());
      assertEquals(false, dBCopyPreferenceBean0.isPromptForDialect());
      assertEquals(true, dBCopyPreferenceBean0.isAutoCommitEnabled());
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
      assertEquals(true, dBCopyPreferenceBean0.isUseFileCaching());
      assertEquals(false, dBCopyPreferenceBean0.isWriteScript());
      assertEquals(false, dBCopyPreferenceBean0.isDelayBetweenObjects());
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
      assertEquals(true, dBCopyPreferenceBean0.isCopyIndexDefs());
      assertEquals(true, dBCopyPreferenceBean0.isCommitAfterTableDefs());
  }

  @Test
  public void test5()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      dBCopyPreferenceBean0.setAutoCommitEnabled(true);
      assertEquals(true, dBCopyPreferenceBean0.isUseFileCaching());
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
      assertEquals(true, dBCopyPreferenceBean0.isTestColumnNames());
      assertEquals(true, dBCopyPreferenceBean0.isPruneDuplicateIndexDefs());
      assertEquals(true, dBCopyPreferenceBean0.isAutoCommitEnabled());
      assertEquals(true, dBCopyPreferenceBean0.isCopyIndexDefs());
      assertEquals(false, dBCopyPreferenceBean0.isPromptForDialect());
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
      assertEquals(false, dBCopyPreferenceBean0.isWriteScript());
      assertEquals(true, dBCopyPreferenceBean0.isCopyData());
      assertEquals(false, dBCopyPreferenceBean0.isCopyPrimaryKeys());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
      assertEquals(false, dBCopyPreferenceBean0.isDelayBetweenObjects());
      assertEquals(true, dBCopyPreferenceBean0.isCheckKeywords());
      assertEquals(true, dBCopyPreferenceBean0.isUseTruncate());
      assertEquals(true, dBCopyPreferenceBean0.isCopyForeignKeys());
      assertEquals(true, dBCopyPreferenceBean0.isCommitAfterTableDefs());
  }

  @Test
  public void test6()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
      
      dBCopyPreferenceBean0.setSelectFetchSize(0);
      assertEquals(false, dBCopyPreferenceBean0.isWriteScript());
  }

  @Test
  public void test7()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      boolean boolean0 = dBCopyPreferenceBean0.isAutoCommitEnabled();
      assertEquals(false, dBCopyPreferenceBean0.isDelayBetweenObjects());
      assertEquals(true, dBCopyPreferenceBean0.isCopyData());
      assertEquals(true, dBCopyPreferenceBean0.isCopyIndexDefs());
      assertEquals(true, dBCopyPreferenceBean0.isUseFileCaching());
      assertEquals(true, dBCopyPreferenceBean0.isCheckKeywords());
      assertEquals(false, dBCopyPreferenceBean0.isWriteScript());
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
      assertEquals(true, dBCopyPreferenceBean0.isTestColumnNames());
      assertEquals(true, dBCopyPreferenceBean0.isCopyForeignKeys());
      assertEquals(true, dBCopyPreferenceBean0.isCommitAfterTableDefs());
      assertEquals(false, dBCopyPreferenceBean0.isCopyPrimaryKeys());
      assertEquals(true, dBCopyPreferenceBean0.isUseTruncate());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
      assertEquals(true, boolean0);
      assertEquals(true, dBCopyPreferenceBean0.isPruneDuplicateIndexDefs());
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
      assertEquals(false, dBCopyPreferenceBean0.isPromptForDialect());
  }

  @Test
  public void test8()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      boolean boolean0 = dBCopyPreferenceBean0.isWriteScript();
      assertEquals(true, dBCopyPreferenceBean0.isCopyIndexDefs());
      assertEquals(false, dBCopyPreferenceBean0.isCopyPrimaryKeys());
      assertEquals(true, dBCopyPreferenceBean0.isCopyData());
      assertEquals(false, dBCopyPreferenceBean0.isPromptForDialect());
      assertEquals(true, dBCopyPreferenceBean0.isAutoCommitEnabled());
      assertEquals(true, dBCopyPreferenceBean0.isTestColumnNames());
      assertEquals(true, dBCopyPreferenceBean0.isCheckKeywords());
      assertEquals(false, boolean0);
      assertEquals(true, dBCopyPreferenceBean0.isPruneDuplicateIndexDefs());
      assertEquals(true, dBCopyPreferenceBean0.isUseTruncate());
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
      assertEquals(true, dBCopyPreferenceBean0.isCommitAfterTableDefs());
      assertEquals(true, dBCopyPreferenceBean0.isCopyForeignKeys());
      assertEquals(true, dBCopyPreferenceBean0.isUseFileCaching());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
      assertEquals(false, dBCopyPreferenceBean0.isDelayBetweenObjects());
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
  }

  @Test
  public void test9()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      assertEquals(true, dBCopyPreferenceBean0.isCopyForeignKeys());
      
      dBCopyPreferenceBean0.setCopyForeignKeys(false);
      assertEquals(false, dBCopyPreferenceBean0.isCopyForeignKeys());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
  }

  @Test
  public void test10()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      dBCopyPreferenceBean0.getRecordDelayMillis();
      assertEquals(true, dBCopyPreferenceBean0.isUseFileCaching());
      assertEquals(true, dBCopyPreferenceBean0.isUseTruncate());
      assertEquals(true, dBCopyPreferenceBean0.isPruneDuplicateIndexDefs());
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
      assertEquals(true, dBCopyPreferenceBean0.isCheckKeywords());
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
      assertEquals(true, dBCopyPreferenceBean0.isCopyData());
      assertEquals(false, dBCopyPreferenceBean0.isPromptForDialect());
      assertEquals(true, dBCopyPreferenceBean0.isTestColumnNames());
      assertEquals(true, dBCopyPreferenceBean0.isCopyIndexDefs());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
      assertEquals(false, dBCopyPreferenceBean0.isCopyPrimaryKeys());
      assertEquals(true, dBCopyPreferenceBean0.isCopyForeignKeys());
      assertEquals(true, dBCopyPreferenceBean0.isAutoCommitEnabled());
      assertEquals(false, dBCopyPreferenceBean0.isDelayBetweenObjects());
      assertEquals(true, dBCopyPreferenceBean0.isCommitAfterTableDefs());
      assertEquals(false, dBCopyPreferenceBean0.isWriteScript());
  }

  @Test
  public void test11()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      String string0 = dBCopyPreferenceBean0.getClientVersion();
      assertEquals(true, dBCopyPreferenceBean0.isAutoCommitEnabled());
      assertEquals(true, dBCopyPreferenceBean0.isCheckKeywords());
      assertEquals(false, dBCopyPreferenceBean0.isWriteScript());
      assertNull(string0);
      assertEquals(false, dBCopyPreferenceBean0.isDelayBetweenObjects());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
      assertEquals(true, dBCopyPreferenceBean0.isCommitAfterTableDefs());
      assertEquals(true, dBCopyPreferenceBean0.isPruneDuplicateIndexDefs());
      assertEquals(true, dBCopyPreferenceBean0.isCopyIndexDefs());
      assertEquals(true, dBCopyPreferenceBean0.isUseFileCaching());
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
      assertEquals(true, dBCopyPreferenceBean0.isCopyForeignKeys());
      assertEquals(true, dBCopyPreferenceBean0.isTestColumnNames());
      assertEquals(true, dBCopyPreferenceBean0.isUseTruncate());
      assertEquals(false, dBCopyPreferenceBean0.isPromptForDialect());
      assertEquals(true, dBCopyPreferenceBean0.isCopyData());
      assertEquals(false, dBCopyPreferenceBean0.isCopyPrimaryKeys());
  }

  @Test
  public void test12()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      dBCopyPreferenceBean0.setPromptForDialect(false);
      assertEquals(true, dBCopyPreferenceBean0.isCopyForeignKeys());
      assertEquals(false, dBCopyPreferenceBean0.isCopyPrimaryKeys());
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
      assertEquals(true, dBCopyPreferenceBean0.isCopyData());
      assertEquals(true, dBCopyPreferenceBean0.isTestColumnNames());
      assertEquals(true, dBCopyPreferenceBean0.isAutoCommitEnabled());
      assertEquals(false, dBCopyPreferenceBean0.isWriteScript());
      assertEquals(true, dBCopyPreferenceBean0.isCommitAfterTableDefs());
      assertEquals(false, dBCopyPreferenceBean0.isDelayBetweenObjects());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
      assertEquals(true, dBCopyPreferenceBean0.isCheckKeywords());
      assertEquals(true, dBCopyPreferenceBean0.isUseTruncate());
      assertEquals(true, dBCopyPreferenceBean0.isCopyIndexDefs());
      assertEquals(false, dBCopyPreferenceBean0.isPromptForDialect());
      assertEquals(true, dBCopyPreferenceBean0.isUseFileCaching());
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
      assertEquals(true, dBCopyPreferenceBean0.isPruneDuplicateIndexDefs());
  }

  @Test
  public void test13()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      dBCopyPreferenceBean0.setClientVersion("-7Ne}]HX70S");
      assertEquals(true, dBCopyPreferenceBean0.isCommitAfterTableDefs());
      assertEquals(false, dBCopyPreferenceBean0.isCopyPrimaryKeys());
      assertEquals(true, dBCopyPreferenceBean0.isCopyData());
      assertEquals(false, dBCopyPreferenceBean0.isWriteScript());
      assertEquals(true, dBCopyPreferenceBean0.isTestColumnNames());
      assertEquals(true, dBCopyPreferenceBean0.isCheckKeywords());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
      assertEquals(true, dBCopyPreferenceBean0.isPruneDuplicateIndexDefs());
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
      assertEquals(true, dBCopyPreferenceBean0.isCopyIndexDefs());
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
      assertEquals(true, dBCopyPreferenceBean0.isCopyForeignKeys());
      assertEquals(true, dBCopyPreferenceBean0.isUseTruncate());
      assertEquals(false, dBCopyPreferenceBean0.isPromptForDialect());
      assertEquals(false, dBCopyPreferenceBean0.isDelayBetweenObjects());
      assertEquals(true, dBCopyPreferenceBean0.isAutoCommitEnabled());
      assertEquals(true, dBCopyPreferenceBean0.isUseFileCaching());
      assertEquals("-7Ne}]HX70S", dBCopyPreferenceBean0.getClientVersion());
  }

  @Test
  public void test14()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      assertEquals(true, dBCopyPreferenceBean0.isUseFileCaching());
      
      dBCopyPreferenceBean0.setUseFileCaching(false);
      assertEquals(false, dBCopyPreferenceBean0.isUseFileCaching());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
  }

  @Test
  public void test15()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      dBCopyPreferenceBean0.setRecordDelayMillis((long) 100);
      assertEquals(100L, dBCopyPreferenceBean0.getRecordDelayMillis());
      assertEquals(false, dBCopyPreferenceBean0.isPromptForDialect());
  }

  @Test
  public void test16()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      dBCopyPreferenceBean0.setWriteScript(false);
      assertEquals(true, dBCopyPreferenceBean0.isTestColumnNames());
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
      assertEquals(true, dBCopyPreferenceBean0.isPruneDuplicateIndexDefs());
      assertEquals(true, dBCopyPreferenceBean0.isCopyData());
      assertEquals(true, dBCopyPreferenceBean0.isAutoCommitEnabled());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
      assertEquals(false, dBCopyPreferenceBean0.isDelayBetweenObjects());
      assertEquals(true, dBCopyPreferenceBean0.isUseFileCaching());
      assertEquals(true, dBCopyPreferenceBean0.isCommitAfterTableDefs());
      assertEquals(true, dBCopyPreferenceBean0.isCopyForeignKeys());
      assertEquals(false, dBCopyPreferenceBean0.isPromptForDialect());
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
      assertEquals(false, dBCopyPreferenceBean0.isWriteScript());
      assertEquals(true, dBCopyPreferenceBean0.isCheckKeywords());
      assertEquals(false, dBCopyPreferenceBean0.isCopyPrimaryKeys());
      assertEquals(true, dBCopyPreferenceBean0.isUseTruncate());
      assertEquals(true, dBCopyPreferenceBean0.isCopyIndexDefs());
  }

  @Test
  public void test17()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
      
      dBCopyPreferenceBean0.setCommitCount(0);
      assertEquals(true, dBCopyPreferenceBean0.isCheckKeywords());
  }

  @Test
  public void test18()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      dBCopyPreferenceBean0.isAppendRecordsToExisting();
      assertEquals(false, dBCopyPreferenceBean0.isWriteScript());
      assertEquals(true, dBCopyPreferenceBean0.isUseTruncate());
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
      assertEquals(true, dBCopyPreferenceBean0.isUseFileCaching());
      assertEquals(false, dBCopyPreferenceBean0.isCopyPrimaryKeys());
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
      assertEquals(true, dBCopyPreferenceBean0.isAutoCommitEnabled());
      assertEquals(true, dBCopyPreferenceBean0.isCopyIndexDefs());
      assertEquals(true, dBCopyPreferenceBean0.isCheckKeywords());
      assertEquals(true, dBCopyPreferenceBean0.isPruneDuplicateIndexDefs());
      assertEquals(true, dBCopyPreferenceBean0.isCopyData());
      assertEquals(true, dBCopyPreferenceBean0.isTestColumnNames());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
      assertEquals(true, dBCopyPreferenceBean0.isCommitAfterTableDefs());
      assertEquals(false, dBCopyPreferenceBean0.isPromptForDialect());
      assertEquals(false, dBCopyPreferenceBean0.isDelayBetweenObjects());
      assertEquals(true, dBCopyPreferenceBean0.isCopyForeignKeys());
  }

  @Test
  public void test19()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      boolean boolean0 = dBCopyPreferenceBean0.isDelayBetweenObjects();
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
      assertEquals(false, dBCopyPreferenceBean0.isPromptForDialect());
      assertEquals(true, dBCopyPreferenceBean0.isTestColumnNames());
      assertEquals(true, dBCopyPreferenceBean0.isAutoCommitEnabled());
      assertEquals(true, dBCopyPreferenceBean0.isUseTruncate());
      assertEquals(true, dBCopyPreferenceBean0.isUseFileCaching());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
      assertEquals(true, dBCopyPreferenceBean0.isPruneDuplicateIndexDefs());
      assertEquals(true, dBCopyPreferenceBean0.isCommitAfterTableDefs());
      assertEquals(false, dBCopyPreferenceBean0.isWriteScript());
      assertEquals(true, dBCopyPreferenceBean0.isCopyData());
      assertEquals(true, dBCopyPreferenceBean0.isCopyForeignKeys());
      assertEquals(false, boolean0);
      assertEquals(true, dBCopyPreferenceBean0.isCopyIndexDefs());
      assertEquals(false, dBCopyPreferenceBean0.isCopyPrimaryKeys());
      assertEquals(true, dBCopyPreferenceBean0.isCheckKeywords());
  }

  @Test
  public void test20()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      dBCopyPreferenceBean0.setCopyPrimaryKeys(false);
      assertEquals(true, dBCopyPreferenceBean0.isCopyForeignKeys());
      assertEquals(true, dBCopyPreferenceBean0.isAutoCommitEnabled());
      assertEquals(false, dBCopyPreferenceBean0.isPromptForDialect());
      assertEquals(true, dBCopyPreferenceBean0.isUseFileCaching());
      assertEquals(true, dBCopyPreferenceBean0.isPruneDuplicateIndexDefs());
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
      assertEquals(true, dBCopyPreferenceBean0.isUseTruncate());
      assertEquals(true, dBCopyPreferenceBean0.isCheckKeywords());
      assertEquals(true, dBCopyPreferenceBean0.isTestColumnNames());
      assertEquals(true, dBCopyPreferenceBean0.isCopyIndexDefs());
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
      assertEquals(false, dBCopyPreferenceBean0.isCopyPrimaryKeys());
      assertEquals(true, dBCopyPreferenceBean0.isCopyData());
      assertEquals(false, dBCopyPreferenceBean0.isWriteScript());
      assertEquals(true, dBCopyPreferenceBean0.isCommitAfterTableDefs());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
      assertEquals(false, dBCopyPreferenceBean0.isDelayBetweenObjects());
  }

  @Test
  public void test21()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      String string0 = dBCopyPreferenceBean0.getClientName();
      assertEquals(true, dBCopyPreferenceBean0.isCopyIndexDefs());
      assertEquals(true, dBCopyPreferenceBean0.isCopyForeignKeys());
      assertEquals(true, dBCopyPreferenceBean0.isAutoCommitEnabled());
      assertEquals(false, dBCopyPreferenceBean0.isDelayBetweenObjects());
      assertEquals(true, dBCopyPreferenceBean0.isCheckKeywords());
      assertEquals(true, dBCopyPreferenceBean0.isCommitAfterTableDefs());
      assertEquals(true, dBCopyPreferenceBean0.isUseFileCaching());
      assertEquals(true, dBCopyPreferenceBean0.isCopyData());
      assertEquals(true, dBCopyPreferenceBean0.isUseTruncate());
      assertEquals(false, dBCopyPreferenceBean0.isPromptForDialect());
      assertEquals(true, dBCopyPreferenceBean0.isTestColumnNames());
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
      assertEquals(true, dBCopyPreferenceBean0.isPruneDuplicateIndexDefs());
      assertNull(string0);
      assertEquals(false, dBCopyPreferenceBean0.isWriteScript());
      assertEquals(false, dBCopyPreferenceBean0.isCopyPrimaryKeys());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
  }

  @Test
  public void test22()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      assertEquals(true, dBCopyPreferenceBean0.isTestColumnNames());
      
      dBCopyPreferenceBean0.setTestColumnNames(false);
      assertEquals(false, dBCopyPreferenceBean0.isTestColumnNames());
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
  }

  @Test
  public void test23()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      boolean boolean0 = dBCopyPreferenceBean0.isCopyForeignKeys();
      assertEquals(true, dBCopyPreferenceBean0.isUseTruncate());
      assertEquals(true, dBCopyPreferenceBean0.isCopyData());
      assertEquals(false, dBCopyPreferenceBean0.isDelayBetweenObjects());
      assertEquals(false, dBCopyPreferenceBean0.isWriteScript());
      assertEquals(true, dBCopyPreferenceBean0.isPruneDuplicateIndexDefs());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
      assertEquals(true, dBCopyPreferenceBean0.isCheckKeywords());
      assertEquals(false, dBCopyPreferenceBean0.isPromptForDialect());
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
      assertEquals(false, dBCopyPreferenceBean0.isCopyPrimaryKeys());
      assertEquals(true, dBCopyPreferenceBean0.isAutoCommitEnabled());
      assertEquals(true, dBCopyPreferenceBean0.isCommitAfterTableDefs());
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
      assertEquals(true, dBCopyPreferenceBean0.isUseFileCaching());
      assertEquals(true, boolean0);
      assertEquals(true, dBCopyPreferenceBean0.isTestColumnNames());
      assertEquals(true, dBCopyPreferenceBean0.isCopyIndexDefs());
  }

  @Test
  public void test24()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      boolean boolean0 = dBCopyPreferenceBean0.isPruneDuplicateIndexDefs();
      assertEquals(false, dBCopyPreferenceBean0.isDelayBetweenObjects());
      assertEquals(true, boolean0);
      assertEquals(true, dBCopyPreferenceBean0.isCopyIndexDefs());
      assertEquals(true, dBCopyPreferenceBean0.isCopyData());
      assertEquals(true, dBCopyPreferenceBean0.isAutoCommitEnabled());
      assertEquals(true, dBCopyPreferenceBean0.isUseFileCaching());
      assertEquals(true, dBCopyPreferenceBean0.isCommitAfterTableDefs());
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
      assertEquals(true, dBCopyPreferenceBean0.isTestColumnNames());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
      assertEquals(true, dBCopyPreferenceBean0.isUseTruncate());
      assertEquals(false, dBCopyPreferenceBean0.isWriteScript());
      assertEquals(false, dBCopyPreferenceBean0.isCopyPrimaryKeys());
      assertEquals(true, dBCopyPreferenceBean0.isCheckKeywords());
      assertEquals(true, dBCopyPreferenceBean0.isCopyForeignKeys());
      assertEquals(false, dBCopyPreferenceBean0.isPromptForDialect());
  }

  @Test
  public void test25()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      dBCopyPreferenceBean0.getTableDelayMillis();
      assertEquals(true, dBCopyPreferenceBean0.isUseTruncate());
      assertEquals(true, dBCopyPreferenceBean0.isCommitAfterTableDefs());
      assertEquals(true, dBCopyPreferenceBean0.isAutoCommitEnabled());
      assertEquals(true, dBCopyPreferenceBean0.isCopyIndexDefs());
      assertEquals(false, dBCopyPreferenceBean0.isWriteScript());
      assertEquals(true, dBCopyPreferenceBean0.isCheckKeywords());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
      assertEquals(true, dBCopyPreferenceBean0.isCopyData());
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
      assertEquals(true, dBCopyPreferenceBean0.isPruneDuplicateIndexDefs());
      assertEquals(true, dBCopyPreferenceBean0.isCopyForeignKeys());
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
      assertEquals(false, dBCopyPreferenceBean0.isCopyPrimaryKeys());
      assertEquals(true, dBCopyPreferenceBean0.isTestColumnNames());
      assertEquals(true, dBCopyPreferenceBean0.isUseFileCaching());
      assertEquals(false, dBCopyPreferenceBean0.isPromptForDialect());
      assertEquals(false, dBCopyPreferenceBean0.isDelayBetweenObjects());
  }

  @Test
  public void test26()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      assertEquals(true, dBCopyPreferenceBean0.isCheckKeywords());
      
      dBCopyPreferenceBean0.setCheckKeywords(false);
      assertEquals(false, dBCopyPreferenceBean0.isCheckKeywords());
      assertEquals(false, dBCopyPreferenceBean0.isDelayBetweenObjects());
  }

  @Test
  public void test27()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      dBCopyPreferenceBean0.setAppendRecordsToExisting(false);
      assertEquals(false, dBCopyPreferenceBean0.isCopyPrimaryKeys());
      assertEquals(false, dBCopyPreferenceBean0.isPromptForDialect());
      assertEquals(true, dBCopyPreferenceBean0.isUseTruncate());
      assertEquals(true, dBCopyPreferenceBean0.isCopyIndexDefs());
      assertEquals(true, dBCopyPreferenceBean0.isCopyData());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
      assertEquals(false, dBCopyPreferenceBean0.isDelayBetweenObjects());
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
      assertEquals(true, dBCopyPreferenceBean0.isCheckKeywords());
      assertEquals(false, dBCopyPreferenceBean0.isWriteScript());
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
      assertEquals(true, dBCopyPreferenceBean0.isUseFileCaching());
      assertEquals(true, dBCopyPreferenceBean0.isPruneDuplicateIndexDefs());
      assertEquals(true, dBCopyPreferenceBean0.isAutoCommitEnabled());
      assertEquals(true, dBCopyPreferenceBean0.isCommitAfterTableDefs());
      assertEquals(true, dBCopyPreferenceBean0.isCopyForeignKeys());
      assertEquals(true, dBCopyPreferenceBean0.isTestColumnNames());
      assertEquals(false, dBCopyPreferenceBean0.isAppendRecordsToExisting());
  }

  @Test
  public void test28()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      boolean boolean0 = dBCopyPreferenceBean0.isUseFileCaching();
      assertEquals(true, dBCopyPreferenceBean0.isAutoCommitEnabled());
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
      assertEquals(false, dBCopyPreferenceBean0.isPromptForDialect());
      assertEquals(false, dBCopyPreferenceBean0.isCopyPrimaryKeys());
      assertEquals(true, dBCopyPreferenceBean0.isCopyData());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
      assertEquals(true, dBCopyPreferenceBean0.isCopyForeignKeys());
      assertEquals(false, dBCopyPreferenceBean0.isWriteScript());
      assertEquals(true, dBCopyPreferenceBean0.isCheckKeywords());
      assertEquals(true, dBCopyPreferenceBean0.isTestColumnNames());
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
      assertEquals(true, dBCopyPreferenceBean0.isCommitAfterTableDefs());
      assertEquals(true, dBCopyPreferenceBean0.isCopyIndexDefs());
      assertEquals(true, dBCopyPreferenceBean0.isPruneDuplicateIndexDefs());
      assertEquals(false, dBCopyPreferenceBean0.isDelayBetweenObjects());
      assertEquals(true, dBCopyPreferenceBean0.isUseTruncate());
      assertEquals(true, boolean0);
  }

  @Test
  public void test29()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      boolean boolean0 = dBCopyPreferenceBean0.isPromptForDialect();
      assertEquals(false, dBCopyPreferenceBean0.isDelayBetweenObjects());
      assertEquals(true, dBCopyPreferenceBean0.isCommitAfterTableDefs());
      assertEquals(true, dBCopyPreferenceBean0.isCopyIndexDefs());
      assertEquals(true, dBCopyPreferenceBean0.isCopyData());
      assertEquals(true, dBCopyPreferenceBean0.isUseTruncate());
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
      assertEquals(false, boolean0);
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
      assertEquals(false, dBCopyPreferenceBean0.isWriteScript());
      assertEquals(true, dBCopyPreferenceBean0.isAutoCommitEnabled());
      assertEquals(true, dBCopyPreferenceBean0.isCopyForeignKeys());
      assertEquals(false, dBCopyPreferenceBean0.isCopyPrimaryKeys());
      assertEquals(true, dBCopyPreferenceBean0.isPruneDuplicateIndexDefs());
      assertEquals(true, dBCopyPreferenceBean0.isCheckKeywords());
      assertEquals(true, dBCopyPreferenceBean0.isTestColumnNames());
      assertEquals(true, dBCopyPreferenceBean0.isUseFileCaching());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
  }

  @Test
  public void test30()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      boolean boolean0 = dBCopyPreferenceBean0.isCommitAfterTableDefs();
      assertEquals(false, dBCopyPreferenceBean0.isPromptForDialect());
      assertEquals(true, dBCopyPreferenceBean0.isTestColumnNames());
      assertEquals(true, dBCopyPreferenceBean0.isUseTruncate());
      assertEquals(true, dBCopyPreferenceBean0.isAutoCommitEnabled());
      assertEquals(true, dBCopyPreferenceBean0.isCheckKeywords());
      assertEquals(false, dBCopyPreferenceBean0.isDelayBetweenObjects());
      assertEquals(true, dBCopyPreferenceBean0.isUseFileCaching());
      assertEquals(true, dBCopyPreferenceBean0.isCopyData());
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
      assertEquals(true, boolean0);
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
      assertEquals(true, dBCopyPreferenceBean0.isPruneDuplicateIndexDefs());
      assertEquals(false, dBCopyPreferenceBean0.isWriteScript());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
      assertEquals(true, dBCopyPreferenceBean0.isCopyIndexDefs());
      assertEquals(true, dBCopyPreferenceBean0.isCopyForeignKeys());
      assertEquals(false, dBCopyPreferenceBean0.isCopyPrimaryKeys());
  }

  @Test
  public void test31()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      assertEquals(false, dBCopyPreferenceBean0.isDelayBetweenObjects());
      
      dBCopyPreferenceBean0.setDelayBetweenObjects(true);
      assertEquals(true, dBCopyPreferenceBean0.isDelayBetweenObjects());
      assertEquals(true, dBCopyPreferenceBean0.isUseFileCaching());
  }

  @Test
  public void test32()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      dBCopyPreferenceBean0.setTableDelayMillis((long) (-1));
      assertEquals((-1L), dBCopyPreferenceBean0.getTableDelayMillis());
      assertEquals(false, dBCopyPreferenceBean0.isPromptForDialect());
  }

  @Test
  public void test33()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      dBCopyPreferenceBean0.setCommitAfterTableDefs(true);
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
      assertEquals(true, dBCopyPreferenceBean0.isCopyForeignKeys());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
      assertEquals(false, dBCopyPreferenceBean0.isWriteScript());
      assertEquals(false, dBCopyPreferenceBean0.isPromptForDialect());
      assertEquals(true, dBCopyPreferenceBean0.isPruneDuplicateIndexDefs());
      assertEquals(true, dBCopyPreferenceBean0.isCopyIndexDefs());
      assertEquals(true, dBCopyPreferenceBean0.isUseTruncate());
      assertEquals(true, dBCopyPreferenceBean0.isCheckKeywords());
      assertEquals(true, dBCopyPreferenceBean0.isAutoCommitEnabled());
      assertEquals(true, dBCopyPreferenceBean0.isCommitAfterTableDefs());
      assertEquals(false, dBCopyPreferenceBean0.isCopyPrimaryKeys());
      assertEquals(true, dBCopyPreferenceBean0.isUseFileCaching());
      assertEquals(true, dBCopyPreferenceBean0.isTestColumnNames());
      assertEquals(false, dBCopyPreferenceBean0.isDelayBetweenObjects());
      assertEquals(true, dBCopyPreferenceBean0.isCopyData());
  }

  @Test
  public void test34()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      boolean boolean0 = dBCopyPreferenceBean0.isCopyData();
      assertEquals(true, dBCopyPreferenceBean0.isUseFileCaching());
      assertEquals(true, dBCopyPreferenceBean0.isUseTruncate());
      assertEquals(false, dBCopyPreferenceBean0.isCopyPrimaryKeys());
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
      assertEquals(true, dBCopyPreferenceBean0.isCheckKeywords());
      assertEquals(false, dBCopyPreferenceBean0.isPromptForDialect());
      assertEquals(true, dBCopyPreferenceBean0.isTestColumnNames());
      assertEquals(true, dBCopyPreferenceBean0.isCopyIndexDefs());
      assertEquals(false, dBCopyPreferenceBean0.isWriteScript());
      assertEquals(true, dBCopyPreferenceBean0.isCopyForeignKeys());
      assertEquals(false, dBCopyPreferenceBean0.isDelayBetweenObjects());
      assertEquals(true, dBCopyPreferenceBean0.isCommitAfterTableDefs());
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
      assertEquals(true, boolean0);
      assertEquals(true, dBCopyPreferenceBean0.isPruneDuplicateIndexDefs());
      assertEquals(true, dBCopyPreferenceBean0.isAutoCommitEnabled());
  }

  @Test
  public void test35()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      dBCopyPreferenceBean0.setCopyIndexDefs(true);
      assertEquals(false, dBCopyPreferenceBean0.isPromptForDialect());
      assertEquals(true, dBCopyPreferenceBean0.isCopyIndexDefs());
      assertEquals(true, dBCopyPreferenceBean0.isUseTruncate());
      assertEquals(false, dBCopyPreferenceBean0.isCopyPrimaryKeys());
      assertEquals(true, dBCopyPreferenceBean0.isCopyForeignKeys());
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
      assertEquals(true, dBCopyPreferenceBean0.isAutoCommitEnabled());
      assertEquals(true, dBCopyPreferenceBean0.isTestColumnNames());
      assertEquals(true, dBCopyPreferenceBean0.isCommitAfterTableDefs());
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
      assertEquals(false, dBCopyPreferenceBean0.isDelayBetweenObjects());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
      assertEquals(true, dBCopyPreferenceBean0.isCopyData());
      assertEquals(true, dBCopyPreferenceBean0.isUseFileCaching());
      assertEquals(true, dBCopyPreferenceBean0.isCheckKeywords());
      assertEquals(true, dBCopyPreferenceBean0.isPruneDuplicateIndexDefs());
      assertEquals(false, dBCopyPreferenceBean0.isWriteScript());
  }

  @Test
  public void test36()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
      
      dBCopyPreferenceBean0.setFileCacheBufferSize((-1));
      assertEquals(true, dBCopyPreferenceBean0.isCopyIndexDefs());
  }

  @Test
  public void test37()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      boolean boolean0 = dBCopyPreferenceBean0.isCheckKeywords();
      assertEquals(true, dBCopyPreferenceBean0.isCopyForeignKeys());
      assertEquals(true, dBCopyPreferenceBean0.isCopyIndexDefs());
      assertEquals(true, dBCopyPreferenceBean0.isCopyData());
      assertEquals(false, dBCopyPreferenceBean0.isDelayBetweenObjects());
      assertEquals(true, dBCopyPreferenceBean0.isCommitAfterTableDefs());
      assertEquals(true, dBCopyPreferenceBean0.isUseFileCaching());
      assertEquals(true, dBCopyPreferenceBean0.isAutoCommitEnabled());
      assertEquals(false, dBCopyPreferenceBean0.isPromptForDialect());
      assertEquals(true, dBCopyPreferenceBean0.isUseTruncate());
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
      assertEquals(true, dBCopyPreferenceBean0.isPruneDuplicateIndexDefs());
      assertEquals(false, dBCopyPreferenceBean0.isCopyPrimaryKeys());
      assertEquals(true, boolean0);
      assertEquals(true, dBCopyPreferenceBean0.isTestColumnNames());
      assertEquals(false, dBCopyPreferenceBean0.isWriteScript());
  }

  @Test
  public void test38()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      dBCopyPreferenceBean0.setUseTruncate(true);
      assertEquals(false, dBCopyPreferenceBean0.isWriteScript());
      assertEquals(true, dBCopyPreferenceBean0.isCopyData());
      assertEquals(true, dBCopyPreferenceBean0.isCheckKeywords());
      assertEquals(true, dBCopyPreferenceBean0.isUseFileCaching());
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
      assertEquals(true, dBCopyPreferenceBean0.isCommitAfterTableDefs());
      assertEquals(false, dBCopyPreferenceBean0.isPromptForDialect());
      assertEquals(true, dBCopyPreferenceBean0.isTestColumnNames());
      assertEquals(false, dBCopyPreferenceBean0.isDelayBetweenObjects());
      assertEquals(true, dBCopyPreferenceBean0.isPruneDuplicateIndexDefs());
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
      assertEquals(true, dBCopyPreferenceBean0.isUseTruncate());
      assertEquals(true, dBCopyPreferenceBean0.isCopyIndexDefs());
      assertEquals(true, dBCopyPreferenceBean0.isAutoCommitEnabled());
      assertEquals(false, dBCopyPreferenceBean0.isCopyPrimaryKeys());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
      assertEquals(true, dBCopyPreferenceBean0.isCopyForeignKeys());
  }

  @Test
  public void test39()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      DBCopyPreferenceBean dBCopyPreferenceBean1 = (DBCopyPreferenceBean)dBCopyPreferenceBean0.clone();
      assertEquals(true, dBCopyPreferenceBean0.isCopyForeignKeys());
      assertEquals(true, dBCopyPreferenceBean0.isUseTruncate());
      assertEquals(false, dBCopyPreferenceBean0.isWriteScript());
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
      assertEquals(true, dBCopyPreferenceBean0.isCheckKeywords());
      assertEquals(true, dBCopyPreferenceBean0.isCopyIndexDefs());
      assertEquals(true, dBCopyPreferenceBean0.isAutoCommitEnabled());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
      assertEquals(true, dBCopyPreferenceBean0.isPruneDuplicateIndexDefs());
      assertEquals(false, dBCopyPreferenceBean0.isDelayBetweenObjects());
      assertEquals(false, dBCopyPreferenceBean0.isCopyPrimaryKeys());
      assertEquals(false, dBCopyPreferenceBean0.isPromptForDialect());
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
      assertEquals(true, dBCopyPreferenceBean0.isCommitAfterTableDefs());
      assertEquals(true, dBCopyPreferenceBean0.isTestColumnNames());
      assertEquals(true, dBCopyPreferenceBean0.isUseFileCaching());
      assertEquals(true, dBCopyPreferenceBean0.isCopyData());
      assertEquals(true, dBCopyPreferenceBean1.isUseFileCaching());
  }

  @Test
  public void test40()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      assertEquals(true, dBCopyPreferenceBean0.isCopyData());
      
      dBCopyPreferenceBean0.setCopyData(false);
      assertEquals(false, dBCopyPreferenceBean0.isCopyData());
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
  }

  @Test
  public void test41()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      boolean boolean0 = dBCopyPreferenceBean0.isCopyIndexDefs();
      assertEquals(true, dBCopyPreferenceBean0.isUseFileCaching());
      assertEquals(true, dBCopyPreferenceBean0.isUseTruncate());
      assertEquals(false, dBCopyPreferenceBean0.isWriteScript());
      assertEquals(true, dBCopyPreferenceBean0.isCopyData());
      assertEquals(true, dBCopyPreferenceBean0.isAutoCommitEnabled());
      assertEquals(true, dBCopyPreferenceBean0.isCheckKeywords());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
      assertEquals(true, dBCopyPreferenceBean0.isPruneDuplicateIndexDefs());
      assertEquals(false, dBCopyPreferenceBean0.isPromptForDialect());
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
      assertEquals(true, dBCopyPreferenceBean0.isTestColumnNames());
      assertEquals(true, dBCopyPreferenceBean0.isCopyForeignKeys());
      assertEquals(false, dBCopyPreferenceBean0.isCopyPrimaryKeys());
      assertEquals(false, dBCopyPreferenceBean0.isDelayBetweenObjects());
      assertEquals(true, dBCopyPreferenceBean0.isCommitAfterTableDefs());
      assertEquals(true, boolean0);
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
  }

  @Test
  public void test42()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      int int0 = dBCopyPreferenceBean0.getFileCacheBufferSize();
      assertEquals(true, dBCopyPreferenceBean0.isCheckKeywords());
      assertEquals(true, dBCopyPreferenceBean0.isCopyForeignKeys());
      assertEquals(true, dBCopyPreferenceBean0.isCopyIndexDefs());
      assertEquals(false, dBCopyPreferenceBean0.isDelayBetweenObjects());
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
      assertEquals(false, dBCopyPreferenceBean0.isWriteScript());
      assertEquals(true, dBCopyPreferenceBean0.isCopyData());
      assertEquals(true, dBCopyPreferenceBean0.isUseTruncate());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
      assertEquals(true, dBCopyPreferenceBean0.isPruneDuplicateIndexDefs());
      assertEquals(8192, int0);
      assertEquals(true, dBCopyPreferenceBean0.isUseFileCaching());
      assertEquals(false, dBCopyPreferenceBean0.isCopyPrimaryKeys());
      assertEquals(false, dBCopyPreferenceBean0.isPromptForDialect());
      assertEquals(true, dBCopyPreferenceBean0.isAutoCommitEnabled());
      assertEquals(true, dBCopyPreferenceBean0.isTestColumnNames());
      assertEquals(true, dBCopyPreferenceBean0.isCommitAfterTableDefs());
  }

  @Test
  public void test43()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      dBCopyPreferenceBean0.setPruneDuplicateIndexDefs(true);
      assertEquals(false, dBCopyPreferenceBean0.isPromptForDialect());
      assertEquals(true, dBCopyPreferenceBean0.isTestColumnNames());
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
      assertEquals(true, dBCopyPreferenceBean0.isCopyForeignKeys());
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
      assertEquals(true, dBCopyPreferenceBean0.isUseTruncate());
      assertEquals(true, dBCopyPreferenceBean0.isCopyIndexDefs());
      assertEquals(true, dBCopyPreferenceBean0.isCommitAfterTableDefs());
      assertEquals(false, dBCopyPreferenceBean0.isDelayBetweenObjects());
      assertEquals(true, dBCopyPreferenceBean0.isAutoCommitEnabled());
      assertEquals(false, dBCopyPreferenceBean0.isCopyPrimaryKeys());
      assertEquals(true, dBCopyPreferenceBean0.isUseFileCaching());
      assertEquals(true, dBCopyPreferenceBean0.isCheckKeywords());
      assertEquals(false, dBCopyPreferenceBean0.isWriteScript());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
      assertEquals(true, dBCopyPreferenceBean0.isCopyData());
      assertEquals(true, dBCopyPreferenceBean0.isPruneDuplicateIndexDefs());
  }

  @Test
  public void test44()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      dBCopyPreferenceBean0.setClientName("");
      assertEquals(true, dBCopyPreferenceBean0.isCommitAfterTableDefs());
      assertEquals("", dBCopyPreferenceBean0.getClientName());
      assertEquals(true, dBCopyPreferenceBean0.isCopyData());
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
      assertEquals(false, dBCopyPreferenceBean0.isPromptForDialect());
      assertEquals(false, dBCopyPreferenceBean0.isCopyPrimaryKeys());
      assertEquals(false, dBCopyPreferenceBean0.isDelayBetweenObjects());
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
      assertEquals(false, dBCopyPreferenceBean0.isWriteScript());
      assertEquals(true, dBCopyPreferenceBean0.isCheckKeywords());
      assertEquals(true, dBCopyPreferenceBean0.isCopyIndexDefs());
      assertEquals(true, dBCopyPreferenceBean0.isAutoCommitEnabled());
      assertEquals(true, dBCopyPreferenceBean0.isCopyForeignKeys());
      assertEquals(true, dBCopyPreferenceBean0.isUseFileCaching());
      assertEquals(true, dBCopyPreferenceBean0.isTestColumnNames());
      assertEquals(true, dBCopyPreferenceBean0.isPruneDuplicateIndexDefs());
      assertEquals(true, dBCopyPreferenceBean0.isUseTruncate());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
  }
}
