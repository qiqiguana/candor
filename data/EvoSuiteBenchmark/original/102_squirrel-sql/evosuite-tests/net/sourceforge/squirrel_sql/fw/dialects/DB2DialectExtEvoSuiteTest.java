/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.dialects;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import net.sourceforge.squirrel_sql.fw.dialects.DB2DialectExt;
import net.sourceforge.squirrel_sql.fw.dialects.DatabaseObjectQualifier;
import net.sourceforge.squirrel_sql.fw.dialects.DerbyDialectExt;
import net.sourceforge.squirrel_sql.fw.dialects.DialectType;
import net.sourceforge.squirrel_sql.fw.dialects.HibernateDialect;
import net.sourceforge.squirrel_sql.fw.dialects.SqlGenerationPreferences;
import net.sourceforge.squirrel_sql.fw.sql.IDatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.TableColumnInfo;
import org.hibernate.MappingException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DB2DialectExtEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("'maxX' cannot be INF or NaN.", "'maxX' cannot be INF or NaN.");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = dB2DialectExt0.getDropPrimaryKeySQL("", "[!_VB\\czwD", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("ALTER TABLE \"'maxX' cannot be INF or NaN.\".\"'maxX' cannot be INF or NaN.\".\"[!_VB\\czwD\" DROP PRIMARY KEY", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      boolean boolean0 = dB2DialectExt0.supportsAlterColumnNull();
      assertEquals(true, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      boolean boolean0 = dB2DialectExt0.supportsRenameColumn();
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      boolean boolean0 = derbyDialectExt0.supportsInsertInto();
      assertEquals(true, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      String string0 = derbyDialectExt0.getMaxFunction();
      assertEquals("max", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      boolean boolean0 = dB2DialectExt0.supportsSequenceInformation();
      assertEquals(true, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      boolean boolean0 = dB2DialectExt0.supportsAlterSequence();
      assertEquals(true, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("log4j.defaultinitoverride", "log4j.defaultinitoverride", "log4j.defaultinitoverride", "log4j.defaultinitoverride", (-1600), "log4j.defaultinitoverride", (-480), (-1600), (-1600), (-1600), "log4j.defaultinitoverride", "log4j.defaultinitoverride", (-480), (-1600), "log4j.defaultinitoverride");
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String[] stringArray0 = dB2DialectExt0.getColumnNullableAlterSQL(tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test8()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      boolean boolean0 = derbyDialectExt0.supportsEmptyTables();
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      boolean boolean0 = dB2DialectExt0.supportsCorrelatedSubQuery();
      assertEquals(true, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      DialectType dialectType0 = dB2DialectExt0.getDialectType();
      assertEquals("DB2", dialectType0.toString());
  }

  @Test
  public void test11()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = derbyDialectExt0.getDropViewSQL((String) null, false, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertNotNull(string0);
      assertEquals("DROP VIEW \"null\"", string0);
  }

  @Test
  public void test12()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      int int0 = dB2DialectExt0.getPrecisionDigits(0, 0);
      assertEquals(0, int0);
  }

  @Test
  public void test13()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("", "");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = dB2DialectExt0.getDropForeignKeySQL("", "", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("ALTER TABLE \"\" DROP CONSTRAINT \"\"", string0);
  }

  @Test
  public void test14()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        dB2DialectExt0.getRenameViewSQL("ADD", "BLOB(x'00')", databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * DB2 doesn't support renaming views.
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      boolean boolean0 = dB2DialectExt0.supportsColumnComment();
      assertEquals(true, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      boolean boolean0 = derbyDialectExt0.supportsDropConstraint();
      assertEquals(true, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      boolean boolean0 = dB2DialectExt0.supportsAddColumn();
      assertEquals(true, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      boolean boolean0 = dB2DialectExt0.supportsAlterColumnDefault();
      assertEquals(true, boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      boolean boolean0 = derbyDialectExt0.supportsDropIndex();
      assertEquals(true, boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("Q%5JH(", "Q%5JH(", "Q%5JH(", "Q%5JH(", (-1), "Q%5JH(", 0, 636, (-1559), 0, "Q%5JH(", "Q%5JH(", 674, (-999), "Q%5JH(");
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = dB2DialectExt0.getColumnCommentAlterSQL(tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("COMMENT ON COLUMN \"Q%5JH(\".\"Q%5JH(\" IS 'Q%5JH('", string0);
  }

  @Test
  public void test21()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      boolean boolean0 = dB2DialectExt0.supportsDropColumn();
      assertEquals(true, boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("'maxX' cannot be INF or NaN.", "'maxX' cannot be INF or NaN.");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = dB2DialectExt0.getCreateViewSQL("", "", "'maxX' cannot be INF or NaN.", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("CREATE VIEW \"'maxX' cannot be INF or NaN.\".\"'maxX' cannot be INF or NaN.\".\"\"\n AS ", string0);
  }

  @Test
  public void test23()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      int int0 = dB2DialectExt0.getTimestampMaximumFractionalDigits();
      assertEquals(6, int0);
  }

  @Test
  public void test24()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      boolean boolean0 = dB2DialectExt0.supportsCreateView();
      assertEquals(true, boolean0);
  }

  @Test
  public void test25()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      boolean boolean0 = dB2DialectExt0.supportsDropSequence();
      assertEquals(true, boolean0);
  }

  @Test
  public void test26()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      boolean boolean0 = dB2DialectExt0.supportsAccessMethods();
      assertEquals(false, boolean0);
  }

  @Test
  public void test27()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      boolean boolean0 = derbyDialectExt0.supportsAddForeignKeyConstraint();
      assertEquals(true, boolean0);
  }

  @Test
  public void test28()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      boolean boolean0 = dB2DialectExt0.supportsTablespace();
      assertEquals(false, boolean0);
  }

  @Test
  public void test29()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      boolean boolean0 = dB2DialectExt0.supportsViewDefinition();
      assertEquals(true, boolean0);
  }

  @Test
  public void test30()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("ADD", "ADD");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = derbyDialectExt0.getColumnCommentAlterSQL("ADD", "ADD", "ADD", databaseObjectQualifier0, sqlGenerationPreferences0, (HibernateDialect) derbyDialectExt0);
      assertEquals("COMMENT ON COLUMN \"ADD\".\"ADD\".\"ADD\".\"ADD\" IS 'ADD'", string0);
      assertNotNull(string0);
  }

  @Test
  public void test31()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("'maxX' cannot be INF or NaN.", "'maxX' cannot be INF or NaN.");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = dB2DialectExt0.getDropSequenceSQL("'maxX' cannot be INF or NaN.", false, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("DROP SEQUENCE \"'maxX' cannot be INF or NaN.\".\"'maxX' cannot be INF or NaN.\".\"'maxX' cannot be INF or NaN.\" RESTRICT", string0);
  }

  @Test
  public void test32()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      boolean boolean0 = dB2DialectExt0.supportsCreateIndex();
      assertEquals(true, boolean0);
  }

  @Test
  public void test33()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      String string0 = dB2DialectExt0.getLengthFunction(0);
      assertEquals("length", string0);
  }

  @Test
  public void test34()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = dB2DialectExt0.getRenameTableSQL("", "", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("RENAME TABLE \"\"  TO \"\"", string0);
  }

  @Test
  public void test35()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = dB2DialectExt0.getColumnDropSQL("@q&HrG9QP1_4m)P", "@q&HrG9QP1_4m)P", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("ALTER TABLE \"@q&HrG9QP1_4m)P\" DROP \"@q&HrG9QP1_4m)P\"", string0);
  }

  @Test
  public void test36()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = dB2DialectExt0.getViewDefinitionSQL("Q`", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("SELECT TEXT  FROM SYSCAT.VIEWS WHERE VIEWSCHEMA = 'null' AND UPPER(VIEWNAME) = 'Q`'", string0);
      assertNotNull(string0);
  }

  @Test
  public void test37()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      byte[] byteArray0 = new byte[1];
      String string0 = dB2DialectExt0.getBinaryLiteralString(byteArray0);
      assertEquals("BLOB(x'00')", string0);
      assertNotNull(string0);
  }

  @Test
  public void test38()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("ADD", "ADD", "QvPu", "ADD", (int) '\"', "ADD", (-387), 31, 1, 1, "ADD", "ADD", (int) '\"', (-387), "ADD");
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String[] stringArray0 = dB2DialectExt0.getAddAutoIncrementSQL(tableColumnInfo0, "QvPu", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test39()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      boolean boolean0 = dB2DialectExt0.supportsUpdate();
      assertEquals(true, boolean0);
  }

  @Test
  public void test40()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      boolean boolean0 = derbyDialectExt0.supportsRenameTable();
      assertEquals(true, boolean0);
  }

  @Test
  public void test41()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("", "", "", "", 0, "", 0, 1, 290, 1, "", "", 1242, (-359), "");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        dB2DialectExt0.getColumnTypeAlterSQL(tableColumnInfo0, tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: MappingException");
      } catch(MappingException e) {
        /*
         * No Dialect mapping for JDBC type: 0
         */
      }
  }

  @Test
  public void test42()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      boolean boolean0 = dB2DialectExt0.supportsAddUniqueConstraint();
      assertEquals(true, boolean0);
  }

  @Test
  public void test43()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      boolean boolean0 = dB2DialectExt0.supportsAlterColumnType();
      assertEquals(true, boolean0);
  }

  @Test
  public void test44()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      String[] stringArray0 = new String[7];
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      // Undeclared exception!
      try {
        dB2DialectExt0.getCreateIndexSQL("Warning: the context classloader is an ancestor of the classloader that loaded LogFactoryImpl; it should be the same or a descendant. The application using commons-logging should ensure the context classloader is used correctly.", "Warning: the context classloader is an ancestor of the classloader that loaded LogFactoryImpl; it should be the same or a descendant. The application using commons-logging should ensure the context classloader is used correctly.", "Warning: the context classloader is an ancestor of the classloader that loaded LogFactoryImpl; it should be the same or a descendant. The application using commons-logging should ensure the context classloader is used correctly.", stringArray0, false, (String) null, "Warning: the context classloader is an ancestor of the classloader that loaded LogFactoryImpl; it should be the same or a descendant. The application using commons-logging should ensure the context classloader is used correctly.", databaseObjectQualifier0, (SqlGenerationPreferences) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test45()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      int int0 = dB2DialectExt0.getColumnLength(313, 313);
      assertEquals(313, int0);
  }

  @Test
  public void test46()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      boolean boolean0 = dB2DialectExt0.supportsCreateTable();
      assertEquals(true, boolean0);
  }

  @Test
  public void test47()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("", "", "", "", 0, "", (-365), 0, (-365), 1284, "", "", (-365), 1284, (String) null);
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = dB2DialectExt0.getColumnDefaultAlterSQL(tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("ALTER TABLE \"\" ALTER COLUMN \"\"  SET DEFAULT ''", string0);
  }

  @Test
  public void test48()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      boolean boolean0 = derbyDialectExt0.supportsIndexes();
      assertEquals(true, boolean0);
  }

  @Test
  public void test49()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("ADD", "ADD");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = derbyDialectExt0.getDropIndexSQL(",", "", false, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("DROP INDEX \"ADD\".\"ADD\".\"\" ", string0);
  }

  @Test
  public void test50()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      boolean boolean0 = dB2DialectExt0.supportsMultipleRowInserts();
      assertEquals(false, boolean0);
  }

  @Test
  public void test51()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      boolean boolean0 = dB2DialectExt0.supportsSequence();
      assertEquals(true, boolean0);
  }

  @Test
  public void test52()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      boolean boolean0 = dB2DialectExt0.supportsDropView();
      assertEquals(true, boolean0);
  }

  @Test
  public void test53()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      boolean boolean0 = dB2DialectExt0.supportsAutoIncrement();
      assertEquals(true, boolean0);
  }

  @Test
  public void test54()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      String[] stringArray0 = dB2DialectExt0.getIndexStorageOptions();
      assertNull(stringArray0);
  }

  @Test
  public void test55()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      boolean boolean0 = derbyDialectExt0.supportsRenameView();
      assertEquals(false, boolean0);
  }

  @Test
  public void test56()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      boolean boolean0 = dB2DialectExt0.supportsCreateSequence();
      assertEquals(true, boolean0);
  }

  @Test
  public void test57()  throws Throwable  {
      DerbyDialectExt derbyDialectExt0 = new DerbyDialectExt();
      String[] stringArray0 = derbyDialectExt0.getIndexAccessMethodsTypes();
      assertNotNull(stringArray0);
  }

  @Test
  public void test58()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("qb[<FmiCB`esT'a6lZ", "qb[<FmiCB`esT'a6lZ");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = dB2DialectExt0.getDropConstraintSQL("qb[<FmiCB`esT'a6lZ", "qb[<FmiCB`esT'a6lZ", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("ALTER TABLE \"qb[<FmiCB`esT'a6lZ\".\"qb[<FmiCB`esT'a6lZ\".\"qb[<FmiCB`esT'a6lZ\"\n DROP CONSTRAINT \"qb[<FmiCB`esT'a6lZ\"", string0);
  }

  @Test
  public void test59()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("", "", "", "", 0, "", 0, 1, 290, 1, "", "", 1242, (-359), "");
      boolean boolean0 = dB2DialectExt0.canPasteTo((IDatabaseObjectInfo) tableColumnInfo0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test60()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      int int0 = dB2DialectExt0.getMaxScale((int) '\"');
      assertEquals(31, int0);
  }

  @Test
  public void test61()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      boolean boolean0 = dB2DialectExt0.supportsProduct("ADD", "QvPu");
      assertEquals(false, boolean0);
  }

  @Test
  public void test62()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      boolean boolean0 = dB2DialectExt0.supportsProduct((String) null, (String) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test63()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      boolean boolean0 = dB2DialectExt0.supportsProduct("DB223w;Uj", "DB223w;Uj");
      assertEquals(true, boolean0);
  }

  @Test
  public void test64()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String[] stringArray0 = dB2DialectExt0.getAlterSequenceSQL("DB2atan2", "DB2atan2", "DB2atan2", "DB2atan2", "DB2atan2", "DB2atan2", false, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test65()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String[] stringArray0 = dB2DialectExt0.getAlterSequenceSQL("Q`", "ADD", "ADD", "ADD", "Q`", "Q`", true, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test66()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = dB2DialectExt0.getSequenceInformationSQL("", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertNotNull(string0);
      assertEquals("SELECT NEXTCACHEFIRSTVALUE, MAXVALUE, MINVALUE, CACHE, INCREMENT, CYCLE FROM SYSCAT.SEQUENCES WHERE SEQNAME = ''", string0);
  }

  @Test
  public void test67()  throws Throwable  {
      DB2DialectExt dB2DialectExt0 = new DB2DialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("", "");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = dB2DialectExt0.getSequenceInformationSQL("", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertNotNull(string0);
      assertEquals("SELECT NEXTCACHEFIRSTVALUE, MAXVALUE, MINVALUE, CACHE, INCREMENT, CYCLE FROM SYSCAT.SEQUENCES WHERE SEQSCHEMA = upper('') AND SEQNAME = ''", string0);
  }
}
