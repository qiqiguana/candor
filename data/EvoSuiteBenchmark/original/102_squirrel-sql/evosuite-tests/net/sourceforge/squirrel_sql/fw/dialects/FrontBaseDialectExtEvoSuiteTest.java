/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.dialects;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Collection;
import java.util.List;
import java.util.Vector;
import net.sourceforge.squirrel_sql.fw.dialects.DatabaseObjectQualifier;
import net.sourceforge.squirrel_sql.fw.dialects.DialectType;
import net.sourceforge.squirrel_sql.fw.dialects.FrontBaseDialectExt;
import net.sourceforge.squirrel_sql.fw.dialects.SqlGenerationPreferences;
import net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.IDatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.ITableInfo;
import net.sourceforge.squirrel_sql.fw.sql.TableColumnInfo;
import org.hibernate.MappingException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class FrontBaseDialectExtEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier(".%_'c8{%z~F\"", ".%_'c8{%z~F\"");
      // Undeclared exception!
      try {
        frontBaseDialectExt0.getRenameViewSQL(".%_'c8{%z~F\"", ".%_'c8{%z~F\"", databaseObjectQualifier0, (SqlGenerationPreferences) null);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * FrontBase doesn't support renaming views.
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("(>W>p.", "(>W>p.", "(>W>p.", "(>W>p.", 1749, "(>W>p.", 1749, 1749, 1749, 1749, (String) null, (String) null, 1749, (-37), (String) null);
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        frontBaseDialectExt0.getColumnTypeAlterSQL(tableColumnInfo0, tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: MappingException");
      } catch(MappingException e) {
        /*
         * No Dialect mapping for JDBC type: 1749
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      DialectType dialectType0 = frontBaseDialectExt0.getDialectType();
      assertEquals("FRONTBASE", dialectType0.name());
  }

  @Test
  public void test3()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      boolean boolean0 = frontBaseDialectExt0.supportsCreateSequence();
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      String string0 = frontBaseDialectExt0.getMaxFunction();
      assertEquals("max", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      boolean boolean0 = frontBaseDialectExt0.supportsDropColumn();
      assertEquals(true, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      boolean boolean0 = frontBaseDialectExt0.supportsAddColumn();
      assertEquals(true, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      int int0 = frontBaseDialectExt0.getPrecisionDigits(375, 375);
      assertEquals(375, int0);
  }

  @Test
  public void test8()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      boolean boolean0 = frontBaseDialectExt0.supportsAddUniqueConstraint();
      assertEquals(true, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      String string0 = frontBaseDialectExt0.getLengthFunction(1);
      assertEquals("character_length", string0);
  }

  @Test
  public void test10()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      String[] stringArray0 = new String[7];
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        frontBaseDialectExt0.getUpdateSQL("", stringArray0, stringArray0, stringArray0, stringArray0, stringArray0, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * FrontBase doesn't support updating rows.
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      boolean boolean0 = frontBaseDialectExt0.supportsRenameTable();
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("iMn", "iMn");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        frontBaseDialectExt0.getCreateSequenceSQL("iMn", "iMn", "iMn", "iMn", "iMn", "iMn", false, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * FrontBase doesn't support creating sequences.
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo((String) null, (String) null, "C@|", "C@|", 1, (String) null, 1, 1, 1, 1, "C@|", (String) null, 1, 1, "C@|");
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier((String) null, "C@|");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      try {
        frontBaseDialectExt0.getColumnCommentAlterSQL(tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * FrontBase doesn't support column comments
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      Vector<String> vector0 = new Vector<String>();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = frontBaseDialectExt0.getInsertIntoSQL("Fol0N#{{}-h=c/Q\"", (List<String>) vector0, "Fol0N#{{}-h=c/Q\"", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("INSERT INTO Fol0N#{{}-h=c/Q\"\n Fol0N#{{}-h=c/Q\"", string0);
  }

  @Test
  public void test15()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      // Undeclared exception!
      try {
        frontBaseDialectExt0.getSequenceInformationSQL("6 -", (DatabaseObjectQualifier) null, (SqlGenerationPreferences) null);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * FrontBase doesn't support gathering sequence information.
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      boolean boolean0 = frontBaseDialectExt0.supportsTablespace();
      assertEquals(false, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      boolean boolean0 = frontBaseDialectExt0.supportsRenameView();
      assertEquals(false, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = frontBaseDialectExt0.getCreateViewSQL((String) null, (String) null, (String) null, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertNotNull(string0);
      assertEquals("CREATE VIEW null\n AS null", string0);
  }

  @Test
  public void test19()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      int int0 = frontBaseDialectExt0.getMaxScale(0);
      assertEquals(36, int0);
  }

  @Test
  public void test20()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("I8'u]", "I8'u]", "I8'u]", "I8'u]", (int) '\"', "", 1, (int) '\"', (int) '\"', 1, "", "I8'u]", (int) '\"', (int) '\"', "I8'u]");
      // Undeclared exception!
      try {
        frontBaseDialectExt0.getAddAutoIncrementSQL(tableColumnInfo0, "I8'u]", databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * FrontBase doesn't support adding auto increment constraints.
         */
      }
  }

  @Test
  public void test21()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      boolean boolean0 = frontBaseDialectExt0.supportsInsertInto();
      assertEquals(true, boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      // Undeclared exception!
      try {
        frontBaseDialectExt0.getTableDropSQL((ITableInfo) null, false, false, (DatabaseObjectQualifier) null, (SqlGenerationPreferences) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test23()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      String[] stringArray0 = frontBaseDialectExt0.getIndexAccessMethodsTypes();
      assertNull(stringArray0);
  }

  @Test
  public void test24()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = frontBaseDialectExt0.getDropIndexSQL((String) null, (String) null, true, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertNotNull(string0);
      assertEquals("DROP INDEX ", string0);
  }

  @Test
  public void test25()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      boolean boolean0 = frontBaseDialectExt0.supportsAddForeignKeyConstraint();
      assertEquals(true, boolean0);
  }

  @Test
  public void test26()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      boolean boolean0 = frontBaseDialectExt0.supportsMultipleRowInserts();
      assertEquals(false, boolean0);
  }

  @Test
  public void test27()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("", "");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        frontBaseDialectExt0.getDropViewSQL("", false, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * FrontBase doesn't support dropping views.
         */
      }
  }

  @Test
  public void test28()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      boolean boolean0 = frontBaseDialectExt0.supportsUpdate();
      assertEquals(false, boolean0);
  }

  @Test
  public void test29()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      boolean boolean0 = frontBaseDialectExt0.supportsAccessMethods();
      assertEquals(false, boolean0);
  }

  @Test
  public void test30()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      boolean boolean0 = frontBaseDialectExt0.supportsAlterColumnDefault();
      assertEquals(true, boolean0);
  }

  @Test
  public void test31()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        frontBaseDialectExt0.getRenameTableSQL("FrontBaseFrontBase&9_V*.J09", "FrontBaseFrontBase&9_V*.J09", databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * FrontBase doesn't support renaming tables.
         */
      }
  }

  @Test
  public void test32()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        frontBaseDialectExt0.getAlterSequenceSQL("RT*t=", "RT*t=", "RT*t=", "RT*t=", "RT*t=", ";#", false, (DatabaseObjectQualifier) null, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * FrontBase doesn't support altering sequences.
         */
      }
  }

  @Test
  public void test33()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      boolean boolean0 = frontBaseDialectExt0.supportsDropSequence();
      assertEquals(false, boolean0);
  }

  @Test
  public void test34()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      boolean boolean0 = frontBaseDialectExt0.supportsDropConstraint();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      // Undeclared exception!
      try {
        frontBaseDialectExt0.getAddForeignKeyConstraintSQL("CACHE ", "CACHE ", "CACHE ", (Boolean) boolean0, (Boolean) boolean0, (Boolean) boolean0, false, "CACHE ", (Collection<String[]>) null, "CACHE ", "CACHE ", databaseObjectQualifier0, (SqlGenerationPreferences) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test35()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("org.antlr.stringtemplate.language.ChunkToken", "org.antlr.stringtemplate.language.ChunkToken");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        frontBaseDialectExt0.getColumnDefaultAlterSQL((TableColumnInfo) null, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test36()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      boolean boolean0 = frontBaseDialectExt0.supportsCreateIndex();
      assertEquals(true, boolean0);
  }

  @Test
  public void test37()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      // Undeclared exception!
      try {
        frontBaseDialectExt0.getDropSequenceSQL((String) null, false, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * FrontBase doesn't support dropping sequences.
         */
      }
  }

  @Test
  public void test38()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      Vector<TableColumnInfo> vector0 = new Vector<TableColumnInfo>();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      // Undeclared exception!
      try {
        frontBaseDialectExt0.getCreateTableSQL("CharScanner: panic", (List<TableColumnInfo>) vector0, (List<TableColumnInfo>) vector0, sqlGenerationPreferences0, databaseObjectQualifier0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * FrontBase does not support empty tables. (parameter 'columns' has to contain at least one column)
         */
      }
  }

  @Test
  public void test39()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      boolean boolean0 = frontBaseDialectExt0.supportsDropView();
      assertEquals(false, boolean0);
  }

  @Test
  public void test40()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      boolean boolean0 = frontBaseDialectExt0.supportsAlterSequence();
      assertEquals(false, boolean0);
  }

  @Test
  public void test41()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      boolean boolean0 = frontBaseDialectExt0.supportsSequenceInformation();
      assertEquals(false, boolean0);
  }

  @Test
  public void test42()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      boolean boolean0 = frontBaseDialectExt0.supportsAutoIncrement();
      assertEquals(false, boolean0);
  }

  @Test
  public void test43()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      boolean boolean0 = frontBaseDialectExt0.supportsViewDefinition();
      assertEquals(false, boolean0);
  }

  @Test
  public void test44()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = frontBaseDialectExt0.getDropPrimaryKeySQL("I8'u]", "I8'u]", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("ALTER TABLE I8'u] DROP CONSTRAINT \"I8'u]\" CASCADE", string0);
  }

  @Test
  public void test45()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("vMmo&>OM", "vMmo&>OM");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        frontBaseDialectExt0.getViewDefinitionSQL("vMmo&>OM", databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * FrontBase doesn't support getting the query for views
         */
      }
  }

  @Test
  public void test46()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      boolean boolean0 = frontBaseDialectExt0.supportsDropIndex();
      assertEquals(true, boolean0);
  }

  @Test
  public void test47()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("Year constructor: year (", "Year constructor: year (");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        frontBaseDialectExt0.getDropConstraintSQL("Year constructor: year (", "Year constructor: year (", databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * FrontBase doesn't support dropping constraints.
         */
      }
  }

  @Test
  public void test48()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      boolean boolean0 = frontBaseDialectExt0.supportsCorrelatedSubQuery();
      assertEquals(false, boolean0);
  }

  @Test
  public void test49()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      boolean boolean0 = frontBaseDialectExt0.supportsIndexes();
      assertEquals(true, boolean0);
  }

  @Test
  public void test50()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("~z1<M tLIw5_hUe6j.", "~z1<M tLIw5_hUe6j.");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        frontBaseDialectExt0.getColumnNullableAlterSQL((TableColumnInfo) null, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * FrontBase doesn't support altering a column's nullable attribute
         */
      }
  }

  @Test
  public void test51()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("", "");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("", "", "", "", 0, (String) null, 185, 0, 122, 185, "", "02lEk.MJ2c}", 185, 185, "");
      // Undeclared exception!
      try {
        frontBaseDialectExt0.getAddColumnSQL(tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: MappingException");
      } catch(MappingException e) {
        /*
         * No Dialect mapping for JDBC type: 0
         */
      }
  }

  @Test
  public void test52()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      boolean boolean0 = frontBaseDialectExt0.supportsColumnComment();
      assertEquals(false, boolean0);
  }

  @Test
  public void test53()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      boolean boolean0 = frontBaseDialectExt0.supportsSchemasInTableDefinition();
      assertEquals(true, boolean0);
  }

  @Test
  public void test54()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      boolean boolean0 = frontBaseDialectExt0.supportsRenameColumn();
      assertEquals(false, boolean0);
  }

  @Test
  public void test55()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      boolean boolean0 = frontBaseDialectExt0.supportsSequence();
      assertEquals(false, boolean0);
  }

  @Test
  public void test56()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("p<-P-M+", "p<-P-M+", "p<-P-M+", "p<-P-M+", 301, "p<-P-M+", 301, 301, 301, 3, "p<-P-M+", "p<-P-M+", 3, 301, "p<-P-M+");
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("", "p<-P-M+");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        frontBaseDialectExt0.getColumnNameAlterSQL(tableColumnInfo0, tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * FrontBase doesn't support altering a column's name
         */
      }
  }

  @Test
  public void test57()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      String[] stringArray0 = frontBaseDialectExt0.getIndexStorageOptions();
      assertNull(stringArray0);
  }

  @Test
  public void test58()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      boolean boolean0 = frontBaseDialectExt0.supportsAlterColumnNull();
      assertEquals(false, boolean0);
  }

  @Test
  public void test59()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      // Undeclared exception!
      try {
        frontBaseDialectExt0.getColumnDropSQL("F;Itu", "F;Itu", (DatabaseObjectQualifier) null, (SqlGenerationPreferences) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test60()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      int int0 = frontBaseDialectExt0.getColumnLength(1207, 1207);
      assertEquals(1207, int0);
  }

  @Test
  public void test61()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      boolean boolean0 = frontBaseDialectExt0.supportsCreateTable();
      assertEquals(true, boolean0);
  }

  @Test
  public void test62()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      boolean boolean0 = frontBaseDialectExt0.supportsAlterColumnType();
      assertEquals(true, boolean0);
  }

  @Test
  public void test63()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("", "");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = frontBaseDialectExt0.getDropForeignKeySQL("", "", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("ALTER TABLE  DROP CONSTRAINT \"\"", string0);
      assertNotNull(string0);
  }

  @Test
  public void test64()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      boolean boolean0 = frontBaseDialectExt0.supportsCreateView();
      assertEquals(true, boolean0);
  }

  @Test
  public void test65()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("max", "max", "max");
      boolean boolean0 = frontBaseDialectExt0.canPasteTo((IDatabaseObjectInfo) databaseObjectInfo0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test66()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      boolean boolean0 = frontBaseDialectExt0.supportsProduct("character_length", "character_length");
      assertEquals(false, boolean0);
  }

  @Test
  public void test67()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      boolean boolean0 = frontBaseDialectExt0.supportsProduct((String) null, "(>W>p.");
      assertEquals(false, boolean0);
  }

  @Test
  public void test68()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      boolean boolean0 = frontBaseDialectExt0.supportsProduct("FrontBaseFrontBase&9_V*.J09", "FrontBaseFrontBase&9_V*.J09");
      assertEquals(true, boolean0);
  }

  @Test
  public void test69()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String[] stringArray0 = new String[4];
      String string0 = frontBaseDialectExt0.getCreateIndexSQL("max", "max", "max", stringArray0, false, (String) null, (String) null, (DatabaseObjectQualifier) null, sqlGenerationPreferences0);
      assertNotNull(string0);
      assertEquals("CREATE  INDEX max ON max(null,null,null,null)", string0);
  }

  @Test
  public void test70()  throws Throwable  {
      FrontBaseDialectExt frontBaseDialectExt0 = new FrontBaseDialectExt();
      String[] stringArray0 = new String[5];
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = frontBaseDialectExt0.getCreateIndexSQL("%N| 35~/9y?\"[mG[KY", "%N| 35~/9y?\"[mG[KY", "%N| 35~/9y?\"[mG[KY", stringArray0, true, "%N| 35~/9y?\"[mG[KY", "%N| 35~/9y?\"[mG[KY", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("CREATE UNIQUE  INDEX %N| 35~/9y?\"[mG[KY ON %N| 35~/9y?\"[mG[KY(null,null,null,null,null)", string0);
      assertNotNull(string0);
  }
}
