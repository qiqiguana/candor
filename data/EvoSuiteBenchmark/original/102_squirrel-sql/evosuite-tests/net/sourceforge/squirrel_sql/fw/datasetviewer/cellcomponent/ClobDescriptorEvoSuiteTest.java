/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.sql.Clob;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.ClobDescriptor;
import org.hibernate.lob.ClobImpl;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ClobDescriptorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ClobDescriptor clobDescriptor0 = new ClobDescriptor((Clob) null, "", false, false, (-1377));
      int int0 = clobDescriptor0.getUserSetClobLimit();
      assertEquals((-1377), int0);
      assertEquals(false, clobDescriptor0.getWholeClobRead());
      assertEquals("<Clob>", clobDescriptor0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      ClobDescriptor clobDescriptor0 = new ClobDescriptor((Clob) null, "AX", false, false, 0);
      clobDescriptor0.setClob((Clob) null);
      assertEquals(0, clobDescriptor0.getUserSetClobLimit());
      assertEquals(false, clobDescriptor0.getClobRead());
      assertEquals(false, clobDescriptor0.getWholeClobRead());
  }

  @Test
  public void test2()  throws Throwable  {
      ClobDescriptor clobDescriptor0 = new ClobDescriptor((Clob) null, "", false, false, (-1377));
      clobDescriptor0.setWholeClobRead(false);
      assertEquals(false, clobDescriptor0.getWholeClobRead());
      assertEquals(-1377, clobDescriptor0.getUserSetClobLimit());
      assertEquals(false, clobDescriptor0.getClobRead());
  }

  @Test
  public void test3()  throws Throwable  {
      ClobImpl clobImpl0 = new ClobImpl("");
      ClobDescriptor clobDescriptor0 = new ClobDescriptor((Clob) clobImpl0, "", true, false, 0);
      clobDescriptor0.setData("");
      assertEquals(true, clobDescriptor0.getClobRead());
      assertEquals(0, clobDescriptor0.getUserSetClobLimit());
      assertEquals("...", clobDescriptor0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      ClobDescriptor clobDescriptor0 = new ClobDescriptor((Clob) null, "", false, false, (-1377));
      clobDescriptor0.getClob();
      assertEquals(-1377, clobDescriptor0.getUserSetClobLimit());
      assertEquals(false, clobDescriptor0.getClobRead());
      assertEquals(false, clobDescriptor0.getWholeClobRead());
      assertEquals("<Clob>", clobDescriptor0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      ClobDescriptor clobDescriptor0 = new ClobDescriptor((Clob) null, "", false, false, (-1377));
      boolean boolean0 = clobDescriptor0.getWholeClobRead();
      assertEquals(false, clobDescriptor0.getClobRead());
      assertEquals(false, boolean0);
      assertEquals(-1377, clobDescriptor0.getUserSetClobLimit());
  }

  @Test
  public void test6()  throws Throwable  {
      ClobDescriptor clobDescriptor0 = new ClobDescriptor((Clob) null, "", false, true, 243);
      clobDescriptor0.setClobRead(false);
      assertEquals(243, clobDescriptor0.getUserSetClobLimit());
      assertEquals(true, clobDescriptor0.getWholeClobRead());
      assertEquals(false, clobDescriptor0.getClobRead());
  }

  @Test
  public void test7()  throws Throwable  {
      ClobDescriptor clobDescriptor0 = new ClobDescriptor((Clob) null, "", true, false, 1109);
      boolean boolean0 = clobDescriptor0.equals(clobDescriptor0);
      assertEquals(false, clobDescriptor0.getWholeClobRead());
      assertEquals(1109, clobDescriptor0.getUserSetClobLimit());
      assertEquals("", clobDescriptor0.toString());
      assertEquals(true, clobDescriptor0.getClobRead());
      assertEquals(true, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      ClobDescriptor clobDescriptor0 = new ClobDescriptor((Clob) null, "", false, false, (-1377));
      clobDescriptor0.setUserSetClobLimit((-1304));
      assertEquals(-1304, clobDescriptor0.getUserSetClobLimit());
  }

  @Test
  public void test9()  throws Throwable  {
      ClobDescriptor clobDescriptor0 = new ClobDescriptor((Clob) null, "AX", false, false, 0);
      boolean boolean0 = clobDescriptor0.equals((ClobDescriptor) null);
      assertEquals(false, clobDescriptor0.getClobRead());
      assertEquals(0, clobDescriptor0.getUserSetClobLimit());
      assertEquals(false, boolean0);
      assertEquals(false, clobDescriptor0.getWholeClobRead());
  }

  @Test
  public void test10()  throws Throwable  {
      ClobImpl clobImpl0 = new ClobImpl("AX");
      ClobDescriptor clobDescriptor0 = new ClobDescriptor((Clob) clobImpl0, "AX", true, true, 0);
      boolean boolean0 = clobDescriptor0.equals((ClobDescriptor) null);
      assertEquals(true, clobDescriptor0.getWholeClobRead());
      assertEquals(0, clobDescriptor0.getUserSetClobLimit());
      assertEquals(false, boolean0);
      assertEquals(true, clobDescriptor0.getClobRead());
  }

  @Test
  public void test11()  throws Throwable  {
      ClobImpl clobImpl0 = new ClobImpl("AX");
      ClobDescriptor clobDescriptor0 = new ClobDescriptor((Clob) clobImpl0, (String) null, true, true, 0);
      boolean boolean0 = clobDescriptor0.equals((ClobDescriptor) null);
      assertEquals(true, clobDescriptor0.getWholeClobRead());
      assertEquals(true, boolean0);
      assertEquals(0, clobDescriptor0.getUserSetClobLimit());
  }

  @Test
  public void test12()  throws Throwable  {
      ClobDescriptor clobDescriptor0 = new ClobDescriptor((Clob) null, "sV\"=Oe#soW|p4?,zLm", true, true, 0);
      ClobDescriptor clobDescriptor1 = new ClobDescriptor((Clob) null, "sV\"=Oe#soW|p4?,zLm", false, false, 0);
      boolean boolean0 = clobDescriptor0.equals(clobDescriptor1);
      assertEquals(0, clobDescriptor0.getUserSetClobLimit());
      assertEquals(true, clobDescriptor0.getClobRead());
      assertEquals(false, boolean0);
      assertEquals("sV\"=Oe#soW|p4?,zLm", clobDescriptor0.toString());
      assertEquals(true, clobDescriptor0.getWholeClobRead());
  }

  @Test
  public void test13()  throws Throwable  {
      ClobDescriptor clobDescriptor0 = new ClobDescriptor((Clob) null, "", false, false, 1775);
      boolean boolean0 = clobDescriptor0.equals(clobDescriptor0);
      assertEquals(1775, clobDescriptor0.getUserSetClobLimit());
      assertEquals(false, clobDescriptor0.getWholeClobRead());
      assertEquals("<Clob>", clobDescriptor0.toString());
      assertEquals(true, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      ClobDescriptor clobDescriptor0 = new ClobDescriptor((Clob) null, "", false, false, (-1377));
      ClobDescriptor clobDescriptor1 = new ClobDescriptor((Clob) null, "", true, false, (-1304));
      boolean boolean0 = clobDescriptor0.equals(clobDescriptor1);
      assertEquals(true, clobDescriptor1.getClobRead());
      assertEquals(-1377, clobDescriptor0.getUserSetClobLimit());
      assertEquals(false, boolean0);
      assertEquals("...", clobDescriptor1.toString());
  }

  @Test
  public void test15()  throws Throwable  {
      ClobDescriptor clobDescriptor0 = new ClobDescriptor((Clob) null, "", false, false, (-1377));
      String string0 = clobDescriptor0.toString();
      assertEquals(false, clobDescriptor0.getWholeClobRead());
      assertEquals("<Clob>", string0);
      assertNotNull(string0);
      assertEquals(-1377, clobDescriptor0.getUserSetClobLimit());
  }

  @Test
  public void test16()  throws Throwable  {
      ClobDescriptor clobDescriptor0 = new ClobDescriptor((Clob) null, "", true, false, 1073);
      String string0 = clobDescriptor0.toString();
      assertEquals("", string0);
      assertEquals(false, clobDescriptor0.getWholeClobRead());
      assertEquals(true, clobDescriptor0.getClobRead());
      assertNotNull(string0);
      assertEquals(1073, clobDescriptor0.getUserSetClobLimit());
  }

  @Test
  public void test17()  throws Throwable  {
      ClobImpl clobImpl0 = new ClobImpl("AX");
      ClobDescriptor clobDescriptor0 = new ClobDescriptor((Clob) clobImpl0, (String) null, true, true, 0);
      String string0 = clobDescriptor0.toString();
      assertEquals(true, clobDescriptor0.getClobRead());
      assertEquals(true, clobDescriptor0.getWholeClobRead());
      assertEquals("<null>", string0);
      assertEquals(0, clobDescriptor0.getUserSetClobLimit());
      assertNotNull(string0);
  }

  @Test
  public void test18()  throws Throwable  {
      ClobDescriptor clobDescriptor0 = new ClobDescriptor((Clob) null, "J{vd=zh<BQ.Hrvo", true, true, (-1));
      String string0 = clobDescriptor0.toString();
      assertEquals(-1, clobDescriptor0.getUserSetClobLimit());
      assertEquals(true, clobDescriptor0.getClobRead());
      assertEquals(true, clobDescriptor0.getWholeClobRead());
      assertNotNull(string0);
      assertEquals("J{vd=zh<BQ.Hrvo", string0);
  }

  @Test
  public void test19()  throws Throwable  {
      ClobImpl clobImpl0 = new ClobImpl("");
      ClobDescriptor clobDescriptor0 = new ClobDescriptor((Clob) clobImpl0, "", true, false, 0);
      String string0 = clobDescriptor0.toString();
      assertEquals("...", string0);
      assertEquals(0, clobDescriptor0.getUserSetClobLimit());
      assertNotNull(string0);
      assertEquals(true, clobDescriptor0.getClobRead());
  }
}
