/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.JTable;
import net.sourceforge.squirrel_sql.fw.datasetviewer.ColumnDisplayDefinition;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.DataTypeString;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.RestorableJTextArea;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.RestorableJTextField;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.whereClause.IsNullWhereClausePart;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.whereClause.ParameterWhereClausePart;
import net.sourceforge.squirrel_sql.fw.gui.OkJPanel;
import net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DataTypeStringEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DataTypeString dataTypeString0 = new DataTypeString();
      // Undeclared exception!
      try {
        dataTypeString0.exportObject((FileOutputStream) null, "java.lang.String");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      DataTypeString dataTypeString0 = new DataTypeString();
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = (String)dataTypeString0.validateAndConvertInPopup("", (Object) "acceptAllFileFilterUsedChanged", stringBuffer0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      DataTypeString dataTypeString0 = new DataTypeString();
      boolean boolean0 = dataTypeString0.useBinaryEditingPanel();
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      DataTypeString dataTypeString0 = new DataTypeString();
      RestorableJTextField restorableJTextField0 = (RestorableJTextField)dataTypeString0.getJTextField();
      assertEquals(0, restorableJTextField0.getColumns());
  }

  @Test
  public void test4()  throws Throwable  {
      DataTypeString dataTypeString0 = new DataTypeString();
      RestorableJTextArea restorableJTextArea0 = (RestorableJTextArea)dataTypeString0.getJTextArea((Object) "javax.swing.JCheckBoxMenuItem[,0,0,0x0,invalid,alignmentX=0.0,alignmentY=0.0,border=javax.swing.plaf.metal.MetalBorders$MenuItemBorder@7bc74b3,flags=264,maximumSize=,minimumSize=,preferredSize=,defaultIcon=,disabledIcon=,disabledSelectedIcon=,margin=javax.swing.plaf.InsetsUIResource[top=2,left=2,bottom=2,right=2],paintBorder=true,paintFocus=false,pressedIcon=,rolloverEnabled=false,rolloverIcon=,rolloverSelectedIcon=,selectedIcon=,text=]");
      assertEquals(false, restorableJTextArea0.requestFocusInWindow());
  }

  @Test
  public void test5()  throws Throwable  {
      DataTypeString dataTypeString0 = new DataTypeString();
      boolean boolean0 = dataTypeString0.canDoFileIO();
      assertEquals(true, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      OkJPanel okJPanel0 = DataTypeString.getControlPanel();
      assertEquals(false, okJPanel0.isPreferredSizeSet());
  }

  @Test
  public void test7()  throws Throwable  {
      DataTypeString dataTypeString0 = new DataTypeString();
      String string0 = dataTypeString0.getClassName();
      assertEquals("java.lang.String", string0);
  }

  @Test
  public void test8()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(1997, (String) null);
      DataTypeString dataTypeString0 = new DataTypeString((JTable) null, columnDisplayDefinition0);
      String string0 = (String)dataTypeString0.getDefaultValue((String) null);
      assertNull(string0);
  }

  @Test
  public void test9()  throws Throwable  {
      DataTypeString dataTypeString0 = new DataTypeString();
      String string0 = dataTypeString0.renderObject((Object) "acceptAllFileFilterUsedChanged");
      assertEquals("acceptAllFileFilterUsedChanged", string0);
      assertNotNull(string0);
  }

  @Test
  public void test10()  throws Throwable  {
      DataTypeString dataTypeString0 = new DataTypeString();
      boolean boolean0 = dataTypeString0.isEditableInCell((Object) null);
      assertEquals(true, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      DataTypeString dataTypeString0 = new DataTypeString();
      boolean boolean0 = dataTypeString0.isEditableInCell((Object) "Default");
      assertEquals(true, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      DataTypeString dataTypeString0 = new DataTypeString();
      boolean boolean0 = dataTypeString0.isEditableInPopup((Object) "");
      assertEquals(true, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      DataTypeString dataTypeString0 = new DataTypeString();
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-1), "acceptAllFileFilterUsedChanged");
      dataTypeString0.setColumnDisplayDefinition(columnDisplayDefinition0);
      ParameterWhereClausePart parameterWhereClausePart0 = (ParameterWhereClausePart)dataTypeString0.getWhereClauseValue((Object) "acceptAllFileFilterUsedChanged", (ISQLDatabaseMetaData) null);
      assertEquals(true, parameterWhereClausePart0.shouldBeUsed());
  }

  @Test
  public void test14()  throws Throwable  {
      DataTypeString dataTypeString0 = new DataTypeString();
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(1185, "acceptAllFileFilterUsedChanged");
      dataTypeString0.setColumnDisplayDefinition(columnDisplayDefinition0);
      IsNullWhereClausePart isNullWhereClausePart0 = (IsNullWhereClausePart)dataTypeString0.getWhereClauseValue((Object) null, (ISQLDatabaseMetaData) null);
      assertEquals("acceptAllFileFilterUsedChanged", isNullWhereClausePart0.getColumn());
  }

  @Test
  public void test15()  throws Throwable  {
      DataTypeString dataTypeString0 = new DataTypeString();
      // Undeclared exception!
      try {
        dataTypeString0.setPreparedStatementValue((PreparedStatement) null, (Object) "ToolTipText", 13);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test16()  throws Throwable  {
      DataTypeString dataTypeString0 = new DataTypeString();
      // Undeclared exception!
      try {
        dataTypeString0.setPreparedStatementValue((PreparedStatement) null, (Object) null, (-1707));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test17()  throws Throwable  {
      DataTypeString dataTypeString0 = new DataTypeString();
      String string0 = (String)dataTypeString0.getDefaultValue("acceptAllFileFilterUsedChanged");
      assertNotNull(string0);
      assertEquals("acceptAllFileFilterUsedChanged", string0);
  }

  @Test
  public void test18()  throws Throwable  {
      DataTypeString dataTypeString0 = new DataTypeString();
      String string0 = (String)dataTypeString0.getDefaultValue((String) null);
      assertEquals("", string0);
  }
}
