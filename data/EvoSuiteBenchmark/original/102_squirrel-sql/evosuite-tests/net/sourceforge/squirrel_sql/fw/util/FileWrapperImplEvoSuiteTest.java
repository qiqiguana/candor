/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.io.FilenameFilter;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import net.sourceforge.squirrel_sql.fw.util.FileWrapper;
import net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.jboss.util.file.FileSuffixFilter;
import org.jfree.ui.FilesystemFilter;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class FileWrapperImplEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl((FileWrapper) null, ",PZ..1E!;zV");
      String string0 = fileWrapperImpl0.toString();
      assertEquals(",PZ..1E!;zV", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("", "");
      int int0 = fileWrapperImpl0.compareTo(fileWrapperImpl0);
      assertEquals(0, int0);
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl((FileWrapper) null, ",PZ..1E!;zV");
          // Undeclared exception!
          try {
            fileWrapperImpl0.setLastModified(17L);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission ,PZ..1E!;zV write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.setLastModified(File.java:1261)
             * net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl.setLastModified(FileWrapperImpl.java:439)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("Khz:t'Xpq", "Khz:t'Xpq");
      URI uRI0 = fileWrapperImpl0.toURI();
      assertEquals(true, uRI0.isAbsolute());
  }

  @Test
  public void test4()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("N", "N");
      long long0 = fileWrapperImpl0.lastModified();
      assertEquals(0L, long0);
  }

  @Test
  public void test5()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("n{7s");
      FileWrapperImpl fileWrapperImpl1 = (FileWrapperImpl)fileWrapperImpl0.getCanonicalFile();
      assertEquals(false, fileWrapperImpl1.exists());
  }

  @Test
  public void test6()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("Ki2G4^BrQI^;b", "Ki2G4^BrQI^;b");
      boolean boolean0 = fileWrapperImpl0.isFile();
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("");
      FileWrapperImpl fileWrapperImpl1 = new FileWrapperImpl(fileWrapperImpl0);
      assertTrue(fileWrapperImpl0.equals(fileWrapperImpl1));
  }

  @Test
  public void test8()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("Khz:t'Xpq", "Khz:t'Xpq");
      String[] stringArray0 = fileWrapperImpl0.list();
      assertNull(stringArray0);
  }

  @Test
  public void test9()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("antlr", "antlr");
      boolean boolean0 = fileWrapperImpl0.exists();
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("k");
          // Undeclared exception!
          try {
            fileWrapperImpl0.renameTo((FileWrapper) fileWrapperImpl0);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission k write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.renameTo(File.java:1225)
             * net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl.renameTo(FileWrapperImpl.java:431)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test11()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("Khz:t'Xpq", "Khz:t'Xpq");
      String string0 = fileWrapperImpl0.getCanonicalPath();
      assertEquals("/mnt/fastdata/ac1gf/SF110/dist/102_squirrel-sql/Khz:t'Xpq/Khz:t'Xpq", string0);
  }

  @Test
  public void test12()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("antlr", "antlr");
      String string0 = fileWrapperImpl0.getName();
      assertEquals("antlr", string0);
  }

  @Test
  public void test13()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("k");
      FileWrapperImpl fileWrapperImpl1 = (FileWrapperImpl)fileWrapperImpl0.getAbsoluteFile();
      assertEquals(false, fileWrapperImpl1.isDirectory());
  }

  @Test
  public void test14()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("Khz:t'Xpq", "Khz:t'Xpq");
      String string0 = fileWrapperImpl0.getParent();
      assertEquals("Khz:t'Xpq", string0);
  }

  @Test
  public void test15()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("Khz:t'Xpq", "Khz:t'Xpq");
      boolean boolean0 = fileWrapperImpl0.isAbsolute();
      assertEquals(false, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("*J~e79lbz)WP#", "*J~e79lbz)WP#");
      FileWrapper[] fileWrapperArray0 = fileWrapperImpl0.listFiles();
      assertNull(fileWrapperArray0);
  }

  @Test
  public void test17()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("*J~e79lbz)WP#", "*J~e79lbz)WP#");
      String[] stringArray0 = new String[1];
      FilesystemFilter filesystemFilter0 = new FilesystemFilter(stringArray0, "*J~e79lbz)WP#", false);
      String[] stringArray1 = fileWrapperImpl0.list((FilenameFilter) filesystemFilter0);
      assertNull(stringArray1);
  }

  @Test
  public void test18()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("Khz:t'Xpq", "Khz:t'Xpq");
      FilesystemFilter filesystemFilter0 = new FilesystemFilter("Khz:t'Xpq", "Khz:t'Xpq", true);
      FileWrapper[] fileWrapperArray0 = fileWrapperImpl0.listFiles((FilenameFilter) filesystemFilter0);
      assertNull(fileWrapperArray0);
  }

  @Test
  public void test19()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("Ki2G4^BrQI^;b", "Ki2G4^BrQI^;b");
      URL uRL0 = fileWrapperImpl0.toURL();
      assertNull(uRL0.getRef());
  }

  @Test
  public void test20()  throws Throwable  {
      URI uRI0 = URI.create("j0V");
      FileWrapperImpl fileWrapperImpl0 = null;
      try {
        fileWrapperImpl0 = new FileWrapperImpl(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * URI is not absolute
         */
      }
  }

  @Test
  public void test21()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("H'dZ?[eyaaECt)Ts");
          // Undeclared exception!
          try {
            fileWrapperImpl0.getFileOutputStream();
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission H'dZ?[eyaaECt)Ts write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:183)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:145)
             * net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl.getFileOutputStream(FileWrapperImpl.java:707)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test22()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("");
      long long0 = fileWrapperImpl0.length();
      assertEquals(0L, long0);
  }

  @Test
  public void test23()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          // Undeclared exception!
          try {
            FileWrapperImpl.createTempFile("an<lr", "an<lr");
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission /tmp/an<lr8222875576257751841an<lr write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.checkAndCreate(File.java:1696)
             * java.io.File.createTempFile(File.java:1792)
             * net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl.createTempFile(FileWrapperImpl.java:688)
             * net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl.createTempFile(FileWrapperImpl.java:580)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test24()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("*J~e79lbz)WP#", "*J~e79lbz)WP#");
          // Undeclared exception!
          try {
            fileWrapperImpl0.getPrintWriter();
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission *J~e79lbz)WP#/*J~e79lbz)WP# write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:183)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:145)
             * java.io.FileWriter.<init>(FileWriter.java:73)
             * net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl.getFileWriter(FileWrapperImpl.java:716)
             * net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl.getPrintWriter(FileWrapperImpl.java:743)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test25()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("antlr", "antlr");
      boolean boolean0 = fileWrapperImpl0.isHidden();
      assertEquals(false, boolean0);
  }

  @Test
  public void test26()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl(" -~nF6wkj");
          // Undeclared exception!
          try {
            fileWrapperImpl0.setReadOnly();
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission  -~nF6wkj write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.setReadOnly(File.java:1286)
             * net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl.setReadOnly(FileWrapperImpl.java:447)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test27()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("");
          // Undeclared exception!
          try {
            fileWrapperImpl0.delete();
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission  delete)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkDelete(SecurityManager.java:990)
             * java.io.File.delete(File.java:902)
             * net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl.delete(FileWrapperImpl.java:359)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test28()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("n{7s");
          // Undeclared exception!
          try {
            fileWrapperImpl0.deleteOnExit();
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission n{7s delete)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkDelete(SecurityManager.java:990)
             * java.io.File.deleteOnExit(File.java:937)
             * net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl.deleteOnExit(FileWrapperImpl.java:367)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test29()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("7W#rQUXA|t50\"*UJka", "7W#rQUXA|t50\"*UJka");
          // Undeclared exception!
          try {
            fileWrapperImpl0.mkdir();
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission 7W#rQUXA|t50\"*UJka/7W#rQUXA|t50\"*UJka write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.mkdir(File.java:1155)
             * net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl.mkdir(FileWrapperImpl.java:415)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test30()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("vR", "vR");
      try {
        fileWrapperImpl0.getBufferedReader();
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
        /*
         * vR/vR (No such file or directory)
         */
      }
  }

  @Test
  public void test31()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("Khz:t'Xpq", "Khz:t'Xpq");
      String string0 = fileWrapperImpl0.getAbsolutePath();
      assertEquals("/mnt/fastdata/ac1gf/SF110/dist/102_squirrel-sql/Khz:t'Xpq/Khz:t'Xpq", string0);
  }

  @Test
  public void test32()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("(i");
          // Undeclared exception!
          try {
            fileWrapperImpl0.canWrite();
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission (i write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.canWrite(File.java:711)
             * net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl.canWrite(FileWrapperImpl.java:293)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test33()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("");
      boolean boolean0 = fileWrapperImpl0.canRead();
      assertEquals(false, boolean0);
  }

  @Test
  public void test34()  throws Throwable  {
      FileWrapper[] fileWrapperArray0 = FileWrapperImpl.listRoots();
      assertNotNull(fileWrapperArray0);
  }

  @Test
  public void test35()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("MBhZZMfFh\"@6lRS");
      try {
        fileWrapperImpl0.getFileInputStream();
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
        /*
         * MBhZZMfFh\"@6lRS (No such file or directory)
         */
      }
  }

  @Test
  public void test36()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("Ki2G4^BrQI^;b", "Ki2G4^BrQI^;b");
      String[] stringArray0 = new String[2];
      FileSuffixFilter fileSuffixFilter0 = new FileSuffixFilter(stringArray0, false);
      FileWrapper[] fileWrapperArray0 = fileWrapperImpl0.listFiles((FileFilter) fileSuffixFilter0);
      assertNull(fileWrapperArray0);
  }

  @Test
  public void test37()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("");
          // Undeclared exception!
          try {
            fileWrapperImpl0.mkdirs();
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission  write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.mkdir(File.java:1155)
             * java.io.File.mkdirs(File.java:1184)
             * net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl.mkdirs(FileWrapperImpl.java:423)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test38()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("*J~e79lbz)WP#", "*J~e79lbz)WP#");
      boolean boolean0 = fileWrapperImpl0.isDirectory();
      assertEquals(false, boolean0);
  }

  @Test
  public void test39()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("", "");
          // Undeclared exception!
          try {
            fileWrapperImpl0.createNewFile();
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission / write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.createNewFile(File.java:882)
             * net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl.createNewFile(FileWrapperImpl.java:351)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test40()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl((File) null);
      // Undeclared exception!
      try {
        fileWrapperImpl0.getPath();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test41()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("Ki2G4^BrQI^;b", "Ki2G4^BrQI^;b");
      FileWrapperImpl fileWrapperImpl1 = new FileWrapperImpl((FileWrapper) fileWrapperImpl0, "Ki2G4^BrQI^;b");
      assertEquals("Ki2G4^BrQI^;b/Ki2G4^BrQI^;b/Ki2G4^BrQI^;b", fileWrapperImpl1.getPath());
  }

  @Test
  public void test42()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("Khz:t'Xpq", "Khz:t'Xpq");
      FileWrapperImpl fileWrapperImpl1 = (FileWrapperImpl)fileWrapperImpl0.getParentFile();
      assertEquals(0L, fileWrapperImpl1.length());
  }

  @Test
  public void test43()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl(" -~nF6wkj");
      FileWrapperImpl fileWrapperImpl1 = (FileWrapperImpl)fileWrapperImpl0.getParentFile();
      assertNull(fileWrapperImpl1);
  }

  @Test
  public void test44()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("", "");
      // Undeclared exception!
      try {
        FileWrapperImpl.createTempFile("", "", (FileWrapper) fileWrapperImpl0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Prefix string too short
         */
      }
  }

  @Test
  public void test45()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          // Undeclared exception!
          try {
            FileWrapperImpl.createTempFile("9S|cZ\bdbh{$j9#", "9S|cZ\bdbh{$j9#", (FileWrapper) null);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission /tmp/9S|cZ\bdbh{$j9#85995948833602646679S|cZ\bdbh{$j9# write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.checkAndCreate(File.java:1696)
             * java.io.File.createTempFile(File.java:1792)
             * net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl.createTempFile(FileWrapperImpl.java:546)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test46()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("N", "N");
      int int0 = fileWrapperImpl0.hashCode();
      assertEquals(1310587, int0);
  }

  @Test
  public void test47()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl((File) null);
      int int0 = fileWrapperImpl0.hashCode();
      assertEquals(31, int0);
  }

  @Test
  public void test48()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("*J~e79lbz)WP#", "*J~e79lbz)WP#");
      boolean boolean0 = fileWrapperImpl0.equals((Object) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test49()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("7W#rQUXA|t50\"*UJka", "7W#rQUXA|t50\"*UJka");
      FileWrapperImpl fileWrapperImpl1 = new FileWrapperImpl("7W#rQUXA|t50\"*UJka", "7W#rQUXA|t50\"*UJka");
      boolean boolean0 = fileWrapperImpl0.equals((Object) fileWrapperImpl1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test50()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("Khz:t'Xpq", "Khz:t'Xpq");
      boolean boolean0 = fileWrapperImpl0.equals((Object) "/mnt/fastdata/ac1gf/SF110/dist/102_squirrel-sql/Khz:t'Xpq/Khz:t'Xpq");
      assertEquals(false, boolean0);
  }

  @Test
  public void test51()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl((File) null);
      FileWrapperImpl fileWrapperImpl1 = new FileWrapperImpl("<{+TF`eFK");
      boolean boolean0 = fileWrapperImpl0.equals((Object) fileWrapperImpl1);
      assertFalse(fileWrapperImpl1.equals(fileWrapperImpl0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test52()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("antlr", "antlr");
      FileWrapperImpl fileWrapperImpl1 = new FileWrapperImpl("hEjN.wVHZU", "antlr");
      boolean boolean0 = fileWrapperImpl0.equals((Object) fileWrapperImpl1);
      assertEquals("antlr", fileWrapperImpl1.getName());
      assertEquals(false, boolean0);
  }

  @Test
  public void test53()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl((File) null);
          // Undeclared exception!
          try {
            FileWrapperImpl.createTempFile("<{+TF`eFK", "<{+TF`eFK", fileWrapperImpl0);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission /tmp/<{+TF`eFK6686157571204618215<{+TF`eFK write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.checkAndCreate(File.java:1696)
             * java.io.File.createTempFile(File.java:1792)
             * net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl.createTempFile(FileWrapperImpl.java:686)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
