/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.gui;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.awt.Component;
import java.awt.HeadlessException;
import java.awt.Window;
import javax.swing.DefaultListCellRenderer;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JDialog;
import javax.swing.JFormattedTextField;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.tree.DefaultTreeCellRenderer;
import net.sourceforge.squirrel_sql.fw.gui.GUIUtils;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class GUIUtilsEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      GUIUtils.setMainFrame((JFrame) null);
  }

  @Test
  public void test1()  throws Throwable  {
      JInternalFrame jInternalFrame0 = new JInternalFrame("", false);
      GUIUtils.moveToFront(jInternalFrame0);
      assertEquals(true, jInternalFrame0.isVisible());
  }

  @Test
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try {
        GUIUtils.enableCloseByEscape((JDialog) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      GUIUtils gUIUtils0 = new GUIUtils();
      assertNotNull(gUIUtils0);
  }

  @Test
  public void test4()  throws Throwable  {
      JFrame jFrame0 = GUIUtils.getMainFrame();
      assertNull(jFrame0);
  }

  @Test
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try {
        GUIUtils.centerWithinParent((Window) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * null Window passed
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      JInternalFrame jInternalFrame0 = new JInternalFrame("", false);
      GUIUtils.centerWithinDesktop(jInternalFrame0);
      assertEquals(false, jInternalFrame0.isVisible());
  }

  @Test
  public void test7()  throws Throwable  {
      // Undeclared exception!
      try {
        GUIUtils.centerWithinDesktop((JInternalFrame) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * null JInternalFrame passed
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      // Undeclared exception!
      try {
        GUIUtils.centerWithinScreen((Window) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * null Window passed
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      GUIUtils.moveToFront((JInternalFrame) null);
  }

  @Test
  public void test10()  throws Throwable  {
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem();
      // Undeclared exception!
      try {
        GUIUtils.getOwningFrame((Component) jCheckBoxMenuItem0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * null Component passed
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      JInternalFrame jInternalFrame0 = new JInternalFrame("\"#mV :#RReauLwVo", true);
      boolean boolean0 = GUIUtils.isToolWindow(jInternalFrame0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try {
        GUIUtils.isToolWindow((JInternalFrame) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * null JInternalFrame passed
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      JInternalFrame jInternalFrame0 = new JInternalFrame("\"#mV :#RReauLwVo", true);
      GUIUtils.makeToolWindow(jInternalFrame0, false);
      boolean boolean0 = GUIUtils.isToolWindow(jInternalFrame0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      JInternalFrame jInternalFrame0 = new JInternalFrame("\"#mV :#RReauLwVo", true);
      GUIUtils.makeToolWindow(jInternalFrame0, true);
      boolean boolean0 = GUIUtils.isToolWindow(jInternalFrame0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try {
        GUIUtils.makeToolWindow((JInternalFrame) null, false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * null JInternalFrame passed
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try {
        GUIUtils.setJButtonSizesTheSame((JButton[]) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * null JButton[] passed
         */
      }
  }

  @Test
  public void test17()  throws Throwable  {
      JButton[] jButtonArray0 = new JButton[3];
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Icon icon0 = defaultTreeCellRenderer0.getClosedIcon();
      JButton jButton0 = new JButton("Q~YK", icon0);
      jButtonArray0[0] = jButton0;
      jButtonArray0[1] = jButton0;
      jButtonArray0[2] = jButtonArray0[0];
      GUIUtils.setJButtonSizesTheSame(jButtonArray0);
  }

  @Test
  public void test18()  throws Throwable  {
      DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer();
      // Undeclared exception!
      try {
        GUIUtils.isWithinParent((Component) defaultListCellRenderer0);
        fail("Expecting exception: HeadlessException");
      } catch(HeadlessException e) {
      }
  }

  @Test
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try {
        GUIUtils.isWithinParent((Component) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Null Component passed
         */
      }
  }

  @Test
  public void test20()  throws Throwable  {
      DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer();
      DefaultFormatterFactory defaultFormatterFactory0 = new DefaultFormatterFactory();
      JFormattedTextField jFormattedTextField0 = new JFormattedTextField((JFormattedTextField.AbstractFormatterFactory) defaultFormatterFactory0);
      JFormattedTextField jFormattedTextField1 = (JFormattedTextField)defaultListCellRenderer0.add("\"\n", (Component) jFormattedTextField0);
      boolean boolean0 = GUIUtils.isWithinParent((Component) jFormattedTextField1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try {
        GUIUtils.processOnSwingEventThread((Runnable) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Runnable == null
         */
      }
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = GUIUtils.getWrappedLine("~B)r: H(", 376);
      assertEquals("~B)r: H(", string0);
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = GUIUtils.getWrappedLine(",PR-R^]CEbU`P", (-6));
      assertNotNull(string0);
      assertEquals(",\n\nPR-R^]CEbU`P\n", string0);
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = GUIUtils.getWrappedLine("~B)r: H(", (-305));
      assertEquals("~B)r: H(\n", string0);
      assertNotNull(string0);
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = GUIUtils.getWrappedLine("Q~YK", (-1));
      assertNotNull(string0);
      assertEquals("Q~YK\n", string0);
  }

  @Test
  public void test26()  throws Throwable  {
      JInternalFrame jInternalFrame0 = new JInternalFrame("<Ih+]~lAb", true, true, true, true);
      // Undeclared exception!
      try {
        GUIUtils.getScreenLocationFor((Component) jInternalFrame0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
