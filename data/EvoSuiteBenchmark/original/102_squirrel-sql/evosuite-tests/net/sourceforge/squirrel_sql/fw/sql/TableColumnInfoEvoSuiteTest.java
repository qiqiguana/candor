/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.sql;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import net.sourceforge.squirrel_sql.fw.sql.TableColumnInfo;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TableColumnInfoEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("j.,", "j.,", "j.,", "j.,", 1023, "j.,", 1023, 2, 1716, 0, "", "%4E[^$wAV*1e", (-971), 44, "%4E[^$wAV*1e");
      int int0 = tableColumnInfo0.getOrdinalPosition();
      assertEquals(1023, tableColumnInfo0.getDataType());
      assertEquals(1023, tableColumnInfo0.getColumnSize());
      assertEquals(1716, tableColumnInfo0.getRadix());
      assertEquals(-971, tableColumnInfo0.getOctetLength());
      assertEquals(0, tableColumnInfo0.isNullAllowed());
      assertEquals(44, int0);
      assertEquals("%4E[^$wAV*1e", tableColumnInfo0.getDefaultValue());
      assertEquals("j.,", tableColumnInfo0.getColumnName());
      assertEquals("%4E[^$wAV*1e", tableColumnInfo0.isNullable());
      assertEquals("", tableColumnInfo0.getRemarks());
      assertEquals(2, tableColumnInfo0.getDecimalDigits());
      assertEquals("j.,", tableColumnInfo0.getTableName());
      assertEquals("j.,", tableColumnInfo0.getTypeName());
  }

  @Test
  public void test1()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("+/T~", "+/T~", "+/T~", "+/T~", 9, "+/T~", 317, 1, 395, 9, "+/T~", "+/T~", 1, (-533), "+/T~");
      int int0 = tableColumnInfo0.getColumnSize();
      assertEquals(1, tableColumnInfo0.getDecimalDigits());
      assertEquals(395, tableColumnInfo0.getRadix());
      assertEquals(9, tableColumnInfo0.isNullAllowed());
      assertEquals(1, tableColumnInfo0.getOctetLength());
      assertEquals(9, tableColumnInfo0.getDataType());
      assertEquals(-533, tableColumnInfo0.getOrdinalPosition());
      assertEquals(317, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("", "", "", "", (-315), "", (-315), (-315), 0, 0, "", "", (-315), 0, "");
      int int0 = tableColumnInfo0.getOctetLength();
      assertEquals(0, tableColumnInfo0.isNullAllowed());
      assertEquals((-315), int0);
      assertEquals(-315, tableColumnInfo0.getDecimalDigits());
      assertEquals(-315, tableColumnInfo0.getColumnSize());
      assertEquals(-315, tableColumnInfo0.getDataType());
      assertEquals(0, tableColumnInfo0.getOrdinalPosition());
      assertEquals(0, tableColumnInfo0.getRadix());
  }

  @Test
  public void test3()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("", "", "", "", (-1734), "", (-1734), 0, (-1734), 1362, "", "", 1, 0, "");
      String string0 = tableColumnInfo0.getColumnName();
      assertEquals(1, tableColumnInfo0.getOctetLength());
      assertEquals(-1734, tableColumnInfo0.getColumnSize());
      assertNotNull(string0);
      assertEquals(-1734, tableColumnInfo0.getRadix());
      assertEquals(0, tableColumnInfo0.getOrdinalPosition());
      assertEquals(0, tableColumnInfo0.getDecimalDigits());
      assertEquals(1362, tableColumnInfo0.isNullAllowed());
      assertEquals(-1734, tableColumnInfo0.getDataType());
  }

  @Test
  public void test4()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("", "", "", "", (-1734), "", (-1734), 0, (-1734), 1362, "", "", 1, 0, "");
      String string0 = tableColumnInfo0.getTableName();
      assertEquals(-1734, tableColumnInfo0.getRadix());
      assertEquals(0, tableColumnInfo0.getOrdinalPosition());
      assertNotNull(string0);
      assertEquals(0, tableColumnInfo0.getDecimalDigits());
      assertEquals(1, tableColumnInfo0.getOctetLength());
      assertEquals(-1734, tableColumnInfo0.getColumnSize());
      assertEquals(1362, tableColumnInfo0.isNullAllowed());
      assertEquals(-1734, tableColumnInfo0.getDataType());
  }

  @Test
  public void test5()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("jRr%=dX)tba!IMyX2d5", "", "", "", (-1), "jRr%=dX)tba!IMyX2d5", 1296, (-2016), (-771), (-771), "", "jRr%=dX)tba!IMyX2d5", 0, 1296, "jRr%=dX)tba!IMyX2d5");
      int int0 = tableColumnInfo0.getDataType();
      assertEquals("", tableColumnInfo0.getRemarks());
      assertEquals("", tableColumnInfo0.getColumnName());
      assertEquals(0, tableColumnInfo0.getOctetLength());
      assertEquals(-771, tableColumnInfo0.getRadix());
      assertEquals("", tableColumnInfo0.getTableName());
      assertEquals(1296, tableColumnInfo0.getColumnSize());
      assertEquals(1296, tableColumnInfo0.getOrdinalPosition());
      assertEquals(-771, tableColumnInfo0.isNullAllowed());
      assertEquals((-1), int0);
      assertEquals("jRr%=dX)tba!IMyX2d5", tableColumnInfo0.getDefaultValue());
      assertEquals(-2016, tableColumnInfo0.getDecimalDigits());
      assertEquals("jRr%=dX)tba!IMyX2d5", tableColumnInfo0.getTypeName());
      assertEquals("jRr%=dX)tba!IMyX2d5", tableColumnInfo0.isNullable());
  }

  @Test
  public void test6()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("j.,", "j.,", "j.,", "j.,", 1023, "j.,", 1023, 2, 1716, 0, "", "%4E[^$wAV*1e", (-971), 44, "%4E[^$wAV*1e");
      String string0 = tableColumnInfo0.isNullable();
      assertNotNull(string0);
      assertEquals(1023, tableColumnInfo0.getColumnSize());
      assertEquals(-971, tableColumnInfo0.getOctetLength());
      assertEquals(1716, tableColumnInfo0.getRadix());
      assertEquals("j.,", tableColumnInfo0.getColumnName());
      assertEquals(0, tableColumnInfo0.isNullAllowed());
      assertEquals("", tableColumnInfo0.getRemarks());
      assertEquals("j.,", tableColumnInfo0.getTableName());
      assertEquals(1023, tableColumnInfo0.getDataType());
      assertEquals("j.,", tableColumnInfo0.getTypeName());
      assertEquals("%4E[^$wAV*1e", string0);
      assertEquals(2, tableColumnInfo0.getDecimalDigits());
      assertEquals(44, tableColumnInfo0.getOrdinalPosition());
      assertEquals("%4E[^$wAV*1e", tableColumnInfo0.getDefaultValue());
  }

  @Test
  public void test7()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("", "", "", "", (-1734), "", (-1734), 0, (-1734), 1362, "", "", 1, 0, "");
      String string0 = tableColumnInfo0.getDefaultValue();
      assertEquals(0, tableColumnInfo0.getDecimalDigits());
      assertEquals(-1734, tableColumnInfo0.getDataType());
      assertEquals(1, tableColumnInfo0.getOctetLength());
      assertEquals(-1734, tableColumnInfo0.getColumnSize());
      assertNotNull(string0);
      assertEquals(1362, tableColumnInfo0.isNullAllowed());
      assertEquals(-1734, tableColumnInfo0.getRadix());
      assertEquals(0, tableColumnInfo0.getOrdinalPosition());
  }

  @Test
  public void test8()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("+/T~", "+/T~", "+/T~", "+/T~", 9, "+/T~", 317, 1, 395, 9, "+/T~", "+/T~", 1, (-533), "+/T~");
      int int0 = tableColumnInfo0.getDecimalDigits();
      assertEquals(9, tableColumnInfo0.getDataType());
      assertEquals(395, tableColumnInfo0.getRadix());
      assertEquals(1, int0);
      assertEquals(-533, tableColumnInfo0.getOrdinalPosition());
      assertEquals(9, tableColumnInfo0.isNullAllowed());
      assertEquals(1, tableColumnInfo0.getOctetLength());
      assertEquals(317, tableColumnInfo0.getColumnSize());
  }

  @Test
  public void test9()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("+/T~", "+/T~", "+/T~", "+/T~", 9, "+/T~", 317, 1, 395, 9, "+/T~", "+/T~", 1, (-533), "+/T~");
      int int0 = tableColumnInfo0.getRadix();
      assertEquals(-533, tableColumnInfo0.getOrdinalPosition());
      assertEquals(1, tableColumnInfo0.getDecimalDigits());
      assertEquals(9, tableColumnInfo0.isNullAllowed());
      assertEquals(395, int0);
      assertEquals(9, tableColumnInfo0.getDataType());
      assertEquals(1, tableColumnInfo0.getOctetLength());
      assertEquals(317, tableColumnInfo0.getColumnSize());
  }

  @Test
  public void test10()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("jRr%=dX)tba!IMyX2d5", "", "", "", (-1), "jRr%=dX)tba!IMyX2d5", 1296, (-2016), (-771), (-771), "", "jRr%=dX)tba!IMyX2d5", 0, 1296, "jRr%=dX)tba!IMyX2d5");
      int int0 = tableColumnInfo0.isNullAllowed();
      assertEquals(-2016, tableColumnInfo0.getDecimalDigits());
      assertEquals(1296, tableColumnInfo0.getColumnSize());
      assertEquals(1296, tableColumnInfo0.getOrdinalPosition());
      assertEquals(-1, tableColumnInfo0.getDataType());
      assertEquals("", tableColumnInfo0.getTableName());
      assertEquals((-771), int0);
      assertEquals("", tableColumnInfo0.getColumnName());
      assertEquals(-771, tableColumnInfo0.getRadix());
      assertEquals(0, tableColumnInfo0.getOctetLength());
      assertEquals("jRr%=dX)tba!IMyX2d5", tableColumnInfo0.getDefaultValue());
      assertEquals("jRr%=dX)tba!IMyX2d5", tableColumnInfo0.getTypeName());
      assertEquals("jRr%=dX)tba!IMyX2d5", tableColumnInfo0.isNullable());
      assertEquals("", tableColumnInfo0.getRemarks());
  }

  @Test
  public void test11()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("", "", "", "", (-1734), "", (-1734), 0, (-1734), 1362, "", "", 1, 0, "");
      String string0 = tableColumnInfo0.getTypeName();
      assertEquals(-1734, tableColumnInfo0.getRadix());
      assertEquals(0, tableColumnInfo0.getDecimalDigits());
      assertEquals(1362, tableColumnInfo0.isNullAllowed());
      assertEquals(-1734, tableColumnInfo0.getDataType());
      assertEquals(1, tableColumnInfo0.getOctetLength());
      assertEquals(-1734, tableColumnInfo0.getColumnSize());
      assertNotNull(string0);
      assertEquals(0, tableColumnInfo0.getOrdinalPosition());
  }

  @Test
  public void test12()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("[;Y0K)rss}B", "[;Y0K)rss}B", "[;Y0K)rss}B", "[;Y0K)rss}B", 0, "[;Y0K)rss}B", 193, (-1), (-1), (-1), "[;Y0K)rss}B", "[;Y0K)rss}B", (-1), 0, "[;Y0K)rss}B");
      String string0 = tableColumnInfo0.getRemarks();
      assertEquals(-1, tableColumnInfo0.isNullAllowed());
      assertNotNull(string0);
      assertEquals(-1, tableColumnInfo0.getRadix());
      assertEquals(193, tableColumnInfo0.getColumnSize());
      assertEquals(-1, tableColumnInfo0.getDecimalDigits());
      assertEquals(0, tableColumnInfo0.getDataType());
      assertEquals(-1, tableColumnInfo0.getOctetLength());
      assertEquals(0, tableColumnInfo0.getOrdinalPosition());
  }
}
