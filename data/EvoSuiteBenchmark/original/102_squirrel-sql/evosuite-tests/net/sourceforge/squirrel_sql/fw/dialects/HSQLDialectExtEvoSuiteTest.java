/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.dialects;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import net.sourceforge.squirrel_sql.fw.dialects.DatabaseObjectQualifier;
import net.sourceforge.squirrel_sql.fw.dialects.HSQLDialectExt;
import net.sourceforge.squirrel_sql.fw.dialects.SequencePropertyMutability;
import net.sourceforge.squirrel_sql.fw.dialects.SqlGenerationPreferences;
import net.sourceforge.squirrel_sql.fw.sql.IDatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.TableColumnInfo;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class HSQLDialectExtEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      HSQLDialectExt hSQLDialectExt0 = new HSQLDialectExt();
      boolean boolean0 = hSQLDialectExt0.supportsSequenceInformation();
      assertEquals(true, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      HSQLDialectExt hSQLDialectExt0 = new HSQLDialectExt();
      boolean boolean0 = hSQLDialectExt0.supportsDropSequence();
      assertEquals(true, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      HSQLDialectExt hSQLDialectExt0 = new HSQLDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("", "");
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("", "", "", "", (-1), "{VQF/!yih}c", (-1), (-1), 571, (-1), "{VQF/!yih}c", "", 365, 365, "{VQF/!yih}c");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String[] stringArray0 = hSQLDialectExt0.getAddAutoIncrementSQL(tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test3()  throws Throwable  {
      HSQLDialectExt hSQLDialectExt0 = new HSQLDialectExt();
      boolean boolean0 = hSQLDialectExt0.supportsColumnComment();
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      HSQLDialectExt hSQLDialectExt0 = new HSQLDialectExt();
      boolean boolean0 = hSQLDialectExt0.supportsAutoIncrement();
      assertEquals(true, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      HSQLDialectExt hSQLDialectExt0 = new HSQLDialectExt();
      boolean boolean0 = hSQLDialectExt0.supportsCreateView();
      assertEquals(true, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      HSQLDialectExt hSQLDialectExt0 = new HSQLDialectExt();
      boolean boolean0 = hSQLDialectExt0.supportsRenameTable();
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      HSQLDialectExt hSQLDialectExt0 = new HSQLDialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("HSQL", "_dWSu0rBmFfT$#o", "_dWSu0rBmFfT$#o", "HSQL", 1, "_dWSu0rBmFfT$#o", 1597, 172, (-789), (-1158), "HSQL", "_dWSu0rBmFfT$#o", 0, 23, "_dWSu0rBmFfT$#o");
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("HSQL", "_dWSu0rBmFfT$#o");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String[] stringArray0 = hSQLDialectExt0.getAddColumnSQL(tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test8()  throws Throwable  {
      HSQLDialectExt hSQLDialectExt0 = new HSQLDialectExt();
      String string0 = hSQLDialectExt0.getDisplayName();
      assertEquals("HSQL", string0);
  }

  @Test
  public void test9()  throws Throwable  {
      HSQLDialectExt hSQLDialectExt0 = new HSQLDialectExt();
      boolean boolean0 = hSQLDialectExt0.supportsDropView();
      assertEquals(true, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      HSQLDialectExt hSQLDialectExt0 = new HSQLDialectExt();
      boolean boolean0 = hSQLDialectExt0.supportsSequence();
      assertEquals(true, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      HSQLDialectExt hSQLDialectExt0 = new HSQLDialectExt();
      boolean boolean0 = hSQLDialectExt0.supportsIndexes();
      assertEquals(true, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      HSQLDialectExt hSQLDialectExt0 = new HSQLDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("B|Jp{B>9p9`0", "B|Jp{B>9p9`0");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = hSQLDialectExt0.getDropIndexSQL("B|Jp{B>9p9`0", "B|Jp{B>9p9`0", false, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("DROP INDEX B|Jp{B>9p9`0", string0);
      assertNotNull(string0);
  }

  @Test
  public void test13()  throws Throwable  {
      HSQLDialectExt hSQLDialectExt0 = new HSQLDialectExt();
      boolean boolean0 = hSQLDialectExt0.supportsEmptyTables();
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      HSQLDialectExt hSQLDialectExt0 = new HSQLDialectExt();
      boolean boolean0 = hSQLDialectExt0.supportsCreateSequence();
      assertEquals(true, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      HSQLDialectExt hSQLDialectExt0 = new HSQLDialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("w'A7U]g*(\"", "w'A7U]g*(\"", "w'A7U]g*(\"", "w'A7U]g*(\"", (-1500), "w'A7U]g*(\"", 1339, 1339, (-1500), 1339, "w'A7U]g*(\"", "w'A7U]g*(\"", 1852, 1852, "w'A7U]g*(\"");
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("w'A7U]g*(\"", "w'A7U]g*(\"");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = hSQLDialectExt0.getColumnNameAlterSQL(tableColumnInfo0, tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("ALTER TABLE w'A7U]g*(\" ALTER COLUMN \"w'A7U]g*(\"\" RENAME TO \"w'A7U]g*(\"\"", string0);
  }

  @Test
  public void test16()  throws Throwable  {
      HSQLDialectExt hSQLDialectExt0 = new HSQLDialectExt();
      boolean boolean0 = hSQLDialectExt0.supportsAlterColumnType();
      assertEquals(true, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      HSQLDialectExt hSQLDialectExt0 = new HSQLDialectExt();
      SequencePropertyMutability sequencePropertyMutability0 = hSQLDialectExt0.getSequencePropertyMutability();
      assertEquals(false, sequencePropertyMutability0.isCache());
      assertEquals(false, sequencePropertyMutability0.isMaxValue());
      assertEquals(true, sequencePropertyMutability0.isStartWith());
      assertEquals(true, sequencePropertyMutability0.isRestart());
      assertEquals(false, sequencePropertyMutability0.isCycle());
      assertEquals(false, sequencePropertyMutability0.isMinValue());
  }

  @Test
  public void test18()  throws Throwable  {
      HSQLDialectExt hSQLDialectExt0 = new HSQLDialectExt();
      boolean boolean0 = hSQLDialectExt0.supportsMultipleRowInserts();
      assertEquals(false, boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      HSQLDialectExt hSQLDialectExt0 = new HSQLDialectExt();
      boolean boolean0 = hSQLDialectExt0.supportsDropConstraint();
      assertEquals(true, boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      HSQLDialectExt hSQLDialectExt0 = new HSQLDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("", "");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = hSQLDialectExt0.getDropViewSQL("", false, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertNotNull(string0);
      assertEquals("DROP VIEW ", string0);
  }

  @Test
  public void test21()  throws Throwable  {
      HSQLDialectExt hSQLDialectExt0 = new HSQLDialectExt();
      boolean boolean0 = hSQLDialectExt0.supportsUpdate();
      assertEquals(true, boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      HSQLDialectExt hSQLDialectExt0 = new HSQLDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("R6JU|BXL&z#w^DE", "R6JU|BXL&z#w^DE");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = hSQLDialectExt0.getViewDefinitionSQL("R6JU|BXL&z#w^DE", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("SELECT VIEW_DEFINITION FROM INFORMATION_SCHEMA.SYSTEM_VIEWS WHERE TABLE_NAME = 'R6JU|BXL&z#w^DE' and TABLE_SCHEMA = 'R6JU|BXL&z#w^DE' ", string0);
  }

  @Test
  public void test23()  throws Throwable  {
      HSQLDialectExt hSQLDialectExt0 = new HSQLDialectExt();
      boolean boolean0 = hSQLDialectExt0.supportsTablespace();
      assertEquals(false, boolean0);
  }

  @Test
  public void test24()  throws Throwable  {
      HSQLDialectExt hSQLDialectExt0 = new HSQLDialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("w'A7U]g*(\"", "w'A7U]g*(\"", "w'A7U]g*(\"", "w'A7U]g*(\"", (-1500), "w'A7U]g*(\"", 1339, 1339, (-1500), 1339, "w'A7U]g*(\"", "w'A7U]g*(\"", 1852, 1852, "w'A7U]g*(\"");
      boolean boolean0 = hSQLDialectExt0.canPasteTo((IDatabaseObjectInfo) tableColumnInfo0);
      assertEquals(true, boolean0);
  }
}
