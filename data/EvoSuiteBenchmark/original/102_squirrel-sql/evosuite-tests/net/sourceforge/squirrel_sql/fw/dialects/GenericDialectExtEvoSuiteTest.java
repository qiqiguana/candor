/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.dialects;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import net.sourceforge.squirrel_sql.fw.dialects.DatabaseObjectQualifier;
import net.sourceforge.squirrel_sql.fw.dialects.DialectType;
import net.sourceforge.squirrel_sql.fw.dialects.GenericDialectExt;
import net.sourceforge.squirrel_sql.fw.dialects.SqlGenerationPreferences;
import net.sourceforge.squirrel_sql.fw.sql.TableColumnInfo;
import org.hibernate.MappingException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class GenericDialectExtEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      GenericDialectExt genericDialectExt0 = new GenericDialectExt();
      // Undeclared exception!
      try {
        genericDialectExt0.getJavaTypeForNativeType("4;CkQH#ate%h]{");
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Dialect (Generic) doesn't provide a java type for native type = 4;CkQH#ate%h]{
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      GenericDialectExt genericDialectExt0 = new GenericDialectExt();
      boolean boolean0 = genericDialectExt0.supportsProduct("m|b_2B|Ifz", (String) null);
      assertEquals(true, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      GenericDialectExt genericDialectExt0 = new GenericDialectExt();
      DialectType dialectType0 = genericDialectExt0.getDialectType();
      assertEquals(24, dialectType0.ordinal());
  }

  @Test
  public void test3()  throws Throwable  {
      GenericDialectExt genericDialectExt0 = new GenericDialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("max", "max", "max", "max", 0, "max", 19, 593, 1373, 1373, "max", "max", 593, 0, "max");
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        genericDialectExt0.getAddColumnSQL(tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: MappingException");
      } catch(MappingException e) {
        /*
         * No Dialect mapping for JDBC type: 0
         */
      }
  }
}
