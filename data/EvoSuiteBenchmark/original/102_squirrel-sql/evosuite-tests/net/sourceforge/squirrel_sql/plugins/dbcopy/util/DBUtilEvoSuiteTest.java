/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.plugins.dbcopy.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.LinkedList;
import java.util.List;
import net.sourceforge.squirrel_sql.client.IApplication;
import net.sourceforge.squirrel_sql.client.session.ISession;
import net.sourceforge.squirrel_sql.client.session.schemainfo.SchemaInfo;
import net.sourceforge.squirrel_sql.fw.dialects.UserCancelledOperationException;
import net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.IDatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.ISQLConnection;
import net.sourceforge.squirrel_sql.fw.sql.ITableInfo;
import net.sourceforge.squirrel_sql.fw.sql.TableColumnInfo;
import net.sourceforge.squirrel_sql.plugins.dbcopy.DBCopyPlugin;
import net.sourceforge.squirrel_sql.plugins.dbcopy.SessionInfoProvider;
import net.sourceforge.squirrel_sql.plugins.dbcopy.prefs.DBCopyPreferenceBean;
import net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil;
import org.hibernate.MappingException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DBUtilEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("e%jAx6iRH_MIm7e", "e%jAx6iRH_MIm7e", "e%jAx6iRH_MIm7e", "e%jAx6iRH_MIm7e", (-269), "e%jAx6iRH_MIm7e", (-269), (-269), (-269), (-269), "e%jAx6iRH_MIm7e", "e%jAx6iRH_MIm7e", (-269), (-269), "e%jAx6iRH_MIm7e");
      // Undeclared exception!
      try {
        DBUtil.getColumnSql((SessionInfoProvider) dBCopyPlugin0, tableColumnInfo0, "e%jAx6iRH_MIm7e", "e%jAx6iRH_MIm7e");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      DBUtil.setLastStatement((String) null);
  }

  @Test
  public void test2()  throws Throwable  {
      String string0 = DBUtil.getLastStatementValues();
      assertNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try {
        DBUtil.getTableCount((ISession) null, "SortOrder.ASCENDING", "SortOrder.ASCENDING", "SortOrder.ASCENDING", (-718));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      DBUtil.setPreferences(dBCopyPreferenceBean0);
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
  }

  @Test
  public void test5()  throws Throwable  {
      DBUtil.setLastStatementValues("");
  }

  @Test
  public void test6()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      // Undeclared exception!
      try {
        DBUtil.getSelectQuery((SessionInfoProvider) dBCopyPlugin0, "KJ\"Qy", (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      // Undeclared exception!
      try {
        DBUtil.getInsertSQL((SessionInfoProvider) dBCopyPlugin0, ",=U", (ITableInfo) null, 0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      // Undeclared exception!
      try {
        DBUtil.getCatSep((ISession) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      DBUtil dBUtil0 = new DBUtil();
      assertEquals("", dBUtil0.getLastStatementValues());
  }

  @Test
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try {
        DBUtil.getColumnCount((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try {
        DBUtil.getColumnName((ISQLConnection) null, (ITableInfo) null, 1116);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = DBUtil.getLastStatement();
      assertNull(string0);
  }

  @Test
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try {
        DBUtil.getTables((ISession) null, "8", "8", "8");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test14()  throws Throwable  {
      boolean boolean0 = DBUtil.typesAreEquivalent(574, 132);
      assertEquals(false, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      boolean boolean0 = DBUtil.typesAreEquivalent(3, 3);
      assertEquals(true, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      boolean boolean0 = DBUtil.typesAreEquivalent(2, 2);
      assertEquals(true, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      boolean boolean0 = DBUtil.typesAreEquivalent(16, 16);
      assertEquals(true, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo((String) null, (String) null, (String) null, (String) null, 10, (String) null, 10, 10, 10, 10, (String) null, (String) null, 10, 10, (String) null);
      int int0 = DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      assertEquals(10, int0);
  }

  @Test
  public void test19()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo((String) null, (String) null, (String) null, (String) null, 686, (String) null, 686, 1, 686, 686, (String) null, (String) null, 686, 1, (String) null);
      int int0 = DBUtil.replaceDistinctDataType(686, tableColumnInfo0, (ISession) null);
      assertEquals(686, int0);
  }

  @Test
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try {
        DBUtil.bindVariable((PreparedStatement) null, (-4), (-4), (-4), (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try {
        DBUtil.bindVariable((PreparedStatement) null, 0, 0, 0, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try {
        DBUtil.bindVariable((PreparedStatement) null, (-3), (-3), (-3), (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try {
        DBUtil.bindVariable((PreparedStatement) null, 3, 3, 3, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try {
        DBUtil.bindVariable((PreparedStatement) null, 7, 8, 8, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try {
        DBUtil.bindVariable((PreparedStatement) null, 2001, 2001, 2001, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try {
        DBUtil.bindVariable((PreparedStatement) null, 2005, 2005, 2005, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try {
        DBUtil.bindVariable((PreparedStatement) null, 520, 520, 520, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = DBUtil.getColumnType((ISQLConnection) null, (ITableInfo) null, "");
      assertEquals((-1), int0);
  }

  @Test
  public void test29()  throws Throwable  {
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[1];
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("FX+", "FX+", "FX+", "FX+", (-1), "FX+", 2, 2, (-1911), 2, "FX+", "FX+", 0, (-1911), "FX+");
      tableColumnInfoArray0[0] = tableColumnInfo0;
      String string0 = DBUtil.getColumnList(tableColumnInfoArray0);
      assertEquals("FX+", string0);
      assertNotNull(string0);
  }

  @Test
  public void test30()  throws Throwable  {
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[19];
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("F#", "F#", "", "", (-1), "F#", (-1), 1225, (-1), 1225, "", "", (-18), (-1), "");
      tableColumnInfoArray0[0] = tableColumnInfo0;
      // Undeclared exception!
      try {
        DBUtil.getColumnList(tableColumnInfoArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test31()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("-04-", "-04-", ">", "-04-", 0, "-04-", 11, 1511, 1511, 0, "-04-", ">", 1, 0, ">");
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test32()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("|3R~J", "|3R~J", "|3R~J", "|3R~J", (-4), "|3R~J", (-4), 1, (-4), (-4), "|3R~J", "|3R~J", (-4), (-4), "|3R~J");
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try {
        DBUtil.getQualifiedObjectName((ISession) null, "2ro", "2ro", "2ro", 1);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test34()  throws Throwable  {
      String string0 = DBUtil.fixCase((ISession) null, (String) null);
      assertNull(string0);
  }

  @Test
  public void test35()  throws Throwable  {
      String string0 = DBUtil.fixCase((ISession) null, "");
      assertEquals("", string0);
  }

  @Test
  public void test36()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DBUtil.validateColumnNames((ITableInfo) null, (SessionInfoProvider) dBCopyPlugin0);
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
  }

  @Test
  public void test37()  throws Throwable  {
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[10];
      List<ITableInfo> list0 = DBUtil.convertObjectArrayToTableList(iDatabaseObjectInfoArray0);
      assertNotNull(list0);
      assertEquals(10, list0.size());
  }

  @Test
  public void test38()  throws Throwable  {
      LinkedList<ITableInfo> linkedList0 = new LinkedList<ITableInfo>();
      linkedList0.add((ITableInfo) null);
      List<IDatabaseObjectInfo> list0 = DBUtil.convertTableToObjectList((List<ITableInfo>) linkedList0);
      assertEquals("[null]", linkedList0.toString());
      assertEquals(false, list0.isEmpty());
  }

  @Test
  public void test39()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo((String) null, (String) null, (String) null);
      String string0 = DBUtil.getSchemaNameFromDbObject((IDatabaseObjectInfo) databaseObjectInfo0);
      assertNull(string0);
  }

  @Test
  public void test40()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo((String) null, (String) null, (String) null);
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      // Undeclared exception!
      try {
        DBUtil.getSchemaFromDbObject((IDatabaseObjectInfo) databaseObjectInfo0, schemaInfo0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * SQLDatabaseMetaData == null
         */
      }
  }
}
