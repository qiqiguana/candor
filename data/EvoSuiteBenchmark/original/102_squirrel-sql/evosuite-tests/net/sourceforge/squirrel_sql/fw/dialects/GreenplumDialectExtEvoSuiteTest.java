/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.dialects;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import net.sourceforge.squirrel_sql.fw.dialects.DatabaseObjectQualifier;
import net.sourceforge.squirrel_sql.fw.dialects.DialectType;
import net.sourceforge.squirrel_sql.fw.dialects.GreenplumDialectExt;
import net.sourceforge.squirrel_sql.fw.dialects.SequencePropertyMutability;
import net.sourceforge.squirrel_sql.fw.dialects.SqlGenerationPreferences;
import net.sourceforge.squirrel_sql.fw.sql.TableColumnInfo;
import org.hibernate.MappingException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class GreenplumDialectExtEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("tJ", "tJ");
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("tJ", "tJ", "tJ", "tJ", 57, "tJ", 57, (-159), 57, (-159), "tJ", "tJ", (-159), (-159), "tJ");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      try {
        greenplumDialectExt0.getColumnTypeAlterSQL(tableColumnInfo0, tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Greenplum doesn't support altering a column's type attribute
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("DXFN5[,n~4l(4i $", "DXFN5[,n~4l(4i $", "DXFN5[,n~4l(4i $", "DXFN5[,n~4l(4i $", (-438), "", (-438), (-438), (-438), (-438), "DXFN5[,n~4l(4i $", "DXFN5[,n~4l(4i $", (-438), (-438), "DXFN5[,n~4l(4i $");
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("DXFN5[,n~4l(4i $", "DXFN5[,n~4l(4i $");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = greenplumDialectExt0.getColumnDefaultAlterSQL(tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertNotNull(string0);
      assertEquals("ALTER TABLE DXFN5[,n~4l(4i $ ALTER COLUMN \"DXFN5[,n~4l(4i $\"  SET DEFAULT 'DXFN5[,n~4l(4i $'", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("", "");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = greenplumDialectExt0.getDropSequenceSQL("", false, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("DROP SEQUENCE  ", string0);
      assertNotNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("", "");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = greenplumDialectExt0.getViewDefinitionSQL("", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("SELECT 'create or replace view ' || v.VIEWNAME || ' as ' || v.definition FROM _v_view v, _v_objs_owned o where v.objid = o.objid and o.DATABASE = '' and v.VIEWNAME = ''", string0);
      assertNotNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      boolean boolean0 = greenplumDialectExt0.supportsDropView();
      assertEquals(true, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      boolean boolean0 = greenplumDialectExt0.supportsCreateTable();
      assertEquals(true, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      boolean boolean0 = greenplumDialectExt0.supportsAccessMethods();
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      boolean boolean0 = greenplumDialectExt0.supportsDropSequence();
      assertEquals(true, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("'p", "'p", "'p", "'p", 0, "'p", 0, 0, 0, 0, "'p", "'p", 0, 0, "'p");
      // Undeclared exception!
      try {
        greenplumDialectExt0.getTypeName(tableColumnInfo0);
        fail("Expecting exception: MappingException");
      } catch(MappingException e) {
        /*
         * No Dialect mapping for JDBC type: 0
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      boolean boolean0 = greenplumDialectExt0.supportsCreateSequence();
      assertEquals(true, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      boolean boolean0 = greenplumDialectExt0.supportsDropConstraint();
      assertEquals(true, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("length", "length", "q`7YEFaG^", "q`7YEFaG^", 256, "q`7YEFaG^", 256, 256, (-1), 256, "length", "q`7YEFaG^", 15, 256, "q`7YEFaG^");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        greenplumDialectExt0.getColumnNullableAlterSQL(tableColumnInfo0, (DatabaseObjectQualifier) null, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Greenplum doesn't support altering a column's nullable attribute
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      boolean boolean0 = greenplumDialectExt0.supportsAddColumn();
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      boolean boolean0 = greenplumDialectExt0.supportsColumnComment();
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      boolean boolean0 = greenplumDialectExt0.supportsAlterColumnDefault();
      assertEquals(true, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      boolean boolean0 = greenplumDialectExt0.supportsRenameTable();
      assertEquals(true, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      boolean boolean0 = greenplumDialectExt0.supportsIndexes();
      assertEquals(false, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      boolean boolean0 = greenplumDialectExt0.supportsViewDefinition();
      assertEquals(true, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      boolean boolean0 = greenplumDialectExt0.supportsDropColumn();
      assertEquals(false, boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      boolean boolean0 = greenplumDialectExt0.supportsSequence();
      assertEquals(true, boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      boolean boolean0 = greenplumDialectExt0.supportsAlterSequence();
      assertEquals(true, boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      boolean boolean0 = greenplumDialectExt0.supportsSequenceInformation();
      assertEquals(false, boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = greenplumDialectExt0.getDropConstraintSQL("max", "max", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("ALTER TABLE max\n DROP CONSTRAINT \"max\" RESTRICT", string0);
      assertNotNull(string0);
  }

  @Test
  public void test23()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      boolean boolean0 = greenplumDialectExt0.supportsTablespace();
      assertEquals(false, boolean0);
  }

  @Test
  public void test24()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      boolean boolean0 = greenplumDialectExt0.supportsAddForeignKeyConstraint();
      assertEquals(true, boolean0);
  }

  @Test
  public void test25()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      String[] stringArray0 = new String[9];
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("*(0p3=D?#-", (String) null);
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        greenplumDialectExt0.getCreateIndexSQL("q$", (String) null, "q$", stringArray0, false, (String) null, (String) null, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Greenplum doesn't support creating indexes.
         */
      }
  }

  @Test
  public void test26()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      boolean boolean0 = greenplumDialectExt0.supportsRenameColumn();
      assertEquals(true, boolean0);
  }

  @Test
  public void test27()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      boolean boolean0 = greenplumDialectExt0.supportsAlterColumnType();
      assertEquals(false, boolean0);
  }

  @Test
  public void test28()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      boolean boolean0 = greenplumDialectExt0.supportsAlterColumnNull();
      assertEquals(false, boolean0);
  }

  @Test
  public void test29()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      int int0 = greenplumDialectExt0.getMaxScale(244);
      assertEquals(38, int0);
  }

  @Test
  public void test30()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("DXFN5[,n~4l(4i $", "DXFN5[,n~4l(4i $", "DXFN5[,n~4l(4i $", "DXFN5[,n~4l(4i $", (-438), "", (-438), (-438), (-438), (-438), "DXFN5[,n~4l(4i $", "DXFN5[,n~4l(4i $", (-438), (-438), "DXFN5[,n~4l(4i $");
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("DXFN5[,n~4l(4i $", "DXFN5[,n~4l(4i $");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        greenplumDialectExt0.getAddColumnSQL(tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Greenplum doesn't support adding new columns
         */
      }
  }

  @Test
  public void test31()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      boolean boolean0 = greenplumDialectExt0.supportsAddUniqueConstraint();
      assertEquals(true, boolean0);
  }

  @Test
  public void test32()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      boolean boolean0 = greenplumDialectExt0.supportsMultipleRowInserts();
      assertEquals(false, boolean0);
  }

  @Test
  public void test33()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      boolean boolean0 = greenplumDialectExt0.supportsSchemasInTableDefinition();
      assertEquals(true, boolean0);
  }

  @Test
  public void test34()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      DialectType dialectType0 = greenplumDialectExt0.getDialectType();
      assertEquals("NETEZZA", dialectType0.toString());
  }

  @Test
  public void test35()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      boolean boolean0 = greenplumDialectExt0.supportsRenameView();
      assertEquals(true, boolean0);
  }

  @Test
  public void test36()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      int int0 = greenplumDialectExt0.getMaxPrecision((-6));
      assertEquals(38, int0);
  }

  @Test
  public void test37()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      boolean boolean0 = greenplumDialectExt0.supportsAutoIncrement();
      assertEquals(false, boolean0);
  }

  @Test
  public void test38()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      boolean boolean0 = greenplumDialectExt0.supportsDropIndex();
      assertEquals(false, boolean0);
  }

  @Test
  public void test39()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[3];
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        greenplumDialectExt0.getAddUniqueConstraintSQL("", "", tableColumnInfoArray0, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test40()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("", "");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = greenplumDialectExt0.getCreateViewSQL("", "", "", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("CREATE VIEW \n AS ", string0);
  }

  @Test
  public void test41()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      boolean boolean0 = greenplumDialectExt0.supportsUpdate();
      assertEquals(true, boolean0);
  }

  @Test
  public void test42()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      boolean boolean0 = greenplumDialectExt0.supportsCorrelatedSubQuery();
      assertEquals(false, boolean0);
  }

  @Test
  public void test43()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("", "");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      try {
        greenplumDialectExt0.getColumnDropSQL("", "", databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Greenplum doesn't support dropping a column
         */
      }
  }

  @Test
  public void test44()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      boolean boolean0 = greenplumDialectExt0.supportsCreateIndex();
      assertEquals(false, boolean0);
  }

  @Test
  public void test45()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      boolean boolean0 = greenplumDialectExt0.supportsEmptyTables();
      assertEquals(false, boolean0);
  }

  @Test
  public void test46()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("X", "X", "X", "X", 752, "X", 752, (-968), (-968), (-968), "X", "X", (-968), (-968), (String) null);
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = greenplumDialectExt0.getColumnNameAlterSQL(tableColumnInfo0, tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("ALTER TABLE X RENAME COLUMN \"X\" TO \"X\"", string0);
  }

  @Test
  public void test47()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      SequencePropertyMutability sequencePropertyMutability0 = greenplumDialectExt0.getSequencePropertyMutability();
      assertEquals(false, sequencePropertyMutability0.isCache());
  }

  @Test
  public void test48()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("", "");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String[] stringArray0 = greenplumDialectExt0.getRenameViewSQL("", "", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test49()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("", "");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = greenplumDialectExt0.getRenameTableSQL("CREATE VIEW \n AS ", "CREATE VIEW \n AS ", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("ALTER TABLE CREATE VIEW \n AS  RENAME TO CREATE VIEW \n AS ", string0);
  }

  @Test
  public void test50()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      boolean boolean0 = greenplumDialectExt0.supportsInsertInto();
      assertEquals(true, boolean0);
  }

  @Test
  public void test51()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      boolean boolean0 = greenplumDialectExt0.supportsCreateView();
      assertEquals(true, boolean0);
  }

  @Test
  public void test52()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      boolean boolean0 = greenplumDialectExt0.supportsProduct("WM", "WM");
      assertEquals(false, boolean0);
  }

  @Test
  public void test53()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("", "");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = greenplumDialectExt0.getCreateSequenceSQL("", "", "", "", "", "", true, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("CREATE SEQUENCE \nMINVALUE MAXVALUE\nCYCLE", string0);
  }

  @Test
  public void test54()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("", "");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = greenplumDialectExt0.getCreateSequenceSQL("", "", "", "", "", "", false, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertNotNull(string0);
      assertEquals("CREATE SEQUENCE \nMINVALUE MAXVALUE\nNO CYCLE", string0);
  }

  @Test
  public void test55()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      // Undeclared exception!
      try {
        greenplumDialectExt0.getAlterSequenceSQL("s", "s", "", "s", "", "s", true, databaseObjectQualifier0, (SqlGenerationPreferences) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test56()  throws Throwable  {
      GreenplumDialectExt greenplumDialectExt0 = new GreenplumDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("", "");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String[] stringArray0 = greenplumDialectExt0.getAlterSequenceSQL("", "", "", "", "", "", false, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertNotNull(stringArray0);
  }
}
