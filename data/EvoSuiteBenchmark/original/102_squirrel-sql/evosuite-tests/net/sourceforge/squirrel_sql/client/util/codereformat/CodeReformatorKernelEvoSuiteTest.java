/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.client.util.codereformat;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import net.sourceforge.squirrel_sql.client.util.codereformat.CodeReformatorKernel;
import net.sourceforge.squirrel_sql.client.util.codereformat.CommentSpec;
import net.sourceforge.squirrel_sql.client.util.codereformat.PieceMarkerSpec;
import net.sourceforge.squirrel_sql.client.util.codereformat.StateOfPosition;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class CodeReformatorKernelEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      PieceMarkerSpec[] pieceMarkerSpecArray0 = new PieceMarkerSpec[12];
      PieceMarkerSpec pieceMarkerSpec0 = new PieceMarkerSpec("C", 2);
      pieceMarkerSpecArray0[0] = pieceMarkerSpec0;
      CommentSpec[] commentSpecArray0 = new CommentSpec[1];
      CommentSpec commentSpec0 = new CommentSpec("C", "C");
      commentSpecArray0[0] = commentSpec0;
      CodeReformatorKernel codeReformatorKernel0 = new CodeReformatorKernel("C", pieceMarkerSpecArray0, commentSpecArray0);
      pieceMarkerSpecArray0[1] = pieceMarkerSpec0;
      pieceMarkerSpecArray0[2] = pieceMarkerSpec0;
      pieceMarkerSpecArray0[3] = pieceMarkerSpec0;
      pieceMarkerSpecArray0[4] = pieceMarkerSpec0;
      pieceMarkerSpecArray0[5] = pieceMarkerSpec0;
      pieceMarkerSpecArray0[6] = pieceMarkerSpecArray0[0];
      pieceMarkerSpecArray0[7] = pieceMarkerSpec0;
      pieceMarkerSpecArray0[8] = pieceMarkerSpec0;
      pieceMarkerSpecArray0[9] = pieceMarkerSpec0;
      pieceMarkerSpecArray0[10] = pieceMarkerSpec0;
      pieceMarkerSpecArray0[11] = pieceMarkerSpec0;
      String[] stringArray0 = codeReformatorKernel0.toPieces("C");
      assertNotNull(stringArray0);
  }

  @Test
  public void test1()  throws Throwable  {
      PieceMarkerSpec[] pieceMarkerSpecArray0 = new PieceMarkerSpec[12];
      PieceMarkerSpec pieceMarkerSpec0 = new PieceMarkerSpec("C", 2);
      pieceMarkerSpecArray0[0] = pieceMarkerSpec0;
      CommentSpec[] commentSpecArray0 = new CommentSpec[1];
      CommentSpec commentSpec0 = new CommentSpec("C", "C");
      commentSpecArray0[0] = commentSpec0;
      CodeReformatorKernel codeReformatorKernel0 = new CodeReformatorKernel("C", pieceMarkerSpecArray0, commentSpecArray0);
      pieceMarkerSpecArray0[1] = pieceMarkerSpec0;
      pieceMarkerSpecArray0[2] = pieceMarkerSpec0;
      pieceMarkerSpecArray0[3] = pieceMarkerSpec0;
      pieceMarkerSpecArray0[4] = pieceMarkerSpec0;
      pieceMarkerSpecArray0[5] = pieceMarkerSpec0;
      pieceMarkerSpecArray0[6] = pieceMarkerSpecArray0[0];
      pieceMarkerSpecArray0[7] = pieceMarkerSpec0;
      pieceMarkerSpecArray0[8] = pieceMarkerSpec0;
      pieceMarkerSpecArray0[9] = pieceMarkerSpec0;
      pieceMarkerSpecArray0[10] = pieceMarkerSpec0;
      pieceMarkerSpecArray0[11] = pieceMarkerSpec0;
      String[] stringArray0 = codeReformatorKernel0.toPieces("%Ob$?3/#MW]cV");
      assertNotNull(stringArray0);
  }

  @Test
  public void test2()  throws Throwable  {
      PieceMarkerSpec[] pieceMarkerSpecArray0 = new PieceMarkerSpec[1];
      CommentSpec commentSpec0 = new CommentSpec("S ", "S ");
      PieceMarkerSpec pieceMarkerSpec0 = new PieceMarkerSpec("S ", 0);
      pieceMarkerSpecArray0[0] = pieceMarkerSpec0;
      CommentSpec[] commentSpecArray0 = new CommentSpec[7];
      commentSpecArray0[0] = commentSpec0;
      commentSpecArray0[1] = commentSpec0;
      commentSpecArray0[2] = commentSpecArray0[0];
      commentSpecArray0[3] = commentSpecArray0[0];
      commentSpecArray0[4] = commentSpec0;
      commentSpecArray0[5] = commentSpecArray0[2];
      commentSpecArray0[6] = commentSpecArray0[2];
      CodeReformatorKernel codeReformatorKernel0 = new CodeReformatorKernel("S ", pieceMarkerSpecArray0, commentSpecArray0);
      String[] stringArray0 = codeReformatorKernel0.toPieces("S ");
      assertNotNull(stringArray0);
  }

  @Test
  public void test3()  throws Throwable  {
      PieceMarkerSpec[] pieceMarkerSpecArray0 = new PieceMarkerSpec[3];
      PieceMarkerSpec pieceMarkerSpec0 = new PieceMarkerSpec("", 0);
      pieceMarkerSpecArray0[0] = pieceMarkerSpec0;
      CommentSpec[] commentSpecArray0 = new CommentSpec[5];
      CommentSpec commentSpec0 = new CommentSpec("", "h5~.)T");
      commentSpecArray0[0] = commentSpec0;
      commentSpecArray0[1] = commentSpec0;
      commentSpecArray0[2] = commentSpecArray0[0];
      commentSpecArray0[3] = commentSpecArray0[0];
      commentSpecArray0[4] = commentSpecArray0[1];
      CodeReformatorKernel codeReformatorKernel0 = new CodeReformatorKernel("", pieceMarkerSpecArray0, commentSpecArray0);
      // Undeclared exception!
      try {
        codeReformatorKernel0.toPieces("h5~.)T");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      CommentSpec[] commentSpecArray0 = new CommentSpec[3];
      CommentSpec commentSpec0 = new CommentSpec("Unknow type: ", "Unknow type: ");
      commentSpecArray0[0] = commentSpec0;
      commentSpecArray0[1] = commentSpecArray0[0];
      PieceMarkerSpec[] pieceMarkerSpecArray0 = new PieceMarkerSpec[7];
      PieceMarkerSpec pieceMarkerSpec0 = new PieceMarkerSpec("", 0);
      pieceMarkerSpecArray0[0] = pieceMarkerSpec0;
      CommentSpec[] commentSpecArray1 = new CommentSpec[4];
      commentSpecArray1[0] = commentSpecArray0[1];
      commentSpecArray1[2] = commentSpecArray1[0];
      commentSpecArray1[3] = commentSpecArray0[0];
      commentSpecArray1[1] = commentSpec0;
      CodeReformatorKernel codeReformatorKernel0 = new CodeReformatorKernel("", pieceMarkerSpecArray0, commentSpecArray1);
      // Undeclared exception!
      try {
        codeReformatorKernel0.toPieces("Unknow type: ");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      PieceMarkerSpec[] pieceMarkerSpecArray0 = new PieceMarkerSpec[4];
      CommentSpec[] commentSpecArray0 = new CommentSpec[4];
      CommentSpec commentSpec0 = new CommentSpec("}> U(ShZwZ}xc", "}> U(ShZwZ}xc");
      commentSpecArray0[0] = commentSpec0;
      commentSpecArray0[1] = commentSpec0;
      commentSpecArray0[2] = commentSpecArray0[0];
      commentSpecArray0[3] = commentSpec0;
      CodeReformatorKernel codeReformatorKernel0 = new CodeReformatorKernel("}> U(ShZwZ}xc", pieceMarkerSpecArray0, commentSpecArray0);
      StateOfPosition[] stateOfPositionArray0 = codeReformatorKernel0.getStatesOfPosition("tEX|W;r)J{8}y'QGcR");
      assertNotNull(stateOfPositionArray0);
  }

  @Test
  public void test6()  throws Throwable  {
      PieceMarkerSpec[] pieceMarkerSpecArray0 = new PieceMarkerSpec[3];
      CommentSpec[] commentSpecArray0 = new CommentSpec[5];
      CommentSpec commentSpec0 = new CommentSpec("", "h5~.)T");
      commentSpecArray0[0] = commentSpec0;
      CommentSpec commentSpec1 = new CommentSpec("h5~.)T", "");
      commentSpecArray0[1] = commentSpec1;
      commentSpecArray0[2] = commentSpecArray0[0];
      commentSpecArray0[3] = commentSpecArray0[0];
      commentSpecArray0[4] = commentSpecArray0[1];
      CodeReformatorKernel codeReformatorKernel0 = new CodeReformatorKernel("", pieceMarkerSpecArray0, commentSpecArray0);
      // Undeclared exception!
      try {
        codeReformatorKernel0.toPieces("h5~.)T");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      PieceMarkerSpec[] pieceMarkerSpecArray0 = new PieceMarkerSpec[4];
      CommentSpec[] commentSpecArray0 = new CommentSpec[4];
      CommentSpec commentSpec0 = new CommentSpec("}> U(ShZwZ}xc", "}> U(ShZwZ}xc");
      commentSpecArray0[0] = commentSpec0;
      commentSpecArray0[1] = commentSpec0;
      commentSpecArray0[2] = commentSpecArray0[0];
      commentSpecArray0[3] = commentSpec0;
      CodeReformatorKernel codeReformatorKernel0 = new CodeReformatorKernel("}> U(ShZwZ}xc", pieceMarkerSpecArray0, commentSpecArray0);
      // Undeclared exception!
      try {
        codeReformatorKernel0.toPieces("}> U(ShZwZ}xc");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
