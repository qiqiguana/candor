/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.whereClause;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import net.sourceforge.squirrel_sql.fw.datasetviewer.ColumnDisplayDefinition;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.whereClause.IsNullWhereClausePart;
import net.sourceforge.squirrel_sql.fw.dialects.DialectType;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class IsNullWhereClausePartEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DialectType dialectType0 = DialectType.INTERBASE;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(394, "m+ {i=", "m+ {i=", "m+ {i=", 151, (String) null, false, 151, (-611), (-611), true, true, true, dialectType0);
      IsNullWhereClausePart isNullWhereClausePart0 = new IsNullWhereClausePart(columnDisplayDefinition0);
      assertNotNull(isNullWhereClausePart0);
      assertEquals("m+ {i= is null", isNullWhereClausePart0.getWhereClause());
  }

  @Test
  public void test1()  throws Throwable  {
      IsNullWhereClausePart isNullWhereClausePart0 = null;
      try {
        isNullWhereClausePart0 = new IsNullWhereClausePart((ColumnDisplayDefinition) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * columnDef must not be null
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-1743), "");
      IsNullWhereClausePart isNullWhereClausePart0 = null;
      try {
        isNullWhereClausePart0 = new IsNullWhereClausePart(columnDisplayDefinition0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * columnDef contains not an usable columnName
         */
      }
  }
}
