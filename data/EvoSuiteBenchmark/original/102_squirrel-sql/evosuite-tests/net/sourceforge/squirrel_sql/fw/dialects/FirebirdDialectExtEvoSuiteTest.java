/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.dialects;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Collection;
import net.sourceforge.squirrel_sql.fw.dialects.DatabaseObjectQualifier;
import net.sourceforge.squirrel_sql.fw.dialects.DialectType;
import net.sourceforge.squirrel_sql.fw.dialects.FirebirdDialectExt;
import net.sourceforge.squirrel_sql.fw.dialects.SqlGenerationPreferences;
import net.sourceforge.squirrel_sql.fw.sql.ITableInfo;
import net.sourceforge.squirrel_sql.fw.sql.TableColumnInfo;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class FirebirdDialectExtEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      boolean boolean0 = firebirdDialectExt0.supportsAutoIncrement();
      assertEquals(true, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      boolean boolean0 = firebirdDialectExt0.supportsAlterColumnNull();
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      String[] stringArray0 = firebirdDialectExt0.getIndexAccessMethodsTypes();
      assertNull(stringArray0);
  }

  @Test
  public void test3()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      boolean boolean0 = firebirdDialectExt0.supportsAddUniqueConstraint();
      assertEquals(true, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      boolean boolean0 = firebirdDialectExt0.supportsAlterSequence();
      assertEquals(true, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      boolean boolean0 = firebirdDialectExt0.supportsSubSecondTimestamps();
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      boolean boolean0 = firebirdDialectExt0.supportsCreateSequence();
      assertEquals(true, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      boolean boolean0 = firebirdDialectExt0.supportsDropView();
      assertEquals(true, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("NONE", "NONE");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        firebirdDialectExt0.getColumnTypeAlterSQL((TableColumnInfo) null, (TableColumnInfo) null, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      boolean boolean0 = firebirdDialectExt0.supportsRenameTable();
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      boolean boolean0 = firebirdDialectExt0.supportsDropConstraint();
      assertEquals(true, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      String string0 = firebirdDialectExt0.getDropViewSQL("", true, (DatabaseObjectQualifier) null, (SqlGenerationPreferences) null);
      assertEquals("DROP VIEW ", string0);
      assertNotNull(string0);
  }

  @Test
  public void test12()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      boolean boolean0 = firebirdDialectExt0.supportsSequenceInformation();
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("ALTER TABLE $tableName$ ADD CONSTRAINT $constraintName$ UNIQUE ($columnName;  separator=\",\"$)", "Ev", "ALTER TABLE $tableName$ ADD CONSTRAINT $constraintName$ UNIQUE ($columnName;  separator=\",\"$)", "ALTER TABLE $tableName$ ADD CONSTRAINT $constraintName$ UNIQUE ($columnName;  separator=\",\"$)", 0, "ALTER TABLE $tableName$ ADD CONSTRAINT $constraintName$ UNIQUE ($columnName;  separator=\",\"$)", (-258), 0, 194, (-1993), "ALTER TABLE $tableName$ ADD CONSTRAINT $constraintName$ UNIQUE ($columnName;  separator=\",\"$)", "Ev", 0, 194, "ALTER TABLE $tableName$ ADD CONSTRAINT $constraintName$ UNIQUE ($columnName;  separator=\",\"$)");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String[] stringArray0 = firebirdDialectExt0.getAddAutoIncrementSQL(tableColumnInfo0, (DatabaseObjectQualifier) null, sqlGenerationPreferences0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test14()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      boolean boolean0 = firebirdDialectExt0.supportsCreateView();
      assertEquals(true, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      boolean boolean0 = firebirdDialectExt0.supportsCorrelatedSubQuery();
      assertEquals(true, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      boolean boolean0 = firebirdDialectExt0.supportsAlterColumnDefault();
      assertEquals(false, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      boolean boolean0 = firebirdDialectExt0.supportsSchemasInTableDefinition();
      assertEquals(false, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      boolean boolean0 = firebirdDialectExt0.supportsAddColumn();
      assertEquals(true, boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      boolean boolean0 = firebirdDialectExt0.supportsMultipleRowInserts();
      assertEquals(false, boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        firebirdDialectExt0.getSequenceInformationSQL("tm}jO #$%z9%=jW='X", databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Firebird doesn't support gathering sequence information.
         */
      }
  }

  @Test
  public void test21()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      boolean boolean0 = firebirdDialectExt0.supportsViewDefinition();
      assertEquals(true, boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("", "ALTER TABLE FirebirdA0#iYY#c7kL@r1a ALTER COLUMN \"FirebirdA0#iYY#c7kL@r1a\" TO \"FirebirdA0#iYY#c7kL@r1a\"");
      String string0 = firebirdDialectExt0.getViewDefinitionSQL("", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("select rdb$view_source from rdb$relations where rdb$relation_name = ''", string0);
      assertNotNull(string0);
  }

  @Test
  public void test23()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      boolean boolean0 = firebirdDialectExt0.supportsCheckOptionsForViews();
      assertEquals(true, boolean0);
  }

  @Test
  public void test24()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      String[] stringArray0 = firebirdDialectExt0.getIndexStorageOptions();
      assertNull(stringArray0);
  }

  @Test
  public void test25()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      String string0 = firebirdDialectExt0.getLengthFunction((int) (byte)0);
      assertEquals("strlen", string0);
  }

  @Test
  public void test26()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      boolean boolean0 = firebirdDialectExt0.supportsEmptyTables();
      assertEquals(false, boolean0);
  }

  @Test
  public void test27()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      boolean boolean0 = firebirdDialectExt0.supportsTablespace();
      assertEquals(false, boolean0);
  }

  @Test
  public void test28()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      String string0 = firebirdDialectExt0.getDropSequenceSQL("", false, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("DROP GENERATOR ", string0);
      assertNotNull(string0);
  }

  @Test
  public void test29()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      boolean boolean0 = firebirdDialectExt0.supportsSequence();
      assertEquals(true, boolean0);
  }

  @Test
  public void test30()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        firebirdDialectExt0.getRenameViewSQL("", "", (DatabaseObjectQualifier) null, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Firebird doesn't support renaming views.
         */
      }
  }

  @Test
  public void test31()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      boolean boolean0 = firebirdDialectExt0.supportsUpdate();
      assertEquals(true, boolean0);
  }

  @Test
  public void test32()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      boolean boolean0 = firebirdDialectExt0.supportsCreateIndex();
      assertEquals(true, boolean0);
  }

  @Test
  public void test33()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      boolean boolean0 = firebirdDialectExt0.supportsAlterColumnType();
      assertEquals(true, boolean0);
  }

  @Test
  public void test34()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("", "D?", "D?", "D?", 1, "D?", 1, 1, 1, 0, "", "", 0, 0, "D?");
      String[] stringArray0 = firebirdDialectExt0.getAddColumnSQL(tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test35()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = firebirdDialectExt0.getDropPrimaryKeySQL(",p`rs<&!Sd4~", ",p`rs<&!Sd4~", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("ALTER TABLE ,p`rs<&!Sd4~ DROP CONSTRAINT \",p`rs<&!Sd4~\"", string0);
  }

  @Test
  public void test36()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      boolean boolean0 = firebirdDialectExt0.supportsRenameView();
      assertEquals(false, boolean0);
  }

  @Test
  public void test37()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        firebirdDialectExt0.getTableDropSQL((ITableInfo) null, true, false, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test38()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("c;3in4t@{41RnKM[0f", "");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = firebirdDialectExt0.getDropForeignKeySQL("c;3in4t@{41RnKM[0f", "", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("ALTER TABLE  DROP CONSTRAINT \"c;3in4t@{41RnKM[0f\"", string0);
      assertNotNull(string0);
  }

  @Test
  public void test39()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("BH^6rCRM", "BH^6rCRM");
      // Undeclared exception!
      try {
        firebirdDialectExt0.getColumnDefaultAlterSQL((TableColumnInfo) null, databaseObjectQualifier0, (SqlGenerationPreferences) null);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Firebird doesn't support altering a column's default value
         */
      }
  }

  @Test
  public void test40()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      boolean boolean0 = firebirdDialectExt0.supportsAddForeignKeyConstraint();
      assertEquals(true, boolean0);
  }

  @Test
  public void test41()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("FirebirdBH^CRML[~", "FirebirdBH^CRML[~", "FirebirdBH^CRML[~", "FirebirdBH^CRML[~", 96, "FirebirdBH^CRML[~", 96, 96, 96, 96, "FirebirdBH^CRML[~", "FirebirdBH^CRML[~", 808, 808, "FirebirdBH^CRML[~");
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      try {
        firebirdDialectExt0.getColumnCommentAlterSQL(tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Firebird doesn't support column comments
         */
      }
  }

  @Test
  public void test42()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = firebirdDialectExt0.getColumnDropSQL("D?", "D?", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("ALTER TABLE D? DROP \"D?\"", string0);
  }

  @Test
  public void test43()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = firebirdDialectExt0.getDropIndexSQL("", "Firebird&9_V*.J09", false, (DatabaseObjectQualifier) null, sqlGenerationPreferences0);
      assertEquals("DROP INDEX Firebird&9_V*.J09", string0);
      assertNotNull(string0);
  }

  @Test
  public void test44()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      boolean boolean0 = firebirdDialectExt0.supportsIndexes();
      assertEquals(true, boolean0);
  }

  @Test
  public void test45()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("c;3in4t@{41RnKM[0f", "");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = firebirdDialectExt0.getDropConstraintSQL("c;3in4t@{41RnKM[0f", "BH^CRML[~?", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("ALTER TABLE c;3in4t@{41RnKM[0f DROP CONSTRAINT BH^CRML[~?", string0);
      assertNotNull(string0);
  }

  @Test
  public void test46()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      boolean boolean0 = firebirdDialectExt0.supportsRenameColumn();
      assertEquals(true, boolean0);
  }

  @Test
  public void test47()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String[] stringArray0 = firebirdDialectExt0.getAlterSequenceSQL("Firebird&9_V*.J09", "DROP INDEX Firebird&9_V*.J09", "", "", (String) null, (String) null, false, (DatabaseObjectQualifier) null, sqlGenerationPreferences0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test48()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      boolean boolean0 = firebirdDialectExt0.supportsDropIndex();
      assertEquals(true, boolean0);
  }

  @Test
  public void test49()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      int int0 = firebirdDialectExt0.getPrecisionDigits(4, (-1));
      assertEquals(8, int0);
  }

  @Test
  public void test50()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      DialectType dialectType0 = firebirdDialectExt0.getDialectType();
      assertEquals(4, dialectType0.ordinal());
  }

  @Test
  public void test51()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      boolean boolean0 = firebirdDialectExt0.supportsColumnComment();
      assertEquals(false, boolean0);
  }

  @Test
  public void test52()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      boolean boolean0 = firebirdDialectExt0.supportsDropSequence();
      assertEquals(true, boolean0);
  }

  @Test
  public void test53()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("FirebirdA0#iYY#c7kL@r1a", "FirebirdA0#iYY#c7kL@r1a", "FirebirdA0#iYY#c7kL@r1a", "FirebirdA0#iYY#c7kL@r1a", 58, "FirebirdA0#iYY#c7kL@r1a", 58, 58, 58, 745, "FirebirdA0#iYY#c7kL@r1a", "FirebirdA0#iYY#c7kL@r1a", 745, (-1), "FirebirdA0#iYY#c7kL@r1a");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = firebirdDialectExt0.getColumnNameAlterSQL(tableColumnInfo0, tableColumnInfo0, (DatabaseObjectQualifier) null, sqlGenerationPreferences0);
      assertEquals("ALTER TABLE FirebirdA0#iYY#c7kL@r1a ALTER COLUMN \"FirebirdA0#iYY#c7kL@r1a\" TO \"FirebirdA0#iYY#c7kL@r1a\"", string0);
  }

  @Test
  public void test54()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        firebirdDialectExt0.getRenameTableSQL("Generic", "Generic", databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Firebird doesn't support renaming tables.
         */
      }
  }

  @Test
  public void test55()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      boolean boolean0 = firebirdDialectExt0.supportsCreateTable();
      assertEquals(true, boolean0);
  }

  @Test
  public void test56()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      boolean boolean0 = firebirdDialectExt0.supportsAccessMethods();
      assertEquals(false, boolean0);
  }

  @Test
  public void test57()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      int int0 = firebirdDialectExt0.getColumnLength(31, (-1));
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test
  public void test58()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      int int0 = firebirdDialectExt0.getColumnLength(1110, 6);
      assertEquals(18, int0);
  }

  @Test
  public void test59()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      int int0 = firebirdDialectExt0.getColumnLength(0, 7);
      assertEquals(18, int0);
  }

  @Test
  public void test60()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      int int0 = firebirdDialectExt0.getColumnLength(1110, (-4));
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test
  public void test61()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      int int0 = firebirdDialectExt0.getColumnLength(2001, 2001);
      assertEquals(2001, int0);
  }

  @Test
  public void test62()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      boolean boolean0 = firebirdDialectExt0.supportsProduct("BH^CRML[~?", "BH^CRML[~?");
      assertEquals(false, boolean0);
  }

  @Test
  public void test63()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      boolean boolean0 = firebirdDialectExt0.supportsProduct((String) null, "BH^CRML[~?");
      assertEquals(false, boolean0);
  }

  @Test
  public void test64()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      boolean boolean0 = firebirdDialectExt0.supportsProduct("Firebird&9_V*.J09", "Firebird&9_V*.J09");
      assertEquals(true, boolean0);
  }

  @Test
  public void test65()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      Boolean boolean0 = Boolean.FALSE;
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        firebirdDialectExt0.getAddForeignKeyConstraintSQL("D) o", "D) o", "D) o", boolean0, boolean0, boolean0, false, "D) o", (Collection<String[]>) null, "D) o", "D) o", databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test66()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        firebirdDialectExt0.getAddForeignKeyConstraintSQL("D) o", "D) o", "D) o", (Boolean) true, (Boolean) true, (Boolean) true, true, "D) o", (Collection<String[]>) null, "D) o", "D) o", databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test67()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      String[] stringArray0 = new String[7];
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = firebirdDialectExt0.getCreateIndexSQL("line.separatr", "line.separatr", "line.separatr", stringArray0, false, "line.separatr", (String) null, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("CREATE  INDEX line.separatr ON line.separatr (  )", string0);
      assertNotNull(string0);
  }

  @Test
  public void test68()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      String[] stringArray0 = new String[8];
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = firebirdDialectExt0.getCreateIndexSQL("BH^CRML[~?", "BH^CRML[~?", "BH^CRML[~?", stringArray0, true, "BH^CRML", "BH^CRML[~?", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("CREATE UNIQUE INDEX BH^CRML[~? ON BH^CRML[~? (  )", string0);
  }

  @Test
  public void test69()  throws Throwable  {
      FirebirdDialectExt firebirdDialectExt0 = new FirebirdDialectExt();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      String string0 = firebirdDialectExt0.getCreateViewSQL("ALTER TABLE $tableName$ ADD CONSTRAINT $constraintName$ UNIQUE ($columnName;  separator=\",\"$)", "KTSq&HK~a%sEH", "KTSq&HK~a%sEH", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("CREATE VIEW ALTER TABLE $tableName$ ADD CONSTRAINT $constraintName$ UNIQUE ($columnName;  separator=\",\"$) AS KTSq&HK~a%sEH ", string0);
      assertNotNull(string0);
  }
}
