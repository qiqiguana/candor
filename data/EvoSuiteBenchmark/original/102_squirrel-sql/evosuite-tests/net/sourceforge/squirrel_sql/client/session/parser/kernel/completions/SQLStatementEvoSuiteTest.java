/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.client.session.parser.kernel.completions;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.Completion;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.SQLSchema;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.completions.SQLColumn;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.completions.SQLModifyingStatement;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.completions.SQLSelectStatement;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.completions.SQLStatement;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.completions.SQLStatementContext;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.completions.SQLTable;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SQLStatementEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(681);
      SQLSchema.Table sQLSchema_Table0 = sQLSelectStatement0.getTable();
      assertNull(sQLSchema_Table0);
  }

  @Test
  public void test1()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(365);
      SQLSelectStatement sQLSelectStatement1 = (SQLSelectStatement)sQLSelectStatement0.getStatement();
      assertEquals(365, sQLSelectStatement1.getStart());
  }

  @Test
  public void test2()  throws Throwable  {
      SQLModifyingStatement sQLModifyingStatement0 = new SQLModifyingStatement((-14));
      SQLTable sQLTable0 = new SQLTable((SQLStatement) sQLModifyingStatement0, (-14));
      // Undeclared exception!
      try {
        sQLModifyingStatement0.setTable(sQLTable0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(1766);
      SQLTable sQLTable0 = new SQLTable((SQLStatement) sQLSelectStatement0, 1766);
      sQLSelectStatement0.addTable(sQLTable0);
      SQLTable sQLTable1 = (SQLTable)sQLSelectStatement0.getCompletion(1766);
      assertEquals(true, sQLTable1.isRepeatable());
  }

  @Test
  public void test4()  throws Throwable  {
      SQLModifyingStatement sQLModifyingStatement0 = new SQLModifyingStatement(106);
      // Undeclared exception!
      try {
        sQLModifyingStatement0.getTables("Q", "Q", "Q");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      SQLModifyingStatement sQLModifyingStatement0 = new SQLModifyingStatement((-14));
      SQLColumn sQLColumn0 = new SQLColumn((SQLStatementContext) sQLModifyingStatement0);
      sQLModifyingStatement0.addColumn(sQLColumn0);
      SQLColumn sQLColumn1 = (SQLColumn)sQLModifyingStatement0.getCompletion((-14));
      assertNull(sQLColumn1);
  }

  @Test
  public void test6()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(1766);
      // Undeclared exception!
      try {
        sQLSelectStatement0.getTable((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      SQLModifyingStatement sQLModifyingStatement0 = new SQLModifyingStatement((-52));
      // Undeclared exception!
      try {
        sQLModifyingStatement0.getTableForAlias("C4Y]~ZrcHd");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(681);
      Completion completion0 = sQLSelectStatement0.getCompletion((-9));
      assertNull(completion0);
  }

  @Test
  public void test9()  throws Throwable  {
      SQLModifyingStatement sQLModifyingStatement0 = new SQLModifyingStatement((-14));
      Completion completion0 = sQLModifyingStatement0.getCompletion((-14));
      assertNull(completion0);
  }

  @Test
  public void test10()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(365);
      // Undeclared exception!
      try {
        sQLSelectStatement0.addContext((SQLStatementContext) sQLSelectStatement0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * internal error: recursive schema
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      SQLModifyingStatement sQLModifyingStatement0 = new SQLModifyingStatement((-14));
      SQLColumn sQLColumn0 = new SQLColumn((SQLStatementContext) sQLModifyingStatement0);
      sQLModifyingStatement0.addColumn(sQLColumn0);
      sQLModifyingStatement0.addColumn(sQLColumn0);
      assertEquals(false, sQLModifyingStatement0.isRepeatable());
  }

  @Test
  public void test12()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(365);
      SQLModifyingStatement sQLModifyingStatement0 = new SQLModifyingStatement(365);
      sQLSelectStatement0.setSqlSchema((SQLSchema) sQLModifyingStatement0);
      sQLSelectStatement0.setFromEnd(365);
      assertEquals(1, sQLSelectStatement0.getLength());
  }
}
