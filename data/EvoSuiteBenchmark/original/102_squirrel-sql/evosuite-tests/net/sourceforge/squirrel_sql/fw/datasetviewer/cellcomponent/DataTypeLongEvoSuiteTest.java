/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Vector;
import javax.swing.JTable;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import net.sourceforge.squirrel_sql.fw.datasetviewer.ColumnDisplayDefinition;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.DataTypeLong;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.RestorableJTextArea;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.RestorableJTextField;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.whereClause.ParameterWhereClausePart;
import net.sourceforge.squirrel_sql.fw.dialects.DialectType;
import net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DataTypeLongEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      JTable jTable0 = new JTable();
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(1840, "04s5|k");
      DataTypeLong dataTypeLong0 = new DataTypeLong(jTable0, columnDisplayDefinition0);
      boolean boolean0 = dataTypeLong0.needToReRead((Object) "increment");
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(1517, 255);
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTable jTable0 = new JTable((TableModel) defaultTableModel0, (TableColumnModel) defaultTableColumnModel0);
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(1517, "'n^z");
      DataTypeLong dataTypeLong0 = new DataTypeLong(jTable0, columnDisplayDefinition0);
      RestorableJTextField restorableJTextField0 = (RestorableJTextField)dataTypeLong0.getJTextField();
      assertEquals(true, restorableJTextField0.isBackgroundSet());
  }

  @Test
  public void test2()  throws Throwable  {
      JTable jTable0 = new JTable(0, 0);
      DialectType dialectType0 = DialectType.MAXDB;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, "", "", "", 0, "", false, 0, 0, 0, false, false, false, dialectType0);
      DataTypeLong dataTypeLong0 = new DataTypeLong(jTable0, columnDisplayDefinition0);
      boolean boolean0 = dataTypeLong0.isEditableInCell((Object) "chromaticity");
      assertEquals(true, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      DialectType dialectType0 = DialectType.AXION;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(960, ">]v1Y(SO~IP+1", ">]v1Y(SO~IP+1", ">]v1Y(SO~IP+1", 0, ">]v1Y(SO~IP+1", true, 0, 960, 0, true, true, false, dialectType0);
      DataTypeLong dataTypeLong0 = new DataTypeLong((JTable) null, columnDisplayDefinition0);
      boolean boolean0 = dataTypeLong0.canDoFileIO();
      assertEquals(true, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      JTable jTable0 = new JTable();
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, "04s5|k");
      DataTypeLong dataTypeLong0 = new DataTypeLong(jTable0, columnDisplayDefinition0);
      boolean boolean0 = dataTypeLong0.useBinaryEditingPanel();
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      JTable jTable0 = new JTable();
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(1840, "04s5|k");
      DataTypeLong dataTypeLong0 = new DataTypeLong(jTable0, columnDisplayDefinition0);
      String string0 = dataTypeLong0.getClassName();
      assertEquals("java.lang.Long", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      JTable jTable0 = new JTable((TableModel) null);
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, "");
      DataTypeLong dataTypeLong0 = new DataTypeLong(jTable0, columnDisplayDefinition0);
      Object object0 = dataTypeLong0.validateAndConvertInPopup("", (Object) "AccessibleDescription", (StringBuffer) null);
      assertNull(object0);
  }

  @Test
  public void test7()  throws Throwable  {
      JTable jTable0 = new JTable(0, 0);
      DialectType dialectType0 = DialectType.MAXDB;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, "", "", "", 0, "", false, 0, 0, 0, false, false, false, dialectType0);
      DataTypeLong dataTypeLong0 = new DataTypeLong(jTable0, columnDisplayDefinition0);
      boolean boolean0 = dataTypeLong0.isEditableInPopup((Object) null);
      assertEquals(true, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      JTable jTable0 = new JTable((TableModel) defaultTableModel0);
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, (String) null);
      DataTypeLong dataTypeLong0 = new DataTypeLong(jTable0, columnDisplayDefinition0);
      RestorableJTextArea restorableJTextArea0 = (RestorableJTextArea)dataTypeLong0.getJTextArea((Object) null);
      assertNotNull(restorableJTextArea0);
      assertEquals("<null>", restorableJTextArea0.getText());
  }

  @Test
  public void test9()  throws Throwable  {
      DialectType dialectType0 = DialectType.MCKOI;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(1713, "H2", "H2", "H2", 1713, "H2", false, 1713, 1713, 1713, false, false, false, dialectType0);
      DataTypeLong dataTypeLong0 = new DataTypeLong((JTable) null, columnDisplayDefinition0);
      ParameterWhereClausePart parameterWhereClausePart0 = (ParameterWhereClausePart)dataTypeLong0.getWhereClauseValue((Object) "selectedIcon", (ISQLDatabaseMetaData) null);
      assertEquals(true, parameterWhereClausePart0.shouldBeUsed());
  }

  @Test
  public void test10()  throws Throwable  {
      JTable jTable0 = new JTable();
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(1211, "");
      DataTypeLong dataTypeLong0 = new DataTypeLong(jTable0, columnDisplayDefinition0);
      // Undeclared exception!
      try {
        dataTypeLong0.getWhereClauseValue((Object) "", (ISQLDatabaseMetaData) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * columnDef contains not an usable columnName
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      JTable jTable0 = new JTable();
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, "04s5|k");
      columnDisplayDefinition0.setIsNullable(false);
      DataTypeLong dataTypeLong0 = new DataTypeLong(jTable0, columnDisplayDefinition0);
      Long long0 = (Long)dataTypeLong0.getDefaultValue("increment");
      assertEquals(0L, (long)long0);
      
      // Undeclared exception!
      try {
        dataTypeLong0.setPreparedStatementValue((PreparedStatement) null, (Object) long0, 0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      JTable jTable0 = new JTable();
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(1840, "04s5|k");
      DataTypeLong dataTypeLong0 = new DataTypeLong(jTable0, columnDisplayDefinition0);
      // Undeclared exception!
      try {
        dataTypeLong0.setPreparedStatementValue((PreparedStatement) null, (Object) null, 1840);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      JTable jTable0 = new JTable((TableModel) defaultTableModel0);
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, (String) null);
      DataTypeLong dataTypeLong0 = new DataTypeLong(jTable0, columnDisplayDefinition0);
      Long long0 = (Long)dataTypeLong0.getDefaultValue((String) null);
      assertNull(long0);
  }

  @Test
  public void test14()  throws Throwable  {
      JTable jTable0 = new JTable(0, 0);
      DialectType dialectType0 = DialectType.MAXDB;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, "", "", "", 0, "", false, 0, 0, 0, false, false, false, dialectType0);
      DataTypeLong dataTypeLong0 = new DataTypeLong(jTable0, columnDisplayDefinition0);
      Long long0 = (Long)dataTypeLong0.getDefaultValue("");
      assertNull(long0);
  }

  @Test
  public void test15()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      Vector<Object> vector0 = defaultTableModel0.getDataVector();
      JTable jTable0 = new JTable(vector0, vector0);
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(7, "^pP");
      DataTypeLong dataTypeLong0 = new DataTypeLong(jTable0, columnDisplayDefinition0);
      FileDescriptor fileDescriptor0 = FileDescriptor.err;
      FileInputStream fileInputStream0 = new FileInputStream(fileDescriptor0);
      // Undeclared exception!
      try {
        dataTypeLong0.importObject(fileInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * -1
         */
      }
  }
}
