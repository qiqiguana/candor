/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.client.update.gui;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import net.sourceforge.squirrel_sql.client.update.gui.ArtifactAction;
import net.sourceforge.squirrel_sql.client.update.gui.ArtifactStatus;
import net.sourceforge.squirrel_sql.client.update.xmlbeans.ArtifactXmlBean;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ArtifactStatusEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ArtifactStatus artifactStatus0 = new ArtifactStatus();
      ArtifactAction artifactAction0 = artifactStatus0.getArtifactAction();
      assertEquals("NONE", artifactAction0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      ArtifactStatus artifactStatus0 = new ArtifactStatus();
      boolean boolean0 = artifactStatus0.isTranslationArtifact();
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      ArtifactStatus artifactStatus0 = new ArtifactStatus();
      artifactStatus0.setName(" MB");
      int int0 = artifactStatus0.hashCode();
      assertEquals(1030316, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      ArtifactStatus artifactStatus0 = new ArtifactStatus();
      String string0 = artifactStatus0.getName();
      assertNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      ArtifactStatus artifactStatus0 = new ArtifactStatus();
      String string0 = artifactStatus0.toString();
      assertNotNull(string0);
  }

  @Test
  public void test5()  throws Throwable  {
      ArtifactStatus artifactStatus0 = new ArtifactStatus();
      String string0 = artifactStatus0.getType();
      assertNull(string0);
  }

  @Test
  public void test6()  throws Throwable  {
      ArtifactXmlBean artifactXmlBean0 = new ArtifactXmlBean();
      ArtifactStatus artifactStatus0 = new ArtifactStatus(artifactXmlBean0);
      assertNotNull(artifactStatus0);
      
      artifactStatus0.setInstalled(false);
      assertEquals(false, artifactStatus0.isInstalled());
  }

  @Test
  public void test7()  throws Throwable  {
      ArtifactStatus artifactStatus0 = new ArtifactStatus();
      String string0 = artifactStatus0.getDisplayType();
      assertNull(string0);
  }

  @Test
  public void test8()  throws Throwable  {
      ArtifactStatus artifactStatus0 = new ArtifactStatus();
      long long0 = artifactStatus0.getChecksum();
      assertEquals(0L, long0);
  }

  @Test
  public void test9()  throws Throwable  {
      ArtifactStatus artifactStatus0 = new ArtifactStatus();
      long long0 = artifactStatus0.getSize();
      assertEquals(0L, long0);
  }

  @Test
  public void test10()  throws Throwable  {
      ArtifactStatus artifactStatus0 = new ArtifactStatus();
      artifactStatus0.setSize(0L);
      assertEquals(false, artifactStatus0.isInstalled());
  }

  @Test
  public void test11()  throws Throwable  {
      ArtifactXmlBean artifactXmlBean0 = new ArtifactXmlBean();
      ArtifactStatus artifactStatus0 = new ArtifactStatus(artifactXmlBean0);
      ArtifactAction artifactAction0 = ArtifactAction.INSTALL;
      artifactStatus0.setArtifactAction(artifactAction0);
      assertNull(artifactStatus0.getType());
  }

  @Test
  public void test12()  throws Throwable  {
      ArtifactStatus artifactStatus0 = new ArtifactStatus();
      artifactStatus0.setDisplayType("8>9W^%3");
      assertEquals(false, artifactStatus0.isCoreArtifact());
  }

  @Test
  public void test13()  throws Throwable  {
      ArtifactStatus artifactStatus0 = new ArtifactStatus();
      artifactStatus0.setChecksum((-941L));
      assertEquals((-941L), artifactStatus0.getChecksum());
  }

  @Test
  public void test14()  throws Throwable  {
      ArtifactStatus artifactStatus0 = new ArtifactStatus();
      boolean boolean0 = artifactStatus0.isPluginArtifact();
      assertEquals(false, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      ArtifactStatus artifactStatus0 = new ArtifactStatus();
      boolean boolean0 = artifactStatus0.isInstalled();
      assertEquals(false, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      ArtifactStatus artifactStatus0 = new ArtifactStatus();
      boolean boolean0 = artifactStatus0.isCoreArtifact();
      assertEquals(false, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      ArtifactStatus artifactStatus0 = new ArtifactStatus();
      artifactStatus0.setType("log4j.debug");
      ArtifactStatus artifactStatus1 = new ArtifactStatus();
      boolean boolean0 = artifactStatus0.equals((Object) artifactStatus1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      ArtifactStatus artifactStatus0 = new ArtifactStatus();
      artifactStatus0.setType("core");
      assertEquals("core", artifactStatus0.getDisplayType());
  }

  @Test
  public void test19()  throws Throwable  {
      ArtifactXmlBean artifactXmlBean0 = new ArtifactXmlBean("plugin", "plugin", "plugin", (-1347L), (-1347L));
      ArtifactStatus artifactStatus0 = new ArtifactStatus(artifactXmlBean0);
      assertEquals(true, artifactStatus0.isPluginArtifact());
      assertEquals((-1347L), artifactStatus0.getSize());
      assertEquals((-1347L), artifactStatus0.getChecksum());
  }

  @Test
  public void test20()  throws Throwable  {
      ArtifactStatus artifactStatus0 = new ArtifactStatus();
      artifactStatus0.setType(" MB");
      int int0 = artifactStatus0.hashCode();
      assertEquals(34166, int0);
  }

  @Test
  public void test21()  throws Throwable  {
      ArtifactStatus artifactStatus0 = new ArtifactStatus();
      ArtifactXmlBean artifactXmlBean0 = new ArtifactXmlBean("i18n", "i18n", "i18n", (-1L), (-1L));
      ArtifactStatus artifactStatus1 = new ArtifactStatus(artifactXmlBean0);
      boolean boolean0 = artifactStatus0.equals((Object) artifactStatus1);
      assertEquals(true, artifactStatus1.isTranslationArtifact());
      assertEquals(false, boolean0);
      assertEquals((-1L), artifactStatus1.getSize());
      assertEquals((-1L), artifactStatus1.getChecksum());
      assertEquals("translation", artifactStatus1.getDisplayType());
  }

  @Test
  public void test22()  throws Throwable  {
      ArtifactXmlBean artifactXmlBean0 = new ArtifactXmlBean();
      ArtifactStatus artifactStatus0 = new ArtifactStatus(artifactXmlBean0);
      assertNotNull(artifactStatus0);
      
      boolean boolean0 = artifactStatus0.equals((Object) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      ArtifactStatus artifactStatus0 = new ArtifactStatus();
      boolean boolean0 = artifactStatus0.equals((Object) "ArtifactStatus ( net.sourceforge.squirrel_sql.client.update.gui.ArtifactStatus@3c1    name = null    type = null    installed = false    displayType = null    artifactAction = NONE     )");
      assertEquals(false, boolean0);
  }

  @Test
  public void test24()  throws Throwable  {
      ArtifactStatus artifactStatus0 = new ArtifactStatus();
      artifactStatus0.setName(" MB");
      ArtifactXmlBean artifactXmlBean0 = new ArtifactXmlBean(" MB", " MB", " MB", 0L, 0L);
      ArtifactStatus artifactStatus1 = new ArtifactStatus(artifactXmlBean0);
      boolean boolean0 = artifactStatus0.equals((Object) artifactStatus1);
      assertEquals(false, boolean0);
      assertFalse(artifactStatus1.equals(artifactStatus0));
  }

  @Test
  public void test25()  throws Throwable  {
      ArtifactStatus artifactStatus0 = new ArtifactStatus();
      ArtifactStatus artifactStatus1 = new ArtifactStatus();
      boolean boolean0 = artifactStatus1.equals((Object) artifactStatus0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test26()  throws Throwable  {
      ArtifactStatus artifactStatus0 = new ArtifactStatus();
      artifactStatus0.setName(" MB");
      ArtifactXmlBean artifactXmlBean0 = new ArtifactXmlBean("+y1x2_Dz%|[f", "+y1x2_Dz%|[f", "+y1x2_Dz%|[f", (-1352L), (-1352L));
      ArtifactStatus artifactStatus1 = new ArtifactStatus(artifactXmlBean0);
      boolean boolean0 = artifactStatus0.equals((Object) artifactStatus1);
      assertEquals(false, boolean0);
      assertEquals((-1352L), artifactStatus1.getChecksum());
      assertEquals((-1352L), artifactStatus1.getSize());
  }

  @Test
  public void test27()  throws Throwable  {
      ArtifactStatus artifactStatus0 = new ArtifactStatus();
      artifactStatus0.setName(" MB");
      artifactStatus0.setType(" MB");
      ArtifactXmlBean artifactXmlBean0 = new ArtifactXmlBean(" MB", " MB", " MB", (-1342L), (-1342L));
      ArtifactStatus artifactStatus1 = new ArtifactStatus(artifactXmlBean0);
      boolean boolean0 = artifactStatus0.equals((Object) artifactStatus1);
      assertEquals(true, boolean0);
      assertEquals((-1342L), artifactStatus1.getChecksum());
      assertEquals((-1342L), artifactStatus1.getSize());
  }
}
