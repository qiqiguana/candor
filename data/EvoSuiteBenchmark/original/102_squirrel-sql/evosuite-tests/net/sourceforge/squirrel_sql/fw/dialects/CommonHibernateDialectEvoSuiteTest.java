/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.dialects;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Collection;
import java.util.List;
import net.sourceforge.squirrel_sql.fw.dialects.CommonHibernateDialect;
import net.sourceforge.squirrel_sql.fw.dialects.DatabaseObjectQualifier;
import net.sourceforge.squirrel_sql.fw.dialects.DialectType;
import net.sourceforge.squirrel_sql.fw.dialects.SequencePropertyMutability;
import net.sourceforge.squirrel_sql.fw.dialects.SqlGenerationPreferences;
import net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.IDatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.ITableInfo;
import net.sourceforge.squirrel_sql.fw.sql.TableColumnInfo;
import org.hibernate.HibernateException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class CommonHibernateDialectEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("2_$09ik'd_t<Vq!tbh", "2_$09ik'd_t<Vq!tbh", "2_$09ik'd_t<Vq!tbh", "2_$09ik'd_t<Vq!tbh", (-1896), "2_$09ik'd_t<Vq!tbh", 1024, 1, 0, 0, "2_$09ik'd_t<Vq!tbh", "2_$09ik'd_t<Vq!tbh", 1024, 0, "2_$09ik'd_t<Vq!tbh");
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      try {
        commonHibernateDialect0.getColumnCommentAlterSQL(tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Generic doesn't support column comments
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("", "", "", "", (-4), "", (-4), (-4), (-4), (-4), "", "", 1455, (-4), "");
      // Undeclared exception!
      try {
        commonHibernateDialect0.getTypeName(tableColumnInfo0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Common dialect doesn't register column types
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      boolean boolean0 = commonHibernateDialect0.supportsDropView();
      assertEquals(true, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      String string0 = commonHibernateDialect0.getMaxFunction();
      assertEquals("max", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      // Undeclared exception!
      try {
        commonHibernateDialect0.getTableDropSQL((ITableInfo) null, true, true, databaseObjectQualifier0, (SqlGenerationPreferences) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo(",KL4BG mAUZ-GkiAt,", ",KL4BG mAUZ-GkiAt,", ",KL4BG mAUZ-GkiAt,", ",KL4BG mAUZ-GkiAt,", 712, ",KL4BG mAUZ-GkiAt,", (-1859), (-293), 0, (-1859), ",KL4BG mAUZ-GkiAt,", ",KL4BG mAUZ-GkiAt,", 0, 451, ",KL4BG mAUZ-GkiAt,");
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        commonHibernateDialect0.getAddColumnSQL(tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Common dialect doesn't register column types
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      String string0 = commonHibernateDialect0.getNullColumnString();
      assertEquals("", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      boolean boolean0 = commonHibernateDialect0.supportsColumnComment();
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      boolean boolean0 = commonHibernateDialect0.supportsAutoIncrement();
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("", "", "", "", 0, "", 0, 0, 1, 0, "", "", 0, 0, "");
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("", "");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      try {
        commonHibernateDialect0.getColumnTypeAlterSQL(tableColumnInfo0, tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Generic doesn't support altering a column's type attribute
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier(":EO+3P", ":EO+3P");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        commonHibernateDialect0.getDropConstraintSQL(":EO+3P", ":EO+3P", databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Generic doesn't support dropping constraints.
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      String[] stringArray0 = commonHibernateDialect0.getIndexAccessMethodsTypes();
      assertNull(stringArray0);
  }

  @Test
  public void test12()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      boolean boolean0 = commonHibernateDialect0.supportsProduct("length", "length");
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      boolean boolean0 = commonHibernateDialect0.supportsSequenceInformation();
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      boolean boolean0 = commonHibernateDialect0.supportsCreateIndex();
      assertEquals(false, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      DialectType dialectType0 = commonHibernateDialect0.getDialectType();
      assertEquals("GENERIC", dialectType0.toString());
  }

  @Test
  public void test16()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      boolean boolean0 = commonHibernateDialect0.supportsUpdate();
      assertEquals(true, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        commonHibernateDialect0.getCreateViewSQL("", "", "", databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Generic doesn't support creating views.
         */
      }
  }

  @Test
  public void test18()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      boolean boolean0 = commonHibernateDialect0.supportsAddPrimaryKey();
      assertEquals(true, boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("-O", "-O");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        commonHibernateDialect0.getDropPrimaryKeySQL("-O", "-O", databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Generic doesn't support dropping primary keys
         */
      }
  }

  @Test
  public void test20()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      boolean boolean0 = commonHibernateDialect0.supportsAlterColumnNull();
      assertEquals(false, boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      byte[] byteArray0 = new byte[9];
      String string0 = commonHibernateDialect0.getBinaryLiteralString(byteArray0);
      assertNotNull(string0);
      assertEquals("'000000000000000000'", string0);
  }

  @Test
  public void test22()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      boolean boolean0 = commonHibernateDialect0.supportsCreateSequence();
      assertEquals(false, boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      boolean boolean0 = commonHibernateDialect0.supportsRenameTable();
      assertEquals(false, boolean0);
  }

  @Test
  public void test24()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("DROP VIEW CREATE SEQUENCE $sequenceName$  $increment$ $minimum$ $maximum$ $startWith$ $cache$ $cycle$", "DROP VIEW CREATE SEQUENCE $sequenceName$  $increment$ $minimum$ $maximum$ $startWith$ $cache$ $cycle$", "CREATE SEQUENCE $sequenceName$  $increment$ $minimum$ $maximum$ $startWith$ $cache$ $cycle$", "DROP VIEW CREATE SEQUENCE $sequenceName$  $increment$ $minimum$ $maximum$ $startWith$ $cache$ $cycle$", 10000, "DROP VIEW CREATE SEQUENCE $sequenceName$  $increment$ $minimum$ $maximum$ $startWith$ $cache$ $cycle$", 87, (-1522), 14, 1188, "DROP VIEW CREATE SEQUENCE $sequenceName$  $increment$ $minimum$ $maximum$ $startWith$ $cache$ $cycle$", "", 1188, 0, "DROP VIEW CREATE SEQUENCE $sequenceName$  $increment$ $minimum$ $maximum$ $startWith$ $cache$ $cycle$");
      // Undeclared exception!
      try {
        commonHibernateDialect0.getColumnNullableAlterSQL(tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Generic doesn't support altering a column's nullable attribute
         */
      }
  }

  @Test
  public void test25()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      int int0 = commonHibernateDialect0.getColumnLength(479, 479);
      assertEquals(479, int0);
  }

  @Test
  public void test26()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("", "", "", "", (-1879), "", (-1879), (-1879), (-1), (-1879), "max", "", (-964), 0, "qJ!jgyMLVh5 /");
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        commonHibernateDialect0.getColumnNameAlterSQL(tableColumnInfo0, tableColumnInfo0, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Generic doesn't support altering a column's name
         */
      }
  }

  @Test
  public void test27()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      boolean boolean0 = commonHibernateDialect0.supportsViewDefinition();
      assertEquals(false, boolean0);
  }

  @Test
  public void test28()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("MYl1kYKs)", "MYl1kYKs)", "MYl1kYKs)", "MYl1kYKs)", 957, "MYl1kYKs)", 957, 957, (-1), 1845, "MYl1kYKs)", "MYl1kYKs)", 957, 957, "MYl1kYKs)");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        commonHibernateDialect0.getColumnDefaultAlterSQL(tableColumnInfo0, (DatabaseObjectQualifier) null, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Generic doesn't support altering a column's default value
         */
      }
  }

  @Test
  public void test29()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      boolean boolean0 = commonHibernateDialect0.supportsAlterColumnDefault();
      assertEquals(false, boolean0);
  }

  @Test
  public void test30()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = commonHibernateDialect0.getDropIndexSQL("", "", false, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertNotNull(string0);
      assertEquals("DROP INDEX ", string0);
  }

  @Test
  public void test31()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("0", "");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        commonHibernateDialect0.getCreateSequenceSQL("INSERT INTO \n 0", "0", "", "", "INSERT INTO \n 0", "0", false, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Generic doesn't support creating sequences.
         */
      }
  }

  @Test
  public void test32()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      boolean boolean0 = commonHibernateDialect0.supportsInsertInto();
      assertEquals(true, boolean0);
  }

  @Test
  public void test33()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = commonHibernateDialect0.getDropViewSQL("CREATE SEQUENCE $sequenceName$  $increment$ $minimum$ $maximum$ $startWith$ $cache$ $cycle$", true, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("DROP VIEW CREATE SEQUENCE $sequenceName$  $increment$ $minimum$ $maximum$ $startWith$ $cache$ $cycle$", string0);
      assertNotNull(string0);
  }

  @Test
  public void test34()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      boolean boolean0 = commonHibernateDialect0.supportsTablespace();
      assertEquals(false, boolean0);
  }

  @Test
  public void test35()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      boolean boolean0 = commonHibernateDialect0.supportsCreateTable();
      assertEquals(true, boolean0);
  }

  @Test
  public void test36()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("max", "max", "max");
      boolean boolean0 = commonHibernateDialect0.canPasteTo((IDatabaseObjectInfo) databaseObjectInfo0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test37()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[1];
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      // Undeclared exception!
      try {
        commonHibernateDialect0.getAddUniqueConstraintSQL("none", "none", tableColumnInfoArray0, databaseObjectQualifier0, (SqlGenerationPreferences) null);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Generic doesn't support add unique constraints.
         */
      }
  }

  @Test
  public void test38()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      boolean boolean0 = commonHibernateDialect0.supportsAlterColumnType();
      assertEquals(false, boolean0);
  }

  @Test
  public void test39()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      boolean boolean0 = commonHibernateDialect0.supportsAddForeignKeyConstraint();
      assertEquals(false, boolean0);
  }

  @Test
  public void test40()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        commonHibernateDialect0.getRenameTableSQL("Hw8jlHY3w@8J", "", databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Generic doesn't support renaming tables.
         */
      }
  }

  @Test
  public void test41()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      boolean boolean0 = commonHibernateDialect0.supportsSequence();
      assertEquals(false, boolean0);
  }

  @Test
  public void test42()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      boolean boolean0 = commonHibernateDialect0.supportsSubSecondTimestamps();
      assertEquals(true, boolean0);
  }

  @Test
  public void test43()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      String[] stringArray0 = new String[4];
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("vwrbcJq_QS;2;&kLI3", "vwrbcJq_QS;2;&kLI3");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        commonHibernateDialect0.getCreateIndexSQL("vwrbcJq_QS;2;&kLI3", "vwrbcJq_QS;2;&kLI3", "vwrbcJq_QS;2;&kLI3", stringArray0, false, "vwrbcJq_QS;2;&kLI3", "vwrbcJq_QS;2;&kLI3", databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Generic doesn't support creating indexes.
         */
      }
  }

  @Test
  public void test44()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      boolean boolean0 = commonHibernateDialect0.supportsRenameView();
      assertEquals(false, boolean0);
  }

  @Test
  public void test45()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      boolean boolean0 = commonHibernateDialect0.supportsSchemasInTableDefinition();
      assertEquals(true, boolean0);
  }

  @Test
  public void test46()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      boolean boolean0 = commonHibernateDialect0.supportsRenameColumn();
      assertEquals(false, boolean0);
  }

  @Test
  public void test47()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      boolean boolean0 = commonHibernateDialect0.supportsDropColumn();
      assertEquals(true, boolean0);
  }

  @Test
  public void test48()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      String string0 = commonHibernateDialect0.getLengthFunction(1);
      assertEquals("length", string0);
  }

  @Test
  public void test49()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      boolean boolean0 = commonHibernateDialect0.supportsDropIndex();
      assertEquals(true, boolean0);
  }

  @Test
  public void test50()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      SequencePropertyMutability sequencePropertyMutability0 = commonHibernateDialect0.getSequencePropertyMutability();
      assertEquals(true, sequencePropertyMutability0.isRestart());
  }

  @Test
  public void test51()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      String[] stringArray0 = commonHibernateDialect0.getIndexStorageOptions();
      assertNull(stringArray0);
  }

  @Test
  public void test52()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      boolean boolean0 = commonHibernateDialect0.supportsCorrelatedSubQuery();
      assertEquals(true, boolean0);
  }

  @Test
  public void test53()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      int int0 = commonHibernateDialect0.getTimestampMaximumFractionalDigits();
      assertEquals(3, int0);
  }

  @Test
  public void test54()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      boolean boolean0 = commonHibernateDialect0.supportsAddUniqueConstraint();
      assertEquals(false, boolean0);
  }

  @Test
  public void test55()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("length", "", "", "VtwKX[D.uc+", 0, "VtwKX[D.uc+", 0, 0, 0, (int) (byte) (-105), "iK#>.~26", "|X[/Dl_#'", (int) (byte)23, (int) (byte) (-105), "");
      // Undeclared exception!
      try {
        commonHibernateDialect0.getAddAutoIncrementSQL(tableColumnInfo0, "", (DatabaseObjectQualifier) null, (SqlGenerationPreferences) null);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Generic doesn't support adding auto increment constraints.
         */
      }
  }

  @Test
  public void test56()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        commonHibernateDialect0.getAddForeignKeyConstraintSQL("W$3'?&N4Aq02vd\"", "W$3'?&N4Aq02vd\"", ".G", (Boolean) false, (Boolean) false, (Boolean) false, false, "W$3'?&N4Aq02vd\"", (Collection<String[]>) null, ".G", ".G", databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Generic doesn't support adding foreign key constraints.
         */
      }
  }

  @Test
  public void test57()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("?C5'#jW7oeG@2", "v!XG9yt&@u'C");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        commonHibernateDialect0.getAlterSequenceSQL("v!XG9yt&@u'C", "v!XG9yt&@u'C", "v!XG9yt&@u'C", "v!XG9yt&@u'C", "v!XG9yt&@u'C", "v!XG9yt&@u'C", false, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Generic doesn't support altering sequences.
         */
      }
  }

  @Test
  public void test58()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      boolean boolean0 = commonHibernateDialect0.supportsIndexes();
      assertEquals(true, boolean0);
  }

  @Test
  public void test59()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("-O", "-O");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = commonHibernateDialect0.getDropForeignKeySQL("-O", "-O", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertNotNull(string0);
      assertEquals("ALTER TABLE -O DROP CONSTRAINT \"-O\"", string0);
  }

  @Test
  public void test60()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      boolean boolean0 = commonHibernateDialect0.supportsAddColumn();
      assertEquals(true, boolean0);
  }

  @Test
  public void test61()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      boolean boolean0 = commonHibernateDialect0.supportsMultipleRowInserts();
      assertEquals(false, boolean0);
  }

  @Test
  public void test62()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      int int0 = commonHibernateDialect0.getMaxScale(0);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test
  public void test63()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        commonHibernateDialect0.getViewDefinitionSQL((String) null, databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Generic doesn't support getting the query for views
         */
      }
  }

  @Test
  public void test64()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      // Undeclared exception!
      try {
        commonHibernateDialect0.getTypeName(1);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Common dialect doesn't register column types
         */
      }
  }

  @Test
  public void test65()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      boolean boolean0 = commonHibernateDialect0.supportsDropSequence();
      assertEquals(false, boolean0);
  }

  @Test
  public void test66()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      boolean boolean0 = commonHibernateDialect0.supportsAlterSequence();
      assertEquals(false, boolean0);
  }

  @Test
  public void test67()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        commonHibernateDialect0.getSequenceInformationSQL("", databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Generic doesn't support gathering sequence information.
         */
      }
  }

  @Test
  public void test68()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      boolean boolean0 = commonHibernateDialect0.supportsAccessMethods();
      assertEquals(false, boolean0);
  }

  @Test
  public void test69()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        commonHibernateDialect0.getDropSequenceSQL("X<UC[L\"[vsH&", false, (DatabaseObjectQualifier) null, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Generic doesn't support dropping sequences.
         */
      }
  }

  @Test
  public void test70()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier(" REFERENCING NEW AS n \n", " REFERENCING NEW AS n \n");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      // Undeclared exception!
      try {
        commonHibernateDialect0.getRenameViewSQL(" REFERENCING NEW AS n \n", " REFERENCING NEW AS n \n", databaseObjectQualifier0, sqlGenerationPreferences0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Generic doesn't support renaming views.
         */
      }
  }

  @Test
  public void test71()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      boolean boolean0 = commonHibernateDialect0.supportsDropConstraint();
      assertEquals(false, boolean0);
  }

  @Test
  public void test72()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("0", "");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = commonHibernateDialect0.getInsertIntoSQL("", (List<String>) null, "0", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertEquals("INSERT INTO \n 0", string0);
  }

  @Test
  public void test73()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      boolean boolean0 = commonHibernateDialect0.supportsEmptyTables();
      assertEquals(false, boolean0);
  }

  @Test
  public void test74()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      boolean boolean0 = commonHibernateDialect0.supportsCheckOptionsForViews();
      assertEquals(false, boolean0);
  }

  @Test
  public void test75()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      boolean boolean0 = commonHibernateDialect0.supportsDropPrimaryKey();
      assertEquals(true, boolean0);
  }

  @Test
  public void test76()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier("", "TimeSeriesDataset.addSeries(): cannot add more series than specified in c'tor");
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String string0 = commonHibernateDialect0.getColumnDropSQL("", "", databaseObjectQualifier0, sqlGenerationPreferences0);
      assertNotNull(string0);
      assertEquals('\"', commonHibernateDialect0.openQuote());
      assertEquals("ALTER TABLE  DROP  ", string0);
  }

  @Test
  public void test77()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      boolean boolean0 = commonHibernateDialect0.supportsCreateView();
      assertEquals(false, boolean0);
  }

  @Test
  public void test78()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      // Undeclared exception!
      try {
        commonHibernateDialect0.getJavaTypeForNativeType("jar:");
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Dialect (Generic) doesn't provide a java type for native type = jar:
         */
      }
  }

  @Test
  public void test79()  throws Throwable  {
      CommonHibernateDialect commonHibernateDialect0 = new CommonHibernateDialect();
      String[] stringArray0 = new String[6];
      DatabaseObjectQualifier databaseObjectQualifier0 = new DatabaseObjectQualifier();
      SqlGenerationPreferences sqlGenerationPreferences0 = new SqlGenerationPreferences();
      String[] stringArray1 = commonHibernateDialect0.getUpdateSQL(";=", stringArray0, stringArray0, stringArray0, stringArray0, stringArray0, databaseObjectQualifier0, sqlGenerationPreferences0);
      assertNotSame(stringArray0, stringArray1);
  }
}
