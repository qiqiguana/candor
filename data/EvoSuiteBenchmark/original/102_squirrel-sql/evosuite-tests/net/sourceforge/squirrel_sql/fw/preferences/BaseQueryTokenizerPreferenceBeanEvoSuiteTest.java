/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.preferences;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import net.sourceforge.squirrel_sql.fw.preferences.BaseQueryTokenizerPreferenceBean;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BaseQueryTokenizerPreferenceBeanEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BaseQueryTokenizerPreferenceBean baseQueryTokenizerPreferenceBean0 = new BaseQueryTokenizerPreferenceBean();
      assertEquals(";", baseQueryTokenizerPreferenceBean0.getStatementSeparator());
      
      baseQueryTokenizerPreferenceBean0.setStatementSeparator("]C");
      assertEquals(true, baseQueryTokenizerPreferenceBean0.isInstallCustomQueryTokenizer());
  }

  @Test
  public void test1()  throws Throwable  {
      BaseQueryTokenizerPreferenceBean baseQueryTokenizerPreferenceBean0 = new BaseQueryTokenizerPreferenceBean();
      baseQueryTokenizerPreferenceBean0.setClientVersion("");
      assertEquals("--", baseQueryTokenizerPreferenceBean0.getLineComment());
      assertEquals("/", baseQueryTokenizerPreferenceBean0.getProcedureSeparator());
      assertEquals(false, baseQueryTokenizerPreferenceBean0.isRemoveMultiLineComments());
      assertEquals(true, baseQueryTokenizerPreferenceBean0.isInstallCustomQueryTokenizer());
      assertEquals(";", baseQueryTokenizerPreferenceBean0.getStatementSeparator());
  }

  @Test
  public void test2()  throws Throwable  {
      BaseQueryTokenizerPreferenceBean baseQueryTokenizerPreferenceBean0 = new BaseQueryTokenizerPreferenceBean();
      baseQueryTokenizerPreferenceBean0.getClientVersion();
      assertEquals("/", baseQueryTokenizerPreferenceBean0.getProcedureSeparator());
      assertEquals(";", baseQueryTokenizerPreferenceBean0.getStatementSeparator());
      assertEquals(true, baseQueryTokenizerPreferenceBean0.isInstallCustomQueryTokenizer());
      assertEquals("--", baseQueryTokenizerPreferenceBean0.getLineComment());
      assertEquals(false, baseQueryTokenizerPreferenceBean0.isRemoveMultiLineComments());
  }

  @Test
  public void test3()  throws Throwable  {
      BaseQueryTokenizerPreferenceBean baseQueryTokenizerPreferenceBean0 = new BaseQueryTokenizerPreferenceBean();
      String string0 = baseQueryTokenizerPreferenceBean0.getLineComment();
      assertNotNull(string0);
      assertEquals("--", string0);
      assertEquals(";", baseQueryTokenizerPreferenceBean0.getStatementSeparator());
      assertEquals(false, baseQueryTokenizerPreferenceBean0.isRemoveMultiLineComments());
      assertEquals("/", baseQueryTokenizerPreferenceBean0.getProcedureSeparator());
      assertEquals(true, baseQueryTokenizerPreferenceBean0.isInstallCustomQueryTokenizer());
  }

  @Test
  public void test4()  throws Throwable  {
      BaseQueryTokenizerPreferenceBean baseQueryTokenizerPreferenceBean0 = new BaseQueryTokenizerPreferenceBean();
      BaseQueryTokenizerPreferenceBean baseQueryTokenizerPreferenceBean1 = (BaseQueryTokenizerPreferenceBean)baseQueryTokenizerPreferenceBean0.clone();
      assertEquals("/", baseQueryTokenizerPreferenceBean1.getProcedureSeparator());
      assertEquals(";", baseQueryTokenizerPreferenceBean1.getStatementSeparator());
      assertEquals("--", baseQueryTokenizerPreferenceBean1.getLineComment());
      assertEquals(true, baseQueryTokenizerPreferenceBean1.isInstallCustomQueryTokenizer());
      assertEquals(false, baseQueryTokenizerPreferenceBean1.isRemoveMultiLineComments());
  }

  @Test
  public void test5()  throws Throwable  {
      BaseQueryTokenizerPreferenceBean baseQueryTokenizerPreferenceBean0 = new BaseQueryTokenizerPreferenceBean();
      baseQueryTokenizerPreferenceBean0.setClientName("");
      assertEquals(";", baseQueryTokenizerPreferenceBean0.getStatementSeparator());
      assertEquals("/", baseQueryTokenizerPreferenceBean0.getProcedureSeparator());
      assertEquals(false, baseQueryTokenizerPreferenceBean0.isRemoveMultiLineComments());
      assertEquals("--", baseQueryTokenizerPreferenceBean0.getLineComment());
      assertEquals(true, baseQueryTokenizerPreferenceBean0.isInstallCustomQueryTokenizer());
  }

  @Test
  public void test6()  throws Throwable  {
      BaseQueryTokenizerPreferenceBean baseQueryTokenizerPreferenceBean0 = new BaseQueryTokenizerPreferenceBean();
      String string0 = baseQueryTokenizerPreferenceBean0.getStatementSeparator();
      assertEquals("--", baseQueryTokenizerPreferenceBean0.getLineComment());
      assertEquals(true, baseQueryTokenizerPreferenceBean0.isInstallCustomQueryTokenizer());
      assertEquals(";", string0);
      assertNotNull(string0);
      assertEquals(false, baseQueryTokenizerPreferenceBean0.isRemoveMultiLineComments());
      assertEquals("/", baseQueryTokenizerPreferenceBean0.getProcedureSeparator());
  }

  @Test
  public void test7()  throws Throwable  {
      BaseQueryTokenizerPreferenceBean baseQueryTokenizerPreferenceBean0 = new BaseQueryTokenizerPreferenceBean();
      String string0 = baseQueryTokenizerPreferenceBean0.getProcedureSeparator();
      assertEquals(true, baseQueryTokenizerPreferenceBean0.isInstallCustomQueryTokenizer());
      assertEquals(";", baseQueryTokenizerPreferenceBean0.getStatementSeparator());
      assertNotNull(string0);
      assertEquals("--", baseQueryTokenizerPreferenceBean0.getLineComment());
      assertEquals(false, baseQueryTokenizerPreferenceBean0.isRemoveMultiLineComments());
      assertEquals("/", string0);
  }

  @Test
  public void test8()  throws Throwable  {
      BaseQueryTokenizerPreferenceBean baseQueryTokenizerPreferenceBean0 = new BaseQueryTokenizerPreferenceBean();
      assertEquals(true, baseQueryTokenizerPreferenceBean0.isInstallCustomQueryTokenizer());
      
      baseQueryTokenizerPreferenceBean0.setInstallCustomQueryTokenizer(false);
      assertEquals(false, baseQueryTokenizerPreferenceBean0.isInstallCustomQueryTokenizer());
      assertEquals("/", baseQueryTokenizerPreferenceBean0.getProcedureSeparator());
  }

  @Test
  public void test9()  throws Throwable  {
      BaseQueryTokenizerPreferenceBean baseQueryTokenizerPreferenceBean0 = new BaseQueryTokenizerPreferenceBean();
      assertEquals(false, baseQueryTokenizerPreferenceBean0.isRemoveMultiLineComments());
      
      baseQueryTokenizerPreferenceBean0.setRemoveMultiLineComments(true);
      assertEquals(true, baseQueryTokenizerPreferenceBean0.isRemoveMultiLineComments());
      assertEquals("--", baseQueryTokenizerPreferenceBean0.getLineComment());
  }

  @Test
  public void test10()  throws Throwable  {
      BaseQueryTokenizerPreferenceBean baseQueryTokenizerPreferenceBean0 = new BaseQueryTokenizerPreferenceBean();
      boolean boolean0 = baseQueryTokenizerPreferenceBean0.isRemoveMultiLineComments();
      assertEquals(true, baseQueryTokenizerPreferenceBean0.isInstallCustomQueryTokenizer());
      assertEquals("/", baseQueryTokenizerPreferenceBean0.getProcedureSeparator());
      assertEquals(";", baseQueryTokenizerPreferenceBean0.getStatementSeparator());
      assertEquals(false, boolean0);
      assertEquals("--", baseQueryTokenizerPreferenceBean0.getLineComment());
  }

  @Test
  public void test11()  throws Throwable  {
      BaseQueryTokenizerPreferenceBean baseQueryTokenizerPreferenceBean0 = new BaseQueryTokenizerPreferenceBean();
      boolean boolean0 = baseQueryTokenizerPreferenceBean0.isInstallCustomQueryTokenizer();
      assertEquals("--", baseQueryTokenizerPreferenceBean0.getLineComment());
      assertEquals(";", baseQueryTokenizerPreferenceBean0.getStatementSeparator());
      assertEquals(true, boolean0);
      assertEquals("/", baseQueryTokenizerPreferenceBean0.getProcedureSeparator());
      assertEquals(false, baseQueryTokenizerPreferenceBean0.isRemoveMultiLineComments());
  }

  @Test
  public void test12()  throws Throwable  {
      BaseQueryTokenizerPreferenceBean baseQueryTokenizerPreferenceBean0 = new BaseQueryTokenizerPreferenceBean();
      assertEquals("/", baseQueryTokenizerPreferenceBean0.getProcedureSeparator());
      
      baseQueryTokenizerPreferenceBean0.setProcedureSeparator("");
      assertEquals(true, baseQueryTokenizerPreferenceBean0.isInstallCustomQueryTokenizer());
  }

  @Test
  public void test13()  throws Throwable  {
      BaseQueryTokenizerPreferenceBean baseQueryTokenizerPreferenceBean0 = new BaseQueryTokenizerPreferenceBean();
      baseQueryTokenizerPreferenceBean0.getClientName();
      assertEquals(false, baseQueryTokenizerPreferenceBean0.isRemoveMultiLineComments());
      assertEquals(true, baseQueryTokenizerPreferenceBean0.isInstallCustomQueryTokenizer());
      assertEquals("--", baseQueryTokenizerPreferenceBean0.getLineComment());
      assertEquals("/", baseQueryTokenizerPreferenceBean0.getProcedureSeparator());
      assertEquals(";", baseQueryTokenizerPreferenceBean0.getStatementSeparator());
  }

  @Test
  public void test14()  throws Throwable  {
      BaseQueryTokenizerPreferenceBean baseQueryTokenizerPreferenceBean0 = new BaseQueryTokenizerPreferenceBean();
      assertEquals("--", baseQueryTokenizerPreferenceBean0.getLineComment());
      
      baseQueryTokenizerPreferenceBean0.setLineComment("");
      assertEquals(true, baseQueryTokenizerPreferenceBean0.isInstallCustomQueryTokenizer());
  }
}
