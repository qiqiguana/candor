/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.dialects;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import net.sourceforge.squirrel_sql.fw.dialects.TeiidDialectExt;
import org.hibernate.HibernateException;
import org.hibernate.MappingException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TeiidDialectExtEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      TeiidDialectExt teiidDialectExt0 = new TeiidDialectExt();
      boolean boolean0 = teiidDialectExt0.supportsAutoIncrement();
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      TeiidDialectExt teiidDialectExt0 = new TeiidDialectExt();
      boolean boolean0 = teiidDialectExt0.supportsAddUniqueConstraint();
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      TeiidDialectExt teiidDialectExt0 = new TeiidDialectExt();
      boolean boolean0 = teiidDialectExt0.supportsMultipleRowInserts();
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      TeiidDialectExt teiidDialectExt0 = new TeiidDialectExt();
      boolean boolean0 = teiidDialectExt0.supportsAlterColumnNull();
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      TeiidDialectExt teiidDialectExt0 = new TeiidDialectExt();
      boolean boolean0 = teiidDialectExt0.supportsRenameColumn();
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      TeiidDialectExt teiidDialectExt0 = new TeiidDialectExt();
      boolean boolean0 = teiidDialectExt0.supportsUpdate();
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      TeiidDialectExt teiidDialectExt0 = new TeiidDialectExt();
      boolean boolean0 = teiidDialectExt0.supportsSequenceInformation();
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      TeiidDialectExt teiidDialectExt0 = new TeiidDialectExt();
      boolean boolean0 = teiidDialectExt0.supportsSchemasInTableDefinition();
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      TeiidDialectExt teiidDialectExt0 = new TeiidDialectExt();
      boolean boolean0 = teiidDialectExt0.supportsInsertInto();
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      TeiidDialectExt teiidDialectExt0 = new TeiidDialectExt();
      boolean boolean0 = teiidDialectExt0.supportsProduct("FabV&[Cw(PAG N\"T+P", "FabV&[Cw(PAG N\"T+P");
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      TeiidDialectExt teiidDialectExt0 = new TeiidDialectExt();
      boolean boolean0 = teiidDialectExt0.supportsDropPrimaryKey();
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      TeiidDialectExt teiidDialectExt0 = new TeiidDialectExt();
      boolean boolean0 = teiidDialectExt0.supportsSequence();
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      TeiidDialectExt teiidDialectExt0 = new TeiidDialectExt();
      boolean boolean0 = teiidDialectExt0.supportsRenameView();
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      TeiidDialectExt teiidDialectExt0 = new TeiidDialectExt();
      boolean boolean0 = teiidDialectExt0.supportsCorrelatedSubQuery();
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      TeiidDialectExt teiidDialectExt0 = new TeiidDialectExt();
      boolean boolean0 = teiidDialectExt0.supportsCheckOptionsForViews();
      assertEquals(false, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      TeiidDialectExt teiidDialectExt0 = new TeiidDialectExt();
      boolean boolean0 = teiidDialectExt0.supportsAlterColumnDefault();
      assertEquals(false, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      TeiidDialectExt teiidDialectExt0 = new TeiidDialectExt();
      boolean boolean0 = teiidDialectExt0.supportsCreateView();
      assertEquals(false, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      TeiidDialectExt teiidDialectExt0 = new TeiidDialectExt();
      boolean boolean0 = teiidDialectExt0.supportsAccessMethods();
      assertEquals(false, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      TeiidDialectExt teiidDialectExt0 = new TeiidDialectExt();
      boolean boolean0 = teiidDialectExt0.supportsDropConstraint();
      assertEquals(false, boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      TeiidDialectExt teiidDialectExt0 = new TeiidDialectExt();
      boolean boolean0 = teiidDialectExt0.supportsEmptyTables();
      assertEquals(false, boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      TeiidDialectExt teiidDialectExt0 = new TeiidDialectExt();
      boolean boolean0 = teiidDialectExt0.supportsCreateIndex();
      assertEquals(false, boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      TeiidDialectExt teiidDialectExt0 = new TeiidDialectExt();
      boolean boolean0 = teiidDialectExt0.supportsAlterSequence();
      assertEquals(false, boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      TeiidDialectExt teiidDialectExt0 = new TeiidDialectExt();
      boolean boolean0 = teiidDialectExt0.supportsCreateTable();
      assertEquals(false, boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      TeiidDialectExt teiidDialectExt0 = new TeiidDialectExt();
      boolean boolean0 = teiidDialectExt0.supportsColumnComment();
      assertEquals(false, boolean0);
  }

  @Test
  public void test24()  throws Throwable  {
      TeiidDialectExt teiidDialectExt0 = new TeiidDialectExt();
      boolean boolean0 = teiidDialectExt0.supportsAddForeignKeyConstraint();
      assertEquals(false, boolean0);
  }

  @Test
  public void test25()  throws Throwable  {
      TeiidDialectExt teiidDialectExt0 = new TeiidDialectExt();
      boolean boolean0 = teiidDialectExt0.supportsDropSequence();
      assertEquals(false, boolean0);
  }

  @Test
  public void test26()  throws Throwable  {
      TeiidDialectExt teiidDialectExt0 = new TeiidDialectExt();
      boolean boolean0 = teiidDialectExt0.supportsRenameTable();
      assertEquals(false, boolean0);
  }

  @Test
  public void test27()  throws Throwable  {
      TeiidDialectExt teiidDialectExt0 = new TeiidDialectExt();
      try {
        teiidDialectExt0.getTypeName(3, 0, 1023, (-1));
        fail("Expecting exception: MappingException");
      } catch(MappingException e) {
        /*
         * No Dialect mapping for JDBC type: 3
         */
      }
  }

  @Test
  public void test28()  throws Throwable  {
      TeiidDialectExt teiidDialectExt0 = new TeiidDialectExt();
      boolean boolean0 = teiidDialectExt0.supportsIndexes();
      assertEquals(false, boolean0);
  }

  @Test
  public void test29()  throws Throwable  {
      TeiidDialectExt teiidDialectExt0 = new TeiidDialectExt();
      boolean boolean0 = teiidDialectExt0.supportsDropView();
      assertEquals(false, boolean0);
  }

  @Test
  public void test30()  throws Throwable  {
      TeiidDialectExt teiidDialectExt0 = new TeiidDialectExt();
      boolean boolean0 = teiidDialectExt0.supportsAddPrimaryKey();
      assertEquals(false, boolean0);
  }

  @Test
  public void test31()  throws Throwable  {
      TeiidDialectExt teiidDialectExt0 = new TeiidDialectExt();
      boolean boolean0 = teiidDialectExt0.supportsTablespace();
      assertEquals(false, boolean0);
  }

  @Test
  public void test32()  throws Throwable  {
      TeiidDialectExt teiidDialectExt0 = new TeiidDialectExt();
      boolean boolean0 = teiidDialectExt0.supportsViewDefinition();
      assertEquals(false, boolean0);
  }

  @Test
  public void test33()  throws Throwable  {
      TeiidDialectExt teiidDialectExt0 = new TeiidDialectExt();
      boolean boolean0 = teiidDialectExt0.supportsAlterColumnType();
      assertEquals(false, boolean0);
  }

  @Test
  public void test34()  throws Throwable  {
      TeiidDialectExt teiidDialectExt0 = new TeiidDialectExt();
      boolean boolean0 = teiidDialectExt0.supportsSubSecondTimestamps();
      assertEquals(false, boolean0);
  }

  @Test
  public void test35()  throws Throwable  {
      TeiidDialectExt teiidDialectExt0 = new TeiidDialectExt();
      boolean boolean0 = teiidDialectExt0.supportsDropColumn();
      assertEquals(false, boolean0);
  }

  @Test
  public void test36()  throws Throwable  {
      TeiidDialectExt teiidDialectExt0 = new TeiidDialectExt();
      boolean boolean0 = teiidDialectExt0.supportsCreateSequence();
      assertEquals(false, boolean0);
  }

  @Test
  public void test37()  throws Throwable  {
      TeiidDialectExt teiidDialectExt0 = new TeiidDialectExt();
      boolean boolean0 = teiidDialectExt0.supportsAddColumn();
      assertEquals(false, boolean0);
  }

  @Test
  public void test38()  throws Throwable  {
      TeiidDialectExt teiidDialectExt0 = new TeiidDialectExt();
      boolean boolean0 = teiidDialectExt0.supportsDropIndex();
      assertEquals(false, boolean0);
  }
}
