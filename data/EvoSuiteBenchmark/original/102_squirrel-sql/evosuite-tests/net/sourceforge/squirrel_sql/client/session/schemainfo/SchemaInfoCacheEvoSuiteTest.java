/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.client.session.schemainfo;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import net.sourceforge.squirrel_sql.client.session.ExtendedColumnInfo;
import net.sourceforge.squirrel_sql.client.session.ISession;
import net.sourceforge.squirrel_sql.client.session.schemainfo.CaseInsensitiveString;
import net.sourceforge.squirrel_sql.client.session.schemainfo.SchemaInfoCache;
import net.sourceforge.squirrel_sql.fw.sql.IProcedureInfo;
import net.sourceforge.squirrel_sql.fw.sql.ITableInfo;
import net.sourceforge.squirrel_sql.fw.sql.TableColumnInfo;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SchemaInfoCacheEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SchemaInfoCache schemaInfoCache0 = new SchemaInfoCache();
      String[] stringArray0 = new String[5];
      schemaInfoCache0.writeSchemas(stringArray0);
  }

  @Test
  public void test1()  throws Throwable  {
      SchemaInfoCache schemaInfoCache0 = new SchemaInfoCache();
      TreeMap<CaseInsensitiveString, String> treeMap0 = schemaInfoCache0.getDataTypesForReadOnly();
      assertEquals(true, treeMap0.isEmpty());
  }

  @Test
  public void test2()  throws Throwable  {
      SchemaInfoCache schemaInfoCache0 = new SchemaInfoCache();
      TreeMap<CaseInsensitiveString, String> treeMap0 = schemaInfoCache0.getKeywordsForReadOnly();
      assertEquals(0, treeMap0.size());
  }

  @Test
  public void test3()  throws Throwable  {
      SchemaInfoCache schemaInfoCache0 = new SchemaInfoCache();
      List<ITableInfo> list0 = schemaInfoCache0.getITableInfosForReadOnly();
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test4()  throws Throwable  {
      SchemaInfoCache schemaInfoCache0 = new SchemaInfoCache();
      // Undeclared exception!
      try {
        schemaInfoCache0.loadSchemaIndependentMetaData();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      SchemaInfoCache schemaInfoCache0 = new SchemaInfoCache();
      List<String> list0 = schemaInfoCache0.getSchemasForReadOnly();
      assertEquals(0, list0.size());
  }

  @Test
  public void test6()  throws Throwable  {
      SchemaInfoCache schemaInfoCache0 = new SchemaInfoCache();
      CaseInsensitiveString caseInsensitiveString0 = new CaseInsensitiveString();
      List<ExtendedColumnInfo> list0 = schemaInfoCache0.getExtendedColumnInfosForReadOnly(caseInsensitiveString0);
      assertNull(list0);
  }

  @Test
  public void test7()  throws Throwable  {
      SchemaInfoCache schemaInfoCache0 = new SchemaInfoCache();
      CaseInsensitiveString caseInsensitiveString0 = new CaseInsensitiveString("Te#U.");
      schemaInfoCache0.writeColumsNotAccessible((Throwable) null, caseInsensitiveString0);
      assertEquals("Te#U.", caseInsensitiveString0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      SchemaInfoCache schemaInfoCache0 = new SchemaInfoCache();
      // Undeclared exception!
      try {
        schemaInfoCache0.setSession((ISession) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      SchemaInfoCache schemaInfoCache0 = new SchemaInfoCache();
      // Undeclared exception!
      try {
        schemaInfoCache0.getSchemaNameLoadInfo();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      SchemaInfoCache schemaInfoCache0 = new SchemaInfoCache();
      CaseInsensitiveString caseInsensitiveString0 = new CaseInsensitiveString();
      boolean boolean0 = schemaInfoCache0.didTryLoadingColumns(caseInsensitiveString0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      SchemaInfoCache schemaInfoCache0 = new SchemaInfoCache();
      Hashtable<CaseInsensitiveString, String> hashtable0 = new Hashtable<CaseInsensitiveString, String>();
      schemaInfoCache0.writeKeywords(hashtable0);
      assertEquals(true, hashtable0.isEmpty());
  }

  @Test
  public void test12()  throws Throwable  {
      SchemaInfoCache schemaInfoCache0 = new SchemaInfoCache();
      Hashtable<CaseInsensitiveString, String> hashtable0 = new Hashtable<CaseInsensitiveString, String>();
      schemaInfoCache0.writeDataTypes(hashtable0);
      assertEquals(true, hashtable0.isEmpty());
  }

  @Test
  public void test13()  throws Throwable  {
      SchemaInfoCache schemaInfoCache0 = new SchemaInfoCache();
      Map<CaseInsensitiveString, String> map0 = schemaInfoCache0.getProcedureNamesForReadOnly();
      assertEquals(true, map0.isEmpty());
  }

  @Test
  public void test14()  throws Throwable  {
      SchemaInfoCache schemaInfoCache0 = new SchemaInfoCache();
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[2];
      CaseInsensitiveString caseInsensitiveString0 = new CaseInsensitiveString("");
      // Undeclared exception!
      try {
        schemaInfoCache0.writeColumsToCache(tableColumnInfoArray0, caseInsensitiveString0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test15()  throws Throwable  {
      SchemaInfoCache schemaInfoCache0 = new SchemaInfoCache();
      // Undeclared exception!
      try {
        schemaInfoCache0.getMatchingSchemaLoadInfos((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test16()  throws Throwable  {
      SchemaInfoCache schemaInfoCache0 = new SchemaInfoCache();
      Hashtable<CaseInsensitiveString, String> hashtable0 = new Hashtable<CaseInsensitiveString, String>();
      schemaInfoCache0.writeFunctions(hashtable0);
      assertEquals(0, hashtable0.size());
  }

  @Test
  public void test17()  throws Throwable  {
      SchemaInfoCache schemaInfoCache0 = new SchemaInfoCache();
      List<String> list0 = schemaInfoCache0.getCatalogsForReadOnly();
      assertEquals(0, list0.size());
  }

  @Test
  public void test18()  throws Throwable  {
      SchemaInfoCache schemaInfoCache0 = new SchemaInfoCache();
      Map<CaseInsensitiveString, List<ExtendedColumnInfo>> map0 = schemaInfoCache0.getExtColumnInfosByColumnNameForReadOnly();
      assertEquals(true, map0.isEmpty());
  }

  @Test
  public void test19()  throws Throwable  {
      SchemaInfoCache schemaInfoCache0 = new SchemaInfoCache();
      // Undeclared exception!
      try {
        schemaInfoCache0.writeToTableCache((ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test20()  throws Throwable  {
      SchemaInfoCache schemaInfoCache0 = new SchemaInfoCache();
      Map<CaseInsensitiveString, String> map0 = schemaInfoCache0.getFunctionsForReadOnly();
      assertEquals(true, map0.isEmpty());
  }

  @Test
  public void test21()  throws Throwable  {
      SchemaInfoCache schemaInfoCache0 = new SchemaInfoCache();
      schemaInfoCache0.clearAllTableData();
  }

  @Test
  public void test22()  throws Throwable  {
      SchemaInfoCache schemaInfoCache0 = new SchemaInfoCache();
      schemaInfoCache0.initialLoadDone();
  }

  @Test
  public void test23()  throws Throwable  {
      SchemaInfoCache schemaInfoCache0 = new SchemaInfoCache();
      Map<IProcedureInfo, IProcedureInfo> map0 = schemaInfoCache0.getIProcedureInfosForReadOnly();
      assertEquals(0, map0.size());
  }

  @Test
  public void test24()  throws Throwable  {
      SchemaInfoCache schemaInfoCache0 = new SchemaInfoCache();
      String[] stringArray0 = new String[9];
      schemaInfoCache0.writeCatalogs(stringArray0);
  }

  @Test
  public void test25()  throws Throwable  {
      SchemaInfoCache schemaInfoCache0 = new SchemaInfoCache();
      Hashtable<CaseInsensitiveString, List<ITableInfo>> hashtable0 = schemaInfoCache0.getTableInfosBySimpleNameForReadOnly();
      assertEquals(true, hashtable0.isEmpty());
  }

  @Test
  public void test26()  throws Throwable  {
      SchemaInfoCache schemaInfoCache0 = new SchemaInfoCache();
      Map<CaseInsensitiveString, String> map0 = schemaInfoCache0.getTableNamesForReadOnly();
      assertEquals(0, map0.size());
  }

  @Test
  public void test27()  throws Throwable  {
      SchemaInfoCache schemaInfoCache0 = new SchemaInfoCache();
      // Undeclared exception!
      try {
        schemaInfoCache0.getMatchingSchemaLoadInfos("&GH|9");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Null 'type' argument";
      stringArray0[1] = "Null 'type' argument";
      stringArray0[2] = "Null 'type' argument";
      stringArray0[3] = "Null 'type' argument";
      stringArray0[4] = "Null 'type' argument";
      boolean boolean0 = SchemaInfoCache.containsType(stringArray0, "b");
      assertEquals(false, boolean0);
  }

  @Test
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "D";
      boolean boolean0 = SchemaInfoCache.containsType(stringArray0, "D");
      assertEquals(true, boolean0);
  }

  @Test
  public void test30()  throws Throwable  {
      SchemaInfoCache schemaInfoCache0 = new SchemaInfoCache();
      String[] stringArray0 = new String[26];
      schemaInfoCache0.clearTables("&GH|9", "&GH|9", "&GH|9", stringArray0);
  }

  @Test
  public void test31()  throws Throwable  {
      SchemaInfoCache schemaInfoCache0 = new SchemaInfoCache();
      schemaInfoCache0.clearStoredProcedures("Qev#-xw;k/yf", "Qev#-xw;k/yf", "Qev#-xw;k/yf");
  }

  @Test
  public void test32()  throws Throwable  {
      SchemaInfoCache schemaInfoCache0 = new SchemaInfoCache();
      schemaInfoCache0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM();
  }
}
