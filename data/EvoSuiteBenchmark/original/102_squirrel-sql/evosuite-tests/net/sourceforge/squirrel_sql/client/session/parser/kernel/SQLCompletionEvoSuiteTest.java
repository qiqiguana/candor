/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.client.session.parser.kernel;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.SQLCompletion;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.completions.SQLColumn;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.completions.SQLModifyingStatement;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.completions.SQLSelectStatement;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.completions.SQLStatement;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.completions.SQLStatementContext;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.completions.SQLTable;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.completions.SQLWhere;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SQLCompletionEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(0);
      // Undeclared exception!
      try {
        sQLSelectStatement0.getText(0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * completion not available
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(1);
      boolean boolean0 = sQLSelectStatement0.isRepeatable();
      assertEquals(false, boolean0);
      assertEquals(99999, sQLSelectStatement0.getLength());
  }

  @Test
  public void test2()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(0);
      SQLTable sQLTable0 = new SQLTable((SQLStatement) sQLSelectStatement0, (-17));
      int int0 = sQLTable0.getLength();
      assertEquals(100017, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      SQLColumn sQLColumn0 = new SQLColumn((SQLStatementContext) null, 0, (-487));
      SQLColumn sQLColumn1 = (SQLColumn)sQLColumn0.getCompletion(0);
      assertNull(sQLColumn1);
      assertEquals(-486, sQLColumn0.getLength());
  }

  @Test
  public void test4()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(0);
      int int0 = sQLSelectStatement0.getStart();
      assertEquals(0, int0);
      assertEquals(100000, sQLSelectStatement0.getLength());
  }

  @Test
  public void test5()  throws Throwable  {
      SQLCompletion.ChildComparator sQLCompletion_ChildComparator0 = new SQLCompletion.ChildComparator();
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(0);
      SQLColumn sQLColumn0 = new SQLColumn((SQLStatementContext) sQLSelectStatement0, 0);
      int int0 = sQLCompletion_ChildComparator0.compare((SQLCompletion) sQLSelectStatement0, (SQLCompletion) sQLColumn0);
      assertEquals(100000, sQLSelectStatement0.getLength());
      assertEquals((-1), int0);
  }

  @Test
  public void test6()  throws Throwable  {
      SQLModifyingStatement sQLModifyingStatement0 = new SQLModifyingStatement(0);
      // Undeclared exception!
      try {
        sQLModifyingStatement0.getText(0, "UIC.`4aY.g");
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * completion not available
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      SQLModifyingStatement sQLModifyingStatement0 = new SQLModifyingStatement(0);
      SQLColumn sQLColumn0 = new SQLColumn((SQLStatementContext) sQLModifyingStatement0);
      boolean boolean0 = sQLColumn0.hasTextPosition();
      assertEquals(100000, sQLModifyingStatement0.getLength());
      assertEquals(false, boolean0);
      assertEquals(100001, sQLColumn0.getLength());
      assertEquals(true, sQLModifyingStatement0.hasTextPosition());
  }

  @Test
  public void test8()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(1);
      boolean boolean0 = sQLSelectStatement0.mustReplace(1);
      assertEquals(false, boolean0);
      assertEquals(99999, sQLSelectStatement0.getLength());
  }

  @Test
  public void test9()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(0);
      SQLTable sQLTable0 = new SQLTable((SQLStatement) sQLSelectStatement0, (-17));
      SQLTable sQLTable1 = (SQLTable)sQLTable0.getCompletion(1291);
      assertEquals(100017, sQLTable0.getLength());
      assertNotNull(sQLTable1);
      assertEquals(-17, sQLTable1.getStart());
  }

  @Test
  public void test10()  throws Throwable  {
      SQLModifyingStatement sQLModifyingStatement0 = new SQLModifyingStatement(0);
      SQLWhere sQLWhere0 = new SQLWhere((SQLStatement) sQLModifyingStatement0, 0);
      boolean boolean0 = sQLWhere0.hasTextPosition();
      assertEquals(100000, sQLModifyingStatement0.getLength());
      assertEquals(true, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(1);
      assertEquals(99999, sQLSelectStatement0.getLength());
      
      sQLSelectStatement0.setSelectListEnd((-1));
      boolean boolean0 = sQLSelectStatement0.hasTextPosition();
      assertEquals(-1, sQLSelectStatement0.getLength());
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      SQLTable sQLTable0 = new SQLTable((SQLStatement) null, 1, 13);
      SQLTable sQLTable1 = (SQLTable)sQLTable0.getCompletion((-1834));
      assertEquals(13, sQLTable0.getLength());
      assertNull(sQLTable1);
  }

  @Test
  public void test13()  throws Throwable  {
      SQLCompletion.ChildComparator sQLCompletion_ChildComparator0 = new SQLCompletion.ChildComparator();
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(0);
      int int0 = sQLCompletion_ChildComparator0.compare((SQLCompletion) sQLSelectStatement0, (SQLCompletion) sQLSelectStatement0);
      assertEquals(100000, sQLSelectStatement0.getLength());
      assertEquals(true, sQLSelectStatement0.isConcrete());
      assertEquals(0, int0);
  }

  @Test
  public void test14()  throws Throwable  {
      SQLCompletion.ChildComparator sQLCompletion_ChildComparator0 = new SQLCompletion.ChildComparator();
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(0);
      SQLTable sQLTable0 = new SQLTable((SQLStatement) sQLSelectStatement0, (-17));
      int int0 = sQLCompletion_ChildComparator0.compare((SQLCompletion) sQLTable0, (SQLCompletion) sQLSelectStatement0);
      assertEquals(100017, sQLTable0.getLength());
      assertEquals(1, int0);
  }
}
