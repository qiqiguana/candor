/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.client.session.parser.kernel.completions;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.completions.SQLColumn;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.completions.SQLModifyingStatement;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.completions.SQLStatement;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.completions.SQLStatementContext;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.completions.SQLTable;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SQLModifyingStatementEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SQLModifyingStatement sQLModifyingStatement0 = new SQLModifyingStatement(473);
      sQLModifyingStatement0.setUpdateListEnd(473);
      assertEquals(99527, sQLModifyingStatement0.getLength());
  }

  @Test
  public void test1()  throws Throwable  {
      SQLModifyingStatement sQLModifyingStatement0 = new SQLModifyingStatement((-1080));
      SQLTable sQLTable0 = new SQLTable((SQLStatement) sQLModifyingStatement0, (-1080), (-1080));
      // Undeclared exception!
      try {
        sQLModifyingStatement0.setTable(sQLTable0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      SQLModifyingStatement sQLModifyingStatement0 = new SQLModifyingStatement((-307));
      SQLTable sQLTable0 = new SQLTable((SQLStatement) sQLModifyingStatement0, (-307), (-307));
      sQLModifyingStatement0.addTable(sQLTable0);
      // Undeclared exception!
      try {
        sQLModifyingStatement0.getTables((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      SQLModifyingStatement sQLModifyingStatement0 = new SQLModifyingStatement(473);
      // Undeclared exception!
      try {
        sQLModifyingStatement0.getTable();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      SQLModifyingStatement sQLModifyingStatement0 = new SQLModifyingStatement(473);
      sQLModifyingStatement0.setUpdateListStart(473);
      assertEquals(473, sQLModifyingStatement0.getStart());
  }

  @Test
  public void test5()  throws Throwable  {
      SQLModifyingStatement sQLModifyingStatement0 = new SQLModifyingStatement((-550));
      // Undeclared exception!
      try {
        sQLModifyingStatement0.getTables("dot!.sequences", "dot!.sequences", "dot!.sequences");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      SQLModifyingStatement sQLModifyingStatement0 = new SQLModifyingStatement((-1396));
      // Undeclared exception!
      try {
        sQLModifyingStatement0.getTables((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      SQLModifyingStatement sQLModifyingStatement0 = new SQLModifyingStatement((-1));
      SQLModifyingStatement sQLModifyingStatement1 = new SQLModifyingStatement((-1));
      sQLModifyingStatement0.addContext((SQLStatementContext) sQLModifyingStatement1);
      SQLColumn sQLColumn0 = (SQLColumn)sQLModifyingStatement0.getCompletion((-1));
      assertEquals(false, sQLColumn0.isRepeatable());
      assertNotNull(sQLColumn0);
      assertEquals(-1, sQLColumn0.getStart());
  }

  @Test
  public void test8()  throws Throwable  {
      SQLModifyingStatement sQLModifyingStatement0 = new SQLModifyingStatement((-1080));
      SQLColumn sQLColumn0 = (SQLColumn)sQLModifyingStatement0.getCompletion((-1080));
      assertNull(sQLColumn0);
  }

  @Test
  public void test9()  throws Throwable  {
      SQLModifyingStatement sQLModifyingStatement0 = new SQLModifyingStatement(473);
      SQLColumn sQLColumn0 = (SQLColumn)sQLModifyingStatement0.getCompletion(473);
      assertNull(sQLColumn0);
  }
}
