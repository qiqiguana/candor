/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.xml;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.File;
import java.io.IOException;
import java.util.Iterator;
import java.util.ListIterator;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.swing.JInternalFrame;
import javax.swing.JTable;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import net.sourceforge.squirrel_sql.fw.gui.WindowState;
import net.sourceforge.squirrel_sql.fw.util.FileWrapper;
import net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl;
import net.sourceforge.squirrel_sql.fw.xml.XMLBeanWriter;
import net.sourceforge.squirrel_sql.fw.xml.XMLException;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class XMLBeanWriterEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          JInternalFrame jInternalFrame0 = new JInternalFrame("%d-tN \"LS_7<'Uc", true);
          WindowState windowState0 = new WindowState(jInternalFrame0);
          XMLBeanWriter xMLBeanWriter0 = new XMLBeanWriter((Object) windowState0);
          assertNotNull(xMLBeanWriter0);
          
          FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("%d-tN \"LS_7<'Uc", "%d-tN \"LS_7<'Uc");
          // Undeclared exception!
          try {
            xMLBeanWriter0.save((FileWrapper) fileWrapperImpl0);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission %d-tN \"LS_7<'Uc/%d-tN \"LS_7<'Uc write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:183)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:145)
             * net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl.getFileOutputStream(FileWrapperImpl.java:707)
             * net.sourceforge.squirrel_sql.fw.xml.XMLBeanWriter.save(XMLBeanWriter.java:84)
             * sun.reflect.GeneratedMethodAccessor172.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
      XMLBeanWriter xMLBeanWriter0 = new XMLBeanWriter();
      // Undeclared exception!
      try {
        xMLBeanWriter0.save((File) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * name can't be null
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      XMLBeanWriter xMLBeanWriter0 = new XMLBeanWriter();
      xMLBeanWriter0.addToRoot((Object) xMLBeanWriter0);
      assertEquals("<Beans>\n    <Bean Class=\"net.sourceforge.squirrel_sql.fw.xml.XMLBeanWriter\">\n        <asString>&lt;Beans/&gt;\n</asString>\n    </Bean>\n</Beans>\n", xMLBeanWriter0.getAsString());
  }

  @Test
  public void test3()  throws Throwable  {
      XMLBeanWriter xMLBeanWriter0 = new XMLBeanWriter();
      // Undeclared exception!
      try {
        xMLBeanWriter0.save((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * name can't be null
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      XMLBeanWriter xMLBeanWriter0 = new XMLBeanWriter();
      Object[] objectArray0 = new Object[9];
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, 600);
      Vector<Object> vector0 = defaultTableModel0.getDataVector();
      ListIterator<Integer> listIterator0 = vector0.listIterator();
      xMLBeanWriter0.addIteratorToRoot((Iterator) listIterator0);
  }

  @Test
  public void test5()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTable jTable0 = new JTable((TableModel) defaultTableModel0, (TableColumnModel) defaultTableColumnModel0);
      XMLBeanWriter xMLBeanWriter0 = null;
      try {
        xMLBeanWriter0 = new XMLBeanWriter((Object) defaultTableModel0);
        fail("Expecting exception: XMLException");
      } catch(XMLException e) {
        /*
         * java.lang.IllegalAccessException: Class net.sourceforge.squirrel_sql.fw.xml.XMLBeanWriter can not access a member of class javax.swing.JTable$AccessibleJTable$AccessibleTableHeader with modifiers \"public\"
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      XMLBeanWriter xMLBeanWriter0 = new XMLBeanWriter((Object) defaultTableModel0);
      assertEquals("<Beans>\n    <Bean Class=\"javax.swing.table.DefaultTableModel\">\n        <columnCount>0</columnCount>\n        <dataVector Class=\"java.util.Vector\">\n            <empty>true</empty>\n        </dataVector>\n        <rowCount>0</rowCount>\n        <tableModelListeners Indexed=\"true\"/>\n    </Bean>\n</Beans>\n", xMLBeanWriter0.getAsString());
      assertNotNull(xMLBeanWriter0);
  }
}
