/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.datasetviewer;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;
import java.util.Properties;
import net.sourceforge.squirrel_sql.fw.datasetviewer.DataSetDefinition;
import net.sourceforge.squirrel_sql.fw.datasetviewer.DataSetException;
import net.sourceforge.squirrel_sql.fw.datasetviewer.FilterDataSet;
import net.sourceforge.squirrel_sql.fw.datasetviewer.HashtableDataSet;
import net.sourceforge.squirrel_sql.fw.datasetviewer.IDataSet;
import net.sourceforge.squirrel_sql.fw.util.IMessageHandler;
import net.sourceforge.squirrel_sql.fw.util.ListMessageHandler;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class FilterDataSetEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Properties properties0 = new Properties();
      HashtableDataSet hashtableDataSet0 = new HashtableDataSet(properties0);
      Hashtable<Integer, Map<String, String>> hashtable0 = new Hashtable<Integer, Map<String, String>>();
      FilterDataSet filterDataSet0 = new FilterDataSet((IDataSet) hashtableDataSet0, (Map<Integer, Map<String, String>>) hashtable0);
      DataSetDefinition dataSetDefinition0 = filterDataSet0.getDataSetDefinition();
      assertNotNull(dataSetDefinition0);
  }

  @Test
  public void test1()  throws Throwable  {
      Properties properties0 = new Properties();
      HashtableDataSet hashtableDataSet0 = new HashtableDataSet(properties0);
      Hashtable<Integer, Map<String, String>> hashtable0 = new Hashtable<Integer, Map<String, String>>();
      FilterDataSet filterDataSet0 = new FilterDataSet((IDataSet) hashtableDataSet0, (Map<Integer, Map<String, String>>) hashtable0);
      int int0 = filterDataSet0.getColumnCount();
      assertEquals(2, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      Properties properties0 = new Properties();
      properties0.put((Object) "delete-next", (Object) "delete-next");
      HashtableDataSet hashtableDataSet0 = new HashtableDataSet(properties0);
      Hashtable<Integer, Map<String, String>> hashtable0 = new Hashtable<Integer, Map<String, String>>();
      FilterDataSet filterDataSet0 = new FilterDataSet((IDataSet) hashtableDataSet0, (Map<Integer, Map<String, String>>) hashtable0);
      ListMessageHandler listMessageHandler0 = new ListMessageHandler();
      filterDataSet0.next((IMessageHandler) listMessageHandler0);
      String string0 = (String)filterDataSet0.get(0);
      assertEquals("delete-next", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      Properties properties0 = new Properties();
      HashtableDataSet hashtableDataSet0 = new HashtableDataSet(properties0);
      Hashtable<Integer, Map<String, String>> hashtable0 = new Hashtable<Integer, Map<String, String>>();
      FilterDataSet filterDataSet0 = new FilterDataSet((IDataSet) hashtableDataSet0, (Map<Integer, Map<String, String>>) hashtable0);
      Object object0 = filterDataSet0.get(0);
      assertNull(object0);
  }

  @Test
  public void test4()  throws Throwable  {
      Properties properties0 = new Properties();
      properties0.put((Object) "delete-next", (Object) "delete-next");
      HashtableDataSet hashtableDataSet0 = new HashtableDataSet(properties0);
      Hashtable<Integer, Map<String, String>> hashtable0 = new Hashtable<Integer, Map<String, String>>();
      FilterDataSet filterDataSet0 = new FilterDataSet((IDataSet) hashtableDataSet0, (Map<Integer, Map<String, String>>) hashtable0);
      ListMessageHandler listMessageHandler0 = new ListMessageHandler();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashtable0.put((Integer) 0, (Map<String, String>) hashMap0);
      filterDataSet0.next((IMessageHandler) listMessageHandler0);
      String string0 = (String)filterDataSet0.get(0);
      assertEquals("delete-next", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      Properties properties0 = new Properties();
      properties0.put((Object) "delete-next", (Object) "delete-next");
      HashtableDataSet hashtableDataSet0 = new HashtableDataSet(properties0);
      Hashtable<Integer, Map<String, String>> hashtable0 = new Hashtable<Integer, Map<String, String>>();
      FilterDataSet filterDataSet0 = new FilterDataSet((IDataSet) hashtableDataSet0, (Map<Integer, Map<String, String>>) hashtable0);
      ListMessageHandler listMessageHandler0 = new ListMessageHandler();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashtable0.put((Integer) 0, (Map<String, String>) hashMap0);
      filterDataSet0.next((IMessageHandler) listMessageHandler0);
      hashMap0.put("delete-next", "delete-next");
      String string0 = (String)filterDataSet0.get(0);
      assertEquals("delete-next", string0);
  }
}
