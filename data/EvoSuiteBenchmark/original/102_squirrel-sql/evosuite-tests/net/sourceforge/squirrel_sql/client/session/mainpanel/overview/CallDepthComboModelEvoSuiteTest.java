/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.client.session.mainpanel.overview;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import net.sourceforge.squirrel_sql.client.session.mainpanel.overview.CallDepthComboModel;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class CallDepthComboModelEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      CallDepthComboModel callDepthComboModel0 = new CallDepthComboModel(88);
      int int0 = callDepthComboModel0.hashCode();
      assertEquals(88, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      CallDepthComboModel callDepthComboModel0 = new CallDepthComboModel(0);
      String string0 = callDepthComboModel0.toString();
      assertNotNull(string0);
      assertEquals("1", string0);
      assertEquals(0, callDepthComboModel0.getCallDepth());
  }

  @Test
  public void test2()  throws Throwable  {
      CallDepthComboModel callDepthComboModel0 = new CallDepthComboModel(0);
      int int0 = callDepthComboModel0.getCallDepth();
      assertEquals(0, int0);
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          CallDepthComboModel callDepthComboModel0 = new CallDepthComboModel(0);
          // Undeclared exception!
          try {
            CallDepthComboModel.saveSelection(callDepthComboModel0);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.lang.RuntimePermission preferences)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.util.prefs.Preferences.userRoot(Preferences.java:432)
             * net.sourceforge.squirrel_sql.client.session.mainpanel.overview.CallDepthComboModel.saveSelection(CallDepthComboModel.java:76)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
      CallDepthComboModel[] callDepthComboModelArray0 = CallDepthComboModel.createModels();
      assertNotNull(callDepthComboModelArray0);
  }

  @Test
  public void test5()  throws Throwable  {
      CallDepthComboModel callDepthComboModel0 = new CallDepthComboModel(0);
      boolean boolean0 = callDepthComboModel0.equals((Object) "1");
      assertEquals(false, boolean0);
      assertEquals(0, callDepthComboModel0.getCallDepth());
  }

  @Test
  public void test6()  throws Throwable  {
      CallDepthComboModel callDepthComboModel0 = new CallDepthComboModel(88);
      boolean boolean0 = callDepthComboModel0.equals((Object) null);
      assertEquals(false, boolean0);
      assertEquals(88, callDepthComboModel0.getCallDepth());
  }

  @Test
  public void test7()  throws Throwable  {
      CallDepthComboModel callDepthComboModel0 = new CallDepthComboModel(0);
      CallDepthComboModel callDepthComboModel1 = new CallDepthComboModel(0);
      boolean boolean0 = callDepthComboModel0.equals((Object) callDepthComboModel1);
      assertEquals(0, callDepthComboModel1.getCallDepth());
      assertEquals(true, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      CallDepthComboModel callDepthComboModel0 = new CallDepthComboModel(88);
      CallDepthComboModel callDepthComboModel1 = new CallDepthComboModel((-1673));
      boolean boolean0 = callDepthComboModel0.equals((Object) callDepthComboModel1);
      assertEquals(-1673, callDepthComboModel1.getCallDepth());
      assertEquals(false, boolean0);
      assertFalse(callDepthComboModel1.equals(callDepthComboModel0));
  }
}
