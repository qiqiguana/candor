/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.gui;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.awt.Component;
import java.awt.Font;
import java.awt.event.MouseEvent;
import java.awt.event.MouseWheelEvent;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.swing.Action;
import javax.swing.JButton;
import javax.swing.JMenu;
import javax.swing.JTable;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuDragMouseEvent;
import javax.swing.plaf.FontUIResource;
import javax.swing.table.TableModel;
import javax.swing.text.DefaultEditorKit;
import net.sourceforge.squirrel_sql.fw.gui.ButtonTableHeader;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.jfree.data.xy.XYDatasetTableModel;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ButtonTableHeaderEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      ButtonTableHeader buttonTableHeader0 = new ButtonTableHeader();
      assertNotNull(buttonTableHeader0);
      
      int int0 = buttonTableHeader0.getCurrentlySortedColumnIdx();
      assertEquals((-1), int0);
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          // Undeclared exception!
          try {
            ButtonTableHeader.setAlwaysAdjustAllColWidths(true);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.lang.RuntimePermission preferences)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.util.prefs.Preferences.userRoot(Preferences.java:432)
             * net.sourceforge.squirrel_sql.fw.gui.ButtonTableHeader.setAlwaysAdjustAllColWidths(ButtonTableHeader.java:272)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          ButtonTableHeader buttonTableHeader0 = new ButtonTableHeader();
          assertNotNull(buttonTableHeader0);
          
          // Undeclared exception!
          try {
            buttonTableHeader0.initColWidths();
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.lang.RuntimePermission preferences)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.util.prefs.Preferences.userRoot(Preferences.java:432)
             * net.sourceforge.squirrel_sql.fw.gui.ButtonTableHeader.isAlwaysAdjustAllColWidths(ButtonTableHeader.java:267)
             * net.sourceforge.squirrel_sql.fw.gui.ButtonTableHeader.initColWidths(ButtonTableHeader.java:277)
             * sun.reflect.GeneratedMethodAccessor385.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
      ButtonTableHeader buttonTableHeader0 = new ButtonTableHeader();
      assertNotNull(buttonTableHeader0);
      
      ButtonTableHeader.HeaderListener buttonTableHeader_HeaderListener0 = buttonTableHeader0.new HeaderListener();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent((Component) buttonTableHeader0, 1, 1000L, 0, 0, (-167), 0, (-167), (-167), true, 0, (-167), 337);
      buttonTableHeader_HeaderListener0.mouseMoved((MouseEvent) mouseWheelEvent0);
      assertEquals(-1, buttonTableHeader0.getCurrentlySortedColumnIdx());
  }

  @Test
  public void test4()  throws Throwable  {
      ButtonTableHeader buttonTableHeader0 = new ButtonTableHeader();
      assertNotNull(buttonTableHeader0);
      
      buttonTableHeader0.setTable((JTable) null);
      assertEquals(-1, buttonTableHeader0.getCurrentlySortedColumnIdx());
  }

  @Test
  public void test5()  throws Throwable  {
      ButtonTableHeader buttonTableHeader0 = new ButtonTableHeader();
      assertNotNull(buttonTableHeader0);
      
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent((Component) buttonTableHeader0, 7, (long) 7, 7, 7, 7, 7, 7, 7, false, 13, 7, 13);
      String string0 = buttonTableHeader0.getToolTipText((MouseEvent) mouseWheelEvent0);
      assertNull(string0);
      assertEquals(-1, buttonTableHeader0.getCurrentlySortedColumnIdx());
  }

  @Test
  public void test6()  throws Throwable  {
      ButtonTableHeader buttonTableHeader0 = new ButtonTableHeader();
      assertNotNull(buttonTableHeader0);
      
      boolean boolean0 = buttonTableHeader0.isAscending();
      assertEquals(false, boolean0);
      assertEquals(-1, buttonTableHeader0.getCurrentlySortedColumnIdx());
  }

  @Test
  public void test7()  throws Throwable  {
      ButtonTableHeader buttonTableHeader0 = new ButtonTableHeader();
      assertNotNull(buttonTableHeader0);
      
      buttonTableHeader0.columnIndexWillBeRemoved(0);
      assertEquals(-1, buttonTableHeader0.getCurrentlySortedColumnIdx());
  }

  @Test
  public void test8()  throws Throwable  {
      ButtonTableHeader buttonTableHeader0 = new ButtonTableHeader();
      assertNotNull(buttonTableHeader0);
      
      buttonTableHeader0.columnIndexWillBeRemoved((-26));
      assertEquals(-2, buttonTableHeader0.getCurrentlySortedColumnIdx());
  }

  @Test
  public void test9()  throws Throwable  {
      ButtonTableHeader buttonTableHeader0 = new ButtonTableHeader();
      assertNotNull(buttonTableHeader0);
      
      buttonTableHeader0.columnIndexWillBeRemoved((-1));
      assertEquals(-1, buttonTableHeader0.getCurrentlySortedColumnIdx());
  }

  @Test
  public void test10()  throws Throwable  {
      ButtonTableHeader buttonTableHeader0 = new ButtonTableHeader();
      assertNotNull(buttonTableHeader0);
      
      buttonTableHeader0.columnIndexWillBeAdded(0);
      assertEquals(-1, buttonTableHeader0.getCurrentlySortedColumnIdx());
  }

  @Test
  public void test11()  throws Throwable  {
      ButtonTableHeader buttonTableHeader0 = new ButtonTableHeader();
      assertNotNull(buttonTableHeader0);
      
      buttonTableHeader0.columnIndexWillBeAdded((-571));
      assertEquals(0, buttonTableHeader0.getCurrentlySortedColumnIdx());
  }

  @Test
  public void test12()  throws Throwable  {
      ButtonTableHeader buttonTableHeader0 = new ButtonTableHeader();
      assertNotNull(buttonTableHeader0);
      
      ButtonTableHeader.HeaderListener buttonTableHeader_HeaderListener0 = buttonTableHeader0.new HeaderListener();
      MenuElement[] menuElementArray0 = new MenuElement[3];
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      JTable jTable0 = new JTable((TableModel) xYDatasetTableModel0);
      buttonTableHeader0.setTable(jTable0);
      MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent((Component) buttonTableHeader0, 0, (long) 0, 0, 185, 0, 0, 185, 0, false, menuElementArray0, (MenuSelectionManager) null);
      buttonTableHeader_HeaderListener0.mousePressed((MouseEvent) menuDragMouseEvent0);
      assertEquals(-1, buttonTableHeader0.getCurrentlySortedColumnIdx());
  }

  @Test
  public void test13()  throws Throwable  {
      ButtonTableHeader buttonTableHeader0 = new ButtonTableHeader();
      assertNotNull(buttonTableHeader0);
      
      ButtonTableHeader.HeaderListener buttonTableHeader_HeaderListener0 = buttonTableHeader0.new HeaderListener();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent((Component) buttonTableHeader0, 1305, (long) 1305, 176, 1305, 176, 1305, true, 176, 176, 1305);
      buttonTableHeader_HeaderListener0.mouseClicked((MouseEvent) mouseWheelEvent0);
      assertEquals(-1, buttonTableHeader0.getCurrentlySortedColumnIdx());
  }

  @Test
  public void test14()  throws Throwable  {
      ButtonTableHeader buttonTableHeader0 = new ButtonTableHeader();
      assertNotNull(buttonTableHeader0);
      
      ButtonTableHeader.HeaderListener buttonTableHeader_HeaderListener0 = buttonTableHeader0.new HeaderListener();
      // Undeclared exception!
      try {
        buttonTableHeader_HeaderListener0.mouseReleased((MouseEvent) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test15()  throws Throwable  {
      ButtonTableHeader buttonTableHeader0 = new ButtonTableHeader();
      assertNotNull(buttonTableHeader0);
      
      ButtonTableHeader.HeaderListener buttonTableHeader_HeaderListener0 = buttonTableHeader0.new HeaderListener();
      buttonTableHeader_HeaderListener0.mouseDragged((MouseEvent) null);
      assertEquals(-1, buttonTableHeader0.getCurrentlySortedColumnIdx());
  }

  @Test
  public void test16()  throws Throwable  {
      ButtonTableHeader buttonTableHeader0 = new ButtonTableHeader();
      assertNotNull(buttonTableHeader0);
      
      DefaultEditorKit.BeepAction defaultEditorKit_BeepAction0 = new DefaultEditorKit.BeepAction();
      JMenu jMenu0 = new JMenu((Action) defaultEditorKit_BeepAction0);
      FontUIResource fontUIResource0 = (FontUIResource)jMenu0.getFont();
      ButtonTableHeader.ButtonTableRenderer buttonTableHeader_ButtonTableRenderer0 = buttonTableHeader0.new ButtonTableRenderer((Font) fontUIResource0);
      JButton jButton0 = (JButton)buttonTableHeader_ButtonTableRenderer0.getTableCellRendererComponent((JTable) null, (Object) "ApproveButtonTextChangedProperty", false, false, 0, 1154);
      assertEquals(-1, buttonTableHeader0.getCurrentlySortedColumnIdx());
      assertNotNull(jButton0);
      assertEquals("ApproveButtonTextChangedProperty", jButton0.getLabel());
  }

  @Test
  public void test17()  throws Throwable  {
      ButtonTableHeader buttonTableHeader0 = new ButtonTableHeader();
      assertNotNull(buttonTableHeader0);
      
      DefaultEditorKit.BeepAction defaultEditorKit_BeepAction0 = new DefaultEditorKit.BeepAction();
      JMenu jMenu0 = new JMenu((Action) defaultEditorKit_BeepAction0);
      FontUIResource fontUIResource0 = (FontUIResource)jMenu0.getFont();
      ButtonTableHeader.ButtonTableRenderer buttonTableHeader_ButtonTableRenderer0 = buttonTableHeader0.new ButtonTableRenderer((Font) fontUIResource0);
      JButton jButton0 = (JButton)buttonTableHeader_ButtonTableRenderer0.getTableCellRendererComponent((JTable) null, (Object) null, true, false, (-1), (-1));
      assertEquals(-1, buttonTableHeader0.getCurrentlySortedColumnIdx());
      assertNotNull(jButton0);
  }
}
