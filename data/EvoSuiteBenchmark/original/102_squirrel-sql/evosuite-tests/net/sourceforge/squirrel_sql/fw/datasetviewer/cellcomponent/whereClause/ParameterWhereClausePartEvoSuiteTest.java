/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.whereClause;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.JTable;
import net.sourceforge.squirrel_sql.fw.datasetviewer.ColumnDisplayDefinition;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.DataTypeBigDecimal;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.DataTypeDate;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.DataTypeDouble;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.DataTypeUnknown;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.IDataTypeComponent;
import net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.whereClause.ParameterWhereClausePart;
import net.sourceforge.squirrel_sql.fw.dialects.DialectType;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ParameterWhereClausePartEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DialectType dialectType0 = DialectType.ORACLE;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, "#N}", "#N}", "#N}", 0, "#N}", true, 993, 841, 0, true, true, false, dialectType0);
      Object[][] objectArray0 = new Object[3][5];
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) false;
      objectArray1[1] = (Object) true;
      objectArray1[2] = (Object) false;
      objectArray1[3] = (Object) "#N}";
      objectArray1[4] = (Object) 0;
      objectArray1[5] = (Object) 841;
      objectArray1[6] = (Object) 993;
      objectArray0[0] = objectArray1;
      objectArray0[1] = objectArray0[0];
      JTable jTable0 = new JTable(objectArray0, objectArray0[1]);
      DataTypeBigDecimal dataTypeBigDecimal0 = new DataTypeBigDecimal(jTable0, columnDisplayDefinition0);
      ParameterWhereClausePart parameterWhereClausePart0 = new ParameterWhereClausePart(columnDisplayDefinition0, (Object) "bidi level", (IDataTypeComponent) dataTypeBigDecimal0);
      assertNotNull(parameterWhereClausePart0);
      
      // Undeclared exception!
      try {
        parameterWhereClausePart0.setParameter((PreparedStatement) null, 711);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * java.lang.String cannot be cast to java.math.BigDecimal
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      DialectType dialectType0 = DialectType.GENERIC;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(0, "&4rOuH^}Tn61}}g~#k", "zT@BbQdNv!YW)KX", "&4rOuH^}Tn61}}g~#k", 1824, "zT@BbQdNv!YW)KX", true, (-288), 1343, 0, false, false, true, dialectType0);
      JTable jTable0 = new JTable(1824, 1714);
      DataTypeUnknown dataTypeUnknown0 = new DataTypeUnknown(jTable0, columnDisplayDefinition0);
      ParameterWhereClausePart parameterWhereClausePart0 = new ParameterWhereClausePart(columnDisplayDefinition0, (Object) "#,##0.###", (IDataTypeComponent) dataTypeUnknown0);
      assertNotNull(parameterWhereClausePart0);
      
      String string0 = (String)parameterWhereClausePart0.getParameterValue();
      assertEquals("zT@BbQdNv!YW)KX = ?", parameterWhereClausePart0.getWhereClause());
      assertNotNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(1227, "r{D|5A<a");
      DataTypeDate dataTypeDate0 = new DataTypeDate((JTable) null, columnDisplayDefinition0);
      ParameterWhereClausePart parameterWhereClausePart0 = new ParameterWhereClausePart(columnDisplayDefinition0, (Object) "AccessibleCaret", (IDataTypeComponent) dataTypeDate0);
      assertNotNull(parameterWhereClausePart0);
      
      boolean boolean0 = parameterWhereClausePart0.isParameterUsed();
      assertEquals(true, boolean0);
      assertEquals("r{D|5A<a = ?", parameterWhereClausePart0.getWhereClause());
  }

  @Test
  public void test3()  throws Throwable  {
      DialectType dialectType0 = DialectType.DERBY;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition((-274), "i/TZ-;';NyPA", "i/TZ-;';NyPA", "i/TZ-;';NyPA", (-274), "i/TZ-;';NyPA", true, (-274), (-1258), 10, false, true, false, dialectType0);
      DataTypeDouble dataTypeDouble0 = new DataTypeDouble((JTable) null, columnDisplayDefinition0);
      ParameterWhereClausePart parameterWhereClausePart0 = null;
      try {
        parameterWhereClausePart0 = new ParameterWhereClausePart(columnDisplayDefinition0, (Object) null, (IDataTypeComponent) dataTypeDouble0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * The parameterValue must not be null
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      DialectType dialectType0 = DialectType.FRONTBASE;
      ColumnDisplayDefinition columnDisplayDefinition0 = new ColumnDisplayDefinition(1237, "|_Dh", "|_Dh", "", 1756, "|_Dh", false, 1237, 0, (-1402), false, false, false, dialectType0);
      ParameterWhereClausePart parameterWhereClausePart0 = null;
      try {
        parameterWhereClausePart0 = new ParameterWhereClausePart(columnDisplayDefinition0, (Object) "paste-from-clipboard", (IDataTypeComponent) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * column must be not empty
         */
      }
  }
}
