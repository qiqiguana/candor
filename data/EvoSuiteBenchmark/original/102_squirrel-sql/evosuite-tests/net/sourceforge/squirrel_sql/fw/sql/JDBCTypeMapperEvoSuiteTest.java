/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.sql;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import net.sourceforge.squirrel_sql.fw.sql.IndexInfo;
import net.sourceforge.squirrel_sql.fw.sql.JDBCTypeMapper;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class JDBCTypeMapperEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = JDBCTypeMapper.getJdbcType("date");
      assertEquals(91, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      JDBCTypeMapper jDBCTypeMapper0 = new JDBCTypeMapper();
      assertNotNull(jDBCTypeMapper0);
  }

  @Test
  public void test2()  throws Throwable  {
      String[] stringArray0 = JDBCTypeMapper.getJdbcTypeList();
      assertNotNull(stringArray0);
  }

  @Test
  public void test3()  throws Throwable  {
      String string0 = JDBCTypeMapper.getJdbcTypeName(1297);
      assertNotNull(string0);
      assertEquals("UNKNOWN", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      String string0 = JDBCTypeMapper.getJdbcTypeName((int) (short)0);
      assertNotNull(string0);
      assertEquals("NULL", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = JDBCTypeMapper.getJdbcType((String) null);
      assertEquals(0, int0);
  }

  @Test
  public void test6()  throws Throwable  {
      boolean boolean0 = JDBCTypeMapper.isNumberType((-5));
      assertEquals(true, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      boolean boolean0 = JDBCTypeMapper.isNumberType((-1));
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      boolean boolean0 = JDBCTypeMapper.isNumberType((-4));
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      boolean boolean0 = JDBCTypeMapper.isNumberType((-3));
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      boolean boolean0 = JDBCTypeMapper.isNumberType((-2));
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      boolean boolean0 = JDBCTypeMapper.isNumberType(0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      boolean boolean0 = JDBCTypeMapper.isNumberType((int) (short)1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      boolean boolean0 = JDBCTypeMapper.isNumberType((int) (short)2);
      assertEquals(true, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      boolean boolean0 = JDBCTypeMapper.isNumberType((int) (short)3);
      assertEquals(true, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      boolean boolean0 = JDBCTypeMapper.isNumberType(4);
      assertEquals(true, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      boolean boolean0 = JDBCTypeMapper.isNumberType(5);
      assertEquals(false, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      boolean boolean0 = JDBCTypeMapper.isNumberType(6);
      assertEquals(true, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      boolean boolean0 = JDBCTypeMapper.isNumberType(7);
      assertEquals(false, boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      boolean boolean0 = JDBCTypeMapper.isNumberType(8);
      assertEquals(true, boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      boolean boolean0 = JDBCTypeMapper.isNumberType((-1294));
      assertEquals(false, boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      boolean boolean0 = JDBCTypeMapper.isDateType(91);
      assertEquals(true, boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      boolean boolean0 = JDBCTypeMapper.isDateType((-1));
      assertEquals(false, boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      boolean boolean0 = JDBCTypeMapper.isDateType(92);
      assertEquals(true, boolean0);
  }

  @Test
  public void test24()  throws Throwable  {
      boolean boolean0 = JDBCTypeMapper.isDateType(93);
      assertEquals(true, boolean0);
  }

  @Test
  public void test25()  throws Throwable  {
      boolean boolean0 = JDBCTypeMapper.isLongType((-4));
      assertEquals(true, boolean0);
  }

  @Test
  public void test26()  throws Throwable  {
      boolean boolean0 = JDBCTypeMapper.isLongType((-1));
      assertEquals(true, boolean0);
  }

  @Test
  public void test27()  throws Throwable  {
      boolean boolean0 = JDBCTypeMapper.isLongType(2004);
      assertEquals(true, boolean0);
  }

  @Test
  public void test28()  throws Throwable  {
      boolean boolean0 = JDBCTypeMapper.isLongType(2005);
      assertEquals(true, boolean0);
  }

  @Test
  public void test29()  throws Throwable  {
      boolean boolean0 = JDBCTypeMapper.isLongType(0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test30()  throws Throwable  {
      IndexInfo.IndexType indexInfo_IndexType0 = JDBCTypeMapper.getIndexType((short)0);
      assertEquals(IndexInfo.IndexType.STATISTIC, indexInfo_IndexType0);
  }

  @Test
  public void test31()  throws Throwable  {
      IndexInfo.IndexType indexInfo_IndexType0 = JDBCTypeMapper.getIndexType((short)2);
      assertEquals(IndexInfo.IndexType.HASHED, indexInfo_IndexType0);
  }

  @Test
  public void test32()  throws Throwable  {
      IndexInfo.IndexType indexInfo_IndexType0 = JDBCTypeMapper.getIndexType((short)1);
      assertEquals(IndexInfo.IndexType.CLUSTERED, indexInfo_IndexType0);
  }

  @Test
  public void test33()  throws Throwable  {
      IndexInfo.IndexType indexInfo_IndexType0 = JDBCTypeMapper.getIndexType((short)3);
      assertEquals(IndexInfo.IndexType.OTHER, indexInfo_IndexType0);
  }

  @Test
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try {
        JDBCTypeMapper.getIndexType((short)5000);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Unknown index type: 5000
         */
      }
  }

  @Test
  public void test35()  throws Throwable  {
      IndexInfo.SortOrder indexInfo_SortOrder0 = JDBCTypeMapper.getIndexSortOrder("a");
      assertEquals(IndexInfo.SortOrder.ASC, indexInfo_SortOrder0);
  }

  @Test
  public void test36()  throws Throwable  {
      IndexInfo.SortOrder indexInfo_SortOrder0 = JDBCTypeMapper.getIndexSortOrder((String) null);
      assertEquals(IndexInfo.SortOrder.NONE, indexInfo_SortOrder0);
  }

  @Test
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try {
        JDBCTypeMapper.getIndexSortOrder("da%talin!k");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Unknown index sort order: da%talin!k
         */
      }
  }

  @Test
  public void test38()  throws Throwable  {
      IndexInfo.SortOrder indexInfo_SortOrder0 = JDBCTypeMapper.getIndexSortOrder("d");
      assertEquals(IndexInfo.SortOrder.DESC, indexInfo_SortOrder0);
  }

  @Test
  public void test39()  throws Throwable  {
      boolean boolean0 = JDBCTypeMapper.isStandardType(7);
      assertEquals(true, boolean0);
  }
}
