/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.fw.sql;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectType;
import net.sourceforge.squirrel_sql.fw.sql.IDatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.ISQLConnection;
import net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData;
import net.sourceforge.squirrel_sql.fw.sql.PrimaryKeyInfo;
import net.sourceforge.squirrel_sql.fw.sql.ProcedureInfo;
import net.sourceforge.squirrel_sql.fw.sql.SQLDatabaseMetaData;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DatabaseObjectInfoEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("]K'{Qw{", "]K'{Qw{", "]K'{Qw{");
      // Undeclared exception!
      try {
        databaseObjectInfo0.generateQualifiedName((ISQLConnection) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("]K'{Qw{", "]K'{Qw{", "]K'{Qw{");
      int int0 = databaseObjectInfo0.compareTo((IDatabaseObjectInfo) databaseObjectInfo0);
      assertEquals(0, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("supportsSchemaInTbleDefiniti]ns", "supportsSchemaInTbleDefiniti]ns", "supportsSchemaInTbleDefiniti]ns");
      String string0 = databaseObjectInfo0.toString();
      assertEquals("supportsSchemaInTbleDefiniti]ns", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("supportsSchemaInTbleDefiniti]ns", "supportsSchemaInTbleDefiniti]ns", "supportsSchemaInTbleDefiniti]ns");
      DatabaseObjectType databaseObjectType0 = databaseObjectInfo0.getDatabaseObjectType();
      assertEquals("Other", databaseObjectType0.getKeyForSerializationReplace());
  }

  @Test
  public void test4()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("supportsSchemaInTbleDefiniti]ns", "supportsSchemaInTbleDefiniti]ns", "supportsSchemaInTbleDefiniti]ns");
      String string0 = databaseObjectInfo0.getCatalogName();
      assertEquals("supportsSchemaInTbleDefiniti]ns", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("", "", "");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.CATALOG;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      assertEquals("", databaseObjectInfo0.getSimpleName());
  }

  @Test
  public void test6()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("supportsSchemaInTbleDefiniti]ns", "supportsSchemaInTbleDefiniti]ns", "supportsSchemaInTbleDefiniti]ns");
      int int0 = databaseObjectInfo0.hashCode();
      assertEquals(610922589, int0);
  }

  @Test
  public void test7()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("]K'{Qw{", "]K'{Qw{", "]K'{Qw{");
      String string0 = databaseObjectInfo0.getSchemaName();
      assertEquals("]K'{Qw{", string0);
  }

  @Test
  public void test8()  throws Throwable  {
      ProcedureInfo procedureInfo0 = null;
      try {
        procedureInfo0 = new ProcedureInfo("l", "l", "l", "l", (-8), (SQLDatabaseMetaData) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * SQLDatabaseMetaData == null
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      PrimaryKeyInfo primaryKeyInfo0 = null;
      try {
        primaryKeyInfo0 = new PrimaryKeyInfo();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * DatabaseObjectType == null
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("", "", "");
      // Undeclared exception!
      try {
        databaseObjectInfo0.generateQualifiedName((ISQLDatabaseMetaData) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("", "", "");
      boolean boolean0 = databaseObjectInfo0.equals((Object) databaseObjectInfo0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("]K'{Qw{", "]K'{Qw{", "]K'{Qw{");
      boolean boolean0 = databaseObjectInfo0.equals((Object) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("", "", "");
      boolean boolean0 = databaseObjectInfo0.equals((Object) "\u221E");
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo((String) null, (String) null, (String) null);
      boolean boolean0 = databaseObjectInfo0.equals((Object) databaseObjectInfo0);
      assertEquals(true, boolean0);
  }
}
