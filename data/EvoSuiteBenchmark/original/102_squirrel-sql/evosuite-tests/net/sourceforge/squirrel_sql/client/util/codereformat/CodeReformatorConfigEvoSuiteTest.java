/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.squirrel_sql.client.util.codereformat;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.ArrayList;
import net.sourceforge.squirrel_sql.client.util.codereformat.CodeReformatorConfig;
import net.sourceforge.squirrel_sql.client.util.codereformat.CommentSpec;
import net.sourceforge.squirrel_sql.client.util.codereformat.PieceMarkerSpec;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class CodeReformatorConfigEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      CommentSpec[] commentSpecArray0 = new CommentSpec[5];
      ArrayList<PieceMarkerSpec> arrayList0 = new ArrayList<PieceMarkerSpec>();
      CodeReformatorConfig codeReformatorConfig0 = new CodeReformatorConfig("", commentSpecArray0, "(On?eP3,SNaIf) Tk", 953, false, arrayList0);
      boolean boolean0 = codeReformatorConfig0.isDoInsertValuesAlign();
      assertEquals(false, boolean0);
      assertEquals("", codeReformatorConfig0.getStatementSeparator());
      assertEquals("(On?eP3,SNaIf) Tk", codeReformatorConfig0.getIndent());
      assertEquals(953, codeReformatorConfig0.getTrySplitLineLen());
  }

  @Test
  public void test1()  throws Throwable  {
      CommentSpec[] commentSpecArray0 = new CommentSpec[10];
      ArrayList<PieceMarkerSpec> arrayList0 = new ArrayList<PieceMarkerSpec>();
      CodeReformatorConfig codeReformatorConfig0 = new CodeReformatorConfig(")^?:qj.]Ple@}", commentSpecArray0, ")^?:qj.]Ple@}", 452, false, arrayList0);
      int int0 = codeReformatorConfig0.getTrySplitLineLen();
      assertEquals(452, int0);
      assertEquals(false, codeReformatorConfig0.isDoInsertValuesAlign());
  }

  @Test
  public void test2()  throws Throwable  {
      CommentSpec[] commentSpecArray0 = new CommentSpec[7];
      ArrayList<PieceMarkerSpec> arrayList0 = new ArrayList<PieceMarkerSpec>();
      CodeReformatorConfig codeReformatorConfig0 = new CodeReformatorConfig("]1!#m9A?x#E6?}x", commentSpecArray0, "]1!#m9A?x#E6?}x", (-1), true, arrayList0);
      String string0 = codeReformatorConfig0.getStatementSeparator();
      assertNotNull(string0);
      assertEquals(true, codeReformatorConfig0.isDoInsertValuesAlign());
      assertEquals(-1, codeReformatorConfig0.getTrySplitLineLen());
  }

  @Test
  public void test3()  throws Throwable  {
      CommentSpec[] commentSpecArray0 = new CommentSpec[6];
      ArrayList<PieceMarkerSpec> arrayList0 = new ArrayList<PieceMarkerSpec>();
      CodeReformatorConfig codeReformatorConfig0 = new CodeReformatorConfig("", commentSpecArray0, "", 1, true, arrayList0);
      String string0 = codeReformatorConfig0.getIndent();
      assertEquals(true, codeReformatorConfig0.isDoInsertValuesAlign());
      assertEquals(1, codeReformatorConfig0.getTrySplitLineLen());
      assertNotNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      CommentSpec[] commentSpecArray0 = new CommentSpec[2];
      ArrayList<PieceMarkerSpec> arrayList0 = new ArrayList<PieceMarkerSpec>(1);
      CodeReformatorConfig codeReformatorConfig0 = new CodeReformatorConfig("(XWhx?C/", commentSpecArray0, "(XWhx?C/", 1873, false, arrayList0);
      CommentSpec[] commentSpecArray1 = codeReformatorConfig0.getCommentSpecs();
      assertEquals(1873, codeReformatorConfig0.getTrySplitLineLen());
      assertNotNull(commentSpecArray1);
      assertEquals(false, codeReformatorConfig0.isDoInsertValuesAlign());
  }

  @Test
  public void test5()  throws Throwable  {
      CommentSpec[] commentSpecArray0 = new CommentSpec[2];
      ArrayList<PieceMarkerSpec> arrayList0 = new ArrayList<PieceMarkerSpec>(1);
      CodeReformatorConfig codeReformatorConfig0 = new CodeReformatorConfig("", commentSpecArray0, "", 1, true, arrayList0);
      PieceMarkerSpec[] pieceMarkerSpecArray0 = codeReformatorConfig0.getKeywordPieceMarkerSpecs();
      assertEquals(1, codeReformatorConfig0.getTrySplitLineLen());
      assertNotNull(pieceMarkerSpecArray0);
      assertEquals(true, codeReformatorConfig0.isDoInsertValuesAlign());
  }
}
