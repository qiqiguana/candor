## Ensure the package name is all in lowercase as
##   per the Java spec
package ${Package.toLowerCase()};

import uk.me.jockmacmad.jstate.state.InvalidMethodInStateException;

/**
 * A JAVA Class representing a State of a StateMachine.
 * <p>
 * The class inherits from an Interface
 * <code>${Package.toLowerCase()}.I$Clazz</code>
 * which describes the methods that vary their
 * implementation depending on the current State of
 * the StateMachine.
 * <p>
 * It is possible that some operations on the interface
 * are not valid in certain states and in this case
 * the invocation of the operation will lead to a
 * <code>uk.me.jockmacmad.jstate.state.InvalidMethodInStateException</code>
 * exception being thrown.
 * @author StateMachine2Java
 */

## Ensure we have the first character of our class name and
## interface name in uppercase as per the Java standard
#set( $classNameVar = "${State.Name.substring(0,1).toUpperCase()}" +  "${State.Name.substring(1)}" )
#set( $interfaceNameVar = "${Clazz.substring(0,1).toUpperCase()}" +  "${Clazz.substring(1)}" )

public class $classNameVar implements I${interfaceNameVar}
{
    #foreach( $method in $Interface.MethodArray )
    	/**
    	* ${method.Comment}.
    	* <p>
    	* If this method is not available in
    	*   the current state and is invoked it
    	*   will throw a InvalidMethodInStateException
    	* @throws InvalidMethodInStateException the exception
    	*/
    	## Ensure the 1st letter of the operation is
    	##   lowercase as per the Java spec
#set( $methodNameVar = "${method.Name.substring(0,1).toLowerCase()}" +  "${method.Name.substring(1)}" )    	
    	$method.Scope $method.Return ${methodNameVar}()
    	throws InvalidMethodInStateException {
    	}
    #end

    /**
     * Check to see if this State is the same as the passed in State.
     * Returns true if it is a match otherwise returns false.
     * @param pIState the State to compare
     * @return true if the States are equal otherwise false
     */
    public final boolean equals(
    	final uk.me.jockmacmad.jstate.state.IState pIState) {
        boolean retVal = false;
        if ( (pIState != null) && (pIState instanceof $State.Name  ) ) {
            retVal = true;
        }
        return retVal;
    }
    /**
     * Returns the hashCode for each Object of State
     * instantiated.
     * @return the hashCode
     */
    public final int hashCode() {
        return 42;
    }  
    /**
     * Get the name of this State.
     * Creation date: (19/02/01 4:31:49 PM)
     * @return java.lang.String
     */
    public final java.lang.String getName() {
        return NAME;
    }
    /**
     * Check to see if this State is designated as the
     * StateMachines End State.
     * @return true if this is the EndState
     * otherwise false.     
     */
    public final boolean isEndState() {
        return false;
    }
    /**
     * Check to see if this State is designated as the
     * StateMachines Start State.
     * @return true if this is the StartState
     * otherwise false.     
     */
    public final boolean isStartState() {
        return false;
    }

    /**
     * Casts this object to a java.lang.Object.
     * Creation date: (26/02/01 10:52:03 AM)
     * @return java.lang.Object
     */
    public final java.lang.Object toObject() {
        return (java.lang.Object)this;
    } 

    /**
     * Fixed name of this state.
     */
    private static final java.lang.String NAME = "$State.Name";
}    