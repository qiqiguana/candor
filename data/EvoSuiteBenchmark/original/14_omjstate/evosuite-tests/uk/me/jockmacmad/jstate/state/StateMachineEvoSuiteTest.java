/*
 * This file was automatically generated by EvoSuite
 */

package uk.me.jockmacmad.jstate.state;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import org.junit.BeforeClass;
import uk.me.jockmacmad.jstate.state.EndState;
import uk.me.jockmacmad.jstate.state.Event;
import uk.me.jockmacmad.jstate.state.IState;
import uk.me.jockmacmad.jstate.state.NonDeterministicException;
import uk.me.jockmacmad.jstate.state.StartState;
import uk.me.jockmacmad.jstate.state.StateMachine;
import uk.me.jockmacmad.jstate.state.StateMachineNotCompleteException;
import uk.me.jockmacmad.jstate.state.Transition;

@RunWith(EvoSuiteRunner.class)
public class StateMachineEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Vector<Transition> vector0 = new Vector<Transition>();
      StartState startState0 = StartState.getSingleton();
      Event event0 = new Event("x", (Vector) vector0, (Object) "com.objectmentors.state.StartState");
      Transition transition0 = new Transition("com.objectmentors.state.StartState", event0, (IState) startState0, (IState) startState0);
      vector0.add(transition0);
      StateMachine stateMachine0 = new StateMachine((List<Transition>) vector0);
      Observable observable0 = new Observable();
      stateMachine0.update(observable0, (Object) event0);
      assertEquals("uk.me.jockmacmad.jstate.state.Event[source=com.objectmentors.state.StartState]", event0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      LinkedList<Transition> linkedList0 = new LinkedList<Transition>();
      Vector<Transition> vector0 = new Vector<Transition>();
      Event event0 = new Event("[]", (Vector) vector0, (Object) "[]");
      Transition transition0 = new Transition("[]", event0, (IState) null, (IState) null);
      linkedList0.add(transition0);
      StateMachine stateMachine0 = null;
      try {
        stateMachine0 = new StateMachine((List<Transition>) linkedList0);
        fail("Expecting exception: StateMachineNotCompleteException");
      } catch(StateMachineNotCompleteException e) {
        /*
         * Invalid transition List supplied.No transition from the start state toa user defined state supplied.
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      Vector<Transition> vector0 = new Vector<Transition>();
      StartState startState0 = StartState.getSingleton();
      Event event0 = new Event("x", (Vector) vector0, (Object) "com.objectmentors.state.StartState");
      EndState endState0 = EndState.getSingleton();
      Transition transition0 = new Transition("com.objectmentors.state.StartState", event0, (IState) startState0, (IState) endState0);
      vector0.add(transition0);
      StateMachine stateMachine0 = new StateMachine((List<Transition>) vector0);
      Observable observable0 = new Observable();
      stateMachine0.update(observable0, (Object) event0);
      assertEquals("x", event0.getName());
  }
}
