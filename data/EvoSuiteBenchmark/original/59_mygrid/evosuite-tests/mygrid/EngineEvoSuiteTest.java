/*
 * This file was automatically generated by EvoSuite
 */

package mygrid;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import mygrid.Engine;
import mygrid.web.GridJobStatus;
import mygrid.web.Job;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class EngineEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      Engine engine0 = new Engine("", 949);
      assertEquals(true, engine0.available);
      assertNotNull(engine0);
      
      // Undeclared exception!
      try {
        engine0.poller.run();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      Engine engine0 = new Engine((String) null, (-4));
      assertNotNull(engine0);
      
      Job job0 = new Job();
      // Undeclared exception!
      try {
        engine0.poller.JobProcessorResponse((GridJobStatus) null, job0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          Engine engine0 = new Engine("EngineHandler: ", (-997));
          assertNotNull(engine0);
          
          GridJobStatus gridJobStatus0 = GridJobStatus.Progress;
          engine0.Start("EngineHandler: ", "EngineHandler: ", "EngineHandler: ", "EngineHandler: ");
          Job job0 = new Job();
          engine0.poller.JobProcessorResponse(gridJobStatus0, job0);
          assertEquals((-997000L), engine0.pollClusterTimeout);
          assertEquals(true, engine0.available);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
