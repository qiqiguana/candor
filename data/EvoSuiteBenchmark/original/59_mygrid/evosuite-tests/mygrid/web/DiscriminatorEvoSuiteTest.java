/*
 * This file was automatically generated by EvoSuite
 */

package mygrid.web;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import javax.xml.namespace.QName;
import mygrid.web.ArrayOfString;
import mygrid.web.Discriminator;
import mygrid.web.Processor;
import org.apache.axis.description.TypeDesc;
import org.apache.axis.encoding.ser.BeanDeserializer;
import org.apache.axis.encoding.ser.BeanSerializer;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DiscriminatorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Discriminator discriminator0 = new Discriminator();
      Processor processor0 = new Processor();
      discriminator0.setProcessor(processor0);
      Discriminator discriminator1 = new Discriminator();
      boolean boolean0 = discriminator0.equals((Object) discriminator1);
      assertEquals(false, boolean0);
      assertFalse(discriminator1.equals(discriminator0));
  }

  @Test
  public void test1()  throws Throwable  {
      Class<?> class0 = Discriminator.class;
      QName qName0 = new QName("org.apache.commons.logging.impl.Jdk14Logger", "org.apache.commons.logging.impl.Jdk14Logger");
      BeanDeserializer beanDeserializer0 = (BeanDeserializer)Discriminator.getDeserializer("org.apache.commons.logging.impl.Jdk14Logger", (Class) class0, qName0);
      assertEquals("Axis SAX Mechanism", beanDeserializer0.getMechanismType());
  }

  @Test
  public void test2()  throws Throwable  {
      Discriminator discriminator0 = new Discriminator();
      discriminator0.setRAM((-0.32827437F));
      Discriminator discriminator1 = new Discriminator();
      boolean boolean0 = discriminator0.equals((Object) discriminator1);
      assertEquals((-0.32827437F), discriminator0.getRAM(), 0.01F);
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      TypeDesc typeDesc0 = Discriminator.getTypeDesc();
      assertEquals(false, typeDesc0.hasAttributes());
  }

  @Test
  public void test4()  throws Throwable  {
      Discriminator discriminator0 = new Discriminator();
      discriminator0.setOS("0eb,2kt.avpx97NA");
      Discriminator discriminator1 = new Discriminator();
      boolean boolean0 = discriminator0.equals((Object) discriminator1);
      assertFalse(discriminator1.equals(discriminator0));
      assertEquals(0.0F, discriminator1.getCPU(), 0.01F);
      assertEquals(0.0F, discriminator1.getRAM(), 0.01F);
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      Discriminator discriminator0 = new Discriminator();
      ArrayOfString arrayOfString0 = new ArrayOfString();
      discriminator0.setAllowedEngines(arrayOfString0);
      Discriminator discriminator1 = new Discriminator();
      boolean boolean0 = discriminator0.equals((Object) discriminator1);
      assertFalse(discriminator1.equals(discriminator0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      Class<?> class0 = Discriminator.class;
      BeanSerializer beanSerializer0 = (BeanSerializer)Discriminator.getSerializer("org.apache.commons.logging.impl.Jdk14Logger", (Class) class0, (QName) null);
      assertEquals("Axis SAX Mechanism", beanSerializer0.getMechanismType());
  }

  @Test
  public void test7()  throws Throwable  {
      Discriminator discriminator0 = new Discriminator();
      boolean boolean0 = discriminator0.equals((Object) "FNjsMD-A'c:\"WKE?3s");
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      Discriminator discriminator0 = new Discriminator();
      Discriminator discriminator1 = new Discriminator();
      assertTrue(discriminator1.equals(discriminator0));
      
      ArrayOfString arrayOfString0 = new ArrayOfString();
      discriminator1.setAllowedEngines(arrayOfString0);
      boolean boolean0 = discriminator0.equals((Object) discriminator1);
      assertFalse(discriminator0.equals(discriminator1));
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      Discriminator discriminator0 = new Discriminator();
      ArrayOfString arrayOfString0 = new ArrayOfString();
      discriminator0.setAllowedEngines(arrayOfString0);
      Discriminator discriminator1 = new Discriminator();
      assertFalse(discriminator1.equals(discriminator0));
      
      discriminator1.setAllowedEngines(arrayOfString0);
      boolean boolean0 = discriminator0.equals((Object) discriminator1);
      assertTrue(discriminator1.equals(discriminator0));
      assertEquals(true, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      Discriminator discriminator0 = new Discriminator();
      Discriminator discriminator1 = new Discriminator();
      assertTrue(discriminator1.equals(discriminator0));
      
      Processor processor0 = new Processor();
      discriminator1.setProcessor(processor0);
      boolean boolean0 = discriminator0.equals((Object) discriminator1);
      assertFalse(discriminator1.equals(discriminator0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      Discriminator discriminator0 = new Discriminator();
      Processor processor0 = new Processor();
      discriminator0.setProcessor(processor0);
      Discriminator discriminator1 = new Discriminator();
      assertFalse(discriminator1.equals(discriminator0));
      
      discriminator1.setProcessor(processor0);
      boolean boolean0 = discriminator0.equals((Object) discriminator1);
      assertTrue(discriminator1.equals(discriminator0));
      assertEquals(true, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      Discriminator discriminator0 = new Discriminator();
      Discriminator discriminator1 = new Discriminator();
      discriminator1.setCPU(1578.1373F);
      boolean boolean0 = discriminator0.equals((Object) discriminator1);
      assertEquals(1578.1373F, discriminator1.getCPU(), 0.01F);
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      Discriminator discriminator0 = new Discriminator();
      discriminator0.setOS("FNjsMD-A'c:\"WKE?3s");
      Discriminator discriminator1 = new Discriminator();
      boolean boolean0 = discriminator1.equals((Object) discriminator0);
      assertEquals(0.0F, discriminator1.getRAM(), 0.01F);
      assertEquals(false, boolean0);
      assertEquals(0.0F, discriminator1.getCPU(), 0.01F);
  }

  @Test
  public void test14()  throws Throwable  {
      Discriminator discriminator0 = new Discriminator();
      discriminator0.setOS("0eb,2kt.avpx97NA");
      Discriminator discriminator1 = new Discriminator();
      assertFalse(discriminator1.equals(discriminator0));
      
      discriminator1.setOS("0eb,2kt.avpx97NA");
      boolean boolean0 = discriminator0.equals((Object) discriminator1);
      assertTrue(discriminator1.equals(discriminator0));
      assertEquals(true, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      Discriminator discriminator0 = new Discriminator();
      ArrayOfString arrayOfString0 = new ArrayOfString();
      discriminator0.setAllowedEngines(arrayOfString0);
      int int0 = discriminator0.hashCode();
      assertEquals(2, int0);
  }

  @Test
  public void test16()  throws Throwable  {
      Discriminator discriminator0 = new Discriminator();
      Processor processor0 = new Processor();
      discriminator0.setProcessor(processor0);
      int int0 = discriminator0.hashCode();
      assertEquals(2, int0);
  }

  @Test
  public void test17()  throws Throwable  {
      Discriminator discriminator0 = new Discriminator();
      discriminator0.setOS("FNjsMD-A'c:\"WKE?3s");
      int int0 = discriminator0.hashCode();
      assertEquals(1080093167, int0);
  }
}
