/*
 * This file was automatically generated by EvoSuite
 */

package mygrid.web;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.xml.namespace.QName;
import javax.xml.rpc.ServiceException;
import mygrid.web.MyGridServiceLocator;
import mygrid.web.MyGridServiceSoap;
import mygrid.web.MyGridServiceSoapStub;
import org.apache.axis.message.SAX2EventRecorder;
import org.apache.axis.soap.SOAP11Constants;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MyGridServiceLocatorEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          MyGridServiceLocator myGridServiceLocator0 = new MyGridServiceLocator();
          MyGridServiceSoapStub myGridServiceSoapStub0 = (MyGridServiceSoapStub)myGridServiceLocator0.getMyGridServiceSoap();
          assertNotNull(myGridServiceSoapStub0);
          assertEquals("MyGridServiceSoap", myGridServiceLocator0.getMyGridServiceSoapWSDDServiceName());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          MyGridServiceLocator myGridServiceLocator0 = new MyGridServiceLocator();
          myGridServiceLocator0.setMyGridServiceSoapWSDDServiceName("T<*P693Eww!0>R*8d08");
          assertEquals("http://localhost/MyGrid.Web/MyGrid.asmx", myGridServiceLocator0.getMyGridServiceSoapAddress());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          MyGridServiceLocator myGridServiceLocator0 = new MyGridServiceLocator();
          QName qName0 = myGridServiceLocator0.getServiceName();
          assertEquals("MyGridServiceSoap", myGridServiceLocator0.getMyGridServiceSoapWSDDServiceName());
          assertEquals("{http://tempuri.org/}MyGridService", qName0.toString());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          MyGridServiceLocator myGridServiceLocator0 = new MyGridServiceLocator();
          String string0 = myGridServiceLocator0.getMyGridServiceSoapAddress();
          assertEquals("http://localhost/MyGrid.Web/MyGrid.asmx", string0);
          assertEquals("MyGridServiceSoap", myGridServiceLocator0.getMyGridServiceSoapWSDDServiceName());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          MyGridServiceLocator myGridServiceLocator0 = new MyGridServiceLocator();
          Class<?> class0 = MyGridServiceLocator.class;
          try {
            myGridServiceLocator0.getPort((QName) null, (Class) class0);
            fail("Expecting exception: ServiceException");
          } catch(ServiceException e) {
            /*
             * There is no stub implementation for the interface:  mygrid.web.MyGridServiceLocator
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          MyGridServiceLocator myGridServiceLocator0 = new MyGridServiceLocator();
          Class<?> class0 = MyGridServiceSoap.class;
          MyGridServiceSoapStub myGridServiceSoapStub0 = (MyGridServiceSoapStub)myGridServiceLocator0.getPort(class0);
          assertNotNull(myGridServiceSoapStub0);
          assertEquals("MyGridServiceSoap", myGridServiceLocator0.getMyGridServiceSoapWSDDServiceName());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          MyGridServiceLocator myGridServiceLocator0 = new MyGridServiceLocator();
          SOAP11Constants sOAP11Constants0 = new SOAP11Constants();
          QName qName0 = sOAP11Constants0.getArrayType();
          Class<?> class0 = SAX2EventRecorder.class;
          try {
            myGridServiceLocator0.getPort(qName0, (Class) class0);
            fail("Expecting exception: ServiceException");
          } catch(ServiceException e) {
            /*
             * There is no stub implementation for the interface:  org.apache.axis.message.SAX2EventRecorder
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          MyGridServiceLocator myGridServiceLocator0 = new MyGridServiceLocator();
          Iterator<Object> iterator0 = myGridServiceLocator0.getPorts();
          assertNotNull(iterator0);
          
          Iterator<Object> iterator1 = myGridServiceLocator0.getPorts();
          assertEquals(true, iterator1.hasNext());
          assertEquals("MyGridServiceSoap", myGridServiceLocator0.getMyGridServiceSoapWSDDServiceName());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
