/*
 * This file was automatically generated by EvoSuite
 */

package mygrid.web;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.rmi.RemoteException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import mygrid.web.MyGridServiceLocator;
import mygrid.web.MyGridServiceSoapStub;
import mygrid.web._AvailableJobs;
import mygrid.web._Complete;
import mygrid.web._Fail;
import mygrid.web._GetEngine;
import mygrid.web._Logon;
import mygrid.web._Progress;
import mygrid.web._Request;
import mygrid.web._SetEngineInfo;
import org.apache.axis.AxisFault;
import org.apache.axis.EngineConfiguration;
import org.apache.axis.NoEndPointException;
import org.apache.axis.client.Service;
import org.apache.axis.configuration.BasicClientConfig;
import org.apache.axis.transport.local.Handler;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MyGridServiceSoapStubEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          MyGridServiceSoapStub myGridServiceSoapStub0 = new MyGridServiceSoapStub();
          _Logon _Logon0 = new _Logon();
          try {
            myGridServiceSoapStub0.logon(_Logon0);
            fail("Expecting exception: NoEndPointException");
          } catch(NoEndPointException e) {
            /*
             * No endpoint
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          BasicClientConfig basicClientConfig0 = new BasicClientConfig();
          Service service0 = new Service((EngineConfiguration) basicClientConfig0);
          MyGridServiceSoapStub myGridServiceSoapStub0 = new MyGridServiceSoapStub((URL) null, (javax.xml.rpc.Service) service0);
          _GetEngine _GetEngine0 = new _GetEngine();
          try {
            myGridServiceSoapStub0.getEngine(_GetEngine0);
            fail("Expecting exception: NoEndPointException");
          } catch(NoEndPointException e) {
            /*
             * No endpoint
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          Handler handler0 = new Handler();
          URL uRL0 = new URL("Zp?U%", "Zp?U%", 55, "Zp?U%", (URLStreamHandler) handler0);
          MyGridServiceSoapStub myGridServiceSoapStub0 = new MyGridServiceSoapStub();
          Service service0 = (Service)myGridServiceSoapStub0._getService();
          MyGridServiceSoapStub myGridServiceSoapStub1 = new MyGridServiceSoapStub(uRL0, (javax.xml.rpc.Service) service0);
          _SetEngineInfo _SetEngineInfo0 = new _SetEngineInfo();
          try {
            myGridServiceSoapStub1.setEngineInfo(_SetEngineInfo0);
            fail("Expecting exception: AxisFault");
          } catch(AxisFault e) {
            /*
             * No client transport named 'null' found!
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          Handler handler0 = new Handler();
          URL uRL0 = new URL("Zp?U%", "Zp?U%", 55, "Zp?U%", (URLStreamHandler) handler0);
          MyGridServiceSoapStub myGridServiceSoapStub0 = new MyGridServiceSoapStub();
          Service service0 = (Service)myGridServiceSoapStub0._getService();
          MyGridServiceSoapStub myGridServiceSoapStub1 = new MyGridServiceSoapStub(uRL0, (javax.xml.rpc.Service) service0);
          myGridServiceSoapStub1.setPassword("Zp?U%");
          _SetEngineInfo _SetEngineInfo0 = new _SetEngineInfo();
          try {
            myGridServiceSoapStub1.setEngineInfo(_SetEngineInfo0);
            fail("Expecting exception: AxisFault");
          } catch(AxisFault e) {
            /*
             * No client transport named 'null' found!
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          MyGridServiceSoapStub myGridServiceSoapStub0 = new MyGridServiceSoapStub();
          _Request _Request0 = new _Request();
          try {
            myGridServiceSoapStub0.request(_Request0);
            fail("Expecting exception: NoEndPointException");
          } catch(NoEndPointException e) {
            /*
             * No endpoint
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          MyGridServiceLocator myGridServiceLocator0 = new MyGridServiceLocator();
          MyGridServiceSoapStub myGridServiceSoapStub0 = new MyGridServiceSoapStub((javax.xml.rpc.Service) myGridServiceLocator0);
          _Complete _Complete0 = new _Complete();
          try {
            myGridServiceSoapStub0.complete(_Complete0);
            fail("Expecting exception: NoEndPointException");
          } catch(NoEndPointException e) {
            /*
             * No endpoint
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          MyGridServiceSoapStub myGridServiceSoapStub0 = new MyGridServiceSoapStub();
          _Fail _Fail0 = new _Fail();
          try {
            myGridServiceSoapStub0.fail(_Fail0);
            fail("Expecting exception: NoEndPointException");
          } catch(NoEndPointException e) {
            /*
             * No endpoint
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          MyGridServiceSoapStub myGridServiceSoapStub0 = new MyGridServiceSoapStub();
          _Progress _Progress0 = new _Progress();
          try {
            myGridServiceSoapStub0.progress(_Progress0);
            fail("Expecting exception: NoEndPointException");
          } catch(NoEndPointException e) {
            /*
             * No endpoint
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test8()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          MyGridServiceSoapStub myGridServiceSoapStub0 = new MyGridServiceSoapStub();
          _AvailableJobs _AvailableJobs0 = new _AvailableJobs();
          try {
            myGridServiceSoapStub0.availableJobs(_AvailableJobs0);
            fail("Expecting exception: NoEndPointException");
          } catch(NoEndPointException e) {
            /*
             * No endpoint
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test9()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          MyGridServiceSoapStub myGridServiceSoapStub0 = new MyGridServiceSoapStub();
          _SetEngineInfo _SetEngineInfo0 = new _SetEngineInfo();
          try {
            myGridServiceSoapStub0.setEngineInfo(_SetEngineInfo0);
            fail("Expecting exception: NoEndPointException");
          } catch(NoEndPointException e) {
            /*
             * No endpoint
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
