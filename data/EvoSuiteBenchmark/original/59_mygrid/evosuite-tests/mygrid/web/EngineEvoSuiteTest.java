/*
 * This file was automatically generated by EvoSuite
 */

package mygrid.web;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import javax.xml.namespace.QName;
import mygrid.web.Engine;
import org.apache.axis.description.TypeDesc;
import org.apache.axis.encoding.ser.BeanDeserializer;
import org.apache.axis.encoding.ser.BeanSerializer;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class EngineEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Class<?> class0 = QName.class;
      QName qName0 = new QName("l_V\"*~%t^Lmlo", "l_V\"*~%t^Lmlo", "l_V\"*~%t^Lmlo");
      BeanSerializer beanSerializer0 = (BeanSerializer)Engine.getSerializer("l_V\"*~%t^Lmlo", (Class) class0, qName0);
      assertEquals("Axis SAX Mechanism", beanSerializer0.getMechanismType());
  }

  @Test
  public void test1()  throws Throwable  {
      Engine engine0 = new Engine();
      engine0.setCPU((float) 1);
      Engine engine1 = new Engine();
      boolean boolean0 = engine0.equals((Object) engine1);
      assertEquals(1.0F, engine0.getCPU(), 0.01F);
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      TypeDesc typeDesc0 = Engine.getTypeDesc();
      assertEquals(false, typeDesc0.hasAttributes());
  }

  @Test
  public void test3()  throws Throwable  {
      Class<?> class0 = Engine.class;
      QName qName0 = new QName("#y4$5S6eRwt^*Im6,x", "#y4$5S6eRwt^*Im6,x", "#y4$5S6eRwt^*Im6,x");
      BeanDeserializer beanDeserializer0 = (BeanDeserializer)Engine.getDeserializer("#y4$5S6eRwt^*Im6,x", (Class) class0, qName0);
      assertEquals(false, beanDeserializer0.componentsReady());
  }

  @Test
  public void test4()  throws Throwable  {
      Engine engine0 = new Engine();
      engine0.setOS("#y4$5S6eRwt^*Im6,x");
      Engine engine1 = new Engine();
      boolean boolean0 = engine0.equals((Object) engine1);
      assertEquals(0.0F, engine1.getCPU(), 0.01F);
      assertFalse(engine1.equals(engine0));
      assertEquals(0.0F, engine1.getRAM(), 0.01F);
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      Engine engine0 = new Engine();
      boolean boolean0 = engine0.equals((Object) "{l_V\"*~%t^Lmlo}l_V\"*~%t^Lmlo");
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      Engine engine0 = new Engine();
      Engine engine1 = new Engine();
      assertTrue(engine1.equals(engine0));
      
      engine0.setId("[WARNING] the context classloader is not part of a parent-child relationship with the classloader that loaded LogFactoryImpl.");
      boolean boolean0 = engine1.equals((Object) engine0);
      assertFalse(engine0.equals(engine1));
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      Engine engine0 = new Engine();
      Engine engine1 = new Engine();
      assertTrue(engine1.equals(engine0));
      
      engine0.setId("[WARNING] the context classloader is not part of a parent-child relationship with the classloader that loaded LogFactoryImpl.");
      boolean boolean0 = engine0.equals((Object) engine1);
      assertFalse(engine1.equals(engine0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      Engine engine0 = new Engine();
      engine0.setName("l_V\"*~%t^Lmlo");
      engine0.setId("l_V\"*~%t^Lmlo");
      Engine engine1 = new Engine();
      engine1.setId("l_V\"*~%t^Lmlo");
      boolean boolean0 = engine0.equals((Object) engine1);
      assertFalse(engine1.equals(engine0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      Engine engine0 = new Engine();
      Engine engine1 = new Engine();
      assertTrue(engine1.equals(engine0));
      
      engine1.setName("DT)n(h}!.?ogyR");
      boolean boolean0 = engine0.equals((Object) engine1);
      assertFalse(engine1.equals(engine0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      Engine engine0 = new Engine();
      engine0.setName("WB')hO.>");
      Engine engine1 = new Engine();
      assertFalse(engine1.equals(engine0));
      
      engine1.setName("WB')hO.>");
      boolean boolean0 = engine0.equals((Object) engine1);
      assertTrue(engine1.equals(engine0));
      assertEquals(true, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      Engine engine0 = new Engine();
      Engine engine1 = new Engine();
      engine1.setRAM(763.1601F);
      boolean boolean0 = engine0.equals((Object) engine1);
      assertEquals(763.1601F, engine1.getRAM(), 0.01F);
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      Engine engine0 = new Engine();
      engine0.setName("WB')hO.>");
      Engine engine1 = new Engine();
      engine1.setName("WB')hO.>");
      assertTrue(engine1.equals(engine0));
      
      engine1.setOS("WB')hO.>");
      boolean boolean0 = engine0.equals((Object) engine1);
      assertFalse(engine1.equals(engine0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      Engine engine0 = new Engine();
      engine0.setOS("#y4$5S6eRwt^*Im6,x");
      Engine engine1 = new Engine();
      assertFalse(engine1.equals(engine0));
      
      engine1.setOS("#y4$5S6eRwt^*Im6,x");
      boolean boolean0 = engine0.equals((Object) engine1);
      assertTrue(engine1.equals(engine0));
      assertEquals(true, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      Engine engine0 = new Engine();
      engine0.setId("l_V\"*~%t^Lmlo");
      int int0 = engine0.hashCode();
      assertEquals((-715126719), int0);
  }

  @Test
  public void test15()  throws Throwable  {
      Engine engine0 = new Engine();
      engine0.setName("l_V\"*~%t^Lmlo");
      int int0 = engine0.hashCode();
      assertEquals((-715126719), int0);
  }

  @Test
  public void test16()  throws Throwable  {
      Engine engine0 = new Engine();
      engine0.setOS("l_V\"*~%t^Lmlo");
      int int0 = engine0.hashCode();
      assertEquals((-715126719), int0);
  }
}
