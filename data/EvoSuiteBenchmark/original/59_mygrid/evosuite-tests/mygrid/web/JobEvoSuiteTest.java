/*
 * This file was automatically generated by EvoSuite
 */

package mygrid.web;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import javax.xml.namespace.QName;
import mygrid.web.ArrayOfContextElement;
import mygrid.web.ArrayOfDependency;
import mygrid.web.Discriminator;
import mygrid.web.GridJobStatus;
import mygrid.web.Job;
import org.apache.axis.description.TypeDesc;
import org.apache.axis.encoding.ser.BeanDeserializer;
import org.apache.axis.encoding.ser.BeanSerializer;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class JobEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Job job0 = new Job();
      job0.setId(":3g8I@+S(%d@c9eChX");
      int int0 = job0.hashCode();
      assertEquals((-1313547876), int0);
  }

  @Test
  public void test1()  throws Throwable  {
      TypeDesc typeDesc0 = Job.getTypeDesc();
      assertEquals(false, typeDesc0.hasAttributes());
  }

  @Test
  public void test2()  throws Throwable  {
      Class<?> class0 = Job.class;
      QName qName0 = QName.valueOf("");
      BeanSerializer beanSerializer0 = (BeanSerializer)Job.getSerializer("", (Class) class0, qName0);
      assertEquals("Axis SAX Mechanism", beanSerializer0.getMechanismType());
  }

  @Test
  public void test3()  throws Throwable  {
      Job job0 = new Job();
      Discriminator discriminator0 = new Discriminator();
      job0.setDiscriminators(discriminator0);
      Job job1 = new Job();
      boolean boolean0 = job0.equals((Object) job1);
      assertFalse(job1.equals(job0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      Job job0 = new Job();
      GridJobStatus gridJobStatus0 = GridJobStatus.Acquired;
      job0.setStatus(gridJobStatus0);
      int int0 = job0.hashCode();
      assertEquals((-1666505916), int0);
  }

  @Test
  public void test5()  throws Throwable  {
      Class<?> class0 = Job.class;
      BeanDeserializer beanDeserializer0 = (BeanDeserializer)Job.getDeserializer("g>da>Y'iEVmR2,9jsNa", (Class) class0, (QName) null);
      assertEquals(false, beanDeserializer0.componentsReady());
  }

  @Test
  public void test6()  throws Throwable  {
      Job job0 = new Job();
      ArrayOfDependency arrayOfDependency0 = new ArrayOfDependency();
      job0.setDependencies(arrayOfDependency0);
      int int0 = job0.hashCode();
      assertEquals(1239, int0);
  }

  @Test
  public void test7()  throws Throwable  {
      Job job0 = new Job();
      ArrayOfContextElement arrayOfContextElement0 = new ArrayOfContextElement();
      job0.setContext(arrayOfContextElement0);
      Job job1 = new Job();
      boolean boolean0 = job0.equals((Object) job1);
      assertFalse(job1.equals(job0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      Job job0 = new Job();
      job0.setName("[mtgjxgM");
      int int0 = job0.hashCode();
      assertEquals(1054985807, int0);
  }

  @Test
  public void test9()  throws Throwable  {
      Job job0 = new Job();
      boolean boolean0 = job0.equals((Object) "Complete");
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      Job job0 = new Job();
      Job job1 = new Job();
      assertTrue(job1.equals(job0));
      
      job0.setId("g>da>Y'iEVmR2,9jsNa");
      boolean boolean0 = job0.equals((Object) job1);
      assertFalse(job1.equals(job0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      Job job0 = new Job();
      Job job1 = new Job();
      assertTrue(job1.equals(job0));
      
      job1.setId("y+B$#O~Fh$xjLLdi");
      boolean boolean0 = job0.equals((Object) job1);
      assertFalse(job1.equals(job0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      Job job0 = new Job();
      job0.setName("nullFie>d}Desc");
      Job job1 = new Job();
      boolean boolean0 = job0.equals((Object) job1);
      assertEquals(false, boolean0);
      assertFalse(job1.equals(job0));
  }

  @Test
  public void test13()  throws Throwable  {
      Job job0 = new Job();
      Job job1 = new Job();
      assertTrue(job1.equals(job0));
      
      job1.setName("BvT[Y@Jj");
      boolean boolean0 = job0.equals((Object) job1);
      assertFalse(job1.equals(job0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      Job job0 = new Job();
      job0.setName("nullFieldDesc");
      Job job1 = new Job();
      assertFalse(job1.equals(job0));
      
      job1.setName("nullFieldDesc");
      boolean boolean0 = job0.equals((Object) job1);
      assertTrue(job1.equals(job0));
      assertEquals(true, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      Job job0 = new Job();
      Job job1 = new Job();
      assertTrue(job1.equals(job0));
      
      job0.setId("g>da>Y'iEVmR2,9jsNa");
      Discriminator discriminator0 = new Discriminator();
      job1.setDiscriminators(discriminator0);
      job1.setId("g>da>Y'iEVmR2,9jsNa");
      boolean boolean0 = job0.equals((Object) job1);
      assertFalse(job0.equals(job1));
      assertEquals(false, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      Job job0 = new Job();
      Discriminator discriminator0 = new Discriminator();
      job0.setDiscriminators(discriminator0);
      Job job1 = new Job();
      assertFalse(job1.equals(job0));
      
      job1.setDiscriminators(discriminator0);
      boolean boolean0 = job0.equals((Object) job1);
      assertTrue(job1.equals(job0));
      assertEquals(true, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      Job job0 = new Job();
      Job job1 = new Job();
      assertTrue(job1.equals(job0));
      
      ArrayOfDependency arrayOfDependency0 = new ArrayOfDependency();
      job1.setDependencies(arrayOfDependency0);
      boolean boolean0 = job1.equals((Object) job0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      Job job0 = new Job();
      Job job1 = new Job();
      assertTrue(job1.equals(job0));
      
      ArrayOfDependency arrayOfDependency0 = new ArrayOfDependency();
      job1.setDependencies(arrayOfDependency0);
      boolean boolean0 = job0.equals((Object) job1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      Job job0 = new Job();
      Job job1 = new Job();
      ArrayOfDependency arrayOfDependency0 = new ArrayOfDependency();
      job1.setDependencies(arrayOfDependency0);
      assertFalse(job1.equals(job0));
      
      job0.setDependencies(arrayOfDependency0);
      boolean boolean0 = job1.equals((Object) job0);
      assertTrue(job1.equals(job0));
      assertEquals(true, boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      Job job0 = new Job();
      Job job1 = new Job();
      assertTrue(job1.equals(job0));
      
      ArrayOfContextElement arrayOfContextElement0 = new ArrayOfContextElement();
      job1.setContext(arrayOfContextElement0);
      boolean boolean0 = job0.equals((Object) job1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      Job job0 = new Job();
      ArrayOfContextElement arrayOfContextElement0 = new ArrayOfContextElement();
      job0.setContext(arrayOfContextElement0);
      Job job1 = new Job();
      assertFalse(job1.equals(job0));
      
      job1.setContext(arrayOfContextElement0);
      boolean boolean0 = job0.equals((Object) job1);
      assertTrue(job1.equals(job0));
      assertEquals(true, boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      Job job0 = new Job();
      Job job1 = new Job();
      job1.setProgress(677);
      boolean boolean0 = job0.equals((Object) job1);
      assertEquals(677, job1.getProgress());
      assertEquals(false, boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      Job job0 = new Job();
      Job job1 = new Job();
      job0.setBroadcasted(true);
      boolean boolean0 = job0.equals((Object) job1);
      assertEquals(true, job0.isBroadcasted());
      assertEquals(false, boolean0);
  }

  @Test
  public void test24()  throws Throwable  {
      Job job0 = new Job();
      Job job1 = new Job();
      assertTrue(job1.equals(job0));
      
      job0.setCurrentEngineId("ga>Y'iE|mv2,9jsNa");
      boolean boolean0 = job0.equals((Object) job1);
      assertFalse(job0.equals(job1));
      assertEquals(false, boolean0);
  }

  @Test
  public void test25()  throws Throwable  {
      Job job0 = new Job();
      Job job1 = new Job();
      assertTrue(job1.equals(job0));
      
      job1.setCurrentEngineId("java.version");
      boolean boolean0 = job0.equals((Object) job1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test26()  throws Throwable  {
      Job job0 = new Job();
      job0.setCurrentEngineId("");
      Job job1 = new Job();
      assertFalse(job1.equals(job0));
      
      job1.setCurrentEngineId("");
      boolean boolean0 = job1.equals((Object) job0);
      assertTrue(job1.equals(job0));
      assertEquals(true, boolean0);
  }

  @Test
  public void test27()  throws Throwable  {
      Job job0 = new Job();
      Job job1 = new Job();
      assertTrue(job1.equals(job0));
      
      GridJobStatus gridJobStatus0 = GridJobStatus.Progress;
      job0.setStatus(gridJobStatus0);
      boolean boolean0 = job0.equals((Object) job1);
      assertFalse(job0.equals(job1));
      assertEquals(false, boolean0);
  }

  @Test
  public void test28()  throws Throwable  {
      Job job0 = new Job();
      Job job1 = new Job();
      assertTrue(job1.equals(job0));
      
      GridJobStatus gridJobStatus0 = GridJobStatus.Complete;
      job1.setStatus(gridJobStatus0);
      boolean boolean0 = job0.equals((Object) job1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test29()  throws Throwable  {
      Job job0 = new Job();
      Job job1 = new Job();
      GridJobStatus gridJobStatus0 = GridJobStatus.Progress;
      job0.setStatus(gridJobStatus0);
      assertFalse(job0.equals(job1));
      
      job1.setStatus(gridJobStatus0);
      boolean boolean0 = job0.equals((Object) job1);
      assertTrue(job0.equals(job1));
      assertEquals(true, boolean0);
  }

  @Test
  public void test30()  throws Throwable  {
      Job job0 = new Job();
      Discriminator discriminator0 = new Discriminator();
      job0.setDiscriminators(discriminator0);
      int int0 = job0.hashCode();
      assertEquals(1239, int0);
  }

  @Test
  public void test31()  throws Throwable  {
      Job job0 = new Job();
      ArrayOfContextElement arrayOfContextElement0 = new ArrayOfContextElement();
      job0.setContext(arrayOfContextElement0);
      int int0 = job0.hashCode();
      assertEquals(1239, int0);
  }

  @Test
  public void test32()  throws Throwable  {
      Job job0 = new Job();
      job0.setCurrentEngineId("[mtgjxgM");
      int int0 = job0.hashCode();
      assertEquals(1054985807, int0);
  }
}
