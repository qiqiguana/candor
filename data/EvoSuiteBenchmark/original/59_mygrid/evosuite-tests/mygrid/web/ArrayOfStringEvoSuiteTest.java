/*
 * This file was automatically generated by EvoSuite
 */

package mygrid.web;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import javax.xml.namespace.QName;
import mygrid.web.ArrayOfString;
import org.apache.axis.description.TypeDesc;
import org.apache.axis.encoding.ser.BeanDeserializer;
import org.apache.axis.encoding.ser.BeanSerializer;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ArrayOfStringEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ArrayOfString arrayOfString0 = new ArrayOfString();
      // Undeclared exception!
      try {
        arrayOfString0.setString(1, "");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      ArrayOfString arrayOfString0 = new ArrayOfString();
      // Undeclared exception!
      try {
        arrayOfString0.getString(1);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      Class<?> class0 = ArrayOfString.class;
      QName qName0 = new QName("Could not convert [", "Could not convert [");
      BeanDeserializer beanDeserializer0 = (BeanDeserializer)ArrayOfString.getDeserializer("Could not convert [", (Class) class0, qName0);
      assertEquals("Axis SAX Mechanism", beanDeserializer0.getMechanismType());
  }

  @Test
  public void test3()  throws Throwable  {
      ArrayOfString arrayOfString0 = new ArrayOfString();
      int int0 = arrayOfString0.hashCode();
      assertEquals(1, int0);
  }

  @Test
  public void test4()  throws Throwable  {
      TypeDesc typeDesc0 = ArrayOfString.getTypeDesc();
      assertEquals(false, typeDesc0.hasAttributes());
  }

  @Test
  public void test5()  throws Throwable  {
      Class<?> class0 = QName.class;
      QName qName0 = QName.valueOf("");
      BeanSerializer beanSerializer0 = (BeanSerializer)ArrayOfString.getSerializer("", (Class) class0, qName0);
      assertEquals("Axis SAX Mechanism", beanSerializer0.getMechanismType());
  }

  @Test
  public void test6()  throws Throwable  {
      ArrayOfString arrayOfString0 = new ArrayOfString();
      Object object0 = new Object();
      boolean boolean0 = arrayOfString0.equals(object0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      ArrayOfString arrayOfString0 = new ArrayOfString();
      String[] stringArray0 = new String[9];
      arrayOfString0.setString(stringArray0);
      ArrayOfString arrayOfString1 = new ArrayOfString();
      boolean boolean0 = arrayOfString0.equals((Object) arrayOfString1);
      assertFalse(arrayOfString1.equals(arrayOfString0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      ArrayOfString arrayOfString0 = new ArrayOfString();
      ArrayOfString arrayOfString1 = new ArrayOfString();
      boolean boolean0 = arrayOfString1.equals((Object) arrayOfString0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      ArrayOfString arrayOfString0 = new ArrayOfString();
      String[] stringArray0 = new String[9];
      arrayOfString0.setString(stringArray0);
      ArrayOfString arrayOfString1 = new ArrayOfString();
      boolean boolean0 = arrayOfString1.equals((Object) arrayOfString0);
      assertFalse(arrayOfString0.equals(arrayOfString1));
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      ArrayOfString arrayOfString0 = new ArrayOfString();
      String[] stringArray0 = new String[9];
      arrayOfString0.setString(stringArray0);
      ArrayOfString arrayOfString1 = new ArrayOfString();
      assertFalse(arrayOfString1.equals(arrayOfString0));
      
      arrayOfString1.setString(stringArray0);
      boolean boolean0 = arrayOfString0.equals((Object) arrayOfString1);
      assertTrue(arrayOfString1.equals(arrayOfString0));
      assertEquals(true, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      ArrayOfString arrayOfString0 = new ArrayOfString();
      String[] stringArray0 = new String[13];
      stringArray0[1] = "";
      arrayOfString0.setString(stringArray0);
      int int0 = arrayOfString0.hashCode();
      assertEquals(1, int0);
  }
}
