/*
 * This file was automatically generated by EvoSuite
 */

package plugins.map;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.awt.Image;
import java.io.File;
import java.util.logging.Logger;
import org.apache.commons.logging.impl.Jdk14Logger;
import org.junit.BeforeClass;
import org.openstreetmap.gui.jmapviewer.JMapViewer;
import org.openstreetmap.gui.jmapviewer.MemoryTileCache;
import org.openstreetmap.gui.jmapviewer.TileController;
import org.openstreetmap.gui.jmapviewer.interfaces.TileCache;
import org.openstreetmap.gui.jmapviewer.interfaces.TileLoaderListener;
import org.openstreetmap.gui.jmapviewer.interfaces.TileSource;
import org.openstreetmap.gui.jmapviewer.tilesources.ScanexTileSource;
import org.openstreetmap.gui.jmapviewer.tilesources.TMSTileSource;
import plugins.map.TileImage;

@RunWith(EvoSuiteRunner.class)
public class TileImageEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      TileImage tileImage0 = new TileImage();
      tileImage0.getImage();
      assertEquals(false, tileImage0.isImageCreated());
      assertEquals(true, tileImage0.isDrawingDone());
  }

  @Test
  public void test1()  throws Throwable  {
      TileImage tileImage0 = new TileImage();
      // Undeclared exception!
      try {
        tileImage0.imageUpdate((Image) null, 819, (-1767), (-686), 819, 819);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      TileImage tileImage0 = new TileImage();
      boolean boolean0 = tileImage0.isImageCreated();
      assertEquals(false, boolean0);
      assertEquals(true, tileImage0.isDrawingDone());
  }

  @Test
  public void test3()  throws Throwable  {
      TileImage tileImage0 = new TileImage();
      File file0 = new File("");
      tileImage0.load(file0);
      assertEquals(false, tileImage0.isImageCreated());
      assertEquals(true, tileImage0.isDrawingDone());
  }

  @Test
  public void test4()  throws Throwable  {
      TileImage tileImage0 = new TileImage();
      String string0 = tileImage0.save();
      assertNull(string0);
      assertEquals(true, tileImage0.isDrawingDone());
      assertEquals(false, tileImage0.isImageCreated());
  }

  @Test
  public void test5()  throws Throwable  {
      TileImage tileImage0 = new TileImage();
      ScanexTileSource scanexTileSource0 = new ScanexTileSource("");
      MemoryTileCache memoryTileCache0 = new MemoryTileCache();
      JMapViewer jMapViewer0 = new JMapViewer((TileCache) memoryTileCache0, (-1));
      TileController tileController0 = new TileController((TileSource) scanexTileSource0, (TileCache) memoryTileCache0, (TileLoaderListener) jMapViewer0);
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("");
      Logger logger0 = jdk14Logger0.getLogger();
      tileImage0.setTiles(0, 0, 334, 0, tileController0, logger0, 1, (-464));
      // Undeclared exception!
      try {
        tileImage0.isLoaded();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 0
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      TileImage tileImage0 = new TileImage();
      boolean boolean0 = tileImage0.isLoaded();
      assertEquals(true, tileImage0.isDrawingDone());
      assertEquals(false, boolean0);
      assertEquals(false, tileImage0.isImageCreated());
  }

  @Test
  public void test7()  throws Throwable  {
      TileImage tileImage0 = new TileImage();
      tileImage0.load("");
      ScanexTileSource scanexTileSource0 = new ScanexTileSource("");
      MemoryTileCache memoryTileCache0 = new MemoryTileCache();
      JMapViewer jMapViewer0 = new JMapViewer((TileCache) memoryTileCache0, (-1));
      TileController tileController0 = new TileController((TileSource) scanexTileSource0, (TileCache) memoryTileCache0, (TileLoaderListener) jMapViewer0);
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("");
      Logger logger0 = jdk14Logger0.getLogger();
      tileImage0.setTiles(0, 0, 334, 0, tileController0, logger0, 1, (-464));
      boolean boolean0 = tileImage0.isLoaded();
      assertEquals(true, tileImage0.isImageCreated());
      assertEquals(true, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      TileImage tileImage0 = new TileImage();
      TMSTileSource tMSTileSource0 = new TMSTileSource("Added focused ", "Added focused ", (-1851), 32);
      JMapViewer jMapViewer0 = new JMapViewer();
      TileController tileController0 = new TileController((TileSource) tMSTileSource0, (TileCache) null, (TileLoaderListener) jMapViewer0);
      Logger logger0 = Logger.getLogger("Added focused ");
      tileImage0.setTiles(11, (-2032), 0, (-2032), tileController0, logger0, (-386), (-1403));
      // Undeclared exception!
      try {
        tileImage0.hasErrors();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      TileImage tileImage0 = new TileImage();
      boolean boolean0 = tileImage0.hasErrors();
      assertEquals(true, tileImage0.isDrawingDone());
      assertEquals(false, tileImage0.isImageCreated());
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      TileImage tileImage0 = new TileImage();
      TMSTileSource tMSTileSource0 = new TMSTileSource("Added focused ", "Added focused ", (-1851), 32);
      JMapViewer jMapViewer0 = new JMapViewer();
      TileController tileController0 = new TileController((TileSource) tMSTileSource0, (TileCache) null, (TileLoaderListener) jMapViewer0);
      Logger logger0 = Logger.getLogger("Added focused ");
      tileImage0.setTiles(0, (-2016), 0, (-2016), tileController0, logger0, (-386), (-1403));
      tileImage0.hasErrors();
      assertEquals(true, tileImage0.isDrawingDone());
      assertEquals(false, tileImage0.isImageCreated());
  }
}
