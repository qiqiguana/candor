/*
 * This file was automatically generated by EvoSuite
 */

package plugins.collaboration.socket;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import freemind.controller.actions.generated.instance.XmlAction;
import freemind.modes.mindmapmode.actions.xml.ActionPair;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.jibx.runtime.JiBXException;
import org.jibx.runtime.impl.UnmarshallingContext;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import plugins.collaboration.socket.MindMapClient;
import plugins.collaboration.socket.MindMapMaster;
import plugins.collaboration.socket.SocketConnectionHook;

@RunWith(EvoSuiteRunner.class)
public class SocketBasicsEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          MindMapClient mindMapClient0 = new MindMapClient();
          mindMapClient0.executeTransaction((ActionPair) null);
          assertEquals(0, mindMapClient0.getPort());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook();
          ActionPair actionPair0 = socketConnectionHook0.getEmptyActionPair();
          assertNotNull(actionPair0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          MindMapClient mindMapClient0 = new MindMapClient();
          // Undeclared exception!
          try {
            mindMapClient0.shutdownMapHook();
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          MindMapMaster mindMapMaster0 = new MindMapMaster();
          // Undeclared exception!
          try {
            mindMapMaster0.shutdownMapHook();
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          MindMapMaster mindMapMaster0 = new MindMapMaster();
          // Undeclared exception!
          try {
            mindMapMaster0.getPortProperty();
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          MindMapMaster mindMapMaster0 = new MindMapMaster();
          String string0 = mindMapMaster0.getUserName();
          assertNotNull(string0);
          assertEquals("ac1gf@localhost", string0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook();
          // Undeclared exception!
          try {
            socketConnectionHook0.startupMapHook();
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          MindMapClient mindMapClient0 = new MindMapClient();
          UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
          XmlAction xmlAction0 = XmlAction.JiBX_binding_newinstance_1_0(unmarshallingContext0);
          ActionPair actionPair0 = new ActionPair(xmlAction0, xmlAction0);
          // Undeclared exception!
          try {
            mindMapClient0.filterAction(actionPair0);
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
