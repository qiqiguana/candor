/*
 * This file was automatically generated by EvoSuite
 */

package plugins.collaboration.socket;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import freemind.controller.actions.generated.instance.CollaborationUserInformation;
import freemind.main.XMLElement;
import freemind.modes.MindMapNode;
import freemind.view.mindmapview.NodeView;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import plugins.collaboration.socket.MindMapMaster;
import plugins.collaboration.socket.ServerCommunication;
import plugins.collaboration.socket.SocketBasics;

@RunWith(EvoSuiteRunner.class)
public class MindMapMasterEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          MindMapMaster mindMapMaster0 = new MindMapMaster();
          Integer integer0 = mindMapMaster0.getRole();
          assertEquals(0, integer0.byteValue());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          MindMapMaster mindMapMaster0 = new MindMapMaster();
          mindMapMaster0.onRemoveChildren((MindMapNode) null, (MindMapNode) null);
          assertEquals("ac1gf@localhost", mindMapMaster0.getUsers());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          MindMapMaster mindMapMaster0 = new MindMapMaster();
          mindMapMaster0.onViewCreatedHook((NodeView) null);
          assertEquals(0, mindMapMaster0.getPort());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          MindMapMaster mindMapMaster0 = new MindMapMaster();
          mindMapMaster0.shutdown();
          assertEquals("ac1gf@localhost", mindMapMaster0.getUsers());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          MindMapMaster mindMapMaster0 = new MindMapMaster();
          mindMapMaster0.onUpdateChildrenHook((MindMapNode) null);
          assertNull(mindMapMaster0.getName());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          MindMapMaster mindMapMaster0 = new MindMapMaster();
          mindMapMaster0.onViewRemovedHook((NodeView) null);
          assertNull(mindMapMaster0.getName());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          MindMapMaster mindMapMaster0 = new MindMapMaster();
          mindMapMaster0.loadFrom((XMLElement) null);
          assertEquals("ac1gf@localhost", mindMapMaster0.getUsers());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          MindMapMaster mindMapMaster0 = new MindMapMaster();
          mindMapMaster0.onFocusNode((NodeView) null);
          assertEquals(0, mindMapMaster0.getPort());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test8()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          MindMapMaster mindMapMaster0 = new MindMapMaster();
          CollaborationUserInformation collaborationUserInformation0 = mindMapMaster0.getMasterInformation();
          assertNotNull(collaborationUserInformation0);
          assertEquals(0, mindMapMaster0.getPort());
          assertEquals(0, collaborationUserInformation0.getMasterPort());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test9()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          MindMapMaster mindMapMaster0 = new MindMapMaster();
          mindMapMaster0.onUpdateNodeHook();
          assertNull(mindMapMaster0.getPassword());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          MindMapMaster mindMapMaster0 = new MindMapMaster();
          // Undeclared exception!
          try {
            mindMapMaster0.removeConnection((ServerCommunication) null);
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          MindMapMaster mindMapMaster0 = new MindMapMaster();
          // Undeclared exception!
          try {
            mindMapMaster0.lock("");
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          MindMapMaster mindMapMaster0 = new MindMapMaster();
          mindMapMaster0.onAddChild((MindMapNode) null);
          assertEquals("ac1gf@localhost", mindMapMaster0.getUsers());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          MindMapMaster mindMapMaster0 = new MindMapMaster();
          mindMapMaster0.save((XMLElement) null);
          assertEquals("ac1gf@localhost", mindMapMaster0.getUsers());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test14()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          MindMapMaster mindMapMaster0 = new MindMapMaster();
          mindMapMaster0.broadcastCommand("r)91", "r)91", "r)91");
          assertEquals(0, mindMapMaster0.getPort());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test15()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          MindMapMaster mindMapMaster0 = new MindMapMaster();
          // Undeclared exception!
          try {
            mindMapMaster0.unlock();
            fail("Expecting exception: IllegalStateException");
          } catch(IllegalStateException e) {
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test16()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          MindMapMaster mindMapMaster0 = new MindMapMaster();
          // Undeclared exception!
          try {
            mindMapMaster0.lock("TMM");
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test17()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          MindMapMaster mindMapMaster0 = new MindMapMaster();
          // Undeclared exception!
          try {
            mindMapMaster0.getLockId();
            fail("Expecting exception: IllegalStateException");
          } catch(IllegalStateException e) {
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
