/*
 * This file was automatically generated by EvoSuite
 */

package plugins.collaboration.socket;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import freemind.main.XMLElement;
import freemind.modes.MindMapNode;
import freemind.view.mindmapview.NodeView;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import plugins.collaboration.socket.ClientCommunication;
import plugins.collaboration.socket.SocketBasics;
import plugins.collaboration.socket.SocketConnectionHook;

@RunWith(EvoSuiteRunner.class)
public class SocketConnectionHookEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook();
          socketConnectionHook0.save((XMLElement) null);
          assertNull(socketConnectionHook0.getName());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook();
          socketConnectionHook0.onUpdateChildrenHook((MindMapNode) null);
          assertNull(socketConnectionHook0.getPassword());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook();
          socketConnectionHook0.unlock();
          assertNull(socketConnectionHook0.getName());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook();
          socketConnectionHook0.onViewCreatedHook((NodeView) null);
          assertNull(socketConnectionHook0.getName());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook();
          socketConnectionHook0.onNewChild((MindMapNode) null);
          assertNull(socketConnectionHook0.getPassword());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook();
          // Undeclared exception!
          try {
            socketConnectionHook0.shutdown();
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook();
          socketConnectionHook0.setClientCommunication((ClientCommunication) null);
          assertNull(socketConnectionHook0.getPassword());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook();
          Integer integer0 = socketConnectionHook0.getRole();
          assertEquals(1, integer0.intValue());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test8()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook();
          socketConnectionHook0.onRemoveChildren((MindMapNode) null, (MindMapNode) null);
          assertNull(socketConnectionHook0.getName());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test9()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook();
          // Undeclared exception!
          try {
            socketConnectionHook0.lock("");
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook();
          socketConnectionHook0.loadFrom((XMLElement) null);
          assertNull(socketConnectionHook0.getName());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook();
          socketConnectionHook0.onFocusNode((NodeView) null);
          assertNull(socketConnectionHook0.getPassword());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook();
          socketConnectionHook0.onUpdateNodeHook();
          assertNull(socketConnectionHook0.getName());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook();
          ClientCommunication clientCommunication0 = socketConnectionHook0.getClientCommunication();
          assertNull(clientCommunication0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test14()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook();
          socketConnectionHook0.onAddChild((MindMapNode) null);
          assertNull(socketConnectionHook0.getName());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test15()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook();
          socketConnectionHook0.onRemoveChild((MindMapNode) null);
          assertNull(socketConnectionHook0.getName());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test16()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook();
          try {
            socketConnectionHook0.broadcastCommand("", "", "");
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test17()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook();
          socketConnectionHook0.onViewRemovedHook((NodeView) null);
          assertNull(socketConnectionHook0.getPassword());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test18()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook();
          socketConnectionHook0.onLostFocusNode((NodeView) null);
          assertNull(socketConnectionHook0.getName());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test19()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook();
          // Undeclared exception!
          try {
            socketConnectionHook0.getPort();
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test20()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook();
          // Undeclared exception!
          try {
            socketConnectionHook0.startupMapHook();
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test21()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook();
          // Undeclared exception!
          try {
            socketConnectionHook0.getMasterInformation();
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
