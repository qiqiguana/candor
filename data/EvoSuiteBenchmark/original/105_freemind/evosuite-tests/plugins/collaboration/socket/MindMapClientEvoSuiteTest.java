/*
 * This file was automatically generated by EvoSuite
 */

package plugins.collaboration.socket;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import freemind.controller.actions.generated.instance.CollaborationUserInformation;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import plugins.collaboration.socket.MindMapClient;
import plugins.collaboration.socket.SocketBasics;

@RunWith(EvoSuiteRunner.class)
public class MindMapClientEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          MindMapClient mindMapClient0 = new MindMapClient();
          mindMapClient0.shutdown();
          assertEquals(0, mindMapClient0.getPort());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          MindMapClient mindMapClient0 = new MindMapClient();
          mindMapClient0.unlock();
          assertNull(mindMapClient0.getName());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          MindMapClient mindMapClient0 = new MindMapClient();
          int int0 = mindMapClient0.getPort();
          assertEquals(0, int0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          MindMapClient mindMapClient0 = new MindMapClient();
          Integer integer0 = mindMapClient0.getRole();
          assertEquals(1L, integer0.longValue());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          MindMapClient mindMapClient0 = new MindMapClient();
          String string0 = mindMapClient0.lock("h~JN-LtnfjLkh<");
          assertNull(string0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          MindMapClient mindMapClient0 = new MindMapClient();
          mindMapClient0.broadcastCommand("h~JN-LtnfjLkh<", "h~JN-LtnfjLkh<", "h~JN-LtnfjLkh<");
          assertEquals(0, mindMapClient0.getPort());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          MindMapClient mindMapClient0 = new MindMapClient();
          CollaborationUserInformation collaborationUserInformation0 = mindMapClient0.getMasterInformation();
          assertNull(collaborationUserInformation0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
