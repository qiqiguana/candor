/*
 * This file was automatically generated by EvoSuite
 */

package plugins.collaboration.database;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import freemind.main.XMLElement;
import freemind.modes.MindMapNode;
import freemind.modes.mindmapmode.actions.xml.ActionPair;
import freemind.view.mindmapview.NodeView;
import java.lang.reflect.InvocationTargetException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import plugins.collaboration.database.DatabaseStarter;
import plugins.collaboration.socket.MindMapClient;
import plugins.collaboration.socket.SocketConnectionHook;

@RunWith(EvoSuiteRunner.class)
public class DatabaseStarterEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      DatabaseStarter databaseStarter0 = new DatabaseStarter();
      databaseStarter0.deregisterFilter();
      assertNull(databaseStarter0.getName());
  }

  @Test
  public void test1()  throws Throwable  {
      DatabaseStarter databaseStarter0 = new DatabaseStarter();
      databaseStarter0.loadFrom((XMLElement) null);
      assertNull(databaseStarter0.getName());
  }

  @Test
  public void test2()  throws Throwable  {
      DatabaseStarter databaseStarter0 = new DatabaseStarter();
      databaseStarter0.onViewRemovedHook((NodeView) null);
      assertNull(databaseStarter0.getName());
  }

  @Test
  public void test3()  throws Throwable  {
      DatabaseStarter databaseStarter0 = new DatabaseStarter();
      databaseStarter0.onRemoveChildren((MindMapNode) null, (MindMapNode) null);
      assertNull(databaseStarter0.getName());
  }

  @Test
  public void test4()  throws Throwable  {
      DatabaseStarter databaseStarter0 = new DatabaseStarter();
      databaseStarter0.onUpdateNodeHook();
      assertNull(databaseStarter0.getName());
  }

  @Test
  public void test5()  throws Throwable  {
      DatabaseStarter databaseStarter0 = new DatabaseStarter();
      databaseStarter0.onUpdateChildrenHook((MindMapNode) null);
      assertNull(databaseStarter0.getName());
  }

  @Test
  public void test6()  throws Throwable  {
      DatabaseStarter databaseStarter0 = new DatabaseStarter();
      databaseStarter0.registerFilter();
      assertNull(databaseStarter0.getName());
  }

  @Test
  public void test7()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          DatabaseStarter databaseStarter0 = new DatabaseStarter();
          SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook();
          ActionPair actionPair0 = socketConnectionHook0.getEmptyActionPair();
          ActionPair actionPair1 = databaseStarter0.filterAction(actionPair0);
          assertNull(actionPair1);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test8()  throws Throwable  {
      DatabaseStarter databaseStarter0 = new DatabaseStarter();
      databaseStarter0.onRemoveChild((MindMapNode) null);
      assertNull(databaseStarter0.getName());
  }

  @Test
  public void test9()  throws Throwable  {
      DatabaseStarter databaseStarter0 = new DatabaseStarter();
      databaseStarter0.onViewCreatedHook((NodeView) null);
      assertNull(databaseStarter0.getName());
  }

  @Test
  public void test10()  throws Throwable  {
      DatabaseStarter databaseStarter0 = new DatabaseStarter();
      XMLElement xMLElement0 = new XMLElement(false);
      databaseStarter0.save(xMLElement0);
      assertNull(databaseStarter0.getName());
  }

  @Test
  public void test11()  throws Throwable  {
      DatabaseStarter databaseStarter0 = new DatabaseStarter();
      databaseStarter0.onAddChild((MindMapNode) null);
      assertNull(databaseStarter0.getName());
  }

  @Test
  public void test12()  throws Throwable  {
      DatabaseStarter databaseStarter0 = new DatabaseStarter();
      Integer integer0 = databaseStarter0.getRole();
      assertEquals(0, integer0.byteValue());
  }

  @Test
  public void test13()  throws Throwable  {
      DatabaseStarter databaseStarter0 = new DatabaseStarter();
      databaseStarter0.onNewChild((MindMapNode) null);
      assertNull(databaseStarter0.getName());
  }

  @Test
  public void test14()  throws Throwable  {
      DatabaseStarter databaseStarter0 = new DatabaseStarter();
      databaseStarter0.onFocusNode((NodeView) null);
      assertNull(databaseStarter0.getName());
  }

  @Test
  public void test15()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          DatabaseStarter databaseStarter0 = new DatabaseStarter();
          MindMapClient mindMapClient0 = new MindMapClient();
          ActionPair actionPair0 = mindMapClient0.getEmptyActionPair();
          databaseStarter0.executeTransaction(actionPair0);
          assertNull(databaseStarter0.getName());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test16()  throws Throwable  {
      DatabaseStarter databaseStarter0 = new DatabaseStarter();
      databaseStarter0.onLostFocusNode((NodeView) null);
      assertNull(databaseStarter0.getName());
  }

  @Test
  public void test17()  throws Throwable  {
      DatabaseStarter databaseStarter0 = new DatabaseStarter();
      databaseStarter0.onAddChildren((MindMapNode) null);
      assertNull(databaseStarter0.getName());
  }

  @Test
  public void test18()  throws Throwable  {
      DatabaseStarter databaseStarter0 = new DatabaseStarter();
      // Undeclared exception!
      try {
        databaseStarter0.shutdownMapHook();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
