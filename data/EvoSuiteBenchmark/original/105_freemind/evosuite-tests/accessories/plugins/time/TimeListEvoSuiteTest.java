/*
 * This file was automatically generated by EvoSuite
 */

package accessories.plugins.time;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import accessories.plugins.time.TimeList;
import freemind.modes.ModeController;
import javax.swing.JTable;
import javax.swing.text.BadLocationException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TimeListEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      TimeList.IconsRenderer timeList_IconsRenderer0 = new TimeList.IconsRenderer((ModeController) null);
      assertEquals(10, timeList_IconsRenderer0.getHorizontalAlignment());
  }

  @Test
  public void test1()  throws Throwable  {
      String string0 = TimeList.getRegularExpression("UT`'j=h4#");
      assertNotNull(string0);
      assertEquals(".*(UT`'j=h4#).*", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      String string0 = TimeList.getPureRegularExpression("UT`'j=h4#");
      assertEquals("UT`'j=h4#", string0);
      assertNotNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      TimeList timeList0 = new TimeList();
      timeList0.numberOfOpenMapInformation((-1), 0);
      assertNull(timeList0.getName());
  }

  @Test
  public void test4()  throws Throwable  {
      TimeList.DateRenderer timeList_DateRenderer0 = new TimeList.DateRenderer();
      JTable jTable0 = new JTable();
      // Undeclared exception!
      try {
        timeList_DateRenderer0.getTableCellRendererComponent(jTable0, (Object) "mask", true, true, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Cannot format given Object as a Date
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      TimeList.NodeRenderer timeList_NodeRenderer0 = new TimeList.NodeRenderer();
      assertEquals(false, timeList_NodeRenderer0.hasFocus());
  }

  @Test
  public void test6()  throws Throwable  {
      TimeList.NotesRenderer timeList_NotesRenderer0 = new TimeList.NotesRenderer();
      // Undeclared exception!
      try {
        timeList_NotesRenderer0.setValue((Object) "graytext");
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * java.lang.String cannot be cast to accessories.plugins.time.TimeList$NotesHolder
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      TimeList timeList0 = new TimeList();
      // Undeclared exception!
      try {
        timeList0.toggleViewFoldedNodes();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      TimeList.NotesRenderer timeList_NotesRenderer0 = new TimeList.NotesRenderer();
      timeList_NotesRenderer0.setValue((Object) null);
      assertEquals(true, timeList_NotesRenderer0.isFontSet());
  }
}
