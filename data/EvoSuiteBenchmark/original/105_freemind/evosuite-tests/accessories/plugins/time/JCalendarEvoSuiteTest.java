/*
 * This file was automatically generated by EvoSuite
 */

package accessories.plugins.time;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import accessories.plugins.time.JCalendar;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import java.awt.Color;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;
import javax.help.FavoritesItem;
import javax.swing.JComponent;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class JCalendarEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      JCalendar jCalendar0 = new JCalendar();
      assertNotNull(jCalendar0);
      
      Color color0 = Color.CYAN;
      jCalendar0.setSundayForeground(color0);
      assertEquals(true, jCalendar0.isWeekOfYearVisible());
      assertEquals("accessories.plugins.time.JCalendar[JCalendar,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", jCalendar0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      JCalendar jCalendar0 = new JCalendar((Date) null, false);
      assertNotNull(jCalendar0);
      
      Date date0 = jCalendar0.getMinSelectableDate();
      assertNotNull(date0);
      
      JCalendar jCalendar1 = new JCalendar(date0);
      assertEquals((-62135765882060L), date0.getTime());
  }

  @Test
  public void test2()  throws Throwable  {
      JCalendar jCalendar0 = new JCalendar((Date) null, (Locale) null);
      assertNotNull(jCalendar0);
      
      Date date0 = jCalendar0.getDate();
      assertNotNull(date0);
      assertEquals(1372733765705L, date0.getTime());
  }

  @Test
  public void test3()  throws Throwable  {
      FavoritesItem favoritesItem0 = new FavoritesItem();
      Locale locale0 = favoritesItem0.getLocale();
      JCalendar jCalendar0 = new JCalendar(locale0, true);
      assertNotNull(jCalendar0);
      assertEquals("accessories.plugins.time.JCalendar[JCalendar,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", jCalendar0.toString());
      assertEquals(true, jCalendar0.isWeekOfYearVisible());
  }

  @Test
  public void test4()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(0, 0, (-1082), 0, 0, 0);
      JCalendar jCalendar0 = new JCalendar((Calendar) gregorianCalendar0);
      jCalendar0.getDecorationBackgroundColor();
      assertEquals("java.util.GregorianCalendar[time=-62260963200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GB-Eire\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=GB-Eire,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=4,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=13,DAY_OF_YEAR=13,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(true, jCalendar0.isWeekOfYearVisible());
  }

  @Test
  public void test5()  throws Throwable  {
      JCalendar jCalendar0 = new JCalendar(false);
      assertNotNull(jCalendar0);
      
      Date date0 = jCalendar0.getMaxSelectableDate();
      assertNotNull(date0);
      
      jCalendar0.setMaxSelectableDate(date0);
      assertEquals(253370768489712L, date0.getTime());
  }

  @Test
  public void test6()  throws Throwable  {
      JCalendar jCalendar0 = new JCalendar();
      assertNotNull(jCalendar0);
      
      Color color0 = Color.darkGray;
      jCalendar0.setDecorationBackgroundColor(color0);
      assertEquals(true, jCalendar0.isWeekOfYearVisible());
      assertEquals("accessories.plugins.time.JCalendar[JCalendar,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", jCalendar0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      JCalendar jCalendar0 = new JCalendar();
      assertNotNull(jCalendar0);
      
      jCalendar0.isDecorationBordersVisible();
      assertEquals(true, jCalendar0.isWeekOfYearVisible());
      assertEquals("accessories.plugins.time.JCalendar[JCalendar,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", jCalendar0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      JCalendar jCalendar0 = new JCalendar();
      assertNotNull(jCalendar0);
      assertEquals(true, jCalendar0.isWeekOfYearVisible());
      
      jCalendar0.setWeekOfYearVisible(false);
      assertEquals(false, jCalendar0.isWeekOfYearVisible());
      assertEquals("accessories.plugins.time.JCalendar[JCalendar,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", jCalendar0.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      JCalendar jCalendar0 = new JCalendar();
      assertNotNull(jCalendar0);
      
      JDayChooser jDayChooser0 = jCalendar0.getDayChooser();
      assertEquals("accessories.plugins.time.JCalendar[JCalendar,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", jCalendar0.toString());
      assertNotNull(jDayChooser0);
      assertEquals(true, jCalendar0.isWeekOfYearVisible());
      assertEquals(2, jDayChooser0.getDay());
      assertEquals(31, jDayChooser0.getDaysInMonth());
  }

  @Test
  public void test10()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      JCalendar jCalendar0 = new JCalendar(locale0);
      assertNotNull(jCalendar0);
      
      Color color0 = jCalendar0.getSundayForeground();
      assertNotNull(color0);
      assertEquals("accessories.plugins.time.JCalendar[JCalendar,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", jCalendar0.toString());
      assertEquals(true, jCalendar0.isWeekOfYearVisible());
  }

  @Test
  public void test11()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      JCalendar jCalendar0 = new JCalendar(locale0);
      assertNotNull(jCalendar0);
      
      Date date0 = jCalendar0.getMinSelectableDate();
      assertNotNull(date0);
      
      jCalendar0.setMinSelectableDate(date0);
      assertEquals((-62135765904126L), date0.getTime());
  }

  @Test
  public void test12()  throws Throwable  {
      Locale locale0 = JComponent.getDefaultLocale();
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance(locale0);
      JCalendar jCalendar0 = new JCalendar((Calendar) gregorianCalendar0);
      jCalendar0.setSelectableDateRange((Date) null, (Date) null);
      assertEquals("java.util.GregorianCalendar[time=1372733797010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GB-Eire\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=GB-Eire,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=3,HOUR_OF_DAY=3,MINUTE=56,SECOND=37,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=3600000]", gregorianCalendar0.toString());
      assertEquals(1372733797010L, gregorianCalendar0.getTimeInMillis());
  }

  @Test
  public void test13()  throws Throwable  {
      JCalendar jCalendar0 = new JCalendar();
      assertNotNull(jCalendar0);
      
      jCalendar0.setMaxDayCharacters(588);
      assertEquals(0, jCalendar0.getMaxDayCharacters());
      assertEquals("accessories.plugins.time.JCalendar[JCalendar,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", jCalendar0.toString());
      assertEquals(true, jCalendar0.isWeekOfYearVisible());
  }

  @Test
  public void test14()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(0, 0, (-1082), 0, 0, 0);
      JCalendar jCalendar0 = new JCalendar((Calendar) gregorianCalendar0);
      jCalendar0.setWeekdayForeground((Color) null);
      assertEquals("java.util.GregorianCalendar[time=-62260963200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GB-Eire\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=GB-Eire,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=4,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=13,DAY_OF_YEAR=13,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
  }

  @Test
  public void test15()  throws Throwable  {
      Locale locale0 = new Locale("oj2-(?9WM<");
      JCalendar jCalendar0 = new JCalendar(locale0);
      assertNotNull(jCalendar0);
      
      boolean boolean0 = jCalendar0.isDecorationBackgroundVisible();
      assertEquals(true, jCalendar0.isWeekOfYearVisible());
      assertEquals(true, boolean0);
      assertEquals("accessories.plugins.time.JCalendar[JCalendar,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", jCalendar0.toString());
  }

  @Test
  public void test16()  throws Throwable  {
      JCalendar jCalendar0 = new JCalendar((Date) null, true);
      assertNotNull(jCalendar0);
      
      jCalendar0.setDecorationBordersVisible(true);
      assertEquals(true, jCalendar0.isDecorationBordersVisible());
      assertEquals("accessories.plugins.time.JCalendar[JCalendar,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", jCalendar0.toString());
  }

  @Test
  public void test17()  throws Throwable  {
      JCalendar jCalendar0 = new JCalendar((Date) null, false);
      assertNotNull(jCalendar0);
      
      jCalendar0.setEnabled(false);
      assertEquals(false, jCalendar0.isEnabled());
      assertEquals("accessories.plugins.time.JCalendar[JCalendar,0,0,0x0,invalid,disabled,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", jCalendar0.toString());
  }

  @Test
  public void test18()  throws Throwable  {
      JCalendar jCalendar0 = new JCalendar();
      assertNotNull(jCalendar0);
      
      jCalendar0.getMaxDayCharacters();
      assertEquals(true, jCalendar0.isWeekOfYearVisible());
      assertEquals("accessories.plugins.time.JCalendar[JCalendar,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", jCalendar0.toString());
  }

  @Test
  public void test19()  throws Throwable  {
      JCalendar jCalendar0 = new JCalendar((Date) null, true);
      assertNotNull(jCalendar0);
      
      boolean boolean0 = jCalendar0.isWeekOfYearVisible();
      assertEquals("accessories.plugins.time.JCalendar[JCalendar,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", jCalendar0.toString());
      assertEquals(true, boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      JCalendar jCalendar0 = new JCalendar((Date) null, (Locale) null);
      assertNotNull(jCalendar0);
      
      Locale locale0 = jCalendar0.getLocale();
      assertEquals(true, jCalendar0.isWeekOfYearVisible());
      assertEquals("accessories.plugins.time.JCalendar[JCalendar,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", jCalendar0.toString());
      assertNotNull(locale0);
  }

  @Test
  public void test21()  throws Throwable  {
      JCalendar jCalendar0 = new JCalendar();
      assertNotNull(jCalendar0);
      
      Color color0 = jCalendar0.getWeekdayForeground();
      assertEquals("accessories.plugins.time.JCalendar[JCalendar,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", jCalendar0.toString());
      assertEquals(true, jCalendar0.isWeekOfYearVisible());
      assertNotNull(color0);
  }

  @Test
  public void test22()  throws Throwable  {
      JCalendar jCalendar0 = null;
      try {
        jCalendar0 = new JCalendar((Calendar) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test23()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      JCalendar jCalendar0 = new JCalendar(locale0);
      assertNotNull(jCalendar0);
      
      JYearChooser jYearChooser0 = jCalendar0.getYearChooser();
      assertNotNull(jYearChooser0);
      assertEquals(true, jCalendar0.isWeekOfYearVisible());
      assertEquals(2013, jYearChooser0.getValue());
      assertEquals("accessories.plugins.time.JCalendar[JCalendar,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", jCalendar0.toString());
  }

  @Test
  public void test24()  throws Throwable  {
      JCalendar jCalendar0 = new JCalendar();
      assertNotNull(jCalendar0);
      
      JMonthChooser jMonthChooser0 = jCalendar0.getMonthChooser();
      assertNotNull(jMonthChooser0);
      assertEquals(true, jMonthChooser0.hasSpinner());
      assertEquals("accessories.plugins.time.JCalendar[JCalendar,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", jCalendar0.toString());
      assertEquals(6, jMonthChooser0.getMonth());
      assertEquals(true, jCalendar0.isWeekOfYearVisible());
  }

  @Test
  public void test25()  throws Throwable  {
      JCalendar jCalendar0 = new JCalendar((Date) null, (Locale) null);
      assertNotNull(jCalendar0);
      
      jCalendar0.setDecorationBackgroundVisible(true);
      assertEquals(true, jCalendar0.isDecorationBackgroundVisible());
      assertEquals(true, jCalendar0.isWeekOfYearVisible());
      assertEquals("accessories.plugins.time.JCalendar[JCalendar,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", jCalendar0.toString());
  }

  @Test
  public void test26()  throws Throwable  {
      JCalendar jCalendar0 = new JCalendar();
      assertNotNull(jCalendar0);
      
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)jCalendar0.getCalendar();
      assertEquals("java.util.GregorianCalendar[time=1372733842676,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GB-Eire\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=GB-Eire,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=3,HOUR_OF_DAY=3,MINUTE=57,SECOND=22,MILLISECOND=676,ZONE_OFFSET=0,DST_OFFSET=3600000]", gregorianCalendar0.toString());
      assertNotNull(gregorianCalendar0);
  }

  @Test
  public void test27()  throws Throwable  {
      Locale locale0 = new Locale("oj2-(?9WM<");
      JCalendar jCalendar0 = new JCalendar(locale0);
      assertNotNull(jCalendar0);
      
      jCalendar0.updateUI();
      assertEquals("accessories.plugins.time.JCalendar[JCalendar,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", jCalendar0.toString());
      assertEquals(true, jCalendar0.isWeekOfYearVisible());
  }
}
