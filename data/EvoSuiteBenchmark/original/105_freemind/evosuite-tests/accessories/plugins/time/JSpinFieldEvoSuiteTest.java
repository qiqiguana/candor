/*
 * This file was automatically generated by EvoSuite
 */

package accessories.plugins.time;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import accessories.plugins.time.JSpinField;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.FocusEvent;
import javax.swing.JSeparator;
import javax.swing.event.ChangeEvent;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Element;
import javax.swing.text.IconView;
import javax.swing.text.PlainDocument;
import javax.swing.text.StyleContext;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class JSpinFieldEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      JSpinField jSpinField0 = new JSpinField();
      assertNotNull(jSpinField0);
      
      Dimension dimension0 = jSpinField0.getPreferredSize();
      assertEquals(-2147483648, jSpinField0.getMinimum());
      assertEquals("accessories.plugins.time.JSpinField[JSpinField,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", jSpinField0.toString());
      assertEquals(0, jSpinField0.getValue());
      assertEquals(2147483647, jSpinField0.getMaximum());
      assertEquals("java.awt.Dimension[width=28,height=19]", dimension0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      JSpinField jSpinField0 = new JSpinField();
      assertNotNull(jSpinField0);
      
      FocusEvent focusEvent0 = new FocusEvent((Component) jSpinField0, 7);
      jSpinField0.focusGained(focusEvent0);
      assertEquals(2147483647, jSpinField0.getMaximum());
      assertEquals("accessories.plugins.time.JSpinField[JSpinField,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", jSpinField0.toString());
      assertEquals(-2147483648, jSpinField0.getMinimum());
      assertEquals(0, jSpinField0.getValue());
  }

  @Test
  public void test2()  throws Throwable  {
      JSpinField jSpinField0 = new JSpinField((-130), (-130));
      assertNotNull(jSpinField0);
      
      // Undeclared exception!
      try {
        jSpinField0.setHorizontalAlignment(1566);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * horizontalAlignment
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      JSpinField jSpinField0 = new JSpinField();
      assertNotNull(jSpinField0);
      
      int int0 = jSpinField0.getMaximum();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(0, jSpinField0.getValue());
      assertEquals(-2147483648, jSpinField0.getMinimum());
  }

  @Test
  public void test4()  throws Throwable  {
      JSpinField jSpinField0 = new JSpinField();
      assertNotNull(jSpinField0);
      
      int int0 = jSpinField0.getValue();
      assertEquals(-2147483648, jSpinField0.getMinimum());
      assertEquals(2147483647, jSpinField0.getMaximum());
      assertEquals(0, int0);
      assertEquals("accessories.plugins.time.JSpinField[JSpinField,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", jSpinField0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      JSpinField jSpinField0 = new JSpinField((-1), (-83));
      assertNotNull(jSpinField0);
      
      ChangeEvent changeEvent0 = new ChangeEvent((Object) "lighten");
      jSpinField0.stateChanged(changeEvent0);
      assertEquals(-1, jSpinField0.getValue());
      assertEquals(-1, jSpinField0.getMinimum());
  }

  @Test
  public void test6()  throws Throwable  {
      JSpinField jSpinField0 = new JSpinField();
      assertNotNull(jSpinField0);
      
      jSpinField0.setMaximum(0);
      assertEquals(0, jSpinField0.getMaximum());
      assertEquals(-2147483648, jSpinField0.getMinimum());
  }

  @Test
  public void test7()  throws Throwable  {
      JSpinField jSpinField0 = new JSpinField(520, 712);
      assertNotNull(jSpinField0);
      
      int int0 = jSpinField0.getMinimum();
      assertEquals(712, jSpinField0.getMaximum());
      assertEquals(520, int0);
      assertEquals(520, jSpinField0.getValue());
      assertEquals("accessories.plugins.time.JSpinField[JSpinField,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", jSpinField0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      JSpinField jSpinField0 = new JSpinField((-17), (-17));
      assertNotNull(jSpinField0);
      
      JSeparator jSeparator0 = new JSeparator();
      FocusEvent focusEvent0 = new FocusEvent((Component) jSeparator0, (-17), false);
      jSpinField0.focusLost(focusEvent0);
      assertEquals("accessories.plugins.time.JSpinField[JSpinField,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", jSpinField0.toString());
      assertEquals(-17, jSpinField0.getMaximum());
      assertEquals(-17, jSpinField0.getMinimum());
      assertEquals(-17, jSpinField0.getValue());
  }

  @Test
  public void test9()  throws Throwable  {
      JSpinField jSpinField0 = new JSpinField();
      assertNotNull(jSpinField0);
      
      jSpinField0.adjustWidthToMaximumValue();
      assertEquals(-2147483648, jSpinField0.getMinimum());
      assertEquals("accessories.plugins.time.JSpinField[JSpinField,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", jSpinField0.toString());
      assertEquals(0, jSpinField0.getValue());
      assertEquals(2147483647, jSpinField0.getMaximum());
  }

  @Test
  public void test10()  throws Throwable  {
      JSpinField jSpinField0 = new JSpinField();
      assertNotNull(jSpinField0);
      
      jSpinField0.getSpinner();
      assertEquals(0, jSpinField0.getValue());
      assertEquals("accessories.plugins.time.JSpinField[JSpinField,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", jSpinField0.toString());
      assertEquals(-2147483648, jSpinField0.getMinimum());
      assertEquals(2147483647, jSpinField0.getMaximum());
  }

  @Test
  public void test11()  throws Throwable  {
      JSpinField jSpinField0 = new JSpinField();
      assertNotNull(jSpinField0);
      
      jSpinField0.setMinimum(10003);
      assertEquals(10003, jSpinField0.getMinimum());
      assertEquals(0, jSpinField0.getValue());
  }

  @Test
  public void test12()  throws Throwable  {
      JSpinField jSpinField0 = new JSpinField(520, 712);
      assertNotNull(jSpinField0);
      
      ChangeEvent changeEvent0 = new ChangeEvent((Object) "bias");
      jSpinField0.stateChanged(changeEvent0);
      assertEquals("accessories.plugins.time.JSpinField[JSpinField,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", jSpinField0.toString());
      assertEquals(712, jSpinField0.getMaximum());
      assertEquals(520, jSpinField0.getValue());
  }

  @Test
  public void test13()  throws Throwable  {
      JSpinField jSpinField0 = new JSpinField();
      assertNotNull(jSpinField0);
      
      jSpinField0.setValue(10003, false, false);
      assertEquals(10003, jSpinField0.getValue());
      assertEquals(-2147483648, jSpinField0.getMinimum());
  }

  @Test
  public void test14()  throws Throwable  {
      JSpinField jSpinField0 = new JSpinField();
      assertNotNull(jSpinField0);
      
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      assertEquals("{points=AttributeSet,default=AttributeSet,}\n{resolver=AttributeSet,name=points,}\n{}\n{family=Dialog,foreground=sun.swing.PrintColorUIResource[r=51,g=51,b=51],size=12,FONT_ATTRIBUTE_KEY=javax.swing.plaf.FontUIResource[family=Dialog,name=Dialog,style=plain,size=12],name=default,italic=false,bold=false,}\n{bidiLevel=0,}\n", styleContext0.toString());
      
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      PlainDocument plainDocument0 = new PlainDocument();
      Element element0 = plainDocument0.getBidiRootElement();
      IconView iconView0 = new IconView(element0);
      AttributeSet attributeSet0 = iconView0.getAttributes();
      Font font0 = defaultStyledDocument0.getFont(attributeSet0);
      jSpinField0.setFont(font0);
      assertEquals(0, jSpinField0.getValue());
  }

  @Test
  public void test15()  throws Throwable  {
      JSpinField jSpinField0 = new JSpinField();
      assertNotNull(jSpinField0);
      
      jSpinField0.setForeground((Color) null);
      assertEquals("JSpinField", jSpinField0.getName());
      assertEquals(2147483647, jSpinField0.getMaximum());
      assertEquals(-2147483648, jSpinField0.getMinimum());
      assertEquals(0, jSpinField0.getValue());
  }

  @Test
  public void test16()  throws Throwable  {
      JSpinField jSpinField0 = new JSpinField();
      assertNotNull(jSpinField0);
      
      jSpinField0.setEnabled(true);
      assertEquals(2147483647, jSpinField0.getMaximum());
      assertEquals(0, jSpinField0.getValue());
      assertEquals(-2147483648, jSpinField0.getMinimum());
      assertEquals("accessories.plugins.time.JSpinField[JSpinField,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", jSpinField0.toString());
  }

  @Test
  public void test17()  throws Throwable  {
      JSpinField jSpinField0 = new JSpinField();
      assertNotNull(jSpinField0);
      
      jSpinField0.setEnabled(false);
      assertEquals(false, jSpinField0.isEnabled());
      assertEquals(-2147483648, jSpinField0.getMinimum());
  }
}
