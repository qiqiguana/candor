/*
 * This file was automatically generated by EvoSuite
 */

package accessories.plugins.time;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import accessories.plugins.time.FlatNodeTableFilterModel;
import java.util.Vector;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class FlatNodeTableFilterModelEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      FlatNodeTableFilterModel flatNodeTableFilterModel0 = new FlatNodeTableFilterModel((TableModel) defaultTableModel0, 8028);
      int int0 = flatNodeTableFilterModel0.getColumnCount();
      assertEquals(0, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      JTable jTable0 = new JTable();
      DefaultTableModel defaultTableModel0 = (DefaultTableModel)jTable0.getModel();
      FlatNodeTableFilterModel flatNodeTableFilterModel0 = new FlatNodeTableFilterModel((TableModel) defaultTableModel0, 10096);
      assertNotNull(flatNodeTableFilterModel0);
      
      String string0 = flatNodeTableFilterModel0.getColumnName(10096);
      assertEquals("NXI", string0);
      assertNotNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      FlatNodeTableFilterModel flatNodeTableFilterModel0 = new FlatNodeTableFilterModel((TableModel) defaultTableModel0, 8028);
      // Undeclared exception!
      try {
        flatNodeTableFilterModel0.getValueAt(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Illegal Row specified: 0
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      FlatNodeTableFilterModel flatNodeTableFilterModel0 = new FlatNodeTableFilterModel((TableModel) defaultTableModel0, 8712);
      Class<Object> class0 = flatNodeTableFilterModel0.getColumnClass(8712);
      assertEquals(false, class0.isEnum());
  }

  @Test
  public void test4()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      FlatNodeTableFilterModel flatNodeTableFilterModel0 = new FlatNodeTableFilterModel((TableModel) defaultTableModel0, 8712);
      defaultTableModel0.addColumn((Object) "feBlend");
      assertEquals(1, defaultTableModel0.getColumnCount());
  }

  @Test
  public void test5()  throws Throwable  {
      Object[] objectArray0 = new Object[13];
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, 1383);
      FlatNodeTableFilterModel flatNodeTableFilterModel0 = null;
      try {
        flatNodeTableFilterModel0 = new FlatNodeTableFilterModel((TableModel) defaultTableModel0, 1383);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 1383 >= 13
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel((Vector) null, 0);
      FlatNodeTableFilterModel flatNodeTableFilterModel0 = new FlatNodeTableFilterModel((TableModel) defaultTableModel0, 0);
      // Undeclared exception!
      try {
        flatNodeTableFilterModel0.getValueAt((-1), 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Illegal Row specified: -1
         */
      }
  }
}
