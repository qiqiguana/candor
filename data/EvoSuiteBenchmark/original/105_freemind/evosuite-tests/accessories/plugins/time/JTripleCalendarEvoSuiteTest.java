/*
 * This file was automatically generated by EvoSuite
 */

package accessories.plugins.time;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JTripleCalendar;
import accessories.plugins.time.JYearChooser;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class JTripleCalendarEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      JTripleCalendar jTripleCalendar0 = new JTripleCalendar();
      assertNotNull(jTripleCalendar0);
      
      // Undeclared exception!
      try {
        jTripleCalendar0.setCalendar((Calendar) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      JTripleCalendar jTripleCalendar0 = new JTripleCalendar();
      assertNotNull(jTripleCalendar0);
      
      JYearChooser jYearChooser0 = jTripleCalendar0.getYearChooser();
      assertEquals("accessories.plugins.time.JTripleCalendar[JTripleCalendar,0,0,0x0,invalid,layout=java.awt.GridLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", jTripleCalendar0.toString());
      assertNotNull(jYearChooser0);
      assertEquals(3, jTripleCalendar0.countComponents());
      assertEquals(3, jTripleCalendar0.getComponentCount());
  }

  @Test
  public void test2()  throws Throwable  {
      JTripleCalendar jTripleCalendar0 = new JTripleCalendar();
      assertNotNull(jTripleCalendar0);
      
      JDayChooser jDayChooser0 = jTripleCalendar0.getDayChooser();
      assertNotNull(jDayChooser0);
      assertEquals("accessories.plugins.time.JTripleCalendar[JTripleCalendar,0,0,0x0,invalid,layout=java.awt.GridLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", jTripleCalendar0.toString());
      assertEquals(3, jTripleCalendar0.getComponentCount());
  }

  @Test
  public void test3()  throws Throwable  {
      JTripleCalendar jTripleCalendar0 = new JTripleCalendar();
      assertNotNull(jTripleCalendar0);
      
      jTripleCalendar0.addNotify();
      assertEquals(3, jTripleCalendar0.countComponents());
      assertEquals(3, jTripleCalendar0.getComponentCount());
  }

  @Test
  public void test4()  throws Throwable  {
      JTripleCalendar jTripleCalendar0 = new JTripleCalendar();
      assertNotNull(jTripleCalendar0);
      
      Date date0 = jTripleCalendar0.getDate();
      assertNotNull(date0);
      
      jTripleCalendar0.setDate(date0);
      assertEquals(1372736203942L, date0.getTime());
      assertEquals(3, jTripleCalendar0.getComponentCount());
  }

  @Test
  public void test5()  throws Throwable  {
      JTripleCalendar jTripleCalendar0 = new JTripleCalendar();
      assertNotNull(jTripleCalendar0);
      
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)jTripleCalendar0.getCalendar();
      assertNotNull(gregorianCalendar0);
      assertEquals(1372736205661L, gregorianCalendar0.getTimeInMillis());
  }
}
