/*
 * This file was automatically generated by EvoSuite
 */

package accessories.plugins;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import accessories.plugins.ClonePlugin;
import freemind.main.XMLElement;
import freemind.modes.MindMapNode;
import freemind.modes.mindmapmode.actions.xml.ActionPair;
import freemind.view.mindmapview.NodeView;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import plugins.collaboration.socket.MindMapClient;

@RunWith(EvoSuiteRunner.class)
public class ClonePluginEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      ClonePlugin clonePlugin0 = new ClonePlugin();
      clonePlugin0.onPreDeleteNode((MindMapNode) null);
      assertNull(clonePlugin0.getName());
  }

  @Test
  public void test1()  throws Throwable  {
      ClonePlugin clonePlugin0 = new ClonePlugin();
      clonePlugin0.onSaveNode((MindMapNode) null);
      assertNull(clonePlugin0.getName());
  }

  @Test
  public void test2()  throws Throwable  {
      ClonePlugin clonePlugin0 = new ClonePlugin();
      clonePlugin0.clearCloneCache();
      // Undeclared exception!
      try {
        clonePlugin0.getCloneNodes();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      ClonePlugin clonePlugin0 = new ClonePlugin();
      // Undeclared exception!
      try {
        clonePlugin0.onFocusNode((NodeView) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      ClonePlugin clonePlugin0 = new ClonePlugin();
      clonePlugin0.onPostDeleteNode((MindMapNode) null, (MindMapNode) null);
      assertNull(clonePlugin0.getName());
  }

  @Test
  public void test5()  throws Throwable  {
      ClonePlugin clonePlugin0 = new ClonePlugin();
      // Undeclared exception!
      try {
        clonePlugin0.addClone((MindMapNode) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      ClonePlugin clonePlugin0 = new ClonePlugin();
      XMLElement xMLElement0 = new XMLElement();
      // Undeclared exception!
      try {
        clonePlugin0.save(xMLElement0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      ClonePlugin clonePlugin0 = new ClonePlugin();
      clonePlugin0.onUpdateNodeHook((MindMapNode) null);
      assertNull(clonePlugin0.getName());
  }

  @Test
  public void test8()  throws Throwable  {
      ClonePlugin clonePlugin0 = new ClonePlugin();
      // Undeclared exception!
      try {
        clonePlugin0.onLostFocusNode((NodeView) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      ClonePlugin clonePlugin0 = new ClonePlugin();
      clonePlugin0.onSelectionChange((NodeView) null, true);
      assertNull(clonePlugin0.getName());
  }

  @Test
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          ClonePlugin clonePlugin0 = new ClonePlugin();
          MindMapClient mindMapClient0 = new MindMapClient();
          ActionPair actionPair0 = mindMapClient0.getEmptyActionPair();
          ActionPair actionPair1 = clonePlugin0.filterAction(actionPair0);
          assertSame(actionPair1, actionPair0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test11()  throws Throwable  {
      ClonePlugin clonePlugin0 = new ClonePlugin();
      // Undeclared exception!
      try {
        clonePlugin0.shutdownMapHook();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      ClonePlugin clonePlugin0 = new ClonePlugin();
      // Undeclared exception!
      try {
        clonePlugin0.invoke((MindMapNode) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      ClonePlugin clonePlugin0 = new ClonePlugin();
      // Undeclared exception!
      try {
        clonePlugin0.onCreateNodeHook((MindMapNode) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
