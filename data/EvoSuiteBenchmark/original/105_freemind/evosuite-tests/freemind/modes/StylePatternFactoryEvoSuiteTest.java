/*
 * This file was automatically generated by EvoSuite
 */

package freemind.modes;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import freemind.common.TextTranslator;
import freemind.controller.actions.generated.instance.Pattern;
import freemind.controller.actions.generated.instance.PatternEdgeStyle;
import freemind.controller.actions.generated.instance.PatternNodeFontSize;
import freemind.controller.actions.generated.instance.Patterns;
import freemind.modes.StylePatternFactory;
import freemind.modes.browsemode.BrowseHookFactory;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileReader;
import java.io.Reader;
import java.io.Writer;
import java.util.List;
import java.util.Vector;
import org.jibx.runtime.JiBXException;
import org.jibx.runtime.impl.UnmarshallingContext;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class StylePatternFactoryEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      StylePatternFactory stylePatternFactory0 = new StylePatternFactory();
      assertNotNull(stylePatternFactory0);
  }

  @Test
  public void test1()  throws Throwable  {
      try {
        StylePatternFactory.loadPatterns((File) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * name can't be null
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileReader fileReader0 = new FileReader(fileDescriptor0);
      try {
        StylePatternFactory.loadPatterns((Reader) fileReader0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      BrowseHookFactory browseHookFactory0 = new BrowseHookFactory();
      Vector<Object> vector0 = browseHookFactory0.getPossibleNodeHooks();
      vector0.add((Object) null);
      try {
        StylePatternFactory.savePatterns((Writer) null, (List) vector0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      Pattern pattern0 = new Pattern();
      PatternEdgeStyle patternEdgeStyle0 = PatternEdgeStyle.JiBX_binding_newinstance_2_0((UnmarshallingContext) null);
      pattern0.setPatternEdgeStyle(patternEdgeStyle0);
      // Undeclared exception!
      try {
        StylePatternFactory.toString(pattern0, (TextTranslator) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      Pattern pattern0 = new Pattern();
      PatternEdgeStyle patternEdgeStyle0 = PatternEdgeStyle.JiBX_binding_newinstance_2_0((UnmarshallingContext) null);
      pattern0.setPatternEdgeStyle(patternEdgeStyle0);
      patternEdgeStyle0.setValue("");
      // Undeclared exception!
      try {
        StylePatternFactory.toString(pattern0, (TextTranslator) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      Pattern pattern0 = StylePatternFactory.getPatternFromString("");
      assertNull(pattern0);
  }

  @Test
  public void test7()  throws Throwable  {
      Patterns patterns0 = StylePatternFactory.getPatternsFromString("");
      assertNull(patterns0);
  }

  @Test
  public void test8()  throws Throwable  {
      Patterns patterns0 = StylePatternFactory.getPatternsFromString((String) null);
      assertEquals(0, patterns0.sizeChoiceList());
  }

  @Test
  public void test9()  throws Throwable  {
      Pattern pattern0 = StylePatternFactory.getPatternFromString((String) null);
      PatternNodeFontSize patternNodeFontSize0 = new PatternNodeFontSize();
      pattern0.setPatternNodeFontSize(patternNodeFontSize0);
      Pattern pattern1 = StylePatternFactory.intersectPattern(pattern0, pattern0);
      assertNull(pattern1.getName());
  }
}
