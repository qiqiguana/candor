/*
 * This file was automatically generated by EvoSuite
 */

package freemind.modes;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import freemind.main.XMLElement;
import freemind.modes.MindIcon;
import freemind.modes.StylePattern;
import java.awt.Color;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.List;
import org.apache.batik.gvt.renderer.StrokingTextPainter;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class StylePatternEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      XMLElement xMLElement0 = new XMLElement(true);
      StylePattern stylePattern0 = new StylePattern(xMLElement0, (List) null);
      assertNotNull(stylePattern0);
      
      stylePattern0.getNodeBackgroundColor();
      assertEquals(false, stylePattern0.getRecursive());
  }

  @Test
  public void test1()  throws Throwable  {
      StylePattern stylePattern0 = new StylePattern();
      String string0 = stylePattern0.getNodeStyle();
      assertNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      StylePattern stylePattern0 = new StylePattern();
      stylePattern0.setNodeFontItalic((Boolean) null);
      assertNull(stylePattern0.getNodeStyle());
  }

  @Test
  public void test3()  throws Throwable  {
      StylePattern stylePattern0 = new StylePattern();
      stylePattern0.setChildrenStylePattern((StylePattern) null);
      assertEquals(false, stylePattern0.getAppliesToChildren());
  }

  @Test
  public void test4()  throws Throwable  {
      StylePattern stylePattern0 = new StylePattern();
      assertEquals(false, stylePattern0.getAppliesToEdge());
      
      Integer integer0 = StrokingTextPainter.ADJUST_SPACING;
      stylePattern0.setEdgeWidth(integer0);
      boolean boolean0 = stylePattern0.getAppliesToEdge();
      assertEquals(true, stylePattern0.getAppliesToEdge());
      assertEquals(true, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      StylePattern stylePattern0 = new StylePattern();
      String string0 = stylePattern0.getText();
      assertNull(string0);
  }

  @Test
  public void test6()  throws Throwable  {
      StylePattern stylePattern0 = new StylePattern();
      String string0 = stylePattern0.getName();
      assertNull(string0);
  }

  @Test
  public void test7()  throws Throwable  {
      StylePattern stylePattern0 = new StylePattern();
      stylePattern0.setText((String) null);
      assertEquals(false, stylePattern0.getAppliesToNodeIcon());
  }

  @Test
  public void test8()  throws Throwable  {
      StylePattern stylePattern0 = new StylePattern();
      boolean boolean0 = stylePattern0.getRecursive();
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      StylePattern stylePattern0 = new StylePattern();
      stylePattern0.getNodeFontSize();
  }

  @Test
  public void test10()  throws Throwable  {
      StylePattern stylePattern0 = new StylePattern();
      stylePattern0.setNodeFontSize((Integer) null);
      assertNull(stylePattern0.getNodeFontFamily());
  }

  @Test
  public void test11()  throws Throwable  {
      StylePattern stylePattern0 = new StylePattern();
      Color color0 = stylePattern0.getEdgeColor();
      assertNull(color0);
  }

  @Test
  public void test12()  throws Throwable  {
      StylePattern stylePattern0 = new StylePattern();
      stylePattern0.setNodeBackgroundColor((Color) null);
      assertEquals(false, stylePattern0.getAppliesToNodeIcon());
  }

  @Test
  public void test13()  throws Throwable  {
      StylePattern stylePattern0 = new StylePattern();
      String string0 = stylePattern0.toString();
      assertNotNull(string0);
      assertEquals("node: null, null, null, null, null, null, null, \nedge: null, null, null", string0);
  }

  @Test
  public void test14()  throws Throwable  {
      StylePattern stylePattern0 = new StylePattern();
      stylePattern0.getNodeFontBold();
  }

  @Test
  public void test15()  throws Throwable  {
      File file0 = new File("foreignObject", "foreignObject");
      try {
        StylePattern.loadPatterns(file0);
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
        /*
         * foreignObject/foreignObject (No such file or directory)
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      StylePattern stylePattern0 = new StylePattern();
      stylePattern0.getEdgeWidth();
  }

  @Test
  public void test17()  throws Throwable  {
      StylePattern stylePattern0 = new StylePattern();
      stylePattern0.getNodeFontItalic();
  }

  @Test
  public void test18()  throws Throwable  {
      XMLElement xMLElement0 = new XMLElement(true);
      StylePattern stylePattern0 = new StylePattern(xMLElement0, (List) null);
      assertNotNull(stylePattern0);
      assertEquals(false, stylePattern0.getRecursive());
      
      stylePattern0.setRecursive(true);
      assertEquals(true, stylePattern0.getRecursive());
  }

  @Test
  public void test19()  throws Throwable  {
      StylePattern stylePattern0 = new StylePattern();
      Color color0 = stylePattern0.getNodeColor();
      assertNull(color0);
  }

  @Test
  public void test20()  throws Throwable  {
      StylePattern stylePattern0 = new StylePattern();
      stylePattern0.setNodeColor((Color) null);
      assertNull(stylePattern0.getName());
  }

  @Test
  public void test21()  throws Throwable  {
      StylePattern stylePattern0 = new StylePattern();
      stylePattern0.setName((String) null);
      assertNull(stylePattern0.getEdgeStyle());
  }

  @Test
  public void test22()  throws Throwable  {
      StylePattern stylePattern0 = new StylePattern();
      MindIcon mindIcon0 = stylePattern0.getNodeIcon();
      assertNull(mindIcon0);
  }

  @Test
  public void test23()  throws Throwable  {
      StylePattern stylePattern0 = new StylePattern();
      stylePattern0.setEdgeStyle("_~s}~&");
      assertNull(stylePattern0.getName());
  }

  @Test
  public void test24()  throws Throwable  {
      XMLElement xMLElement0 = new XMLElement(true);
      StylePattern stylePattern0 = new StylePattern(xMLElement0, (List) null);
      assertNotNull(stylePattern0);
      
      stylePattern0.getEdgeStyle();
      assertEquals(false, stylePattern0.getRecursive());
  }

  @Test
  public void test25()  throws Throwable  {
      StylePattern stylePattern0 = new StylePattern();
      StylePattern stylePattern1 = stylePattern0.getChildrenStylePattern();
      assertNull(stylePattern1);
  }

  @Test
  public void test26()  throws Throwable  {
      StylePattern stylePattern0 = new StylePattern();
      String string0 = stylePattern0.getNodeFontFamily();
      assertNull(string0);
  }

  @Test
  public void test27()  throws Throwable  {
      StylePattern stylePattern0 = new StylePattern();
      stylePattern0.setEdgeColor((Color) null);
      assertNull(stylePattern0.getNodeStyle());
  }

  @Test
  public void test28()  throws Throwable  {
      StylePattern stylePattern0 = new StylePattern();
      assertEquals(false, stylePattern0.getAppliesToNodeFont());
      
      stylePattern0.setNodeFontFamily("");
      boolean boolean0 = stylePattern0.getAppliesToNodeFont();
      assertEquals(true, stylePattern0.getAppliesToNodeFont());
      assertEquals(true, boolean0);
  }

  @Test
  public void test29()  throws Throwable  {
      StylePattern stylePattern0 = new StylePattern();
      stylePattern0.setNodeFontBold((Boolean) null);
      assertNull(stylePattern0.getText());
  }

  @Test
  public void test30()  throws Throwable  {
      StylePattern stylePattern0 = new StylePattern();
      assertEquals(false, stylePattern0.getAppliesToNode());
      
      stylePattern0.setNodeStyle("{0} attribute value not found ");
      boolean boolean0 = stylePattern0.getAppliesToNode();
      assertEquals(true, stylePattern0.getAppliesToNode());
      assertEquals(true, boolean0);
  }

  @Test
  public void test31()  throws Throwable  {
      StylePattern stylePattern0 = new StylePattern();
      stylePattern0.setNodeIcon((MindIcon) null);
      assertNull(stylePattern0.getName());
  }

  @Test
  public void test32()  throws Throwable  {
      StylePattern stylePattern0 = new StylePattern();
      boolean boolean0 = stylePattern0.getAppliesToEdge();
      assertEquals(false, boolean0);
  }

  @Test
  public void test33()  throws Throwable  {
      StylePattern stylePattern0 = new StylePattern();
      boolean boolean0 = stylePattern0.getAppliesToNode();
      assertEquals(false, boolean0);
  }

  @Test
  public void test34()  throws Throwable  {
      StylePattern stylePattern0 = new StylePattern();
      boolean boolean0 = stylePattern0.getAppliesToNodeFont();
      assertEquals(false, boolean0);
  }

  @Test
  public void test35()  throws Throwable  {
      StylePattern stylePattern0 = new StylePattern();
      boolean boolean0 = stylePattern0.getAppliesToNodeIcon();
      assertEquals(false, boolean0);
  }

  @Test
  public void test36()  throws Throwable  {
      StylePattern stylePattern0 = new StylePattern();
      boolean boolean0 = stylePattern0.getAppliesToChildren();
      assertEquals(false, boolean0);
  }
}
