/*
 * This file was automatically generated by EvoSuite
 */

package freemind.main;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import freemind.main.XMLElement;
import freemind.main.XMLParseException;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.Vector;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class XMLElementEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Hashtable<Vector<XMLElement>, XMLElement> hashtable0 = new Hashtable<Vector<XMLElement>, XMLElement>();
      XMLElement xMLElement0 = new XMLElement((Hashtable) hashtable0, true, true, true);
      assertEquals(false, hashtable0.isEmpty());
      
      StringWriter stringWriter0 = new StringWriter(103);
      xMLElement0.writeClosingTag((Writer) stringWriter0);
      assertEquals("</null>\n", stringWriter0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      Hashtable<Double, XMLElement> hashtable0 = new Hashtable<Double, XMLElement>();
      XMLElement xMLElement0 = new XMLElement((Hashtable) hashtable0, false);
      assertEquals(5, hashtable0.size());
      
      try {
        xMLElement0.parseString(" U)hnF)J*`RCE");
        fail("Expecting exception: XMLParseException");
      } catch(XMLParseException e) {
        /*
         * XML Parse Exception during parsing of the XML definition at line 1: Expected: <
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      Hashtable<Double, String> hashtable0 = new Hashtable<Double, String>();
      XMLElement xMLElement0 = new XMLElement((Hashtable) hashtable0, true, true);
      assertEquals(false, hashtable0.isEmpty());
      
      int int0 = xMLElement0.getIntAttribute("");
      assertEquals(0, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      XMLElement xMLElement0 = new XMLElement(false);
      assertNotNull(xMLElement0);
      
      xMLElement0.getAttribute("");
      assertEquals(0, xMLElement0.getLineNr());
  }

  @Test
  public void test4()  throws Throwable  {
      Hashtable<Double, XMLElement> hashtable0 = new Hashtable<Double, XMLElement>();
      XMLElement xMLElement0 = new XMLElement((Hashtable) hashtable0, true);
      assertEquals(false, hashtable0.isEmpty());
      
      xMLElement0.unreadChar('e');
      // Undeclared exception!
      try {
        xMLElement0.skipComment();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      Hashtable<Integer, Integer> hashtable0 = new Hashtable<Integer, Integer>();
      XMLElement xMLElement0 = new XMLElement((Hashtable) hashtable0, true, true, false);
      assertEquals(false, hashtable0.isEmpty());
      
      // Undeclared exception!
      try {
        xMLElement0.getIntAttribute("kQd6M=", (Hashtable) hashtable0, "kQd6M=", false);
        fail("Expecting exception: XMLParseException");
      } catch(XMLParseException e) {
        /*
         * XML Parse Exception during parsing of the XML definition at line 0: Attribute \"kQd6M=\" does not contain a valid value (\"kQd6M=\")
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      Hashtable<Object, XMLElement> hashtable0 = new Hashtable<Object, XMLElement>();
      XMLElement xMLElement0 = new XMLElement((Hashtable) hashtable0, false, false, false);
      assertNotNull(xMLElement0);
      
      // Undeclared exception!
      try {
        xMLElement0.getStringProperty((String) null, (Hashtable) hashtable0, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      Hashtable<Integer, Double> hashtable0 = new Hashtable<Integer, Double>();
      XMLElement xMLElement0 = new XMLElement((Hashtable) hashtable0, false, false, true);
      assertNotNull(xMLElement0);
      
      PipedReader pipedReader0 = new PipedReader();
      try {
        xMLElement0.parseFromReader((Reader) pipedReader0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Pipe not connected
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      Hashtable<String, XMLElement> hashtable0 = new Hashtable<String, XMLElement>();
      XMLElement xMLElement0 = new XMLElement((Hashtable) hashtable0, false, false, false);
      assertNotNull(xMLElement0);
      
      xMLElement0.countChildren();
      assertEquals(0, xMLElement0.getLineNr());
  }

  @Test
  public void test9()  throws Throwable  {
      Hashtable<String, Integer> hashtable0 = new Hashtable<String, Integer>();
      XMLElement xMLElement0 = new XMLElement(hashtable0);
      assertEquals(false, hashtable0.isEmpty());
      
      xMLElement0.completeElement();
      assertEquals(0, xMLElement0.getLineNr());
  }

  @Test
  public void test10()  throws Throwable  {
      Hashtable<String, Integer> hashtable0 = new Hashtable<String, Integer>();
      XMLElement xMLElement0 = new XMLElement(hashtable0);
      assertEquals(false, hashtable0.isEmpty());
      
      hashtable0.put("", (Integer) 0);
      // Undeclared exception!
      try {
        xMLElement0.getDoubleAttribute("", (Hashtable) hashtable0, "", true);
        fail("Expecting exception: XMLParseException");
      } catch(XMLParseException e) {
        /*
         * XML Parse Exception during parsing of the XML definition at line 0: Invalid value set (entity name = \"\")
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Hashtable<Double, String> hashtable0 = new Hashtable<Double, String>();
      XMLElement xMLElement0 = new XMLElement((Hashtable) hashtable0, true, true);
      assertEquals(false, hashtable0.isEmpty());
      
      // Undeclared exception!
      try {
        xMLElement0.parseString("B8+l%r!?", (-1), (-1623), (-1231));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
        /*
         * String index out of range: -1
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      Hashtable<Double, String> hashtable0 = new Hashtable<Double, String>();
      XMLElement xMLElement0 = new XMLElement((Hashtable) hashtable0, true, true);
      assertEquals(5, hashtable0.size());
      
      String string0 = xMLElement0.getContent();
      assertEquals("", string0);
  }

  @Test
  public void test13()  throws Throwable  {
      Hashtable<String, XMLElement> hashtable0 = new Hashtable<String, XMLElement>();
      XMLElement xMLElement0 = new XMLElement(hashtable0);
      assertEquals(false, hashtable0.isEmpty());
      
      xMLElement0.getChildren();
      assertEquals(0, xMLElement0.getLineNr());
  }

  @Test
  public void test14()  throws Throwable  {
      Hashtable<Double, Object> hashtable0 = new Hashtable<Double, Object>();
      XMLElement xMLElement0 = new XMLElement((Hashtable) hashtable0, true, true, false);
      assertEquals(false, hashtable0.isEmpty());
      
      double double0 = xMLElement0.getDoubleAttribute("#g(Qev#-xw;k/yf_");
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test15()  throws Throwable  {
      Hashtable<Integer, Integer> hashtable0 = new Hashtable<Integer, Integer>();
      XMLElement xMLElement0 = new XMLElement((Hashtable) hashtable0, true, true, false);
      assertEquals(false, hashtable0.isEmpty());
      
      xMLElement0.removeChild(xMLElement0);
      assertEquals(0, xMLElement0.getLineNr());
  }

  @Test
  public void test16()  throws Throwable  {
      Hashtable<Integer, Double> hashtable0 = new Hashtable<Integer, Double>();
      XMLElement xMLElement0 = new XMLElement((Hashtable) hashtable0, true);
      assertEquals(false, hashtable0.isEmpty());
      
      // Undeclared exception!
      try {
        xMLElement0.parseString("\"", (-351), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
        /*
         * String index out of range: -351
         */
      }
  }

  @Test
  public void test17()  throws Throwable  {
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      XMLElement xMLElement0 = new XMLElement(hashtable0);
      assertEquals(5, hashtable0.size());
      
      int int0 = xMLElement0.getLineNr();
      assertEquals(0, int0);
  }

  @Test
  public void test18()  throws Throwable  {
      Hashtable<Integer, Double> hashtable0 = new Hashtable<Integer, Double>();
      XMLElement xMLElement0 = new XMLElement((Hashtable) hashtable0, false, false, true);
      assertNotNull(xMLElement0);
      
      xMLElement0.getUserObject();
      assertEquals(0, xMLElement0.getLineNr());
  }

  @Test
  public void test19()  throws Throwable  {
      Hashtable<Integer, Double> hashtable0 = new Hashtable<Integer, Double>();
      XMLElement xMLElement0 = new XMLElement((Hashtable) hashtable0, false, false, true);
      assertNotNull(xMLElement0);
      
      Iterator<Object> iterator0 = xMLElement0.enumeratePropertyNames();
      assertEquals(0, xMLElement0.getLineNr());
      assertNotNull(iterator0);
  }

  @Test
  public void test20()  throws Throwable  {
      XMLElement xMLElement0 = new XMLElement(false);
      assertNotNull(xMLElement0);
      
      char[] charArray0 = new char[7];
      try {
        xMLElement0.parseCharArray(charArray0, 0, 33);
        fail("Expecting exception: XMLParseException");
      } catch(XMLParseException e) {
        /*
         * XML Parse Exception during parsing of the XML definition at line 1: Expected: <
         */
      }
  }

  @Test
  public void test21()  throws Throwable  {
      Hashtable<XMLElement, String> hashtable0 = new Hashtable<XMLElement, String>();
      XMLElement xMLElement0 = new XMLElement((Hashtable) hashtable0, false);
      hashtable0.put(xMLElement0, "<`");
      XMLElement xMLElement1 = new XMLElement((Hashtable) hashtable0, false, false, false);
      assertEquals(6, hashtable0.size());
      assertEquals(0, xMLElement1.getLineNr());
  }

  @Test
  public void test22()  throws Throwable  {
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      XMLElement xMLElement0 = new XMLElement((Hashtable) hashtable0, true, false, false);
      assertNotNull(xMLElement0);
      
      xMLElement0.addProperty("813.3913344975823", "dV");
      assertEquals(0, xMLElement0.getLineNr());
  }

  @Test
  public void test23()  throws Throwable  {
      Hashtable<String, Integer> hashtable0 = new Hashtable<String, Integer>();
      XMLElement xMLElement0 = new XMLElement(hashtable0);
      assertEquals(5, hashtable0.size());
      
      xMLElement0.setAttribute("", "");
      // Undeclared exception!
      try {
        xMLElement0.getAttribute("", (Hashtable) hashtable0, "", false);
        fail("Expecting exception: XMLParseException");
      } catch(XMLParseException e) {
        /*
         * XML Parse Exception during parsing of the XML definition at line 0: Attribute \"\" does not contain a valid value (\"\")
         */
      }
  }

  @Test
  public void test24()  throws Throwable  {
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      XMLElement xMLElement0 = new XMLElement((Hashtable) hashtable0, true, false, false);
      assertNotNull(xMLElement0);
      
      xMLElement0.setIntAttribute("JG>yj>l9+RLUV`FeG2m", 0);
      assertEquals(0, xMLElement0.getLineNr());
  }

  @Test
  public void test25()  throws Throwable  {
      Hashtable<String, Double> hashtable0 = new Hashtable<String, Double>();
      XMLElement xMLElement0 = new XMLElement((Hashtable) hashtable0, true, true, true);
      assertEquals(5, hashtable0.size());
      
      xMLElement0.addProperty("XGs", (-318));
      double double0 = xMLElement0.getDoubleAttribute("XGs");
      assertEquals((-318.0), double0, 0.01D);
  }

  @Test
  public void test26()  throws Throwable  {
      Hashtable<Double, Object> hashtable0 = new Hashtable<Double, Object>();
      XMLElement xMLElement0 = new XMLElement((Hashtable) hashtable0, true, true, false);
      assertEquals(false, hashtable0.isEmpty());
      
      xMLElement0.addProperty("#g(Qev#-xw;k/yf_", (-1450.4852659704472));
      assertEquals(0, xMLElement0.getLineNr());
  }

  @Test
  public void test27()  throws Throwable  {
      Hashtable<String, XMLElement> hashtable0 = new Hashtable<String, XMLElement>();
      XMLElement xMLElement0 = new XMLElement(hashtable0);
      assertEquals(false, hashtable0.isEmpty());
      
      xMLElement0.setDoubleAttribute("", (double) 51);
      // Undeclared exception!
      try {
        xMLElement0.getIntAttribute("", (Hashtable) hashtable0, "j", false);
        fail("Expecting exception: XMLParseException");
      } catch(XMLParseException e) {
        /*
         * XML Parse Exception during parsing of the XML definition at line 0: Attribute \"\" does not contain a valid value (\"51.0\")
         */
      }
  }

  @Test
  public void test28()  throws Throwable  {
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      XMLElement xMLElement0 = new XMLElement((Hashtable) hashtable0, true, false, false);
      assertNotNull(xMLElement0);
      
      String string0 = xMLElement0.getStringAttribute("dV");
      assertEquals(0, xMLElement0.getLineNr());
      assertNull(string0);
  }

  @Test
  public void test29()  throws Throwable  {
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      XMLElement xMLElement0 = new XMLElement(hashtable0);
      assertEquals(5, hashtable0.size());
      
      xMLElement0.addProperty("dV", 813.3913344975823);
      String string0 = xMLElement0.getStringAttribute("dV");
      assertEquals("813.3913344975823", string0);
  }

  @Test
  public void test30()  throws Throwable  {
      Hashtable<String, Integer> hashtable0 = new Hashtable<String, Integer>();
      XMLElement xMLElement0 = new XMLElement(hashtable0);
      assertEquals(5, hashtable0.size());
      
      // Undeclared exception!
      try {
        xMLElement0.getAttribute("", (Hashtable) hashtable0, "", false);
        fail("Expecting exception: XMLParseException");
      } catch(XMLParseException e) {
        /*
         * XML Parse Exception during parsing of the XML definition at line 0: Attribute \"\" does not contain a valid value (\"\")
         */
      }
  }

  @Test
  public void test31()  throws Throwable  {
      Hashtable<String, Integer> hashtable0 = new Hashtable<String, Integer>();
      XMLElement xMLElement0 = new XMLElement(hashtable0);
      assertEquals(false, hashtable0.isEmpty());
      
      hashtable0.put("", (Integer) 0);
      Integer integer0 = (Integer)xMLElement0.getAttribute("", (Hashtable) hashtable0, "", false);
      assertEquals(0, (int)integer0);
  }

  @Test
  public void test32()  throws Throwable  {
      Hashtable<String, Integer> hashtable0 = new Hashtable<String, Integer>();
      XMLElement xMLElement0 = new XMLElement(hashtable0);
      assertEquals(false, hashtable0.isEmpty());
      
      Hashtable<Double, Vector<Double>> hashtable1 = new Hashtable<Double, Vector<Double>>();
      String string0 = xMLElement0.getStringAttribute("", (Hashtable) hashtable1, "", true);
      assertEquals("", string0);
  }

  @Test
  public void test33()  throws Throwable  {
      Hashtable<Integer, Integer> hashtable0 = new Hashtable<Integer, Integer>();
      Integer integer0 = new Integer((-14));
      XMLElement xMLElement0 = new XMLElement((Hashtable) hashtable0, true, true, false);
      assertEquals(5, hashtable0.size());
      
      int int0 = xMLElement0.getProperty("%P>`l2Wo]f.s}", (int) integer0);
      assertEquals((-14), int0);
  }

  @Test
  public void test34()  throws Throwable  {
      Hashtable<String, XMLElement> hashtable0 = new Hashtable<String, XMLElement>();
      XMLElement xMLElement0 = new XMLElement(hashtable0);
      assertEquals(false, hashtable0.isEmpty());
      
      // Undeclared exception!
      try {
        xMLElement0.getIntAttribute("", (Hashtable) hashtable0, "j", false);
        fail("Expecting exception: XMLParseException");
      } catch(XMLParseException e) {
        /*
         * XML Parse Exception during parsing of the XML definition at line 0: Attribute \"\" does not contain a valid value (\"j\")
         */
      }
  }

  @Test
  public void test35()  throws Throwable  {
      XMLElement xMLElement0 = new XMLElement(false);
      assertNotNull(xMLElement0);
      
      Hashtable<Integer, Integer> hashtable0 = new Hashtable<Integer, Integer>();
      // Undeclared exception!
      try {
        xMLElement0.getSpecialIntProperty("", (Hashtable) hashtable0, "");
        fail("Expecting exception: XMLParseException");
      } catch(XMLParseException e) {
        /*
         * XML Parse Exception during parsing of the XML definition at line 0: Attribute \"\" does not contain a valid value (\"\")
         */
      }
  }

  @Test
  public void test36()  throws Throwable  {
      Hashtable<Integer, Integer> hashtable0 = new Hashtable<Integer, Integer>();
      XMLElement xMLElement0 = new XMLElement((Hashtable) hashtable0, true);
      assertEquals(false, hashtable0.isEmpty());
      
      double double0 = xMLElement0.getDoubleAttribute("%P>`l2Wo]f.s}");
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test37()  throws Throwable  {
      Hashtable<Vector<Integer>, Integer> hashtable0 = new Hashtable<Vector<Integer>, Integer>();
      XMLElement xMLElement0 = new XMLElement((Hashtable) hashtable0, false, true, false);
      assertEquals(5, hashtable0.size());
      
      double double0 = xMLElement0.getDoubleAttribute("3", (Hashtable) hashtable0, "3", true);
      assertEquals(3.0, double0, 0.01D);
  }

  @Test
  public void test38()  throws Throwable  {
      Hashtable<String, Integer> hashtable0 = new Hashtable<String, Integer>();
      XMLElement xMLElement0 = new XMLElement(hashtable0);
      assertEquals(false, hashtable0.isEmpty());
      
      xMLElement0.setAttribute("", "");
      // Undeclared exception!
      try {
        xMLElement0.getDoubleAttribute("", (Hashtable) hashtable0, "", true);
        fail("Expecting exception: XMLParseException");
      } catch(XMLParseException e) {
        /*
         * XML Parse Exception during parsing of the XML definition at line 0: Attribute \"\" does not contain a valid value (\"\")
         */
      }
  }

  @Test
  public void test39()  throws Throwable  {
      Hashtable<String, Integer> hashtable0 = new Hashtable<String, Integer>();
      XMLElement xMLElement0 = new XMLElement(hashtable0);
      assertEquals(false, hashtable0.isEmpty());
      
      // Undeclared exception!
      try {
        xMLElement0.getDoubleAttribute("the XML definition", (Hashtable) hashtable0, "", false);
        fail("Expecting exception: XMLParseException");
      } catch(XMLParseException e) {
        /*
         * XML Parse Exception during parsing of the XML definition at line 0: Attribute \"THE XML DEFINITION\" does not contain a valid value (\"\")
         */
      }
  }

  @Test
  public void test40()  throws Throwable  {
      Hashtable<String, Double> hashtable0 = new Hashtable<String, Double>();
      XMLElement xMLElement0 = new XMLElement((Hashtable) hashtable0, true, false);
      assertEquals(false, hashtable0.isEmpty());
      
      boolean boolean0 = xMLElement0.getProperty("B8+l%r!?", (String) null, (String) null, true);
      assertEquals(true, boolean0);
  }

  @Test
  public void test41()  throws Throwable  {
      Hashtable<String, Double> hashtable0 = new Hashtable<String, Double>();
      XMLElement xMLElement0 = new XMLElement((Hashtable) hashtable0, true, true, true);
      assertEquals(5, hashtable0.size());
      
      boolean boolean0 = xMLElement0.getProperty("XGs", "XGs", "XGs", true);
      assertEquals(true, boolean0);
  }

  @Test
  public void test42()  throws Throwable  {
      Hashtable<String, Double> hashtable0 = new Hashtable<String, Double>();
      XMLElement xMLElement0 = new XMLElement((Hashtable) hashtable0, true, true, true);
      assertEquals(5, hashtable0.size());
      
      xMLElement0.addProperty("XGs", (-318));
      // Undeclared exception!
      try {
        xMLElement0.getProperty("XGs", "XGs", "XGs", true);
        fail("Expecting exception: XMLParseException");
      } catch(XMLParseException e) {
        /*
         * XML Parse Exception during parsing of the XML definition at line 0: Attribute \"XGS\" does not contain a valid value (\"-318\")
         */
      }
  }

  @Test
  public void test43()  throws Throwable  {
      Hashtable<String, Integer> hashtable0 = new Hashtable<String, Integer>();
      XMLElement xMLElement0 = new XMLElement(hashtable0);
      assertEquals(false, hashtable0.isEmpty());
      
      xMLElement0.setAttribute("", "");
      boolean boolean0 = xMLElement0.getBooleanAttribute("", "", "", true);
      assertEquals(true, boolean0);
  }

  @Test
  public void test44()  throws Throwable  {
      Hashtable<String, Integer> hashtable0 = new Hashtable<String, Integer>();
      XMLElement xMLElement0 = new XMLElement(hashtable0);
      assertEquals(false, hashtable0.isEmpty());
      
      xMLElement0.setAttribute("", "");
      boolean boolean0 = xMLElement0.getBooleanAttribute("", "Chinese", "", true);
      assertEquals(false, boolean0);
  }

  @Test
  public void test45()  throws Throwable  {
      Hashtable<String, Double> hashtable0 = new Hashtable<String, Double>();
      XMLElement xMLElement0 = new XMLElement((Hashtable) hashtable0, true, false);
      assertEquals(false, hashtable0.isEmpty());
      
      xMLElement0.removeAttribute("");
      assertEquals(0, xMLElement0.getLineNr());
  }

  @Test
  public void test46()  throws Throwable  {
      Hashtable<Double, XMLElement> hashtable0 = new Hashtable<Double, XMLElement>();
      XMLElement xMLElement0 = new XMLElement((Hashtable) hashtable0, false);
      assertEquals(false, hashtable0.isEmpty());
      
      xMLElement0.removeAttribute(" U)hnF)J*`RCE");
      assertEquals(0, xMLElement0.getLineNr());
  }

  @Test
  public void test47()  throws Throwable  {
      XMLElement xMLElement0 = new XMLElement();
      assertNotNull(xMLElement0);
      
      xMLElement0.setName("MRvkblD'qZ=%NOdsE");
      String string0 = xMLElement0.toString();
      assertEquals("<MRvkblD'qZ=%NOdsE/>\n", xMLElement0.toString());
      assertNotNull(string0);
      assertEquals("<MRvkblD'qZ=%NOdsE/>\n", string0);
  }

  @Test
  public void test48()  throws Throwable  {
      Hashtable<Double, Object> hashtable0 = new Hashtable<Double, Object>();
      XMLElement xMLElement0 = new XMLElement((Hashtable) hashtable0, true, true, false);
      assertEquals(5, hashtable0.size());
      
      StringWriter stringWriter0 = new StringWriter();
      xMLElement0.setEncodedContent("#g(Qev#-xw<S/yf_");
      xMLElement0.writeWithoutClosingTag((Writer) stringWriter0);
      assertEquals("#g(Qev#-xw<S/yf_", stringWriter0.toString());
  }

  @Test
  public void test49()  throws Throwable  {
      XMLElement xMLElement0 = new XMLElement();
      assertNotNull(xMLElement0);
      
      xMLElement0.setName("MRvkblD'qZ=%NOdsE");
      Hashtable<String, Double> hashtable0 = new Hashtable<String, Double>();
      XMLElement xMLElement1 = new XMLElement((Hashtable) hashtable0, true, false, true);
      xMLElement0.addChild(xMLElement1);
      String string0 = xMLElement0.toString();
      assertEquals(1, xMLElement0.countChildren());
      assertEquals("<MRvkblD'qZ=%NOdsE>\n</MRvkblD'qZ=%NOdsE>\n", string0);
  }

  @Test
  public void test50()  throws Throwable  {
      Hashtable<Vector<Integer>, XMLElement> hashtable0 = new Hashtable<Vector<Integer>, XMLElement>();
      XMLElement xMLElement0 = new XMLElement((Hashtable) hashtable0, false, true);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      PrintWriter printWriter0 = new PrintWriter((Writer) pipedWriter0);
      xMLElement0.writeEncoded((Writer) printWriter0, "#(^[E>wP 6_5|.");
  }

  @Test
  public void test51()  throws Throwable  {
      Hashtable<Double, Object> hashtable0 = new Hashtable<Double, Object>();
      XMLElement xMLElement0 = new XMLElement((Hashtable) hashtable0, true, true, false);
      assertEquals(5, hashtable0.size());
      
      StringWriter stringWriter0 = new StringWriter();
      xMLElement0.writeEncoded((Writer) stringWriter0, "#g(Qev#-xw<S/yf_");
      assertEquals("#g(Qev#-xw&lt;S/yf_", stringWriter0.toString());
  }

  @Test
  public void test52()  throws Throwable  {
      Hashtable<Vector<XMLElement>, Integer> hashtable0 = new Hashtable<Vector<XMLElement>, Integer>();
      XMLElement xMLElement0 = new XMLElement((Hashtable) hashtable0, false, false, false);
      assertNotNull(xMLElement0);
      
      try {
        xMLElement0.parseString("<_xC}/", 0);
        fail("Expecting exception: XMLParseException");
      } catch(XMLParseException e) {
        /*
         * XML Parse Exception during parsing of a _xC element at line 1: Expected: =
         */
      }
  }

  @Test
  public void test53()  throws Throwable  {
      XMLElement xMLElement0 = new XMLElement();
      assertNotNull(xMLElement0);
      
      char[] charArray0 = new char[26];
      charArray0[0] = '<';
      charArray0[1] = '4';
      try {
        xMLElement0.parseCharArray(charArray0, 0, (int) '>', 16);
        fail("Expecting exception: XMLParseException");
      } catch(XMLParseException e) {
        /*
         * XML Parse Exception during parsing of a 4 element at line 16: Expected: =
         */
      }
  }

  @Test
  public void test54()  throws Throwable  {
      XMLElement xMLElement0 = new XMLElement();
      char[] charArray0 = new char[26];
      charArray0[0] = '<';
      charArray0[2] = '>';
      try {
        xMLElement0.parseCharArray(charArray0, 0, (int) '>', 16);
        fail("Expecting exception: XMLParseException");
      } catch(XMLParseException e) {
        /*
         * XML Parse Exception during parsing of a  element at line 16: Unexpected end of data reached
         */
      }
  }

  @Test
  public void test55()  throws Throwable  {
      XMLElement xMLElement0 = new XMLElement();
      assertNotNull(xMLElement0);
      
      char[] charArray0 = new char[26];
      charArray0[0] = '<';
      charArray0[2] = '>';
      charArray0[7] = '<';
      try {
        xMLElement0.parseCharArray(charArray0, 0, (int) '>', 16);
        fail("Expecting exception: XMLParseException");
      } catch(XMLParseException e) {
        /*
         * XML Parse Exception during parsing of a  element at line 16: Expected: /
         */
      }
  }

  @Test
  public void test56()  throws Throwable  {
      Hashtable<Double, XMLElement> hashtable0 = new Hashtable<Double, XMLElement>();
      XMLElement xMLElement0 = new XMLElement((Hashtable) hashtable0, true);
      assertEquals(5, hashtable0.size());
      
      // Undeclared exception!
      try {
        xMLElement0.skipComment();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test57()  throws Throwable  {
      Hashtable<Vector<Integer>, XMLElement> hashtable0 = new Hashtable<Vector<Integer>, XMLElement>();
      XMLElement xMLElement0 = new XMLElement((Hashtable) hashtable0, false, true);
      assertEquals(5, hashtable0.size());
      
      xMLElement0.unreadChar('=');
      // Undeclared exception!
      try {
        xMLElement0.skipSpecialTag(0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test58()  throws Throwable  {
      XMLElement xMLElement0 = new XMLElement();
      assertNotNull(xMLElement0);
      
      xMLElement0.unreadChar('>');
      assertEquals('>', xMLElement0.readChar());
      
      xMLElement0.skipSpecialTag((-1071));
  }

  @Test
  public void test59()  throws Throwable  {
      XMLElement xMLElement0 = new XMLElement();
      assertNotNull(xMLElement0);
      
      xMLElement0.unreadChar('W');
      assertEquals('W', xMLElement0.readChar());
      
      // Undeclared exception!
      try {
        xMLElement0.skipSpecialTag((int) 'W');
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test60()  throws Throwable  {
      XMLElement xMLElement0 = new XMLElement();
      assertNotNull(xMLElement0);
      
      xMLElement0.unreadChar('=');
      assertEquals('=', xMLElement0.readChar());
      
      // Undeclared exception!
      try {
        xMLElement0.skipSpecialTag((-1071));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test61()  throws Throwable  {
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      XMLElement xMLElement0 = new XMLElement(hashtable0);
      assertEquals(5, hashtable0.size());
      
      // Undeclared exception!
      try {
        xMLElement0.checkLiteral("JG>yj>l9+RLUV`FeG2m");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test62()  throws Throwable  {
      XMLElement xMLElement0 = new XMLElement();
      char[] charArray0 = new char[26];
      charArray0[0] = '<';
      charArray0[1] = '-';
      charArray0[2] = '>';
      charArray0[7] = '<';
      charArray0[8] = '/';
      try {
        xMLElement0.parseCharArray(charArray0, 0, (int) '>', 16);
        fail("Expecting exception: XMLParseException");
      } catch(XMLParseException e) {
        /*
         * XML Parse Exception during parsing of a - element at line 16: Expected: -
         */
      }
  }

  @Test
  public void test63()  throws Throwable  {
      XMLElement xMLElement0 = new XMLElement();
      assertNotNull(xMLElement0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '<';
      charArray0[1] = '/';
      try {
        xMLElement0.parseCharArray(charArray0, 0, (int) '>', 16);
        fail("Expecting exception: XMLParseException");
      } catch(XMLParseException e) {
        /*
         * XML Parse Exception during parsing of a  element at line 16: Expected: >
         */
      }
  }

  @Test
  public void test64()  throws Throwable  {
      XMLElement xMLElement0 = new XMLElement();
      char[] charArray0 = new char[26];
      charArray0[0] = '<';
      charArray0[2] = '>';
      charArray0[3] = '<';
      try {
        xMLElement0.parseCharArray(charArray0, 0, (int) '>', 16);
        fail("Expecting exception: XMLParseException");
      } catch(XMLParseException e) {
        /*
         * XML Parse Exception during parsing of a  element at line 16: Expected: =
         */
      }
  }

  @Test
  public void test65()  throws Throwable  {
      XMLElement xMLElement0 = new XMLElement();
      assertNotNull(xMLElement0);
      
      char[] charArray0 = new char[26];
      charArray0[0] = '<';
      charArray0[1] = '-';
      charArray0[2] = '>';
      charArray0[3] = ',';
      charArray0[2] = '<';
      charArray0[3] = '/';
      charArray0[1] = '>';
      try {
        xMLElement0.parseCharArray(charArray0, 0, (int) '>', 16);
        fail("Expecting exception: XMLParseException");
      } catch(XMLParseException e) {
        /*
         * XML Parse Exception during parsing of a  element at line 16: Expected: >
         */
      }
  }
}
