/*
 * This file was automatically generated by EvoSuite
 */

package freemind.main;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import freemind.controller.actions.generated.instance.XmlAction;
import freemind.main.Tools;
import freemind.modes.browsemode.BrowseHookFactory;
import java.awt.Color;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.print.Paper;
import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.List;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.swing.AbstractButton;
import javax.swing.JCheckBox;
import javax.swing.KeyStroke;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ToolsEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      File file0 = new File("edge_color_format_action");
      String string0 = Tools.getFile(file0);
      assertNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      Vector<Object> vector0 = Tools.getVectorWithSingleElement((Object) "1");
      assertEquals(1, vector0.size());
  }

  @Test
  public void test2()  throws Throwable  {
      String string0 = Tools.decompress("/f");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      boolean boolean0 = Tools.isHeadless();
      assertEquals(true, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      byte[] byteArray0 = Tools.uTF8StringToByteArray("}");
      assertNotNull(byteArray0);
  }

  @Test
  public void test5()  throws Throwable  {
      JCheckBox jCheckBox0 = new JCheckBox();
      Tools.setLabelAndMnemonic((AbstractButton) jCheckBox0, "");
      assertEquals("", jCheckBox0.getText());
      assertEquals("", jCheckBox0.getActionCommand());
  }

  @Test
  public void test6()  throws Throwable  {
      boolean boolean0 = Tools.isAvailableFontFamily((String) null);
      assertEquals(true, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      XmlAction xmlAction0 = Tools.unMarshall("");
      assertNull(xmlAction0);
  }

  @Test
  public void test8()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          String string0 = Tools.getHostIpAsString();
          assertEquals("127.0.0.1", string0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test9()  throws Throwable  {
      Tools.addFocusPrintTimer();
  }

  @Test
  public void test10()  throws Throwable  {
      Paper paper0 = new Paper();
      String string0 = Tools.getPageFormatAsString(paper0);
      assertEquals("612.0;792.0;72.0;72.0;468.0;648.0", string0);
      assertNotNull(string0);
  }

  @Test
  public void test11()  throws Throwable  {
      boolean boolean0 = Tools.executableByExtension("bh))@#m<=t^fq$N>-");
      assertEquals(true, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try {
        Tools.getURLWithoutReference((URL) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          String string0 = Tools.getUserName();
          assertNotNull(string0);
          assertEquals("ac1gf@localhost", string0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test14()  throws Throwable  {
      Tools tools0 = new Tools();
      assertEquals("127.0.0.1", tools0.getHostIpAsString());
  }

  @Test
  public void test15()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      Tools.SingleDesEncrypter tools_SingleDesEncrypter0 = new Tools.SingleDesEncrypter(stringBuffer0);
      assertNotNull(tools_SingleDesEncrypter0);
      
      // Undeclared exception!
      try {
        tools_SingleDesEncrypter0.decrypt("~7hL 9");
        fail("Expecting exception: NoClassDefFoundError");
      } catch(NoClassDefFoundError e) {
        /*
         * Could not initialize class javax.crypto.SunJCE_h
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      Tools.ObjectHolder tools_ObjectHolder0 = new Tools.ObjectHolder();
      assertNotNull(tools_ObjectHolder0);
  }

  @Test
  public void test17()  throws Throwable  {
      Tools.BooleanHolder tools_BooleanHolder0 = new Tools.BooleanHolder(true);
      tools_BooleanHolder0.setValue(true);
      assertEquals(true, tools_BooleanHolder0.getValue());
  }

  @Test
  public void test18()  throws Throwable  {
      Tools.BooleanHolder tools_BooleanHolder0 = new Tools.BooleanHolder();
      assertEquals(false, tools_BooleanHolder0.getValue());
  }

  @Test
  public void test19()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "6b#me8J{r!L<Uke}n1");
      Tools.TripleDesEncrypter tools_TripleDesEncrypter0 = new Tools.TripleDesEncrypter(stringBuffer0);
      assertNotNull(tools_TripleDesEncrypter0);
      assertEquals(19, tools_TripleDesEncrypter0.iterationCount);
  }

  @Test
  public void test20()  throws Throwable  {
      Tools.Pair tools_Pair0 = new Tools.Pair((Object) null, (Object) null);
      Object object0 = tools_Pair0.getSecond();
      assertNull(object0);
  }

  @Test
  public void test21()  throws Throwable  {
      Tools.IntHolder tools_IntHolder0 = new Tools.IntHolder();
      assertEquals(0, tools_IntHolder0.getValue());
  }

  @Test
  public void test22()  throws Throwable  {
      Tools.IntHolder tools_IntHolder0 = new Tools.IntHolder(405);
      int int0 = tools_IntHolder0.getValue();
      assertEquals(405, int0);
  }

  @Test
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try {
        Tools.xmlToColor("buttonshadow");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * No xml color given by 'buttonshadow'.
         */
      }
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = Tools.PointToXml((Point) null);
      assertNull(string0);
  }

  @Test
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try {
        Tools.xmlToPoint("fh%U");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * A point must consist of two numbers (and not: 'fh%U').
         */
      }
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = Tools.BooleanToXml(true);
      assertEquals("true", string0);
  }

  @Test
  public void test27()  throws Throwable  {
      boolean boolean0 = Tools.xmlToBoolean("");
      assertEquals(false, boolean0);
  }

  @Test
  public void test28()  throws Throwable  {
      boolean boolean0 = Tools.xmlToBoolean((String) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test29()  throws Throwable  {
      BrowseHookFactory browseHookFactory0 = new BrowseHookFactory();
      Vector<Object> vector0 = browseHookFactory0.getPossibleNodeHooks();
      String string0 = Tools.listToString((List) vector0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test30()  throws Throwable  {
      boolean boolean0 = Tools.safeEquals((String) null, (String) null);
      assertEquals(true, boolean0);
  }

  @Test
  public void test31()  throws Throwable  {
      boolean boolean0 = Tools.safeEquals((Object) "flood-opacity", (Object) "evenodd");
      assertEquals(false, boolean0);
  }

  @Test
  public void test32()  throws Throwable  {
      boolean boolean0 = Tools.safeEqualsIgnoreCase((String) null, (String) null);
      assertEquals(true, boolean0);
  }

  @Test
  public void test33()  throws Throwable  {
      boolean boolean0 = Tools.safeEqualsIgnoreCase("", "");
      assertEquals(true, boolean0);
  }

  @Test
  public void test34()  throws Throwable  {
      boolean boolean0 = Tools.safeEqualsIgnoreCase("6b#me8J{r!L<Uke}n1", "evenodd");
      assertEquals(false, boolean0);
  }

  @Test
  public void test35()  throws Throwable  {
      boolean boolean0 = Tools.safeEquals((Color) null, (Color) null);
      assertEquals(true, boolean0);
  }

  @Test
  public void test36()  throws Throwable  {
      String string0 = Tools.expandPlaceholders("feMorphology", "feMorphology", "");
      assertEquals("feMorphology", string0);
      assertNotNull(string0);
  }

  @Test
  public void test37()  throws Throwable  {
      Tools.BooleanHolder tools_BooleanHolder0 = new Tools.BooleanHolder(true);
      boolean boolean0 = Tools.safeEquals(tools_BooleanHolder0, tools_BooleanHolder0);
      assertEquals(true, tools_BooleanHolder0.getValue());
      assertEquals(true, boolean0);
  }

  @Test
  public void test38()  throws Throwable  {
      boolean boolean0 = Tools.safeEquals((Tools.BooleanHolder) null, (Tools.BooleanHolder) null);
      assertEquals(true, boolean0);
  }

  @Test
  public void test39()  throws Throwable  {
      boolean boolean0 = Tools.isMacOsX();
      assertEquals(false, boolean0);
  }

  @Test
  public void test40()  throws Throwable  {
      KeyStroke keyStroke0 = Tools.getKeyStroke("iWSm*");
      assertNull(keyStroke0);
  }

  @Test
  public void test41()  throws Throwable  {
      String string0 = Tools.compareText("1", "1");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test42()  throws Throwable  {
      String string0 = Tools.compareText("6b#me8J{r!L<Uke}n1", "");
      assertEquals("First string is longer :6b#me8J{r!L<Uke}n1\n", string0);
      assertNotNull(string0);
  }

  @Test
  public void test43()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = RenderingHints.VALUE_ANTIALIAS_DEFAULT;
      objectArray0[0] = object0;
      JCheckBox jCheckBox0 = new JCheckBox();
      objectArray0[1] = objectArray0[0];
      objectArray0[2] = (Object) jCheckBox0;
      objectArray0[3] = objectArray0[0];
      objectArray0[4] = objectArray0[3];
      objectArray0[5] = objectArray0[0];
      objectArray0[6] = objectArray0[5];
      Object object1 = Tools.getField(objectArray0, "])?=");
      assertNull(object1);
  }

  @Test
  public void test44()  throws Throwable  {
      Tools.setPermissions((String) null, 1053);
  }

  @Test
  public void test45()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "NameAttribute";
      stringArray0[1] = "& E~piG2";
      stringArray0[2] = "/fb9o+!UfsQV";
      stringArray0[3] = ".jpg";
      stringArray0[4] = "& E~piG2";
      stringArray0[5] = "fuchsia";
      stringArray0[6] = "1+nBKV|v?6h";
      String string0 = Tools.arrayToUrls(stringArray0);
      assertNotNull(string0);
      assertEquals("file:/mnt/fastdata/ac1gf/SF110/dist/105_freemind/NameAttribute\nfile:/mnt/fastdata/ac1gf/SF110/dist/105_freemind/&%20E~piG2\nfile:/fb9o+!UfsQV\nfile:/mnt/fastdata/ac1gf/SF110/dist/105_freemind/.jpg\nfile:/mnt/fastdata/ac1gf/SF110/dist/105_freemind/&%20E~piG2\nfile:/mnt/fastdata/ac1gf/SF110/dist/105_freemind/fuchsia\nfile:/mnt/fastdata/ac1gf/SF110/dist/105_freemind/1+nBKV%7Cv%3F6%7Fh\n", string0);
  }

  @Test
  public void test46()  throws Throwable  {
      int int0 = Tools.countOccurrences("edge_color_format_action", "}");
      assertEquals(0, int0);
  }

  @Test
  public void test47()  throws Throwable  {
      Paper paper0 = new Paper();
      Tools.setPageFormatFromString(paper0, "s]6Dle(7jU&+ZL%IN7");
      assertEquals(72.0, paper0.getImageableX(), 0.01D);
  }
}
