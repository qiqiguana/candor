/*
 * This file was automatically generated by EvoSuite
 */

package freemind.main;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import freemind.common.NamedObject;
import freemind.main.FreeMindMain;
import freemind.main.Resources;
import java.util.HashMap;
import java.util.ResourceBundle;
import java.util.logging.Logger;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ResourcesEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Resources resources0 = Resources.resourcesInstance;
      resources0.getFreemindDirectory();
  }

  @Test
  public void test1()  throws Throwable  {
      Resources resources0 = Resources.resourcesInstance;
      resources0.getResource("}e2n8");
  }

  @Test
  public void test2()  throws Throwable  {
      Resources resources0 = Resources.resourcesInstance;
      resources0.getBoolProperty("}e2n8");
  }

  @Test
  public void test3()  throws Throwable  {
      Resources resources0 = Resources.resourcesInstance;
      resources0.getLongProperty("}e2n8", (long) 8905);
  }

  @Test
  public void test4()  throws Throwable  {
      Resources resources0 = Resources.getInstance();
      resources0.logException((Throwable) null);
      assertEquals(".", resources0.getFreemindDirectory());
  }

  @Test
  public void test5()  throws Throwable  {
      Resources resources0 = Resources.resourcesInstance;
      resources0.getProperties();
  }

  @Test
  public void test6()  throws Throwable  {
      Resources resources0 = Resources.getInstance();
      ResourceBundle resourceBundle0 = resources0.getResources();
      assertNull(resourceBundle0);
  }

  @Test
  public void test7()  throws Throwable  {
      Resources resources0 = Resources.getInstance();
      String string0 = resources0.getText(";k!xMK c!yw*");
      assertEquals(";k!xMK c!yw*", string0);
  }

  @Test
  public void test8()  throws Throwable  {
      Resources resources0 = Resources.resourcesInstance;
      Logger logger0 = resources0.getLogger("}e2n8");
      assertEquals(true, logger0.getUseParentHandlers());
  }

  @Test
  public void test9()  throws Throwable  {
      Resources resources0 = Resources.getInstance();
      FreeMindMain.VersionInformation freeMindMain_VersionInformation0 = resources0.getFreemindVersion();
      assertEquals(0, freeMindMain_VersionInformation0.mType);
  }

  @Test
  public void test10()  throws Throwable  {
      Resources resources0 = Resources.resourcesInstance;
      Object[] objectArray0 = new Object[4];
      String string0 = resources0.format("}e2n8", objectArray0);
      assertEquals("}e2n8", string0);
  }

  @Test
  public void test11()  throws Throwable  {
      Resources resources0 = Resources.resourcesInstance;
      String string0 = resources0.getResourceString("}e2n8", "}e2n8");
      assertEquals("}e2n8", string0);
  }

  @Test
  public void test12()  throws Throwable  {
      Resources resources0 = Resources.resourcesInstance;
      int int0 = resources0.getIntProperty("}e2n8", 8905);
      assertEquals(8905, int0);
  }

  @Test
  public void test13()  throws Throwable  {
      Resources resources0 = Resources.getInstance();
      NamedObject namedObject0 = resources0.createTranslatedString(" ");
      assertEquals(" ", namedObject0.toString());
  }

  @Test
  public void test14()  throws Throwable  {
      Resources resources0 = Resources.getInstance();
      HashMap<Object, Object> hashMap0 = resources0.getCountryMap();
      assertEquals("{sl=SI, zh=CN, uk=UA, it=IT, no=NO, hu=HU, de=DE, fi=FI, pt=PT, fr=FR, en=US, ru=RU, es=MX, nl=NL}", hashMap0.toString());
  }
}
