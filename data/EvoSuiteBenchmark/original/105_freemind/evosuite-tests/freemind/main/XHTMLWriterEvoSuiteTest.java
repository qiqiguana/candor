/*
 * This file was automatically generated by EvoSuite
 */

package freemind.main;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import freemind.main.XHTMLWriter;
import java.io.CharArrayReader;
import java.io.IOException;
import java.io.Reader;
import java.io.StringWriter;
import java.io.Writer;
import javax.swing.JTextPane;
import javax.swing.text.AbstractDocument;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.GapContent;
import javax.swing.text.Style;
import javax.swing.text.StyleContext;
import javax.swing.text.html.HTMLDocument;
import javax.swing.text.html.Option;
import javax.swing.text.html.StyleSheet;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class XHTMLWriterEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      // Undeclared exception!
      try {
        XHTMLWriter.html2xhtml((Reader) charArrayReader0, (Writer) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      GapContent gapContent0 = new GapContent(0);
      StyleSheet styleSheet0 = new StyleSheet();
      HTMLDocument hTMLDocument0 = new HTMLDocument((AbstractDocument.Content) gapContent0, styleSheet0);
      XHTMLWriter xHTMLWriter0 = new XHTMLWriter((Writer) stringWriter0, hTMLDocument0);
      xHTMLWriter0.write();
      assertEquals("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      \n    </p>\n  </body>\n</html>\n", stringWriter0.toString());
      assertEquals("{default=AttributeSet,}\n{name=p,resolver=AttributeSet,margin-top=0,}\n{name=html,}\n{margin-top=0,name=p,}\n{name=default,}\n{name=content,}\n{name=body,}\n{bidiLevel=0,}\n{}\n", styleSheet0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(687);
      HTMLDocument hTMLDocument0 = new HTMLDocument();
      StyleSheet styleSheet0 = hTMLDocument0.getStyleSheet();
      XHTMLWriter xHTMLWriter0 = new XHTMLWriter((Writer) stringWriter0, hTMLDocument0);
      JTextPane jTextPane0 = new JTextPane();
      StyleContext.NamedStyle styleContext_NamedStyle0 = (StyleContext.NamedStyle)jTextPane0.getLogicalStyle();
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleSheet0.new NamedStyle((Style) styleContext_NamedStyle0);
      Option option0 = new Option((AttributeSet) styleContext_NamedStyle1);
      xHTMLWriter0.writeOption(option0);
      assertEquals("<option></option>\n", stringWriter0.toString());
      assertEquals("{resolver=AttributeSet,}\n{margin-top=0,name=p,}\n{default=AttributeSet,}\n{name=html,}\n{name=default,}\n{name=content,}\n{name=p,resolver=AttributeSet,margin-top=0,}\n{name=body,}\n{bidiLevel=0,}\n{}\n", styleSheet0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      XHTMLWriter.XHTMLFilterWriter xHTMLWriter_XHTMLFilterWriter0 = new XHTMLWriter.XHTMLFilterWriter((Writer) stringWriter0);
      xHTMLWriter_XHTMLFilterWriter0.write(";HITBaP$FMt");
      assertEquals(";HITBaP$FMt", stringWriter0.toString());
  }
}
