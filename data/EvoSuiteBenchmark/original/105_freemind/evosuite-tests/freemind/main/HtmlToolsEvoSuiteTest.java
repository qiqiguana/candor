/*
 * This file was automatically generated by EvoSuite
 */

package freemind.main;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import freemind.main.HtmlTools;
import java.util.ArrayList;
import java.util.regex.Pattern;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class HtmlToolsEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      HtmlTools.IndexPair htmlTools_IndexPair0 = new HtmlTools.IndexPair((-1384), (-1384), (-1384), (-1384), false);
      String string0 = htmlTools_IndexPair0.toString();
      assertNotNull(string0);
      assertEquals(false, htmlTools_IndexPair0.mIsAlreadyAppended);
      assertEquals("[IndexPair: originalStart: -1384 originalEnd: -1384 replacedStart: -1384 replacedEnd: -1384 is a tag: false]", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      String string0 = HtmlTools.removeAllTagsFromString("\t");
      assertNotNull(string0);
      assertEquals("\t", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      HtmlTools htmlTools0 = HtmlTools.getInstance();
      String string0 = htmlTools0.toHtml("      &   ");
      assertEquals("      &   ", string0);
      assertNotNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      String string0 = HtmlTools.makeValidXml("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      String string0 = HtmlTools.toXMLUnescapedText("&#7;[01];");
      assertNotNull(string0);
      assertEquals("&#7;[01];", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try {
        HtmlTools.replaceIllegalXmlCharacters((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      HtmlTools htmlTools0 = HtmlTools.getInstance();
      assertNotNull(htmlTools0);
      
      boolean boolean0 = htmlTools0.isWellformedXml("");
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      HtmlTools htmlTools0 = HtmlTools.getInstance();
      Pattern pattern0 = Pattern.compile(" 4a9WyZ~]t2bl4J\"br", (-19));
      String string0 = htmlTools0.getReplaceResult(pattern0, "<html><body><p>&nbsp;4a9WyZ~]t2bl4&#x7f;J\"br", "<html><body><p>&nbsp;4a9WyZ~]t2bl4J\"br");
      assertEquals("<html><body><p>&nbsp;<html><body><p>&nbsp;4a9WyZ~]t2bl4&#x7f;J\"br", string0);
      assertNotNull(string0);
  }

  @Test
  public void test8()  throws Throwable  {
      HtmlTools htmlTools0 = HtmlTools.getInstance();
      String string0 = htmlTools0.toXhtml("      &   ");
      assertNull(string0);
  }

  @Test
  public void test9()  throws Throwable  {
      HtmlTools htmlTools0 = HtmlTools.getInstance();
      // Undeclared exception!
      try {
        htmlTools0.getReplaceResult((Pattern) null, "(?ims) *</[^>]o>", "(?ims) *</[^>]o>");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      HtmlTools htmlTools0 = HtmlTools.getInstance();
      Pattern pattern0 = Pattern.compile("", 0);
      String string0 = htmlTools0.getReplaceResult(pattern0, "", "");
      assertEquals("", string0);
  }

  @Test
  public void test11()  throws Throwable  {
      HtmlTools htmlTools0 = HtmlTools.getInstance();
      HtmlTools.IndexPair htmlTools_IndexPair0 = new HtmlTools.IndexPair((-1233), (-1233), (-1233), (-1233), true);
      ArrayList<HtmlTools.IndexPair> arrayList0 = new ArrayList<HtmlTools.IndexPair>();
      arrayList0.add(htmlTools_IndexPair0);
      // Undeclared exception!
      try {
        htmlTools0.getMinimalOriginalPosition((-261), (ArrayList) arrayList0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Position -261 not found.
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      HtmlTools htmlTools0 = HtmlTools.getInstance();
      HtmlTools.IndexPair htmlTools_IndexPair0 = new HtmlTools.IndexPair(240, 240, 240, 240, false);
      ArrayList<HtmlTools.IndexPair> arrayList0 = new ArrayList<HtmlTools.IndexPair>();
      arrayList0.add(htmlTools_IndexPair0);
      // Undeclared exception!
      try {
        htmlTools0.getMinimalOriginalPosition((-261), (ArrayList) arrayList0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Position -261 not found.
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      HtmlTools htmlTools0 = HtmlTools.getInstance();
      HtmlTools.IndexPair htmlTools_IndexPair0 = new HtmlTools.IndexPair(240, 240, 240, 240, false);
      ArrayList<HtmlTools.IndexPair> arrayList0 = new ArrayList<HtmlTools.IndexPair>();
      arrayList0.add(htmlTools_IndexPair0);
      int int0 = htmlTools0.getMinimalOriginalPosition(240, (ArrayList) arrayList0);
      assertEquals("[[IndexPair: originalStart: 240 originalEnd: 240 replacedStart: 240 replacedEnd: 240 is a tag: false]]", arrayList0.toString());
      assertEquals(240, int0);
  }

  @Test
  public void test14()  throws Throwable  {
      HtmlTools htmlTools0 = HtmlTools.getInstance();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      // Undeclared exception!
      try {
        htmlTools0.getMaximalOriginalPosition((-1384), (ArrayList) arrayList0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Position -1384 not found.
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      HtmlTools htmlTools0 = HtmlTools.getInstance();
      HtmlTools.IndexPair htmlTools_IndexPair0 = new HtmlTools.IndexPair((-1233), (-1233), (-1233), (-1233), true);
      ArrayList<HtmlTools.IndexPair> arrayList0 = new ArrayList<HtmlTools.IndexPair>();
      arrayList0.add(htmlTools_IndexPair0);
      int int0 = htmlTools0.getMaximalOriginalPosition((-1233), (ArrayList) arrayList0);
      assertEquals("[[IndexPair: originalStart: -1233 originalEnd: -1233 replacedStart: -1233 replacedEnd: -1233 is a tag: true]]", arrayList0.toString());
      assertEquals((-1233), int0);
  }

  @Test
  public void test16()  throws Throwable  {
      HtmlTools htmlTools0 = HtmlTools.getInstance();
      HtmlTools.IndexPair htmlTools_IndexPair0 = new HtmlTools.IndexPair(240, 240, 240, 240, false);
      ArrayList<HtmlTools.IndexPair> arrayList0 = new ArrayList<HtmlTools.IndexPair>();
      arrayList0.add(htmlTools_IndexPair0);
      int int0 = htmlTools0.getMaximalOriginalPosition(240, (ArrayList) arrayList0);
      assertEquals("[[IndexPair: originalStart: 240 originalEnd: 240 replacedStart: 240 replacedEnd: 240 is a tag: false]]", arrayList0.toString());
      assertEquals(240, int0);
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = HtmlTools.htmlToPlain("\t");
      assertEquals("\t", string0);
      assertNotNull(string0);
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = HtmlTools.htmlToPlain("<html><body><p>&nbsp;\r<br>-'()+,./:=?;!*#@$_%0123456789", true);
      assertEquals("<html><body><p>&nbsp;\r<br>-'()+,./:=?;!*#@$_%0123456789", string0);
      assertNotNull(string0);
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = HtmlTools.unicodeToHTMLUnicodeEntity("<html><body><p>&nbsp;4a9WyZ~]t2bl4J\"br", true);
      assertEquals("<html><body><p>&nbsp;4a9WyZ~]t2bl4&#x7f;J\"br", string0);
      assertNotNull(string0);
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = HtmlTools.unicodeToHTMLUnicodeEntity(" \r\n-'()+,.:=?;!*#@$_%02456789", true);
      assertNotNull(string0);
      assertEquals(" &#xd;\n-'()+,.:=?;!*#@$_%02456789", string0);
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = HtmlTools.unicodeToHTMLUnicodeEntity(" \r\n-'H)+,.:=?;!*#@$_%0123456789", false);
      assertEquals(" &#xd;&#xa;-'H)+,.:=?;!*#@$_%0123456789", string0);
      assertNotNull(string0);
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = HtmlTools.unescapeHTMLUnicodeEntity("\t");
      assertEquals("\t", string0);
      assertNotNull(string0);
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = HtmlTools.unescapeHTMLUnicodeEntity("&\u00A0");
      assertNotNull(string0);
      assertEquals("&\u00A0;", string0);
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = HtmlTools.htmlToPlain("&lt;html}4/'t4tD!/O&gt;", false);
      assertEquals("<html}4/'t4tD!/O>", string0);
      assertNotNull(string0);
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = HtmlTools.htmlToPlain("&#7;[01];", false);
      assertNotNull(string0);
      assertEquals("[01];", string0);
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = HtmlTools.unescapeHTMLUnicodeEntity(" &#xd;&#xa;-'H)+,.:=?;!*#@$_%0123456789");
      assertNotNull(string0);
      assertEquals(" \r\n-'H)+,.:=?;!*#@$_%0123456789", string0);
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = HtmlTools.unescapeHTMLUnicodeEntity("\u0000");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = HtmlTools.removeHtmlTagsFromString("jp>");
      assertEquals("jp>", string0);
      assertNotNull(string0);
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = HtmlTools.plainToHTML("[IndexPair: originalStart: -1384 originalEnd: -1384 replacedStart: -1384 replacedEnd: -1384 is a tag: false]");
      assertNotNull(string0);
      assertEquals("<html><body><p>[IndexPair: originalStart: -1384 originalEnd: -1384 replacedStart: -1384 replacedEnd: -1384 is a tag: false]", string0);
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = HtmlTools.plainToHTML(" \r\n-'()+,./:=?;!*#@$_%0123456789");
      assertNotNull(string0);
      assertEquals("<html><body><p>&nbsp;\r<br>-'()+,./:=?;!*#@$_%0123456789", string0);
  }

  @Test
  public void test31()  throws Throwable  {
      String string0 = HtmlTools.plainToHTML("      &   ");
      assertEquals("<html><body><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&nbsp;&nbsp;&nbsp;", string0);
      assertNotNull(string0);
  }

  @Test
  public void test32()  throws Throwable  {
      String string0 = HtmlTools.plainToHTML("<html><body><p>&nbsp;\r<br>-'()+,./:=?;!*#@$_%0123456789");
      assertEquals("<html><body><p>&lt;html&gt;&lt;body&gt;&lt;p&gt;&amp;nbsp;\r&lt;br&gt;-'()+,./:=?;!*#@$_%0123456789", string0);
      assertNotNull(string0);
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = HtmlTools.toXMLEscapedTextExpandingWhitespace("      &   ");
      assertEquals("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&nbsp;&nbsp;&nbsp;", string0);
      assertNotNull(string0);
  }

  @Test
  public void test34()  throws Throwable  {
      String string0 = HtmlTools.toXMLEscapedTextExpandingWhitespace("<html}4/'t4tD!/O>");
      assertNotNull(string0);
      assertEquals("&lt;html}4/'t4tD!/O&gt;", string0);
  }

  @Test
  public void test35()  throws Throwable  {
      String string0 = HtmlTools.toXMLEscapedTextExpandingWhitespace("`suKMpL 9,2+xh?.Z");
      assertEquals("`suKMpL 9,2+xh?.Z", string0);
      assertNotNull(string0);
  }

  @Test
  public void test36()  throws Throwable  {
      String string0 = HtmlTools.toXMLEscapedText("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test
  public void test37()  throws Throwable  {
      String string0 = HtmlTools.toXMLEscapedText((String) null);
      assertEquals("ERROR: none", string0);
      assertNotNull(string0);
  }

  @Test
  public void test38()  throws Throwable  {
      String string0 = HtmlTools.removeInvalidXmlCharacters("<ht$laA&KJxcQ/!=cN4)X");
      assertEquals("<ht$laA&KJxcQ/!=cN4)X;", string0);
      assertNotNull(string0);
  }

  @Test
  public void test39()  throws Throwable  {
      String string0 = HtmlTools.removeInvalidXmlCharacters("<html><body><p>&nbsp;4a9WyZ~]t2bl4&#x7f;J\"br");
      assertEquals("<html><body><p>&nbsp;4a9WyZ~]t2bl4&#x7f;J\"br", string0);
      assertNotNull(string0);
  }

  @Test
  public void test40()  throws Throwable  {
      String string0 = HtmlTools.removeInvalidXmlCharacters("&#7;[01];");
      assertEquals("[01];", string0);
      assertNotNull(string0);
  }

  @Test
  public void test41()  throws Throwable  {
      String string0 = HtmlTools.removeInvalidXmlCharacters("\u0000");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test42()  throws Throwable  {
      String string0 = HtmlTools.extractHtmlBody("&\u00A0");
      assertNotNull(string0);
      assertEquals("&\u00A0", string0);
  }

  @Test
  public void test43()  throws Throwable  {
      String string0 = HtmlTools.extractHtmlBody("<html<html><body>jp>");
      assertNotNull(string0);
      assertEquals("jp>", string0);
  }

  @Test
  public void test44()  throws Throwable  {
      String string0 = HtmlTools.replaceSpacesToNonbreakableSpaces("      &   ");
      assertEquals(" \u00A0\u00A0\u00A0\u00A0\u00A0& \u00A0\u00A0", string0);
      assertNotNull(string0);
  }
}
