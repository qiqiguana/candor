/*
 * This file was automatically generated by EvoSuite
 */

package freemind.extensions;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import freemind.extensions.ExportHook;
import freemind.extensions.HookAdapter;
import freemind.extensions.MindMapHook;
import freemind.modes.ModeController;
import java.util.Properties;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import plugins.collaboration.database.DatabaseStarter;
import plugins.collaboration.socket.MindMapMaster;
import plugins.collaboration.socket.SocketConnectionHook;
import plugins.map.MapDialog;

@RunWith(EvoSuiteRunner.class)
public class HookAdapterEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      HookAdapter hookAdapter0 = new HookAdapter();
      hookAdapter0.shutdownMapHook();
      assertNull(hookAdapter0.getName());
  }

  @Test
  public void test1()  throws Throwable  {
      MapDialog mapDialog0 = new MapDialog();
      // Undeclared exception!
      try {
        mapDialog0.getRegistration();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      ExportHook exportHook0 = new ExportHook();
      // Undeclared exception!
      try {
        exportHook0.getResource((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      ExportHook exportHook0 = new ExportHook();
      exportHook0.setName((String) null);
      assertNull(exportHook0.getName());
  }

  @Test
  public void test4()  throws Throwable  {
      DatabaseStarter databaseStarter0 = new DatabaseStarter();
      // Undeclared exception!
      try {
        databaseStarter0.obtainFocusForSelected();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook();
          // Undeclared exception!
          try {
            socketConnectionHook0.startupMapHook();
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook();
          String string0 = socketConnectionHook0.getName();
          assertNull(string0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
      DatabaseStarter databaseStarter0 = new DatabaseStarter();
      databaseStarter0.setPluginBaseClass((MindMapHook.PluginBaseClassSearcher) null);
      assertNull(databaseStarter0.getName());
  }

  @Test
  public void test8()  throws Throwable  {
      HookAdapter hookAdapter0 = new HookAdapter();
      hookAdapter0.setController((ModeController) null);
      assertNull(hookAdapter0.getName());
  }

  @Test
  public void test9()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          MindMapMaster mindMapMaster0 = new MindMapMaster();
          Properties properties0 = mindMapMaster0.getProperties();
          assertNull(properties0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          MindMapMaster mindMapMaster0 = new MindMapMaster();
          mindMapMaster0.setProperties((Properties) null);
          assertNull(mindMapMaster0.getPassword());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
