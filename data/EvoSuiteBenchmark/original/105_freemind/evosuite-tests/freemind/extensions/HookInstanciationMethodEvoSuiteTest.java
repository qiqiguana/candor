/*
 * This file was automatically generated by EvoSuite
 */

package freemind.extensions;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import freemind.extensions.HookInstanciationMethod;
import freemind.modes.MindMapNode;
import freemind.modes.ModeController;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Vector;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class HookInstanciationMethodEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = HookInstanciationMethod.getAllInstanciationMethods();
      assertEquals(5, hashMap0.size());
  }

  @Test
  public void test1()  throws Throwable  {
      HookInstanciationMethod hookInstanciationMethod0 = HookInstanciationMethod.Other;
      boolean boolean0 = hookInstanciationMethod0.isUndoable();
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      HookInstanciationMethod hookInstanciationMethod0 = HookInstanciationMethod.OnceForAllNodes;
      boolean boolean0 = hookInstanciationMethod0.isSingleton();
      assertEquals(true, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      HookInstanciationMethod hookInstanciationMethod0 = HookInstanciationMethod.Other;
      Vector<Object> vector0 = new Vector<Object>();
      Collection<Object> collection0 = hookInstanciationMethod0.getDestinationNodes((ModeController) null, (MindMapNode) null, (List) vector0);
      assertEquals(true, collection0.isEmpty());
  }

  @Test
  public void test4()  throws Throwable  {
      HookInstanciationMethod hookInstanciationMethod0 = HookInstanciationMethod.Other;
      Vector<Object> vector0 = new Vector<Object>();
      MindMapNode mindMapNode0 = hookInstanciationMethod0.getCenterNode((ModeController) null, (MindMapNode) null, (List) vector0);
      assertNull(mindMapNode0);
  }

  @Test
  public void test5()  throws Throwable  {
      HookInstanciationMethod hookInstanciationMethod0 = HookInstanciationMethod.ApplyToRoot;
      boolean boolean0 = hookInstanciationMethod0.isPermanent();
      assertEquals(false, boolean0);
  }
}
