/*
 * This file was automatically generated by EvoSuite
 */

package freemind.extensions;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import accessories.plugins.ClonePlugin;
import freemind.extensions.PermanentNodeHookAdapter;
import freemind.extensions.PermanentNodeHookSubstituteUnknown;
import freemind.main.XMLElement;
import freemind.modes.MindMapNode;
import freemind.modes.mindmapmode.actions.xml.ActionPair;
import freemind.view.mindmapview.NodeView;
import java.lang.reflect.InvocationTargetException;
import org.junit.BeforeClass;
import plugins.map.MapNodePositionHolder;

@RunWith(EvoSuiteRunner.class)
public class PermanentNodeHookAdapterEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      MapNodePositionHolder mapNodePositionHolder0 = new MapNodePositionHolder();
      mapNodePositionHolder0.registerFilter();
      assertNull(mapNodePositionHolder0.getName());
  }

  @Test
  public void test1()  throws Throwable  {
      ClonePlugin clonePlugin0 = new ClonePlugin();
      // Undeclared exception!
      try {
        clonePlugin0.setToolTip("rh$", "rh$");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      PermanentNodeHookAdapter permanentNodeHookAdapter0 = new PermanentNodeHookAdapter();
      permanentNodeHookAdapter0.onUpdateNodeHook();
      assertNull(permanentNodeHookAdapter0.getName());
  }

  @Test
  public void test3()  throws Throwable  {
      MapNodePositionHolder mapNodePositionHolder0 = new MapNodePositionHolder();
      mapNodePositionHolder0.onAddChildren((MindMapNode) null);
      assertEquals("MapNodePositionHolder [mPosition=Coordinate[0.0, 0.0], mMapCenter=Coordinate[0.0, 0.0], mTileSource=null, mZoom=1, getNode()=null]", mapNodePositionHolder0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      PermanentNodeHookAdapter permanentNodeHookAdapter0 = new PermanentNodeHookAdapter();
      permanentNodeHookAdapter0.onViewRemovedHook((NodeView) null);
      assertNull(permanentNodeHookAdapter0.getName());
  }

  @Test
  public void test5()  throws Throwable  {
      PermanentNodeHookAdapter permanentNodeHookAdapter0 = new PermanentNodeHookAdapter();
      permanentNodeHookAdapter0.onRemoveChildren((MindMapNode) null, (MindMapNode) null);
      assertNull(permanentNodeHookAdapter0.getName());
  }

  @Test
  public void test6()  throws Throwable  {
      ClonePlugin clonePlugin0 = new ClonePlugin();
      clonePlugin0.executeTransaction((ActionPair) null);
      assertNull(clonePlugin0.getName());
  }

  @Test
  public void test7()  throws Throwable  {
      PermanentNodeHookSubstituteUnknown permanentNodeHookSubstituteUnknown0 = new PermanentNodeHookSubstituteUnknown("stroke-miterlimit");
      XMLElement xMLElement0 = new XMLElement(false);
      // Undeclared exception!
      try {
        permanentNodeHookSubstituteUnknown0.save(xMLElement0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      PermanentNodeHookAdapter permanentNodeHookAdapter0 = new PermanentNodeHookAdapter();
      permanentNodeHookAdapter0.onNewChild((MindMapNode) null);
      assertNull(permanentNodeHookAdapter0.getName());
  }

  @Test
  public void test9()  throws Throwable  {
      PermanentNodeHookAdapter permanentNodeHookAdapter0 = new PermanentNodeHookAdapter();
      XMLElement xMLElement0 = new XMLElement(false);
      permanentNodeHookAdapter0.loadFrom(xMLElement0);
      assertNull(xMLElement0.getName());
  }

  @Test
  public void test10()  throws Throwable  {
      PermanentNodeHookAdapter permanentNodeHookAdapter0 = new PermanentNodeHookAdapter();
      permanentNodeHookAdapter0.onFocusNode((NodeView) null);
      assertNull(permanentNodeHookAdapter0.getName());
  }

  @Test
  public void test11()  throws Throwable  {
      PermanentNodeHookAdapter permanentNodeHookAdapter0 = new PermanentNodeHookAdapter();
      permanentNodeHookAdapter0.onUpdateChildrenHook((MindMapNode) null);
      assertNull(permanentNodeHookAdapter0.getName());
  }

  @Test
  public void test12()  throws Throwable  {
      ClonePlugin clonePlugin0 = new ClonePlugin();
      clonePlugin0.deregisterFilter();
      assertNull(clonePlugin0.getName());
  }

  @Test
  public void test13()  throws Throwable  {
      PermanentNodeHookAdapter permanentNodeHookAdapter0 = new PermanentNodeHookAdapter();
      permanentNodeHookAdapter0.onViewCreatedHook((NodeView) null);
      assertNull(permanentNodeHookAdapter0.getName());
  }

  @Test
  public void test14()  throws Throwable  {
      PermanentNodeHookAdapter permanentNodeHookAdapter0 = new PermanentNodeHookAdapter();
      ActionPair actionPair0 = permanentNodeHookAdapter0.filterAction((ActionPair) null);
      assertNull(actionPair0);
  }

  @Test
  public void test15()  throws Throwable  {
      PermanentNodeHookAdapter permanentNodeHookAdapter0 = new PermanentNodeHookAdapter();
      permanentNodeHookAdapter0.onAddChild((MindMapNode) null);
      assertNull(permanentNodeHookAdapter0.getName());
  }

  @Test
  public void test16()  throws Throwable  {
      PermanentNodeHookAdapter permanentNodeHookAdapter0 = new PermanentNodeHookAdapter();
      permanentNodeHookAdapter0.onRemoveChild((MindMapNode) null);
      assertNull(permanentNodeHookAdapter0.getName());
  }

  @Test
  public void test17()  throws Throwable  {
      PermanentNodeHookAdapter permanentNodeHookAdapter0 = new PermanentNodeHookAdapter();
      permanentNodeHookAdapter0.shutdownMapHook();
      assertNull(permanentNodeHookAdapter0.getName());
  }

  @Test
  public void test18()  throws Throwable  {
      PermanentNodeHookAdapter permanentNodeHookAdapter0 = new PermanentNodeHookAdapter();
      permanentNodeHookAdapter0.onLostFocusNode((NodeView) null);
      assertNull(permanentNodeHookAdapter0.getName());
  }
}
