/*
 * This file was automatically generated by EvoSuite
 */

package freemind.controller;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import freemind.controller.Controller;
import freemind.controller.NodeDropListener;
import java.awt.dnd.DropTargetDragEvent;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.dnd.DropTargetEvent;
import java.awt.dnd.DropTargetListener;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class NodeDropListenerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      NodeDropListener nodeDropListener0 = new NodeDropListener((Controller) null);
      nodeDropListener0.deregister();
  }

  @Test
  public void test1()  throws Throwable  {
      NodeDropListener nodeDropListener0 = new NodeDropListener((Controller) null);
      nodeDropListener0.dragEnter((DropTargetDragEvent) null);
  }

  @Test
  public void test2()  throws Throwable  {
      NodeDropListener nodeDropListener0 = new NodeDropListener((Controller) null);
      nodeDropListener0.register((DropTargetListener) nodeDropListener0);
      // Undeclared exception!
      try {
        nodeDropListener0.dragEnter((DropTargetDragEvent) null);
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      NodeDropListener nodeDropListener0 = new NodeDropListener((Controller) null);
      nodeDropListener0.dragExit((DropTargetEvent) null);
  }

  @Test
  public void test4()  throws Throwable  {
      NodeDropListener nodeDropListener0 = new NodeDropListener((Controller) null);
      nodeDropListener0.register((DropTargetListener) nodeDropListener0);
      // Undeclared exception!
      try {
        nodeDropListener0.dragExit((DropTargetEvent) null);
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      NodeDropListener nodeDropListener0 = new NodeDropListener((Controller) null);
      nodeDropListener0.dragOver((DropTargetDragEvent) null);
  }

  @Test
  public void test6()  throws Throwable  {
      NodeDropListener nodeDropListener0 = new NodeDropListener((Controller) null);
      nodeDropListener0.register((DropTargetListener) nodeDropListener0);
      // Undeclared exception!
      try {
        nodeDropListener0.dragOver((DropTargetDragEvent) null);
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      NodeDropListener nodeDropListener0 = new NodeDropListener((Controller) null);
      nodeDropListener0.drop((DropTargetDropEvent) null);
  }

  @Test
  public void test8()  throws Throwable  {
      NodeDropListener nodeDropListener0 = new NodeDropListener((Controller) null);
      nodeDropListener0.register((DropTargetListener) nodeDropListener0);
      // Undeclared exception!
      try {
        nodeDropListener0.drop((DropTargetDropEvent) null);
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      NodeDropListener nodeDropListener0 = new NodeDropListener((Controller) null);
      nodeDropListener0.dropActionChanged((DropTargetDragEvent) null);
  }

  @Test
  public void test10()  throws Throwable  {
      NodeDropListener nodeDropListener0 = new NodeDropListener((Controller) null);
      nodeDropListener0.register((DropTargetListener) nodeDropListener0);
      // Undeclared exception!
      try {
        nodeDropListener0.dropActionChanged((DropTargetDragEvent) null);
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }
}
