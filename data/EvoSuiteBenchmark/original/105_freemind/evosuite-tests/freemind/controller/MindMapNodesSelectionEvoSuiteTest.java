/*
 * This file was automatically generated by EvoSuite
 */

package freemind.controller;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import freemind.controller.MindMapNodesSelection;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.util.LinkedList;
import java.util.List;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MindMapNodesSelectionEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MindMapNodesSelection mindMapNodesSelection0 = new MindMapNodesSelection("", "", "", "", "|*x&2eW{E|MP*8hZ", "", (List) linkedList0, (List) linkedList0);
      Clipboard clipboard0 = new Clipboard("");
      StringSelection stringSelection0 = new StringSelection("");
      mindMapNodesSelection0.lostOwnership(clipboard0, (Transferable) stringSelection0);
      assertEquals("", clipboard0.getName());
  }

  @Test
  public void test1()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MindMapNodesSelection mindMapNodesSelection0 = new MindMapNodesSelection((String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (List) linkedList0, (List) linkedList0);
      DataFlavor[] dataFlavorArray0 = mindMapNodesSelection0.getTransferDataFlavors();
      assertNotNull(dataFlavorArray0);
  }

  @Test
  public void test2()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MindMapNodesSelection mindMapNodesSelection0 = new MindMapNodesSelection((String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (List) linkedList0, (List) linkedList0);
      mindMapNodesSelection0.setDropAction((String) null);
  }

  @Test
  public void test3()  throws Throwable  {
      DataFlavor dataFlavor0 = MindMapNodesSelection.htmlFlavor;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MindMapNodesSelection mindMapNodesSelection0 = new MindMapNodesSelection(")pplicationFfreeoind-node-idsL class=java.util.List", ")pplicationFfreeoind-node-idsL class=java.util.List", ")pplicationFfreeoind-node-idsL class=java.util.List", ")pplicationFfreeoind-node-idsL class=java.util.List", ")pplicationFfreeoind-node-idsL class=java.util.List", ")pplicationFfreeoind-node-idsL class=java.util.List", (List) linkedList0, (List) linkedList0);
      String string0 = (String)mindMapNodesSelection0.getTransferData(dataFlavor0);
      assertEquals(")pplicationFfreeoind-node-idsL class=java.util.List", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MindMapNodesSelection mindMapNodesSelection0 = new MindMapNodesSelection(")pplicationFfreeoind-node-idsL class=java.util.List", ")pplicationFfreeoind-node-idsL class=java.util.List", ")pplicationFfreeoind-node-idsL class=java.util.List", ")pplicationFfreeoind-node-idsL class=java.util.List", ")pplicationFfreeoind-node-idsL class=java.util.List", ")pplicationFfreeoind-node-idsL class=java.util.List", (List) linkedList0, (List) linkedList0);
      LinkedList<Object> linkedList1 = (LinkedList<Object>)mindMapNodesSelection0.getTransferData(MindMapNodesSelection.fileListFlavor);
      assertSame(linkedList1, linkedList0);
      assertNotNull(linkedList1);
  }

  @Test
  public void test5()  throws Throwable  {
      DataFlavor dataFlavor0 = MindMapNodesSelection.dropActionFlavor;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MindMapNodesSelection mindMapNodesSelection0 = new MindMapNodesSelection("", "", "", "", "", "", (List) linkedList0, (List) linkedList0);
      boolean boolean0 = mindMapNodesSelection0.isDataFlavorSupported(dataFlavor0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MindMapNodesSelection mindMapNodesSelection0 = new MindMapNodesSelection("%(V$d K_]Cq;'", "%(V$d K_]Cq;'", "%(V$d K_]Cq;'", "%(V$d K_]Cq;'", "%(V$d K_]Cq;'", "%(V$d K_]Cq;'", (List) linkedList0, (List) linkedList0);
      boolean boolean0 = mindMapNodesSelection0.isDataFlavorSupported(mindMapNodesSelection0.mindMapNodesFlavor);
      assertEquals(true, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MindMapNodesSelection mindMapNodesSelection0 = new MindMapNodesSelection("", "", "", "", "|*x&2eW{E|MP*8hZ", "", (List) linkedList0, (List) linkedList0);
      DataFlavor dataFlavor0 = MindMapNodesSelection.fileListFlavor;
      boolean boolean0 = mindMapNodesSelection0.isDataFlavorSupported(dataFlavor0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      DataFlavor dataFlavor0 = MindMapNodesSelection.copyNodeIdsFlavor;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MindMapNodesSelection mindMapNodesSelection0 = new MindMapNodesSelection((String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (List) linkedList0, (List) linkedList0);
      boolean boolean0 = mindMapNodesSelection0.isDataFlavorSupported(dataFlavor0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      MindMapNodesSelection mindMapNodesSelection0 = new MindMapNodesSelection("", "", "", "", "", "", (List) null, (List) null);
      DataFlavor dataFlavor0 = new DataFlavor();
      boolean boolean0 = mindMapNodesSelection0.isDataFlavorSupported(dataFlavor0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MindMapNodesSelection mindMapNodesSelection0 = new MindMapNodesSelection("", "", "", "", "|*x&2eW{E|MP*8hZ", "", (List) linkedList0, (List) linkedList0);
      linkedList0.add("|*x&2eW{E|MP*8hZ");
      boolean boolean0 = mindMapNodesSelection0.isDataFlavorSupported(mindMapNodesSelection0.fileListFlavor);
      assertEquals(true, boolean0);
  }
}
