/*
 * This file was automatically generated by EvoSuite
 */

package freemind.controller;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import freemind.controller.Controller;
import freemind.controller.MapModuleManager;
import freemind.modes.Mode;
import freemind.modes.ModeController;
import freemind.modes.browsemode.BrowseMode;
import freemind.modes.filemode.FileMode;
import freemind.view.MapModule;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.List;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MapModuleManagerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      MapModuleManager mapModuleManager0 = new MapModuleManager((Controller) null);
      mapModuleManager0.removeListener((MapModuleManager.MapModuleChangeObserver) null);
  }

  @Test
  public void test1()  throws Throwable  {
      MapModuleManager mapModuleManager0 = new MapModuleManager((Controller) null);
      mapModuleManager0.addListener((MapModuleManager.MapModuleChangeObserver) null);
  }

  @Test
  public void test2()  throws Throwable  {
      MapModuleManager mapModuleManager0 = new MapModuleManager((Controller) null);
      // Undeclared exception!
      try {
        mapModuleManager0.changeToMapModule((MapModule) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      MapModuleManager mapModuleManager0 = new MapModuleManager((Controller) null);
      // Undeclared exception!
      try {
        mapModuleManager0.updateMapModuleName();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      MapModuleManager mapModuleManager0 = new MapModuleManager((Controller) null);
      List<Object> list0 = mapModuleManager0.getMapModuleVector();
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test5()  throws Throwable  {
      MapModuleManager mapModuleManager0 = new MapModuleManager((Controller) null);
      // Undeclared exception!
      try {
        mapModuleManager0.swapModules((-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * One index is out of bounds -1, -1, size= 0
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      BrowseMode browseMode0 = new BrowseMode();
      MapModuleManager mapModuleManager0 = new MapModuleManager((Controller) null);
      mapModuleManager0.listener.afterMapClose((MapModule) null, (Mode) browseMode0);
      assertEquals("Browse", browseMode0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      MapModuleManager mapModuleManager0 = new MapModuleManager((Controller) null);
      MapModule mapModule0 = mapModuleManager0.getModuleGivenModeController((ModeController) null);
      assertNull(mapModule0);
  }

  @Test
  public void test8()  throws Throwable  {
      MapModuleManager mapModuleManager0 = new MapModuleManager((Controller) null);
      mapModuleManager0.nextMapModule();
  }

  @Test
  public void test9()  throws Throwable  {
      MapModuleManager mapModuleManager0 = new MapModuleManager((Controller) null);
      mapModuleManager0.previousMapModule();
  }

  @Test
  public void test10()  throws Throwable  {
      MapModuleManager mapModuleManager0 = new MapModuleManager((Controller) null);
      boolean boolean0 = mapModuleManager0.tryToChangeToMapModule("before-edge");
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      MapModuleManager mapModuleManager0 = new MapModuleManager((Controller) null);
      String string0 = mapModuleManager0.checkIfFileIsAlreadyOpened((URL) null);
      assertNull(string0);
  }

  @Test
  public void test12()  throws Throwable  {
      MapModuleManager mapModuleManager0 = new MapModuleManager((Controller) null);
      // Undeclared exception!
      try {
        mapModuleManager0.changeToMapModule("+ ");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Map module +  not found.
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      FileMode fileMode0 = new FileMode();
      MapModuleManager mapModuleManager0 = new MapModuleManager((Controller) null);
      mapModuleManager0.changeToMapOfMode((Mode) fileMode0);
      assertEquals("File", fileMode0.toString());
  }
}
