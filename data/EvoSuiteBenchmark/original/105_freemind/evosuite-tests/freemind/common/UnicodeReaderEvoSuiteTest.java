/*
 * This file was automatically generated by EvoSuite
 */

package freemind.common;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import freemind.common.UnicodeReader;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.UnsupportedEncodingException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class UnicodeReaderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      UnicodeReader unicodeReader0 = new UnicodeReader((InputStream) null, "");
      try {
        unicodeReader0.close();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Stream closed
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) (byte)85, (-1));
      UnicodeReader unicodeReader0 = new UnicodeReader((InputStream) byteArrayInputStream0, "_ W>[BhU");
      String string0 = unicodeReader0.getDefaultEncoding();
      assertEquals("_ W>[BhU", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      UnicodeReader unicodeReader0 = new UnicodeReader((InputStream) pipedInputStream0, "");
      String string0 = unicodeReader0.getEncoding();
      assertNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) byteArrayInputStream0);
      UnicodeReader unicodeReader0 = new UnicodeReader((InputStream) pushbackInputStream0, (String) null);
      assertEquals(0, pushbackInputStream0.available());
      
      char[] charArray0 = new char[2];
      unicodeReader0.read();
      // Undeclared exception!
      try {
        unicodeReader0.read(charArray0, (int) (byte)0, (int) (byte) (-65));
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-12);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) byteArrayInputStream0);
      UnicodeReader unicodeReader0 = new UnicodeReader((InputStream) pushbackInputStream0, (String) null);
      assertEquals(-1, byteArrayInputStream0.read());
      
      int int0 = unicodeReader0.read();
      assertEquals(0, int0);
  }

  @Test
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 1172);
      UnicodeReader unicodeReader0 = new UnicodeReader((InputStream) byteArrayInputStream0, "");
      char[] charArray0 = new char[4];
      try {
        unicodeReader0.read(charArray0, 1636, (int) '=');
        fail("Expecting exception: UnsupportedEncodingException");
      } catch(UnsupportedEncodingException e) {
        /*
         * 
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[2] = (byte) (-2);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      UnicodeReader unicodeReader0 = new UnicodeReader((InputStream) byteArrayInputStream0, "LJCxhOe:dD");
      try {
        unicodeReader0.read();
        fail("Expecting exception: UnsupportedEncodingException");
      } catch(UnsupportedEncodingException e) {
        /*
         * LJCxhOe:dD
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 1172);
      UnicodeReader unicodeReader0 = new UnicodeReader((InputStream) byteArrayInputStream0, "");
      char[] charArray0 = new char[4];
      try {
        unicodeReader0.read(charArray0, 1626, (int) '=');
        fail("Expecting exception: UnsupportedEncodingException");
      } catch(UnsupportedEncodingException e) {
        /*
         * 
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (int) (byte) (-67));
      UnicodeReader unicodeReader0 = new UnicodeReader((InputStream) byteArrayInputStream0, "S8:");
      try {
        unicodeReader0.init();
        fail("Expecting exception: UnsupportedEncodingException");
      } catch(UnsupportedEncodingException e) {
        /*
         * S8:
         */
      }
  }
}
