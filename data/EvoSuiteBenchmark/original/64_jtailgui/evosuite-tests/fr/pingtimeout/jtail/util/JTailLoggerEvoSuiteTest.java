/*
 * This file was automatically generated by EvoSuite
 */

package fr.pingtimeout.jtail.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import fr.pingtimeout.jtail.util.JTailLogger;
import org.junit.BeforeClass;
import org.slf4j.Marker;
import org.slf4j.helpers.NOPLogger;

@RunWith(EvoSuiteRunner.class)
public class JTailLoggerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      JTailLogger jTailLogger0 = new JTailLogger();
      JTailLogger.info((Marker) null, "C", (Object) "C", (Object) jTailLogger0);
  }

  @Test
  public void test1()  throws Throwable  {
      JTailLogger.debug((Marker) null, "C", (Object) "C");
  }

  @Test
  public void test2()  throws Throwable  {
      JTailLogger.debug("org.slf4j.helpers.NOPLogger(NOP)");
  }

  @Test
  public void test3()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      JTailLogger.debug("", (Object) nOPLogger0);
      assertEquals(false, nOPLogger0.isErrorEnabled());
  }

  @Test
  public void test4()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      JTailLogger.debug("", (Object) "org.slf4j.helpers.NOPLogger(NOP)", (Object) nOPLogger0);
      assertEquals(false, nOPLogger0.isTraceEnabled());
  }

  @Test
  public void test5()  throws Throwable  {
      JTailLogger.LoggerLevel[] jTailLogger_LoggerLevelArray0 = JTailLogger.LoggerLevel.values();
      JTailLogger.debug("+", (Object[]) jTailLogger_LoggerLevelArray0);
  }

  @Test
  public void test6()  throws Throwable  {
      JTailLogger.debug("+", (Throwable) null);
  }

  @Test
  public void test7()  throws Throwable  {
      JTailLogger.debug((Marker) null, "WARN");
  }

  @Test
  public void test8()  throws Throwable  {
      Object object0 = new Object();
      JTailLogger.debug((Marker) null, (String) null, object0, object0);
  }

  @Test
  public void test9()  throws Throwable  {
      Object[] objectArray0 = new Object[10];
      JTailLogger.debug((Marker) null, "INFO", objectArray0);
  }

  @Test
  public void test10()  throws Throwable  {
      JTailLogger.debug((Marker) null, "[{\"bo$VLN?Z:Z)05X", (Throwable) null);
  }

  @Test
  public void test11()  throws Throwable  {
      JTailLogger.info("sun.refleOt.GenratedMethodAccessor1");
  }

  @Test
  public void test12()  throws Throwable  {
      JTailLogger.info("WARN", (Object) null);
  }

  @Test
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      JTailLogger.info("DxUYkWz", object0, object0);
  }

  @Test
  public void test14()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      JTailLogger.info("WARN", objectArray0);
  }

  @Test
  public void test15()  throws Throwable  {
      JTailLogger.info("DEBUG", (Throwable) null);
  }

  @Test
  public void test16()  throws Throwable  {
      JTailLogger.info((Marker) null, "DEBUG");
  }

  @Test
  public void test17()  throws Throwable  {
      JTailLogger.info((Marker) null, "NOP", (Object) "NOP");
  }

  @Test
  public void test18()  throws Throwable  {
      Object[] objectArray0 = new Object[10];
      JTailLogger.info((Marker) null, "INFO", objectArray0);
  }

  @Test
  public void test19()  throws Throwable  {
      JTailLogger.info((Marker) null, "+", (Throwable) null);
  }

  @Test
  public void test20()  throws Throwable  {
      JTailLogger.warn("WARN");
  }

  @Test
  public void test21()  throws Throwable  {
      JTailLogger.warn("", "org.slf4j.helpers.NOPLogger(NOP)");
  }

  @Test
  public void test22()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      JTailLogger.warn((String) null, objectArray0);
  }

  @Test
  public void test23()  throws Throwable  {
      JTailLogger.warn("C", "C", "C");
  }

  @Test
  public void test24()  throws Throwable  {
      JTailLogger.warn("DEBUG", (Throwable) null);
  }

  @Test
  public void test25()  throws Throwable  {
      JTailLogger.warn((Marker) null, "INFO");
  }

  @Test
  public void test26()  throws Throwable  {
      JTailLogger.warn((Marker) null, "DEBUG", (Object) "DEBUG");
  }

  @Test
  public void test27()  throws Throwable  {
      JTailLogger.warn((Marker) null, "INFO", (Object) null, (Object) null);
  }

  @Test
  public void test28()  throws Throwable  {
      JTailLogger.LoggerLevel[] jTailLogger_LoggerLevelArray0 = JTailLogger.LoggerLevel.values();
      JTailLogger.warn((Marker) null, "+", (Object[]) jTailLogger_LoggerLevelArray0);
  }

  @Test
  public void test29()  throws Throwable  {
      JTailLogger.warn((Marker) null, "+", (Throwable) null);
  }
}
