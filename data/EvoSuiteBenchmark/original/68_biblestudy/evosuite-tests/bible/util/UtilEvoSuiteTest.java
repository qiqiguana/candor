/*
 * This file was automatically generated by EvoSuite
 */

package bible.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import bible.obj.Identifible;
import bible.obj.Verse;
import bible.util.Util;
import java.io.IOException;
import java.io.Serializable;
import java.util.Vector;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class UtilEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try {
        Util.ToString((Throwable) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      String string0 = Util.ToString((Vector) null);
      assertNotNull(string0);
      assertEquals("null", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      Util util0 = new Util();
      assertNotNull(util0);
  }

  @Test
  public void test3()  throws Throwable  {
      int[] intArray0 = new int[3];
      String string0 = Util.ToString(intArray0);
      assertEquals("0, 0, 0", string0);
      assertNotNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      int[] intArray0 = Util.ToIntArray("", "");
      String string0 = Util.ToString(intArray0);
      assertEquals("", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String string0 = Util.ToString(objectArray0, true, "(vP|\"7cs.J@Hc2jT");
      assertNotNull(string0);
      assertEquals("0 - null", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      Vector<Vector<Serializable>> vector0 = new Vector<Vector<Serializable>>();
      Vector<Serializable> vector1 = new Vector<Serializable>();
      vector0.insertElementAt(vector1, 0);
      String string0 = Util.ToString(vector0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      Identifible[] identifibleArray0 = new Identifible[1];
      Verse verse0 = Verse.New(97);
      identifibleArray0[0] = (Identifible) verse0;
      String string0 = Util.ToString((Object[]) identifibleArray0);
      assertEquals("bible.obj.Verse:[0 null null]", string0);
      assertNotNull(string0);
  }

  @Test
  public void test8()  throws Throwable  {
      String[] stringArray0 = Util.ToStringArray("", "");
      assertNotNull(stringArray0);
      
      String string0 = Util.ToString(stringArray0, "null");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test
  public void test9()  throws Throwable  {
      String[] stringArray0 = new String[10];
      String string0 = Util.ToString(stringArray0, "");
      assertNotNull(string0);
      assertEquals("nullnullnullnullnullnullnullnullnullnull", string0);
  }

  @Test
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "0-uS|/";
      objectArray0[1] = (Object) "0-uS|/";
      objectArray0[2] = (Object) "0-uS|/";
      objectArray0[3] = (Object) "0-uS|/";
      objectArray0[4] = (Object) "0-uS|/";
      objectArray0[5] = (Object) "0-uS|/";
      objectArray0[6] = (Object) "0-uS|/";
      String[] stringArray0 = Util.ToStringArray(objectArray0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test11()  throws Throwable  {
      String[] stringArray0 = Util.ToStringArray((Vector) null);
      assertNotNull(stringArray0);
  }

  @Test
  public void test12()  throws Throwable  {
      Vector<Serializable> vector0 = new Vector<Serializable>();
      String[] stringArray0 = Util.ToStringArray(vector0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test13()  throws Throwable  {
      String[] stringArray0 = Util.ToStringArray("0 - null", "(vP|\"7cs.J@Hc2jT");
      assertNotNull(stringArray0);
  }

  @Test
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try {
        Util.ToIntArray("YFNqn%p1dc(w=lz", "*1@Sz-&H@Od:/jJ");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
        /*
         * For input string: \"YFNqn%p\"
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      String[] stringArray0 = Util.ToStringArray("", "");
      int[] intArray0 = Util.ToIntArray(stringArray0);
      assertNotNull(intArray0);
  }

  @Test
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[16];
      // Undeclared exception!
      try {
        Util.ToIntArray(stringArray0);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
        /*
         * null
         */
      }
  }

  @Test
  public void test17()  throws Throwable  {
      Identifible[] identifibleArray0 = new Identifible[1];
      Verse verse0 = Verse.New(97);
      identifibleArray0[0] = (Identifible) verse0;
      int[] intArray0 = Util.ToIntArray(identifibleArray0);
      assertNotNull(intArray0);
      
      Vector<Object> vector0 = Util.ToVector(intArray0);
      assertNotNull(vector0);
      assertEquals(1, vector0.size());
  }

  @Test
  public void test18()  throws Throwable  {
      Identifible[] identifibleArray0 = new Identifible[1];
      Vector<Object> vector0 = Util.ToVector((Object[]) identifibleArray0);
      assertEquals(1, vector0.size());
      assertNotNull(vector0);
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = Util.Replace("0-uS|/", "0-uS|/", "0-uS|/");
      assertNotNull(string0);
      assertEquals("0-uS|/", string0);
  }

  @Test
  public void test20()  throws Throwable  {
      long long0 = Util.GetSize((Object) null);
      assertEquals((-1L), long0);
  }

  @Test
  public void test21()  throws Throwable  {
      String[] stringArray0 = Util.ToStringArray("", "");
      assertNotNull(stringArray0);
      
      long long0 = Util.GetSize((Object) stringArray0);
      assertEquals(44L, long0);
  }
}
