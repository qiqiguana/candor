/*
 * This file was automatically generated by EvoSuite
 */

package bible.servlet;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import bible.servlet.Base;
import java.io.IOException;
import java.util.Date;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BaseEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      Base.Options base_Options0 = Base.GetOptions();
      String string0 = base_Options0.getMailServerIP();
      assertEquals("localhost", string0);
      assertNotNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      Base.Options base_Options0 = new Base.Options();
      assertNotNull(base_Options0);
      
      String string0 = base_Options0.getBypassAccountsString();
      assertEquals(false, base_Options0.getLogStandardOutput());
      assertEquals("localhost", base_Options0.getMailServerIP());
      assertNotNull(string0);
      assertEquals(true, base_Options0.getEnabled());
      assertEquals("", string0);
      assertEquals("Stauffer_James@yahoo.com", base_Options0.getNotificationEmail());
  }

  @Test
  public void test2()  throws Throwable  {
      Base.Options base_Options0 = new Base.Options();
      assertNotNull(base_Options0);
      
      base_Options0.setLogStandardOutput("9;MJz~p>.");
      assertEquals(false, base_Options0.getLogStandardOutput());
      assertEquals("localhost", base_Options0.getMailServerIP());
      assertEquals("Stauffer_James@yahoo.com", base_Options0.getNotificationEmail());
      assertEquals("", base_Options0.getBypassAccountsString());
      assertEquals("true", base_Options0.getEnabledString());
  }

  @Test
  public void test3()  throws Throwable  {
      Base.Options base_Options0 = Base.GetOptions();
      assertNotNull(base_Options0);
      
      base_Options0.setBypassAccounts("");
      assertEquals("", base_Options0.getBypassAccountsString());
  }

  @Test
  public void test4()  throws Throwable  {
      Base.Options base_Options0 = new Base.Options();
      assertNotNull(base_Options0);
      
      base_Options0.setMailServerIP("9;MJz~p>.");
      assertEquals("9;MJz~p>.", base_Options0.getMailServerIP());
      assertEquals("Stauffer_James@yahoo.com", base_Options0.getNotificationEmail());
  }

  @Test
  public void test5()  throws Throwable  {
      Base.Options base_Options0 = new Base.Options();
      assertNotNull(base_Options0);
      assertEquals("true", base_Options0.getEnabledString());
      
      base_Options0.setEnabled("9;MJz~p>.");
      assertEquals("false", base_Options0.getEnabledString());
      assertEquals("", base_Options0.getBypassAccountsString());
  }

  @Test
  public void test6()  throws Throwable  {
      Base.Options base_Options0 = new Base.Options();
      assertNotNull(base_Options0);
      
      boolean boolean0 = base_Options0.getLogStandardOutput();
      assertEquals("localhost", base_Options0.getMailServerIP());
      assertEquals("true", base_Options0.getEnabledString());
      assertEquals(false, boolean0);
      assertEquals("Stauffer_James@yahoo.com", base_Options0.getNotificationEmail());
      assertEquals("", base_Options0.getBypassAccountsString());
  }

  @Test
  public void test7()  throws Throwable  {
      Base.Options base_Options0 = new Base.Options();
      assertNotNull(base_Options0);
      
      String string0 = base_Options0.getNotificationEmail();
      assertEquals("", base_Options0.getBypassAccountsString());
      assertNotNull(string0);
      assertEquals("localhost", base_Options0.getMailServerIP());
      assertEquals(true, base_Options0.getEnabled());
      assertEquals(false, base_Options0.getLogStandardOutput());
      assertEquals("Stauffer_James@yahoo.com", string0);
  }

  @Test
  public void test8()  throws Throwable  {
      Base.EmailNotify();
  }

  @Test
  public void test9()  throws Throwable  {
      Base.Options base_Options0 = new Base.Options();
      assertNotNull(base_Options0);
      
      String string0 = base_Options0.getEnabledString();
      assertEquals("true", string0);
      assertNotNull(string0);
      assertEquals("", base_Options0.getBypassAccountsString());
      assertEquals("Stauffer_James@yahoo.com", base_Options0.getNotificationEmail());
      assertEquals(true, base_Options0.getEnabled());
      assertEquals(false, base_Options0.getLogStandardOutput());
      assertEquals("localhost", base_Options0.getMailServerIP());
  }

  @Test
  public void test10()  throws Throwable  {
      Base.Options base_Options0 = new Base.Options();
      assertNotNull(base_Options0);
      
      base_Options0.setNotificationEmail("true");
      assertEquals("true", base_Options0.getNotificationEmail());
      assertEquals(true, base_Options0.getEnabled());
  }

  @Test
  public void test11()  throws Throwable  {
      Date date0 = Base.GetStartTime();
      assertEquals(2, date0.getDate());
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = Base.GetHostName();
      assertEquals("localhost/127.0.0.1", string0);
  }

  @Test
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          // Undeclared exception!
          try {
            Base.Log((Exception) null);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission bible/logs/Error/2013/07-Jul/02-Tue write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.mkdir(File.java:1155)
             * java.io.File.mkdirs(File.java:1184)
             * bible.util.Logger.<init>(Logger.java:36)
             * bible.util.Logger.<init>(Logger.java:21)
             * bible.util.Logger.Log(Logger.java:98)
             * bible.servlet.Base.Log(Base.java:59)
             * bible.servlet.Base.Log(Base.java:55)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test14()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          // Undeclared exception!
          try {
            Base.LogMessage("");
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission bible/logs/Info/2013/07-Jul/02-Tue write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.mkdir(File.java:1155)
             * java.io.File.mkdirs(File.java:1184)
             * bible.util.Logger.<init>(Logger.java:36)
             * bible.util.Logger.<init>(Logger.java:21)
             * bible.util.Logger.Log(Logger.java:92)
             * bible.servlet.Base.LogMessage(Base.java:63)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test15()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          Base.Options base_Options0 = new Base.Options();
          assertNotNull(base_Options0);
          
          // Undeclared exception!
          try {
            base_Options0.saveProperties();
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission bible/properties/Application.properties write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:183)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:145)
             * bible.servlet.Base$Options.saveProperties(Base.java:355)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
