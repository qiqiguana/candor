/*
 * This file was automatically generated by EvoSuite
 */

package bible.servlet;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import bible.servlet.HTMLOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.http.HttpServletResponse;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class HTMLOutputStreamEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      HTMLOutputStream hTMLOutputStream0 = new HTMLOutputStream((HttpServletResponse) null);
      PrintWriter printWriter0 = hTMLOutputStream0.getPW();
      assertEquals(false, printWriter0.checkError());
  }

  @Test
  public void test1()  throws Throwable  {
      HTMLOutputStream hTMLOutputStream0 = new HTMLOutputStream((HttpServletResponse) null);
      assertNotNull(hTMLOutputStream0);
      
      String string0 = hTMLOutputStream0.toString();
      assertEquals("bible.servlet.HTMLOutputStream: [size=0, response=null, baos, pw]", string0);
      assertNotNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      HTMLOutputStream hTMLOutputStream0 = new HTMLOutputStream((HttpServletResponse) null);
      assertNotNull(hTMLOutputStream0);
      
      hTMLOutputStream0.println(112);
      assertEquals("bible.servlet.HTMLOutputStream: [size=4, response=null, baos, pw]", hTMLOutputStream0.toString());
      assertEquals("112\n", hTMLOutputStream0.reset());
  }

  @Test
  public void test3()  throws Throwable  {
      HTMLOutputStream hTMLOutputStream0 = new HTMLOutputStream((HttpServletResponse) null);
      // Undeclared exception!
      try {
        hTMLOutputStream0.flush();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      HTMLOutputStream hTMLOutputStream0 = new HTMLOutputStream((HttpServletResponse) null);
      hTMLOutputStream0.print("bible.servlet.HTMLOutputStream: [size=4, response=null, baos, pw]");
      assertEquals("", hTMLOutputStream0.reset());
  }

  @Test
  public void test5()  throws Throwable  {
      HTMLOutputStream hTMLOutputStream0 = new HTMLOutputStream((HttpServletResponse) null);
      hTMLOutputStream0.print(112);
      assertEquals("bible.servlet.HTMLOutputStream: [size=0, response=null, baos, pw]", hTMLOutputStream0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      HTMLOutputStream hTMLOutputStream0 = new HTMLOutputStream((HttpServletResponse) null);
      String string0 = hTMLOutputStream0.reset();
      assertEquals("", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      HTMLOutputStream hTMLOutputStream0 = new HTMLOutputStream((HttpServletResponse) null);
      assertNotNull(hTMLOutputStream0);
      
      hTMLOutputStream0.println("112\n");
      assertEquals(5, hTMLOutputStream0.getSize());
      assertEquals("bible.servlet.HTMLOutputStream: [size=5, response=null, baos, pw]", hTMLOutputStream0.toString());
  }
}
