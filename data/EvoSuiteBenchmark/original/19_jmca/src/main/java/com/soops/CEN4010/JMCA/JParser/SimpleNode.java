package com.soops.CEN4010.JMCA.JParser;


import java.io.*;

import java.util.*;

/* Generated By:JJTree: Do not edit this line. SimpleNode.java */

public class SimpleNode implements Node {
    protected Node parent;
    protected Node[] children;
    protected int id;
    protected JavaParser parser;

    ArrayList<String> identifiers = new ArrayList<String>();

    public SimpleNode(int i) {
        id = i;
    }

    public SimpleNode(JavaParser p, int i) {
        this(i);
        parser = p;
        parser.currNode = this;
        //      parser.setNode(false);
        /*   if (parser == null)
             identifier = "Parser is null";
           else if (parser.token == null)
             identifier = "Token is Null";
           else if (parser.token.next == null) identifier = "Next is null";
           else
         */
        // if (parser.token != null)
//      identifier = parser.token.toString();

// identifier = parser.token.toString();
    }

    public void setIdentifier(String s) {
        identifiers.add(s);
    }

    public void jjtOpen() {
    }

    public void jjtClose() {

    }

    public void jjtSetParent(Node n) {
        parent = n;
    }

    public Node jjtGetParent() {
        return parent;
    }

    public void jjtAddChild(Node n, int i) {
        if (children == null) {
            children = new Node[i + 1];
        } else if (i >= children.length) {
            Node c[] = new Node[i + 1];
            System.arraycopy(children, 0, c, 0, children.length);
            children = c;
        }
        children[i] = n;
    }

    public Node jjtGetChild(int i) {
        return children[i];
    }

    public int jjtGetNumChildren() {
        return (children == null) ? 0 : children.length;
    }

    /* You can override these two methods in subclasses of SimpleNode to
       customize the way the node appears when the tree is dumped.  If
       your output uses more than one line you should override
       toString(String), otherwise overriding toString() is probably all
       you need to do. */

    public String toString() {
        String tmpString =
                JavaParserTreeConstants.jjtNodeName[id];
        for (String identifier : identifiers) {
            tmpString += " : " + identifier;
        }
        return tmpString;
    }

    public String toString(String prefix) {
        return prefix + toString();
    }

    /* Override this method if you want to customize how the node dumps
       out its children. */

    public void dump(String prefix, Writer wtr) throws IOException {
        // System.out.println(toString(prefix));

        if (identifiers.size() > 0) {
            wtr.write("<" + JavaParserTreeConstants.jjtNodeName[id] + ">" +
                      '\n');
            if (JavaParserTreeConstants.jjtNodeName[id].equals("Literal")) {
                wtr.write("<identifier>Literal Value</identifier>" + '\n');
            } else {
                // write the identifier except for ";" "{" "}" ""
                for (String identifier : identifiers) {
                    if (!(identifier.equals(";") || identifier.equals("}") ||
                          identifier.equals("{") || identifier.equals(""))) {
                        // don't write the last ) for method params
                        if (!(JavaParserTreeConstants.jjtNodeName[id].equals(
                                "VariableDeclaratorId") &&
                              identifier.equals(")"))) {
                          // change identifiers that will mess up the xml markup
                            if (identifier.equals("<")) {
                                identifier = "*lt";
                            }
                            if (identifier.equals(">")) {
                                identifier = "*gt";
                            }
                            if (identifier.equals(">>")) {
                                identifier = "*rshft";
                            }
                            if (identifier.equals("<<")) {
                                identifier = "*lshft";
                            }
                            if (identifier.equals("<=")) {
                                identifier = "*le";
                            }
                            if (identifier.equals(">=")) {
                                identifier = "*ge";
                            }
                            if (identifier.equals("&") || identifier.equals("&&")) {
                                identifier = "*amp";
                            }
                            wtr.write("  <identifier>" + identifier +
                                      "</identifier>" +
                                      '\n');
                        }
                    }
                }
            }
        } else {
            if (children != null && children.length > 0) {
                wtr.write("<" + JavaParserTreeConstants.jjtNodeName[id] + ">");
            }
        }
        if (children != null) {
            for (int i = 0; i < children.length; ++i) {
                SimpleNode n = (SimpleNode) children[i];
                if (n != null) {
                    n.dump(prefix + " ", wtr);
                }
            }
        }
        if (identifiers.size() > 0 || (children != null && children.length > 0)) {
            wtr.write("</" + JavaParserTreeConstants.jjtNodeName[id] + ">" +
                      '\n');
        }
    }
}
