/*
 * This file was automatically generated by EvoSuite
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.StringReader;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class JavaCharStreamEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) pipedReader0);
      assertNotNull(javaCharStream0);
      
      javaCharStream0.ReInit((Reader) pipedReader0, (int) 'x', 0);
      assertEquals(120, javaCharStream0.getBeginLine());
      assertEquals(-1, javaCharStream0.getEndColumn());
      assertEquals(4096, javaCharStream0.available);
  }

  @Test
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) byteArrayInputStream0, (int) (byte)0, 0);
      assertEquals(-1, byteArrayInputStream0.read());
      assertEquals(0, javaCharStream0.getColumn());
  }

  @Test
  public void test2()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) pipedInputStream0, 12, (-351), (-351));
      assertNotNull(javaCharStream0);
      
      javaCharStream0.ReInit((InputStream) pipedInputStream0, 0, (-1446));
      assertEquals(-1447, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
  }

  @Test
  public void test3()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) pipedInputStream0);
      assertNotNull(javaCharStream0);
      
      // Undeclared exception!
      int int0 = 0;
      try {
        int0 = javaCharStream0.getEndColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * -1
         */
      }
      assertEquals(4096, javaCharStream0.available);
      assertEquals(1, javaCharStream0.getLine());
  }

  @Test
  public void test4()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) pipedInputStream0, 12, (-351), (-351));
      assertNotNull(javaCharStream0);
      
      int int0 = javaCharStream0.getBeginColumn();
      assertEquals(4096, javaCharStream0.bufsize);
      assertEquals((-352), int0);
      assertEquals(12, javaCharStream0.getBeginLine());
  }

  @Test
  public void test5()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) pipedReader0);
      assertNotNull(javaCharStream0);
      
      int int0 = javaCharStream0.getBeginLine();
      assertEquals(1, int0);
      assertEquals(4096, javaCharStream0.available);
      assertEquals(0, javaCharStream0.getEndColumn());
  }

  @Test
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) byteArrayInputStream0, 1, (int) (byte)0, 11);
      assertEquals(-1, byteArrayInputStream0.read());
      
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
  }

  @Test
  public void test7()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) pipedReader0);
      assertNotNull(javaCharStream0);
      
      // Undeclared exception!
      int int0 = 0;
      try {
        int0 = javaCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * -1
         */
      }
      assertEquals(4096, javaCharStream0.bufsize);
      assertEquals(0, javaCharStream0.getColumn());
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = JavaCharStream.hexval('9');
      assertEquals(9, int0);
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = JavaCharStream.hexval('6');
      assertEquals(6, int0);
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = JavaCharStream.hexval('B');
      assertEquals(11, int0);
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = JavaCharStream.hexval('F');
      assertEquals(15, int0);
  }

  @Test
  public void test12()  throws Throwable  {
      try {
        JavaCharStream.hexval('G');
        fail("Expecting exception: IOException");
      } catch(IOException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      try {
        JavaCharStream.hexval('J');
        fail("Expecting exception: IOException");
      } catch(IOException e) {
      }
  }

  @Test
  public void test14()  throws Throwable  {
      try {
        JavaCharStream.hexval('T');
        fail("Expecting exception: IOException");
      } catch(IOException e) {
      }
  }

  @Test
  public void test15()  throws Throwable  {
      try {
        JavaCharStream.hexval('U');
        fail("Expecting exception: IOException");
      } catch(IOException e) {
      }
  }

  @Test
  public void test16()  throws Throwable  {
      try {
        JavaCharStream.hexval('W');
        fail("Expecting exception: IOException");
      } catch(IOException e) {
      }
  }

  @Test
  public void test17()  throws Throwable  {
      try {
        JavaCharStream.hexval(']');
        fail("Expecting exception: IOException");
      } catch(IOException e) {
      }
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = JavaCharStream.hexval('a');
      assertEquals(10, int0);
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = JavaCharStream.hexval('d');
      assertEquals(13, int0);
  }

  @Test
  public void test20()  throws Throwable  {
      try {
        JavaCharStream.hexval('\u001B');
        fail("Expecting exception: IOException");
      } catch(IOException e) {
      }
  }

  @Test
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) byteArrayInputStream0, 11, (int) (byte) (-116), (-1533));
      javaCharStream0.readChar();
      JavaCharStream javaCharStream1 = new JavaCharStream((InputStream) byteArrayInputStream0);
      try {
        javaCharStream1.FillBuff();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
      }
  }

  @Test
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("UdaHX['H&15<L XP");
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) stringReader0, (int) (byte)73, (int) (byte)100, 0);
      javaCharStream0.FillBuff();
      javaCharStream0.ReadByte();
  }

  @Test
  public void test23()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) pipedInputStream0);
      assertNotNull(javaCharStream0);
      
      try {
        javaCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Pipe not connected
         */
      }
  }

  @Test
  public void test24()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) pipedReader0);
      assertNotNull(javaCharStream0);
      
      javaCharStream0.backup((-1590));
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(4096, javaCharStream0.bufsize);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
  }

  @Test
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) byteArrayInputStream0, 1, (int) (byte)0, 11);
      assertEquals(-1, byteArrayInputStream0.read());
      
      javaCharStream0.Done();
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0);
      assertEquals(1, javaCharStream0.getBeginLine());
  }

  @Test
  public void test26()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 739);
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) pipedReader0, (-940), (-3));
      javaCharStream0.AdjustBuffSize();
      javaCharStream0.ReInit((Reader) pipedReader0);
  }

  @Test
  public void test27()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) pipedInputStream0);
      assertNotNull(javaCharStream0);
      
      String string0 = javaCharStream0.GetImage();
      assertNotNull(string0);
      assertEquals(4096, javaCharStream0.bufsize);
      assertEquals("\u0000", string0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
  }

  @Test
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) byteArrayInputStream0, 1, (int) (byte)0, 11);
      assertEquals(-1, byteArrayInputStream0.read());
      
      javaCharStream0.GetSuffix(4096);
      assertEquals(4096, javaCharStream0.available);
  }

  @Test
  public void test29()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) pipedInputStream0, 12, (-351), (-351));
      assertNotNull(javaCharStream0);
      
      char[] charArray0 = javaCharStream0.GetSuffix(0);
      assertNotNull(charArray0);
      assertEquals(-352, javaCharStream0.getColumn());
      assertEquals(12, javaCharStream0.getBeginLine());
      assertEquals(4096, javaCharStream0.bufsize);
      assertEquals(-352, javaCharStream0.getBeginColumn());
  }

  @Test
  public void test30()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, (int) '9');
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) pushbackInputStream0);
      assertNotNull(javaCharStream0);
      
      javaCharStream0.adjustBeginLineColumn(0, (-645));
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4096, javaCharStream0.available);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
  }

  @Test
  public void test31()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) pipedInputStream0, 12, (-351), (-351));
      assertNotNull(javaCharStream0);
      
      javaCharStream0.adjustBeginLineColumn((-1446), (-1848));
      javaCharStream0.adjustBeginLineColumn((-1848), (-1635));
      assertEquals(-1635, javaCharStream0.getColumn());
      assertEquals(-1848, javaCharStream0.getEndLine());
  }
}
