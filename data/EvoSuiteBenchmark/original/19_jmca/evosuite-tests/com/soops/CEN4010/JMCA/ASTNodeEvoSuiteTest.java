/*
 * This file was automatically generated by EvoSuite
 */

package com.soops.CEN4010.JMCA;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.soops.CEN4010.JMCA.ASTNode;
import java.io.StringWriter;
import java.io.Writer;
import javax.swing.tree.DefaultMutableTreeNode;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ASTNodeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ASTNode aSTNode0 = new ASTNode();
      StringWriter stringWriter0 = new StringWriter();
      aSTNode0.display((Writer) stringWriter0);
      assertEquals("null :: null", stringWriter0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      ASTNode aSTNode0 = new ASTNode();
      ASTNode aSTNode1 = aSTNode0.getParent();
      assertNull(aSTNode1);
  }

  @Test
  public void test2()  throws Throwable  {
      ASTNode aSTNode0 = new ASTNode((ASTNode) null);
      assertNull(aSTNode0.getIdentity());
  }

  @Test
  public void test3()  throws Throwable  {
      ASTNode aSTNode0 = new ASTNode();
      // Undeclared exception!
      try {
        aSTNode0.dump((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      ASTNode aSTNode0 = ASTNode.getTree("y*r0BY);:1KOF1%E3s");
      assertNull(aSTNode0);
  }

  @Test
  public void test5()  throws Throwable  {
      ASTNode aSTNode0 = new ASTNode("9mXn@S}72<0dQ", "9mXn@S}72<0dQ", (ASTNode) null);
      ASTNode aSTNode1 = new ASTNode();
      int int0 = aSTNode0.compareTo((Object) aSTNode1);
      assertEquals(1, int0);
      assertEquals("9mXn@S}72<0dQ :: 9mXn@S}72<0dQ", aSTNode0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      ASTNode aSTNode0 = new ASTNode("9mXn@S}72<0dQ", "9mXn@S}72<0dQ", (ASTNode) null);
      ASTNode aSTNode1 = new ASTNode("9mXn@S}72<0dQ", "8|", (ASTNode) null);
      int int0 = aSTNode0.compareTo((Object) aSTNode1);
      assertEquals("9mXn@S}72<0dQ :: 8|", aSTNode1.toString());
      assertEquals("9mXn@S}72<0dQ", aSTNode1.getType());
      assertEquals(1, int0);
  }

  @Test
  public void test7()  throws Throwable  {
      ASTNode aSTNode0 = new ASTNode("9mXn@S}72<0dQ", "9mXn@S}72<0dQ", (ASTNode) null);
      ASTNode aSTNode1 = new ASTNode("9mXn@S}72<0dQ", "9mXn@S}72<0dQ", (ASTNode) null);
      aSTNode0.addChild(aSTNode1);
      int int0 = aSTNode0.compareTo((Object) aSTNode0);
      assertEquals("9mXn@S}72<0dQ :: 9mXn@S}72<0dQ", aSTNode0.toString());
      assertEquals(0, int0);
  }

  @Test
  public void test8()  throws Throwable  {
      ASTNode aSTNode0 = new ASTNode();
      StringWriter stringWriter0 = new StringWriter();
      aSTNode0.addChild(aSTNode0);
      // Undeclared exception!
      try {
        aSTNode0.display((Writer) stringWriter0);
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      ASTNode aSTNode0 = new ASTNode();
      DefaultMutableTreeNode defaultMutableTreeNode0 = aSTNode0.createTree();
      assertEquals("null :: null", defaultMutableTreeNode0.toString());
      assertNotNull(defaultMutableTreeNode0);
  }

  @Test
  public void test10()  throws Throwable  {
      ASTNode aSTNode0 = new ASTNode();
      aSTNode0.addChild(aSTNode0);
      // Undeclared exception!
      try {
        aSTNode0.createTree();
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }
}
