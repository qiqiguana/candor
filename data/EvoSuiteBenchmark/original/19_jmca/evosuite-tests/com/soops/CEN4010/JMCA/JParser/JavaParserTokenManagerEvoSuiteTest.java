/*
 * This file was automatically generated by EvoSuite
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Token;
import com.soops.CEN4010.JMCA.JParser.TokenMgrError;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.StringReader;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class JavaParserTokenManagerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = '.';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) 'g', 1551, (int) '\"');
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
  }

  @Test
  public void test1()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(2047);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) pipedInputStream0, 2047, (-1), 2047);
      // Undeclared exception!
      try {
        javaParserTokenManager0.ReInit(javaCharStream0, (-1));
        fail("Expecting exception: TokenMgrError");
      } catch(TokenMgrError e) {
        /*
         * Error: Ignoring invalid lexical state : -1. State unchanged.
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 0, 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.setDebugStream(javaParserTokenManager0.debugStream);
      assertEquals(0, javaParserTokenManager0.defaultLexState);
      assertEquals(0, javaParserTokenManager0.curLexState);
  }

  @Test
  public void test3()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) 'g', (int) '2', (int) ';');
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
  }

  @Test
  public void test4()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = '.';
      charArray0[1] = '.';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) 'g', 1551, (int) '\"');
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
  }

  @Test
  public void test5()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'w';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader((Reader) charArrayReader0, (int) 'w');
      PushbackReader pushbackReader0 = new PushbackReader((Reader) bufferedReader0, (int) 'w');
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) pushbackReader0, (int) 'w', (int) 'w');
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals("", token0.toString());
      assertEquals(0, javaParserTokenManager0.defaultLexState);
      assertEquals(118, token0.endColumn);
      assertEquals(0, token0.kind);
  }

  @Test
  public void test6()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '*';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) 'g', (int) 'l', (int) '*');
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
  }

  @Test
  public void test7()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'A';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) 'g', 1551, (int) '\"');
      charArrayReader0.read();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
  }

  @Test
  public void test8()  throws Throwable  {
      StringReader stringReader0 = new StringReader("pU||H");
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) stringReader0, 1551, (int) '6');
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(57, token0.endColumn);
      assertEquals("", token0.toString());
      assertEquals(0, token0.kind);
      assertNotNull(token0);
  }

  @Test
  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try {
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: TokenMgrError");
      } catch(TokenMgrError e) {
        /*
         * Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '*';
      charArray0[1] = '*';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) 'g', (int) 'l', (int) '*');
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
  }

  @Test
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'A';
      charArray0[0] = 'p';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) 'h', 1551, (int) '\"');
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
  }

  @Test
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'a';
      charArray0[1] = 'a';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, token0.kind);
      assertEquals("", token0.toString());
      assertEquals(4, token0.beginColumn);
  }

  @Test
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) '\"', (int) '2', (int) '\"');
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
  }

  @Test
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader((Reader) charArrayReader0, (int) 'w');
      PushbackReader pushbackReader0 = new PushbackReader((Reader) bufferedReader0, (int) 'w');
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) pushbackReader0, (int) 'w', (int) 'w');
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(118, token0.beginColumn);
      assertEquals(119, token0.endLine);
      assertEquals(119, token0.beginLine);
      assertEquals(0, javaParserTokenManager0.defaultLexState);
      assertEquals("", token0.toString());
      assertNotNull(token0);
      assertEquals(0, token0.kind);
  }

  @Test
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[2] = 'A';
      charArray0[0] = '.';
      charArray0[1] = '.';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) 'g', 1551, (int) '\"');
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
  }

  @Test
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = '.';
      charArray0[1] = '.';
      charArray0[2] = 'U';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) 'g', 1551, (int) '\"');
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
  }

  @Test
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\"';
      charArray0[6] = '\\';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) 'g', (int) '2', (int) '\"');
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try {
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: TokenMgrError");
      } catch(TokenMgrError e) {
        /*
         * Lexical error at line 103, column 57.  Encountered: \"\" (0), after : \"\\\"\\\\\"
         */
      }
  }

  @Test
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) 'g', (int) '2', (int) '\"');
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
  }

  @Test
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\"';
      charArray0[3] = '\"';
      charArray0[2] = '\\';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) 'g', (int) '2', (int) '\"');
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try {
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: TokenMgrError");
      } catch(TokenMgrError e) {
        /*
         * Lexical error at line 103, column 59.  Encountered: <EOF> after : \"\\\"\\\\\\\"\"
         */
      }
  }

  @Test
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = '7';
      charArray0[0] = 'a';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("", token0.toString());
      assertEquals(0, token0.kind);
  }

  @Test
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '2';
      charArray0[1] = '.';
      charArray0[2] = '2';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) 'g', 1551, (int) '2');
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
  }

  @Test
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-34);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try {
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: TokenMgrError");
      } catch(TokenMgrError e) {
        /*
         * Lexical error at line 1, column 1.  Encountered: \"\\ufffd\" (65533), after : \"\"
         */
      }
  }

  @Test
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'A';
      charArray0[0] = '.';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) '\"', (int) '2', (int) '\"');
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
  }

  @Test
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '2';
      charArray0[1] = '.';
      charArray0[2] = 'U';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) 'g', 1551, (int) '2');
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
  }

  @Test
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '6';
      charArray0[1] = 'l';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) '\"', (int) '2', (int) '\"');
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
  }

  @Test
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[2] = 'f';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) 'g', (int) '2', (int) '\"');
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
  }

  @Test
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\"';
      charArray0[1] = 'A';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) 'g', (int) '2', (int) '\"');
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try {
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: TokenMgrError");
      } catch(TokenMgrError e) {
        /*
         * Lexical error at line 103, column 59.  Encountered: <EOF> after : \"\\\"A\"
         */
      }
  }

  @Test
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[2] = 'E';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 1);
      // Undeclared exception!
      try {
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: TokenMgrError");
      } catch(TokenMgrError e) {
        /*
         * Lexical error at line 1, column 11.  Encountered: <EOF> after : \"\"
         */
      }
  }

  @Test
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[3] = '\u008D';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 1);
      // Undeclared exception!
      try {
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: TokenMgrError");
      } catch(TokenMgrError e) {
        /*
         * Lexical error at line 1, column 11.  Encountered: <EOF> after : \"\"
         */
      }
  }

  @Test
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader((Reader) charArrayReader0, (int) 'w');
      PushbackReader pushbackReader0 = new PushbackReader((Reader) bufferedReader0, (int) 'w');
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) pushbackReader0, (int) 'w', (int) 'w');
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 26);
        fail("Expecting exception: TokenMgrError");
      } catch(TokenMgrError e) {
        /*
         * Error: Ignoring invalid lexical state : 26. State unchanged.
         */
      }
  }
}
