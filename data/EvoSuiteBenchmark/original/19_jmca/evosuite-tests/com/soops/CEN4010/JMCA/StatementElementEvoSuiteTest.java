/*
 * This file was automatically generated by EvoSuite
 */

package com.soops.CEN4010.JMCA;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.soops.CEN4010.JMCA.StatementElement;
import java.util.ArrayList;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class StatementElementEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      StatementElement statementElement0 = new StatementElement("");
      assertEquals(false, statementElement0.isInSelection());
      
      statementElement0.setInSelection(true);
      assertEquals(true, statementElement0.isInSelection());
  }

  @Test
  public void test1()  throws Throwable  {
      StatementElement statementElement0 = new StatementElement();
      boolean boolean0 = statementElement0.hasBeenModified();
      assertEquals(false, statementElement0.isInIteration());
      assertEquals(false, boolean0);
      assertEquals(false, statementElement0.isInSelection());
  }

  @Test
  public void test2()  throws Throwable  {
      StatementElement statementElement0 = new StatementElement("");
      boolean boolean0 = statementElement0.isInIteration();
      assertEquals(false, boolean0);
      assertEquals(false, statementElement0.isInSelection());
      assertEquals("", statementElement0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      StatementElement statementElement0 = new StatementElement("MethodCall");
      statementElement0.setInIteration(false);
      assertEquals(false, statementElement0.isInIteration());
      assertEquals("MethodCall", statementElement0.toString());
      assertEquals(false, statementElement0.isInSelection());
  }

  @Test
  public void test4()  throws Throwable  {
      StatementElement statementElement0 = new StatementElement("");
      statementElement0.getType();
      assertEquals(false, statementElement0.isInIteration());
      assertEquals(false, statementElement0.hasBeenModified());
      assertEquals(false, statementElement0.isInSelection());
  }

  @Test
  public void test5()  throws Throwable  {
      StatementElement statementElement0 = new StatementElement("");
      String string0 = statementElement0.getElementName();
      assertEquals(false, statementElement0.isInSelection());
      assertEquals(false, statementElement0.isInIteration());
      assertNotNull(string0);
      assertEquals(false, statementElement0.hasBeenModified());
  }

  @Test
  public void test6()  throws Throwable  {
      StatementElement statementElement0 = new StatementElement("MethodCall");
      ArrayList<StatementElement> arrayList0 = statementElement0.getModifiers();
      assertEquals(false, statementElement0.isInSelection());
      assertEquals(false, statementElement0.isInIteration());
      assertNotNull(arrayList0);
      assertEquals(false, statementElement0.hasBeenModified());
  }

  @Test
  public void test7()  throws Throwable  {
      StatementElement statementElement0 = new StatementElement("");
      assertEquals("", statementElement0.toString());
      
      statementElement0.addModifier(statementElement0);
      // Undeclared exception!
      try {
        statementElement0.toString();
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      StatementElement statementElement0 = new StatementElement("");
      boolean boolean0 = statementElement0.isInSelection();
      assertEquals("", statementElement0.toString());
      assertEquals(false, boolean0);
      assertEquals(false, statementElement0.isInIteration());
  }

  @Test
  public void test9()  throws Throwable  {
      StatementElement statementElement0 = new StatementElement("");
      String string0 = statementElement0.toString();
      assertEquals(false, statementElement0.isInIteration());
      assertEquals(false, statementElement0.isInSelection());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test
  public void test10()  throws Throwable  {
      StatementElement statementElement0 = new StatementElement();
      assertEquals(false, statementElement0.hasBeenModified());
      
      statementElement0.setModified(true);
      String string0 = statementElement0.toString();
      assertEquals(true, statementElement0.hasBeenModified());
      assertEquals("null (modified) ", string0);
  }

  @Test
  public void test11()  throws Throwable  {
      StatementElement statementElement0 = new StatementElement();
      StatementElement.variableType statementElement_variableType0 = StatementElement.variableType.MethodCall;
      statementElement0.setType(statementElement_variableType0);
      String string0 = statementElement0.toString();
      assertNotNull(string0);
      assertEquals("null (MethodCall) ", string0);
      assertEquals(false, statementElement0.isInIteration());
      assertEquals(false, statementElement0.isInSelection());
  }
}
