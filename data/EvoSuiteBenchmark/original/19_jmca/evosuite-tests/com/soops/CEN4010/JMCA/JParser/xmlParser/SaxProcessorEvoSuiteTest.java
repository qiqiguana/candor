/*
 * This file was automatically generated by EvoSuite
 */

package com.soops.CEN4010.JMCA.JParser.xmlParser;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.soops.CEN4010.JMCA.ASTNode;
import com.soops.CEN4010.JMCA.JParser.xmlParser.SaxProcessor;
import com.soops.CEN4010.JMCA.JParser.xmlParser.State;
import java.io.InputStream;
import org.evosuite.testcase.CodeUnderTestException;
import org.junit.BeforeClass;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.ext.Attributes2Impl;
import org.xml.sax.helpers.AttributesImpl;

@RunWith(EvoSuiteRunner.class)
public class SaxProcessorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SaxProcessor saxProcessor0 = new SaxProcessor((InputStream) null);
      ASTNode aSTNode0 = saxProcessor0.getCurrNode();
      assertNull(aSTNode0);
  }

  @Test
  public void test1()  throws Throwable  {
      SaxProcessor saxProcessor0 = new SaxProcessor();
      State state0 = saxProcessor0.getCurrState();
      assertNotNull(state0);
  }

  @Test
  public void test2()  throws Throwable  {
      SaxProcessor saxProcessor0 = new SaxProcessor();
      ASTNode aSTNode0 = saxProcessor0.getRootNode();
      assertNull(aSTNode0);
  }

  @Test
  public void test3()  throws Throwable  {
      SaxProcessor saxProcessor0 = new SaxProcessor();
      saxProcessor0.setCurrState((State) null);
  }

  @Test
  public void test4()  throws Throwable  {
      SaxProcessor saxProcessor0 = new SaxProcessor();
      saxProcessor0.endElement("D$'V^R", "D$'V^R", "D$'V^R");
  }

  @Test
  public void test5()  throws Throwable  {
      SaxProcessor saxProcessor0 = new SaxProcessor();
      saxProcessor0.setASTrootNode((ASTNode) null);
  }

  @Test
  public void test6()  throws Throwable  {
      SaxProcessor saxProcessor0 = new SaxProcessor();
      AttributesImpl attributesImpl0 = new AttributesImpl();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl((Attributes) attributesImpl0);
      saxProcessor0.startElement("PU(k/W,w`5+.D4A.X3", "PU(k/W,w`5+.D4A.X3", "PU(k/W,w`5+.D4A.X3", (Attributes) attributes2Impl0);
      assertEquals(0, attributes2Impl0.getLength());
  }

  @Test
  public void test7()  throws Throwable  {
      SaxProcessor saxProcessor0 = new SaxProcessor();
      saxProcessor0.setCurrASTNode((ASTNode) null);
  }

  @Test
  public void test8()  throws Throwable  {
      SaxProcessor saxProcessor0 = new SaxProcessor();
  }

  @Test
  public void test9()  throws Throwable  {
      SaxProcessor saxProcessor0 = new SaxProcessor((InputStream) null);
      State state0 = saxProcessor0.getParentofCurrentClass();
      assertNull(state0);
  }

  @Test
  public void test10()  throws Throwable  {
      SaxProcessor saxProcessor0 = new SaxProcessor((InputStream) null);
      saxProcessor0.setParentofCurrentClass((State) null);
      saxProcessor0.setParentofCurrentClass((State) null);
  }

  @Test
  public void test11()  throws Throwable  {
      SaxProcessor saxProcessor0 = new SaxProcessor();
  }

  @Test
  public void test12()  throws Throwable  {
      SaxProcessor saxProcessor0 = new SaxProcessor((InputStream) null);
      State state0 = saxProcessor0.getReturnState();
      assertNull(state0);
  }

  @Test
  public void test13()  throws Throwable  {
      SaxProcessor saxProcessor0 = new SaxProcessor();
      saxProcessor0.setReturnState((State) null);
      saxProcessor0.setReturnState((State) null);
  }

  @Test
  public void test14()  throws Throwable  {
      SaxProcessor saxProcessor0 = new SaxProcessor();
      saxProcessor0.showFile();
  }

  @Test
  public void test15()  throws Throwable  {
      SaxProcessor saxProcessor0 = new SaxProcessor();
      char[] charArray0 = new char[4];
      saxProcessor0.characters(charArray0, (int) '\u0000', (int) '\u0000');
  }

  @Test
  public void test16()  throws Throwable  {
      SaxProcessor saxProcessor0 = new SaxProcessor();
      char[] charArray0 = new char[6];
      charArray0[1] = 'E';
      saxProcessor0.characters(charArray0, 1, 1);
  }
}
