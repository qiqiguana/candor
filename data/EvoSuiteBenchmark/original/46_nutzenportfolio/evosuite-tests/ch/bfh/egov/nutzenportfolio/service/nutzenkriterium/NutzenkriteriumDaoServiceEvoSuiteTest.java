/*
 * This file was automatically generated by EvoSuite
 */

package ch.bfh.egov.nutzenportfolio.service.nutzenkriterium;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import ch.bfh.egov.nutzenportfolio.form.FragenForm;
import ch.bfh.egov.nutzenportfolio.persistence.common.CommonDao;
import ch.bfh.egov.nutzenportfolio.persistence.common.CommonIbatisDao;
import ch.bfh.egov.nutzenportfolio.persistence.customizing.CustomizingDao;
import ch.bfh.egov.nutzenportfolio.persistence.customizing.CustomizingIbatisDao;
import ch.bfh.egov.nutzenportfolio.persistence.kategorie.KategorieDao;
import ch.bfh.egov.nutzenportfolio.persistence.kategorie.KategorieIbatisDao;
import ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumDao;
import ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao;
import ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;
import ch.bfh.egov.nutzenportfolio.service.common.CommonDaoService;
import ch.bfh.egov.nutzenportfolio.service.common.CommonService;
import ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingDaoService;
import ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;
import ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieDaoService;
import ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;
import ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumDaoService;
import ch.bfh.egov.nutzenportfolio.tos.Kategorie;
import ch.bfh.egov.nutzenportfolio.tos.NaOpNu;
import ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;
import java.util.LinkedList;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.action.DynaActionForm;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class NutzenkriteriumDaoServiceEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      NutzenkriteriumDaoService nutzenkriteriumDaoService0 = new NutzenkriteriumDaoService((NutzenkriteriumDao) null);
      DynaActionForm dynaActionForm0 = new DynaActionForm();
      // Undeclared exception!
      try {
        nutzenkriteriumDaoService0.getNutzenkriterium((HttpServletRequest) null, dynaActionForm0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      NutzenkriteriumIbatisDao nutzenkriteriumIbatisDao0 = new NutzenkriteriumIbatisDao();
      NutzenkriteriumDaoService nutzenkriteriumDaoService0 = new NutzenkriteriumDaoService((NutzenkriteriumDao) nutzenkriteriumIbatisDao0);
      // Undeclared exception!
      try {
        nutzenkriteriumDaoService0.customizingComplete((HttpServletRequest) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      NutzenkriteriumIbatisDao nutzenkriteriumIbatisDao0 = new NutzenkriteriumIbatisDao();
      NutzenkriteriumDaoService nutzenkriteriumDaoService0 = new NutzenkriteriumDaoService((NutzenkriteriumDao) nutzenkriteriumIbatisDao0);
      // Undeclared exception!
      try {
        nutzenkriteriumDaoService0.unsetAssignmentGewichtung((Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * No SqlMapClient specified
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      NutzenkriteriumIbatisDao nutzenkriteriumIbatisDao0 = new NutzenkriteriumIbatisDao();
      NutzenkriteriumDaoService nutzenkriteriumDaoService0 = new NutzenkriteriumDaoService((NutzenkriteriumDao) nutzenkriteriumIbatisDao0);
      assertNotNull(nutzenkriteriumDaoService0);
      
      Nutzenkriterium nutzenkriterium0 = new Nutzenkriterium();
      ActionMessages actionMessages0 = new ActionMessages();
      // Undeclared exception!
      try {
        nutzenkriteriumDaoService0.deleteQuestion((HttpServletRequest) null, nutzenkriterium0, actionMessages0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * No SqlMapClient specified
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      NutzenkriteriumIbatisDao nutzenkriteriumIbatisDao0 = new NutzenkriteriumIbatisDao();
      NutzenkriteriumDaoService nutzenkriteriumDaoService0 = new NutzenkriteriumDaoService((NutzenkriteriumDao) nutzenkriteriumIbatisDao0);
      // Undeclared exception!
      try {
        nutzenkriteriumDaoService0.deleteFragebogenGewichtung((HttpServletRequest) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      NutzenkriteriumIbatisDao nutzenkriteriumIbatisDao0 = new NutzenkriteriumIbatisDao();
      NutzenkriteriumDaoService nutzenkriteriumDaoService0 = new NutzenkriteriumDaoService((NutzenkriteriumDao) nutzenkriteriumIbatisDao0);
      // Undeclared exception!
      try {
        nutzenkriteriumDaoService0.getByProjektId((NaOpNu) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * No SqlMapClient specified
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      NutzenkriteriumIbatisDao nutzenkriteriumIbatisDao0 = new NutzenkriteriumIbatisDao();
      NutzenkriteriumDaoService nutzenkriteriumDaoService0 = new NutzenkriteriumDaoService((NutzenkriteriumDao) nutzenkriteriumIbatisDao0);
      // Undeclared exception!
      try {
        nutzenkriteriumDaoService0.list((HttpServletRequest) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      NutzenkriteriumIbatisDao nutzenkriteriumIbatisDao0 = new NutzenkriteriumIbatisDao();
      NutzenkriteriumDaoService nutzenkriteriumDaoService0 = new NutzenkriteriumDaoService((NutzenkriteriumDao) nutzenkriteriumIbatisDao0);
      // Undeclared exception!
      try {
        nutzenkriteriumDaoService0.getAssignmentById((Nutzenkriterium) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * No SqlMapClient specified
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      NutzenkriteriumIbatisDao nutzenkriteriumIbatisDao0 = new NutzenkriteriumIbatisDao();
      NutzenkriteriumDaoService nutzenkriteriumDaoService0 = new NutzenkriteriumDaoService((NutzenkriteriumDao) nutzenkriteriumIbatisDao0);
      Integer integer0 = new Integer(271);
      // Undeclared exception!
      try {
        nutzenkriteriumDaoService0.deleteAssignments(integer0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * No SqlMapClient specified
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      NutzenkriteriumIbatisDao nutzenkriteriumIbatisDao0 = new NutzenkriteriumIbatisDao();
      NutzenkriteriumDaoService nutzenkriteriumDaoService0 = new NutzenkriteriumDaoService((NutzenkriteriumDao) nutzenkriteriumIbatisDao0);
      Nutzenkriterium nutzenkriterium0 = new Nutzenkriterium();
      // Undeclared exception!
      try {
        nutzenkriteriumDaoService0.update(nutzenkriterium0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * No SqlMapClient specified
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      NutzenkriteriumIbatisDao nutzenkriteriumIbatisDao0 = new NutzenkriteriumIbatisDao();
      NutzenkriteriumDaoService nutzenkriteriumDaoService0 = new NutzenkriteriumDaoService((NutzenkriteriumDao) nutzenkriteriumIbatisDao0);
      CommonIbatisDao commonIbatisDao0 = new CommonIbatisDao();
      CommonDaoService commonDaoService0 = new CommonDaoService((CommonDao) commonIbatisDao0);
      KategorieIbatisDao kategorieIbatisDao0 = new KategorieIbatisDao();
      KategorieDaoService kategorieDaoService0 = new KategorieDaoService((KategorieDao) kategorieIbatisDao0);
      CustomizingIbatisDao customizingIbatisDao0 = new CustomizingIbatisDao();
      CustomizingDaoService customizingDaoService0 = new CustomizingDaoService((CustomizingDao) customizingIbatisDao0);
      nutzenkriteriumDaoService0.init((AuswahlfeldService) null, (CommonService) commonDaoService0, (KategorieService) kategorieDaoService0, (CustomizingService) customizingDaoService0);
  }

  @Test
  public void test11()  throws Throwable  {
      NutzenkriteriumDaoService nutzenkriteriumDaoService0 = new NutzenkriteriumDaoService((NutzenkriteriumDao) null);
      Nutzenkriterium nutzenkriterium0 = new Nutzenkriterium();
      // Undeclared exception!
      try {
        nutzenkriteriumDaoService0.getAssignments(nutzenkriterium0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      NutzenkriteriumDaoService nutzenkriteriumDaoService0 = new NutzenkriteriumDaoService((NutzenkriteriumDao) null);
      FragenForm fragenForm0 = new FragenForm();
      fragenForm0.getNutzenkriterium(1);
      // Undeclared exception!
      try {
        nutzenkriteriumDaoService0.saveFragen((HttpServletRequest) null, fragenForm0, (ActionMessages) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      NutzenkriteriumDaoService nutzenkriteriumDaoService0 = new NutzenkriteriumDaoService((NutzenkriteriumDao) null);
      assertNotNull(nutzenkriteriumDaoService0);
      
      FragenForm fragenForm0 = new FragenForm();
      boolean boolean0 = nutzenkriteriumDaoService0.saveFragen((HttpServletRequest) null, fragenForm0, (ActionMessages) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      NutzenkriteriumIbatisDao nutzenkriteriumIbatisDao0 = new NutzenkriteriumIbatisDao();
      NutzenkriteriumDaoService nutzenkriteriumDaoService0 = new NutzenkriteriumDaoService((NutzenkriteriumDao) nutzenkriteriumIbatisDao0);
      FragenForm fragenForm0 = new FragenForm();
      fragenForm0.getNutzenkriterium(12);
      // Undeclared exception!
      try {
        nutzenkriteriumDaoService0.saveDirekteGewichtung((HttpServletRequest) null, fragenForm0, (ActionMessages) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test15()  throws Throwable  {
      NutzenkriteriumIbatisDao nutzenkriteriumIbatisDao0 = new NutzenkriteriumIbatisDao();
      NutzenkriteriumDaoService nutzenkriteriumDaoService0 = new NutzenkriteriumDaoService((NutzenkriteriumDao) nutzenkriteriumIbatisDao0);
      assertNotNull(nutzenkriteriumDaoService0);
      
      FragenForm fragenForm0 = new FragenForm();
      boolean boolean0 = nutzenkriteriumDaoService0.saveDirekteGewichtung((HttpServletRequest) null, fragenForm0, (ActionMessages) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      NutzenkriteriumDaoService nutzenkriteriumDaoService0 = new NutzenkriteriumDaoService((NutzenkriteriumDao) null);
      LinkedList<Kategorie> linkedList0 = new LinkedList<Kategorie>();
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try {
        nutzenkriteriumDaoService0.setStatus((HttpServletRequest) null, (List<Kategorie>) linkedList0, integer0, (Integer) 0, false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
