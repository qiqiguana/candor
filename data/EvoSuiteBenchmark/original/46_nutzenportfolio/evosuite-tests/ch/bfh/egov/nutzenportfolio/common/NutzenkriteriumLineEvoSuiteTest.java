/*
 * This file was automatically generated by EvoSuite
 */

package ch.bfh.egov.nutzenportfolio.common;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import ch.bfh.egov.nutzenportfolio.common.NutzenkriteriumLine;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class NutzenkriteriumLineEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      NutzenkriteriumLine nutzenkriteriumLine0 = new NutzenkriteriumLine();
      Integer integer0 = new Integer((-1));
      nutzenkriteriumLine0.setNutzenkriteriumId(integer0);
      assertEquals(-1, integer0.byteValue());
  }

  @Test
  public void test1()  throws Throwable  {
      NutzenkriteriumLine nutzenkriteriumLine0 = new NutzenkriteriumLine();
      nutzenkriteriumLine0.getNutzenkriteriumId();
  }

  @Test
  public void test2()  throws Throwable  {
      NutzenkriteriumLine nutzenkriteriumLine0 = new NutzenkriteriumLine();
      nutzenkriteriumLine0.setGewichtung("");
      assertNull(nutzenkriteriumLine0.getFrage());
  }

  @Test
  public void test3()  throws Throwable  {
      NutzenkriteriumLine nutzenkriteriumLine0 = new NutzenkriteriumLine();
      nutzenkriteriumLine0.getKategorieId();
  }

  @Test
  public void test4()  throws Throwable  {
      NutzenkriteriumLine nutzenkriteriumLine0 = new NutzenkriteriumLine();
      nutzenkriteriumLine0.setKategorieGewichtung(" Src9.]wl&`z9");
      assertEquals(" Src9.]wl&`z9", nutzenkriteriumLine0.getKategorieGewichtung());
  }

  @Test
  public void test5()  throws Throwable  {
      NutzenkriteriumLine nutzenkriteriumLine0 = new NutzenkriteriumLine();
      String string0 = nutzenkriteriumLine0.getGewichtung();
      assertNull(string0);
  }

  @Test
  public void test6()  throws Throwable  {
      NutzenkriteriumLine nutzenkriteriumLine0 = new NutzenkriteriumLine();
      nutzenkriteriumLine0.setFrage("zn!:vm~mA~A^kVN:i");
      assertEquals("zn!:vm~mA~A^kVN:i", nutzenkriteriumLine0.getFrage());
  }

  @Test
  public void test7()  throws Throwable  {
      NutzenkriteriumLine nutzenkriteriumLine0 = new NutzenkriteriumLine();
      String string0 = nutzenkriteriumLine0.getFrage();
      assertNull(string0);
  }

  @Test
  public void test8()  throws Throwable  {
      NutzenkriteriumLine nutzenkriteriumLine0 = new NutzenkriteriumLine();
      nutzenkriteriumLine0.setKategorieId((Integer) null);
      assertNull(nutzenkriteriumLine0.getFrage());
  }

  @Test
  public void test9()  throws Throwable  {
      NutzenkriteriumLine nutzenkriteriumLine0 = new NutzenkriteriumLine();
      String string0 = nutzenkriteriumLine0.getKategorieGewichtung();
      assertNull(string0);
  }
}
