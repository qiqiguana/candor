/*
 * This file was automatically generated by EvoSuite
 */

package net.kencochrane.a4j.DAO;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SearchEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          Search search0 = new Search();
          ProductInfo productInfo0 = search0.UpcSearch("hM k=vy9<[^a", "hM k=vy9<[^a", "hM k=vy9<[^a");
          assertNull(productInfo0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          Search search0 = new Search();
          ProductInfo productInfo0 = search0.AuthorSearch("hM k=vy9<[^a", "hM k=vy9<[^a");
          assertNull(productInfo0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          Search search0 = new Search();
          ProductInfo productInfo0 = search0.ActorSearch("leHr5CunrD", "leHr5CunrD", "leHr5CunrD");
          assertNull(productInfo0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          Search search0 = new Search();
          ProductInfo productInfo0 = search0.WishListSearch("hM k=vy9<[^a");
          assertNull(productInfo0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          Search search0 = new Search();
          ProductInfo productInfo0 = search0.DirectorSearch("hM k=vy9<[^a", "hM k=vy9<[^a", "hM k=vy9<[^a");
          assertNull(productInfo0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          Search search0 = new Search();
          ProductInfo productInfo0 = search0.ManufactureSearch("dn", "dn", "dn");
          assertNull(productInfo0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          Search search0 = new Search();
          ProductInfo productInfo0 = search0.ArtistSearch("O", "O", "O");
          assertNull(productInfo0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          Search search0 = new Search();
          ProductInfo productInfo0 = search0.ListmaniaSearch("dn");
          assertNull(productInfo0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test8()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          Search search0 = new Search();
          BlendedSearch blendedSearch0 = search0.Blended("leHr5CunrD", "leHr5CunrD");
          assertNull(blendedSearch0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test9()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          Search search0 = new Search();
          ProductInfo productInfo0 = search0.Keyword("O", "O", "O", "O");
          assertNull(productInfo0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          Search search0 = new Search();
          SellerSearch sellerSearch0 = search0.ThirdParty("leHr5CunrD", "leHr5CunrD", "leHr5CunrD", "leHr5CunrD");
          assertNull(sellerSearch0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          Search search0 = new Search();
          ProductInfo productInfo0 = search0.SimilaritesSearch("O", "O");
          assertNull(productInfo0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
