/*
 * This file was automatically generated by EvoSuite
 */

package net.kencochrane.a4j;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import net.kencochrane.a4j.A4j;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.FullProduct;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.beans.ShoppingCart;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class A4jEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          A4j a4j0 = new A4j();
          ProductInfo productInfo0 = a4j0.UpcSearch("", "", "");
          assertNull(productInfo0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          A4j a4j0 = new A4j();
          ProductInfo productInfo0 = a4j0.AuthorSearch("productLines is null \n", "productLines is null \n");
          assertNull(productInfo0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          A4j a4j0 = new A4j();
          ProductInfo productInfo0 = a4j0.ListmaniaSearch("CartId = ");
          assertNull(productInfo0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          A4j a4j0 = new A4j();
          ShoppingCart shoppingCart0 = a4j0.clearCart("Sk\"> X*w0X|ckB/XF", "-- Accessories --");
          assertNull(shoppingCart0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          A4j a4j0 = new A4j();
          BlendedSearch blendedSearch0 = a4j0.BlendedSearch("CartId = ", "CartId = ");
          assertNull(blendedSearch0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          A4j a4j0 = new A4j();
          ProductInfo productInfo0 = a4j0.ArtistSearch("", "", "");
          assertNull(productInfo0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          A4j a4j0 = new A4j();
          ShoppingCart shoppingCart0 = a4j0.addToExistingCart("", "Sk\"> X*w0X|ckB/XF", "", "Sk\"> X*w0X|ckB/XF");
          assertNull(shoppingCart0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          A4j a4j0 = new A4j();
          ShoppingCart shoppingCart0 = a4j0.AddtoCart("-- Accessories --", "aI?&[Me9,rYU");
          assertNull(shoppingCart0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test8()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          A4j a4j0 = new A4j();
          ProductInfo productInfo0 = a4j0.DirectorSearch("-- Accessories --", "aI?&[Me9,rYU", "aI?&[Me9,rYU");
          assertNull(productInfo0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test9()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          A4j a4j0 = new A4j();
          FullProduct fullProduct0 = a4j0.getFullProductFromASIN("Sk\"> X*w0X|ckB/XF", "Sk\"> X*w0X|ckB/XF", "Sk\"> X*w0X|ckB/XF");
          assertNull(fullProduct0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          A4j a4j0 = new A4j();
          ProductInfo productInfo0 = a4j0.KeywordSearch("", "", "", "");
          assertNull(productInfo0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          A4j a4j0 = new A4j();
          ShoppingCart shoppingCart0 = a4j0.GetItemsFromCart("", "");
          assertNull(shoppingCart0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          A4j a4j0 = new A4j();
          SellerSearch sellerSearch0 = a4j0.ThirdParty("", "", "", "");
          assertNull(sellerSearch0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          A4j a4j0 = new A4j();
          ProductInfo productInfo0 = a4j0.ManufactureSearch("", "", "");
          assertNull(productInfo0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test14()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          A4j a4j0 = new A4j();
          ProductInfo productInfo0 = a4j0.WishListSearch("");
          assertNull(productInfo0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test15()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          A4j a4j0 = new A4j();
          ShoppingCart shoppingCart0 = a4j0.RemoveFromCart("", "", "");
          assertNull(shoppingCart0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test16()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          A4j a4j0 = new A4j();
          ProductInfo productInfo0 = a4j0.ActorSearch("< ", "< ", "< ");
          assertNull(productInfo0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test17()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          A4j a4j0 = new A4j();
          ShoppingCart shoppingCart0 = a4j0.modifyCart("productLines is null \n", "", "productLines is null \n", "L2E)&");
          assertNull(shoppingCart0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
