/*
 * This file was automatically generated by EvoSuite
 */

package com.pmdesigns.jvc.tools;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.pmdesigns.jvc.tools.Base64Coder;

@RunWith(EvoSuiteRunner.class)
public class Base64CoderEvoSuiteTest {


  //Test case number: 0
  /*
   * 15 covered goals:
   * 1 com.pmdesigns.jvc.tools.Base64Coder.decode(Ljava/lang/String;)[B: root-Branch
   * 2 com.pmdesigns.jvc.tools.Base64Coder.decode([C)[B: I10 Branch 6 IFEQ L115 - true
   * 3 com.pmdesigns.jvc.tools.Base64Coder.decode([C)[B: I19 Branch 7 IFLE L116 - false
   * 4 com.pmdesigns.jvc.tools.Base64Coder.decode([C)[B: I26 Branch 8 IF_ICMPNE L116 - true
   * 5 com.pmdesigns.jvc.tools.Base64Coder.decode([C)[B: I54 Branch 9 IF_ICMPGE L121 - false
   * 6 com.pmdesigns.jvc.tools.Base64Coder.decode([C)[B: I73 Branch 10 IF_ICMPGE L124 - false
   * 7 com.pmdesigns.jvc.tools.Base64Coder.decode([C)[B: I87 Branch 11 IF_ICMPGE L125 - false
   * 8 com.pmdesigns.jvc.tools.Base64Coder.decode([C)[B: I101 Branch 12 IF_ICMPGT L126 - false
   * 9 com.pmdesigns.jvc.tools.Base64Coder.decode([C)[B: I104 Branch 13 IF_ICMPGT L126 - false
   * 10 com.pmdesigns.jvc.tools.Base64Coder.decode([C)[B: I107 Branch 14 IF_ICMPGT L126 - false
   * 11 com.pmdesigns.jvc.tools.Base64Coder.decode([C)[B: I110 Branch 15 IF_ICMPLE L126 - true
   * 12 com.pmdesigns.jvc.tools.Base64Coder.decode([C)[B: I145 Branch 16 IFLT L132 - false
   * 13 com.pmdesigns.jvc.tools.Base64Coder.decode([C)[B: I147 Branch 17 IFLT L132 - false
   * 14 com.pmdesigns.jvc.tools.Base64Coder.decode([C)[B: I149 Branch 18 IFLT L132 - false
   * 15 com.pmdesigns.jvc.tools.Base64Coder.decode([C)[B: I151 Branch 19 IFGE L132 - false
   */
  @Test
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try {
        Base64Coder.decode("rPc}");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Illegal character in Base64 encoded data.
         */
      }
  }

  //Test case number: 1
  /*
   * 10 covered goals:
   * 1 com.pmdesigns.jvc.tools.Base64Coder.encode([B)[C: root-Branch
   * 2 com.pmdesigns.jvc.tools.Base64Coder.encodeString(Ljava/lang/String;)Ljava/lang/String;: root-Branch
   * 3 com.pmdesigns.jvc.tools.Base64Coder.encode([BI)[C: I37 Branch 1 IF_ICMPGE L74 - true
   * 4 com.pmdesigns.jvc.tools.Base64Coder.encode([BI)[C: I37 Branch 1 IF_ICMPGE L74 - false
   * 5 com.pmdesigns.jvc.tools.Base64Coder.encode([BI)[C: I51 Branch 2 IF_ICMPGE L76 - false
   * 6 com.pmdesigns.jvc.tools.Base64Coder.encode([BI)[C: I67 Branch 3 IF_ICMPGE L77 - true
   * 7 com.pmdesigns.jvc.tools.Base64Coder.encode([BI)[C: I67 Branch 3 IF_ICMPGE L77 - false
   * 8 com.pmdesigns.jvc.tools.Base64Coder.encode([BI)[C: I139 Branch 4 IF_ICMPGE L84 - false
   * 9 com.pmdesigns.jvc.tools.Base64Coder.encode([BI)[C: I155 Branch 5 IF_ICMPGE L85 - true
   * 10 com.pmdesigns.jvc.tools.Base64Coder.encode([BI)[C: I155 Branch 5 IF_ICMPGE L85 - false
   */
  @Test
  public void test1()  throws Throwable  {
      String string0 = Base64Coder.encodeString("Iw5P4NA");
      assertNotNull(string0);
      assertEquals("SX93NVA0TkE=", string0);
  }

  //Test case number: 2
  /*
   * 3 covered goals:
   * 1 com.pmdesigns.jvc.tools.Base64Coder.decodeString(Ljava/lang/String;)Ljava/lang/String;: root-Branch
   * 2 com.pmdesigns.jvc.tools.Base64Coder.decode([C)[B: I19 Branch 7 IFLE L116 - true
   * 3 com.pmdesigns.jvc.tools.Base64Coder.decode([C)[B: I54 Branch 9 IF_ICMPGE L121 - true
   */
  @Test
  public void test2()  throws Throwable  {
      String string0 = Base64Coder.decodeString("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  //Test case number: 3
  /*
   * 21 covered goals:
   * 1 com.pmdesigns.jvc.tools.Base64Coder.decode([C)[B: I26 Branch 8 IF_ICMPNE L116 - false
   * 2 com.pmdesigns.jvc.tools.Base64Coder.decode([C)[B: I73 Branch 10 IF_ICMPGE L124 - true
   * 3 com.pmdesigns.jvc.tools.Base64Coder.decode([C)[B: I87 Branch 11 IF_ICMPGE L125 - true
   * 4 com.pmdesigns.jvc.tools.Base64Coder.decode([C)[B: I151 Branch 19 IFGE L132 - true
   * 5 com.pmdesigns.jvc.tools.Base64Coder.decode([C)[B: I203 Branch 20 IF_ICMPGE L138 - true
   * 6 com.pmdesigns.jvc.tools.Base64Coder.decode([C)[B: I203 Branch 20 IF_ICMPGE L138 - false
   * 7 com.pmdesigns.jvc.tools.Base64Coder.decode([C)[B: I214 Branch 21 IF_ICMPGE L139 - true
   * 8 com.pmdesigns.jvc.tools.Base64Coder.decode([C)[B: I214 Branch 21 IF_ICMPGE L139 - false
   * 9 com.pmdesigns.jvc.tools.Base64Coder.encode([B)[C: root-Branch
   * 10 com.pmdesigns.jvc.tools.Base64Coder.encode([BI)[C: I37 Branch 1 IF_ICMPGE L74 - true
   * 11 com.pmdesigns.jvc.tools.Base64Coder.encode([BI)[C: I37 Branch 1 IF_ICMPGE L74 - false
   * 12 com.pmdesigns.jvc.tools.Base64Coder.encode([BI)[C: I51 Branch 2 IF_ICMPGE L76 - true
   * 13 com.pmdesigns.jvc.tools.Base64Coder.encode([BI)[C: I51 Branch 2 IF_ICMPGE L76 - false
   * 14 com.pmdesigns.jvc.tools.Base64Coder.encode([BI)[C: I67 Branch 3 IF_ICMPGE L77 - true
   * 15 com.pmdesigns.jvc.tools.Base64Coder.encode([BI)[C: I67 Branch 3 IF_ICMPGE L77 - false
   * 16 com.pmdesigns.jvc.tools.Base64Coder.encode([BI)[C: I139 Branch 4 IF_ICMPGE L84 - true
   * 17 com.pmdesigns.jvc.tools.Base64Coder.encode([BI)[C: I139 Branch 4 IF_ICMPGE L84 - false
   * 18 com.pmdesigns.jvc.tools.Base64Coder.encode([BI)[C: I155 Branch 5 IF_ICMPGE L85 - true
   * 19 com.pmdesigns.jvc.tools.Base64Coder.encode([BI)[C: I155 Branch 5 IF_ICMPGE L85 - false
   * 20 com.pmdesigns.jvc.tools.Base64Coder.decode([C)[B: I54 Branch 9 IF_ICMPGE L121 - true
   * 21 com.pmdesigns.jvc.tools.Base64Coder.decode([C)[B: I149 Branch 18 IFLT L132 - false
   */
  @Test
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      char[] charArray0 = Base64Coder.encode(byteArray0);
      byte[] byteArray1 = Base64Coder.decode(charArray0);
      assertFalse(byteArray1.equals(byteArray0));
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 com.pmdesigns.jvc.tools.Base64Coder.decode([C)[B: I10 Branch 6 IFEQ L115 - false
   */
  @Test
  public void test4()  throws Throwable  {
      char[] charArray0 = new char[15];
      // Undeclared exception!
      try {
        Base64Coder.decode(charArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Length of Base64 encoded input string is not a multiple of 4.
         */
      }
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 com.pmdesigns.jvc.tools.Base64Coder.decode([C)[B: I101 Branch 12 IF_ICMPGT L126 - true
   */
  @Test
  public void test5()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\u0087';
      // Undeclared exception!
      try {
        Base64Coder.decode(charArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Illegal character in Base64 encoded data.
         */
      }
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 com.pmdesigns.jvc.tools.Base64Coder.decode([C)[B: I104 Branch 13 IF_ICMPGT L126 - true
   */
  @Test
  public void test6()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0087';
      // Undeclared exception!
      try {
        Base64Coder.decode(charArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Illegal character in Base64 encoded data.
         */
      }
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 com.pmdesigns.jvc.tools.Base64Coder.decode([C)[B: I107 Branch 14 IF_ICMPGT L126 - true
   */
  @Test
  public void test7()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[2] = '\u008F';
      // Undeclared exception!
      try {
        Base64Coder.decode(charArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Illegal character in Base64 encoded data.
         */
      }
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 com.pmdesigns.jvc.tools.Base64Coder.decode([C)[B: I110 Branch 15 IF_ICMPLE L126 - false
   */
  @Test
  public void test8()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[3] = '\u0087';
      // Undeclared exception!
      try {
        Base64Coder.decode(charArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Illegal character in Base64 encoded data.
         */
      }
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 com.pmdesigns.jvc.tools.Base64Coder.decode([C)[B: I145 Branch 16 IFLT L132 - true
   */
  @Test
  public void test9()  throws Throwable  {
      // Undeclared exception!
      try {
        Base64Coder.decode("}H#|+LE/%^=&H#");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Illegal character in Base64 encoded data.
         */
      }
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 com.pmdesigns.jvc.tools.Base64Coder.decode([C)[B: I147 Branch 17 IFLT L132 - true
   */
  @Test
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try {
        Base64Coder.decode("Iw5P4NA");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Illegal character in Base64 encoded data.
         */
      }
  }

  //Test case number: 11
  /*
   * 15 covered goals:
   * 1 com.pmdesigns.jvc.tools.Base64Coder.decode([C)[B: I149 Branch 18 IFLT L132 - true
   * 2 com.pmdesigns.jvc.tools.Base64Coder.decode(Ljava/lang/String;)[B: root-Branch
   * 3 com.pmdesigns.jvc.tools.Base64Coder.decodeString(Ljava/lang/String;)Ljava/lang/String;: root-Branch
   * 4 com.pmdesigns.jvc.tools.Base64Coder.decode([C)[B: I10 Branch 6 IFEQ L115 - true
   * 5 com.pmdesigns.jvc.tools.Base64Coder.decode([C)[B: I19 Branch 7 IFLE L116 - false
   * 6 com.pmdesigns.jvc.tools.Base64Coder.decode([C)[B: I26 Branch 8 IF_ICMPNE L116 - true
   * 7 com.pmdesigns.jvc.tools.Base64Coder.decode([C)[B: I54 Branch 9 IF_ICMPGE L121 - false
   * 8 com.pmdesigns.jvc.tools.Base64Coder.decode([C)[B: I73 Branch 10 IF_ICMPGE L124 - false
   * 9 com.pmdesigns.jvc.tools.Base64Coder.decode([C)[B: I87 Branch 11 IF_ICMPGE L125 - false
   * 10 com.pmdesigns.jvc.tools.Base64Coder.decode([C)[B: I101 Branch 12 IF_ICMPGT L126 - false
   * 11 com.pmdesigns.jvc.tools.Base64Coder.decode([C)[B: I104 Branch 13 IF_ICMPGT L126 - false
   * 12 com.pmdesigns.jvc.tools.Base64Coder.decode([C)[B: I107 Branch 14 IF_ICMPGT L126 - false
   * 13 com.pmdesigns.jvc.tools.Base64Coder.decode([C)[B: I110 Branch 15 IF_ICMPLE L126 - true
   * 14 com.pmdesigns.jvc.tools.Base64Coder.decode([C)[B: I145 Branch 16 IFLT L132 - false
   * 15 com.pmdesigns.jvc.tools.Base64Coder.decode([C)[B: I147 Branch 17 IFLT L132 - false
   */
  @Test
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try {
        Base64Coder.decodeString("Ft}uB'R`Q3$s");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Illegal character in Base64 encoded data.
         */
      }
  }
}
