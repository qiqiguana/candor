/*
 * This file was automatically generated by EvoSuite
 */

package framework.base;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import framework.base.ValueListHandler;
import java.util.Collection;
import java.util.LinkedList;
import org.evosuite.testcase.TestCaseExecutor;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ValueListHandlerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ValueListHandler valueListHandler0 = new ValueListHandler();
      assertEquals(10, valueListHandler0.getRowsPerPage());
      
      valueListHandler0.setRowsPerPage(0);
      assertEquals("{pageCount=0, nextIndex=0, rowsPerPage=0, previousIndex=0, startIndex=0, rowCountMethod=java, empty=true, advanced=false, resultList=null, class=class framework.base.ValueListHandler, rowCount=0}", valueListHandler0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      ValueListHandler valueListHandler0 = new ValueListHandler();
      valueListHandler0.setNextPage(false);
      assertEquals("{pageCount=0, nextIndex=0, rowsPerPage=10, previousIndex=0, startIndex=0, rowCountMethod=java, empty=true, advanced=false, resultList=null, class=class framework.base.ValueListHandler, rowCount=0}", valueListHandler0.toString());
      assertEquals(false, valueListHandler0.hasNextPage());
  }

  @Test
  public void test2()  throws Throwable  {
      ValueListHandler valueListHandler0 = new ValueListHandler();
      valueListHandler0.setNextIndex(10);
      assertEquals(10, valueListHandler0.getNextIndex());
      assertEquals("{pageCount=0, nextIndex=10, rowsPerPage=10, previousIndex=0, startIndex=0, rowCountMethod=java, empty=true, advanced=false, resultList=null, class=class framework.base.ValueListHandler, rowCount=0}", valueListHandler0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      ValueListHandler valueListHandler0 = new ValueListHandler();
      assertEquals(false, valueListHandler0.isAdvanced());
      
      valueListHandler0.setAdvanced(true);
      assertEquals(true, valueListHandler0.isAdvanced());
      assertEquals("{pageCount=0, nextIndex=0, rowsPerPage=10, previousIndex=0, startIndex=0, rowCountMethod=java, empty=true, advanced=true, resultList=null, class=class framework.base.ValueListHandler, rowCount=0}", valueListHandler0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      ValueListHandler valueListHandler0 = new ValueListHandler();
      valueListHandler0.setRowCount(1483);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      valueListHandler0.setResultList((Collection) linkedList0);
      valueListHandler0.setRetrieveRowCount(true);
      boolean boolean0 = valueListHandler0.hasNextPage();
      assertEquals(1483, valueListHandler0.getRowCount());
      assertEquals(true, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      ValueListHandler valueListHandler0 = new ValueListHandler();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      valueListHandler0.setResultList((Collection) linkedList0);
      valueListHandler0.setRetrieveRowCount(true);
      boolean boolean0 = valueListHandler0.hasNextPage();
      assertEquals(true, valueListHandler0.hasRetrieveRowCount());
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      ValueListHandler valueListHandler0 = new ValueListHandler();
      valueListHandler0.setRowCountMethod(",AE[#\"cBTP,g<Y+");
      assertEquals("{pageCount=0, nextIndex=0, rowsPerPage=10, previousIndex=0, startIndex=0, rowCountMethod=,AE[#\"cBTP,g<Y+, empty=true, advanced=false, resultList=null, class=class framework.base.ValueListHandler, rowCount=0}", valueListHandler0.toString());
      assertEquals(0, valueListHandler0.getRowCount());
  }

  @Test
  public void test7()  throws Throwable  {
      ValueListHandler valueListHandler0 = new ValueListHandler();
      valueListHandler0.setRetrieveRowCount(true);
      // Undeclared exception!
      try {
        valueListHandler0.hasNextPage();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      ValueListHandler valueListHandler0 = new ValueListHandler();
      valueListHandler0.setStartIndex(1201);
      int int0 = valueListHandler0.getPreviousIndex();
      assertEquals("{pageCount=0, nextIndex=0, rowsPerPage=10, previousIndex=1191, startIndex=1201, rowCountMethod=java, empty=true, advanced=false, resultList=null, class=class framework.base.ValueListHandler, rowCount=0}", valueListHandler0.toString());
      assertEquals(1191, int0);
  }

  @Test
  public void test9()  throws Throwable  {
      ValueListHandler valueListHandler0 = new ValueListHandler();
      valueListHandler0.setRetrieveRowCount(true);
      String string0 = valueListHandler0.toString();
      assertEquals(true, valueListHandler0.hasRetrieveRowCount());
      assertEquals("{pageCount=0, nextIndex=0, rowsPerPage=10, previousIndex=0, startIndex=0, rowCountMethod=java, empty=true, advanced=false, resultList=null, class=class framework.base.ValueListHandler, rowCount=0}", string0);
  }

  @Test
  public void test10()  throws Throwable  {
      ValueListHandler valueListHandler0 = new ValueListHandler();
      valueListHandler0.setRetrieveRowCount(true);
      valueListHandler0.setStartIndex((-20));
      valueListHandler0.describe();
      assertEquals(true, valueListHandler0.hasRetrieveRowCount());
      assertEquals(10, valueListHandler0.getRowsPerPage());
  }

  @Test
  public void test11()  throws Throwable  {
      ValueListHandler valueListHandler0 = new ValueListHandler();
      boolean boolean0 = valueListHandler0.hasPreviousPage();
      assertEquals("{pageCount=0, nextIndex=0, rowsPerPage=10, previousIndex=0, startIndex=0, rowCountMethod=java, empty=true, advanced=false, resultList=null, class=class framework.base.ValueListHandler, rowCount=0}", valueListHandler0.toString());
      assertEquals(false, boolean0);
      assertEquals(false, valueListHandler0.hasNextPage());
  }

  @Test
  public void test12()  throws Throwable  {
      ValueListHandler valueListHandler0 = new ValueListHandler();
      valueListHandler0.setStartIndex(1201);
      boolean boolean0 = valueListHandler0.hasPreviousPage();
      assertEquals(1191, valueListHandler0.getPreviousIndex());
      assertEquals(true, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      ValueListHandler valueListHandler0 = new ValueListHandler();
      boolean boolean0 = valueListHandler0.hasNextPage();
      assertEquals(false, boolean0);
      assertEquals("{pageCount=0, nextIndex=0, rowsPerPage=10, previousIndex=0, startIndex=0, rowCountMethod=java, empty=true, advanced=false, resultList=null, class=class framework.base.ValueListHandler, rowCount=0}", valueListHandler0.toString());
  }

  @Test
  public void test14()  throws Throwable  {
      ValueListHandler valueListHandler0 = new ValueListHandler();
      assertEquals("{pageCount=0, nextIndex=0, rowsPerPage=10, previousIndex=0, startIndex=0, rowCountMethod=java, empty=true, advanced=false, resultList=null, class=class framework.base.ValueListHandler, rowCount=0}", valueListHandler0.toString());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      valueListHandler0.setResultList((Collection) linkedList0);
      boolean boolean0 = valueListHandler0.isEmpty();
      assertEquals("{pageCount=0, nextIndex=0, rowsPerPage=10, previousIndex=0, startIndex=0, rowCountMethod=java, empty=true, advanced=false, resultList=[], class=class framework.base.ValueListHandler, rowCount=0}", valueListHandler0.toString());
      assertEquals(true, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      ValueListHandler valueListHandler0 = new ValueListHandler();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      valueListHandler0.setResultList((Collection) linkedList0);
      linkedList0.add((Object) valueListHandler0);
      valueListHandler0.toXML();
  }
}
