/*
 * This file was automatically generated by EvoSuite
 */

package framework.base;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import framework.base.BaseCacheManager;
import framework.persistence.jdbc.EntityManager;
import framework.persistence.jdbc.ViewManager;
import java.lang.reflect.Array;
import java.lang.reflect.InvocationTargetException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BaseCacheManagerEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      ViewManager viewManager0 = ViewManager.getInstance();
      BaseCacheManager.CachedObject baseCacheManager_CachedObject0 = viewManager0.new CachedObject((Object) viewManager0);
      assertNotNull(baseCacheManager_CachedObject0);
      
      ViewManager viewManager1 = (ViewManager)baseCacheManager_CachedObject0.getCachedData((Object) viewManager0);
      assertEquals(2, baseCacheManager_CachedObject0.numberOfAccesses);
      assertEquals(false, viewManager1.isCacheTimeToLiveUsed());
  }

  @Test
  public void test1()  throws Throwable  {
      ViewManager viewManager0 = ViewManager.getInstance();
      BaseCacheManager.CachedObject baseCacheManager_CachedObject0 = viewManager0.new CachedObject((Object) null);
      assertNotNull(baseCacheManager_CachedObject0);
      
      int int0 = baseCacheManager_CachedObject0.howManyTimesAccessed();
      assertEquals(1, int0);
      assertEquals(0L, baseCacheManager_CachedObject0.objectIdleTimeout);
      assertEquals(0L, baseCacheManager_CachedObject0.objectTimeToLive);
  }

  @Test
  public void test2()  throws Throwable  {
      ViewManager viewManager0 = ViewManager.getInstance();
      BaseCacheManager.CachedObject baseCacheManager_CachedObject0 = viewManager0.new CachedObject((Object) "!");
      assertNotNull(baseCacheManager_CachedObject0);
      
      baseCacheManager_CachedObject0.whenLastAccessed();
      assertEquals(1, baseCacheManager_CachedObject0.numberOfAccesses);
      assertEquals(0L, baseCacheManager_CachedObject0.objectTimeToLive);
      assertEquals(0L, baseCacheManager_CachedObject0.objectIdleTimeout);
      assertEquals(0L, viewManager0.getCacheTimeToLive());
  }

  @Test
  public void test3()  throws Throwable  {
      ViewManager viewManager0 = ViewManager.getInstance();
      BaseCacheManager.CachedObject baseCacheManager_CachedObject0 = viewManager0.new CachedObject((Object) "!");
      assertNotNull(baseCacheManager_CachedObject0);
      
      baseCacheManager_CachedObject0.whenCached();
      assertEquals(0L, baseCacheManager_CachedObject0.objectTimeToLive);
      assertEquals(1, baseCacheManager_CachedObject0.numberOfAccesses);
      assertEquals(0L, baseCacheManager_CachedObject0.objectIdleTimeout);
      assertEquals(false, viewManager0.isCacheTimeToLiveUsed());
  }

  @Test
  public void test4()  throws Throwable  {
      EntityManager entityManager0 = EntityManager.getInstance();
      long long0 = entityManager0.getCacheTimerInterval();
      assertEquals(false, entityManager0.isCacheIdleTimeoutUsed());
      assertEquals(0L, entityManager0.getCacheIdleTimeout());
      assertEquals(60000L, long0);
      assertEquals(0L, entityManager0.getCacheTimeToLive());
      assertEquals(false, entityManager0.isCacheTimeToLiveUsed());
      assertEquals(false, entityManager0.isCacheSizeLimited());
  }

  @Test
  public void test5()  throws Throwable  {
      EntityManager entityManager0 = EntityManager.getInstance();
      entityManager0.finalize();
      assertEquals("./web/WEB-INF/test", entityManager0.getRepositoryDirectory());
  }

  @Test
  public void test6()  throws Throwable  {
      EntityManager entityManager0 = EntityManager.getInstance();
      // Undeclared exception!
      try {
        entityManager0.dumpCache();
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
        /*
         * / by zero
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      EntityManager entityManager0 = EntityManager.getInstance();
      try {
        entityManager0.getOrLoad((Object) "/src/test/java");
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * You have to override the load() method !
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      ViewManager viewManager0 = ViewManager.getInstance();
      int int0 = viewManager0.getCacheSize();
      assertEquals(0, int0);
  }

  @Test
  public void test9()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          EntityManager entityManager0 = EntityManager.getInstance();
          try {
            entityManager0.find((String) null, (String) null);
            fail("Expecting exception: InvocationTargetException");
          } catch(InvocationTargetException e) {
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test10()  throws Throwable  {
      ViewManager viewManager0 = ViewManager.getInstance();
      Object[] objectArray0 = new Object[2];
      Class<?>[] classArray0 = (Class<?>[]) Array.newInstance(Class.class, 1);
      try {
        viewManager0.getOrLoad((Object) null, (Object) viewManager0, (String) null, objectArray0, (Class[]) classArray0);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * You have to override the load() method !
         */
      }
  }
}
