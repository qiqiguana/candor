/*
 * This file was automatically generated by EvoSuite
 */

package framework.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import framework.base.ValueListHandler;
import framework.util.XMLUtils;
import java.io.IOException;
import java.net.MalformedURLException;
import org.apache.xalan.templates.ElemExtensionScript;
import org.apache.xerces.dom.CoreDocumentImpl;
import org.apache.xerces.dom.DocumentImpl;
import org.apache.xerces.dom.ElementImpl;
import org.junit.BeforeClass;
import org.w3c.dom.Document;

@RunWith(EvoSuiteRunner.class)
public class XMLUtilsEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      try {
        XMLUtils.readDOMFile("^1");
        fail("Expecting exception: MalformedURLException");
      } catch(MalformedURLException e) {
        /*
         * no protocol: ^1
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl(true);
      // Undeclared exception!
      try {
        XMLUtils.writeDOMFile((Document) coreDocumentImpl0, "");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      ValueListHandler valueListHandler0 = new ValueListHandler();
      DocumentImpl documentImpl0 = (DocumentImpl)valueListHandler0.toXML(",4QJnj&f9].K");
      assertNotNull(documentImpl0);
      assertEquals(true, documentImpl0.hasChildNodes());
  }

  @Test
  public void test3()  throws Throwable  {
      XMLUtils xMLUtils0 = new XMLUtils();
      assertNotNull(xMLUtils0);
  }

  @Test
  public void test4()  throws Throwable  {
      ElemExtensionScript elemExtensionScript0 = new ElemExtensionScript();
      // Undeclared exception!
      try {
        XMLUtils.toString((Document) elemExtensionScript0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * ElemTemplateElement error: Function not supported!
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl(true);
      ElementImpl elementImpl0 = (ElementImpl)XMLUtils.convertDOM((Document) coreDocumentImpl0, (Object) "", (String) null);
      assertEquals(3, elementImpl0.getLength());
      assertNotNull(elementImpl0);
  }
}
