/*
 * This file was automatically generated by EvoSuite
 */

package framework.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import framework.util.ObjectUtils;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ObjectUtilsEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ObjectUtils objectUtils0 = new ObjectUtils();
      Class<Object> class0 = objectUtils0.getTargetClass((Object) "file:/usr/local/packages/java/jdk1.6.0_29/jre/lib/rt.jar!/java/lang/Class.class", "file:/usr/local/packages/java/jdk1.6.0_29/jre/lib/rt.jar!/java/lang/Class.class", "file:/usr/local/packages/java/jdk1.6.0_29/jre/lib/rt.jar!/java/lang/Class.class");
      ObjectUtils.copyProperties((Object) "file:/usr/local/packages/java/jdk1.6.0_29/jre/lib/rt.jar!/java/lang/Class.class", (Object) class0);
      assertEquals(false, class0.isSynthetic());
  }

  @Test
  public void test1()  throws Throwable  {
      Class<?> class0 = Class.class;
      String string0 = ObjectUtils.getFullDirectory(class0);
      assertEquals("file:/usr/local/packages/java/jdk1.6.0_29/jre/lib/rt.jar!/java/lang/Class.class", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      boolean boolean0 = ObjectUtils.isClassName("{}");
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      ObjectUtils objectUtils0 = new ObjectUtils();
      try {
        objectUtils0.getTargetClass((Object) null, "file:/usr/local/packages/java/jdk1.6.0_29/jre/lib/rt.jar!/java/util/Collection.class", "file:/usr/local/packages/java/jdk1.6.0_29/jre/lib/rt.jar!/java/util/Collection.class");
        fail("Expecting exception: ClassNotFoundException");
      } catch(ClassNotFoundException e) {
        /*
         * file:/usr/local/packages/java/jdk1.6.0_29/jre/lib/rt.jar!/java/util/Collection.class
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      ObjectUtils.copyProperties((Map) null, (Object) "ObjectUtils");
  }

  @Test
  public void test5()  throws Throwable  {
      Collection<Object> collection0 = ObjectUtils.toCollection((Object) "");
      assertNotNull(collection0);
      
      ObjectUtils.copyProperties((Object) collection0, (Object) null);
      assertEquals(1, collection0.size());
      assertEquals(false, collection0.isEmpty());
  }

  @Test
  public void test6()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      ObjectUtils.copyProperties((Map) hashMap0, (Object) "{}");
      assertEquals(true, hashMap0.isEmpty());
  }

  @Test
  public void test7()  throws Throwable  {
      HashMap<Class<Object>, Object> hashMap0 = new HashMap<Class<Object>, Object>();
      ObjectUtils.copyProperties((Object) hashMap0, (Object) hashMap0);
      assertEquals(0, hashMap0.size());
  }

  @Test
  public void test8()  throws Throwable  {
      boolean boolean0 = ObjectUtils.valuesAreDifferent((Object) "{}", (Object) "ObjectUtils");
      assertEquals(true, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      Collection<Object> collection0 = ObjectUtils.toCollection((Object) "file:/mnt/fastdata/ac1gf/SF110/dist/38_javabullboard/javabullboard.jar!/framework/util/ObjectUtils.class");
      assertNotNull(collection0);
      
      boolean boolean0 = ObjectUtils.valuesAreDifferent((Object) null, (Object) collection0);
      assertEquals(true, boolean0);
      assertEquals(1, collection0.size());
  }

  @Test
  public void test10()  throws Throwable  {
      boolean boolean0 = ObjectUtils.valuesAreDifferent((Object) null, (Object) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = ObjectUtils.valuesAreDifferent(object0, object0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      Class<?> class0 = ObjectUtils.class;
      boolean boolean0 = ObjectUtils.isPrimitive(class0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      Class<?> class0 = Collection.class;
      boolean boolean0 = ObjectUtils.isMatching(class0, class0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      Class<?> class0 = Collection.class;
      Class<?> class1 = Map.class;
      boolean boolean0 = ObjectUtils.isMatching(class0, class1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      Collection<Object> collection0 = ObjectUtils.toCollection((Object) null);
      assertNull(collection0);
  }

  @Test
  public void test16()  throws Throwable  {
      Collection<Object> collection0 = ObjectUtils.toCollection((Object) "");
      assertNotNull(collection0);
      
      Collection<Object> collection1 = ObjectUtils.toCollection((Object) collection0);
      assertEquals(false, collection1.isEmpty());
      assertNotNull(collection1);
  }

  @Test
  public void test17()  throws Throwable  {
      ObjectUtils objectUtils0 = new ObjectUtils();
      try {
        objectUtils0.getTargetClass((Object) null, (String) null, "{}");
        fail("Expecting exception: ClassNotFoundException");
      } catch(ClassNotFoundException e) {
        /*
         * Illegal repetition near index 1
         * .*{}.class
         *  ^
         */
      }
  }

  @Test
  public void test18()  throws Throwable  {
      ObjectUtils objectUtils0 = new ObjectUtils();
      Class<Object> class0 = objectUtils0.getTargetClass((Object) "file:/usr/local/packages/java/jdk1.6.0_29/jre/lib/rt.jar!/java/lang/Class.class", "file:/usr/local/packages/java/jdk1.6.0_29/jre/lib/rt.jar!/java/lang/Class.class", "file:/usr/local/packages/java/jdk1.6.0_29/jre/lib/rt.jar!/java/lang/Class.class");
      Class<Object> class1 = objectUtils0.getTargetClass((Object) class0, "file:/usr/local/packages/java/jdk1.6.0_29/jre/lib/rt.jar!/java/lang/Class.class", "file:/usr/local/packages/java/jdk1.6.0_29/jre/lib/rt.jar!/java/lang/Class.class");
      assertEquals(false, class1.isArray());
  }
}
