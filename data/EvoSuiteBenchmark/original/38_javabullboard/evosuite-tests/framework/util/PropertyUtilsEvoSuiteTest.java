/*
 * This file was automatically generated by EvoSuite
 */

package framework.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import framework.util.PropertyUtils;
import java.beans.PropertyDescriptor;
import java.lang.reflect.InvocationTargetException;
import java.sql.Time;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.Map;
import org.apache.commons.beanutils.DynaClass;
import org.apache.commons.beanutils.LazyDynaBean;
import org.apache.commons.beanutils.LazyDynaClass;
import org.apache.commons.beanutils.LazyDynaMap;
import org.apache.commons.beanutils.WrapDynaBean;
import org.apache.commons.beanutils.WrapDynaClass;
import org.apache.commons.collections.FastHashMap;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PropertyUtilsEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      PropertyUtils.clearDescriptors();
  }

  @Test
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try {
        PropertyUtils.getWriteMethod((PropertyDescriptor) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(0, (-97), 0, 0, 0, 0);
      Locale locale0 = Locale.US;
      Map<String, Integer> map0 = gregorianCalendar0.getDisplayNames(0, 0, locale0);
      Map<Object, Object> map1 = PropertyUtils.describe((Object) map0);
      assertNotNull(map1);
      assertEquals(2, map1.size());
  }

  @Test
  public void test3()  throws Throwable  {
      Map<Object, Object> map0 = PropertyUtils.describe((Object) "proxytype");
      assertNotNull(map0);
      assertEquals(3, map0.size());
  }

  @Test
  public void test4()  throws Throwable  {
      Class<?> class0 = PropertyUtils.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      WrapDynaBean wrapDynaBean0 = (WrapDynaBean)wrapDynaClass0.newInstance();
      PropertyUtils.copyProperties((Object) wrapDynaBean0, (Object) "zh_CN");
  }

  @Test
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try {
        PropertyUtils.setProperty((Object) null, "1010-yZ1-0", (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * No bean specified
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try {
        PropertyUtils.copyProperties((Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * No destination bean specified
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      // Undeclared exception!
      try {
        PropertyUtils.copyProperties((Object) "connpool_timeout", (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * No origin bean specified
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      LazyDynaBean lazyDynaBean0 = new LazyDynaBean("cQ,\"SxPDV\"P&Or53^R");
      PropertyUtils.copyProperties((Object) "zh_TW", (Object) lazyDynaBean0);
  }

  @Test
  public void test9()  throws Throwable  {
      PropertyUtils.copyProperties((Object) "proxytype_user_name", (Object) "proxytype_user_name");
  }

  @Test
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try {
        PropertyUtils.describe((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * No bean specified
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try {
        PropertyUtils.getIndexedProperty((Object) "connpool_proxy_connection", "connpool_proxy_connection");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Invalid indexed property 'connpool_proxy_connection'
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try {
        PropertyUtils.getIndexedProperty((Object) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * No bean specified
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try {
        PropertyUtils.getNestedProperty((Object) "[]", "[]");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Invalid indexed property '[]'
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap();
      Object object0 = PropertyUtils.getIndexedProperty((Object) lazyDynaMap0, "dataSizeUnits", (int) (byte)122);
      assertNull(object0);
  }

  @Test
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try {
        PropertyUtils.getIndexedProperty((Object) null, "-2147390704-69", (-116));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * No bean specified
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      try {
        PropertyUtils.getIndexedProperty((Object) "tcp", "tcp", (-87));
        fail("Expecting exception: NoSuchMethodException");
      } catch(NoSuchMethodException e) {
        /*
         * Unknown property 'tcp'
         */
      }
  }

  @Test
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try {
        PropertyUtils.getMappedProperty((Object) "0.0.0.0/0.0.0.0:0", "8(-Ie[d");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Invalid mapped property '8(-Ie[d'
         */
      }
  }

  @Test
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try {
        PropertyUtils.getMappedProperty((Object) null, "OracleConnectionCacheImpl");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * No bean specified
         */
      }
  }

  @Test
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try {
        PropertyUtils.getMappedProperty((Object) "cinese", "cinese");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Invalid mapped property 'cinese'
         */
      }
  }

  @Test
  public void test20()  throws Throwable  {
      try {
        PropertyUtils.getNestedProperty((Object) "English (United States)", "English (United States)");
        fail("Expecting exception: NoSuchMethodException");
      } catch(NoSuchMethodException e) {
        /*
         * Unknown property 'English '
         */
      }
  }

  @Test
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try {
        PropertyUtils.getMappedProperty((Object) null, "", "");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * No bean specified
         */
      }
  }

  @Test
  public void test22()  throws Throwable  {
      FastHashMap fastHashMap0 = PropertyUtils.getMappedPropertyDescriptors((Class) null);
      assertNull(fastHashMap0);
  }

  @Test
  public void test23()  throws Throwable  {
      FastHashMap fastHashMap0 = PropertyUtils.getMappedPropertyDescriptors((Object) null);
      assertNull(fastHashMap0);
  }

  @Test
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try {
        PropertyUtils.getProperty((Object) null, "jJ00#uF");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * No bean specified
         */
      }
  }

  @Test
  public void test25()  throws Throwable  {
      try {
        PropertyUtils.getProperty((Object) "--//Sun Microsystems, Inc.//XSD Schema//EN", "--//Sun Microsystems, Inc.//XSD Schema//EN");
        fail("Expecting exception: NoSuchMethodException");
      } catch(NoSuchMethodException e) {
        /*
         * Unknown property '--//Sun Microsystems, Inc'
         */
      }
  }

  @Test
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try {
        PropertyUtils.getPropertyDescriptor((Object) null, "4B2r{DeykooBHT4");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * No bean specified
         */
      }
  }

  @Test
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      try {
        PropertyUtils.setIndexedProperty((Object) "-5958-0-0.-1.-1. -1. 0", "-5958-0-0.-1.-1. -1. 0", (int) (byte)42, (Object) byteArray0);
        fail("Expecting exception: NoSuchMethodException");
      } catch(NoSuchMethodException e) {
        /*
         * Unknown property '-5958-0-0'
         */
      }
  }

  @Test
  public void test28()  throws Throwable  {
      PropertyDescriptor propertyDescriptor0 = PropertyUtils.getPropertyDescriptor((Object) "[]", "[]");
      assertNull(propertyDescriptor0);
  }

  @Test
  public void test29()  throws Throwable  {
      FastHashMap fastHashMap0 = new FastHashMap();
      try {
        PropertyUtils.getMappedProperty((Object) fastHashMap0, "1@D(ReDQ5K/9ffgj", "1@D(ReDQ5K/9ffgj");
        fail("Expecting exception: NoSuchMethodException");
      } catch(NoSuchMethodException e) {
        /*
         * Unknown property '1@D(ReDQ5K/9ffgj'
         */
      }
  }

  @Test
  public void test30()  throws Throwable  {
      try {
        PropertyUtils.setIndexedProperty((Object) "ServerBytes", "ServerBytes", (-13), (Object) null);
        fail("Expecting exception: NoSuchMethodException");
      } catch(NoSuchMethodException e) {
        /*
         * Unknown property 'ServerBytes'
         */
      }
  }

  @Test
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try {
        PropertyUtils.getPropertyDescriptors((Class) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * No bean class specified
         */
      }
  }

  @Test
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try {
        PropertyUtils.getPropertyDescriptors((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * No bean specified
         */
      }
  }

  @Test
  public void test33()  throws Throwable  {
      Class<Object> class0 = PropertyUtils.getPropertyEditorClass((Object) "uF", "jJ00#uF");
      assertNull(class0);
  }

  @Test
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try {
        PropertyUtils.getPropertyEditorClass((Object) null, "2746-0-246");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * No bean specified
         */
      }
  }

  @Test
  public void test35()  throws Throwable  {
      LazyDynaClass lazyDynaClass0 = new LazyDynaClass();
      LazyDynaBean lazyDynaBean0 = (LazyDynaBean)lazyDynaClass0.newInstance();
      Class<Object> class0 = PropertyUtils.getPropertyType((Object) lazyDynaBean0, "v");
      assertEquals(false, class0.isMemberClass());
  }

  @Test
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try {
        PropertyUtils.getPropertyType((Object) null, "");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * No bean specified
         */
      }
  }

  @Test
  public void test37()  throws Throwable  {
      Class<Object> class0 = PropertyUtils.getPropertyType((Object) "OracleConnectionCacheImpl", "cinese");
      assertNull(class0);
  }

  @Test
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try {
        PropertyUtils.getSimpleProperty((Object) null, "v");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * No bean specified
         */
      }
  }

  @Test
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try {
        PropertyUtils.isReadable((Object) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * No bean specified
         */
      }
  }

  @Test
  public void test40()  throws Throwable  {
      Class<?> class0 = Time.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap((DynaClass) wrapDynaClass0);
      boolean boolean0 = PropertyUtils.isReadable((Object) lazyDynaMap0, "zh_TW");
      assertEquals(true, boolean0);
  }

  @Test
  public void test41()  throws Throwable  {
      boolean boolean0 = PropertyUtils.isReadable((Object) "tcp", "tcp");
      assertEquals(false, boolean0);
  }

  @Test
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try {
        PropertyUtils.isWriteable((Object) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * No bean specified
         */
      }
  }

  @Test
  public void test43()  throws Throwable  {
      FastHashMap fastHashMap0 = new FastHashMap();
      boolean boolean0 = PropertyUtils.isWriteable((Object) fastHashMap0, "");
      assertEquals(false, boolean0);
  }

  @Test
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try {
        PropertyUtils.setIndexedProperty((Object) "[]", "[]", (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Invalid indexed property '[]'
         */
      }
  }

  @Test
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try {
        PropertyUtils.setIndexedProperty((Object) null, "proxytype_user_name", (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * No bean specified
         */
      }
  }

  @Test
  public void test46()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try {
        PropertyUtils.setIndexedProperty(object0, "empty", object0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Invalid indexed property 'empty'
         */
      }
  }

  @Test
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try {
        PropertyUtils.setIndexedProperty((Object) null, "eY3'))sB", (-502), (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * No bean specified
         */
      }
  }

  @Test
  public void test48()  throws Throwable  {
      FastHashMap fastHashMap0 = new FastHashMap(1, 1);
      // Undeclared exception!
      try {
        PropertyUtils.setMappedProperty((Object) fastHashMap0, "(:1;Y.", (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Invalid mapped property '(:1;Y.'
         */
      }
  }

  @Test
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try {
        PropertyUtils.setMappedProperty((Object) null, "I R5/gz~yzqlXy", (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * No bean specified
         */
      }
  }

  @Test
  public void test50()  throws Throwable  {
      FastHashMap fastHashMap0 = new FastHashMap(1, 1);
      // Undeclared exception!
      try {
        PropertyUtils.setMappedProperty((Object) fastHashMap0, "6046-160-246", (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Invalid mapped property '6046-160-246'
         */
      }
  }

  @Test
  public void test51()  throws Throwable  {
      try {
        PropertyUtils.setMappedProperty((Object) "10", "10", "10", (Object) "10");
        fail("Expecting exception: NoSuchMethodException");
      } catch(NoSuchMethodException e) {
        /*
         * Unknown property '10'
         */
      }
  }

  @Test
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try {
        PropertyUtils.setMappedProperty((Object) null, "MsAK@ic@h$C^@?w", "MsAK@ic@h$C^@?w", (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * No bean specified
         */
      }
  }

  @Test
  public void test53()  throws Throwable  {
      try {
        PropertyUtils.setNestedProperty((Object) "-92636656-69", "-92636656-69", (Object) "connpool_proxy_connection");
        fail("Expecting exception: NoSuchMethodException");
      } catch(NoSuchMethodException e) {
        /*
         * Unknown property '-92636656-69'
         */
      }
  }

  @Test
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try {
        PropertyUtils.setSimpleProperty((Object) null, (String) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * No bean specified
         */
      }
  }
}
