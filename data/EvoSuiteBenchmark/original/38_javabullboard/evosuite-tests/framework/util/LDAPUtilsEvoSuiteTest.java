/*
 * This file was automatically generated by EvoSuite
 */

package framework.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import framework.util.LDAPUtils;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.naming.CommunicationException;
import javax.naming.directory.Attributes;
import javax.naming.directory.BasicAttributes;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class LDAPUtilsEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      Map<Object, Object> map0 = LDAPUtils.getEnvironement();
      assertEquals(false, map0.isEmpty());
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          try {
            LDAPUtils.getAttributes("5w/[Wv.ZmcdXU].k3Z$");
            fail("Expecting exception: CommunicationException");
          } catch(CommunicationException e) {
            /*
             * localhost:389
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
      LDAPUtils lDAPUtils0 = new LDAPUtils();
      assertNotNull(lDAPUtils0);
  }

  @Test
  public void test3()  throws Throwable  {
      BasicAttributes basicAttributes0 = new BasicAttributes("5w/[Wv.ZmcdXU].k3Z$", "5w/[Wv.ZmcdXU].k3Z$");
      LDAPUtils.dumpAttributes((Attributes) basicAttributes0);
      assertEquals(1, basicAttributes0.size());
  }

  @Test
  public void test4()  throws Throwable  {
      LDAPUtils.dumpAttributes((Attributes) null);
  }
}
