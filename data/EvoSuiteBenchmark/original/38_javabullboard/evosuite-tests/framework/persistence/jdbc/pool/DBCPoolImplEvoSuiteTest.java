/*
 * This file was automatically generated by EvoSuite
 */

package framework.persistence.jdbc.pool;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import framework.persistence.jdbc.pool.DBCPoolImpl;
import java.sql.SQLException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DBCPoolImplEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DBCPoolImpl dBCPoolImpl0 = new DBCPoolImpl();
      dBCPoolImpl0.setMaxLimit(744);
      assertEquals("'null' pool statistics: 0 actives + 0 idles = 0 total connections", dBCPoolImpl0.dumpPoolStatistics());
  }

  @Test
  public void test1()  throws Throwable  {
      DBCPoolImpl dBCPoolImpl0 = new DBCPoolImpl();
      try {
        dBCPoolImpl0.internalInitialize();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      DBCPoolImpl dBCPoolImpl0 = new DBCPoolImpl();
      try {
        dBCPoolImpl0.getConnection();
        fail("Expecting exception: SQLException");
      } catch(SQLException e) {
        /*
         * Must set the ConnectionPoolDataSource through setDataSourceName or setConnectionPoolDataSource before calling getConnection.
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      DBCPoolImpl dBCPoolImpl0 = new DBCPoolImpl();
      dBCPoolImpl0.setMinLimit(338);
      assertEquals("'null' pool statistics: 0 actives + 0 idles = 0 total connections", dBCPoolImpl0.dumpPoolStatistics());
  }

  @Test
  public void test4()  throws Throwable  {
      DBCPoolImpl dBCPoolImpl0 = new DBCPoolImpl();
      String string0 = dBCPoolImpl0.dumpPoolStatistics();
      assertEquals("'null' pool statistics: 0 actives + 0 idles = 0 total connections", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      DBCPoolImpl dBCPoolImpl0 = new DBCPoolImpl();
      try {
        dBCPoolImpl0.getInternalConnection("[ENV] Security prevented reading system property ", "[ENV] Security prevented reading system property ");
        fail("Expecting exception: SQLException");
      } catch(SQLException e) {
        /*
         * Must set the ConnectionPoolDataSource through setDataSourceName or setConnectionPoolDataSource before calling getConnection.
         */
      }
  }
}
