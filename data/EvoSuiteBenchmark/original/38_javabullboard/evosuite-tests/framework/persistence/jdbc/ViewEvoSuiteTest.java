/*
 * This file was automatically generated by EvoSuite
 */

package framework.persistence.jdbc;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import framework.persistence.jdbc.View;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ViewEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      View view0 = new View();
      assertNotNull(view0);
      
      try {
        view0.getAsDbCollection((Object) "java.util.HashMap");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      View view0 = new View();
      assertNotNull(view0);
      
      String string0 = view0.toString();
      assertNotNull(string0);
      assertEquals("{startIndex=0, sqlQuery=null, targetClassName=java.util.HashMap, packageName=null, class=class framework.persistence.jdbc.View, attributesSize=0, bindVariables=null, version=null, timestamp=0, rowsPerPage=10, rowCountMethod=java, name=null, retrieveRowCount=false, attributes={}, fullName=null, parameters=null, tokenValues=null, comment=null, maxFetchSize=0}", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      View view0 = new View();
      assertNotNull(view0);
      
      view0.setRetrieveRowCount("&apos;");
      assertEquals("{startIndex=0, sqlQuery=null, targetClassName=java.util.HashMap, packageName=null, class=class framework.persistence.jdbc.View, attributesSize=0, bindVariables=null, version=null, timestamp=0, rowsPerPage=10, rowCountMethod=java, name=null, retrieveRowCount=false, attributes={}, fullName=null, parameters=null, tokenValues=null, comment=null, maxFetchSize=0}", view0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      View view0 = new View();
      assertNotNull(view0);
      
      view0.setMaxFetchSize(1);
      assertEquals(1, view0.getMaxFetchSize());
      assertEquals(10, view0.getRowsPerPage());
  }

  @Test
  public void test4()  throws Throwable  {
      View view0 = new View();
      assertNotNull(view0);
      
      try {
        view0.getAsDbCollection();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      View view0 = new View();
      assertNotNull(view0);
      
      view0.reset();
      assertEquals("{startIndex=0, sqlQuery=null, targetClassName=java.util.HashMap, packageName=null, class=class framework.persistence.jdbc.View, attributesSize=0, bindVariables=null, version=null, timestamp=0, rowsPerPage=10, rowCountMethod=java, name=null, retrieveRowCount=false, attributes={}, fullName=null, parameters=null, tokenValues=null, comment=null, maxFetchSize=0}", view0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      View view0 = new View();
      assertNotNull(view0);
      
      try {
        view0.populate((Object) view0);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * Connection is null!
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      View view0 = new View();
      assertNotNull(view0);
      
      view0.addParameterOrderByDescending((String) null);
      assertEquals("{startIndex=0, sqlQuery=null, targetClassName=java.util.HashMap, packageName=null, class=class framework.persistence.jdbc.View, attributesSize=0, bindVariables=null, version=null, timestamp=0, rowsPerPage=10, rowCountMethod=java, name=null, retrieveRowCount=false, attributes={}, fullName=null, parameters=[{name=null, value=DESC, columnName=null, class=class framework.util.jdbc.Parameter, nextValue=null, operator=ORDER BY}], tokenValues=null, comment=null, maxFetchSize=0}", view0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      View view0 = new View();
      assertNotNull(view0);
      
      view0.setMaxFetchSize("&apos;");
      assertEquals(100, view0.getMaxFetchSize());
      assertEquals(0, view0.getStartIndex());
  }

  @Test
  public void test9()  throws Throwable  {
      View view0 = new View();
      assertNotNull(view0);
      
      try {
        view0.getCollection();
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * Connection is null!
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      View view0 = new View();
      assertNotNull(view0);
      
      view0.addParameter("Could not instantiate Log '", "Could not instantiate Log '", (Object) null, (Object) null);
      View view1 = (View)view0.clone();
      assertEquals("{startIndex=0, sqlQuery=null, targetClassName=java.util.HashMap, packageName=null, class=class framework.persistence.jdbc.View, attributesSize=0, bindVariables=null, version=null, timestamp=0, rowsPerPage=10, rowCountMethod=java, name=null, retrieveRowCount=false, attributes={}, fullName=null, parameters=[{name=Could not instantiate Log ', value=null, columnName=null, class=class framework.util.jdbc.Parameter, nextValue=null, operator=Could not instantiate Log '}], tokenValues=null, comment=null, maxFetchSize=0}", view0.toString());
      
      view0.addParameter((String) null, (String) null, (Object) view1);
      assertEquals(10, view1.getRowsPerPage());
  }

  @Test
  public void test11()  throws Throwable  {
      View view0 = new View();
      assertNotNull(view0);
      
      view0.setRetrieveRowCount(false);
      assertEquals("{startIndex=0, sqlQuery=null, targetClassName=java.util.HashMap, packageName=null, class=class framework.persistence.jdbc.View, attributesSize=0, bindVariables=null, version=null, timestamp=0, rowsPerPage=10, rowCountMethod=java, name=null, retrieveRowCount=false, attributes={}, fullName=null, parameters=null, tokenValues=null, comment=null, maxFetchSize=0}", view0.toString());
  }

  @Test
  public void test12()  throws Throwable  {
      View view0 = new View();
      assertNotNull(view0);
      assertEquals("{startIndex=0, sqlQuery=null, targetClassName=java.util.HashMap, packageName=null, class=class framework.persistence.jdbc.View, attributesSize=0, bindVariables=null, version=null, timestamp=0, rowsPerPage=10, rowCountMethod=java, name=null, retrieveRowCount=false, attributes={}, fullName=null, parameters=null, tokenValues=null, comment=null, maxFetchSize=0}", view0.toString());
      
      view0.setStartIndex(1);
      assertEquals("{startIndex=1, sqlQuery=null, targetClassName=java.util.HashMap, packageName=null, class=class framework.persistence.jdbc.View, attributesSize=0, bindVariables=null, version=null, timestamp=0, rowsPerPage=10, rowCountMethod=java, name=null, retrieveRowCount=false, attributes={}, fullName=null, parameters=null, tokenValues=null, comment=null, maxFetchSize=0}", view0.toString());
      assertEquals(1, view0.getStartIndex());
  }

  @Test
  public void test13()  throws Throwable  {
      View view0 = new View();
      assertNotNull(view0);
      
      try {
        view0.getValueListHandler();
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * Connection is null!
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      View view0 = new View();
      assertNotNull(view0);
      
      try {
        view0.getAsDbCollection((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test15()  throws Throwable  {
      View view0 = new View();
      assertNotNull(view0);
      
      view0.setRowsPerPage("{startIndex=1, sqlQuery=null, targetClassName=java.util.HashMap, packageName=null, class=class framework.persistence.jdbc.View, attributesSize=0, bindVariables=null, version=null, timestamp=0, rowsPerPage=10, rowCountMethod=java, name=null, retrieveRowCount=false, attributes={}, fullName=null, parameters=[{name=Could not instantiate Log ', value=null, columnName=null, class=class framework.util.jdbc.Parameter, nextValue=null, operator=Could not instantiate Log '}, {name=null, value={startIndex=0, sqlQuery=null, targetClassName=java.util.HashMap, packageName=null, class=class framework.persistence.jdbc.View, attributesSize=0, bindVariables=null, version=null, timestamp=0, rowsPerPage=10, rowCountMethod=java, name=null, retrieveRowCount=false, attributes={}, fullName=null, parameters=[{name=null, value=DESC, columnName=null, class=class framework.util.jdbc.Parameter, nextValue=null, operator=ORDER BY}], tokenValues=null, comment=null, maxFetchSize=0}, columnName=null, class=class framework.util.jdbc.Parameter, nextValue=null, operator=null}], tokenValues=null, comment=null, maxFetchSize=0}");
      assertEquals("{startIndex=0, sqlQuery=null, targetClassName=java.util.HashMap, packageName=null, class=class framework.persistence.jdbc.View, attributesSize=0, bindVariables=null, version=null, timestamp=0, rowsPerPage=10, rowCountMethod=java, name=null, retrieveRowCount=false, attributes={}, fullName=null, parameters=null, tokenValues=null, comment=null, maxFetchSize=0}", view0.toString());
  }

  @Test
  public void test16()  throws Throwable  {
      View view0 = new View();
      assertNotNull(view0);
      
      view0.addParameterOrderByAscending("q*59fP[zdrIX/vB\"mS");
      assertEquals("{startIndex=0, sqlQuery=null, targetClassName=java.util.HashMap, packageName=null, class=class framework.persistence.jdbc.View, attributesSize=0, bindVariables=null, version=null, timestamp=0, rowsPerPage=10, rowCountMethod=java, name=null, retrieveRowCount=false, attributes={}, fullName=null, parameters=[{name=q*59fP[zdrIX/vB\"mS, value=ASC, columnName=null, class=class framework.util.jdbc.Parameter, nextValue=null, operator=ORDER BY}], tokenValues=null, comment=null, maxFetchSize=0}", view0.toString());
  }

  @Test
  public void test17()  throws Throwable  {
      View view0 = new View();
      assertNotNull(view0);
      
      view0.setRowCountMethod("");
      assertEquals("{startIndex=0, sqlQuery=null, targetClassName=java.util.HashMap, packageName=null, class=class framework.persistence.jdbc.View, attributesSize=0, bindVariables=null, version=null, timestamp=0, rowsPerPage=10, rowCountMethod=, name=null, retrieveRowCount=false, attributes={}, fullName=null, parameters=null, tokenValues=null, comment=null, maxFetchSize=0}", view0.toString());
      assertEquals(0, view0.getStartIndex());
  }

  @Test
  public void test18()  throws Throwable  {
      View view0 = new View();
      assertNotNull(view0);
      
      view0.setRowsPerPage(10);
      assertEquals("{startIndex=0, sqlQuery=null, targetClassName=java.util.HashMap, packageName=null, class=class framework.persistence.jdbc.View, attributesSize=0, bindVariables=null, version=null, timestamp=0, rowsPerPage=10, rowCountMethod=java, name=null, retrieveRowCount=false, attributes={}, fullName=null, parameters=null, tokenValues=null, comment=null, maxFetchSize=0}", view0.toString());
  }

  @Test
  public void test19()  throws Throwable  {
      View view0 = new View();
      assertNotNull(view0);
      
      View view1 = (View)view0.clone();
      view0.addParameter((String) null, (String) null, (Object) view1);
      assertEquals("{startIndex=0, sqlQuery=null, targetClassName=java.util.HashMap, packageName=null, class=class framework.persistence.jdbc.View, attributesSize=0, bindVariables=null, version=null, timestamp=0, rowsPerPage=10, rowCountMethod=java, name=null, retrieveRowCount=false, attributes={}, fullName=null, parameters=[{name=null, value={startIndex=0, sqlQuery=null, targetClassName=java.util.HashMap, packageName=null, class=class framework.persistence.jdbc.View, attributesSize=0, bindVariables=null, version=null, timestamp=0, rowsPerPage=10, rowCountMethod=java, name=null, retrieveRowCount=false, attributes={}, fullName=null, parameters=null, tokenValues=null, comment=null, maxFetchSize=0}, columnName=null, class=class framework.util.jdbc.Parameter, nextValue=null, operator=null}], tokenValues=null, comment=null, maxFetchSize=0}", view0.toString());
  }
}
