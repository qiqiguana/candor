/*
 * This file was automatically generated by EvoSuite
 */

package framework.persistence.jdbc;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import framework.persistence.jdbc.Module;
import java.lang.reflect.InvocationTargetException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ModuleEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      Module module0 = new Module();
      try {
        module0.getViewFromQuery("default", "default");
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * Module is not connected. Call myModule.connect().
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      Module module0 = new Module();
      String string0 = module0.getPoolName();
      assertNotNull(string0);
      assertEquals("default", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      Module module0 = new Module();
      try {
        module0.commit();
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * Module is not connected. Call myModule.connect().
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          Module module0 = new Module();
          try {
            module0.findView("PEx");
            fail("Expecting exception: InvocationTargetException");
          } catch(InvocationTargetException e) {
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          Module module0 = new Module("LF)r=2@");
          try {
            module0.findEntity("LF)r=2@");
            fail("Expecting exception: InvocationTargetException");
          } catch(InvocationTargetException e) {
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          Module module0 = new Module();
          try {
            module0.connect();
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.net.SocketPermission smdev01 resolve)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkConnect(SecurityManager.java:1031)
             * java.net.InetAddress.getAllByName0(InetAddress.java:1145)
             * java.net.InetAddress.getAllByName(InetAddress.java:1083)
             * java.net.InetAddress.getAllByName(InetAddress.java:1019)
             * java.net.InetAddress.getByName(InetAddress.java:969)
             * java.net.InetSocketAddress.<init>(InetSocketAddress.java:124)
             * java.net.Socket.<init>(Socket.java:189)
             * oracle.net.nt.TcpNTAdapter.connect(Unknown Source)
             * oracle.net.nt.ConnOption.connect(Unknown Source)
             * oracle.net.nt.ConnStrategy.execute(Unknown Source)
             * oracle.net.resolver.AddrResolution.resolveAndExecute(Unknown Source)
             * oracle.net.ns.NSProtocol.establishConnection(Unknown Source)
             * oracle.net.ns.NSProtocol.connect(Unknown Source)
             * oracle.jdbc.ttc7.TTC7Protocol.connect(TTC7Protocol.java:1689)
             * oracle.jdbc.ttc7.TTC7Protocol.logon(TTC7Protocol.java:215)
             * oracle.jdbc.driver.OracleConnection.<init>(OracleConnection.java:360)
             * oracle.jdbc.driver.OracleDriver.getConnectionInstance(OracleDriver.java:521)
             * oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:325)
             * java.sql.DriverManager.getConnection(DriverManager.java:582)
             * java.sql.DriverManager.getConnection(DriverManager.java:154)
             * oracle.jdbc.pool.OracleDataSource.getConnection(OracleDataSource.java:171)
             * oracle.jdbc.pool.OracleConnectionPoolDataSource.getPhysicalConnection(OracleConnectionPoolDataSource.java:149)
             * oracle.jdbc.pool.OracleConnectionPoolDataSource.getPooledConnection(OracleConnectionPoolDataSource.java:95)
             * oracle.jdbc.pool.OracleConnectionPoolDataSource.getPooledConnection(OracleConnectionPoolDataSource.java:63)
             * oracle.jdbc.pool.OracleConnectionCacheImpl.getNewPoolOrXAConnection(OracleConnectionCacheImpl.java:547)
             * oracle.jdbc.pool.OracleConnectionCacheImpl.getPooledConnection(OracleConnectionCacheImpl.java:404)
             * oracle.jdbc.pool.OracleConnectionCacheImpl.getConnection(OracleConnectionCacheImpl.java:298)
             * oracle.jdbc.pool.OracleConnectionCacheImpl.getConnection(OracleConnectionCacheImpl.java:268)
             * framework.persistence.jdbc.pool.OraclePoolImpl.getInternalConnection(OraclePoolImpl.java:83)
             * framework.persistence.jdbc.pool.JDBCPool.getConnection(JDBCPool.java:179)
             * framework.persistence.jdbc.Module.connect(Module.java:122)
             * framework.persistence.jdbc.Module.connect(Module.java:111)
             * sun.reflect.GeneratedMethodAccessor23.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test6()  throws Throwable  {
      Module module0 = new Module();
      try {
        module0.rollback();
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * Module is not connected. Call myModule.connect().
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      Module module0 = new Module();
      module0.initalize();
      assertEquals("default", module0.getPoolName());
  }

  @Test
  public void test8()  throws Throwable  {
      Module module0 = new Module("");
      module0.disconnect();
      assertEquals("default", module0.getPoolName());
  }
}
