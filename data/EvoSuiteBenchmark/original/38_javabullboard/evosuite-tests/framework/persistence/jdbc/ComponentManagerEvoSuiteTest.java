/*
 * This file was automatically generated by EvoSuite
 */

package framework.persistence.jdbc;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import framework.persistence.jdbc.Attribute;
import framework.persistence.jdbc.Component;
import framework.persistence.jdbc.EntityManager;
import framework.persistence.jdbc.View;
import framework.persistence.jdbc.ViewManager;
import java.lang.reflect.InvocationTargetException;
import java.net.URL;
import java.sql.Connection;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.xalan.transformer.TransformerIdentityImpl;
import org.apache.xerces.dom.DocumentImpl;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ComponentManagerEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          ViewManager viewManager0 = ViewManager.getInstance();
          try {
            viewManager0.dump((String) null, (String) null);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission ./src/test/java write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.mkdir(File.java:1155)
             * java.io.File.mkdirs(File.java:1184)
             * framework.util.FileUtils.createDirectory(FileUtils.java:195)
             * framework.persistence.jdbc.ComponentManager.getRootDirectory(ComponentManager.java:108)
             * framework.persistence.jdbc.ComponentManager.getFileDirectory(ComponentManager.java:669)
             * framework.persistence.jdbc.ComponentManager.read(ComponentManager.java:266)
             * framework.persistence.jdbc.ComponentManager.dump(ComponentManager.java:279)
             * sun.reflect.GeneratedMethodAccessor106.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          EntityManager entityManager0 = EntityManager.getInstance();
          try {
            entityManager0.listFiles("./web/WEB-INF/test");
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission ./web/WEB-INF/test write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.mkdir(File.java:1155)
             * java.io.File.mkdirs(File.java:1184)
             * framework.util.FileUtils.createDirectory(FileUtils.java:195)
             * framework.persistence.jdbc.ComponentManager.getRootDirectory(ComponentManager.java:108)
             * framework.persistence.jdbc.ComponentManager.listFiles(ComponentManager.java:183)
             * framework.persistence.jdbc.ComponentManager.listFiles(ComponentManager.java:169)
             * sun.reflect.GeneratedMethodAccessor109.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
      ViewManager viewManager0 = ViewManager.getInstance();
      URL uRL0 = viewManager0.getRulesFileURL();
      assertNotNull(uRL0);
      assertEquals("/mnt/fastdata/ac1gf/SF110/dist/38_javabullboard/./src/main/resources/digester/rules.view.xml", uRL0.getFile());
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          EntityManager entityManager0 = EntityManager.getInstance();
          try {
            entityManager0.find("orde|ed", "orde|ed");
            fail("Expecting exception: InvocationTargetException");
          } catch(InvocationTargetException e) {
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
      ViewManager viewManager0 = ViewManager.getInstance();
      try {
        viewManager0.getViewFromQuery((Connection) null, "", (String) null, (String) null, "connpool_nowait", "");
        fail("Expecting exception: InvocationTargetException");
      } catch(InvocationTargetException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      EntityManager entityManager0 = EntityManager.getInstance();
      // Undeclared exception!
      try {
        entityManager0.validateAttributeNameUniqueness((Object) "encoding");
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * java.lang.String cannot be cast to framework.persistence.jdbc.Attribute
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      EntityManager entityManager0 = EntityManager.getInstance();
      try {
        entityManager0.listFiles("exml", "exml");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      ViewManager viewManager0 = ViewManager.getInstance();
      try {
        viewManager0.listFiles("mf", "");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      ViewManager viewManager0 = ViewManager.getInstance();
      View view0 = (View)viewManager0.getNew();
      assertNotNull(view0);
      
      DocumentImpl documentImpl0 = (DocumentImpl)viewManager0.convertDOM((Component) view0);
      assertNotNull(documentImpl0);
      assertEquals("{startIndex=0, sqlQuery=null, targetClassName=java.util.HashMap, packageName=null, class=class framework.persistence.jdbc.View, attributesSize=0, bindVariables=null, version=null, timestamp=0, rowsPerPage=10, rowCountMethod=java, name=null, retrieveRowCount=false, attributes={}, fullName=null, parameters=null, tokenValues=null, comment=null, maxFetchSize=0}", view0.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      ViewManager viewManager0 = ViewManager.getInstance();
      boolean boolean0 = viewManager0.isValidTargetClassName("MrdV;|U@-#U* -)J", (Map) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      ViewManager viewManager0 = ViewManager.getInstance();
      TransformerIdentityImpl transformerIdentityImpl0 = new TransformerIdentityImpl();
      Properties properties0 = transformerIdentityImpl0.getOutputProperties();
      viewManager0.isValidFullName((String) null, "&#823", (Map) properties0);
      assertEquals(false, properties0.isEmpty());
      assertEquals(2, properties0.size());
  }

  @Test
  public void test11()  throws Throwable  {
      ViewManager viewManager0 = ViewManager.getInstance();
      View view0 = (View)viewManager0.getNew();
      assertNotNull(view0);
      
      boolean boolean0 = viewManager0.isValid((Component) view0, (Map) null);
      assertEquals(false, boolean0);
      assertEquals("{startIndex=0, sqlQuery=null, targetClassName=java.util.HashMap, packageName=null, class=class framework.persistence.jdbc.View, attributesSize=0, bindVariables=null, version=null, timestamp=0, rowsPerPage=10, rowCountMethod=java, name=null, retrieveRowCount=false, attributes={}, fullName=null, parameters=null, tokenValues=null, comment=null, maxFetchSize=0}", view0.toString());
  }

  @Test
  public void test12()  throws Throwable  {
      ViewManager viewManager0 = ViewManager.getInstance();
      boolean boolean0 = viewManager0.isValidFullName("P", "P", (Map) null);
      assertEquals(true, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      ViewManager viewManager0 = ViewManager.getInstance();
      boolean boolean0 = viewManager0.isValidTargetClassName("", (Map) null);
      assertEquals(true, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      EntityManager entityManager0 = EntityManager.getInstance();
      boolean boolean0 = entityManager0.isValidTargetClassName("oracle.sql.REF", (Map) null);
      assertEquals(true, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      ViewManager viewManager0 = ViewManager.getInstance();
      Attribute[] attributeArray0 = new Attribute[2];
      Attribute attribute0 = new Attribute();
      attributeArray0[0] = attribute0;
      attributeArray0[1] = attributeArray0[0];
      boolean boolean0 = viewManager0.isValidAttributes(attributeArray0, (Map) null);
      assertEquals(false, boolean0);
  }
}
