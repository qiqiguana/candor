/*
 * This file was automatically generated by EvoSuite
 */

package framework;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import framework.ApplicationParameters;
import java.util.List;
import java.util.Locale;
import org.apache.html.dom.HTMLDocumentImpl;
import org.apache.xalan.templates.ElemUnknown;
import org.apache.xalan.templates.ElemUse;
import org.apache.xerces.dom.DeferredDocumentImpl;
import org.junit.BeforeClass;
import org.w3c.dom.Node;

@RunWith(EvoSuiteRunner.class)
public class ApplicationParametersEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      List<Object> list0 = null;
      try {
        list0 = ApplicationParameters.findNodeValueList("LYRVFz&");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      try {
        ApplicationParameters.getAsMandatoryBooleanType("MSG_REFERENCE_TO_EXTERNALLY_DECLARED_ENTITY_WHEN_STANDALONE");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      boolean boolean0 = ApplicationParameters.getAsBooleanType("LYRVFz&", false);
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      try {
        ApplicationParameters.getNode("?3H}9n=hFklg");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      Locale locale0 = ApplicationParameters.getDefaultLocale();
      assertEquals("KR", locale0.getCountry());
  }

  @Test
  public void test5()  throws Throwable  {
      try {
        ApplicationParameters.getAsMandatoryLongType("EOEJ|G||");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      String string0 = ApplicationParameters.twoString();
      assertEquals("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<applicationParameters>\n  <framework>\n    <mandatory>\n      <application>\n        <name>JavaBB</name>\n        <version>0.9.0</version>\n        <baseDirectory>.</baseDirectory>\n        <webPath>/web</webPath>\n        <sourcePath>src</sourcePath>\n        <url>http://localhost/javabb</url>\n        <runMode>development</runMode>\n      </application>\n    </mandatory>\n    <base>\n      <valueListHandler>\n        <defaultRowsPerPage>10</defaultRowsPerPage>\n        <defaultRetrieveRowCount>false</defaultRetrieveRowCount>\n        <defaultRowCountMethod>java</defaultRowCountMethod>\n      </valueListHandler>\n    </base>\n    <cache>\n      <cachemanagertest>\n        <cacheSizeLimit>3</cacheSizeLimit>\n        <timeToLive>-1</timeToLive>\n        <idleTimeout>10000</idleTimeout>\n        <timerInterval>1000</timerInterval>\n      </cachemanagertest>\n    </cache>\n    <system>\n      <setProperty>\n        <name>proxySet</name>\n        <value>false</value>\n      </setProperty>\n      <setProperty>\n        <name>proxyHost</name>\n        <value/>\n      </setProperty>\n      <setProperty>\n        <name>proxyPort</name>\n        <value/>\n      </setProperty>\n    </system>\n    <util>\n      <string>\n        <keyword>\n          <path>src/main/resources/keyword</path>\n          <fileExtension>kw</fileExtension>\n        </keyword>\n      </string>\n      <convert>\n        <defaultDatePattern>yyyy-MM-dd</defaultDatePattern>\n        <defaultTimePattern>hh:mm:ss</defaultTimePattern>\n        <defaultLocale>\n          <language/>\n          <country/>\n        </defaultLocale>\n      </convert>\n      <mail>\n        <activated>false</activated>\n        <smtp>\n          <server/>\n          <user/>\n        </smtp>\n      </mail>\n    </util>\n    <COMMENTS> \n   Pool type: oracle / dbcp (default)\n   For best performance with Oracle database, choose Oracle pool type\n   else choose DataBase Common Pool\n   Small fetch sizes improve response times but the overall execution time deteriorates. \n   Large fetch sizes improve overall execution time but result in longer response times.\n  </COMMENTS>\n    <persistence>\n      <jdbc>\n        <COMMENTS> DEFAULT </COMMENTS>\n        <pool>\n          <default>\n            <databaseType>oracle</databaseType>\n            <className>framework.persistence.jdbc.pool.OraclePoolImpl</className>\n            <url>jdbc:oracle:thin:@smdev01:1535:DEVDB02</url>\n            <driver>oracle.jdbc.driver.OracleDriver</driver>\n            <username>SCOTT</username>\n            <password>TIGER</password>\n            <tuning>\n              <doValidation>false</doValidation>\n              <isAutocommit>false</isAutocommit>\n              <debugLevel>0</debugLevel>\n              <typeMap>\n                <name>91</name>\n                <value>java.sql.Date</value>\n              </typeMap>\n              <typeMap>\n                <name>DATE</name>\n                <value>java.sql.Date</value>\n              </typeMap>\n            </tuning>\n            <query>\n              <validation>select 1 from dual</validation>\n              <username>select sys_context('userenv', 'current_schema') current_user from dual</username>\n              <timestamp>select sysdate as current_timestamp from dual</timestamp>\n            </query>\n          </default>\n          <javabb>\n            <databaseType>mysql</databaseType>\n            <className>framework.persistence.jdbc.pool.DBCPoolImpl</className>\n            <url>jdbc:mysql://localhost:3306/javabb</url>\n            <driver>org.gjt.mm.mysql.Driver</driver>\n            <username>javabb</username>\n            <password>javabb</password>\n            <tuning>\n              <typeMap>\n                <name>LONG</name>\n                <value>java.math.BigDecimal</value>\n              </typeMap>\n              <typeMap>\n                <name>DECIMAL</name>\n                <value>java.math.BigDecimal</value>\n              </typeMap>\n            </tuning>\n            <query>\n              <validation>select current_user() as 'current_user'</validation>\n              <username>select current_user() as 'current_user'</username>\n              <timestamp>select current_timestamp() as 'current_timestamp'</timestamp>\n            </query>\n          </javabb>\n          <COMMENTS> ORACLE </COMMENTS>\n          <NRSP_F>\n            <databaseType>oracle</databaseType>\n            <url>jdbc:oracle:thin:@smdev01:1535:DEVDB02</url>\n            <driver>oracle.jdbc.driver.OracleDriver</driver>\n            <username>NRSP_F</username>\n            <password>NRSP_F</password>\n          </NRSP_F>\n          <NRSP_V>\n            <databaseType>oracle</databaseType>\n            <url>jdbc:oracle:thin:@smdev01:1535:DEVDB02</url>\n            <driver>oracle.jdbc.driver.OracleDriver</driver>\n            <username>NRSP_V</username>\n            <password>NRSP_V</password>\n          </NRSP_V>\n          <NRSP_R>\n            <name/>\n            <databaseType>oracle</databaseType>\n            <url>jdbc:oracle:thin:@smdev01:1535:DEVDB02</url>\n            <driver>oracle.jdbc.driver.OracleDriver</driver>\n            <username>NRSP_R</username>\n            <password>NRSP_R</password>\n          </NRSP_R>\n        </pool>\n        <COMMENTS> MYSQL </COMMENTS>\n        <COMMENTS>pool>\n          <name>NRSP_F</name>\n          <databaseType>mysql</databaseType>\n          <type>dbcp</type>\n          <url>jdbc:mysql://localhost:3306/NRSP_F</url>\n          <driver>org.gjt.mm.mysql.Driver</driver>\n          <username>NRSP_F</username>\n          <password>NRSP_F</password>\n        </pool>\n  \n        <pool>\n          <name>NRSP_V</name>\n          <databaseType>mysql</databaseType>\n          <type>dbcp</type>\n          <url>jdbc:mysql://localhost:3306/NRSP_V</url>\n          <driver>org.gjt.mm.mysql.Driver</driver>\n          <username>NRSP_V</username>\n          <password>NRSP_V</password>\n        </pool>\n  \n        <pool>\n          <name>NRSP_R</name>\n          <databaseType>mysql</databaseType>\n          <type>dbcp</type>\n          <url>jdbc:mysql://localhost:3306/NRSP_R</url>\n          <driver>org.gjt.mm.mysql.Driver</driver>\n          <username>NRSP_R</username>\n          <password>NRSP_R</password>\n        </pool</COMMENTS>\n        <COMMENTS> VIEW </COMMENTS>\n        <view>\n          <defaultTargetClassName>java.util.HashMap</defaultTargetClassName>\n          <fileExtension>vxml</fileExtension>\n          <rulesFilePath>/src/main/resources/digester/rules.view.xml</rulesFilePath>\n          <repository>\n            <use>true</use>\n            <path>/src/test/java</path>\n          </repository>\n          <tuning>\n            <defaultMaxFetchSize>100</defaultMaxFetchSize>\n          </tuning>\n        </view>\n        <COMMENTS> ENTITY </COMMENTS>\n        <entity>\n          <defaultTargetClassName>java.util.HashMap</defaultTargetClassName>\n          <fileExtension>exml</fileExtension>\n          <rulesFilePath>/src/main/resources/digester/rules.entity.xml</rulesFilePath>\n          <repository>\n            <use>true</use>\n            <path>/web/WEB-INF/test</path>\n          </repository>\n        </entity>\n        <COMMENTS> TOOLS </COMMENTS>\n        <tools>\n          <dbcollection>\n            <valueColumnName>Value</valueColumnName>\n            <labelColumnName>Label</labelColumnName>\n            <cacheSize>10</cacheSize>\n            <rulesFilePath>/src/main/resources/digester/rules.dbCollection.xml</rulesFilePath>\n          </dbcollection>\n        </tools>\n      </jdbc>\n    </persistence>\n  </framework>\n  <application/>\n</applicationParameters>\n", string0);
      assertNotNull(string0);
  }

  @Test
  public void test7()  throws Throwable  {
      try {
        ApplicationParameters.getAsMandatoryInt("NameRequirkYInReferen;e");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      // Undeclared exception!
      try {
        ApplicationParameters.reload();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * load: Error while loading parameter file './web': ./web could not be found!
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      long long0 = ApplicationParameters.getAsLongType("EOEJrG|:#", (-552L));
      assertEquals((-552L), long0);
  }

  @Test
  public void test10()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = null;
      try {
        deferredDocumentImpl0 = (DeferredDocumentImpl)ApplicationParameters.getNode((Node) null, "interation");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = ApplicationParameters.getAsInt("+^6$k+O3wgTdRLYa", (-2045));
      assertEquals((-2045), int0);
  }

  @Test
  public void test12()  throws Throwable  {
      boolean boolean0 = ApplicationParameters.isDevelopmentMode();
      assertEquals(true, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      boolean boolean0 = ApplicationParameters.isProductionMode();
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      try {
        ApplicationParameters.set("MxCl_Cz,", "MxCl_Cz,");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test15()  throws Throwable  {
      ApplicationParameters applicationParameters0 = new ApplicationParameters();
      assertEquals(false, applicationParameters0.isIntegrationMode());
  }

  @Test
  public void test16()  throws Throwable  {
      boolean boolean0 = ApplicationParameters.isIntegrationMode();
      assertEquals(false, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      try {
        ApplicationParameters.findNodeList((String) null);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * findNodes called with empty parameterName
         */
      }
  }

  @Test
  public void test18()  throws Throwable  {
      ElemUnknown elemUnknown0 = new ElemUnknown();
      ElemUnknown elemUnknown1 = (ElemUnknown)ApplicationParameters.getWhatYouCan("deyloent", "deyloent", (Object) elemUnknown0);
      assertEquals(false, elemUnknown1.isCompiledTemplate());
  }

  @Test
  public void test19()  throws Throwable  {
      try {
        ApplicationParameters.getWhatYouCan("integration", "integration", (Object) null);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * Must provide a default value
         */
      }
  }

  @Test
  public void test20()  throws Throwable  {
      ElemUse elemUse0 = new ElemUse();
      try {
        ApplicationParameters.findNodeList((Node) elemUse0, "interation");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * ElemTemplateElement \uC624\uB958: \uD568\uC218\uAC00 \uC9C0\uC6D0\uB418\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4.
         */
      }
  }

  @Test
  public void test21()  throws Throwable  {
      ElemUse elemUse0 = new ElemUse();
      ElemUse elemUse1 = (ElemUse)ApplicationParameters.getWhatYouCan("", "", (Object) elemUse0);
      assertEquals(-1, elemUse1.getUid());
  }

  @Test
  public void test22()  throws Throwable  {
      try {
        ApplicationParameters.findChildNodesName("*");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test23()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      String string0 = ApplicationParameters.getValue((Node) hTMLDocumentImpl0, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }
}
