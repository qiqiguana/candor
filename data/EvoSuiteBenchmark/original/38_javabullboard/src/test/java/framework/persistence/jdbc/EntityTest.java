package framework.persistence.jdbc;

import junit.framework.TestCase;
// JUnitDoclet begin import
import framework.persistence.jdbc.Entity;
// JUnitDoclet end import

/**
* Generated by JUnitDoclet, a tool provided by
* ObjectFab GmbH under LGPL.
* Please see www.junitdoclet.org, www.gnu.org
* and www.objectfab.de for informations about
* the tool, the licence and the authors.
*/


public class EntityTest
// JUnitDoclet begin extends_implements
extends TestCase
// JUnitDoclet end extends_implements
{
  // JUnitDoclet begin class
  framework.persistence.jdbc.Entity entity = null;
  // JUnitDoclet end class
  
  public EntityTest(String name) {
    // JUnitDoclet begin method EntityTest
    super(name);
    // JUnitDoclet end method EntityTest
  }
  
  public framework.persistence.jdbc.Entity createInstance() throws Exception {
    // JUnitDoclet begin method testcase.createInstance
    return new framework.persistence.jdbc.Entity();
    // JUnitDoclet end method testcase.createInstance
  }
  
  protected void setUp() throws Exception {
    // JUnitDoclet begin method testcase.setUp
    super.setUp();
    entity = createInstance();
    // JUnitDoclet end method testcase.setUp
  }
  
  protected void tearDown() throws Exception {
    // JUnitDoclet begin method testcase.tearDown
    entity = null;
    super.tearDown();
    // JUnitDoclet end method testcase.tearDown
  }
  
  public void testGetFullName() throws Exception {
    // JUnitDoclet begin method getFullName
    // JUnitDoclet end method getFullName
  }
  
  public void testSetGetObjectName() throws Exception {
    // JUnitDoclet begin method setObjectName getObjectName
    String[] tests = {new String(), null};
    
    for (int i = 0; i < tests.length; i++) {
      entity.setObjectName(tests[i]);
      assertEquals(tests[i], entity.getObjectName());
    }
    // JUnitDoclet end method setObjectName getObjectName
  }
  
  public void testAddAttribute() throws Exception {
    // JUnitDoclet begin method addAttribute
    // JUnitDoclet end method addAttribute
  }
  
  public void testRemoveAttribute() throws Exception {
    // JUnitDoclet begin method removeAttribute
    // JUnitDoclet end method removeAttribute
  }
  
  public void testSetGetPrimaryKeys() throws Exception {
    // JUnitDoclet begin method setPrimaryKeys getPrimaryKeys
    java.util.Collection[] tests = {new java.util.HashSet(), null};
    
    for (int i = 0; i < tests.length; i++) {
      entity.setPrimaryKeys(tests[i]);
      assertEquals(tests[i], entity.getPrimaryKeys());
    }
    // JUnitDoclet end method setPrimaryKeys getPrimaryKeys
  }
  
  public void testLoad() throws Exception {
    // JUnitDoclet begin method load
    // JUnitDoclet end method load
  }
  
  public void testCreate() throws Exception {
    // JUnitDoclet begin method create
    // JUnitDoclet end method create
  }
  
  public void testStore() throws Exception {
    // JUnitDoclet begin method store
    // JUnitDoclet end method store
  }
  
  public void testRemove() throws Exception {
    // JUnitDoclet begin method remove
    // JUnitDoclet end method remove
  }
  
  
  
  /**
  * JUnitDoclet moves marker to this method, if there is not match
  * for them in the regenerated code and if the marker is not empty.
  * This way, no test gets lost when regenerating after renaming.
  * Method testVault is supposed to be empty.
  */
  public void testVault() throws Exception {
    // JUnitDoclet begin method testcase.testVault
    // JUnitDoclet end method testcase.testVault
  }
  
  public static void main(String[] args) {
    // JUnitDoclet begin method testcase.main
    junit.textui.TestRunner.run(EntityTest.class);
    // JUnitDoclet end method testcase.main
  }
}
