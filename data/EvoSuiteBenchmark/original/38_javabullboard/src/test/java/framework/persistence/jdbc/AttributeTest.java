package framework.persistence.jdbc;

import junit.framework.TestCase;
// JUnitDoclet begin import
import framework.persistence.jdbc.Attribute;
// JUnitDoclet end import

/**
* Generated by JUnitDoclet, a tool provided by
* ObjectFab GmbH under LGPL.
* Please see www.junitdoclet.org, www.gnu.org
* and www.objectfab.de for informations about
* the tool, the licence and the authors.
*/


public class AttributeTest
// JUnitDoclet begin extends_implements
extends TestCase
// JUnitDoclet end extends_implements
{
  // JUnitDoclet begin class
  framework.persistence.jdbc.Attribute attribute = null;
  // JUnitDoclet end class
  
  public AttributeTest(String name) {
    // JUnitDoclet begin method AttributeTest
    super(name);
    // JUnitDoclet end method AttributeTest
  }
  
  public framework.persistence.jdbc.Attribute createInstance() throws Exception {
    // JUnitDoclet begin method testcase.createInstance
    return new framework.persistence.jdbc.Attribute();
    // JUnitDoclet end method testcase.createInstance
  }
  
  protected void setUp() throws Exception {
    // JUnitDoclet begin method testcase.setUp
    super.setUp();
    attribute = createInstance();
    // JUnitDoclet end method testcase.setUp
  }
  
  protected void tearDown() throws Exception {
    // JUnitDoclet begin method testcase.tearDown
    attribute = null;
    super.tearDown();
    // JUnitDoclet end method testcase.tearDown
  }
  
  public void testClone() throws Exception {
    // JUnitDoclet begin method clone
    // JUnitDoclet end method clone
  }
  
  public void testSetGetName() throws Exception {
    // JUnitDoclet begin method setName getName
    String[] tests = {new String(), null};
    
    for (int i = 0; i < tests.length; i++) {
      attribute.setName(tests[i]);
      assertEquals(tests[i], attribute.getName());
    }
    // JUnitDoclet end method setName getName
  }
  
  public void testSetGetColumnClassName() throws Exception {
    // JUnitDoclet begin method setColumnClassName getColumnClassName
    String[] tests = {new String(), null};
    
    for (int i = 0; i < tests.length; i++) {
      attribute.setColumnClassName(tests[i]);
      assertEquals(tests[i], attribute.getColumnClassName());
    }
    // JUnitDoclet end method setColumnClassName getColumnClassName
  }
  
  public void testSetGetColumnType() throws Exception {
    // JUnitDoclet begin method setColumnType getColumnType
    String[] tests = {new String(), null};
    
    for (int i = 0; i < tests.length; i++) {
      attribute.setColumnType(tests[i]);
      assertEquals(tests[i], attribute.getColumnType());
    }
    // JUnitDoclet end method setColumnType getColumnType
  }
  
  public void testSetGetColumnTypeName() throws Exception {
    // JUnitDoclet begin method setColumnTypeName getColumnTypeName
    String[] tests = {new String(), null};
    
    for (int i = 0; i < tests.length; i++) {
      attribute.setColumnTypeName(tests[i]);
      assertEquals(tests[i], attribute.getColumnTypeName());
    }
    // JUnitDoclet end method setColumnTypeName getColumnTypeName
  }
  
  public void testSetGetScale() throws Exception {
    // JUnitDoclet begin method setScale getScale
    String[] tests = {new String(), null};
    
    for (int i = 0; i < tests.length; i++) {
      attribute.setScale(tests[i]);
      assertEquals(tests[i], attribute.getScale());
    }
    // JUnitDoclet end method setScale getScale
  }
  
  public void testSetGetPrecision() throws Exception {
    // JUnitDoclet begin method setPrecision getPrecision
    String[] tests = {new String(), null};
    
    for (int i = 0; i < tests.length; i++) {
      attribute.setPrecision(tests[i]);
      assertEquals(tests[i], attribute.getPrecision());
    }
    // JUnitDoclet end method setPrecision getPrecision
  }
  
  public void testSetGetColumnName() throws Exception {
    // JUnitDoclet begin method setColumnName getColumnName
    String[] tests = {new String(), null};
    
    for (int i = 0; i < tests.length; i++) {
      attribute.setColumnName(tests[i]);
      assertEquals(tests[i], attribute.getColumnName());
    }
    // JUnitDoclet end method setColumnName getColumnName
  }
  
  public void testSetIsNullable() throws Exception {
    // JUnitDoclet begin method setNullable isNullable
    String[] tests = {new String(), null};
    
    for (int i = 0; i < tests.length; i++) {
      attribute.setNullable(tests[i]);
      assertEquals(tests[i], attribute.isNullable());
    }
    // JUnitDoclet end method setNullable isNullable
  }
  
  public void testSetNotNull() throws Exception {
    // JUnitDoclet begin method setNotNull
    // JUnitDoclet end method setNotNull
  }
  
  public void testSetIsPrimaryKey() throws Exception {
    // JUnitDoclet begin method setPrimaryKey isPrimaryKey
    String[] tests = {new String(), null};
    
    for (int i = 0; i < tests.length; i++) {
      attribute.setPrimaryKey(tests[i]);
      assertEquals(tests[i], attribute.isPrimaryKey());
    }
    // JUnitDoclet end method setPrimaryKey isPrimaryKey
  }
  
  public void testSetGetKeySeq() throws Exception {
    // JUnitDoclet begin method setKeySeq getKeySeq
    String[] tests = {new String(), null};
    
    for (int i = 0; i < tests.length; i++) {
      attribute.setKeySeq(tests[i]);
      assertEquals(tests[i], attribute.getKeySeq());
    }
    // JUnitDoclet end method setKeySeq getKeySeq
  }
  
  
  
  /**
  * JUnitDoclet moves marker to this method, if there is not match
  * for them in the regenerated code and if the marker is not empty.
  * This way, no test gets lost when regenerating after renaming.
  * Method testVault is supposed to be empty.
  */
  public void testVault() throws Exception {
    // JUnitDoclet begin method testcase.testVault
    // JUnitDoclet end method testcase.testVault
  }
  
  public static void main(String[] args) {
    // JUnitDoclet begin method testcase.main
    junit.textui.TestRunner.run(AttributeTest.class);
    // JUnitDoclet end method testcase.main
  }
}
