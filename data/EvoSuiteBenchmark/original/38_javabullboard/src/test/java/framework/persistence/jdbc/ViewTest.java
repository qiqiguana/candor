package framework.persistence.jdbc;

import junit.framework.TestCase;
// JUnitDoclet begin import
import framework.persistence.jdbc.View;
// JUnitDoclet end import

/**
* Generated by JUnitDoclet, a tool provided by
* ObjectFab GmbH under LGPL.
* Please see www.junitdoclet.org, www.gnu.org
* and www.objectfab.de for informations about
* the tool, the licence and the authors.
*/


public class ViewTest
// JUnitDoclet begin extends_implements
extends TestCase
// JUnitDoclet end extends_implements
{
  // JUnitDoclet begin class
  framework.persistence.jdbc.View view = null;
  // JUnitDoclet end class
  
  public ViewTest(String name) {
    // JUnitDoclet begin method ViewTest
    super(name);
    // JUnitDoclet end method ViewTest
  }
  
  public framework.persistence.jdbc.View createInstance() throws Exception {
    // JUnitDoclet begin method testcase.createInstance
    return new framework.persistence.jdbc.View();
    // JUnitDoclet end method testcase.createInstance
  }
  
  protected void setUp() throws Exception {
    // JUnitDoclet begin method testcase.setUp
    super.setUp();
    view = createInstance();
    // JUnitDoclet end method testcase.setUp
  }
  
  protected void tearDown() throws Exception {
    // JUnitDoclet begin method testcase.tearDown
    view = null;
    super.tearDown();
    // JUnitDoclet end method testcase.tearDown
  }
  
  public void testReset() throws Exception {
    // JUnitDoclet begin method reset
    // JUnitDoclet end method reset
  }
  
  public void testGetFullName() throws Exception {
    // JUnitDoclet begin method getFullName
    // JUnitDoclet end method getFullName
  }
  
  public void testSetGetTokenValues() throws Exception {
    // JUnitDoclet begin method setTokenValues getTokenValues
    java.util.Collection[] tests = {new java.util.HashSet(), null};
    
    for (int i = 0; i < tests.length; i++) {
      view.setTokenValues(tests[i]);
      assertEquals(tests[i], view.getTokenValues());
    }
    // JUnitDoclet end method setTokenValues getTokenValues
  }
  
  public void testSetGetBindVariables() throws Exception {
    // JUnitDoclet begin method setBindVariables getBindVariables
    Object[] tests = {new Object(), null};
    
    for (int i = 0; i < tests.length; i++) {
      view.setBindVariables(tests[i]);
      assertEquals(tests[i], view.getBindVariables());
    }
    // JUnitDoclet end method setBindVariables getBindVariables
  }
  
  public void testAddParameter() throws Exception {
    // JUnitDoclet begin method addParameter
    // JUnitDoclet end method addParameter
  }
  
  public void testAddParameterOrderByAscending() throws Exception {
    // JUnitDoclet begin method addParameterOrderByAscending
    // JUnitDoclet end method addParameterOrderByAscending
  }
  
  public void testAddParameterOrderByDescending() throws Exception {
    // JUnitDoclet begin method addParameterOrderByDescending
    // JUnitDoclet end method addParameterOrderByDescending
  }
  
  public void testSetGetParameters() throws Exception {
    // JUnitDoclet begin method setParameters getParameters
    java.util.Collection[] tests = {new java.util.HashSet(), null};
    
    for (int i = 0; i < tests.length; i++) {
      view.setParameters(tests[i]);
      assertEquals(tests[i], view.getParameters());
    }
    // JUnitDoclet end method setParameters getParameters
  }
  
  public void testSetGetMaxFetchSize() throws Exception {
    // JUnitDoclet begin method setMaxFetchSize getMaxFetchSize
    int[] tests = {Integer.MIN_VALUE, -1, 0, 1, Integer.MAX_VALUE};
    
    for (int i = 0; i < tests.length; i++) {
      view.setMaxFetchSize(tests[i]);
      assertEquals(tests[i], view.getMaxFetchSize());
    }
    // JUnitDoclet end method setMaxFetchSize getMaxFetchSize
  }
  
  public void testHasRetrieveRowCount() throws Exception {
    // JUnitDoclet begin method hasRetrieveRowCount
    // JUnitDoclet end method hasRetrieveRowCount
  }
  
  public void testSetGetRetrieveRowCount() throws Exception {
    // JUnitDoclet begin method setRetrieveRowCount getRetrieveRowCount
    String[] tests = {new String(), null};
    
    for (int i = 0; i < tests.length; i++) {
      view.setRetrieveRowCount(tests[i]);
      assertEquals(tests[i], view.getRetrieveRowCount());
    }
    // JUnitDoclet end method setRetrieveRowCount getRetrieveRowCount
  }
  
  public void testSetGetRowCountMethod() throws Exception {
    // JUnitDoclet begin method setRowCountMethod getRowCountMethod
    String[] tests = {new String(), null};
    
    for (int i = 0; i < tests.length; i++) {
      view.setRowCountMethod(tests[i]);
      assertEquals(tests[i], view.getRowCountMethod());
    }
    // JUnitDoclet end method setRowCountMethod getRowCountMethod
  }
  
  public void testSetGetStartIndex() throws Exception {
    // JUnitDoclet begin method setStartIndex getStartIndex
    int[] tests = {Integer.MIN_VALUE, -1, 0, 1, Integer.MAX_VALUE};
    
    for (int i = 0; i < tests.length; i++) {
      view.setStartIndex(tests[i]);
      assertEquals(tests[i], view.getStartIndex());
    }
    // JUnitDoclet end method setStartIndex getStartIndex
  }
  
  public void testSetGetRowsPerPage() throws Exception {
    // JUnitDoclet begin method setRowsPerPage getRowsPerPage
    String[] tests = {new String(), null};
    
    for (int i = 0; i < tests.length; i++) {
      view.setRowsPerPage(tests[i]);
      assertEquals(tests[i], view.getRowsPerPage());
    }
    // JUnitDoclet end method setRowsPerPage getRowsPerPage
  }
  
  public void testPopulate() throws Exception {
    // JUnitDoclet begin method populate
    // JUnitDoclet end method populate
  }
  
  public void testGetCollection() throws Exception {
    // JUnitDoclet begin method getCollection
    // JUnitDoclet end method getCollection
  }
  
  public void testGetValueListHandler() throws Exception {
    // JUnitDoclet begin method getValueListHandler
    // JUnitDoclet end method getValueListHandler
  }
  
  
  
  /**
  * JUnitDoclet moves marker to this method, if there is not match
  * for them in the regenerated code and if the marker is not empty.
  * This way, no test gets lost when regenerating after renaming.
  * Method testVault is supposed to be empty.
  */
  public void testVault() throws Exception {
    // JUnitDoclet begin method testcase.testVault
    // JUnitDoclet end method testcase.testVault
  }
  
  public static void main(String[] args) {
    // JUnitDoclet begin method testcase.main
    junit.textui.TestRunner.run(ViewTest.class);
    // JUnitDoclet end method testcase.main
  }
}
