package framework.util;

import junit.framework.TestCase;
// JUnitDoclet begin import
import framework.util.PropertyUtils;
// JUnitDoclet end import

/**
* Generated by JUnitDoclet, a tool provided by
* ObjectFab GmbH under LGPL.
* Please see www.junitdoclet.org, www.gnu.org
* and www.objectfab.de for informations about
* the tool, the licence and the authors.
*/


public class PropertyUtilsTest
// JUnitDoclet begin extends_implements
extends TestCase
// JUnitDoclet end extends_implements
{
  // JUnitDoclet begin class
  framework.util.PropertyUtils propertyutils = null;
  // JUnitDoclet end class
  
  public PropertyUtilsTest(String name) {
    // JUnitDoclet begin method PropertyUtilsTest
    super(name);
    // JUnitDoclet end method PropertyUtilsTest
  }
  
  public framework.util.PropertyUtils createInstance() throws Exception {
    // JUnitDoclet begin method testcase.createInstance
    return new framework.util.PropertyUtils();
    // JUnitDoclet end method testcase.createInstance
  }
  
  protected void setUp() throws Exception {
    // JUnitDoclet begin method testcase.setUp
    super.setUp();
    propertyutils = createInstance();
    // JUnitDoclet end method testcase.setUp
  }
  
  protected void tearDown() throws Exception {
    // JUnitDoclet begin method testcase.tearDown
    propertyutils = null;
    super.tearDown();
    // JUnitDoclet end method testcase.tearDown
  }
  
  public void testSetGetDebug() throws Exception {
    // JUnitDoclet begin method setDebug getDebug
    int[] tests = {Integer.MIN_VALUE, -1, 0, 1, Integer.MAX_VALUE};
    
    for (int i = 0; i < tests.length; i++) {
      propertyutils.setDebug(tests[i]);
      assertEquals(tests[i], propertyutils.getDebug());
    }
    // JUnitDoclet end method setDebug getDebug
  }
  
  public void testClearDescriptors() throws Exception {
    // JUnitDoclet begin method clearDescriptors
    // JUnitDoclet end method clearDescriptors
  }
  
  public void testCopyProperties() throws Exception {
    // JUnitDoclet begin method copyProperties
    // JUnitDoclet end method copyProperties
  }
  
  public void testDescribe() throws Exception {
    // JUnitDoclet begin method describe
    // JUnitDoclet end method describe
  }
  
  public void testGetIndexedProperty() throws Exception {
    // JUnitDoclet begin method getIndexedProperty
    // JUnitDoclet end method getIndexedProperty
  }
  
  public void testGetMappedProperty() throws Exception {
    // JUnitDoclet begin method getMappedProperty
    // JUnitDoclet end method getMappedProperty
  }
  
  public void testGetMappedPropertyDescriptors() throws Exception {
    // JUnitDoclet begin method getMappedPropertyDescriptors
    // JUnitDoclet end method getMappedPropertyDescriptors
  }
  
  public void testGetNestedProperty() throws Exception {
    // JUnitDoclet begin method getNestedProperty
    // JUnitDoclet end method getNestedProperty
  }
  
  public void testGetProperty() throws Exception {
    // JUnitDoclet begin method getProperty
    // JUnitDoclet end method getProperty
  }
  
  public void testGetPropertyDescriptor() throws Exception {
    // JUnitDoclet begin method getPropertyDescriptor
    // JUnitDoclet end method getPropertyDescriptor
  }
  
  public void testGetPropertyDescriptors() throws Exception {
    // JUnitDoclet begin method getPropertyDescriptors
    // JUnitDoclet end method getPropertyDescriptors
  }
  
  public void testGetPropertyEditorClass() throws Exception {
    // JUnitDoclet begin method getPropertyEditorClass
    // JUnitDoclet end method getPropertyEditorClass
  }
  
  public void testGetPropertyType() throws Exception {
    // JUnitDoclet begin method getPropertyType
    // JUnitDoclet end method getPropertyType
  }
  
  public void testGetReadMethod() throws Exception {
    // JUnitDoclet begin method getReadMethod
    // JUnitDoclet end method getReadMethod
  }
  
  public void testGetSimpleProperty() throws Exception {
    // JUnitDoclet begin method getSimpleProperty
    // JUnitDoclet end method getSimpleProperty
  }
  
  public void testGetWriteMethod() throws Exception {
    // JUnitDoclet begin method getWriteMethod
    // JUnitDoclet end method getWriteMethod
  }
  
  public void testIsReadable() throws Exception {
    // JUnitDoclet begin method isReadable
    // JUnitDoclet end method isReadable
  }
  
  public void testIsWriteable() throws Exception {
    // JUnitDoclet begin method isWriteable
    // JUnitDoclet end method isWriteable
  }
  
  public void testSetIndexedProperty() throws Exception {
    // JUnitDoclet begin method setIndexedProperty
    // JUnitDoclet end method setIndexedProperty
  }
  
  public void testSetMappedProperty() throws Exception {
    // JUnitDoclet begin method setMappedProperty
    // JUnitDoclet end method setMappedProperty
  }
  
  public void testSetNestedProperty() throws Exception {
    // JUnitDoclet begin method setNestedProperty
    // JUnitDoclet end method setNestedProperty
  }
  
  public void testSetProperty() throws Exception {
    // JUnitDoclet begin method setProperty
    // JUnitDoclet end method setProperty
  }
  
  public void testSetSimpleProperty() throws Exception {
    // JUnitDoclet begin method setSimpleProperty
    // JUnitDoclet end method setSimpleProperty
  }
  
  
  
  /**
  * JUnitDoclet moves marker to this method, if there is not match
  * for them in the regenerated code and if the marker is not empty.
  * This way, no test gets lost when regenerating after renaming.
  * Method testVault is supposed to be empty.
  */
  public void testVault() throws Exception {
    // JUnitDoclet begin method testcase.testVault
    // JUnitDoclet end method testcase.testVault
  }
  
  public static void main(String[] args) {
    // JUnitDoclet begin method testcase.main
    junit.textui.TestRunner.run(PropertyUtilsTest.class);
    // JUnitDoclet end method testcase.main
  }
}
