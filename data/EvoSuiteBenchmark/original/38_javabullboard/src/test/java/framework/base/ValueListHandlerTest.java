package framework.base;

import junit.framework.TestCase;
// JUnitDoclet begin import
import framework.base.ValueListHandler;
// JUnitDoclet end import

/**
* Generated by JUnitDoclet, a tool provided by
* ObjectFab GmbH under LGPL.
* Please see www.junitdoclet.org, www.gnu.org
* and www.objectfab.de for informations about
* the tool, the licence and the authors.
*/


public class ValueListHandlerTest
// JUnitDoclet begin extends_implements
extends TestCase
// JUnitDoclet end extends_implements
{
  // JUnitDoclet begin class
  framework.base.ValueListHandler valuelisthandler = null;
  // JUnitDoclet end class
  
  public ValueListHandlerTest(String name) {
    // JUnitDoclet begin method ValueListHandlerTest
    super(name);
    // JUnitDoclet end method ValueListHandlerTest
  }
  
  public framework.base.ValueListHandler createInstance() throws Exception {
    // JUnitDoclet begin method testcase.createInstance
    return new framework.base.ValueListHandler();
    // JUnitDoclet end method testcase.createInstance
  }
  
  protected void setUp() throws Exception {
    // JUnitDoclet begin method testcase.setUp
    super.setUp();
    valuelisthandler = createInstance();
    // JUnitDoclet end method testcase.setUp
  }
  
  protected void tearDown() throws Exception {
    // JUnitDoclet begin method testcase.tearDown
    valuelisthandler = null;
    super.tearDown();
    // JUnitDoclet end method testcase.tearDown
  }
  
  public void testGetDefaultRowsPerPage() throws Exception {
    // JUnitDoclet begin method getDefaultRowsPerPage
    // JUnitDoclet end method getDefaultRowsPerPage
  }
  
  public void testGetDefaultRetrieveRowCount() throws Exception {
    // JUnitDoclet begin method getDefaultRetrieveRowCount
    // JUnitDoclet end method getDefaultRetrieveRowCount
  }
  
  public void testGetDefaultRowCountMethod() throws Exception {
    // JUnitDoclet begin method getDefaultRowCountMethod
    // JUnitDoclet end method getDefaultRowCountMethod
  }
  
  public void testSetGetNextIndex() throws Exception {
    // JUnitDoclet begin method setNextIndex getNextIndex
    int[] tests = {Integer.MIN_VALUE, -1, 0, 1, Integer.MAX_VALUE};
    
    for (int i = 0; i < tests.length; i++) {
      valuelisthandler.setNextIndex(tests[i]);
      assertEquals(tests[i], valuelisthandler.getNextIndex());
    }
    // JUnitDoclet end method setNextIndex getNextIndex
  }
  
  public void testSetNextPage() throws Exception {
    // JUnitDoclet begin method setNextPage
    // JUnitDoclet end method setNextPage
  }
  
  public void testSetGetStartIndex() throws Exception {
    // JUnitDoclet begin method setStartIndex getStartIndex
    int[] tests = {Integer.MIN_VALUE, -1, 0, 1, Integer.MAX_VALUE};
    
    for (int i = 0; i < tests.length; i++) {
      valuelisthandler.setStartIndex(tests[i]);
      assertEquals(tests[i], valuelisthandler.getStartIndex());
    }
    // JUnitDoclet end method setStartIndex getStartIndex
  }
  
  public void testGetPreviousIndex() throws Exception {
    // JUnitDoclet begin method getPreviousIndex
    // JUnitDoclet end method getPreviousIndex
  }
  
  public void testHasPreviousPage() throws Exception {
    // JUnitDoclet begin method hasPreviousPage
    // JUnitDoclet end method hasPreviousPage
  }
  
  public void testHasNextPage() throws Exception {
    // JUnitDoclet begin method hasNextPage
    // JUnitDoclet end method hasNextPage
  }
  
  public void testSetGetResultList() throws Exception {
    // JUnitDoclet begin method setResultList getResultList
    java.util.Collection[] tests = {new java.util.HashSet(), null};
    
    for (int i = 0; i < tests.length; i++) {
      valuelisthandler.setResultList(tests[i]);
      assertEquals(tests[i], valuelisthandler.getResultList());
    }
    // JUnitDoclet end method setResultList getResultList
  }
  
  public void testIsEmpty() throws Exception {
    // JUnitDoclet begin method isEmpty
    // JUnitDoclet end method isEmpty
  }
  
  public void testGetPageCount() throws Exception {
    // JUnitDoclet begin method getPageCount
    // JUnitDoclet end method getPageCount
  }
  
  public void testSetIsAdvanced() throws Exception {
    // JUnitDoclet begin method setAdvanced isAdvanced
    boolean[] tests = {true, false};
    
    for (int i = 0; i < tests.length; i++) {
      valuelisthandler.setAdvanced(tests[i]);
      assertEquals(tests[i], valuelisthandler.isAdvanced());
    }
    // JUnitDoclet end method setAdvanced isAdvanced
  }
  
  public void testSetGetRowsPerPage() throws Exception {
    // JUnitDoclet begin method setRowsPerPage getRowsPerPage
    int[] tests = {Integer.MIN_VALUE, -1, 0, 1, Integer.MAX_VALUE};
    
    for (int i = 0; i < tests.length; i++) {
      valuelisthandler.setRowsPerPage(tests[i]);
      assertEquals(tests[i], valuelisthandler.getRowsPerPage());
    }
    // JUnitDoclet end method setRowsPerPage getRowsPerPage
  }
  
  public void testSetGetRowCount() throws Exception {
    // JUnitDoclet begin method setRowCount getRowCount
    int[] tests = {Integer.MIN_VALUE, -1, 0, 1, Integer.MAX_VALUE};
    
    for (int i = 0; i < tests.length; i++) {
      valuelisthandler.setRowCount(tests[i]);
      assertEquals(tests[i], valuelisthandler.getRowCount());
    }
    // JUnitDoclet end method setRowCount getRowCount
  }
  
  public void testHasRetrieveRowCount() throws Exception {
    // JUnitDoclet begin method hasRetrieveRowCount
    // JUnitDoclet end method hasRetrieveRowCount
  }
  
  public void testSetRetrieveRowCount() throws Exception {
    // JUnitDoclet begin method setRetrieveRowCount
    // JUnitDoclet end method setRetrieveRowCount
  }
  
  public void testSetGetRowCountMethod() throws Exception {
    // JUnitDoclet begin method setRowCountMethod getRowCountMethod
    String[] tests = {new String(), null};
    
    for (int i = 0; i < tests.length; i++) {
      valuelisthandler.setRowCountMethod(tests[i]);
      assertEquals(tests[i], valuelisthandler.getRowCountMethod());
    }
    // JUnitDoclet end method setRowCountMethod getRowCountMethod
  }
  
  
  
  /**
  * JUnitDoclet moves marker to this method, if there is not match
  * for them in the regenerated code and if the marker is not empty.
  * This way, no test gets lost when regenerating after renaming.
  * Method testVault is supposed to be empty.
  */
  public void testVault() throws Exception {
    // JUnitDoclet begin method testcase.testVault
    // JUnitDoclet end method testcase.testVault
  }
  
  public static void main(String[] args) {
    // JUnitDoclet begin method testcase.main
    junit.textui.TestRunner.run(ValueListHandlerTest.class);
    // JUnitDoclet end method testcase.main
  }
}
