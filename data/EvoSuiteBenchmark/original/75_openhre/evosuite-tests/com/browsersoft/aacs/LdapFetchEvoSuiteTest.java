/*
 * This file was automatically generated by EvoSuite
 */

package com.browsersoft.aacs;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.browsersoft.aacs.LdapFetch;
import com.browsersoft.aacs.User;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.naming.NamingEnumeration;
import javax.naming.NamingException;
import javax.naming.directory.Attribute;
import javax.naming.directory.BasicAttribute;
import javax.naming.directory.BasicAttributes;
import javax.security.auth.Subject;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class LdapFetchEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          Subject subject0 = new Subject();
          User user0 = new User("$arSk'geV;(", "$arSk'geV;(");
          LdapFetch ldapFetch0 = new LdapFetch(subject0, user0);
          Object object0 = ldapFetch0.run();
          assertNull(object0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
      Subject subject0 = new Subject();
      User user0 = new User("$arSk'geV;(", "$arSk'geV;(");
      LdapFetch ldapFetch0 = new LdapFetch(subject0, user0);
      BasicAttribute basicAttribute0 = new BasicAttribute("$arSk'geV;(", true);
      NamingEnumeration<?> namingEnumeration0 = basicAttribute0.getAll();
      ldapFetch0.setUserAttributes(namingEnumeration0);
      assertEquals(false, namingEnumeration0.hasMore());
  }

  @Test
  public void test2()  throws Throwable  {
      Subject subject0 = new Subject();
      User user0 = new User();
      LdapFetch ldapFetch0 = new LdapFetch(subject0, user0);
      BasicAttributes basicAttributes0 = new BasicAttributes("8G]Gb/FIDHrr/D}X", "Tue Jul 02 23:53:09 BST 2013");
      NamingEnumeration<Attribute> namingEnumeration0 = basicAttributes0.getAll();
      try {
        ldapFetch0.setUserAttributes(namingEnumeration0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * javax.naming.directory.BasicAttribute cannot be cast to javax.naming.directory.SearchResult
         */
      }
  }
}
