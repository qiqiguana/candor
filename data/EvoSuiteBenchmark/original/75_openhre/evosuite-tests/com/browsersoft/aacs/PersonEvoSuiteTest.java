/*
 * This file was automatically generated by EvoSuite
 */

package com.browsersoft.aacs;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.browsersoft.aacs.Person;
import java.util.Properties;
import javax.naming.CompositeName;
import javax.naming.CompoundName;
import javax.naming.InvalidNameException;
import javax.naming.Name;
import javax.naming.NameNotFoundException;
import javax.naming.NameParser;
import javax.naming.NamingEnumeration;
import javax.naming.NamingException;
import javax.naming.directory.Attributes;
import javax.naming.directory.BasicAttributes;
import javax.naming.directory.DirContext;
import javax.naming.directory.ModificationItem;
import javax.naming.directory.SearchControls;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PersonEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Person person0 = new Person("log4j.logger.", "log4j.logger.");
      assertNotNull(person0);
      
      person0.lookup("log4j.logger.");
      assertEquals("log4j.logger.", person0.getUid());
      assertEquals("log4j.logger.", person0.getCn());
  }

  @Test
  public void test1()  throws Throwable  {
      Person person0 = new Person();
      CompositeName compositeName0 = new CompositeName("!|Oz//");
      DirContext dirContext0 = person0.getSchema((Name) compositeName0);
      assertNull(dirContext0);
  }

  @Test
  public void test2()  throws Throwable  {
      Person person0 = new Person();
      Properties properties0 = new Properties();
      CompoundName compoundName0 = new CompoundName(":xey.8=X=H,l_", properties0);
      NamingEnumeration<Object> namingEnumeration0 = person0.search((Name) compoundName0, person0.myAttrs);
      assertNull(namingEnumeration0);
  }

  @Test
  public void test3()  throws Throwable  {
      Person person0 = new Person("^", "^");
      assertNotNull(person0);
      
      // Undeclared exception!
      try {
        person0.setPassvalidstart((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      Person person0 = new Person("=F", "=F");
      assertNotNull(person0);
      
      person0.setPasschange("=F");
      assertEquals("=F", person0.getPasschange());
  }

  @Test
  public void test5()  throws Throwable  {
      Person person0 = new Person(", leftAlign=", ", leftAlign=");
      assertNotNull(person0);
      
      CompositeName compositeName0 = new CompositeName();
      person0.lookupLink((Name) compositeName0);
      assertEquals(", leftAlign=@arch.org", person0.getId());
      assertEquals(", leftAlign=", person0.getUid());
      assertEquals(", leftAlign=", person0.getCn());
  }

  @Test
  public void test6()  throws Throwable  {
      Person person0 = new Person("", "");
      assertNotNull(person0);
      
      person0.lookup((Name) null);
      assertEquals("", person0.getCn());
      assertEquals("", person0.getUid());
      assertEquals("@arch.org", person0.getId());
  }

  @Test
  public void test7()  throws Throwable  {
      Person person0 = new Person("", "");
      assertNotNull(person0);
      
      person0.search("", "", (SearchControls) null);
      assertEquals("", person0.getCn());
      assertEquals("", person0.getUid());
      assertEquals("@arch.org", person0.getId());
  }

  @Test
  public void test8()  throws Throwable  {
      Person person0 = new Person();
      assertNotNull(person0);
      
      person0.setPostalAddress("cn");
      assertEquals("cn", person0.getPostalAddress());
  }

  @Test
  public void test9()  throws Throwable  {
      Person person0 = new Person("*OD", "*OD");
      assertNotNull(person0);
      
      String string0 = person0.getGivenname();
      assertEquals("*OD", person0.getCn());
      assertEquals("*OD", person0.getUid());
      assertNull(string0);
  }

  @Test
  public void test10()  throws Throwable  {
      Person person0 = new Person();
      assertNotNull(person0);
      
      person0.setSn("");
      assertEquals("", person0.getSn());
  }

  @Test
  public void test11()  throws Throwable  {
      Person person0 = new Person("*OD", "*OD");
      assertNotNull(person0);
      
      String string0 = person0.getCn();
      assertNotNull(string0);
      assertEquals("*OD", person0.getUid());
      assertEquals("*OD", string0);
  }

  @Test
  public void test12()  throws Throwable  {
      Person person0 = new Person("*OD", "*OD");
      assertNotNull(person0);
      
      String string0 = person0.getFaxTelephoneNumber();
      assertNull(string0);
      assertEquals("*OD", person0.getUid());
      assertEquals("*OD", person0.getCn());
  }

  @Test
  public void test13()  throws Throwable  {
      Person person0 = new Person();
      DirContext dirContext0 = person0.createSubcontext("", person0.myAttrs);
      assertNull(dirContext0);
  }

  @Test
  public void test14()  throws Throwable  {
      Person person0 = new Person("", "");
      assertNotNull(person0);
      
      person0.search("", person0.myAttrs);
      assertEquals("@arch.org", person0.getId());
      assertEquals("", person0.getUid());
      assertEquals("", person0.getCn());
  }

  @Test
  public void test15()  throws Throwable  {
      Person person0 = new Person("*OD", "*OD");
      assertNotNull(person0);
      
      person0.composeName("*OD", "*OD");
      assertEquals("*OD", person0.getCn());
      assertEquals("*OD", person0.getUid());
  }

  @Test
  public void test16()  throws Throwable  {
      Person person0 = new Person("*OD", "*OD");
      assertNotNull(person0);
      
      BasicAttributes basicAttributes0 = (BasicAttributes)person0.getAttributes();
      assertNotNull(basicAttributes0);
      assertEquals("*OD", person0.getCn());
      assertEquals("*OD", person0.getUid());
  }

  @Test
  public void test17()  throws Throwable  {
      Person person0 = new Person("=F", "=F");
      assertNotNull(person0);
      
      person0.getEnvironment();
      assertEquals("=F", person0.getCn());
      assertEquals("=F", person0.getUid());
  }

  @Test
  public void test18()  throws Throwable  {
      Person person0 = new Person();
      assertNotNull(person0);
      
      person0.setTelephoneNumber("cn");
      assertEquals("cn", person0.getTelephoneNumber());
  }

  @Test
  public void test19()  throws Throwable  {
      Person person0 = new Person();
      String[] stringArray0 = new String[2];
      person0.setRoles(stringArray0);
      assertNull(person0.getEmail());
  }

  @Test
  public void test20()  throws Throwable  {
      Person person0 = new Person(", leftAlign=", ", leftAlign=");
      assertNotNull(person0);
      
      person0.createSubcontext("");
      assertEquals(", leftAlign=", person0.getCn());
      assertEquals(", leftAlign=", person0.getUid());
      assertEquals(", leftAlign=@arch.org", person0.getId());
  }

  @Test
  public void test21()  throws Throwable  {
      Person person0 = new Person("", "");
      assertNotNull(person0);
      
      String string0 = person0.getPostalAddress();
      assertEquals("@arch.org", person0.getId());
      assertEquals("", person0.getCn());
      assertEquals("", person0.getUid());
      assertNull(string0);
  }

  @Test
  public void test22()  throws Throwable  {
      Person person0 = new Person("=F", "=F");
      assertNotNull(person0);
      
      String string0 = person0.getAllowedips();
      assertEquals("=F", person0.getUid());
      assertNull(string0);
      assertEquals("=F", person0.getCn());
  }

  @Test
  public void test23()  throws Throwable  {
      Person person0 = new Person("", "");
      assertNotNull(person0);
      
      person0.setCn("");
      assertEquals("", person0.getCn());
      assertEquals("", person0.getUid());
      assertEquals("@arch.org", person0.getId());
  }

  @Test
  public void test24()  throws Throwable  {
      Person person0 = new Person("=F", "=F");
      assertNotNull(person0);
      
      person0.setDn("=F");
      assertEquals("=F", person0.getDn());
      assertEquals("=F", person0.getUid());
      assertEquals("=F", person0.getCn());
  }

  @Test
  public void test25()  throws Throwable  {
      Person person0 = new Person();
      CompositeName compositeName0 = new CompositeName(":xey.8=X=H,l_");
      person0.rebind((Name) compositeName0, (Object) "{}");
      assertNull(person0.getPostalAddress());
  }

  @Test
  public void test26()  throws Throwable  {
      Person person0 = new Person();
      Properties properties0 = new Properties();
      CompoundName compoundName0 = new CompoundName("gz6@:6", properties0);
      BasicAttributes basicAttributes0 = new BasicAttributes();
      String[] stringArray0 = new String[1];
      NamingEnumeration<Object> namingEnumeration0 = person0.search((Name) compoundName0, (Attributes) basicAttributes0, stringArray0);
      assertNull(namingEnumeration0);
  }

  @Test
  public void test27()  throws Throwable  {
      Person person0 = new Person("", "");
      assertNotNull(person0);
      
      person0.setUid("");
      assertEquals("", person0.getUid());
      assertEquals("", person0.getCn());
      assertEquals("@arch.org", person0.getId());
  }

  @Test
  public void test28()  throws Throwable  {
      Person person0 = new Person("", "");
      assertNotNull(person0);
      
      String string0 = person0.getDn();
      assertEquals("@arch.org", person0.getId());
      assertEquals("", person0.getCn());
      assertEquals("", person0.getUid());
      assertNull(string0);
  }

  @Test
  public void test29()  throws Throwable  {
      Person person0 = new Person();
      Properties properties0 = new Properties();
      CompoundName compoundName0 = new CompoundName("gz6@:6", properties0);
      person0.bind((Name) compoundName0, (Object) "GZ6@:6", person0.myAttrs);
      assertNull(person0.getPostalAddress());
  }

  @Test
  public void test30()  throws Throwable  {
      Person person0 = new Person("*OD", "*OD");
      assertNotNull(person0);
      
      person0.list((Name) null);
      assertEquals("*OD", person0.getUid());
      assertEquals("*OD", person0.getCn());
  }

  @Test
  public void test31()  throws Throwable  {
      Person person0 = new Person("", "");
      assertNotNull(person0);
      
      CompositeName compositeName0 = new CompositeName();
      person0.composeName((Name) compositeName0, (Name) compositeName0);
      assertEquals("@arch.org", person0.getId());
      assertEquals("", person0.getCn());
      assertEquals("", person0.getUid());
  }

  @Test
  public void test32()  throws Throwable  {
      Person person0 = new Person("", "");
      assertNotNull(person0);
      
      CompositeName compositeName0 = new CompositeName();
      BasicAttributes basicAttributes0 = new BasicAttributes("UTF8", (Object) null);
      person0.rebind((Name) compositeName0, (Object) "UTF8", (Attributes) basicAttributes0);
      assertEquals("", person0.getCn());
      assertEquals("@arch.org", person0.getId());
      assertEquals("", person0.getUid());
  }

  @Test
  public void test33()  throws Throwable  {
      Person person0 = new Person("*OD", "*OD");
      assertNotNull(person0);
      
      person0.list((String) null);
      assertEquals("*OD", person0.getCn());
      assertEquals("*OD", person0.getUid());
  }

  @Test
  public void test34()  throws Throwable  {
      Person person0 = new Person("*OD", "*OD");
      assertNotNull(person0);
      
      person0.setEmail("*OD");
      assertEquals("*OD", person0.getUid());
      assertEquals("*OD", person0.getEmail());
      assertEquals("*OD", person0.getCn());
  }

  @Test
  public void test35()  throws Throwable  {
      Person person0 = new Person();
      String string0 = person0.getId();
      assertNull(string0);
  }

  @Test
  public void test36()  throws Throwable  {
      Person person0 = new Person(", leftAlign=", ", leftAlign=");
      assertNotNull(person0);
      
      String string0 = person0.getTelephoneNumber();
      assertEquals(", leftAlign=", person0.getCn());
      assertEquals(", leftAlign=", person0.getUid());
      assertNull(string0);
      assertEquals(", leftAlign=@arch.org", person0.getId());
  }

  @Test
  public void test37()  throws Throwable  {
      Person person0 = new Person("*OD", "*OD");
      assertNotNull(person0);
      
      person0.bind((Name) null, (Object) null);
      assertEquals("*OD", person0.getUid());
      assertEquals("*OD", person0.getCn());
  }

  @Test
  public void test38()  throws Throwable  {
      Person person0 = new Person();
      assertNotNull(person0);
      
      String string0 = person0.getPassvalidstart();
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test39()  throws Throwable  {
      String[] stringArray0 = new String[5];
      Person person0 = null;
      try {
        person0 = new Person("}1,c*8a^-", "}1,c*8a^-", "}1,c*8a^-", "}1,c*8a^-", stringArray0, stringArray0, "}1,c*8a^-", (String) null, "no", "}1,c*8a^-", "}1,c*8a^-", "}1,c*8a^-", "}1,c*8a^-");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test40()  throws Throwable  {
      Person person0 = new Person();
      CompositeName compositeName0 = new CompositeName("");
      person0.rename((Name) compositeName0, (Name) compositeName0);
      assertNull(person0.getId());
  }

  @Test
  public void test41()  throws Throwable  {
      Person person0 = new Person();
      person0.bind("_*deZwW^E", (Object) null);
      assertEquals("", person0.getPassvalidstart());
  }

  @Test
  public void test42()  throws Throwable  {
      Person person0 = new Person("", "");
      assertNotNull(person0);
      
      String string0 = person0.getUid();
      assertEquals("", string0);
      assertEquals("", person0.getCn());
      assertEquals("@arch.org", person0.getId());
  }

  @Test
  public void test43()  throws Throwable  {
      Person person0 = new Person("m5_jB'W%w.:TTHvEb", "m5_jB'W%w.:TTHvEb");
      assertNotNull(person0);
      
      person0.bind("m5_jB'W%w.:TTHvEb", (Object) person0, person0.myAttrs);
      assertEquals("m5_jB'W%w.:TTHvEb", person0.getCn());
      assertEquals("m5_jB'W%w.:TTHvEb", person0.getUid());
  }

  @Test
  public void test44()  throws Throwable  {
      Person person0 = new Person("", "");
      assertNotNull(person0);
      
      person0.destroySubcontext("");
      assertEquals("@arch.org", person0.getId());
      assertEquals("", person0.getUid());
      assertEquals("", person0.getCn());
  }

  @Test
  public void test45()  throws Throwable  {
      Person person0 = new Person();
      DirContext dirContext0 = person0.getSchema("!|Oz//");
      assertNull(dirContext0);
  }

  @Test
  public void test46()  throws Throwable  {
      Person person0 = new Person("", "");
      assertNotNull(person0);
      
      person0.getSchemaClassDefinition("");
      assertEquals("@arch.org", person0.getId());
      assertEquals("", person0.getUid());
      assertEquals("", person0.getCn());
  }

  @Test
  public void test47()  throws Throwable  {
      Person person0 = new Person();
      CompositeName compositeName0 = new CompositeName();
      ModificationItem[] modificationItemArray0 = new ModificationItem[2];
      person0.modifyAttributes((Name) compositeName0, modificationItemArray0);
      assertNull(person0.getSn());
  }

  @Test
  public void test48()  throws Throwable  {
      Person person0 = new Person(", leftAlign=", ", leftAlign=");
      assertNotNull(person0);
      
      person0.getGroups();
      assertEquals(", leftAlign=", person0.getCn());
      assertEquals(", leftAlign=", person0.getUid());
      assertEquals(", leftAlign=@arch.org", person0.getId());
  }

  @Test
  public void test49()  throws Throwable  {
      Person person0 = new Person("", "");
      assertNotNull(person0);
      
      CompositeName compositeName0 = new CompositeName("");
      BasicAttributes basicAttributes0 = (BasicAttributes)person0.getAttributes((Name) compositeName0);
      assertEquals("", person0.getUid());
      assertEquals("", person0.getCn());
      assertNotNull(basicAttributes0);
      assertEquals("@arch.org", person0.getId());
  }

  @Test
  public void test50()  throws Throwable  {
      Person person0 = new Person("^", "^");
      assertNotNull(person0);
      
      person0.getNameInNamespace();
      assertEquals("^@arch.org", person0.getId());
      assertEquals("^", person0.getUid());
      assertEquals("^", person0.getCn());
  }

  @Test
  public void test51()  throws Throwable  {
      Person person0 = new Person(", leftAlign=", ", leftAlign=");
      assertNotNull(person0);
      
      person0.listBindings(", leftAlign=");
      assertEquals(", leftAlign=@arch.org", person0.getId());
      assertEquals(", leftAlign=", person0.getUid());
      assertEquals(", leftAlign=", person0.getCn());
  }

  @Test
  public void test52()  throws Throwable  {
      Person person0 = new Person("", "");
      assertNotNull(person0);
      
      CompositeName compositeName0 = new CompositeName();
      Object[] objectArray0 = new Object[9];
      person0.search((Name) compositeName0, "", objectArray0, (SearchControls) null);
      assertEquals("", person0.getUid());
      assertEquals("", person0.getCn());
      assertEquals("@arch.org", person0.getId());
  }

  @Test
  public void test53()  throws Throwable  {
      Person person0 = new Person();
      BasicAttributes basicAttributes0 = new BasicAttributes();
      person0.modifyAttributes("gz6@:6", (-1), (Attributes) basicAttributes0);
      assertEquals("", person0.getPassvalidstart());
  }

  @Test
  public void test54()  throws Throwable  {
      Person person0 = new Person("*OD", "*OD");
      assertNotNull(person0);
      
      person0.getRoles();
      assertEquals("*OD", person0.getCn());
      assertEquals("*OD", person0.getUid());
  }

  @Test
  public void test55()  throws Throwable  {
      Person person0 = new Person(", leftAlign=", ", leftAlign=");
      assertNotNull(person0);
      
      person0.rebind(", leftAlign=", (Object) null);
      assertEquals(", leftAlign=@arch.org", person0.getId());
      assertEquals(", leftAlign=", person0.getUid());
      assertEquals(", leftAlign=", person0.getCn());
  }

  @Test
  public void test56()  throws Throwable  {
      Person person0 = new Person();
      assertNotNull(person0);
      
      person0.setPassrenewal("_*deZwW^E");
      assertEquals("_*deZwW^E", person0.getPassrenewal());
  }

  @Test
  public void test57()  throws Throwable  {
      Person person0 = new Person();
      Object object0 = person0.lookupLink("GZ6@:6");
      assertNull(object0);
  }

  @Test
  public void test58()  throws Throwable  {
      Person person0 = new Person("m5_jB'W%w.:TTHvEb", "m5_jB'W%w.:TTHvEb");
      assertNotNull(person0);
      
      CompositeName compositeName0 = new CompositeName("m5_jB'W%w.:TTHvEb");
      person0.destroySubcontext((Name) compositeName0);
      assertEquals("m5_jB'W%w.:TTHvEb", person0.getCn());
      assertEquals("m5_jB'W%w.:TTHvEb", person0.getUid());
  }

  @Test
  public void test59()  throws Throwable  {
      Person person0 = new Person();
      person0.close();
      assertNull(person0.getDn());
  }

  @Test
  public void test60()  throws Throwable  {
      Person person0 = new Person("*OD", "*OD");
      assertNotNull(person0);
      
      String string0 = person0.getPassrenewal();
      assertEquals("", string0);
      assertEquals("*OD", person0.getCn());
      assertNotNull(string0);
      assertEquals("*OD", person0.getUid());
  }

  @Test
  public void test61()  throws Throwable  {
      Person person0 = new Person("", "");
      assertNotNull(person0);
      
      String[] stringArray0 = new String[9];
      SearchControls searchControls0 = new SearchControls();
      person0.search("", "", (Object[]) stringArray0, searchControls0);
      assertEquals("", person0.getUid());
      assertEquals("@arch.org", person0.getId());
      assertEquals("", person0.getCn());
  }

  @Test
  public void test62()  throws Throwable  {
      Person person0 = new Person();
      Object object0 = person0.addToEnvironment("n", "java.naming.language");
      assertNull(object0);
  }

  @Test
  public void test63()  throws Throwable  {
      Person person0 = new Person();
      Object object0 = person0.removeFromEnvironment((String) null);
      assertNull(object0);
  }

  @Test
  public void test64()  throws Throwable  {
      Person person0 = new Person();
      CompositeName compositeName0 = new CompositeName("cn");
      DirContext dirContext0 = person0.createSubcontext((Name) compositeName0, person0.myAttrs);
      assertNull(dirContext0);
  }

  @Test
  public void test65()  throws Throwable  {
      Person person0 = new Person();
      CompositeName compositeName0 = new CompositeName(":xey.8=X=H,l_");
      DirContext dirContext0 = person0.getSchemaClassDefinition((Name) compositeName0);
      assertNull(dirContext0);
  }

  @Test
  public void test66()  throws Throwable  {
      Person person0 = new Person();
      CompositeName compositeName0 = new CompositeName("gz6@:6");
      NameParser nameParser0 = person0.getNameParser((Name) compositeName0);
      assertNull(nameParser0);
  }

  @Test
  public void test67()  throws Throwable  {
      Person person0 = new Person();
      String[] stringArray0 = new String[2];
      NamingEnumeration<Object> namingEnumeration0 = person0.search("", person0.myAttrs, stringArray0);
      assertNull(namingEnumeration0);
  }

  @Test
  public void test68()  throws Throwable  {
      Person person0 = new Person("*OD", "*OD");
      assertNotNull(person0);
      
      SearchControls searchControls0 = new SearchControls();
      person0.search((Name) null, "*OD", searchControls0);
      assertEquals("*OD", person0.getCn());
      assertEquals("*OD", person0.getUid());
  }

  @Test
  public void test69()  throws Throwable  {
      Person person0 = new Person();
      assertNotNull(person0);
      
      String string0 = person0.getPasschange();
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test70()  throws Throwable  {
      Person person0 = new Person("m5_jB'W%w.:TTHvEb", "m5_jB'W%w.:TTHvEb");
      assertNotNull(person0);
      
      CompositeName compositeName0 = new CompositeName("m5_jB'W%w.:TTHvEb");
      person0.createSubcontext((Name) compositeName0);
      assertEquals("m5_jB'W%w.:TTHvEb", person0.getCn());
      assertEquals("m5_jB'W%w.:TTHvEb", person0.getUid());
  }

  @Test
  public void test71()  throws Throwable  {
      Person person0 = new Person();
      assertNotNull(person0);
      
      person0.setGivenname("top");
      assertEquals("top", person0.getGivenname());
  }

  @Test
  public void test72()  throws Throwable  {
      Person person0 = new Person();
      String[] stringArray0 = new String[2];
      person0.setGroups(stringArray0);
      assertNull(person0.getNameInNamespace());
  }

  @Test
  public void test73()  throws Throwable  {
      Person person0 = new Person();
      CompositeName compositeName0 = new CompositeName("cn");
      person0.unbind((Name) compositeName0);
      assertNull(person0.getPostalAddress());
  }

  @Test
  public void test74()  throws Throwable  {
      Person person0 = new Person("*OD", "*OD");
      assertNotNull(person0);
      
      String string0 = person0.getSn();
      assertNull(string0);
      assertEquals("*OD", person0.getCn());
      assertEquals("*OD", person0.getUid());
  }

  @Test
  public void test75()  throws Throwable  {
      Person person0 = new Person();
      person0.unbind((String) null);
      assertNull(person0.getTelephoneNumber());
  }

  @Test
  public void test76()  throws Throwable  {
      Person person0 = new Person("*OD", "*OD");
      assertNotNull(person0);
      
      person0.getNameParser("*OD");
      assertEquals("*OD", person0.getCn());
      assertEquals("*OD", person0.getUid());
  }

  @Test
  public void test77()  throws Throwable  {
      Person person0 = new Person("^", "^");
      assertNotNull(person0);
      
      person0.rebind("^", (Object) null, person0.myAttrs);
      assertEquals("^@arch.org", person0.getId());
      assertEquals("^", person0.getCn());
      assertEquals("^", person0.getUid());
  }

  @Test
  public void test78()  throws Throwable  {
      Person person0 = new Person();
      String string0 = person0.getEmail();
      assertNull(string0);
  }

  @Test
  public void test79()  throws Throwable  {
      Person person0 = new Person(", leftAlign=", "");
      assertNotNull(person0);
      
      CompositeName compositeName0 = new CompositeName("}1,c*8a^-");
      person0.modifyAttributes((Name) compositeName0, 0, person0.myAttrs);
      assertEquals(", leftAlign=@arch.org", person0.getId());
      assertEquals("", person0.getCn());
      assertEquals(", leftAlign=", person0.getUid());
  }

  @Test
  public void test80()  throws Throwable  {
      Person person0 = new Person("*OD", "*OD");
      assertNotNull(person0);
      
      person0.listBindings((Name) null);
      assertEquals("*OD", person0.getCn());
      assertEquals("*OD", person0.getUid());
  }

  @Test
  public void test81()  throws Throwable  {
      Person person0 = new Person("*OD", "*OD");
      assertNotNull(person0);
      
      person0.setFaxTelephoneNumber("*OD");
      assertEquals("*OD", person0.getCn());
      assertEquals("*OD", person0.getFaxTelephoneNumber());
      assertEquals("*OD", person0.getUid());
  }

  @Test
  public void test82()  throws Throwable  {
      Person person0 = new Person("log4j.logger.", "log4j.logger.");
      assertNotNull(person0);
      
      person0.rename("log4j.logger.", "*i[s");
      assertEquals("log4j.logger.", person0.getUid());
      assertEquals("log4j.logger.", person0.getCn());
  }

  @Test
  public void test83()  throws Throwable  {
      String[] stringArray0 = new String[10];
      Person person0 = null;
      try {
        person0 = new Person("yes", "yes", "yes", "yes", stringArray0, stringArray0, (String) null, (String) null, "yes", (String) null, "yes", "yes", "z/}%9jMR{z%r_)Vs'-");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test84()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      Person person0 = new Person("", "", "", "", stringArray0, stringArray0, "", "", "", "", "l)LRw/_Pv^G", "", "");
      assertEquals("@arch.org", person0.getId());
      assertEquals("", person0.getUid());
      assertEquals("uid=,ou=people,dc=arch,dc=org", person0.getDn());
      assertNotNull(person0);
  }

  @Test
  public void test85()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = ", leftAlign=";
      stringArray0[1] = ", leftAlign=";
      stringArray0[2] = ", leftAlign=";
      Person person0 = new Person(", leftAlign=", ", leftAlign=", ", leftAlign=", ", leftAlign=", stringArray0, stringArray0, "", ", leftAlign=", ", leftAlign=", ", leftAlign=", "", "oNIP'#2h4?[^%-n", ", leftAlign=");
      assertNotNull(person0);
      
      person0.addAllowedip(", leftAlign=");
      assertEquals(", leftAlign=\n, leftAlign=", person0.getAllowedips());
  }

  @Test
  public void test86()  throws Throwable  {
      Person person0 = new Person("log4j.logger.", "log4j.logger.");
      assertNotNull(person0);
      
      person0.addAllowedip("log4j.logger.");
      assertEquals("log4j.logger.", person0.getCn());
      assertEquals("log4j.logger.", person0.getUid());
      assertEquals("log4j.logger.", person0.getAllowedips());
  }

  @Test
  public void test87()  throws Throwable  {
      Person person0 = new Person();
      try {
        person0.getAttributes("=L>t`T`nf");
        fail("Expecting exception: NameNotFoundException");
      } catch(NameNotFoundException e) {
      }
  }

  @Test
  public void test88()  throws Throwable  {
      Person person0 = new Person("log4j.logger.", "log4j.logger.");
      assertNotNull(person0);
      
      String[] stringArray0 = new String[3];
      try {
        person0.getAttributes("log4j.logger.", stringArray0);
        fail("Expecting exception: NameNotFoundException");
      } catch(NameNotFoundException e) {
      }
  }

  @Test
  public void test89()  throws Throwable  {
      Person person0 = new Person("", "");
      assertNotNull(person0);
      
      CompositeName compositeName0 = new CompositeName("");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      BasicAttributes basicAttributes0 = (BasicAttributes)person0.getAttributes((Name) compositeName0, stringArray0);
      assertNotNull(basicAttributes0);
      assertEquals("@arch.org", person0.getId());
      assertEquals("", person0.getCn());
      assertEquals("", person0.getUid());
  }
}
