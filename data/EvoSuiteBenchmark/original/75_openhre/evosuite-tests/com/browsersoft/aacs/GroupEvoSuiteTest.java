/*
 * This file was automatically generated by EvoSuite
 */

package com.browsersoft.aacs;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.browsersoft.aacs.Group;
import java.util.ArrayList;
import java.util.Properties;
import java.util.Set;
import javax.naming.CompositeName;
import javax.naming.CompoundName;
import javax.naming.Context;
import javax.naming.InvalidNameException;
import javax.naming.Name;
import javax.naming.NameNotFoundException;
import javax.naming.NameParser;
import javax.naming.NamingEnumeration;
import javax.naming.NamingException;
import javax.naming.directory.Attributes;
import javax.naming.directory.BasicAttributes;
import javax.naming.directory.DirContext;
import javax.naming.directory.ModificationItem;
import javax.naming.directory.SearchControls;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class GroupEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Group group0 = new Group("", (ArrayList) arrayList0);
      assertNotNull(group0);
      
      group0.unbind("");
      assertEquals("cn=,ou=groups,dc=arch,dc=org", group0.getDn());
      assertEquals("", group0.getCn());
  }

  @Test
  public void test1()  throws Throwable  {
      Group group0 = new Group();
      String string0 = group0.getDn();
      assertNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      Group group0 = new Group();
      Object object0 = group0.removeFromEnvironment("");
      assertNull(object0);
  }

  @Test
  public void test3()  throws Throwable  {
      Group group0 = new Group("", "vIn' ,=]m~~c");
      assertNotNull(group0);
      
      group0.search("Ty[JT]{L;P%.?H;", group0.myAttrs);
      assertEquals("", group0.getCn());
      assertEquals("cn=,ou=groups,dc=arch,dc=org", group0.getDn());
  }

  @Test
  public void test4()  throws Throwable  {
      Group group0 = new Group("");
      BasicAttributes basicAttributes0 = (BasicAttributes)group0.getAttributes();
      assertEquals("", group0.getCn());
      assertEquals("{cn=cn: , member=member: cn=none}", basicAttributes0.toString());
      assertNotNull(basicAttributes0);
      assertEquals("cn=,ou=groups,dc=arch,dc=org", group0.getDn());
      assertEquals(true, basicAttributes0.isCaseIgnored());
  }

  @Test
  public void test5()  throws Throwable  {
      Group group0 = new Group();
      String[] stringArray0 = new String[10];
      SearchControls searchControls0 = new SearchControls(0, 284L, 0, stringArray0, false, false);
      NamingEnumeration<Object> namingEnumeration0 = group0.search((Name) null, "/mnt/fastdata/ac1gf/SF110/dist/75_openhre", searchControls0);
      assertNull(namingEnumeration0);
  }

  @Test
  public void test6()  throws Throwable  {
      Group group0 = new Group();
      NameParser nameParser0 = group0.getNameParser("");
      assertNull(nameParser0);
  }

  @Test
  public void test7()  throws Throwable  {
      Group group0 = new Group();
      String string0 = group0.composeName("", "");
      assertNull(string0);
  }

  @Test
  public void test8()  throws Throwable  {
      Group group0 = new Group("R+mm]", (ArrayList) null);
      assertNotNull(group0);
      
      group0.search("R+mm]", "R+mm]", (SearchControls) null);
      assertEquals("cn=R+mm],ou=groups,dc=arch,dc=org", group0.getDn());
      assertEquals("R+mm]", group0.getCn());
  }

  @Test
  public void test9()  throws Throwable  {
      Group group0 = new Group("W'ie%");
      group0.list("Using URL [");
      assertEquals("W'ie%", group0.getCn());
      assertEquals("cn=W'ie%,ou=groups,dc=arch,dc=org", group0.getDn());
  }

  @Test
  public void test10()  throws Throwable  {
      Group group0 = new Group();
      Properties properties0 = new Properties();
      CompoundName compoundName0 = new CompoundName("", properties0);
      group0.bind((Name) compoundName0, (Object) "");
      assertNull(group0.getDn());
  }

  @Test
  public void test11()  throws Throwable  {
      Group group0 = new Group();
      group0.rename("", "");
      assertNull(group0.getCn());
  }

  @Test
  public void test12()  throws Throwable  {
      Group group0 = new Group("");
      Properties properties0 = new Properties();
      CompoundName compoundName0 = new CompoundName("", properties0);
      group0.createSubcontext((Name) compoundName0, group0.myAttrs);
      assertEquals("", group0.getCn());
      assertEquals("cn=,ou=groups,dc=arch,dc=org", group0.getDn());
  }

  @Test
  public void test13()  throws Throwable  {
      Group group0 = new Group("", "vIn' ,=]m~~c");
      assertNotNull(group0);
      
      Properties properties0 = new Properties();
      CompoundName compoundName0 = new CompoundName("f6^*Z", properties0);
      Object[] objectArray0 = new Object[2];
      SearchControls searchControls0 = new SearchControls();
      group0.search((Name) compoundName0, "f6^*Z", objectArray0, searchControls0);
      assertEquals("", group0.getCn());
      assertEquals("cn=,ou=groups,dc=arch,dc=org", group0.getDn());
  }

  @Test
  public void test14()  throws Throwable  {
      Group group0 = new Group("", "vIn' ,=]m~~c");
      assertNotNull(group0);
      
      Properties properties0 = new Properties();
      group0.bind("f6^*Z", (Object) properties0);
      assertEquals("cn=,ou=groups,dc=arch,dc=org", group0.getDn());
      assertEquals("", group0.getCn());
  }

  @Test
  public void test15()  throws Throwable  {
      Group group0 = new Group();
      DirContext dirContext0 = group0.getSchemaClassDefinition("");
      assertNull(dirContext0);
  }

  @Test
  public void test16()  throws Throwable  {
      Group group0 = new Group();
      Object[] objectArray0 = new Object[1];
      String[] stringArray0 = new String[2];
      SearchControls searchControls0 = new SearchControls(130, 1024L, 130, stringArray0, false, false);
      NamingEnumeration<Object> namingEnumeration0 = group0.search("log4j warning: ", "log4j warning: ", objectArray0, searchControls0);
      assertNull(namingEnumeration0);
  }

  @Test
  public void test17()  throws Throwable  {
      Group group0 = new Group();
      CompositeName compositeName0 = new CompositeName("basedn");
      group0.destroySubcontext((Name) compositeName0);
      assertNull(group0.getDn());
  }

  @Test
  public void test18()  throws Throwable  {
      Group group0 = new Group("");
      group0.rebind("", (Object) null, group0.myAttrs);
      assertEquals("", group0.getCn());
      assertEquals("cn=,ou=groups,dc=arch,dc=org", group0.getDn());
  }

  @Test
  public void test19()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Group group0 = new Group("", (ArrayList) arrayList0);
      assertNotNull(group0);
      
      Set<Object> set0 = group0.getAllowedips();
      assertNotNull(set0);
      assertEquals("", group0.getCn());
      assertEquals("cn=,ou=groups,dc=arch,dc=org", group0.getDn());
  }

  @Test
  public void test20()  throws Throwable  {
      Group group0 = new Group();
      Context context0 = group0.createSubcontext("");
      assertNull(context0);
  }

  @Test
  public void test21()  throws Throwable  {
      Group group0 = new Group();
      group0.bind("", (Object) "/mnt/fastdata/ac1gf/SF110/dist/75_openhre", group0.myAttrs);
      assertNull(group0.getNameInNamespace());
  }

  @Test
  public void test22()  throws Throwable  {
      Group group0 = new Group("W'ie%");
      BasicAttributes basicAttributes0 = new BasicAttributes(true);
      group0.modifyAttributes("x5PzKkbE", (-1854), (Attributes) basicAttributes0);
      assertEquals("cn=W'ie%,ou=groups,dc=arch,dc=org", group0.getDn());
      assertEquals("W'ie%", group0.getCn());
  }

  @Test
  public void test23()  throws Throwable  {
      Group group0 = new Group();
      Properties properties0 = new Properties();
      CompoundName compoundName0 = new CompoundName("", properties0);
      Name name0 = group0.composeName((Name) compoundName0, (Name) compoundName0);
      assertNull(name0);
  }

  @Test
  public void test24()  throws Throwable  {
      Group group0 = new Group();
      DirContext dirContext0 = group0.getSchema("");
      assertNull(dirContext0);
  }

  @Test
  public void test25()  throws Throwable  {
      Group group0 = new Group("", "vIn' ,=]m~~c");
      assertNotNull(group0);
      
      Properties properties0 = new Properties();
      CompoundName compoundName0 = new CompoundName("f6^*Z", properties0);
      group0.getNameParser((Name) compoundName0);
      assertEquals("", group0.getCn());
      assertEquals("cn=,ou=groups,dc=arch,dc=org", group0.getDn());
  }

  @Test
  public void test26()  throws Throwable  {
      Group group0 = new Group();
      NamingEnumeration<Object> namingEnumeration0 = group0.list((Name) null);
      assertNull(namingEnumeration0);
  }

  @Test
  public void test27()  throws Throwable  {
      Group group0 = new Group();
      Object object0 = group0.lookup("");
      assertNull(object0);
  }

  @Test
  public void test28()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Group group0 = new Group("", (ArrayList) arrayList0);
      assertNotNull(group0);
      
      group0.rebind("lw/Dmi&7", "{}");
      assertEquals("", group0.getCn());
      assertEquals("cn=,ou=groups,dc=arch,dc=org", group0.getDn());
  }

  @Test
  public void test29()  throws Throwable  {
      Group group0 = new Group("");
      Properties properties0 = new Properties();
      CompoundName compoundName0 = new CompoundName("", properties0);
      group0.lookupLink((Name) compoundName0);
      assertEquals("cn=,ou=groups,dc=arch,dc=org", group0.getDn());
      assertEquals("", group0.getCn());
  }

  @Test
  public void test30()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Group group0 = new Group("", (ArrayList) arrayList0);
      assertNotNull(group0);
      
      CompositeName compositeName0 = new CompositeName("");
      group0.createSubcontext((Name) compositeName0);
      assertEquals("", group0.getCn());
      assertEquals("cn=,ou=groups,dc=arch,dc=org", group0.getDn());
  }

  @Test
  public void test31()  throws Throwable  {
      Group group0 = new Group("");
      group0.lookupLink("");
      assertEquals("cn=,ou=groups,dc=arch,dc=org", group0.getDn());
      assertEquals("", group0.getCn());
  }

  @Test
  public void test32()  throws Throwable  {
      Group group0 = new Group();
      CompositeName compositeName0 = new CompositeName("basedn");
      group0.rename((Name) compositeName0, (Name) compositeName0);
      assertNull(group0.getNameInNamespace());
  }

  @Test
  public void test33()  throws Throwable  {
      Group group0 = new Group();
      String string0 = group0.getCn();
      assertNull(string0);
  }

  @Test
  public void test34()  throws Throwable  {
      Group group0 = new Group();
      group0.setCn("");
      assertEquals("", group0.getCn());
  }

  @Test
  public void test35()  throws Throwable  {
      Group group0 = new Group();
      group0.unbind((Name) null);
      assertNull(group0.getDn());
  }

  @Test
  public void test36()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Group group0 = new Group("", (ArrayList) arrayList0);
      assertNotNull(group0);
      
      group0.search("", group0.myAttrs, (String[]) null);
      assertEquals("", group0.getCn());
      assertEquals("cn=,ou=groups,dc=arch,dc=org", group0.getDn());
  }

  @Test
  public void test37()  throws Throwable  {
      Group group0 = new Group("");
      CompositeName compositeName0 = new CompositeName();
      group0.listBindings((Name) compositeName0);
      assertEquals("", group0.getCn());
      assertEquals("cn=,ou=groups,dc=arch,dc=org", group0.getDn());
  }

  @Test
  public void test38()  throws Throwable  {
      Group group0 = new Group("");
      Properties properties0 = new Properties();
      CompoundName compoundName0 = new CompoundName("", properties0);
      String[] stringArray0 = new String[7];
      group0.search((Name) compoundName0, group0.myAttrs, stringArray0);
      assertEquals("cn=,ou=groups,dc=arch,dc=org", group0.getDn());
      assertEquals("", group0.getCn());
  }

  @Test
  public void test39()  throws Throwable  {
      Group group0 = new Group();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Object object0 = group0.addToEnvironment("", (Object) arrayList0);
      assertNull(object0);
  }

  @Test
  public void test40()  throws Throwable  {
      Group group0 = new Group();
      Object object0 = group0.lookup((Name) null);
      assertNull(object0);
  }

  @Test
  public void test41()  throws Throwable  {
      Group group0 = new Group();
      String string0 = group0.getNameInNamespace();
      assertNull(string0);
  }

  @Test
  public void test42()  throws Throwable  {
      Group group0 = new Group("W'ie%");
      BasicAttributes basicAttributes0 = new BasicAttributes(true);
      CompositeName compositeName0 = new CompositeName("W'ie%");
      group0.search((Name) compositeName0, (Attributes) basicAttributes0);
      assertEquals("W'ie%", group0.getCn());
      assertEquals("cn=W'ie%,ou=groups,dc=arch,dc=org", group0.getDn());
  }

  @Test
  public void test43()  throws Throwable  {
      Group group0 = new Group("R+mm]", (ArrayList) null);
      assertNotNull(group0);
      
      group0.getEnvironment();
      assertEquals("R+mm]", group0.getCn());
      assertEquals("cn=R+mm],ou=groups,dc=arch,dc=org", group0.getDn());
  }

  @Test
  public void test44()  throws Throwable  {
      Group group0 = new Group();
      CompositeName compositeName0 = new CompositeName("");
      DirContext dirContext0 = group0.getSchema((Name) compositeName0);
      assertNull(dirContext0);
  }

  @Test
  public void test45()  throws Throwable  {
      Group group0 = new Group("");
      CompositeName compositeName0 = new CompositeName();
      BasicAttributes basicAttributes0 = new BasicAttributes(true);
      group0.rebind((Name) compositeName0, (Object) "UTF8", (Attributes) basicAttributes0);
      assertEquals("cn=,ou=groups,dc=arch,dc=org", group0.getDn());
      assertEquals("", group0.getCn());
  }

  @Test
  public void test46()  throws Throwable  {
      Group group0 = new Group("W'ie%");
      CompositeName compositeName0 = new CompositeName("W'ie%");
      group0.getSchemaClassDefinition((Name) compositeName0);
      assertEquals("W'ie%", group0.getCn());
      assertEquals("cn=W'ie%,ou=groups,dc=arch,dc=org", group0.getDn());
  }

  @Test
  public void test47()  throws Throwable  {
      Group group0 = new Group("IG]a,S?;R");
      assertEquals("cn=IG]a,S?;R,ou=groups,dc=arch,dc=org", group0.getDn());
      
      group0.setDn("IG]a,S?;R");
      assertEquals("IG]a,S?;R", group0.getDn());
  }

  @Test
  public void test48()  throws Throwable  {
      Group group0 = new Group();
      ModificationItem[] modificationItemArray0 = new ModificationItem[1];
      group0.modifyAttributes("V", modificationItemArray0);
      assertNull(group0.getNameInNamespace());
  }

  @Test
  public void test49()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Group group0 = new Group("", (ArrayList) arrayList0);
      assertNotNull(group0);
      
      group0.destroySubcontext("");
      assertEquals("", group0.getCn());
      assertEquals("cn=,ou=groups,dc=arch,dc=org", group0.getDn());
  }

  @Test
  public void test50()  throws Throwable  {
      Group group0 = new Group();
      NamingEnumeration<Object> namingEnumeration0 = group0.listBindings("V");
      assertNull(namingEnumeration0);
  }

  @Test
  public void test51()  throws Throwable  {
      Group group0 = new Group("IG]a,S?;R");
      group0.close();
      assertEquals("IG]a,S?;R", group0.getCn());
      assertEquals("cn=IG]a,S?;R,ou=groups,dc=arch,dc=org", group0.getDn());
  }

  @Test
  public void test52()  throws Throwable  {
      Group group0 = new Group();
      group0.modifyAttributes((Name) null, 0, group0.myAttrs);
      assertNull(group0.getNameInNamespace());
  }

  @Test
  public void test53()  throws Throwable  {
      Group group0 = new Group();
      Properties properties0 = new Properties();
      CompoundName compoundName0 = new CompoundName("log4j warning: ", properties0);
      try {
        group0.getAttributes((Name) compoundName0);
        fail("Expecting exception: NameNotFoundException");
      } catch(NameNotFoundException e) {
      }
  }

  @Test
  public void test54()  throws Throwable  {
      Group group0 = new Group("", "vIn' ,=]m~~c");
      assertNotNull(group0);
      
      Properties properties0 = new Properties();
      CompoundName compoundName0 = new CompoundName("f6^*Z", properties0);
      group0.rebind((Name) compoundName0, (Object) compoundName0);
      assertEquals("cn=,ou=groups,dc=arch,dc=org", group0.getDn());
      assertEquals("", group0.getCn());
  }

  @Test
  public void test55()  throws Throwable  {
      Group group0 = new Group("g3J(", (ArrayList) null);
      assertNotNull(group0);
      
      CompositeName compositeName0 = new CompositeName();
      group0.bind((Name) compositeName0, (Object) null, (Attributes) null);
      assertEquals("cn=g3J(,ou=groups,dc=arch,dc=org", group0.getDn());
      assertEquals("g3J(", group0.getCn());
  }

  @Test
  public void test56()  throws Throwable  {
      Group group0 = new Group("");
      group0.createSubcontext("", group0.myAttrs);
      assertEquals("", group0.getCn());
      assertEquals("cn=,ou=groups,dc=arch,dc=org", group0.getDn());
  }

  @Test
  public void test57()  throws Throwable  {
      Group group0 = new Group("", "");
      assertEquals("cn=,ou=groups,dc=arch,dc=org", group0.getDn());
      assertEquals("", group0.getCn());
      assertNotNull(group0);
  }

  @Test
  public void test58()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("");
      Group group0 = new Group("", (ArrayList) arrayList0);
      assertEquals("cn=,ou=groups,dc=arch,dc=org", group0.getDn());
      assertEquals("", group0.getCn());
      assertNotNull(group0);
  }

  @Test
  public void test59()  throws Throwable  {
      Group group0 = new Group();
      group0.addAllowedip("basedn");
      assertNull(group0.getCn());
  }

  @Test
  public void test60()  throws Throwable  {
      Group group0 = new Group();
      group0.addAllowedip("0");
      assertNull(group0.getDn());
  }

  @Test
  public void test61()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Group group0 = new Group("", (ArrayList) arrayList0);
      assertNotNull(group0);
      
      BasicAttributes basicAttributes0 = (BasicAttributes)group0.getAttributes("");
      assertNotNull(basicAttributes0);
      assertEquals("{cn=cn: , member=member: cn=none}", basicAttributes0.toString());
      assertEquals("", group0.getCn());
      assertEquals("cn=,ou=groups,dc=arch,dc=org", group0.getDn());
  }

  @Test
  public void test62()  throws Throwable  {
      Group group0 = new Group("-q \"\"cpw -pw ", "-q \"\"cpw -pw ");
      assertNotNull(group0);
      
      String[] stringArray0 = new String[4];
      try {
        group0.getAttributes("-q \"\"cpw -pw ", stringArray0);
        fail("Expecting exception: NameNotFoundException");
      } catch(NameNotFoundException e) {
      }
  }

  @Test
  public void test63()  throws Throwable  {
      Group group0 = new Group();
      CompositeName compositeName0 = new CompositeName("");
      String[] stringArray0 = new String[10];
      stringArray0[0] = "/mnt/fastdata/ac1gf/SF110/dist/75_openhre";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "/mnt/fastdata/ac1gf/SF110/dist/75_openhre";
      stringArray0[4] = "/mnt/fastdata/ac1gf/SF110/dist/75_openhre";
      stringArray0[5] = "/mnt/fastdata/ac1gf/SF110/dist/75_openhre";
      stringArray0[6] = "cn=none";
      stringArray0[7] = "";
      stringArray0[8] = "/mnt/fastdata/ac1gf/SF110/dist/75_openhre";
      stringArray0[9] = "";
      BasicAttributes basicAttributes0 = (BasicAttributes)group0.getAttributes((Name) compositeName0, stringArray0);
      assertEquals(true, basicAttributes0.isCaseIgnored());
      assertNotNull(basicAttributes0);
  }
}
