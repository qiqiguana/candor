/*
 * This file was automatically generated by EvoSuite
 */

package com.browsersoft.aacs;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.browsersoft.aacs.User;
import java.util.Properties;
import javax.naming.ldap.LdapContext;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class UserEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      User user0 = new User("TT::Qwp=fP#fD7", "TT::Qwp=fP#fD7");
      user0.setEmail("TT::Qwp=fP#fD7");
      assertEquals(false, user0.getPasschange());
      assertEquals("dn: cn=TT::Qwp=fP#fD7, o=, c=\ncn: TT::Qwp=fP#fD7\nid: TT::Qwp=fP#fD7\nsn: \nuserPassword: \nobjectClass: top\nobjectClass: person\n", user0.toString());
      assertEquals("cn=TT::Qwp=fP#fD7, o=, c=", user0.getDN());
  }

  @Test
  public void test1()  throws Throwable  {
      User user0 = new User("yOkR", "yOkR");
      user0.update(user0);
      assertEquals("dn: cn=yOkR, o=, c=\ncn: yOkR\nid: yOkR\nsn: \nuserPassword: \nobjectClass: top\nobjectClass: person\n", user0.toString());
      assertEquals(false, user0.getPasschange());
  }

  @Test
  public void test2()  throws Throwable  {
      User user0 = new User();
      String string0 = user0.getPassvalidstart();
      assertEquals(false, user0.getPasschange());
      assertNotNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      User user0 = new User("TT::Qwp=fP#fD7", "TT::Qwp=fP#fD7");
      boolean boolean0 = user0.getPasschange();
      assertEquals(false, boolean0);
      assertEquals("dn: cn=TT::Qwp=fP#fD7, o=, c=\ncn: TT::Qwp=fP#fD7\nid: TT::Qwp=fP#fD7\nsn: \nuserPassword: \nobjectClass: top\nobjectClass: person\n", user0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      User user0 = new User("TT::Qwp=fP#fD7", "TT::Qwp=fP#fD7");
      user0.setPassvalidstart("TT::Qwp=fP#fD7");
      assertEquals(false, user0.getPasschange());
      assertEquals("dn: cn=TT::Qwp=fP#fD7, o=, c=\ncn: TT::Qwp=fP#fD7\nid: TT::Qwp=fP#fD7\nsn: \nuserPassword: \nobjectClass: top\nobjectClass: person\n", user0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      User user0 = new User();
      user0.setIpAddr("A");
      boolean boolean0 = user0.equals((Object) user0);
      assertEquals("dn: cn=, o=, c=\ncn: \nid: \nsn: \nuserPassword: \nip: A\nobjectClass: top\nobjectClass: person\n", user0.toString());
      assertEquals(true, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      User user0 = new User("yOkR", "yOkR");
      Properties properties0 = user0.getCredentials();
      assertEquals("{EMail=yOkR, subjectDN=cn=yOkR, o=, c=}", properties0.toString());
      assertEquals(false, user0.getPasschange());
      assertNotNull(properties0);
  }

  @Test
  public void test7()  throws Throwable  {
      User user0 = new User("TT::Qwp=fP#fD7", "TT::Qwp=fP#fD7");
      user0.setCountry("TT::Qwp=fP#fD7");
      assertEquals("cn=TT::Qwp=fP#fD7, o=, c=TT::Qwp=fP#fD7", user0.getDN());
      assertEquals("dn: cn=TT::Qwp=fP#fD7, o=, c=TT::Qwp=fP#fD7\ncn: TT::Qwp=fP#fD7\nid: TT::Qwp=fP#fD7\nsn: \nuserPassword: \nobjectClass: top\nobjectClass: person\n", user0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      User user0 = new User();
      user0.getAllowedips();
      assertEquals(false, user0.getPasschange());
  }

  @Test
  public void test9()  throws Throwable  {
      User user0 = new User("yOkR", "yOkR");
      user0.setLdapContext((LdapContext) null);
      assertEquals(false, user0.getPasschange());
      assertEquals("dn: cn=yOkR, o=, c=\ncn: yOkR\nid: yOkR\nsn: \nuserPassword: \nobjectClass: top\nobjectClass: person\n", user0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      User user0 = new User();
      // Undeclared exception!
      try {
        user0.hashCode();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      User user0 = new User();
      String string0 = user0.getPassrenewal();
      assertNotNull(string0);
      assertEquals(false, user0.getPasschange());
  }

  @Test
  public void test12()  throws Throwable  {
      User user0 = new User();
      user0.getLdapContext();
      assertEquals(false, user0.getPasschange());
  }

  @Test
  public void test13()  throws Throwable  {
      User.setSalt("TT::Qwp=fP#fD7");
  }

  @Test
  public void test14()  throws Throwable  {
      User user0 = new User();
      user0.setUserName("");
      assertEquals("cn=, o=, c=", user0.getDN());
      assertEquals(false, user0.getPasschange());
      assertEquals("dn: cn=, o=, c=\ncn: \nid: \nsn: \nuserPassword: \nobjectClass: top\nobjectClass: person\n", user0.toString());
  }

  @Test
  public void test15()  throws Throwable  {
      User user0 = new User("yOkR", "yOkR");
      String string0 = user0.getEmail();
      assertNotNull(string0);
      assertEquals(false, user0.getPasschange());
      assertEquals("dn: cn=yOkR, o=, c=\ncn: yOkR\nid: yOkR\nsn: \nuserPassword: \nobjectClass: top\nobjectClass: person\n", user0.toString());
  }

  @Test
  public void test16()  throws Throwable  {
      User user0 = new User();
      user0.setPassrenewal("\" xariaq`le.");
      assertEquals(false, user0.getPasschange());
  }

  @Test
  public void test17()  throws Throwable  {
      User user0 = new User("yOkR", "yOkR");
      user0.setPasschange(false);
      assertEquals(false, user0.getPasschange());
      assertEquals("dn: cn=yOkR, o=, c=\ncn: yOkR\nid: yOkR\nsn: \nuserPassword: \nobjectClass: top\nobjectClass: person\n", user0.toString());
  }

  @Test
  public void test18()  throws Throwable  {
      User user0 = new User("#nl>O}KHq", "#nl>O}KHq");
      user0.setOrg("#nl>O}KHq");
      assertEquals("cn=#nl>O}KHq, o=#nl>O}KHq, c=", user0.getDN());
      assertEquals(false, user0.getPasschange());
  }

  @Test
  public void test19()  throws Throwable  {
      User user0 = new User();
      user0.setSurName("G{");
      assertEquals(false, user0.getPasschange());
  }

  @Test
  public void test20()  throws Throwable  {
      User user0 = new User();
      user0.setPassword((String) null);
      user0.encodePassword("");
      assertEquals(false, user0.getPasschange());
  }

  @Test
  public void test21()  throws Throwable  {
      User user0 = new User();
      user0.getActivegroups();
      assertEquals(false, user0.getPasschange());
  }

  @Test
  public void test22()  throws Throwable  {
      User user0 = new User();
      user0.setUserId("");
      assertEquals("dn: cn=, o=, c=\ncn: \nid: \nsn: \nuserPassword: \nobjectClass: top\nobjectClass: person\n", user0.toString());
      assertEquals(false, user0.getPasschange());
  }

  @Test
  public void test23()  throws Throwable  {
      User user0 = new User();
      user0.encodePassword((String) null);
      assertEquals(false, user0.getPasschange());
  }

  @Test
  public void test24()  throws Throwable  {
      User user0 = new User("{ssha", "{ssha");
      user0.encodePassword("");
      assertEquals("dn: cn={ssha, o=, c=\ncn: {ssha\nid: {ssha\nsn: \nuserPassword: \nobjectClass: top\nobjectClass: person\n", user0.toString());
      assertEquals(false, user0.getPasschange());
  }

  @Test
  public void test25()  throws Throwable  {
      User user0 = new User("TT::Qwp=fP#fD7", "TT::Qwp=fP#fD7");
      user0.checkPassword("TT::Qwp=fP#fD7");
      assertEquals(false, user0.getPasschange());
      assertEquals("dn: cn=TT::Qwp=fP#fD7, o=, c=\ncn: TT::Qwp=fP#fD7\nid: TT::Qwp=fP#fD7\nsn: \nuserPassword: \nobjectClass: top\nobjectClass: person\n", user0.toString());
      assertEquals("cn=TT::Qwp=fP#fD7, o=, c=", user0.getDN());
  }

  @Test
  public void test26()  throws Throwable  {
      User user0 = new User();
      user0.setPassword((String) null);
      boolean boolean0 = user0.checkPassword("");
      assertEquals(false, boolean0);
      assertEquals(false, user0.getPasschange());
  }

  @Test
  public void test27()  throws Throwable  {
      User user0 = new User();
      user0.addRole("");
      user0.addRole("cn=033");
      assertEquals("dn: cn=, o=, c=\ncn: \nid: \nsn: \nuserPassword: \nrole: cn=033\nrole: \nobjectClass: top\nobjectClass: person\n", user0.toString());
  }

  @Test
  public void test28()  throws Throwable  {
      User user0 = new User("{sha}gzojofx6?v;bz", "{sha}gzojofx6?v;bz");
      user0.addGroup("{sha}gzojofx6?v;bz");
      user0.addGroup("{sha}gzojofx6?v;bz");
      assertEquals("dn: cn={sha}gzojofx6?v;bz, o=, c=\ncn: {sha}gzojofx6?v;bz\nid: {sha}gzojofx6?v;bz\nsn: \nuserPassword: \ngroup: {sha}gzojofx6?v;bz\nobjectClass: top\nobjectClass: person\n", user0.toString());
      assertEquals(false, user0.getPasschange());
  }

  @Test
  public void test29()  throws Throwable  {
      User user0 = new User("#nl>O}KHq", "#nl>O}KHq");
      user0.addActivegroup("#nl>O}KHq");
      user0.addActivegroup("#nl>O}KHq");
      assertEquals("dn: cn=#nl>O}KHq, o=, c=\ncn: #nl>O}KHq\nid: #nl>O}KHq\nsn: \nuserPassword: \nobjectClass: top\nobjectClass: person\n", user0.toString());
      assertEquals(false, user0.getPasschange());
  }

  @Test
  public void test30()  throws Throwable  {
      User user0 = new User("yOkR", "yOkR");
      user0.addAllowedip("yOkR");
      user0.addAllowedip("yOkR");
      assertEquals("dn: cn=yOkR, o=, c=\ncn: yOkR\nid: yOkR\nsn: \nuserPassword: \nobjectClass: top\nobjectClass: person\n", user0.toString());
      assertEquals(false, user0.getPasschange());
  }

  @Test
  public void test31()  throws Throwable  {
      User user0 = new User("xml", "xml");
      user0.setDN((String) null);
      assertEquals(false, user0.getPasschange());
      assertEquals("dn: cn=xml, o=, c=\ncn: xml\nid: xml\nsn: \nuserPassword: \nobjectClass: top\nobjectClass: person\n", user0.toString());
      assertEquals("cn=xml, o=, c=", user0.getDN());
  }

  @Test
  public void test32()  throws Throwable  {
      User user0 = new User();
      user0.setDN("cn=033");
      assertEquals("cn=033, o=, c=", user0.getDN());
      assertEquals("033", user0.getUserName());
  }

  @Test
  public void test33()  throws Throwable  {
      User user0 = new User();
      user0.setDN("dn: cn=, o=null, c=\ncn: \nid: \nsn: \nuserPassword: \nobjectClass: top\nobjectClass: person\n");
      assertEquals("dn: cn=, o=null, c=\ncn: \nid: \nsn: \nuserPassword: \nobjectClass: top\nobjectClass: person\n\ncn: \nid: \nsn: \nuserPassword: \nobjectClass: top\nobjectClass: person\n", user0.toString());
      assertEquals("null", user0.getOrg());
  }

  @Test
  public void test34()  throws Throwable  {
      User user0 = new User();
      user0.addRole("\" xariaq`le.");
      String string0 = user0.toString();
      assertEquals("dn: cn=, o=, c=\ncn: \nid: \nsn: \nuserPassword: \nrole: \" xariaq`le.\nobjectClass: top\nobjectClass: person\n", user0.toString());
      assertNotNull(string0);
      assertEquals("dn: cn=, o=, c=\ncn: \nid: \nsn: \nuserPassword: \nrole: \" xariaq`le.\nobjectClass: top\nobjectClass: person\n", string0);
  }

  @Test
  public void test35()  throws Throwable  {
      User user0 = new User("yOkR", "yOkR");
      user0.addGroup("");
      String string0 = user0.toString();
      assertNotNull(string0);
      assertEquals("dn: cn=yOkR, o=, c=\ncn: yOkR\nid: yOkR\nsn: \nuserPassword: \ngroup: \nobjectClass: top\nobjectClass: person\n", user0.toString());
      assertEquals("dn: cn=yOkR, o=, c=\ncn: yOkR\nid: yOkR\nsn: \nuserPassword: \ngroup: \nobjectClass: top\nobjectClass: person\n", string0);
  }

  @Test
  public void test36()  throws Throwable  {
      User user0 = new User("TT::Qwp=fP#fD7", "TT::Qwp=fP#fD7");
      user0.setIpAddr("TT::Qwp=fP#fD7");
      String string0 = user0.toString();
      assertEquals("dn: cn=TT::Qwp=fP#fD7, o=, c=\ncn: TT::Qwp=fP#fD7\nid: TT::Qwp=fP#fD7\nsn: \nuserPassword: \nip: TT::Qwp=fP#fD7\nobjectClass: top\nobjectClass: person\n", user0.toString());
      assertNotNull(string0);
      assertEquals("dn: cn=TT::Qwp=fP#fD7, o=, c=\ncn: TT::Qwp=fP#fD7\nid: TT::Qwp=fP#fD7\nsn: \nuserPassword: \nip: TT::Qwp=fP#fD7\nobjectClass: top\nobjectClass: person\n", string0);
  }

  @Test
  public void test37()  throws Throwable  {
      User user0 = new User();
      user0.addRole("");
      user0.addGroup("");
      String string0 = user0.toString("cn=033");
      assertNotNull(string0);
      assertEquals("dn: cn=, o=, c=\ncn: \nid: \nsn: \nuserPassword: \nrole: \ngroup: \nobjectClass: top\nobjectClass: person\n", user0.toString());
      assertEquals("dn: cn=, o=, c=cn=033cn: cn=033id: cn=033sn: cn=033userPassword: cn=033role: cn=033group: cn=033objectClass: topcn=033objectClass: personcn=033", string0);
  }

  @Test
  public void test38()  throws Throwable  {
      User user0 = new User();
      User user1 = new User("G{", "G{");
      boolean boolean0 = user0.equals((Object) user1);
      assertEquals(false, user0.getPasschange());
      assertEquals(false, boolean0);
      assertFalse(user1.equals(user0));
      assertEquals("dn: cn=G{, o=, c=\ncn: G{\nid: G{\nsn: \nuserPassword: \nobjectClass: top\nobjectClass: person\n", user1.toString());
  }

  @Test
  public void test39()  throws Throwable  {
      User user0 = new User("TT::Qwp=fP#fD7", "TT::Qwp=fP#fD7");
      user0.encodePassword("TT::Qwp=fP#fD7");
      user0.encodePassword("TT::Qwp=fP#fD7");
      assertEquals("{SSHA}ua4ArHXhxOAmdPeESC0Wjnu4UadUVDo6UXdwPWZQI2ZENw==", user0.getPassword());
      assertEquals("dn: cn=TT::Qwp=fP#fD7, o=, c=\ncn: TT::Qwp=fP#fD7\nid: TT::Qwp=fP#fD7\nsn: \nuserPassword: {SSHA}ua4ArHXhxOAmdPeESC0Wjnu4UadUVDo6UXdwPWZQI2ZENw==\nobjectClass: top\nobjectClass: person\n", user0.toString());
  }

  @Test
  public void test40()  throws Throwable  {
      User user0 = new User("{sha}a.r,=cjafk", "{sha}a.r,=cjafk");
      // Undeclared exception!
      try {
        user0.checkDigest("{sha}a.r,=cjafk", "{sha}a.r,=cjafk");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test41()  throws Throwable  {
      User user0 = new User("TT::Qwp=fP#fD7", "TT::Qwp=fP#fD7");
      user0.encodePassword("TT::Qwp=fP#fD7");
      boolean boolean0 = user0.checkPassword("TT::Qwp=fP#fD7");
      assertEquals("{SSHA}ua4ArHXhxOAmdPeESC0Wjnu4UadUVDo6UXdwPWZQI2ZENw==", user0.getPassword());
      assertEquals(true, boolean0);
  }
}
