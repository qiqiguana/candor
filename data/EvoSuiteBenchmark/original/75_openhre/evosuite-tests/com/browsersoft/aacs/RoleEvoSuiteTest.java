/*
 * This file was automatically generated by EvoSuite
 */

package com.browsersoft.aacs;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.browsersoft.aacs.Role;
import java.util.Hashtable;
import java.util.Properties;
import javax.naming.CompositeName;
import javax.naming.CompoundName;
import javax.naming.Context;
import javax.naming.InvalidNameException;
import javax.naming.Name;
import javax.naming.NameNotFoundException;
import javax.naming.NameParser;
import javax.naming.NamingEnumeration;
import javax.naming.NamingException;
import javax.naming.directory.Attributes;
import javax.naming.directory.BasicAttributes;
import javax.naming.directory.DirContext;
import javax.naming.directory.ModificationItem;
import javax.naming.directory.SearchControls;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class RoleEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Role role0 = new Role();
      CompositeName compositeName0 = new CompositeName();
      role0.rebind((Name) compositeName0, (Object) "");
      assertEquals("", compositeName0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      Role role0 = new Role();
      Properties properties0 = new Properties();
      CompoundName compoundName0 = new CompoundName("", properties0);
      Object object0 = role0.lookupLink((Name) compoundName0);
      assertNull(object0);
  }

  @Test
  public void test2()  throws Throwable  {
      Role role0 = new Role("");
      assertNotNull(role0);
      
      role0.search("", role0.myAttrs);
      assertEquals("cn=,ou=roles,dc=arch,dc=org", role0.getDn());
      assertEquals("", role0.getCn());
  }

  @Test
  public void test3()  throws Throwable  {
      Role role0 = new Role();
      NameParser nameParser0 = role0.getNameParser("");
      assertNull(nameParser0);
  }

  @Test
  public void test4()  throws Throwable  {
      Role role0 = new Role();
      Object object0 = role0.lookup("w8jlHY3w@8Jt.Bp&");
      assertNull(object0);
  }

  @Test
  public void test5()  throws Throwable  {
      Role role0 = new Role();
      ModificationItem[] modificationItemArray0 = new ModificationItem[3];
      role0.modifyAttributes((Name) null, modificationItemArray0);
      assertNull(role0.getNameInNamespace());
  }

  @Test
  public void test6()  throws Throwable  {
      Role role0 = new Role();
      Properties properties0 = new Properties();
      CompoundName compoundName0 = new CompoundName("", properties0);
      role0.bind((Name) compoundName0, (Object) "");
      assertNull(role0.getNameInNamespace());
  }

  @Test
  public void test7()  throws Throwable  {
      Role role0 = new Role();
      DirContext dirContext0 = role0.getSchema("/LZ");
      assertNull(dirContext0);
  }

  @Test
  public void test8()  throws Throwable  {
      Role role0 = new Role();
      Properties properties0 = new Properties();
      CompoundName compoundName0 = new CompoundName("b", properties0);
      NameParser nameParser0 = role0.getNameParser((Name) compoundName0);
      assertNull(nameParser0);
  }

  @Test
  public void test9()  throws Throwable  {
      Role role0 = new Role();
      CompositeName compositeName0 = new CompositeName("w8jlHY3w@8Jt.Bp&");
      Context context0 = role0.createSubcontext((Name) compositeName0);
      assertNull(context0);
  }

  @Test
  public void test10()  throws Throwable  {
      Role role0 = new Role("+; ZU$I");
      assertNotNull(role0);
      
      CompositeName compositeName0 = new CompositeName();
      role0.rename((Name) compositeName0, (Name) compositeName0);
      assertEquals("+; ZU$I", role0.getCn());
      assertEquals("cn=+; ZU$I,ou=roles,dc=arch,dc=org", role0.getDn());
  }

  @Test
  public void test11()  throws Throwable  {
      Role role0 = new Role();
      BasicAttributes basicAttributes0 = new BasicAttributes();
      String[] stringArray0 = new String[19];
      NamingEnumeration<Object> namingEnumeration0 = role0.search("", (Attributes) basicAttributes0, stringArray0);
      assertNull(namingEnumeration0);
  }

  @Test
  public void test12()  throws Throwable  {
      Role role0 = new Role();
      CompositeName compositeName0 = new CompositeName();
      NamingEnumeration<Object> namingEnumeration0 = role0.listBindings((Name) compositeName0);
      assertNull(namingEnumeration0);
  }

  @Test
  public void test13()  throws Throwable  {
      Role role0 = new Role("+; ZU$I");
      assertNotNull(role0);
      
      role0.destroySubcontext("+; ZU$I");
      assertEquals("+; ZU$I", role0.getCn());
      assertEquals("cn=+; ZU$I,ou=roles,dc=arch,dc=org", role0.getDn());
  }

  @Test
  public void test14()  throws Throwable  {
      Role role0 = new Role();
      CompositeName compositeName0 = new CompositeName();
      Object object0 = role0.lookup((Name) compositeName0);
      assertNull(object0);
  }

  @Test
  public void test15()  throws Throwable  {
      Role role0 = new Role();
      CompositeName compositeName0 = new CompositeName(";M_dl0vpsSL");
      BasicAttributes basicAttributes0 = new BasicAttributes();
      role0.rebind((Name) compositeName0, (Object) role0, (Attributes) basicAttributes0);
      assertEquals(false, compositeName0.isEmpty());
  }

  @Test
  public void test16()  throws Throwable  {
      Role role0 = new Role();
      CompositeName compositeName0 = new CompositeName();
      NamingEnumeration<Object> namingEnumeration0 = role0.list((Name) compositeName0);
      assertNull(namingEnumeration0);
  }

  @Test
  public void test17()  throws Throwable  {
      Role role0 = new Role();
      Properties properties0 = new Properties();
      CompoundName compoundName0 = new CompoundName("", properties0);
      DirContext dirContext0 = role0.getSchemaClassDefinition((Name) compoundName0);
      assertNull(dirContext0);
  }

  @Test
  public void test18()  throws Throwable  {
      Role role0 = new Role();
      role0.setDn("");
      assertEquals("", role0.getDn());
  }

  @Test
  public void test19()  throws Throwable  {
      Role role0 = new Role();
      Properties properties0 = new Properties();
      CompoundName compoundName0 = new CompoundName("/LZ", properties0);
      role0.modifyAttributes((Name) compoundName0, 210, role0.myAttrs);
      assertNull(role0.getNameInNamespace());
  }

  @Test
  public void test20()  throws Throwable  {
      Role role0 = new Role();
      role0.unbind("YB");
      assertNull(role0.getDn());
  }

  @Test
  public void test21()  throws Throwable  {
      Role role0 = new Role();
      DirContext dirContext0 = role0.getSchemaClassDefinition("");
      assertNull(dirContext0);
  }

  @Test
  public void test22()  throws Throwable  {
      Role role0 = new Role("");
      assertNotNull(role0);
      
      role0.setCn("");
      assertEquals("cn=,ou=roles,dc=arch,dc=org", role0.getDn());
      assertEquals("", role0.getCn());
  }

  @Test
  public void test23()  throws Throwable  {
      Role role0 = new Role();
      DirContext dirContext0 = role0.createSubcontext("java.naming.provider.url", role0.myAttrs);
      assertNull(dirContext0);
  }

  @Test
  public void test24()  throws Throwable  {
      Role role0 = new Role();
      String string0 = role0.getNameInNamespace();
      assertNull(string0);
  }

  @Test
  public void test25()  throws Throwable  {
      Role role0 = new Role();
      role0.bind((String) null, "YB");
      assertNull(role0.getNameInNamespace());
  }

  @Test
  public void test26()  throws Throwable  {
      Role role0 = new Role();
      ModificationItem[] modificationItemArray0 = new ModificationItem[3];
      role0.modifyAttributes("u>ZUAS57@", modificationItemArray0);
      assertNull(role0.getNameInNamespace());
  }

  @Test
  public void test27()  throws Throwable  {
      Role role0 = new Role();
      BasicAttributes basicAttributes0 = new BasicAttributes();
      DirContext dirContext0 = role0.createSubcontext((Name) null, (Attributes) basicAttributes0);
      assertNull(dirContext0);
  }

  @Test
  public void test28()  throws Throwable  {
      Role role0 = new Role();
      CompositeName compositeName0 = new CompositeName();
      DirContext dirContext0 = role0.getSchema((Name) compositeName0);
      assertNull(dirContext0);
  }

  @Test
  public void test29()  throws Throwable  {
      Role role0 = new Role("+; ZU$I");
      assertNotNull(role0);
      
      role0.close();
      assertEquals("cn=+; ZU$I,ou=roles,dc=arch,dc=org", role0.getDn());
      assertEquals("+; ZU$I", role0.getCn());
  }

  @Test
  public void test30()  throws Throwable  {
      Role role0 = new Role();
      CompositeName compositeName0 = new CompositeName();
      NamingEnumeration<Object> namingEnumeration0 = role0.search((Name) compositeName0, "u", (SearchControls) null);
      assertNull(namingEnumeration0);
  }

  @Test
  public void test31()  throws Throwable  {
      Role role0 = new Role("");
      assertNotNull(role0);
      
      Object[] objectArray0 = new Object[20];
      SearchControls searchControls0 = new SearchControls();
      role0.search("", "", objectArray0, searchControls0);
      assertEquals("", role0.getCn());
      assertEquals("cn=,ou=roles,dc=arch,dc=org", role0.getDn());
  }

  @Test
  public void test32()  throws Throwable  {
      Role role0 = new Role();
      CompositeName compositeName0 = new CompositeName();
      Object[] objectArray0 = new Object[2];
      NamingEnumeration<Object> namingEnumeration0 = role0.search((Name) compositeName0, "", objectArray0, (SearchControls) null);
      assertNull(namingEnumeration0);
  }

  @Test
  public void test33()  throws Throwable  {
      Role role0 = new Role();
      CompositeName compositeName0 = new CompositeName();
      role0.unbind((Name) compositeName0);
      assertEquals(0, compositeName0.size());
  }

  @Test
  public void test34()  throws Throwable  {
      Role role0 = new Role();
      String string0 = role0.getCn();
      assertNull(string0);
  }

  @Test
  public void test35()  throws Throwable  {
      Role role0 = new Role();
      String string0 = role0.getDn();
      assertNull(string0);
  }

  @Test
  public void test36()  throws Throwable  {
      Role role0 = new Role();
      NamingEnumeration<Object> namingEnumeration0 = role0.listBindings("u>ZUAS57@");
      assertNull(namingEnumeration0);
  }

  @Test
  public void test37()  throws Throwable  {
      Role role0 = new Role();
      CompositeName compositeName0 = new CompositeName();
      role0.destroySubcontext((Name) compositeName0);
      assertNull(role0.getNameInNamespace());
  }

  @Test
  public void test38()  throws Throwable  {
      Role role0 = new Role();
      role0.rename("u", "u");
      assertNull(role0.getCn());
  }

  @Test
  public void test39()  throws Throwable  {
      Role role0 = new Role();
      CompositeName compositeName0 = new CompositeName();
      NamingEnumeration<Object> namingEnumeration0 = role0.search((Name) compositeName0, role0.myAttrs);
      assertNull(namingEnumeration0);
  }

  @Test
  public void test40()  throws Throwable  {
      Role role0 = new Role();
      role0.rebind("", (Object) "java.naming.provider.url", role0.myAttrs);
      assertNull(role0.getDn());
  }

  @Test
  public void test41()  throws Throwable  {
      Role role0 = new Role();
      role0.modifyAttributes("", 1738, role0.myAttrs);
      assertNull(role0.getDn());
  }

  @Test
  public void test42()  throws Throwable  {
      Role role0 = new Role();
      role0.bind("java.naming.provider.url", (Object) null, role0.myAttrs);
      assertNull(role0.getCn());
  }

  @Test
  public void test43()  throws Throwable  {
      Role role0 = new Role("");
      assertNotNull(role0);
      
      role0.lookupLink("");
      assertEquals("cn=,ou=roles,dc=arch,dc=org", role0.getDn());
      assertEquals("", role0.getCn());
  }

  @Test
  public void test44()  throws Throwable  {
      Role role0 = new Role();
      Object object0 = role0.addToEnvironment("Japanese", (Object) null);
      assertNull(object0);
  }

  @Test
  public void test45()  throws Throwable  {
      Role role0 = new Role();
      NamingEnumeration<Object> namingEnumeration0 = role0.list((String) null);
      assertNull(namingEnumeration0);
  }

  @Test
  public void test46()  throws Throwable  {
      Role role0 = new Role();
      role0.rebind((String) null, "java.naming.factory.url.pkgs");
      assertNull(role0.getNameInNamespace());
  }

  @Test
  public void test47()  throws Throwable  {
      Role role0 = new Role("+; ZU$I");
      assertNotNull(role0);
      
      CompositeName compositeName0 = new CompositeName();
      String[] stringArray0 = new String[1];
      role0.search((Name) compositeName0, role0.myAttrs, stringArray0);
      assertEquals("+; ZU$I", role0.getCn());
      assertEquals("cn=+; ZU$I,ou=roles,dc=arch,dc=org", role0.getDn());
  }

  @Test
  public void test48()  throws Throwable  {
      Role role0 = new Role();
      String string0 = role0.composeName("w8jlHY3w@8Jt.Bp&", "w8jlHY3w@8Jt.Bp&");
      assertNull(string0);
  }

  @Test
  public void test49()  throws Throwable  {
      Role role0 = new Role();
      Context context0 = role0.createSubcontext("u>ZUAS57@");
      assertNull(context0);
  }

  @Test
  public void test50()  throws Throwable  {
      Role role0 = new Role();
      Hashtable<Object, Object> hashtable0 = role0.getEnvironment();
      assertNull(hashtable0);
  }

  @Test
  public void test51()  throws Throwable  {
      Role role0 = new Role();
      SearchControls searchControls0 = new SearchControls();
      NamingEnumeration<Object> namingEnumeration0 = role0.search("", "", searchControls0);
      assertNull(namingEnumeration0);
  }

  @Test
  public void test52()  throws Throwable  {
      Role role0 = new Role();
      Object object0 = role0.removeFromEnvironment("");
      assertNull(object0);
  }

  @Test
  public void test53()  throws Throwable  {
      Role role0 = new Role();
      Name name0 = role0.composeName((Name) null, (Name) null);
      assertNull(name0);
  }

  @Test
  public void test54()  throws Throwable  {
      Role role0 = new Role();
      Properties properties0 = new Properties();
      CompoundName compoundName0 = new CompoundName("", properties0);
      role0.bind((Name) compoundName0, (Object) null, role0.myAttrs);
      assertEquals(0, compoundName0.size());
  }

  @Test
  public void test55()  throws Throwable  {
      Role role0 = new Role();
      CompositeName compositeName0 = new CompositeName();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try {
        role0.getAttributes((Name) compositeName0, stringArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test56()  throws Throwable  {
      Role role0 = new Role("+; ZU$I");
      assertNotNull(role0);
      
      CompositeName compositeName0 = new CompositeName();
      BasicAttributes basicAttributes0 = (BasicAttributes)role0.getAttributes((Name) compositeName0);
      assertNotNull(basicAttributes0);
      assertEquals("{objectclass=objectclass: organizationalRole, top, cn=cn: +; ZU$I}", basicAttributes0.toString());
      assertEquals("+; ZU$I", role0.getCn());
      assertEquals("cn=+; ZU$I,ou=roles,dc=arch,dc=org", role0.getDn());
      assertEquals(true, basicAttributes0.isCaseIgnored());
  }

  @Test
  public void test57()  throws Throwable  {
      Role role0 = new Role();
      CompositeName compositeName0 = new CompositeName();
      CompositeName compositeName1 = (CompositeName)compositeName0.add("u");
      try {
        role0.getAttributes((Name) compositeName1);
        fail("Expecting exception: NameNotFoundException");
      } catch(NameNotFoundException e) {
      }
  }

  @Test
  public void test58()  throws Throwable  {
      Role role0 = new Role("xu>7JD,");
      assertNotNull(role0);
      
      String[] stringArray0 = new String[7];
      try {
        role0.getAttributes("xu>7JD,", stringArray0);
        fail("Expecting exception: NameNotFoundException");
      } catch(NameNotFoundException e) {
      }
  }

  @Test
  public void test59()  throws Throwable  {
      Role role0 = new Role();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      BasicAttributes basicAttributes0 = (BasicAttributes)role0.getAttributes("", stringArray0);
      assertNotNull(basicAttributes0);
      assertEquals(true, basicAttributes0.isCaseIgnored());
  }
}
