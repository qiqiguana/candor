/*
 * This file was automatically generated by EvoSuite
 */

package com.browsersoft.openhre.hl7.impl.config;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.browsersoft.openhre.hl7.api.config.HL7Table;
import com.browsersoft.openhre.hl7.api.parse.HL7PrimitiveDataTypeReader;
import com.browsersoft.openhre.hl7.impl.config.HL7DataTypePartPrimitiveImpl;
import com.browsersoft.openhre.hl7.impl.parser.NumericDataTypeReader;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class HL7DataTypePartPrimitiveImplEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      HL7DataTypePartPrimitiveImpl hL7DataTypePartPrimitiveImpl0 = new HL7DataTypePartPrimitiveImpl();
      hL7DataTypePartPrimitiveImpl0.setTable((HL7Table) null);
      assertNull(hL7DataTypePartPrimitiveImpl0.getDescription());
  }

  @Test
  public void test1()  throws Throwable  {
      HL7DataTypePartPrimitiveImpl hL7DataTypePartPrimitiveImpl0 = new HL7DataTypePartPrimitiveImpl();
      String string0 = hL7DataTypePartPrimitiveImpl0.getIDTable();
      assertEquals("", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      HL7DataTypePartPrimitiveImpl hL7DataTypePartPrimitiveImpl0 = new HL7DataTypePartPrimitiveImpl();
      int int0 = hL7DataTypePartPrimitiveImpl0.getType();
      assertEquals(0, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      HL7DataTypePartPrimitiveImpl hL7DataTypePartPrimitiveImpl0 = new HL7DataTypePartPrimitiveImpl();
      String string0 = hL7DataTypePartPrimitiveImpl0.getReader();
      assertEquals("", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      HL7DataTypePartPrimitiveImpl hL7DataTypePartPrimitiveImpl0 = new HL7DataTypePartPrimitiveImpl();
      HL7PrimitiveDataTypeReader hL7PrimitiveDataTypeReader0 = hL7DataTypePartPrimitiveImpl0.getInstanceReader();
      assertNull(hL7PrimitiveDataTypeReader0);
  }

  @Test
  public void test5()  throws Throwable  {
      HL7DataTypePartPrimitiveImpl hL7DataTypePartPrimitiveImpl0 = new HL7DataTypePartPrimitiveImpl();
      HL7Table hL7Table0 = hL7DataTypePartPrimitiveImpl0.getTable();
      assertNull(hL7Table0);
  }

  @Test
  public void test6()  throws Throwable  {
      HL7DataTypePartPrimitiveImpl hL7DataTypePartPrimitiveImpl0 = new HL7DataTypePartPrimitiveImpl();
      NumericDataTypeReader numericDataTypeReader0 = new NumericDataTypeReader();
      hL7DataTypePartPrimitiveImpl0.setInstanceReader((HL7PrimitiveDataTypeReader) numericDataTypeReader0);
      assertEquals(0, hL7DataTypePartPrimitiveImpl0.getType());
  }

  @Test
  public void test7()  throws Throwable  {
      HL7DataTypePartPrimitiveImpl hL7DataTypePartPrimitiveImpl0 = new HL7DataTypePartPrimitiveImpl();
      hL7DataTypePartPrimitiveImpl0.setReader("^?:qj.]Pl");
      String string0 = hL7DataTypePartPrimitiveImpl0.toString();
      assertEquals(" primitive type className = \"^?:qj.]Pl\"", hL7DataTypePartPrimitiveImpl0.toString());
      assertNotNull(string0);
      assertEquals(" primitive type className = \"^?:qj.]Pl\"", string0);
  }

  @Test
  public void test8()  throws Throwable  {
      HL7DataTypePartPrimitiveImpl hL7DataTypePartPrimitiveImpl0 = new HL7DataTypePartPrimitiveImpl();
      hL7DataTypePartPrimitiveImpl0.setIDTable("O)PasF ?^$!fm!S#CJ");
      String string0 = hL7DataTypePartPrimitiveImpl0.toString();
      assertNotNull(string0);
      assertEquals(" primitive type idTable = \"O)PasF ?^$!fm!S#CJ\"", hL7DataTypePartPrimitiveImpl0.toString());
      assertEquals(" primitive type idTable = \"O)PasF ?^$!fm!S#CJ\"", string0);
  }
}
