/*
 * This file was automatically generated by EvoSuite
 */

package com.browsersoft.openhre.hl7.impl.parser;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.browsersoft.openhre.hl7.api.config.HL7Configuration;
import com.browsersoft.openhre.hl7.api.config.HL7DataType;
import com.browsersoft.openhre.hl7.api.config.HL7Field;
import com.browsersoft.openhre.hl7.api.config.HL7Segment;
import com.browsersoft.openhre.hl7.api.parse.HL7CheckerHandler;
import com.browsersoft.openhre.hl7.api.regular.MessageTracer;
import com.browsersoft.openhre.hl7.impl.config.HL7ConfigurationImpl;
import com.browsersoft.openhre.hl7.impl.config.HL7DataTypeImpl;
import com.browsersoft.openhre.hl7.impl.config.HL7FieldImpl;
import com.browsersoft.openhre.hl7.impl.config.HL7SegmentImpl;
import com.browsersoft.openhre.hl7.impl.parser.HL7CheckerStateImpl;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class HL7CheckerStateImplEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      hL7CheckerStateImpl0.setActualDataTypePartsPossition(3913);
      assertEquals(3913, hL7CheckerStateImpl0.getActualDataTypePartsPossition());
      assertEquals("actualFieldPosition:0\nactualFieldRepeatableIndex:0\nactualFieldLength:0\nactualDataTypePartsPossition:3913\nactualDataTypeSubPartsPossition:0\n", hL7CheckerStateImpl0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      HL7SegmentImpl hL7SegmentImpl0 = new HL7SegmentImpl();
      hL7CheckerStateImpl0.setActualSegment((HL7Segment) hL7SegmentImpl0);
      hL7CheckerStateImpl0.eventBeginField(true);
      assertEquals(1, hL7CheckerStateImpl0.getActualFieldRepeatableIndex());
      assertEquals("ACTUAL_SEGMENT:null\nactualFieldPosition:0\nactualFieldRepeatableIndex:1\nactualFieldLength:0\nactualDataTypePartsPossition:0\nactualDataTypeSubPartsPossition:0\n", hL7CheckerStateImpl0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      hL7CheckerStateImpl0.getActualDataType();
      assertEquals("actualFieldPosition:0\nactualFieldRepeatableIndex:0\nactualFieldLength:0\nactualDataTypePartsPossition:0\nactualDataTypeSubPartsPossition:0\n", hL7CheckerStateImpl0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      hL7CheckerStateImpl0.getActualComponentDataType();
      assertEquals("actualFieldPosition:0\nactualFieldRepeatableIndex:0\nactualFieldLength:0\nactualDataTypePartsPossition:0\nactualDataTypeSubPartsPossition:0\n", hL7CheckerStateImpl0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      hL7CheckerStateImpl0.setActualFieldRepeatableIndex(0);
      assertEquals("actualFieldPosition:0\nactualFieldRepeatableIndex:0\nactualFieldLength:0\nactualDataTypePartsPossition:0\nactualDataTypeSubPartsPossition:0\n", hL7CheckerStateImpl0.toString());
      assertEquals(0, hL7CheckerStateImpl0.getActualFieldRepeatableIndex());
  }

  @Test
  public void test5()  throws Throwable  {
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      HL7DataTypeImpl hL7DataTypeImpl0 = new HL7DataTypeImpl();
      hL7CheckerStateImpl0.setActualComponentDataType((HL7DataType) hL7DataTypeImpl0);
      // Undeclared exception!
      try {
        hL7CheckerStateImpl0.eventBeginSubComponent();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      int int0 = hL7CheckerStateImpl0.getActualFieldRepeatableIndex();
      assertEquals(0, int0);
      assertEquals("actualFieldPosition:0\nactualFieldRepeatableIndex:0\nactualFieldLength:0\nactualDataTypePartsPossition:0\nactualDataTypeSubPartsPossition:0\n", hL7CheckerStateImpl0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      // Undeclared exception!
      try {
        hL7CheckerStateImpl0.eventBeginSegment("S$Nz Jq0qEpbuY&");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      hL7CheckerStateImpl0.setActualFieldPosition(1350);
      assertEquals(1350, hL7CheckerStateImpl0.getActualFieldPosition());
      assertEquals(0, hL7CheckerStateImpl0.getActualDataTypeSubPartsPossition());
  }

  @Test
  public void test9()  throws Throwable  {
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      hL7CheckerStateImpl0.getMessageTracer();
      assertEquals("actualFieldPosition:0\nactualFieldRepeatableIndex:0\nactualFieldLength:0\nactualDataTypePartsPossition:0\nactualDataTypeSubPartsPossition:0\n", hL7CheckerStateImpl0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      hL7CheckerStateImpl0.isSeriousError();
      assertEquals("actualFieldPosition:0\nactualFieldRepeatableIndex:0\nactualFieldLength:0\nactualDataTypePartsPossition:0\nactualDataTypeSubPartsPossition:0\n", hL7CheckerStateImpl0.toString());
      assertEquals(0, hL7CheckerStateImpl0.getActualFieldLength());
  }

  @Test
  public void test11()  throws Throwable  {
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      int int0 = hL7CheckerStateImpl0.getActualDataTypeSubPartsPossition();
      assertEquals(0, int0);
      assertEquals("actualFieldPosition:0\nactualFieldRepeatableIndex:0\nactualFieldLength:0\nactualDataTypePartsPossition:0\nactualDataTypeSubPartsPossition:0\n", hL7CheckerStateImpl0.toString());
  }

  @Test
  public void test12()  throws Throwable  {
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      hL7CheckerStateImpl0.setActualFieldLength(3913);
      assertEquals(3913, hL7CheckerStateImpl0.getActualFieldLength());
      assertEquals("actualFieldPosition:0\nactualFieldRepeatableIndex:0\nactualFieldLength:3913\nactualDataTypePartsPossition:0\nactualDataTypeSubPartsPossition:0\n", hL7CheckerStateImpl0.toString());
  }

  @Test
  public void test13()  throws Throwable  {
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      int int0 = hL7CheckerStateImpl0.getActualDataTypePartsPossition();
      assertEquals("actualFieldPosition:0\nactualFieldRepeatableIndex:0\nactualFieldLength:0\nactualDataTypePartsPossition:0\nactualDataTypeSubPartsPossition:0\n", hL7CheckerStateImpl0.toString());
      assertEquals(0, int0);
  }

  @Test
  public void test14()  throws Throwable  {
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      hL7CheckerStateImpl0.getActualSubComponentDataType();
      assertEquals("actualFieldPosition:0\nactualFieldRepeatableIndex:0\nactualFieldLength:0\nactualDataTypePartsPossition:0\nactualDataTypeSubPartsPossition:0\n", hL7CheckerStateImpl0.toString());
  }

  @Test
  public void test15()  throws Throwable  {
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      hL7CheckerStateImpl0.setSeriousError(false);
      assertEquals(false, hL7CheckerStateImpl0.isSeriousError());
      assertEquals("actualFieldPosition:0\nactualFieldRepeatableIndex:0\nactualFieldLength:0\nactualDataTypePartsPossition:0\nactualDataTypeSubPartsPossition:0\n", hL7CheckerStateImpl0.toString());
  }

  @Test
  public void test16()  throws Throwable  {
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      int int0 = hL7CheckerStateImpl0.getActualFieldPosition();
      assertEquals("actualFieldPosition:0\nactualFieldRepeatableIndex:0\nactualFieldLength:0\nactualDataTypePartsPossition:0\nactualDataTypeSubPartsPossition:0\n", hL7CheckerStateImpl0.toString());
      assertEquals(0, int0);
  }

  @Test
  public void test17()  throws Throwable  {
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      hL7CheckerStateImpl0.getActualSegment();
      assertEquals("actualFieldPosition:0\nactualFieldRepeatableIndex:0\nactualFieldLength:0\nactualDataTypePartsPossition:0\nactualDataTypeSubPartsPossition:0\n", hL7CheckerStateImpl0.toString());
  }

  @Test
  public void test18()  throws Throwable  {
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      int int0 = hL7CheckerStateImpl0.getActualFieldLength();
      assertEquals(0, int0);
      assertEquals("actualFieldPosition:0\nactualFieldRepeatableIndex:0\nactualFieldLength:0\nactualDataTypePartsPossition:0\nactualDataTypeSubPartsPossition:0\n", hL7CheckerStateImpl0.toString());
  }

  @Test
  public void test19()  throws Throwable  {
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      hL7CheckerStateImpl0.getCheckerHandler();
      assertEquals("actualFieldPosition:0\nactualFieldRepeatableIndex:0\nactualFieldLength:0\nactualDataTypePartsPossition:0\nactualDataTypeSubPartsPossition:0\n", hL7CheckerStateImpl0.toString());
  }

  @Test
  public void test20()  throws Throwable  {
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      hL7CheckerStateImpl0.setCheckerHandler((HL7CheckerHandler) null);
      assertEquals("actualFieldPosition:0\nactualFieldRepeatableIndex:0\nactualFieldLength:0\nactualDataTypePartsPossition:0\nactualDataTypeSubPartsPossition:0\n", hL7CheckerStateImpl0.toString());
      assertEquals(0, hL7CheckerStateImpl0.getActualFieldLength());
  }

  @Test
  public void test21()  throws Throwable  {
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      assertEquals("actualFieldPosition:0\nactualFieldRepeatableIndex:0\nactualFieldLength:0\nactualDataTypePartsPossition:0\nactualDataTypeSubPartsPossition:0\n", hL7CheckerStateImpl0.toString());
      
      HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl();
      hL7CheckerStateImpl0.setActualField((HL7Field) hL7FieldImpl0);
      // Undeclared exception!
      try {
        hL7CheckerStateImpl0.generateWarning(0, "!&HYb{'v");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test22()  throws Throwable  {
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      HL7DataTypeImpl hL7DataTypeImpl0 = new HL7DataTypeImpl();
      hL7CheckerStateImpl0.setActualSubComponentDataType((HL7DataType) hL7DataTypeImpl0);
      String string0 = hL7CheckerStateImpl0.toString();
      assertNotNull(string0);
      assertEquals("actualFieldPosition:0\nactualFieldRepeatableIndex:0\nactualFieldLength:0\nactualDataTypePartsPossition:0\nactualDataTypeSubPartsPossition:0\nactualSubComponentDataType:null\n", hL7CheckerStateImpl0.toString());
      assertEquals("actualFieldPosition:0\nactualFieldRepeatableIndex:0\nactualFieldLength:0\nactualDataTypePartsPossition:0\nactualDataTypeSubPartsPossition:0\nactualSubComponentDataType:null\n", string0);
  }

  @Test
  public void test23()  throws Throwable  {
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      hL7CheckerStateImpl0.addToActualFieldLength((-314));
      assertEquals("actualFieldPosition:0\nactualFieldRepeatableIndex:0\nactualFieldLength:-314\nactualDataTypePartsPossition:0\nactualDataTypeSubPartsPossition:0\n", hL7CheckerStateImpl0.toString());
      assertEquals(-314, hL7CheckerStateImpl0.getActualFieldLength());
  }

  @Test
  public void test24()  throws Throwable  {
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      HL7DataTypeImpl hL7DataTypeImpl0 = new HL7DataTypeImpl();
      hL7CheckerStateImpl0.setActualDataType((HL7DataType) hL7DataTypeImpl0);
      String string0 = hL7CheckerStateImpl0.toString();
      assertEquals("actualFieldPosition:0\nactualFieldRepeatableIndex:0\nactualFieldLength:0\nactualDataType:null\nactualDataTypePartsPossition:0\nactualDataTypeSubPartsPossition:0\n", hL7CheckerStateImpl0.toString());
      assertNotNull(string0);
      assertEquals("actualFieldPosition:0\nactualFieldRepeatableIndex:0\nactualFieldLength:0\nactualDataType:null\nactualDataTypePartsPossition:0\nactualDataTypeSubPartsPossition:0\n", string0);
  }

  @Test
  public void test25()  throws Throwable  {
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      hL7CheckerStateImpl0.getActualField();
      assertEquals("actualFieldPosition:0\nactualFieldRepeatableIndex:0\nactualFieldLength:0\nactualDataTypePartsPossition:0\nactualDataTypeSubPartsPossition:0\n", hL7CheckerStateImpl0.toString());
  }

  @Test
  public void test26()  throws Throwable  {
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      hL7CheckerStateImpl0.getConfiguration();
      assertEquals("actualFieldPosition:0\nactualFieldRepeatableIndex:0\nactualFieldLength:0\nactualDataTypePartsPossition:0\nactualDataTypeSubPartsPossition:0\n", hL7CheckerStateImpl0.toString());
      assertEquals(0, hL7CheckerStateImpl0.getActualDataTypePartsPossition());
  }

  @Test
  public void test27()  throws Throwable  {
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      hL7CheckerStateImpl0.setMessageTracer((MessageTracer) null);
      assertEquals("actualFieldPosition:0\nactualFieldRepeatableIndex:0\nactualFieldLength:0\nactualDataTypePartsPossition:0\nactualDataTypeSubPartsPossition:0\n", hL7CheckerStateImpl0.toString());
      assertEquals(0, hL7CheckerStateImpl0.getActualDataTypePartsPossition());
  }

  @Test
  public void test28()  throws Throwable  {
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      hL7CheckerStateImpl0.eventBeginSubComponent();
      assertEquals("actualFieldPosition:0\nactualFieldRepeatableIndex:0\nactualFieldLength:0\nactualDataTypePartsPossition:0\nactualDataTypeSubPartsPossition:0\n", hL7CheckerStateImpl0.toString());
      assertEquals(0, hL7CheckerStateImpl0.getActualFieldLength());
  }

  @Test
  public void test29()  throws Throwable  {
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      HL7DataTypeImpl hL7DataTypeImpl0 = new HL7DataTypeImpl();
      hL7CheckerStateImpl0.setActualComponentDataType((HL7DataType) hL7DataTypeImpl0);
      hL7CheckerStateImpl0.setActualDataTypeSubPartsPossition((-1708));
      // Undeclared exception!
      try {
        hL7CheckerStateImpl0.eventBeginSubComponent();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test30()  throws Throwable  {
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      hL7CheckerStateImpl0.eventBeginComponent();
      assertEquals("actualFieldPosition:0\nactualFieldRepeatableIndex:0\nactualFieldLength:0\nactualDataTypePartsPossition:0\nactualDataTypeSubPartsPossition:0\n", hL7CheckerStateImpl0.toString());
      assertEquals(0, hL7CheckerStateImpl0.getActualDataTypePartsPossition());
  }

  @Test
  public void test31()  throws Throwable  {
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      HL7DataTypeImpl hL7DataTypeImpl0 = new HL7DataTypeImpl();
      hL7CheckerStateImpl0.setActualDataType((HL7DataType) hL7DataTypeImpl0);
      hL7DataTypeImpl0.setID("!&HYb{'3");
      // Undeclared exception!
      try {
        hL7CheckerStateImpl0.eventBeginComponent();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test32()  throws Throwable  {
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      hL7CheckerStateImpl0.eventBeginField(true);
      assertEquals("actualFieldPosition:0\nactualFieldRepeatableIndex:0\nactualFieldLength:0\nactualDataTypePartsPossition:0\nactualDataTypeSubPartsPossition:0\n", hL7CheckerStateImpl0.toString());
  }

  @Test
  public void test33()  throws Throwable  {
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      HL7SegmentImpl hL7SegmentImpl0 = new HL7SegmentImpl();
      hL7CheckerStateImpl0.setActualSegment((HL7Segment) hL7SegmentImpl0);
      // Undeclared exception!
      try {
        hL7CheckerStateImpl0.eventBeginField(false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test34()  throws Throwable  {
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      HL7SegmentImpl hL7SegmentImpl0 = new HL7SegmentImpl();
      hL7CheckerStateImpl0.setActualSegment((HL7Segment) hL7SegmentImpl0);
      HL7ConfigurationImpl hL7ConfigurationImpl0 = new HL7ConfigurationImpl();
      hL7CheckerStateImpl0.setConfiguration((HL7Configuration) hL7ConfigurationImpl0);
      HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl();
      hL7CheckerStateImpl0.setActualField((HL7Field) hL7FieldImpl0);
      // Undeclared exception!
      try {
        hL7CheckerStateImpl0.eventBeginField(true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test35()  throws Throwable  {
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      // Undeclared exception!
      try {
        hL7CheckerStateImpl0.generateWarning(0, "!&HYb{'v");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test36()  throws Throwable  {
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      HL7SegmentImpl hL7SegmentImpl0 = new HL7SegmentImpl();
      hL7CheckerStateImpl0.setActualSegment((HL7Segment) hL7SegmentImpl0);
      // Undeclared exception!
      try {
        hL7CheckerStateImpl0.generateWarning((-724), "actualFieldPosition:0\nactualFieldRepeatableIndex:0\nactualFieldLength:0\nactualDataTypePartsPossition:0\nactualDataTypeSubPartsPossition:0\n");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test37()  throws Throwable  {
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      HL7SegmentImpl hL7SegmentImpl0 = new HL7SegmentImpl();
      hL7CheckerStateImpl0.setActualSegment((HL7Segment) hL7SegmentImpl0);
      String string0 = hL7CheckerStateImpl0.toString();
      assertNotNull(string0);
      assertEquals("ACTUAL_SEGMENT:null\nactualFieldPosition:0\nactualFieldRepeatableIndex:0\nactualFieldLength:0\nactualDataTypePartsPossition:0\nactualDataTypeSubPartsPossition:0\n", hL7CheckerStateImpl0.toString());
      assertEquals("ACTUAL_SEGMENT:null\nactualFieldPosition:0\nactualFieldRepeatableIndex:0\nactualFieldLength:0\nactualDataTypePartsPossition:0\nactualDataTypeSubPartsPossition:0\n", string0);
  }

  @Test
  public void test38()  throws Throwable  {
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      assertEquals("actualFieldPosition:0\nactualFieldRepeatableIndex:0\nactualFieldLength:0\nactualDataTypePartsPossition:0\nactualDataTypeSubPartsPossition:0\n", hL7CheckerStateImpl0.toString());
      
      HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl();
      hL7CheckerStateImpl0.setActualField((HL7Field) hL7FieldImpl0);
      // Undeclared exception!
      try {
        hL7CheckerStateImpl0.toString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test39()  throws Throwable  {
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      HL7DataTypeImpl hL7DataTypeImpl0 = new HL7DataTypeImpl();
      hL7CheckerStateImpl0.setActualComponentDataType((HL7DataType) hL7DataTypeImpl0);
      String string0 = hL7CheckerStateImpl0.toString();
      assertEquals("actualFieldPosition:0\nactualFieldRepeatableIndex:0\nactualFieldLength:0\nactualDataTypePartsPossition:0\nactualComponentDataType:null\nactualDataTypeSubPartsPossition:0\n", hL7CheckerStateImpl0.toString());
      assertNotNull(string0);
      assertEquals("actualFieldPosition:0\nactualFieldRepeatableIndex:0\nactualFieldLength:0\nactualDataTypePartsPossition:0\nactualComponentDataType:null\nactualDataTypeSubPartsPossition:0\n", string0);
  }
}
