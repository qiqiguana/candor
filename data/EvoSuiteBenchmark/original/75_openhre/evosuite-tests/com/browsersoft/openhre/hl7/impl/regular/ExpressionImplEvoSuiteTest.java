/*
 * This file was automatically generated by EvoSuite
 */

package com.browsersoft.openhre.hl7.impl.regular;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.browsersoft.openhre.hl7.api.regular.ExpressionElementMapper;
import com.browsersoft.openhre.hl7.api.regular.ExpressionPart;
import com.browsersoft.openhre.hl7.impl.regular.ExpressionElementMapperImpl;
import com.browsersoft.openhre.hl7.impl.regular.ExpressionImpl;
import com.browsersoft.openhre.hl7.impl.regular.ExpressionPartImpl;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ExpressionImplEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ExpressionImpl expressionImpl0 = new ExpressionImpl();
      int int0 = expressionImpl0.getNumberOfElementTypes();
      assertEquals(0, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      ExpressionImpl expressionImpl0 = new ExpressionImpl();
      expressionImpl0.clearAll();
      assertEquals("", expressionImpl0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      ExpressionImpl expressionImpl0 = new ExpressionImpl();
      expressionImpl0.setNumberOfElementTypes((-1420));
      assertEquals(-1420, expressionImpl0.getNumberOfElementTypes());
  }

  @Test
  public void test3()  throws Throwable  {
      ExpressionImpl expressionImpl0 = new ExpressionImpl();
      ExpressionPart expressionPart0 = expressionImpl0.getItem((-872));
      assertNull(expressionPart0);
  }

  @Test
  public void test4()  throws Throwable  {
      ExpressionImpl expressionImpl0 = new ExpressionImpl();
      ExpressionElementMapperImpl expressionElementMapperImpl0 = new ExpressionElementMapperImpl();
      expressionImpl0.readFromStringForDebug("Z*[esQ+-");
      String string0 = expressionImpl0.toString((ExpressionElementMapper) expressionElementMapperImpl0);
      assertEquals(2, expressionImpl0.getNumberOfElementTypes());
      assertEquals("null[null", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      ExpressionImpl expressionImpl0 = new ExpressionImpl();
      ExpressionPart expressionPart0 = expressionImpl0.getItem(0);
      assertNull(expressionPart0);
  }

  @Test
  public void test6()  throws Throwable  {
      ExpressionImpl expressionImpl0 = new ExpressionImpl();
      expressionImpl0.setItem((-872), (ExpressionPart) null);
      assertEquals(0, expressionImpl0.size());
  }

  @Test
  public void test7()  throws Throwable  {
      ExpressionImpl expressionImpl0 = new ExpressionImpl();
      expressionImpl0.setItem(0, (ExpressionPart) null);
      assertEquals(0, expressionImpl0.getNumberOfElementTypes());
  }

  @Test
  public void test8()  throws Throwable  {
      ExpressionImpl expressionImpl0 = new ExpressionImpl();
      expressionImpl0.readFromStringForDebug("*RQW1m_8]G5/-");
      expressionImpl0.setItem(4, (ExpressionPart) null);
      assertEquals(5, expressionImpl0.size());
      assertEquals(4, expressionImpl0.getNumberOfElementTypes());
  }

  @Test
  public void test9()  throws Throwable  {
      ExpressionImpl expressionImpl0 = new ExpressionImpl();
      expressionImpl0.removeItem((-1127));
      assertEquals("", expressionImpl0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      ExpressionImpl expressionImpl0 = new ExpressionImpl();
      expressionImpl0.removeItem(0);
      assertEquals(0, expressionImpl0.getNumberOfElementTypes());
  }

  @Test
  public void test11()  throws Throwable  {
      ExpressionImpl expressionImpl0 = new ExpressionImpl();
      ExpressionPartImpl expressionPartImpl0 = new ExpressionPartImpl();
      expressionImpl0.addItem((ExpressionPart) expressionPartImpl0);
      assertEquals("ELEMENT 0\n", expressionImpl0.toString());
      
      expressionImpl0.removeItem(0);
      assertEquals(0, expressionImpl0.size());
  }

  @Test
  public void test12()  throws Throwable  {
      ExpressionImpl expressionImpl0 = new ExpressionImpl();
      expressionImpl0.readFromStringForDebug("3{z%TZ/");
      // Undeclared exception!
      try {
        expressionImpl0.toString((ExpressionElementMapper) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      ExpressionImpl expressionImpl0 = new ExpressionImpl();
      expressionImpl0.readFromStringForDebug("8 en0}Ef*E33");
      // Undeclared exception!
      try {
        expressionImpl0.toString((ExpressionElementMapper) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test14()  throws Throwable  {
      ExpressionImpl expressionImpl0 = new ExpressionImpl();
      expressionImpl0.readFromStringForDebug("7fv]lY5c");
      // Undeclared exception!
      try {
        expressionImpl0.toString((ExpressionElementMapper) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test15()  throws Throwable  {
      ExpressionImpl expressionImpl0 = new ExpressionImpl();
      ExpressionPartImpl expressionPartImpl0 = new ExpressionPartImpl();
      expressionPartImpl0.setType((-1396));
      expressionImpl0.addItem((ExpressionPart) expressionPartImpl0);
      String string0 = expressionImpl0.toString((ExpressionElementMapper) null);
      assertNotNull(string0);
      assertEquals("\n", expressionImpl0.toString());
      assertEquals(1, expressionImpl0.size());
  }

  @Test
  public void test16()  throws Throwable  {
      ExpressionImpl expressionImpl0 = new ExpressionImpl();
      expressionImpl0.readFromStringForDebug("8 en0}Ef*E33");
      String string0 = expressionImpl0.toString();
      assertEquals(2, expressionImpl0.getNumberOfElementTypes());
      assertEquals("CLOSE_REPEATABLE\nELEMENT 0\nELEMENT 1\n", string0);
  }
}
