/*
 * This file was automatically generated by EvoSuite
 */

package com.browsersoft.openhre.hl7.impl.config;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.browsersoft.openhre.hl7.impl.config.DOMUtils;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import javax.xml.namespace.QName;
import org.apache.axis.deployment.wsdd.WSDDConstants;
import org.apache.axis.message.RPCParam;
import org.apache.html.dom.HTMLDocumentImpl;
import org.junit.BeforeClass;
import org.w3c.dom.Node;
import org.xml.sax.SAXException;

@RunWith(EvoSuiteRunner.class)
public class DOMUtilsEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      try {
        DOMUtils.parseInputStream((InputStream) null);
        fail("Expecting exception: MalformedURLException");
      } catch(MalformedURLException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      DOMUtils dOMUtils0 = new DOMUtils();
      assertNotNull(dOMUtils0);
  }

  @Test
  public void test2()  throws Throwable  {
      try {
        DOMUtils.parseFile("position:   ");
        fail("Expecting exception: MalformedURLException");
      } catch(MalformedURLException e) {
        /*
         * unknown protocol: position
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      QName qName0 = WSDDConstants.QNAME_JAXRPC_HEADER;
      RPCParam rPCParam0 = new RPCParam(qName0, (Object) "");
      String string0 = DOMUtils.getParameter((Node) rPCParam0, "");
      assertEquals("", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      QName qName0 = WSDDConstants.QNAME_JAXRPC_HEADER;
      RPCParam rPCParam0 = new RPCParam(qName0, (Object) "");
      String string0 = DOMUtils.getTextContent((Node) rPCParam0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      hTMLDocumentImpl0.getLinks();
      DOMUtils.getTextContent((Node) hTMLDocumentImpl0);
  }
}
