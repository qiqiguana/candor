/*
 * This file was automatically generated by EvoSuite
 */

package com.browsersoft.openhre.hl7.impl.regular;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.browsersoft.openhre.hl7.impl.regular.ExpressionNodeList;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ExpressionNodeListEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ExpressionNodeList expressionNodeList0 = new ExpressionNodeList();
      expressionNodeList0.clearAll();
      assertEquals(0, expressionNodeList0.size());
  }

  @Test
  public void test1()  throws Throwable  {
      ExpressionNodeList expressionNodeList0 = new ExpressionNodeList();
      expressionNodeList0.addItem((-1564));
      boolean boolean0 = expressionNodeList0.isInList((-1794));
      assertEquals(1, expressionNodeList0.size());
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      ExpressionNodeList expressionNodeList0 = new ExpressionNodeList();
      expressionNodeList0.addItem(1);
      expressionNodeList0.addExpressionList(expressionNodeList0);
      assertEquals(1, expressionNodeList0.size());
      assertEquals("1\n", expressionNodeList0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      ExpressionNodeList expressionNodeList0 = new ExpressionNodeList();
      expressionNodeList0.addItem(1);
      ExpressionNodeList expressionNodeList1 = new ExpressionNodeList();
      expressionNodeList1.addExpressionList(expressionNodeList0);
      assertEquals("1\n", expressionNodeList0.toString());
      assertEquals(1, expressionNodeList1.size());
  }

  @Test
  public void test4()  throws Throwable  {
      ExpressionNodeList expressionNodeList0 = new ExpressionNodeList();
      int int0 = expressionNodeList0.getItem((-1794));
      assertEquals((-1), int0);
  }

  @Test
  public void test5()  throws Throwable  {
      ExpressionNodeList expressionNodeList0 = new ExpressionNodeList();
      int int0 = expressionNodeList0.getItem(0);
      assertEquals((-1), int0);
  }

  @Test
  public void test6()  throws Throwable  {
      ExpressionNodeList expressionNodeList0 = new ExpressionNodeList();
      expressionNodeList0.setItem((-1), (-1));
      assertEquals(0, expressionNodeList0.size());
  }

  @Test
  public void test7()  throws Throwable  {
      ExpressionNodeList expressionNodeList0 = new ExpressionNodeList();
      expressionNodeList0.setItem(135, 0);
      assertEquals("", expressionNodeList0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      ExpressionNodeList expressionNodeList0 = new ExpressionNodeList();
      expressionNodeList0.addItem((-1364));
      expressionNodeList0.setItem(0, 0);
      assertEquals(1, expressionNodeList0.size());
      assertEquals("0\n", expressionNodeList0.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      ExpressionNodeList expressionNodeList0 = new ExpressionNodeList();
      expressionNodeList0.removeItem((-442));
      assertEquals(0, expressionNodeList0.size());
  }

  @Test
  public void test10()  throws Throwable  {
      ExpressionNodeList expressionNodeList0 = new ExpressionNodeList();
      expressionNodeList0.removeItem(0);
      assertEquals("", expressionNodeList0.toString());
  }

  @Test
  public void test11()  throws Throwable  {
      ExpressionNodeList expressionNodeList0 = new ExpressionNodeList();
      expressionNodeList0.addItem(1272);
      assertEquals(1, expressionNodeList0.size());
      
      expressionNodeList0.removeItem(0);
      assertEquals(0, expressionNodeList0.size());
  }

  @Test
  public void test12()  throws Throwable  {
      ExpressionNodeList expressionNodeList0 = new ExpressionNodeList();
      expressionNodeList0.addItem((-1564));
      String string0 = expressionNodeList0.toString();
      assertEquals(1, expressionNodeList0.size());
      assertNotNull(string0);
      assertEquals("-1564\n", string0);
  }
}
