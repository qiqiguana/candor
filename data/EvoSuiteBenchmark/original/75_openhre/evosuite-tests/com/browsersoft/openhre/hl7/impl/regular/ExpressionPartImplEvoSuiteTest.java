/*
 * This file was automatically generated by EvoSuite
 */

package com.browsersoft.openhre.hl7.impl.regular;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.browsersoft.openhre.hl7.impl.regular.ExpressionPartImpl;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ExpressionPartImplEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ExpressionPartImpl expressionPartImpl0 = new ExpressionPartImpl();
      expressionPartImpl0.setElementID(2);
      assertEquals("ELEMENT 2", expressionPartImpl0.toString());
      assertEquals(2, expressionPartImpl0.getElementID());
  }

  @Test
  public void test1()  throws Throwable  {
      ExpressionPartImpl expressionPartImpl0 = new ExpressionPartImpl();
      int int0 = expressionPartImpl0.getType();
      assertEquals(0, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      ExpressionPartImpl expressionPartImpl0 = new ExpressionPartImpl();
      int int0 = expressionPartImpl0.getElementID();
      assertEquals(0, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      ExpressionPartImpl expressionPartImpl0 = new ExpressionPartImpl();
      expressionPartImpl0.setType(1);
      String string0 = expressionPartImpl0.toString();
      assertEquals(1, expressionPartImpl0.getType());
      assertEquals("OPEN_REPEATABLE", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      ExpressionPartImpl expressionPartImpl0 = new ExpressionPartImpl();
      String string0 = expressionPartImpl0.toString();
      assertEquals("ELEMENT 0", string0);
      assertNotNull(string0);
  }

  @Test
  public void test5()  throws Throwable  {
      ExpressionPartImpl expressionPartImpl0 = new ExpressionPartImpl();
      expressionPartImpl0.setType(2);
      String string0 = expressionPartImpl0.toString();
      assertEquals(2, expressionPartImpl0.getType());
      assertEquals("CLOSE_REPEATABLE", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      ExpressionPartImpl expressionPartImpl0 = new ExpressionPartImpl();
      expressionPartImpl0.setType(3);
      String string0 = expressionPartImpl0.toString();
      assertEquals(3, expressionPartImpl0.getType());
      assertEquals("OPEN_OPTIONAL", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      ExpressionPartImpl expressionPartImpl0 = new ExpressionPartImpl();
      expressionPartImpl0.setType(4);
      String string0 = expressionPartImpl0.toString();
      assertEquals(4, expressionPartImpl0.getType());
      assertEquals("CLOSE_OPTIONAL", string0);
  }

  @Test
  public void test8()  throws Throwable  {
      ExpressionPartImpl expressionPartImpl0 = new ExpressionPartImpl();
      expressionPartImpl0.setType(1685);
      String string0 = expressionPartImpl0.toString();
      assertEquals(1685, expressionPartImpl0.getType());
      assertEquals("", string0);
  }
}
