/*
 * This file was automatically generated by EvoSuite
 */

package com.browsersoft.openhre.hl7.impl.regular;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.browsersoft.openhre.hl7.api.regular.Expression;
import com.browsersoft.openhre.hl7.api.regular.ExpressionPart;
import com.browsersoft.openhre.hl7.api.regular.InvalidExpressionException;
import com.browsersoft.openhre.hl7.impl.regular.ExpressionImpl;
import com.browsersoft.openhre.hl7.impl.regular.ExpressionMatrixBuilderImpl;
import com.browsersoft.openhre.hl7.impl.regular.ExpressionMatrixImpl;
import com.browsersoft.openhre.hl7.impl.regular.ExpressionPartImpl;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ExpressionMatrixBuilderImplEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ExpressionImpl expressionImpl0 = new ExpressionImpl();
      ExpressionMatrixBuilderImpl expressionMatrixBuilderImpl0 = new ExpressionMatrixBuilderImpl();
      try {
        expressionMatrixBuilderImpl0.buildMatrix((Expression) expressionImpl0);
        fail("Expecting exception: InvalidExpressionException");
      } catch(InvalidExpressionException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      ExpressionImpl expressionImpl0 = new ExpressionImpl();
      expressionImpl0.readFromStringForDebug("5[-reQo]");
      expressionImpl0.readFromStringForDebug("5[-reQo]");
      ExpressionMatrixBuilderImpl expressionMatrixBuilderImpl0 = new ExpressionMatrixBuilderImpl();
      ExpressionMatrixImpl expressionMatrixImpl0 = (ExpressionMatrixImpl)expressionMatrixBuilderImpl0.buildMatrix((Expression) expressionImpl0);
      assertNotNull(expressionMatrixImpl0);
      assertEquals("MATRIX\n-----------------------\n | A\n0| 1\n1| 1\n2| E\n\nCONNECTIONS\n-----------------------\n1 --- A ---> 1\n", expressionMatrixImpl0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      ExpressionMatrixBuilderImpl expressionMatrixBuilderImpl0 = new ExpressionMatrixBuilderImpl();
      ExpressionImpl expressionImpl0 = new ExpressionImpl();
      expressionImpl0.readFromStringForDebug("{p}2fWY]KQ2+1");
      expressionImpl0.readFromStringForDebug("{p}2fWY]KQ2+1");
      ExpressionMatrixImpl expressionMatrixImpl0 = (ExpressionMatrixImpl)expressionMatrixBuilderImpl0.buildMatrix((Expression) expressionImpl0);
      assertNotNull(expressionMatrixImpl0);
      assertEquals("MATRIX\n-----------------------\n | A , B , C , D\n0| 1 , E , E , E\n1| E , 2 , E , E\n2| E , E , 3 , E\n3| E , E , E , 4\n4| 1 , E , E , E\n5| E , E , E , E\n6| E , E , E , E\n7| E , E , E , E\n8| E , E , E , E\n\nCONNECTIONS\n-----------------------\n4 --- A ---> 1\n", expressionMatrixImpl0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      ExpressionImpl expressionImpl0 = new ExpressionImpl();
      expressionImpl0.readFromStringForDebug("5[-reQo]");
      ExpressionPartImpl expressionPartImpl0 = (ExpressionPartImpl)expressionImpl0.getItem(0);
      expressionImpl0.addItem((ExpressionPart) expressionPartImpl0);
      expressionImpl0.readFromStringForDebug("5[-reQo]");
      ExpressionMatrixBuilderImpl expressionMatrixBuilderImpl0 = new ExpressionMatrixBuilderImpl();
      try {
        expressionMatrixBuilderImpl0.buildMatrix((Expression) expressionImpl0);
        fail("Expecting exception: InvalidExpressionException");
      } catch(InvalidExpressionException e) {
      }
  }
}
