/*
 * This file was automatically generated by EvoSuite
 */

package com.browsersoft.openhre.hl7.impl.config;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.browsersoft.openhre.hl7.api.config.HL7Configuration;
import com.browsersoft.openhre.hl7.api.config.InvalidConfigDataStructureException;
import com.browsersoft.openhre.hl7.api.parse.HL7CheckerState;
import com.browsersoft.openhre.hl7.api.parse.ParserException;
import com.browsersoft.openhre.hl7.impl.config.HL7ConfigurationImpl;
import com.browsersoft.openhre.hl7.impl.config.HL7FieldGivenDependingProcessorImpl;
import com.browsersoft.openhre.hl7.impl.parser.HL7CheckerStateImpl;
import java.util.MissingResourceException;
import org.apache.xalan.templates.ElemExtensionScript;
import org.junit.BeforeClass;
import org.w3c.dom.Node;

@RunWith(EvoSuiteRunner.class)
public class HL7FieldGivenDependingProcessorImplEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      HL7FieldGivenDependingProcessorImpl hL7FieldGivenDependingProcessorImpl0 = new HL7FieldGivenDependingProcessorImpl();
      ElemExtensionScript elemExtensionScript0 = new ElemExtensionScript();
      // Undeclared exception!
      try {
        hL7FieldGivenDependingProcessorImpl0.readConfiguration((Node) elemExtensionScript0);
        fail("Expecting exception: MissingResourceException");
      } catch(MissingResourceException e) {
        /*
         * Can't find resource for bundle org.apache.xalan.res.XSLTErrorResources, key ER_FUNCTION_NOT_SUPPORTED
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      HL7FieldGivenDependingProcessorImpl hL7FieldGivenDependingProcessorImpl0 = new HL7FieldGivenDependingProcessorImpl();
      String string0 = hL7FieldGivenDependingProcessorImpl0.getFrom();
      assertNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      HL7FieldGivenDependingProcessorImpl hL7FieldGivenDependingProcessorImpl0 = new HL7FieldGivenDependingProcessorImpl();
      hL7FieldGivenDependingProcessorImpl0.setFrom((String) null);
      assertNull(hL7FieldGivenDependingProcessorImpl0.getFrom());
  }

  @Test
  public void test3()  throws Throwable  {
      HL7FieldGivenDependingProcessorImpl hL7FieldGivenDependingProcessorImpl0 = new HL7FieldGivenDependingProcessorImpl();
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      HL7ConfigurationImpl hL7ConfigurationImpl0 = new HL7ConfigurationImpl();
      hL7CheckerStateImpl0.setConfiguration((HL7Configuration) hL7ConfigurationImpl0);
      try {
        hL7FieldGivenDependingProcessorImpl0.getDataTypeForSituation((HL7CheckerState) hL7CheckerStateImpl0);
        fail("Expecting exception: ParserException");
      } catch(ParserException e) {
      }
  }
}
