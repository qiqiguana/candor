/*
 * This file was automatically generated by EvoSuite
 */

package com.browsersoft.openhre.hl7.impl.config;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.browsersoft.openhre.hl7.api.config.HL7DataTypeMap;
import com.browsersoft.openhre.hl7.api.config.HL7MessageMap;
import com.browsersoft.openhre.hl7.api.config.HL7PatternsForCatchValues;
import com.browsersoft.openhre.hl7.api.config.HL7SegmentMap;
import com.browsersoft.openhre.hl7.api.config.HL7TableMap;
import com.browsersoft.openhre.hl7.api.config.InvalidConfigDataStructureException;
import com.browsersoft.openhre.hl7.impl.config.HL7ConfigurationImpl;
import com.browsersoft.openhre.hl7.impl.config.HL7DataTypeMapImpl;
import com.browsersoft.openhre.hl7.impl.config.HL7MessageMapImpl;
import com.browsersoft.openhre.hl7.impl.config.HL7PatternsForCatchValuesImpl;
import com.browsersoft.openhre.hl7.impl.config.HL7SegmentMapImpl;
import com.browsersoft.openhre.hl7.impl.config.HL7TableMapImpl;
import org.apache.axis.message.Detail;
import org.apache.xalan.templates.ElemWhen;
import org.apache.xerces.dom.DeferredDocumentImpl;
import org.junit.BeforeClass;
import org.w3c.dom.Node;

@RunWith(EvoSuiteRunner.class)
public class HL7ConfigurationImplEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      HL7ConfigurationImpl hL7ConfigurationImpl0 = new HL7ConfigurationImpl();
      HL7PatternsForCatchValuesImpl hL7PatternsForCatchValuesImpl0 = new HL7PatternsForCatchValuesImpl();
      hL7ConfigurationImpl0.setPatterns((HL7PatternsForCatchValues) hL7PatternsForCatchValuesImpl0);
      assertEquals(0, hL7PatternsForCatchValuesImpl0.size());
  }

  @Test
  public void test1()  throws Throwable  {
      HL7ConfigurationImpl hL7ConfigurationImpl0 = new HL7ConfigurationImpl();
      HL7TableMapImpl hL7TableMapImpl0 = (HL7TableMapImpl)hL7ConfigurationImpl0.getTables();
      hL7ConfigurationImpl0.setTables((HL7TableMap) hL7TableMapImpl0);
      assertEquals(" ******************************************\n MESSAGES\n ******************************************\n ******************************************\n ******************************************\n SEGMENTS\n ******************************************\n ******************************************\n ******************************************\n DATA TYPES\n ******************************************\n ******************************************\n ******************************************\n TABLES\n ******************************************\n ******************************************\n", hL7ConfigurationImpl0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      HL7ConfigurationImpl hL7ConfigurationImpl0 = new HL7ConfigurationImpl();
      HL7DataTypeMapImpl hL7DataTypeMapImpl0 = (HL7DataTypeMapImpl)hL7ConfigurationImpl0.getDataTypes();
      hL7ConfigurationImpl0.setDataTypes((HL7DataTypeMap) hL7DataTypeMapImpl0);
      assertEquals(" ******************************************\n DATA TYPES\n ******************************************\n ******************************************\n", hL7DataTypeMapImpl0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      HL7ConfigurationImpl hL7ConfigurationImpl0 = new HL7ConfigurationImpl();
      String string0 = hL7ConfigurationImpl0.toString();
      assertNotNull(string0);
      assertEquals(" ******************************************\n MESSAGES\n ******************************************\n ******************************************\n ******************************************\n SEGMENTS\n ******************************************\n ******************************************\n ******************************************\n DATA TYPES\n ******************************************\n ******************************************\n ******************************************\n TABLES\n ******************************************\n ******************************************\n", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      HL7ConfigurationImpl hL7ConfigurationImpl0 = new HL7ConfigurationImpl();
      HL7MessageMapImpl hL7MessageMapImpl0 = (HL7MessageMapImpl)hL7ConfigurationImpl0.getMessages();
      hL7ConfigurationImpl0.setMessages((HL7MessageMap) hL7MessageMapImpl0);
      assertEquals(" ******************************************\n MESSAGES\n ******************************************\n ******************************************\n ******************************************\n SEGMENTS\n ******************************************\n ******************************************\n ******************************************\n DATA TYPES\n ******************************************\n ******************************************\n ******************************************\n TABLES\n ******************************************\n ******************************************\n", hL7ConfigurationImpl0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      HL7ConfigurationImpl hL7ConfigurationImpl0 = new HL7ConfigurationImpl();
      HL7PatternsForCatchValuesImpl hL7PatternsForCatchValuesImpl0 = (HL7PatternsForCatchValuesImpl)hL7ConfigurationImpl0.getPatterns();
      assertEquals(0, hL7PatternsForCatchValuesImpl0.size());
  }

  @Test
  public void test6()  throws Throwable  {
      HL7ConfigurationImpl hL7ConfigurationImpl0 = new HL7ConfigurationImpl();
      ElemWhen elemWhen0 = new ElemWhen();
      try {
        hL7ConfigurationImpl0.readConfigurations((Node) elemWhen0, (Node) elemWhen0, (Node) elemWhen0, (Node) elemWhen0);
        fail("Expecting exception: InvalidConfigDataStructureException");
      } catch(InvalidConfigDataStructureException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      HL7ConfigurationImpl hL7ConfigurationImpl0 = new HL7ConfigurationImpl();
      HL7SegmentMapImpl hL7SegmentMapImpl0 = (HL7SegmentMapImpl)hL7ConfigurationImpl0.getSegments();
      hL7ConfigurationImpl0.setSegments((HL7SegmentMap) hL7SegmentMapImpl0);
      assertEquals(" ******************************************\n MESSAGES\n ******************************************\n ******************************************\n ******************************************\n SEGMENTS\n ******************************************\n ******************************************\n ******************************************\n DATA TYPES\n ******************************************\n ******************************************\n ******************************************\n TABLES\n ******************************************\n ******************************************\n", hL7ConfigurationImpl0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      HL7ConfigurationImpl hL7ConfigurationImpl0 = new HL7ConfigurationImpl();
      Detail detail0 = new Detail();
      // Undeclared exception!
      try {
        hL7ConfigurationImpl0.readTablesConfiguration((Node) detail0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      HL7ConfigurationImpl hL7ConfigurationImpl0 = new HL7ConfigurationImpl();
      // Undeclared exception!
      try {
        hL7ConfigurationImpl0.readDataTypesConfiguration((Node) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      HL7ConfigurationImpl hL7ConfigurationImpl0 = new HL7ConfigurationImpl();
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl(true);
      try {
        hL7ConfigurationImpl0.readSegmentsConfiguration((Node) deferredDocumentImpl0);
        fail("Expecting exception: InvalidConfigDataStructureException");
      } catch(InvalidConfigDataStructureException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      HL7ConfigurationImpl hL7ConfigurationImpl0 = new HL7ConfigurationImpl();
      hL7ConfigurationImpl0.connectConfigurations();
      assertEquals(" ******************************************\n MESSAGES\n ******************************************\n ******************************************\n ******************************************\n SEGMENTS\n ******************************************\n ******************************************\n ******************************************\n DATA TYPES\n ******************************************\n ******************************************\n ******************************************\n TABLES\n ******************************************\n ******************************************\n", hL7ConfigurationImpl0.toString());
  }
}
