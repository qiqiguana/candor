/*
 * This file was automatically generated by EvoSuite
 */

package com.browsersoft.openhre.hl7.impl.config;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.browsersoft.openhre.hl7.api.config.HL7Configuration;
import com.browsersoft.openhre.hl7.api.config.HL7DataType;
import com.browsersoft.openhre.hl7.api.config.HL7FieldDependingProcessor;
import com.browsersoft.openhre.hl7.api.config.HL7Table;
import com.browsersoft.openhre.hl7.api.parse.HL7CheckerState;
import com.browsersoft.openhre.hl7.api.parse.ParserException;
import com.browsersoft.openhre.hl7.impl.config.HL7ConfigurationImpl;
import com.browsersoft.openhre.hl7.impl.config.HL7FieldImpl;
import com.browsersoft.openhre.hl7.impl.config.HL7FieldRepeatableDependingProcessorImpl;
import com.browsersoft.openhre.hl7.impl.parser.HL7CheckerStateImpl;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class HL7FieldImplEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl();
      hL7FieldImpl0.setTable(" field sequential=\"C.\" length=\"0\" required=\"R\" repeatable=\"false\"");
      String string0 = hL7FieldImpl0.toString();
      assertEquals(" field length=\"0\" required=\"R\" repeatable=\"false\" table=\" field sequential=\"C.\" length=\"0\" required=\"R\" repeatable=\"false\"\"", hL7FieldImpl0.toString());
      assertNotNull(string0);
      assertEquals(" field length=\"0\" required=\"R\" repeatable=\"false\" table=\" field sequential=\"C.\" length=\"0\" required=\"R\" repeatable=\"false\"\"", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl();
      String string0 = hL7FieldImpl0.getTable();
      assertEquals("", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl();
      int int0 = hL7FieldImpl0.getRequired();
      assertEquals(0, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl();
      hL7FieldImpl0.setRequired(458746);
      String string0 = hL7FieldImpl0.toString();
      assertEquals(458746, hL7FieldImpl0.getRequired());
      assertEquals(" field length=\"0\" required=\"\" repeatable=\"false\"", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl();
      HL7FieldDependingProcessor hL7FieldDependingProcessor0 = hL7FieldImpl0.getDependingProcessor();
      assertNull(hL7FieldDependingProcessor0);
  }

  @Test
  public void test5()  throws Throwable  {
      HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl();
      String string0 = hL7FieldImpl0.getReference();
      assertEquals("", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl();
      hL7FieldImpl0.setDependingType(1);
      HL7ConfigurationImpl hL7ConfigurationImpl0 = new HL7ConfigurationImpl();
      // Undeclared exception!
      try {
        hL7FieldImpl0.getActualDataType((HL7Configuration) hL7ConfigurationImpl0, (HL7CheckerState) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl();
      String string0 = hL7FieldImpl0.getSequential();
      assertEquals("", string0);
  }

  @Test
  public void test8()  throws Throwable  {
      HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl();
      HL7Table hL7Table0 = hL7FieldImpl0.getTableObject();
      assertNull(hL7Table0);
  }

  @Test
  public void test9()  throws Throwable  {
      HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl();
      int int0 = hL7FieldImpl0.getMaximumLength();
      assertEquals(0, int0);
  }

  @Test
  public void test10()  throws Throwable  {
      HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl();
      hL7FieldImpl0.setDescription("-P0h\"lD,");
      String string0 = hL7FieldImpl0.toString();
      assertEquals(" field length=\"0\" required=\"R\" repeatable=\"false\" description=\"-P0h\"lD,\"", hL7FieldImpl0.toString());
      assertNotNull(string0);
      assertEquals(" field length=\"0\" required=\"R\" repeatable=\"false\" description=\"-P0h\"lD,\"", string0);
  }

  @Test
  public void test11()  throws Throwable  {
      HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl();
      hL7FieldImpl0.setTableObject((HL7Table) null);
      assertEquals("", hL7FieldImpl0.getDescription());
  }

  @Test
  public void test12()  throws Throwable  {
      HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl();
      int int0 = hL7FieldImpl0.getDependingType();
      assertEquals(0, int0);
  }

  @Test
  public void test13()  throws Throwable  {
      HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl();
      HL7DataType hL7DataType0 = hL7FieldImpl0.getDataType();
      assertNull(hL7DataType0);
  }

  @Test
  public void test14()  throws Throwable  {
      HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl();
      hL7FieldImpl0.setMaximumLength(1);
      assertEquals(" field length=\"1\" required=\"R\" repeatable=\"false\"", hL7FieldImpl0.toString());
      assertEquals(1, hL7FieldImpl0.getMaximumLength());
  }

  @Test
  public void test15()  throws Throwable  {
      HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl();
      HL7FieldRepeatableDependingProcessorImpl hL7FieldRepeatableDependingProcessorImpl0 = new HL7FieldRepeatableDependingProcessorImpl();
      hL7FieldImpl0.setDependingProcessor((HL7FieldDependingProcessor) hL7FieldRepeatableDependingProcessorImpl0);
      assertEquals("", hL7FieldImpl0.getSequential());
  }

  @Test
  public void test16()  throws Throwable  {
      HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl();
      hL7FieldImpl0.setRepeatable(true);
      assertEquals(" field length=\"0\" required=\"R\" repeatable=\"true\"", hL7FieldImpl0.toString());
      assertEquals(true, hL7FieldImpl0.isRepeatable());
  }

  @Test
  public void test17()  throws Throwable  {
      HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl();
      String string0 = hL7FieldImpl0.getDescription();
      assertEquals("", string0);
  }

  @Test
  public void test18()  throws Throwable  {
      HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl();
      hL7FieldImpl0.setSequential("C.");
      String string0 = hL7FieldImpl0.toString();
      assertNotNull(string0);
      assertEquals(" field sequential=\"C.\" length=\"0\" required=\"R\" repeatable=\"false\"", hL7FieldImpl0.toString());
      assertEquals(" field sequential=\"C.\" length=\"0\" required=\"R\" repeatable=\"false\"", string0);
  }

  @Test
  public void test19()  throws Throwable  {
      HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl();
      hL7FieldImpl0.setDataTypeID("-P0h\"lD,");
      String string0 = hL7FieldImpl0.toString();
      assertEquals(" field dataTypeID=\"-P0h\"lD,\" length=\"0\" required=\"R\" repeatable=\"false\"", hL7FieldImpl0.toString());
      assertNotNull(string0);
      assertEquals(" field dataTypeID=\"-P0h\"lD,\" length=\"0\" required=\"R\" repeatable=\"false\"", string0);
  }

  @Test
  public void test20()  throws Throwable  {
      HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl();
      boolean boolean0 = hL7FieldImpl0.isRepeatable();
      assertEquals(false, boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl();
      hL7FieldImpl0.setReference("C.");
      String string0 = hL7FieldImpl0.toString();
      assertNotNull(string0);
      assertEquals(" field reference=\"C.\" length=\"0\" required=\"R\" repeatable=\"false\"", hL7FieldImpl0.toString());
      assertEquals(" field reference=\"C.\" length=\"0\" required=\"R\" repeatable=\"false\"", string0);
  }

  @Test
  public void test22()  throws Throwable  {
      HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl();
      String string0 = hL7FieldImpl0.getDataTypeID();
      assertEquals("", string0);
  }

  @Test
  public void test23()  throws Throwable  {
      HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl();
      hL7FieldImpl0.setDataType((HL7DataType) null);
      assertEquals(false, hL7FieldImpl0.isRepeatable());
  }

  @Test
  public void test24()  throws Throwable  {
      HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl();
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      // Undeclared exception!
      try {
        hL7FieldImpl0.getActualDataType((HL7Configuration) null, (HL7CheckerState) hL7CheckerStateImpl0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test25()  throws Throwable  {
      HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl();
      hL7FieldImpl0.setDependingType((-1554));
      HL7CheckerStateImpl hL7CheckerStateImpl0 = new HL7CheckerStateImpl();
      hL7FieldImpl0.getActualDataType((HL7Configuration) null, (HL7CheckerState) hL7CheckerStateImpl0);
      assertEquals(-1554, hL7FieldImpl0.getDependingType());
  }

  @Test
  public void test26()  throws Throwable  {
      HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl();
      String string0 = hL7FieldImpl0.toString();
      assertNotNull(string0);
      assertEquals(" field length=\"0\" required=\"R\" repeatable=\"false\"", string0);
  }

  @Test
  public void test27()  throws Throwable  {
      HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl();
      hL7FieldImpl0.setRequired(1);
      String string0 = hL7FieldImpl0.toString();
      assertEquals(1, hL7FieldImpl0.getRequired());
      assertEquals(" field length=\"0\" required=\"O\" repeatable=\"false\"", string0);
  }

  @Test
  public void test28()  throws Throwable  {
      HL7FieldImpl hL7FieldImpl0 = new HL7FieldImpl();
      hL7FieldImpl0.setRequired(4);
      String string0 = hL7FieldImpl0.toString();
      assertEquals(4, hL7FieldImpl0.getRequired());
      assertEquals(" field length=\"0\" required=\"B\" repeatable=\"false\"", string0);
  }
}
