/*
 * This file was automatically generated by EvoSuite
 */

package org.databene.jdbacl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.OutputStream;
import java.io.PipedReader;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.util.ArrayList;
import java.util.List;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SQLUtilEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("sN*k_!Z~F(e5e7t=xm", "sN*k_!Z~F(e5e7t=xm", (Object) null);
      assertNotNull(string0);
      assertEquals("null", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[10];
      String string0 = SQLUtil.leftJoin("gK<@Sc3.\"5*l-(ZJ;HT", stringArray0, "gK<@Sc3.\"5*l-(ZJ;HT", "drop materialized viewjna9=e'-`=<gn=n", stringArray0);
      assertNotNull(string0);
      assertEquals("left join gK<@Sc3.\"5*l-(ZJ;HT as drop materialized viewjna9=e'-`=<gn=n on gK<@Sc3.\"5*l-(ZJ;HT.null = drop materialized viewjna9=e'-`=<gn=n.null and gK<@Sc3.\"5*l-(ZJ;HT.null = drop materialized viewjna9=e'-`=<gn=n.null and gK<@Sc3.\"5*l-(ZJ;HT.null = drop materialized viewjna9=e'-`=<gn=n.null and gK<@Sc3.\"5*l-(ZJ;HT.null = drop materialized viewjna9=e'-`=<gn=n.null and gK<@Sc3.\"5*l-(ZJ;HT.null = drop materialized viewjna9=e'-`=<gn=n.null and gK<@Sc3.\"5*l-(ZJ;HT.null = drop materialized viewjna9=e'-`=<gn=n.null and gK<@Sc3.\"5*l-(ZJ;HT.null = drop materialized viewjna9=e'-`=<gn=n.null and gK<@Sc3.\"5*l-(ZJ;HT.null = drop materialized viewjna9=e'-`=<gn=n.null and gK<@Sc3.\"5*l-(ZJ;HT.null = drop materialized viewjna9=e'-`=<gn=n.null and gK<@Sc3.\"5*l-(ZJ;HT.null = drop materialized viewjna9=e'-`=<gn=n.null", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("8");
      DBDataType dBDataType0 = DBDataType.getInstance((-1193), "8");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("8", (DBTable) defaultDBTable0, dBDataType0, (Integer) (-1193), (Integer) (-1193));
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertNotNull(string0);
      assertEquals("8(-1193,-1193)", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      assertNotNull(sQLUtil0);
  }

  @Test
  public void test4()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("drop materialized viewjna9=e'-`=<gn=n");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop materialized viewjna9=e'-`=<gn=n", dBSchema0);
      String[] stringArray0 = new String[3];
      String[] stringArray1 = new String[1];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("drop materialized viewjna9=e'-`=<gn=n", false, (DBTable) defaultDBTable0, stringArray0, (DBTable) defaultDBTable0, stringArray1);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try {
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.innerJoin("f~y@V|):=];O", stringArray0, "f~y@V|):=];O", "f~y@V|):=];O", stringArray0);
      assertEquals("f~y@V|):=];O as f~y@V|):=];O on f~y@V|):=];O.null = f~y@V|):=];O.null", string0);
      assertNotNull(string0);
  }

  @Test
  public void test6()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[18];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", true, (DBTable) defaultDBTable0, stringArray0, (DBTable) defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT  FOREIGN KEY (, , , , , , , , , , , , , , , , , ) REFERENCES (, , , , , , , , , , , , , , , , , )", dBForeignKeyConstraint0.toString());
      assertNotNull(string0);
      assertEquals("CONSTRAINT  FOREIGN KEY (, , , , , , , , , , , , , , , , , ) REFERENCES (, , , , , , , , , , , , , , , , , )", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      DBTable dBTable0 = null;
      String string0 = "!>(\\9V+l";
      int int0 = 1804;
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn(string0, dBTable0, int0, string0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Illegal column type format: !>(\\9V+l
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("f~y@V|):=];O F~Y@V|):=];O(-519,-519) NULL");
      assertNotNull(objectArray0);
  }

  @Test
  public void test9()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("drop materialized viewjna9=e'-`=<gn=n");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop materialized viewjna9=e'-`=<gn=n", dBSchema0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop materialized viewjna9=e'-`=<gn=n", (DBTable) defaultDBTable0, 1676, "drop materialized viewjna9=e'-`=<gn=n");
      assertNotNull(defaultDBColumn0);
      
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      PrintStream printStream0 = new PrintStream((OutputStream) rowOutputBinary0);
      PrintWriter printWriter0 = new PrintWriter((OutputStream) printStream0, true);
      SQLUtil.renderCreateTable((DBTable) defaultDBTable0, true, nameSpec0, printWriter0);
      assertEquals(136, rowOutputBinary0.size());
      assertEquals("create table drop materialized viewjna9=e'-`=<gn=n (\n\tdrop materialized viewjna9=e'-`=<gn=n DROP MATERIALIZED VIEWJNA9=E'-`=<GN=N NULL\n)", rowOutputBinary0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("drop materialized viewjna9=e'-`=<gn=n");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop materialized viewjna9=e'-`=<gn=n", dBSchema0);
      String[] stringArray0 = new String[3];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) defaultDBTable0, "", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      PrintStream printStream0 = new PrintStream((OutputStream) rowOutputBinary0);
      PrintWriter printWriter0 = new PrintWriter((OutputStream) printStream0, true);
      SQLUtil.renderCreateTable((DBTable) defaultDBTable0, true, nameSpec0, printWriter0);
      assertEquals(87, rowOutputBinary0.size());
      assertEquals("create table drop materialized viewjna9=e'-`=<gn=n (,\n\tCONSTRAINT  PRIMARY KEY (, , )\n)", rowOutputBinary0.toString());
  }

  @Test
  public void test11()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("drop materialized viewjna9=e'-`=<gn=n");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop materialized viewjna9=e'-`=<gn=n", dBSchema0);
      String[] stringArray0 = new String[3];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint((DBTable) defaultDBTable0, "drop materialized viewjna9=e'-`=<gn=n", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      PrintStream printStream0 = new PrintStream((OutputStream) rowOutputBinary0);
      PrintWriter printWriter0 = new PrintWriter((OutputStream) printStream0, true);
      SQLUtil.renderCreateTable((DBTable) defaultDBTable0, true, nameSpec0, printWriter0);
      assertEquals(121, rowOutputBinary0.size());
      assertEquals("create table drop materialized viewjna9=e'-`=<gn=n (,\n\tCONSTRAINT \"drop materialized viewjna9=e'-`=<gn=n\" UNIQUE (, , )\n)", rowOutputBinary0.toString());
  }

  @Test
  public void test12()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("drop materialized viewjna9=e'-`=<gn=n");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop materialized viewjna9=e'-`=<gn=n", dBSchema0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      PrintStream printStream0 = new PrintStream((OutputStream) rowOutputBinary0);
      PrintWriter printWriter0 = new PrintWriter((OutputStream) printStream0, false);
      SQLUtil.renderCreateTable((DBTable) defaultDBTable0, false, nameSpec0, printWriter0);
      assertEquals(54, rowOutputBinary0.size());
      assertEquals("create table drop materialized viewjna9=e'-`=<gn=n (\n)", rowOutputBinary0.toString());
  }

  @Test
  public void test13()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-519), "f~y@V|):=];O");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("f~y@V|):=];O", (DBTable) null, dBDataType0, (Integer) (-519));
      DBColumn[] dBColumnArray0 = new DBColumn[8];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[7] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("f~y@V|):=];O, f~y@V|):=];O, f~y@V|):=];O, f~y@V|):=];O, f~y@V|):=];O, f~y@V|):=];O, f~y@V|):=];O, f~y@V|):=];O", string0);
      assertNotNull(string0);
  }

  @Test
  public void test14()  throws Throwable  {
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, 0, "");
      assertNotNull(defaultDBColumn0);
      
      arrayList0.add((DBColumn) defaultDBColumn0);
      arrayList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      assertNotNull(string0);
      assertEquals(", ", string0);
  }

  @Test
  public void test15()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DBDataType dBDataType0 = DBDataType.getInstance((-519), "f~y@V|):=];O");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("f~y@V|):=];O", (DBTable) null, dBDataType0, (Integer) (-519));
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("F~Y@V|):=];O(-519)", stringBuilder0.toString());
      assertEquals("f~y@V|):=];O : F~Y@V|):=];O(-519)", defaultDBColumn0.toString());
  }

  @Test
  public void test16()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[18];
      stringArray0[0] = "";
      String string0 = SQLUtil.renderQuery((DBTable) defaultDBTable0, stringArray0, (Object[]) stringArray0);
      assertNotNull(string0);
      assertEquals("SELECT * FROM  WHERE  = '' AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
  }

  @Test
  public void test17()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("SELECT * FROM  WHERE  = '' AND null = '' AND null = '' AND null = null AND null = null");
      assertEquals(false, (boolean)boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter table");
      assertEquals(true, (boolean)boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("ar:?Ha4wlF");
  }

  @Test
  public void test20()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("updateBlob(int, InputStream, long)");
      assertEquals(true, (boolean)boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("call");
      assertEquals(false, (boolean)boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try {
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test23()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("drop materialized viewjna9=e'-`=<gn=n");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop materialized viewjna9=e'-`=<gn=n", dBSchema0);
      String[] stringArray0 = new String[10];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint((DBTable) defaultDBTable0, "drop materialized viewjna9=e'-`=<gn=n", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec((DBConstraint) dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"drop materialized viewjna9=e'-`=<gn=n\" UNIQUE (, , , , , , , , , )", dBUniqueConstraint0.toString());
      assertNotNull(string0);
      assertEquals("UNIQUE (, , , , , , , , , )", string0);
  }

  @Test
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = SQLUtil.join((String) null, (String) null, stringArray0, "7EM7", (String) null, stringArray0);
      assertEquals("7EM7 as null on null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null", string0);
      assertNotNull(string0);
  }

  @Test
  public void test25()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("", stringBuilder0);
      assertEquals("", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
  }

  @Test
  public void test26()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append(false);
      SQLUtil.addRequiredCondition("left join gK<@Sc3.\"5*l-(ZJ;HT as drop materialized viewjna9=e'-`=<gn=n on gK<@Sc3.\"5*l-(ZJ;HT.drop materialized viewjna9=e'-`=<gn=n = drop materialized viewjna9=e'-`=<gn=n.drop materialized viewjna9=e'-`=<gn=n and gK<@Sc3.\"5*l-(ZJ;HT.drop materialized viewjna9=e'-`=<gn=n = drop materialized viewjna9=e'-`=<gn=n.drop materialized viewjna9=e'-`=<gn=n and gK<@Sc3.\"5*l-(ZJ;HT.gK<@Sc3.\"5*l-(ZJ;HT = drop materialized viewjna9=e'-`=<gn=n.gK<@Sc3.\"5*l-(ZJ;HT and gK<@Sc3.\"5*l-(ZJ;HT.gK<@Sc3.\"5*l-(ZJ;HT = drop materialized viewjna9=e'-`=<gn=n.gK<@Sc3.\"5*l-(ZJ;HT and gK<@Sc3.\"5*l-(ZJ;HT.drop materialized viewjna9=e'-`=<gn=n = drop materialized viewjna9=e'-`=<gn=n.drop materialized viewjna9=e'-`=<gn=n and gK<@Sc3.\"5*l-(ZJ;HT.drop materialized viewjna9=e'-`=<gn=n = drop materialized viewjna9=e'-`=<gn=n.drop materialized viewjna9=e'-`=<gn=n and gK<@Sc3.\"5*l-(ZJ;HT.gK<@Sc3.\"5*l-(ZJ;HT = drop materialized viewjna9=e'-`=<gn=n.gK<@Sc3.\"5*l-(ZJ;HT and gK<@Sc3.\"5*l-(ZJ;HT.drop materialized viewjna9=e'-`=<gn=n = drop materialized viewjna9=e'-`=<gn=n.drop materialized viewjna9=e'-`=<gn=n and gK<@Sc3.\"5*l-(ZJ;HT.drop materialized viewjna9=e'-`=<gn=n = drop materialized viewjna9=e'-`=<gn=n.drop materialized viewjna9=e'-`=<gn=n and gK<@Sc3.\"5*l-(ZJ;HT.gK<@Sc3.\"5*l-(ZJ;HT = drop materialized viewjna9=e'-`=<gn=n.gK<@Sc3.\"5*l-(ZJ;HT", stringBuilder0);
      assertEquals("false and left join gK<@Sc3.\"5*l-(ZJ;HT as drop materialized viewjna9=e'-`=<gn=n on gK<@Sc3.\"5*l-(ZJ;HT.drop materialized viewjna9=e'-`=<gn=n = drop materialized viewjna9=e'-`=<gn=n.drop materialized viewjna9=e'-`=<gn=n and gK<@Sc3.\"5*l-(ZJ;HT.drop materialized viewjna9=e'-`=<gn=n = drop materialized viewjna9=e'-`=<gn=n.drop materialized viewjna9=e'-`=<gn=n and gK<@Sc3.\"5*l-(ZJ;HT.gK<@Sc3.\"5*l-(ZJ;HT = drop materialized viewjna9=e'-`=<gn=n.gK<@Sc3.\"5*l-(ZJ;HT and gK<@Sc3.\"5*l-(ZJ;HT.gK<@Sc3.\"5*l-(ZJ;HT = drop materialized viewjna9=e'-`=<gn=n.gK<@Sc3.\"5*l-(ZJ;HT and gK<@Sc3.\"5*l-(ZJ;HT.drop materialized viewjna9=e'-`=<gn=n = drop materialized viewjna9=e'-`=<gn=n.drop materialized viewjna9=e'-`=<gn=n and gK<@Sc3.\"5*l-(ZJ;HT.drop materialized viewjna9=e'-`=<gn=n = drop materialized viewjna9=e'-`=<gn=n.drop materialized viewjna9=e'-`=<gn=n and gK<@Sc3.\"5*l-(ZJ;HT.gK<@Sc3.\"5*l-(ZJ;HT = drop materialized viewjna9=e'-`=<gn=n.gK<@Sc3.\"5*l-(ZJ;HT and gK<@Sc3.\"5*l-(ZJ;HT.drop materialized viewjna9=e'-`=<gn=n = drop materialized viewjna9=e'-`=<gn=n.drop materialized viewjna9=e'-`=<gn=n and gK<@Sc3.\"5*l-(ZJ;HT.drop materialized viewjna9=e'-`=<gn=n = drop materialized viewjna9=e'-`=<gn=n.drop materialized viewjna9=e'-`=<gn=n and gK<@Sc3.\"5*l-(ZJ;HT.gK<@Sc3.\"5*l-(ZJ;HT = drop materialized viewjna9=e'-`=<gn=n.gK<@Sc3.\"5*l-(ZJ;HT", stringBuilder0.toString());
  }

  @Test
  public void test27()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("f~y@V|):=];O", stringBuilder0);
      SQLUtil.addOptionalCondition((String) null, stringBuilder0);
      assertEquals("f~y@V|):=];O or null", stringBuilder0.toString());
  }

  @Test
  public void test28()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.ownerDotComponent((DBObject) dBCatalog0);
      assertNotNull(string0);
      assertEquals("null", string0);
  }

  @Test
  public void test29()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      Integer integer0 = new Integer(368);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) defaultDBTable0, (DBDataType) null, integer0, (Integer) 368);
      String string0 = SQLUtil.ownerDotComponent((DBObject) defaultDBColumn0);
      assertEquals(".", string0);
      assertNotNull(string0);
  }

  @Test
  public void test30()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("drop materialized viewjna9=e'-`=<gn=n");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop materialized viewjna9=e'-`=<gn=n", dBSchema0);
      String[] stringArray0 = new String[3];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint((DBTable) defaultDBTable0, "drop materialized viewjna9=e'-`=<gn=n", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      dBUniqueConstraint0.setName((String) null);
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      PrintStream printStream0 = new PrintStream((OutputStream) rowOutputBinary0);
      PrintWriter printWriter0 = new PrintWriter((OutputStream) printStream0, true);
      SQLUtil.renderCreateTable((DBTable) defaultDBTable0, true, nameSpec0, printWriter0);
      assertEquals("create table drop materialized viewjna9=e'-`=<gn=n (,\n\tUNIQUE (, , )\n)", rowOutputBinary0.toString());
      assertEquals(70, rowOutputBinary0.size());
  }

  @Test
  public void test31()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("8");
      String[] stringArray0 = new String[4];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint((DBTable) defaultDBTable0, "8", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT 8 UNIQUE (, , , )", dBUniqueConstraint0.toString());
      assertEquals("UNIQUE (, , , )", string0);
      assertNotNull(string0);
  }

  @Test
  public void test32()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("drop materialized viewjna9=e'-`=<gn=n");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop materialized viewjna9=e'-`=<gn=n", dBSchema0);
      String[] stringArray0 = new String[3];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint((DBTable) defaultDBTable0, "drop materialized viewjna9=e'-`=<gn=n", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "drop materialized viewjna9=e'-`=<gn=n");
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("drop materialized viewjna9=e'-`=<gn=nCONSTRAINT \"drop materialized viewjna9=e'-`=<gn=n\" ", stringBuilder0.toString());
  }

  @Test
  public void test33()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("drop materialized viewjna9=e'-`=<gn=n");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop materialized viewjna9=e'-`=<gn=n", dBSchema0);
      String[] stringArray0 = new String[3];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint((DBTable) defaultDBTable0, "drop materialized viewjna9=e'-`=<gn=n", false, stringArray0);
      dBUniqueConstraint0.setName((String) null);
      String string0 = SQLUtil.constraintName((DBConstraint) dBUniqueConstraint0);
      assertEquals("", string0);
  }

  @Test
  public void test34()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("drop materialized viewjna9=e'-`=<gn=n");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop materialized viewjna9=e'-`=<gn=n", dBSchema0);
      String[] stringArray0 = new String[10];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint((DBTable) defaultDBTable0, "drop materialized viewjna9=e'-`=<gn=n", false, stringArray0);
      String string0 = SQLUtil.constraintName((DBConstraint) dBUniqueConstraint0);
      assertEquals("CONSTRAINT \"drop materialized viewjna9=e'-`=<gn=n\" ", string0);
      assertNotNull(string0);
  }

  @Test
  public void test35()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema((String) null);
      DBPackage dBPackage0 = new DBPackage((String) null, dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure((String) null, dBPackage0);
      String string0 = SQLUtil.typeAndName((DBObject) dBProcedure0);
      assertNotNull(string0);
      assertEquals("procedure null", string0);
  }

  @Test
  public void test36()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test
  public void test37()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      Integer integer0 = new Integer((-1));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) defaultDBTable0, (DBDataType) null, integer0, (Integer) (-1));
      String string0 = SQLUtil.typeAndName((DBObject) defaultDBColumn0);
      assertEquals("column ", string0);
      assertNotNull(string0);
  }

  @Test
  public void test38()  throws Throwable  {
      String string0 = SQLUtil.removeComments(".na9=e'$`=<gn=N");
      assertEquals(".na9=e'$`=<gn=N", string0);
  }

  @Test
  public void test39()  throws Throwable  {
      String string0 = SQLUtil.normalize("left join gK<@Sc3.\"5*l-(ZJ;HT as drop materialized viewjna9=e'-`=<gn=n on gK<@Sc3.\"5*l-(ZJ;HT.drop materialized viewjna9=e'-`=<gn=n = drop materialized viewjna9=e'-`=<gn=n.drop materialized viewjna9=e'-`=<gn=n and gK<@Sc3.\"5*l-(ZJ;HT.drop materialized viewjna9=e'-`=<gn=n = drop materialized viewjna9=e'-`=<gn=n.drop materialized viewjna9=e'-`=<gn=n and gK<@Sc3.\"5*l-(ZJ;HT.gK<@Sc3.\"5*l-(ZJ;HT = drop materialized viewjna9=e'-`=<gn=n.gK<@Sc3.\"5*l-(ZJ;HT and gK<@Sc3.\"5*l-(ZJ;HT.gK<@Sc3.\"5*l-(ZJ;HT = drop materialized viewjna9=e'-`=<gn=n.gK<@Sc3.\"5*l-(ZJ;HT and gK<@Sc3.\"5*l-(ZJ;HT.drop materialized viewjna9=e'-`=<gn=n = drop materialized viewjna9=e'-`=<gn=n.drop materialized viewjna9=e'-`=<gn=n and gK<@Sc3.\"5*l-(ZJ;HT.drop materialized viewjna9=e'-`=<gn=n = drop materialized viewjna9=e'-`=<gn=n.drop materialized viewjna9=e'-`=<gn=n and gK<@Sc3.\"5*l-(ZJ;HT.gK<@Sc3.\"5*l-(ZJ;HT = drop materialized viewjna9=e'-`=<gn=n.gK<@Sc3.\"5*l-(ZJ;HT and gK<@Sc3.\"5*l-(ZJ;HT.drop materialized viewjna9=e'-`=<gn=n = drop materialized viewjna9=e'-`=<gn=n.drop materialized viewjna9=e'-`=<gn=n and gK<@Sc3.\"5*l-(ZJ;HT.drop materialized viewjna9=e'-`=<gn=n = drop materialized viewjna9=e'-`=<gn=n.drop materialized viewjna9=e'-`=<gn=n and gK<@Sc3.\"5*l-(ZJ;HT.gK<@Sc3.\"5*l-(ZJ;HT = drop materialized viewjna9=e'-`=<gn=n.gK<@Sc3.\"5*l-(ZJ;HT", true);
      assertEquals("left join gK < @ Sc3.\"5*l-(ZJ;HT as drop materialized viewjna9=e'-`=<gn=n on gK<@Sc3.\" 5 * l - (ZJ ; HT.drop materialized viewjna9 = e '-`=<gn=n = drop materialized viewjna9=e' - ` = < gn = n.drop materialized viewjna9 = e '-`=<gn=n and gK<@Sc3.\"5*l-(ZJ;HT.drop materialized viewjna9=e' - ` = < gn = n = drop materialized viewjna9 = e '-`=<gn=n.drop materialized viewjna9=e' - ` = < gn = n and gK < @ Sc3.\"5*l-(ZJ;HT.gK<@Sc3.\" 5 * l - (ZJ ; HT = drop materialized viewjna9 = e '-`=<gn=n.gK<@Sc3.\"5*l-(ZJ;HT and gK<@Sc3.\"5*l-(ZJ;HT.gK<@Sc3.\"5*l-(ZJ;HT = drop materialized viewjna9=e' - ` = < gn = n.gK < @ Sc3.\"5*l-(ZJ;HT and gK<@Sc3.\" 5 * l - (ZJ ; HT.drop materialized viewjna9 = e '-`=<gn=n = drop materialized viewjna9=e' - ` = < gn = n.drop materialized viewjna9 = e '-`=<gn=n and gK<@Sc3.\"5*l-(ZJ;HT.drop materialized viewjna9=e' - ` = < gn = n = drop materialized viewjna9 = e '-`=<gn=n.drop materialized viewjna9=e' - ` = < gn = n and gK < @ Sc3.\"5*l-(ZJ;HT.gK<@Sc3.\" 5 * l - (ZJ ; HT = drop materialized viewjna9 = e '-`=<gn=n.gK<@Sc3.\"5*l-(ZJ;HT and gK<@Sc3.\"5*l-(ZJ;HT.drop materialized viewjna9=e' - ` = < gn = n = drop materialized viewjna9 = e '-`=<gn=n.drop materialized viewjna9=e' - ` = < gn = n and gK < @ Sc3.\"5*l-(ZJ;HT.drop materialized viewjna9=e'-`=<gn=n = drop materialized viewjna9=e'-`=<gn=n.drop materialized viewjna9=e'-`=<gn=n and gK<@Sc3.\" 5 * l - (ZJ ; HT.gK < @ Sc3.\"5*l-(ZJ;HT = drop materialized viewjna9=e'-`=<gn=n.gK<@Sc3.\" 5 * l - (ZJ ; HT", string0);
      assertNotNull(string0);
  }

  @Test
  public void test40()  throws Throwable  {
      String string0 = SQLUtil.normalize("yW+NPs089#vz48.yW+NPs089#vz48, yW+NPs089#vz48.yW+NPs089#vz48, yW+NPs089#vz48.yW+NPs089#vz48, yW+NPs089#vz48.yW+NPs089#vz48, yW+NPs089#vz48.null, yW+NPs089#vz48.yW+NPs089#vz48, yW+NPs089#vz48.null, yW+NPs089#vz48.null, yW+NPs089#vz48.yW+NPs089#vz48, yW+NPs089#vz48.yW+NPs089#vz48, yW+NPs089#vz48.yW+NPs089#vz48, yW+NPs089#vz48.yW+NPs089#vz48, yW+NPs089#vz48.null, yW+NPs089#vz48.yW+NPs089#vz48, yW+NPs089#vz48.Yv-sio TTFRz|}^-Z, yW+NPs089#vz48.Yv-sio TTFRz|}^-Z, yW+NPs089#vz48.yW+NPs089#vz48, yW+NPs089#vz48.Yv-sio TTFRz|}^-Z, yW+NPs089#vz48.yW+NPs089#vz48, yW+NPs089#vz48.Yv-sio TTFRz|}^-Z, yW+NPs089#vz48.Yv-sio TTFRz|}^-Z, yW+NPs089#vz48.yW+NPs089#vz48, yW+NPs089#vz48.yW+NPs089#vz48", false);
      assertEquals("yW + NPs089 # vz48.yW + NPs089 # vz48, yW + NPs089 # vz48.yW + NPs089 # vz48, yW + NPs089 # vz48.yW + NPs089 # vz48, yW + NPs089 # vz48.yW + NPs089 # vz48, yW + NPs089 # vz48.null, yW + NPs089 # vz48.yW + NPs089 # vz48, yW + NPs089 # vz48.null, yW + NPs089 # vz48.null, yW + NPs089 # vz48.yW + NPs089 # vz48, yW + NPs089 # vz48.yW + NPs089 # vz48, yW + NPs089 # vz48.yW + NPs089 # vz48, yW + NPs089 # vz48.yW + NPs089 # vz48, yW + NPs089 # vz48.null, yW + NPs089 # vz48.yW + NPs089 # vz48, yW + NPs089 # vz48.Yv - sio TTFRz | } ^ - Z, yW + NPs089 # vz48.Yv - sio TTFRz | } ^ - Z, yW + NPs089 # vz48.yW + NPs089 # vz48, yW + NPs089 # vz48.Yv - sio TTFRz | } ^ - Z, yW + NPs089 # vz48.yW + NPs089 # vz48, yW + NPs089 # vz48.Yv - sio TTFRz | } ^ - Z, yW + NPs089 # vz48.Yv - sio TTFRz | } ^ - Z, yW + NPs089 # vz48.yW + NPs089 # vz48, yW + NPs089 # vz48.yW + NPs089 # vz48", string0);
  }

  @Test
  public void test41()  throws Throwable  {
      String string0 = SQLUtil.normalize("I*Z7[.r1u4/0p$F6x=)", true);
      assertNotNull(string0);
      assertEquals("I * Z7 [.r1u4 / 0p $ F6x =)", string0);
  }

  @Test
  public void test42()  throws Throwable  {
      String string0 = SQLUtil.normalize("*/", true);
      assertEquals("*/", string0);
  }

  @Test
  public void test43()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertNotNull(string0);
      assertEquals("- 0", string0);
  }

  @Test
  public void test44()  throws Throwable  {
      String[] stringArray0 = new String[23];
      String string0 = SQLUtil.renderColumnListWithTableName("yW+NPs089#vz48", stringArray0);
      assertEquals("yW+NPs089#vz48.null, yW+NPs089#vz48.null, yW+NPs089#vz48.null, yW+NPs089#vz48.null, yW+NPs089#vz48.null, yW+NPs089#vz48.null, yW+NPs089#vz48.null, yW+NPs089#vz48.null, yW+NPs089#vz48.null, yW+NPs089#vz48.null, yW+NPs089#vz48.null, yW+NPs089#vz48.null, yW+NPs089#vz48.null, yW+NPs089#vz48.null, yW+NPs089#vz48.null, yW+NPs089#vz48.null, yW+NPs089#vz48.null, yW+NPs089#vz48.null, yW+NPs089#vz48.null, yW+NPs089#vz48.null, yW+NPs089#vz48.null, yW+NPs089#vz48.null, yW+NPs089#vz48.null", string0);
      assertNotNull(string0);
  }
}
