/*
 * This file was automatically generated by EvoSuite
 */

package org.databene.jdbacl.dialect;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.math.BigInteger;
import java.sql.Connection;
import java.sql.SQLException;
import org.databene.jdbacl.dialect.FirebirdDialect;
import org.databene.jdbacl.model.DBSequence;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class FirebirdDialectEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      FirebirdDialect firebirdDialect0 = new FirebirdDialect();
      String string0 = firebirdDialect0.renderFetchSequenceValue("INTEG_0");
      assertNotNull(string0);
      assertEquals("select gen_id(INTEG_0, 1) from RDB$DATABASE;", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      FirebirdDialect firebirdDialect0 = new FirebirdDialect();
      String string0 = firebirdDialect0.renderDropSequence("INTEG_0");
      assertNotNull(string0);
      assertEquals("drop generator INTEG_0", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      FirebirdDialect firebirdDialect0 = new FirebirdDialect();
      DBSequence dBSequence0 = new DBSequence("o$:1>6Z5]/8 |49K", "o$:1>6Z5]/8 |49K", "o$:1>6Z5]/8 |49K");
      String string0 = firebirdDialect0.renderCreateSequence(dBSequence0);
      assertEquals("CREATE GENERATOR o$:1>6Z5]/8 |49K", string0);
      assertNotNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      FirebirdDialect firebirdDialect0 = new FirebirdDialect();
      DBSequence dBSequence0 = new DBSequence("o$:1>6Z5]/8 |49K", "o$:1>6Z5]/8 |49K", "o$:1>6Z5]/8 |49K");
      BigInteger bigInteger0 = BigInteger.TEN;
      dBSequence0.setStart(bigInteger0);
      String string0 = firebirdDialect0.renderCreateSequence(dBSequence0);
      assertNotNull(string0);
      assertEquals("CREATE GENERATOR o$:1>6Z5]/8 |49K; SET GENERATOR o$:1>6Z5]/8 |49K TO 9;", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      FirebirdDialect firebirdDialect0 = new FirebirdDialect();
      // Undeclared exception!
      try {
        firebirdDialect0.setNextSequenceValue((String) null, (-6L), (Connection) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      FirebirdDialect firebirdDialect0 = new FirebirdDialect();
      boolean boolean0 = firebirdDialect0.isDefaultSchema("org.firebirdsql.jdbc.FBDriver", "org.firebirdsql.jdbc.FBDriver");
      assertEquals(true, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      FirebirdDialect firebirdDialect0 = new FirebirdDialect();
      // Undeclared exception!
      try {
        firebirdDialect0.createSequence("RDB$0", 744L, (Connection) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      FirebirdDialect firebirdDialect0 = new FirebirdDialect();
      String string0 = firebirdDialect0.getJDBCDriverClass();
      assertEquals("org.firebirdsql.jdbc.FBDriver", string0);
  }

  @Test
  public void test8()  throws Throwable  {
      FirebirdDialect firebirdDialect0 = new FirebirdDialect();
      boolean boolean0 = firebirdDialect0.isDefaultCatalog("drop generator INTEG_0", "INTEG_0");
      assertEquals(true, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      FirebirdDialect firebirdDialect0 = new FirebirdDialect();
      boolean boolean0 = firebirdDialect0.isSequenceBoundarySupported();
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      FirebirdDialect firebirdDialect0 = new FirebirdDialect();
      boolean boolean0 = firebirdDialect0.isDeterministicPKName("INTEG_0");
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      FirebirdDialect firebirdDialect0 = new FirebirdDialect();
      boolean boolean0 = firebirdDialect0.isDeterministicPKName("RDB$0");
      assertEquals(true, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      FirebirdDialect firebirdDialect0 = new FirebirdDialect();
      boolean boolean0 = firebirdDialect0.isDeterministicUKName("RDB$0");
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      FirebirdDialect firebirdDialect0 = new FirebirdDialect();
      boolean boolean0 = firebirdDialect0.isDeterministicUKName("select gen_id(INTEG_0, 1) from RDB$DATABASE;");
      assertEquals(true, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      FirebirdDialect firebirdDialect0 = new FirebirdDialect();
      boolean boolean0 = firebirdDialect0.isDeterministicFKName("INTEG_0");
      assertEquals(false, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      FirebirdDialect firebirdDialect0 = new FirebirdDialect();
      boolean boolean0 = firebirdDialect0.isDeterministicFKName("CREATE GENERATOR o$:1>6Z5]/8 |49K; SET GENERATOR o$:1>6Z5]/8 |49K TO 9;");
      assertEquals(true, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      FirebirdDialect firebirdDialect0 = new FirebirdDialect();
      boolean boolean0 = firebirdDialect0.isDeterministicIndexName("RDB$0");
      assertEquals(false, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      FirebirdDialect firebirdDialect0 = new FirebirdDialect();
      boolean boolean0 = firebirdDialect0.isDeterministicIndexName("org.firebirdsql.jdbc.FBDriver");
      assertEquals(true, boolean0);
  }
}
