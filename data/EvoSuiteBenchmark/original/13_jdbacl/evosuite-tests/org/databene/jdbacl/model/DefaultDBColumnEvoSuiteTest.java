/*
 * This file was automatically generated by EvoSuite
 */

package org.databene.jdbacl.model;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DefaultDBColumnEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("RiqY2L/ ", (DBTable) null, (DBDataType) null);
      assertNotNull(defaultDBColumn0);
      
      defaultDBColumn0.setDefaultValue("RiqY2L/ ");
      assertEquals(false, defaultDBColumn0.isVersionColumn());
  }

  @Test
  public void test1()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("RiqJ2L/ ", (DBTable) null, 806926250, "RiqJ2L/ ");
      assertNotNull(defaultDBColumn0);
      
      String string0 = defaultDBColumn0.toString();
      assertEquals(false, defaultDBColumn0.isVersionColumn());
      assertEquals("RiqJ2L/  : RIQJ2L/ ", string0);
      assertNotNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("7K");
      DBDataType dBDataType0 = DBDataType.getInstance(1618, "7K");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("7K", (DBTable) defaultDBTable0, 1618, "7K");
      assertNotNull(defaultDBColumn0);
      
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("7K", (DBTable) defaultDBTable0, dBDataType0);
      boolean boolean0 = defaultDBColumn0.equals((Object) defaultDBColumn1);
      assertTrue(defaultDBColumn1.equals(defaultDBColumn0));
      assertEquals(false, defaultDBColumn0.isVersionColumn());
      assertEquals(true, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("jgi7aZpu", (DBTable) null, (-16), "jgi7aZpu");
      assertNotNull(defaultDBColumn0);
      
      defaultDBColumn0.setVersionColumn(false);
      assertEquals(false, defaultDBColumn0.isVersionColumn());
  }

  @Test
  public void test4()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(0, "\"04");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("\"04", (DBTable) defaultDBTable0, dBDataType0, (Integer) 0, (Integer) 0);
      defaultDBColumn0.setFractionDigits((Integer) 0);
      assertEquals(false, defaultDBColumn0.isVersionColumn());
  }

  @Test
  public void test5()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = new Integer((-1));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) defaultDBTable0, (DBDataType) null, integer0, (Integer) (-1));
      defaultDBColumn0.setSize(integer0);
      assertEquals(false, defaultDBColumn0.isVersionColumn());
  }

  @Test
  public void test6()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(1982, "]xN");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("]xN", (DBTable) defaultDBTable0, dBDataType0, (Integer) 1982);
      String[] stringArray0 = new String[2];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) defaultDBTable0, "]xN", false, stringArray0);
      defaultDBColumn0.addUkConstraint((DBUniqueConstraint) dBPrimaryKeyConstraint0);
      boolean boolean0 = defaultDBColumn0.isUnique();
      assertEquals("]xN : ]XN(1982)", defaultDBColumn0.toString());
      assertEquals(false, defaultDBColumn0.isVersionColumn());
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(".UST-FM", (DBTable) defaultDBTable0, (-16), ".UST-FM");
      assertNotNull(defaultDBColumn0);
      
      DBDataType dBDataType0 = defaultDBColumn0.getType();
      assertNotNull(dBDataType0);
      
      defaultDBColumn0.setType(dBDataType0);
      assertEquals(false, defaultDBColumn0.isVersionColumn());
      assertEquals(-16, dBDataType0.getJdbcType());
      assertEquals(true, dBDataType0.isAlpha());
  }

  @Test
  public void test8()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("RiqY2L/ ", (DBTable) null, (DBDataType) null);
      assertNotNull(defaultDBColumn0);
      
      int int0 = defaultDBColumn0.hashCode();
      assertEquals(806926250, int0);
  }

  @Test
  public void test9()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("POWER(0, -1)", (DBTable) null, 530, "POWER(0, -1)");
      assertEquals("POWER(0, -1) : POWER(0,-1)", defaultDBColumn0.toString());
      assertNotNull(defaultDBColumn0);
      assertEquals(false, defaultDBColumn0.isVersionColumn());
  }

  @Test
  public void test10()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(1982, "]xN");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("]xN", (DBTable) defaultDBTable0, dBDataType0, (Integer) 1982);
      boolean boolean0 = defaultDBColumn0.isUnique();
      assertEquals(false, boolean0);
      assertEquals("]xN : ]XN(1982)", defaultDBColumn0.toString());
      assertEquals(false, defaultDBColumn0.isVersionColumn());
  }

  @Test
  public void test11()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("jgi7aZpu");
      DBDataType dBDataType0 = DBDataType.getInstance((-16), "jgi7aZpu");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("jgi7aZpu", (DBTable) defaultDBTable0, dBDataType0, (Integer) (-16), (Integer) (-16));
      assertEquals(true, defaultDBColumn0.isNullable());
      
      defaultDBColumn0.setNullable(false);
      String string0 = defaultDBColumn0.toString();
      assertEquals(false, defaultDBColumn0.isNullable());
      assertEquals("jgi7aZpu : JGI7AZPU(-16,-16) NOT NULL", string0);
  }

  @Test
  public void test12()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("RiqY2L/ ", (DBTable) null, (DBDataType) null);
      assertNotNull(defaultDBColumn0);
      
      defaultDBColumn0.setNullable(true);
      assertEquals(false, defaultDBColumn0.isVersionColumn());
  }

  @Test
  public void test13()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("jgi7aZpu");
      DBDataType dBDataType0 = DBDataType.getInstance((-16), "jgi7aZpu");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("jgi7aZpu", (DBTable) defaultDBTable0, dBDataType0, (Integer) (-16), (Integer) (-16));
      assertEquals(true, defaultDBColumn0.isNullable());
      
      defaultDBColumn0.setNullable(false);
      defaultDBColumn0.setNullable(false);
      assertEquals(false, defaultDBColumn0.isNullable());
      assertEquals(false, defaultDBColumn0.isVersionColumn());
  }

  @Test
  public void test14()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("7K");
      String[] stringArray0 = new String[2];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("7K", true, (DBTable) defaultDBTable0, stringArray0, (DBTable) defaultDBTable0, stringArray0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("7K", (DBTable) defaultDBTable0, 1618, "7K");
      assertNotNull(defaultDBColumn0);
      
      DBForeignKeyConstraint dBForeignKeyConstraint1 = defaultDBColumn0.getForeignKeyConstraint();
      assertEquals(false, defaultDBColumn0.isVersionColumn());
      assertNull(dBForeignKeyConstraint1);
  }

  @Test
  public void test15()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("^z");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "^z";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("^z", false, (DBTable) defaultDBTable0, stringArray0, (DBTable) defaultDBTable0, stringArray0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("^z", (DBTable) defaultDBTable0, 1644, "^z");
      assertNotNull(defaultDBColumn0);
      
      DBForeignKeyConstraint dBForeignKeyConstraint1 = defaultDBColumn0.getForeignKeyConstraint();
      assertNotNull(dBForeignKeyConstraint1);
      assertEquals(false, defaultDBColumn0.isVersionColumn());
  }

  @Test
  public void test16()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("7K");
      DBDataType dBDataType0 = DBDataType.getInstance(1618, "7K");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("7K", (DBTable) defaultDBTable0, 1618, "7K");
      assertNotNull(defaultDBColumn0);
      
      defaultDBColumn0.setNullable(false);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("7K", (DBTable) defaultDBTable0, dBDataType0);
      boolean boolean0 = defaultDBColumn0.equals((Object) defaultDBColumn1);
      assertEquals(false, defaultDBColumn0.isNullable());
      assertEquals(false, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(".UST-FM", (DBTable) defaultDBTable0, (-16), ".UST-FM");
      assertNotNull(defaultDBColumn0);
      
      boolean boolean0 = defaultDBColumn0.equals((Object) null);
      assertEquals(false, defaultDBColumn0.isVersionColumn());
      assertEquals(false, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(1982, "]xN");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("]xN", (DBTable) defaultDBTable0, dBDataType0, (Integer) 1982);
      boolean boolean0 = defaultDBColumn0.equals((Object) "']xN'");
      assertEquals(false, boolean0);
      assertEquals(false, defaultDBColumn0.isVersionColumn());
      assertEquals("]xN : ]XN(1982)", defaultDBColumn0.toString());
  }

  @Test
  public void test19()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("RiqY2L/ ", (DBTable) null, (DBDataType) null);
      assertNotNull(defaultDBColumn0);
      
      boolean boolean0 = defaultDBColumn0.isIdentical((DBObject) null);
      assertEquals(false, boolean0);
      assertEquals(false, defaultDBColumn0.isVersionColumn());
  }

  @Test
  public void test20()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("RiqY2L/ ", (DBTable) null, (DBDataType) null);
      assertNotNull(defaultDBColumn0);
      
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("RiqJ2L/ ", (DBTable) null, 806926250, "RiqJ2L/ ");
      assertNotNull(defaultDBColumn1);
      
      boolean boolean0 = defaultDBColumn1.isIdentical((DBObject) defaultDBColumn0);
      assertEquals(false, boolean0);
      assertEquals(false, defaultDBColumn0.isVersionColumn());
  }

  @Test
  public void test21()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("jgi7aZpu");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("jgi7aZpu", (DBTable) null, (-16), "jgi7aZpu");
      assertNotNull(defaultDBColumn0);
      
      boolean boolean0 = defaultDBColumn0.isIdentical((DBObject) tableContainer0);
      assertEquals(false, defaultDBColumn0.isVersionColumn());
      assertEquals(false, boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(0, "\"04");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("\"04", (DBTable) defaultDBTable0, dBDataType0, (Integer) 0, (Integer) 0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("\"04", (DBTable) defaultDBTable0, dBDataType0, (Integer) 0, (Integer) null);
      boolean boolean0 = defaultDBColumn0.isIdentical((DBObject) defaultDBColumn1);
      assertEquals(false, defaultDBColumn0.isVersionColumn());
      assertEquals(false, boolean0);
      assertEquals("\"04 : \"04(0,0)", defaultDBColumn0.toString());
      assertEquals("\"04 : \"04(0)", defaultDBColumn1.toString());
  }

  @Test
  public void test23()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = new Integer((-1));
      DBDataType dBDataType0 = DBDataType.getInstance((-1), "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) defaultDBTable0, dBDataType0, integer0, (Integer) null);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", (DBTable) defaultDBTable0, dBDataType0, integer0);
      boolean boolean0 = defaultDBColumn1.isIdentical((DBObject) defaultDBColumn0);
      assertEquals(false, defaultDBColumn0.isVersionColumn());
      assertEquals(" : (-1)", defaultDBColumn0.toString());
      assertEquals(true, boolean0);
  }

  @Test
  public void test24()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(29, "BodyEvent(");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("BodyEvent(", (DBTable) null, dBDataType0);
      assertNotNull(defaultDBColumn0);
      
      boolean boolean0 = defaultDBColumn0.isEquivalent((DBObject) null);
      assertEquals(false, defaultDBColumn0.isVersionColumn());
      assertEquals(false, boolean0);
  }

  @Test
  public void test25()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(1982, "]xN");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("]xN", (DBTable) defaultDBTable0, dBDataType0, (Integer) 1982);
      boolean boolean0 = defaultDBColumn0.isEquivalent((DBObject) defaultDBTable0);
      assertEquals("]xN : ]XN(1982)", defaultDBColumn0.toString());
      assertEquals(false, defaultDBColumn0.isVersionColumn());
      assertEquals(false, boolean0);
  }

  @Test
  public void test26()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("RiqY2L/ ", (DBTable) null, (DBDataType) null);
      assertNotNull(defaultDBColumn0);
      
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("RiqJ2L/ ", (DBTable) null, 806926250, "RiqJ2L/ ");
      assertNotNull(defaultDBColumn1);
      
      boolean boolean0 = defaultDBColumn1.isEquivalent((DBObject) defaultDBColumn0);
      assertEquals(false, boolean0);
      assertEquals(false, defaultDBColumn1.isVersionColumn());
  }

  @Test
  public void test27()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(".UST-FM", (DBTable) defaultDBTable0, (-16), ".UST-FM");
      assertNotNull(defaultDBColumn0);
      
      DBDataType dBDataType0 = defaultDBColumn0.getType();
      assertNotNull(dBDataType0);
      
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn(".UST-FM", (DBTable) defaultDBTable0, dBDataType0, (Integer) (-16), (Integer) (-16));
      boolean boolean0 = defaultDBColumn0.isIdentical((DBObject) defaultDBColumn1);
      assertEquals(false, boolean0);
      assertEquals(".UST-FM : .UST-FM(-16,-16)", defaultDBColumn1.toString());
      assertEquals(-16, dBDataType0.getJdbcType());
      assertEquals(false, defaultDBColumn0.isVersionColumn());
  }
}
