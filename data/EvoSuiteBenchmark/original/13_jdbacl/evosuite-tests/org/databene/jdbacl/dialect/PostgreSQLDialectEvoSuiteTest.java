/*
 * This file was automatically generated by EvoSuite
 */

package org.databene.jdbacl.dialect;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.sql.Timestamp;
import org.databene.jdbacl.dialect.PostgreSQLDialect;
import org.databene.jdbacl.model.DBSequence;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PostgreSQLDialectEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      PostgreSQLDialect postgreSQLDialect0 = new PostgreSQLDialect();
      boolean boolean0 = postgreSQLDialect0.isDeterministicIndexName(",9`$9pBc%ZL0");
      assertEquals(true, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      PostgreSQLDialect postgreSQLDialect0 = new PostgreSQLDialect();
      String string0 = postgreSQLDialect0.formatTimestamp((Timestamp) null);
      assertNotNull(string0);
      assertEquals("timestamp 'null'", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      PostgreSQLDialect postgreSQLDialect0 = new PostgreSQLDialect();
      String string0 = postgreSQLDialect0.renderFetchSequenceValue("NO CYCLE");
      assertNotNull(string0);
      assertEquals("select nextval('NO CYCLE')", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      PostgreSQLDialect postgreSQLDialect0 = new PostgreSQLDialect();
      boolean boolean0 = postgreSQLDialect0.isDefaultSchema("f", "f");
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      PostgreSQLDialect postgreSQLDialect0 = new PostgreSQLDialect();
      String string0 = postgreSQLDialect0.sequenceNoCycle();
      assertEquals("NO CYCLE", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      PostgreSQLDialect postgreSQLDialect0 = new PostgreSQLDialect();
      boolean boolean0 = postgreSQLDialect0.supportsRegex();
      assertEquals(true, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      PostgreSQLDialect postgreSQLDialect0 = new PostgreSQLDialect();
      boolean boolean0 = postgreSQLDialect0.isDeterministicUKName("f");
      assertEquals(true, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      PostgreSQLDialect postgreSQLDialect0 = new PostgreSQLDialect();
      boolean boolean0 = postgreSQLDialect0.isDeterministicPKName("E-- commit ");
      assertEquals(true, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      PostgreSQLDialect postgreSQLDialect0 = new PostgreSQLDialect();
      boolean boolean0 = postgreSQLDialect0.isDeterministicFKName("f");
      assertEquals(true, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      PostgreSQLDialect postgreSQLDialect0 = new PostgreSQLDialect();
      DBSequence dBSequence0 = new DBSequence("", "", "");
      String string0 = postgreSQLDialect0.renderCreateSequence(dBSequence0);
      assertEquals("CREATE SEQUENCE ", string0);
  }

  @Test
  public void test10()  throws Throwable  {
      PostgreSQLDialect postgreSQLDialect0 = new PostgreSQLDialect();
      DBSequence dBSequence0 = new DBSequence("f", "f", "f");
      Long long0 = Long.valueOf(4611686018427387890L);
      dBSequence0.setCache(long0);
      String string0 = postgreSQLDialect0.renderCreateSequence(dBSequence0);
      assertEquals("CREATE SEQUENCE f CACHE 4611686018427387890", string0);
      assertNotNull(string0);
  }

  @Test
  public void test11()  throws Throwable  {
      PostgreSQLDialect postgreSQLDialect0 = new PostgreSQLDialect();
      boolean boolean0 = postgreSQLDialect0.isDefaultCatalog("", "");
      assertEquals(true, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      PostgreSQLDialect postgreSQLDialect0 = new PostgreSQLDialect();
      boolean boolean0 = postgreSQLDialect0.isDefaultCatalog("iN#cc}:^EErAZ!", "iN#cc}:^EErAZ!");
      assertEquals(true, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      PostgreSQLDialect postgreSQLDialect0 = new PostgreSQLDialect();
      boolean boolean0 = postgreSQLDialect0.isDefaultCatalog("E-- commit ", ",9`$9pBc%ZL0");
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      PostgreSQLDialect postgreSQLDialect0 = new PostgreSQLDialect();
      String string0 = postgreSQLDialect0.regexQuery(" D/2G8mPI'l", false, " D/2G8mPI'l");
      assertEquals(" D/2G8mPI'l ~ ' D/2G8mPI'l'", string0);
      assertNotNull(string0);
  }

  @Test
  public void test15()  throws Throwable  {
      PostgreSQLDialect postgreSQLDialect0 = new PostgreSQLDialect();
      String string0 = postgreSQLDialect0.regexQuery(" D/2G8mPI'l", true, " D/2G8mPI'l");
      assertNotNull(string0);
      assertEquals("NOT  D/2G8mPI'l ~ ' D/2G8mPI'l'", string0);
  }
}
