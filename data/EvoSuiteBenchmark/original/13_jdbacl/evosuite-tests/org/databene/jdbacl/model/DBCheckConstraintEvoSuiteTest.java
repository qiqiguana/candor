/*
 * This file was automatically generated by EvoSuite
 */

package org.databene.jdbacl.model;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DefaultDBTable;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DBCheckConstraintEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("setFetchDirection", false, (DBTable) defaultDBTable0, "setFetchDirection");
      assertNotNull(dBCheckConstraint0);
      
      String[] stringArray0 = dBCheckConstraint0.getColumnNames();
      assertEquals("CONSTRAINT setFetchDirectionCHECK setFetchDirection", dBCheckConstraint0.toString());
      assertNotNull(stringArray0);
  }

  @Test
  public void test1()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("ml", false, "ml", "ml");
      String string0 = dBCheckConstraint0.getTableName();
      assertEquals("ml", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("4", true, "4", "RS");
      boolean boolean0 = dBCheckConstraint0.isEquivalent(dBCheckConstraint0);
      assertEquals(true, boolean0);
      assertEquals("4", dBCheckConstraint0.getTableName());
      assertEquals("CONSTRAINT 4CHECK RS", dBCheckConstraint0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("setNClob(Ktriny, Reader)", true, "setNClob(Ktriny, Reader)", "setNClob(Ktriny, Reader)");
      assertNotNull(dBCheckConstraint0);
      
      boolean boolean0 = dBCheckConstraint0.isIdentical((DBObject) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("4", true, "4", "RS");
      DBCheckConstraint dBCheckConstraint1 = new DBCheckConstraint("", false, "4", "4");
      assertNotNull(dBCheckConstraint1);
      
      boolean boolean0 = dBCheckConstraint0.isIdentical((DBObject) dBCheckConstraint1);
      assertEquals(false, boolean0);
      assertEquals("4", dBCheckConstraint0.getTableName());
      assertEquals("4", dBCheckConstraint1.getTableName());
      assertEquals("CONSTRAINT 4CHECK RS", dBCheckConstraint0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("setFetchDirection", false, (DBTable) defaultDBTable0, "setFetchDirection");
      assertNotNull(dBCheckConstraint0);
      
      boolean boolean0 = dBCheckConstraint0.isIdentical((DBObject) defaultDBTable0);
      assertEquals("CONSTRAINT setFetchDirectionCHECK setFetchDirection", dBCheckConstraint0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("4", true, "4", "RS");
      DBCheckConstraint dBCheckConstraint1 = new DBCheckConstraint("4", false, "4", "4");
      assertNotNull(dBCheckConstraint1);
      
      boolean boolean0 = dBCheckConstraint0.isIdentical((DBObject) dBCheckConstraint1);
      assertEquals(false, boolean0);
      assertEquals("4", dBCheckConstraint0.getTableName());
  }

  @Test
  public void test7()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("setNClob(Ktriny, Reader)", true, "setNClob(Ktriny, Reader)", "setNClob(Ktriny, Reader)");
      assertNotNull(dBCheckConstraint0);
      
      DBCheckConstraint dBCheckConstraint1 = new DBCheckConstraint("setNClob(Ktriny, Reader)", true, "setNClob(Ktriny, Reader)", "setNClob(Ktriny, Reader)");
      boolean boolean0 = dBCheckConstraint0.isIdentical((DBObject) dBCheckConstraint1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("setFetchDirection", false, (DBTable) defaultDBTable0, "setFetchDirection");
      assertNotNull(dBCheckConstraint0);
      
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("setFetchDirection");
      DBCheckConstraint dBCheckConstraint1 = new DBCheckConstraint("setFetchDirection", false, (DBTable) defaultDBTable1, "setFetchDirection");
      boolean boolean0 = dBCheckConstraint1.isEquivalent(dBCheckConstraint0);
      assertEquals(false, boolean0);
      assertEquals("CONSTRAINT setFetchDirectionCHECK setFetchDirection", dBCheckConstraint0.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("4", true, "4", "RS");
      DBCheckConstraint dBCheckConstraint1 = new DBCheckConstraint("", false, "4", "4");
      assertNotNull(dBCheckConstraint1);
      
      boolean boolean0 = dBCheckConstraint0.isEquivalent(dBCheckConstraint1);
      assertEquals("4", dBCheckConstraint0.getTableName());
      assertEquals(false, boolean0);
      assertEquals("4", dBCheckConstraint1.getTableName());
      assertEquals("CONSTRAINT 4CHECK RS", dBCheckConstraint0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, (String) null, "DROP_SEQUENCE");
      assertNotNull(dBCheckConstraint0);
      
      String string0 = dBCheckConstraint0.toString();
      assertEquals("CHECK DROP_SEQUENCE", string0);
      assertNotNull(string0);
  }

  @Test
  public void test11()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("4", true, "4", "RS");
      String string0 = dBCheckConstraint0.toString();
      assertEquals("4", dBCheckConstraint0.getTableName());
      assertNotNull(string0);
      assertEquals("CONSTRAINT 4CHECK RS", string0);
  }
}
