/*
 * This file was automatically generated by EvoSuite
 */

package org.databene.jdbacl.model;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Date;
import java.util.List;
import org.databene.commons.ObjectNotFoundException;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBTrigger;
import org.databene.jdbacl.model.Database;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DefaultDatabaseEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("ylIRvsPX)$d/e");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("ylIRvsPX)$d/e", "ylIRvsPX)$d/e", versionNumber0);
      defaultDatabase0.setImportedChecks(true);
      assertEquals(true, defaultDatabase0.isImportedChecks());
  }

  @Test
  public void test1()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("}7");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("}7", "}7", versionNumber0);
      defaultDatabase0.setImportedUKs(false);
      assertEquals(false, defaultDatabase0.isImportedUKs());
  }

  @Test
  public void test2()  throws Throwable  {
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("lJ^+u#J@x8U", "lJ^+u#J@x8U", (VersionNumber) null);
      String string0 = defaultDatabase0.getUser();
      assertNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("", "", (VersionNumber) null);
      boolean boolean0 = defaultDatabase0.isImportedUKs();
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("", "", (VersionNumber) null);
      DBCatalog dBCatalog0 = new DBCatalog("");
      defaultDatabase0.removeCatalog(dBCatalog0);
      assertNull(defaultDatabase0.getTableInclusionPattern());
  }

  @Test
  public void test5()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("}7");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("}7", "}7", versionNumber0);
      List<DBTable> list0 = defaultDatabase0.getTables();
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test6()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("}7");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("}7", "}7", versionNumber0);
      defaultDatabase0.setTableInclusionPattern("}7");
      assertEquals(false, defaultDatabase0.isImportedSequences());
  }

  @Test
  public void test7()  throws Throwable  {
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("_9R|.K73rF", "_9R|.K73rF", (VersionNumber) null);
      defaultDatabase0.setImportDate((Date) null);
      assertNull(defaultDatabase0.getDoc());
  }

  @Test
  public void test8()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("}7");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("}7", "}7", versionNumber0);
      VersionNumber versionNumber1 = defaultDatabase0.getDatabaseProductVersion();
      assertSame(versionNumber1, versionNumber0);
  }

  @Test
  public void test9()  throws Throwable  {
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("8eK/H jpA", "8eK/H jpA", (VersionNumber) null);
      defaultDatabase0.setTableExclusionPattern("8eK/H jpA");
      assertEquals(false, defaultDatabase0.isImportedChecks());
  }

  @Test
  public void test10()  throws Throwable  {
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("_9R|.K73rF", "_9R|.K73rF", (VersionNumber) null);
      Date date0 = defaultDatabase0.getImportDate();
      assertNull(date0);
  }

  @Test
  public void test11()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("", "", versionNumber0);
      String string0 = defaultDatabase0.getTableExclusionPattern();
      assertNull(string0);
  }

  @Test
  public void test12()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("}7");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("}7", "}7", versionNumber0);
      boolean boolean0 = defaultDatabase0.isImportedSequences();
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("lJ^+u#J@x8U", "lJ^+u#J@x8U", (VersionNumber) null);
      defaultDatabase0.setImportedSequences(true);
      assertEquals(true, defaultDatabase0.isImportedSequences());
  }

  @Test
  public void test14()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("", "", versionNumber0);
      String string0 = defaultDatabase0.getDatabaseProductName();
      assertEquals("", string0);
  }

  @Test
  public void test15()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("ylIRvsPX)$d/e");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("ylIRvsPX)$d/e", "ylIRvsPX)$d/e", versionNumber0);
      // Undeclared exception!
      try {
        defaultDatabase0.removeTable("ylIRvsPX)$d/e");
        fail("Expecting exception: ObjectNotFoundException");
      } catch(ObjectNotFoundException e) {
        /*
         * Table 'ylIRvsPX)$d/e'
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("", "", (VersionNumber) null);
      boolean boolean0 = defaultDatabase0.isImportedIndexes();
      assertEquals(false, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("}7");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("}7", "}7", versionNumber0);
      String string0 = defaultDatabase0.getTableInclusionPattern();
      assertNull(string0);
  }

  @Test
  public void test18()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("}7");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("}7", "}7", versionNumber0);
      DBCatalog dBCatalog0 = defaultDatabase0.getCatalog("}7");
      assertNull(dBCatalog0);
  }

  @Test
  public void test19()  throws Throwable  {
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("", "", (VersionNumber) null);
      DBCatalog dBCatalog0 = new DBCatalog("");
      defaultDatabase0.addCatalog(dBCatalog0);
      DBTable dBTable0 = defaultDatabase0.getTable("", false);
      assertNull(dBTable0);
  }

  @Test
  public void test20()  throws Throwable  {
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("_9R|.K73rF", "_9R|.K73rF", (VersionNumber) null);
      defaultDatabase0.setUser("_9R|.K73rF");
      assertEquals("database", defaultDatabase0.getObjectType());
  }

  @Test
  public void test21()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("", "", versionNumber0);
      boolean boolean0 = defaultDatabase0.isImportedChecks();
      assertEquals(false, boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("", "", (VersionNumber) null);
      defaultDatabase0.setImportedIndexes(false);
      assertEquals(false, defaultDatabase0.isImportedIndexes());
  }

  @Test
  public void test23()  throws Throwable  {
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("<S*4I]9/G*VGZ}C", "<S*4I]9/G*VGZ}C", (VersionNumber) null);
      DBCatalog dBCatalog0 = new DBCatalog();
      defaultDatabase0.addCatalog(dBCatalog0);
      // Undeclared exception!
      try {
        defaultDatabase0.getSchema("<S*4I]9/G*VGZ}C");
        fail("Expecting exception: ObjectNotFoundException");
      } catch(ObjectNotFoundException e) {
        /*
         * Table '<S*4I]9/G*VGZ}C'
         */
      }
  }

  @Test
  public void test24()  throws Throwable  {
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("_9R|.K73rF", "_9R|.K73rF", (VersionNumber) null);
      DBCatalog dBCatalog0 = new DBCatalog();
      defaultDatabase0.addCatalog(dBCatalog0);
      DBSchema dBSchema0 = new DBSchema("_9R|.K73rF", dBCatalog0);
      DBSchema dBSchema1 = defaultDatabase0.getSchema("_9R|.K73rF");
      assertSame(dBSchema1, dBSchema0);
  }

  @Test
  public void test25()  throws Throwable  {
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("", "", (VersionNumber) null);
      List<DBTable> list0 = defaultDatabase0.getTables(false);
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test26()  throws Throwable  {
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("M&\u01B5", "M&\u01B5", (VersionNumber) null);
      DBCatalog dBCatalog0 = new DBCatalog("M&\u01B5", (Database) defaultDatabase0);
      assertNotNull(dBCatalog0);
      
      DBSchema dBSchema0 = new DBSchema("M&\u01B5", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("M&\u01B5", dBSchema0);
      List<DBTable> list0 = defaultDatabase0.getTables(true);
      assertEquals(false, list0.isEmpty());
      assertNotNull(list0);
  }

  @Test
  public void test27()  throws Throwable  {
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("M&\u01B5", "M&\u01B5", (VersionNumber) null);
      DBCatalog dBCatalog0 = new DBCatalog("M&\u01B5", (Database) defaultDatabase0);
      DBSchema dBSchema0 = new DBSchema("M&\u01B5", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("M&\u01B5", dBSchema0);
      DefaultDBTable defaultDBTable1 = (DefaultDBTable)defaultDatabase0.getTable("M&\u01B5", true);
      assertSame(defaultDBTable1, defaultDBTable0);
  }

  @Test
  public void test28()  throws Throwable  {
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("M&\u01B5", "M&\u01B5", (VersionNumber) null);
      DBCatalog dBCatalog0 = new DBCatalog("M&\u01B5", (Database) defaultDatabase0);
      DBSchema dBSchema0 = new DBSchema("M&\u01B5", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("M&\u01B5", dBSchema0);
      // Undeclared exception!
      try {
        defaultDatabase0.getTable((String) null);
        fail("Expecting exception: ObjectNotFoundException");
      } catch(ObjectNotFoundException e) {
        /*
         * Table 'null'
         */
      }
  }

  @Test
  public void test29()  throws Throwable  {
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("8eK/H jpA", "8eK/H jpA", (VersionNumber) null);
      List<DBSequence> list0 = defaultDatabase0.getSequences(false);
      assertEquals(0, list0.size());
  }

  @Test
  public void test30()  throws Throwable  {
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("$", "$", (VersionNumber) null);
      DBCatalog dBCatalog0 = new DBCatalog("$");
      defaultDatabase0.addCatalog(dBCatalog0);
      DBSchema dBSchema0 = new DBSchema("$", dBCatalog0);
      DBSequence dBSequence0 = new DBSequence("$", dBSchema0);
      List<DBSequence> list0 = defaultDatabase0.getSequences();
      assertNotNull(list0);
      assertEquals(1, list0.size());
  }

  @Test
  public void test31()  throws Throwable  {
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("_9R|.K73rF", "_9R|.K73rF", (VersionNumber) null);
      DBCatalog dBCatalog0 = new DBCatalog();
      defaultDatabase0.addCatalog(dBCatalog0);
      DBSchema dBSchema0 = new DBSchema("_9R|.K73rF", dBCatalog0);
      List<DBTrigger> list0 = defaultDatabase0.getTriggers();
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test32()  throws Throwable  {
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("$", "$", (VersionNumber) null);
      DBCatalog dBCatalog0 = new DBCatalog("$");
      defaultDatabase0.addCatalog(dBCatalog0);
      DBSchema dBSchema0 = new DBSchema("$", dBCatalog0);
      List<DBPackage> list0 = defaultDatabase0.getPackages();
      assertEquals(0, list0.size());
  }
}
