/*
 * This file was automatically generated by EvoSuite
 */

package org.databene.jdbacl.sql;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.io.StringReader;
import org.antlr.runtime.ANTLRInputStream;
import org.antlr.runtime.ANTLRReaderStream;
import org.antlr.runtime.ANTLRStringStream;
import org.antlr.runtime.CharStream;
import org.databene.commons.ParseException;
import org.databene.commons.SyntaxError;
import org.databene.jdbacl.DatabaseDialect;
import org.databene.jdbacl.dialect.DB2Dialect;
import org.databene.jdbacl.dialect.Firebird2_5Dialect;
import org.databene.jdbacl.dialect.FirebirdDialect;
import org.databene.jdbacl.sql.SQLParserUtil;
import org.databene.jdbacl.sql.parser.ANTLRNoCaseStringStream;
import org.databene.script.Expression;
import org.h2.value.ValueDouble;
import org.h2.value.ValueUuid;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SQLParserUtilEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ANTLRNoCaseStringStream aNTLRNoCaseStringStream0 = new ANTLRNoCaseStringStream("'TABLESPACE'");
      SQLParserUtil.parseExpression((CharStream) aNTLRNoCaseStringStream0);
      assertEquals(12, aNTLRNoCaseStringStream0.index());
      assertEquals(12, aNTLRNoCaseStringStream0.getCharPositionInLine());
  }

  @Test
  public void test1()  throws Throwable  {
      ANTLRNoCaseStringStream aNTLRNoCaseStringStream0 = new ANTLRNoCaseStringStream("#RLie'?t4'x\"vKup*.");
      try {
        SQLParserUtil.parseExpression((CharStream) aNTLRNoCaseStringStream0);
        fail("Expecting exception: ParseException");
      } catch(ParseException e) {
        /*
         * Error parsing SQL
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      SQLParserUtil sQLParserUtil0 = new SQLParserUtil();
      assertNotNull(sQLParserUtil0);
  }

  @Test
  public void test3()  throws Throwable  {
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream("k=_0B)IV%Ou>8+E/YT");
      Expression<?> expression0 = SQLParserUtil.parseExpression((CharStream) aNTLRStringStream0);
      Expression<?> expression1 = SQLParserUtil.parseExpression((CharStream) aNTLRStringStream0);
      assertFalse(expression1.equals(expression0));
  }

  @Test
  public void test4()  throws Throwable  {
      char[] charArray0 = new char[18];
      charArray0[0] = '\"';
      charArray0[8] = '\"';
      charArray0[4] = '\"';
      charArray0[5] = '\"';
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream(charArray0, (int) '\"');
      SQLParserUtil.parseExpression((CharStream) aNTLRStringStream0);
      assertEquals(9, aNTLRStringStream0.getCharPositionInLine());
      assertEquals(9, aNTLRStringStream0.index());
  }

  @Test
  public void test5()  throws Throwable  {
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream("k=_0B)IV%Ou>8+E/YT");
      FirebirdDialect firebirdDialect0 = new FirebirdDialect();
      // Undeclared exception!
      try {
        SQLParserUtil.parse((CharStream) aNTLRStringStream0, (DatabaseDialect) firebirdDialect0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      ANTLRNoCaseStringStream aNTLRNoCaseStringStream0 = new ANTLRNoCaseStringStream(" where ");
      Firebird2_5Dialect firebird2_5Dialect0 = new Firebird2_5Dialect();
      // Undeclared exception!
      try {
        SQLParserUtil.parse((CharStream) aNTLRNoCaseStringStream0, (DatabaseDialect) firebird2_5Dialect0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      ValueUuid valueUuid0 = ValueUuid.get("");
      ByteArrayInputStream byteArrayInputStream0 = (ByteArrayInputStream)valueUuid0.getInputStream();
      ANTLRInputStream aNTLRInputStream0 = new ANTLRInputStream((InputStream) byteArrayInputStream0, (-3));
      DB2Dialect dB2Dialect0 = new DB2Dialect();
      try {
        SQLParserUtil.parse((CharStream) aNTLRInputStream0, (DatabaseDialect) dB2Dialect0);
        fail("Expecting exception: ParseException");
      } catch(ParseException e) {
        /*
         * Error parsing SQL
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      ANTLRNoCaseStringStream aNTLRNoCaseStringStream0 = new ANTLRNoCaseStringStream("42(b@kR0e~{bYv");
      try {
        SQLParserUtil.parseExpression((CharStream) aNTLRNoCaseStringStream0);
        fail("Expecting exception: SyntaxError");
      } catch(SyntaxError e) {
        /*
         * Syntax error at the beginning 
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      ValueDouble valueDouble0 = ValueDouble.get((-1897.140530488109));
      StringReader stringReader0 = (StringReader)valueDouble0.getReader();
      ANTLRReaderStream aNTLRReaderStream0 = new ANTLRReaderStream((Reader) stringReader0, (-1563), (-1563));
      SQLParserUtil.parseExpression((CharStream) aNTLRReaderStream0);
      assertEquals(5, aNTLRReaderStream0.getCharPositionInLine());
      assertEquals(5, aNTLRReaderStream0.index());
  }

  @Test
  public void test10()  throws Throwable  {
      ValueUuid valueUuid0 = ValueUuid.get("");
      StringReader stringReader0 = (StringReader)valueUuid0.getReader();
      ANTLRReaderStream aNTLRReaderStream0 = new ANTLRReaderStream((Reader) stringReader0, (-64), (-64));
      SQLParserUtil.parseExpression((CharStream) aNTLRReaderStream0);
      assertEquals(35, aNTLRReaderStream0.getCharPositionInLine());
      assertEquals(35, aNTLRReaderStream0.index());
  }

  @Test
  public void test11()  throws Throwable  {
      ANTLRNoCaseStringStream aNTLRNoCaseStringStream0 = new ANTLRNoCaseStringStream("4K22(b@kR0e~z;bYv#");
      try {
        SQLParserUtil.parseExpression((CharStream) aNTLRNoCaseStringStream0);
        fail("Expecting exception: SyntaxError");
      } catch(SyntaxError e) {
        /*
         * Syntax error after 4
         */
      }
  }
}
