/*
 * This file was automatically generated by EvoSuite
 */

package org.databene.jdbacl.sql;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.lang.reflect.Array;
import java.util.Properties;
import org.databene.commons.Context;
import org.databene.commons.context.DefaultContext;
import org.databene.jdbacl.sql.FunctionInvocation;
import org.databene.script.Expression;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class FunctionInvocationEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Expression<Object>[] expressionArray0 = (Expression<Object>[]) Array.newInstance(Expression.class, 5);
      FunctionInvocation functionInvocation0 = new FunctionInvocation("", (Expression[]) expressionArray0);
      Properties properties0 = new Properties();
      DefaultContext defaultContext0 = new DefaultContext(properties0);
      Object object0 = functionInvocation0.evaluate((Context) defaultContext0);
      assertNull(object0);
  }

  @Test
  public void test1()  throws Throwable  {
      Expression<String>[] expressionArray0 = (Expression<String>[]) Array.newInstance(Expression.class, 8);
      FunctionInvocation functionInvocation0 = new FunctionInvocation("", (Expression[]) expressionArray0);
      String string0 = functionInvocation0.getFunctionName();
      assertEquals("", string0);
  }
}
