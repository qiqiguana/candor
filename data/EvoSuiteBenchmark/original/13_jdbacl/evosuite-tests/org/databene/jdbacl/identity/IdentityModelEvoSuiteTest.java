/*
 * This file was automatically generated by EvoSuite
 */

package org.databene.jdbacl.identity;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.sql.Connection;
import org.databene.commons.AssertionError;
import org.databene.jdbacl.identity.NaturalPkIdentity;
import org.databene.jdbacl.identity.NkPkQueryIdentity;
import org.databene.jdbacl.identity.NoIdentity;
import org.databene.jdbacl.identity.UniqueKeyIdentity;
import org.databene.jdbacl.model.DBRow;
import org.databene.jdbacl.model.DBTable;
import org.hsqldb.HsqlException;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcConnection;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class IdentityModelEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      NaturalPkIdentity naturalPkIdentity0 = new NaturalPkIdentity("x{Nx}");
      assertNotNull(naturalPkIdentity0);
      
      naturalPkIdentity0.handleNKNotFound("x{Nx}", "x{Nx}", "x{Nx}", "x{Nx}");
      assertEquals("x{Nx} identity by primary key", naturalPkIdentity0.getDescription());
      assertEquals("NaturalPkIdentity(x{Nx})", naturalPkIdentity0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      NoIdentity noIdentity0 = new NoIdentity("6~1Z<e*o/P75TKd.-");
      assertNotNull(noIdentity0);
      
      NkPkQueryIdentity nkPkQueryIdentity0 = new NkPkQueryIdentity("6~1Z<e*o/P75TKd.-", "6~1Z<e*o/P75TKd.-");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) noIdentity0;
      String string0 = nkPkQueryIdentity0.extractNK(objectArray0);
      assertEquals("NoIdentity(6~1Z<e*o/P75TKd.-)", string0);
      assertNotNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[4];
      UniqueKeyIdentity uniqueKeyIdentity0 = new UniqueKeyIdentity("boldYellow", stringArray0);
      assertNotNull(uniqueKeyIdentity0);
      
      jdbcConnection jdbcConnection0 = new jdbcConnection((Session) null);
      // Undeclared exception!
      try {
        uniqueKeyIdentity0.query((String) null, (Connection) jdbcConnection0);
        fail("Expecting exception: AssertionError");
      } catch(AssertionError e) {
        /*
         * query
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      NoIdentity noIdentity0 = new NoIdentity("6~1Z<e*o/P75TKd.-");
      assertNotNull(noIdentity0);
      
      NkPkQueryIdentity nkPkQueryIdentity0 = new NkPkQueryIdentity("6~1Z<e*o/P75TKd.-", "6~1Z<e*o/P75TKd.-");
      DBRow dBRow0 = new DBRow((DBTable) null);
      nkPkQueryIdentity0.handleNonEquivalence("6~1Z<e*o/P75TKd.-", (Object) noIdentity0, dBRow0);
      assertEquals("NoIdentity(6~1Z<e*o/P75TKd.-)", noIdentity0.toString());
      assertEquals("NkPkQueryIdentity(6~1Z<e*o/P75TKd.-)", nkPkQueryIdentity0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      NkPkQueryIdentity nkPkQueryIdentity0 = new NkPkQueryIdentity("", "");
      assertNotNull(nkPkQueryIdentity0);
      
      nkPkQueryIdentity0.addIrrelevantColumn("");
      assertEquals("NkPkQueryIdentity()", nkPkQueryIdentity0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      NkPkQueryIdentity nkPkQueryIdentity0 = new NkPkQueryIdentity("Zy]s", "Zy]s");
      assertNotNull(nkPkQueryIdentity0);
      
      DBRow dBRow0 = new DBRow((DBTable) null);
      // Undeclared exception!
      try {
        nkPkQueryIdentity0.handleMissingOwner("Zy]s", dBRow0, "Zy]s", (Object) "Zy]s", "Zy]s");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      NoIdentity noIdentity0 = new NoIdentity("6~1Z<e*o/P75TKd.-");
      assertNotNull(noIdentity0);
      
      String string0 = noIdentity0.getTableName();
      assertNotNull(string0);
      assertEquals("NoIdentity(6~1Z<e*o/P75TKd.-)", noIdentity0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      NkPkQueryIdentity nkPkQueryIdentity0 = new NkPkQueryIdentity("m}F7j=0", "m}F7j=0");
      assertNotNull(nkPkQueryIdentity0);
      
      int int0 = nkPkQueryIdentity0.hashCode();
      assertEquals((-402700771), int0);
  }

  @Test
  public void test8()  throws Throwable  {
      NaturalPkIdentity naturalPkIdentity0 = new NaturalPkIdentity("x{Nx}");
      assertNotNull(naturalPkIdentity0);
      
      String string0 = naturalPkIdentity0.getName();
      assertNotNull(string0);
      assertEquals("x{Nx} identity by primary key", naturalPkIdentity0.getDescription());
  }

  @Test
  public void test9()  throws Throwable  {
      NaturalPkIdentity naturalPkIdentity0 = new NaturalPkIdentity("x{Nx}");
      assertNotNull(naturalPkIdentity0);
      
      Object[] objectArray0 = new Object[10];
      Object object0 = naturalPkIdentity0.extractPK(objectArray0);
      assertNotSame(objectArray0, object0);
      assertEquals("NaturalPkIdentity(x{Nx})", naturalPkIdentity0.toString());
      assertNotNull(object0);
  }

  @Test
  public void test10()  throws Throwable  {
      NoIdentity noIdentity0 = new NoIdentity("6~1Z<e*o/P75TKd.-");
      assertNotNull(noIdentity0);
      
      Object[] objectArray0 = new Object[2];
      noIdentity0.extractPK(objectArray0);
      assertEquals("NoIdentity(6~1Z<e*o/P75TKd.-)", noIdentity0.toString());
      assertEquals("No identity defined for table 6~1Z<e*o/P75TKd.-", noIdentity0.getDescription());
  }

  @Test
  public void test11()  throws Throwable  {
      NaturalPkIdentity naturalPkIdentity0 = new NaturalPkIdentity("m}F7j=0");
      assertNotNull(naturalPkIdentity0);
      
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try {
        naturalPkIdentity0.extractPK(objectArray0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Table m}F7j=0 does not have a primary key
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      NaturalPkIdentity naturalPkIdentity0 = new NaturalPkIdentity("");
      assertNotNull(naturalPkIdentity0);
      
      boolean boolean0 = naturalPkIdentity0.equals((Object) "");
      assertEquals("NaturalPkIdentity()", naturalPkIdentity0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      NoIdentity noIdentity0 = new NoIdentity("x{Nx}");
      assertNotNull(noIdentity0);
      
      boolean boolean0 = noIdentity0.equals((Object) null);
      assertEquals(false, boolean0);
      assertEquals("No identity defined for table x{Nx}", noIdentity0.getDescription());
  }

  @Test
  public void test14()  throws Throwable  {
      NoIdentity noIdentity0 = new NoIdentity("|cm(7:");
      assertNotNull(noIdentity0);
      
      NoIdentity noIdentity1 = new NoIdentity("|cm(7:");
      boolean boolean0 = noIdentity0.equals((Object) noIdentity1);
      assertEquals(true, boolean0);
      assertEquals("No identity defined for table |cm(7:", noIdentity0.getDescription());
  }
}
