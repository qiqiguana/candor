/*
 * This file was automatically generated by EvoSuite
 */

package org.databene.jdbacl.model;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTrigger;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class AbstractDBObjectEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("");
      DBTrigger dBTrigger0 = new DBTrigger("", dBSchema0);
      DBTrigger dBTrigger1 = new DBTrigger("", dBSchema0);
      boolean boolean0 = dBTrigger0.equals((Object) dBTrigger1);
      assertEquals("trigger", dBTrigger0.getObjectType());
      assertEquals(true, boolean0);
      assertEquals("", dBTrigger0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("", (CompositeDBObject<? extends DBObject>) null);
      tableContainer0.setDoc("");
      assertEquals("container", tableContainer0.getObjectType());
      assertEquals("", tableContainer0.toString());
      assertEquals("", tableContainer0.getName());
  }

  @Test
  public void test2()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("default");
      DBSchema dBSchema0 = new DBSchema("default", dBCatalog0);
      dBSchema0.getDoc();
      assertEquals("schema", dBSchema0.getObjectType());
      assertEquals("default", dBSchema0.getName());
      assertEquals("catalog", dBCatalog0.getObjectType());
  }

  @Test
  public void test3()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("6266dVB\"n}}NWBC{-X8");
      assertEquals("6266dVB\"n}}NWBC{-X8", tableContainer0.getName());
      
      tableContainer0.setName("6266dVB\"n}}NWBC{-X8");
      assertEquals("container", tableContainer0.getObjectType());
  }

  @Test
  public void test4()  throws Throwable  {
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("", "", (VersionNumber) null);
      String string0 = defaultDatabase0.toString();
      assertEquals("database", defaultDatabase0.getObjectType());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test
  public void test5()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("<kW");
      DBSchema dBSchema0 = new DBSchema("<kW", dBCatalog0);
      DBSequence dBSequence0 = new DBSequence((String) null, dBSchema0);
      int int0 = dBSequence0.hashCode();
      assertEquals("catalog", dBCatalog0.getObjectType());
      assertEquals(0, int0);
  }

  @Test
  public void test6()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("aFyb1!cu");
      int int0 = tableContainer0.hashCode();
      assertEquals("container", tableContainer0.getObjectType());
      assertEquals((-1489214128), int0);
  }

  @Test
  public void test7()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("aFyb1!cu");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = dBCatalog0.equals((Object) defaultDBTable0);
      assertEquals("catalog", dBCatalog0.getObjectType());
      assertEquals(false, boolean0);
      assertEquals("aFyb1!cu", dBCatalog0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("", "", (VersionNumber) null);
      boolean boolean0 = defaultDatabase0.equals((Object) null);
      assertEquals("", defaultDatabase0.toString());
      assertEquals(false, boolean0);
      assertEquals("database", defaultDatabase0.getObjectType());
  }

  @Test
  public void test9()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("6266dVB\"n}}NWBC{-X8");
      boolean boolean0 = tableContainer0.equals((Object) "6266dVB\"n}}NWBC{-X8");
      assertEquals("container", tableContainer0.getObjectType());
      assertEquals(false, boolean0);
      assertEquals("6266dVB\"n}}NWBC{-X8", tableContainer0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("default");
      DBSchema dBSchema0 = new DBSchema("default", dBCatalog0);
      boolean boolean0 = dBSchema0.equals((Object) dBCatalog0);
      assertEquals(false, boolean0);
      assertEquals("default", dBSchema0.getName());
      assertEquals("schema", dBSchema0.getObjectType());
  }
}
