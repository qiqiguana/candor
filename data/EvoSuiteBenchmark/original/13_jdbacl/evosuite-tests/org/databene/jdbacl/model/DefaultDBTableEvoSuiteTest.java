/*
 * This file was automatically generated by EvoSuite
 */

package org.databene.jdbacl.model;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.Collection;
import java.util.List;
import java.util.Set;
import org.databene.commons.AssertionError;
import org.databene.commons.ObjectNotFoundException;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBIndex;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DefaultDBTableEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("$a");
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test1()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      // Undeclared exception!
      try {
        defaultDBTable0.query((String) null, (Connection) null);
        fail("Expecting exception: AssertionError");
      } catch(AssertionError e) {
        /*
         * query
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      int int0 = defaultDBTable0.countProviders();
      assertEquals(0, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      assertNotNull(defaultDBTable0);
      
      String[] stringArray0 = new String[10];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("5X", true, (DBTable) defaultDBTable0, stringArray0, (DBTable) defaultDBTable0, stringArray0);
      assertEquals(1, defaultDBTable0.countProviders());
      
      defaultDBTable0.removeForeignKeyConstraint(dBForeignKeyConstraint0);
      assertEquals(0, defaultDBTable0.countProviders());
  }

  @Test
  public void test4()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      assertNotNull(defaultDBTable0);
      
      defaultDBTable0.addReferrer((DBTable) defaultDBTable0);
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable((String) null, dBSchema0);
      defaultDBTable0.addReferrer((DBTable) defaultDBTable1);
      assertFalse(defaultDBTable0.equals(defaultDBTable1));
      assertFalse(defaultDBTable1.equals(defaultDBTable0));
  }

  @Test
  public void test5()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("FOR UPDATE && GROUP");
      List<DBCheckConstraint> list0 = defaultDBTable0.getCheckConstraints();
      assertEquals(0, list0.size());
  }

  @Test
  public void test6()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("$a");
      // Undeclared exception!
      try {
        defaultDBTable0.allRows((Connection) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("'%f!3[");
      // Undeclared exception!
      try {
        defaultDBTable0.queryPKs((Connection) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("$a");
      String[] stringArray0 = new String[2];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) defaultDBTable0, "$a", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("$a", false, (DBUniqueConstraint) dBPrimaryKeyConstraint0);
      defaultDBTable0.removeIndex((DBIndex) dBUniqueIndex0);
      assertEquals(true, dBUniqueIndex0.isUnique());
  }

  @Test
  public void test9()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("lRag+");
      Collection<DBTable> collection0 = defaultDBTable0.getReferrers();
      assertEquals(true, collection0.isEmpty());
  }

  @Test
  public void test10()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("$a");
      // Undeclared exception!
      try {
        defaultDBTable0.removeUniqueConstraint((DBUniqueConstraint) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try {
        defaultDBTable0.getCatalog();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("$a");
      DBSchema dBSchema0 = new DBSchema((String) null);
      defaultDBTable0.setSchema(dBSchema0);
      assertNull(dBSchema0.toString());
  }

  @Test
  public void test13()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[12];
      // Undeclared exception!
      try {
        defaultDBTable0.queryRowsByCellValues(stringArray0, (Object[]) stringArray0, (Connection) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test14()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("getResultSetImpl(long,int,Map)", (DBSchema) null);
      List<DBIndex> list0 = defaultDBTable0.getIndexes();
      assertEquals(0, list0.size());
  }

  @Test
  public void test15()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("$a");
      String[] stringArray0 = defaultDBTable0.getColumnNames();
      assertNotNull(stringArray0);
  }

  @Test
  public void test16()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("FOR UPDATE && GROUP");
      defaultDBTable0.setDoc("FOR UPDATE && GROUP");
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test
  public void test17()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      // Undeclared exception!
      try {
        defaultDBTable0.addCheckConstraint((DBCheckConstraint) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test18()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("FOR UPDATE && GROUP");
      // Undeclared exception!
      try {
        defaultDBTable0.getProvider(858);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 858, Size: 0
         */
      }
  }

  @Test
  public void test19()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try {
        defaultDBTable0.getRowCount((Connection) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test20()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("0g's~D/|", (DBSchema) null);
      DBIndex dBIndex0 = defaultDBTable0.getIndex("0g's~D/|");
      assertNull(dBIndex0);
  }

  @Test
  public void test21()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("{TU!:0E'NTiWBz?EdU");
      // Undeclared exception!
      try {
        defaultDBTable0.queryRows("{TU!:0E'NTiWBz?EdU", (Connection) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test22()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = defaultDBTable0.getDoc();
      assertNull(string0);
  }

  @Test
  public void test23()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("$a");
      assertNotNull(defaultDBTable0);
      
      String[] stringArray0 = new String[2];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) defaultDBTable0, "$a", false, stringArray0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable((String) null);
      boolean boolean0 = defaultDBTable0.isIdentical((DBObject) defaultDBTable1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test24()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[4];
      DBDataType dBDataType0 = DBDataType.getInstance(0, "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, (DBTable) defaultDBTable0, dBDataType0);
      DBColumn[] dBColumnArray0 = defaultDBTable0.getColumns(stringArray0);
      assertNotNull(dBColumnArray0);
  }

  @Test
  public void test25()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try {
        defaultDBTable0.getColumn((String) null);
        fail("Expecting exception: ObjectNotFoundException");
      } catch(ObjectNotFoundException e) {
        /*
         * Column 'null' not found in table 'null'
         */
      }
  }

  @Test
  public void test26()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("FOR UPDATE && GROUP");
      assertNotNull(defaultDBTable0);
      
      Set<DBUniqueConstraint> set0 = defaultDBTable0.getUniqueConstraints(false);
      assertEquals(0, set0.size());
      assertNotNull(set0);
  }

  @Test
  public void test27()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      Set<DBUniqueConstraint> set0 = defaultDBTable0.getUniqueConstraints(true);
      assertEquals(false, set0.isEmpty());
      assertNotNull(set0);
  }

  @Test
  public void test28()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("$a");
      String[] stringArray0 = new String[2];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) defaultDBTable0, "$a", false, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = (DBPrimaryKeyConstraint)defaultDBTable0.getUniqueConstraint(stringArray0);
      assertEquals("CONSTRAINT $a PRIMARY KEY (, )", dBPrimaryKeyConstraint1.toString());
  }

  @Test
  public void test29()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("$a");
      String[] stringArray0 = new String[2];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) defaultDBTable0, "$a", false, stringArray0);
      defaultDBTable0.addUniqueConstraint((DBUniqueConstraint) dBPrimaryKeyConstraint0);
      dBPrimaryKeyConstraint0.addColumnName("$a");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = (DBPrimaryKeyConstraint)defaultDBTable0.getUniqueConstraint(stringArray0);
      assertNull(dBPrimaryKeyConstraint1);
  }

  @Test
  public void test30()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint((DBTable) defaultDBTable0, "GQF0'd=iianQQC", true, stringArray0);
      DBUniqueConstraint dBUniqueConstraint1 = defaultDBTable0.getUniqueConstraint(stringArray0);
      assertEquals(true, dBUniqueConstraint1.isNameDeterministic());
  }

  @Test
  public void test31()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) defaultDBTable0, "", false, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = (DBPrimaryKeyConstraint)defaultDBTable0.getUniqueConstraint("");
      assertEquals("unique constraint", dBPrimaryKeyConstraint1.getObjectType());
  }

  @Test
  public void test32()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[10];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint((DBTable) defaultDBTable0, "+", false, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) defaultDBTable0, "+", false, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = (DBPrimaryKeyConstraint)defaultDBTable0.getUniqueConstraint("");
      assertNull(dBPrimaryKeyConstraint1);
  }

  @Test
  public void test33()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      assertNotNull(defaultDBTable0);
      
      String[] stringArray0 = new String[9];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", true, (DBTable) defaultDBTable0, stringArray0, (DBTable) defaultDBTable0, stringArray0);
      defaultDBTable0.getForeignKeyConstraint(stringArray0);
      assertEquals(1, defaultDBTable0.countProviders());
  }

  @Test
  public void test34()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      assertNotNull(defaultDBTable0);
      
      String[] stringArray0 = new String[9];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", true, (DBTable) defaultDBTable0, stringArray0, (DBTable) defaultDBTable0, stringArray0);
      String[] stringArray1 = new String[2];
      // Undeclared exception!
      try {
        defaultDBTable0.getForeignKeyConstraint(stringArray1);
        fail("Expecting exception: ObjectNotFoundException");
      } catch(ObjectNotFoundException e) {
        /*
         * Table '' has no foreign key with the columns (, )
         */
      }
  }

  @Test
  public void test35()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      assertNotNull(defaultDBTable0);
      
      String[] stringArray0 = new String[9];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) defaultDBTable0, "J", false, stringArray0);
      String[] stringArray1 = defaultDBTable0.getPKColumnNames();
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
  }

  @Test
  public void test36()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("0g's~D/|", (DBSchema) null);
      String[] stringArray0 = new String[1];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) defaultDBTable0, "0g's~D/|", false, stringArray0);
      // Undeclared exception!
      try {
        defaultDBTable0.queryByPK((Object) "0g's~D/|", (Connection) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test37()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      assertNotNull(defaultDBTable0);
      
      boolean boolean0 = defaultDBTable0.equals((Object) "-1283");
      assertEquals(false, boolean0);
  }

  @Test
  public void test38()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      dBSchema0.removeTable((DBTable) defaultDBTable0);
      assertNull(dBSchema0.getName());
  }

  @Test
  public void test39()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      assertNotNull(defaultDBTable0);
      
      boolean boolean0 = defaultDBTable0.equals((Object) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test40()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      assertNotNull(defaultDBTable0);
      
      defaultDBTable0.addReferrer((DBTable) defaultDBTable0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("", (DBSchema) null);
      defaultDBTable0.addReferrer((DBTable) defaultDBTable1);
      assertFalse(defaultDBTable0.equals(defaultDBTable1));
      assertFalse(defaultDBTable1.equals(defaultDBTable0));
  }
}
