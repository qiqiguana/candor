/*
 * This file was automatically generated by EvoSuite
 */

package org.databene.jdbacl.model;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.databene.jdbacl.model.DBDataType;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DBDataTypeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-59), "BLOB");
      assertNotNull(dBDataType0);
      
      boolean boolean0 = dBDataType0.isLOB();
      assertEquals(true, boolean0);
      assertEquals(true, dBDataType0.isNumber());
  }

  @Test
  public void test1()  throws Throwable  {
      DBDataType.getInstance("Sj");
  }

  @Test
  public void test2()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(27, "NCLOB");
      assertNotNull(dBDataType0);
      
      int int0 = dBDataType0.getJdbcType();
      assertEquals(2011, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(27, "NCLOB");
      assertNotNull(dBDataType0);
      
      int int0 = dBDataType0.hashCode();
      assertEquals(74106186, int0);
  }

  @Test
  public void test4()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(91, "XMLType");
      assertNotNull(dBDataType0);
      
      String string0 = dBDataType0.getName();
      assertNotNull(string0);
      assertEquals(91, dBDataType0.getJdbcType());
      assertEquals(true, dBDataType0.isTemporal());
  }

  @Test
  public void test5()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(2011, "RBo~,/ta<=2J,r11:&O0");
      assertNotNull(dBDataType0);
      
      String string0 = dBDataType0.toString();
      assertNotNull(string0);
      assertEquals(true, dBDataType0.isAlpha());
      assertEquals(true, dBDataType0.isNumber());
  }

  @Test
  public void test6()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(91, "XMLType");
      assertNotNull(dBDataType0);
      
      boolean boolean0 = dBDataType0.isNumber();
      assertEquals(true, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance("BLOB");
      assertNotNull(dBDataType0);
      
      boolean boolean0 = dBDataType0.isLOB();
      assertEquals(true, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance("CLOB");
      assertNotNull(dBDataType0);
      
      boolean boolean0 = dBDataType0.isLOB();
      assertEquals(true, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(2011, "RBo~,/ta<=2J,r11:&O0");
      assertNotNull(dBDataType0);
      
      boolean boolean0 = dBDataType0.isLOB();
      assertEquals(true, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(26, "CLOB");
      assertNotNull(dBDataType0);
      
      boolean boolean0 = dBDataType0.isLOB();
      assertEquals(true, boolean0);
      assertEquals(true, dBDataType0.isNumber());
  }

  @Test
  public void test11()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(0, "7MP");
      assertNotNull(dBDataType0);
      
      boolean boolean0 = dBDataType0.isLOB();
      assertEquals(false, boolean0);
      assertEquals(true, dBDataType0.isNumber());
  }

  @Test
  public void test12()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(26, "CLOB");
      assertNotNull(dBDataType0);
      
      boolean boolean0 = dBDataType0.isAlpha();
      assertEquals(true, boolean0);
      assertEquals(26, dBDataType0.getJdbcType());
  }

  @Test
  public void test13()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(27, "NCLOB");
      assertNotNull(dBDataType0);
      
      boolean boolean0 = dBDataType0.isAlpha();
      assertEquals(true, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-2018), "NVARCHAR2");
      assertNotNull(dBDataType0);
      
      boolean boolean0 = dBDataType0.isAlpha();
      assertEquals(true, boolean0);
      assertEquals(true, dBDataType0.isNumber());
  }

  @Test
  public void test15()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(0, "7MP");
      assertNotNull(dBDataType0);
      
      boolean boolean0 = dBDataType0.isAlpha();
      assertEquals(false, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(91, "XMLType");
      assertNotNull(dBDataType0);
      
      boolean boolean0 = dBDataType0.isTemporal();
      assertEquals(true, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-1757), "TIME");
      assertNotNull(dBDataType0);
      
      boolean boolean0 = dBDataType0.isTemporal();
      assertEquals(true, boolean0);
      assertEquals(true, dBDataType0.isNumber());
  }

  @Test
  public void test18()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance("DATETIME");
      assertNotNull(dBDataType0);
      
      boolean boolean0 = dBDataType0.isTemporal();
      assertEquals(true, boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(0, "DATETIME");
      assertNotNull(dBDataType0);
      
      boolean boolean0 = dBDataType0.isTemporal();
      assertEquals(true, boolean0);
      assertEquals(true, dBDataType0.isNumber());
  }

  @Test
  public void test20()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-2018), "NVARCHAR2");
      assertNotNull(dBDataType0);
      
      boolean boolean0 = dBDataType0.isTemporal();
      assertEquals(false, boolean0);
      assertEquals(true, dBDataType0.isNumber());
  }

  @Test
  public void test21()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(0, "7MP");
      assertNotNull(dBDataType0);
      
      boolean boolean0 = dBDataType0.equals((Object) null);
      assertEquals(false, boolean0);
      assertEquals(false, dBDataType0.isAlpha());
  }

  @Test
  public void test22()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance("CLOB");
      assertNotNull(dBDataType0);
      
      DBDataType dBDataType1 = DBDataType.getInstance(26, "CLOB");
      assertNotNull(dBDataType1);
      
      boolean boolean0 = dBDataType1.equals((Object) dBDataType0);
      assertEquals(true, dBDataType1.isNumber());
      assertEquals(true, boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(27, "NCLOB");
      assertNotNull(dBDataType0);
      
      boolean boolean0 = dBDataType0.equals((Object) "2011");
      assertEquals(false, boolean0);
  }
}
