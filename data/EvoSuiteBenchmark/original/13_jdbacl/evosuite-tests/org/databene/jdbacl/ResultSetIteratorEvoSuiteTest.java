/*
 * This file was automatically generated by EvoSuite
 */

package org.databene.jdbacl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.sql.ResultSet;
import org.databene.jdbacl.ResultSetIterator;
import org.h2.tools.Csv;
import org.h2.tools.SimpleResultSet;
import org.h2.tools.SimpleRowSource;
import org.h2.value.ValueFloat;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ResultSetIteratorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Csv csv0 = Csv.getInstance();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet((SimpleRowSource) csv0);
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSet) simpleResultSet0);
      resultSetIterator0.toString();
  }

  @Test
  public void test1()  throws Throwable  {
      Csv csv0 = Csv.getInstance();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet((SimpleRowSource) csv0);
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSet) simpleResultSet0);
      // Undeclared exception!
      try {
        resultSetIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Not supported
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      ResultSetIterator resultSetIterator0 = null;
      try {
        resultSetIterator0 = new ResultSetIterator((ResultSet) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * resultSet is null
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      Csv csv0 = Csv.getInstance();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet((SimpleRowSource) csv0);
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSet) simpleResultSet0);
      resultSetIterator0.getColumnLabels();
      resultSetIterator0.getColumnLabels();
  }

  @Test
  public void test4()  throws Throwable  {
      Csv csv0 = Csv.getInstance();
      ValueFloat valueFloat0 = ValueFloat.get((-6.5462065F));
      StringReader stringReader0 = (StringReader)valueFloat0.getReader();
      String[] stringArray0 = new String[28];
      SimpleResultSet simpleResultSet0 = (SimpleResultSet)csv0.read((Reader) stringReader0, stringArray0);
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSet) simpleResultSet0);
      resultSetIterator0.getColumnLabels();
  }

  @Test
  public void test5()  throws Throwable  {
      Csv csv0 = Csv.getInstance();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet((SimpleRowSource) csv0);
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSet) simpleResultSet0);
      assertNotNull(resultSetIterator0);
      
      resultSetIterator0.hasNext();
      resultSetIterator0.hasNext();
      assertEquals("ResultSetIterator[]", resultSetIterator0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      Csv csv0 = Csv.getInstance();
      ValueFloat valueFloat0 = ValueFloat.get((-6.5462065F));
      StringReader stringReader0 = (StringReader)valueFloat0.getReader();
      String[] stringArray0 = new String[28];
      SimpleResultSet simpleResultSet0 = (SimpleResultSet)csv0.read((Reader) stringReader0, stringArray0);
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSet) simpleResultSet0);
      assertNotNull(resultSetIterator0);
      
      resultSetIterator0.next();
  }

  @Test
  public void test7()  throws Throwable  {
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSet) simpleResultSet0);
      assertNotNull(resultSetIterator0);
      
      // Undeclared exception!
      try {
        resultSetIterator0.next();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * No more row available. Use hasNext() for checking availability.
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      Csv csv0 = Csv.getInstance();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet((SimpleRowSource) csv0);
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSet) simpleResultSet0);
      assertNotNull(resultSetIterator0);
      
      boolean boolean0 = resultSetIterator0.hasNext();
      assertEquals(false, boolean0);
      
      resultSetIterator0.close();
      assertEquals("ResultSetIterator[]", resultSetIterator0.toString());
  }
}
