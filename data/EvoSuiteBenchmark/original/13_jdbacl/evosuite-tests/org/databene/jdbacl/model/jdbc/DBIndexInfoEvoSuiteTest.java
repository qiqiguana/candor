/*
 * This file was automatically generated by EvoSuite
 */

package org.databene.jdbacl.model.jdbc;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.databene.jdbacl.model.jdbc.DBIndexInfo;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DBIndexInfoEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DBIndexInfo dBIndexInfo0 = new DBIndexInfo("Or$", "Or$", (short) (-1179), "Or$", false, (short)1, "Or$", (Boolean) false, 0, 0, "Or$");
      assertNotNull(dBIndexInfo0);
      
      String string0 = dBIndexInfo0.toString();
      assertNotNull(string0);
      assertEquals(0, dBIndexInfo0.pages);
      assertEquals("[Or$]", string0);
      assertEquals(0, dBIndexInfo0.cardinality);
      assertEquals((short) (-1179), dBIndexInfo0.type);
      assertEquals(false, dBIndexInfo0.unique);
  }

  @Test
  public void test1()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      DBIndexInfo dBIndexInfo0 = null;
      try {
        dBIndexInfo0 = new DBIndexInfo((String) null, (String) null, (short)0, (String) null, true, (short)0, "ordinalPosition is expected to be 1, found: ", boolean0, 696, 696, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * ordinalPosition is expected to be 1, found: 0
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      DBIndexInfo dBIndexInfo0 = new DBIndexInfo("", "", (short)1, (String) null, false, (short)1, "found: ", (Boolean) false, (int) (short)0, 0, "");
      assertNotNull(dBIndexInfo0);
      
      dBIndexInfo0.addColumn((short)1, "found: ");
      assertEquals(0, dBIndexInfo0.pages);
      assertEquals((short)1, dBIndexInfo0.type);
      assertEquals("[found: ]", dBIndexInfo0.toString());
      assertEquals(false, dBIndexInfo0.unique);
      assertEquals(0, dBIndexInfo0.cardinality);
  }

  @Test
  public void test3()  throws Throwable  {
      DBIndexInfo dBIndexInfo0 = new DBIndexInfo("Or$", "Or$", (short) (-1179), "Or$", false, (short)1, "Or$", (Boolean) false, 0, 0, "Or$");
      assertNotNull(dBIndexInfo0);
      
      dBIndexInfo0.addColumn((short)2, "Or$");
      assertEquals("[Or$, Or$]", dBIndexInfo0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      DBIndexInfo dBIndexInfo0 = new DBIndexInfo(", ", ", ", (short)1, ", ", true, (short)1, ", ", (Boolean) true, (int) (short)1, (-917), ", ");
      assertNotNull(dBIndexInfo0);
      
      // Undeclared exception!
      try {
        dBIndexInfo0.addColumn((short)1356, ", ");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * ordinalPosition is expected to be 2, found: 1356
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      DBIndexInfo dBIndexInfo0 = new DBIndexInfo("", "", (short)1, (String) null, false, (short)1, "found: ", (Boolean) false, (int) (short)0, 0, "");
      assertNotNull(dBIndexInfo0);
      
      // Undeclared exception!
      try {
        dBIndexInfo0.addColumn((short)1, "");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * ordinalPosition is expected to be 2, found: 1
         */
      }
  }
}
