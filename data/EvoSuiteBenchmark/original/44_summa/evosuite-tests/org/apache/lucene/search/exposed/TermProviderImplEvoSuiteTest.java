/*
 * This file was automatically generated by EvoSuite
 */

package org.apache.lucene.search.exposed;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.apache.lucene.search.exposed.ExposedRequest;
import org.apache.lucene.search.exposed.GroupTermProvider;
import org.apache.lucene.search.exposed.TermProvider;
import org.apache.lucene.search.exposed.compare.NamedComparator;
import org.apache.lucene.util.BytesRef;
import org.apache.lucene.util.packed.GrowingMutable;
import org.apache.lucene.util.packed.PackedIntWrapper;
import org.apache.lucene.util.packed.PackedInts;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TermProviderImplEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Vector<TermProvider> vector0 = new Vector<TermProvider>();
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group(":ANGm", (List<ExposedRequest.Field>) null, (NamedComparator) null, ":ANGm");
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(313, (List<TermProvider>) vector0, exposedRequest_Group0, true);
      // Undeclared exception!
      try {
        groupTermProvider0.getNearestTermIndirect((BytesRef) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * No collator with ID ':ANGm'. Please add it with ExposedUtil.addCollator
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      Vector<TermProvider> vector0 = new Vector<TermProvider>();
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group(":ANGm", (List<ExposedRequest.Field>) null, (NamedComparator) null, ":ANGm");
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(313, (List<TermProvider>) vector0, exposedRequest_Group0, true);
      String string0 = groupTermProvider0.toString();
      assertNotNull(string0);
      assertEquals("GroupTermProvider(:ANGm, #subProviders=0, order.length=0 mem=0 bytes, TermProviderImpl(Group :ANGm, no docToSingle cached))", groupTermProvider0.toString());
      assertEquals("GroupTermProvider(:ANGm, #subProviders=0, order.length=0 mem=0 bytes, TermProviderImpl(Group :ANGm, no docToSingle cached))", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      Vector<TermProvider> vector0 = new Vector<TermProvider>();
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group(":ANGm", (List<ExposedRequest.Field>) null, (NamedComparator) null, ":ANGm");
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(313, (List<TermProvider>) vector0, exposedRequest_Group0, true);
      boolean boolean0 = groupTermProvider0.isConcat();
      assertEquals("GroupTermProvider(:ANGm, #subProviders=0, order.length=0 mem=0 bytes, TermProviderImpl(Group :ANGm, no docToSingle cached))", groupTermProvider0.toString());
      assertEquals(true, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      Vector<TermProvider> vector0 = new Vector<TermProvider>();
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group(":ANGm", (List<ExposedRequest.Field>) null, (NamedComparator) null, ":ANGm");
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(313, (List<TermProvider>) vector0, exposedRequest_Group0, true);
      groupTermProvider0.setDocIDBase(313);
      assertEquals("GroupTermProvider(:ANGm, #subProviders=0, order.length=0 mem=0 bytes, TermProviderImpl(Group :ANGm, no docToSingle cached))", groupTermProvider0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      Vector<TermProvider> vector0 = new Vector<TermProvider>();
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group(":ANGm", (List<ExposedRequest.Field>) null, (NamedComparator) null, (String) null);
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(313, (List<TermProvider>) vector0, exposedRequest_Group0, true);
      int int0 = groupTermProvider0.getNearestTermIndirect((BytesRef) null, 313, 313);
      assertEquals("GroupTermProvider(:ANGm, #subProviders=0, order.length=0 mem=0 bytes, TermProviderImpl(Group :ANGm, no docToSingle cached))", groupTermProvider0.toString());
      assertEquals(313, int0);
  }

  @Test
  public void test5()  throws Throwable  {
      Vector<TermProvider> vector0 = new Vector<TermProvider>();
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group(":ANGm", (List<ExposedRequest.Field>) null, (NamedComparator) null, ":ANGm");
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(313, (List<TermProvider>) vector0, exposedRequest_Group0, true);
      groupTermProvider0.getDocToSingleIndirect();
      groupTermProvider0.getDocToSingleIndirect();
      assertEquals("GroupTermProvider(:ANGm, #subProviders=0, order.length=0 mem=0 bytes, TermProviderImpl(Group :ANGm, docToSingle.length=1 mem=0 bytes))", groupTermProvider0.toString());
      assertEquals("Group :ANGm", groupTermProvider0.getDesignation());
  }

  @Test
  public void test6()  throws Throwable  {
      Vector<TermProvider> vector0 = new Vector<TermProvider>();
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group(":ANGm", (List<ExposedRequest.Field>) null, (NamedComparator) null, ":ANGm");
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(313, (List<TermProvider>) vector0, exposedRequest_Group0, false);
      GrowingMutable growingMutable0 = (GrowingMutable)groupTermProvider0.getDocToSingleIndirect();
      assertEquals("GroupTermProvider(:ANGm, #subProviders=0, no order cached, TermProviderImpl(Group :ANGm, no docToSingle cached))", groupTermProvider0.toString());
      assertNotNull(growingMutable0);
      assertEquals(true, groupTermProvider0.isConcat());
      assertEquals("GrowingMutable(i(0)=-1)", growingMutable0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      Vector<TermProvider> vector0 = new Vector<TermProvider>();
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group(":ANGm", (List<ExposedRequest.Field>) null, (NamedComparator) null, (String) null);
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(313, (List<TermProvider>) vector0, exposedRequest_Group0, true);
      int[] intArray0 = new int[77];
      PackedIntWrapper packedIntWrapper0 = new PackedIntWrapper(intArray0);
      groupTermProvider0.setOrderedOrdinals((PackedInts.Reader) packedIntWrapper0);
      // Undeclared exception!
      try {
        groupTermProvider0.getNearestTermIndirect((BytesRef) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * The term ordinal 0 is above the maximum -1
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      Vector<TermProvider> vector0 = new Vector<TermProvider>();
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group(":ANGm", (List<ExposedRequest.Field>) null, (NamedComparator) null, ":ANGm");
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(313, (List<TermProvider>) vector0, exposedRequest_Group0, true);
      groupTermProvider0.getDocToSingleIndirect();
      String string0 = groupTermProvider0.toString();
      assertEquals("GroupTermProvider(:ANGm, #subProviders=0, order.length=0 mem=0 bytes, TermProviderImpl(Group :ANGm, docToSingle.length=1 mem=0 bytes))", groupTermProvider0.toString());
      assertEquals("GroupTermProvider(:ANGm, #subProviders=0, order.length=0 mem=0 bytes, TermProviderImpl(Group :ANGm, docToSingle.length=1 mem=0 bytes))", string0);
  }

  @Test
  public void test9()  throws Throwable  {
      Vector<TermProvider> vector0 = new Vector<TermProvider>();
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group(":ANGm", (List<ExposedRequest.Field>) null, (NamedComparator) null, ":ANGm");
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(313, (List<TermProvider>) vector0, exposedRequest_Group0, true);
      groupTermProvider0.transitiveReleaseCaches(313, false);
      assertEquals("GroupTermProvider(:ANGm, #subProviders=0, no order cached, TermProviderImpl(Group :ANGm, no docToSingle cached))", groupTermProvider0.toString());
      assertEquals(true, groupTermProvider0.isConcat());
  }

  @Test
  public void test10()  throws Throwable  {
      Vector<TermProvider> vector0 = new Vector<TermProvider>();
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group(":ANGm", (List<ExposedRequest.Field>) null, (NamedComparator) null, ":ANGm");
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(313, (List<TermProvider>) vector0, exposedRequest_Group0, true);
      groupTermProvider0.transitiveReleaseCaches(313, true);
      assertEquals("Group :ANGm", groupTermProvider0.getDesignation());
      assertEquals(true, groupTermProvider0.isConcat());
  }

  @Test
  public void test11()  throws Throwable  {
      Vector<TermProvider> vector0 = new Vector<TermProvider>();
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group(":ANGm", (List<ExposedRequest.Field>) null, (NamedComparator) null, ":ANGm");
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(313, (List<TermProvider>) vector0, exposedRequest_Group0, true);
      groupTermProvider0.transitiveReleaseCaches((-1), true);
      assertEquals("GroupTermProvider(:ANGm, #subProviders=0, order.length=0 mem=0 bytes, TermProviderImpl(Group :ANGm, no docToSingle cached))", groupTermProvider0.toString());
      assertEquals(true, groupTermProvider0.isConcat());
  }

  @Test
  public void test12()  throws Throwable  {
      ArrayList<TermProvider> arrayList0 = new ArrayList<TermProvider>();
      Stack<ExposedRequest.Field> stack0 = new Stack<ExposedRequest.Field>();
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group("GH.l_23nJ=O", (List<ExposedRequest.Field>) stack0, (NamedComparator) null);
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(0, (List<TermProvider>) arrayList0, exposedRequest_Group0, false);
      // Undeclared exception!
      try {
        groupTermProvider0.getDisplayTerm((long) 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * The term ordinal 0 is above the maximum -1
         */
      }
  }
}
