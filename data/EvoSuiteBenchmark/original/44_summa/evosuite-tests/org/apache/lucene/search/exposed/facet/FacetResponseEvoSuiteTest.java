/*
 * This file was automatically generated by EvoSuite
 */

package org.apache.lucene.search.exposed.facet;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.ctc.wstx.api.WriterConfig;
import com.ctc.wstx.sw.ISOLatin1XmlWriter;
import com.ctc.wstx.sw.SimpleNsStreamWriter;
import com.ctc.wstx.sw.XmlWriter;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.Writer;
import java.util.LinkedList;
import java.util.List;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamWriter;
import org.apache.lucene.search.exposed.compare.NamedComparator;
import org.apache.lucene.search.exposed.facet.FacetResponse;
import org.apache.lucene.search.exposed.facet.request.FacetRequest;
import org.apache.lucene.search.exposed.facet.request.FacetRequestGroup;
import org.apache.lucene.search.exposed.facet.request.SubtagsConstraints;
import org.codehaus.jettison.badgerfish.BadgerFishXMLStreamWriter;
import org.codehaus.jettison.util.FastStack;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class FacetResponseEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      FacetRequest facetRequest0 = new FacetRequest("0|");
      FacetRequestGroup facetRequestGroup0 = facetRequest0.createGroup("0|");
      FacetResponse.TagCollection facetResponse_TagCollection0 = new FacetResponse.TagCollection();
      FacetResponse.Group facetResponse_Group0 = new FacetResponse.Group(facetRequestGroup0, facetResponse_TagCollection0);
      facetResponse_Group0.setExtractionTime((long) (-65473));
      assertEquals((-65473L), facetResponse_Group0.getExtractionTime());
      assertEquals((-1L), facetResponse_TagCollection0.getTotalCount());
  }

  @Test
  public void test1()  throws Throwable  {
      FacetResponse.TagCollection facetResponse_TagCollection0 = new FacetResponse.TagCollection();
      FacetRequest facetRequest0 = new FacetRequest("");
      FacetRequestGroup facetRequestGroup0 = facetRequest0.createGroup("");
      FacetResponse.Group facetResponse_Group0 = new FacetResponse.Group(facetRequestGroup0, facetResponse_TagCollection0);
      FastStack fastStack0 = new FastStack();
      FacetResponse facetResponse0 = new FacetResponse(facetRequest0, (List<FacetResponse.Group>) fastStack0, (-1L));
      assertEquals("<?xml version='1.0' encoding='utf-8'?>\n<facetresponse xmlns=\"http://lucene.apache.org/exposed/facet/response/1.0\" query=\"\" countcached=\"false\">\n</facetresponse>\n", facetResponse0.toXML());
      
      fastStack0.add((Object) facetResponse_Group0);
      assertEquals("", facetResponse_Group0.getFieldsStr());
      assertEquals((-1L), facetResponse_Group0.getExtractionTime());
      assertEquals((-1L), facetResponse_TagCollection0.getTotalCount());
      assertEquals((-1L), facetResponse_TagCollection0.getTotalTags());
      assertEquals((-1L), facetResponse_TagCollection0.getPotentialTags());
      assertEquals((-1L), facetResponse_TagCollection0.getCount());
      
      // Undeclared exception!
      try {
        facetResponse0.toString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      FacetRequest facetRequest0 = new FacetRequest("0|");
      FacetRequestGroup facetRequestGroup0 = facetRequest0.createGroup("0|");
      FastStack fastStack0 = new FastStack();
      FacetResponse.Group facetResponse_Group0 = new FacetResponse.Group(facetRequestGroup0, (List<FacetResponse.Tag>) fastStack0);
      assertEquals((-1L), facetResponse_Group0.getExtractionTime());
      assertNotNull(facetResponse_Group0);
  }

  @Test
  public void test3()  throws Throwable  {
      NamedComparator.ORDER namedComparator_ORDER0 = NamedComparator.ORDER.custom;
      FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup("f0B#[xp/>v!", namedComparator_ORDER0, false, "f0B#[xp/>v!", 13, 13, 13, "f0B#[xp/>v!", false, 13, "f0B#[xp/>v!", "f0B#[xp/>v!");
      FacetResponse.TagCollection facetResponse_TagCollection0 = new FacetResponse.TagCollection();
      FacetResponse.Group facetResponse_Group0 = new FacetResponse.Group(facetRequestGroup0, facetResponse_TagCollection0);
      facetResponse_Group0.setTotalReferences((long) 13);
      assertEquals(13L, facetResponse_TagCollection0.getCount());
      assertEquals((-1L), facetResponse_TagCollection0.getPotentialTags());
  }

  @Test
  public void test4()  throws Throwable  {
      NamedComparator.ORDER namedComparator_ORDER0 = NamedComparator.ORDER.custom;
      FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup(": missin method '", namedComparator_ORDER0, false, ": missin method '", 0, 0, 0, ": missin method '", false, 0, ": missin method '", ": missin method '");
      FacetResponse.TagCollection facetResponse_TagCollection0 = new FacetResponse.TagCollection();
      FacetResponse.Group facetResponse_Group0 = new FacetResponse.Group(facetRequestGroup0, facetResponse_TagCollection0);
      assertEquals((-1L), facetResponse_TagCollection0.getPotentialTags());
      
      facetResponse_Group0.setPotentialTags((long) 0);
      assertEquals(0L, facetResponse_TagCollection0.getPotentialTags());
      assertEquals((-1L), facetResponse_TagCollection0.getCount());
  }

  @Test
  public void test5()  throws Throwable  {
      FacetRequest facetRequest0 = new FacetRequest("0|");
      FacetRequestGroup facetRequestGroup0 = facetRequest0.createGroup("0|");
      FacetResponse.TagCollection facetResponse_TagCollection0 = new FacetResponse.TagCollection();
      FacetResponse.Group facetResponse_Group0 = new FacetResponse.Group(facetRequestGroup0, facetResponse_TagCollection0);
      FacetRequestGroup facetRequestGroup1 = facetResponse_Group0.getRequest();
      assertEquals((-1L), facetResponse_TagCollection0.getTotalCount());
      assertEquals((-1L), facetResponse_TagCollection0.getCount());
      assertEquals((-1L), facetResponse_TagCollection0.getPotentialTags());
      assertEquals((-1L), facetResponse_Group0.getExtractionTime());
      assertEquals((-1L), facetResponse_TagCollection0.getTotalTags());
      assertNotNull(facetRequestGroup1);
  }

  @Test
  public void test6()  throws Throwable  {
      FacetResponse.TagCollection facetResponse_TagCollection0 = new FacetResponse.TagCollection();
      FacetRequest facetRequest0 = new FacetRequest("");
      FacetRequestGroup facetRequestGroup0 = facetRequest0.createGroup("");
      FacetResponse.Group facetResponse_Group0 = new FacetResponse.Group(facetRequestGroup0, facetResponse_TagCollection0);
      FacetResponse.TagCollection facetResponse_TagCollection1 = facetResponse_Group0.getTags();
      assertEquals((-1L), facetResponse_TagCollection0.getPotentialTags());
      assertEquals((-1L), facetResponse_TagCollection0.getTotalCount());
      assertEquals((-1L), facetResponse_Group0.getExtractionTime());
      assertEquals((-1L), facetResponse_TagCollection0.getCount());
      assertEquals((-1L), facetResponse_TagCollection0.getTotalTags());
      assertNotNull(facetResponse_TagCollection1);
      assertEquals((-1L), facetResponse_TagCollection1.getCount());
  }

  @Test
  public void test7()  throws Throwable  {
      FacetResponse.TagCollection facetResponse_TagCollection0 = new FacetResponse.TagCollection();
      FacetRequest facetRequest0 = new FacetRequest("");
      FacetRequestGroup facetRequestGroup0 = facetRequest0.createGroup("");
      FacetResponse.Group facetResponse_Group0 = new FacetResponse.Group(facetRequestGroup0, facetResponse_TagCollection0);
      facetResponse_Group0.setValidTags((-1L));
      assertEquals((-1L), facetResponse_Group0.getExtractionTime());
      assertEquals((-1L), facetResponse_TagCollection0.getPotentialTags());
      assertEquals((-1L), facetResponse_TagCollection0.getCount());
      assertEquals((-1L), facetResponse_TagCollection0.getTotalCount());
      assertEquals((-1L), facetResponse_TagCollection0.getTotalTags());
  }

  @Test
  public void test8()  throws Throwable  {
      FacetResponse.TagCollection facetResponse_TagCollection0 = new FacetResponse.TagCollection();
      FacetRequest facetRequest0 = new FacetRequest("");
      FacetRequestGroup facetRequestGroup0 = facetRequest0.createGroup("");
      FacetResponse.Group facetResponse_Group0 = new FacetResponse.Group(facetRequestGroup0, facetResponse_TagCollection0);
      facetResponse_Group0.isHierarchical();
      assertEquals((-1L), facetResponse_Group0.getExtractionTime());
      assertEquals((-1L), facetResponse_TagCollection0.getCount());
      assertEquals((-1L), facetResponse_TagCollection0.getTotalTags());
      assertEquals((-1L), facetResponse_TagCollection0.getPotentialTags());
      assertEquals((-1L), facetResponse_TagCollection0.getTotalCount());
  }

  @Test
  public void test9()  throws Throwable  {
      NamedComparator.ORDER namedComparator_ORDER0 = NamedComparator.ORDER.custom;
      FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup(": missin method '", namedComparator_ORDER0, false, ": missin method '", 0, 0, 0, ": missin method '", false, 0, ": missin method '", ": missin method '");
      FacetResponse.TagCollection facetResponse_TagCollection0 = new FacetResponse.TagCollection();
      FacetResponse.Group facetResponse_Group0 = new FacetResponse.Group(facetRequestGroup0, facetResponse_TagCollection0);
      long long0 = facetResponse_Group0.getExtractionTime();
      assertEquals((-1L), facetResponse_TagCollection0.getTotalTags());
      assertEquals((-1L), long0);
      assertEquals((-1L), facetResponse_TagCollection0.getTotalCount());
      assertEquals((-1L), facetResponse_TagCollection0.getCount());
      assertEquals((-1L), facetResponse_TagCollection0.getPotentialTags());
  }

  @Test
  public void test10()  throws Throwable  {
      FacetResponse.Tag facetResponse_Tag0 = new FacetResponse.Tag(": missin method '", 0, 0);
      String string0 = facetResponse_Tag0.getTerm();
      assertNotNull(string0);
      assertEquals(0, facetResponse_Tag0.getTotalCount());
      assertEquals(0, facetResponse_Tag0.getCount());
  }

  @Test
  public void test11()  throws Throwable  {
      FacetResponse.Tag facetResponse_Tag0 = new FacetResponse.Tag(": missin method '", 0, 0);
      facetResponse_Tag0.getSubTags();
      assertEquals(0, facetResponse_Tag0.getCount());
      assertEquals(0, facetResponse_Tag0.getTotalCount());
  }

  @Test
  public void test12()  throws Throwable  {
      FacetResponse.Tag facetResponse_Tag0 = new FacetResponse.Tag("[", (-665), (-665));
      int int0 = facetResponse_Tag0.getTotalCount();
      assertEquals((-665), int0);
      assertEquals(-665, facetResponse_Tag0.getCount());
  }

  @Test
  public void test13()  throws Throwable  {
      FacetResponse.Tag facetResponse_Tag0 = new FacetResponse.Tag("", 3, 3);
      int int0 = facetResponse_Tag0.getCount();
      assertEquals(3, int0);
      assertEquals(3, facetResponse_Tag0.getTotalCount());
  }

  @Test
  public void test14()  throws Throwable  {
      FacetResponse.Tag facetResponse_Tag0 = new FacetResponse.Tag("", (-65473));
      assertEquals(-65473, facetResponse_Tag0.getCount());
      assertEquals(-1, facetResponse_Tag0.getTotalCount());
  }

  @Test
  public void test15()  throws Throwable  {
      FacetRequest facetRequest0 = new FacetRequest("[");
      FacetRequestGroup facetRequestGroup0 = facetRequest0.createGroup("[");
      FacetResponse.TagCollection facetResponse_TagCollection0 = new FacetResponse.TagCollection();
      FacetResponse.Group facetResponse_Group0 = new FacetResponse.Group(facetRequestGroup0, facetResponse_TagCollection0);
      BadgerFishXMLStreamWriter badgerFishXMLStreamWriter0 = new BadgerFishXMLStreamWriter((Writer) null);
      // Undeclared exception!
      try {
        facetResponse_Group0.toXML((XMLStreamWriter) badgerFishXMLStreamWriter0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test16()  throws Throwable  {
      FacetResponse.TagCollection facetResponse_TagCollection0 = new FacetResponse.TagCollection();
      facetResponse_TagCollection0.getDefiner();
      assertEquals((-1L), facetResponse_TagCollection0.getTotalTags());
      assertEquals((-1L), facetResponse_TagCollection0.getPotentialTags());
      assertEquals((-1L), facetResponse_TagCollection0.getCount());
      assertEquals((-1L), facetResponse_TagCollection0.getTotalCount());
  }

  @Test
  public void test17()  throws Throwable  {
      FacetResponse.TagCollection facetResponse_TagCollection0 = new FacetResponse.TagCollection();
      facetResponse_TagCollection0.setTotalCount(1816L);
      assertEquals(1816L, facetResponse_TagCollection0.getTotalCount());
      assertEquals((-1L), facetResponse_TagCollection0.getPotentialTags());
  }

  @Test
  public void test18()  throws Throwable  {
      FacetResponse.TagCollection facetResponse_TagCollection0 = new FacetResponse.TagCollection();
      FacetRequest facetRequest0 = new FacetRequest("Xa");
      FacetRequestGroup facetRequestGroup0 = facetRequest0.createGroup("Xa");
      facetResponse_TagCollection0.setDefiner((SubtagsConstraints) facetRequestGroup0);
      assertEquals((-1L), facetResponse_TagCollection0.getTotalCount());
      assertEquals((-1L), facetResponse_TagCollection0.getTotalTags());
      assertEquals((-1L), facetResponse_TagCollection0.getPotentialTags());
      assertEquals((-1L), facetResponse_TagCollection0.getCount());
  }

  @Test
  public void test19()  throws Throwable  {
      FacetResponse.TagCollection facetResponse_TagCollection0 = new FacetResponse.TagCollection();
      facetResponse_TagCollection0.getConstraints();
      assertEquals((-1L), facetResponse_TagCollection0.getPotentialTags());
      assertEquals((-1L), facetResponse_TagCollection0.getTotalTags());
      assertEquals((-1L), facetResponse_TagCollection0.getTotalCount());
      assertEquals((-1L), facetResponse_TagCollection0.getCount());
  }

  @Test
  public void test20()  throws Throwable  {
      FacetRequest facetRequest0 = new FacetRequest("0|");
      FastStack fastStack0 = new FastStack();
      FacetResponse facetResponse0 = new FacetResponse(facetRequest0, (List<FacetResponse.Group>) fastStack0, (long) (-65473));
      facetResponse0.setTotalTime((long) (-65473));
      assertEquals((-65473L), facetResponse0.getTotalTime());
      assertEquals((-1L), facetResponse0.getCountingTime());
  }

  @Test
  public void test21()  throws Throwable  {
      FacetRequest facetRequest0 = new FacetRequest(": missin method '");
      LinkedList<FacetResponse.Group> linkedList0 = new LinkedList<FacetResponse.Group>();
      FacetResponse facetResponse0 = new FacetResponse(facetRequest0, (List<FacetResponse.Group>) linkedList0, (long) 0);
      boolean boolean0 = facetResponse0.isCountCached();
      assertEquals("<?xml version='1.0' encoding='utf-8'?>\n<facetresponse xmlns=\"http://lucene.apache.org/exposed/facet/response/1.0\" query=\": missin method '\" hits=\"0\" countcached=\"false\">\n</facetresponse>\n", facetResponse0.toXML());
      assertEquals(false, boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      FacetResponse facetResponse0 = new FacetResponse((FacetRequest) null, (List<FacetResponse.Group>) null, 609L);
      long long0 = facetResponse0.getTotalTime();
      assertEquals(609L, facetResponse0.getHits());
      assertEquals((-1L), long0);
      assertEquals((-1L), facetResponse0.getCountingTime());
      assertEquals(false, facetResponse0.isCountCached());
  }

  @Test
  public void test23()  throws Throwable  {
      FacetRequest facetRequest0 = new FacetRequest("f");
      FacetResponse facetResponse0 = new FacetResponse(facetRequest0, (List<FacetResponse.Group>) null, (long) (-1580));
      facetResponse0.getGroups();
      assertEquals((-1L), facetResponse0.getCountingTime());
      assertEquals(false, facetResponse0.isCountCached());
      assertEquals((-1L), facetResponse0.getTotalTime());
      assertEquals((-1580L), facetResponse0.getHits());
  }

  @Test
  public void test24()  throws Throwable  {
      FacetRequest facetRequest0 = new FacetRequest(": missin method '");
      LinkedList<FacetResponse.Group> linkedList0 = new LinkedList<FacetResponse.Group>();
      FacetResponse facetResponse0 = new FacetResponse(facetRequest0, (List<FacetResponse.Group>) linkedList0, (long) 0);
      assertEquals((-1L), facetResponse0.getCountingTime());
      
      facetResponse0.setCountingTime((long) 0);
      assertEquals((-1L), facetResponse0.getTotalTime());
  }

  @Test
  public void test25()  throws Throwable  {
      FacetRequest facetRequest0 = new FacetRequest("0|");
      FastStack fastStack0 = new FastStack();
      FacetResponse facetResponse0 = new FacetResponse(facetRequest0, (List<FacetResponse.Group>) fastStack0, (long) (-65473));
      assertEquals(false, facetResponse0.isCountCached());
      
      facetResponse0.setCountingCached(true);
      String string0 = facetResponse0.toXML();
      assertEquals(true, facetResponse0.isCountCached());
      assertEquals("<?xml version='1.0' encoding='utf-8'?>\n<facetresponse xmlns=\"http://lucene.apache.org/exposed/facet/response/1.0\" query=\"0|\" hits=\"-65473\" countcached=\"true\">\n</facetresponse>\n", string0);
  }

  @Test
  public void test26()  throws Throwable  {
      FacetRequest facetRequest0 = new FacetRequest("0|");
      FastStack fastStack0 = new FastStack();
      FacetResponse facetResponse0 = new FacetResponse(facetRequest0, (List<FacetResponse.Group>) fastStack0, (long) (-65473));
      String string0 = facetResponse0.toXML();
      assertNotNull(string0);
      assertEquals("<?xml version='1.0' encoding='utf-8'?>\n<facetresponse xmlns=\"http://lucene.apache.org/exposed/facet/response/1.0\" query=\"0|\" hits=\"-65473\" countcached=\"false\">\n</facetresponse>\n", string0);
  }

  @Test
  public void test27()  throws Throwable  {
      FacetRequest facetRequest0 = new FacetRequest("0|");
      FastStack fastStack0 = new FastStack();
      FacetResponse facetResponse0 = new FacetResponse(facetRequest0, (List<FacetResponse.Group>) fastStack0, (long) (-65473));
      long long0 = facetResponse0.getCountingTime();
      assertEquals((-1L), long0);
      assertEquals("<?xml version='1.0' encoding='utf-8'?>\n<facetresponse xmlns=\"http://lucene.apache.org/exposed/facet/response/1.0\" query=\"0|\" hits=\"-65473\" countcached=\"false\">\n</facetresponse>\n", facetResponse0.toXML());
  }

  @Test
  public void test28()  throws Throwable  {
      FacetResponse facetResponse0 = new FacetResponse((FacetRequest) null, (List<FacetResponse.Group>) null, 609L);
      long long0 = facetResponse0.getHits();
      assertEquals((-1L), facetResponse0.getCountingTime());
      assertEquals((-1L), facetResponse0.getTotalTime());
      assertEquals(609L, long0);
      assertEquals(false, facetResponse0.isCountCached());
  }

  @Test
  public void test29()  throws Throwable  {
      FacetRequest facetRequest0 = new FacetRequest("Xa");
      FastStack fastStack0 = new FastStack();
      FacetResponse facetResponse0 = new FacetResponse(facetRequest0, (List<FacetResponse.Group>) fastStack0, (-1L));
      FacetRequest facetRequest1 = facetResponse0.getRequest();
      assertEquals("<?xml version='1.0' encoding='utf-8'?>\n<facetresponse xmlns=\"http://lucene.apache.org/exposed/facet/response/1.0\" query=\"Xa\" countcached=\"false\">\n</facetresponse>\n", facetResponse0.toXML());
      assertNotNull(facetRequest1);
      assertEquals((-1L), facetResponse0.getTotalTime());
  }

  @Test
  public void test30()  throws Throwable  {
      FacetRequest facetRequest0 = new FacetRequest("0|");
      FastStack fastStack0 = new FastStack();
      FacetResponse facetResponse0 = new FacetResponse(facetRequest0, (List<FacetResponse.Group>) fastStack0, (long) (-65473));
      assertEquals("<?xml version='1.0' encoding='utf-8'?>\n<facetresponse xmlns=\"http://lucene.apache.org/exposed/facet/response/1.0\" query=\"0|\" hits=\"-65473\" countcached=\"false\">\n</facetresponse>\n", facetResponse0.toXML());
      
      fastStack0.add((Object) facetRequest0);
      // Undeclared exception!
      try {
        facetResponse0.toXML();
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * org.apache.lucene.search.exposed.facet.request.FacetRequest cannot be cast to org.apache.lucene.search.exposed.facet.FacetResponse$Group
         */
      }
  }

  @Test
  public void test31()  throws Throwable  {
      NamedComparator.ORDER namedComparator_ORDER0 = NamedComparator.ORDER.count;
      FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup("}v,#n-sY<j", namedComparator_ORDER0, true, "}v,#n-sY<j", 20846, 20846, 20846, "}v,#n-sY<j", true, 20846, "}v,#n-sY<j", "}v,#n-sY<j");
      FacetResponse.TagCollection facetResponse_TagCollection0 = new FacetResponse.TagCollection();
      FacetResponse.Group facetResponse_Group0 = new FacetResponse.Group(facetRequestGroup0, facetResponse_TagCollection0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) pipedOutputStream0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) iSOLatin1XmlWriter0, "}v,#n-sY<j", writerConfig0);
      // Undeclared exception!
      try {
        facetResponse_Group0.toXML((XMLStreamWriter) simpleNsStreamWriter0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test32()  throws Throwable  {
      FacetResponse.Tag facetResponse_Tag0 = new FacetResponse.Tag("", 3, 3);
      FastStack fastStack0 = new FastStack();
      FacetResponse.TagCollection facetResponse_TagCollection0 = new FacetResponse.TagCollection();
      facetResponse_TagCollection0.setTags((List<FacetResponse.Tag>) fastStack0);
      facetResponse_Tag0.setSubTags(facetResponse_TagCollection0);
      assertEquals((-1L), facetResponse_TagCollection0.getPotentialTags());
      assertEquals((-1L), facetResponse_TagCollection0.getTotalCount());
      assertEquals((-1L), facetResponse_TagCollection0.getTotalTags());
      assertEquals((-1L), facetResponse_TagCollection0.getCount());
      
      BadgerFishXMLStreamWriter badgerFishXMLStreamWriter0 = new BadgerFishXMLStreamWriter((Writer) null);
      facetResponse_Tag0.toXML((XMLStreamWriter) badgerFishXMLStreamWriter0, "");
      assertEquals(3, facetResponse_Tag0.getTotalCount());
      assertEquals(3, facetResponse_Tag0.getCount());
  }

  @Test
  public void test33()  throws Throwable  {
      FacetResponse.Tag facetResponse_Tag0 = new FacetResponse.Tag("Xa", 3, 3);
      FacetResponse.TagCollection facetResponse_TagCollection0 = new FacetResponse.TagCollection();
      FacetRequest facetRequest0 = new FacetRequest("Xa");
      FastStack fastStack0 = new FastStack();
      fastStack0.add((Object) facetRequest0);
      facetResponse_TagCollection0.setTags((List<FacetResponse.Tag>) fastStack0);
      facetResponse_Tag0.setSubTags(facetResponse_TagCollection0);
      assertEquals((-1L), facetResponse_TagCollection0.getCount());
      assertEquals((-1L), facetResponse_TagCollection0.getPotentialTags());
      assertEquals((-1L), facetResponse_TagCollection0.getTotalTags());
      assertEquals((-1L), facetResponse_TagCollection0.getTotalCount());
      
      BadgerFishXMLStreamWriter badgerFishXMLStreamWriter0 = new BadgerFishXMLStreamWriter((Writer) null);
      // Undeclared exception!
      try {
        facetResponse_Tag0.toXML((XMLStreamWriter) badgerFishXMLStreamWriter0, "Xa");
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * org.apache.lucene.search.exposed.facet.request.FacetRequest cannot be cast to org.apache.lucene.search.exposed.facet.FacetResponse$Tag
         */
      }
  }

  @Test
  public void test34()  throws Throwable  {
      FacetResponse.Tag facetResponse_Tag0 = new FacetResponse.Tag("nonNegativeInteger", (-1), (-1));
      BadgerFishXMLStreamWriter badgerFishXMLStreamWriter0 = new BadgerFishXMLStreamWriter((Writer) null);
      facetResponse_Tag0.toXML((XMLStreamWriter) badgerFishXMLStreamWriter0, "nonNegativeInteger");
      assertEquals(-1, facetResponse_Tag0.getTotalCount());
      assertEquals(-1, facetResponse_Tag0.getCount());
  }

  @Test
  public void test35()  throws Throwable  {
      FacetRequest facetRequest0 = new FacetRequest("");
      FastStack fastStack0 = new FastStack();
      FacetResponse facetResponse0 = new FacetResponse(facetRequest0, (List<FacetResponse.Group>) fastStack0, (-1L));
      String string0 = facetResponse0.toString();
      assertEquals("FacetResponse(hits=-1, [])", string0);
      assertEquals("<?xml version='1.0' encoding='utf-8'?>\n<facetresponse xmlns=\"http://lucene.apache.org/exposed/facet/response/1.0\" query=\"\" countcached=\"false\">\n</facetresponse>\n", facetResponse0.toXML());
      assertNotNull(string0);
  }
}
