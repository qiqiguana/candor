/*
 * This file was automatically generated by EvoSuite
 */

package org.apache.lucene.search.exposed;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.lucene.search.exposed.ExposedRequest;
import org.apache.lucene.search.exposed.GroupTermProvider;
import org.apache.lucene.search.exposed.TermProvider;
import org.apache.lucene.search.exposed.compare.NamedCollatorComparator;
import org.apache.lucene.search.exposed.compare.NamedComparator;
import org.apache.lucene.util.packed.GrowingMutable;
import org.apache.lucene.util.packed.PackedInts;
import org.codehaus.jettison.util.FastStack;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class GroupTermProviderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      FastStack fastStack0 = new FastStack();
      Locale locale0 = Locale.CANADA_FRENCH;
      NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator(locale0);
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group("7oV\"/]opRm]Osb^", (List<ExposedRequest.Field>) fastStack0, (NamedComparator) namedCollatorComparator0, "7oV\"/]opRm]Osb^");
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(1615, (List<TermProvider>) fastStack0, exposedRequest_Group0, false);
      assertNotNull(groupTermProvider0);
      
      // Undeclared exception!
      try {
        groupTermProvider0.getField((long) 1615);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * The term ordinal 1615 is above the maximum -1
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      FastStack fastStack0 = new FastStack();
      Locale locale0 = Locale.CANADA_FRENCH;
      NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator(locale0);
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group("7oV\"/]opRm]Osb^", (List<ExposedRequest.Field>) fastStack0, (NamedComparator) namedCollatorComparator0, "7oV\"/]opRm]Osb^");
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(1615, (List<TermProvider>) fastStack0, exposedRequest_Group0, false);
      assertNotNull(groupTermProvider0);
      
      GrowingMutable growingMutable0 = new GrowingMutable();
      groupTermProvider0.setOrderedOrdinals((PackedInts.Reader) growingMutable0);
      assertEquals(1615, groupTermProvider0.getReaderHash());
  }

  @Test
  public void test2()  throws Throwable  {
      LinkedList<TermProvider> linkedList0 = new LinkedList<TermProvider>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator(locale0);
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group("", (List<ExposedRequest.Field>) null, (NamedComparator) namedCollatorComparator0, "");
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(1481, (List<TermProvider>) linkedList0, exposedRequest_Group0, false);
      assertNotNull(groupTermProvider0);
      
      long long0 = groupTermProvider0.segmentToIndexTermOrdinal(0, 1481);
      assertEquals(1481L, long0);
      assertEquals(1481, groupTermProvider0.getReaderHash());
  }

  @Test
  public void test3()  throws Throwable  {
      LinkedList<TermProvider> linkedList0 = new LinkedList<TermProvider>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator(locale0);
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group("", (List<ExposedRequest.Field>) null, (NamedComparator) namedCollatorComparator0, "");
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(1481, (List<TermProvider>) linkedList0, exposedRequest_Group0, false);
      assertNotNull(groupTermProvider0);
      
      ExposedRequest.Group exposedRequest_Group1 = groupTermProvider0.getRequest();
      assertEquals(1481, groupTermProvider0.getReaderHash());
      assertNotNull(exposedRequest_Group1);
  }

  @Test
  public void test4()  throws Throwable  {
      FastStack fastStack0 = new FastStack();
      Locale locale0 = Locale.CANADA_FRENCH;
      NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator(locale0);
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group("ggc", (List<ExposedRequest.Field>) fastStack0, (NamedComparator) namedCollatorComparator0, "ggc");
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(1600, (List<TermProvider>) fastStack0, exposedRequest_Group0, true);
      assertNotNull(groupTermProvider0);
      
      groupTermProvider0.getDocToSingleIndirect();
      assertEquals("GroupTermProvider(ggc, #subProviders=0, order.length=0 mem=0 bytes, TermProviderImpl(Group ggc, docToSingle.length=1 mem=0 bytes))", groupTermProvider0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      LinkedList<TermProvider> linkedList0 = new LinkedList<TermProvider>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator(locale0);
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group("", (List<ExposedRequest.Field>) null, (NamedComparator) namedCollatorComparator0, "");
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(1481, (List<TermProvider>) linkedList0, exposedRequest_Group0, false);
      assertNotNull(groupTermProvider0);
      
      // Undeclared exception!
      try {
        groupTermProvider0.getTerm((long) 1481);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * The term ordinal 1481 is above the maximum -1
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      LinkedList<TermProvider> linkedList0 = new LinkedList<TermProvider>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator(locale0);
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group("", (List<ExposedRequest.Field>) null, (NamedComparator) namedCollatorComparator0, "");
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(1481, (List<TermProvider>) linkedList0, exposedRequest_Group0, false);
      assertNotNull(groupTermProvider0);
      
      long long0 = groupTermProvider0.segmentToIndexDocID(0, 635813798);
      assertEquals(635813798L, long0);
      assertEquals(1481, groupTermProvider0.getReaderHash());
  }

  @Test
  public void test7()  throws Throwable  {
      LinkedList<TermProvider> linkedList0 = new LinkedList<TermProvider>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator(locale0);
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group("", (List<ExposedRequest.Field>) null, (NamedComparator) namedCollatorComparator0, "");
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(1481, (List<TermProvider>) linkedList0, exposedRequest_Group0, false);
      assertNotNull(groupTermProvider0);
      
      int int0 = groupTermProvider0.getReaderHash();
      assertEquals(1481, int0);
  }

  @Test
  public void test8()  throws Throwable  {
      FastStack fastStack0 = new FastStack();
      Locale locale0 = Locale.CANADA_FRENCH;
      NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator(locale0);
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group("(", (List<ExposedRequest.Field>) fastStack0, (NamedComparator) namedCollatorComparator0, "(");
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(1600, (List<TermProvider>) fastStack0, exposedRequest_Group0, true);
      assertNotNull(groupTermProvider0);
      
      // Undeclared exception!
      try {
        groupTermProvider0.getOrderedDisplayTerm(0L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 0
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      FastStack fastStack0 = new FastStack();
      Locale locale0 = Locale.CANADA_FRENCH;
      NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator(locale0);
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group("ggc", (List<ExposedRequest.Field>) fastStack0, (NamedComparator) namedCollatorComparator0, "ggc");
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(1600, (List<TermProvider>) fastStack0, exposedRequest_Group0, true);
      assertNotNull(groupTermProvider0);
      
      // Undeclared exception!
      try {
        groupTermProvider0.getOrderedDisplayTerm((-1L));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      LinkedList<TermProvider> linkedList0 = new LinkedList<TermProvider>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator(locale0);
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group("", (List<ExposedRequest.Field>) null, (NamedComparator) namedCollatorComparator0, "");
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(1481, (List<TermProvider>) linkedList0, exposedRequest_Group0, false);
      assertNotNull(groupTermProvider0);
      
      linkedList0.addLast((TermProvider) groupTermProvider0);
      int int0 = groupTermProvider0.getRecursiveHash();
      assertEquals(1420842634, groupTermProvider0.getRecursiveHash());
      assertEquals(1420842634, int0);
  }

  @Test
  public void test11()  throws Throwable  {
      FastStack fastStack0 = new FastStack();
      Locale locale0 = Locale.CANADA_FRENCH;
      NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator(locale0);
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group("(", (List<ExposedRequest.Field>) fastStack0, (NamedComparator) namedCollatorComparator0, "(");
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(1600, (List<TermProvider>) fastStack0, exposedRequest_Group0, true);
      assertNotNull(groupTermProvider0);
      
      groupTermProvider0.getOrderedOrdinals();
      groupTermProvider0.getUniqueTermCount();
      assertEquals("GroupTermProvider((, #subProviders=0, order.length=0 mem=0 bytes, TermProviderImpl(Group (, no docToSingle cached))", groupTermProvider0.toString());
  }

  @Test
  public void test12()  throws Throwable  {
      FastStack fastStack0 = new FastStack();
      Locale locale0 = Locale.CANADA_FRENCH;
      NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator(locale0);
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group("J9<SF^7S$`oJ+y|O", (List<ExposedRequest.Field>) fastStack0, (NamedComparator) namedCollatorComparator0, "J9<SF^7S$`oJ+y|O");
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(1615, (List<TermProvider>) fastStack0, exposedRequest_Group0, false);
      assertNotNull(groupTermProvider0);
      
      groupTermProvider0.getUniqueTermCount();
      assertEquals(1615, groupTermProvider0.getReaderHash());
      assertEquals("GroupTermProvider(J9<SF^7S$`oJ+y|O, #subProviders=0, no order cached, TermProviderImpl(Group J9<SF^7S$`oJ+y|O, no docToSingle cached))", groupTermProvider0.toString());
  }

  @Test
  public void test13()  throws Throwable  {
      FastStack fastStack0 = new FastStack();
      Locale locale0 = Locale.CANADA_FRENCH;
      NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator(locale0);
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group("(", (List<ExposedRequest.Field>) fastStack0, (NamedComparator) namedCollatorComparator0, "(");
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(1600, (List<TermProvider>) fastStack0, exposedRequest_Group0, true);
      assertNotNull(groupTermProvider0);
      
      groupTermProvider0.getOrderedOrdinals();
      String string0 = groupTermProvider0.toString();
      assertEquals("GroupTermProvider((, #subProviders=0, order.length=0 mem=0 bytes, TermProviderImpl(Group (, no docToSingle cached))", groupTermProvider0.toString());
      assertEquals("GroupTermProvider((, #subProviders=0, order.length=0 mem=0 bytes, TermProviderImpl(Group (, no docToSingle cached))", string0);
  }

  @Test
  public void test14()  throws Throwable  {
      FastStack fastStack0 = new FastStack();
      Locale locale0 = Locale.CANADA_FRENCH;
      NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator(locale0);
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group("7oV\"/]opRm]Osb^", (List<ExposedRequest.Field>) fastStack0, (NamedComparator) namedCollatorComparator0, "7oV\"/]opRm]Osb^");
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(1615, (List<TermProvider>) fastStack0, exposedRequest_Group0, false);
      assertNotNull(groupTermProvider0);
      
      String string0 = groupTermProvider0.toString();
      assertEquals("GroupTermProvider(7oV\"/]opRm]Osb^, #subProviders=0, no order cached, TermProviderImpl(Group 7oV\"/]opRm]Osb^, no docToSingle cached))", string0);
      assertNotNull(string0);
      assertEquals(1615, groupTermProvider0.getReaderHash());
  }

  @Test
  public void test15()  throws Throwable  {
      FastStack fastStack0 = new FastStack();
      Locale locale0 = Locale.CANADA_FRENCH;
      NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator(locale0);
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group("7oV\"/]opRm]Osb^", (List<ExposedRequest.Field>) fastStack0, (NamedComparator) namedCollatorComparator0, "7oV\"/]opRm]Osb^");
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(1615, (List<TermProvider>) fastStack0, exposedRequest_Group0, false);
      assertNotNull(groupTermProvider0);
      
      groupTermProvider0.transitiveReleaseCaches(1615, false);
      assertEquals(1615, groupTermProvider0.getReaderHash());
  }

  @Test
  public void test16()  throws Throwable  {
      FastStack fastStack0 = new FastStack();
      Locale locale0 = Locale.CANADA_FRENCH;
      NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator(locale0);
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group("J9<SF^7S$`oJ+y|O", (List<ExposedRequest.Field>) fastStack0, (NamedComparator) namedCollatorComparator0, "J9<SF^7S$`oJ+y|O");
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(1615, (List<TermProvider>) fastStack0, exposedRequest_Group0, false);
      assertNotNull(groupTermProvider0);
      
      groupTermProvider0.transitiveReleaseCaches(1615, true);
      assertEquals(1615, groupTermProvider0.getReaderHash());
  }

  @Test
  public void test17()  throws Throwable  {
      FastStack fastStack0 = new FastStack();
      Locale locale0 = Locale.CANADA_FRENCH;
      NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator(locale0);
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group("J9<SF^7S$`oJ+y|O", (List<ExposedRequest.Field>) fastStack0, (NamedComparator) namedCollatorComparator0, "J9<SF^7S$`oJ+y|O");
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(1615, (List<TermProvider>) fastStack0, exposedRequest_Group0, false);
      assertNotNull(groupTermProvider0);
      
      fastStack0.add((Object) "Ordered_placeholder");
      // Undeclared exception!
      try {
        groupTermProvider0.transitiveReleaseCaches(1615, true);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * java.lang.String cannot be cast to org.apache.lucene.search.exposed.TermProvider
         */
      }
  }
}
