/*
 * This file was automatically generated by EvoSuite
 */

package org.apache.lucene.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.apache.lucene.util.ExpandablePackedPair;
import org.apache.lucene.util.packed.GrowableWriter;
import org.apache.lucene.util.packed.PackedInts;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ExpandablePackedPairEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ExpandablePackedPair expandablePackedPair0 = new ExpandablePackedPair(0, 0, 2L, 0);
      int int0 = expandablePackedPair0.capacity();
      assertEquals(0, int0);
      assertEquals("ChunkedPackedArray(0 entries, 0 chunks)", expandablePackedPair0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      ExpandablePackedPair expandablePackedPair0 = new ExpandablePackedPair((-1220), (-1220), 63L);
      String string0 = expandablePackedPair0.toString();
      assertEquals("ChunkedPackedArray(0 entries, 0 chunks)", string0);
      assertNotNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      ExpandablePackedPair expandablePackedPair0 = new ExpandablePackedPair((-1220), (-1220), 63L);
      int int0 = expandablePackedPair0.size();
      assertEquals(0, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      ExpandablePackedPair expandablePackedPair0 = new ExpandablePackedPair(0, 1363, 0);
      expandablePackedPair0.add(1363, 1363);
      int[] intArray0 = new int[7];
      expandablePackedPair0.countUniquePrimaries(intArray0);
      assertEquals(1048576, expandablePackedPair0.capacity());
      assertEquals(1, expandablePackedPair0.size());
  }

  @Test
  public void test4()  throws Throwable  {
      ExpandablePackedPair expandablePackedPair0 = new ExpandablePackedPair((-1220), (-1220), 63L);
      int[] intArray0 = new int[9];
      expandablePackedPair0.assignSecondaries(intArray0, (PackedInts.Mutable) null);
      assertEquals("ChunkedPackedArray(0 entries, 0 chunks)", expandablePackedPair0.toString());
      assertEquals(0, expandablePackedPair0.size());
  }

  @Test
  public void test5()  throws Throwable  {
      ExpandablePackedPair expandablePackedPair0 = new ExpandablePackedPair(30, (-1), (-1));
      int[] intArray0 = new int[2];
      GrowableWriter growableWriter0 = new GrowableWriter(0, (-1), (-1));
      expandablePackedPair0.add(676, (-1785));
      // Undeclared exception!
      try {
        expandablePackedPair0.assignSecondaries(intArray0, (PackedInts.Mutable) growableWriter0);
        fail("Expecting exception: NegativeArraySizeException");
      } catch(NegativeArraySizeException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      ExpandablePackedPair expandablePackedPair0 = new ExpandablePackedPair(39, 62, 39);
      expandablePackedPair0.add(0, 60);
      expandablePackedPair0.setSecondaryOffset((long) 39);
      assertEquals(1, expandablePackedPair0.size());
      assertEquals(1048576, expandablePackedPair0.capacity());
  }
}
