/*
 * This file was automatically generated by EvoSuite
 */

package org.apache.lucene.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.apache.lucene.util.DoubleIntArrayList;
import org.apache.lucene.util.packed.PackedInts;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DoubleIntArrayListEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DoubleIntArrayList doubleIntArrayList0 = new DoubleIntArrayList((-1));
      int int0 = doubleIntArrayList0.size();
      assertEquals(0, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      DoubleIntArrayList doubleIntArrayList0 = new DoubleIntArrayList((-1365));
      // Undeclared exception!
      try {
        doubleIntArrayList0.swap((-1365), 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 4095, Size: 0
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      DoubleIntArrayList doubleIntArrayList0 = new DoubleIntArrayList(0);
      String string0 = doubleIntArrayList0.toString();
      assertNotNull(string0);
      assertEquals("DoubleIntArrayList(ChunkedLongArray(0 entries, 0 chunks, 0MB))", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      DoubleIntArrayList doubleIntArrayList0 = new DoubleIntArrayList((-1));
      doubleIntArrayList0.sortByPrimaries();
      assertEquals("DoubleIntArrayList(ChunkedLongArray(0 entries, 0 chunks, 0MB))", doubleIntArrayList0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      DoubleIntArrayList doubleIntArrayList0 = new DoubleIntArrayList(0);
      doubleIntArrayList0.set(295, 737, 295);
      PackedInts.Mutable packedInts_Mutable0 = doubleIntArrayList0.getPacked();
      assertEquals(1048576, doubleIntArrayList0.capacity());
      assertEquals(738, packedInts_Mutable0.size());
  }

  @Test
  public void test5()  throws Throwable  {
      DoubleIntArrayList doubleIntArrayList0 = new DoubleIntArrayList(0);
      int int0 = doubleIntArrayList0.capacity();
      assertEquals(0, int0);
  }

  @Test
  public void test6()  throws Throwable  {
      DoubleIntArrayList doubleIntArrayList0 = new DoubleIntArrayList(0);
      doubleIntArrayList0.add(0, 0);
      assertEquals(1048576, doubleIntArrayList0.capacity());
      
      PackedInts.Mutable packedInts_Mutable0 = doubleIntArrayList0.getPacked();
      assertEquals(1, packedInts_Mutable0.size());
  }

  @Test
  public void test7()  throws Throwable  {
      DoubleIntArrayList doubleIntArrayList0 = new DoubleIntArrayList(674);
      // Undeclared exception!
      try {
        doubleIntArrayList0.getPrimary(674);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * Requested value @ index 674 with array length 0
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      DoubleIntArrayList doubleIntArrayList0 = new DoubleIntArrayList(0);
      // Undeclared exception!
      try {
        doubleIntArrayList0.getSecondary(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * Requested value @ index 0 with array length 0
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      DoubleIntArrayList doubleIntArrayList0 = new DoubleIntArrayList((-1));
      PackedInts.Mutable packedInts_Mutable0 = doubleIntArrayList0.getPacked();
      assertNotNull(packedInts_Mutable0);
      assertEquals(1, packedInts_Mutable0.getBitsPerValue());
      assertEquals(0, packedInts_Mutable0.size());
  }

  @Test
  public void test10()  throws Throwable  {
      DoubleIntArrayList doubleIntArrayList0 = new DoubleIntArrayList(16);
      doubleIntArrayList0.set(16, 16, 1);
      PackedInts.Mutable packedInts_Mutable0 = doubleIntArrayList0.getPrimariesPacked();
      assertEquals(1048576, doubleIntArrayList0.capacity());
      assertEquals(5, packedInts_Mutable0.getBitsPerValue());
  }

  @Test
  public void test11()  throws Throwable  {
      DoubleIntArrayList doubleIntArrayList0 = new DoubleIntArrayList(674);
      PackedInts.Mutable packedInts_Mutable0 = doubleIntArrayList0.getPrimariesPacked();
      assertEquals(16L, packedInts_Mutable0.ramBytesUsed());
      assertEquals(1, packedInts_Mutable0.getBitsPerValue());
      assertNotNull(packedInts_Mutable0);
  }

  @Test
  public void test12()  throws Throwable  {
      DoubleIntArrayList doubleIntArrayList0 = new DoubleIntArrayList(674);
      doubleIntArrayList0.set(674, (-927), 674);
      PackedInts.Mutable packedInts_Mutable0 = doubleIntArrayList0.getSecondariesPacked();
      assertEquals(1048576, doubleIntArrayList0.capacity());
      assertEquals(864L, packedInts_Mutable0.ramBytesUsed());
  }

  @Test
  public void test13()  throws Throwable  {
      DoubleIntArrayList doubleIntArrayList0 = new DoubleIntArrayList(674);
      PackedInts.Mutable packedInts_Mutable0 = doubleIntArrayList0.getSecondariesPacked();
      assertEquals(1, packedInts_Mutable0.getBitsPerValue());
      assertNotNull(packedInts_Mutable0);
      assertEquals(0, packedInts_Mutable0.size());
  }

  @Test
  public void test14()  throws Throwable  {
      DoubleIntArrayList doubleIntArrayList0 = new DoubleIntArrayList(0);
      doubleIntArrayList0.add(0, 0);
      doubleIntArrayList0.getPrimaries();
      assertEquals(1048576, doubleIntArrayList0.capacity());
      assertEquals(1, doubleIntArrayList0.size());
  }

  @Test
  public void test15()  throws Throwable  {
      DoubleIntArrayList doubleIntArrayList0 = new DoubleIntArrayList(674);
      doubleIntArrayList0.set(674, (-927), 674);
      doubleIntArrayList0.getSecondaries();
      assertEquals(1048576, doubleIntArrayList0.capacity());
      assertEquals("DoubleIntArrayList(ChunkedLongArray(675 entries, 1 chunks, 8MB))", doubleIntArrayList0.toString());
  }
}
