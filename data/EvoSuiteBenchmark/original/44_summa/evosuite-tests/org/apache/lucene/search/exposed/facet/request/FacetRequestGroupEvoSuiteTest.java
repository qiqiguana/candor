/*
 * This file was automatically generated by EvoSuite
 */

package org.apache.lucene.search.exposed.facet.request;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.ctc.wstx.api.WriterConfig;
import com.ctc.wstx.sw.BufferingXmlWriter;
import com.ctc.wstx.sw.SimpleNsStreamWriter;
import com.ctc.wstx.sw.XmlWriter;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamWriter;
import org.apache.lucene.search.exposed.ExposedRequest;
import org.apache.lucene.search.exposed.compare.NamedCollatorComparator;
import org.apache.lucene.search.exposed.compare.NamedComparator;
import org.apache.lucene.search.exposed.facet.request.FacetRequestGroup;
import org.apache.lucene.search.exposed.facet.request.SubtagsConstraints;
import org.codehaus.jettison.badgerfish.BadgerFishXMLStreamWriter;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class FacetRequestGroupEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator(locale0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try {
        FacetRequestGroup.createGroup("f6Qt|%A6<.mD  ZC", (List<String>) linkedList0, (NamedComparator) namedCollatorComparator0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * There must be at least 1 field name
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      NamedComparator.ORDER namedComparator_ORDER0 = NamedComparator.ORDER.custom;
      FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup("f6Qt|%A6<.mD  ZC", namedComparator_ORDER0, true, "f6Qt|%A6<.mD  ZC", (-256), (-256), (-256), "f6Qt|%A6<.mD  ZC", true, (-256), "f6Qt|%A6<.mD  ZC", "f6Qt|%A6<.mD  ZC");
      assertNotNull(facetRequestGroup0);
      
      int int0 = facetRequestGroup0.getMaxTags();
      assertEquals(true, facetRequestGroup0.isReverse());
      assertEquals("group(name=f6Qt|%A6<.mD  ZC, order=custom, locale=f6Qt|%A6<.mD  ZC, fields(f6Qt|%A6<.mD  ZC), hierarchical=true, delimiter=f6Qt|%A6<.mD  ZC)", facetRequestGroup0.getBuildKey());
      assertEquals("f6Qt|%A6<.mD  ZC", facetRequestGroup0.getPrefix());
      assertEquals((-256), int0);
      assertEquals(-256, facetRequestGroup0.getMinCount());
      assertEquals(-256, facetRequestGroup0.getOffset());
  }

  @Test
  public void test2()  throws Throwable  {
      NamedComparator.ORDER namedComparator_ORDER0 = NamedComparator.ORDER.custom;
      FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup("f6Qt|%A6<.mD  ZC", namedComparator_ORDER0, true, "f6Qt|%A6<.mD  ZC", (-256), (-256), (-256), "f6Qt|%A6<.mD  ZC", true, (-256), "f6Qt|%A6<.mD  ZC", "f6Qt|%A6<.mD  ZC");
      assertNotNull(facetRequestGroup0);
      
      facetRequestGroup0.getOrder();
      assertEquals(-256, facetRequestGroup0.getMinTotalCount());
      assertEquals(-256, facetRequestGroup0.getMaxTags());
      assertEquals(-256, facetRequestGroup0.getOffset());
      assertEquals("group(name=f6Qt|%A6<.mD  ZC, order=custom, locale=f6Qt|%A6<.mD  ZC, fields(f6Qt|%A6<.mD  ZC), hierarchical=true, delimiter=f6Qt|%A6<.mD  ZC)", facetRequestGroup0.getBuildKey());
      assertEquals("f6Qt|%A6<.mD  ZC", facetRequestGroup0.getPrefix());
      assertEquals(true, facetRequestGroup0.isReverse());
  }

  @Test
  public void test3()  throws Throwable  {
      NamedComparator.ORDER namedComparator_ORDER0 = NamedComparator.ORDER.index;
      FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup("", namedComparator_ORDER0, true, "", 231, 231, 231, "", true, 231, "", "");
      assertNotNull(facetRequestGroup0);
      
      int int0 = facetRequestGroup0.getOffset();
      assertEquals("", facetRequestGroup0.getPrefix());
      assertEquals(true, facetRequestGroup0.isReverse());
      assertEquals("group(name=, order=index, locale=, fields(), hierarchical=true, delimiter=)", facetRequestGroup0.getBuildKey());
      assertEquals(231, int0);
      assertEquals(231, facetRequestGroup0.getMinTotalCount());
      assertEquals(231, facetRequestGroup0.getMaxTags());
  }

  @Test
  public void test4()  throws Throwable  {
      NamedComparator.ORDER namedComparator_ORDER0 = NamedComparator.ORDER.custom;
      FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup("f6Qt|%A6<.mD  ZC", namedComparator_ORDER0, false, "f6Qt|%A6<.mD  ZC", (-1732), (-1732), (-1732), "f6Qt|%A6<.mD  ZC", false, (-1732), "f6Qt|%A6<.mD  ZC", "f6Qt|%A6<.mD  ZC");
      assertNotNull(facetRequestGroup0);
      
      int int0 = facetRequestGroup0.getMinCount();
      assertEquals(-1732, facetRequestGroup0.getOffset());
      assertEquals(-1732, facetRequestGroup0.getMaxTags());
      assertEquals(false, facetRequestGroup0.isReverse());
      assertEquals("group(name=f6Qt|%A6<.mD  ZC, order=custom, locale=f6Qt|%A6<.mD  ZC, fields(f6Qt|%A6<.mD  ZC), hierarchical=false, delimiter=f6Qt|%A6<.mD  ZC)", facetRequestGroup0.getBuildKey());
      assertEquals("f6Qt|%A6<.mD  ZC", facetRequestGroup0.getPrefix());
      assertEquals((-1732), int0);
  }

  @Test
  public void test5()  throws Throwable  {
      NamedComparator.ORDER namedComparator_ORDER0 = NamedComparator.ORDER.index;
      FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup("", namedComparator_ORDER0, true, "", 231, 231, 231, "", true, 231, "", "");
      assertNotNull(facetRequestGroup0);
      
      int int0 = facetRequestGroup0.getMinTotalCount();
      assertEquals(231, int0);
      assertEquals(true, facetRequestGroup0.isReverse());
      assertEquals("group(name=, order=index, locale=, fields(), hierarchical=true, delimiter=)", facetRequestGroup0.getBuildKey());
      assertEquals(231, facetRequestGroup0.getMaxTags());
      assertEquals("", facetRequestGroup0.getPrefix());
      assertEquals(231, facetRequestGroup0.getOffset());
  }

  @Test
  public void test6()  throws Throwable  {
      NamedComparator.ORDER namedComparator_ORDER0 = NamedComparator.ORDER.index;
      FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup("", namedComparator_ORDER0, true, "", 231, 231, 231, "", true, 231, "", "");
      assertNotNull(facetRequestGroup0);
      
      String string0 = facetRequestGroup0.getBuildKey();
      assertEquals(true, facetRequestGroup0.isReverse());
      assertEquals(231, facetRequestGroup0.getOffset());
      assertEquals(231, facetRequestGroup0.getMinTotalCount());
      assertEquals("", facetRequestGroup0.getPrefix());
      assertEquals(231, facetRequestGroup0.getMaxTags());
      assertNotNull(string0);
      assertEquals("group(name=, order=index, locale=, fields(), hierarchical=true, delimiter=)", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      NamedComparator.ORDER namedComparator_ORDER0 = NamedComparator.ORDER.custom;
      FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup("", namedComparator_ORDER0, false, "", 20000, 20000, 20000, "", false, 20000, "", "");
      assertNotNull(facetRequestGroup0);
      
      facetRequestGroup0.isHierarchical();
      assertEquals("group(name=, order=custom, locale=, fields(), hierarchical=false, delimiter=)", facetRequestGroup0.getBuildKey());
      assertEquals("", facetRequestGroup0.getPrefix());
      assertEquals(20000, facetRequestGroup0.getOffset());
      assertEquals(20000, facetRequestGroup0.getMaxTags());
      assertEquals(false, facetRequestGroup0.isReverse());
      assertEquals(20000, facetRequestGroup0.getMinCount());
  }

  @Test
  public void test8()  throws Throwable  {
      NamedComparator.ORDER namedComparator_ORDER0 = NamedComparator.ORDER.custom;
      FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup("f6Qt|%A6<.mD  ZC", namedComparator_ORDER0, false, "f6Qt|%A6<.mD  ZC", (-1732), (-1732), (-1732), "f6Qt|%A6<.mD  ZC", false, (-1732), "f6Qt|%A6<.mD  ZC", "f6Qt|%A6<.mD  ZC");
      assertNotNull(facetRequestGroup0);
      
      int int0 = facetRequestGroup0.getLevels();
      assertEquals("group(name=f6Qt|%A6<.mD  ZC, order=custom, locale=f6Qt|%A6<.mD  ZC, fields(f6Qt|%A6<.mD  ZC), hierarchical=false, delimiter=f6Qt|%A6<.mD  ZC)", facetRequestGroup0.getBuildKey());
      assertEquals("f6Qt|%A6<.mD  ZC", facetRequestGroup0.getPrefix());
      assertEquals((-1732), int0);
      assertEquals(-1732, facetRequestGroup0.getOffset());
      assertEquals(-1732, facetRequestGroup0.getMaxTags());
      assertEquals(false, facetRequestGroup0.isReverse());
      assertEquals(-1732, facetRequestGroup0.getMinTotalCount());
  }

  @Test
  public void test9()  throws Throwable  {
      NamedComparator.ORDER namedComparator_ORDER0 = NamedComparator.ORDER.index;
      FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup("", namedComparator_ORDER0, true, "", 231, 231, 231, "", true, 231, "", "");
      assertNotNull(facetRequestGroup0);
      
      String string0 = facetRequestGroup0.getLocale();
      assertNotNull(string0);
      assertEquals("", facetRequestGroup0.getPrefix());
      assertEquals(true, facetRequestGroup0.isReverse());
      assertEquals("", string0);
      assertEquals(231, facetRequestGroup0.getMinCount());
      assertEquals(231, facetRequestGroup0.getOffset());
      assertEquals(231, facetRequestGroup0.getMaxTags());
      assertEquals("group(name=, order=index, locale=, fields(), hierarchical=true, delimiter=)", facetRequestGroup0.getBuildKey());
  }

  @Test
  public void test10()  throws Throwable  {
      NamedComparator.ORDER namedComparator_ORDER0 = NamedComparator.ORDER.locale;
      FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup((String) null, namedComparator_ORDER0, true, (String) null, 1395, 1395, 1395, (String) null, true, 1395, (String) null, (String) null);
      assertNotNull(facetRequestGroup0);
      
      String string0 = facetRequestGroup0.getDelimiter();
      assertEquals(1395, facetRequestGroup0.getMaxTags());
      assertNull(string0);
      assertEquals(1395, facetRequestGroup0.getOffset());
      assertEquals(true, facetRequestGroup0.isReverse());
      assertEquals(1395, facetRequestGroup0.getMinCount());
      assertEquals("group(name=null, order=locale, locale=null, fields(null), hierarchical=true, delimiter=null)", facetRequestGroup0.getBuildKey());
  }

  @Test
  public void test11()  throws Throwable  {
      NamedComparator.ORDER namedComparator_ORDER0 = NamedComparator.ORDER.locale;
      FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup("{vV4t", namedComparator_ORDER0, true, "{vV4t", 0, 0, 0, "{vV4t", true, 0, "{vV4t", "{vV4t");
      assertNotNull(facetRequestGroup0);
      
      boolean boolean0 = facetRequestGroup0.isReverse();
      assertEquals("{vV4t", facetRequestGroup0.getPrefix());
      assertEquals("group(name={vV4t, order=locale, locale={vV4t, fields({vV4t), hierarchical=true, delimiter={vV4t)", facetRequestGroup0.getBuildKey());
      assertEquals(0, facetRequestGroup0.getMaxTags());
      assertEquals(0, facetRequestGroup0.getOffset());
      assertEquals(true, boolean0);
      assertEquals(0, facetRequestGroup0.getMinTotalCount());
  }

  @Test
  public void test12()  throws Throwable  {
      NamedComparator.ORDER namedComparator_ORDER0 = NamedComparator.ORDER.custom;
      FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup("f6Qt|%A6<.mD  ZC", namedComparator_ORDER0, false, "f6Qt|%A6<.mD  ZC", (-1732), (-1732), (-1732), "f6Qt|%A6<.mD  ZC", false, (-1732), "f6Qt|%A6<.mD  ZC", "f6Qt|%A6<.mD  ZC");
      assertNotNull(facetRequestGroup0);
      
      String string0 = facetRequestGroup0.getStartPath();
      assertNotNull(string0);
      assertEquals("f6Qt|%A6<.mD  ZC", string0);
      assertEquals(false, facetRequestGroup0.isReverse());
      assertEquals(-1732, facetRequestGroup0.getOffset());
      assertEquals(-1732, facetRequestGroup0.getMaxTags());
      assertEquals("group(name=f6Qt|%A6<.mD  ZC, order=custom, locale=f6Qt|%A6<.mD  ZC, fields(f6Qt|%A6<.mD  ZC), hierarchical=false, delimiter=f6Qt|%A6<.mD  ZC)", facetRequestGroup0.getBuildKey());
      assertEquals("f6Qt|%A6<.mD  ZC", facetRequestGroup0.getPrefix());
      assertEquals(-1732, facetRequestGroup0.getMinCount());
  }

  @Test
  public void test13()  throws Throwable  {
      NamedComparator.ORDER namedComparator_ORDER0 = NamedComparator.ORDER.locale;
      FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup("{vV4t", namedComparator_ORDER0, true, "{vV4t", 0, 0, 0, "{vV4t", true, 0, "{vV4t", "{vV4t");
      assertNotNull(facetRequestGroup0);
      
      String string0 = facetRequestGroup0.getPrefix();
      assertEquals(0, facetRequestGroup0.getMaxTags());
      assertEquals("group(name={vV4t, order=locale, locale={vV4t, fields({vV4t), hierarchical=true, delimiter={vV4t)", facetRequestGroup0.getBuildKey());
      assertEquals(true, facetRequestGroup0.isReverse());
      assertEquals(0, facetRequestGroup0.getOffset());
      assertEquals("{vV4t", string0);
      assertEquals(0, facetRequestGroup0.getMinCount());
  }

  @Test
  public void test14()  throws Throwable  {
      NamedComparator.ORDER namedComparator_ORDER0 = NamedComparator.ORDER.locale;
      FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup("{vV4t", namedComparator_ORDER0, true, "{vV4t", 0, 0, 0, "{vV4t", true, 0, "{vV4t", "{vV4t");
      assertNotNull(facetRequestGroup0);
      
      ExposedRequest.Group exposedRequest_Group0 = facetRequestGroup0.getGroup();
      FacetRequestGroup facetRequestGroup1 = new FacetRequestGroup(exposedRequest_Group0, namedComparator_ORDER0, true, (String) null, 0, 0, 0, "{vV4t");
      assertNotNull(facetRequestGroup1);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter((Writer) null, writerConfig0, (String) null, true, (OutputStream) pipedOutputStream0);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) bufferingXmlWriter0, "{vV4t", writerConfig0);
      facetRequestGroup1.toXML((XMLStreamWriter) simpleNsStreamWriter0);
      assertEquals(41, bufferingXmlWriter0.getAbsOffset());
      assertEquals(42, bufferingXmlWriter0.getColumn());
  }

  @Test
  public void test15()  throws Throwable  {
      NamedComparator.ORDER namedComparator_ORDER0 = NamedComparator.ORDER.custom;
      FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup("", namedComparator_ORDER0, false, "", 20000, 20000, 20000, "", false, 20000, "", "");
      assertNotNull(facetRequestGroup0);
      
      StringWriter stringWriter0 = new StringWriter(20000);
      BadgerFishXMLStreamWriter badgerFishXMLStreamWriter0 = new BadgerFishXMLStreamWriter((Writer) stringWriter0);
      facetRequestGroup0.toXML((XMLStreamWriter) badgerFishXMLStreamWriter0);
      assertEquals(20000, facetRequestGroup0.getMinCount());
      assertEquals(20000, facetRequestGroup0.getMaxTags());
      assertEquals(20000, facetRequestGroup0.getOffset());
      assertEquals("group(name=, order=custom, locale=, fields(), hierarchical=false, delimiter=)", facetRequestGroup0.getBuildKey());
      assertEquals(false, facetRequestGroup0.isReverse());
      assertEquals("", facetRequestGroup0.getPrefix());
  }

  @Test
  public void test16()  throws Throwable  {
      NamedComparator.ORDER namedComparator_ORDER0 = NamedComparator.ORDER.index;
      FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup("", namedComparator_ORDER0, true, "", 231, 231, 231, "", true, 231, "", "");
      assertNotNull(facetRequestGroup0);
      
      SubtagsConstraints.SUBTAGS_ORDER subtagsConstraints_SUBTAGS_ORDER0 = facetRequestGroup0.getSubtagsOrder();
      assertEquals("", facetRequestGroup0.getPrefix());
      assertEquals(231, facetRequestGroup0.getOffset());
      assertEquals("group(name=, order=index, locale=, fields(), hierarchical=true, delimiter=)", facetRequestGroup0.getBuildKey());
      assertEquals(true, facetRequestGroup0.isReverse());
      assertEquals(231, facetRequestGroup0.getMaxTags());
      assertEquals(231, facetRequestGroup0.getMinCount());
      assertEquals(SubtagsConstraints.SUBTAGS_ORDER.base, subtagsConstraints_SUBTAGS_ORDER0);
  }

  @Test
  public void test17()  throws Throwable  {
      NamedComparator.ORDER namedComparator_ORDER0 = NamedComparator.ORDER.index;
      FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup("", namedComparator_ORDER0, true, "", 231, 231, 231, "", true, 231, "", "");
      assertNotNull(facetRequestGroup0);
      
      ExposedRequest.Group exposedRequest_Group0 = facetRequestGroup0.getGroup();
      NamedComparator.ORDER namedComparator_ORDER1 = NamedComparator.ORDER.count;
      FacetRequestGroup facetRequestGroup1 = new FacetRequestGroup(exposedRequest_Group0, namedComparator_ORDER1, true, "", 231, 231, 231, "");
      assertNotNull(facetRequestGroup1);
      
      SubtagsConstraints.SUBTAGS_ORDER subtagsConstraints_SUBTAGS_ORDER0 = facetRequestGroup1.getSubtagsOrder();
      assertEquals("", facetRequestGroup1.getLocale());
      assertEquals(true, facetRequestGroup1.isReverse());
      assertEquals(1, facetRequestGroup1.getLevels());
      assertEquals(231, facetRequestGroup0.getMinCount());
      assertEquals(231, facetRequestGroup1.getOffset());
      assertEquals(231, facetRequestGroup1.getMaxTags());
      assertEquals(SubtagsConstraints.SUBTAGS_ORDER.count, subtagsConstraints_SUBTAGS_ORDER0);
      assertEquals("", facetRequestGroup0.getPrefix());
      assertEquals(231, facetRequestGroup1.getMinCount());
      assertEquals("group(name=, order=index, locale=, fields(), hierarchical=true, delimiter=)", facetRequestGroup0.getBuildKey());
      assertEquals(true, facetRequestGroup0.isReverse());
      assertEquals(231, facetRequestGroup0.getOffset());
      assertEquals(231, facetRequestGroup0.getMaxTags());
  }

  @Test
  public void test18()  throws Throwable  {
      NamedComparator.ORDER namedComparator_ORDER0 = NamedComparator.ORDER.locale;
      FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup("{vV4t", namedComparator_ORDER0, true, "{vV4t", 0, 0, 0, "{vV4t", true, 0, "{vV4t", "{vV4t");
      assertNotNull(facetRequestGroup0);
      
      FacetRequestGroup facetRequestGroup1 = (FacetRequestGroup)facetRequestGroup0.getDeeperLevel();
      assertNotNull(facetRequestGroup1);
      assertEquals(0, facetRequestGroup0.getOffset());
      assertEquals("{vV4t", facetRequestGroup0.getPrefix());
      assertEquals("group(name={vV4t, order=locale, locale={vV4t, fields({vV4t), hierarchical=true, delimiter={vV4t)", facetRequestGroup0.getBuildKey());
      assertEquals(0, facetRequestGroup0.getMaxTags());
      assertEquals(0, facetRequestGroup0.getMinCount());
      assertEquals(true, facetRequestGroup0.isReverse());
      assertEquals(true, facetRequestGroup1.isReverse());
  }

  @Test
  public void test19()  throws Throwable  {
      NamedComparator.ORDER namedComparator_ORDER0 = NamedComparator.ORDER.custom;
      FacetRequestGroup facetRequestGroup0 = new FacetRequestGroup("f6Qt|%A6<.mD  ZC", namedComparator_ORDER0, true, "f6Qt|%A6<.mD  ZC", (-256), (-256), (-256), "f6Qt|%A6<.mD  ZC", true, (-256), "f6Qt|%A6<.mD  ZC", "f6Qt|%A6<.mD  ZC");
      assertNotNull(facetRequestGroup0);
      
      ExposedRequest.Group exposedRequest_Group0 = facetRequestGroup0.getGroup();
      List<String> list0 = exposedRequest_Group0.getFieldNames();
      assertNotNull(list0);
      
      Locale locale0 = Locale.GERMAN;
      NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator(locale0);
      ExposedRequest.Group exposedRequest_Group1 = FacetRequestGroup.createGroup("f6Qt|%A6<.mD  ZC", list0, (NamedComparator) namedCollatorComparator0);
      assertEquals(-256, facetRequestGroup0.getMaxTags());
      assertEquals(true, facetRequestGroup0.isReverse());
      assertEquals(-256, facetRequestGroup0.getOffset());
      assertEquals("group(name=f6Qt|%A6<.mD  ZC, order=custom, locale=f6Qt|%A6<.mD  ZC, fields(f6Qt|%A6<.mD  ZC), hierarchical=true, delimiter=f6Qt|%A6<.mD  ZC)", facetRequestGroup0.getBuildKey());
      assertEquals(-256, facetRequestGroup0.getMinCount());
      assertNotNull(exposedRequest_Group1);
      assertEquals(false, exposedRequest_Group1.isConcat());
      assertEquals("f6Qt|%A6<.mD  ZC", exposedRequest_Group1.getName());
  }
}
