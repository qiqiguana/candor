/*
 * This file was automatically generated by EvoSuite
 */

package org.apache.lucene.util.packed;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import org.apache.lucene.store.DataOutput;
import org.apache.lucene.store.RAMOutputStream;
import org.apache.lucene.util.packed.GrowingMutable;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class GrowingMutableEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      GrowingMutable growingMutable0 = new GrowingMutable();
      int int0 = growingMutable0.getIndexMin();
      assertEquals(0, int0);
      assertEquals(0L, growingMutable0.getValueMin());
      assertEquals(0L, growingMutable0.getGrowTime());
      assertEquals(0, growingMutable0.size());
      assertEquals(0, growingMutable0.getIndexMax());
      assertEquals(16L, growingMutable0.ramBytesUsed());
      assertEquals(0L, growingMutable0.getValueMax());
      assertEquals(1, growingMutable0.getBitsPerValue());
  }

  @Test
  public void test1()  throws Throwable  {
      GrowingMutable growingMutable0 = new GrowingMutable();
      boolean boolean0 = growingMutable0.hasArray();
      assertEquals(1, growingMutable0.getBitsPerValue());
      assertEquals(0, growingMutable0.size());
      assertEquals(false, boolean0);
      assertEquals(0L, growingMutable0.getGrowTime());
      assertEquals(0L, growingMutable0.getValueMax());
      assertEquals(0, growingMutable0.getIndexMin());
      assertEquals(0L, growingMutable0.getValueMin());
      assertEquals(16L, growingMutable0.ramBytesUsed());
      assertEquals(0, growingMutable0.getIndexMax());
  }

  @Test
  public void test2()  throws Throwable  {
      GrowingMutable growingMutable0 = new GrowingMutable();
      long long0 = growingMutable0.getGrowTime();
      assertEquals(0, growingMutable0.getIndexMax());
      assertEquals(0, growingMutable0.size());
      assertEquals(0L, growingMutable0.getValueMin());
      assertEquals(1, growingMutable0.getBitsPerValue());
      assertEquals(0L, growingMutable0.getValueMax());
      assertEquals(16L, growingMutable0.ramBytesUsed());
      assertEquals(0L, long0);
      assertEquals(0, growingMutable0.getIndexMin());
  }

  @Test
  public void test3()  throws Throwable  {
      GrowingMutable growingMutable0 = new GrowingMutable();
      growingMutable0.fill(0, 0, 0);
      assertEquals(0, growingMutable0.getIndexMin());
      assertEquals(0, growingMutable0.getIndexMax());
      assertEquals(0L, growingMutable0.getValueMax());
      assertEquals(1, growingMutable0.getBitsPerValue());
      assertEquals(0L, growingMutable0.getValueMin());
      assertEquals(16L, growingMutable0.ramBytesUsed());
      assertEquals(0, growingMutable0.size());
      assertEquals(0L, growingMutable0.getGrowTime());
  }

  @Test
  public void test4()  throws Throwable  {
      GrowingMutable growingMutable0 = new GrowingMutable();
      growingMutable0.clear();
      assertEquals(0L, growingMutable0.getGrowTime());
      assertEquals(0L, growingMutable0.getValueMax());
      assertEquals(0, growingMutable0.size());
      assertEquals(1, growingMutable0.getBitsPerValue());
      assertEquals(0, growingMutable0.getIndexMin());
      assertEquals(0, growingMutable0.getIndexMax());
      assertEquals(0L, growingMutable0.getValueMin());
      assertEquals(16L, growingMutable0.ramBytesUsed());
  }

  @Test
  public void test5()  throws Throwable  {
      GrowingMutable growingMutable0 = new GrowingMutable((-1230), (-1230), (long) (-1230), (long) (-1230), true);
      assertNotNull(growingMutable0);
      
      long[] longArray0 = new long[6];
      int int0 = growingMutable0.set(0, longArray0, (-1230), 0);
      assertEquals(1, growingMutable0.getBitsPerValue());
      assertEquals(0L, growingMutable0.getGrowTime());
      assertEquals(-1230, growingMutable0.getIndexMax());
      assertEquals(24L, growingMutable0.ramBytesUsed());
      assertEquals(0, int0);
  }

  @Test
  public void test6()  throws Throwable  {
      GrowingMutable growingMutable0 = new GrowingMutable();
      RAMOutputStream rAMOutputStream0 = new RAMOutputStream();
      growingMutable0.save((DataOutput) rAMOutputStream0);
      assertEquals(22L, rAMOutputStream0.getFilePointer());
      assertEquals(0, growingMutable0.getIndexMax());
  }

  @Test
  public void test7()  throws Throwable  {
      GrowingMutable growingMutable0 = new GrowingMutable();
      long long0 = growingMutable0.getValueMin();
      assertEquals(0, growingMutable0.size());
      assertEquals(0L, growingMutable0.getGrowTime());
      assertEquals(0L, long0);
      assertEquals(0, growingMutable0.getIndexMin());
      assertEquals(16L, growingMutable0.ramBytesUsed());
      assertEquals(0, growingMutable0.getIndexMax());
      assertEquals(0L, growingMutable0.getValueMax());
      assertEquals(1, growingMutable0.getBitsPerValue());
  }

  @Test
  public void test8()  throws Throwable  {
      GrowingMutable growingMutable0 = new GrowingMutable((-1230), (-1230), (long) (-1230), (long) (-1230), true);
      assertNotNull(growingMutable0);
      
      growingMutable0.set(134, 0);
      assertEquals(2272L, growingMutable0.ramBytesUsed());
      assertEquals(245775L, growingMutable0.getGrowTime());
  }

  @Test
  public void test9()  throws Throwable  {
      GrowingMutable growingMutable0 = new GrowingMutable();
      // Undeclared exception!
      try {
        growingMutable0.getArray();
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * No direct array in GrowingMutable
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      GrowingMutable growingMutable0 = new GrowingMutable();
      long long0 = growingMutable0.getValueMax();
      assertEquals(0, growingMutable0.getIndexMax());
      assertEquals(0L, growingMutable0.getGrowTime());
      assertEquals(16L, growingMutable0.ramBytesUsed());
      assertEquals(0, growingMutable0.getIndexMin());
      assertEquals(0, growingMutable0.size());
      assertEquals(0L, growingMutable0.getValueMin());
      assertEquals(0L, long0);
      assertEquals(1, growingMutable0.getBitsPerValue());
  }

  @Test
  public void test11()  throws Throwable  {
      GrowingMutable growingMutable0 = new GrowingMutable();
      int int0 = growingMutable0.getIndexMax();
      assertEquals(0L, growingMutable0.getGrowTime());
      assertEquals(0L, growingMutable0.getValueMin());
      assertEquals(0, int0);
      assertEquals(1, growingMutable0.getBitsPerValue());
      assertEquals(16L, growingMutable0.ramBytesUsed());
      assertEquals(0, growingMutable0.size());
      assertEquals(0L, growingMutable0.getValueMax());
      assertEquals(0, growingMutable0.getIndexMin());
  }

  @Test
  public void test12()  throws Throwable  {
      GrowingMutable growingMutable0 = new GrowingMutable();
      long long0 = growingMutable0.ramBytesUsed();
      assertEquals(16L, long0);
      assertEquals(0, growingMutable0.getIndexMax());
      assertEquals(1, growingMutable0.getBitsPerValue());
      assertEquals(0L, growingMutable0.getValueMin());
      assertEquals(0, growingMutable0.getIndexMin());
      assertEquals(0, growingMutable0.size());
      assertEquals(0L, growingMutable0.getGrowTime());
      assertEquals(0L, growingMutable0.getValueMax());
  }

  @Test
  public void test13()  throws Throwable  {
      GrowingMutable growingMutable0 = new GrowingMutable(0, 0, (long) 0, (long) 0, true);
      assertNotNull(growingMutable0);
      
      long[] longArray0 = new long[1];
      int int0 = growingMutable0.get(0, longArray0, 0, (-1699));
      assertEquals(0L, growingMutable0.getGrowTime());
      assertEquals((-35), int0);
      assertEquals(24L, growingMutable0.ramBytesUsed());
      assertEquals(1, growingMutable0.size());
      assertEquals(1, growingMutable0.getBitsPerValue());
  }

  @Test
  public void test14()  throws Throwable  {
      GrowingMutable growingMutable0 = new GrowingMutable();
      int int0 = growingMutable0.getBitsPerValue();
      assertEquals(0, growingMutable0.getIndexMax());
      assertEquals(0L, growingMutable0.getGrowTime());
      assertEquals(0, growingMutable0.size());
      assertEquals(0, growingMutable0.getIndexMin());
      assertEquals(16L, growingMutable0.ramBytesUsed());
      assertEquals(1, int0);
      assertEquals(0L, growingMutable0.getValueMax());
      assertEquals(0L, growingMutable0.getValueMin());
  }

  @Test
  public void test15()  throws Throwable  {
      GrowingMutable growingMutable0 = null;
      try {
        growingMutable0 = new GrowingMutable((-229), (-1461), 0L, (-1L), false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * indexMin(-229) must be <= indexMax(-1461)
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      GrowingMutable growingMutable0 = null;
      try {
        growingMutable0 = new GrowingMutable((-1918), 241, (long) 241, (long) (-1918), true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * valueMin(241) must be <= valueMax(-1918)
         */
      }
  }

  @Test
  public void test17()  throws Throwable  {
      GrowingMutable growingMutable0 = new GrowingMutable(0, 0, (long) 0, (long) 0, true);
      growingMutable0.set((-1699), 9223372036854775807L);
      assertEquals(-2039, growingMutable0.getIndexMin());
      assertEquals(342419L, growingMutable0.getGrowTime());
  }

  @Test
  public void test18()  throws Throwable  {
      GrowingMutable growingMutable0 = new GrowingMutable(0, 1741, (-171L), 1333L, true);
      assertNotNull(growingMutable0);
      
      growingMutable0.set(0, 4294967295L);
      assertEquals(4294967295L, growingMutable0.getValueMax());
      assertEquals(64531343L, growingMutable0.getGrowTime());
  }

  @Test
  public void test19()  throws Throwable  {
      GrowingMutable growingMutable0 = new GrowingMutable();
      growingMutable0.set(0, (-1446L));
      String string0 = growingMutable0.toString();
      assertEquals((-1446L), growingMutable0.getValueMax());
      assertEquals("GrowingMutable(i(0)=-1446)", string0);
  }

  @Test
  public void test20()  throws Throwable  {
      GrowingMutable growingMutable0 = new GrowingMutable();
      growingMutable0.set(1664, 1664);
      String string0 = growingMutable0.toString();
      assertEquals(1664, growingMutable0.getIndexMin());
      assertEquals("GrowingMutable(, i(1664)=1664)", string0);
  }

  @Test
  public void test21()  throws Throwable  {
      GrowingMutable growingMutable0 = new GrowingMutable();
      growingMutable0.set(127, 0L);
      growingMutable0.set((-2013), (-1917L));
      String string0 = growingMutable0.toString();
      assertEquals((-1917L), growingMutable0.getValueMin());
      assertEquals("GrowingMutable(i(-2441)=-1917i(-2440)=-1917i(-2439)=-1917i(-2438)=-1917i(-2437)=-1917i(-2436)=-1917i(-2435)=-1917i(-2434)=-1917i(-2433)=-1917i(-2432)=-1917, ...)", string0);
  }
}
