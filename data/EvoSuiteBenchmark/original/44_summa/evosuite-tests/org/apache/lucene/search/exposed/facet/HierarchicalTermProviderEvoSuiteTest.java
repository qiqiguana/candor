/*
 * This file was automatically generated by EvoSuite
 */

package org.apache.lucene.search.exposed.facet;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import java.util.List;
import java.util.Locale;
import java.util.Stack;
import org.apache.lucene.search.exposed.CachedTermProvider;
import org.apache.lucene.search.exposed.ExposedRequest;
import org.apache.lucene.search.exposed.GroupTermProvider;
import org.apache.lucene.search.exposed.TermProvider;
import org.apache.lucene.search.exposed.compare.NamedCollatorComparator;
import org.apache.lucene.search.exposed.compare.NamedComparator;
import org.apache.lucene.search.exposed.compare.NamedNaturalComparator;
import org.apache.lucene.search.exposed.facet.HierarchicalTermProvider;
import org.apache.lucene.util.BytesRef;
import org.apache.lucene.util.packed.PackedInts;
import org.codehaus.jettison.util.FastStack;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class HierarchicalTermProviderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Stack<TermProvider> stack0 = new Stack<TermProvider>();
      Stack<ExposedRequest.Field> stack1 = new Stack<ExposedRequest.Field>();
      Locale locale0 = Locale.TAIWAN;
      NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator(locale0);
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group("*r\"T6$w;_7h:X%6", (List<ExposedRequest.Field>) stack1, (NamedComparator) namedCollatorComparator0);
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(16, (List<TermProvider>) stack0, exposedRequest_Group0, false);
      HierarchicalTermProvider hierarchicalTermProvider0 = new HierarchicalTermProvider((TermProvider) groupTermProvider0, 16, false);
      hierarchicalTermProvider0.transitiveReleaseCaches(0, false);
      assertEquals("Group *r\"T6$w;_7h:X%6", hierarchicalTermProvider0.getDesignation());
  }

  @Test
  public void test1()  throws Throwable  {
      Stack<TermProvider> stack0 = new Stack<TermProvider>();
      Stack<ExposedRequest.Field> stack1 = new Stack<ExposedRequest.Field>();
      Locale locale0 = Locale.TAIWAN;
      NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator(locale0);
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group("TN&Pl_e8f", (List<ExposedRequest.Field>) stack1, (NamedComparator) namedCollatorComparator0);
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(0, (List<TermProvider>) stack0, exposedRequest_Group0, true);
      HierarchicalTermProvider hierarchicalTermProvider0 = new HierarchicalTermProvider((TermProvider) groupTermProvider0, 0, true);
      long long0 = hierarchicalTermProvider0.getUniqueTermCount();
      assertEquals(0L, long0);
  }

  @Test
  public void test2()  throws Throwable  {
      Stack<TermProvider> stack0 = new Stack<TermProvider>();
      Stack<ExposedRequest.Field> stack1 = new Stack<ExposedRequest.Field>();
      Locale locale0 = Locale.TAIWAN;
      NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator(locale0);
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group("TN&Pl_e8f", (List<ExposedRequest.Field>) stack1, (NamedComparator) namedCollatorComparator0);
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(0, (List<TermProvider>) stack0, exposedRequest_Group0, true);
      HierarchicalTermProvider hierarchicalTermProvider0 = new HierarchicalTermProvider((TermProvider) groupTermProvider0, 0, true);
      hierarchicalTermProvider0.getDocToSingleIndirect();
      assertEquals("GroupTermProvider(TN&Pl_e8f, #subProviders=0, order.length=0 mem=0 bytes, TermProviderImpl(Group TN&Pl_e8f, docToSingle.length=1 mem=0 bytes))", groupTermProvider0.toString());
      assertEquals("HierarchicalTermProvider(source=GroupTermProvider(TN&Pl_e8f, #subProviders=0, order.length=0 mem=0 bytes, TermProviderImpl(Group TN&Pl_e8f, docToSingle.length=1 mem=0 bytes)))", hierarchicalTermProvider0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      Stack<TermProvider> stack0 = new Stack<TermProvider>();
      Stack<ExposedRequest.Field> stack1 = new Stack<ExposedRequest.Field>();
      Locale locale0 = Locale.TAIWAN;
      NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator(locale0);
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group("TN&Pl_e8f", (List<ExposedRequest.Field>) stack1, (NamedComparator) namedCollatorComparator0);
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(0, (List<TermProvider>) stack0, exposedRequest_Group0, true);
      HierarchicalTermProvider hierarchicalTermProvider0 = new HierarchicalTermProvider((TermProvider) groupTermProvider0, 0, true);
      long long0 = hierarchicalTermProvider0.getMaxDoc();
      assertEquals(0L, long0);
  }

  @Test
  public void test4()  throws Throwable  {
      Stack<TermProvider> stack0 = new Stack<TermProvider>();
      Stack<ExposedRequest.Field> stack1 = new Stack<ExposedRequest.Field>();
      Locale locale0 = Locale.TAIWAN;
      NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator(locale0);
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group("*r\"T6$w;_7h:X%6", (List<ExposedRequest.Field>) stack1, (NamedComparator) namedCollatorComparator0);
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(16, (List<TermProvider>) stack0, exposedRequest_Group0, false);
      HierarchicalTermProvider hierarchicalTermProvider0 = new HierarchicalTermProvider((TermProvider) groupTermProvider0, 16, false);
      int int0 = hierarchicalTermProvider0.getPreviousMatchingLevel(16);
      assertEquals(0, int0);
  }

  @Test
  public void test5()  throws Throwable  {
      Stack<TermProvider> stack0 = new Stack<TermProvider>();
      Stack<ExposedRequest.Field> stack1 = new Stack<ExposedRequest.Field>();
      Locale locale0 = Locale.TAIWAN;
      NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator(locale0);
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group("N&Pe?f", (List<ExposedRequest.Field>) stack1, (NamedComparator) namedCollatorComparator0);
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(17, (List<TermProvider>) stack0, exposedRequest_Group0, false);
      HierarchicalTermProvider hierarchicalTermProvider0 = new HierarchicalTermProvider((TermProvider) groupTermProvider0, 17, true);
      PackedInts.Reader packedInts_Reader0 = hierarchicalTermProvider0.getOrderedOrdinals();
      assertEquals(0, packedInts_Reader0.size());
  }

  @Test
  public void test6()  throws Throwable  {
      Stack<TermProvider> stack0 = new Stack<TermProvider>();
      FastStack fastStack0 = new FastStack();
      NamedNaturalComparator namedNaturalComparator0 = new NamedNaturalComparator();
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group("&j", (List<ExposedRequest.Field>) fastStack0, (NamedComparator) namedNaturalComparator0, "&j");
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(0, (List<TermProvider>) stack0, exposedRequest_Group0, true);
      HierarchicalTermProvider hierarchicalTermProvider0 = new HierarchicalTermProvider((TermProvider) groupTermProvider0, "&j");
      // Undeclared exception!
      try {
        hierarchicalTermProvider0.getOrderedTerm((long) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 0
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      Stack<TermProvider> stack0 = new Stack<TermProvider>();
      FastStack fastStack0 = new FastStack();
      NamedNaturalComparator namedNaturalComparator0 = new NamedNaturalComparator();
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group("#l", (List<ExposedRequest.Field>) fastStack0, (NamedComparator) namedNaturalComparator0, "#l");
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(0, (List<TermProvider>) stack0, exposedRequest_Group0, false);
      HierarchicalTermProvider hierarchicalTermProvider0 = new HierarchicalTermProvider((TermProvider) groupTermProvider0, "#l");
      int int0 = hierarchicalTermProvider0.getReaderHash();
      assertEquals(0, int0);
  }

  @Test
  public void test8()  throws Throwable  {
      Stack<TermProvider> stack0 = new Stack<TermProvider>();
      Stack<ExposedRequest.Field> stack1 = new Stack<ExposedRequest.Field>();
      Locale locale0 = Locale.TAIWAN;
      NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator(locale0);
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group("TN&Pe?8f", (List<ExposedRequest.Field>) stack1, (NamedComparator) namedCollatorComparator0);
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(15, (List<TermProvider>) stack0, exposedRequest_Group0, false);
      HierarchicalTermProvider hierarchicalTermProvider0 = new HierarchicalTermProvider((TermProvider) groupTermProvider0, "TN&Pe?8f");
      // Undeclared exception!
      try {
        hierarchicalTermProvider0.getTerm((long) 15);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * The term ordinal 15 is above the maximum -1
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      Stack<TermProvider> stack0 = new Stack<TermProvider>();
      FastStack fastStack0 = new FastStack();
      NamedNaturalComparator namedNaturalComparator0 = new NamedNaturalComparator();
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group("#l", (List<ExposedRequest.Field>) fastStack0, (NamedComparator) namedNaturalComparator0, "#l");
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(0, (List<TermProvider>) stack0, exposedRequest_Group0, false);
      HierarchicalTermProvider hierarchicalTermProvider0 = new HierarchicalTermProvider((TermProvider) groupTermProvider0, "#l");
      stack0.add((TermProvider) hierarchicalTermProvider0);
      GroupTermProvider groupTermProvider1 = null;
      try {
        groupTermProvider1 = new GroupTermProvider(0, (List<TermProvider>) stack0, exposedRequest_Group0, false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * The GrouptermProvider currently only supports providers that are capable of stating their docIDBase. Received HierarchicalTermProvider(source=GroupTermProvider(#l, #subProviders=1, no order cached, TermProviderImpl(Group #l, no docToSingle cached)))
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      Stack<TermProvider> stack0 = new Stack<TermProvider>();
      Stack<ExposedRequest.Field> stack1 = new Stack<ExposedRequest.Field>();
      Locale locale0 = Locale.TAIWAN;
      NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator(locale0);
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group("TN&Pl_e8f", (List<ExposedRequest.Field>) stack1, (NamedComparator) namedCollatorComparator0);
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(0, (List<TermProvider>) stack0, exposedRequest_Group0, true);
      HierarchicalTermProvider hierarchicalTermProvider0 = new HierarchicalTermProvider((TermProvider) groupTermProvider0, 0, true);
      CachedTermProvider cachedTermProvider0 = new CachedTermProvider((TermProvider) hierarchicalTermProvider0, 0, 0);
      assertEquals(false, cachedTermProvider0.isOnlyReadAheadIfSpace());
  }

  @Test
  public void test11()  throws Throwable  {
      Stack<TermProvider> stack0 = new Stack<TermProvider>();
      Stack<ExposedRequest.Field> stack1 = new Stack<ExposedRequest.Field>();
      Locale locale0 = Locale.TAIWAN;
      NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator(locale0);
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group("f2&Pe?8f", (List<ExposedRequest.Field>) stack1, (NamedComparator) namedCollatorComparator0);
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(0, (List<TermProvider>) stack0, exposedRequest_Group0, false);
      HierarchicalTermProvider hierarchicalTermProvider0 = new HierarchicalTermProvider((TermProvider) groupTermProvider0, 0, false);
      // Undeclared exception!
      try {
        hierarchicalTermProvider0.getReader();
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Cannot request a reader from a collection of readers
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      Stack<TermProvider> stack0 = new Stack<TermProvider>();
      FastStack fastStack0 = new FastStack();
      NamedNaturalComparator namedNaturalComparator0 = new NamedNaturalComparator();
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group("&j", (List<ExposedRequest.Field>) fastStack0, (NamedComparator) namedNaturalComparator0, "&j");
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(0, (List<TermProvider>) stack0, exposedRequest_Group0, true);
      HierarchicalTermProvider hierarchicalTermProvider0 = new HierarchicalTermProvider((TermProvider) groupTermProvider0, "&j");
      assertNotNull(hierarchicalTermProvider0);
      
      int int0 = hierarchicalTermProvider0.getLevel(0);
      assertEquals(0, int0);
  }

  @Test
  public void test13()  throws Throwable  {
      Stack<TermProvider> stack0 = new Stack<TermProvider>();
      Stack<ExposedRequest.Field> stack1 = new Stack<ExposedRequest.Field>();
      Locale locale0 = Locale.TAIWAN;
      NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator(locale0);
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group("*r\"T6$w;_7h:X%6", (List<ExposedRequest.Field>) stack1, (NamedComparator) namedCollatorComparator0);
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(16, (List<TermProvider>) stack0, exposedRequest_Group0, false);
      HierarchicalTermProvider hierarchicalTermProvider0 = new HierarchicalTermProvider((TermProvider) groupTermProvider0, 16, false);
      int int0 = hierarchicalTermProvider0.getRecursiveHash();
      assertEquals(0, int0);
  }

  @Test
  public void test14()  throws Throwable  {
      Stack<TermProvider> stack0 = new Stack<TermProvider>();
      Stack<ExposedRequest.Field> stack1 = new Stack<ExposedRequest.Field>();
      Locale locale0 = Locale.TAIWAN;
      NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator(locale0);
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group("*r\"T6$w;_7h:X%6", (List<ExposedRequest.Field>) stack1, (NamedComparator) namedCollatorComparator0);
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(16, (List<TermProvider>) stack0, exposedRequest_Group0, false);
      HierarchicalTermProvider hierarchicalTermProvider0 = new HierarchicalTermProvider((TermProvider) groupTermProvider0, 16, false);
      // Undeclared exception!
      try {
        hierarchicalTermProvider0.getField((long) 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * The term ordinal 0 is above the maximum -1
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      Stack<TermProvider> stack0 = new Stack<TermProvider>();
      Stack<ExposedRequest.Field> stack1 = new Stack<ExposedRequest.Field>();
      Locale locale0 = Locale.TAIWAN;
      NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator(locale0);
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group("f2&P:e?8f", (List<ExposedRequest.Field>) stack1, (NamedComparator) namedCollatorComparator0);
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(3, (List<TermProvider>) stack0, exposedRequest_Group0, false);
      HierarchicalTermProvider hierarchicalTermProvider0 = new HierarchicalTermProvider((TermProvider) groupTermProvider0, 3, false);
      stack0.add((TermProvider) hierarchicalTermProvider0);
      BytesRef bytesRef0 = new BytesRef();
      // Undeclared exception!
      try {
        hierarchicalTermProvider0.getNearestTermIndirect(bytesRef0);
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }

  @Test
  public void test16()  throws Throwable  {
      Stack<TermProvider> stack0 = new Stack<TermProvider>();
      Stack<ExposedRequest.Field> stack1 = new Stack<ExposedRequest.Field>();
      Locale locale0 = Locale.TAIWAN;
      NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator(locale0);
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group("TN&Pl_e8f", (List<ExposedRequest.Field>) stack1, (NamedComparator) namedCollatorComparator0);
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(0, (List<TermProvider>) stack0, exposedRequest_Group0, true);
      HierarchicalTermProvider hierarchicalTermProvider0 = new HierarchicalTermProvider((TermProvider) groupTermProvider0, 0, true);
      NamedCollatorComparator namedCollatorComparator1 = (NamedCollatorComparator)hierarchicalTermProvider0.getComparator();
      assertSame(namedCollatorComparator0, namedCollatorComparator1);
  }

  @Test
  public void test17()  throws Throwable  {
      Stack<TermProvider> stack0 = new Stack<TermProvider>();
      Stack<ExposedRequest.Field> stack1 = new Stack<ExposedRequest.Field>();
      Locale locale0 = Locale.TAIWAN;
      NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator(locale0);
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group("N&Pe?f", (List<ExposedRequest.Field>) stack1, (NamedComparator) namedCollatorComparator0);
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(17, (List<TermProvider>) stack0, exposedRequest_Group0, false);
      HierarchicalTermProvider hierarchicalTermProvider0 = new HierarchicalTermProvider((TermProvider) groupTermProvider0, 17, true);
      assertNotNull(hierarchicalTermProvider0);
      
      BytesRef bytesRef0 = new BytesRef(17);
      int int0 = hierarchicalTermProvider0.getNearestTermIndirect(bytesRef0, 0, 0);
      assertEquals(0, int0);
  }

  @Test
  public void test18()  throws Throwable  {
      Stack<TermProvider> stack0 = new Stack<TermProvider>();
      FastStack fastStack0 = new FastStack();
      NamedNaturalComparator namedNaturalComparator0 = new NamedNaturalComparator();
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group("#l", (List<ExposedRequest.Field>) fastStack0, (NamedComparator) namedNaturalComparator0, "#l");
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(0, (List<TermProvider>) stack0, exposedRequest_Group0, false);
      HierarchicalTermProvider hierarchicalTermProvider0 = new HierarchicalTermProvider((TermProvider) groupTermProvider0, "#l");
      hierarchicalTermProvider0.setDocIDBase(0);
      assertEquals(0L, hierarchicalTermProvider0.getOrdinalTermCount());
  }

  @Test
  public void test19()  throws Throwable  {
      Stack<TermProvider> stack0 = new Stack<TermProvider>();
      Stack<ExposedRequest.Field> stack1 = new Stack<ExposedRequest.Field>();
      Locale locale0 = Locale.TAIWAN;
      NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator(locale0);
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group("TN&Pl_e8f", (List<ExposedRequest.Field>) stack1, (NamedComparator) namedCollatorComparator0);
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(0, (List<TermProvider>) stack0, exposedRequest_Group0, true);
      HierarchicalTermProvider hierarchicalTermProvider0 = new HierarchicalTermProvider((TermProvider) groupTermProvider0, 0, true);
      PackedInts.Reader packedInts_Reader0 = hierarchicalTermProvider0.getOrderedOrdinals((TermProvider.OrderedDecorator) null);
      assertEquals(0, packedInts_Reader0.size());
  }

  @Test
  public void test20()  throws Throwable  {
      Stack<TermProvider> stack0 = new Stack<TermProvider>();
      FastStack fastStack0 = new FastStack();
      NamedNaturalComparator namedNaturalComparator0 = new NamedNaturalComparator();
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group("&j", (List<ExposedRequest.Field>) fastStack0, (NamedComparator) namedNaturalComparator0, "&j");
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(0, (List<TermProvider>) stack0, exposedRequest_Group0, true);
      HierarchicalTermProvider hierarchicalTermProvider0 = new HierarchicalTermProvider((TermProvider) groupTermProvider0, "&j");
      String string0 = hierarchicalTermProvider0.getDesignation();
      assertEquals("Group &j", string0);
  }

  @Test
  public void test21()  throws Throwable  {
      HierarchicalTermProvider hierarchicalTermProvider0 = null;
      try {
        hierarchicalTermProvider0 = new HierarchicalTermProvider((TermProvider) null, (-208), false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * The splitByte must be between 0 and 255, inclusive. It was -208
         */
      }
  }

  @Test
  public void test22()  throws Throwable  {
      HierarchicalTermProvider hierarchicalTermProvider0 = null;
      try {
        hierarchicalTermProvider0 = new HierarchicalTermProvider((TermProvider) null, 1326, false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * The splitByte must be between 0 and 255, inclusive. It was 1326
         */
      }
  }

  @Test
  public void test23()  throws Throwable  {
      Stack<TermProvider> stack0 = new Stack<TermProvider>();
      Stack<ExposedRequest.Field> stack1 = new Stack<ExposedRequest.Field>();
      Locale locale0 = Locale.TAIWAN;
      NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator(locale0);
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group("f2&P:e?8f", (List<ExposedRequest.Field>) stack1, (NamedComparator) namedCollatorComparator0);
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(3, (List<TermProvider>) stack0, exposedRequest_Group0, false);
      HierarchicalTermProvider hierarchicalTermProvider0 = new HierarchicalTermProvider((TermProvider) groupTermProvider0, 3, false);
      assertNotNull(hierarchicalTermProvider0);
      
      boolean boolean0 = hierarchicalTermProvider0.matchLevel(3, 3);
      assertEquals(false, boolean0);
  }

  @Test
  public void test24()  throws Throwable  {
      Stack<TermProvider> stack0 = new Stack<TermProvider>();
      Stack<ExposedRequest.Field> stack1 = new Stack<ExposedRequest.Field>();
      Locale locale0 = Locale.TAIWAN;
      NamedCollatorComparator namedCollatorComparator0 = new NamedCollatorComparator(locale0);
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group("", (List<ExposedRequest.Field>) stack1, (NamedComparator) namedCollatorComparator0);
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(0, (List<TermProvider>) stack0, exposedRequest_Group0, false);
      HierarchicalTermProvider hierarchicalTermProvider0 = new HierarchicalTermProvider((TermProvider) groupTermProvider0, 0, false);
      assertNotNull(hierarchicalTermProvider0);
      
      boolean boolean0 = hierarchicalTermProvider0.matchLevel(0, 0);
      assertEquals(true, boolean0);
  }
}
