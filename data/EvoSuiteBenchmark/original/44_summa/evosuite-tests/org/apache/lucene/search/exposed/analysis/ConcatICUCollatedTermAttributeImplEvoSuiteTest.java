/*
 * This file was automatically generated by EvoSuite
 */

package org.apache.lucene.search.exposed.analysis;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.ibm.icu.text.Collator;
import com.ibm.icu.text.RuleBasedCollator;
import java.io.IOException;
import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
import org.apache.lucene.search.exposed.analysis.ConcatICUCollatedTermAttributeImpl;
import org.apache.lucene.util.BytesRef;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ConcatICUCollatedTermAttributeImplEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      RuleBasedCollator ruleBasedCollator0 = (RuleBasedCollator)Collator.getInstance();
      ConcatICUCollatedTermAttributeImpl concatICUCollatedTermAttributeImpl0 = new ConcatICUCollatedTermAttributeImpl((Collator) ruleBasedCollator0);
      concatICUCollatedTermAttributeImpl0.fillBytesRef();
      BytesRef bytesRef0 = new BytesRef();
      BytesRef bytesRef1 = concatICUCollatedTermAttributeImpl0.getBytesRef();
      BytesRef bytesRef2 = ConcatICUCollatedTermAttributeImpl.getOriginalString(bytesRef1, bytesRef0);
      assertEquals("\u0001\u0001\u0000", bytesRef1.utf8ToString());
      assertNotNull(bytesRef2);
      assertSame(bytesRef0, bytesRef2);
      assertEquals(0, bytesRef2.length);
  }

  @Test
  public void test1()  throws Throwable  {
      RuleBasedCollator ruleBasedCollator0 = (RuleBasedCollator)Collator.getInstance();
      ConcatICUCollatedTermAttributeImpl concatICUCollatedTermAttributeImpl0 = new ConcatICUCollatedTermAttributeImpl((Collator) ruleBasedCollator0);
      assertNotNull(concatICUCollatedTermAttributeImpl0);
      
      concatICUCollatedTermAttributeImpl0.append((CharSequence) null);
      ConcatICUCollatedTermAttributeImpl concatICUCollatedTermAttributeImpl1 = (ConcatICUCollatedTermAttributeImpl)concatICUCollatedTermAttributeImpl0.append((StringBuilder) null);
      concatICUCollatedTermAttributeImpl0.append((CharTermAttribute) concatICUCollatedTermAttributeImpl1);
      concatICUCollatedTermAttributeImpl0.append((CharSequence) concatICUCollatedTermAttributeImpl1);
      concatICUCollatedTermAttributeImpl0.append((CharSequence) concatICUCollatedTermAttributeImpl1);
      String string0 = concatICUCollatedTermAttributeImpl0.reflectAsString(false);
      assertEquals(-608812087, concatICUCollatedTermAttributeImpl0.fillBytesRef());
      assertNotNull(string0);
      assertEquals("term=nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull,bytes=[41 4f 3d 3d 41 4f 3d 3d 41 4f 3d 3d 41 4f 3d 3d 41 4f 3d 3d 41 4f 3d 3d 41 4f 3d 3d 41 4f 3d 3d 41 4f 3d 3d 41 4f 3d 3d 41 4f 3d 3d 41 4f 3d 3d 41 4f 3d 3d 41 4f 3d 3d 41 4f 3d 3d 41 4f 3d 3d 1 44 1 30 19 0 6e 75 6c 6c 6e 75 6c 6c 6e 75 6c 6c 6e 75 6c 6c 6e 75 6c 6c 6e 75 6c 6c 6e 75 6c 6c 6e 75 6c 6c 6e 75 6c 6c 6e 75 6c 6c 6e 75 6c 6c 6e 75 6c 6c 6e 75 6c 6c 6e 75 6c 6c 6e 75 6c 6c 6e 75 6c 6c]", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      BytesRef bytesRef0 = new BytesRef();
      BytesRef bytesRef1 = ConcatICUCollatedTermAttributeImpl.getOriginalString(bytesRef0, bytesRef0);
      assertSame(bytesRef1, bytesRef0);
  }

  @Test
  public void test3()  throws Throwable  {
      RuleBasedCollator ruleBasedCollator0 = (RuleBasedCollator)Collator.getInstance();
      ConcatICUCollatedTermAttributeImpl concatICUCollatedTermAttributeImpl0 = new ConcatICUCollatedTermAttributeImpl((Collator) ruleBasedCollator0);
      int int0 = concatICUCollatedTermAttributeImpl0.fillBytesRef();
      assertEquals(992, int0);
      
      BytesRef bytesRef0 = concatICUCollatedTermAttributeImpl0.getBytesRef();
      ConcatICUCollatedTermAttributeImpl.getOriginalString(bytesRef0, bytesRef0);
      assertEquals("", bytesRef0.utf8ToString());
      assertEquals(992, concatICUCollatedTermAttributeImpl0.fillBytesRef());
  }
}
