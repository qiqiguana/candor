/*
 * This file was automatically generated by EvoSuite
 */

package org.apache.lucene.search.exposed.facet;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.apache.lucene.search.exposed.facet.CollectorPool;
import org.apache.lucene.search.exposed.facet.FacetMap;

@RunWith(EvoSuiteRunner.class)
public class CollectorPoolEvoSuiteTest {


  //Test case number: 0
  /*
   * 3 covered goals:
   * 1 org.apache.lucene.search.exposed.facet.CollectorPool.toString()Ljava/lang/String;: root-Branch
   * 2 org.apache.lucene.search.exposed.facet.CollectorPool.<init>(Ljava/lang/String;Lorg/apache/lucene/search/exposed/facet/FacetMap;II)V: root-Branch
   * 3 org.apache.lucene.search.exposed.facet.CollectorPool$1.<init>(Lorg/apache/lucene/search/exposed/facet/CollectorPool;I)V: root-Branch
   */
  @Test
  public void test0()  throws Throwable  {
      CollectorPool collectorPool0 = new CollectorPool("F9e+Pw]", (FacetMap) null, 0, 0);
      assertNotNull(collectorPool0);
      
      // Undeclared exception!
      try {
        collectorPool0.toString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  //Test case number: 1
  /*
   * 8 covered goals:
   * 1 org.apache.lucene.search.exposed.facet.CollectorPool.acquire(Ljava/lang/String;)Lorg/apache/lucene/search/exposed/facet/TagCollector;: I7 Branch 2 IFNULL L112 - false
   * 2 org.apache.lucene.search.exposed.facet.CollectorPool.acquire(Ljava/lang/String;)Lorg/apache/lucene/search/exposed/facet/TagCollector;: I10 Branch 3 IFEQ L112 - true
   * 3 org.apache.lucene.search.exposed.facet.CollectorPool.acquire(Ljava/lang/String;)Lorg/apache/lucene/search/exposed/facet/TagCollector;: I54 Branch 5 IF_ICMPGE L119 - true
   * 4 org.apache.lucene.search.exposed.facet.CollectorPool.acquire(Ljava/lang/String;)Lorg/apache/lucene/search/exposed/facet/TagCollector;: I101 Branch 7 IFEQ L128 - false
   * 5 org.apache.lucene.search.exposed.facet.CollectorPool.acquire(Ljava/lang/String;)Lorg/apache/lucene/search/exposed/facet/TagCollector;: I117 Branch 8 IF_ICMPGE L128 - true
   * 6 org.apache.lucene.search.exposed.facet.CollectorPool.acquire(Ljava/lang/String;)Lorg/apache/lucene/search/exposed/facet/TagCollector;: I164 Branch 9 IF_ICMPLT L144 - true
   * 7 org.apache.lucene.search.exposed.facet.CollectorPool.acquire(Ljava/lang/String;)Lorg/apache/lucene/search/exposed/facet/TagCollector;: I164 Branch 9 IF_ICMPLT L144 - false
   * 8 org.apache.lucene.search.exposed.facet.CollectorPool.acquire(Ljava/lang/String;)Lorg/apache/lucene/search/exposed/facet/TagCollector;: I170 Branch 10 IF_ICMPNE L145 - true
   */
  @Test
  public void test1()  throws Throwable  {
      CollectorPool collectorPool0 = new CollectorPool((FacetMap) null, 0, 0);
      assertNotNull(collectorPool0);
      
      // Undeclared exception!
      try {
        collectorPool0.acquire(":Fqqd<\"Z'VT}:");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  //Test case number: 2
  /*
   * 4 covered goals:
   * 1 org.apache.lucene.search.exposed.facet.CollectorPool.getMem()J: I14 Branch 28 IFEQ L264 - true
   * 2 org.apache.lucene.search.exposed.facet.CollectorPool.getMem()J: I39 Branch 29 IFEQ L267 - true
   * 3 org.apache.lucene.search.exposed.facet.CollectorPool.<init>(Ljava/lang/String;Lorg/apache/lucene/search/exposed/facet/FacetMap;II)V: root-Branch
   * 4 org.apache.lucene.search.exposed.facet.CollectorPool$1.<init>(Lorg/apache/lucene/search/exposed/facet/CollectorPool;I)V: root-Branch
   */
  @Test
  public void test2()  throws Throwable  {
      CollectorPool collectorPool0 = new CollectorPool("F9e+Pw]", (FacetMap) null, 0, 0);
      assertNotNull(collectorPool0);
      
      long long0 = collectorPool0.getMem();
      assertEquals(0, collectorPool0.getMaxFresh());
      assertEquals(0L, long0);
      assertEquals(true, collectorPool0.isEnforceLimits());
      assertEquals(0, collectorPool0.getMaxFilled());
  }
}
