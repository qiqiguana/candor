/*
 * This file was automatically generated by EvoSuite
 */

package org.apache.lucene.search.exposed.facet.request;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.List;
import javax.xml.stream.XMLStreamException;
import org.apache.lucene.search.exposed.facet.request.FacetRequest;
import org.apache.lucene.search.exposed.facet.request.FacetRequestGroup;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class FacetRequestEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      FacetRequest facetRequest0 = new FacetRequest("t.K0By%u/Q");
      String string0 = facetRequest0.getBuildKey();
      assertEquals("FacetRequest(query='t.K0By%u/Q', order=count, reverse=false, locale='null', maxTags=20, minCount=0, offset=0, prefix='', hierarchical=false, delimiter='/', levels=5, startPath='null', groups=[])", facetRequest0.toString());
      assertEquals("facetrequest(query(t.K0By%u/Q), groups())", string0);
      assertNotNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      FacetRequest facetRequest0 = new FacetRequest("hierarchical");
      int int0 = facetRequest0.getOffset();
      assertEquals(0, int0);
      assertEquals("FacetRequest(query='hierarchical', order=count, reverse=false, locale='null', maxTags=20, minCount=0, offset=0, prefix='', hierarchical=false, delimiter='/', levels=5, startPath='null', groups=[])", facetRequest0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      FacetRequest facetRequest0 = new FacetRequest("a&.$y $bz");
      String string0 = facetRequest0.getLocale();
      assertEquals("FacetRequest(query='a&.$y $bz', order=count, reverse=false, locale='null', maxTags=20, minCount=0, offset=0, prefix='', hierarchical=false, delimiter='/', levels=5, startPath='null', groups=[])", facetRequest0.toString());
      assertNull(string0);
      assertEquals("<?xml version='1.0' encoding='utf-8'?>\n<facetrequest xmlns=\"http://lucene.apache.org/exposed/facet/request/1.0\" order=\"count\" maxtags=\"20\" mincount=\"0\" offset=\"0\" prefix=\"\" hierarchical=\"false\" levels=\"5\" delimiter=\"/\">\n  <query>a&amp;.$y $bz</query>\n  <groups>\n  </groups>\n</facetrequest>\n", facetRequest0.toXML());
  }

  @Test
  public void test3()  throws Throwable  {
      FacetRequest facetRequest0 = new FacetRequest("t.K0By%u/Q");
      List<FacetRequestGroup> list0 = facetRequest0.getGroups();
      assertNotNull(list0);
      assertEquals("FacetRequest(query='t.K0By%u/Q', order=count, reverse=false, locale='null', maxTags=20, minCount=0, offset=0, prefix='', hierarchical=false, delimiter='/', levels=5, startPath='null', groups=[])", facetRequest0.toString());
      assertEquals("<?xml version='1.0' encoding='utf-8'?>\n<facetrequest xmlns=\"http://lucene.apache.org/exposed/facet/request/1.0\" order=\"count\" maxtags=\"20\" mincount=\"0\" offset=\"0\" prefix=\"\" hierarchical=\"false\" levels=\"5\" delimiter=\"/\">\n  <query>t.K0By%u/Q</query>\n  <groups>\n  </groups>\n</facetrequest>\n", facetRequest0.toXML());
  }

  @Test
  public void test4()  throws Throwable  {
      FacetRequest facetRequest0 = new FacetRequest("startPath");
      String string0 = facetRequest0.getStartPath();
      assertNull(string0);
      assertEquals("FacetRequest(query='startPath', order=count, reverse=false, locale='null', maxTags=20, minCount=0, offset=0, prefix='', hierarchical=false, delimiter='/', levels=5, startPath='null', groups=[])", facetRequest0.toString());
      assertEquals(5, facetRequest0.getLevels());
  }

  @Test
  public void test5()  throws Throwable  {
      FacetRequest facetRequest0 = new FacetRequest("hierarchical");
      int int0 = facetRequest0.getMinCount();
      assertEquals("FacetRequest(query='hierarchical', order=count, reverse=false, locale='null', maxTags=20, minCount=0, offset=0, prefix='', hierarchical=false, delimiter='/', levels=5, startPath='null', groups=[])", facetRequest0.toString());
      assertEquals(0, int0);
  }

  @Test
  public void test6()  throws Throwable  {
      FacetRequest facetRequest0 = new FacetRequest("d_*Tf0Vp.#`Sbf~#tg");
      boolean boolean0 = facetRequest0.isHierarchical();
      assertEquals("FacetRequest(query='d_*Tf0Vp.#`Sbf~#tg', order=count, reverse=false, locale='null', maxTags=20, minCount=0, offset=0, prefix='', hierarchical=false, delimiter='/', levels=5, startPath='null', groups=[])", facetRequest0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      FacetRequest facetRequest0 = new FacetRequest("hierarchical");
      String string0 = facetRequest0.getQuery();
      assertEquals("FacetRequest(query='hierarchical', order=count, reverse=false, locale='null', maxTags=20, minCount=0, offset=0, prefix='', hierarchical=false, delimiter='/', levels=5, startPath='null', groups=[])", facetRequest0.toString());
      assertEquals("hierarchical", string0);
      assertNotNull(string0);
  }

  @Test
  public void test8()  throws Throwable  {
      FacetRequest facetRequest0 = new FacetRequest("d_*Tf0Vp.#`Sbf~#tg");
      facetRequest0.getOrder();
      assertEquals("FacetRequest(query='d_*Tf0Vp.#`Sbf~#tg', order=count, reverse=false, locale='null', maxTags=20, minCount=0, offset=0, prefix='', hierarchical=false, delimiter='/', levels=5, startPath='null', groups=[])", facetRequest0.toString());
      assertEquals("<?xml version='1.0' encoding='utf-8'?>\n<facetrequest xmlns=\"http://lucene.apache.org/exposed/facet/request/1.0\" order=\"count\" maxtags=\"20\" mincount=\"0\" offset=\"0\" prefix=\"\" hierarchical=\"false\" levels=\"5\" delimiter=\"/\">\n  <query>d_*Tf0Vp.#`Sbf~#tg</query>\n  <groups>\n  </groups>\n</facetrequest>\n", facetRequest0.toXML());
  }

  @Test
  public void test9()  throws Throwable  {
      FacetRequest facetRequest0 = new FacetRequest("hierarchical");
      String string0 = facetRequest0.toString();
      assertNotNull(string0);
      assertEquals("FacetRequest(query='hierarchical', order=count, reverse=false, locale='null', maxTags=20, minCount=0, offset=0, prefix='', hierarchical=false, delimiter='/', levels=5, startPath='null', groups=[])", string0);
  }

  @Test
  public void test10()  throws Throwable  {
      FacetRequest facetRequest0 = new FacetRequest("pkQSM_N?+jEp*$ZRK");
      facetRequest0.setQuery("pkQSM_N?+jEp*$ZRK");
      assertEquals("FacetRequest(query='pkQSM_N?+jEp*$ZRK', order=count, reverse=false, locale='null', maxTags=20, minCount=0, offset=0, prefix='', hierarchical=false, delimiter='/', levels=5, startPath='null', groups=[])", facetRequest0.toString());
  }

  @Test
  public void test11()  throws Throwable  {
      FacetRequest facetRequest0 = new FacetRequest("a&.3y$1z");
      String string0 = facetRequest0.getDelimiter();
      assertEquals("/", string0);
      assertNotNull(string0);
      assertEquals("FacetRequest(query='a&.3y$1z', order=count, reverse=false, locale='null', maxTags=20, minCount=0, offset=0, prefix='', hierarchical=false, delimiter='/', levels=5, startPath='null', groups=[])", facetRequest0.toString());
  }

  @Test
  public void test12()  throws Throwable  {
      FacetRequest facetRequest0 = new FacetRequest("t.K0By%u/Q");
      int int0 = facetRequest0.getMaxTags();
      assertEquals(20, int0);
      assertEquals("FacetRequest(query='t.K0By%u/Q', order=count, reverse=false, locale='null', maxTags=20, minCount=0, offset=0, prefix='', hierarchical=false, delimiter='/', levels=5, startPath='null', groups=[])", facetRequest0.toString());
  }

  @Test
  public void test13()  throws Throwable  {
      FacetRequest facetRequest0 = new FacetRequest("a&.$y $bz");
      facetRequest0.createGroup("a&.$y $bz");
      String string0 = facetRequest0.toXML();
      assertEquals("groups(group(name=a&.$y $bz, order=count, locale=null, fields(a&.$y $bz), hierarchical=false, delimiter=/))", facetRequest0.getGroupKey());
      assertEquals("<?xml version='1.0' encoding='utf-8'?>\n<facetrequest xmlns=\"http://lucene.apache.org/exposed/facet/request/1.0\" order=\"count\" maxtags=\"20\" mincount=\"0\" offset=\"0\" prefix=\"\" hierarchical=\"false\" levels=\"5\" delimiter=\"/\">\n  <query>a&amp;.$y $bz</query>\n  <groups>\n    <group name=\"a&amp;.$y $bz\" order=\"count\" reverse=\"false\" maxtags=\"20\" mincount=\"0\" offset=\"0\" prefix=\"\" hierarchical=\"false\" levels=\"5\" delimiter=\"/\" startpath=\"\">\n      <fields>\n        <field name=\"a&amp;.$y $bz\" />\n      </fields>\n    </group>\n  </groups>\n</facetrequest>\n", string0);
  }

  @Test
  public void test14()  throws Throwable  {
      FacetRequest facetRequest0 = new FacetRequest("d_*Tf0Vp.#`Sbf~#tg");
      String string0 = facetRequest0.getPrefix();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("FacetRequest(query='d_*Tf0Vp.#`Sbf~#tg', order=count, reverse=false, locale='null', maxTags=20, minCount=0, offset=0, prefix='', hierarchical=false, delimiter='/', levels=5, startPath='null', groups=[])", facetRequest0.toString());
  }

  @Test
  public void test15()  throws Throwable  {
      FacetRequest facetRequest0 = new FacetRequest("pkQSM_N?+jEp*$ZRK");
      int int0 = facetRequest0.getLevels();
      assertEquals("FacetRequest(query='pkQSM_N?+jEp*$ZRK', order=count, reverse=false, locale='null', maxTags=20, minCount=0, offset=0, prefix='', hierarchical=false, delimiter='/', levels=5, startPath='null', groups=[])", facetRequest0.toString());
      assertEquals(5, int0);
  }

  @Test
  public void test16()  throws Throwable  {
      FacetRequest facetRequest0 = FacetRequest.parseXML("<?xml version='1.0' encoding='utf-8'?>\n<facetrequest xmlns=\"http://lucene.apache.org/exposed/facet/request/1.0\" order=\"count\" locale=\"startPath\" maxtags=\"20\" mincount=\"0\" offset=\"0\" prefix=\"\" hierarchical=\"false\" levels=\"5\" delimiter=\"/\" startPath=\"startPath\">\n  <query>startPath</query>\n  <groups>\n    <group name=\"startPath\" order=\"count\" reverse=\"false\" maxtags=\"20\" mincount=\"0\" offset=\"0\" prefix=\"\" hierarchical=\"false\" levels=\"5\" delimiter=\"/\" startpath=\"\">\n      <fields>\n        <field name=\"startPath\" />\n      </fields>\n    </group>\n  </groups>\n</facetrequest>\n");
      assertEquals("<?xml version='1.0' encoding='utf-8'?>\n<facetrequest xmlns=\"http://lucene.apache.org/exposed/facet/request/1.0\" order=\"count\" locale=\"startPath\" maxtags=\"20\" mincount=\"0\" offset=\"0\" prefix=\"\" hierarchical=\"false\" levels=\"5\" delimiter=\"/\" startPath=\"startPath\">\n  <query>startPath</query>\n  <groups>\n    <group name=\"startPath\" order=\"count\" reverse=\"false\" locale=\"startPath\" maxtags=\"20\" mincount=\"0\" offset=\"0\" prefix=\"\" hierarchical=\"false\" levels=\"5\" delimiter=\"/\" startpath=\"\">\n      <fields>\n        <field name=\"startPath\" />\n      </fields>\n    </group>\n  </groups>\n</facetrequest>\n", facetRequest0.toXML());
      assertNotNull(facetRequest0);
  }

  @Test
  public void test17()  throws Throwable  {
      try {
        FacetRequest.parseXML("<?xml version='1.0' encoding='utf-8'?>\n<facetrequest xmlns=\"http://lucene.apache.org/exposed/facet/request/1.0\" order=\"count\" maxtags=\"20\" mincount=\"0\" offset=\"0\" prefix=\"\" hierarchical=\"false\" levels=\"5\" delimiter=\"/\" startPath=\"a&amp;.3y$1z\">\n  <query>a&amp;.3y$1z</query>\n  <groups>\n  </groups>\n</facetrequest>\n");
        fail("Expecting exception: XMLStreamException");
      } catch(XMLStreamException e) {
        /*
         * No groups defined for <?xml version='1.0' encoding='utf-8'?>
         * <facetrequest xmlns=\"http://lucene.apache.org/exposed/facet/request/1.0\" order=\"count\" maxtags=\"20\" mincount=\"0\" offset=\"0\" prefix=\"\" hierarchical=\"false\" levels=\"5\" delimiter=\"/\" startPath=\"a&amp;.3y$1z\">
         *   <query>a&amp;.3y$1z</query>
         *   <groups>
         *   </groups>
         * </facetrequest>
         */
      }
  }

  @Test
  public void test18()  throws Throwable  {
      FacetRequest facetRequest0 = new FacetRequest("startPath");
      facetRequest0.setLocale("startPath");
      String string0 = facetRequest0.toXML();
      assertEquals("FacetRequest(query='startPath', order=count, reverse=false, locale='startPath', maxTags=20, minCount=0, offset=0, prefix='', hierarchical=false, delimiter='/', levels=5, startPath='null', groups=[])", facetRequest0.toString());
      assertEquals("<?xml version='1.0' encoding='utf-8'?>\n<facetrequest xmlns=\"http://lucene.apache.org/exposed/facet/request/1.0\" order=\"count\" locale=\"startPath\" maxtags=\"20\" mincount=\"0\" offset=\"0\" prefix=\"\" hierarchical=\"false\" levels=\"5\" delimiter=\"/\">\n  <query>startPath</query>\n  <groups>\n  </groups>\n</facetrequest>\n", string0);
  }

  @Test
  public void test19()  throws Throwable  {
      FacetRequest facetRequest0 = new FacetRequest("a&.3y$1z");
      facetRequest0.setStartPath("a&.3y$1z");
      String string0 = facetRequest0.toXML();
      assertEquals("FacetRequest(query='a&.3y$1z', order=count, reverse=false, locale='null', maxTags=20, minCount=0, offset=0, prefix='', hierarchical=false, delimiter='/', levels=5, startPath='a&.3y$1z', groups=[])", facetRequest0.toString());
      assertEquals("<?xml version='1.0' encoding='utf-8'?>\n<facetrequest xmlns=\"http://lucene.apache.org/exposed/facet/request/1.0\" order=\"count\" maxtags=\"20\" mincount=\"0\" offset=\"0\" prefix=\"\" hierarchical=\"false\" levels=\"5\" delimiter=\"/\" startPath=\"a&amp;.3y$1z\">\n  <query>a&amp;.3y$1z</query>\n  <groups>\n  </groups>\n</facetrequest>\n", string0);
  }

  @Test
  public void test20()  throws Throwable  {
      FacetRequest facetRequest0 = new FacetRequest("hierarchical");
      facetRequest0.createGroup("hierarchical");
      facetRequest0.createGroup("hierarchical");
      String string0 = facetRequest0.getGroupKey();
      assertEquals("groups(group(name=hierarchical, order=count, locale=null, fields(hierarchical), hierarchical=false, delimiter=/), group(name=hierarchical, order=count, locale=null, fields(hierarchical), hierarchical=false, delimiter=/))", facetRequest0.getGroupKey());
      assertEquals("<?xml version='1.0' encoding='utf-8'?>\n<facetrequest xmlns=\"http://lucene.apache.org/exposed/facet/request/1.0\" order=\"count\" maxtags=\"20\" mincount=\"0\" offset=\"0\" prefix=\"\" hierarchical=\"false\" levels=\"5\" delimiter=\"/\">\n  <query>hierarchical</query>\n  <groups>\n    <group name=\"hierarchical\" order=\"count\" reverse=\"false\" maxtags=\"20\" mincount=\"0\" offset=\"0\" prefix=\"\" hierarchical=\"false\" levels=\"5\" delimiter=\"/\" startpath=\"\">\n      <fields>\n        <field name=\"hierarchical\" />\n      </fields>\n    </group>\n    <group name=\"hierarchical\" order=\"count\" reverse=\"false\" maxtags=\"20\" mincount=\"0\" offset=\"0\" prefix=\"\" hierarchical=\"false\" levels=\"5\" delimiter=\"/\" startpath=\"\">\n      <fields>\n        <field name=\"hierarchical\" />\n      </fields>\n    </group>\n  </groups>\n</facetrequest>\n", facetRequest0.toXML());
      assertEquals("groups(group(name=hierarchical, order=count, locale=null, fields(hierarchical), hierarchical=false, delimiter=/), group(name=hierarchical, order=count, locale=null, fields(hierarchical), hierarchical=false, delimiter=/))", string0);
  }
}
