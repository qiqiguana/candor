/*
 * This file was automatically generated by EvoSuite
 */

package org.apache.lucene.search.exposed;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import org.apache.lucene.search.exposed.ExposedRequest;
import org.apache.lucene.search.exposed.GroupTermProvider;
import org.apache.lucene.search.exposed.MergingTermDocIterator;
import org.apache.lucene.search.exposed.TermProvider;
import org.apache.lucene.search.exposed.compare.NamedComparator;
import org.apache.lucene.search.exposed.compare.NamedNaturalComparator;
import org.apache.lucene.util.BytesRef;
import org.codehaus.jettison.util.FastStack;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MergingTermDocIteratorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ArrayList<TermProvider> arrayList0 = new ArrayList<TermProvider>();
      LinkedList<TermProvider> linkedList0 = new LinkedList<TermProvider>();
      NamedNaturalComparator namedNaturalComparator0 = new NamedNaturalComparator();
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group("", (List<ExposedRequest.Field>) null, (NamedComparator) namedNaturalComparator0);
      GroupTermProvider groupTermProvider0 = new GroupTermProvider((-27), (List<TermProvider>) arrayList0, exposedRequest_Group0, false);
      MergingTermDocIterator mergingTermDocIterator0 = new MergingTermDocIterator(groupTermProvider0, (List<TermProvider>) linkedList0, (Comparator<BytesRef>) namedNaturalComparator0, true);
      assertNotNull(mergingTermDocIterator0);
      
      mergingTermDocIterator0.setReuseTuple(false);
      assertEquals(false, mergingTermDocIterator0.hasNext());
  }

  @Test
  public void test1()  throws Throwable  {
      FastStack fastStack0 = new FastStack();
      NamedNaturalComparator namedNaturalComparator0 = new NamedNaturalComparator();
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group("~OM`N[U!^m@F%qf", (List<ExposedRequest.Field>) fastStack0, (NamedComparator) namedNaturalComparator0, "~OM`N[U!^m@F%qf");
      GroupTermProvider groupTermProvider0 = new GroupTermProvider((-344), (List<TermProvider>) fastStack0, exposedRequest_Group0, true);
      MergingTermDocIterator mergingTermDocIterator0 = new MergingTermDocIterator(groupTermProvider0, (List<TermProvider>) fastStack0, (Comparator<BytesRef>) namedNaturalComparator0, true);
      // Undeclared exception!
      try {
        mergingTermDocIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Not a valid operation
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      ArrayList<TermProvider> arrayList0 = new ArrayList<TermProvider>();
      LinkedList<TermProvider> linkedList0 = new LinkedList<TermProvider>();
      NamedNaturalComparator namedNaturalComparator0 = new NamedNaturalComparator();
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group("", (List<ExposedRequest.Field>) null, (NamedComparator) namedNaturalComparator0);
      GroupTermProvider groupTermProvider0 = new GroupTermProvider((-27), (List<TermProvider>) arrayList0, exposedRequest_Group0, false);
      linkedList0.add((TermProvider) groupTermProvider0);
      MergingTermDocIterator mergingTermDocIterator0 = new MergingTermDocIterator(groupTermProvider0, (List<TermProvider>) linkedList0, (Comparator<BytesRef>) namedNaturalComparator0, true);
      assertNotNull(mergingTermDocIterator0);
      assertEquals(false, mergingTermDocIterator0.hasNext());
  }

  @Test
  public void test3()  throws Throwable  {
      ArrayList<TermProvider> arrayList0 = new ArrayList<TermProvider>();
      LinkedList<TermProvider> linkedList0 = new LinkedList<TermProvider>();
      NamedNaturalComparator namedNaturalComparator0 = new NamedNaturalComparator();
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group("", (List<ExposedRequest.Field>) null, (NamedComparator) namedNaturalComparator0);
      GroupTermProvider groupTermProvider0 = new GroupTermProvider((-27), (List<TermProvider>) arrayList0, exposedRequest_Group0, false);
      MergingTermDocIterator mergingTermDocIterator0 = new MergingTermDocIterator(groupTermProvider0, (List<TermProvider>) linkedList0, (Comparator<BytesRef>) namedNaturalComparator0, true);
      assertNotNull(mergingTermDocIterator0);
      
      // Undeclared exception!
      try {
        mergingTermDocIterator0.next();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * The iterator is depleted
         */
      }
  }
}
