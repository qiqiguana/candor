/*
 * This file was automatically generated by EvoSuite
 */

package org.apache.lucene.search.exposed.facet;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.apache.lucene.search.exposed.ExposedRequest;
import org.apache.lucene.search.exposed.GroupTermProvider;
import org.apache.lucene.search.exposed.TermProvider;
import org.apache.lucene.search.exposed.compare.NamedComparator;
import org.apache.lucene.search.exposed.compare.NamedOrderDefaultComparator;
import org.apache.lucene.search.exposed.facet.FacetMap;
import org.apache.lucene.util.BytesRef;
import org.apache.lucene.util.packed.GrowableWriter;
import org.apache.lucene.util.packed.GrowingMutable;
import org.apache.lucene.util.packed.IdentityReader;
import org.apache.lucene.util.packed.PackedIntWrapper;
import org.apache.lucene.util.packed.PackedInts;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class FacetMapEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      int[] intArray0 = new int[19];
      PackedIntWrapper packedIntWrapper0 = new PackedIntWrapper(intArray0, (-334));
      FacetMap facetMap0 = new FacetMap((List<TermProvider>) null, intArray0, (PackedInts.Reader) packedIntWrapper0, (PackedInts.Reader) packedIntWrapper0);
      PackedIntWrapper packedIntWrapper1 = (PackedIntWrapper)facetMap0.getRefs();
      assertSame(packedIntWrapper0, packedIntWrapper1);
  }

  @Test
  public void test1()  throws Throwable  {
      Vector<TermProvider> vector0 = new Vector<TermProvider>(806, 806);
      int[] intArray0 = new int[1];
      GrowingMutable growingMutable0 = new GrowingMutable();
      FacetMap facetMap0 = new FacetMap((List<TermProvider>) vector0, intArray0, (PackedInts.Reader) growingMutable0, (PackedInts.Reader) growingMutable0);
      int[] intArray1 = facetMap0.getIndirectStarts();
      assertSame(intArray1, intArray0);
  }

  @Test
  public void test2()  throws Throwable  {
      int[] intArray0 = new int[4];
      GrowingMutable growingMutable0 = new GrowingMutable();
      FacetMap facetMap0 = new FacetMap((List<TermProvider>) null, intArray0, (PackedInts.Reader) growingMutable0, (PackedInts.Reader) growingMutable0);
      int int0 = facetMap0.getTagCount();
      assertEquals(0, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      Vector<TermProvider> vector0 = new Vector<TermProvider>(806, 806);
      int[] intArray0 = new int[1];
      GrowingMutable growingMutable0 = new GrowingMutable();
      FacetMap facetMap0 = new FacetMap((List<TermProvider>) vector0, intArray0, (PackedInts.Reader) growingMutable0, (PackedInts.Reader) growingMutable0);
      GrowingMutable growingMutable1 = (GrowingMutable)facetMap0.getDoc2ref();
      assertSame(growingMutable0, growingMutable1);
  }

  @Test
  public void test4()  throws Throwable  {
      int[] intArray0 = new int[2];
      GrowableWriter growableWriter0 = new GrowableWriter(0, (-15), 0);
      FacetMap facetMap0 = new FacetMap((List<TermProvider>) null, intArray0, (PackedInts.Reader) growableWriter0, (PackedInts.Reader) growableWriter0);
      List<TermProvider> list0 = facetMap0.getProviders();
      assertNull(list0);
  }

  @Test
  public void test5()  throws Throwable  {
      ArrayList<TermProvider> arrayList0 = new ArrayList<TermProvider>();
      int[] intArray0 = new int[1];
      int[] intArray1 = new int[5];
      IdentityReader identityReader0 = new IdentityReader(0);
      FacetMap facetMap0 = new FacetMap((List<TermProvider>) arrayList0, intArray1, (PackedInts.Reader) identityReader0, (PackedInts.Reader) identityReader0);
      facetMap0.updateCounter(intArray0, (-258));
      assertEquals("FacetMap(#docs=-1 (0 bytes), #refs=0 (0 bytes), providers())", facetMap0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      ArrayList<TermProvider> arrayList0 = new ArrayList<TermProvider>();
      int[] intArray0 = new int[5];
      IdentityReader identityReader0 = new IdentityReader(0);
      FacetMap facetMap0 = new FacetMap((List<TermProvider>) arrayList0, intArray0, (PackedInts.Reader) identityReader0, (PackedInts.Reader) identityReader0);
      // Undeclared exception!
      try {
        facetMap0.getTermsForDocID(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * The indirect 0 was too high. The maximum indirect supported by the current map is 0
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      Stack<TermProvider> stack0 = new Stack<TermProvider>();
      int[] intArray0 = new int[2];
      Vector<ExposedRequest.Field> vector0 = new Vector<ExposedRequest.Field>();
      NamedOrderDefaultComparator namedOrderDefaultComparator0 = new NamedOrderDefaultComparator();
      ExposedRequest.Group exposedRequest_Group0 = new ExposedRequest.Group("|Qxv,EPl ,])", (List<ExposedRequest.Field>) vector0, (NamedComparator) namedOrderDefaultComparator0);
      GroupTermProvider groupTermProvider0 = new GroupTermProvider(61440, (List<TermProvider>) stack0, exposedRequest_Group0, true);
      stack0.add((TermProvider) groupTermProvider0);
      FacetMap facetMap0 = new FacetMap((List<TermProvider>) stack0, intArray0, (PackedInts.Reader) null, (PackedInts.Reader) null);
      // Undeclared exception!
      try {
        facetMap0.getOrderedTerm((-4));
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      Stack<TermProvider> stack0 = new Stack<TermProvider>();
      int[] intArray0 = new int[2];
      stack0.add((TermProvider) null);
      FacetMap facetMap0 = new FacetMap((List<TermProvider>) stack0, intArray0, (PackedInts.Reader) null, (PackedInts.Reader) null);
      // Undeclared exception!
      try {
        facetMap0.getOrderedDisplayTerm(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * The indirect 0 was too high. The maximum indirect supported by the current map is 0
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      Stack<TermProvider> stack0 = new Stack<TermProvider>();
      int[] intArray0 = new int[2];
      stack0.add((TermProvider) null);
      FacetMap facetMap0 = new FacetMap((List<TermProvider>) stack0, intArray0, (PackedInts.Reader) null, (PackedInts.Reader) null);
      // Undeclared exception!
      try {
        facetMap0.getOrderedDisplayTerm((-3));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      ArrayList<TermProvider> arrayList0 = new ArrayList<TermProvider>();
      int[] intArray0 = new int[1];
      GrowingMutable growingMutable0 = new GrowingMutable((-271), (-271), (long) (-271), (long) (-271), true);
      FacetMap facetMap0 = new FacetMap((List<TermProvider>) arrayList0, intArray0, (PackedInts.Reader) growingMutable0, (PackedInts.Reader) growingMutable0);
      BytesRef[] bytesRefArray0 = facetMap0.getTermsForDocID((-271));
      assertNotNull(bytesRefArray0);
  }

  @Test
  public void test11()  throws Throwable  {
      ArrayList<TermProvider> arrayList0 = new ArrayList<TermProvider>();
      int[] intArray0 = new int[1];
      GrowingMutable growingMutable0 = new GrowingMutable(0, 0, 1562L, 1562L, false);
      FacetMap facetMap0 = new FacetMap((List<TermProvider>) arrayList0, intArray0, (PackedInts.Reader) growingMutable0, (PackedInts.Reader) growingMutable0);
      arrayList0.add((TermProvider) null);
      // Undeclared exception!
      try {
        facetMap0.toString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[1];
      LinkedList<TermProvider> linkedList0 = new LinkedList<TermProvider>();
      GrowableWriter growableWriter0 = new GrowableWriter((-90), (-90), (-90));
      FacetMap facetMap0 = new FacetMap((List<TermProvider>) linkedList0, intArray0, (PackedInts.Reader) growableWriter0, (PackedInts.Reader) growableWriter0);
      String string0 = facetMap0.toString();
      assertEquals("FacetMap(#docs=-91 (1 KB), #refs=-90 (1 KB), providers())", string0);
      assertNotNull(string0);
  }
}
