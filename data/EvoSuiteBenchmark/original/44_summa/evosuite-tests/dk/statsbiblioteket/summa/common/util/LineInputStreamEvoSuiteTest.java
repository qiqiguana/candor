/*
 * This file was automatically generated by EvoSuite
 */

package dk.statsbiblioteket.summa.common.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import dk.statsbiblioteket.summa.common.util.LineInputStream;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import org.archive.io.ReplayInputStream;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class LineInputStreamEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      LineInputStream lineInputStream0 = new LineInputStream((InputStream) pipedInputStream0, "5");
      try {
        lineInputStream0.reset();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * mark/reset not supported
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      LineInputStream lineInputStream0 = new LineInputStream((InputStream) pipedInputStream0, "T\"J^;wU23[io(DJU");
      boolean boolean0 = lineInputStream0.markSupported();
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(29);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) pipedInputStream0);
      LineInputStream lineInputStream0 = new LineInputStream((InputStream) pushbackInputStream0, "");
      lineInputStream0.mark(4);
      assertEquals(false, lineInputStream0.markSupported());
  }

  @Test
  public void test3()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      LineInputStream lineInputStream0 = new LineInputStream((InputStream) pipedInputStream0, "T\"J^;wU23[io(DJU");
      lineInputStream0.close();
      String string0 = lineInputStream0.readLine();
      assertNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream((InputStream) byteArrayInputStream0, (InputStream) byteArrayInputStream0);
      LineInputStream lineInputStream0 = new LineInputStream((InputStream) sequenceInputStream0, "");
      try {
        lineInputStream0.readLine();
        fail("Expecting exception: UnsupportedEncodingException");
      } catch(UnsupportedEncodingException e) {
        /*
         * 
         */
      }
      assertEquals(0, sequenceInputStream0.available());
      assertEquals(-1, byteArrayInputStream0.read());
  }

  @Test
  public void test5()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1473);
      LineInputStream lineInputStream0 = new LineInputStream((InputStream) pipedInputStream0);
      assertNotNull(lineInputStream0);
      
      byte[] byteArray0 = new byte[1];
      int int0 = lineInputStream0.read(byteArray0, 0, 0);
      assertEquals(0, int0);
  }

  @Test
  public void test6()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      LineInputStream lineInputStream0 = new LineInputStream((InputStream) pipedInputStream0, "T\"J^;wU23[io(DJU");
      assertNotNull(lineInputStream0);
      
      lineInputStream0.close();
      byte[] byteArray0 = new byte[6];
      int int0 = lineInputStream0.read(byteArray0, (int) (byte) (-12), 124);
      assertEquals((-1), int0);
  }

  @Test
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ReplayInputStream replayInputStream0 = new ReplayInputStream(byteArray0, (long) (byte)0, "$mQWFtgO");
      LineInputStream lineInputStream0 = new LineInputStream((InputStream) replayInputStream0, "$mQWFtgO");
      assertNotNull(lineInputStream0);
      
      int int0 = lineInputStream0.read(byteArray0);
      assertEquals((-1), int0);
  }

  @Test
  public void test8()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      LineInputStream lineInputStream0 = new LineInputStream((InputStream) pipedInputStream0, "T\"J^;wU23[io(DJU");
      long long0 = lineInputStream0.skip((long) (byte) (-12));
      assertEquals(0L, long0);
  }

  @Test
  public void test9()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      LineInputStream lineInputStream0 = new LineInputStream((InputStream) pipedInputStream0, "5");
      assertNotNull(lineInputStream0);
      
      long long0 = lineInputStream0.skip(0L);
      assertEquals(0L, long0);
  }

  @Test
  public void test10()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      LineInputStream lineInputStream0 = new LineInputStream((InputStream) pipedInputStream0, "T\"J^;wU23[io(DJU");
      assertNotNull(lineInputStream0);
      
      int int0 = lineInputStream0.available();
      assertEquals(0, int0);
  }
}
