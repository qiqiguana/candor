/*
 * This file was automatically generated by EvoSuite
 */

package dk.statsbiblioteket.summa.common.lucene.analysis;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.ibm.icu.text.Collator;
import com.ibm.icu.text.RuleBasedCollator;
import com.ibm.icu.util.ULocale;
import dk.statsbiblioteket.summa.common.lucene.analysis.SummaAnalyzer;
import java.io.IOException;
import java.io.PipedReader;
import java.io.Reader;
import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.core.WhitespaceTokenizer;
import org.apache.lucene.util.BytesRef;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SummaAnalyzerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SummaAnalyzer summaAnalyzer0 = new SummaAnalyzer(")@#m<E=", false, "", false, true);
      assertNotNull(summaAnalyzer0);
      
      WhitespaceTokenizer whitespaceTokenizer0 = (WhitespaceTokenizer)summaAnalyzer0.tokenStream("", (Reader) null);
      assertEquals(false, summaAnalyzer0.keepDefaultTransliterations);
      assertEquals(true, summaAnalyzer0.ignoreCase);
      assertEquals(false, summaAnalyzer0.keepDefaultTokenRules);
      assertNotNull(whitespaceTokenizer0);
  }

  @Test
  public void test1()  throws Throwable  {
      BytesRef bytesRef0 = new BytesRef((CharSequence) "5IN1zmxs5w");
      BytesRef bytesRef1 = SummaAnalyzer.getOriginalString(bytesRef0, bytesRef0);
      assertEquals("5IN1zmxs5w", bytesRef1.utf8ToString());
  }

  @Test
  public void test2()  throws Throwable  {
      ULocale uLocale0 = ULocale.CANADA_FRENCH;
      RuleBasedCollator ruleBasedCollator0 = (RuleBasedCollator)Collator.getInstance(uLocale0);
      SummaAnalyzer summaAnalyzer0 = new SummaAnalyzer("", true, "{v4cVa=ScjlLP9H", true, false, (Collator) ruleBasedCollator0);
      assertNotNull(summaAnalyzer0);
      
      PipedReader pipedReader0 = new PipedReader(256);
      Analyzer.TokenStreamComponents analyzer_TokenStreamComponents0 = summaAnalyzer0.createComponents("{v4cVa=ScjlLP9H", (Reader) pipedReader0);
      assertNotNull(analyzer_TokenStreamComponents0);
      assertEquals(false, summaAnalyzer0.ignoreCase);
      assertEquals(true, summaAnalyzer0.keepDefaultTransliterations);
      assertEquals(true, summaAnalyzer0.keepDefaultTokenRules);
  }

  @Test
  public void test3()  throws Throwable  {
      SummaAnalyzer summaAnalyzer0 = new SummaAnalyzer("", false, ")@#m<E=", false, false);
      assertNotNull(summaAnalyzer0);
      
      WhitespaceTokenizer whitespaceTokenizer0 = (WhitespaceTokenizer)summaAnalyzer0.tokenStream("", (Reader) null);
      assertEquals(false, summaAnalyzer0.ignoreCase);
      assertEquals(false, summaAnalyzer0.keepDefaultTransliterations);
      assertEquals(false, summaAnalyzer0.keepDefaultTokenRules);
      assertNotNull(whitespaceTokenizer0);
  }
}
