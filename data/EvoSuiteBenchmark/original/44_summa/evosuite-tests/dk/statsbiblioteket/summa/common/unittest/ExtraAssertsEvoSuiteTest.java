/*
 * This file was automatically generated by EvoSuite
 */

package dk.statsbiblioteket.summa.common.unittest;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import dk.statsbiblioteket.summa.common.unittest.ExtraAsserts;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import junit.framework.AssertionFailedError;
import org.archive.net.md5.Handler;
import org.junit.BeforeClass;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;

@RunWith(EvoSuiteRunner.class)
public class ExtraAssertsEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Handler handler0 = new Handler();
      URL uRL0 = new URL("_Uy+Ht{n8RFGv/", "_Uy+Ht{n8RFGv/", 1012, "_Uy+Ht{n8RFGv/", (URLStreamHandler) handler0);
      // Undeclared exception!
      try {
        ExtraAsserts.assertValidates("_Uy+Ht{n8RFGv/", uRL0, "_Uy+Ht{n8RFGv/");
        fail("Expecting exception: AssertionFailedError");
      } catch(AssertionFailedError e) {
        /*
         * _Uy+Ht{n8RFGv/. SAXExcaption Content is not allowed in prolog., Content is not allowed in prolog.
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      ExtraAsserts extraAsserts0 = new ExtraAsserts();
      extraAsserts0.error((SAXParseException) null);
      assertEquals("null(dk.statsbiblioteket.summa.common.unittest.ExtraAsserts)", extraAsserts0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      ExtraAsserts extraAsserts0 = new ExtraAsserts();
      extraAsserts0.warning((SAXParseException) null);
      assertEquals(1, extraAsserts0.countTestCases());
  }

  @Test
  public void test3()  throws Throwable  {
      int[] intArray0 = new int[4];
      ExtraAsserts.assertEquals("K/9$]VtNNw%F", intArray0, intArray0);
  }

  @Test
  public void test4()  throws Throwable  {
      int[] intArray0 = new int[6];
      int[] intArray1 = new int[1];
      // Undeclared exception!
      try {
        ExtraAsserts.assertEquals(" 'must be resolvable to a File", intArray0, intArray1);
        fail("Expecting exception: AssertionFailedError");
      } catch(AssertionFailedError e) {
        /*
         *  'must be resolvable to a File. Expected [0, 0, 0, 0, 0, 0] got [0]
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int[] intArray0 = new int[4];
      ExtraAsserts.assertEqualsNoSort("K/9$]VtNNw%F", intArray0, intArray0);
  }

  @Test
  public void test6()  throws Throwable  {
      int[] intArray0 = new int[6];
      // Undeclared exception!
      try {
        ExtraAsserts.assertEqualsNoSort((String) null, intArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      long[] longArray0 = new long[3];
      ExtraAsserts.assertEquals("K/9$]VtNNw%F", longArray0, longArray0);
  }

  @Test
  public void test8()  throws Throwable  {
      long[] longArray0 = new long[3];
      long[] longArray1 = new long[7];
      // Undeclared exception!
      try {
        ExtraAsserts.assertEquals("K/9$]VtNNw%F", longArray0, longArray1);
        fail("Expecting exception: AssertionFailedError");
      } catch(AssertionFailedError e) {
        /*
         * K/9$]VtNNw%F. Expected [0, 0, 0] got [0, 0, 0, 0, 0, 0, 0]
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("\" 7^>BwfcHn?FLf>");
      ExtraAsserts.assertEquals("\" 7^>BwfcHn?FLf>", (Collection) linkedList0, (Collection) linkedList0);
      assertEquals(false, linkedList0.isEmpty());
  }

  @Test
  public void test10()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("\" 7^>BwfcHn?FLf>");
      ExtraAsserts.assertPermutations("\" 7^>BwfcHn?FLf>", (List) linkedList0, (List) linkedList0);
      assertEquals("[\" 7^>BwfcHn?FLf>]", linkedList0.toString());
  }

  @Test
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try {
        ExtraAsserts.assertValidates("", (URL) null, "");
        fail("Expecting exception: AssertionFailedError");
      } catch(AssertionFailedError e) {
        /*
         * . The schema-URL 'null 'must be resolvable to a File
         */
      }
  }
}
