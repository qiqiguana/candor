/*
 * This file was automatically generated by EvoSuite
 */

package dk.statsbiblioteket.summa.common.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import dk.statsbiblioteket.summa.common.util.PriorityQueueLong;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PriorityQueueLongEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      PriorityQueueLong priorityQueueLong0 = new PriorityQueueLong();
      // Undeclared exception!
      try {
        priorityQueueLong0.removeMin();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * No values left on the heap
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      PriorityQueueLong priorityQueueLong0 = new PriorityQueueLong();
      assertNotNull(priorityQueueLong0);
      
      int int0 = priorityQueueLong0.getSize();
      assertEquals(0, priorityQueueLong0.getSize());
      assertEquals(0, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      PriorityQueueLong priorityQueueLong0 = null;
      try {
        priorityQueueLong0 = new PriorityQueueLong(2, 1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * The max capacity (1) must be larger than or equal to the initial capacity (2)
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      PriorityQueueLong priorityQueueLong0 = new PriorityQueueLong(1, 1);
      assertNotNull(priorityQueueLong0);
      
      long[] longArray0 = new long[9];
      priorityQueueLong0.setValues(longArray0, 1, true, 1);
      priorityQueueLong0.insert(1556L);
      assertEquals(1, priorityQueueLong0.getSize());
      assertEquals(1556L, priorityQueueLong0.getMin());
  }

  @Test
  public void test4()  throws Throwable  {
      PriorityQueueLong priorityQueueLong0 = new PriorityQueueLong();
      assertNotNull(priorityQueueLong0);
      
      long[] longArray0 = new long[7];
      // Undeclared exception!
      try {
        priorityQueueLong0.setValues(longArray0, 1630, true, 1630);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * The size (1630) must be equal to or smaller than the length of values (7)
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      PriorityQueueLong priorityQueueLong0 = new PriorityQueueLong(1, 1);
      long[] longArray0 = new long[5];
      // Undeclared exception!
      try {
        priorityQueueLong0.setValues(longArray0, 0, false, (-837));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * The maxCapacity (-837) must be equal to or greater than size (0)
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      PriorityQueueLong priorityQueueLong0 = new PriorityQueueLong(7, 7);
      assertNotNull(priorityQueueLong0);
      
      long[] longArray0 = new long[9];
      priorityQueueLong0.setValues(longArray0, 7, false, 7);
      priorityQueueLong0.insert(0L);
      assertEquals(7, priorityQueueLong0.getSize());
  }

  @Test
  public void test7()  throws Throwable  {
      PriorityQueueLong priorityQueueLong0 = new PriorityQueueLong(1, 1);
      assertNotNull(priorityQueueLong0);
      
      priorityQueueLong0.insert(45L);
      assertEquals(45L, priorityQueueLong0.removeMin());
      assertEquals(1, priorityQueueLong0.getSize());
  }

  @Test
  public void test8()  throws Throwable  {
      PriorityQueueLong priorityQueueLong0 = new PriorityQueueLong();
      assertNotNull(priorityQueueLong0);
      
      priorityQueueLong0.insert((long) (-870));
      priorityQueueLong0.insert((long) 0);
      assertEquals(1, priorityQueueLong0.getSize());
      assertEquals(0L, priorityQueueLong0.getMin());
  }

  @Test
  public void test9()  throws Throwable  {
      PriorityQueueLong priorityQueueLong0 = new PriorityQueueLong();
      assertNotNull(priorityQueueLong0);
      
      priorityQueueLong0.insert(199L);
      priorityQueueLong0.insert((-1L));
      priorityQueueLong0.insert((-21L));
      assertEquals(1, priorityQueueLong0.getSize());
      
      priorityQueueLong0.removeMin();
  }

  @Test
  public void test10()  throws Throwable  {
      PriorityQueueLong priorityQueueLong0 = new PriorityQueueLong();
      assertNotNull(priorityQueueLong0);
      
      priorityQueueLong0.insert(199L);
      priorityQueueLong0.insert((-1L));
      priorityQueueLong0.insert((-21L));
      assertEquals(1, priorityQueueLong0.getSize());
      
      priorityQueueLong0.siftDown();
      assertEquals(0, priorityQueueLong0.getSize());
  }
}
