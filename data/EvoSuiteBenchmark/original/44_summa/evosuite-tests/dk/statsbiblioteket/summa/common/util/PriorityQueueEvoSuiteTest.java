/*
 * This file was automatically generated by EvoSuite
 */

package dk.statsbiblioteket.summa.common.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import dk.statsbiblioteket.summa.common.util.PriorityQueue;
import java.util.Comparator;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PriorityQueueEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      PriorityQueue<Comparable<Object>> priorityQueue0 = new PriorityQueue<Comparable<Object>>();
      assertNotNull(priorityQueue0);
      
      Comparator<Comparable<Object>> comparator0 = priorityQueue0.getComparator();
      assertNotNull(comparator0);
      
      PriorityQueue<Comparable<Object>> priorityQueue1 = new PriorityQueue<Comparable<Object>>(comparator0, 4, 4);
      assertEquals("{}\n", priorityQueue1.toString());
      assertNotNull(priorityQueue1);
  }

  @Test
  public void test1()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(1, 1030);
      priorityQueue0.insert("");
      priorityQueue0.insert("");
      priorityQueue0.insert("T");
      priorityQueue0.siftDown();
      assertEquals("{T,,,}\n", priorityQueue0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "UNDEFINED";
      priorityQueue0.setValues(stringArray0, 0, true, 0);
      String string0 = priorityQueue0.insert("IN_DEVEOMENT");
      assertEquals("{}\n", priorityQueue0.toString());
      assertNotNull(string0);
      assertEquals("UNDEFINED", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "/I`_484.|]6hF;^;;/";
      stringArray0[1] = "\"Jn#";
      stringArray0[2] = "nY4";
      stringArray0[3] = "";
      priorityQueue0.setValues(stringArray0, 4, true, 4);
      assertEquals(4, priorityQueue0.getSize());
      assertEquals("{nY4,\"Jn#,/I`_484.|]6hF;^;;/,,}\n", priorityQueue0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>((Comparator<Integer>) null, 1);
      assertEquals("{}\n", priorityQueue0.toString());
      assertNotNull(priorityQueue0);
  }

  @Test
  public void test5()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      // Undeclared exception!
      try {
        priorityQueue0.removeMin();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * No values left on the heap
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      
      int int0 = priorityQueue0.getSize();
      assertEquals(0, int0);
  }

  @Test
  public void test7()  throws Throwable  {
      PriorityQueue<Comparable<Object>> priorityQueue0 = null;
      try {
        priorityQueue0 = new PriorityQueue<Comparable<Object>>(1, (-91));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * The max capacity (-91) must be larger than or equal to the initial capacity (1)
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      assertNotNull(priorityQueue0);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[4] = (Integer) 3311;
      // Undeclared exception!
      try {
        priorityQueue0.setValues(integerArray0, (int) integerArray0[4], false, 1655);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * The size (3311) must be equal to or smaller than the length of values (6)
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try {
        priorityQueue0.setValues(stringArray0, (-1467), true, (-2002));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * The maxCapacity (-2002) must be equal to or greater than size (-1467)
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      
      String[] stringArray0 = new String[12];
      // Undeclared exception!
      try {
        priorityQueue0.setValues(stringArray0, 2, false, 2);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "IN_DEVELOPMENT";
      priorityQueue0.setValues(stringArray0, (-164), true, (-164));
      priorityQueue0.insert("IN_DEVELOPMENT");
      assertEquals(-164, priorityQueue0.getSize());
  }

  @Test
  public void test12()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      assertNotNull(priorityQueue0);
      
      Integer integer0 = new Integer(1161);
      priorityQueue0.insert(integer0);
      assertEquals(1, priorityQueue0.getSize());
      
      String string0 = priorityQueue0.toString();
      assertEquals("{1161,}\n", string0);
  }

  @Test
  public void test13()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      
      String[] stringArray0 = new String[1];
      priorityQueue0.setValues(stringArray0, (-164), true, (-164));
      // Undeclared exception!
      try {
        priorityQueue0.removeMin();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * -165
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(1, 1030);
      assertNotNull(priorityQueue0);
      
      priorityQueue0.insert("");
      priorityQueue0.insert("T");
      assertEquals(2, priorityQueue0.getSize());
      assertEquals("{T,,}\n", priorityQueue0.toString());
  }

  @Test
  public void test15()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      assertNotNull(priorityQueue0);
      
      String string0 = priorityQueue0.toString();
      assertNotNull(string0);
      assertEquals("{}\n", string0);
  }
}
