/*
 * This file was automatically generated by EvoSuite
 */

package dk.statsbiblioteket.summa.support.summon.search;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import dk.statsbiblioteket.summa.support.summon.search.SolrFacetRequest;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SolrFacetRequestEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SolrFacetRequest.Facet solrFacetRequest_Facet0 = new SolrFacetRequest.Facet("q`ts^=", "or", 225, 225);
      assertNotNull(solrFacetRequest_Facet0);
      
      String string0 = solrFacetRequest_Facet0.getCombineMode();
      assertEquals(225, solrFacetRequest_Facet0.getPageSize());
      assertEquals("or", string0);
      assertEquals("q`ts^=", solrFacetRequest_Facet0.getField());
      assertNotNull(string0);
      assertEquals(225, solrFacetRequest_Facet0.getStartPage());
  }

  @Test
  public void test1()  throws Throwable  {
      SolrFacetRequest.Facet solrFacetRequest_Facet0 = new SolrFacetRequest.Facet("q`ts^=", "or", 225, 225);
      assertNotNull(solrFacetRequest_Facet0);
      
      int int0 = solrFacetRequest_Facet0.getStartPage();
      assertEquals("or", solrFacetRequest_Facet0.getCombineMode());
      assertEquals(225, solrFacetRequest_Facet0.getPageSize());
      assertEquals("q`ts^=", solrFacetRequest_Facet0.getField());
      assertEquals(225, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      SolrFacetRequest.Facet solrFacetRequest_Facet0 = new SolrFacetRequest.Facet("q`ts^=", "or", 225, 225);
      assertNotNull(solrFacetRequest_Facet0);
      
      int int0 = solrFacetRequest_Facet0.getPageSize();
      assertEquals("q`ts^=", solrFacetRequest_Facet0.getField());
      assertEquals(225, int0);
      assertEquals("or", solrFacetRequest_Facet0.getCombineMode());
      assertEquals(225, solrFacetRequest_Facet0.getStartPage());
  }

  @Test
  public void test3()  throws Throwable  {
      SolrFacetRequest.Facet solrFacetRequest_Facet0 = new SolrFacetRequest.Facet("q`ts^=", "or", 225, 225);
      assertNotNull(solrFacetRequest_Facet0);
      
      String string0 = solrFacetRequest_Facet0.getField();
      assertEquals(225, solrFacetRequest_Facet0.getStartPage());
      assertEquals(225, solrFacetRequest_Facet0.getPageSize());
      assertNotNull(string0);
      assertEquals("or", solrFacetRequest_Facet0.getCombineMode());
      assertEquals("q`ts^=", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      SolrFacetRequest.Facet solrFacetRequest_Facet0 = new SolrFacetRequest.Facet("and", "and", 16, 16);
      assertEquals(16, solrFacetRequest_Facet0.getPageSize());
      assertNotNull(solrFacetRequest_Facet0);
      assertEquals(16, solrFacetRequest_Facet0.getStartPage());
  }

  @Test
  public void test5()  throws Throwable  {
      SolrFacetRequest.Facet solrFacetRequest_Facet0 = null;
      try {
        solrFacetRequest_Facet0 = new SolrFacetRequest.Facet("", "", 16, 16);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Only 'and' and 'or' are acceptable combine modes for facets. Received ''
         */
      }
  }
}
