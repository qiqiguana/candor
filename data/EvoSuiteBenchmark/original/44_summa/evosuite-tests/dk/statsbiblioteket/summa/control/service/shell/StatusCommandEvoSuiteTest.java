/*
 * This file was automatically generated by EvoSuite
 */

package dk.statsbiblioteket.summa.control.service.shell;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import dk.statsbiblioteket.summa.common.shell.ShellContext;
import dk.statsbiblioteket.summa.common.shell.VoidShellContext;
import dk.statsbiblioteket.summa.control.api.Service;
import dk.statsbiblioteket.summa.control.service.shell.StatusCommand;
import dk.statsbiblioteket.util.rpc.ConnectionFactory;
import dk.statsbiblioteket.util.rpc.ConnectionManager;
import dk.statsbiblioteket.util.rpc.RMIConnectionFactory;
import dk.statsbiblioteket.util.rpc.StaticConnectionFactory;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class StatusCommandEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          RMIConnectionFactory<Service> rMIConnectionFactory0 = new RMIConnectionFactory<Service>();
          ConnectionManager<Service> connectionManager0 = new ConnectionManager<Service>((ConnectionFactory<? extends Service>) rMIConnectionFactory0);
          StatusCommand statusCommand0 = new StatusCommand(connectionManager0, "");
          VoidShellContext voidShellContext0 = new VoidShellContext();
          try {
            statusCommand0.invoke((ShellContext) voidShellContext0);
            fail("Expecting exception: ClassCastException");
          } catch(ClassCastException e) {
            /*
             * sun.rmi.registry.RegistryImpl_Stub cannot be cast to dk.statsbiblioteket.summa.control.api.Service
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
      StaticConnectionFactory<Service> staticConnectionFactory0 = new StaticConnectionFactory<Service>((Service) null);
      ConnectionManager<Service> connectionManager0 = new ConnectionManager<Service>((ConnectionFactory<? extends Service>) staticConnectionFactory0);
      StatusCommand statusCommand0 = new StatusCommand(connectionManager0, "\n");
      VoidShellContext voidShellContext0 = new VoidShellContext();
      try {
        statusCommand0.invoke((ShellContext) voidShellContext0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
