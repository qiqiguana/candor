/*
 * This file was automatically generated by EvoSuite
 */

package dk.statsbiblioteket.summa.common.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import dk.statsbiblioteket.summa.common.util.RangeNumber;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class RangeNumberEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      RangeNumber rangeNumber0 = new RangeNumber((-2147483635), (-2147483635), (-2147483635));
      assertNotNull(rangeNumber0);
      
      int int0 = rangeNumber0.hashCode();
      assertEquals((-2147483635), int0);
  }

  @Test
  public void test1()  throws Throwable  {
      RangeNumber rangeNumber0 = new RangeNumber((-2147483635), (-2147483635), (-2147483635));
      assertNotNull(rangeNumber0);
      
      // Undeclared exception!
      try {
        rangeNumber0.add(rangeNumber0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * The pivot(-2147483648) must not be negative or positive infinity
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      RangeNumber rangeNumber0 = new RangeNumber(1377, 1377, 1377);
      assertNotNull(rangeNumber0);
      
      RangeNumber rangeNumber1 = (RangeNumber)rangeNumber0.clone();
      assertEquals(1377, rangeNumber1.getMin());
      assertNotNull(rangeNumber1);
      assertTrue(rangeNumber1.equals(rangeNumber0));
      assertEquals(1377, rangeNumber1.getMax());
  }

  @Test
  public void test3()  throws Throwable  {
      RangeNumber rangeNumber0 = new RangeNumber(534, Integer.MIN_VALUE, 534);
      assertNotNull(rangeNumber0);
      
      RangeNumber rangeNumber1 = new RangeNumber(534, 534, 534);
      assertNotNull(rangeNumber1);
      
      // Undeclared exception!
      try {
        rangeNumber1.subtract(rangeNumber0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * The values should be logically consistent with min(2147483647) <= pivot(0> <= max(0)
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      RangeNumber rangeNumber0 = null;
      try {
        rangeNumber0 = new RangeNumber(Integer.MAX_VALUE, 1385, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * The pivot(2147483647) must not be negative or positive infinity
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      RangeNumber rangeNumber0 = new RangeNumber(1385, 1385, Integer.MAX_VALUE);
      assertNotNull(rangeNumber0);
      
      RangeNumber rangeNumber1 = rangeNumber0.min(rangeNumber0);
      assertNotNull(rangeNumber1);
      assertTrue(rangeNumber0.equals(rangeNumber1));
      assertEquals(1385, rangeNumber0.getMin());
      assertEquals(2147483647, rangeNumber1.getMax());
  }

  @Test
  public void test6()  throws Throwable  {
      RangeNumber rangeNumber0 = new RangeNumber(1385, 1385, Integer.MAX_VALUE);
      assertNotNull(rangeNumber0);
      
      RangeNumber rangeNumber1 = new RangeNumber(1385, 1385, 1385);
      assertNotNull(rangeNumber1);
      
      RangeNumber rangeNumber2 = rangeNumber1.min(rangeNumber0);
      assertTrue(rangeNumber2.equals(rangeNumber0));
      assertEquals(1385, rangeNumber2.getMin());
      assertFalse(rangeNumber1.equals(rangeNumber0));
      assertNotNull(rangeNumber2);
      assertEquals(1385, rangeNumber2.getPivot());
  }

  @Test
  public void test7()  throws Throwable  {
      RangeNumber rangeNumber0 = new RangeNumber(534, Integer.MIN_VALUE, 534);
      assertNotNull(rangeNumber0);
      
      RangeNumber rangeNumber1 = rangeNumber0.min(rangeNumber0);
      assertTrue(rangeNumber0.equals(rangeNumber1));
      assertEquals(534, rangeNumber0.getPivot());
      assertEquals(534, rangeNumber1.getMax());
      assertEquals(-2147483648, rangeNumber0.getMin());
      assertNotNull(rangeNumber1);
  }

  @Test
  public void test8()  throws Throwable  {
      RangeNumber rangeNumber0 = new RangeNumber(534, Integer.MIN_VALUE, 534);
      assertNotNull(rangeNumber0);
      
      // Undeclared exception!
      try {
        rangeNumber0.max(rangeNumber0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * The values should be logically consistent with min(-2147483648) <= pivot(534> <= max(-2147483648)
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      RangeNumber rangeNumber0 = new RangeNumber(534, Integer.MIN_VALUE, 534);
      assertNotNull(rangeNumber0);
      
      RangeNumber rangeNumber1 = new RangeNumber(534, 534, 534);
      assertNotNull(rangeNumber1);
      
      RangeNumber rangeNumber2 = rangeNumber0.max(rangeNumber1);
      assertNotNull(rangeNumber2);
      
      RangeNumber rangeNumber3 = rangeNumber1.max(rangeNumber2);
      assertTrue(rangeNumber3.equals(rangeNumber0));
      assertEquals(534, rangeNumber2.getMax());
      assertEquals(534, rangeNumber3.getPivot());
      assertNotNull(rangeNumber3);
      assertFalse(rangeNumber2.equals(rangeNumber1));
  }

  @Test
  public void test10()  throws Throwable  {
      RangeNumber rangeNumber0 = new RangeNumber((-2147483635), (-2147483635), (-2147483635));
      assertNotNull(rangeNumber0);
      
      boolean boolean0 = rangeNumber0.equals((Object) rangeNumber0);
      assertEquals(-2147483635, rangeNumber0.getMax());
      assertEquals(true, boolean0);
      assertEquals(-2147483635, rangeNumber0.getMin());
      assertEquals(-2147483635, rangeNumber0.getPivot());
  }

  @Test
  public void test11()  throws Throwable  {
      RangeNumber rangeNumber0 = new RangeNumber((-663), (-663), (-663));
      assertNotNull(rangeNumber0);
      
      boolean boolean0 = rangeNumber0.equals((Object) (-663));
      assertEquals(false, boolean0);
      assertEquals(-663, rangeNumber0.getMax());
      assertEquals(-663, rangeNumber0.getPivot());
      assertEquals(-663, rangeNumber0.getMin());
  }

  @Test
  public void test12()  throws Throwable  {
      RangeNumber rangeNumber0 = new RangeNumber((-663), (-663), (-663));
      assertNotNull(rangeNumber0);
      
      RangeNumber rangeNumber1 = rangeNumber0.add(rangeNumber0);
      assertNotNull(rangeNumber1);
      
      boolean boolean0 = rangeNumber0.equals((Object) rangeNumber1);
      assertEquals(-1326, rangeNumber1.getMax());
      assertEquals(-663, rangeNumber0.getMax());
      assertEquals(-663, rangeNumber0.getMin());
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      RangeNumber rangeNumber0 = new RangeNumber(1377, 1377, 1377);
      assertNotNull(rangeNumber0);
      
      RangeNumber rangeNumber1 = new RangeNumber(1377, (-107), 1377);
      assertNotNull(rangeNumber1);
      
      RangeNumber rangeNumber2 = rangeNumber1.max(rangeNumber0);
      assertNotNull(rangeNumber2);
      
      boolean boolean0 = rangeNumber2.equals((Object) rangeNumber1);
      assertTrue(rangeNumber0.equals(rangeNumber2));
      assertEquals(1377, rangeNumber1.getMax());
      assertFalse(rangeNumber1.equals(rangeNumber2));
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      RangeNumber rangeNumber0 = new RangeNumber((-2147483635), (-2147483635), (-2147483635));
      assertNotNull(rangeNumber0);
      
      RangeNumber rangeNumber1 = new RangeNumber((-2147483635), (-2147483635), (-1584));
      assertNotNull(rangeNumber1);
      
      boolean boolean0 = rangeNumber0.equals((Object) rangeNumber1);
      assertEquals(-1584, rangeNumber1.getMax());
      assertEquals(-2147483635, rangeNumber1.getMin());
      assertEquals(false, boolean0);
      assertEquals(-2147483635, rangeNumber1.getPivot());
  }
}
