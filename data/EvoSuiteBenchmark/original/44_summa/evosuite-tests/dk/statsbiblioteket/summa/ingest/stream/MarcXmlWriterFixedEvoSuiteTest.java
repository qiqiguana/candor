/*
 * This file was automatically generated by EvoSuite
 */

package dk.statsbiblioteket.summa.ingest.stream;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import dk.statsbiblioteket.summa.ingest.stream.MarcXmlWriterFixed;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.StringWriter;
import java.io.Writer;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.dom.DOMResult;
import javax.xml.transform.sax.SAXResult;
import javax.xml.transform.stream.StreamResult;
import org.apache.axis.message.Detail;
import org.junit.BeforeClass;
import org.marc4j.MarcException;
import org.marc4j.converter.CharConverter;
import org.marc4j.converter.impl.AnselToUnicode;
import org.marc4j.marc.Record;
import org.marc4j.marc.impl.RecordImpl;
import org.w3c.dom.Node;
import org.xml.sax.ContentHandler;
import org.xml.sax.SAXException;

@RunWith(EvoSuiteRunner.class)
public class MarcXmlWriterFixedEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Detail detail0 = new Detail();
      DOMResult dOMResult0 = new DOMResult((Node) detail0);
      MarcXmlWriterFixed marcXmlWriterFixed0 = new MarcXmlWriterFixed((Result) dOMResult0);
      marcXmlWriterFixed0.getConverter();
  }

  @Test
  public void test1()  throws Throwable  {
      DOMResult dOMResult0 = new DOMResult();
      MarcXmlWriterFixed marcXmlWriterFixed0 = new MarcXmlWriterFixed((Result) dOMResult0);
      RecordImpl recordImpl0 = new RecordImpl();
      // Undeclared exception!
      try {
        marcXmlWriterFixed0.write((Record) recordImpl0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1980);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      MarcXmlWriterFixed marcXmlWriterFixed0 = new MarcXmlWriterFixed((OutputStream) objectOutputStream0);
      assertNotNull(marcXmlWriterFixed0);
      
      boolean boolean0 = marcXmlWriterFixed0.getUnicodeNormalization();
      assertEquals(false, marcXmlWriterFixed0.hasIndent());
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8203);
      MarcXmlWriterFixed marcXmlWriterFixed0 = new MarcXmlWriterFixed((OutputStream) byteArrayOutputStream0);
      assertNotNull(marcXmlWriterFixed0);
      
      AnselToUnicode anselToUnicode0 = new AnselToUnicode(false);
      marcXmlWriterFixed0.setConverter((CharConverter) anselToUnicode0);
      char[] charArray0 = marcXmlWriterFixed0.getDataElement("");
      assertEquals(false, marcXmlWriterFixed0.hasIndent());
      assertEquals(false, marcXmlWriterFixed0.getUnicodeNormalization());
      assertNotNull(charArray0);
  }

  @Test
  public void test4()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MarcXmlWriterFixed marcXmlWriterFixed0 = new MarcXmlWriterFixed((OutputStream) pipedOutputStream0, true);
      assertNotNull(marcXmlWriterFixed0);
      
      boolean boolean0 = marcXmlWriterFixed0.hasIndent();
      assertEquals(false, marcXmlWriterFixed0.getUnicodeNormalization());
      assertEquals(true, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8220);
      MarcXmlWriterFixed marcXmlWriterFixed0 = new MarcXmlWriterFixed((OutputStream) byteArrayOutputStream0);
      marcXmlWriterFixed0.close();
      assertEquals(90, byteArrayOutputStream0.size());
      assertEquals(false, marcXmlWriterFixed0.getUnicodeNormalization());
  }

  @Test
  public void test6()  throws Throwable  {
      MarcXmlWriterFixed marcXmlWriterFixed0 = null;
      try {
        marcXmlWriterFixed0 = new MarcXmlWriterFixed((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * null OutputStream
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      MarcXmlWriterFixed marcXmlWriterFixed0 = null;
      try {
        marcXmlWriterFixed0 = new MarcXmlWriterFixed((OutputStream) objectOutputStream0, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * null encoding
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      MarcXmlWriterFixed marcXmlWriterFixed0 = null;
      try {
        marcXmlWriterFixed0 = new MarcXmlWriterFixed((Result) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * null Result
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      SAXResult sAXResult0 = new SAXResult((ContentHandler) null);
      MarcXmlWriterFixed marcXmlWriterFixed0 = null;
      try {
        marcXmlWriterFixed0 = new MarcXmlWriterFixed((Result) sAXResult0, "");
        fail("Expecting exception: MarcException");
      } catch(MarcException e) {
        /*
         * Could not compile stylesheet
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StreamResult streamResult0 = new StreamResult((Writer) stringWriter0);
      MarcXmlWriterFixed marcXmlWriterFixed0 = null;
      try {
        marcXmlWriterFixed0 = new MarcXmlWriterFixed((Result) streamResult0, (Source) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * null Source
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      MarcXmlWriterFixed marcXmlWriterFixed0 = null;
      try {
        marcXmlWriterFixed0 = new MarcXmlWriterFixed((Result) null, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * null Result
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MarcXmlWriterFixed marcXmlWriterFixed0 = new MarcXmlWriterFixed((OutputStream) byteArrayOutputStream0, true);
      marcXmlWriterFixed0.writeEndDocument();
      assertEquals(103, byteArrayOutputStream0.size());
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><collection xmlns=\"http://www.loc.gov/MARC21/slim\">\n</collection>", byteArrayOutputStream0.toString());
  }

  @Test
  public void test13()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MarcXmlWriterFixed marcXmlWriterFixed0 = new MarcXmlWriterFixed((OutputStream) pipedOutputStream0, true);
      assertNotNull(marcXmlWriterFixed0);
      
      // Undeclared exception!
      try {
        marcXmlWriterFixed0.toXml((Record) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test14()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1980);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      MarcXmlWriterFixed marcXmlWriterFixed0 = new MarcXmlWriterFixed((OutputStream) objectOutputStream0);
      assertNotNull(marcXmlWriterFixed0);
      
      char[] charArray0 = marcXmlWriterFixed0.getDataElement("v");
      assertEquals(false, marcXmlWriterFixed0.hasIndent());
      assertEquals(false, marcXmlWriterFixed0.getUnicodeNormalization());
      assertNotNull(charArray0);
  }

  @Test
  public void test15()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8220);
      MarcXmlWriterFixed marcXmlWriterFixed0 = new MarcXmlWriterFixed((OutputStream) byteArrayOutputStream0);
      assertNotNull(marcXmlWriterFixed0);
      
      AnselToUnicode anselToUnicode0 = new AnselToUnicode(true);
      marcXmlWriterFixed0.setConverter((CharConverter) anselToUnicode0);
      assertEquals(false, marcXmlWriterFixed0.getUnicodeNormalization());
      
      marcXmlWriterFixed0.setUnicodeNormalization(true);
      marcXmlWriterFixed0.getDataElement("");
      assertEquals(true, marcXmlWriterFixed0.getUnicodeNormalization());
  }
}
