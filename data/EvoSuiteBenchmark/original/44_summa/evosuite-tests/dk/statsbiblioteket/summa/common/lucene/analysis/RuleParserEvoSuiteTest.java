/*
 * This file was automatically generated by EvoSuite
 */

package dk.statsbiblioteket.summa.common.lucene.analysis;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import dk.statsbiblioteket.summa.common.lucene.analysis.RuleParser;
import java.util.Map;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class RuleParserEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Map<String, String> map0 = RuleParser.parse("<");
      assertEquals(true, map0.isEmpty());
  }

  @Test
  public void test1()  throws Throwable  {
      RuleParser ruleParser0 = new RuleParser();
      assertNotNull(ruleParser0);
  }

  @Test
  public void test2()  throws Throwable  {
      String string0 = RuleParser.sanitize("<", false, "<");
      assertEquals("<", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      String string0 = RuleParser.sanitize("<", true, "<");
      assertNotNull(string0);
      assertEquals("<<", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      String string0 = RuleParser.sanitize((String) null, true, (String) null);
      assertNull(string0);
  }

  @Test
  public void test5()  throws Throwable  {
      String string0 = RuleParser.sanitize("", true, "");
      assertEquals("", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      String string0 = RuleParser.sanitize((String) null, false, (String) null);
      assertEquals("", string0);
  }
}
