/*
 * This file was automatically generated by EvoSuite
 */

package dk.statsbiblioteket.summa.common.lucene.distribution;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import dk.statsbiblioteket.summa.common.lucene.distribution.TermEntry;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TermEntryEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      String[] stringArray0 = new String[1];
      TermEntry termEntry0 = new TermEntry("l^1_DSNRz]\"`($O ", stringArray0);
      String[] stringArray1 = termEntry0.getHeadings();
      assertSame(stringArray1, stringArray0);
  }

  @Test
  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[1];
      TermEntry termEntry0 = new TermEntry("l^1_DSNRz]\"`($O ", stringArray0);
      // Undeclared exception!
      try {
        termEntry0.getStat(121);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 121
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[1];
      TermEntry termEntry0 = new TermEntry("a=", stringArray0);
      int int0 = termEntry0.compareTo(termEntry0);
      assertEquals(0, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = TermEntry.comparePersistent("g)#'{3=AK5\t0\t0", "g)#'{3=AK5\t0\t0");
      assertEquals(4, int0);
  }

  @Test
  public void test4()  throws Throwable  {
      String[] stringArray0 = new String[2];
      TermEntry termEntry0 = null;
      try {
        termEntry0 = new TermEntry("Q", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * The persistent String 'Q' was split in 1 tokens. Expected 2 tokens due to heading ''
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      String[] stringArray0 = new String[3];
      TermEntry termEntry0 = new TermEntry("g)#'{3=AK5\t0\t0", stringArray0);
      assertEquals("g)#'{3=AK5", termEntry0.getTerm());
  }

  @Test
  public void test6()  throws Throwable  {
      long[] longArray0 = new long[1];
      String[] stringArray0 = new String[6];
      TermEntry termEntry0 = null;
      try {
        termEntry0 = new TermEntry((String) null, longArray0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Term must be defined, but it was 'null'
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      long[] longArray0 = new long[4];
      String[] stringArray0 = new String[31];
      TermEntry termEntry0 = null;
      try {
        termEntry0 = new TermEntry("", longArray0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Term must be defined, but it was ''
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      String[] stringArray0 = new String[1];
      long[] longArray0 = new long[3];
      TermEntry termEntry0 = null;
      try {
        termEntry0 = new TermEntry("a=", longArray0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * The term 'a=' has 3 stats but 1. The number of headings should be one more than the number of stats
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      long[] longArray0 = new long[2];
      String[] stringArray0 = new String[3];
      TermEntry termEntry0 = new TermEntry("g)#'{3=AK5", longArray0, stringArray0);
      assertNotNull(termEntry0);
      
      int[] intArray0 = new int[6];
      long long0 = termEntry0.getSum(intArray0);
      assertEquals(0L, long0);
  }

  @Test
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[1];
      TermEntry termEntry0 = new TermEntry("8k]", stringArray0);
      try {
        termEntry0.getIndex("a~F:<!");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * Unable to locate 'a~F:<! in 
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "8k]";
      TermEntry termEntry0 = new TermEntry("8k]", stringArray0);
      assertNotNull(termEntry0);
      
      int int0 = termEntry0.getIndex("8k]");
      assertEquals((-1), int0);
  }

  @Test
  public void test12()  throws Throwable  {
      long[] longArray0 = new long[2];
      String[] stringArray0 = new String[3];
      TermEntry termEntry0 = new TermEntry("g)#'{3=AK5", longArray0, stringArray0);
      assertNotNull(termEntry0);
      
      String string0 = termEntry0.toPersistent();
      assertNotNull(string0);
      assertEquals("g)#'{3=AK5\t0\t0", string0);
  }

  @Test
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[1];
      TermEntry termEntry0 = new TermEntry("a=", stringArray0);
      String string0 = termEntry0.toPersistent();
      assertEquals("a=", string0);
  }

  @Test
  public void test14()  throws Throwable  {
      long[] longArray0 = new long[9];
      String[] stringArray0 = new String[10];
      TermEntry termEntry0 = new TermEntry("adO2nceBuf6fer(<K()", longArray0, stringArray0);
      TermEntry termEntry1 = new TermEntry("-8oAhA_.P[-J%!n.", longArray0, stringArray0);
      // Undeclared exception!
      try {
        termEntry0.absorb(termEntry1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * The term must match. This term was 'adO2nceBuf6fer(<K()', other term was '-8oAhA_.P[-J%!n.'
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[1];
      TermEntry termEntry0 = new TermEntry("E;HlCooi", stringArray0);
      long[] longArray0 = new long[3];
      String[] stringArray1 = new String[4];
      TermEntry termEntry1 = new TermEntry("E;HlCooi", longArray0, stringArray1);
      // Undeclared exception!
      try {
        termEntry0.absorb(termEntry1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * The number of stats must match. This term had 0 while the other had 3
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      long[] longArray0 = new long[2];
      String[] stringArray0 = new String[3];
      TermEntry termEntry0 = new TermEntry("g)#'{3=AK5", longArray0, stringArray0);
      termEntry0.absorb(termEntry0);
      assertEquals("g)#'{3=AK5\t0\t0", termEntry0.toPersistent());
  }

  @Test
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[1];
      TermEntry termEntry0 = new TermEntry("a=", stringArray0);
      TermEntry termEntry1 = termEntry0.add(termEntry0, stringArray0);
      assertEquals("TermEntry('a=', [])", termEntry1.toString());
  }

  @Test
  public void test18()  throws Throwable  {
      long[] longArray0 = new long[2];
      String[] stringArray0 = new String[3];
      TermEntry termEntry0 = new TermEntry("g)#'{3=AK5", longArray0, stringArray0);
      TermEntry termEntry1 = new TermEntry("scheme rdequired", longArray0, stringArray0);
      // Undeclared exception!
      try {
        termEntry1.add(termEntry0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * The term must match. This term was 'scheme rdequired', other term was 'g)#'{3=AK5'
         */
      }
  }

  @Test
  public void test19()  throws Throwable  {
      long[] longArray0 = new long[2];
      String[] stringArray0 = new String[3];
      TermEntry termEntry0 = new TermEntry("g)#'{3=AK5", longArray0, stringArray0);
      assertNotNull(termEntry0);
      
      String string0 = termEntry0.toString();
      assertNotNull(string0);
      assertEquals("TermEntry('g)#'{3=AK5', [0, 0])", string0);
  }
}
