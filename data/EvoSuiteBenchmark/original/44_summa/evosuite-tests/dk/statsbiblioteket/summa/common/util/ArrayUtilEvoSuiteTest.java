/*
 * This file was automatically generated by EvoSuite
 */

package dk.statsbiblioteket.summa.common.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import dk.statsbiblioteket.summa.common.util.ArrayUtil;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ArrayUtilEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ArrayUtil arrayUtil0 = new ArrayUtil();
      assertNotNull(arrayUtil0);
  }

  @Test
  public void test1()  throws Throwable  {
      int[] intArray0 = new int[9];
      int[] intArray1 = ArrayUtil.mergeArrays(intArray0, intArray0, false, false);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test
  public void test2()  throws Throwable  {
      int[] intArray0 = new int[9];
      int[] intArray1 = new int[1];
      intArray1[0] = 8;
      int[] intArray2 = ArrayUtil.mergeArrays(intArray0, intArray1, true, true);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray2);
  }

  @Test
  public void test3()  throws Throwable  {
      int[] intArray0 = new int[9];
      ArrayUtil.reverse(intArray0);
  }

  @Test
  public void test4()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      ArrayUtil.reverse(objectArray0);
  }

  @Test
  public void test5()  throws Throwable  {
      int[] intArray0 = new int[12];
      int[] intArray1 = ArrayUtil.makeRoom(intArray0, 1244, (double) 0, 0, 0);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test
  public void test6()  throws Throwable  {
      int[] intArray0 = new int[9];
      int[] intArray1 = ArrayUtil.makeRoom(intArray0, 0, (double) 8, 0, 8);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test
  public void test7()  throws Throwable  {
      int[] intArray0 = new int[9];
      int[] intArray1 = new int[1];
      int[] intArray2 = ArrayUtil.mergeArrays(intArray1, intArray0, true, true);
      assertNotNull(intArray2);
      
      int[] intArray3 = ArrayUtil.makeRoom(intArray2, 0, (double) 8, 0, 8);
      assertNotNull(intArray3);
      assertNotSame(intArray3, intArray2);
  }

  @Test
  public void test8()  throws Throwable  {
      long[] longArray0 = new long[9];
      long[] longArray1 = ArrayUtil.makeRoom(longArray0, 1588, (double) 0L, 0, 0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
  }

  @Test
  public void test9()  throws Throwable  {
      long[] longArray0 = new long[6];
      long[] longArray1 = ArrayUtil.makeRoom(longArray0, 0, (double) 0L, 0, 0);
      assertSame(longArray1, longArray0);
  }

  @Test
  public void test10()  throws Throwable  {
      long[] longArray0 = new long[10];
      long[] longArray1 = ArrayUtil.makeRoom(longArray0, 28, (double) 28, 28, 28);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
  }
}
