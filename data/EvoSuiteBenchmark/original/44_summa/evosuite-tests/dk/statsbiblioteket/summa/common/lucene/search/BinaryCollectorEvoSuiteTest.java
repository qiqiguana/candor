/*
 * This file was automatically generated by EvoSuite
 */

package dk.statsbiblioteket.summa.common.lucene.search;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import dk.statsbiblioteket.summa.common.lucene.search.BinaryCollector;
import java.io.IOException;
import org.apache.lucene.index.AtomicReaderContext;
import org.apache.lucene.search.Scorer;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BinaryCollectorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BinaryCollector binaryCollector0 = new BinaryCollector(1746);
      assertNotNull(binaryCollector0);
      
      // Undeclared exception!
      try {
        binaryCollector0.setNextReader((AtomicReaderContext) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      BinaryCollector binaryCollector0 = new BinaryCollector(0);
      assertNotNull(binaryCollector0);
      
      int int0 = binaryCollector0.size();
      assertEquals(0, int0);
      assertEquals(0, binaryCollector0.base);
      assertEquals((-1.0F), binaryCollector0.min, 0.01F);
      assertEquals(0, binaryCollector0.maxHits);
  }

  @Test
  public void test2()  throws Throwable  {
      BinaryCollector binaryCollector0 = new BinaryCollector(20);
      assertNotNull(binaryCollector0);
      
      binaryCollector0.setScorer((Scorer) null);
      assertEquals(0, binaryCollector0.count);
      assertEquals((-1.0F), binaryCollector0.min, 0.01F);
      assertEquals(0, binaryCollector0.base);
      assertEquals(20, binaryCollector0.maxHits);
  }

  @Test
  public void test3()  throws Throwable  {
      BinaryCollector binaryCollector0 = new BinaryCollector(0);
      assertNotNull(binaryCollector0);
      
      binaryCollector0.collect(0);
      assertEquals(0, binaryCollector0.base);
      assertEquals((-1.0F), binaryCollector0.min, 0.01F);
      assertEquals(0, binaryCollector0.count);
      assertEquals(0, binaryCollector0.maxHits);
  }

  @Test
  public void test4()  throws Throwable  {
      BinaryCollector binaryCollector0 = new BinaryCollector(0);
      assertNotNull(binaryCollector0);
      
      binaryCollector0.reset();
      assertEquals(0, binaryCollector0.maxHits);
      assertEquals(0, binaryCollector0.count);
      assertEquals(0, binaryCollector0.base);
      assertEquals((-1.0F), binaryCollector0.min, 0.01F);
      assertEquals("", binaryCollector0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      BinaryCollector binaryCollector0 = new BinaryCollector(1746);
      assertNotNull(binaryCollector0);
      
      boolean boolean0 = binaryCollector0.acceptsDocsOutOfOrder();
      assertEquals(0, binaryCollector0.count);
      assertEquals(false, boolean0);
      assertEquals((-1.0F), binaryCollector0.min, 0.01F);
      assertEquals(1746, binaryCollector0.maxHits);
      assertEquals(0, binaryCollector0.base);
  }

  @Test
  public void test6()  throws Throwable  {
      BinaryCollector binaryCollector0 = new BinaryCollector(0);
      assertNotNull(binaryCollector0);
      
      // Undeclared exception!
      try {
        binaryCollector0.collect(1, 2037);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * -1
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      BinaryCollector binaryCollector0 = new BinaryCollector(1746);
      assertNotNull(binaryCollector0);
      
      binaryCollector0.collect(860, 860);
      binaryCollector0.collect(1746, 0.0F);
      assertEquals(1, binaryCollector0.count);
      assertEquals(1, binaryCollector0.size());
  }

  @Test
  public void test8()  throws Throwable  {
      BinaryCollector binaryCollector0 = new BinaryCollector(2037);
      binaryCollector0.collect(1, 2037);
      binaryCollector0.collect(2037, 2037);
      assertEquals(2037.0F, binaryCollector0.min, 0.01F);
      assertEquals(2, binaryCollector0.size());
  }

  @Test
  public void test9()  throws Throwable  {
      BinaryCollector binaryCollector0 = new BinaryCollector(13);
      assertNotNull(binaryCollector0);
      
      // Undeclared exception!
      try {
        binaryCollector0.collect(1366, (-1.0F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      BinaryCollector binaryCollector0 = new BinaryCollector((-1));
      assertNotNull(binaryCollector0);
      
      // Undeclared exception!
      try {
        binaryCollector0.getPosition(Integer.MIN_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * -2147483648
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      BinaryCollector binaryCollector0 = new BinaryCollector(0);
      assertNotNull(binaryCollector0);
      
      // Undeclared exception!
      try {
        binaryCollector0.getPosition(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * There is only 0 elements and element #0 was requested
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      BinaryCollector binaryCollector0 = new BinaryCollector(0);
      assertNotNull(binaryCollector0);
      
      // Undeclared exception!
      try {
        binaryCollector0.getValue((-248));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * -248
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      BinaryCollector binaryCollector0 = new BinaryCollector(128);
      assertNotNull(binaryCollector0);
      
      // Undeclared exception!
      try {
        binaryCollector0.getValue(128);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * There is only 0 elements and element #128 was requested
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      BinaryCollector binaryCollector0 = new BinaryCollector(13);
      assertEquals(0, binaryCollector0.count);
      assertNotNull(binaryCollector0);
      
      binaryCollector0.count = 548;
      String string0 = binaryCollector0.toString();
      assertEquals("(0, 0.0) (0, 0.0) (0, 0.0) (0, 0.0) (0, 0.0) (0, 0.0) (0, 0.0) (0, 0.0) (0, 0.0) (0, 0.0) ...", string0);
  }

  @Test
  public void test15()  throws Throwable  {
      BinaryCollector binaryCollector0 = new BinaryCollector(1746);
      binaryCollector0.collect(860, 860);
      String string0 = binaryCollector0.toString();
      assertEquals(860.0F, binaryCollector0.min, 0.01F);
      assertEquals("(860, 860.0)", string0);
  }
}
