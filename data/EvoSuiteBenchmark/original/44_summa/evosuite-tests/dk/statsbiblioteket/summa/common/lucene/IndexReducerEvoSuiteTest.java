/*
 * This file was automatically generated by EvoSuite
 */

package dk.statsbiblioteket.summa.common.lucene;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import dk.statsbiblioteket.summa.common.lucene.IndexReducer;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.lucene.index.IndexNotFoundException;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class IndexReducerEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      IndexReducer indexReducer0 = new IndexReducer();
      assertNotNull(indexReducer0);
  }

  @Test
  public void test1()  throws Throwable  {
      File file0 = new File(".", ".");
      try {
        IndexReducer.reduce(file0, 0.75);
        fail("Expecting exception: IndexNotFoundException");
      } catch(IndexNotFoundException e) {
        /*
         * no segments* file found in org.apache.lucene.store.NIOFSDirectory@/mnt/fastdata/ac1gf/SF110/dist/44_summa lockFactory=org.apache.lucene.store.NativeFSLockFactory@21f5b041: files: [hs_err_pid18334.log, hs_err_pid18459.log, hs_err_pid18233.log, summa.jar]
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      File file0 = new File("Veiq[}A");
      try {
        IndexReducer.reduce(file0, (-1262.6895955796556));
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
        /*
         * The stated index location '/mnt/fastdata/ac1gf/SF110/dist/44_summa/Veiq[}A' does not exist
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      File file0 = new File("");
      File file1 = new File(file0, "");
      // Undeclared exception!
      try {
        IndexReducer.reduce(file1, (-24.069462855847227));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * The fraction must be > 0 and <= 1.0. it was '-24.069462855847227'
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      File file0 = new File("", "");
      // Undeclared exception!
      try {
        IndexReducer.reduce(file0, 341.42593705495744);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * The fraction must be > 0 and <= 1.0. it was '341.42593705495744'
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          File file0 = new File("", "");
          // Undeclared exception!
          try {
            IndexReducer.reduce(file0, 1.0);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission /write.lock write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.RandomAccessFile.<init>(RandomAccessFile.java:208)
             * org.apache.lucene.store.NativeFSLock.obtain(NativeFSLockFactory.java:203)
             * org.apache.lucene.store.Lock.obtain(Lock.java:72)
             * org.apache.lucene.index.IndexWriter.<init>(IndexWriter.java:602)
             * dk.statsbiblioteket.summa.common.lucene.IndexReducer.reduce(IndexReducer.java:98)
             * sun.reflect.GeneratedMethodAccessor86.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
