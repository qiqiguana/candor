/*
 * This file was automatically generated by EvoSuite
 */

package dk.statsbiblioteket.summa.common.lucene.search;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import dk.statsbiblioteket.summa.common.lucene.search.TopCollector;
import java.io.IOException;
import org.apache.lucene.index.AtomicReaderContext;
import org.apache.lucene.search.Scorer;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TopCollectorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      TopCollector topCollector0 = new TopCollector(128);
      assertNotNull(topCollector0);
      
      boolean boolean0 = topCollector0.acceptsDocsOutOfOrder();
      assertEquals(128, topCollector0.maxHits);
      assertEquals((-1.0F), topCollector0.min, 0.01F);
      assertEquals(0, topCollector0.count);
      assertEquals(0, topCollector0.base);
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      TopCollector topCollector0 = new TopCollector(128);
      assertNotNull(topCollector0);
      
      topCollector0.reset();
      assertEquals(0, topCollector0.base);
      assertEquals(0, topCollector0.count);
      assertEquals(128, topCollector0.maxHits);
      assertEquals((-1.0F), topCollector0.min, 0.01F);
  }

  @Test
  public void test2()  throws Throwable  {
      TopCollector topCollector0 = new TopCollector(10);
      assertNotNull(topCollector0);
      
      int int0 = topCollector0.size();
      assertEquals(0, topCollector0.base);
      assertEquals((-1.0F), topCollector0.min, 0.01F);
      assertEquals(0, int0);
      assertEquals(10, topCollector0.maxHits);
  }

  @Test
  public void test3()  throws Throwable  {
      TopCollector topCollector0 = new TopCollector(524288);
      assertNotNull(topCollector0);
      
      topCollector0.setScorer((Scorer) null);
      assertEquals((-1.0F), topCollector0.min, 0.01F);
      assertEquals(0, topCollector0.base);
      assertEquals(524288, topCollector0.maxHits);
      assertEquals(0, topCollector0.count);
  }

  @Test
  public void test4()  throws Throwable  {
      TopCollector topCollector0 = new TopCollector(1541);
      assertNotNull(topCollector0);
      
      topCollector0.collect(1126);
      assertEquals(0, topCollector0.base);
      assertEquals(1541, topCollector0.maxHits);
      assertEquals((-1.0F), topCollector0.min, 0.01F);
      assertEquals(0, topCollector0.count);
      assertEquals("", topCollector0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      TopCollector topCollector0 = new TopCollector(1);
      // Undeclared exception!
      try {
        topCollector0.setNextReader((AtomicReaderContext) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      TopCollector topCollector0 = new TopCollector(1541);
      assertNotNull(topCollector0);
      
      topCollector0.collect(1, 1541);
      topCollector0.collect(1866, 1541);
      assertEquals(1541.0F, topCollector0.min, 0.01F);
      assertEquals(1541, topCollector0.maxHits);
  }

  @Test
  public void test7()  throws Throwable  {
      TopCollector topCollector0 = new TopCollector(661);
      assertNotNull(topCollector0);
      
      topCollector0.collect(661, 1257.0154F);
      topCollector0.collect(679, 679);
      assertEquals(1, topCollector0.count);
      assertEquals("(661, 1257.0154)", topCollector0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      TopCollector topCollector0 = new TopCollector(1541);
      topCollector0.count = 1541;
      topCollector0.collect(1866, 1541);
      assertEquals(1541, topCollector0.count);
      assertEquals("(1866, 1541.0) (0, 0.0) (0, 0.0) (0, 0.0) (0, 0.0) (0, 0.0) (0, 0.0) (0, 0.0) (0, 0.0) (0, 0.0) ...", topCollector0.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      TopCollector topCollector0 = new TopCollector(360);
      assertNotNull(topCollector0);
      
      // Undeclared exception!
      try {
        topCollector0.getPosition((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * -1
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      TopCollector topCollector0 = new TopCollector(10);
      assertNotNull(topCollector0);
      
      // Undeclared exception!
      try {
        topCollector0.getPosition(10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * There is only 0 elements and element #10 was requested
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      TopCollector topCollector0 = new TopCollector(125);
      assertNotNull(topCollector0);
      
      // Undeclared exception!
      try {
        topCollector0.getValue((-473));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * -473
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      TopCollector topCollector0 = new TopCollector(524288);
      assertNotNull(topCollector0);
      
      // Undeclared exception!
      try {
        topCollector0.getValue(524288);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * There is only 0 elements and element #524288 was requested
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      TopCollector topCollector0 = new TopCollector(1541);
      assertNotNull(topCollector0);
      
      topCollector0.collect(1, 1541);
      String string0 = topCollector0.toString();
      assertEquals(1541.0F, topCollector0.min, 0.01F);
      assertEquals("(1, 1541.0)", string0);
  }

  @Test
  public void test14()  throws Throwable  {
      TopCollector topCollector0 = new TopCollector(1541);
      assertEquals(0, topCollector0.count);
      assertNotNull(topCollector0);
      
      topCollector0.count = 1541;
      String string0 = topCollector0.toString();
      assertEquals("(0, 0.0) (0, 0.0) (0, 0.0) (0, 0.0) (0, 0.0) (0, 0.0) (0, 0.0) (0, 0.0) (0, 0.0) (0, 0.0) ...", string0);
  }
}
