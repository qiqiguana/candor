/*
 * This file was automatically generated by EvoSuite
 */

package dk.statsbiblioteket.summa.common.strings;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import dk.statsbiblioteket.summa.common.strings.CharSequenceReader;
import java.io.IOException;
import javax.swing.text.Segment;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class CharSequenceReaderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      CharSequenceReader charSequenceReader0 = null;
      try {
        charSequenceReader0 = new CharSequenceReader((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * Input CharSequence is null
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      CharSequenceReader charSequenceReader0 = new CharSequenceReader((CharSequence) "7E3!]T7=j?x&MGb5#");
      assertNotNull(charSequenceReader0);
      
      // Undeclared exception!
      try {
        charSequenceReader0.reset((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * Can not reset internal CharSequence to null
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      CharSequenceReader charSequenceReader0 = new CharSequenceReader((CharSequence) "/mnt/fastdata/ac1gf/SF110/dist/44_summa");
      assertNotNull(charSequenceReader0);
      
      long long0 = charSequenceReader0.skip(1L);
      assertEquals(110, charSequenceReader0.read());
      assertEquals(1L, long0);
  }

  @Test
  public void test3()  throws Throwable  {
      CharSequenceReader charSequenceReader0 = new CharSequenceReader((CharSequence) "W P");
      char[] charArray0 = new char[7];
      charSequenceReader0.close();
      try {
        charSequenceReader0.read(charArray0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Reading from a closed CharSequenceReader
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      CharSequenceReader charSequenceReader0 = new CharSequenceReader((CharSequence) "\u97D3\u56FD\u8A9E");
      assertNotNull(charSequenceReader0);
      
      char[] charArray0 = new char[7];
      int int0 = charSequenceReader0.read(charArray0);
      assertEquals(-1, charSequenceReader0.read());
      assertEquals(2, int0);
  }

  @Test
  public void test5()  throws Throwable  {
      CharSequenceReader charSequenceReader0 = new CharSequenceReader((CharSequence) "\u97D3\u56FD\u8A9E");
      assertNotNull(charSequenceReader0);
      
      char[] charArray0 = new char[7];
      int int0 = charSequenceReader0.read(charArray0, (int) 'o', 57);
      assertEquals(22269, charSequenceReader0.read());
      assertEquals((-1), int0);
  }

  @Test
  public void test6()  throws Throwable  {
      CharSequenceReader charSequenceReader0 = new CharSequenceReader((CharSequence) "W P");
      assertNotNull(charSequenceReader0);
      
      int int0 = charSequenceReader0.read();
      assertEquals(80, charSequenceReader0.read());
      assertEquals(32, int0);
  }

  @Test
  public void test7()  throws Throwable  {
      Segment segment0 = new Segment();
      CharSequenceReader charSequenceReader0 = new CharSequenceReader((CharSequence) segment0);
      assertNotNull(charSequenceReader0);
      
      int int0 = charSequenceReader0.read();
      assertEquals((-1), int0);
  }
}
