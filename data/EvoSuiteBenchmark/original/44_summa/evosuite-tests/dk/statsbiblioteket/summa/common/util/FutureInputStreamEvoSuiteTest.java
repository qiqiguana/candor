/*
 * This file was automatically generated by EvoSuite
 */

package dk.statsbiblioteket.summa.common.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import dk.statsbiblioteket.summa.common.util.FutureInputStream;
import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class FutureInputStreamEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      FutureInputStream futureInputStream0 = new FutureInputStream((InputStream) dataInputStream0);
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try {
        futureInputStream0.read(byteArray0, 0, (-1757));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FutureInputStream futureInputStream0 = new FutureInputStream((InputStream) pipedInputStream0);
      boolean boolean0 = futureInputStream0.isClosed();
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      FutureInputStream futureInputStream0 = new FutureInputStream((InputStream) null);
      // Undeclared exception!
      try {
        futureInputStream0.reset();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FutureInputStream futureInputStream0 = new FutureInputStream((InputStream) pipedInputStream0);
      futureInputStream0.mark((-607));
      assertEquals(false, futureInputStream0.isClosed());
  }

  @Test
  public void test4()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FutureInputStream futureInputStream0 = new FutureInputStream((InputStream) pipedInputStream0);
      futureInputStream0.setDoNotCloseSource(false);
      assertEquals(false, futureInputStream0.isClosed());
  }

  @Test
  public void test5()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FutureInputStream futureInputStream0 = new FutureInputStream((InputStream) pipedInputStream0);
      futureInputStream0.markSupported();
      assertEquals(false, futureInputStream0.isClosed());
  }

  @Test
  public void test6()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FutureInputStream futureInputStream0 = new FutureInputStream((InputStream) pipedInputStream0);
      futureInputStream0.skip(0L);
      assertEquals(false, futureInputStream0.isClosed());
  }

  @Test
  public void test7()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      FutureInputStream futureInputStream0 = new FutureInputStream((InputStream) bufferedInputStream0);
      try {
        futureInputStream0.read();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Stream closed
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FutureInputStream futureInputStream0 = new FutureInputStream((InputStream) pipedInputStream0);
      futureInputStream0.available();
      assertEquals(false, futureInputStream0.isClosed());
  }

  @Test
  public void test9()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FutureInputStream futureInputStream0 = new FutureInputStream((InputStream) pipedInputStream0);
      byte[] byteArray0 = new byte[7];
      try {
        futureInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Pipe not connected
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      FutureInputStream futureInputStream0 = new FutureInputStream((InputStream) null);
      boolean boolean0 = futureInputStream0.waitForClose(0L);
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FutureInputStream futureInputStream0 = new FutureInputStream((InputStream) pipedInputStream0);
      assertEquals(false, futureInputStream0.isClosed());
      
      futureInputStream0.close();
      futureInputStream0.close();
      assertEquals(true, futureInputStream0.isClosed());
  }
}
