/*
 * This file was automatically generated by EvoSuite
 */

package dk.statsbiblioteket.summa.common.lucene.analysis;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import dk.statsbiblioteket.summa.common.lucene.analysis.LowerCasingReader;
import dk.statsbiblioteket.util.reader.CircularCharBuffer;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.FileDescriptor;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.StringReader;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class LowerCasingReaderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      LowerCasingReader lowerCasingReader0 = new LowerCasingReader((Reader) pipedReader0);
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) pipedReader0, 287);
      LowerCasingReader lowerCasingReader1 = lowerCasingReader0.setSource((Reader) lineNumberReader0);
      assertEquals(true, lowerCasingReader1.markSupported());
  }

  @Test
  public void test1()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LowerCasingReader lowerCasingReader0 = new LowerCasingReader((Reader) charArrayReader0);
      String string0 = lowerCasingReader0.transform("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileReader fileReader0 = new FileReader(fileDescriptor0);
      LowerCasingReader lowerCasingReader0 = new LowerCasingReader((Reader) fileReader0);
      char[] charArray0 = lowerCasingReader0.transformToChars(' ');
      assertNotNull(charArray0);
  }

  @Test
  public void test3()  throws Throwable  {
      LowerCasingReader lowerCasingReader0 = new LowerCasingReader((Reader) null);
      LowerCasingReader lowerCasingReader1 = lowerCasingReader0.clone();
      int int0 = lowerCasingReader1.read();
      assertEquals((-1), int0);
  }

  @Test
  public void test4()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LowerCasingReader lowerCasingReader0 = new LowerCasingReader((Reader) charArrayReader0);
      assertEquals(-1, charArrayReader0.read());
      
      int int0 = lowerCasingReader0.read();
      assertEquals((-1), int0);
  }

  @Test
  public void test5()  throws Throwable  {
      LowerCasingReader lowerCasingReader0 = new LowerCasingReader((Reader) null);
      LowerCasingReader lowerCasingReader1 = lowerCasingReader0.clone();
      char[] charArray0 = new char[4];
      int int0 = lowerCasingReader1.read(charArray0);
      assertEquals((-1), int0);
  }

  @Test
  public void test6()  throws Throwable  {
      char[] charArray0 = new char[3];
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) byteArrayInputStream0);
      InputStreamReader inputStreamReader0 = new InputStreamReader((InputStream) bufferedInputStream0);
      LowerCasingReader lowerCasingReader0 = new LowerCasingReader((Reader) inputStreamReader0);
      // Undeclared exception!
      int int0 = 0;
      try {
        int0 = lowerCasingReader0.read(charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      LowerCasingReader lowerCasingReader0 = new LowerCasingReader((Reader) null);
      LowerCasingReader lowerCasingReader1 = lowerCasingReader0.clone();
      CircularCharBuffer circularCharBuffer0 = new CircularCharBuffer(0, 0);
      int int0 = lowerCasingReader1.read(circularCharBuffer0, 0);
      assertEquals((-1), int0);
      assertEquals(true, circularCharBuffer0.isEmpty());
  }

  @Test
  public void test8()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v*\"p3[LnhHIo");
      BufferedReader bufferedReader0 = new BufferedReader((Reader) stringReader0);
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) bufferedReader0);
      PushbackReader pushbackReader0 = new PushbackReader((Reader) lineNumberReader0);
      LowerCasingReader lowerCasingReader0 = new LowerCasingReader((Reader) pushbackReader0);
      CircularCharBuffer circularCharBuffer0 = new CircularCharBuffer(19, 19);
      int int0 = lowerCasingReader0.read(circularCharBuffer0, 19);
      assertEquals((-1), int0);
      assertEquals("", circularCharBuffer0.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      LowerCasingReader lowerCasingReader0 = new LowerCasingReader((Reader) pipedReader0);
      char[] charArray0 = new char[3];
      char[] charArray1 = lowerCasingReader0.transformToChars(charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
  }

  @Test
  public void test10()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      LowerCasingReader lowerCasingReader0 = new LowerCasingReader((Reader) pipedReader0);
      char[] charArray0 = new char[4];
      lowerCasingReader0.transformToCharsAllowInplace(charArray0);
  }
}
