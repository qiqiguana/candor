/*
 * This file was automatically generated by EvoSuite
 */

package dk.statsbiblioteket.summa.common.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import dk.statsbiblioteket.summa.common.util.CopyingInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import org.archive.io.ReplayInputStream;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class CopyingInputStreamEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) pipedInputStream0);
      CopyingInputStream copyingInputStream0 = null;
      try {
        copyingInputStream0 = new CopyingInputStream((InputStream) dataInputStream0, (OutputStream) null, false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * OutputStream was null
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      CopyingInputStream copyingInputStream0 = null;
      try {
        copyingInputStream0 = new CopyingInputStream((InputStream) null, (OutputStream) pipedOutputStream0, false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * InputStream was null
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) pipedInputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PrintStream printStream0 = new PrintStream((OutputStream) pipedOutputStream0, false);
      CopyingInputStream copyingInputStream0 = new CopyingInputStream((InputStream) pushbackInputStream0, (OutputStream) printStream0, false);
      copyingInputStream0.close();
      assertEquals(false, copyingInputStream0.markSupported());
  }

  @Test
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(122);
      CopyingInputStream copyingInputStream0 = new CopyingInputStream((InputStream) byteArrayInputStream0, (OutputStream) byteArrayOutputStream0, false);
      int int0 = copyingInputStream0.read();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, int0);
  }

  @Test
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ReplayInputStream replayInputStream0 = new ReplayInputStream(byteArray0, (long) (byte)0, (-784L), (String) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      CopyingInputStream copyingInputStream0 = new CopyingInputStream((InputStream) replayInputStream0, (OutputStream) byteArrayOutputStream0, true);
      assertNotNull(copyingInputStream0);
      
      int int0 = copyingInputStream0.read();
      assertEquals((-1), int0);
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(122);
      CopyingInputStream copyingInputStream0 = new CopyingInputStream((InputStream) byteArrayInputStream0, (OutputStream) byteArrayOutputStream0, false);
      long long0 = copyingInputStream0.skip((long) (byte)77);
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals(3L, long0);
  }

  @Test
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ReplayInputStream replayInputStream0 = new ReplayInputStream(byteArray0, (long) (byte)0, (-784L), (String) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      CopyingInputStream copyingInputStream0 = new CopyingInputStream((InputStream) replayInputStream0, (OutputStream) byteArrayOutputStream0, true);
      copyingInputStream0.close();
      assertEquals(0, copyingInputStream0.available());
  }
}
