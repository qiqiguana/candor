/*
 * This file was automatically generated by EvoSuite
 */

package dk.statsbiblioteket.summa.support.harmonise;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import dk.statsbiblioteket.summa.search.api.Response;
import dk.statsbiblioteket.summa.search.api.ResponseCollection;
import dk.statsbiblioteket.summa.search.api.document.DocumentResponse;
import dk.statsbiblioteket.summa.search.api.dummy.DummyResponse;
import dk.statsbiblioteket.summa.support.harmonise.HarmoniseTestHelper;
import java.util.List;
import junit.framework.AssertionFailedError;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class HarmoniseTestHelperEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      HarmoniseTestHelper harmoniseTestHelper0 = new HarmoniseTestHelper();
      assertNotNull(harmoniseTestHelper0);
  }

  @Test
  public void test1()  throws Throwable  {
      ResponseCollection responseCollection0 = new ResponseCollection();
      // Undeclared exception!
      try {
        HarmoniseTestHelper.compareHits("yqoSIcUgo[Xvp", true, responseCollection0, responseCollection0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * Collection argument is null
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      ResponseCollection responseCollection0 = new ResponseCollection();
      String[] stringArray0 = new String[6];
      DocumentResponse documentResponse0 = new DocumentResponse("yqoSIcUgo[Xvp", "yqoSIcUgo[Xvp", 1740L, 1740L, "yqoSIcUgo[Xvp", false, stringArray0, 1740L, 1740L);
      responseCollection0.add((Response) documentResponse0);
      // Undeclared exception!
      try {
        HarmoniseTestHelper.compareHits("yqoSIcUgo[Xvp", false, responseCollection0, responseCollection0);
        fail("Expecting exception: AssertionFailedError");
      } catch(AssertionFailedError e) {
        /*
         * Expected non-equality for query 'yqoSIcUgo[Xvp' with result ''
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      ResponseCollection responseCollection0 = new ResponseCollection();
      DummyResponse dummyResponse0 = new DummyResponse("9xS`", 13, 13, 13, 13);
      responseCollection0.add((Response) dummyResponse0);
      List<String> list0 = HarmoniseTestHelper.getResultIDs(responseCollection0);
      assertNull(list0);
  }

  @Test
  public void test4()  throws Throwable  {
      ResponseCollection responseCollection0 = new ResponseCollection();
      String[] stringArray0 = new String[11];
      DocumentResponse documentResponse0 = new DocumentResponse("$o", "$o", 0L, 0L, "$o", true, stringArray0, 0L, 0L);
      responseCollection0.add((Response) documentResponse0);
      DocumentResponse.Record documentResponse_Record0 = new DocumentResponse.Record("$o", "$o", (float) 0L, "$o");
      documentResponse0.addRecord(documentResponse_Record0);
      // Undeclared exception!
      try {
        HarmoniseTestHelper.compareHits("$o", responseCollection0, responseCollection0);
        fail("Expecting exception: AssertionFailedError");
      } catch(AssertionFailedError e) {
        /*
         * There was no result for '$o'
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      ResponseCollection responseCollection0 = new ResponseCollection();
      DummyResponse dummyResponse0 = new DummyResponse("9xS`", 13, 13, 13, 13);
      responseCollection0.add((Response) dummyResponse0);
      // Undeclared exception!
      try {
        HarmoniseTestHelper.countResults(responseCollection0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * No documentResponse in ResponseCollection
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      ResponseCollection responseCollection0 = new ResponseCollection();
      String[] stringArray0 = new String[11];
      DocumentResponse documentResponse0 = new DocumentResponse("$o", "$o", 0L, 0L, "$o", true, stringArray0, 0L, 0L);
      responseCollection0.add((Response) documentResponse0);
      int int0 = HarmoniseTestHelper.countResults(responseCollection0);
      assertEquals(0, int0);
  }
}
