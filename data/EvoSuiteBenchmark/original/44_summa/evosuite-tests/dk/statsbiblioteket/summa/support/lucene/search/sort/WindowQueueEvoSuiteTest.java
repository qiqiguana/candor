/*
 * This file was automatically generated by EvoSuite
 */

package dk.statsbiblioteket.summa.support.lucene.search.sort;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import dk.statsbiblioteket.summa.common.util.PriorityQueue;
import dk.statsbiblioteket.summa.common.util.ResourceTracker;
import dk.statsbiblioteket.summa.common.util.StringTracker;
import dk.statsbiblioteket.summa.support.lucene.search.sort.WindowQueue;
import java.util.Comparator;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class WindowQueueEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      StringTracker stringTracker0 = new StringTracker((long) 4, (long) 4, (long) 4);
      WindowQueue<String> windowQueue0 = new WindowQueue<String>((Comparator<String>) null, "", "", (ResourceTracker<String>) stringTracker0);
      windowQueue0.setUpperBound("");
      assertEquals(0, windowQueue0.getSize());
  }

  @Test
  public void test1()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(1657, 1657);
      Comparator<String> comparator0 = priorityQueue0.getComparator();
      StringTracker stringTracker0 = new StringTracker((long) 1657, (long) 1657, (long) 1657);
      WindowQueue<String> windowQueue0 = new WindowQueue<String>(comparator0, "", (String) null, (ResourceTracker<String>) stringTracker0);
      String string0 = windowQueue0.getUpperBound();
      assertNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(1673, 1673);
      Comparator<String> comparator0 = priorityQueue0.getComparator();
      StringTracker stringTracker0 = new StringTracker((long) 1673, (long) 1673, (long) 1673);
      WindowQueue<String> windowQueue0 = new WindowQueue<String>(comparator0, "The maxCapacity (%d) must 'e equal to or greater than size (%q)", "The maxCapacity (%d) must 'e equal to or greater than size (%q)", (ResourceTracker<String>) stringTracker0);
      String string0 = windowQueue0.getLowerBound();
      assertEquals("The maxCapacity (%d) must 'e equal to or greater than size (%q)", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      Comparator<String> comparator0 = priorityQueue0.getComparator();
      StringTracker stringTracker0 = new StringTracker(0L, 0L, 0L);
      WindowQueue<String> windowQueue0 = new WindowQueue<String>(comparator0, (String) null, (String) null, (ResourceTracker<String>) stringTracker0);
      windowQueue0.insert((String) null);
      assertEquals(true, stringTracker0.isOverflowing());
      assertEquals("{}\n", windowQueue0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      StringTracker stringTracker0 = new StringTracker((long) 4, (long) 4, (long) 4);
      WindowQueue<String> windowQueue0 = new WindowQueue<String>((Comparator<String>) null, "", "", (ResourceTracker<String>) stringTracker0);
      String string0 = windowQueue0.insert("");
      assertNull(string0);
  }

  @Test
  public void test5()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      Comparator<String> comparator0 = priorityQueue0.getComparator();
      StringTracker stringTracker0 = new StringTracker(0L, 0L, 0L);
      WindowQueue<String> windowQueue0 = new WindowQueue<String>(comparator0, "NX UYN", "NX UYN", (ResourceTracker<String>) stringTracker0);
      windowQueue0.setLowerBound((String) null);
      String string0 = windowQueue0.insert("=C;Xz");
      assertNotNull(string0);
      assertEquals(false, stringTracker0.isOverflowing());
      assertEquals(0L, stringTracker0.getSize());
  }

  @Test
  public void test6()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(1673, 1673);
      Comparator<String> comparator0 = priorityQueue0.getComparator();
      StringTracker stringTracker0 = new StringTracker((long) 1673, (long) 1673, (long) 1673);
      WindowQueue<String> windowQueue0 = new WindowQueue<String>(comparator0, "The maxCapacity (%d) must 'e equal to or greater than size (%q)", "The maxCapacity (%d) must 'e equal to or greater than size (%q)", (ResourceTracker<String>) stringTracker0);
      windowQueue0.insert("gL.7GoskGJLlwS");
      assertEquals(0L, stringTracker0.getMem());
      assertEquals(0, windowQueue0.getSize());
  }

  @Test
  public void test7()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      Comparator<String> comparator0 = priorityQueue0.getComparator();
      StringTracker stringTracker0 = new StringTracker(0L, 0L, 0L);
      WindowQueue<String> windowQueue0 = new WindowQueue<String>(comparator0, (String) null, (String) null, (ResourceTracker<String>) stringTracker0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "NX UYN";
      windowQueue0.setValues(stringArray0, 1, false, 1);
      String string0 = windowQueue0.insert("=C;Xz");
      assertEquals(1, windowQueue0.getSize());
      assertEquals("NX UYN", string0);
  }
}
