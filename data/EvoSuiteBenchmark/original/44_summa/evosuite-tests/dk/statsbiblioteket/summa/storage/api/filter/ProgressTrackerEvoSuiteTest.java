/*
 * This file was automatically generated by EvoSuite
 */

package dk.statsbiblioteket.summa.storage.api.filter;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import dk.statsbiblioteket.summa.storage.api.filter.ProgressTracker;
import java.io.File;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ProgressTrackerEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      File file0 = new File("nCL-1\r3oI}!RX", "nCL-1\r3oI}!RX");
      ProgressTracker progressTracker0 = new ProgressTracker(file0, (-2076L), (-2076L));
      progressTracker0.getLastUpdate();
  }

  @Test
  public void test1()  throws Throwable  {
      File file0 = new File("<lastRecordTimestamp><iso>-</iso></lastRecordTimestamp>");
      ProgressTracker progressTracker0 = new ProgressTracker(file0, 10L, 10L);
      assertNotNull(progressTracker0);
      
      progressTracker0.updated(10L);
      assertEquals(10L, progressTracker0.getLastUpdate());
      assertEquals("19700101-010000.010", progressTracker0.getLastUpdateStr());
  }

  @Test
  public void test2()  throws Throwable  {
      File file0 = new File("", "");
      ProgressTracker progressTracker0 = new ProgressTracker(file0, 1341L, 1341L);
      assertNotNull(progressTracker0);
      
      String string0 = progressTracker0.getLastUpdateStr();
      assertNotNull(string0);
      assertEquals("19700101-010000.000", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      File file0 = new File("nCL-1\r3oI}!RX", "nCL-1\r3oI}!RX");
      ProgressTracker progressTracker0 = new ProgressTracker(file0, (-2076L), (-2076L));
      progressTracker0.updated(0L);
      assertEquals(0L, progressTracker0.getLastUpdate());
  }

  @Test
  public void test4()  throws Throwable  {
      File file0 = new File("]");
      ProgressTracker progressTracker0 = new ProgressTracker(file0, 0L, 0L);
      // Undeclared exception!
      try {
        progressTracker0.updated(0L);
        fail("Expecting exception: NoClassDefFoundError");
      } catch(NoClassDefFoundError e) {
        /*
         * Could not initialize class dk.statsbiblioteket.util.Files
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      File file0 = new File("b.5QH[Q 0", "b.5QH[Q 0");
      ProgressTracker progressTracker0 = new ProgressTracker(file0, 18L, 18L);
      progressTracker0.loadProgress();
      assertEquals(0L, progressTracker0.getLastUpdate());
  }

  @Test
  public void test6()  throws Throwable  {
      File file0 = new File("", "");
      ProgressTracker progressTracker0 = new ProgressTracker(file0, 1341L, 1341L);
      progressTracker0.loadProgress();
      assertEquals(0L, progressTracker0.getLastUpdate());
  }

  @Test
  public void test7()  throws Throwable  {
      File file0 = new File("b.5QH[Q 0", "b.5QH[Q 0");
      ProgressTracker progressTracker0 = new ProgressTracker(file0, 18L, 18L);
      progressTracker0.clearProgressFile();
      assertEquals(0L, progressTracker0.getLastUpdate());
  }

  @Test
  public void test8()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          File file0 = new File("", "");
          ProgressTracker progressTracker0 = new ProgressTracker(file0, 29L, 29L);
          // Undeclared exception!
          try {
            progressTracker0.clearProgressFile();
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission / delete)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkDelete(SecurityManager.java:990)
             * java.io.File.delete(File.java:902)
             * dk.statsbiblioteket.summa.storage.api.filter.ProgressTracker.clearProgressFile(ProgressTracker.java:181)
             * sun.reflect.GeneratedMethodAccessor93.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test9()  throws Throwable  {
      File file0 = new File("", "");
      long long0 = ProgressTracker.getTimestamp(file0, "");
      assertEquals(0L, long0);
  }

  @Test
  public void test10()  throws Throwable  {
      File file0 = new File("<lastRecordTimestamp><iso>-</iso></lastRecordTimestamp>");
      // Undeclared exception!
      try {
        ProgressTracker.getTimestamp(file0, "<lastRecordTimestamp><iso>-</iso></lastRecordTimestamp>");
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * No match found
         */
      }
  }
}
