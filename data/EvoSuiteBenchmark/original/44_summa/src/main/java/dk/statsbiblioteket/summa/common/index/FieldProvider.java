/*
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */
package dk.statsbiblioteket.summa.common.index;

import dk.statsbiblioteket.util.qa.QAInfo;
import org.w3c.dom.Node;

import java.text.ParseException;

/**
 * Provides look-up and creation of IndexFields based on their names.
 */
@QAInfo(level = QAInfo.Level.NORMAL,
        state = QAInfo.State.IN_DEVELOPMENT,
        author = "te")
public interface FieldProvider<F extends IndexField> {
    /**
     * Locate and return an already existing field.
     * @param fieldName the name of the wanted field.
     * @return the field corresponding to the name.
     * @throws IllegalArgumentException if the field could not be located.
     */
    F getField(String fieldName) throws IllegalArgumentException;

    /**
     * Locate and return an already existing field.
     *
     * @param instanceName the name of the field instance, used for prefix fields.
     * @param fieldName the name of the wanted field.
     * @param locale the locale for the field if needed else null.
     * @return the field corresponding to the name.
     * @throws IllegalArgumentException if the field could not be located.
     */
    F getFieldWithLocale(String instanceName, String fieldName, String locale) throws IllegalArgumentException;

    /**
     * Create an new field with default values.
     * @return a new field.
     */
    F createNewField();

    /**
     * Create a new field based on the given Document Node. The format of the
     * Node must correspond to the XML-fragment generated by F.
     * </p><p>
     * It is highly recommended to override this method to provide an
     * index-field (the obvious case is a Lucene-specific field).
     * @param node the Document Node containing the setup for the field.
     * @return a new field based on the given node.
     * @throws ParseException if the node could not be parsed.
     */
    F createNewField(Node node) throws ParseException;
}




