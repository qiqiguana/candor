<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            targetNamespace="http://statsbiblioteket.dk/summa/2008/IndexDescriptor"
            elementFormDefault="qualified"
            xmlns:summa="http://statsbiblioteket.dk/summa/2008/IndexDescriptor">
    <!--
     Note: This only describes the core. Lucene and Facet are extensions
    -->
    <xsd:annotation>
        <xsd:documentation xml:lang="en">
            XML Schema for Summa Index Descriptor.
            The descriptor defines fields, groups and facets for a Summa index
            and is heavily inspired by http://wiki.apache.org/solr/SchemaXml

            When a name is resolved by the Summa query parser, the precedence
            order is group-name, group-alias, field-name, field-alias.
        </xsd:documentation>
    </xsd:annotation>

    <xsd:element name="IndexDescriptor">
        <xsd:complexType>
            <xsd:choice maxOccurs="unbounded">
                <xsd:element name="groups" minOccurs="0" maxOccurs="1">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="group" type="summa:GroupType" minOccurs="0" maxOccurs="unbounded"/>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>

                <!-- Yes, fields are optional. Summa has fallback to the default field -->
                <xsd:element name="fields" minOccurs="0" maxOccurs="1">
                    <xsd:annotation>
                        <xsd:documentation>
                            Fields defined are used for mapping fields in a Summadocument to
                            fields in a document index. The fields are capable of inheriting
                            from each other, as defined in FieldType.
                            There are 2 special fields and 7 default fields.
                            The Field 'freetext' is an additional sink for fields with
                            inFreeText="true". It us used for broad searches, normally without
                            prefix. The field is tokenized and not stored.
                            If a field in SummaDocument has no corresponding field in the
                            IndexDescriptor, the default field is used. It is tokenized and
                            stored.
                            Standard default fields are
                            storedKeyWord: untokenized, stored, SummaKeywordAnalyser.
                            keyword: tokenized, not stored, SummaKeywordAnalyser.
                            text: tokenized, not stored, SummaStandardAnalyzer.
                            sortKey: tokenized, not stored, SummaSortKeyAnalyzer.
                            stored: not indexed, stored compressed, SummaStandardAnalyzer.
                            date: tokenized, not stored, SimpleAnalyzer.
                            number: tokenized, stored, SummaNumberanalyzer.
                        </xsd:documentation>
                    </xsd:annotation>
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="field" type="summa:FieldType" minOccurs="0" maxOccurs="unbounded"/>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>

                <xsd:element name="defaultSearchFields" minOccurs="0" maxOccurs="1">
                    <xsd:complexType>
                        <xsd:annotation>
                            <xsd:documentation>
                                If no explicit field is given at query-time, the query gets expanded to
                                these fields. If no default fields are specified, "freetext" is used.
                                <!-- TODO: Check if groups should be allowed here -->
                            </xsd:documentation>
                        </xsd:annotation>
                        <xsd:sequence>
                            <xsd:element name="field" minOccurs="0" maxOccurs="unbounded">
                                <xsd:complexType>
                                    <xsd:attribute name="ref" type="xsd:string"/>
                                </xsd:complexType>
                            </xsd:element>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>

                <xsd:element name="QueryParser" minOccurs="0" maxOccurs="1">
                    <xsd:complexType>
                        <xsd:attribute name="defaultOperator" default="AND">
                            <xsd:simpleType>
                                <xsd:restriction base="xsd:string">
                                    <xsd:enumeration value="AND"/>
                                    <xsd:enumeration value="OR"/>
                                </xsd:restriction>
                            </xsd:simpleType>
                        </xsd:attribute>
                    </xsd:complexType>
                </xsd:element>

                <!-- For alias-resolving -->
                <xsd:element name="defaultLanguage" type="xsd:string" minOccurs="0" maxOccurs="1">
                    <xsd:annotation>
                        <xsd:documentation>
                            The defaultLanguage is used for alias-resolving.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>

                <xsd:any namespace="##any" processContents="skip" minOccurs="0" maxOccurs="unbounded"/>

            </xsd:choice>


            <xsd:attribute name="version" type="xsd:string" use="optional"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:complexType name="GroupType">
        <xsd:annotation>
            <xsd:documentation>
                A group is a collection of fields. Groups gets expanded as part of
                query expansion. Example: The user searches for "author:Bar".
                'author' is a group with the groupFields 'author_normalised' and
                'author_secondary'. The query is expanded to
                "author_normalised:Bar OR author_secondary:Bar".
                If isFacet is defined, the group will be a facet. Note that the
                attribute isFacet on FieldTypes is ignored in this context.
                The name of the facet will be the value defined in facetName. If
                facetName is not defined, the name of the group will be the facet name.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="alias" type="summa:AliasType" minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element name="field" minOccurs="0" maxOccurs="unbounded">
                <xsd:complexType>
                    <xsd:annotation>
                        <xsd:documentation>
                            field is a field in the group. It refers to the name of a
                            field (not an alias).
                            excludeFromFacets has no effect if the group containing the
                            GroupFieldtype does not have isFacet="true". If the group has
                            isFacet="true" and excludeFromFacets is true, the field is not
                            used for faceting.
                        </xsd:documentation>
                    </xsd:annotation>
                    <!-- TODO: Use reference to the field to ensure existence -->
                    <xsd:attribute name="ref" type="xsd:string" use="required"/>
                    <!--                    <xsd:attribute name="excludeFromFacets" type="xsd:boolean" use="optional"/>-->
                    <xsd:anyAttribute processContents="lax"/>
                </xsd:complexType>
            </xsd:element>
        </xsd:sequence>

        <xsd:attribute name="name" type="xsd:string" use="required"/>
        <!--        <xsd:attribute name="isFacet" type="xsd:boolean" use="optional"/>
     <xsd:attribute name="facetName" type="xsd:string" use="optional"/>-->
        <xsd:anyAttribute processContents="lax"/>
    </xsd:complexType>

    <xsd:complexType name="AliasType">
        <xsd:annotation>
            <xsd:documentation>
                The alias is an alternative for group- or field-name. It is
                resolved during query-expansion and is typically used to provide
                localized queries. The query "author:Foo" could be written as
                "forfatter:Foo" ('forfatter' is 'author' in danish) if the field or
                group 'author' had the alias 'forfatter'.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="name" use="required">
            <xsd:simpleType>
                <xsd:restriction base="xsd:string">
                    <xsd:minLength value="1"/>
                </xsd:restriction>
            </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute name="lang" type="xsd:string" use="optional"/>
    </xsd:complexType>

    <xsd:complexType name="FieldType">
        <xsd:annotation>
            <!-- TODO: explain the default types -->
            <xsd:documentation>
                The attributes are mostly taken from SOLR schema.xml:
                name:        the name for the field.
                parent:      the name of a previously defined field or one of the
                build-in types. The build-in types are freetext, date.
                storedKeyword, keyword, text, sortkey, stored and number.
                It follows that fields can inherit from other fields.
                In that case super-fields, must be defined before
                sub-fields.
                indexed:     true if this field should be indexed.
                stored:      true if this field should be retrievable.
                analyzed:    true if this field should be analyzed. Setting this
                             to false will result in the content being tokenized
                             as a single token.
                multiValued: true if this field may contain multiple values per
                             document.
                indexBoost:  the index-time boost for this field (default: 1.0).
                queryBoost:  the query-time boost for this field (default: 1.0).
                sortLocale:  the locale (see Java Locale) used for sorting the Field.
                sortCache:   active or lazy (default). If active, the sort-structure is initialized at index open. If lazy, the initialization takes place upon first sorted call
                inFreeText:  if true, the tokens in this field are automatically
                             added to the freetext field.
                required:    the field must be present in the record-XML. This is used
                for validation of documents prior to indexing.

                isFacet:     if true, this field will be a Facet. The name of the
                facet will be the value defined in facetName.
                facetName:   If facetName is not defined, the name of the field will
                be the facet name.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="alias" type="summa:AliasType" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
        <xsd:attribute name="name" type="xsd:string" use="required"/>
        <xsd:attribute name="parent" type="xsd:string" use="optional"/>
        <xsd:attribute name="indexed" type="xsd:boolean" use="optional"/>
        <xsd:attribute name="stored" type="xsd:boolean" use="optional"/>
        <xsd:attribute name="analyzed" type="xsd:boolean" use="optional"/>
        <xsd:attribute name="multiValued" type="xsd:boolean" use="optional"/>
        <xsd:attribute name="indexBoost" type="xsd:float" use="optional"/>
        <xsd:attribute name="queryBoost" type="xsd:float" use="optional"/>
        <xsd:attribute name="sortLocale" type="xsd:string" use="optional"/>
        <xsd:attribute name="sortCache" type="xsd:string" use="optional"/>
        <xsd:attribute name="inFreeText" type="xsd:boolean" use="optional"/>
        <xsd:attribute name="required" type="xsd:boolean" use="optional"/>
        <!--        <xsd:attribute name="isFacet" type="xsd:boolean" use="optional"/>
     <xsd:attribute name="facetName" type="xsd:string" use="optional"/>-->
        <xsd:anyAttribute processContents="lax"/>
    </xsd:complexType>



</xsd:schema>
