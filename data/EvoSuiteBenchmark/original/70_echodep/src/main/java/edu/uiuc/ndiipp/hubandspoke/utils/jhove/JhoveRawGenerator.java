/**
 * JhoveRawGenerator.java
 * 
 * $Revision: 845 $
 * 
 * $Date: 2009-04-22 18:28:30 +0100 (Wed, 22 Apr 2009) $
 * 
 * Copyright (c) 2009, University Library, University of Illinois at 
 * Urbana-Champaign. All rights reserved. 
 * 
 * Developed by: The Hub and Spoke Project Group 
 *               University of Illinois Urbana-Champaign Library
 *               http://dli.grainger.uiuc.edu/echodep/hands/ 
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal with the Software without restriction, including 
 * without limitation the rights to use, copy, modify, merge, publish, 
 * distribute, sublicense, and/or sell copies of the Software, and to 
 * permit persons to whom the Software is furnished to do so, subject to 
 * the following conditions: 
 * 
 * - Redistributions of source code must retain the above copyright notice, 
 * this list of conditions and the following disclaimers. 
 * 
 * - Redistributions in binary form must reproduce the above copyright 
 * notice, this list of conditions and the following disclaimers in the 
 * documentation and/or other materials provided with the distribution. 
 * 
 * - Neither the names of The Hub and Spoke Project Group, University of 
 * Illinois Urbana-Champaign Library, nor the names of its contributors may 
 * be used to endorse or promote products derived from this Software 
 * without specific prior written permission. 
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 * IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR 
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
 * SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE. 
 */


package edu.uiuc.ndiipp.hubandspoke.utils.jhove;

import java.io.*; 
import edu.harvard.hul.ois.jhove.JhoveBase;
import edu.harvard.hul.ois.jhove.JhoveException;
import edu.harvard.hul.ois.jhove.handler.XmlHandler;
import javax.xml.parsers.*;

import org.xml.sax.*;
import org.w3c.dom.*;


/**
 * 
 * Does the work of creating raw Jhove metadata 
 * from a file.
 *
 * @author Howard Ding
 */

public class JhoveRawGenerator {
	private static Object syncObj = new Object();
	/**
	 * The JhoveBase object that is used to create the Jhove metadata.
	 */
	private JhoveBase jhoveBase;
	
	/**
	 * Default constructor.  Sets some parameters for JhoveBase.
	 * 
	 * @throws JhoveException
	 */
	public JhoveRawGenerator () throws JhoveException {
		jhoveBase = new JhoveBase();
		jhoveBase.setChecksumFlag(true);
		jhoveBase.init(configFileName(), null);
	}
	
	/**
	 * Return the path to the Jhove config file, which we need to get Jhove to
	 * work properly.
	 * 
	 * @return String naming the config file for Jhove
	 */
	private static String configFileName () {
		return System.getenv("HS_HOME") + File.separator + "config" + File.separator + "jhove.conf";
	}
	
	/**
	 * Does the actual work of processing a file and producing
	 * Jhove metadata in the form of a String.
	 * 
	 * @param filename Path to the file to be analyzed
	 * @return XML generated by Jhove as a String
	 * @throws Exception
	 */
	public String processFileToString (String filename) 
		throws Exception 
	{
		HSJhoveApp app = new HSJhoveApp();
		XmlHandler xmlOutput = new XmlHandler();
		String[] filenameAsArray = {filename};
		ByteArrayOutputStream bytes = new ByteArrayOutputStream();
		PrintStream output = new PrintStream(bytes);
		PrintStream console = System.out;
		
		//If this is ever multi-threaded, we'll need to synchronize over
		//console here, I think.
		System.setOut(output);
		jhoveBase.dispatch(app, null, null, xmlOutput, null, filenameAsArray);
		System.setOut(console);

		return bytes.toString();
	}
	
	/**
	 * This class needed to be synchronized because is changes the javax parser 
	 * DocumentBuilderFactory from the Saxon to the Xerces implementation 
	 * and then back to Saxon before it returns. Without the synchronization, 
	 * this property change could cause side effects in XMLBeans, which 
	 * requires the Saxon implementation of DocumentBuilderFactory.
	 * 
	 * Convert a String to an XML Document
	 * @param xmlString A String to be converted.
	 * @return A Document that is the XML in xmlString
	 * @throws Exception
	 */
	private Document stringToXML (String xmlString) 
		throws Exception 
	{
//		synchronized(syncObj){
//			String prevFactory = System.getProperty("javax.xml.parsers.DocumentBuilderFactory");
//			System.setProperty("javax.xml.parsers.DocumentBuilderFactory",
//					"com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl");
			
			DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
			dbf.setNamespaceAware(true);
			DocumentBuilder db = dbf.newDocumentBuilder();
			InputSource input = new InputSource(new StringReader(xmlString));
			Document document =	db.parse(input);
			
//			System.setProperty("javax.xml.parsers.DocumentBuilderFactory", prevFactory);
			return document;
//		}
	}
	
	/**
	 * Does the work of processing a file to an XML Document.  This is the
	 * intended method for clients to use.
	 * 
	 * @param filename Path to the file to be analyzed
	 * @return XML generated by Jhove as a DOM document
	 * @throws Exception
	 */
	public Document processFileToXML (String filename) 
	throws Exception 
	{
		String result = processFileToString(filename);
		return stringToXML(result);
	}
}
