/*
 * This file was automatically generated by EvoSuite
 */

package edu.uiuc.ndiipp.hubandspoke.utils;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import edu.uiuc.ndiipp.hubandspoke.utils.HaSZipUtils;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.util.zip.ZipFile;
import java.util.zip.ZipInputStream;
import java.util.zip.ZipOutputStream;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class HaSZipUtilsEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      File file0 = new File("]yQ{BpK)d-^s", "");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      ZipOutputStream zipOutputStream0 = new ZipOutputStream((OutputStream) objectOutputStream0);
      try {
        HaSZipUtils.addFilesToZip(file0, zipOutputStream0);
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
        /*
         * ]yQ{BpK)d-^s (No such file or directory)
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      HaSZipUtils haSZipUtils0 = new HaSZipUtils();
      assertNotNull(haSZipUtils0);
  }

  @Test
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try {
        HaSZipUtils.unzip((ZipInputStream) null, "Desired position exceeds size.");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Path must be a directory
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream((InputStream) pipedInputStream0, (InputStream) pipedInputStream0);
      ZipInputStream zipInputStream0 = new ZipInputStream((InputStream) sequenceInputStream0);
      ZipInputStream zipInputStream1 = new ZipInputStream((InputStream) zipInputStream0);
      File file0 = HaSZipUtils.unzip(zipInputStream1, "/../");
      assertNotNull(file0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      ZipOutputStream zipOutputStream0 = new ZipOutputStream((OutputStream) byteArrayOutputStream0);
      HaSZipUtils.addFilesToZip((InputStream) sequenceInputStream0, zipOutputStream0, "/../");
      assertEquals("PK\u0003\u0004\u0014\u0000\b\u0000\b\u0000\uFFFD\uFFFDB\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000/../\u0003\u0000PK\u0007\b\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      assertEquals(52, byteArrayOutputStream0.size());
  }

  @Test
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try {
        HaSZipUtils.unzip((ZipFile) null, "/../");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      // Undeclared exception!
      try {
        HaSZipUtils.unzip((ZipFile) null, "+?<iF", boolean0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Path must be a directory
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      // Undeclared exception!
      try {
        HaSZipUtils.unzip((ZipFile) null, "/", boolean0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      // Undeclared exception!
      try {
        HaSZipUtils.unzip((ZipFile) null, "+j", boolean0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Path must be a directory
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      File[] fileArray0 = new File[1];
      // Undeclared exception!
      try {
        HaSZipUtils.addFilesToZip(fileArray0, (ZipOutputStream) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * name can't be null
         */
      }
  }
}
