/*
 * This file was automatically generated by EvoSuite
 */

package edu.uiuc.ndiipp.hubandspoke.profile;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import edu.uiuc.ndiipp.hubandspoke.profile.HaSMETSAppender;
import java.util.ArrayList;
import org.apache.log4j.spi.LoggingEvent;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class HaSMETSAppenderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      HaSMETSAppender haSMETSAppender0 = new HaSMETSAppender("M");
      boolean boolean0 = haSMETSAppender0.hasEvents();
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      HaSMETSAppender haSMETSAppender0 = new HaSMETSAppender();
      boolean boolean0 = haSMETSAppender0.requiresLayout();
      assertEquals(false, boolean0);
      assertEquals("HaSMETSAppender", haSMETSAppender0.getName());
  }

  @Test
  public void test2()  throws Throwable  {
      HaSMETSAppender haSMETSAppender0 = new HaSMETSAppender();
      haSMETSAppender0.close();
      assertEquals("HaSMETSAppender", haSMETSAppender0.getName());
  }

  @Test
  public void test3()  throws Throwable  {
      HaSMETSAppender haSMETSAppender0 = new HaSMETSAppender();
      haSMETSAppender0.append((LoggingEvent) null);
      // Undeclared exception!
      try {
        haSMETSAppender0.getAllEventsAsXmlText();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      HaSMETSAppender haSMETSAppender0 = new HaSMETSAppender();
      ArrayList<LoggingEvent> arrayList0 = haSMETSAppender0.getEvents();
      assertEquals("HaSMETSAppender", haSMETSAppender0.getName());
      assertNotNull(arrayList0);
  }

  @Test
  public void test5()  throws Throwable  {
      HaSMETSAppender haSMETSAppender0 = new HaSMETSAppender();
      haSMETSAppender0.clearEvents();
      assertEquals("HaSMETSAppender", haSMETSAppender0.getName());
  }

  @Test
  public void test6()  throws Throwable  {
      HaSMETSAppender haSMETSAppender0 = new HaSMETSAppender();
      String string0 = haSMETSAppender0.getAllEventsAsXmlText();
      assertEquals("HaSMETSAppender", haSMETSAppender0.getName());
      assertNotNull(string0);
      assertEquals("<log4j:eventSet xmlns:log4j='http://jakarta.apache.org/log4j/' version='1.2' includesLocationInfo='false'>\n</log4j:eventSet>\n", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      HaSMETSAppender haSMETSAppender0 = new HaSMETSAppender();
      assertEquals(false, haSMETSAppender0.hasEvents());
      
      haSMETSAppender0.append((LoggingEvent) null);
      boolean boolean0 = haSMETSAppender0.hasEvents();
      assertEquals(true, haSMETSAppender0.hasEvents());
      assertEquals(true, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      HaSMETSAppender haSMETSAppender0 = new HaSMETSAppender("M");
      boolean boolean0 = haSMETSAppender0.hasErrors();
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      HaSMETSAppender haSMETSAppender0 = new HaSMETSAppender();
      haSMETSAppender0.append((LoggingEvent) null);
      // Undeclared exception!
      try {
        haSMETSAppender0.hasErrors();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
