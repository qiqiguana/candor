/*
 * This file was automatically generated by EvoSuite
 */

package de.paragon.explorer.model;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import de.paragon.explorer.figure.Figure;
import de.paragon.explorer.figure.RectangleFigure;
import de.paragon.explorer.model.AttributeModel;
import de.paragon.explorer.model.ConnectionModel;
import de.paragon.explorer.model.ExplorerModel;
import de.paragon.explorer.model.ObjectHeaderModel;
import de.paragon.explorer.model.ObjectModel;
import de.paragon.explorer.util.ObjectViewManager;
import java.lang.reflect.Field;
import java.text.NumberFormat;
import java.util.Vector;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ObjectModelEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ObjectModel objectModel0 = new ObjectModel();
      objectModel0.addConnectionModel((ConnectionModel) null);
      objectModel0.removeConnectionModel((ConnectionModel) null);
      assertEquals(true, objectModel0.isObjectModel());
  }

  @Test
  public void test1()  throws Throwable  {
      ObjectModel objectModel0 = new ObjectModel();
      boolean boolean0 = objectModel0.isObjectModel();
      assertEquals(true, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      ObjectModel objectModel0 = new ObjectModel();
      objectModel0.setObjectViewManager((ObjectViewManager) null);
      assertEquals(true, objectModel0.isObjectModel());
  }

  @Test
  public void test3()  throws Throwable  {
      ObjectModel objectModel0 = new ObjectModel();
      // Undeclared exception!
      try {
        objectModel0.getColorManager();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      ObjectModel objectModel0 = new ObjectModel();
      Figure figure0 = objectModel0.getFigure();
      assertNull(figure0);
  }

  @Test
  public void test5()  throws Throwable  {
      ObjectModel objectModel0 = new ObjectModel();
      boolean boolean0 = objectModel0.isNullObject();
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      ObjectModel objectModel0 = new ObjectModel();
      RectangleFigure rectangleFigure0 = new RectangleFigure();
      objectModel0.setFigure((Figure) rectangleFigure0);
      assertEquals(true, objectModel0.isObjectModel());
  }

  @Test
  public void test7()  throws Throwable  {
      ObjectModel objectModel0 = new ObjectModel();
      objectModel0.removeConnectionModel((ConnectionModel) null);
      assertEquals(false, objectModel0.isExplorerModel());
  }

  @Test
  public void test8()  throws Throwable  {
      ObjectModel objectModel0 = new ObjectModel();
      objectModel0.setExplorerModel((ExplorerModel) null);
      assertEquals(false, objectModel0.isObjectHeaderModel());
  }

  @Test
  public void test9()  throws Throwable  {
      ObjectModel objectModel0 = new ObjectModel();
      ObjectHeaderModel objectHeaderModel0 = objectModel0.getHeaderModel();
      assertNull(objectHeaderModel0);
  }

  @Test
  public void test10()  throws Throwable  {
      ObjectModel objectModel0 = new ObjectModel();
      // Undeclared exception!
      try {
        objectModel0.getDeclaredFields();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      ObjectModel objectModel0 = new ObjectModel();
      objectModel0.setHeaderModel((ObjectHeaderModel) null);
      assertEquals(false, objectModel0.isObjectHeaderModel());
  }

  @Test
  public void test12()  throws Throwable  {
      ObjectModel objectModel0 = new ObjectModel();
      AttributeModel attributeModel0 = new AttributeModel();
      objectModel0.getAttributeModels();
      objectModel0.addAttributeModel(attributeModel0);
      assertEquals(false, attributeModel0.isObjectModel());
  }

  @Test
  public void test13()  throws Throwable  {
      ObjectModel objectModel0 = new ObjectModel();
      Class<?> class0 = NumberFormat.class;
      Vector<Field> vector0 = objectModel0.getDeclaredFields(class0);
      assertNotNull(vector0);
      assertEquals("[private static final long java.text.Format.serialVersionUID, public static final int java.text.NumberFormat.INTEGER_FIELD, public static final int java.text.NumberFormat.FRACTION_FIELD, private static final java.util.Hashtable java.text.NumberFormat.cachedLocaleData, private static final int java.text.NumberFormat.NUMBERSTYLE, private static final int java.text.NumberFormat.CURRENCYSTYLE, private static final int java.text.NumberFormat.PERCENTSTYLE, private static final int java.text.NumberFormat.SCIENTIFICSTYLE, private static final int java.text.NumberFormat.INTEGERSTYLE, private boolean java.text.NumberFormat.groupingUsed, private byte java.text.NumberFormat.maxIntegerDigits, private byte java.text.NumberFormat.minIntegerDigits, private byte java.text.NumberFormat.maxFractionDigits, private byte java.text.NumberFormat.minFractionDigits, private boolean java.text.NumberFormat.parseIntegerOnly, private int java.text.NumberFormat.maximumIntegerDigits, private int java.text.NumberFormat.minimumIntegerDigits, private int java.text.NumberFormat.maximumFractionDigits, private int java.text.NumberFormat.minimumFractionDigits, static final int java.text.NumberFormat.currentSerialVersion, private int java.text.NumberFormat.serialVersionOnStream, static final long java.text.NumberFormat.serialVersionUID]", vector0.toString());
  }

  @Test
  public void test14()  throws Throwable  {
      ObjectModel objectModel0 = new ObjectModel();
      objectModel0.setObject((Object) "caret-end-word");
      int int0 = objectModel0.getNumberOfAttributes();
      assertEquals(0, int0);
  }

  @Test
  public void test15()  throws Throwable  {
      ObjectModel objectModel0 = new ObjectModel();
      // Undeclared exception!
      try {
        objectModel0.getObjectViewManager();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * ResourceBundle konnte nicht gefunden werden!
         */
      }
  }
}
