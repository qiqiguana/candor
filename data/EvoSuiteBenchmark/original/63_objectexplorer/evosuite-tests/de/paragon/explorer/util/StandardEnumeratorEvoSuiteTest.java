/*
 * This file was automatically generated by EvoSuite
 */

package de.paragon.explorer.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import de.paragon.explorer.util.StandardEnumerator;
import java.util.Vector;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class StandardEnumeratorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      StandardEnumerator standardEnumerator0 = new StandardEnumerator();
      assertNotNull(standardEnumerator0);
      
      standardEnumerator0.addElement((Object) null);
      assertEquals(true, standardEnumerator0.hasMoreElements());
      
      standardEnumerator0.nextElement();
      assertEquals(0, standardEnumerator0.getCount());
      assertEquals(false, standardEnumerator0.hasMoreElements());
  }

  @Test
  public void test1()  throws Throwable  {
      StandardEnumerator standardEnumerator0 = new StandardEnumerator();
      // Undeclared exception!
      try {
        standardEnumerator0.insertElementAt((Object) "visibleRowCount", 30);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 30 > 0
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      StandardEnumerator standardEnumerator0 = new StandardEnumerator();
      boolean boolean0 = standardEnumerator0.isInEnumeration((Object) "closed");
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      StandardEnumerator standardEnumerator0 = new StandardEnumerator();
      assertNotNull(standardEnumerator0);
      
      standardEnumerator0.setCount((-1212));
      standardEnumerator0.addElement((Object) null);
      assertEquals(-1212, standardEnumerator0.getCount());
  }

  @Test
  public void test4()  throws Throwable  {
      StandardEnumerator standardEnumerator0 = new StandardEnumerator();
      assertNotNull(standardEnumerator0);
      
      boolean boolean0 = standardEnumerator0.hasMoreElements();
      assertEquals(0, standardEnumerator0.getCount());
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      StandardEnumerator standardEnumerator0 = new StandardEnumerator();
      assertEquals(false, standardEnumerator0.hasMoreElements());
      assertNotNull(standardEnumerator0);
      
      standardEnumerator0.addElement((Object) null);
      boolean boolean0 = standardEnumerator0.hasMoreElements();
      assertEquals(true, standardEnumerator0.hasMoreElements());
      assertEquals(true, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      StandardEnumerator standardEnumerator0 = new StandardEnumerator();
      assertNotNull(standardEnumerator0);
      
      // Undeclared exception!
      try {
        standardEnumerator0.nextElement();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * ResourceBundle konnte nicht gefunden werden!
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      StandardEnumerator standardEnumerator0 = new StandardEnumerator();
      assertNotNull(standardEnumerator0);
      
      // Undeclared exception!
      try {
        standardEnumerator0.nextFigure();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * ResourceBundle konnte nicht gefunden werden!
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      StandardEnumerator standardEnumerator0 = new StandardEnumerator();
      assertNotNull(standardEnumerator0);
      
      standardEnumerator0.setCount((-1212));
      // Undeclared exception!
      try {
        standardEnumerator0.nextFigure();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * -1212
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      StandardEnumerator standardEnumerator0 = new StandardEnumerator();
      assertNotNull(standardEnumerator0);
      
      standardEnumerator0.setCount((-1212));
      standardEnumerator0.removeElement((Object) null);
      assertEquals(-1212, standardEnumerator0.getCount());
  }

  @Test
  public void test10()  throws Throwable  {
      StandardEnumerator standardEnumerator0 = new StandardEnumerator();
      assertNotNull(standardEnumerator0);
      
      standardEnumerator0.removeElement((Object) "Name");
      assertEquals(0, standardEnumerator0.getCount());
  }

  @Test
  public void test11()  throws Throwable  {
      StandardEnumerator standardEnumerator0 = new StandardEnumerator();
      assertNotNull(standardEnumerator0);
      
      Vector<Object> vector0 = standardEnumerator0.getVector();
      assertNotNull(vector0);
      
      vector0.add((Object) "rowHeight");
      StandardEnumerator standardEnumerator1 = new StandardEnumerator(vector0);
      assertEquals(1, vector0.size());
      assertEquals("[rowHeight]", vector0.toString());
  }
}
