/*
 * This file was automatically generated by EvoSuite
 */

package de.paragon.explorer.model;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import de.paragon.explorer.model.AttributeModelBuilder;
import de.paragon.explorer.model.ObjectModel;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class AttributeModelBuilderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      AttributeModelBuilder attributeModelBuilder0 = AttributeModelBuilder.getInstance();
      ObjectModel objectModel0 = new ObjectModel();
      attributeModelBuilder0.createAttributeModel(objectModel0);
      // Undeclared exception!
      try {
        attributeModelBuilder0.setArrayAttributeData(objectModel0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * de.paragon.explorer.model.AttributeModel cannot be cast to de.paragon.explorer.model.ArrayAttributeModel
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      AttributeModelBuilder attributeModelBuilder0 = AttributeModelBuilder.getInstance();
      ObjectModel objectModel0 = new ObjectModel();
      attributeModelBuilder0.createArrayAttributeModel(objectModel0);
      assertEquals(true, objectModel0.isObjectModel());
  }

  @Test
  public void test2()  throws Throwable  {
      AttributeModelBuilder attributeModelBuilder0 = AttributeModelBuilder.getInstance();
      ObjectModel objectModel0 = new ObjectModel();
      attributeModelBuilder0.setArrayAttributeData(objectModel0);
      assertEquals(false, objectModel0.isNullObject());
  }

  @Test
  public void test3()  throws Throwable  {
      AttributeModelBuilder attributeModelBuilder0 = AttributeModelBuilder.getInstance();
      ObjectModel objectModel0 = new ObjectModel();
      objectModel0.setObject((Object) "ToolTipText");
      attributeModelBuilder0.createStandardAttributeModel(objectModel0);
      attributeModelBuilder0.setStandardAttributeData(objectModel0);
      assertEquals(true, objectModel0.isStringObject());
  }
}
