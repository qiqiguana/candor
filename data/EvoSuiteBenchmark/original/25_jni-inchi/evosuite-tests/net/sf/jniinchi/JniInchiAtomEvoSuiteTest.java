/*
 * This file was automatically generated by EvoSuite
 */

package net.sf.jniinchi;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import net.sf.jniinchi.INCHI_RADICAL;
import net.sf.jniinchi.JniInchiAtom;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class JniInchiAtomEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("");
      assertNotNull(jniInchiAtom0);
      
      int int0 = jniInchiAtom0.getImplicitTritium();
      assertEquals(0, int0);
      assertEquals("InChI Atom:  [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", jniInchiAtom0.getDebugString());
  }

  @Test
  public void test1()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("");
      assertNotNull(jniInchiAtom0);
      
      INCHI_RADICAL iNCHI_RADICAL0 = INCHI_RADICAL.NONE;
      jniInchiAtom0.setRadical(iNCHI_RADICAL0);
      assertEquals("InChI Atom:  [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", jniInchiAtom0.getDebugString());
  }

  @Test
  public void test2()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom(0.0, 1957.5538866871154, 0.0, "");
      assertNotNull(jniInchiAtom0);
      
      double double0 = jniInchiAtom0.getY();
      assertEquals(1957.5538866871154, double0, 0.01D);
      assertEquals("InChI Atom:  [0.0,1957.5538866871154,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", jniInchiAtom0.getDebugString());
  }

  @Test
  public void test3()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom(0.0, 1.0, 1.0, "");
      assertNotNull(jniInchiAtom0);
      
      jniInchiAtom0.setImplicitH(935);
      assertEquals(935, jniInchiAtom0.getImplicitH());
      assertEquals("InChI Atom:  [0.0,1.0,1.0] Charge:0 // Iso Mass:0 // Implicit H:935 P:0 D:0 T:0 // Radical: NONE", jniInchiAtom0.getDebugString());
  }

  @Test
  public void test4()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("");
      assertNotNull(jniInchiAtom0);
      
      jniInchiAtom0.setImplicitProtium(0);
      assertEquals("InChI Atom:  [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", jniInchiAtom0.getDebugString());
  }

  @Test
  public void test5()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("5gl%Fy\"Q?aJ6ZWI9-");
      assertNotNull(jniInchiAtom0);
      assertEquals("InChI Atom: 5gl%Fy\"Q?aJ6ZWI9- [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", jniInchiAtom0.getDebugString());
      
      jniInchiAtom0.setInchiRadical(623);
      assertEquals(0.0, jniInchiAtom0.getY(), 0.01D);
  }

  @Test
  public void test6()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("");
      assertNotNull(jniInchiAtom0);
      
      int int0 = jniInchiAtom0.getImplicitDeuterium();
      assertEquals(0, int0);
      assertEquals("InChI Atom:  [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", jniInchiAtom0.getDebugString());
  }

  @Test
  public void test7()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("5gl%Fy\"Q?aJ6ZWI9-");
      assertNotNull(jniInchiAtom0);
      
      int int0 = jniInchiAtom0.getCharge();
      assertEquals("InChI Atom: 5gl%Fy\"Q?aJ6ZWI9- [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", jniInchiAtom0.getDebugString());
      assertEquals(0, int0);
  }

  @Test
  public void test8()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("");
      assertNotNull(jniInchiAtom0);
      
      int int0 = jniInchiAtom0.getIsotopicMass();
      assertEquals(0, int0);
      assertEquals("InChI Atom:  [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", jniInchiAtom0.getDebugString());
  }

  @Test
  public void test9()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom(";eYK1ltyP;.\":3");
      assertNotNull(jniInchiAtom0);
      
      jniInchiAtom0.setCharge(0);
      assertEquals("InChI Atom: ;eYK1ltyP;.\":3 [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", jniInchiAtom0.getDebugString());
  }

  @Test
  public void test10()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom((-1789.9835703737192), 1167.984329436447, 1.0, "");
      assertNotNull(jniInchiAtom0);
      
      jniInchiAtom0.setIsotopicMass(0);
      assertEquals("InChI Atom:  [-1789.9835703737192,1167.984329436447,1.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", jniInchiAtom0.getDebugString());
  }

  @Test
  public void test11()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom(";eYK1ltyP;.\":3");
      assertNotNull(jniInchiAtom0);
      
      String string0 = jniInchiAtom0.getElementType();
      assertEquals("InChI Atom: ;eYK1ltyP;.\":3 [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", jniInchiAtom0.getDebugString());
      assertNotNull(string0);
  }

  @Test
  public void test12()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom(0.0, 1.0, 1.0, "");
      assertNotNull(jniInchiAtom0);
      
      double double0 = jniInchiAtom0.getX();
      assertEquals(0.0, double0, 0.01D);
      assertEquals("InChI Atom:  [0.0,1.0,1.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", jniInchiAtom0.getDebugString());
  }

  @Test
  public void test13()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("5gl%Fy\"Q?aJ6ZWI9-");
      assertNotNull(jniInchiAtom0);
      
      jniInchiAtom0.setImplicitDeuterium(0);
      assertEquals("InChI Atom: 5gl%Fy\"Q?aJ6ZWI9- [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", jniInchiAtom0.getDebugString());
      assertEquals(0, jniInchiAtom0.getImplicitProtium());
  }

  @Test
  public void test14()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("");
      assertNotNull(jniInchiAtom0);
      
      jniInchiAtom0.getInchiRadical();
      assertEquals("InChI Atom:  [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", jniInchiAtom0.getDebugString());
  }

  @Test
  public void test15()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("5gl%Fy\"Q?aJ6ZWI9-");
      assertNotNull(jniInchiAtom0);
      
      double double0 = jniInchiAtom0.getZ();
      assertEquals("InChI Atom: 5gl%Fy\"Q?aJ6ZWI9- [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", jniInchiAtom0.getDebugString());
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test16()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("z.a13D");
      assertNotNull(jniInchiAtom0);
      
      int int0 = jniInchiAtom0.getImplicitProtium();
      assertEquals(0, int0);
      assertEquals("InChI Atom: z.a13D [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", jniInchiAtom0.getDebugString());
  }

  @Test
  public void test17()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("z.a13D");
      assertNotNull(jniInchiAtom0);
      
      jniInchiAtom0.setImplicitTritium((-1));
      assertEquals("InChI Atom: z.a13D [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:-1 // Radical: NONE", jniInchiAtom0.getDebugString());
      assertEquals(-1, jniInchiAtom0.getImplicitTritium());
  }

  @Test
  public void test18()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("5gl%Fy\"Q?aJ6ZWI9-");
      assertNotNull(jniInchiAtom0);
      
      int int0 = jniInchiAtom0.getImplicitH();
      assertEquals("InChI Atom: 5gl%Fy\"Q?aJ6ZWI9- [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", jniInchiAtom0.getDebugString());
      assertEquals((-1), int0);
  }

  @Test
  public void test19()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("N*>a\"Rf6");
      assertNotNull(jniInchiAtom0);
      
      jniInchiAtom0.setIsotopicMassShift(1);
      assertEquals("InChI Atom: N*>a\"Rf6 [0.0,0.0,0.0] Charge:0 // Iso Mass:10001 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", jniInchiAtom0.getDebugString());
      assertEquals(10001, jniInchiAtom0.getIsotopicMass());
  }

  @Test
  public void test20()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom(";eYK1ltyP;.\":3");
      assertNotNull(jniInchiAtom0);
      
      jniInchiAtom0.debug();
      assertEquals("InChI Atom: ;eYK1ltyP;.\":3 [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", jniInchiAtom0.getDebugString());
      assertEquals(0.0, jniInchiAtom0.getY(), 0.01D);
  }

  @Test
  public void test21()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom(0.0, 0.0, 0.0, "QYO:=5{^>)6k C5:XO");
      assertNotNull(jniInchiAtom0);
      
      jniInchiAtom0.getRadical();
      assertEquals("InChI Atom: QYO:=5{^>)6k C5:XO [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", jniInchiAtom0.getDebugString());
  }

  @Test
  public void test22()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = null;
      try {
        jniInchiAtom0 = new JniInchiAtom(0.0, 443.704414406369, 0.0, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * Chemical element must not be null
         */
      }
  }
}
