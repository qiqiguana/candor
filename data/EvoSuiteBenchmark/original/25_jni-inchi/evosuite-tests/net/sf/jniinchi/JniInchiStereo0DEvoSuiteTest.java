/*
 * This file was automatically generated by EvoSuite
 */

package net.sf.jniinchi;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import net.sf.jniinchi.INCHI_PARITY;
import net.sf.jniinchi.INCHI_STEREOTYPE;
import net.sf.jniinchi.JniInchiAtom;
import net.sf.jniinchi.JniInchiStereo0D;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class JniInchiStereo0DEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("");
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.ODD;
      JniInchiStereo0D jniInchiStereo0D0 = JniInchiStereo0D.createNewDoublebondStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_PARITY0);
      assertNotNull(jniInchiStereo0D0);
      
      jniInchiStereo0D0.debug();
      assertEquals("InChI Stereo0D: - [,,,] Type::DOUBLEBOND // Parity:ODD", jniInchiStereo0D0.getDebugString());
  }

  @Test
  public void test1()  throws Throwable  {
      JniInchiStereo0D jniInchiStereo0D0 = new JniInchiStereo0D((JniInchiAtom) null, (JniInchiAtom) null, (JniInchiAtom) null, (JniInchiAtom) null, (JniInchiAtom) null, 1366, 1366);
      assertNull(jniInchiStereo0D0.getParity());
  }

  @Test
  public void test2()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom((-1.0), 914.8672860830615, 914.8672860830615, "<}3t+ 1H5");
      INCHI_STEREOTYPE iNCHI_STEREOTYPE0 = INCHI_STEREOTYPE.TETRAHEDRAL;
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.ODD;
      JniInchiStereo0D jniInchiStereo0D0 = new JniInchiStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_STEREOTYPE0, iNCHI_PARITY0);
      JniInchiAtom jniInchiAtom1 = jniInchiStereo0D0.getNeighbor(0);
      assertSame(jniInchiAtom0, jniInchiAtom1);
  }

  @Test
  public void test3()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom(131.2579587716964, 695.8687081667241, 695.8687081667241, "#bbZDB08e+|8pf");
      INCHI_STEREOTYPE iNCHI_STEREOTYPE0 = INCHI_STEREOTYPE.ALLENE;
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.UNDEFINED;
      JniInchiStereo0D jniInchiStereo0D0 = new JniInchiStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_STEREOTYPE0, iNCHI_PARITY0);
      INCHI_STEREOTYPE iNCHI_STEREOTYPE1 = jniInchiStereo0D0.getStereoType();
      assertEquals(INCHI_STEREOTYPE.ALLENE, iNCHI_STEREOTYPE1);
  }

  @Test
  public void test4()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("");
      INCHI_STEREOTYPE iNCHI_STEREOTYPE0 = INCHI_STEREOTYPE.ALLENE;
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.ODD;
      JniInchiStereo0D jniInchiStereo0D0 = new JniInchiStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_STEREOTYPE0, iNCHI_PARITY0);
      assertNotNull(jniInchiStereo0D0);
      
      jniInchiStereo0D0.debug();
      assertEquals("InChI Stereo0D:  [,,,] Type::ALLENE // Parity:ODD", jniInchiStereo0D0.getDebugString());
  }

  @Test
  public void test5()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("Sj,r5}R");
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.UNKNOWN;
      JniInchiStereo0D jniInchiStereo0D0 = JniInchiStereo0D.createNewTetrahedralStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_PARITY0);
      assertNotNull(jniInchiStereo0D0);
      
      JniInchiAtom[] jniInchiAtomArray0 = jniInchiStereo0D0.getNeighbors();
      assertNotNull(jniInchiAtomArray0);
      assertEquals("InChI Stereo0D: Sj,r5}R [Sj,r5}R,Sj,r5}R,Sj,r5}R,Sj,r5}R] Type::TETRAHEDRAL // Parity:UNKNOWN", jniInchiStereo0D0.getDebugString());
  }

  @Test
  public void test6()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("Sj,r5}R");
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.UNKNOWN;
      JniInchiStereo0D jniInchiStereo0D0 = JniInchiStereo0D.createNewTetrahedralStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_PARITY0);
      assertNotNull(jniInchiStereo0D0);
      
      jniInchiStereo0D0.getDisconnectedParity();
      assertEquals("InChI Stereo0D: Sj,r5}R [Sj,r5}R,Sj,r5}R,Sj,r5}R,Sj,r5}R] Type::TETRAHEDRAL // Parity:UNKNOWN", jniInchiStereo0D0.getDebugString());
  }

  @Test
  public void test7()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("Sj,r5}R");
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.UNKNOWN;
      JniInchiStereo0D jniInchiStereo0D0 = JniInchiStereo0D.createNewTetrahedralStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_PARITY0);
      assertNotNull(jniInchiStereo0D0);
      
      int int0 = jniInchiStereo0D0.getInchiParity();
      assertEquals(3, int0);
      assertEquals("InChI Stereo0D: Sj,r5}R [Sj,r5}R,Sj,r5}R,Sj,r5}R,Sj,r5}R] Type::TETRAHEDRAL // Parity:UNKNOWN", jniInchiStereo0D0.getDebugString());
  }

  @Test
  public void test8()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("Charge:");
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.NONE;
      JniInchiStereo0D jniInchiStereo0D0 = JniInchiStereo0D.createNewTetrahedralStereo0D((JniInchiAtom) null, (JniInchiAtom) null, (JniInchiAtom) null, jniInchiAtom0, (JniInchiAtom) null, iNCHI_PARITY0);
      INCHI_PARITY iNCHI_PARITY1 = jniInchiStereo0D0.getParity();
      assertEquals(0, iNCHI_PARITY1.getIndx());
  }

  @Test
  public void test9()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("Charge:");
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.NONE;
      JniInchiStereo0D jniInchiStereo0D0 = JniInchiStereo0D.createNewTetrahedralStereo0D((JniInchiAtom) null, (JniInchiAtom) null, (JniInchiAtom) null, jniInchiAtom0, (JniInchiAtom) null, iNCHI_PARITY0);
      assertNotNull(jniInchiStereo0D0);
      
      int int0 = jniInchiStereo0D0.getInchiStereoType();
      assertEquals(2, int0);
  }

  @Test
  public void test10()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("");
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.UNKNOWN;
      JniInchiStereo0D jniInchiStereo0D0 = JniInchiStereo0D.createNewTetrahedralStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_PARITY0);
      assertNotNull(jniInchiStereo0D0);
      
      jniInchiStereo0D0.setDisconnectedParity(iNCHI_PARITY0);
      assertEquals("InChI Stereo0D:  [,,,] Type::TETRAHEDRAL // Parity:UNKNOWN", jniInchiStereo0D0.getDebugString());
  }

  @Test
  public void test11()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("");
      INCHI_STEREOTYPE iNCHI_STEREOTYPE0 = INCHI_STEREOTYPE.ALLENE;
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.ODD;
      JniInchiStereo0D jniInchiStereo0D0 = new JniInchiStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_STEREOTYPE0, iNCHI_PARITY0);
      JniInchiAtom jniInchiAtom1 = jniInchiStereo0D0.getCentralAtom();
      assertEquals("", jniInchiAtom1.getElementType());
  }
}
