/*
 * This file was automatically generated by EvoSuite
 */

package net.sf.jniinchi;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import net.sf.jniinchi.INCHI_RET;
import net.sf.jniinchi.JniInchiOutput;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class JniInchiOutputEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      INCHI_RET iNCHI_RET0 = INCHI_RET.BUSY;
      JniInchiOutput jniInchiOutput0 = new JniInchiOutput(iNCHI_RET0, "", "", "", "");
      String string0 = jniInchiOutput0.getLog();
      assertEquals("", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      JniInchiOutput jniInchiOutput0 = new JniInchiOutput(6, "OKAY", "OKAY", "OKAY", "OKAY");
      String string0 = jniInchiOutput0.getMessage();
      assertEquals("OKAY", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      JniInchiOutput jniInchiOutput0 = new JniInchiOutput(2007, "", "", "", "");
      String string0 = jniInchiOutput0.getAuxInfo();
      assertEquals("", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      INCHI_RET iNCHI_RET0 = INCHI_RET.BUSY;
      JniInchiOutput jniInchiOutput0 = new JniInchiOutput(iNCHI_RET0, "", "", "", "");
      String string0 = jniInchiOutput0.toString();
      assertEquals("InChI_Output: BUSY////", string0);
      assertNotNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      INCHI_RET iNCHI_RET0 = INCHI_RET.BUSY;
      JniInchiOutput jniInchiOutput0 = new JniInchiOutput(iNCHI_RET0, "", "", "", "");
      INCHI_RET iNCHI_RET1 = jniInchiOutput0.getReturnStatus();
      assertEquals("BUSY", iNCHI_RET1.name());
  }

  @Test
  public void test5()  throws Throwable  {
      INCHI_RET iNCHI_RET0 = INCHI_RET.BUSY;
      JniInchiOutput jniInchiOutput0 = new JniInchiOutput(iNCHI_RET0, "", "", "", "");
      jniInchiOutput0.setInchi((String) null);
      assertEquals("", jniInchiOutput0.getAuxInfo());
  }

  @Test
  public void test6()  throws Throwable  {
      JniInchiOutput jniInchiOutput0 = new JniInchiOutput(6, "OKAY", "OKAY", "OKAY", "OKAY");
      jniInchiOutput0.setLog("");
      assertNull(jniInchiOutput0.getReturnStatus());
  }

  @Test
  public void test7()  throws Throwable  {
      INCHI_RET iNCHI_RET0 = INCHI_RET.BUSY;
      JniInchiOutput jniInchiOutput0 = new JniInchiOutput(iNCHI_RET0, "", "", "", "");
      jniInchiOutput0.setAuxInfo("[uYa<U");
      assertEquals(INCHI_RET.BUSY, jniInchiOutput0.getReturnStatus());
  }

  @Test
  public void test8()  throws Throwable  {
      INCHI_RET iNCHI_RET0 = INCHI_RET.BUSY;
      JniInchiOutput jniInchiOutput0 = new JniInchiOutput(iNCHI_RET0, "", "", "", "");
      jniInchiOutput0.setRetStatus(iNCHI_RET0);
      assertEquals("", jniInchiOutput0.getInchi());
  }

  @Test
  public void test9()  throws Throwable  {
      JniInchiOutput jniInchiOutput0 = new JniInchiOutput(210, "Om6+<PHIn", "Om6+<PHIn", "Om6+<PHIn", "5a$]fCUV");
      String string0 = jniInchiOutput0.getInchi();
      assertEquals("InChI_Output: null/Om6+<PHIn/Om6+<PHIn/Om6+<PHIn/5a$]fCUV", jniInchiOutput0.toString());
      assertNotNull(string0);
      assertEquals("Om6+<PHIn", string0);
  }

  @Test
  public void test10()  throws Throwable  {
      JniInchiOutput jniInchiOutput0 = new JniInchiOutput(210, "Om6+<PHIn", "Om6+<PHIn", "Om6+<PHIn", "5a$]fCUV");
      jniInchiOutput0.setMessage("UfIUl0r.nl");
      assertEquals("InChI_Output: null/Om6+<PHIn/Om6+<PHIn/UfIUl0r.nl/5a$]fCUV", jniInchiOutput0.toString());
      assertEquals("5a$]fCUV", jniInchiOutput0.getLog());
  }
}
