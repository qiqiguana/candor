/*
 * This file was automatically generated by EvoSuite
 */

package ipac;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import ipac.BinaryCalculate;
import java.awt.HeadlessException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BinaryCalculateEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BinaryCalculate binaryCalculate0 = new BinaryCalculate();
      binaryCalculate0.isIPv6 = true;
      binaryCalculate0.lengthOfToken = 1024;
      // Undeclared exception!
      try {
        binaryCalculate0.prefixInPrefixCalculate("bfCD", "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000", 3, "bfCD");
        fail("Expecting exception: HeadlessException");
      } catch(HeadlessException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      BinaryCalculate binaryCalculate0 = new BinaryCalculate();
      String string0 = binaryCalculate0.IPCalculate("10", "10");
      assertEquals((-1), binaryCalculate0.semiCol);
      assertEquals("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 1\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /0\nNetmask: \nBinary Netmask: ", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      BinaryCalculate binaryCalculate0 = new BinaryCalculate();
      String string0 = binaryCalculate0.subBinary("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");
      assertNotNull(string0);
      assertEquals("1", string0);
      assertEquals(0, binaryCalculate0.MAXPREFIX);
      assertEquals(false, binaryCalculate0.isIPv4);
      assertEquals(false, binaryCalculate0.isIPv6);
  }

  @Test
  public void test3()  throws Throwable  {
      BinaryCalculate binaryCalculate0 = new BinaryCalculate();
      // Undeclared exception!
      try {
        binaryCalculate0.prefixInPrefixCalculate("=IB1AUXq_<K1bo{4is", "=IB1AUXq_<K1bo{4is", (-1), "=IB1AUXq_<K1bo{4is");
        fail("Expecting exception: HeadlessException");
      } catch(HeadlessException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      BinaryCalculate binaryCalculate0 = new BinaryCalculate();
      binaryCalculate0.MAXPREFIX = 16;
      binaryCalculate0.lengthOfToken = 16;
      String string0 = binaryCalculate0.IPCalculate("=IBfAUXq_<K1bo{4iN>s", "=IBfAUXq_<K1bo{4iN>s");
      assertEquals(16, binaryCalculate0.MAXPREFIX);
      assertEquals("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: =IBfAUXq_<K1bo{4\nBroadcast Address: \nPrefix: /14\nNetmask: \nBinary Netmask: 0000000000000000", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      BinaryCalculate binaryCalculate0 = new BinaryCalculate();
      String string0 = binaryCalculate0.IPCalculate("0", "");
      assertEquals((-1), binaryCalculate0.semiCol);
      assertEquals("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : -1\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /0\nNetmask: \nBinary Netmask: ", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      BinaryCalculate binaryCalculate0 = new BinaryCalculate();
      binaryCalculate0.isIPv6 = true;
      String string0 = binaryCalculate0.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "=}&IgIfVD}G44}<;*a-t");
      assertEquals((-1), binaryCalculate0.semiCol);
      assertEquals("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 19,342,813,113,834,066,795,298,816\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-61\nNetmask: \nBinary Netmask: ", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      BinaryCalculate binaryCalculate0 = new BinaryCalculate();
      binaryCalculate0.isIPv4 = true;
      String string0 = binaryCalculate0.IPCalculate("10", "10");
      assertEquals((-1), binaryCalculate0.semiCol);
      assertEquals("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 1\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", string0);
  }

  @Test
  public void test8()  throws Throwable  {
      BinaryCalculate binaryCalculate0 = new BinaryCalculate();
      // Undeclared exception!
      try {
        binaryCalculate0.IPCalculate("F+F:FFFFSFFFF:FFFFHF:FF:FFFC:FFF", "F+F:FFFFSFFFF:FFFFHF:FF:FFFC:FFF");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
        /*
         * For input string: \"F+F:FFFF\"
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      BinaryCalculate binaryCalculate0 = new BinaryCalculate();
      binaryCalculate0.lengthOfToken = 1;
      binaryCalculate0.isIPv6 = true;
      // Undeclared exception!
      try {
        binaryCalculate0.prefixInPrefixCalculate("", "0 -- ", 1, "1 -- 1");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
        /*
         * Zero length BigInteger
         */
      }
  }
}
