/*
 * This file was automatically generated by EvoSuite
 */

package com.densebrain.rif.server.transport;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.densebrain.rif.server.transport.WebServiceContainer;
import java.rmi.RemoteException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.xml.stream.events.Characters;
import org.apache.axis2.AxisFault;
import org.apache.axis2.addressing.EndpointReference;
import org.apache.axis2.context.ConfigurationContext;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.evosuite.testcase.CodeUnderTestException;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class WebServiceContainerEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          WebServiceContainer webServiceContainer0 = WebServiceContainer.newInstance("", 10, "");
          assertNotNull(webServiceContainer0);
          
          // Undeclared exception!
          try {
            webServiceContainer0.restartContainer();
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.net.SocketPermission localhost:10 listen,resolve)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkListen(SecurityManager.java:1120)
             * java.net.ServerSocket.bind(ServerSocket.java:327)
             * java.net.ServerSocket.<init>(ServerSocket.java:194)
             * java.net.ServerSocket.<init>(ServerSocket.java:106)
             * org.apache.axis2.transport.http.server.SimplePlainSocketFactory.createServerSocket(SimplePlainSocketFactory.java:45)
             * org.apache.axis2.transport.http.turnup.server.SimpleHttpServer.<init>(SimpleHttpServer.java:128)
             * org.apache.axis2.transport.http.turnup.server.SimpleHttpServer.<init>(SimpleHttpServer.java:91)
             * org.apache.axis2.transport.http.turnup.SimpleHTTPServer.start(SimpleHTTPServer.java:191)
             * com.densebrain.rif.server.transport.WebServiceContainer.startContainer(WebServiceContainer.java:175)
             * com.densebrain.rif.server.transport.WebServiceContainer.restartContainer(WebServiceContainer.java:163)
             * sun.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
      WebServiceContainer.newInstance("", (-1222), "");
  }

  @Test
  public void test2()  throws Throwable  {
      WebServiceContainer webServiceContainer0 = WebServiceContainer.newInstance("", (-515), "");
      assertNotNull(webServiceContainer0);
      
      EndpointReference endpointReference0 = webServiceContainer0.getEPRForService("", "");
      assertNotNull(endpointReference0);
      assertEquals("http://:-515/", endpointReference0.getAddress());
  }

  @Test
  public void test3()  throws Throwable  {
      WebServiceContainer webServiceContainer0 = WebServiceContainer.newInstance("", (-1222), "");
      assertNotNull(webServiceContainer0);
      
      Class<?> class0 = WebServiceContainer.class;
      try {
        webServiceContainer0.configureService((Class) class0, "", (String) null);
        fail("Expecting exception: RemoteException");
      } catch(RemoteException e) {
        /*
         * Unable to add service; nested exception is: 
         * \torg.apache.axis2.AxisFault:  Sorry we don't support methods overloading !!!! ; nested exception is: 
         * \tjava.lang.Exception:  Sorry we don't support methods overloading !!!! 
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          WebServiceContainer webServiceContainer0 = WebServiceContainer.newInstance((String) null, (-488), (String) null);
          assertNotNull(webServiceContainer0);
          
          Class<?> class0 = Characters.class;
          webServiceContainer0.configureService((Class) class0, "", (String) null);
          WebServiceContainer webServiceContainer1 = webServiceContainer0.restartContainer();
          assertEquals((-488), webServiceContainer0.port);
          assertNotNull(webServiceContainer1);
          assertEquals((-488), webServiceContainer1.port);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
