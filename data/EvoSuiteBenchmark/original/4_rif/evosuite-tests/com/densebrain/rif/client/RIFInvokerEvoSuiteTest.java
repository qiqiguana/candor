/*
 * This file was automatically generated by EvoSuite
 */

package com.densebrain.rif.client;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.densebrain.rif.client.RIFInvoker;
import com.densebrain.rif.client.RIFManager;
import java.io.ObjectInputValidation;
import java.net.URL;
import java.rmi.RemoteException;
import org.apache.bcel.Constants;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class RIFInvokerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Class<?> class0 = Constants.class;
      RIFInvoker<RIFInvoker<Object>> rIFInvoker0 = null;
      try {
        rIFInvoker0 = new RIFInvoker<RIFInvoker<Object>>((RIFManager) null, (Class) class0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      RIFInvoker<RIFInvoker<String>> rIFInvoker0 = null;
      try {
        rIFInvoker0 = new RIFInvoker<RIFInvoker<String>>((RIFManager) null, (Class) null);
        fail("Expecting exception: RemoteException");
      } catch(RemoteException e) {
        /*
         * Interface class can not be null
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      Class<?> class0 = URL.class;
      RIFInvoker<RIFInvoker<Integer>> rIFInvoker0 = null;
      try {
        rIFInvoker0 = new RIFInvoker<RIFInvoker<Integer>>((RIFManager) null, (Class) class0);
        fail("Expecting exception: RemoteException");
      } catch(RemoteException e) {
        /*
         * Interface class must be an interface
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      Class<?> class0 = ObjectInputValidation.class;
      RIFInvoker<String> rIFInvoker0 = null;
      try {
        rIFInvoker0 = new RIFInvoker<String>((RIFManager) null, (Class) class0);
        fail("Expecting exception: RemoteException");
      } catch(RemoteException e) {
        /*
         * Method validateObject does not declare RemoteException as a throwable
         */
      }
  }
}
