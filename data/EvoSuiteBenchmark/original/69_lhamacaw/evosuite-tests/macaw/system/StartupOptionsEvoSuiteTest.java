/*
 * This file was automatically generated by EvoSuite
 */

package macaw.system;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import macaw.system.StartupOptions;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class StartupOptionsEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      StartupOptions startupOptions0 = new StartupOptions();
      String string0 = startupOptions0.getServer();
      assertEquals("com.mysql.jdbc.Driver", startupOptions0.getDbDriverName());
      assertEquals(20, startupOptions0.getMaximumNumberOfConnections());
      assertEquals(true, startupOptions0.useDemo());
      assertEquals("jdbc:mysql://localhost/macaw", startupOptions0.getDatabaseURI());
      assertNotNull(string0);
      assertEquals("localhost", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      StartupOptions startupOptions0 = new StartupOptions();
      int int0 = startupOptions0.getMaximumNumberOfConnections();
      assertEquals(true, startupOptions0.useDemo());
      assertEquals(20, int0);
      assertEquals("com.mysql.jdbc.Driver", startupOptions0.getDbDriverName());
      assertEquals("jdbc:mysql://localhost/macaw", startupOptions0.getDatabaseURI());
  }

  @Test
  public void test2()  throws Throwable  {
      StartupOptions startupOptions0 = new StartupOptions();
      assertEquals(20, startupOptions0.getMaximumNumberOfConnections());
      
      startupOptions0.setMaximumNumberOfConnections(0);
      assertEquals("com.mysql.jdbc.Driver", startupOptions0.getDbDriverName());
  }

  @Test
  public void test3()  throws Throwable  {
      StartupOptions startupOptions0 = new StartupOptions();
      startupOptions0.setDbPassword((String) null);
      assertEquals("jdbc:mysql://localhost/macaw", startupOptions0.getDatabaseURI());
      assertEquals("com.mysql.jdbc.Driver", startupOptions0.getDbDriverName());
      assertEquals(20, startupOptions0.getMaximumNumberOfConnections());
      assertEquals(true, startupOptions0.useDemo());
  }

  @Test
  public void test4()  throws Throwable  {
      StartupOptions startupOptions0 = new StartupOptions();
      String string0 = startupOptions0.getDatabaseName();
      assertEquals(20, startupOptions0.getMaximumNumberOfConnections());
      assertEquals(true, startupOptions0.useDemo());
      assertNotNull(string0);
      assertEquals("com.mysql.jdbc.Driver", startupOptions0.getDbDriverName());
      assertEquals("jdbc:mysql://localhost/macaw", startupOptions0.getDatabaseURI());
      assertEquals("macaw", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      StartupOptions startupOptions0 = new StartupOptions();
      startupOptions0.getDbUser();
      assertEquals(true, startupOptions0.useDemo());
      assertEquals("com.mysql.jdbc.Driver", startupOptions0.getDbDriverName());
      assertEquals("jdbc:mysql://localhost/macaw", startupOptions0.getDatabaseURI());
      assertEquals(20, startupOptions0.getMaximumNumberOfConnections());
  }

  @Test
  public void test6()  throws Throwable  {
      StartupOptions startupOptions0 = new StartupOptions();
      assertEquals(true, startupOptions0.useDemo());
      
      startupOptions0.setUseDemo(false);
      assertEquals(false, startupOptions0.useDemo());
  }

  @Test
  public void test7()  throws Throwable  {
      StartupOptions startupOptions0 = new StartupOptions();
      startupOptions0.setDatabaseName("G.g$");
      assertEquals("jdbc:mysql://localhost/G.g$", startupOptions0.getDatabaseURI());
      assertEquals(20, startupOptions0.getMaximumNumberOfConnections());
  }

  @Test
  public void test8()  throws Throwable  {
      StartupOptions startupOptions0 = new StartupOptions();
      startupOptions0.getDbPassword();
      assertEquals(true, startupOptions0.useDemo());
      assertEquals("com.mysql.jdbc.Driver", startupOptions0.getDbDriverName());
      assertEquals("jdbc:mysql://localhost/macaw", startupOptions0.getDatabaseURI());
      assertEquals(20, startupOptions0.getMaximumNumberOfConnections());
  }

  @Test
  public void test9()  throws Throwable  {
      StartupOptions startupOptions0 = new StartupOptions();
      startupOptions0.getPort();
      assertEquals(true, startupOptions0.useDemo());
      assertEquals(20, startupOptions0.getMaximumNumberOfConnections());
      assertEquals("jdbc:mysql://localhost/macaw", startupOptions0.getDatabaseURI());
      assertEquals("com.mysql.jdbc.Driver", startupOptions0.getDbDriverName());
  }

  @Test
  public void test10()  throws Throwable  {
      StartupOptions startupOptions0 = new StartupOptions();
      boolean boolean0 = startupOptions0.useDemo();
      assertEquals("com.mysql.jdbc.Driver", startupOptions0.getDbDriverName());
      assertEquals(true, boolean0);
      assertEquals("jdbc:mysql://localhost/macaw", startupOptions0.getDatabaseURI());
      assertEquals(20, startupOptions0.getMaximumNumberOfConnections());
  }

  @Test
  public void test11()  throws Throwable  {
      StartupOptions startupOptions0 = new StartupOptions();
      String string0 = startupOptions0.getDbDriverName();
      assertNotNull(string0);
      assertEquals("jdbc:mysql://localhost/macaw", startupOptions0.getDatabaseURI());
      assertEquals("com.mysql.jdbc.Driver", string0);
      assertEquals(true, startupOptions0.useDemo());
      assertEquals(20, startupOptions0.getMaximumNumberOfConnections());
  }

  @Test
  public void test12()  throws Throwable  {
      StartupOptions startupOptions0 = new StartupOptions();
      startupOptions0.setDbUser("_Z(,VKw.l.*Y,lCb");
      assertEquals("com.mysql.jdbc.Driver", startupOptions0.getDbDriverName());
      assertEquals(true, startupOptions0.useDemo());
      assertEquals(20, startupOptions0.getMaximumNumberOfConnections());
      assertEquals("jdbc:mysql://localhost/macaw", startupOptions0.getDatabaseURI());
  }

  @Test
  public void test13()  throws Throwable  {
      StartupOptions startupOptions0 = new StartupOptions();
      assertEquals("com.mysql.jdbc.Driver", startupOptions0.getDbDriverName());
      
      startupOptions0.setDbDriverName("G.g$");
      assertEquals(20, startupOptions0.getMaximumNumberOfConnections());
  }

  @Test
  public void test14()  throws Throwable  {
      StartupOptions startupOptions0 = new StartupOptions();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-dbName";
      stringArray0[1] = "65=gVx";
      stringArray0[2] = "-dbPort";
      stringArray0[3] = "-dbServer";
      stringArray0[4] = "-dbServer";
      stringArray0[5] = "-production";
      stringArray0[6] = "e";
      stringArray0[7] = "";
      stringArray0[8] = "Y$W4\"btqV$j*pB^8";
      startupOptions0.processCommandLineArguments(stringArray0);
      assertEquals("jdbc:mysql://-production:-dbServer/65=gVx", startupOptions0.getDatabaseURI());
      assertEquals("65=gVx", startupOptions0.getDatabaseName());
  }

  @Test
  public void test15()  throws Throwable  {
      StartupOptions startupOptions0 = new StartupOptions();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "8H=#_&DGc";
      stringArray0[1] = "";
      stringArray0[2] = "#QnlN*M}w0";
      stringArray0[3] = "-dbServe]";
      stringArray0[4] = "b/<";
      stringArray0[5] = "aS#DHIijt@ozO3";
      stringArray0[6] = "-dbUser";
      // Undeclared exception!
      try {
        startupOptions0.processCommandLineArguments(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * StringEquals is not supposed to work on a null caller
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      StartupOptions startupOptions0 = new StartupOptions();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "V?1oS-*'hW";
      stringArray0[1] = "#GSWd@P$";
      stringArray0[2] = "hcJ";
      stringArray0[3] = "Z`,(_ :Ge!HnuN]";
      stringArray0[4] = "-dbPort";
      stringArray0[5] = "-dbPassword";
      // Undeclared exception!
      try {
        startupOptions0.processCommandLineArguments(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * StringEquals is not supposed to work on a null caller
         */
      }
  }

  @Test
  public void test17()  throws Throwable  {
      StartupOptions startupOptions0 = new StartupOptions();
      startupOptions0.setServer((String) null);
      String string0 = startupOptions0.getDatabaseURI();
      assertEquals(20, startupOptions0.getMaximumNumberOfConnections());
      assertNotNull(string0);
      assertEquals("com.mysql.jdbc.Driver", startupOptions0.getDbDriverName());
      assertEquals(true, startupOptions0.useDemo());
      assertEquals("jdbc:mysql://localhost/macaw", startupOptions0.getDatabaseURI());
      assertEquals("jdbc:mysql://localhost/macaw", string0);
  }

  @Test
  public void test18()  throws Throwable  {
      StartupOptions startupOptions0 = new StartupOptions();
      startupOptions0.setPort("jdbc:mysql://localhost/macaw");
      String string0 = startupOptions0.getDatabaseURI();
      assertEquals("jdbc:mysql://localhost:jdbc:mysql://localhost/macaw/macaw", startupOptions0.getDatabaseURI());
      assertNotNull(string0);
      assertEquals("jdbc:mysql://localhost:jdbc:mysql://localhost/macaw/macaw", string0);
  }
}
