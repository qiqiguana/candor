/*
 * This file was automatically generated by EvoSuite
 */

package macaw.persistenceLayer.demo;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.ArrayList;
import macaw.businessLayer.AliasFilePath;
import macaw.businessLayer.AvailabilityState;
import macaw.businessLayer.Category;
import macaw.businessLayer.CleaningState;
import macaw.businessLayer.DerivedVariable;
import macaw.businessLayer.RawVariable;
import macaw.businessLayer.User;
import macaw.businessLayer.Variable;
import macaw.persistenceLayer.demo.InMemoryChangeEventManager;
import macaw.persistenceLayer.demo.InMemoryListChoiceManager;
import macaw.system.MacawException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class InMemoryListChoiceManagerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager(inMemoryChangeEventManager0);
      User user0 = new User("", "");
      AliasFilePath aliasFilePath0 = new AliasFilePath();
      inMemoryListChoiceManager0.addAliasFilePath(user0, aliasFilePath0);
      assertEquals(0, aliasFilePath0.getIdentifier());
      
      ArrayList<AliasFilePath> arrayList0 = inMemoryListChoiceManager0.getAliasFilePaths(user0);
      assertNotNull(arrayList0);
      assertEquals(1, arrayList0.size());
  }

  @Test
  public void test1()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager(inMemoryChangeEventManager0);
      User user0 = new User("8q", "8q");
      Category category0 = new Category("8q");
      inMemoryListChoiceManager0.addCategory(user0, category0);
      try {
        inMemoryListChoiceManager0.addCategory(user0, category0);
        fail("Expecting exception: MacawException");
      } catch(MacawException e) {
        /*
         * There is already a category state called \"8q\".
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager(inMemoryChangeEventManager0);
      User user0 = new User();
      CleaningState cleaningState0 = new CleaningState((-808), "66gBPoow");
      inMemoryListChoiceManager0.addCleaningState(user0, cleaningState0);
      try {
        inMemoryListChoiceManager0.addCleaningState(user0, cleaningState0);
        fail("Expecting exception: MacawException");
      } catch(MacawException e) {
        /*
         * There is already a cleaning state called \"66gBPoow\".
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager(inMemoryChangeEventManager0);
      User user0 = new User();
      AvailabilityState availabilityState0 = new AvailabilityState("5JO%N*");
      inMemoryListChoiceManager0.addAvailabilityState(user0, availabilityState0);
      try {
        inMemoryListChoiceManager0.addAvailabilityState(user0, availabilityState0);
        fail("Expecting exception: MacawException");
      } catch(MacawException e) {
        /*
         * There is already a category state called \"5JO%N*\".
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager(inMemoryChangeEventManager0);
      inMemoryListChoiceManager0.clear();
  }

  @Test
  public void test5()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager(inMemoryChangeEventManager0);
      User user0 = new User();
      Category category0 = new Category("lGQ,3.6tjTB'H#@s}f");
      inMemoryListChoiceManager0.addCategory(user0, category0);
      Category category1 = inMemoryListChoiceManager0.getCategory("lGQ,3.6tjTB'H#@s}f");
      assertNotNull(category1);
      
      ArrayList<Variable> arrayList0 = new ArrayList<Variable>();
      inMemoryListChoiceManager0.updateCategory(user0, category1, arrayList0);
      assertEquals(1, category1.getIdentifier());
      assertEquals("1", category1.getDisplayItemIdentifier());
  }

  @Test
  public void test6()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager(inMemoryChangeEventManager0);
      User user0 = new User();
      Category category0 = new Category("lGQ,36tjTB'H#@sQ}f");
      inMemoryListChoiceManager0.addCategory(user0, category0);
      assertEquals(0, category0.getIdentifier());
      
      ArrayList<Category> arrayList0 = inMemoryListChoiceManager0.getCategories(user0);
      assertEquals(false, arrayList0.isEmpty());
      assertNotNull(arrayList0);
  }

  @Test
  public void test7()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager(inMemoryChangeEventManager0);
      Category category0 = inMemoryListChoiceManager0.getCategory("");
      assertNull(category0);
  }

  @Test
  public void test8()  throws Throwable  {
      InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager((InMemoryChangeEventManager) null);
      Category category0 = inMemoryListChoiceManager0.getCategory("$Q}2p<'@+9e9");
      assertNull(category0);
  }

  @Test
  public void test9()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager(inMemoryChangeEventManager0);
      Category category0 = new Category(0, "s(CDh)1F$h!");
      try {
        inMemoryListChoiceManager0.getCategoryIdentifier(category0, (Variable) null);
        fail("Expecting exception: MacawException");
      } catch(MacawException e) {
        /*
         * Non-existent category \"Unknown variable name.\" used for variable \"{1}\".
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager(inMemoryChangeEventManager0);
      Category category0 = new Category((String) null);
      DerivedVariable derivedVariable0 = new DerivedVariable();
      int int0 = inMemoryListChoiceManager0.getCategoryIdentifier(category0, (Variable) derivedVariable0);
      assertEquals(0, int0);
  }

  @Test
  public void test11()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager(inMemoryChangeEventManager0);
      User user0 = new User();
      Category category0 = new Category("N:i7] gyRh");
      inMemoryListChoiceManager0.addCategory(user0, category0);
      int int0 = inMemoryListChoiceManager0.getCategoryIdentifier(category0, (Variable) null);
      assertEquals(1, int0);
  }

  @Test
  public void test12()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager(inMemoryChangeEventManager0);
      User user0 = new User();
      CleaningState cleaningState0 = new CleaningState((-1155), "lGQ,36tjTB'H#@sQ}f");
      inMemoryListChoiceManager0.addCleaningState(user0, cleaningState0);
      assertEquals("-1155", cleaningState0.getDisplayItemIdentifier());
      
      ArrayList<CleaningState> arrayList0 = inMemoryListChoiceManager0.getCleaningStates(user0);
      assertNotNull(arrayList0);
      assertEquals(false, arrayList0.isEmpty());
  }

  @Test
  public void test13()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager(inMemoryChangeEventManager0);
      CleaningState cleaningState0 = new CleaningState(0, (String) null);
      try {
        inMemoryListChoiceManager0.getCleaningStateIdentifier(cleaningState0, (Variable) null);
        fail("Expecting exception: MacawException");
      } catch(MacawException e) {
        /*
         * Non-existent cleaning state \"Unknown variable name.\" used for variable \"{1}\".
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager(inMemoryChangeEventManager0);
      User user0 = new User();
      CleaningState cleaningState0 = new CleaningState((-1155), "lGQ,36tjTB'H#@sQ}f");
      inMemoryListChoiceManager0.addCleaningState(user0, cleaningState0);
      DerivedVariable derivedVariable0 = new DerivedVariable();
      int int0 = inMemoryListChoiceManager0.getCleaningStateIdentifier(cleaningState0, (Variable) derivedVariable0);
      assertEquals(1, int0);
  }

  @Test
  public void test15()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager(inMemoryChangeEventManager0);
      User user0 = new User();
      CleaningState cleaningState0 = new CleaningState((-1155), "lGQ,36tjTB'H#@sQ}f");
      inMemoryListChoiceManager0.addCleaningState(user0, cleaningState0);
      CleaningState cleaningState1 = new CleaningState(1, "");
      RawVariable rawVariable0 = new RawVariable();
      try {
        inMemoryListChoiceManager0.getCleaningStateIdentifier(cleaningState1, (Variable) rawVariable0);
        fail("Expecting exception: MacawException");
      } catch(MacawException e) {
        /*
         * Non-existent cleaning state \"\" used for variable \"{1}\".
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager(inMemoryChangeEventManager0);
      User user0 = new User();
      AvailabilityState availabilityState0 = new AvailabilityState("user.password.saveChanges");
      inMemoryListChoiceManager0.addAvailabilityState(user0, availabilityState0);
      assertEquals(0, availabilityState0.getIdentifier());
      
      ArrayList<AvailabilityState> arrayList0 = inMemoryListChoiceManager0.getAvailabilityStates(user0);
      assertNotNull(arrayList0);
      assertEquals(1, arrayList0.size());
  }

  @Test
  public void test17()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager(inMemoryChangeEventManager0);
      AvailabilityState availabilityState0 = new AvailabilityState((-1), "St{,V#c");
      try {
        inMemoryListChoiceManager0.getAvailabilityStateIdentifier(availabilityState0, (Variable) null);
        fail("Expecting exception: MacawException");
      } catch(MacawException e) {
        /*
         * Non-existent availability state \"Unknown variable name.\" used for variable \"{1}\".
         */
      }
  }

  @Test
  public void test18()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager(inMemoryChangeEventManager0);
      User user0 = new User();
      AvailabilityState availabilityState0 = new AvailabilityState("user.password.saveChanges");
      inMemoryListChoiceManager0.addAvailabilityState(user0, availabilityState0);
      DerivedVariable derivedVariable0 = new DerivedVariable();
      int int0 = inMemoryListChoiceManager0.getAvailabilityStateIdentifier(availabilityState0, (Variable) derivedVariable0);
      assertEquals(1, int0);
  }

  @Test
  public void test19()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager(inMemoryChangeEventManager0);
      User user0 = new User();
      AvailabilityState availabilityState0 = new AvailabilityState("user.password.saveChanges");
      inMemoryListChoiceManager0.addAvailabilityState(user0, availabilityState0);
      AvailabilityState availabilityState1 = new AvailabilityState();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      try {
        inMemoryListChoiceManager0.getAvailabilityStateIdentifier(availabilityState1, (Variable) derivedVariable0);
        fail("Expecting exception: MacawException");
      } catch(MacawException e) {
        /*
         * Non-existent availability state \"\" used for variable \"{1}\".
         */
      }
  }

  @Test
  public void test20()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager(inMemoryChangeEventManager0);
      User user0 = new User("", "");
      ArrayList<AliasFilePath> arrayList0 = inMemoryListChoiceManager0.getAliasFilePaths(user0);
      assertEquals("[]", arrayList0.toString());
  }

  @Test
  public void test21()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager(inMemoryChangeEventManager0);
      User user0 = new User("W@3++o&a", "W@3++o&a");
      AliasFilePath aliasFilePath0 = new AliasFilePath("W@3++o&a", "W@3++o&a");
      inMemoryListChoiceManager0.addAliasFilePath(user0, aliasFilePath0);
      AliasFilePath aliasFilePath1 = inMemoryListChoiceManager0.getAliasFilePath(user0, "W@3++o&a");
      assertFalse(aliasFilePath1.equals(aliasFilePath0));
  }

  @Test
  public void test22()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager(inMemoryChangeEventManager0);
      User user0 = new User();
      AliasFilePath aliasFilePath0 = new AliasFilePath();
      inMemoryListChoiceManager0.addAliasFilePath(user0, aliasFilePath0);
      AliasFilePath aliasFilePath1 = inMemoryListChoiceManager0.getAliasFilePath(user0, "lGQ,36tjTB'H#@sQ}f");
      assertNull(aliasFilePath1);
  }

  @Test
  public void test23()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager(inMemoryChangeEventManager0);
      User user0 = new User();
      AliasFilePath aliasFilePath0 = new AliasFilePath("N:i7] gyRh", "N:i7] gyRh");
      inMemoryListChoiceManager0.addAliasFilePath(user0, aliasFilePath0);
      assertEquals("0", aliasFilePath0.getDisplayItemIdentifier());
      
      ArrayList<AliasFilePath> arrayList0 = inMemoryListChoiceManager0.getAliasFilePathsMatchingName(user0, "N:i7] gyRh");
      assertNotNull(arrayList0);
      assertEquals(1, arrayList0.size());
  }

  @Test
  public void test24()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager(inMemoryChangeEventManager0);
      AliasFilePath aliasFilePath0 = new AliasFilePath();
      RawVariable rawVariable0 = new RawVariable();
      try {
        inMemoryListChoiceManager0.getAliasFilePathIdentifier(aliasFilePath0, (Variable) rawVariable0);
        fail("Expecting exception: MacawException");
      } catch(MacawException e) {
        /*
         * Non-existent alias file path \"\" used for variable \"\".
         */
      }
  }

  @Test
  public void test25()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager(inMemoryChangeEventManager0);
      User user0 = new User();
      AliasFilePath aliasFilePath0 = new AliasFilePath("N:i7] gyRh", "N:i7] gyRh");
      DerivedVariable derivedVariable0 = new DerivedVariable();
      inMemoryListChoiceManager0.addAliasFilePath(user0, aliasFilePath0);
      int int0 = inMemoryListChoiceManager0.getAliasFilePathIdentifier(aliasFilePath0, (Variable) derivedVariable0);
      assertEquals(1, int0);
  }

  @Test
  public void test26()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager(inMemoryChangeEventManager0);
      User user0 = new User("", "");
      AliasFilePath aliasFilePath0 = new AliasFilePath();
      inMemoryListChoiceManager0.addAliasFilePath(user0, aliasFilePath0);
      String string0 = inMemoryListChoiceManager0.getFilePathFromAlias("");
      assertEquals("", string0);
  }

  @Test
  public void test27()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager(inMemoryChangeEventManager0);
      User user0 = new User("& u#94[S#yc,`H\"", "& u#94[S#yc,`H\"");
      AliasFilePath aliasFilePath0 = new AliasFilePath();
      inMemoryListChoiceManager0.addAliasFilePath(user0, aliasFilePath0);
      String string0 = inMemoryListChoiceManager0.getFilePathFromAlias("& u#94[S#yc,`H\"");
      assertEquals("", string0);
  }

  @Test
  public void test28()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager(inMemoryChangeEventManager0);
      User user0 = new User("Li|x3c/v1sccqX@", "Li|x3c/v1sccqX@");
      CleaningState cleaningState0 = new CleaningState((-1895), "Li|x3c/v1sccqX@");
      try {
        inMemoryListChoiceManager0.updateCleaningState(user0, cleaningState0, (ArrayList<Variable>) null);
        fail("Expecting exception: MacawException");
      } catch(MacawException e) {
        /*
         * \"Li|x3c/v1sccqX@\" does not exist.
         */
      }
  }

  @Test
  public void test29()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager(inMemoryChangeEventManager0);
      User user0 = new User();
      CleaningState cleaningState0 = new CleaningState((-808), "66gBPoow");
      inMemoryListChoiceManager0.addCleaningState(user0, cleaningState0);
      CleaningState cleaningState1 = new CleaningState((-808), "Xin");
      inMemoryListChoiceManager0.addCleaningState(user0, cleaningState1);
      assertEquals(-808, cleaningState1.getIdentifier());
      assertEquals("-808", cleaningState1.getDisplayItemIdentifier());
  }

  @Test
  public void test30()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager(inMemoryChangeEventManager0);
      User user0 = new User("", "");
      AliasFilePath aliasFilePath0 = new AliasFilePath();
      inMemoryListChoiceManager0.addAliasFilePath(user0, aliasFilePath0);
      try {
        inMemoryListChoiceManager0.addAliasFilePath(user0, aliasFilePath0);
        fail("Expecting exception: MacawException");
      } catch(MacawException e) {
        /*
         * There is already a alias file path called \"\".
         */
      }
  }
}
