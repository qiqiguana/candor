/*
 * This file was automatically generated by EvoSuite
 */

package macaw.persistenceLayer.demo;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.ArrayList;
import macaw.businessLayer.DerivedVariable;
import macaw.businessLayer.RawVariable;
import macaw.businessLayer.User;
import macaw.businessLayer.Variable;
import macaw.businessLayer.VariableSummary;
import macaw.businessLayer.VariableTypeFilter;
import macaw.persistenceLayer.demo.InMemoryVariableFilter;
import macaw.system.MacawException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class InMemoryVariableFilterEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      InMemoryVariableFilter inMemoryVariableFilter0 = new InMemoryVariableFilter();
      assertNotNull(inMemoryVariableFilter0);
      
      ArrayList<Variable> arrayList0 = new ArrayList<Variable>();
      inMemoryVariableFilter0.setVariables(arrayList0);
      RawVariable rawVariable0 = new RawVariable();
      arrayList0.add((Variable) rawVariable0);
      User user0 = new User();
      VariableTypeFilter variableTypeFilter0 = VariableTypeFilter.RAW;
      ArrayList<VariableSummary> arrayList1 = inMemoryVariableFilter0.filterVariableSummaries(user0, "<*", "", "", variableTypeFilter0);
      assertEquals(1, arrayList1.size());
      assertNotNull(arrayList1);
  }

  @Test
  public void test1()  throws Throwable  {
      InMemoryVariableFilter inMemoryVariableFilter0 = new InMemoryVariableFilter();
      User user0 = new User();
      VariableTypeFilter variableTypeFilter0 = VariableTypeFilter.RAW_AND_DERIVED;
      ArrayList<VariableSummary> arrayList0 = inMemoryVariableFilter0.filterVariableSummaries(user0, "All", "All", "All", variableTypeFilter0);
      assertEquals(0, arrayList0.size());
  }

  @Test
  public void test2()  throws Throwable  {
      InMemoryVariableFilter inMemoryVariableFilter0 = new InMemoryVariableFilter();
      ArrayList<Variable> arrayList0 = new ArrayList<Variable>();
      inMemoryVariableFilter0.setVariables(arrayList0);
      DerivedVariable derivedVariable0 = new DerivedVariable();
      arrayList0.add((Variable) derivedVariable0);
      User user0 = new User();
      VariableTypeFilter variableTypeFilter0 = VariableTypeFilter.RAW;
      ArrayList<VariableSummary> arrayList1 = inMemoryVariableFilter0.filterVariableSummaries(user0, "^4H", "^4H", "^4H", variableTypeFilter0);
      assertEquals("[]", arrayList1.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      InMemoryVariableFilter inMemoryVariableFilter0 = new InMemoryVariableFilter();
      assertNotNull(inMemoryVariableFilter0);
      
      ArrayList<Variable> arrayList0 = new ArrayList<Variable>();
      inMemoryVariableFilter0.setVariables(arrayList0);
      DerivedVariable derivedVariable0 = new DerivedVariable();
      arrayList0.add((Variable) derivedVariable0);
      User user0 = new User();
      VariableTypeFilter variableTypeFilter0 = VariableTypeFilter.DERIVED;
      ArrayList<VariableSummary> arrayList1 = inMemoryVariableFilter0.filterVariableSummaries(user0, "^4H", "", "", variableTypeFilter0);
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
  }

  @Test
  public void test4()  throws Throwable  {
      InMemoryVariableFilter inMemoryVariableFilter0 = new InMemoryVariableFilter();
      ArrayList<Variable> arrayList0 = new ArrayList<Variable>();
      inMemoryVariableFilter0.setVariables(arrayList0);
      RawVariable rawVariable0 = new RawVariable();
      arrayList0.add((Variable) rawVariable0);
      User user0 = new User();
      VariableTypeFilter variableTypeFilter0 = VariableTypeFilter.DERIVED;
      ArrayList<VariableSummary> arrayList1 = inMemoryVariableFilter0.filterVariableSummaries(user0, "^4H", "", "", variableTypeFilter0);
      assertEquals(true, arrayList1.isEmpty());
  }

  @Test
  public void test5()  throws Throwable  {
      InMemoryVariableFilter inMemoryVariableFilter0 = new InMemoryVariableFilter();
      assertNotNull(inMemoryVariableFilter0);
      
      ArrayList<Variable> arrayList0 = new ArrayList<Variable>();
      inMemoryVariableFilter0.setVariables(arrayList0);
      RawVariable rawVariable0 = new RawVariable();
      arrayList0.add((Variable) rawVariable0);
      User user0 = new User();
      VariableTypeFilter variableTypeFilter0 = VariableTypeFilter.RAW;
      ArrayList<VariableSummary> arrayList1 = inMemoryVariableFilter0.filterVariableSummaries(user0, "^4H", "^4H", "^4H", variableTypeFilter0);
      assertNotNull(arrayList1);
      assertEquals(true, arrayList1.isEmpty());
  }

  @Test
  public void test6()  throws Throwable  {
      InMemoryVariableFilter inMemoryVariableFilter0 = new InMemoryVariableFilter();
      assertNotNull(inMemoryVariableFilter0);
      
      ArrayList<Variable> arrayList0 = new ArrayList<Variable>();
      inMemoryVariableFilter0.setVariables(arrayList0);
      RawVariable rawVariable0 = new RawVariable();
      arrayList0.add((Variable) rawVariable0);
      User user0 = new User();
      VariableTypeFilter variableTypeFilter0 = VariableTypeFilter.RAW;
      ArrayList<VariableSummary> arrayList1 = inMemoryVariableFilter0.filterVariableSummaries(user0, "", "^4H", "<*", variableTypeFilter0);
      assertNotNull(arrayList1);
      assertEquals(0, arrayList1.size());
  }
}
