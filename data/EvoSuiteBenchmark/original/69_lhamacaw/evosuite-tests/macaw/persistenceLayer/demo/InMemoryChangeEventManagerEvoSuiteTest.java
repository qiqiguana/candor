/*
 * This file was automatically generated by EvoSuite
 */

package macaw.persistenceLayer.demo;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.ArrayList;
import macaw.businessLayer.RawVariable;
import macaw.businessLayer.SupportingDocument;
import macaw.businessLayer.User;
import macaw.businessLayer.Variable;
import macaw.persistenceLayer.demo.InMemoryChangeEventManager;
import macaw.system.ChangeEventType;
import macaw.system.MacawChangeEvent;
import macaw.system.MacawException;
import org.evosuite.runtime.System;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class InMemoryChangeEventManagerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      inMemoryChangeEventManager0.clear();
  }

  @Test
  public void test1()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      ChangeEventType changeEventType0 = ChangeEventType.LIST_CHOICE;
      MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent(changeEventType0, "z;ID", "z;ID");
      inMemoryChangeEventManager0.registerChangeEvent(macawChangeEvent0);
      User user0 = new User("z;ID", "z;ID");
      SupportingDocument supportingDocument0 = new SupportingDocument();
      ArrayList<MacawChangeEvent> arrayList0 = inMemoryChangeEventManager0.getChangeHistoryForSupportingDocument(user0, supportingDocument0);
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
  }

  @Test
  public void test2()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      ChangeEventType changeEventType0 = ChangeEventType.VARIABLE;
      MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent(changeEventType0, "\"", "\"");
      inMemoryChangeEventManager0.registerChangeEvent(macawChangeEvent0);
      RawVariable rawVariable0 = new RawVariable();
      User user0 = new User();
      ArrayList<MacawChangeEvent> arrayList0 = inMemoryChangeEventManager0.getChangeHistoryForVariable(user0, (Variable) rawVariable0);
      assertEquals(0, arrayList0.size());
  }

  @Test
  public void test3()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      ChangeEventType changeEventType0 = ChangeEventType.VARIABLE;
      MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent(changeEventType0, "\"", "\"");
      inMemoryChangeEventManager0.registerChangeEvent(macawChangeEvent0);
      macawChangeEvent0.setVariableOwnerID(1);
      RawVariable rawVariable0 = new RawVariable();
      User user0 = new User();
      ArrayList<MacawChangeEvent> arrayList0 = inMemoryChangeEventManager0.getChangeHistoryForVariable(user0, (Variable) rawVariable0);
      assertNotNull(arrayList0);
      assertEquals(true, arrayList0.isEmpty());
  }

  @Test
  public void test4()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      User user0 = new User();
      RawVariable rawVariable0 = new RawVariable();
      MacawChangeEvent macawChangeEvent0 = Variable.detectChangesInAlternativeVariable(user0, (Variable) rawVariable0, (Variable) rawVariable0);
      inMemoryChangeEventManager0.registerChangeEvent(macawChangeEvent0);
      ArrayList<MacawChangeEvent> arrayList0 = inMemoryChangeEventManager0.getChangeHistoryForVariable(user0, (Variable) rawVariable0);
      assertEquals(true, arrayList0.isEmpty());
      assertNotNull(arrayList0);
  }

  @Test
  public void test5()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      ChangeEventType changeEventType0 = ChangeEventType.SUPPORTING_DOCUMENT;
      MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent(changeEventType0, "BuXUBVwzH", "BuXUBVwzH");
      inMemoryChangeEventManager0.registerChangeEvent(macawChangeEvent0);
      User user0 = new User("BuXUBVwzH", "BuXUBVwzH");
      SupportingDocument supportingDocument0 = new SupportingDocument();
      ArrayList<MacawChangeEvent> arrayList0 = inMemoryChangeEventManager0.getChangeHistoryForSupportingDocument(user0, supportingDocument0);
      assertNotNull(arrayList0);
      assertEquals(1, arrayList0.size());
  }

  @Test
  public void test6()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      ChangeEventType changeEventType0 = ChangeEventType.SUPPORTING_DOCUMENT;
      MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent(changeEventType0, "BuXUBVwzH", "BuXUBVwzH");
      inMemoryChangeEventManager0.registerChangeEvent(macawChangeEvent0);
      User user0 = new User("BuXUBVwzH", "BuXUBVwzH");
      SupportingDocument supportingDocument0 = new SupportingDocument();
      macawChangeEvent0.setChangedObjectIdentifier(1408);
      ArrayList<MacawChangeEvent> arrayList0 = inMemoryChangeEventManager0.getChangeHistoryForSupportingDocument(user0, supportingDocument0);
      assertEquals(true, arrayList0.isEmpty());
      assertNotNull(arrayList0);
  }

  @Test
  public void test7()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      ChangeEventType changeEventType0 = ChangeEventType.VARIABLE;
      MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent(changeEventType0, "\"", "\"");
      inMemoryChangeEventManager0.registerChangeEvent(macawChangeEvent0);
      macawChangeEvent0.setVariableOwnerID(1);
      RawVariable rawVariable0 = new RawVariable();
      ArrayList<MacawChangeEvent> arrayList0 = inMemoryChangeEventManager0.getChangeHistoryForValueLabels((User) null, (Variable) rawVariable0);
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
  }

  @Test
  public void test8()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      User user0 = new User();
      RawVariable rawVariable0 = new RawVariable();
      MacawChangeEvent macawChangeEvent0 = Variable.detectChangesInAlternativeVariable(user0, (Variable) rawVariable0, (Variable) rawVariable0);
      inMemoryChangeEventManager0.registerChangeEvent(macawChangeEvent0);
      ArrayList<MacawChangeEvent> arrayList0 = inMemoryChangeEventManager0.getChangeHistoryForValueLabels(user0, (Variable) rawVariable0);
      assertNotNull(arrayList0);
      assertEquals(1, arrayList0.size());
  }

  @Test
  public void test9()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      ChangeEventType changeEventType0 = ChangeEventType.VARIABLE;
      MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent(changeEventType0, "\"", "\"");
      inMemoryChangeEventManager0.registerChangeEvent(macawChangeEvent0);
      User user0 = new User();
      ArrayList<MacawChangeEvent> arrayList0 = inMemoryChangeEventManager0.getChangeHistoryByUser(user0);
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
  }

  @Test
  public void test10()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      ChangeEventType changeEventType0 = ChangeEventType.LIST_CHOICE;
      MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent(changeEventType0, "z;ID", "z;ID");
      inMemoryChangeEventManager0.registerChangeEvent(macawChangeEvent0);
      ArrayList<MacawChangeEvent> arrayList0 = inMemoryChangeEventManager0.getChangeHistoryForListChoices();
      assertEquals(1, arrayList0.size());
      assertNotNull(arrayList0);
  }

  @Test
  public void test11()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      ChangeEventType changeEventType0 = ChangeEventType.SUPPORTING_DOCUMENT;
      MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent(changeEventType0, "BuXUBVwzH", "BuXUBVwzH");
      inMemoryChangeEventManager0.registerChangeEvent(macawChangeEvent0);
      ArrayList<MacawChangeEvent> arrayList0 = inMemoryChangeEventManager0.getChangeHistoryForListChoices();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
  }

  @Test
  public void test12()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      ArrayList<MacawChangeEvent> arrayList0 = inMemoryChangeEventManager0.getAllChanges();
      assertNotNull(arrayList0);
      
      MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent();
      inMemoryChangeEventManager0.registerChangeEvent(macawChangeEvent0);
      User user0 = new User();
      System.setCurrentTimeMillis((long) 1);
      MacawChangeEvent macawChangeEvent1 = new MacawChangeEvent();
      arrayList0.add(macawChangeEvent1);
      inMemoryChangeEventManager0.registerChangeEvents(arrayList0);
      assertEquals(4, arrayList0.size());
      
      ArrayList<MacawChangeEvent> arrayList1 = inMemoryChangeEventManager0.getChangeHistoryByUser(user0);
      assertFalse(arrayList1.equals(arrayList0));
  }
}
