/*
 * This file was automatically generated by EvoSuite
 */

package macaw.persistenceLayer.demo;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.ArrayList;
import macaw.businessLayer.User;
import macaw.persistenceLayer.demo.InMemoryChangeEventManager;
import macaw.persistenceLayer.demo.InMemoryUserManager;
import macaw.system.Log;
import macaw.system.MacawException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class InMemoryUserManagerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      Log log0 = new Log();
      User user0 = new User();
      InMemoryUserManager inMemoryUserManager0 = new InMemoryUserManager(inMemoryChangeEventManager0, log0, user0);
      inMemoryUserManager0.clear();
  }

  @Test
  public void test1()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      Log log0 = new Log();
      User user0 = new User();
      InMemoryUserManager inMemoryUserManager0 = new InMemoryUserManager(inMemoryChangeEventManager0, log0, user0);
      inMemoryUserManager0.validateUser(user0);
      assertEquals("", user0.getPostCode());
  }

  @Test
  public void test2()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      Log log0 = new Log();
      User user0 = new User();
      InMemoryUserManager inMemoryUserManager0 = new InMemoryUserManager(inMemoryChangeEventManager0, log0, user0);
      ArrayList<User> arrayList0 = inMemoryUserManager0.getUnverifiedUsers(user0);
      inMemoryUserManager0.deleteUsers(user0, arrayList0);
      assertEquals("", user0.getUserID());
  }

  @Test
  public void test3()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      Log log0 = new Log();
      User user0 = new User();
      InMemoryUserManager inMemoryUserManager0 = new InMemoryUserManager(inMemoryChangeEventManager0, log0, user0);
      ArrayList<User> arrayList0 = inMemoryUserManager0.getUnverifiedUsers(user0);
      arrayList0.add(user0);
      try {
        inMemoryUserManager0.deleteUsers(user0, arrayList0);
        fail("Expecting exception: MacawException");
      } catch(MacawException e) {
        /*
         * \"\" does not exist.
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      Log log0 = new Log();
      User user0 = new User("i28{ao\u0001RUm?^#MP", (String) null);
      InMemoryUserManager inMemoryUserManager0 = new InMemoryUserManager(inMemoryChangeEventManager0, log0, user0);
      ArrayList<User> arrayList0 = inMemoryUserManager0.getUsers(user0);
      assertEquals("[]", arrayList0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      Log log0 = new Log();
      User user0 = new User("i28{ao\u0001RUm?^#MP", (String) null);
      InMemoryUserManager inMemoryUserManager0 = new InMemoryUserManager(inMemoryChangeEventManager0, log0, user0);
      int int0 = inMemoryUserManager0.getUserIdentifier((User) null);
      assertEquals((-1), int0);
  }

  @Test
  public void test6()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      Log log0 = new Log();
      User user0 = new User("i28{ao\u0001RUm?^#MP", (String) null);
      InMemoryUserManager inMemoryUserManager0 = new InMemoryUserManager(inMemoryChangeEventManager0, log0, user0);
      User user1 = inMemoryUserManager0.getUserFromID(user0, "UNABLE_TO_CHECK_ONTOLOGY_TERM_DUPLICATES");
      assertNull(user1);
  }

  @Test
  public void test7()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      Log log0 = new Log();
      User user0 = new User("i28{ao\u0001RUm?^#MP", (String) null);
      InMemoryUserManager inMemoryUserManager0 = new InMemoryUserManager(inMemoryChangeEventManager0, log0, user0);
      User user1 = new User((String) null, (String) null);
      try {
        inMemoryUserManager0.addUser(user1, user1);
        fail("Expecting exception: MacawException");
      } catch(MacawException e) {
        /*
         * Invalid userID or password for administrator \"null\".
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      Log log0 = new Log();
      User user0 = new User("Tq2qlY %}v$,tx_s'B]", "Tq2qlY %}v$,tx_s'B]");
      InMemoryUserManager inMemoryUserManager0 = new InMemoryUserManager(inMemoryChangeEventManager0, log0, user0);
      User user1 = new User("Tq2qlY %}v$,tx_s'B]", "i]adFeFffNjiAg");
      try {
        inMemoryUserManager0.addUser(user1, user1);
        fail("Expecting exception: MacawException");
      } catch(MacawException e) {
        /*
         * Invalid userID or password for administrator \"Tq2qlY %}v$,tx_s'B]\".
         */
      }
  }
}
