/*
 * This file was automatically generated by EvoSuite
 */

package macaw.persistenceLayer.demo;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.ArrayList;
import macaw.businessLayer.DerivedVariable;
import macaw.businessLayer.User;
import macaw.businessLayer.ValueLabel;
import macaw.businessLayer.Variable;
import macaw.persistenceLayer.demo.InMemoryChangeEventManager;
import macaw.persistenceLayer.demo.InMemoryValueLabelManager;
import macaw.system.MacawException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class InMemoryValueLabelManagerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      InMemoryValueLabelManager inMemoryValueLabelManager0 = new InMemoryValueLabelManager(inMemoryChangeEventManager0);
      DerivedVariable derivedVariable0 = new DerivedVariable();
      User user0 = new User();
      ArrayList<ValueLabel> arrayList0 = new ArrayList<ValueLabel>();
      ValueLabel valueLabel0 = new ValueLabel();
      arrayList0.add(valueLabel0);
      inMemoryValueLabelManager0.addValueLabels(user0, (Variable) derivedVariable0, arrayList0);
      inMemoryValueLabelManager0.deleteValueLabels(user0, (Variable) derivedVariable0, arrayList0);
      assertEquals(1, arrayList0.size());
  }

  @Test
  public void test1()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      InMemoryValueLabelManager inMemoryValueLabelManager0 = new InMemoryValueLabelManager(inMemoryChangeEventManager0);
      inMemoryValueLabelManager0.clear();
  }

  @Test
  public void test2()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      InMemoryValueLabelManager inMemoryValueLabelManager0 = new InMemoryValueLabelManager(inMemoryChangeEventManager0);
      DerivedVariable derivedVariable0 = new DerivedVariable();
      User user0 = new User();
      ArrayList<ValueLabel> arrayList0 = new ArrayList<ValueLabel>();
      ValueLabel valueLabel0 = new ValueLabel();
      arrayList0.add(valueLabel0);
      inMemoryValueLabelManager0.addValueLabels(user0, (Variable) derivedVariable0, arrayList0);
      ArrayList<ValueLabel> arrayList1 = inMemoryValueLabelManager0.getValueLabels(user0, (Variable) derivedVariable0);
      assertFalse(arrayList1.equals(arrayList0));
      assertEquals(1, arrayList1.size());
      assertNotNull(arrayList1);
  }

  @Test
  public void test3()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      InMemoryValueLabelManager inMemoryValueLabelManager0 = new InMemoryValueLabelManager(inMemoryChangeEventManager0);
      DerivedVariable derivedVariable0 = new DerivedVariable();
      User user0 = new User();
      ArrayList<ValueLabel> arrayList0 = new ArrayList<ValueLabel>();
      ValueLabel valueLabel0 = new ValueLabel();
      arrayList0.add(valueLabel0);
      try {
        inMemoryValueLabelManager0.updateValueLabels(user0, (Variable) derivedVariable0, arrayList0);
        fail("Expecting exception: MacawException");
      } catch(MacawException e) {
        /*
         * \"-\" does not exist.
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      InMemoryValueLabelManager inMemoryValueLabelManager0 = new InMemoryValueLabelManager(inMemoryChangeEventManager0);
      DerivedVariable derivedVariable0 = new DerivedVariable();
      User user0 = new User();
      ArrayList<ValueLabel> arrayList0 = new ArrayList<ValueLabel>();
      ValueLabel valueLabel0 = new ValueLabel();
      arrayList0.add(valueLabel0);
      inMemoryValueLabelManager0.addValueLabels(user0, (Variable) derivedVariable0, arrayList0);
      inMemoryValueLabelManager0.updateValueLabels(user0, (Variable) derivedVariable0, arrayList0);
      assertEquals(false, derivedVariable0.isCoded());
  }

  @Test
  public void test5()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      InMemoryValueLabelManager inMemoryValueLabelManager0 = new InMemoryValueLabelManager(inMemoryChangeEventManager0);
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ValueLabel valueLabel0 = new ValueLabel();
      int int0 = inMemoryValueLabelManager0.getValueLabelIdentifier((Variable) derivedVariable0, valueLabel0);
      assertEquals((-1), int0);
  }

  @Test
  public void test6()  throws Throwable  {
      InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
      InMemoryValueLabelManager inMemoryValueLabelManager0 = new InMemoryValueLabelManager(inMemoryChangeEventManager0);
      DerivedVariable derivedVariable0 = new DerivedVariable();
      User user0 = new User();
      ArrayList<ValueLabel> arrayList0 = new ArrayList<ValueLabel>();
      ValueLabel valueLabel0 = new ValueLabel();
      arrayList0.add(valueLabel0);
      inMemoryValueLabelManager0.addValueLabels(user0, (Variable) derivedVariable0, arrayList0);
      int int0 = inMemoryValueLabelManager0.getValueLabelIdentifier((Variable) derivedVariable0, valueLabel0);
      assertEquals(true, valueLabel0.isEditingExistingRecord());
      assertEquals(1, int0);
  }
}
