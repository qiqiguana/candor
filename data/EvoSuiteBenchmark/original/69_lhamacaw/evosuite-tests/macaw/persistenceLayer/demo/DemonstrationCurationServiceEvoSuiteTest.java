/*
 * This file was automatically generated by EvoSuite
 */

package macaw.persistenceLayer.demo;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.ArrayList;
import macaw.businessLayer.AliasFilePath;
import macaw.businessLayer.AvailabilityState;
import macaw.businessLayer.Category;
import macaw.businessLayer.CleaningState;
import macaw.businessLayer.DerivedVariable;
import macaw.businessLayer.OntologyTerm;
import macaw.businessLayer.RawVariable;
import macaw.businessLayer.SupportingDocument;
import macaw.businessLayer.User;
import macaw.businessLayer.ValueLabel;
import macaw.businessLayer.Variable;
import macaw.businessLayer.VariableSummary;
import macaw.businessLayer.VariableTypeFilter;
import macaw.persistenceLayer.demo.DemonstrationCurationService;
import macaw.system.MacawChangeEvent;
import macaw.system.MacawException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DemonstrationCurationServiceEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService(false);
      User user0 = new User();
      String string0 = demonstrationCurationService0.getFilePathFromAlias(user0, "");
      assertEquals("", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService();
      assertNotNull(demonstrationCurationService0);
      
      User user0 = new User((String) null, (String) null);
      ArrayList<SupportingDocument> arrayList0 = demonstrationCurationService0.getAllSupportingDocuments(user0);
      assertNotNull(arrayList0);
      assertEquals(2, arrayList0.size());
  }

  @Test
  public void test2()  throws Throwable  {
      DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService();
      demonstrationCurationService0.addChangeEvents((MacawChangeEvent) null);
  }

  @Test
  public void test3()  throws Throwable  {
      DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService(true);
      User user0 = new User();
      Category category0 = new Category("lR2?m:W7bcjr0fbRT@}");
      try {
        demonstrationCurationService0.updateCategory(user0, category0);
        fail("Expecting exception: MacawException");
      } catch(MacawException e) {
        /*
         * \"lR2?m:W7bcjr0fbRT@}\" does not exist.
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService(true);
      User user0 = new User();
      ArrayList<OntologyTerm> arrayList0 = demonstrationCurationService0.filterOntologyTerms(user0, "8", "8");
      assertEquals(0, arrayList0.size());
  }

  @Test
  public void test5()  throws Throwable  {
      DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService();
      User user0 = new User();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      try {
        demonstrationCurationService0.getOntologyTerms(user0, (Variable) derivedVariable0);
        fail("Expecting exception: MacawException");
      } catch(MacawException e) {
        /*
         * \"\" does not exist.
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService();
      assertNotNull(demonstrationCurationService0);
      
      User user0 = new User("", "");
      RawVariable rawVariable0 = new RawVariable();
      int int0 = demonstrationCurationService0.getValueLabelIdentifier(user0, (Variable) rawVariable0, (ValueLabel) null);
      assertEquals((-1), int0);
  }

  @Test
  public void test7()  throws Throwable  {
      DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService();
      User user0 = new User();
      try {
        demonstrationCurationService0.addUser(user0, user0);
        fail("Expecting exception: MacawException");
      } catch(MacawException e) {
        /*
         * Invalid userID or password for administrator \"\".
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService();
      User user0 = new User("lhq IE4VYU", "lhq IE4VYU");
      RawVariable rawVariable0 = new RawVariable();
      try {
        demonstrationCurationService0.disassociateOntologyTermsFromVariable(user0, (Variable) rawVariable0, (ArrayList<OntologyTerm>) null);
        fail("Expecting exception: MacawException");
      } catch(MacawException e) {
        /*
         * \"\" does not exist.
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService(true);
      User user0 = new User();
      ArrayList<AvailabilityState> arrayList0 = demonstrationCurationService0.getAvailabilityStates(user0);
      assertNotNull(arrayList0);
      
      demonstrationCurationService0.deleteAvailabilityStates(user0, arrayList0);
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
  }

  @Test
  public void test10()  throws Throwable  {
      DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService();
      assertNotNull(demonstrationCurationService0);
      
      VariableTypeFilter variableTypeFilter0 = VariableTypeFilter.RAW;
      ArrayList<VariableSummary> arrayList0 = demonstrationCurationService0.filterVariableSummaries((User) null, "E9 `\"_,tZ/A DzU", "E9 `\"_,tZ/A DzU", "E9 `\"_,tZ/A DzU", variableTypeFilter0);
      assertEquals(true, arrayList0.isEmpty());
      assertNotNull(arrayList0);
  }

  @Test
  public void test11()  throws Throwable  {
      DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService(false);
      User user0 = new User();
      RawVariable rawVariable0 = new RawVariable();
      ArrayList<MacawChangeEvent> arrayList0 = demonstrationCurationService0.getChangeHistoryForVariable(user0, (Variable) rawVariable0);
      assertEquals("[]", arrayList0.toString());
  }

  @Test
  public void test12()  throws Throwable  {
      DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService(false);
      assertNotNull(demonstrationCurationService0);
      
      User user0 = new User();
      ArrayList<MacawChangeEvent> arrayList0 = demonstrationCurationService0.getChangeHistoryForListChoices(user0);
      assertNotNull(arrayList0);
      assertEquals(true, arrayList0.isEmpty());
  }

  @Test
  public void test13()  throws Throwable  {
      DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService(false);
      User user0 = new User();
      ArrayList<SupportingDocument> arrayList0 = demonstrationCurationService0.filterSupportingDocuments(user0, "variable.year.label", "variable.year.label");
      assertEquals(0, arrayList0.size());
  }

  @Test
  public void test14()  throws Throwable  {
      DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService();
      User user0 = new User();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      try {
        demonstrationCurationService0.getSupportingDocuments(user0, (Variable) derivedVariable0);
        fail("Expecting exception: MacawException");
      } catch(MacawException e) {
        /*
         * \"\" does not exist.
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService(false);
      User user0 = new User();
      AliasFilePath aliasFilePath0 = new AliasFilePath("", "");
      try {
        demonstrationCurationService0.updateAliasFilePath(user0, aliasFilePath0);
        fail("Expecting exception: MacawException");
      } catch(MacawException e) {
        /*
         * \"\" does not exist.
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService(false);
      User user0 = new User();
      try {
        demonstrationCurationService0.updateUser(user0, user0);
        fail("Expecting exception: MacawException");
      } catch(MacawException e) {
        /*
         * Invalid userID or password for administrator \"\".
         */
      }
  }

  @Test
  public void test17()  throws Throwable  {
      DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService();
      User user0 = new User("E9 `\"_,tZ/A DzU", "E9 `\"_,tZ/A DzU");
      DerivedVariable derivedVariable0 = new DerivedVariable();
      // Undeclared exception!
      try {
        demonstrationCurationService0.getValueLabels(user0, (Variable) derivedVariable0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test18()  throws Throwable  {
      DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService();
      User user0 = new User();
      try {
        demonstrationCurationService0.checkValidAdministrator(user0);
        fail("Expecting exception: MacawException");
      } catch(MacawException e) {
        /*
         * Invalid userID or password for administrator \"\".
         */
      }
  }

  @Test
  public void test19()  throws Throwable  {
      DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService(true);
      User user0 = new User();
      CleaningState cleaningState0 = new CleaningState("#)JMsjq");
      try {
        demonstrationCurationService0.updateCleaningState(user0, cleaningState0);
        fail("Expecting exception: MacawException");
      } catch(MacawException e) {
        /*
         * \"#)JMsjq\" does not exist.
         */
      }
  }

  @Test
  public void test20()  throws Throwable  {
      DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService();
      User user0 = new User("DUPLICATE_VALUE_LABEL", "DUPLICATE_VALUE_LABEL");
      // Undeclared exception!
      try {
        demonstrationCurationService0.deleteAliasFilePaths(user0, (ArrayList<AliasFilePath>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test21()  throws Throwable  {
      DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService(false);
      assertNotNull(demonstrationCurationService0);
      
      User user0 = new User();
      ArrayList<AliasFilePath> arrayList0 = demonstrationCurationService0.getAliasFilePaths(user0);
      assertEquals(false, arrayList0.isEmpty());
      assertNotNull(arrayList0);
  }

  @Test
  public void test22()  throws Throwable  {
      DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService();
      assertNotNull(demonstrationCurationService0);
      
      User user0 = new User((String) null, (String) null);
      ArrayList<OntologyTerm> arrayList0 = demonstrationCurationService0.getAllOntologyTerms(user0);
      assertNotNull(arrayList0);
      
      demonstrationCurationService0.deleteOntologyTerms(user0, arrayList0);
      assertEquals(5, arrayList0.size());
      assertEquals(false, arrayList0.isEmpty());
  }

  @Test
  public void test23()  throws Throwable  {
      DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService(true);
      User user0 = new User();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      try {
        demonstrationCurationService0.updateSupportingDocument(user0, supportingDocument0);
        fail("Expecting exception: MacawException");
      } catch(MacawException e) {
        /*
         * \"-\" does not exist.
         */
      }
  }

  @Test
  public void test24()  throws Throwable  {
      DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService();
      // Undeclared exception!
      try {
        demonstrationCurationService0.clear((User) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test25()  throws Throwable  {
      DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService();
      User user0 = new User();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      try {
        demonstrationCurationService0.getSourceVariables(user0, derivedVariable0);
        fail("Expecting exception: MacawException");
      } catch(MacawException e) {
        /*
         * \"\" does not exist.
         */
      }
  }

  @Test
  public void test26()  throws Throwable  {
      DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService(false);
      User user0 = new User();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      Variable variable0 = demonstrationCurationService0.getOriginalVariable(user0, (Variable) derivedVariable0);
      assertNull(variable0);
  }

  @Test
  public void test27()  throws Throwable  {
      DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService(false);
      User user0 = new User();
      ArrayList<MacawChangeEvent> arrayList0 = demonstrationCurationService0.getChangeHistoryByUser(user0);
      assertEquals(0, arrayList0.size());
  }

  @Test
  public void test28()  throws Throwable  {
      DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService(true);
      User user0 = new User();
      // Undeclared exception!
      try {
        demonstrationCurationService0.getCompleteVariableData(user0, (VariableSummary) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test29()  throws Throwable  {
      DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService();
      User user0 = new User((String) null, (String) null);
      // Undeclared exception!
      try {
        demonstrationCurationService0.setAlternativeVariable(user0, (Variable) null, (Variable) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test30()  throws Throwable  {
      DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService();
      User user0 = new User("kkfBCk(&z`1@Q8h", "kkfBCk(&z`1@Q8h");
      ArrayList<User> arrayList0 = demonstrationCurationService0.getUsers(user0);
      try {
        demonstrationCurationService0.deleteUsers(user0, arrayList0);
        fail("Expecting exception: MacawException");
      } catch(MacawException e) {
        /*
         * Invalid userID or password for administrator \"kkfBCk(&z`1@Q8h\".
         */
      }
  }

  @Test
  public void test31()  throws Throwable  {
      DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService(false);
      User user0 = new User();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      try {
        demonstrationCurationService0.updateOntologyTerm(user0, ontologyTerm0);
        fail("Expecting exception: MacawException");
      } catch(MacawException e) {
      }
  }

  @Test
  public void test32()  throws Throwable  {
      DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService();
      assertNotNull(demonstrationCurationService0);
      
      User user0 = new User();
      ArrayList<CleaningState> arrayList0 = demonstrationCurationService0.getCleaningStates(user0);
      assertEquals(false, arrayList0.isEmpty());
      assertNotNull(arrayList0);
  }

  @Test
  public void test33()  throws Throwable  {
      DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService(true);
      User user0 = new User();
      // Undeclared exception!
      try {
        demonstrationCurationService0.updateRawVariable(user0, (RawVariable) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test34()  throws Throwable  {
      DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService();
      User user0 = new User();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      try {
        demonstrationCurationService0.updateDerivedVariable(user0, derivedVariable0);
        fail("Expecting exception: MacawException");
      } catch(MacawException e) {
      }
  }

  @Test
  public void test35()  throws Throwable  {
      DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService(false);
      User user0 = new User((String) null, "");
      try {
        demonstrationCurationService0.getAllChanges(user0);
        fail("Expecting exception: MacawException");
      } catch(MacawException e) {
        /*
         * Invalid userID or password for administrator \"null\".
         */
      }
  }

  @Test
  public void test36()  throws Throwable  {
      DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService(true);
      User user0 = new User("SUPPORTING_DOCUMENT", "SUPPORTING_DOCUMENT");
      // Undeclared exception!
      try {
        demonstrationCurationService0.disassociateSupportingDocumentsFromVariable(user0, (Variable) null, (ArrayList<SupportingDocument>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test37()  throws Throwable  {
      DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService();
      assertNotNull(demonstrationCurationService0);
      
      User user0 = new User();
      ArrayList<VariableSummary> arrayList0 = demonstrationCurationService0.getSummaryDataForAllVariables(user0);
      assertEquals(4, arrayList0.size());
      assertNotNull(arrayList0);
  }

  @Test
  public void test38()  throws Throwable  {
      DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService(true);
      User user0 = new User();
      ArrayList<Category> arrayList0 = demonstrationCurationService0.getCategories(user0);
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
  }

  @Test
  public void test39()  throws Throwable  {
      DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService(false);
      User user0 = new User();
      CleaningState cleaningState0 = new CleaningState((-1696), "");
      try {
        demonstrationCurationService0.getCleaningStateIdentifier(user0, (Variable) null, cleaningState0);
        fail("Expecting exception: MacawException");
      } catch(MacawException e) {
        /*
         * Non-existent cleaning state \"Unknown variable name.\" used for variable \"{1}\".
         */
      }
  }

  @Test
  public void test40()  throws Throwable  {
      DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService(false);
      User user0 = new User((String) null, "");
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<MacawChangeEvent> arrayList0 = demonstrationCurationService0.getChangeHistoryForValueLabels(user0, (Variable) derivedVariable0);
      assertEquals("[]", arrayList0.toString());
  }

  @Test
  public void test41()  throws Throwable  {
      DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService();
      User user0 = new User("", "");
      AvailabilityState availabilityState0 = new AvailabilityState(88, "");
      try {
        demonstrationCurationService0.getAvailabilityStateIdentifier(user0, (Variable) null, availabilityState0);
        fail("Expecting exception: MacawException");
      } catch(MacawException e) {
        /*
         * Non-existent availability state \"Unknown variable name.\" used for variable \"{1}\".
         */
      }
  }

  @Test
  public void test42()  throws Throwable  {
      DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService(false);
      assertNotNull(demonstrationCurationService0);
      
      User user0 = new User((String) null, "");
      DerivedVariable derivedVariable0 = new DerivedVariable();
      int int0 = demonstrationCurationService0.getDerivedVariableIdentifier(user0, derivedVariable0);
      assertEquals((-1), int0);
  }

  @Test
  public void test43()  throws Throwable  {
      DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService(true);
      // Undeclared exception!
      try {
        demonstrationCurationService0.getAlternativeVariable((User) null, (Variable) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test44()  throws Throwable  {
      DemonstrationCurationService demonstrationCurationService0 = new DemonstrationCurationService();
      User user0 = new User("", "");
      Variable variable0 = demonstrationCurationService0.getVariable(user0, "");
      assertNull(variable0);
  }
}
