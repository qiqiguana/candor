/*
 * This file was automatically generated by EvoSuite
 */

package macaw.persistenceLayer.production;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import macaw.businessLayer.AliasFilePath;
import macaw.businessLayer.AvailabilityState;
import macaw.businessLayer.Category;
import macaw.businessLayer.CleaningState;
import macaw.businessLayer.DerivedVariable;
import macaw.businessLayer.OntologyTerm;
import macaw.businessLayer.RawVariable;
import macaw.businessLayer.SupportingDocument;
import macaw.businessLayer.User;
import macaw.businessLayer.Variable;
import macaw.businessLayer.VariableSummary;
import macaw.businessLayer.VariableTypeFilter;
import macaw.persistenceLayer.production.ProductionCurationService;
import macaw.system.MacawException;
import macaw.system.SessionProperties;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ProductionCurationServiceEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User();
          DerivedVariable derivedVariable0 = new DerivedVariable();
          try {
            productionCurationService0.getOriginalVariable(user0, (Variable) derivedVariable0);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User();
          DerivedVariable derivedVariable0 = new DerivedVariable();
          AvailabilityState availabilityState0 = new AvailabilityState("");
          try {
            productionCurationService0.getAvailabilityStateIdentifier(user0, (Variable) derivedVariable0, availabilityState0);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User();
          DerivedVariable derivedVariable0 = new DerivedVariable();
          try {
            productionCurationService0.addDerivedVariable(user0, derivedVariable0);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User();
          try {
            productionCurationService0.getCategories(user0);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User();
          SupportingDocument supportingDocument0 = new SupportingDocument();
          try {
            productionCurationService0.updateSupportingDocument(user0, supportingDocument0);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User("", "");
          DerivedVariable derivedVariable0 = new DerivedVariable();
          try {
            productionCurationService0.updateDerivedVariable(user0, derivedVariable0);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User();
          try {
            productionCurationService0.getUsers(user0);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User("", "");
          try {
            productionCurationService0.getChangeHistoryByUser(user0);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test8()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User();
          VariableTypeFilter variableTypeFilter0 = VariableTypeFilter.DERIVED;
          try {
            productionCurationService0.filterVariableSummaries(user0, "com.mysql.jdbc.log.Log", "com.mysql.jdbc.log.Log", "com.mysql.jdbc.log.Log", variableTypeFilter0);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test9()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          DerivedVariable derivedVariable0 = new DerivedVariable();
          try {
            productionCurationService0.getSourceVariables((User) null, derivedVariable0);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User();
          try {
            productionCurationService0.getCleaningStates(user0);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User();
          RawVariable rawVariable0 = new RawVariable();
          CleaningState cleaningState0 = new CleaningState();
          try {
            productionCurationService0.getCleaningStateIdentifier(user0, (Variable) rawVariable0, cleaningState0);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User("#!v$KE", "#!v$KE");
          try {
            productionCurationService0.getUserIdentifier(user0, user0);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User("", "");
          try {
            productionCurationService0.updateAliasFilePath(user0, (AliasFilePath) null);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test14()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User("|^", "|^");
          try {
            productionCurationService0.getFilePathFromAlias(user0, "|^");
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test15()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User("UpdatableResultSet.39", "UpdatableResultSet.39");
          RawVariable rawVariable0 = new RawVariable();
          try {
            productionCurationService0.getOntologyTerms(user0, (Variable) rawVariable0);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test16()  throws Throwable  {
      SessionProperties sessionProperties0 = new SessionProperties();
      ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
      // Undeclared exception!
      try {
        productionCurationService0.initialiseConnection((Connection) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test17()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User("rJw\tTP!pk`rI 3zr", "rJw\tTP!pk`rI 3zr");
          try {
            productionCurationService0.deleteCleaningStates(user0, (ArrayList<CleaningState>) null);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test18()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User();
          Category category0 = new Category((-1), "");
          try {
            productionCurationService0.updateCategory(user0, category0);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test19()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          Category category0 = new Category("hB64T.Q#");
          try {
            productionCurationService0.addCategory((User) null, category0);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test20()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User();
          try {
            productionCurationService0.getAllChanges(user0);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test21()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User((String) null, (String) null);
          RawVariable rawVariable0 = new RawVariable();
          try {
            productionCurationService0.updateRawVariable(user0, rawVariable0);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test22()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User();
          try {
            productionCurationService0.getVariable(user0, "De");
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test23()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User("gg$|y%FHX}<~K=i", "gg$|y%FHX}<~K=i");
          try {
            productionCurationService0.filterSupportingDocuments(user0, "gg$|y%FHX}<~K=i", "gg$|y%FHX}<~K=i");
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test24()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          try {
            productionCurationService0.getAvailabilityStates((User) null);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test25()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User("ABo8c<L$BH", "ABo8c<L$BH");
          try {
            productionCurationService0.getChangeHistoryForValueLabels(user0, (Variable) null);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test26()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User((String) null, (String) null);
          OntologyTerm ontologyTerm0 = new OntologyTerm();
          try {
            productionCurationService0.getOntologyTermIdentifier(user0, ontologyTerm0);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test27()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User();
          DerivedVariable derivedVariable0 = new DerivedVariable();
          Category category0 = new Category();
          try {
            productionCurationService0.getCategoryIdentifier(user0, (Variable) derivedVariable0, category0);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test28()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User();
          RawVariable rawVariable0 = new RawVariable();
          VariableSummary variableSummary0 = rawVariable0.createVariableSummary();
          try {
            productionCurationService0.getCompleteVariableData(user0, variableSummary0);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test29()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User("sql.error.changeHistory.unableToGetChangesForVariable", "sql.error.changeHistory.unableToGetChangesForVariable");
          try {
            productionCurationService0.updateCleaningState(user0, (CleaningState) null);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test30()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User("", "");
          try {
            productionCurationService0.getChangeHistoryForListChoices(user0);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test31()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User("", "");
          try {
            productionCurationService0.addCleaningState(user0, (CleaningState) null);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test32()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User();
          DerivedVariable derivedVariable0 = new DerivedVariable();
          try {
            productionCurationService0.getDerivedVariableIdentifier(user0, derivedVariable0);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test33()  throws Throwable  {
      SessionProperties sessionProperties0 = new SessionProperties();
      ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
      int int0 = productionCurationService0.getNumberOfConnections();
      assertEquals(0, int0);
  }

  @Test
  public void test34()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User();
          try {
            productionCurationService0.clear(user0);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test35()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User("soow/G^\"NBe y", "soow/G^\"NBe y");
          AvailabilityState availabilityState0 = new AvailabilityState();
          try {
            productionCurationService0.updateAvailabilityState(user0, availabilityState0);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test36()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User("INVALID_VAILABILITY_STATE", "INVALID_VAILABILITY_STATE");
          try {
            productionCurationService0.filterOntologyTerms(user0, "INVALID_VAILABILITY_STATE", "INVALID_VAILABILITY_STATE");
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test37()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User();
          try {
            productionCurationService0.clearAllChanges(user0);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test38()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User();
          try {
            productionCurationService0.deleteSupportingDocuments(user0, (ArrayList<SupportingDocument>) null);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test39()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          AvailabilityState availabilityState0 = new AvailabilityState((String) null);
          try {
            productionCurationService0.addAvailabilityState((User) null, availabilityState0);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test40()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User();
          try {
            productionCurationService0.getAllSupportingDocuments(user0);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test41()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User("xF{!!Xf6et$'3D", "xF{!!Xf6et$'3D");
          try {
            productionCurationService0.getStudyYears(user0);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test42()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User("", "");
          try {
            productionCurationService0.addUser(user0, user0);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test43()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User("6DD*J8y&KP", "6DD*J8y&KP");
          try {
            productionCurationService0.getSummaryDataForAllVariables(user0);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test44()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User();
          OntologyTerm ontologyTerm0 = new OntologyTerm();
          try {
            productionCurationService0.updateOntologyTerm(user0, ontologyTerm0);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test45()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User();
          SupportingDocument supportingDocument0 = new SupportingDocument();
          try {
            productionCurationService0.addSupportingDocument(user0, supportingDocument0);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test46()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          OntologyTerm ontologyTerm0 = new OntologyTerm();
          try {
            productionCurationService0.addOntologyTerm((User) null, ontologyTerm0);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test47()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User("JUp=E?GIGh}.|yn2JV", "JUp=E?GIGh}.|yn2JV");
          try {
            productionCurationService0.addRawVariable(user0, (RawVariable) null);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test48()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User("", "");
          try {
            productionCurationService0.setAlternativeVariable(user0, (Variable) null, (Variable) null);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test49()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          DerivedVariable derivedVariable0 = new DerivedVariable();
          try {
            productionCurationService0.getSupportingDocuments((User) null, (Variable) derivedVariable0);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test50()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User();
          AliasFilePath aliasFilePath0 = new AliasFilePath("", "");
          try {
            productionCurationService0.getAliasFilePathIdentifier(user0, (Variable) null, aliasFilePath0);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test51()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User();
          try {
            productionCurationService0.getAllOntologyTerms(user0);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test52()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          try {
            productionCurationService0.getAliasFilePaths((User) null);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test53()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User();
          RawVariable rawVariable0 = new RawVariable();
          try {
            productionCurationService0.getAlternativeVariable(user0, (Variable) rawVariable0);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test54()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User();
          try {
            productionCurationService0.deleteOntologyTerms(user0, (ArrayList<OntologyTerm>) null);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test55()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User("XYgmbon}7BgZG", "XYgmbon}7BgZG");
          AliasFilePath aliasFilePath0 = new AliasFilePath("XYgmbon}7BgZG", "XYgmbon}7BgZG");
          try {
            productionCurationService0.addAliasFilePath(user0, aliasFilePath0);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test56()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User();
          try {
            productionCurationService0.getValueLabels(user0, (Variable) null);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test57()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User("H$*b+-y$5", "H$*b+-y$5");
          SupportingDocument supportingDocument0 = new SupportingDocument();
          try {
            productionCurationService0.getSupportingDocumentIdentifier(user0, supportingDocument0);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test58()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User();
          SupportingDocument supportingDocument0 = new SupportingDocument();
          try {
            productionCurationService0.getChangeHistoryForSupportingDocument(user0, supportingDocument0);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test59()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          User user0 = new User();
          try {
            productionCurationService0.getChangeHistoryForVariable(user0, (Variable) null);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
