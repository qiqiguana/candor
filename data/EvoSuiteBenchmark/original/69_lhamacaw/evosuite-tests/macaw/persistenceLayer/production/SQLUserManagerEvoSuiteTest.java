/*
 * This file was automatically generated by EvoSuite
 */

package macaw.persistenceLayer.production;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.sql.Connection;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import macaw.businessLayer.User;
import macaw.persistenceLayer.production.SQLChangeEventManager;
import macaw.persistenceLayer.production.SQLConnectionManager;
import macaw.persistenceLayer.production.SQLUserManager;
import macaw.system.Log;
import macaw.system.MacawException;
import macaw.system.SessionProperties;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SQLUserManagerEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      SessionProperties sessionProperties0 = new SessionProperties();
      Log log0 = sessionProperties0.getLog();
      SQLChangeEventManager sQLChangeEventManager0 = new SQLChangeEventManager(log0);
      SQLConnectionManager sQLConnectionManager0 = new SQLConnectionManager(sessionProperties0);
      SQLUserManager sQLUserManager0 = new SQLUserManager(sQLChangeEventManager0, sQLConnectionManager0);
      // Undeclared exception!
      try {
        sQLUserManager0.clear((Connection) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          SQLConnectionManager sQLConnectionManager0 = new SQLConnectionManager(sessionProperties0);
          SQLUserManager sQLUserManager0 = new SQLUserManager((SQLChangeEventManager) null, sQLConnectionManager0);
          User user0 = new User();
          try {
            sQLUserManager0.getUsers(user0);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * There are no connections available.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
      Log log0 = new Log();
      SQLChangeEventManager sQLChangeEventManager0 = new SQLChangeEventManager(log0);
      SessionProperties sessionProperties0 = new SessionProperties();
      SQLConnectionManager sQLConnectionManager0 = new SQLConnectionManager(sessionProperties0);
      SQLUserManager sQLUserManager0 = new SQLUserManager(sQLChangeEventManager0, sQLConnectionManager0);
      // Undeclared exception!
      try {
        sQLUserManager0.getOriginalUser((Connection) null, (User) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      SessionProperties sessionProperties0 = new SessionProperties();
      Log log0 = sessionProperties0.getLog();
      SQLChangeEventManager sQLChangeEventManager0 = new SQLChangeEventManager(log0);
      SQLConnectionManager sQLConnectionManager0 = new SQLConnectionManager(sessionProperties0);
      SQLUserManager sQLUserManager0 = new SQLUserManager(sQLChangeEventManager0, sQLConnectionManager0);
      sQLUserManager0.releaseConnection((Connection) null);
  }
}
