/*
 * This file was automatically generated by EvoSuite
 */

package macaw.persistenceLayer.production;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.mysql.jdbc.CommunicationsException;
import java.sql.Connection;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import macaw.persistenceLayer.production.SQLConnectionManager;
import macaw.system.MacawException;
import macaw.system.SessionProperties;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SQLConnectionManagerEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      SessionProperties sessionProperties0 = new SessionProperties();
      SQLConnectionManager sQLConnectionManager0 = new SQLConnectionManager(sessionProperties0);
      int int0 = sQLConnectionManager0.getNumberOfConnections();
      assertEquals(0, int0);
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          SQLConnectionManager sQLConnectionManager0 = new SQLConnectionManager(sessionProperties0);
          assertNotNull(sQLConnectionManager0);
          
          try {
            sQLConnectionManager0.getConnection();
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          SQLConnectionManager sQLConnectionManager0 = new SQLConnectionManager(sessionProperties0);
          assertNotNull(sQLConnectionManager0);
          
          try {
            sQLConnectionManager0.getSQLConnection();
            fail("Expecting exception: CommunicationsException");
          } catch(CommunicationsException e) {
            /*
             * Communications link failure due to underlying exception: 
             * 
             * ** BEGIN NESTED EXCEPTION ** 
             * 
             * java.lang.SecurityException
             * MESSAGE: Security manager blocks (java.net.SocketPermission localhost resolve)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkConnect(SecurityManager.java:1031)
             * java.net.InetAddress.getAllByName0(InetAddress.java:1145)
             * java.net.InetAddress.getAllByName(InetAddress.java:1083)
             * java.net.InetAddress.getAllByName(InetAddress.java:1019)
             * com.mysql.jdbc.StandardSocketFactory.connect(StandardSocketFactory.java:246)
             * com.mysql.jdbc.MysqlIO.<init>(MysqlIO.java:271)
             * com.mysql.jdbc.Connection.createNewIO(Connection.java:2771)
             * com.mysql.jdbc.Connection.<init>(Connection.java:1555)
             * com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:285)
             * java.sql.DriverManager.getConnection(DriverManager.java:582)
             * java.sql.DriverManager.getConnection(DriverManager.java:207)
             * macaw.persistenceLayer.production.SQLConnectionManager.getSQLConnection(SQLConnectionManager.java:168)
             * sun.reflect.GeneratedMethodAccessor53.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             * 
             * 
             * STACKTRACE:
             * 
             * java.lang.SecurityException: Security manager blocks (java.net.SocketPermission localhost resolve)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkConnect(SecurityManager.java:1031)
             * java.net.InetAddress.getAllByName0(InetAddress.java:1145)
             * java.net.InetAddress.getAllByName(InetAddress.java:1083)
             * java.net.InetAddress.getAllByName(InetAddress.java:1019)
             * com.mysql.jdbc.StandardSocketFactory.connect(StandardSocketFactory.java:246)
             * com.mysql.jdbc.MysqlIO.<init>(MysqlIO.java:271)
             * com.mysql.jdbc.Connection.createNewIO(Connection.java:2771)
             * com.mysql.jdbc.Connection.<init>(Connection.java:1555)
             * com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:285)
             * java.sql.DriverManager.getConnection(DriverManager.java:582)
             * java.sql.DriverManager.getConnection(DriverManager.java:207)
             * macaw.persistenceLayer.production.SQLConnectionManager.getSQLConnection(SQLConnectionManager.java:168)
             * sun.reflect.GeneratedMethodAccessor53.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             * 
             * \tat org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:307)
             * \tat java.lang.SecurityManager.checkConnect(SecurityManager.java:1031)
             * \tat java.net.InetAddress.getAllByName0(InetAddress.java:1145)
             * \tat java.net.InetAddress.getAllByName(InetAddress.java:1083)
             * \tat java.net.InetAddress.getAllByName(InetAddress.java:1019)
             * \tat com.mysql.jdbc.StandardSocketFactory.connect(StandardSocketFactory.java:246)
             * \tat com.mysql.jdbc.MysqlIO.<init>(MysqlIO.java:271)
             * \tat com.mysql.jdbc.Connection.createNewIO(Connection.java:2771)
             * \tat com.mysql.jdbc.Connection.<init>(Connection.java:1555)
             * \tat com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:285)
             * \tat java.sql.DriverManager.getConnection(DriverManager.java:582)
             * \tat java.sql.DriverManager.getConnection(DriverManager.java:207)
             * \tat macaw.persistenceLayer.production.SQLConnectionManager.getSQLConnection(SQLConnectionManager.java:168)
             * \tat sun.reflect.GeneratedMethodAccessor53.invoke(Unknown Source)
             * \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * \tat java.lang.reflect.Method.invoke(Method.java:597)
             * \tat org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * \tat org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * \tat org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * \tat org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * \tat org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * \tat java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * \tat java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * \tat java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * \tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * \tat java.lang.Thread.run(Thread.java:662)
             * 
             * 
             * ** END NESTED EXCEPTION **
             * 
             * 
             * 
             * Last packet sent to the server was 0 ms ago.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
      SessionProperties sessionProperties0 = new SessionProperties();
      SQLConnectionManager sQLConnectionManager0 = new SQLConnectionManager(sessionProperties0);
      assertNotNull(sQLConnectionManager0);
      
      sQLConnectionManager0.releaseConnection((Connection) null);
      assertEquals(0, sQLConnectionManager0.getNumberOfConnections());
  }
}
