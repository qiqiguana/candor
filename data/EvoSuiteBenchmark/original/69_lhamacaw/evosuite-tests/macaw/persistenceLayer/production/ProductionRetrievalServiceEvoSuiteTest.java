/*
 * This file was automatically generated by EvoSuite
 */

package macaw.persistenceLayer.production;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.ArrayList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import macaw.businessLayer.AliasFilePath;
import macaw.businessLayer.AvailabilityState;
import macaw.businessLayer.Category;
import macaw.businessLayer.CleaningState;
import macaw.businessLayer.OntologyTerm;
import macaw.businessLayer.SupportingDocument;
import macaw.businessLayer.User;
import macaw.businessLayer.ValueLabel;
import macaw.businessLayer.Variable;
import macaw.businessLayer.VariableSummary;
import macaw.persistenceLayer.production.ProductionRetrievalService;
import macaw.system.MacawException;
import macaw.system.SessionProperties;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ProductionRetrievalServiceEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionRetrievalService productionRetrievalService0 = new ProductionRetrievalService(sessionProperties0);
          User user0 = new User();
          ArrayList<Category> arrayList0 = productionRetrievalService0.getCategoriesForVariable(user0, (String) null);
          assertEquals(true, arrayList0.isEmpty());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionRetrievalService productionRetrievalService0 = new ProductionRetrievalService(sessionProperties0);
          User user0 = new User();
          ArrayList<User> arrayList0 = productionRetrievalService0.getUnverifiedUsers(user0);
          assertEquals(true, arrayList0.isEmpty());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionRetrievalService productionRetrievalService0 = new ProductionRetrievalService(sessionProperties0);
          User user0 = new User();
          ArrayList<AvailabilityState> arrayList0 = productionRetrievalService0.getAvailabilityStates(user0);
          assertNull(arrayList0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionRetrievalService productionRetrievalService0 = new ProductionRetrievalService(sessionProperties0);
          ArrayList<User> arrayList0 = productionRetrievalService0.getUsers((User) null);
          assertEquals(true, arrayList0.isEmpty());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionRetrievalService productionRetrievalService0 = new ProductionRetrievalService(sessionProperties0);
          User user0 = productionRetrievalService0.getUserFromEmail((User) null, "");
          assertNull(user0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionRetrievalService productionRetrievalService0 = new ProductionRetrievalService(sessionProperties0);
          User user0 = new User();
          AliasFilePath aliasFilePath0 = productionRetrievalService0.getAliasFilePath(user0, "k*?!$%\"3Sr Z]");
          assertNull(aliasFilePath0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionRetrievalService productionRetrievalService0 = new ProductionRetrievalService(sessionProperties0);
          ArrayList<Category> arrayList0 = productionRetrievalService0.getCategories((User) null);
          assertNull(arrayList0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionRetrievalService productionRetrievalService0 = new ProductionRetrievalService(sessionProperties0);
          User user0 = new User();
          Variable variable0 = productionRetrievalService0.getVariable(user0, "");
          assertNull(variable0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test8()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionRetrievalService productionRetrievalService0 = new ProductionRetrievalService(sessionProperties0);
          User user0 = new User();
          ArrayList<VariableSummary> arrayList0 = productionRetrievalService0.getVariableSummariesForCategory(user0, ">Yrq32OY)3V1gN9>HA");
          assertEquals("[]", arrayList0.toString());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test9()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionRetrievalService productionRetrievalService0 = new ProductionRetrievalService(sessionProperties0);
          ArrayList<ValueLabel> arrayList0 = productionRetrievalService0.getValueLabels((User) null, "k*?!$%\"3Sr Z]");
          assertNull(arrayList0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionRetrievalService productionRetrievalService0 = new ProductionRetrievalService(sessionProperties0);
          User user0 = new User();
          ArrayList<SupportingDocument> arrayList0 = productionRetrievalService0.getSupportingDocuments(user0, "+g%^A>!H");
          assertNull(arrayList0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionRetrievalService productionRetrievalService0 = new ProductionRetrievalService(sessionProperties0);
          ArrayList<AliasFilePath> arrayList0 = productionRetrievalService0.getAliasFilePaths((User) null);
          assertNull(arrayList0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionRetrievalService productionRetrievalService0 = new ProductionRetrievalService(sessionProperties0);
          User user0 = new User();
          ArrayList<AliasFilePath> arrayList0 = productionRetrievalService0.getAliasFilePathsMatchingName(user0, "cL;g");
          assertNull(arrayList0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionRetrievalService productionRetrievalService0 = new ProductionRetrievalService(sessionProperties0);
          ArrayList<OntologyTerm> arrayList0 = productionRetrievalService0.getOntologyTerms((User) null, "");
          assertNull(arrayList0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test14()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionRetrievalService productionRetrievalService0 = new ProductionRetrievalService(sessionProperties0);
          User user0 = productionRetrievalService0.getUserFromID((User) null, "sql.error.unableToCheckVariableExists");
          String[] stringArray0 = productionRetrievalService0.getVariableNames(user0);
          assertNotNull(stringArray0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test15()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionRetrievalService productionRetrievalService0 = new ProductionRetrievalService(sessionProperties0);
          User user0 = new User("QLJ8K|0y3uP)^(\"/*", "QLJ8K|0y3uP)^(\"/*");
          ArrayList<CleaningState> arrayList0 = productionRetrievalService0.getCleaningStates(user0);
          assertNull(arrayList0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test16()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionRetrievalService productionRetrievalService0 = new ProductionRetrievalService(sessionProperties0);
          User user0 = new User();
          ArrayList<OntologyTerm> arrayList0 = productionRetrievalService0.getOntologyTerms(user0, (Variable) null);
          assertNull(arrayList0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
