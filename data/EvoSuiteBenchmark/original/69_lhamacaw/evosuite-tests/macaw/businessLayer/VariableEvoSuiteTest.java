/*
 * This file was automatically generated by EvoSuite
 */

package macaw.businessLayer;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.ArrayList;
import macaw.businessLayer.DerivedVariable;
import macaw.businessLayer.OntologyTerm;
import macaw.businessLayer.RawVariable;
import macaw.businessLayer.SupportingDocument;
import macaw.businessLayer.User;
import macaw.businessLayer.ValueLabel;
import macaw.businessLayer.Variable;
import macaw.businessLayer.VariableSummary;
import macaw.system.MacawChangeEvent;
import macaw.system.MacawException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class VariableEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      assertNotNull(derivedVariable0);
      
      derivedVariable0.setColumnStart((String) null);
      RawVariable rawVariable0 = new RawVariable();
      derivedVariable0.cloneAttributes((Variable) rawVariable0);
      User user0 = new User("usespsCode!labol", "usespsCode!labol");
      ArrayList<MacawChangeEvent> arrayList0 = Variable.detectFieldChanges(user0, (Variable) rawVariable0, (Variable) derivedVariable0);
      assertEquals(false, rawVariable0.isCoded());
      assertNotNull(arrayList0);
      assertEquals(false, rawVariable0.isNewRecord());
      assertEquals(0, rawVariable0.getIdentifier());
      assertEquals(false, derivedVariable0.isCleaned());
      assertEquals(0, arrayList0.size());
  }

  @Test
  public void test1()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      assertNotNull(derivedVariable0);
      
      String string0 = derivedVariable0.getFilePath();
      assertEquals(false, derivedVariable0.isCoded());
      assertEquals(false, derivedVariable0.isCleaned());
      assertNotNull(string0);
      assertEquals(0, derivedVariable0.getIdentifier());
  }

  @Test
  public void test2()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      assertNotNull(derivedVariable0);
      
      VariableSummary variableSummary0 = derivedVariable0.createVariableSummary();
      assertEquals(false, derivedVariable0.isCleaned());
      assertEquals(false, derivedVariable0.isCoded());
      assertEquals(0, variableSummary0.getIdentifier());
  }

  @Test
  public void test3()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      assertNotNull(derivedVariable0);
      
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      boolean boolean0 = derivedVariable0.containsOntologyTerm(ontologyTerm0);
      assertEquals(true, boolean0);
      assertEquals(false, derivedVariable0.isCleaned());
      assertEquals("0", derivedVariable0.getDisplayItemIdentifier());
      assertEquals(false, derivedVariable0.isCoded());
  }

  @Test
  public void test4()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      assertNotNull(derivedVariable0);
      
      SupportingDocument supportingDocument0 = new SupportingDocument();
      derivedVariable0.removeSupportingDocument(supportingDocument0);
      assertEquals("0", derivedVariable0.getDisplayItemIdentifier());
      assertEquals(false, derivedVariable0.isCleaned());
      assertEquals(false, derivedVariable0.isCoded());
  }

  @Test
  public void test5()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      assertNotNull(derivedVariable0);
      
      RawVariable rawVariable0 = new RawVariable();
      derivedVariable0.setAlternativeVariable((Variable) rawVariable0);
      User user0 = new User("usespsCode!labol", "usespsCode!labol");
      MacawChangeEvent macawChangeEvent0 = Variable.detectChangesInAlternativeVariable(user0, (Variable) derivedVariable0, (Variable) derivedVariable0);
      assertEquals(false, derivedVariable0.isCoded());
      assertEquals(false, derivedVariable0.isCleaned());
      assertEquals(0, derivedVariable0.getIdentifier());
      assertEquals("Changed variable \"Alternative Variable\", field \"\", from \"\" to \"{3}\".", macawChangeEvent0.getChangeMessage());
      assertNotNull(macawChangeEvent0);
  }

  @Test
  public void test6()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      assertNotNull(rawVariable0);
      
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<SupportingDocument> arrayList0 = rawVariable0.getSupportingDocuments();
      assertNotNull(arrayList0);
      
      derivedVariable0.addSupportingDocuments(arrayList0);
      assertEquals(false, rawVariable0.isCleaned());
      assertEquals(false, rawVariable0.isCoded());
      assertEquals("0", rawVariable0.getDisplayItemIdentifier());
      assertEquals("0", derivedVariable0.getDisplayItemIdentifier());
  }

  @Test
  public void test7()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      assertNotNull(derivedVariable0);
      
      ValueLabel valueLabel0 = new ValueLabel();
      derivedVariable0.addValueLabel(valueLabel0);
      assertEquals(false, derivedVariable0.isCoded());
      assertEquals(0, derivedVariable0.getIdentifier());
      assertEquals(false, derivedVariable0.isCleaned());
  }

  @Test
  public void test8()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      assertNotNull(derivedVariable0);
      
      // Undeclared exception!
      try {
        derivedVariable0.addOntologyTerms((ArrayList<OntologyTerm>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      assertNotNull(derivedVariable0);
      
      derivedVariable0.isNewRecord();
      assertEquals(false, derivedVariable0.isCleaned());
      assertEquals("0", derivedVariable0.getDisplayItemIdentifier());
      assertEquals(false, derivedVariable0.isCoded());
  }

  @Test
  public void test10()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      assertNotNull(rawVariable0);
      
      SupportingDocument supportingDocument0 = new SupportingDocument();
      rawVariable0.addSupportingDocument(supportingDocument0);
      boolean boolean0 = rawVariable0.containsSupportingDocument(supportingDocument0);
      assertEquals(false, rawVariable0.isCoded());
      assertEquals(true, boolean0);
      assertEquals("0", rawVariable0.getDisplayItemIdentifier());
      assertEquals(false, rawVariable0.isCleaned());
  }

  @Test
  public void test11()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      assertNotNull(derivedVariable0);
      
      User user0 = new User("usespsCode!labol", "usespsCode!labol");
      MacawChangeEvent macawChangeEvent0 = Variable.detectChangesInAlternativeVariable(user0, (Variable) derivedVariable0, (Variable) derivedVariable0);
      assertEquals(0, derivedVariable0.getIdentifier());
      assertEquals("Changed variable \"Alternative Variable\", field \"blank\", from \"\" to \"{3}\".", macawChangeEvent0.getChangeMessage());
      assertNotNull(macawChangeEvent0);
      assertEquals(false, derivedVariable0.isCoded());
      assertEquals(false, derivedVariable0.isCleaned());
  }

  @Test
  public void test12()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      assertNotNull(derivedVariable0);
      
      ArrayList<ValueLabel> arrayList0 = derivedVariable0.getValueLabels();
      assertEquals(false, derivedVariable0.isCleaned());
      assertEquals(false, derivedVariable0.isCoded());
      assertNotNull(arrayList0);
      assertEquals("0", derivedVariable0.getDisplayItemIdentifier());
  }

  @Test
  public void test13()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      assertNotNull(rawVariable0);
      
      String string0 = rawVariable0.getDisplayItemIdentifier();
      assertEquals(false, rawVariable0.isCoded());
      assertEquals(false, rawVariable0.isCleaned());
      assertNotNull(string0);
      assertEquals("0", string0);
  }

  @Test
  public void test14()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      assertNotNull(rawVariable0);
      
      SupportingDocument supportingDocument0 = new SupportingDocument();
      boolean boolean0 = rawVariable0.containsSupportingDocument(supportingDocument0);
      assertEquals(false, rawVariable0.isCleaned());
      assertEquals(false, boolean0);
      assertEquals(false, rawVariable0.isCoded());
      assertEquals("0", rawVariable0.getDisplayItemIdentifier());
  }

  @Test
  public void test15()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      assertNotNull(rawVariable0);
      
      DerivedVariable derivedVariable0 = new DerivedVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      rawVariable0.addSupportingDocument(supportingDocument0);
      ArrayList<SupportingDocument> arrayList0 = rawVariable0.getSupportingDocuments();
      assertNotNull(arrayList0);
      
      derivedVariable0.removeSupportingDocuments(arrayList0);
      assertEquals(false, derivedVariable0.isCoded());
      assertEquals(1, arrayList0.size());
      assertEquals(false, derivedVariable0.isCleaned());
      assertEquals("0", derivedVariable0.getDisplayItemIdentifier());
      assertEquals(false, rawVariable0.isCleaned());
  }

  @Test
  public void test16()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      assertNotNull(rawVariable0);
      
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      boolean boolean0 = rawVariable0.containsOntologyTerm(ontologyTerm0);
      assertEquals(false, rawVariable0.isCoded());
      assertEquals(false, boolean0);
      assertEquals(0, rawVariable0.getIdentifier());
      assertEquals(false, rawVariable0.isCleaned());
  }

  @Test
  public void test17()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      assertNotNull(derivedVariable0);
      
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.removeOntologyTerm(ontologyTerm0);
      assertEquals(false, derivedVariable0.isCoded());
      assertEquals(false, derivedVariable0.isCleaned());
      assertEquals("0", derivedVariable0.getDisplayItemIdentifier());
  }

  @Test
  public void test18()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      assertNotNull(derivedVariable0);
      
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.updateOntologyTerm(ontologyTerm0);
      assertEquals("0", derivedVariable0.getDisplayItemIdentifier());
      assertEquals(false, derivedVariable0.isCoded());
      assertEquals(false, derivedVariable0.isCleaned());
  }

  @Test
  public void test19()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      assertNotNull(derivedVariable0);
      
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.updateOntologyTerm(ontologyTerm0);
      assertEquals(0, derivedVariable0.getIdentifier());
      assertEquals(false, derivedVariable0.isCoded());
      assertEquals(false, derivedVariable0.isCleaned());
  }

  @Test
  public void test20()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      assertNotNull(derivedVariable0);
      
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.updateOntologyTerm(ontologyTerm0);
      assertEquals(false, derivedVariable0.isCleaned());
      assertEquals(false, derivedVariable0.isCoded());
      assertEquals(0, derivedVariable0.getIdentifier());
      assertEquals("0", derivedVariable0.getDisplayItemIdentifier());
  }

  @Test
  public void test21()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      assertNotNull(derivedVariable0);
      
      derivedVariable0.setName("C]");
      DerivedVariable.validateFields(derivedVariable0);
      assertEquals(false, derivedVariable0.isCoded());
      assertEquals(0, derivedVariable0.getIdentifier());
      assertEquals(false, derivedVariable0.isCleaned());
  }

  @Test
  public void test22()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      assertNotNull(rawVariable0);
      
      rawVariable0.setAvailability("");
      try {
        RawVariable.validateFields(rawVariable0);
        fail("Expecting exception: MacawException");
      } catch(MacawException e) {
      }
  }

  @Test
  public void test23()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      assertEquals(false, rawVariable0.isCleaned());
      assertNotNull(rawVariable0);
      
      rawVariable0.setCleaned(true);
      ArrayList<String> arrayList0 = Variable.validateFields((Variable) rawVariable0);
      assertEquals(true, rawVariable0.isCleaned());
      assertEquals("[Please provide a value for Name.]", arrayList0.toString());
  }

  @Test
  public void test24()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      assertNotNull(rawVariable0);
      
      rawVariable0.setName("user.addressLine2.saveChanges");
      User user0 = new User("Unknown", "Unknown");
      RawVariable rawVariable1 = new RawVariable();
      ArrayList<MacawChangeEvent> arrayList0 = RawVariable.detectFieldChanges(user0, rawVariable0, rawVariable1);
      assertNotNull(arrayList0);
      assertEquals(false, rawVariable0.isCoded());
      assertEquals(0, rawVariable0.getIdentifier());
      assertEquals(false, rawVariable0.isCleaned());
      assertEquals(false, arrayList0.isEmpty());
  }

  @Test
  public void test25()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      assertNotNull(derivedVariable0);
      
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setLabel("usespsCode!labol");
      User user0 = new User("usespsCode!labol", "usespsCode!labol");
      ArrayList<MacawChangeEvent> arrayList0 = Variable.detectFieldChanges(user0, (Variable) rawVariable0, (Variable) derivedVariable0);
      assertEquals(1, arrayList0.size());
      assertNotNull(arrayList0);
      assertEquals(0, rawVariable0.getIdentifier());
      assertEquals(false, rawVariable0.isCoded());
      assertEquals(false, rawVariable0.isCleaned());
  }

  @Test
  public void test26()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      assertNotNull(rawVariable0);
      
      rawVariable0.setAlias("user.addressLine2.saveChanges");
      User user0 = new User("Unknown", "Unknown");
      RawVariable rawVariable1 = new RawVariable();
      ArrayList<MacawChangeEvent> arrayList0 = RawVariable.detectFieldChanges(user0, rawVariable0, rawVariable1);
      assertEquals(1, arrayList0.size());
      assertEquals(false, rawVariable0.isCoded());
      assertEquals(0, rawVariable0.getIdentifier());
      assertEquals(false, rawVariable0.isCleaned());
      assertNotNull(arrayList0);
  }

  @Test
  public void test27()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      assertNotNull(derivedVariable0);
      
      RawVariable rawVariable0 = new RawVariable();
      User user0 = new User("usespsCode!labol", "usespsCode!labol");
      derivedVariable0.setAvailability("");
      ArrayList<MacawChangeEvent> arrayList0 = Variable.detectFieldChanges(user0, (Variable) rawVariable0, (Variable) derivedVariable0);
      assertEquals(false, derivedVariable0.isCleaned());
      assertEquals(0, derivedVariable0.getIdentifier());
      assertNotNull(arrayList0);
      assertEquals(1, arrayList0.size());
      assertEquals(false, derivedVariable0.isCoded());
  }

  @Test
  public void test28()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      assertNotNull(rawVariable0);
      
      User user0 = new User("Unknown", "Unknown");
      RawVariable rawVariable1 = new RawVariable();
      rawVariable0.setCoded(true);
      ArrayList<MacawChangeEvent> arrayList0 = RawVariable.detectFieldChanges(user0, rawVariable0, rawVariable1);
      assertEquals(true, rawVariable0.isCoded());
      assertEquals(false, rawVariable1.isCoded());
      assertEquals(1, arrayList0.size());
  }

  @Test
  public void test29()  throws Throwable  {
      User user0 = new User("\"", "\"");
      RawVariable rawVariable0 = new RawVariable();
      assertNotNull(rawVariable0);
      
      MacawChangeEvent macawChangeEvent0 = Variable.detectChangesInAlternativeVariable(user0, (Variable) rawVariable0, (Variable) null);
      assertNull(macawChangeEvent0);
      assertEquals(false, rawVariable0.isCoded());
      assertEquals(false, rawVariable0.isCleaned());
      assertEquals("0", rawVariable0.getDisplayItemIdentifier());
      assertEquals(0, rawVariable0.getIdentifier());
  }

  @Test
  public void test30()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      assertNotNull(rawVariable0);
      
      DerivedVariable derivedVariable0 = new DerivedVariable();
      rawVariable0.setAlternativeVariable((Variable) derivedVariable0);
      User user0 = new User("Unknown", "Unknown");
      MacawChangeEvent macawChangeEvent0 = Variable.detectChangesInAlternativeVariable(user0, (Variable) rawVariable0, (Variable) null);
      assertEquals(0, macawChangeEvent0.getChangedObjectIdentifier());
      assertNotNull(macawChangeEvent0);
      assertEquals(false, rawVariable0.isCleaned());
      assertEquals("Changed variable \"Alternative Variable\", field \"\", from \"blank\" to \"{3}\".", macawChangeEvent0.getChangeMessage());
      assertEquals(false, rawVariable0.isCoded());
  }

  @Test
  public void test31()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      assertNotNull(derivedVariable0);
      
      RawVariable rawVariable0 = new RawVariable();
      derivedVariable0.setIdentifier((-1424));
      derivedVariable0.setAlternativeVariable((Variable) rawVariable0);
      User user0 = new User("usespsCode!labol", "usespsCode!labol");
      Variable.detectChangesInAlternativeVariable(user0, (Variable) derivedVariable0, (Variable) derivedVariable0);
      assertEquals("-1424", derivedVariable0.getDisplayItemIdentifier());
      assertEquals(-1424, derivedVariable0.getIdentifier());
  }

  @Test
  public void test32()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      assertNotNull(rawVariable0);
      
      SupportingDocument supportingDocument0 = new SupportingDocument();
      rawVariable0.addSupportingDocument(supportingDocument0);
      RawVariable rawVariable1 = (RawVariable)rawVariable0.clone();
      assertEquals(false, rawVariable1.isNewRecord());
      assertEquals(false, rawVariable1.isCleaned());
      assertEquals(0, rawVariable1.getIdentifier());
      assertEquals(false, rawVariable1.isCoded());
  }

  @Test
  public void test33()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      assertNotNull(derivedVariable0);
      
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      RawVariable rawVariable0 = new RawVariable();
      derivedVariable0.cloneAttributes((Variable) rawVariable0);
      assertEquals(false, rawVariable0.isCoded());
      assertEquals(false, rawVariable0.isNewRecord());
      assertEquals(false, rawVariable0.isCleaned());
      assertEquals(0, rawVariable0.getIdentifier());
  }

  @Test
  public void test34()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      assertNotNull(derivedVariable0);
      
      RawVariable rawVariable0 = new RawVariable();
      derivedVariable0.setAlternativeVariable((Variable) rawVariable0);
      derivedVariable0.cloneAttributes((Variable) rawVariable0);
      assertEquals(false, rawVariable0.isNewRecord());
      assertEquals(false, rawVariable0.isCleaned());
      assertEquals(false, rawVariable0.isCoded());
      assertEquals("0", rawVariable0.getDisplayItemIdentifier());
  }
}
