/*
 * This file was automatically generated by EvoSuite
 */

package macaw.businessLayer;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.ArrayList;
import macaw.businessLayer.AvailabilityState;
import macaw.businessLayer.Category;
import macaw.businessLayer.CleaningState;
import macaw.businessLayer.MacawListChoice;
import macaw.businessLayer.User;
import macaw.system.MacawChangeEvent;
import macaw.system.MacawException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MacawListChoiceEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      AvailabilityState availabilityState0 = new AvailabilityState();
      boolean boolean0 = availabilityState0.isNewRecord();
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      Category category0 = new Category(0, "");
      int int0 = category0.getIdentifier();
      assertEquals(0, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      AvailabilityState availabilityState0 = new AvailabilityState("user.addressLine2.saveChanges");
      String string0 = availabilityState0.getDisplayItemIdentifier();
      assertEquals(false, availabilityState0.isNewRecord());
      assertEquals("0", string0);
      assertNotNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      AvailabilityState availabilityState0 = new AvailabilityState("user.addressLine2.saveChanges");
      String string0 = availabilityState0.getDisplayName();
      assertEquals(false, availabilityState0.isNewRecord());
      assertNotNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      AvailabilityState availabilityState0 = new AvailabilityState("user.addressLine2.saveChanges");
      AvailabilityState.validateFields(availabilityState0);
      assertEquals(false, availabilityState0.isNewRecord());
  }

  @Test
  public void test5()  throws Throwable  {
      Category category0 = new Category(0, "");
      Category category1 = (Category)category0.clone();
      assertEquals(false, category1.isNewRecord());
      assertEquals("0", category1.getDisplayItemIdentifier());
  }

  @Test
  public void test6()  throws Throwable  {
      Category category0 = new Category(0, "");
      try {
        Category.validateFields(category0);
        fail("Expecting exception: MacawException");
      } catch(MacawException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      AvailabilityState availabilityState0 = new AvailabilityState("user.addressLine2.saveChanges");
      CleaningState cleaningState0 = new CleaningState("user.addressLine2.saveChanges");
      User user0 = new User();
      ArrayList<MacawChangeEvent> arrayList0 = MacawListChoice.detectFieldChanges(user0, "user.firstName.label", (MacawListChoice) availabilityState0, (MacawListChoice) cleaningState0);
      assertEquals(false, availabilityState0.isNewRecord());
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
  }

  @Test
  public void test8()  throws Throwable  {
      AvailabilityState availabilityState0 = new AvailabilityState();
      User user0 = new User();
      AvailabilityState availabilityState1 = new AvailabilityState(",*NhS(");
      ArrayList<MacawChangeEvent> arrayList0 = AvailabilityState.detectFieldChanges(user0, availabilityState1, availabilityState0);
      assertEquals(false, availabilityState0.isNewRecord());
      assertEquals(false, availabilityState1.isNewRecord());
      assertNotNull(arrayList0);
      assertEquals(false, arrayList0.isEmpty());
  }

  @Test
  public void test9()  throws Throwable  {
      AvailabilityState availabilityState0 = new AvailabilityState();
      CleaningState cleaningState0 = new CleaningState("<7a4Z");
      boolean boolean0 = availabilityState0.hasSameDisplayName((MacawListChoice) cleaningState0);
      assertEquals(false, cleaningState0.isNewRecord());
      assertEquals(false, boolean0);
      assertEquals(false, availabilityState0.isNewRecord());
  }

  @Test
  public void test10()  throws Throwable  {
      AvailabilityState availabilityState0 = new AvailabilityState();
      CleaningState cleaningState0 = new CleaningState("");
      boolean boolean0 = availabilityState0.hasSameDisplayName((MacawListChoice) cleaningState0);
      assertEquals(true, boolean0);
      assertEquals(false, cleaningState0.isNewRecord());
      assertEquals(false, availabilityState0.isNewRecord());
  }
}
