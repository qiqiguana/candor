/*
 * This file was automatically generated by EvoSuite
 */

package macaw.businessLayer;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.ArrayList;
import macaw.businessLayer.DerivedVariable;
import macaw.businessLayer.RawVariable;
import macaw.businessLayer.User;
import macaw.businessLayer.Variable;
import macaw.system.MacawChangeEvent;
import macaw.system.MacawException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DerivedVariableEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      DerivedVariable derivedVariable1 = (DerivedVariable)derivedVariable0.clone();
      assertNotNull(derivedVariable1);
      assertNotSame(derivedVariable1, derivedVariable0);
  }

  @Test
  public void test1()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.addSourceVariable((Variable) derivedVariable0);
      boolean boolean0 = derivedVariable0.containsSourceVariable((Variable) derivedVariable0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<Variable> arrayList0 = derivedVariable0.getSourceVariables();
      assertEquals(true, arrayList0.isEmpty());
  }

  @Test
  public void test3()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      User user0 = new User("UNABLE_TO_CHECK_VALUE_LABEL_DUPLICATES", "UNABLE_TO_CHECK_VALUE_LABEL_DUPLICATES");
      ArrayList<MacawChangeEvent> arrayList0 = DerivedVariable.detectFieldChanges(user0, derivedVariable0, derivedVariable0);
      assertEquals(true, arrayList0.isEmpty());
  }

  @Test
  public void test4()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.removeSourceVariable((Variable) derivedVariable0);
      assertEquals("", derivedVariable0.getCleaningDescription());
  }

  @Test
  public void test5()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable0.addSourceVariable((Variable) derivedVariable1);
      derivedVariable1.setIdentifier(1053);
      boolean boolean0 = derivedVariable0.containsSourceVariable((Variable) derivedVariable0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      RawVariable rawVariable0 = new RawVariable();
      derivedVariable0.setName(" type=");
      boolean boolean0 = derivedVariable0.hasSameDisplayName((Variable) rawVariable0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      RawVariable rawVariable0 = new RawVariable();
      boolean boolean0 = derivedVariable0.hasSameDisplayName((Variable) rawVariable0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      boolean boolean0 = derivedVariable0.hasSameDisplayName((Variable) derivedVariable0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setName(" type=");
      DerivedVariable.validateFields(derivedVariable0);
      assertEquals("", derivedVariable0.getCleaningDescription());
  }

  @Test
  public void test10()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      try {
        DerivedVariable.validateFields(derivedVariable0);
        fail("Expecting exception: MacawException");
      } catch(MacawException e) {
      }
  }
}
