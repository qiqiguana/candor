/*
 * This file was automatically generated by EvoSuite
 */

package macaw.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.ArrayList;
import javax.swing.JScrollPane;
import macaw.businessLayer.AvailabilityState;
import macaw.businessLayer.Category;
import macaw.businessLayer.CleaningState;
import macaw.businessLayer.RawVariable;
import macaw.businessLayer.User;
import macaw.businessLayer.VariableSummary;
import macaw.system.UserInterfaceFactory;
import macaw.util.Displayable;
import macaw.util.DisplayableList;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DisplayableListEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      UserInterfaceFactory userInterfaceFactory0 = new UserInterfaceFactory();
      DisplayableList displayableList0 = new DisplayableList(userInterfaceFactory0);
      assertNotNull(displayableList0);
      
      ArrayList<Displayable> arrayList0 = displayableList0.getSelectedItems();
      assertNotNull(arrayList0);
      
      displayableList0.setDisplayItems(arrayList0);
      assertEquals(true, displayableList0.isEmpty());
  }

  @Test
  public void test1()  throws Throwable  {
      UserInterfaceFactory userInterfaceFactory0 = new UserInterfaceFactory();
      DisplayableList displayableList0 = new DisplayableList(userInterfaceFactory0);
      JScrollPane jScrollPane0 = displayableList0.getListScrollPane();
      assertEquals(true, jScrollPane0.isOpaque());
  }

  @Test
  public void test2()  throws Throwable  {
      UserInterfaceFactory userInterfaceFactory0 = new UserInterfaceFactory();
      DisplayableList displayableList0 = new DisplayableList(userInterfaceFactory0);
      boolean boolean0 = displayableList0.containsDisplayName((String) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      UserInterfaceFactory userInterfaceFactory0 = new UserInterfaceFactory();
      DisplayableList displayableList0 = new DisplayableList(userInterfaceFactory0);
      assertNotNull(displayableList0);
      
      CleaningState cleaningState0 = new CleaningState("./");
      displayableList0.updateDisplayName("./", (Displayable) cleaningState0);
      assertEquals(true, displayableList0.itemsAreSelected());
      
      displayableList0.deleteSelectedItems();
      assertEquals(true, displayableList0.isEmpty());
  }

  @Test
  public void test4()  throws Throwable  {
      UserInterfaceFactory userInterfaceFactory0 = new UserInterfaceFactory();
      ArrayList<Displayable> arrayList0 = new ArrayList<Displayable>();
      User user0 = new User("UNABLE_TO_GET_CHANGES_FOR_VARIABLE", "UNABLE_TO_GET_CHANGES_FOR_VARIABLE");
      arrayList0.add((Displayable) user0);
      DisplayableList displayableList0 = new DisplayableList(userInterfaceFactory0, arrayList0);
      assertEquals(false, displayableList0.isEmpty());
      assertNotNull(displayableList0);
  }

  @Test
  public void test5()  throws Throwable  {
      UserInterfaceFactory userInterfaceFactory0 = new UserInterfaceFactory();
      DisplayableList displayableList0 = new DisplayableList(userInterfaceFactory0);
      assertNotNull(displayableList0);
      
      User user0 = new User("", "");
      displayableList0.updateDisplayName("", (Displayable) user0);
      displayableList0.addDisplayableItem((Displayable) user0);
      assertEquals(true, displayableList0.itemsAreSelected());
      assertEquals(false, displayableList0.isEmpty());
  }

  @Test
  public void test6()  throws Throwable  {
      UserInterfaceFactory userInterfaceFactory0 = new UserInterfaceFactory();
      DisplayableList displayableList0 = new DisplayableList(userInterfaceFactory0);
      assertNotNull(displayableList0);
      
      ArrayList<Displayable> arrayList0 = new ArrayList<Displayable>();
      User user0 = new User("UNABLE_TO_GET_CHANGES_FOR_VARIABLE", "UNABLE_TO_GET_CHANGES_FOR_VARIABLE");
      arrayList0.add((Displayable) user0);
      displayableList0.addDisplayableItems(arrayList0);
      ArrayList<Displayable> arrayList1 = displayableList0.getAllItems();
      assertEquals(true, displayableList0.itemsAreSelected());
      assertTrue(arrayList1.equals(arrayList0));
  }

  @Test
  public void test7()  throws Throwable  {
      UserInterfaceFactory userInterfaceFactory0 = new UserInterfaceFactory();
      DisplayableList displayableList0 = new DisplayableList(userInterfaceFactory0);
      assertNotNull(displayableList0);
      
      ArrayList<Displayable> arrayList0 = new ArrayList<Displayable>();
      User user0 = new User("", "");
      arrayList0.add((Displayable) user0);
      displayableList0.setDisplayItems(arrayList0);
      displayableList0.addDisplayableItems(arrayList0);
      assertEquals(true, displayableList0.itemsAreSelected());
  }

  @Test
  public void test8()  throws Throwable  {
      UserInterfaceFactory userInterfaceFactory0 = new UserInterfaceFactory();
      DisplayableList displayableList0 = new DisplayableList(userInterfaceFactory0);
      assertNotNull(displayableList0);
      
      displayableList0.deleteSelectedItems();
      assertEquals(true, displayableList0.isEmpty());
  }

  @Test
  public void test9()  throws Throwable  {
      UserInterfaceFactory userInterfaceFactory0 = new UserInterfaceFactory();
      DisplayableList displayableList0 = new DisplayableList(userInterfaceFactory0);
      ArrayList<Displayable> arrayList0 = displayableList0.getAllItems();
      assertEquals("[]", arrayList0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      UserInterfaceFactory userInterfaceFactory0 = new UserInterfaceFactory();
      DisplayableList displayableList0 = new DisplayableList(userInterfaceFactory0);
      assertNotNull(displayableList0);
      
      User user0 = new User("a]2e=K7I!o1oA@98p+:", "a]2e=K7I!o1oA@98p+:");
      displayableList0.updateDisplayName("a]2e=K7I!o1oA@98p+:", (Displayable) user0);
      displayableList0.getSelectedItem();
      assertEquals(true, displayableList0.itemsAreSelected());
  }

  @Test
  public void test11()  throws Throwable  {
      UserInterfaceFactory userInterfaceFactory0 = new UserInterfaceFactory();
      DisplayableList displayableList0 = new DisplayableList(userInterfaceFactory0);
      Displayable displayable0 = displayableList0.getSelectedItem();
      assertNull(displayable0);
  }

  @Test
  public void test12()  throws Throwable  {
      UserInterfaceFactory userInterfaceFactory0 = new UserInterfaceFactory();
      DisplayableList displayableList0 = new DisplayableList(userInterfaceFactory0);
      assertNotNull(displayableList0);
      
      ArrayList<Displayable> arrayList0 = new ArrayList<Displayable>();
      User user0 = new User("UNABLE_TO_GET_CHANGES_FOR_VARIABLE", "UNABLE_TO_GET_CHANGES_FOR_VARIABLE");
      arrayList0.add((Displayable) user0);
      displayableList0.addDisplayableItems(arrayList0);
      ArrayList<Displayable> arrayList1 = displayableList0.getSelectedItems();
      assertEquals(true, displayableList0.itemsAreSelected());
      assertTrue(arrayList1.equals(arrayList0));
  }

  @Test
  public void test13()  throws Throwable  {
      UserInterfaceFactory userInterfaceFactory0 = new UserInterfaceFactory();
      DisplayableList displayableList0 = new DisplayableList(userInterfaceFactory0);
      assertEquals(true, displayableList0.isEmpty());
      assertNotNull(displayableList0);
      
      RawVariable rawVariable0 = new RawVariable();
      VariableSummary variableSummary0 = rawVariable0.createVariableSummary();
      displayableList0.addDisplayableItem((Displayable) variableSummary0);
      boolean boolean0 = displayableList0.itemsAreSelected();
      assertEquals(false, displayableList0.isEmpty());
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      UserInterfaceFactory userInterfaceFactory0 = new UserInterfaceFactory();
      DisplayableList displayableList0 = new DisplayableList(userInterfaceFactory0);
      assertNotNull(displayableList0);
      
      boolean boolean0 = displayableList0.itemsAreSelected();
      assertEquals(true, displayableList0.isEmpty());
      assertEquals(false, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      UserInterfaceFactory userInterfaceFactory0 = new UserInterfaceFactory();
      DisplayableList displayableList0 = new DisplayableList(userInterfaceFactory0);
      assertNotNull(displayableList0);
      
      User user0 = new User("", "");
      displayableList0.updateDisplayName("", (Displayable) user0);
      boolean boolean0 = displayableList0.itemsAreSelected();
      assertEquals(true, displayableList0.itemsAreSelected());
      assertEquals(true, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      UserInterfaceFactory userInterfaceFactory0 = new UserInterfaceFactory();
      DisplayableList displayableList0 = new DisplayableList(userInterfaceFactory0);
      assertNotNull(displayableList0);
      
      ArrayList<Displayable> arrayList0 = new ArrayList<Displayable>();
      User user0 = new User("", "");
      arrayList0.add((Displayable) user0);
      displayableList0.setDisplayItems(arrayList0);
      displayableList0.refreshList();
      assertEquals(false, displayableList0.isEmpty());
  }

  @Test
  public void test17()  throws Throwable  {
      UserInterfaceFactory userInterfaceFactory0 = new UserInterfaceFactory();
      DisplayableList displayableList0 = new DisplayableList(userInterfaceFactory0);
      assertNotNull(displayableList0);
      
      Category category0 = new Category(1, "");
      displayableList0.selectItem((Displayable) category0);
      assertEquals(true, displayableList0.isEmpty());
  }

  @Test
  public void test18()  throws Throwable  {
      UserInterfaceFactory userInterfaceFactory0 = new UserInterfaceFactory();
      DisplayableList displayableList0 = new DisplayableList(userInterfaceFactory0);
      assertNotNull(displayableList0);
      
      ArrayList<Displayable> arrayList0 = new ArrayList<Displayable>();
      User user0 = new User("", "");
      arrayList0.add((Displayable) user0);
      AvailabilityState availabilityState0 = new AvailabilityState();
      arrayList0.add((Displayable) availabilityState0);
      displayableList0.setDisplayItems(arrayList0);
      assertEquals(true, displayableList0.itemsAreSelected());
      assertEquals(false, displayableList0.isEmpty());
  }
}
