/*
 * This file was automatically generated by EvoSuite
 */

package macaw.presentationLayer;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import macaw.businessLayer.MacawCurationAPI;
import macaw.businessLayer.User;
import macaw.businessLayer.Variable;
import macaw.persistenceLayer.demo.DemonstrationRetrievalService;
import macaw.persistenceLayer.production.ProductionCurationService;
import macaw.presentationLayer.VariableLabelTable;
import macaw.system.MacawException;
import macaw.system.SessionProperties;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class VariableLabelTableEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      SessionProperties sessionProperties0 = new SessionProperties();
      DemonstrationRetrievalService demonstrationRetrievalService0 = new DemonstrationRetrievalService(sessionProperties0);
      VariableLabelTable variableLabelTable0 = new VariableLabelTable((MacawCurationAPI) demonstrationRetrievalService0, true);
      assertNotNull(variableLabelTable0);
      
      // Undeclared exception!
      try {
        variableLabelTable0.save();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      SessionProperties sessionProperties0 = new SessionProperties();
      ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
      VariableLabelTable variableLabelTable0 = new VariableLabelTable((MacawCurationAPI) productionCurationService0, true);
      assertNotNull(variableLabelTable0);
      
      variableLabelTable0.cancel();
      assertEquals(3, variableLabelTable0.getColumnCount());
      assertEquals(true, variableLabelTable0.getRowSelectionAllowed());
      assertEquals("macaw.presentationLayer.VariableLabelTable[,0,0,0x0,invalid,alignmentX=0.0,alignmentY=0.0,border=,flags=251658568,maximumSize=,minimumSize=,preferredSize=,autoCreateColumnsFromModel=true,autoResizeMode=AUTO_RESIZE_SUBSEQUENT_COLUMNS,cellSelectionEnabled=false,editingColumn=-1,editingRow=-1,gridColor=javax.swing.plaf.ColorUIResource[r=122,g=138,b=153],preferredViewportSize=java.awt.Dimension[width=450,height=400],rowHeight=16,rowMargin=1,rowSelectionAllowed=true,selectionBackground=javax.swing.plaf.ColorUIResource[r=184,g=207,b=229],selectionForeground=sun.swing.PrintColorUIResource[r=51,g=51,b=51],showHorizontalLines=true,showVerticalLines=true]", variableLabelTable0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      SessionProperties sessionProperties0 = new SessionProperties();
      DemonstrationRetrievalService demonstrationRetrievalService0 = new DemonstrationRetrievalService(sessionProperties0);
      VariableLabelTable variableLabelTable0 = new VariableLabelTable((MacawCurationAPI) demonstrationRetrievalService0, true);
      assertNotNull(variableLabelTable0);
      
      variableLabelTable0.addValueLabel();
      assertEquals(0, variableLabelTable0.getSelectedRow());
      
      variableLabelTable0.deleteValueLabel();
      assertEquals(0, variableLabelTable0.getSelectedRowCount());
  }

  @Test
  public void test3()  throws Throwable  {
      SessionProperties sessionProperties0 = new SessionProperties();
      DemonstrationRetrievalService demonstrationRetrievalService0 = new DemonstrationRetrievalService(sessionProperties0);
      VariableLabelTable variableLabelTable0 = new VariableLabelTable((MacawCurationAPI) demonstrationRetrievalService0, true);
      assertNotNull(variableLabelTable0);
      
      variableLabelTable0.deleteValueLabel();
      assertEquals(3, variableLabelTable0.getColumnCount());
      assertEquals("macaw.presentationLayer.VariableLabelTable[,0,0,0x0,invalid,alignmentX=0.0,alignmentY=0.0,border=,flags=251658568,maximumSize=,minimumSize=,preferredSize=,autoCreateColumnsFromModel=true,autoResizeMode=AUTO_RESIZE_SUBSEQUENT_COLUMNS,cellSelectionEnabled=false,editingColumn=-1,editingRow=-1,gridColor=javax.swing.plaf.ColorUIResource[r=122,g=138,b=153],preferredViewportSize=java.awt.Dimension[width=450,height=400],rowHeight=16,rowMargin=1,rowSelectionAllowed=true,selectionBackground=javax.swing.plaf.ColorUIResource[r=184,g=207,b=229],selectionForeground=sun.swing.PrintColorUIResource[r=51,g=51,b=51],showHorizontalLines=true,showVerticalLines=true]", variableLabelTable0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SessionProperties sessionProperties0 = new SessionProperties();
          ProductionCurationService productionCurationService0 = new ProductionCurationService(sessionProperties0);
          VariableLabelTable variableLabelTable0 = new VariableLabelTable((MacawCurationAPI) productionCurationService0, true);
          assertNotNull(variableLabelTable0);
          
          variableLabelTable0.addValueLabel();
          User user0 = new User(";>f&P0$_=P,P]]", ";>f&P0$_=P,P]]");
          variableLabelTable0.editCellAt(0, 0);
          try {
            variableLabelTable0.setData(user0, (Variable) null);
            fail("Expecting exception: MacawException");
          } catch(MacawException e) {
            /*
             * Unable to create connection.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
