/*
 * This file was automatically generated by EvoSuite
 */

package org.templateit;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.junit.BeforeClass;
import org.templateit.DynamicTemplate;
import org.templateit.NamedStyle;
import org.templateit.Parameter;

@RunWith(EvoSuiteRunner.class)
public class TemplateEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LinkedList<NamedStyle> linkedList0 = new LinkedList<NamedStyle>();
      DynamicTemplate dynamicTemplate0 = new DynamicTemplate("", (HSSFSheet) null, (-1381), (List<NamedStyle>) linkedList0);
      int int0 = dynamicTemplate0.getParametersNumber();
      assertEquals(0, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      LinkedList<NamedStyle> linkedList0 = new LinkedList<NamedStyle>();
      DynamicTemplate dynamicTemplate0 = new DynamicTemplate(" text-errorT.=", (HSSFSheet) null, 256, (List<NamedStyle>) linkedList0);
      String string0 = dynamicTemplate0.getName();
      assertEquals(" text-errorT.=", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      LinkedList<NamedStyle> linkedList0 = new LinkedList<NamedStyle>();
      DynamicTemplate dynamicTemplate0 = new DynamicTemplate(" text-errorT.=", (HSSFSheet) null, 256, (List<NamedStyle>) linkedList0);
      dynamicTemplate0.createParameter(" text-errorT.=", 256, 256);
      assertEquals(0, dynamicTemplate0.getParametersNumber());
  }

  @Test
  public void test3()  throws Throwable  {
      LinkedList<NamedStyle> linkedList0 = new LinkedList<NamedStyle>();
      DynamicTemplate dynamicTemplate0 = new DynamicTemplate("", (HSSFSheet) null, (-1381), (List<NamedStyle>) linkedList0);
      boolean boolean0 = dynamicTemplate0.isRowBroken((-1381));
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      LinkedList<NamedStyle> linkedList0 = new LinkedList<NamedStyle>();
      DynamicTemplate dynamicTemplate0 = new DynamicTemplate(" text-errorT.=", (HSSFSheet) null, 256, (List<NamedStyle>) linkedList0);
      Parameter[] parameterArray0 = new Parameter[2];
      // Undeclared exception!
      try {
        dynamicTemplate0.setParameters(parameterArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      LinkedList<NamedStyle> linkedList0 = new LinkedList<NamedStyle>();
      DynamicTemplate dynamicTemplate0 = new DynamicTemplate("6", (HSSFSheet) null, (-1), (List<NamedStyle>) linkedList0);
      dynamicTemplate0.createParameter("6", (-1), (-1));
      dynamicTemplate0.createParameter("6", (-1), (-1));
      dynamicTemplate0.createParameter("6", 6, 6);
      dynamicTemplate0.createParameter("6", (-1), (-1));
      dynamicTemplate0.createParameter("6", (-1), (-1));
      dynamicTemplate0.createParameter("6", 6, 6);
      dynamicTemplate0.createParameter("6", 6, (-1));
      assertEquals(6, dynamicTemplate0.getParametersNumber());
  }

  @Test
  public void test6()  throws Throwable  {
      LinkedList<NamedStyle> linkedList0 = new LinkedList<NamedStyle>();
      DynamicTemplate dynamicTemplate0 = new DynamicTemplate("", (HSSFSheet) null, (-1381), (List<NamedStyle>) linkedList0);
      int int0 = dynamicTemplate0.getParameterIndex((-1381), (-1381));
      assertEquals((-1), int0);
  }

  @Test
  public void test7()  throws Throwable  {
      LinkedList<NamedStyle> linkedList0 = new LinkedList<NamedStyle>();
      DynamicTemplate dynamicTemplate0 = new DynamicTemplate("6", (HSSFSheet) null, (-1), (List<NamedStyle>) linkedList0);
      dynamicTemplate0.createParameter("6", (-1), (-1));
      int int0 = dynamicTemplate0.getParameterIndex((-1), (-1));
      assertEquals(1, dynamicTemplate0.getParametersNumber());
      assertEquals(6, int0);
  }
}
