/*
 * This file was automatically generated by EvoSuite
 */

package wheel.components;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import wheel.ErrorPage;
import wheel.components.ActionExpression;
import wheel.components.Any;
import wheel.components.Component;
import wheel.components.ElExpression;
import wheel.components.NumberInput;
import wheel.components.XmlEntityRef;

@RunWith(EvoSuiteRunner.class)
public class ExpressionEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ActionExpression actionExpression0 = new ActionExpression(" 0`dBLtm)^U1+OJ");
      int int0 = actionExpression0.length();
      assertEquals(15, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      ActionExpression actionExpression0 = new ActionExpression(" 0`dBLtm)^U1+OJ");
      String string0 = (String)actionExpression0.subSequence(1, 1);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      ElExpression elExpression0 = new ElExpression((String) null);
      ErrorPage errorPage0 = new ErrorPage();
      Any any0 = new Any((Component) errorPage0, (CharSequence) elExpression0);
      ActionExpression actionExpression0 = any0.action("SyV");
      boolean boolean0 = elExpression0.equals((Object) actionExpression0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      ActionExpression actionExpression0 = new ActionExpression(" 0`dBLtm)^U1+OJ");
      String string0 = actionExpression0.getExpression();
      assertEquals(" 0`dBLtm)^U1+OJ", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      ActionExpression actionExpression0 = new ActionExpression(" 0`dBLtm)^U1+OJ");
      char char0 = actionExpression0.charAt(1);
      assertEquals('0', char0);
  }

  @Test
  public void test5()  throws Throwable  {
      ElExpression elExpression0 = new ElExpression((String) null);
      boolean boolean0 = elExpression0.equals((Object) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      ElExpression elExpression0 = new ElExpression((String) null);
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = errorPage0.action((String) null);
      boolean boolean0 = elExpression0.equals((Object) actionExpression0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      NumberInput numberInput0 = new NumberInput(errorPage0, "", "", "");
      ElExpression elExpression0 = numberInput0.el("");
      Any any0 = new Any((Component) errorPage0, (CharSequence) elExpression0);
      ActionExpression actionExpression0 = any0.action((String) null);
      boolean boolean0 = elExpression0.equals((Object) actionExpression0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      NumberInput numberInput0 = new NumberInput(errorPage0, "", "", "");
      ElExpression elExpression0 = numberInput0.el("");
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      ElExpression elExpression1 = xmlEntityRef0.el("");
      boolean boolean0 = elExpression0.equals((Object) elExpression1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      ElExpression elExpression0 = new ElExpression((String) null);
      int int0 = elExpression0.hashCode();
      assertEquals(0, int0);
  }

  @Test
  public void test10()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      NumberInput numberInput0 = new NumberInput(errorPage0, "", "", "");
      ElExpression elExpression0 = numberInput0.el("");
      int int0 = elExpression0.hashCode();
      assertEquals(0, int0);
  }
}
