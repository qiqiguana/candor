/*
 * This file was automatically generated by EvoSuite
 */

package wheel.components;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import org.junit.BeforeClass;
import org.xmlpull.mxp1_serializer.MXSerializer;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlSerializer;
import org.xmlpull.v1.wrapper.XmlPullWrapperFactory;
import org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper;
import wheel.ErrorPage;
import wheel.components.Component;
import wheel.components.Link;

@RunWith(EvoSuiteRunner.class)
public class LinkEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Link link0 = new Link((Component) errorPage0, (Object) "");
      String string0 = link0.toString();
      assertEquals("<a id=\"Link_1\"/>", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Link link0 = new Link((Component) errorPage0, (Object) null);
      assertEquals("Link_1", link0.getComponentId());
  }

  @Test
  public void test2()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Link link0 = new Link((Component) errorPage0, (Object) "");
      MXSerializer mXSerializer0 = new MXSerializer();
      link0.placeholder("");
      link0.renderComponent((XmlSerializer) mXSerializer0);
      assertEquals(0, mXSerializer0.getDepth());
  }

  @Test
  public void test3()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Link link0 = new Link((Component) errorPage0, (Object) "");
      MXSerializer mXSerializer0 = new MXSerializer();
      link0.actionBinding("");
      // Undeclared exception!
      try {
        link0._renderActions((XmlSerializer) mXSerializer0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * startTag() must be called before attribute()
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Link link0 = new Link((Component) errorPage0, (Object) "");
      MXSerializer mXSerializer0 = new MXSerializer();
      Class<?> class0 = Link.class;
      XmlPullWrapperFactory xmlPullWrapperFactory0 = XmlPullWrapperFactory.newInstance("", (Class) class0);
      StaticXmlSerializerWrapper staticXmlSerializerWrapper0 = new StaticXmlSerializerWrapper((XmlSerializer) mXSerializer0, xmlPullWrapperFactory0);
      link0._renderActions((XmlSerializer) staticXmlSerializerWrapper0);
      assertNull(staticXmlSerializerWrapper0.getCurrentNamespaceForElements());
  }
}
