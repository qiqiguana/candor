/*
 * This file was automatically generated by EvoSuite
 */

package wheel.components;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import org.junit.BeforeClass;
import org.xmlpull.mxp1_serializer.MXSerializer;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlPullParserFactory;
import org.xmlpull.v1.XmlSerializer;
import org.xmlpull.v1.wrapper.XmlPullWrapperFactory;
import wheel.ErrorPage;
import wheel.components.Block;
import wheel.components.Component;
import wheel.components.Table;
import wheel.components.TableBlock;
import wheel.components.TableRow;

@RunWith(EvoSuiteRunner.class)
public class TableEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table((Component) errorPage0, "");
      Table table1 = (Table)table0.renderHint((CharSequence) "");
      assertEquals("<table id=\"Table_1\"/>", table1.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table((Component) errorPage0, "");
      // Undeclared exception!
      try {
        table0.id("");
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table((Component) errorPage0, "");
      String string0 = table0.defaultTagName();
      assertEquals("table", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table((Component) errorPage0, "addRenderBefore expects an instance of RenderableC?mponent.");
      TableBlock tableBlock0 = (TableBlock)table0.thead();
      assertNotNull(tableBlock0);
      
      TableBlock tableBlock1 = (TableBlock)table0.thead();
      assertEquals("<thead id=\"TableBlock_1\"/>", tableBlock1.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table((Component) errorPage0, "");
      TableBlock tableBlock0 = (TableBlock)table0.tfoot();
      assertNotNull(tableBlock0);
      
      TableBlock tableBlock1 = (TableBlock)table0.tfoot();
      assertEquals("<tfoot id=\"TableBlock_1\"/>", tableBlock1.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table((Component) errorPage0, "");
      TableBlock tableBlock0 = (TableBlock)table0.tbody();
      assertNotNull(tableBlock0);
      
      TableBlock tableBlock1 = (TableBlock)table0.tbody();
      assertEquals("<tbody id=\"TableBlock_1\"/>", tableBlock1.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table((Component) errorPage0, "addRenderBefore expects an instance of RenderableC?mponent.");
      Block block0 = (Block)table0.caption();
      assertNotNull(block0);
      
      Block block1 = (Block)table0.caption();
      assertEquals("<caption id=\"Block_1\"/>", block1.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table((Component) errorPage0, "");
      TableBlock tableBlock0 = (TableBlock)table0.colgroup();
      assertNotNull(tableBlock0);
      
      TableBlock tableBlock1 = (TableBlock)table0.colgroup();
      assertEquals("<colgroup id=\"TableBlock_2\"/>", tableBlock1.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table((Component) errorPage0, "1V");
      XmlPullWrapperFactory xmlPullWrapperFactory0 = XmlPullWrapperFactory.newInstance();
      XmlPullParserFactory xmlPullParserFactory0 = xmlPullWrapperFactory0.getFactory();
      MXSerializer mXSerializer0 = (MXSerializer)xmlPullParserFactory0.newSerializer();
      table0.renderComponent((XmlSerializer) mXSerializer0);
      assertEquals(false, table0._isGeneratedId());
  }

  @Test
  public void test9()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table((Component) errorPage0, "addRenderBefore expects an instance of RenderableC?mponent.");
      Block block0 = (Block)table0.caption();
      assertNotNull(block0);
      
      XmlPullWrapperFactory xmlPullWrapperFactory0 = XmlPullWrapperFactory.newInstance();
      XmlPullParserFactory xmlPullParserFactory0 = xmlPullWrapperFactory0.getFactory();
      MXSerializer mXSerializer0 = (MXSerializer)xmlPullParserFactory0.newSerializer();
      // Undeclared exception!
      try {
        table0.renderComponent((XmlSerializer) mXSerializer0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * setOutput() must called set before serialization can start
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table((Component) errorPage0, "addRenderBefore expects aninstance of RenderableComponent.");
      TableBlock tableBlock0 = (TableBlock)table0.colgroup();
      assertNotNull(tableBlock0);
      
      XmlPullWrapperFactory xmlPullWrapperFactory0 = XmlPullWrapperFactory.newInstance();
      XmlPullParserFactory xmlPullParserFactory0 = xmlPullWrapperFactory0.getFactory();
      MXSerializer mXSerializer0 = (MXSerializer)xmlPullParserFactory0.newSerializer();
      // Undeclared exception!
      try {
        table0.renderComponent((XmlSerializer) mXSerializer0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * setOutput() must called set before serialization can start
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table((Component) errorPage0, "1V");
      XmlPullWrapperFactory xmlPullWrapperFactory0 = XmlPullWrapperFactory.newInstance();
      XmlPullParserFactory xmlPullParserFactory0 = xmlPullWrapperFactory0.getFactory();
      TableBlock tableBlock0 = (TableBlock)table0.tfoot();
      assertNotNull(tableBlock0);
      
      MXSerializer mXSerializer0 = (MXSerializer)xmlPullParserFactory0.newSerializer();
      // Undeclared exception!
      try {
        table0.renderComponent((XmlSerializer) mXSerializer0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * setOutput() must called set before serialization can start
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table((Component) errorPage0, "addRenderBefore expects an instance of RenderableComponent.");
      XmlPullWrapperFactory xmlPullWrapperFactory0 = XmlPullWrapperFactory.newInstance();
      XmlPullParserFactory xmlPullParserFactory0 = xmlPullWrapperFactory0.getFactory();
      TableRow tableRow0 = (TableRow)table0.tr();
      assertNotNull(tableRow0);
      
      MXSerializer mXSerializer0 = (MXSerializer)xmlPullParserFactory0.newSerializer();
      // Undeclared exception!
      try {
        table0.renderComponent((XmlSerializer) mXSerializer0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * setOutput() must called set before serialization can start
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table((Component) errorPage0, "addRenderBefore expects an instance of RenderableC?mponent.");
      table0.thead();
      table0._clear();
      assertEquals(false, table0._isGeneratedId());
  }

  @Test
  public void test14()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table((Component) errorPage0, "");
      table0.tfoot();
      table0._clear();
      assertEquals("<table id=\"Table_1\"/>", table0.toString());
  }

  @Test
  public void test15()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table((Component) errorPage0, "addRenderBefore expects an instance of RenderableC?mponent.");
      table0.caption();
      table0._clear();
      assertNull(table0._classReferenceFromHints());
  }

  @Test
  public void test16()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table((Component) errorPage0, "");
      table0.colgroup();
      table0._clear();
      assertEquals("Table", table0.getComponentName());
  }
}
