/*
 * This file was automatically generated by EvoSuite
 */

package wheel.components;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import wheel.ErrorPage;
import wheel.WheelException;
import wheel.components.Any;
import wheel.components.Block;
import wheel.components.Checkbox;
import wheel.components.CheckboxGroup;
import wheel.components.Component;
import wheel.components.ComponentCreator;
import wheel.components.DateInput;
import wheel.components.ElExpression;
import wheel.components.FileInput;
import wheel.components.Form;
import wheel.components.Hidden;
import wheel.components.ISelectModel;
import wheel.components.Image;
import wheel.components.Label;
import wheel.components.Link;
import wheel.components.NumberInput;
import wheel.components.Radio;
import wheel.components.Select;
import wheel.components.Submit;
import wheel.components.Table;
import wheel.components.TableBlock;
import wheel.components.TableRow;
import wheel.components.Text;
import wheel.components.TextArea;
import wheel.components.TextInput;
import wheel.components.XmlEntityRef;
import wheel.util.DynamicSelectModel;
import wheel.util.StringSelectModel;

@RunWith(EvoSuiteRunner.class)
public class ComponentCreatorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Link link0 = componentCreator0.wLink("", "Checkbox_1");
      assertEquals(true, link0._isGeneratedId());
  }

  @Test
  public void test1()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "..]dSJ4c8 5");
      ComponentCreator componentCreator0 = tableBlock0.create();
      Block block0 = (Block)componentCreator0.noscript();
      assertNotNull(block0);
      assertEquals("<noscript id=\"Block_1\"/>", block0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = new ComponentCreator((Component) errorPage0);
      Any any0 = (Any)componentCreator0.param((CharSequence) "http://xmlpull.org/v1/doc/features.html#report-namespace-prefixes");
      assertEquals("<param id=\"Any_1\"name=\"http://xmlpull.org/v1/doc/features.html#report-namespace-prefixes\" />", any0.toString());
      assertNotNull(any0);
  }

  @Test
  public void test3()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Block block0 = (Block)componentCreator0.abbr();
      assertNotNull(block0);
      assertEquals("abbr", block0.getTagName());
  }

  @Test
  public void test4()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DateInput dateInput0 = new DateInput(errorPage0, ">%og7wu", ">%og7wu", ">%og7wu");
      ComponentCreator componentCreator0 = dateInput0.create();
      Any any0 = (Any)componentCreator0.hr();
      assertNotNull(any0);
      assertEquals("<hr id=\"Any_1\"/>", any0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Radio radio0 = new Radio(errorPage0, "", "");
      ComponentCreator componentCreator0 = radio0.create();
      Label label0 = (Label)componentCreator0.var((Object) null);
      assertNotNull(label0);
      assertEquals("<var id=\"Label_1\"/>", label0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Label label0 = (Label)componentCreator0.pre((Object) errorPage0);
      assertEquals("<pre id=\"Label_1\"/>", label0.toString());
      assertNotNull(label0);
  }

  @Test
  public void test7()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Block block0 = (Block)componentCreator0.ins();
      assertEquals("ins", block0.getTagName());
      assertNotNull(block0);
  }

  @Test
  public void test8()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DateInput dateInput0 = new DateInput(errorPage0, ">%og7wu", ">%og7wu", ">%og7wu");
      ComponentCreator componentCreator0 = dateInput0.create();
      Label label0 = (Label)componentCreator0.ins((Object) ":");
      assertNotNull(label0);
      assertEquals("ins", label0.getTagName());
  }

  @Test
  public void test9()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Label label0 = (Label)componentCreator0.b((Object) componentCreator0);
      assertNotNull(label0);
      assertEquals("<b id=\"Label_1\"/>", label0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Label label0 = (Label)componentCreator0.u((Object) null);
      assertNotNull(label0);
      assertEquals("<u id=\"Label_1\"/>", label0.toString());
  }

  @Test
  public void test11()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Label label0 = (Label)componentCreator0.dt((Object) null);
      assertEquals("<dt id=\"Label_1\"/>", label0.toString());
      assertNotNull(label0);
  }

  @Test
  public void test12()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = new ComponentCreator((Component) errorPage0);
      Block block0 = (Block)componentCreator0.h6();
      assertNotNull(block0);
      assertEquals("<h6 id=\"Block_1\"/>", block0.toString());
  }

  @Test
  public void test13()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Block block0 = (Block)componentCreator0.h3();
      assertNotNull(block0);
      assertEquals("h3", block0.getTagName());
  }

  @Test
  public void test14()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = new ComponentCreator((Component) errorPage0);
      // Undeclared exception!
      try {
        componentCreator0.th();
        fail("Expecting exception: WheelException");
      } catch(WheelException e) {
        /*
         * Th component can be added only to a TableRow.
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Label label0 = (Label)componentCreator0.li((Object) null);
      assertNotNull(label0);
      assertEquals("<li id=\"Label_1\"/>", label0.toString());
  }

  @Test
  public void test16()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Radio radio0 = new Radio(errorPage0, "AS_COMPLEX_PROPERTY", "AS_COMPLEX_PROPERTY");
      ComponentCreator componentCreator0 = radio0.create();
      Block block0 = (Block)componentCreator0.strike();
      assertNotNull(block0);
      assertEquals("<strike id=\"Block_1\"/>", block0.toString());
  }

  @Test
  public void test17()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Label label0 = (Label)componentCreator0.h6((Object) "");
      assertEquals("h6", label0.getTagName());
      assertNotNull(label0);
  }

  @Test
  public void test18()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Block block0 = (Block)componentCreator0.h1();
      assertNotNull(block0);
      assertEquals("h1", block0.getTagName());
  }

  @Test
  public void test19()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Block block0 = (Block)componentCreator0.em();
      assertEquals("em", block0.getTagName());
      assertNotNull(block0);
  }

  @Test
  public void test20()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = new ComponentCreator((Component) errorPage0);
      Block block0 = (Block)componentCreator0.label();
      assertNotNull(block0);
      assertEquals("<label id=\"Block_1\"/>", block0.toString());
  }

  @Test
  public void test21()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Block block0 = (Block)componentCreator0.kbd();
      assertEquals("<div id=\"Block_1\"class=\"kdb\"/>", block0.toString());
      assertNotNull(block0);
  }

  @Test
  public void test22()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Label label0 = (Label)componentCreator0.strong((Object) componentCreator0);
      assertNotNull(label0);
      assertEquals("<strong id=\"Label_1\"/>", label0.toString());
  }

  @Test
  public void test23()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("GQ)wB<4R8|DR=%9~C(");
      ComponentCreator componentCreator0 = xmlEntityRef0.create();
      // Undeclared exception!
      try {
        componentCreator0.dt();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test24()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Block block0 = (Block)componentCreator0.s();
      assertNotNull(block0);
      assertEquals("s", block0.getTagName());
  }

  @Test
  public void test25()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = new ComponentCreator((Component) errorPage0);
      Text text0 = (Text)componentCreator0.text((Object) errorPage0);
      assertEquals("<null id=\"Text_1\"/>", text0.toString());
  }

  @Test
  public void test26()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Label label0 = new Label((Component) errorPage0, (Object) null);
      ComponentCreator componentCreator0 = label0.create();
      Label label1 = (Label)componentCreator0.span((Object) null);
      assertEquals("span", label1.getTagName());
  }

  @Test
  public void test27()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Image image0 = (Image)componentCreator0.img((CharSequence) "OT3j", (CharSequence) "");
      assertNull(image0._classReferenceFromHints());
  }

  @Test
  public void test28()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Radio radio0 = new Radio(errorPage0, "AS_COMPLEX_PROPERTY", "AS_COMPLEX_PROPERTY");
      ComponentCreator componentCreator0 = radio0.create();
      Block block0 = (Block)componentCreator0.i();
      assertNotNull(block0);
      assertEquals("i", block0.getTagName());
  }

  @Test
  public void test29()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Block block0 = (Block)componentCreator0.button();
      assertEquals("button", block0.getTagName());
      assertNotNull(block0);
  }

  @Test
  public void test30()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "");
      ComponentCreator componentCreator0 = checkbox0.create();
      Block block0 = componentCreator0.placeholder("");
      assertNull(block0._classReferenceFromHints());
  }

  @Test
  public void test31()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = new ComponentCreator((Component) errorPage0);
      Label label0 = (Label)componentCreator0.h3((Object) null);
      assertEquals("<h3 id=\"Label_1\"/>", label0.toString());
      assertNotNull(label0);
  }

  @Test
  public void test32()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Label label0 = (Label)componentCreator0.h2((Object) null);
      assertNotNull(label0);
      assertEquals("h2", label0.getTagName());
  }

  @Test
  public void test33()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Block block0 = (Block)componentCreator0.div();
      assertNull(block0._classReferenceFromHints());
  }

  @Test
  public void test34()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "");
      ComponentCreator componentCreator0 = checkbox0.create();
      Any any0 = componentCreator0.br();
      assertNotNull(any0);
      assertEquals("<br id=\"Any_1\"/>", any0.toString());
  }

  @Test
  public void test35()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Block block0 = (Block)componentCreator0.acronym();
      assertEquals("<acronym id=\"Block_1\"/>", block0.toString());
      assertNotNull(block0);
  }

  @Test
  public void test36()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = new ComponentCreator((Component) errorPage0);
      Label label0 = (Label)componentCreator0.abbr((Object) errorPage0);
      assertNotNull(label0);
      assertEquals("abbr", label0.getTagName());
  }

  @Test
  public void test37()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = new ComponentCreator((Component) errorPage0);
      Label label0 = (Label)componentCreator0.dd((Object) null);
      assertNotNull(label0);
      assertEquals("dd", label0.getTagName());
  }

  @Test
  public void test38()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Label label0 = componentCreator0.wLabel((CharSequence) null, (Object) null);
      assertNotNull(label0);
      assertEquals("<span id=\"Label_1\"class=\"null\"/>", label0.toString());
  }

  @Test
  public void test39()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = new ComponentCreator((Component) errorPage0);
      Any any0 = (Any)componentCreator0.frame((CharSequence) "u[\"\"..m");
      assertNotNull(any0);
      assertEquals("<frame id=\"Any_1\"src=\"u[\"\"..m\" />", any0.toString());
  }

  @Test
  public void test40()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Block block0 = componentCreator0.wBlock();
      assertEquals("<div id=\"Block_1\"/>", block0.toString());
  }

  @Test
  public void test41()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Block block0 = (Block)componentCreator0.u();
      assertEquals("u", block0.getTagName());
      assertNotNull(block0);
  }

  @Test
  public void test42()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Block block0 = (Block)componentCreator0.pre();
      assertNotNull(block0);
      assertEquals("<pre id=\"Block_1\"/>", block0.toString());
  }

  @Test
  public void test43()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Block block0 = (Block)componentCreator0.dd();
      assertNotNull(block0);
      assertEquals("<dd id=\"Block_1\"/>", block0.toString());
  }

  @Test
  public void test44()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = new ComponentCreator((Component) errorPage0);
      Block block0 = (Block)componentCreator0.code();
      assertEquals("code", block0.getTagName());
      assertNotNull(block0);
  }

  @Test
  public void test45()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Block block0 = (Block)componentCreator0.var();
      assertNotNull(block0);
      assertEquals("var", block0.getTagName());
  }

  @Test
  public void test46()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Block block0 = (Block)componentCreator0.h2();
      assertNotNull(block0);
      assertEquals("h2", block0.getTagName());
  }

  @Test
  public void test47()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = new ComponentCreator((Component) errorPage0);
      Label label0 = (Label)componentCreator0.s((Object) "");
      assertEquals("s", label0.getTagName());
      assertNotNull(label0);
  }

  @Test
  public void test48()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Block block0 = (Block)componentCreator0.bdo((CharSequence) "true");
      assertNotNull(block0);
      assertEquals("<bdo id=\"Block_1\"dir=\"true\" />", block0.toString());
  }

  @Test
  public void test49()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Block block0 = (Block)componentCreator0.script();
      assertNotNull(block0);
      assertEquals("<script id=\"Block_1\"/>", block0.toString());
  }

  @Test
  public void test50()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Block block0 = (Block)componentCreator0.cite();
      assertNotNull(block0);
      assertEquals("<cite id=\"Block_1\"/>", block0.toString());
  }

  @Test
  public void test51()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "");
      ComponentCreator componentCreator0 = checkbox0.create();
      Label label0 = (Label)componentCreator0.i((Object) checkbox0);
      assertEquals("i", label0.getTagName());
      assertNotNull(label0);
  }

  @Test
  public void test52()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "");
      ComponentCreator componentCreator0 = checkbox0.create();
      Block block0 = (Block)componentCreator0.p();
      assertNotNull(block0);
      assertEquals("p", block0.getTagName());
  }

  @Test
  public void test53()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Any any0 = (Any)componentCreator0.iframe();
      assertNotNull(any0);
      assertEquals("<iframe id=\"Any_1\"/>", any0.toString());
  }

  @Test
  public void test54()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Link link0 = (Link)componentCreator0.a();
      assertEquals(true, link0._isGeneratedId());
  }

  @Test
  public void test55()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("c]8=#~");
      ComponentCreator componentCreator0 = xmlEntityRef0.create();
      // Undeclared exception!
      try {
        componentCreator0.tfoot();
        fail("Expecting exception: WheelException");
      } catch(WheelException e) {
        /*
         * Tfoot component can be added only to a Table.
         */
      }
  }

  @Test
  public void test56()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Label label0 = new Label((Component) errorPage0, (Object) null);
      ComponentCreator componentCreator0 = label0.create();
      // Undeclared exception!
      try {
        componentCreator0.frameset();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test57()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Block block0 = (Block)componentCreator0.h4();
      assertEquals("h4", block0.getTagName());
      assertNotNull(block0);
  }

  @Test
  public void test58()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Label label0 = (Label)componentCreator0.legend((Object) "textarea");
      assertEquals("<legend id=\"Label_1\"/>", label0.toString());
      assertNotNull(label0);
  }

  @Test
  public void test59()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Label label0 = (Label)componentCreator0.dfn((Object) null);
      assertNotNull(label0);
      assertEquals("<dfn id=\"Label_1\"/>", label0.toString());
  }

  @Test
  public void test60()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Radio radio0 = new Radio(errorPage0, "AS_COMPLEX_PROPERTY", "AS_COMPLEX_PROPERTY");
      ComponentCreator componentCreator0 = radio0.create();
      Block block0 = (Block)componentCreator0.del();
      assertEquals("<del id=\"Block_1\"/>", block0.toString());
      assertNotNull(block0);
  }

  @Test
  public void test61()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Radio radio0 = new Radio(errorPage0, "AS_COMPLEX_PROPERTY", "AS_COMPLEX_PROPERTY");
      ComponentCreator componentCreator0 = radio0.create();
      Label label0 = (Label)componentCreator0.code((Object) null);
      assertNotNull(label0);
      assertEquals("code", label0.getTagName());
  }

  @Test
  public void test62()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Radio radio0 = new Radio(errorPage0, "AS_COMPLEX_PROPERTY", "AS_COMPLEX_PROPERTY");
      ComponentCreator componentCreator0 = radio0.create();
      Label label0 = (Label)componentCreator0.sup((Object) null);
      assertNotNull(label0);
      assertEquals("<sup id=\"Label_1\"/>", label0.toString());
  }

  @Test
  public void test63()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = new ComponentCreator((Component) errorPage0);
      Block block0 = (Block)componentCreator0.style();
      assertNotNull(block0);
      assertEquals("<style id=\"Block_1\"/>", block0.toString());
  }

  @Test
  public void test64()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("o`jJ<)JB");
      TextArea textArea0 = new TextArea((Component) xmlEntityRef0, "o`jJ<)JB", "o`jJ<)JB");
      // Undeclared exception!
      try {
        textArea0.label("o`jJ<)JB");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test65()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Block block0 = (Block)componentCreator0.strong();
      assertEquals("<strong id=\"Block_1\"/>", block0.toString());
      assertNotNull(block0);
  }

  @Test
  public void test66()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Block block0 = (Block)componentCreator0.legend();
      assertNotNull(block0);
      assertEquals("legend", block0.getTagName());
  }

  @Test
  public void test67()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Block block0 = (Block)componentCreator0.dl();
      assertEquals("<dl id=\"Block_1\"/>", block0.toString());
      assertNotNull(block0);
  }

  @Test
  public void test68()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = new ComponentCreator((Component) errorPage0);
      Label label0 = (Label)componentCreator0.del((Object) null);
      assertEquals("<del id=\"Label_1\"/>", label0.toString());
      assertNotNull(label0);
  }

  @Test
  public void test69()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Table table0 = componentCreator0.table();
      assertNotNull(table0);
      
      Label label0 = (Label)componentCreator0.big((Object) table0);
      assertNotNull(label0);
      assertEquals("big", label0.getTagName());
  }

  @Test
  public void test70()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      // Undeclared exception!
      try {
        componentCreator0.td();
        fail("Expecting exception: WheelException");
      } catch(WheelException e) {
        /*
         * Td component can be added only to a TableRow.
         */
      }
  }

  @Test
  public void test71()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Block block0 = (Block)componentCreator0.map("(Luj'2)B*?8zOhA~T");
      assertEquals("<map id=\"(Luj'2)B*?8zOhA~T\"/>", block0.toString());
      assertNotNull(block0);
  }

  @Test
  public void test72()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Label label0 = (Label)componentCreator0.address((Object) null);
      assertEquals("address", label0.getTagName());
      assertNotNull(label0);
  }

  @Test
  public void test73()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DateInput dateInput0 = new DateInput(errorPage0, ">%og7wu", ">%og7wu", ">%og7wu");
      ComponentCreator componentCreator0 = dateInput0.create();
      Select select0 = new Select(dateInput0, ">%og7wu", ">%og7wu", (ISelectModel) null, ">%og7wu");
      Label label0 = (Label)componentCreator0.h5((Object) select0);
      assertNotNull(label0);
      assertEquals("<h5 id=\"Label_1\"/>", label0.toString());
  }

  @Test
  public void test74()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      String[] stringArray0 = new String[2];
      Any any0 = (Any)componentCreator0.area(stringArray0);
      assertNotNull(any0);
      assertEquals("<area id=\"Any_1\"null=\"null\" />", any0.toString());
  }

  @Test
  public void test75()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      NumberInput numberInput0 = new NumberInput(errorPage0, "Y8[`Fz", "Y8[`Fz", "Y8[`Fz");
      ComponentCreator componentCreator0 = numberInput0.create();
      Block block0 = (Block)componentCreator0.h5();
      assertEquals("h5", block0.getTagName());
      assertNotNull(block0);
  }

  @Test
  public void test76()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      NumberInput numberInput0 = new NumberInput(errorPage0, "[,QlWP$MeMCT?rniA", "[,QlWP$MeMCT?rniA");
      ComponentCreator componentCreator0 = numberInput0.create();
      Block block0 = (Block)componentCreator0.li();
      assertNotNull(block0);
      assertEquals("<li id=\"Block_1\"/>", block0.toString());
  }

  @Test
  public void test77()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Block block0 = (Block)componentCreator0.dfn();
      assertNotNull(block0);
      assertEquals("dfn", block0.getTagName());
  }

  @Test
  public void test78()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = new ComponentCreator((Component) errorPage0);
      Label label0 = (Label)componentCreator0.cite((Object) null);
      assertNotNull(label0);
      assertEquals("<cite id=\"Label_1\"/>", label0.toString());
  }

  @Test
  public void test79()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Image image0 = new Image(errorPage0, "<textarea id=\"YisequR'9T8\"/>", "YisequR'9T8");
      ComponentCreator componentCreator0 = image0.create();
      Any any0 = (Any)componentCreator0.base((CharSequence) "");
      assertNotNull(any0);
      assertEquals("<base id=\"Any_1\"href=\"\" />", any0.toString());
  }

  @Test
  public void test80()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Label label0 = (Label)componentCreator0.kbd((Object) null);
      assertNotNull(label0);
      assertEquals("kbd", label0.getTagName());
  }

  @Test
  public void test81()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Label label0 = (Label)componentCreator0.q((Object) errorPage0);
      assertNotNull(label0);
      assertEquals("q", label0.getTagName());
  }

  @Test
  public void test82()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("OC~<bL(\"b@ug{");
      ComponentCreator componentCreator0 = xmlEntityRef0.create();
      // Undeclared exception!
      try {
        componentCreator0.thead();
        fail("Expecting exception: WheelException");
      } catch(WheelException e) {
        /*
         * Thead component can be added only to a Table.
         */
      }
  }

  @Test
  public void test83()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      NumberInput numberInput0 = new NumberInput(errorPage0, "Y8[`Fz", "Y8[`Fz", "Y8[`Fz");
      ComponentCreator componentCreator0 = numberInput0.create();
      Label label0 = (Label)componentCreator0.p((Object) null);
      assertNotNull(label0);
      assertEquals("<p id=\"Label_1\"/>", label0.toString());
  }

  @Test
  public void test84()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Radio radio0 = new Radio(errorPage0, "", "");
      ComponentCreator componentCreator0 = radio0.create();
      Label label0 = (Label)componentCreator0.h1((Object) null);
      assertNotNull(label0);
      assertEquals("h1", label0.getTagName());
  }

  @Test
  public void test85()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Block block0 = (Block)componentCreator0.span();
      assertNotNull(block0);
      assertEquals("span", block0.getTagName());
  }

  @Test
  public void test86()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Block block0 = (Block)componentCreator0.fieldset();
      assertEquals("fieldset", block0.getTagName());
      assertNotNull(block0);
  }

  @Test
  public void test87()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Radio radio0 = new Radio(errorPage0, "AS_COMPLEX_PROPERTY", "AS_COMPLEX_PROPERTY");
      ComponentCreator componentCreator0 = radio0.create();
      Block block0 = (Block)componentCreator0.block((CharSequence) "text/html");
      assertEquals("<div id=\"Block_1\"class=\"text/html\"/>", block0.toString());
      assertNotNull(block0);
  }

  @Test
  public void test88()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "");
      ComponentCreator componentCreator0 = checkbox0.create();
      Block block0 = (Block)componentCreator0.small();
      assertEquals("<small id=\"Block_1\"/>", block0.toString());
      assertNotNull(block0);
  }

  @Test
  public void test89()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Label label0 = (Label)componentCreator0.acronym((Object) errorPage0);
      assertNotNull(label0);
      assertEquals("<acronym id=\"Label_1\"/>", label0.toString());
  }

  @Test
  public void test90()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Link link0 = (Link)componentCreator0.a((Object) null);
      assertEquals("a", link0.defaultTagName());
  }

  @Test
  public void test91()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      // Undeclared exception!
      try {
        componentCreator0.tr();
        fail("Expecting exception: WheelException");
      } catch(WheelException e) {
        /*
         * Tr component can be added only to a TableBlock.
         */
      }
  }

  @Test
  public void test92()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Block block0 = (Block)componentCreator0.noframes();
      assertNotNull(block0);
      assertEquals("body", block0.getTagName());
  }

  @Test
  public void test93()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      // Undeclared exception!
      try {
        componentCreator0.caption();
        fail("Expecting exception: WheelException");
      } catch(WheelException e) {
        /*
         * Thead component can be added only to a Table.
         */
      }
  }

  @Test
  public void test94()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Block block0 = (Block)componentCreator0.ul();
      assertEquals("ul", block0.getTagName());
      assertNotNull(block0);
  }

  @Test
  public void test95()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Block block0 = (Block)componentCreator0.q();
      assertNotNull(block0);
      assertEquals("<q id=\"Block_1\"/>", block0.toString());
  }

  @Test
  public void test96()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Any any0 = componentCreator0.wAny((CharSequence) "textarea");
      assertEquals("Any_1", any0.getComponentId());
  }

  @Test
  public void test97()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Block block0 = (Block)componentCreator0.blockquote();
      assertNotNull(block0);
      assertEquals("<blockquote id=\"Block_1\"/>", block0.toString());
  }

  @Test
  public void test98()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Block block0 = (Block)componentCreator0.big();
      assertEquals("<big id=\"Block_1\"/>", block0.toString());
      assertNotNull(block0);
  }

  @Test
  public void test99()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Block block0 = (Block)componentCreator0.sub();
      assertNotNull(block0);
      assertEquals("sub", block0.getTagName());
  }

  @Test
  public void test100()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Block block0 = (Block)componentCreator0.sup();
      assertNotNull(block0);
      assertEquals("sup", block0.getTagName());
  }

  @Test
  public void test101()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Block block0 = (Block)componentCreator0.b();
      assertNotNull(block0);
      assertEquals("b", block0.getTagName());
  }

  @Test
  public void test102()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Form form0 = componentCreator0.form("(Luj'2)B*?8zOhA~T");
      assertNotNull(form0);
      
      Submit submit0 = (Submit)form0.reset(".OC~<bLr\"b@og{");
      assertEquals("<input id=\".OC~<bLr\"b@og{\"type=\"reset\" />", submit0.toString());
      assertNotNull(submit0);
  }

  @Test
  public void test103()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Radio radio0 = new Radio(errorPage0, "AS_COMPLEX_PROPERTY", "AS_COMPLEX_PROPERTY");
      ComponentCreator componentCreator0 = radio0.create();
      // Undeclared exception!
      try {
        componentCreator0.colgroup();
        fail("Expecting exception: WheelException");
      } catch(WheelException e) {
        /*
         * Colgroup component can be added only to a Table.
         */
      }
  }

  @Test
  public void test104()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Label label0 = (Label)componentCreator0.sub((Object) null);
      assertNotNull(label0);
      assertEquals("<sub id=\"Label_1\"/>", label0.toString());
  }

  @Test
  public void test105()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Block block0 = (Block)componentCreator0.address();
      assertNotNull(block0);
      assertEquals("<address id=\"Block_1\"/>", block0.toString());
  }

  @Test
  public void test106()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Block block0 = (Block)componentCreator0.ol();
      assertEquals("<ol id=\"Block_1\"/>", block0.toString());
      assertNotNull(block0);
  }

  @Test
  public void test107()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = new ComponentCreator((Component) errorPage0);
      Label label0 = (Label)componentCreator0.em((Object) null);
      assertNotNull(label0);
      assertEquals("<em id=\"Label_1\"/>", label0.toString());
  }

  @Test
  public void test108()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Label label0 = (Label)componentCreator0.samp((Object) null);
      assertNotNull(label0);
      assertEquals("samp", label0.getTagName());
  }

  @Test
  public void test109()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      ComponentCreator componentCreator0 = xmlEntityRef0.create();
      // Undeclared exception!
      try {
        componentCreator0.col();
        fail("Expecting exception: WheelException");
      } catch(WheelException e) {
        /*
         * Col component can be added only to a TableBlock.
         */
      }
  }

  @Test
  public void test110()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Radio radio0 = new Radio(errorPage0, "AS_COMPLEX_PROPERTY", "AS_COMPLEX_PROPERTY");
      ComponentCreator componentCreator0 = radio0.create();
      Block block0 = (Block)componentCreator0.tt();
      assertEquals("tt", block0.getTagName());
      assertNotNull(block0);
  }

  @Test
  public void test111()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = new ComponentCreator((Component) errorPage0);
      Label label0 = (Label)componentCreator0.strike((Object) null);
      assertNotNull(label0);
      assertEquals("<strike id=\"Label_1\"/>", label0.toString());
  }

  @Test
  public void test112()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Block block0 = (Block)componentCreator0.object();
      assertNotNull(block0);
      assertEquals("object", block0.getTagName());
  }

  @Test
  public void test113()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DateInput dateInput0 = new DateInput(errorPage0, ">%og7wu", ">%og7wu", ">%og7wu");
      ComponentCreator componentCreator0 = dateInput0.create();
      Label label0 = (Label)componentCreator0.h4((Object) null);
      assertEquals("<h4 id=\"Label_1\"/>", label0.toString());
      assertNotNull(label0);
  }

  @Test
  public void test114()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Block block0 = (Block)componentCreator0.samp();
      assertNotNull(block0);
      assertEquals("samp", block0.getTagName());
  }

  @Test
  public void test115()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      NumberInput numberInput0 = new NumberInput(errorPage0, "Y8[`Fz", "Y8[`Fz", "Y8[`Fz");
      ComponentCreator componentCreator0 = numberInput0.create();
      Any any0 = (Any)componentCreator0.meta();
      assertEquals("<meta id=\"Any_1\"/>", any0.toString());
      assertNotNull(any0);
  }

  @Test
  public void test116()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Label label0 = (Label)componentCreator0.tt((Object) null);
      assertNotNull(label0);
      assertEquals("<tt id=\"Label_1\"/>", label0.toString());
  }

  @Test
  public void test117()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = new ComponentCreator((Component) errorPage0);
      Block block0 = (Block)componentCreator0.link();
      assertNotNull(block0);
      assertEquals("<link id=\"Block_1\"/>", block0.toString());
  }

  @Test
  public void test118()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Form form0 = (Form)errorPage0.form("IZ+Qra]o~\"Y@Tc");
      assertNotNull(form0);
      
      Table table0 = new Table(form0, "IZ+Qra]o~\"Y@Tc");
      TableBlock tableBlock0 = (TableBlock)table0.colgroup();
      ComponentCreator componentCreator0 = new ComponentCreator((Component) tableBlock0);
      Checkbox checkbox0 = componentCreator0.checkbox((String) null);
      assertNotNull(checkbox0);
      assertEquals("null", checkbox0.getComponentId());
  }

  @Test
  public void test119()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      // Undeclared exception!
      try {
        componentCreator0.checkbox("");
        fail("Expecting exception: WheelException");
      } catch(WheelException e) {
        /*
         * Form elements can be created only by compoents that are attached to a form component.
         */
      }
  }

  @Test
  public void test120()  throws Throwable  {
      NumberInput numberInput0 = new NumberInput((Component) null, "null", "null");
      ComponentCreator componentCreator0 = numberInput0.create();
      // Undeclared exception!
      try {
        componentCreator0.hidden("null");
        fail("Expecting exception: WheelException");
      } catch(WheelException e) {
        /*
         * Form elements can be created only by compoents that are attached to a form component.
         */
      }
  }

  @Test
  public void test121()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Form form0 = (Form)errorPage0.form("IZ+Qra]o~\"Y@Tc");
      assertNotNull(form0);
      
      Table table0 = new Table(form0, "IZ+Qra]o~\"Y@Tc");
      TableBlock tableBlock0 = (TableBlock)table0.colgroup();
      ComponentCreator componentCreator0 = new ComponentCreator((Component) tableBlock0);
      Hidden hidden0 = componentCreator0.hidden("Z[lm");
      assertNotNull(hidden0);
      
      Any any0 = new Any((Component) hidden0, (CharSequence) null);
      assertNotNull(any0);
      
      Radio radio0 = componentCreator0.radio("IZ+Qra]o~\"Y@Tc_J91o(5\"pof!k");
      assertNotNull(radio0);
      
      DynamicSelectModel dynamicSelectModel0 = radio0.selectModel();
      // Undeclared exception!
      try {
        any0.multiSelect("input", (ISelectModel) dynamicSelectModel0, (CharSequence) "Z[lm");
        fail("Expecting exception: WheelException");
      } catch(WheelException e) {
        /*
         * Could not create DynamicSelection model. Collection attribute was null or not an el-expression.
         */
      }
  }

  @Test
  public void test122()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      Table table0 = componentCreator0.table();
      DynamicSelectModel dynamicSelectModel0 = table0.selectModel();
      // Undeclared exception!
      try {
        componentCreator0.multiSelect((String) null, (ISelectModel) dynamicSelectModel0, (CharSequence) "(I)V");
        fail("Expecting exception: WheelException");
      } catch(WheelException e) {
        /*
         * Form elements can be created only by compoents that are attached to a form component.
         */
      }
  }

  @Test
  public void test123()  throws Throwable  {
      Select select0 = new Select((Component) null, "6j5.", "6j5.", (ISelectModel) null, "6j5.");
      ElExpression elExpression0 = select0.el("6j5.");
      CheckboxGroup checkboxGroup0 = new CheckboxGroup((Component) null, "6j5.", "6j5.", (ISelectModel) null, elExpression0);
      // Undeclared exception!
      try {
        checkboxGroup0.select("6j5.", (ISelectModel) null, (CharSequence) "6j5.");
        fail("Expecting exception: WheelException");
      } catch(WheelException e) {
        /*
         * Form elements can be created only by compoents that are attached to a form component.
         */
      }
  }

  @Test
  public void test124()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Form form0 = (Form)errorPage0.form("OC~<bLr\"b@og{");
      assertNotNull(form0);
      
      Image image0 = new Image(form0, "OC~<bLr\"b@og{", "OC~<bLr\"b@og{");
      NumberInput numberInput0 = new NumberInput(image0, "OC~<bLr\"b@og{", "OC~<bLr\"b@og{");
      ComponentCreator componentCreator0 = numberInput0.create();
      NumberInput numberInput1 = componentCreator0.numberInput("OC~<bLr\"b@og{", "OC~<bLr\"b@og{");
      assertEquals("OC~<bLr\"b@og{", numberInput1.getComponentId());
      assertNotNull(numberInput1);
  }

  @Test
  public void test125()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      ComponentCreator componentCreator0 = xmlEntityRef0.create();
      // Undeclared exception!
      try {
        componentCreator0.numberInput("", "");
        fail("Expecting exception: WheelException");
      } catch(WheelException e) {
        /*
         * Form elements can be created only by compoents that are attached to a form component.
         */
      }
  }

  @Test
  public void test126()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Form form0 = (Form)errorPage0.form("IZ+Qra]o~\"Y@Tc");
      assertNotNull(form0);
      
      Submit submit0 = new Submit(form0, "IZ+Qra]o~\"Y@Tc", "IZ+Qra]o~\"Y@Tc");
      ComponentCreator componentCreator0 = submit0.create();
      DateInput dateInput0 = componentCreator0.dateInput("J91o(5\"pof!k", (CharSequence) null);
      assertNotNull(dateInput0);
      assertEquals("J91o(5\"pof!k", dateInput0.getComponentId());
  }

  @Test
  public void test127()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      // Undeclared exception!
      try {
        componentCreator0.dateInput("`Lw+K}689Zd{iN<", "`Lw+K}689Zd{iN<");
        fail("Expecting exception: WheelException");
      } catch(WheelException e) {
        /*
         * Form elements can be created only by compoents that are attached to a form component.
         */
      }
  }

  @Test
  public void test128()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Form form0 = (Form)errorPage0.form("IZ+Qra]o~\"Y@Tc");
      assertNotNull(form0);
      
      Table table0 = new Table(form0, "IZ+Qra]o~\"Y@Tc");
      TableBlock tableBlock0 = (TableBlock)table0.colgroup();
      TableRow tableRow0 = (TableRow)tableBlock0.tr();
      ComponentCreator componentCreator0 = tableRow0.create();
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      Link link0 = new Link(errorPage0, "");
      ElExpression elExpression0 = link0.el("IZ+Qra]o~\"Y@Tc");
      CheckboxGroup checkboxGroup0 = componentCreator0.checkboxGroup("+rVn>m~N", (ISelectModel) stringSelectModel0, elExpression0);
      assertEquals("<input id=\"+rVn>m~N_container\"/>", checkboxGroup0.toString());
      assertEquals("+rVn>m~N", checkboxGroup0.getFormElementName());
      assertNotNull(checkboxGroup0);
  }

  @Test
  public void test129()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      DynamicSelectModel dynamicSelectModel0 = errorPage0.selectModel();
      // Undeclared exception!
      try {
        componentCreator0.checkboxGroup((String) null, (ISelectModel) dynamicSelectModel0, (ElExpression) null);
        fail("Expecting exception: WheelException");
      } catch(WheelException e) {
        /*
         * Form elements can be created only by compoents that are attached to a form component.
         */
      }
  }

  @Test
  public void test130()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Form form0 = (Form)errorPage0.form("OC~<bLr\"b@og{");
      assertNotNull(form0);
      
      Checkbox checkbox0 = new Checkbox(form0, "OC~<bLr\"b@og{", "OC~<bLr\"b@og{");
      ComponentCreator componentCreator0 = checkbox0.create();
      FileInput fileInput0 = componentCreator0.fileInput("OC~<bLr\"b@og{");
      assertNotNull(fileInput0);
      
      // Undeclared exception!
      try {
        fileInput0.textInput("OC~<bLr\"b@og{");
        fail("Expecting exception: WheelException");
      } catch(WheelException e) {
        /*
         * Can't add components to a component that is not an instance of IContainer.
         */
      }
  }

  @Test
  public void test131()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("!wsD\"v:k");
      DateInput dateInput0 = new DateInput(xmlEntityRef0, "!wsD\"v:k", "!wsD\"v:k", "!wsD\"v:k");
      // Undeclared exception!
      try {
        dateInput0.textInput("!wsD\"v:k");
        fail("Expecting exception: WheelException");
      } catch(WheelException e) {
        /*
         * Form elements can be created only by compoents that are attached to a form component.
         */
      }
  }

  @Test
  public void test132()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Form form0 = (Form)errorPage0.form("OC~<bLr\"b@og{");
      assertNotNull(form0);
      
      Checkbox checkbox0 = new Checkbox(form0, "OC~<bLr\"b@og{", "OC~<bLr\"b@og{");
      ComponentCreator componentCreator0 = checkbox0.create();
      TextInput textInput0 = componentCreator0.passwordInput("OC~<bLr\"b@og{");
      assertEquals("<input id=\"OC~<bLr\"b@og{\"type=\"password\" />", textInput0.toString());
      assertNotNull(textInput0);
  }

  @Test
  public void test133()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      NumberInput numberInput0 = new NumberInput(errorPage0, "Y8[`Fz", "Y8[`Fz", "Y8[`Fz");
      ComponentCreator componentCreator0 = numberInput0.create();
      // Undeclared exception!
      try {
        componentCreator0.passwordInput("C");
        fail("Expecting exception: WheelException");
      } catch(WheelException e) {
        /*
         * Form elements can be created only by compoents that are attached to a form component.
         */
      }
  }

  @Test
  public void test134()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      // Undeclared exception!
      try {
        tableBlock0.buttonInput("kT9}2x0%6DUw");
        fail("Expecting exception: WheelException");
      } catch(WheelException e) {
        /*
         * Form elements can be created only by compoents that are attached to a form component.
         */
      }
  }

  @Test
  public void test135()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "69j5", "69j5");
      // Undeclared exception!
      try {
        checkbox0.fileInput("69j5");
        fail("Expecting exception: WheelException");
      } catch(WheelException e) {
        /*
         * Form elements can be created only by compoents that are attached to a form component.
         */
      }
  }

  @Test
  public void test136()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Form form0 = (Form)errorPage0.form("OC~<bLr\"b@og{");
      assertNotNull(form0);
      
      Image image0 = new Image(form0, "OC~<bLr\"b@og{", "OC~<bLr\"b@og{");
      NumberInput numberInput0 = new NumberInput(image0, "OC~<bLr\"b@og{", "OC~<bLr\"b@og{");
      ComponentCreator componentCreator0 = numberInput0.create();
      TextArea textArea0 = componentCreator0.textarea("OC~<bLr\"b@og{");
      assertEquals("<textarea id=\"OC~<bLr\"b@og{\"/>", textArea0.toString());
      assertNotNull(textArea0);
  }

  @Test
  public void test137()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      NumberInput numberInput0 = new NumberInput(errorPage0, "[,QlWP$MeMCT?rniA", "[,QlWP$MeMCT?rniA");
      ComponentCreator componentCreator0 = numberInput0.create();
      // Undeclared exception!
      try {
        componentCreator0.textarea("[,QlWP$MeMCT?rniA");
        fail("Expecting exception: WheelException");
      } catch(WheelException e) {
        /*
         * Form elements can be created only by compoents that are attached to a form component.
         */
      }
  }

  @Test
  public void test138()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Form form0 = (Form)errorPage0.form("IZ+Qra]o~\"Y@Tc");
      assertNotNull(form0);
      
      Form form1 = (Form)errorPage0.form("IZ+Qra]o~\"Y@Tc");
      assertNotNull(form1);
      assertNotSame(form1, form0);
  }

  @Test
  public void test139()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Submit submit0 = new Submit(errorPage0, "08WD#vOq./c0", "08WD#vOq./c0");
      ComponentCreator componentCreator0 = submit0.create();
      // Undeclared exception!
      try {
        componentCreator0.radio("08WD#vOq./c0");
        fail("Expecting exception: WheelException");
      } catch(WheelException e) {
        /*
         * Form elements can be created only by compoents that are attached to a form component.
         */
      }
  }

  @Test
  public void test140()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Form form0 = (Form)errorPage0.form("OC~<bLr\"b@og{");
      assertNotNull(form0);
      
      DateInput dateInput0 = new DateInput(form0, "OC~<bLr\"b@og{", "OC~<bLr\"b@og{", "OC~<bLr\"b@og{");
      ComponentCreator componentCreator0 = dateInput0.create();
      TextArea textArea0 = new TextArea((Component) form0, (String) null, "OC~<bLr\"b@og{");
      DynamicSelectModel dynamicSelectModel0 = textArea0.selectModel();
      TextInput textInput0 = componentCreator0.buttonInput("OC~<bLr\"b@og{");
      assertNotNull(textInput0);
      
      ElExpression elExpression0 = textInput0.el("OC~<bLr\"b@og{");
      // Undeclared exception!
      try {
        componentCreator0.radioGroup((String) null, (ISelectModel) dynamicSelectModel0, elExpression0);
        fail("Expecting exception: WheelException");
      } catch(WheelException e) {
        /*
         * Could not create DynamicSelection model. Collection attribute was null or not an el-expression.
         */
      }
  }

  @Test
  public void test141()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DateInput dateInput0 = new DateInput(errorPage0, ">%og7wu", ">%og7wu", ">%og7wu");
      ComponentCreator componentCreator0 = dateInput0.create();
      ElExpression elExpression0 = new ElExpression("[,QlWP$MeMCT?rniA");
      // Undeclared exception!
      try {
        componentCreator0.radioGroup("Any_2", (ISelectModel) null, elExpression0);
        fail("Expecting exception: WheelException");
      } catch(WheelException e) {
        /*
         * Form elements can be created only by compoents that are attached to a form component.
         */
      }
  }

  @Test
  public void test142()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("(lqlLb'iLL6Pe");
      ComponentCreator componentCreator0 = xmlEntityRef0.create();
      // Undeclared exception!
      try {
        componentCreator0.submit("(lqlLb'iLL6Pe");
        fail("Expecting exception: WheelException");
      } catch(WheelException e) {
        /*
         * Form elements can be created only by compoents that are attached to a form component.
         */
      }
  }

  @Test
  public void test143()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Form form0 = (Form)errorPage0.form("IZ+Qra]o~\"Y@Tc");
      assertNotNull(form0);
      
      Table table0 = new Table(form0, "IZ+Qra]o~\"Y@Tc");
      TableBlock tableBlock0 = (TableBlock)table0.colgroup();
      TableRow tableRow0 = (TableRow)tableBlock0.tr();
      ComponentCreator componentCreator0 = tableRow0.create();
      Submit submit0 = componentCreator0.imageSubmit("Z[lm", (String) null);
      assertNotNull(submit0);
      assertEquals("<input id=\"Z[lm\"src=\"null\" type=\"image\" />", submit0.toString());
  }

  @Test
  public void test144()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = new ComponentCreator((Component) errorPage0);
      // Undeclared exception!
      try {
        componentCreator0.imageSubmit((String) null, (String) null);
        fail("Expecting exception: WheelException");
      } catch(WheelException e) {
        /*
         * Form elements can be created only by compoents that are attached to a form component.
         */
      }
  }

  @Test
  public void test145()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ComponentCreator componentCreator0 = errorPage0.create();
      // Undeclared exception!
      try {
        componentCreator0.reset((String) null);
        fail("Expecting exception: WheelException");
      } catch(WheelException e) {
        /*
         * Form elements can be created only by compoents that are attached to a form component.
         */
      }
  }
}
