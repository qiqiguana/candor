/*
 * This file was automatically generated by EvoSuite
 */

package wheel.components;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import org.junit.BeforeClass;
import org.xmlpull.mxp1_serializer.MXSerializer;
import org.xmlpull.v1.XmlSerializer;
import wheel.WheelException;
import wheel.components.Checkbox;
import wheel.components.Component;

@RunWith(EvoSuiteRunner.class)
public class CheckboxEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "JIT doesxno& yet support <o[d opUrxtionHL", "JIT doesxno& yet support <o[d opUrxtionHL");
      checkbox0.fieldBinding("JIT doesxno& yet support <o[d opUrxtionHL");
      // Undeclared exception!
      try {
        checkbox0.renderComponent((XmlSerializer) null);
        fail("Expecting exception: WheelException");
      } catch(WheelException e) {
        /*
         * No top level component found.
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "kRu", "kRu");
      Checkbox checkbox1 = (Checkbox)checkbox0.value("kRu");
      assertEquals("<input id=\"kRu\"type=\"checkbox\" />", checkbox0.toString());
      assertEquals("<input id=\"kRu\"type=\"checkbox\" />", checkbox1.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "kRu", "kRu");
      String string0 = checkbox0.toString();
      assertEquals("<input id=\"kRu\"type=\"checkbox\" />", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "kRu", "kRu");
      String string0 = checkbox0.defaultDomEvent();
      assertEquals("<input id=\"kRu\"type=\"checkbox\" />", checkbox0.toString());
      assertEquals("onclick", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "g", "g");
      MXSerializer mXSerializer0 = new MXSerializer();
      // Undeclared exception!
      try {
        checkbox0.renderComponent((XmlSerializer) mXSerializer0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * startTag() must be called before attribute()
         */
      }
  }
}
