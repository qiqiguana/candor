/*
 * This file was automatically generated by EvoSuite
 */

package wheel.components;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import org.junit.BeforeClass;
import org.xmlpull.mxp1_serializer.MXSerializer;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlSerializer;
import org.xmlpull.v1.wrapper.XmlPullWrapperFactory;
import org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper;
import wheel.ErrorPage;
import wheel.components.Component;
import wheel.components.NumberInput;
import wheel.components.TextInput;

@RunWith(EvoSuiteRunner.class)
public class NumberInputEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      NumberInput numberInput0 = new NumberInput((Component) errorPage0, "", "");
      String string0 = numberInput0.toString();
      assertEquals("<input id=\"NumberInput_1\"type=\"text\" />", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      NumberInput numberInput0 = new NumberInput((Component) null, "[B$>L", "[B$>L", (CharSequence) "[B$>L");
      assertNotNull(numberInput0);
      
      String[] stringArray0 = new String[10];
      stringArray0[0] = "&his appender no longer admits a layout as a sub-component, set an encoder instead.";
      numberInput0._setSubmitValue(stringArray0);
      assertEquals(false, numberInput0.isEmpty());
      assertEquals("&hisappendernolongeradmitsalayoutasasub-component.setanencoderinstead.", numberInput0._getSubmitValue());
  }

  @Test
  public void test2()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "Could not find an appender named [", "Could not find an appender named [");
      NumberInput numberInput0 = new NumberInput((Component) textInput0, "Could not find an appender named [", "Could not find an appender named [");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Could not find an appender named [";
      numberInput0._setSubmitValue(stringArray0);
      assertEquals(false, numberInput0.isEmpty());
      assertEquals("Couldnotfindanappendernamed[", numberInput0._getSubmitValue());
  }

  @Test
  public void test3()  throws Throwable  {
      NumberInput numberInput0 = new NumberInput((Component) null, "@h,xr3N7xKN!", "@h,xr3N7xKN!");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "@h,xr3N7xKN!";
      numberInput0._setSubmitValue(stringArray0);
      assertEquals(false, numberInput0.isEmpty());
      assertEquals("@h.xr3N7xKN!", numberInput0._getSubmitValue());
  }

  @Test
  public void test4()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      NumberInput numberInput0 = new NumberInput((Component) errorPage0, "t)&])agp^gik", "t)&])agp^gik");
      MXSerializer mXSerializer0 = new MXSerializer();
      numberInput0.addValidationError("t)&])agp^gik");
      XmlPullWrapperFactory xmlPullWrapperFactory0 = XmlPullWrapperFactory.newInstance();
      StaticXmlSerializerWrapper staticXmlSerializerWrapper0 = new StaticXmlSerializerWrapper((XmlSerializer) mXSerializer0, xmlPullWrapperFactory0);
      // Undeclared exception!
      try {
        numberInput0.renderComponent((XmlSerializer) staticXmlSerializerWrapper0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      NumberInput numberInput0 = new NumberInput((Component) errorPage0, "", "");
      MXSerializer mXSerializer0 = new MXSerializer();
      XmlPullWrapperFactory xmlPullWrapperFactory0 = XmlPullWrapperFactory.newInstance();
      StaticXmlSerializerWrapper staticXmlSerializerWrapper0 = new StaticXmlSerializerWrapper((XmlSerializer) mXSerializer0, xmlPullWrapperFactory0);
      // Undeclared exception!
      try {
        numberInput0.renderComponent((XmlSerializer) staticXmlSerializerWrapper0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * startTag() must be called before attribute()
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      NumberInput numberInput0 = new NumberInput((Component) errorPage0, "", "");
      numberInput0._applyFormat((Object) "");
      assertEquals("<input id=\"NumberInput_1\"type=\"text\" />", numberInput0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      NumberInput numberInput0 = new NumberInput((Component) null, "mttK_yf<Rcir", "mttK_yf<Rcir", (CharSequence) "mttK_yf<Rcir");
      assertNotNull(numberInput0);
      
      String string0 = numberInput0._applyFormat((Object) "http://xmlpull.org/v1/doc/features.html#validation");
      assertEquals("<input id=\"mttK_yf<Rcir\"type=\"text\" />", numberInput0.toString());
      assertNotNull(string0);
  }
}
