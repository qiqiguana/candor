/*
 * This file was automatically generated by EvoSuite
 */

package wheel.components;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import ch.qos.logback.classic.pattern.DateConverter;
import java.io.IOException;
import java.util.List;
import org.junit.BeforeClass;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlPullParserFactory;
import org.xmlpull.v1.XmlSerializer;
import org.xmlpull.v1.wrapper.XmlPullWrapperFactory;
import org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper;
import wheel.ErrorPage;
import wheel.WheelException;
import wheel.components.Block;
import wheel.components.Checkbox;
import wheel.components.CheckboxGroup;
import wheel.components.Component;
import wheel.components.DateInput;
import wheel.components.ElExpression;
import wheel.components.FileInput;
import wheel.components.ISelectModel;
import wheel.components.Image;
import wheel.components.Label;
import wheel.components.NumberInput;
import wheel.components.Radio;
import wheel.components.RadioGroup;
import wheel.components.Submit;
import wheel.components.TextArea;
import wheel.components.TextInput;
import wheel.components.ValidationError;
import wheel.components.XmlEntityRef;
import wheel.util.DynamicSelectModel;

@RunWith(EvoSuiteRunner.class)
public class FormElementEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Radio radio0 = new Radio(errorPage0, "", "");
      // Undeclared exception!
      try {
        radio0.required();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "').focu()!U;", "').focu()!U;");
      NumberInput numberInput0 = new NumberInput(textInput0, "').focu()!U;", "').focu()!U;");
      String string0 = numberInput0.defaultDomEvent();
      assertEquals("onchange", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "').focu()!U;", "').focu()!U;");
      textInput0.fieldBinding("').focu()!U;");
      // Undeclared exception!
      try {
        textInput0.initialFieldValue("').focu()!U;");
        fail("Expecting exception: WheelException");
      } catch(WheelException e) {
        /*
         * No top level component found.
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DateInput dateInput0 = new DateInput(errorPage0, "", "", "");
      // Undeclared exception!
      try {
        dateInput0.isInt();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, "optMgooup", "optMgooup");
      ElExpression elExpression0 = radio0.el("optMgooup");
      RadioGroup radioGroup0 = new RadioGroup((Component) null, "optMgooup", "optMgooup", (ISelectModel) null, elExpression0);
      // Undeclared exception!
      try {
        radioGroup0._getSubmitValue();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      Submit submit0 = new Submit((Component) null, "TU4{|H|y0P", "TU4{|H|y0P");
      ElExpression elExpression0 = submit0.el("TU4{|H|y0P");
      CheckboxGroup checkboxGroup0 = new CheckboxGroup((Component) null, "TU4{|H|y0P", "TU4{|H|y0P", (ISelectModel) null, elExpression0);
      Class<?> class0 = DateConverter.class;
      XmlPullParserFactory xmlPullParserFactory0 = XmlPullParserFactory.newInstance("TU4{|H|y0P", (Class) class0);
      XmlPullWrapperFactory xmlPullWrapperFactory0 = XmlPullWrapperFactory.newInstance(xmlPullParserFactory0);
      StaticXmlSerializerWrapper staticXmlSerializerWrapper0 = new StaticXmlSerializerWrapper((XmlSerializer) null, xmlPullWrapperFactory0);
      // Undeclared exception!
      try {
        checkboxGroup0._render((XmlSerializer) staticXmlSerializerWrapper0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "qgd", "qgd");
      FileInput fileInput0 = new FileInput(textArea0, "qgd", "qgd");
      boolean boolean0 = fileInput0.isComplex();
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "eaou", "eaou");
      String[] stringArray0 = checkbox0._getSubmitValues();
      assertNull(stringArray0);
  }

  @Test
  public void test8()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "%$8v4", "%$8v4");
      // Undeclared exception!
      try {
        fileInput0.value("%$8v4");
        fail("Expecting exception: WheelException");
      } catch(WheelException e) {
        /*
         * This form element cannot be bound to a literal value.
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "qgd", "qgd");
      FileInput fileInput0 = new FileInput(textArea0, "qgd", "qgd");
      FileInput fileInput1 = (FileInput)fileInput0.setFormElementName("qgd");
      assertEquals("input", fileInput1.getTagName());
  }

  @Test
  public void test10()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "()F", "()F");
      // Undeclared exception!
      try {
        textInput0.label("()F");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Radio radio0 = new Radio(errorPage0, "formattedMessage", "formattedMessage");
      radio0.validationRule("formattedMessage");
      Radio radio1 = (Radio)radio0.validationRule("formattedMessage", "formattedMessage");
      assertEquals(true, radio0.isComplex());
      assertEquals(true, radio1.isComplex());
  }

  @Test
  public void test12()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "eaou", "eaou");
      Checkbox checkbox1 = (Checkbox)checkbox0.validationRule("eaou", "eaou");
      assertNotNull(checkbox1);
      
      Checkbox checkbox2 = (Checkbox)checkbox0.validationRule("eaou");
      assertEquals(false, checkbox0.isComplex());
      assertNotNull(checkbox2);
      assertEquals(false, checkbox2.isComplex());
  }

  @Test
  public void test13()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = errorPage0.placeholder("");
      Checkbox checkbox0 = new Checkbox(block0, "", "");
      NumberInput numberInput0 = new NumberInput(block0, "", "");
      Label label0 = new Label((Component) block0, (Object) "Radio");
      DynamicSelectModel dynamicSelectModel0 = label0.selectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration("");
      Image image0 = new Image(block0, "Radio", "");
      ElExpression elExpression0 = image0.el("Radio");
      CheckboxGroup checkboxGroup0 = new CheckboxGroup(checkbox0, "", "", dynamicSelectModel1, elExpression0);
      CheckboxGroup checkboxGroup1 = (CheckboxGroup)checkboxGroup0.initialFieldValue("Radio", (Object) numberInput0);
      assertEquals("CheckboxGroup_1", checkboxGroup1.getComponentId());
  }

  @Test
  public void test14()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Radio radio0 = new Radio(errorPage0, "formattedMessage", "formattedMessage");
      StringBuilder stringBuilder0 = new StringBuilder(1);
      radio0.serialize(stringBuilder0);
      assertEquals("formattedMessage$$Radio$$", stringBuilder0.toString());
  }

  @Test
  public void test15()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("true");
      FileInput fileInput0 = new FileInput(xmlEntityRef0, "true", "true");
      boolean boolean0 = fileInput0.isEmpty();
      assertEquals(true, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = errorPage0.placeholder("");
      NumberInput numberInput0 = new NumberInput(block0, "", "");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      numberInput0._setSubmitValue(stringArray0);
      assertEquals(true, numberInput0.isEmpty());
      assertEquals(true, numberInput0.isValid());
  }

  @Test
  public void test17()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "ptgrp", "ptgrp");
      Checkbox checkbox0 = new Checkbox(textInput0, "ptgrp", "ptgrp");
      String[] stringArray0 = new String[1];
      checkbox0._setSubmitValue(stringArray0);
      assertEquals(true, checkbox0.isEmpty());
      assertEquals(true, checkbox0.isValid());
      assertEquals(true, textInput0.isEmpty());
  }

  @Test
  public void test18()  throws Throwable  {
      NumberInput numberInput0 = new NumberInput((Component) null, "optMgooup", "optMgooup");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "optMgooup";
      numberInput0._setSubmitValue(stringArray0);
      assertEquals(false, numberInput0.isEmpty());
  }

  @Test
  public void test19()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea((Component) errorPage0, "}", "}");
      textArea0.addValidationError("}");
      String[] stringArray0 = new String[3];
      textArea0._setSubmitValue(stringArray0);
      assertEquals(false, textArea0.isValid());
  }

  @Test
  public void test20()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "eaou", "eaou");
      TextArea textArea0 = new TextArea((Component) checkbox0, "eaou", "eaou");
      List<ValidationError> list0 = textArea0.getErrors();
      assertEquals(0, list0.size());
  }

  @Test
  public void test21()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = errorPage0.placeholder("");
      NumberInput numberInput0 = new NumberInput(block0, "", "");
      numberInput0.addRenderBefore((Component) block0);
      numberInput0._clear();
      assertEquals("input", numberInput0.defaultTagName());
  }

  @Test
  public void test22()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = errorPage0.placeholder("");
      NumberInput numberInput0 = new NumberInput(block0, "", "");
      numberInput0.addRenderAfter((Component) errorPage0);
      numberInput0._clear();
      assertEquals("<input id=\"NumberInput_1\"type=\"text\" />", numberInput0.toString());
  }

  @Test
  public void test23()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("true");
      FileInput fileInput0 = new FileInput(xmlEntityRef0, "true", "true");
      // Undeclared exception!
      try {
        fileInput0.initialFieldValue("true");
        fail("Expecting exception: WheelException");
      } catch(WheelException e) {
        /*
         * Initial field value can only be set for a bound field element.
         */
      }
  }

  @Test
  public void test24()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "ptgrp", "ptgrp");
      // Undeclared exception!
      try {
        textInput0.initialFieldValue("ptgrp", "ptgrp");
        fail("Expecting exception: WheelException");
      } catch(WheelException e) {
        /*
         * Initial field value can only be set for a bound field element.
         */
      }
  }

  @Test
  public void test25()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea((Component) errorPage0, "}", "}");
      TextArea textArea1 = (TextArea)textArea0.addValidationError("}");
      textArea1.addValidationError("}");
      assertEquals(false, textArea0.isValid());
  }

  @Test
  public void test26()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Radio radio0 = new Radio(errorPage0, "formattedMessage", "formattedMessage");
      radio0.validationRule("formattedMessage");
      StringBuilder stringBuilder0 = new StringBuilder(1);
      radio0.serialize(stringBuilder0);
      assertEquals(true, radio0.isComplex());
      assertEquals("formattedMessage$$Radio$$$$formattedMessage$$ $$", stringBuilder0.toString());
  }

  @Test
  public void test27()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Radio radio0 = new Radio(errorPage0, "formattedMessage", "formattedMessage");
      StringBuilder stringBuilder0 = new StringBuilder(1);
      radio0.validationRule("formattedMessage", "formattedMessage");
      radio0.serialize(stringBuilder0);
      assertEquals(true, radio0.isComplex());
      assertEquals("formattedMessage$$Radio$$$$formattedMessage$$formattedMessage$$", stringBuilder0.toString());
  }
}
