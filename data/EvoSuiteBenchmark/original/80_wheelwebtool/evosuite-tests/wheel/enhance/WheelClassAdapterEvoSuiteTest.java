/*
 * This file was automatically generated by EvoSuite
 */

package wheel.enhance;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.junit.BeforeClass;
import wheel.asm.ClassAdapter;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;
import wheel.asm.Opcodes;
import wheel.enhance.WheelAnnotatedField;
import wheel.enhance.WheelClassAdapter;
import wheel.enhance.WheelClassLoader;
import wheel.enhance.WheelFieldVisitor;

@RunWith(EvoSuiteRunner.class)
public class WheelClassAdapterEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(168);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      WheelClassLoader wheelClassLoader0 = new WheelClassLoader(classLoader0);
      WheelClassAdapter wheelClassAdapter0 = new WheelClassAdapter((ClassVisitor) classWriter0, (Set<String>) linkedHashSet0, wheelClassLoader0);
      List<WheelAnnotatedField> list0 = wheelClassAdapter0.getPersistentFields();
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test1()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-9));
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      WheelClassLoader wheelClassLoader0 = new WheelClassLoader(classLoader0);
      WheelClassAdapter wheelClassAdapter0 = new WheelClassAdapter((ClassVisitor) classWriter0, (Set<String>) null, wheelClassLoader0);
      wheelClassAdapter0.visitSource("Sostem", "Sostem");
  }

  @Test
  public void test2()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1970);
      ClassAdapter classAdapter0 = new ClassAdapter((ClassVisitor) classWriter0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      WheelClassLoader wheelClassLoader0 = new WheelClassLoader(classLoader0);
      Set<String> set0 = wheelClassLoader0.getActionRegistry();
      WheelClassAdapter wheelClassAdapter0 = new WheelClassAdapter((ClassVisitor) classAdapter0, set0, wheelClassLoader0);
      Integer integer0 = Opcodes.DOUBLE;
      WheelFieldVisitor wheelFieldVisitor0 = (WheelFieldVisitor)wheelClassAdapter0.visitField(1970, "B#R4(p5X5xBs]p", "B#R4(p5X5xBs]p", "B#R4(p5X5xBs]p", (Object) integer0);
      assertNotNull(wheelFieldVisitor0);
  }

  @Test
  public void test3()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1953);
      ClassAdapter classAdapter0 = new ClassAdapter((ClassVisitor) classWriter0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      WheelClassLoader wheelClassLoader0 = new WheelClassLoader(classLoader0);
      Set<String> set0 = wheelClassLoader0.getActionRegistry();
      WheelClassAdapter wheelClassAdapter0 = new WheelClassAdapter((ClassVisitor) classAdapter0, set0, wheelClassLoader0);
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try {
        wheelClassAdapter0.visitMethod(1953, "'V", "'V", "'V", stringArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1970);
      ClassAdapter classAdapter0 = new ClassAdapter((ClassVisitor) classWriter0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      WheelClassLoader wheelClassLoader0 = new WheelClassLoader(classLoader0);
      Set<String> set0 = wheelClassLoader0.getActionRegistry();
      WheelClassAdapter wheelClassAdapter0 = new WheelClassAdapter((ClassVisitor) classAdapter0, set0, wheelClassLoader0);
      wheelClassAdapter0.visitEnd();
  }
}
