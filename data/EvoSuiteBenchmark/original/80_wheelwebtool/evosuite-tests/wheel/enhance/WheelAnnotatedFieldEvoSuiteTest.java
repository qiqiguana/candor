/*
 * This file was automatically generated by EvoSuite
 */

package wheel.enhance;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import wheel.asm.Label;
import wheel.enhance.WheelAnnotatedField;
import wheel.persistence.Scope;

@RunWith(EvoSuiteRunner.class)
public class WheelAnnotatedFieldEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Scope scope0 = Scope.page;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("LB *Q ", "LB *Q ", "LB *Q ", scope0);
      wheelAnnotatedField0.isGetterAvailable();
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals(Scope.page, wheelAnnotatedField0.getScope());
  }

  @Test
  public void test1()  throws Throwable  {
      Scope scope0 = Scope.global;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("J", "J", "J", scope0);
      int int0 = wheelAnnotatedField0.getLocalVarIndex();
      assertEquals(Scope.global, wheelAnnotatedField0.getScope());
      assertEquals((-1), int0);
  }

  @Test
  public void test2()  throws Throwable  {
      Scope scope0 = Scope.global;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("J", "J", "J", scope0);
      wheelAnnotatedField0.setGetterAvailable(true);
      assertEquals(true, wheelAnnotatedField0.isGetterAvailable());
  }

  @Test
  public void test3()  throws Throwable  {
      Scope scope0 = Scope.request;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("S", "S", "S", scope0);
      wheelAnnotatedField0.setLocalVarIndex(54);
      assertEquals(54, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals(Scope.request, wheelAnnotatedField0.getScope());
  }

  @Test
  public void test4()  throws Throwable  {
      Scope scope0 = Scope.page;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("LB *Q ", "LB *Q ", "LB *Q ", scope0);
      assertEquals(Scope.page, wheelAnnotatedField0.getScope());
      
      wheelAnnotatedField0.setScope(scope0);
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
  }

  @Test
  public void test5()  throws Throwable  {
      Scope scope0 = Scope.component;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("D", "D", "", scope0);
      wheelAnnotatedField0.getStartLabel();
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals("D", wheelAnnotatedField0.getName());
      assertEquals(Scope.component, wheelAnnotatedField0.getScope());
      assertEquals("", wheelAnnotatedField0.getSignature());
      assertEquals("D", wheelAnnotatedField0.getClassName());
  }

  @Test
  public void test6()  throws Throwable  {
      Scope scope0 = Scope.request;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("}", "", "}", scope0);
      wheelAnnotatedField0.setOwnerClassName("}");
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals("}", wheelAnnotatedField0.getSignature());
      assertEquals("}", wheelAnnotatedField0.getName());
      assertEquals("", wheelAnnotatedField0.getClassName());
      assertEquals(Scope.request, wheelAnnotatedField0.getScope());
  }

  @Test
  public void test7()  throws Throwable  {
      Scope scope0 = Scope.page;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("F", "F", "F", scope0);
      wheelAnnotatedField0.setStartLabel((Label) null);
      assertEquals(Scope.page, wheelAnnotatedField0.getScope());
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
  }

  @Test
  public void test8()  throws Throwable  {
      Scope scope0 = Scope.component;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("Z", "Z", "Z", scope0);
      wheelAnnotatedField0.getOwnerClassName();
      assertEquals(Scope.component, wheelAnnotatedField0.getScope());
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
  }

  @Test
  public void test9()  throws Throwable  {
      Scope scope0 = Scope.session;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("C", "C", "C", scope0);
      wheelAnnotatedField0.setSetterAvailable(false);
      assertEquals(false, wheelAnnotatedField0.isSetterAvailable());
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
  }

  @Test
  public void test10()  throws Throwable  {
      Scope scope0 = Scope.page;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("Z", "Z", "Z", scope0);
      Scope scope1 = wheelAnnotatedField0.getScope();
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals(Scope.page, scope1);
  }

  @Test
  public void test11()  throws Throwable  {
      Scope scope0 = Scope.page;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("LB *Q ", "LB *Q ", "LB *Q ", scope0);
      String string0 = wheelAnnotatedField0.getDesc();
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertNotNull(string0);
      assertEquals(Scope.page, wheelAnnotatedField0.getScope());
  }

  @Test
  public void test12()  throws Throwable  {
      Scope scope0 = Scope.component;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("", "67ihEhEEs\"ogt^v8Q", "", scope0);
      String string0 = wheelAnnotatedField0.getSignature();
      assertEquals("", wheelAnnotatedField0.getName());
      assertEquals(Scope.component, wheelAnnotatedField0.getScope());
      assertEquals("", string0);
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertNotNull(string0);
      assertEquals("67ihEhEEs\"ogt^v8Q", wheelAnnotatedField0.getDesc());
  }

  @Test
  public void test13()  throws Throwable  {
      Scope scope0 = Scope.page;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("F", "F", "F", scope0);
      wheelAnnotatedField0.isSetterAvailable();
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals(Scope.page, wheelAnnotatedField0.getScope());
  }

  @Test
  public void test14()  throws Throwable  {
      Scope scope0 = Scope.session;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("67ihEhEEs\"ogt^v8Q", "D", "D", scope0);
      String string0 = wheelAnnotatedField0.getName();
      assertEquals("D", wheelAnnotatedField0.getSignature());
      assertNotNull(string0);
      assertEquals("67ihEhEEs\"ogt^v8Q", string0);
      assertEquals(true, wheelAnnotatedField0.isWideNativeType());
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
  }

  @Test
  public void test15()  throws Throwable  {
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField((String) null, (String) null, (String) null, (Scope) null);
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
  }

  @Test
  public void test16()  throws Throwable  {
      Scope scope0 = Scope.page;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("Z", "Z", "Z", scope0);
      String string0 = wheelAnnotatedField0.getGetterName();
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals(Scope.page, wheelAnnotatedField0.getScope());
      assertNotNull(string0);
      assertEquals("isZ", string0);
  }

  @Test
  public void test17()  throws Throwable  {
      Scope scope0 = Scope.page;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("LB *Q ", "LB *Q ", "LB *Q ", scope0);
      boolean boolean0 = wheelAnnotatedField0.isGetterOrSetterForThisField("setLB *Q ");
      assertEquals(true, wheelAnnotatedField0.isSetterAvailable());
      assertEquals(true, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      Scope scope0 = Scope.session;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("C", "C", "C", scope0);
      boolean boolean0 = wheelAnnotatedField0.isGetterOrSetterForThisField("getC");
      assertEquals(true, wheelAnnotatedField0.isGetterAvailable());
      assertEquals(true, boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      Scope scope0 = Scope.request;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("}", "", "}", scope0);
      boolean boolean0 = wheelAnnotatedField0.isGetterOrSetterForThisField("}");
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals("}", wheelAnnotatedField0.getSignature());
      assertEquals("get}", wheelAnnotatedField0.getGetterName());
      assertEquals(Scope.request, wheelAnnotatedField0.getScope());
      assertEquals("set}", wheelAnnotatedField0.getSetterName());
      assertEquals("}", wheelAnnotatedField0.getName());
      assertEquals("", wheelAnnotatedField0.getWrapperType());
      assertEquals(false, boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      Scope scope0 = Scope.global;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("I", "I", "I", scope0);
      int int0 = wheelAnnotatedField0.getLoadOpcode();
      assertEquals(21, int0);
      assertEquals(Scope.global, wheelAnnotatedField0.getScope());
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
  }

  @Test
  public void test21()  throws Throwable  {
      Scope scope0 = Scope.page;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("F", "F", "F", scope0);
      int int0 = wheelAnnotatedField0.getLoadOpcode();
      assertEquals(Scope.page, wheelAnnotatedField0.getScope());
      assertEquals(23, int0);
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
  }

  @Test
  public void test22()  throws Throwable  {
      Scope scope0 = Scope.session;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("C", "C", "C", scope0);
      int int0 = wheelAnnotatedField0.getLoadOpcode();
      assertEquals(21, int0);
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
  }

  @Test
  public void test23()  throws Throwable  {
      Scope scope0 = Scope.request;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("S", "S", "S", scope0);
      int int0 = wheelAnnotatedField0.getLoadOpcode();
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals(Scope.request, wheelAnnotatedField0.getScope());
      assertEquals(21, int0);
  }

  @Test
  public void test24()  throws Throwable  {
      Scope scope0 = Scope.page;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("Z", "Z", "Z", scope0);
      int int0 = wheelAnnotatedField0.getLoadOpcode();
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals(21, int0);
      assertEquals(Scope.page, wheelAnnotatedField0.getScope());
  }

  @Test
  public void test25()  throws Throwable  {
      Scope scope0 = Scope.session;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("B", "B", "B", scope0);
      int int0 = wheelAnnotatedField0.getLoadOpcode();
      assertEquals(21, int0);
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
  }

  @Test
  public void test26()  throws Throwable  {
      Scope scope0 = Scope.page;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("", "J", "J", scope0);
      int int0 = wheelAnnotatedField0.getLoadOpcode();
      assertEquals(22, int0);
      assertEquals("J", wheelAnnotatedField0.getSignature());
      assertEquals(Scope.page, wheelAnnotatedField0.getScope());
      assertEquals("", wheelAnnotatedField0.getName());
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals("Ljava/lang/Long;", wheelAnnotatedField0.getWrapperTypeInternal());
  }

  @Test
  public void test27()  throws Throwable  {
      Scope scope0 = Scope.page;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("LB *Q ", "LB *Q ", "LB *Q ", scope0);
      int int0 = wheelAnnotatedField0.getLoadOpcode();
      assertEquals(Scope.page, wheelAnnotatedField0.getScope());
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals(25, int0);
  }

  @Test
  public void test28()  throws Throwable  {
      Scope scope0 = Scope.session;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("67ihEhEEs\"ogt^v8Q", "D", "D", scope0);
      int int0 = wheelAnnotatedField0.getLoadOpcode();
      assertEquals(24, int0);
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals("Ljava/lang/Double;", wheelAnnotatedField0.getWrapperTypeInternal());
      assertEquals("set67ihEhEEs\"ogt^v8Q", wheelAnnotatedField0.getSetterName());
      assertEquals("D", wheelAnnotatedField0.getSignature());
  }

  @Test
  public void test29()  throws Throwable  {
      Scope scope0 = Scope.request;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("", "", "", scope0);
      // Undeclared exception!
      try {
        wheelAnnotatedField0.getLoadOpcode();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Field description is of unknown type.
         */
      }
  }

  @Test
  public void test30()  throws Throwable  {
      Scope scope0 = Scope.request;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("QG", "[doubleValue", "QG", scope0);
      int int0 = wheelAnnotatedField0.getLoadOpcode();
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals(Scope.request, wheelAnnotatedField0.getScope());
      assertEquals(25, int0);
      assertEquals("getQG", wheelAnnotatedField0.getGetterName());
      assertEquals("doubleValu", wheelAnnotatedField0.getClassName());
      assertEquals("QG", wheelAnnotatedField0.getSignature());
  }

  @Test
  public void test31()  throws Throwable  {
      Scope scope0 = Scope.session;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("I", "I", "I", scope0);
      int int0 = wheelAnnotatedField0.getStoreOpcode();
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals(54, int0);
  }

  @Test
  public void test32()  throws Throwable  {
      Scope scope0 = Scope.global;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("J", "J", "J", scope0);
      int int0 = wheelAnnotatedField0.getStoreOpcode();
      assertEquals(55, int0);
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals(Scope.global, wheelAnnotatedField0.getScope());
  }

  @Test
  public void test33()  throws Throwable  {
      Scope scope0 = Scope.session;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("C", "C", "C", scope0);
      int int0 = wheelAnnotatedField0.getStoreOpcode();
      assertEquals(54, int0);
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
  }

  @Test
  public void test34()  throws Throwable  {
      Scope scope0 = Scope.request;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("S", "S", "S", scope0);
      int int0 = wheelAnnotatedField0.getStoreOpcode();
      assertEquals(54, int0);
      assertEquals(Scope.request, wheelAnnotatedField0.getScope());
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
  }

  @Test
  public void test35()  throws Throwable  {
      Scope scope0 = Scope.page;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("Z", "Z", "Z", scope0);
      int int0 = wheelAnnotatedField0.getStoreOpcode();
      assertEquals(54, int0);
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals(Scope.page, wheelAnnotatedField0.getScope());
  }

  @Test
  public void test36()  throws Throwable  {
      Scope scope0 = Scope.session;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("B", "B", "B", scope0);
      int int0 = wheelAnnotatedField0.getStoreOpcode();
      assertEquals(54, int0);
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
  }

  @Test
  public void test37()  throws Throwable  {
      Scope scope0 = Scope.page;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("F", "F", "F", scope0);
      int int0 = wheelAnnotatedField0.getStoreOpcode();
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals(Scope.page, wheelAnnotatedField0.getScope());
      assertEquals(56, int0);
  }

  @Test
  public void test38()  throws Throwable  {
      Scope scope0 = Scope.page;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("LB *Q ", "LB *Q ", "LB *Q ", scope0);
      int int0 = wheelAnnotatedField0.getStoreOpcode();
      assertEquals(58, int0);
      assertEquals(Scope.page, wheelAnnotatedField0.getScope());
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
  }

  @Test
  public void test39()  throws Throwable  {
      Scope scope0 = Scope.session;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("67ihEhEEs\"ogt^v8Q", "D", "D", scope0);
      int int0 = wheelAnnotatedField0.getStoreOpcode();
      assertEquals("D", wheelAnnotatedField0.getSignature());
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals("get67ihEhEEs\"ogt^v8Q", wheelAnnotatedField0.getGetterName());
      assertEquals(57, int0);
      assertEquals("D", wheelAnnotatedField0.getClassName());
  }

  @Test
  public void test40()  throws Throwable  {
      Scope scope0 = Scope.session;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("[", "[", "", scope0);
      int int0 = wheelAnnotatedField0.getStoreOpcode();
      assertEquals("", wheelAnnotatedField0.getSignature());
      assertEquals("[", wheelAnnotatedField0.getClassName());
      assertEquals(58, int0);
      assertEquals("[", wheelAnnotatedField0.getName());
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
  }

  @Test
  public void test41()  throws Throwable  {
      Scope scope0 = Scope.page;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("", "", "", scope0);
      // Undeclared exception!
      try {
        wheelAnnotatedField0.getStoreOpcode();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Field description is of unknown type.
         */
      }
  }

  @Test
  public void test42()  throws Throwable  {
      Scope scope0 = Scope.session;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("I", "I", "I", scope0);
      int int0 = wheelAnnotatedField0.getReturnOpCode();
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals(172, int0);
  }

  @Test
  public void test43()  throws Throwable  {
      Scope scope0 = Scope.page;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("F", "F", "F", scope0);
      int int0 = wheelAnnotatedField0.getReturnOpCode();
      assertEquals(174, int0);
      assertEquals(Scope.page, wheelAnnotatedField0.getScope());
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
  }

  @Test
  public void test44()  throws Throwable  {
      Scope scope0 = Scope.session;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("C", "C", "C", scope0);
      int int0 = wheelAnnotatedField0.getReturnOpCode();
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals(172, int0);
  }

  @Test
  public void test45()  throws Throwable  {
      Scope scope0 = Scope.request;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("S", "S", "S", scope0);
      int int0 = wheelAnnotatedField0.getReturnOpCode();
      assertEquals(172, int0);
      assertEquals(Scope.request, wheelAnnotatedField0.getScope());
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
  }

  @Test
  public void test46()  throws Throwable  {
      Scope scope0 = Scope.request;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("5O.5}_:?ZV@^$aL", "Z", "5O.5}_:?ZV@^$aL", scope0);
      int int0 = wheelAnnotatedField0.getReturnOpCode();
      assertEquals(Scope.request, wheelAnnotatedField0.getScope());
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals("5O.5}_:?ZV@^$aL", wheelAnnotatedField0.getSignature());
      assertEquals("is5O.5}_:?ZV@^$aL", wheelAnnotatedField0.getGetterName());
      assertEquals(172, int0);
  }

  @Test
  public void test47()  throws Throwable  {
      Scope scope0 = Scope.session;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("B", "B", "B", scope0);
      int int0 = wheelAnnotatedField0.getReturnOpCode();
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals(172, int0);
  }

  @Test
  public void test48()  throws Throwable  {
      Scope scope0 = Scope.page;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("", "J", "J", scope0);
      int int0 = wheelAnnotatedField0.getReturnOpCode();
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals("", wheelAnnotatedField0.getName());
      assertEquals(Scope.page, wheelAnnotatedField0.getScope());
      assertEquals(173, int0);
      assertEquals("J", wheelAnnotatedField0.getClassName());
      assertEquals("J", wheelAnnotatedField0.getSignature());
  }

  @Test
  public void test49()  throws Throwable  {
      Scope scope0 = Scope.page;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("LB *Q ", "LB *Q ", "LB *Q ", scope0);
      int int0 = wheelAnnotatedField0.getReturnOpCode();
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals(176, int0);
      assertEquals(Scope.page, wheelAnnotatedField0.getScope());
  }

  @Test
  public void test50()  throws Throwable  {
      Scope scope0 = Scope.session;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("67ihEhEEs\"ogt^v8Q", "D", "D", scope0);
      int int0 = wheelAnnotatedField0.getReturnOpCode();
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals("Ljava/lang/Double;", wheelAnnotatedField0.getWrapperTypeInternal());
      assertEquals("get67ihEhEEs\"ogt^v8Q", wheelAnnotatedField0.getGetterName());
      assertEquals(175, int0);
      assertEquals("D", wheelAnnotatedField0.getSignature());
  }

  @Test
  public void test51()  throws Throwable  {
      Scope scope0 = Scope.request;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("5O.5}_:?ZV@^$aL", "5O.5}_:?ZV@^$aL", "5O.5}_:?ZV@^$aL", scope0);
      // Undeclared exception!
      try {
        wheelAnnotatedField0.getReturnOpCode();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Field description is of unknown type.
         */
      }
  }

  @Test
  public void test52()  throws Throwable  {
      Scope scope0 = Scope.session;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("[", "[", "", scope0);
      int int0 = wheelAnnotatedField0.getReturnOpCode();
      assertEquals("", wheelAnnotatedField0.getSignature());
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals("[", wheelAnnotatedField0.getName());
      assertEquals(176, int0);
      assertEquals("[", wheelAnnotatedField0.getClassName());
  }

  @Test
  public void test53()  throws Throwable  {
      Scope scope0 = Scope.component;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("F", "F", "F", scope0);
      String string0 = wheelAnnotatedField0.getWrapperType();
      assertEquals("java/lang/Float", string0);
      assertNotNull(string0);
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals(Scope.component, wheelAnnotatedField0.getScope());
  }

  @Test
  public void test54()  throws Throwable  {
      Scope scope0 = Scope.global;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("I", "I", "I", scope0);
      String string0 = wheelAnnotatedField0.getWrapperType();
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertNotNull(string0);
      assertEquals(Scope.global, wheelAnnotatedField0.getScope());
      assertEquals("java/lang/Integer", string0);
  }

  @Test
  public void test55()  throws Throwable  {
      Scope scope0 = Scope.page;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("", "J", "J", scope0);
      String string0 = wheelAnnotatedField0.getWrapperType();
      assertEquals(Scope.page, wheelAnnotatedField0.getScope());
      assertEquals("java/lang/Long", string0);
      assertEquals("J", wheelAnnotatedField0.getSignature());
      assertNotNull(string0);
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals("", wheelAnnotatedField0.getName());
  }

  @Test
  public void test56()  throws Throwable  {
      Scope scope0 = Scope.component;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("Z", "Z", "Z", scope0);
      String string0 = wheelAnnotatedField0.getWrapperType();
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals(Scope.component, wheelAnnotatedField0.getScope());
      assertNotNull(string0);
      assertEquals("java/lang/Boolean", string0);
  }

  @Test
  public void test57()  throws Throwable  {
      Scope scope0 = Scope.session;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("67ihEhEEs\"ogt^v8Q", "D", "D", scope0);
      String string0 = wheelAnnotatedField0.getWrapperType();
      assertEquals("D", wheelAnnotatedField0.getSignature());
      assertNotNull(string0);
      assertEquals("67ihEhEEs\"ogt^v8Q", wheelAnnotatedField0.getName());
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals("java/lang/Double", string0);
  }

  @Test
  public void test58()  throws Throwable  {
      Scope scope0 = Scope.global;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("Ljav/lang/Sythetic;", "Ljav/lang/Sythetic;", "Ljav/lang/Sythetic;", scope0);
      String string0 = wheelAnnotatedField0.getWrapperType();
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals("jav/lang/Sythetic", string0);
      assertEquals(Scope.global, wheelAnnotatedField0.getScope());
      assertNotNull(string0);
  }

  @Test
  public void test59()  throws Throwable  {
      Scope scope0 = Scope.session;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("C", "C", "C", scope0);
      String string0 = wheelAnnotatedField0.getWrapperType();
      assertNotNull(string0);
      assertEquals("java/lang/Character", string0);
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
  }

  @Test
  public void test60()  throws Throwable  {
      Scope scope0 = Scope.global;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("S", "S", "S", scope0);
      String string0 = wheelAnnotatedField0.getWrapperType();
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals(Scope.global, wheelAnnotatedField0.getScope());
      assertNotNull(string0);
      assertEquals("java/lang/Short", string0);
  }

  @Test
  public void test61()  throws Throwable  {
      Scope scope0 = Scope.session;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("B", "B", "B", scope0);
      String string0 = wheelAnnotatedField0.getWrapperType();
      assertEquals("java/lang/Byte", string0);
      assertNotNull(string0);
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
  }

  @Test
  public void test62()  throws Throwable  {
      Scope scope0 = Scope.component;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("Z", "Z", "Z", scope0);
      String string0 = wheelAnnotatedField0.getWrapperTypeInternal();
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals("Ljava/lang/Boolean;", string0);
      assertNotNull(string0);
      assertEquals(Scope.component, wheelAnnotatedField0.getScope());
  }

  @Test
  public void test63()  throws Throwable  {
      Scope scope0 = Scope.global;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("I", "I", "I", scope0);
      String string0 = wheelAnnotatedField0.getWrapperTypeInternal();
      assertNotNull(string0);
      assertEquals(Scope.global, wheelAnnotatedField0.getScope());
      assertEquals("Ljava/lang/Integer;", string0);
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
  }

  @Test
  public void test64()  throws Throwable  {
      Scope scope0 = Scope.page;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("", "J", "J", scope0);
      String string0 = wheelAnnotatedField0.getWrapperTypeInternal();
      assertNotNull(string0);
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals("J", wheelAnnotatedField0.getSignature());
      assertEquals(Scope.page, wheelAnnotatedField0.getScope());
      assertEquals("", wheelAnnotatedField0.getName());
      assertEquals("Ljava/lang/Long;", string0);
  }

  @Test
  public void test65()  throws Throwable  {
      Scope scope0 = Scope.page;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("F", "F", "F", scope0);
      String string0 = wheelAnnotatedField0.getWrapperTypeInternal();
      assertNotNull(string0);
      assertEquals("Ljava/lang/Float;", string0);
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals(Scope.page, wheelAnnotatedField0.getScope());
  }

  @Test
  public void test66()  throws Throwable  {
      Scope scope0 = Scope.session;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("67ihEhEEs\"ogt^v8Q", "D", "D", scope0);
      String string0 = wheelAnnotatedField0.getWrapperTypeInternal();
      assertEquals("Ljava/lang/Double;", string0);
      assertEquals("D", wheelAnnotatedField0.getSignature());
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertNotNull(string0);
      assertEquals("get67ihEhEEs\"ogt^v8Q", wheelAnnotatedField0.getGetterName());
  }

  @Test
  public void test67()  throws Throwable  {
      Scope scope0 = Scope.page;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("LB *Q ", "LB *Q ", "LB *Q ", scope0);
      String string0 = wheelAnnotatedField0.getWrapperTypeInternal();
      assertEquals(Scope.page, wheelAnnotatedField0.getScope());
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertNotNull(string0);
      assertEquals("LB *Q ", string0);
  }

  @Test
  public void test68()  throws Throwable  {
      Scope scope0 = Scope.session;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("C", "C", "C", scope0);
      String string0 = wheelAnnotatedField0.getWrapperTypeInternal();
      assertEquals("Ljava/lang/Character;", string0);
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertNotNull(string0);
  }

  @Test
  public void test69()  throws Throwable  {
      Scope scope0 = Scope.request;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("S", "S", "S", scope0);
      String string0 = wheelAnnotatedField0.getWrapperTypeInternal();
      assertEquals("Ljava/lang/Short;", string0);
      assertEquals(Scope.request, wheelAnnotatedField0.getScope());
      assertNotNull(string0);
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
  }

  @Test
  public void test70()  throws Throwable  {
      Scope scope0 = Scope.session;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("B", "B", "B", scope0);
      String string0 = wheelAnnotatedField0.getWrapperTypeInternal();
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertNotNull(string0);
      assertEquals("Ljava/lang/Byte;", string0);
  }

  @Test
  public void test71()  throws Throwable  {
      Scope scope0 = Scope.page;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("F", "F", "F", scope0);
      String string0 = wheelAnnotatedField0.getNarrowingMethod();
      assertEquals(Scope.page, wheelAnnotatedField0.getScope());
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertNotNull(string0);
      assertEquals("floatValue", string0);
  }

  @Test
  public void test72()  throws Throwable  {
      Scope scope0 = Scope.global;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("I", "I", "I", scope0);
      String string0 = wheelAnnotatedField0.getNarrowingMethod();
      assertEquals(Scope.global, wheelAnnotatedField0.getScope());
      assertEquals("intValue", string0);
      assertNotNull(string0);
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
  }

  @Test
  public void test73()  throws Throwable  {
      Scope scope0 = Scope.page;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("", "J", "J", scope0);
      String string0 = wheelAnnotatedField0.getNarrowingMethod();
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals("longValue", string0);
      assertEquals(Scope.page, wheelAnnotatedField0.getScope());
      assertEquals("J", wheelAnnotatedField0.getSignature());
      assertEquals("", wheelAnnotatedField0.getName());
      assertNotNull(string0);
  }

  @Test
  public void test74()  throws Throwable  {
      Scope scope0 = Scope.request;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("5O.5}_:?ZV@^$aL", "Z", "5O.5}_:?ZV@^$aL", scope0);
      String string0 = wheelAnnotatedField0.getNarrowingMethod();
      assertEquals("booleanValue", string0);
      assertNotNull(string0);
      assertEquals("5O.5}_:?ZV@^$aL", wheelAnnotatedField0.getSignature());
      assertEquals("5O.5}_:?ZV@^$aL", wheelAnnotatedField0.getName());
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals(Scope.request, wheelAnnotatedField0.getScope());
  }

  @Test
  public void test75()  throws Throwable  {
      Scope scope0 = Scope.session;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("67ihEhEEs\"ogt^v8Q", "D", "D", scope0);
      String string0 = wheelAnnotatedField0.getNarrowingMethod();
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals("D", wheelAnnotatedField0.getSignature());
      assertEquals("doubleValue", string0);
      assertNotNull(string0);
      assertEquals("67ihEhEEs\"ogt^v8Q", wheelAnnotatedField0.getName());
  }

  @Test
  public void test76()  throws Throwable  {
      Scope scope0 = Scope.request;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("S", "S", "S", scope0);
      String string0 = wheelAnnotatedField0.getNarrowingMethod();
      assertNotNull(string0);
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals("shortValue", string0);
      assertEquals(Scope.request, wheelAnnotatedField0.getScope());
  }

  @Test
  public void test77()  throws Throwable  {
      Scope scope0 = Scope.session;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("C", "C", "C", scope0);
      String string0 = wheelAnnotatedField0.getNarrowingMethod();
      assertEquals("charValue", string0);
      assertNotNull(string0);
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
  }

  @Test
  public void test78()  throws Throwable  {
      Scope scope0 = Scope.request;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("B", "B", "B", scope0);
      String string0 = wheelAnnotatedField0.getNarrowingMethod();
      assertEquals(Scope.request, wheelAnnotatedField0.getScope());
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals("byteValue", string0);
      assertNotNull(string0);
  }

  @Test
  public void test79()  throws Throwable  {
      Scope scope0 = Scope.request;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("}", "", "}", scope0);
      // Undeclared exception!
      try {
        wheelAnnotatedField0.getNarrowingMethod();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Field description is of unknown type.
         */
      }
  }

  @Test
  public void test80()  throws Throwable  {
      Scope scope0 = Scope.global;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("J", "J", "J", scope0);
      String string0 = wheelAnnotatedField0.getClassName();
      assertNotNull(string0);
      assertEquals(true, wheelAnnotatedField0.needsWrapping());
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals(Scope.global, wheelAnnotatedField0.getScope());
  }

  @Test
  public void test81()  throws Throwable  {
      Scope scope0 = Scope.session;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("[", "[", "", scope0);
      boolean boolean0 = wheelAnnotatedField0.needsWrapping();
      assertEquals("[", wheelAnnotatedField0.getName());
      assertEquals("", wheelAnnotatedField0.getSignature());
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals(false, boolean0);
  }

  @Test
  public void test82()  throws Throwable  {
      Scope scope0 = Scope.global;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("L}", "L}", "L}", scope0);
      String string0 = wheelAnnotatedField0.getWrapperType();
      assertEquals(Scope.global, wheelAnnotatedField0.getScope());
      assertNotNull(string0);
      assertEquals(false, wheelAnnotatedField0.needsWrapping());
      assertEquals("L}", string0);
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
  }

  @Test
  public void test83()  throws Throwable  {
      Scope scope0 = Scope.global;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("I", "I", "I", scope0);
      int int0 = wheelAnnotatedField0.getMaxStackSizeForSetter();
      assertEquals(6, int0);
      assertEquals(Scope.global, wheelAnnotatedField0.getScope());
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
  }

  @Test
  public void test84()  throws Throwable  {
      Scope scope0 = Scope.component;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("F", "F", "F", scope0);
      int int0 = wheelAnnotatedField0.getMaxStackSizeForSetter();
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals(7, int0);
      assertEquals(Scope.component, wheelAnnotatedField0.getScope());
  }

  @Test
  public void test85()  throws Throwable  {
      Scope scope0 = Scope.session;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("C", "C", "C", scope0);
      int int0 = wheelAnnotatedField0.getMaxStackSizeForSetter();
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals(6, int0);
  }

  @Test
  public void test86()  throws Throwable  {
      Scope scope0 = Scope.request;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("S", "S", "S", scope0);
      int int0 = wheelAnnotatedField0.getMaxStackSizeForSetter();
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals(Scope.request, wheelAnnotatedField0.getScope());
      assertEquals(6, int0);
  }

  @Test
  public void test87()  throws Throwable  {
      Scope scope0 = Scope.page;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("Z", "Z", "Z", scope0);
      int int0 = wheelAnnotatedField0.getMaxStackSizeForSetter();
      assertEquals(6, int0);
      assertEquals(Scope.page, wheelAnnotatedField0.getScope());
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
  }

  @Test
  public void test88()  throws Throwable  {
      Scope scope0 = Scope.session;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("B", "B", "B", scope0);
      int int0 = wheelAnnotatedField0.getMaxStackSizeForSetter();
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals(6, int0);
  }

  @Test
  public void test89()  throws Throwable  {
      Scope scope0 = Scope.session;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("67ihEhEEs\"ogt^v8Q", "D", "D", scope0);
      int int0 = wheelAnnotatedField0.getMaxStackSizeForSetter();
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals(7, int0);
      assertEquals("D", wheelAnnotatedField0.getSignature());
      assertEquals("Ljava/lang/Double;", wheelAnnotatedField0.getWrapperTypeInternal());
      assertEquals("get67ihEhEEs\"ogt^v8Q", wheelAnnotatedField0.getGetterName());
  }

  @Test
  public void test90()  throws Throwable  {
      Scope scope0 = Scope.page;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("", "J", "J", scope0);
      int int0 = wheelAnnotatedField0.getMaxStackSizeForSetter();
      assertEquals("J", wheelAnnotatedField0.getSignature());
      assertEquals("", wheelAnnotatedField0.getName());
      assertEquals(7, int0);
      assertEquals("J", wheelAnnotatedField0.getClassName());
      assertEquals(Scope.page, wheelAnnotatedField0.getScope());
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
  }

  @Test
  public void test91()  throws Throwable  {
      Scope scope0 = Scope.component;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("doubleValue", "doubleValue", "Z", scope0);
      // Undeclared exception!
      try {
        wheelAnnotatedField0.getMaxStackSizeForSetter();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Field description is of unknown type.
         */
      }
  }

  @Test
  public void test92()  throws Throwable  {
      Scope scope0 = Scope.page;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("LB *Q ", "LB *Q ", "LB *Q ", scope0);
      int int0 = wheelAnnotatedField0.getMaxStackSizeForSetter();
      assertEquals(6, int0);
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals(Scope.page, wheelAnnotatedField0.getScope());
  }

  @Test
  public void test93()  throws Throwable  {
      Scope scope0 = Scope.session;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("[", "[", "", scope0);
      int int0 = wheelAnnotatedField0.getMaxStackSizeForSetter();
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals("", wheelAnnotatedField0.getSignature());
      assertEquals(6, int0);
      assertEquals("[", wheelAnnotatedField0.getDesc());
      assertEquals("[", wheelAnnotatedField0.getName());
  }

  @Test
  public void test94()  throws Throwable  {
      Scope scope0 = Scope.global;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("I", "I", "I", scope0);
      int int0 = wheelAnnotatedField0.getMaxStackSizeForGetter();
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals(7, int0);
      assertEquals(Scope.global, wheelAnnotatedField0.getScope());
  }

  @Test
  public void test95()  throws Throwable  {
      Scope scope0 = Scope.component;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("", "67ihEhEEs\"ogt^v8Q", "", scope0);
      // Undeclared exception!
      try {
        wheelAnnotatedField0.getMaxStackSizeForGetter();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Field description is of unknown type.
         */
      }
  }

  @Test
  public void test96()  throws Throwable  {
      Scope scope0 = Scope.session;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("C", "C", "C", scope0);
      int int0 = wheelAnnotatedField0.getMaxStackSizeForGetter();
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals(7, int0);
  }

  @Test
  public void test97()  throws Throwable  {
      Scope scope0 = Scope.global;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("S", "S", "S", scope0);
      int int0 = wheelAnnotatedField0.getMaxStackSizeForGetter();
      assertEquals(Scope.global, wheelAnnotatedField0.getScope());
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals(7, int0);
  }

  @Test
  public void test98()  throws Throwable  {
      Scope scope0 = Scope.request;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("5O.5}_:?ZV@^$aL", "Z", "5O.5}_:?ZV@^$aL", scope0);
      int int0 = wheelAnnotatedField0.getMaxStackSizeForGetter();
      assertEquals(Scope.request, wheelAnnotatedField0.getScope());
      assertEquals(7, int0);
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals("is5O.5}_:?ZV@^$aL", wheelAnnotatedField0.getGetterName());
      assertEquals("5O.5}_:?ZV@^$aL", wheelAnnotatedField0.getSignature());
  }

  @Test
  public void test99()  throws Throwable  {
      Scope scope0 = Scope.request;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("B", "B", "B", scope0);
      int int0 = wheelAnnotatedField0.getMaxStackSizeForGetter();
      assertEquals(7, int0);
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals(Scope.request, wheelAnnotatedField0.getScope());
  }

  @Test
  public void test100()  throws Throwable  {
      Scope scope0 = Scope.session;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("67ihEhEEs\"ogt^v8Q", "D", "D", scope0);
      int int0 = wheelAnnotatedField0.getMaxStackSizeForGetter();
      assertEquals("D", wheelAnnotatedField0.getSignature());
      assertEquals(7, int0);
      assertEquals(true, wheelAnnotatedField0.isWideNativeType());
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals("67ihEhEEs\"ogt^v8Q", wheelAnnotatedField0.getName());
  }

  @Test
  public void test101()  throws Throwable  {
      Scope scope0 = Scope.global;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("J", "J", "J", scope0);
      int int0 = wheelAnnotatedField0.getMaxStackSizeForGetter();
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals(Scope.global, wheelAnnotatedField0.getScope());
      assertEquals(7, int0);
  }

  @Test
  public void test102()  throws Throwable  {
      Scope scope0 = Scope.page;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("F", "F", "F", scope0);
      int int0 = wheelAnnotatedField0.getMaxStackSizeForGetter();
      assertEquals(7, int0);
      assertEquals(Scope.page, wheelAnnotatedField0.getScope());
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
  }

  @Test
  public void test103()  throws Throwable  {
      Scope scope0 = Scope.global;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("Ljav/lang/Sythetic;", "Ljav/lang/Sythetic;", "Ljav/lang/Sythetic;", scope0);
      int int0 = wheelAnnotatedField0.getMaxStackSizeForGetter();
      assertEquals(Scope.global, wheelAnnotatedField0.getScope());
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals(7, int0);
  }

  @Test
  public void test104()  throws Throwable  {
      Scope scope0 = Scope.session;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("[", "[", "", scope0);
      int int0 = wheelAnnotatedField0.getMaxStackSizeForGetter();
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals("[", wheelAnnotatedField0.getWrapperTypeInternal());
      assertEquals(7, int0);
      assertEquals("[", wheelAnnotatedField0.getName());
      assertEquals("", wheelAnnotatedField0.getSignature());
  }

  @Test
  public void test105()  throws Throwable  {
      Scope scope0 = Scope.component;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("D", "D", "", scope0);
      boolean boolean0 = wheelAnnotatedField0.isWideNativeType();
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals("D", wheelAnnotatedField0.getName());
      assertEquals("", wheelAnnotatedField0.getSignature());
      assertEquals(true, boolean0);
      assertEquals(Scope.component, wheelAnnotatedField0.getScope());
  }

  @Test
  public void test106()  throws Throwable  {
      Scope scope0 = Scope.page;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("F", "F", "F", scope0);
      boolean boolean0 = wheelAnnotatedField0.isWideNativeType();
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
      assertEquals(true, boolean0);
      assertEquals(Scope.page, wheelAnnotatedField0.getScope());
  }

  @Test
  public void test107()  throws Throwable  {
      Scope scope0 = Scope.page;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("", "J", "J", scope0);
      boolean boolean0 = wheelAnnotatedField0.isWideNativeType();
      assertEquals(Scope.page, wheelAnnotatedField0.getScope());
      assertEquals("J", wheelAnnotatedField0.getSignature());
      assertEquals(true, boolean0);
      assertEquals("", wheelAnnotatedField0.getName());
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
  }

  @Test
  public void test108()  throws Throwable  {
      Scope scope0 = Scope.session;
      WheelAnnotatedField wheelAnnotatedField0 = new WheelAnnotatedField("[", "[", "", scope0);
      boolean boolean0 = wheelAnnotatedField0.isWideNativeType();
      assertEquals("[", wheelAnnotatedField0.getName());
      assertEquals("", wheelAnnotatedField0.getSignature());
      assertEquals(false, boolean0);
      assertEquals("[", wheelAnnotatedField0.getClassName());
      assertEquals(-1, wheelAnnotatedField0.getLocalVarIndex());
  }
}
