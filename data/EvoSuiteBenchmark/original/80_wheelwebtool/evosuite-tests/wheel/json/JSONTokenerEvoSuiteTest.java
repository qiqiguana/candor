/*
 * This file was automatically generated by EvoSuite
 */

package wheel.json;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import wheel.json.JSONException;
import wheel.json.JSONTokener;

@RunWith(EvoSuiteRunner.class)
public class JSONTokenerEvoSuiteTest {


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 wheel.json.JSONTokener.back()V: I4 Branch 1 IFLE L65 - true
   * 2 wheel.json.JSONTokener.<init>(Ljava/lang/String;)V: root-Branch
   */
  @Test
  public void test0()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("");
      jSONTokener0.back();
      assertEquals(" at character 0 of ", jSONTokener0.toString());
  }

  //Test case number: 1
  /*
   * 37 covered goals:
   * 1 wheel.json.JSONTokener.syntaxError(Ljava/lang/String;)Lwheel/json/JSONException;: root-Branch
   * 2 wheel.json.JSONTokener.toString()Ljava/lang/String;: root-Branch
   * 3 wheel.json.JSONTokener.back()V: I4 Branch 1 IFLE L65 - false
   * 4 wheel.json.JSONTokener.more()Z: I7 Branch 8 IF_ICMPGE L98 - true
   * 5 wheel.json.JSONTokener.more()Z: I7 Branch 8 IF_ICMPGE L98 - false
   * 6 wheel.json.JSONTokener.next()C: I4 Branch 9 IFEQ L108 - true
   * 7 wheel.json.JSONTokener.next()C: I4 Branch 9 IFEQ L108 - false
   * 8 wheel.json.JSONTokener.nextClean()C: I9 Branch 12 IF_ICMPNE L163 - true
   * 9 wheel.json.JSONTokener.nextClean()C: I79 Branch 22 IF_ICMPNE L188 - true
   * 10 wheel.json.JSONTokener.nextClean()C: I99 Branch 26 IFEQ L192 - false
   * 11 wheel.json.JSONTokener.nextClean()C: I102 Branch 27 IF_ICMPLE L192 - false
   * 12 wheel.json.JSONTokener.nextString(C)Ljava/lang/String;: I14 Branch 28 LOOKUPSWITCH L215 Case 0 - true
   * 13 wheel.json.JSONTokener.nextString(C)Ljava/lang/String;: I14 Branch 28 LOOKUPSWITCH L215 Case 0 - false
   * 14 wheel.json.JSONTokener.nextString(C)Ljava/lang/String;: I14 Branch 29 LOOKUPSWITCH L215 Case 10 - false
   * 15 wheel.json.JSONTokener.nextString(C)Ljava/lang/String;: I14 Branch 30 LOOKUPSWITCH L215 Case 13 - false
   * 16 wheel.json.JSONTokener.nextString(C)Ljava/lang/String;: I14 Branch 31 LOOKUPSWITCH L215 Case 92 - false
   * 17 wheel.json.JSONTokener.nextString(C)Ljava/lang/String;: I14 Branch 32 LOOKUPSWITCH L215 Default-Case - true
   * 18 wheel.json.JSONTokener.nextString(C)Ljava/lang/String;: I14 Branch 32 LOOKUPSWITCH L215 Default-Case - false
   * 19 wheel.json.JSONTokener.nextString(C)Ljava/lang/String;: I116 Branch 57 IF_ICMPNE L249 - true
   * 20 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I8 Branch 68 LOOKUPSWITCH L313 Case 34 - true
   * 21 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I8 Branch 68 LOOKUPSWITCH L313 Case 34 - false
   * 22 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I8 Branch 69 LOOKUPSWITCH L313 Case 39 - false
   * 23 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I8 Branch 70 LOOKUPSWITCH L313 Case 91 - false
   * 24 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I8 Branch 71 LOOKUPSWITCH L313 Case 123 - false
   * 25 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I8 Branch 72 LOOKUPSWITCH L313 Default-Case - true
   * 26 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I8 Branch 72 LOOKUPSWITCH L313 Default-Case - false
   * 27 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I51 Branch 73 IF_ICMPLT L336 - false
   * 28 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I55 Branch 74 IFGE L336 - true
   * 29 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I55 Branch 74 IFGE L336 - false
   * 30 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I83 Branch 75 IFLE L347 - true
   * 31 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I95 Branch 76 IFLE L350 - true
   * 32 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I105 Branch 77 IFLE L353 - true
   * 33 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I115 Branch 78 IFLE L356 - true
   * 34 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I124 Branch 79 IF_ICMPLT L368 - true
   * 35 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I131 Branch 81 IF_ICMPEQ L368 - false
   * 36 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I134 Branch 82 IF_ICMPEQ L368 - false
   * 37 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I137 Branch 83 IF_ICMPNE L368 - true
   */
  @Test
  public void test1()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("&lMZQ\")`VJaM+O");
      jSONTokener0.nextValue();
      String string0 = "";
      try {
        string0 = (String)jSONTokener0.nextValue();
        fail("Expecting exception: JSONException");
      } catch(JSONException e) {
        /*
         * Unterminated string at character 14 of &lMZQ\")`VJaM+O
         */
      }
      assertEquals(" at character 13 of &lMZQ\")`VJaM+O", jSONTokener0.toString());
  }

  //Test case number: 2
  /*
   * 3 covered goals:
   * 1 wheel.json.JSONTokener.dehexchar(C)I: I4 Branch 2 IF_ICMPLT L79 - true
   * 2 wheel.json.JSONTokener.dehexchar(C)I: I18 Branch 4 IF_ICMPLT L82 - true
   * 3 wheel.json.JSONTokener.dehexchar(C)I: I32 Branch 6 IF_ICMPLT L85 - true
   */
  @Test
  public void test2()  throws Throwable  {
      int int0 = JSONTokener.dehexchar('$');
      assertEquals((-1), int0);
  }

  //Test case number: 3
  /*
   * 6 covered goals:
   * 1 wheel.json.JSONTokener.dehexchar(C)I: I4 Branch 2 IF_ICMPLT L79 - false
   * 2 wheel.json.JSONTokener.dehexchar(C)I: I7 Branch 3 IF_ICMPGT L79 - true
   * 3 wheel.json.JSONTokener.dehexchar(C)I: I18 Branch 4 IF_ICMPLT L82 - false
   * 4 wheel.json.JSONTokener.dehexchar(C)I: I21 Branch 5 IF_ICMPGT L82 - true
   * 5 wheel.json.JSONTokener.dehexchar(C)I: I32 Branch 6 IF_ICMPLT L85 - false
   * 6 wheel.json.JSONTokener.dehexchar(C)I: I35 Branch 7 IF_ICMPGT L85 - true
   */
  @Test
  public void test3()  throws Throwable  {
      int int0 = JSONTokener.dehexchar('n');
      assertEquals((-1), int0);
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 wheel.json.JSONTokener.dehexchar(C)I: I7 Branch 3 IF_ICMPGT L79 - false
   */
  @Test
  public void test4()  throws Throwable  {
      int int0 = JSONTokener.dehexchar('2');
      assertEquals(2, int0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 wheel.json.JSONTokener.dehexchar(C)I: I21 Branch 5 IF_ICMPGT L82 - false
   */
  @Test
  public void test5()  throws Throwable  {
      int int0 = JSONTokener.dehexchar('A');
      assertEquals(10, int0);
  }

  //Test case number: 6
  /*
   * 6 covered goals:
   * 1 wheel.json.JSONTokener.dehexchar(C)I: I35 Branch 7 IF_ICMPGT L85 - false
   * 2 wheel.json.JSONTokener.dehexchar(C)I: I4 Branch 2 IF_ICMPLT L79 - false
   * 3 wheel.json.JSONTokener.dehexchar(C)I: I7 Branch 3 IF_ICMPGT L79 - true
   * 4 wheel.json.JSONTokener.dehexchar(C)I: I18 Branch 4 IF_ICMPLT L82 - false
   * 5 wheel.json.JSONTokener.dehexchar(C)I: I21 Branch 5 IF_ICMPGT L82 - true
   * 6 wheel.json.JSONTokener.dehexchar(C)I: I32 Branch 6 IF_ICMPLT L85 - false
   */
  @Test
  public void test6()  throws Throwable  {
      int int0 = JSONTokener.dehexchar('b');
      assertEquals(11, int0);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 wheel.json.JSONTokener.next(C)C: I9 Branch 10 IF_ICMPEQ L126 - true
   */
  @Test
  public void test7()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("s-E");
      jSONTokener0.next('s');
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 wheel.json.JSONTokener.next(C)C: I9 Branch 10 IF_ICMPEQ L126 - false
   */
  @Test
  public void test8()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("false");
      try {
        jSONTokener0.next('x');
        fail("Expecting exception: JSONException");
      } catch(JSONException e) {
        /*
         * Expected 'x' and instead saw 'f' at character 1 of false
         */
      }
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 wheel.json.JSONTokener.next(I)Ljava/lang/String;: I17 Branch 11 IF_ICMPLT L146 - true
   */
  @Test
  public void test9()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("5{u1.7DP");
      String string0 = jSONTokener0.next(1);
      assertEquals('1', jSONTokener0.next());
      assertEquals("u", string0);
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 wheel.json.JSONTokener.next(I)Ljava/lang/String;: I17 Branch 11 IF_ICMPLT L146 - false
   */
  @Test
  public void test10()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("5{u1.7DP");
      try {
        jSONTokener0.next(231);
        fail("Expecting exception: JSONException");
      } catch(JSONException e) {
        /*
         * Substring bounds error at character 0 of 5{u1.7DP
         */
      }
  }

  //Test case number: 11
  /*
   * 5 covered goals:
   * 1 wheel.json.JSONTokener.nextClean()C: I9 Branch 12 IF_ICMPNE L163 - false
   * 2 wheel.json.JSONTokener.nextClean()C: I14 Branch 13 LOOKUPSWITCH L164 Case 42 - false
   * 3 wheel.json.JSONTokener.nextClean()C: I14 Branch 14 LOOKUPSWITCH L164 Case 47 - false
   * 4 wheel.json.JSONTokener.nextClean()C: I14 Branch 15 LOOKUPSWITCH L164 Default-Case - true
   * 5 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I83 Branch 75 IFLE L347 - false
   */
  @Test
  public void test11()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("/F&lMZQ\")`VJaM+O");
      String string0 = "";
      try {
        string0 = (String)jSONTokener0.nextValue();
        fail("Expecting exception: JSONException");
      } catch(JSONException e) {
        /*
         * Missing value at character 0 of /F&lMZQ\")`VJaM+O
         */
      }
      assertEquals(" at character 7 of /F&lMZQ\")`VJaM+O", jSONTokener0.toString());
  }

  //Test case number: 12
  /*
   * 8 covered goals:
   * 1 wheel.json.JSONTokener.nextClean()C: I79 Branch 22 IF_ICMPNE L188 - false
   * 2 wheel.json.JSONTokener.nextClean()C: I89 Branch 23 IF_ICMPEQ L191 - false
   * 3 wheel.json.JSONTokener.nextClean()C: I92 Branch 24 IF_ICMPEQ L191 - false
   * 4 wheel.json.JSONTokener.nextClean()C: I94 Branch 25 IFNE L191 - true
   * 5 wheel.json.JSONTokener.nextClean()C: I94 Branch 25 IFNE L191 - false
   * 6 wheel.json.JSONTokener.nextClean()C: I99 Branch 26 IFEQ L192 - true
   * 7 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I51 Branch 73 IF_ICMPLT L336 - true
   * 8 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I83 Branch 75 IFLE L347 - false
   */
  @Test
  public void test12()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("# U5l}3roZ&");
      String string0 = "";
      try {
        string0 = (String)jSONTokener0.nextValue();
        fail("Expecting exception: JSONException");
      } catch(JSONException e) {
        /*
         * Missing value at character 10 of # U5l}3roZ&
         */
      }
      assertEquals(" at character 5 of # U5l}3roZ&", jSONTokener0.toString());
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 wheel.json.JSONTokener.nextClean()C: I102 Branch 27 IF_ICMPLE L192 - true
   */
  @Test
  public void test13()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("' and instead saw '");
      jSONTokener0.next();
      char char0 = jSONTokener0.nextClean();
      assertEquals(" at character 8 of ' and instead saw '", jSONTokener0.toString());
      assertEquals('n', char0);
  }

  //Test case number: 14
  /*
   * 6 covered goals:
   * 1 wheel.json.JSONTokener.nextTo(C)Ljava/lang/String;: I17 Branch 59 IFEQ L268 - true
   * 2 wheel.json.JSONTokener.nextTo(C)Ljava/lang/String;: I27 Branch 62 IFEQ L269 - true
   * 3 wheel.json.JSONTokener.nextTo(C)Ljava/lang/String;: I15 Branch 58 IF_ICMPEQ L268 - false
   * 4 wheel.json.JSONTokener.nextTo(C)Ljava/lang/String;: I17 Branch 59 IFEQ L268 - false
   * 5 wheel.json.JSONTokener.nextTo(C)Ljava/lang/String;: I20 Branch 60 IF_ICMPEQ L268 - false
   * 6 wheel.json.JSONTokener.nextTo(C)Ljava/lang/String;: I23 Branch 61 IF_ICMPNE L268 - true
   */
  @Test
  public void test14()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("(iV O");
      String string0 = jSONTokener0.nextTo('/');
      assertEquals(" at character 5 of (iV O", jSONTokener0.toString());
      assertEquals("V O", string0);
  }

  //Test case number: 15
  /*
   * 6 covered goals:
   * 1 wheel.json.JSONTokener.nextTo(C)Ljava/lang/String;: I27 Branch 62 IFEQ L269 - false
   * 2 wheel.json.JSONTokener.nextTo(C)Ljava/lang/String;: I15 Branch 58 IF_ICMPEQ L268 - true
   * 3 wheel.json.JSONTokener.nextTo(C)Ljava/lang/String;: I15 Branch 58 IF_ICMPEQ L268 - false
   * 4 wheel.json.JSONTokener.nextTo(C)Ljava/lang/String;: I17 Branch 59 IFEQ L268 - false
   * 5 wheel.json.JSONTokener.nextTo(C)Ljava/lang/String;: I20 Branch 60 IF_ICMPEQ L268 - false
   * 6 wheel.json.JSONTokener.nextTo(C)Ljava/lang/String;: I23 Branch 61 IF_ICMPNE L268 - true
   */
  @Test
  public void test15()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("] is not a JSONArray.");
      String string0 = jSONTokener0.nextTo('r');
      assertEquals(" at character 16 of ] is not a JSONArray.", jSONTokener0.toString());
      assertEquals("s not a JSONA", string0);
  }

  //Test case number: 16
  /*
   * 2 covered goals:
   * 1 wheel.json.JSONTokener.nextTo(Ljava/lang/String;)Ljava/lang/String;: I16 Branch 63 IFGE L290 - true
   * 2 wheel.json.JSONTokener.nextTo(Ljava/lang/String;)Ljava/lang/String;: I28 Branch 67 IFEQ L292 - false
   */
  @Test
  public void test16()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("5{u1.7DP");
      String string0 = jSONTokener0.nextTo("5{u1.7DP");
      assertEquals(" at character 2 of 5{u1.7DP", jSONTokener0.toString());
      assertEquals("", string0);
  }

  //Test case number: 17
  /*
   * 6 covered goals:
   * 1 wheel.json.JSONTokener.nextTo(Ljava/lang/String;)Ljava/lang/String;: I16 Branch 63 IFGE L290 - false
   * 2 wheel.json.JSONTokener.nextTo(Ljava/lang/String;)Ljava/lang/String;: I18 Branch 64 IFEQ L290 - true
   * 3 wheel.json.JSONTokener.nextTo(Ljava/lang/String;)Ljava/lang/String;: I18 Branch 64 IFEQ L290 - false
   * 4 wheel.json.JSONTokener.nextTo(Ljava/lang/String;)Ljava/lang/String;: I21 Branch 65 IF_ICMPEQ L290 - false
   * 5 wheel.json.JSONTokener.nextTo(Ljava/lang/String;)Ljava/lang/String;: I24 Branch 66 IF_ICMPNE L290 - true
   * 6 wheel.json.JSONTokener.nextTo(Ljava/lang/String;)Ljava/lang/String;: I28 Branch 67 IFEQ L292 - true
   */
  @Test
  public void test17()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("S");
      assertEquals(" at character 0 of S", jSONTokener0.toString());
      
      jSONTokener0.nextTo("1QBMqy=hkp7Y7/\"-");
      assertEquals(" at character 1 of S", jSONTokener0.toString());
  }

  //Test case number: 18
  /*
   * 8 covered goals:
   * 1 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I8 Branch 69 LOOKUPSWITCH L313 Case 39 - true
   * 2 wheel.json.JSONTokener.nextString(C)Ljava/lang/String;: I14 Branch 28 LOOKUPSWITCH L215 Case 0 - false
   * 3 wheel.json.JSONTokener.nextString(C)Ljava/lang/String;: I14 Branch 29 LOOKUPSWITCH L215 Case 10 - false
   * 4 wheel.json.JSONTokener.nextString(C)Ljava/lang/String;: I14 Branch 30 LOOKUPSWITCH L215 Case 13 - false
   * 5 wheel.json.JSONTokener.nextString(C)Ljava/lang/String;: I14 Branch 31 LOOKUPSWITCH L215 Case 92 - false
   * 6 wheel.json.JSONTokener.nextString(C)Ljava/lang/String;: I14 Branch 32 LOOKUPSWITCH L215 Default-Case - true
   * 7 wheel.json.JSONTokener.nextString(C)Ljava/lang/String;: I116 Branch 57 IF_ICMPNE L249 - true
   * 8 wheel.json.JSONTokener.nextString(C)Ljava/lang/String;: I116 Branch 57 IF_ICMPNE L249 - false
   */
  @Test
  public void test18()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("' and instead saw '");
      String string0 = (String)jSONTokener0.nextValue();
      assertEquals(" at character 18 of ' and instead saw '", jSONTokener0.toString());
      assertEquals("nd instead saw '", string0);
  }

  //Test case number: 19
  /*
   * 3 covered goals:
   * 1 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I8 Branch 70 LOOKUPSWITCH L313 Case 91 - true
   * 2 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I124 Branch 79 IF_ICMPLT L368 - false
   * 3 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I127 Branch 80 IF_ICMPLE L368 - false
   */
  @Test
  public void test19()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("oGKhkc!7|6J[f=<k3Y");
      jSONTokener0.nextValue();
      try {
        jSONTokener0.nextValue();
        fail("Expecting exception: JSONException");
      } catch(JSONException e) {
        /*
         * Expected a ',' or ']' at character 14 of oGKhkc!7|6J[f=<k3Y
         */
      }
  }

  //Test case number: 20
  /*
   * 8 covered goals:
   * 1 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I8 Branch 71 LOOKUPSWITCH L313 Case 123 - true
   * 2 wheel.json.JSONTokener.syntaxError(Ljava/lang/String;)Lwheel/json/JSONException;: root-Branch
   * 3 wheel.json.JSONTokener.toString()Ljava/lang/String;: root-Branch
   * 4 wheel.json.JSONTokener.nextClean()C: I99 Branch 26 IFEQ L192 - true
   * 5 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I8 Branch 72 LOOKUPSWITCH L313 Default-Case - false
   * 6 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I127 Branch 80 IF_ICMPLE L368 - false
   * 7 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I134 Branch 82 IF_ICMPEQ L368 - false
   * 8 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I137 Branch 83 IF_ICMPNE L368 - true
   */
  @Test
  public void test20()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("pp9DDmY@4B{");
      jSONTokener0.nextValue();
      try {
        jSONTokener0.nextValue();
        fail("Expecting exception: JSONException");
      } catch(JSONException e) {
        /*
         * A JSONObject text must end with '}' at character 11 of pp9DDmY@4B{
         */
      }
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * 1 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I105 Branch 77 IFLE L353 - false
   */
  @Test
  public void test21()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("false");
      Boolean boolean0 = (Boolean)jSONTokener0.nextValue();
      assertEquals(" at character 4 of false", jSONTokener0.toString());
      assertEquals("lse", boolean0.toString());
  }

  //Test case number: 22
  /*
   * 4 covered goals:
   * 1 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I134 Branch 82 IF_ICMPEQ L368 - true
   * 2 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I124 Branch 79 IF_ICMPLT L368 - true
   * 3 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I131 Branch 81 IF_ICMPEQ L368 - false
   * 4 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I142 Branch 84 IF_ICMPNE L369 - true
   */
  @Test
  public void test22()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("s-E");
      jSONTokener0.nextClean();
      jSONTokener0.nextValue();
  }

  //Test case number: 23
  /*
   * 6 covered goals:
   * 1 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I142 Branch 84 IF_ICMPNE L369 - false
   * 2 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I148 Branch 85 IF_ICMPLE L370 - false
   * 3 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I153 Branch 86 IF_ICMPEQ L370 - false
   * 4 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I158 Branch 87 IF_ICMPNE L370 - true
   * 5 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I55 Branch 74 IFGE L336 - true
   * 6 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I127 Branch 80 IF_ICMPLE L368 - true
   */
  @Test
  public void test23()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("0.cAD\"6Kzy1");
      String string0 = (String)jSONTokener0.nextValue();
      assertEquals(" at character 5 of 0.cAD\"6Kzy1", jSONTokener0.toString());
      assertEquals("cAD", string0);
  }

  //Test case number: 24
  /*
   * 21 covered goals:
   * 1 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I148 Branch 85 IF_ICMPLE L370 - true
   * 2 wheel.json.JSONTokener.nextClean()C: I9 Branch 12 IF_ICMPNE L163 - true
   * 3 wheel.json.JSONTokener.nextClean()C: I79 Branch 22 IF_ICMPNE L188 - true
   * 4 wheel.json.JSONTokener.nextClean()C: I99 Branch 26 IFEQ L192 - false
   * 5 wheel.json.JSONTokener.nextClean()C: I102 Branch 27 IF_ICMPLE L192 - false
   * 6 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I8 Branch 68 LOOKUPSWITCH L313 Case 34 - false
   * 7 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I8 Branch 69 LOOKUPSWITCH L313 Case 39 - false
   * 8 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I8 Branch 70 LOOKUPSWITCH L313 Case 91 - false
   * 9 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I8 Branch 71 LOOKUPSWITCH L313 Case 123 - false
   * 10 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I8 Branch 72 LOOKUPSWITCH L313 Default-Case - true
   * 11 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I51 Branch 73 IF_ICMPLT L336 - true
   * 12 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I51 Branch 73 IF_ICMPLT L336 - false
   * 13 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I55 Branch 74 IFGE L336 - false
   * 14 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I83 Branch 75 IFLE L347 - true
   * 15 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I95 Branch 76 IFLE L350 - true
   * 16 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I105 Branch 77 IFLE L353 - true
   * 17 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I115 Branch 78 IFLE L356 - true
   * 18 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I124 Branch 79 IF_ICMPLT L368 - false
   * 19 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I127 Branch 80 IF_ICMPLE L368 - true
   * 20 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I142 Branch 84 IF_ICMPNE L369 - true
   * 21 wheel.json.JSONTokener.nextValue()Ljava/lang/Object;: I142 Branch 84 IF_ICMPNE L369 - false
   */
  @Test
  public void test24()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("8A~bro<t&1U4Aq0");
      jSONTokener0.nextValue();
      jSONTokener0.nextValue();
  }

  //Test case number: 25
  /*
   * 3 covered goals:
   * 1 wheel.json.JSONTokener.skipTo(C)C: I13 Branch 88 IFNE L416 - true
   * 2 wheel.json.JSONTokener.skipTo(C)C: I27 Branch 89 IF_ICMPNE L420 - false
   * 3 wheel.json.JSONTokener.back()V: I4 Branch 1 IFLE L65 - false
   */
  @Test
  public void test25()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("Q2=}VyNyDb?wK_p");
      char char0 = jSONTokener0.skipTo('Q');
      assertEquals(" at character 2 of Q2=}VyNyDb?wK_p", jSONTokener0.toString());
      assertEquals('\u0000', char0);
  }

  //Test case number: 26
  /*
   * 7 covered goals:
   * 1 wheel.json.JSONTokener.skipTo(C)C: I13 Branch 88 IFNE L416 - false
   * 2 wheel.json.JSONTokener.skipTo(C)C: I27 Branch 89 IF_ICMPNE L420 - true
   * 3 wheel.json.JSONTokener.more()Z: I7 Branch 8 IF_ICMPGE L98 - true
   * 4 wheel.json.JSONTokener.more()Z: I7 Branch 8 IF_ICMPGE L98 - false
   * 5 wheel.json.JSONTokener.skipTo(C)C: I13 Branch 88 IFNE L416 - true
   * 6 wheel.json.JSONTokener.next()C: I4 Branch 9 IFEQ L108 - true
   * 7 wheel.json.JSONTokener.next()C: I4 Branch 9 IFEQ L108 - false
   */
  @Test
  public void test26()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("S");
      assertEquals(" at character 0 of S", jSONTokener0.toString());
      
      char char0 = jSONTokener0.skipTo('k');
      assertEquals(" at character 1 of S", jSONTokener0.toString());
      assertEquals('\u0000', char0);
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * 1 wheel.json.JSONTokener.skipPast(Ljava/lang/String;)Z: I14 Branch 90 IFGE L433 - true
   */
  @Test
  public void test27()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("%u)Kmmg");
      boolean boolean0 = jSONTokener0.skipPast("%u)Kmmg");
      assertEquals('\u0000', jSONTokener0.nextClean());
      assertEquals(false, boolean0);
  }

  //Test case number: 28
  /*
   * 2 covered goals:
   * 1 wheel.json.JSONTokener.skipPast(Ljava/lang/String;)Z: I14 Branch 90 IFGE L433 - false
   * 2 wheel.json.JSONTokener.<init>(Ljava/lang/String;)V: root-Branch
   */
  @Test
  public void test28()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("%u)Kmmg");
      boolean boolean0 = jSONTokener0.skipPast("G_pU7");
      assertEquals('\u0000', jSONTokener0.nextClean());
      assertEquals(false, boolean0);
  }
}
