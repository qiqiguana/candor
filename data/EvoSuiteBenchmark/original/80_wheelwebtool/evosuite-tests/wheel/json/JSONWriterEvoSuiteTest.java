/*
 * This file was automatically generated by EvoSuite
 */

package wheel.json;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.CharArrayWriter;
import java.io.PipedWriter;
import java.io.Writer;
import org.junit.BeforeClass;
import wheel.json.JSONException;
import wheel.json.JSONWriter;

@RunWith(EvoSuiteRunner.class)
public class JSONWriterEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONWriter jSONWriter0 = new JSONWriter((Writer) charArrayWriter0);
      try {
        jSONWriter0.endObject();
        fail("Expecting exception: JSONException");
      } catch(JSONException e) {
        /*
         * Misplaced endArray.
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONWriter jSONWriter0 = new JSONWriter((Writer) charArrayWriter0);
      assertNotNull(jSONWriter0);
      
      try {
        jSONWriter0.value(707L);
        fail("Expecting exception: JSONException");
      } catch(JSONException e) {
        /*
         * Value out of sequence.
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONWriter jSONWriter0 = new JSONWriter((Writer) charArrayWriter0);
      jSONWriter0.object();
      try {
        jSONWriter0.object();
        fail("Expecting exception: JSONException");
      } catch(JSONException e) {
        /*
         * Misplaced object.
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONWriter jSONWriter0 = new JSONWriter((Writer) charArrayWriter0);
      JSONWriter jSONWriter1 = jSONWriter0.array();
      JSONWriter jSONWriter2 = jSONWriter1.object();
      JSONWriter jSONWriter3 = jSONWriter2.endObject();
      jSONWriter3.value(true);
      assertEquals("[{},true", charArrayWriter0.toString());
      assertEquals(8, charArrayWriter0.size());
  }

  @Test
  public void test4()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONWriter jSONWriter0 = new JSONWriter((Writer) charArrayWriter0);
      JSONWriter jSONWriter1 = jSONWriter0.object();
      JSONWriter jSONWriter2 = jSONWriter1.key(".&q_77}~FO");
      jSONWriter2.value((double) 0);
      jSONWriter0.key(".&q_77}~FO");
      jSONWriter0.array();
      assertEquals(32, charArrayWriter0.size());
      assertEquals("{\".&q_77}~FO\":0,\".&q_77}~FO\":[", charArrayWriter0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONWriter jSONWriter0 = new JSONWriter((Writer) charArrayWriter0);
      jSONWriter0.array();
      jSONWriter0.endArray();
      try {
        jSONWriter0.array();
        fail("Expecting exception: JSONException");
      } catch(JSONException e) {
        /*
         * Misplaced array.
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONWriter jSONWriter0 = new JSONWriter((Writer) charArrayWriter0);
      try {
        jSONWriter0.key((String) null);
        fail("Expecting exception: JSONException");
      } catch(JSONException e) {
        /*
         * Null key.
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      JSONWriter jSONWriter0 = new JSONWriter((Writer) pipedWriter0);
      try {
        jSONWriter0.key("");
        fail("Expecting exception: JSONException");
      } catch(JSONException e) {
        /*
         * Misplaced key.
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JSONWriter jSONWriter0 = new JSONWriter((Writer) charArrayWriter0);
      JSONWriter jSONWriter1 = jSONWriter0.array();
      JSONWriter jSONWriter2 = jSONWriter0.array();
      JSONWriter jSONWriter3 = jSONWriter2.array();
      jSONWriter3.array();
      jSONWriter1.array();
      JSONWriter jSONWriter4 = jSONWriter2.array();
      jSONWriter0.array();
      JSONWriter jSONWriter5 = jSONWriter2.object();
      JSONWriter jSONWriter6 = jSONWriter5.key(".&q_77}~FO");
      JSONWriter jSONWriter7 = jSONWriter6.value((double) 0);
      JSONWriter jSONWriter8 = jSONWriter2.key(".&q_77}~FO");
      jSONWriter2.array();
      jSONWriter8.array();
      jSONWriter8.array();
      JSONWriter jSONWriter9 = jSONWriter6.array();
      jSONWriter0.array();
      JSONWriter jSONWriter10 = jSONWriter5.array();
      jSONWriter0.array();
      jSONWriter9.array();
      jSONWriter4.array();
      jSONWriter0.array();
      jSONWriter10.array();
      jSONWriter4.array();
      try {
        jSONWriter7.object();
        fail("Expecting exception: JSONException");
      } catch(JSONException e) {
        /*
         * Nesting too deep.
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      JSONWriter jSONWriter0 = new JSONWriter((Writer) null);
      try {
        jSONWriter0.value(false);
        fail("Expecting exception: JSONException");
      } catch(JSONException e) {
        /*
         * Value out of sequence.
         */
      }
  }
}
