/*
 * This file was automatically generated by EvoSuite
 */

package wheel.json;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import org.junit.BeforeClass;
import wheel.components.RenderableComponent;
import wheel.components.XmlEntityRef;
import wheel.json.JSONArray;
import wheel.json.JSONException;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoSuiteRunner.class)
public class JSONArrayEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      double double0 = jSONArray0.optDouble(1077);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test1()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((-1722L));
      assertEquals(1, jSONArray0.length());
      assertEquals("[-1722]", jSONArray0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1030, (Map) null);
      assertNotNull(jSONArray1);
      assertEquals(1031, jSONArray0.length());
      assertEquals("[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{}]", jSONArray0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((-1208));
      assertEquals(1, jSONArray0.length());
      assertEquals("[-1208]", jSONArray1.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put((Collection) null);
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray1);
      assertEquals(1, jSONArray0.length());
      assertNotNull(jSONObject0);
      assertEquals("[[]]", jSONArray0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((double) 480);
      assertEquals("[480]", jSONArray0.toString());
      assertEquals(1, jSONArray0.length());
  }

  @Test
  public void test6()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.optBoolean((-265));
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(180, 180);
      assertNotNull(jSONArray1);
      
      String string0 = jSONArray0.optString(180);
      assertEquals("[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,180]", jSONArray0.toString());
      assertEquals("180", string0);
  }

  @Test
  public void test8()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.isNull(0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray("[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1076,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,-18.185760401077268,[]]");
      assertEquals("[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1076,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,-18.185760401077268,[]]", jSONArray0.toString());
      assertNotNull(jSONArray0);
  }

  @Test
  public void test10()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      String string0 = jSONArray0.optString(180);
      assertEquals("", string0);
  }

  @Test
  public void test11()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(180, (Collection) null);
      assertNotNull(jSONArray1);
      
      long long0 = jSONArray0.optLong(180);
      assertEquals(181, jSONArray0.length());
      assertEquals(0L, long0);
  }

  @Test
  public void test12()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Map) null);
      assertEquals(1, jSONArray0.length());
      assertEquals("[{}]", jSONArray0.toString());
  }

  @Test
  public void test13()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: JSONException");
      } catch(JSONException e) {
        /*
         * A JSONArray text must start with '[' at character 0 of 
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("F_U&6tYoWVg*Kn`R");
      List<RenderableComponent> list0 = xmlEntityRef0._getRenderableChildren();
      jSONArray0.put(1077, (Collection) list0);
      jSONArray0.optInt(1077);
  }

  @Test
  public void test15()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) " at character 0 of /~DcP\"qX-TH/");
        fail("Expecting exception: JSONException");
      } catch(JSONException e) {
        /*
         * JSONArray initial value should be a string or collection or array.
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(false);
      boolean boolean0 = jSONArray0.optBoolean(0, false);
      assertEquals(1, jSONArray0.length());
      assertEquals(false, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(92, 1076);
      assertNotNull(jSONArray1);
      
      boolean boolean0 = jSONArray0.optBoolean(92, true);
      assertEquals(93, jSONArray0.length());
      assertEquals(true, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, true);
      assertNotNull(jSONArray1);
      
      boolean boolean0 = jSONArray0.optBoolean(0, false);
      assertEquals(1, jSONArray0.length());
      assertEquals(true, boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(92, 1076);
      assertNotNull(jSONArray1);
      
      double double0 = jSONArray0.optDouble(92, 92);
      assertEquals("[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1076]", jSONArray0.toString());
      assertEquals(1076.0, double0, 0.01D);
  }

  @Test
  public void test20()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, 0);
      assertNotNull(jSONArray1);
      
      int int0 = jSONArray0.getInt(0);
      assertEquals("[0]", jSONArray0.toString());
      assertEquals(0, int0);
  }

  @Test
  public void test21()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, 0);
      assertNotNull(jSONArray1);
      
      try {
        jSONArray0.getJSONArray(0);
        fail("Expecting exception: JSONException");
      } catch(JSONException e) {
        /*
         * JSONArray[0] is not a JSONArray.
         */
      }
  }

  @Test
  public void test22()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("F_U&6tYoWVg*Kn`R");
      List<RenderableComponent> list0 = xmlEntityRef0._getRenderableChildren();
      jSONArray0.put(1077, (Collection) list0);
      jSONArray0.getJSONArray(1077);
  }

  @Test
  public void test23()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(6, false);
      assertNotNull(jSONArray1);
      
      try {
        jSONArray0.getJSONObject(6);
        fail("Expecting exception: JSONException");
      } catch(JSONException e) {
        /*
         * JSONArray[6] is not a JSONObject.
         */
      }
  }

  @Test
  public void test24()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0, 0);
      assertNotNull(jSONArray1);
      
      long long0 = jSONArray1.optLong(0);
      assertEquals("[0]", jSONArray0.toString());
      assertEquals(0L, long0);
  }

  @Test
  public void test25()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(92, 1076);
      assertNotNull(jSONArray1);
      
      String string0 = jSONArray0.toString();
      assertEquals(93, jSONArray0.length());
      assertEquals("[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1076]", string0);
  }

  @Test
  public void test26()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      JSONArray jSONArray1 = jSONArray0.optJSONArray(126);
      assertNull(jSONArray1);
  }

  @Test
  public void test27()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(180, (Collection) null);
      assertNotNull(jSONArray1);
      
      jSONArray0.optJSONArray(180);
      assertEquals("[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[]]", jSONArray0.toString());
      assertEquals(181, jSONArray0.length());
  }

  @Test
  public void test28()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = jSONArray0.optJSONObject(1691);
      assertNull(jSONObject0);
  }

  @Test
  public void test29()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(true);
      assertEquals("[true]", jSONArray0.toString());
      assertEquals(1, jSONArray1.length());
  }

  @Test
  public void test30()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try {
        jSONArray0.put((-4), (-4));
        fail("Expecting exception: JSONException");
      } catch(JSONException e) {
        /*
         * JSONArray[-4] not found.
         */
      }
  }

  @Test
  public void test31()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(180, 180);
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = jSONArray0.put(180, 180);
      assertEquals(181, jSONArray0.length());
      assertEquals("[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,180]", jSONArray2.toString());
  }

  @Test
  public void test32()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = jSONArray0.toJSONObject((JSONArray) null);
      assertNull(jSONObject0);
  }

  @Test
  public void test33()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray0);
      assertNull(jSONObject0);
  }

  @Test
  public void test34()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = jSONArray0.put(0, true);
      assertNotNull(jSONArray2);
      
      jSONArray1.toJSONObject(jSONArray0);
      assertEquals(1, jSONArray0.length());
      assertEquals("[true]", jSONArray0.toString());
  }

  @Test
  public void test35()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put((Collection) null);
      String string0 = jSONArray1.toString(41);
      assertEquals(1, jSONArray0.length());
      assertNotNull(string0);
      assertEquals("[[]]", string0);
  }

  @Test
  public void test36()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(92, 0);
      assertNotNull(jSONArray1);
      
      String string0 = jSONArray1.toString(92, 92);
      assertEquals("[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0]", jSONArray0.toString());
      assertEquals("[\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        null,\n                                                                                                                                                                                        0\n                                                                                            ]", string0);
  }

  @Test
  public void test37()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(92, 1076);
      PipedInputStream pipedInputStream0 = new PipedInputStream(92);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) pipedOutputStream0);
      PrintWriter printWriter0 = new PrintWriter((OutputStream) objectOutputStream0);
      jSONArray1.write((Writer) printWriter0);
  }

  @Test
  public void test38()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("F_U&6tYoWVg*Kn`R");
      List<RenderableComponent> list0 = xmlEntityRef0._getRenderableChildren();
      jSONArray0.put(1077, (Collection) list0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(92);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) pipedOutputStream0);
      PrintWriter printWriter0 = new PrintWriter((OutputStream) objectOutputStream0);
      jSONArray0.write((Writer) printWriter0);
  }
}
