/*
 * This file was automatically generated by EvoSuite
 */

package wheel.asm;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.Label;

@RunWith(EvoSuiteRunner.class)
public class AttributeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Attribute attribute0 = new Attribute("{Ng:N w*:kx");
      boolean boolean0 = attribute0.isCodeAttribute();
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      Attribute attribute0 = new Attribute((String) null);
      char[] charArray0 = new char[5];
      Label[] labelArray0 = new Label[6];
      // Undeclared exception!
      try {
        attribute0.read((ClassReader) null, 1117, 1117, charArray0, (int) 'F', labelArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      Attribute attribute0 = new Attribute("StackMapTable");
      boolean boolean0 = attribute0.isUnknown();
      assertEquals(true, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      Attribute attribute0 = new Attribute("$HiSaDg^!,6_c?");
      Label[] labelArray0 = attribute0.getLabels();
      assertNull(labelArray0);
  }

  @Test
  public void test4()  throws Throwable  {
      Attribute attribute0 = new Attribute("StackMapTable");
      int int0 = attribute0.getCount();
      assertEquals(1, int0);
  }

  @Test
  public void test5()  throws Throwable  {
      Attribute attribute0 = new Attribute("");
      byte[] byteArray0 = new byte[7];
      attribute0.value = byteArray0;
      ClassWriter classWriter0 = new ClassWriter((-1804));
      int int0 = attribute0.getSize(classWriter0, attribute0.value, (int) (byte)68, 63, 64);
      assertEquals(13, int0);
  }

  @Test
  public void test6()  throws Throwable  {
      Attribute attribute0 = new Attribute("$HiSaDg^!,6_c?");
      ClassWriter classWriter0 = new ClassWriter((-2034));
      byte[] byteArray0 = new byte[3];
      attribute0.value = byteArray0;
      ByteVector byteVector0 = new ByteVector((int) (byte)0);
      attribute0.put(classWriter0, byteArray0, (int) (byte)0, (int) (byte)0, (int) (byte)0, byteVector0);
      assertEquals(1, attribute0.getCount());
  }
}
