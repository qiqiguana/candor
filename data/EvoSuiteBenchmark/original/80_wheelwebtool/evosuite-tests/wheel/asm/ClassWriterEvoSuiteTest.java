/*
 * This file was automatically generated by EvoSuite
 */

package wheel.asm;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import wheel.asm.Attribute;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.Type;

@RunWith(EvoSuiteRunner.class)
public class ClassWriterEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      
      classWriter0.visitEnd();
      assertEquals(1, classWriter0.index);
      assertEquals(192, classWriter0.threshold);
  }

  @Test
  public void test1()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      
      // Undeclared exception!
      try {
        classWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2038));
      assertNotNull(classWriter0);
      
      classWriter0.newField("sDna#HQ\"~MRc0([[Z", "sDna#HQ\"~MRc0([[Z", "sDna#HQ\"~MRc0([[Z");
      int int0 = classWriter0.newField("sDna#HQ\"~MRc0([[Z", "sDna#HQ\"~MRc0([[Z", "sDna#HQ\"~MRc0([[Z");
      assertEquals(5, classWriter0.index);
      assertEquals(4, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1143));
      assertNotNull(classWriter0);
      
      Short short0 = new Short((short) (-1095));
      classWriter0.visitField(1964, "", "", "", (Object) short0);
      assertEquals(3, classWriter0.index);
  }

  @Test
  public void test4()  throws Throwable  {
      ClassWriter classWriter0 = null;
      try {
        classWriter0 = new ClassWriter((ClassReader) null, 497);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-8));
      assertNotNull(classWriter0);
      
      // Undeclared exception!
      try {
        classWriter0.newConst((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * value null
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "sM]X";
      stringArray0[1] = "";
      classWriter0.visit((-444), (-444), "", (String) null, "", stringArray0);
      assertEquals((-444), classWriter0.version);
      assertEquals(5, classWriter0.index);
  }

  @Test
  public void test7()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      
      classWriter0.visitSource((String) null, (String) null);
      assertEquals(1, classWriter0.index);
      assertEquals(192, classWriter0.threshold);
  }

  @Test
  public void test8()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      
      classWriter0.visitOuterClass("", (String) null, "");
      assertEquals(3, classWriter0.index);
  }

  @Test
  public void test9()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1874));
      assertNotNull(classWriter0);
      
      classWriter0.visitOuterClass("", "", "");
      classWriter0.toByteArray();
      assertEquals(5, classWriter0.index);
  }

  @Test
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.visitAnnotation("", true);
      classWriter0.toByteArray();
      assertEquals(3, classWriter0.index);
  }

  @Test
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.visitInnerClass((String) null, "", (String) null, 0);
      classWriter0.visitInnerClass("<K''.#mL", "<K''.#mL", "<K''.#mL", (-556));
      assertEquals(5, classWriter0.index);
  }

  @Test
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.visitInnerClass("", (String) null, "", 192);
      assertEquals(3, classWriter0.index);
      assertEquals(192, classWriter0.threshold);
  }

  @Test
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.visitField(0, "", "", "", (Object) "en");
      classWriter0.toByteArray();
      assertEquals(6, classWriter0.index);
  }

  @Test
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "sM]X";
      stringArray0[1] = "";
      classWriter0.visitMethod((-444), "sM]X", "", "", stringArray0);
      classWriter0.toByteArray();
      assertEquals(9, classWriter0.index);
  }

  @Test
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "sM]X";
      stringArray0[1] = "";
      classWriter0.visit((-444), (-444), "", "", "", stringArray0);
      classWriter0.toByteArray();
      assertEquals((-444), classWriter0.version);
      assertEquals(7, classWriter0.index);
  }

  @Test
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-444));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "sM]X";
      stringArray0[1] = "";
      classWriter0.visit((-444), (-444), "", "", "", stringArray0);
      classWriter0.version = 0;
      classWriter0.toByteArray();
      assertEquals(8, classWriter0.index);
  }

  @Test
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.visitInnerClass((String) null, "", (String) null, 0);
      classWriter0.toByteArray();
      assertEquals(4, classWriter0.index);
      assertEquals(192, classWriter0.threshold);
  }

  @Test
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(183);
      classWriter0.visitAnnotation("?expires=", false);
      classWriter0.toByteArray();
      assertEquals(3, classWriter0.index);
      assertEquals(192, classWriter0.threshold);
  }

  @Test
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.invalidFrames = true;
      // Undeclared exception!
      try {
        classWriter0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 51966
         */
      }
  }

  @Test
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(127);
      classWriter0.visitField(127, "", "", "", (Object) classWriter0.invalidFrames);
      assertEquals(3, classWriter0.index);
      assertEquals(192, classWriter0.threshold);
  }

  @Test
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      
      Type type0 = Type.INT_TYPE;
      int int0 = classWriter0.newConst((Object) type0);
      assertEquals(3, classWriter0.index);
      assertEquals(2, int0);
  }

  @Test
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(497);
      int int0 = classWriter0.newMethod("NQjkh\"?a,", "NQjkh\"?a,", "NQjkh\"?a,", true);
      assertEquals(5, classWriter0.index);
      assertEquals(4, int0);
  }

  @Test
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1289);
      assertNotNull(classWriter0);
      
      classWriter0.newMethod("\bn<\"s-", "\bn<\"s-", "\bn<\"s-", false);
      int int0 = classWriter0.newMethod("\bn<\"s-", "\bn<\"s-", "\bn<\"s-", false);
      assertEquals(5, classWriter0.index);
      assertEquals(4, int0);
  }

  @Test
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.newField("", "", "");
      int int0 = classWriter0.newNameType("", "");
      assertEquals(5, classWriter0.index);
      assertEquals(3, int0);
  }

  @Test
  public void test25()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2038));
      classWriter0.addType("S/");
      int int0 = classWriter0.addType("S/");
      assertEquals(1, int0);
      assertEquals(192, classWriter0.threshold);
  }

  @Test
  public void test26()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2038));
      assertNotNull(classWriter0);
      
      classWriter0.addUninitializedType("mmgnCU]HoA6fZe", 90);
      int int0 = classWriter0.addUninitializedType("sDna#HQ\"~MRc0([[Z", 1);
      assertEquals(2, int0);
      assertEquals(192, classWriter0.threshold);
  }

  @Test
  public void test27()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      // Undeclared exception!
      try {
        classWriter0.getMergedType((-1314), 3);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test28()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2038));
      assertNotNull(classWriter0);
      
      classWriter0.newUTF8("sDna#HQ\"~MRc0([[Z");
      int int0 = classWriter0.addType("S/");
      assertEquals(2, classWriter0.index);
      assertEquals(1, int0);
  }

  @Test
  public void test29()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1874));
      assertNotNull(classWriter0);
      
      classWriter0.threshold = (-1874);
      classWriter0.visitSource("", "");
      assertEquals(2, classWriter0.index);
      assertEquals(384, classWriter0.threshold);
  }

  @Test
  public void test30()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1893));
      classWriter0.visitSource("", "");
      classWriter0.threshold = (-779);
      classWriter0.toByteArray();
      assertEquals(384, classWriter0.threshold);
      assertEquals(4, classWriter0.index);
  }
}
