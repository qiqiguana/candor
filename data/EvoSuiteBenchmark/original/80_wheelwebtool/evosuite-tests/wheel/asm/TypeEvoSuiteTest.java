/*
 * This file was automatically generated by EvoSuite
 */

package wheel.asm;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Method;
import org.junit.BeforeClass;
import wheel.asm.Type;

@RunWith(EvoSuiteRunner.class)
public class TypeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Class<?> class0 = AccessibleObject.class;
      Type type0 = Type.getType(class0);
      assertNotNull(type0);
      
      Type type1 = Type.getObjectType("char");
      boolean boolean0 = type0.equals((Object) type1);
      assertEquals(10, type1.getSort());
      assertEquals("Ljava/lang/reflect/AccessibleObject;", type0.getDescriptor());
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      Type type0 = Type.getType("[K0]");
      assertNotNull(type0);
      
      int int0 = type0.getSort();
      assertEquals(1, type0.getDimensions());
      assertEquals("[K", type0.getDescriptor());
      assertEquals(9, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      Class<?> class0 = Object.class;
      String string0 = Type.getInternalName(class0);
      assertEquals("java/lang/Object", string0);
      assertNotNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      Type type0 = Type.INT_TYPE;
      String string0 = type0.toString();
      assertEquals("I", string0);
      assertNotNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try {
        Type.getReturnType((Method) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try {
        Type.getReturnType("TvNcY2]P]||y1!*d");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      Type type0 = Type.getObjectType("PZWJYwl#n4EJI");
      assertNotNull(type0);
      
      String string0 = type0.getInternalName();
      assertEquals(10, type0.getSort());
      assertNotNull(string0);
      assertEquals("PZWJYwl#n4EJI", string0);
      assertEquals("LPZWJYwl#n4EJI;", type0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      Type type0 = Type.getObjectType("[K0]");
      assertEquals(1, type0.getDimensions());
      assertEquals("[K0]", type0.toString());
      assertNotNull(type0);
  }

  @Test
  public void test8()  throws Throwable  {
      Type[] typeArray0 = Type.getArgumentTypes("(ZZCCZZZZ)Z");
      assertNotNull(typeArray0);
  }

  @Test
  public void test9()  throws Throwable  {
      // Undeclared exception!
      try {
        Type.getArgumentTypes("bpSL8;fFQ};_");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try {
        Type.getArgumentTypes("d+NZ8KV%x!~Y['WCo,");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try {
        Type.getArgumentTypes(";Hw);G$<6onR");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      Type type0 = Type.getReturnType("Bmlp6HB\"29hY_Y&f");
      assertNotNull(type0);
      assertEquals("B", type0.toString());
  }

  @Test
  public void test13()  throws Throwable  {
      Type type0 = Type.getType("Dv~.qB6@");
      assertNotNull(type0);
      
      String string0 = type0.getClassName();
      assertEquals("double", string0);
      assertNotNull(string0);
  }

  @Test
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try {
        Type.getReturnType("EWpMj@Y");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test15()  throws Throwable  {
      Type type0 = Type.getReturnType("F");
      assertNotNull(type0);
      assertEquals("float", type0.getClassName());
  }

  @Test
  public void test16()  throws Throwable  {
      Type type0 = Type.getType("I");
      assertNotNull(type0);
      assertEquals("int", type0.getClassName());
  }

  @Test
  public void test17()  throws Throwable  {
      Type type0 = Type.getReturnType("J_Ek @svUD");
      assertNotNull(type0);
      
      int int0 = type0.getSize();
      assertEquals(2, int0);
      assertEquals("long", type0.getClassName());
  }

  @Test
  public void test18()  throws Throwable  {
      Type type0 = Type.getType("[K0]");
      assertNotNull(type0);
      
      // Undeclared exception!
      try {
        type0.getElementType();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try {
        Type.getReturnType("M`,|");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try {
        Type.getType("Np%i[{xq{We@uM(D");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try {
        Type.getType("OP*#KMA9tT9F");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try {
        Type.getType("PH");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try {
        Type.getType("QLc)@#c%N3{ I#");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try {
        Type.getType("R");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test25()  throws Throwable  {
      Type type0 = Type.getType("[S");
      assertNotNull(type0);
      
      String string0 = type0.getClassName();
      assertEquals("[S", type0.getInternalName());
      assertNotNull(string0);
      assertEquals("short[]", string0);
  }

  @Test
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try {
        Type.getType("Uq`C&^%l?*1A");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test27()  throws Throwable  {
      Type type0 = Type.getReturnType("(VV)V");
      assertNotNull(type0);
      assertEquals("void", type0.getClassName());
  }

  @Test
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try {
        Type.getType("WQ");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try {
        Type.getType("X4hzHtq3K@YhjWSLy");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try {
        Type.getReturnType("Yh+C^4m\"");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try {
        Type.getType(".p|PuD#ff(4}f)&");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test32()  throws Throwable  {
      Type type0 = Type.VOID_TYPE;
      String string0 = type0.getClassName();
      assertNotNull(string0);
      assertEquals("void", string0);
  }

  @Test
  public void test33()  throws Throwable  {
      Type type0 = Type.BOOLEAN_TYPE;
      String string0 = type0.getClassName();
      assertNotNull(string0);
      assertEquals("boolean", string0);
  }

  @Test
  public void test34()  throws Throwable  {
      Type[] typeArray0 = new Type[8];
      Type type0 = Type.CHAR_TYPE;
      typeArray0[2] = type0;
      String string0 = typeArray0[2].getClassName();
      assertEquals("char", string0);
      assertNotNull(string0);
  }

  @Test
  public void test35()  throws Throwable  {
      Type type0 = Type.BYTE_TYPE;
      String string0 = type0.getClassName();
      assertEquals("byte", string0);
      assertNotNull(string0);
  }

  @Test
  public void test36()  throws Throwable  {
      Type type0 = Type.INT_TYPE;
      String string0 = type0.getClassName();
      assertEquals("int", string0);
      assertNotNull(string0);
  }

  @Test
  public void test37()  throws Throwable  {
      Type type0 = Type.FLOAT_TYPE;
      String string0 = type0.getClassName();
      assertEquals("float", string0);
      assertNotNull(string0);
  }

  @Test
  public void test38()  throws Throwable  {
      Type type0 = Type.LONG_TYPE;
      String string0 = type0.getClassName();
      assertNotNull(string0);
      assertEquals("long", string0);
  }

  @Test
  public void test39()  throws Throwable  {
      Type type0 = Type.getObjectType("WQ");
      assertNotNull(type0);
      
      String string0 = type0.getClassName();
      assertNotNull(string0);
      assertEquals(10, type0.getSort());
      assertEquals("WQ", string0);
  }

  @Test
  public void test40()  throws Throwable  {
      Type type0 = Type.VOID_TYPE;
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = type0;
      // Undeclared exception!
      try {
        Type.getMethodDescriptor(type0, typeArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test41()  throws Throwable  {
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[8];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      Type type1 = Type.CHAR_TYPE;
      typeArray0[2] = type1;
      assertEquals("C", type1.toString());
      
      // Undeclared exception!
      try {
        Type.getMethodDescriptor(type0, typeArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test42()  throws Throwable  {
      Type type0 = Type.DOUBLE_TYPE;
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      typeArray0[3] = type0;
      Type type1 = Type.BYTE_TYPE;
      typeArray0[4] = type1;
      String string0 = Type.getMethodDescriptor(type0, typeArray0);
      assertEquals("(DDDDB)D", string0);
      assertNotNull(string0);
  }

  @Test
  public void test43()  throws Throwable  {
      Type type0 = Type.SHORT_TYPE;
      Type[] typeArray0 = new Type[8];
      typeArray0[2] = type0;
      typeArray0[3] = typeArray0[2];
      typeArray0[0] = typeArray0[3];
      // Undeclared exception!
      try {
        Type.getMethodDescriptor(type0, typeArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test44()  throws Throwable  {
      Type type0 = Type.FLOAT_TYPE;
      String string0 = type0.getDescriptor();
      assertEquals("F", string0);
      assertNotNull(string0);
  }

  @Test
  public void test45()  throws Throwable  {
      Type type0 = Type.DOUBLE_TYPE;
      Type[] typeArray0 = new Type[5];
      Type type1 = Type.LONG_TYPE;
      typeArray0[0] = type1;
      assertEquals("J", typeArray0[0].getDescriptor());
      
      // Undeclared exception!
      try {
        Type.getMethodDescriptor(type0, typeArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test46()  throws Throwable  {
      Type type0 = Type.getType("[S");
      assertNotNull(type0);
      
      String string0 = type0.getDescriptor();
      assertEquals("[S", string0);
      assertNotNull(string0);
  }

  @Test
  public void test47()  throws Throwable  {
      Type type0 = Type.getObjectType("J_Ek @svUD");
      assertNotNull(type0);
      
      String string0 = type0.getDescriptor();
      assertNotNull(string0);
      assertEquals(10, type0.getSort());
      assertEquals("LJ_Ek @svUD;", string0);
  }

  @Test
  public void test48()  throws Throwable  {
      Type type0 = Type.BOOLEAN_TYPE;
      int int0 = type0.getSize();
      assertEquals(1, int0);
  }

  @Test
  public void test49()  throws Throwable  {
      Type type0 = Type.DOUBLE_TYPE;
      int int0 = type0.getSize();
      assertEquals(2, int0);
  }

  @Test
  public void test50()  throws Throwable  {
      Type type0 = Type.VOID_TYPE;
      int int0 = type0.getOpcode(46);
      assertEquals(50, int0);
  }

  @Test
  public void test51()  throws Throwable  {
      Type type0 = Type.BOOLEAN_TYPE;
      int int0 = type0.getOpcode(1);
      assertEquals(1, int0);
  }

  @Test
  public void test52()  throws Throwable  {
      Type type0 = Type.DOUBLE_TYPE;
      int int0 = type0.getOpcode(79);
      assertEquals(82, int0);
  }

  @Test
  public void test53()  throws Throwable  {
      Type type0 = Type.SHORT_TYPE;
      int int0 = type0.getOpcode(79);
      assertEquals(86, int0);
  }

  @Test
  public void test54()  throws Throwable  {
      Type[] typeArray0 = new Type[8];
      Type type0 = Type.FLOAT_TYPE;
      typeArray0[3] = type0;
      int int0 = typeArray0[3].getOpcode(79);
      assertEquals(81, int0);
  }

  @Test
  public void test55()  throws Throwable  {
      Type type0 = Type.VOID_TYPE;
      int int0 = type0.getOpcode(0);
      assertEquals(5, int0);
  }

  @Test
  public void test56()  throws Throwable  {
      Type type0 = Type.CHAR_TYPE;
      int int0 = type0.getOpcode((-1479));
      assertEquals((-1479), int0);
  }

  @Test
  public void test57()  throws Throwable  {
      Type type0 = Type.BYTE_TYPE;
      int int0 = type0.getOpcode(65);
      assertEquals(65, int0);
  }

  @Test
  public void test58()  throws Throwable  {
      Type type0 = Type.SHORT_TYPE;
      int int0 = type0.getOpcode(45);
      assertEquals(45, int0);
  }

  @Test
  public void test59()  throws Throwable  {
      Type type0 = Type.INT_TYPE;
      int int0 = type0.getOpcode(0);
      assertEquals(0, int0);
  }

  @Test
  public void test60()  throws Throwable  {
      Type type0 = Type.FLOAT_TYPE;
      int int0 = type0.getOpcode((-4));
      assertEquals((-2), int0);
  }

  @Test
  public void test61()  throws Throwable  {
      Type type0 = Type.LONG_TYPE;
      int int0 = type0.getOpcode((-4));
      assertEquals((-3), int0);
  }

  @Test
  public void test62()  throws Throwable  {
      Type type0 = Type.DOUBLE_TYPE;
      int int0 = type0.getOpcode(76);
      assertEquals(79, int0);
  }

  @Test
  public void test63()  throws Throwable  {
      Type type0 = Type.getObjectType("J_Ek @svUD");
      int int0 = type0.getOpcode(91);
      assertEquals(10, type0.getSort());
      assertEquals(95, int0);
      assertEquals("LJ_Ek @svUD;", type0.getDescriptor());
  }

  @Test
  public void test64()  throws Throwable  {
      Type type0 = Type.getType("Dv~.qB6@");
      assertNotNull(type0);
      
      boolean boolean0 = type0.equals((Object) "Dv~.qB6@");
      assertEquals(false, boolean0);
      assertEquals("double", type0.getClassName());
  }

  @Test
  public void test65()  throws Throwable  {
      Type type0 = Type.getReturnType("J_Ek @svUD");
      assertNotNull(type0);
      
      Type type1 = Type.getObjectType("J_Ek @svUD");
      boolean boolean0 = type0.equals((Object) type1);
      assertEquals(false, boolean0);
      assertEquals("LJ_Ek @svUD;", type1.getDescriptor());
      assertEquals(10, type1.getSort());
      assertEquals("J", type0.toString());
  }

  @Test
  public void test66()  throws Throwable  {
      Type type0 = Type.getType("[K0]");
      assertNotNull(type0);
      
      Type type1 = Type.getType("[K0]");
      boolean boolean0 = type0.equals((Object) type1);
      assertEquals(1, type1.getDimensions());
      assertEquals(true, boolean0);
      assertEquals("[K", type1.getDescriptor());
  }

  @Test
  public void test67()  throws Throwable  {
      Type type0 = Type.getObjectType("java/lang/Object");
      int int0 = type0.hashCode();
      assertEquals((-812121381), int0);
  }

  @Test
  public void test68()  throws Throwable  {
      Type type0 = Type.INT_TYPE;
      int int0 = type0.hashCode();
      assertEquals(65, int0);
  }

  @Test
  public void test69()  throws Throwable  {
      Type type0 = Type.getType("[S");
      assertNotNull(type0);
      
      int int0 = type0.hashCode();
      assertEquals(61523, int0);
      assertEquals(1, type0.getDimensions());
  }
}
