/*
 * This file was automatically generated by EvoSuite
 */

package wheel.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import wheel.ErrorPage;
import wheel.WheelException;
import wheel.components.Component;
import wheel.components.ElExpression;
import wheel.components.StandaloneComponent;
import wheel.util.DynamicSelectModel;

@RunWith(EvoSuiteRunner.class)
public class DynamicSelectModelEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      Component component0 = dynamicSelectModel0.getComponent();
      assertNull(component0);
  }

  @Test
  public void test1()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      dynamicSelectModel0.reset();
  }

  @Test
  public void test2()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      // Undeclared exception!
      try {
        dynamicSelectModel0.getLabel((-1338));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.empty((Object) dynamicSelectModel0);
      assertSame(dynamicSelectModel1, dynamicSelectModel0);
  }

  @Test
  public void test4()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      ErrorPage errorPage0 = new ErrorPage();
      dynamicSelectModel0.setComponent((Component) errorPage0);
      assertEquals(false, errorPage0.isPageRewinding());
  }

  @Test
  public void test5()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      StandaloneComponent standaloneComponent0 = dynamicSelectModel0.getTopLevelComponent();
      assertNull(standaloneComponent0);
  }

  @Test
  public void test6()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.translator("");
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
  }

  @Test
  public void test7()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      dynamicSelectModel0.label("Qnro~b^&;FZ3UwX9l$e");
      dynamicSelectModel0.collection("Qnro~b^&;FZ3UwX9l$e");
      // Undeclared exception!
      try {
        dynamicSelectModel0.validate();
        fail("Expecting exception: WheelException");
      } catch(WheelException e) {
        /*
         * Could not create DynamicSelection model. Value attribute was null or not an el-expression.
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = null;
      try {
        dynamicSelectModel0 = new DynamicSelectModel((ElExpression) null, (ElExpression) null, (ElExpression) null);
        fail("Expecting exception: WheelException");
      } catch(WheelException e) {
        /*
         * Could not create DynamicSelection model. Collection attribute was null or not an el-expression.
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration("");
      dynamicSelectModel0.collection("");
      // Undeclared exception!
      try {
        dynamicSelectModel1.getValue((-175));
        fail("Expecting exception: WheelException");
      } catch(WheelException e) {
        /*
         * Expression  evaluated to null. Can't build a dynamic ISelectModel
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.value("");
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
  }

  @Test
  public void test11()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      ErrorPage errorPage0 = new ErrorPage();
      dynamicSelectModel0.setTopLevelComponent((StandaloneComponent) errorPage0);
      assertNull(errorPage0._classReferenceFromHints());
  }

  @Test
  public void test12()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.collection("0");
      // Undeclared exception!
      try {
        dynamicSelectModel1.getOptionCount();
        fail("Expecting exception: WheelException");
      } catch(WheelException e) {
        /*
         * Expression 0 evaluated to an object that is not an instance of Collection or Object[]. Can't build a dynamic ISelectModel
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration("");
      dynamicSelectModel0.validate();
      assertSame(dynamicSelectModel0, dynamicSelectModel1);
  }

  @Test
  public void test14()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      dynamicSelectModel0.collection("P9%`@p@g6");
      // Undeclared exception!
      try {
        dynamicSelectModel0.validate();
        fail("Expecting exception: WheelException");
      } catch(WheelException e) {
        /*
         * Could not create DynamicSelection model. Label attribute was null or not an el-expression.
         */
      }
  }
}
