/*
 * This file was automatically generated by EvoSuite
 */

package wheel.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import wheel.ErrorPage;
import wheel.WheelException;
import wheel.components.ElExpression;
import wheel.components.StandaloneComponent;
import wheel.components.XmlEntityRef;
import wheel.util.LinkToDomain;

@RunWith(EvoSuiteRunner.class)
public class LinkToDomainEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = "4\\u5e9\\Qpz6";
      ElExpression elExpression0 = errorPage0.el(string0);
      LinkToDomain linkToDomain0 = new LinkToDomain(elExpression0, elExpression0);
      ElExpression elExpression1 = linkToDomain0.getElExpression();
      assertEquals("4\\u5e9\\Qpz6", elExpression1.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = "4\\u5e9\\Qpz6";
      ElExpression elExpression0 = errorPage0.el(string0);
      LinkToDomain linkToDomain0 = new LinkToDomain(elExpression0, elExpression0);
      assertNotNull(linkToDomain0);
      
      int int0 = linkToDomain0.getHashCode();
      assertEquals(0, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = "4\\u5e9\\Qpz6";
      ElExpression elExpression0 = errorPage0.el(string0);
      LinkToDomain linkToDomain0 = new LinkToDomain(elExpression0, elExpression0);
      ElExpression elExpression1 = linkToDomain0.getFieldName();
      assertEquals("4\\u5e9\\Qpz6", elExpression1.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = errorPage0.el("E2&0X3/x!p!d1W7)Y)*>");
      LinkToDomain linkToDomain0 = new LinkToDomain(elExpression0, elExpression0);
      // Undeclared exception!
      try {
        linkToDomain0.copyFromDomain((StandaloneComponent) errorPage0);
        fail("Expecting exception: WheelException");
      } catch(WheelException e) {
        /*
         * Could not bind property E2&0X3/x!p!d1W7)Y)*> in class wheel.ErrorPage
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = "4\\u5e9\\Qpz6";
      ElExpression elExpression0 = errorPage0.el(string0);
      LinkToDomain linkToDomain0 = new LinkToDomain(elExpression0, elExpression0);
      linkToDomain0.getCopy((StandaloneComponent) errorPage0);
      linkToDomain0.writeToDomain((StandaloneComponent) errorPage0);
      assertEquals(false, errorPage0._isBuilt());
  }

  @Test
  public void test5()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression("int");
      LinkToDomain linkToDomain0 = new LinkToDomain(elExpression0, elExpression0);
      assertNotNull(linkToDomain0);
      
      // Undeclared exception!
      try {
        linkToDomain0.writeToDomain((StandaloneComponent) errorPage0);
        fail("Expecting exception: WheelException");
      } catch(WheelException e) {
        /*
         * Could not bind property int in class wheel.ErrorPage
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("' provider '");
      ElExpression elExpression0 = xmlEntityRef0.el("' provider '");
      LinkToDomain linkToDomain0 = new LinkToDomain(elExpression0, elExpression0);
      assertNotNull(linkToDomain0);
      
      ErrorPage errorPage0 = new ErrorPage();
      linkToDomain0.getCopy((StandaloneComponent) errorPage0);
      assertEquals(1753930799, linkToDomain0.getHashCode());
  }
}
