/*
 * This file was automatically generated by EvoSuite
 */

package wheel.persistence;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import wheel.persistence.Scope;
import wheel.persistence.StoredObject;

@RunWith(EvoSuiteRunner.class)
public class StoredObjectEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Object object0 = new Object();
      Scope scope0 = Scope.global;
      StoredObject storedObject0 = new StoredObject(object0, scope0, "", "");
      String string0 = storedObject0.getKey();
      assertEquals("", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      Object object0 = new Object();
      Scope scope0 = Scope.component;
      StoredObject storedObject0 = new StoredObject(object0, scope0, "]");
      Scope scope1 = storedObject0.getScope();
      assertEquals("component", scope1.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      Object object0 = new Object();
      Scope scope0 = Scope.global;
      StoredObject storedObject0 = new StoredObject(object0, scope0, "", "");
      storedObject0.releaseLock();
      assertNull(storedObject0.getPagename());
  }

  @Test
  public void test3()  throws Throwable  {
      Object object0 = new Object();
      Scope scope0 = Scope.global;
      StoredObject storedObject0 = new StoredObject(object0, scope0, "", "");
      Object object1 = storedObject0.getValue();
      assertSame(object0, object1);
  }

  @Test
  public void test4()  throws Throwable  {
      Object object0 = new Object();
      Scope scope0 = Scope.global;
      StoredObject storedObject0 = new StoredObject(object0, scope0, "", "");
      String string0 = storedObject0.toString();
      assertNotNull(string0);
  }

  @Test
  public void test5()  throws Throwable  {
      Scope scope0 = Scope.component;
      StoredObject storedObject0 = new StoredObject((Object) "component", scope0, "component");
      storedObject0.setValue((Object) "page");
      assertEquals(Scope.component, storedObject0.getScope());
  }

  @Test
  public void test6()  throws Throwable  {
      Object object0 = new Object();
      Scope scope0 = Scope.global;
      StoredObject storedObject0 = new StoredObject(object0, scope0, "", "");
      int int0 = storedObject0.getHashCode();
      assertEquals(0, int0);
  }

  @Test
  public void test7()  throws Throwable  {
      Object object0 = new Object();
      Scope scope0 = Scope.component;
      StoredObject storedObject0 = new StoredObject(object0, scope0, "]");
      String string0 = storedObject0.getPagename();
      assertEquals("", string0);
  }

  @Test
  public void test8()  throws Throwable  {
      Scope scope0 = Scope.page;
      StoredObject storedObject0 = new StoredObject((Object) null, scope0, (String) null, (String) null);
      assertNull(storedObject0.getKey());
  }

  @Test
  public void test9()  throws Throwable  {
      Scope scope0 = Scope.request;
      StoredObject storedObject0 = new StoredObject((Object) "request", scope0, "request", "request");
      storedObject0.setHashCode(1094);
      storedObject0.setHashCode(1559);
      assertEquals(1094, storedObject0.getHashCode());
  }
}
