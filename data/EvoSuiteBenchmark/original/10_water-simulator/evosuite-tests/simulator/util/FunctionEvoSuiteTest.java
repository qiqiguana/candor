/*
 * This file was automatically generated by EvoSuite
 */

package simulator.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Iterator;
import java.util.Vector;
import org.junit.BeforeClass;
import simulator.util.Function;
import simulator.util.Linear;
import simulator.util.MetDataFunction;
import simulator.util.Raise;

@RunWith(EvoSuiteRunner.class)
public class FunctionEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Linear linear0 = new Linear((-41.151035F), (-41.151035F));
      assertNotNull(linear0);
      
      Function.FunctionConstant function_FunctionConstant0 = linear0.new FunctionConstant();
      function_FunctionConstant0.getConstantSValue();
      assertEquals(" Y = aX + b ", linear0.getFunctionRepresentation());
      assertEquals("LINEAR", linear0.getFunctionName());
      assertEquals(2, linear0.constantsNumber());
  }

  @Test
  public void test1()  throws Throwable  {
      Linear linear0 = new Linear((-41.151035F), (-41.151035F));
      assertNotNull(linear0);
      
      Function.FunctionConstant function_FunctionConstant0 = linear0.new FunctionConstant();
      boolean boolean0 = function_FunctionConstant0.setConstantValue("LINEAR");
      assertEquals(" Y = aX + b ", linear0.getFunctionRepresentation());
      assertEquals(2, linear0.constantsNumber());
      assertEquals("LINEAR", linear0.getFunctionName());
      assertEquals(true, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      Linear linear0 = new Linear((-41.151035F), (-41.151035F));
      assertNotNull(linear0);
      
      Function.FunctionConstant function_FunctionConstant0 = linear0.new FunctionConstant();
      function_FunctionConstant0.setConstantName("LINEAR");
      assertEquals(2, linear0.constantsNumber());
      assertEquals(" Y = aX + b ", linear0.getFunctionRepresentation());
      assertEquals("LINEAR", linear0.getFunctionName());
  }

  @Test
  public void test3()  throws Throwable  {
      MetDataFunction metDataFunction0 = new MetDataFunction();
      assertNotNull(metDataFunction0);
      
      Function.FunctionConstant function_FunctionConstant0 = metDataFunction0.new FunctionConstant();
      // Undeclared exception!
      try {
        function_FunctionConstant0.asFloat();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      Linear linear0 = new Linear((-41.151035F), (-41.151035F));
      assertNotNull(linear0);
      
      float float0 = linear0.valueFor(1435);
      assertEquals(2, linear0.constantsNumber());
      assertEquals("LINEAR", linear0.getFunctionName());
      assertEquals(" Y = aX + b ", linear0.getFunctionRepresentation());
      assertEquals((-59092.887F), float0, 0.01F);
  }

  @Test
  public void test5()  throws Throwable  {
      MetDataFunction metDataFunction0 = new MetDataFunction();
      assertNotNull(metDataFunction0);
      
      Function.FunctionConstant function_FunctionConstant0 = metDataFunction0.new FunctionConstant();
      function_FunctionConstant0.getConstantName();
      assertEquals(1, metDataFunction0.constantsNumber());
      assertEquals("MetDATA", metDataFunction0.getFunctionName());
      assertEquals(" Y = a * (MetData) ", metDataFunction0.getFunctionRepresentation());
  }

  @Test
  public void test6()  throws Throwable  {
      MetDataFunction metDataFunction0 = new MetDataFunction();
      assertNotNull(metDataFunction0);
      
      String string0 = metDataFunction0.getFunctionName();
      assertEquals("MetDATA", string0);
      assertEquals(1, metDataFunction0.constantsNumber());
      assertEquals(" Y = a * (MetData) ", metDataFunction0.getFunctionRepresentation());
      assertNotNull(string0);
  }

  @Test
  public void test7()  throws Throwable  {
      Linear linear0 = new Linear((-41.151035F), (-41.151035F));
      assertNotNull(linear0);
      assertEquals(2, linear0.constantsNumber());
      
      Vector<String> vector0 = new Vector<String>();
      linear0.setFunctionConstants(vector0);
      assertEquals("LINEAR", linear0.getFunctionName());
  }

  @Test
  public void test8()  throws Throwable  {
      Linear linear0 = new Linear((-41.151035F), (-41.151035F));
      assertNotNull(linear0);
      assertEquals("LINEAR", linear0.getFunctionName());
      
      linear0.setFunctionName("LINEAR");
      assertEquals(" Y = aX + b ", linear0.getFunctionRepresentation());
      assertEquals(2, linear0.constantsNumber());
  }

  @Test
  public void test9()  throws Throwable  {
      Linear linear0 = new Linear((-41.151035F), (-41.151035F));
      assertNotNull(linear0);
      
      String string0 = linear0.getFunctionRepresentation();
      assertNotNull(string0);
      assertEquals(2, linear0.constantsNumber());
      assertEquals(" Y = aX + b ", string0);
      assertEquals("LINEAR", linear0.getFunctionName());
  }

  @Test
  public void test10()  throws Throwable  {
      Linear linear0 = new Linear();
      assertNotNull(linear0);
      
      Iterator<Object> iterator0 = linear0.getFunctionConstants();
      assertEquals("LINEAR", linear0.getFunctionName());
      assertEquals(" Y = aX + b ", linear0.getFunctionRepresentation());
      assertEquals(true, iterator0.hasNext());
      assertNotNull(iterator0);
  }

  @Test
  public void test11()  throws Throwable  {
      Raise raise0 = new Raise();
      assertEquals(" Y = a [ln(X)]^n ", raise0.getFunctionRepresentation());
      assertNotNull(raise0);
      
      raise0.setFunctionRepresentation("LINEAR");
      assertEquals("LN-RAISE", raise0.getFunctionName());
  }

  @Test
  public void test12()  throws Throwable  {
      Linear linear0 = new Linear();
      assertNotNull(linear0);
      
      int int0 = linear0.constantsNumber();
      assertEquals(" Y = aX + b ", linear0.getFunctionRepresentation());
      assertEquals(2, int0);
      assertEquals("LINEAR", linear0.getFunctionName());
  }
}
