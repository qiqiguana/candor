/*
 * This file was automatically generated by EvoSuite
 */

package simulator.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import simulator.util.Random;

@RunWith(EvoSuiteRunner.class)
public class RandomEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Random random0 = new Random((-1706.2507F), 1898.5105F);
      assertNotNull(random0);
      
      float float0 = random0.valueFor((-5));
      assertEquals(2, random0.constantsNumber());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test1()  throws Throwable  {
      Random random0 = new Random();
      random0.setFloat();
      // Undeclared exception!
      try {
        random0.valueFor(759);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      Random random0 = new Random(0.4609021F, 283.13998F);
      assertNotNull(random0);
      
      boolean boolean0 = random0.parseString("l!Iw!uf31k>B+uPet");
      assertEquals(true, boolean0);
      assertEquals(2, random0.constantsNumber());
  }

  @Test
  public void test3()  throws Throwable  {
      Random random0 = new Random(1196.6201F, 1196.6201F);
      assertNotNull(random0);
      
      float float0 = random0.valueFor(714);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(2, random0.constantsNumber());
  }

  @Test
  public void test4()  throws Throwable  {
      Random random0 = new Random(0.4609021F, 0.0F);
      assertNotNull(random0);
      
      float float0 = random0.valueFor((float) 1);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(2, random0.constantsNumber());
  }

  @Test
  public void test5()  throws Throwable  {
      Random random0 = new Random(0.4609021F, 283.13998F);
      assertNotNull(random0);
      
      float float0 = random0.valueFor(0.4609021F);
      assertEquals(283.13998F, float0, 0.01F);
      assertEquals(2, random0.constantsNumber());
  }
}
