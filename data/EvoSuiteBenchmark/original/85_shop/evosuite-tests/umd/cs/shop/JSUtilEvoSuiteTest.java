/*
 * This file was automatically generated by EvoSuite
 */

package umd.cs.shop;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.BufferedReader;
import java.io.CharArrayReader;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import org.junit.BeforeClass;
import umd.cs.shop.JSUtil;

@RunWith(EvoSuiteRunner.class)
public class JSUtilEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      JSUtil.println("^&FC");
  }

  @Test
  public void test1()  throws Throwable  {
      JSUtil.print("");
  }

  @Test
  public void test2()  throws Throwable  {
      StringReader stringReader0 = new StringReader("lvF)03NHIRG2[Se4[");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) stringReader0);
      JSUtil.initParseTable(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
  }

  @Test
  public void test3()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      BufferedReader bufferedReader0 = new BufferedReader((Reader) pipedReader0, 381);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) bufferedReader0);
      JSUtil.printTokenizer(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
  }

  @Test
  public void test4()  throws Throwable  {
      JSUtil.flagParser("Us*ey\"*;+5");
  }

  @Test
  public void test5()  throws Throwable  {
      JSUtil.flagParser("@]Z;ipQ]Oz", (-909));
  }

  @Test
  public void test6()  throws Throwable  {
      JSUtil.flagPlanning("^&FC");
  }

  @Test
  public void test7()  throws Throwable  {
      JSUtil.flagPlanning("lvF)03NHIRG2[Se4[", 0);
  }

  @Test
  public void test8()  throws Throwable  {
      JSUtil.flag10("UEMxO4`!!av(FZ3t+c", 842);
  }

  @Test
  public void test9()  throws Throwable  {
      JSUtil.flag10("7oI)\rk&7(0{Om<sa", (-577));
  }

  @Test
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[3] = '&';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) charArrayReader0);
      String string0 = JSUtil.readWord(streamTokenizer0, (String) null);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals("%%%", string0);
  }

  @Test
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 's';
      charArray0[1] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) charArrayReader0);
      String string0 = JSUtil.readWord(streamTokenizer0, (String) null);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals("%%%", string0);
  }
}
