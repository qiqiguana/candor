/*
 * This file was automatically generated by EvoSuite
 */

package umd.cs.shop;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import umd.cs.shop.JSAllReduction;
import umd.cs.shop.JSListAxioms;
import umd.cs.shop.JSListMethods;
import umd.cs.shop.JSMethod;
import umd.cs.shop.JSPlanningDomain;
import umd.cs.shop.JSReduction;
import umd.cs.shop.JSState;
import umd.cs.shop.JSTaskAtom;

@RunWith(EvoSuiteRunner.class)
public class JSListMethodsEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      JSPlanningDomain jSPlanningDomain0 = new JSPlanningDomain();
      JSListMethods jSListMethods0 = jSPlanningDomain0.methods();
      jSListMethods0.print();
      assertEquals("[]", jSListMethods0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      JSPlanningDomain jSPlanningDomain0 = new JSPlanningDomain();
      JSListMethods jSListMethods0 = jSPlanningDomain0.methods();
      jSListMethods0.add((Object) 0L);
      // Undeclared exception!
      try {
        jSListMethods0.print();
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * java.lang.Long cannot be cast to umd.cs.shop.JSMethod
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      JSTaskAtom jSTaskAtom0 = new JSTaskAtom();
      JSPlanningDomain jSPlanningDomain0 = new JSPlanningDomain();
      JSState jSState0 = new JSState();
      JSReduction jSReduction0 = new JSReduction();
      JSReduction jSReduction1 = jSTaskAtom0.reduce(jSPlanningDomain0, jSState0, jSReduction0);
      assertFalse(jSReduction0.equals(jSReduction1));
  }

  @Test
  public void test3()  throws Throwable  {
      JSPlanningDomain jSPlanningDomain0 = new JSPlanningDomain();
      JSListMethods jSListMethods0 = jSPlanningDomain0.methods();
      JSTaskAtom jSTaskAtom0 = new JSTaskAtom();
      JSAllReduction jSAllReduction0 = new JSAllReduction();
      JSListAxioms jSListAxioms0 = jSPlanningDomain0.axioms();
      JSAllReduction jSAllReduction1 = jSListMethods0.findAllReduction(jSTaskAtom0, (JSState) null, jSAllReduction0, jSListAxioms0);
      assertFalse(jSAllReduction0.equals(jSAllReduction1));
  }

  @Test
  public void test4()  throws Throwable  {
      JSPlanningDomain jSPlanningDomain0 = new JSPlanningDomain();
      JSListMethods jSListMethods0 = jSPlanningDomain0.methods();
      JSTaskAtom jSTaskAtom0 = new JSTaskAtom();
      JSMethod jSMethod0 = new JSMethod();
      jSListMethods0.add((Object) jSMethod0);
      JSAllReduction jSAllReduction0 = new JSAllReduction();
      JSListAxioms jSListAxioms0 = jSPlanningDomain0.axioms();
      // Undeclared exception!
      try {
        jSListMethods0.findAllReduction(jSTaskAtom0, (JSState) null, jSAllReduction0, jSListAxioms0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
