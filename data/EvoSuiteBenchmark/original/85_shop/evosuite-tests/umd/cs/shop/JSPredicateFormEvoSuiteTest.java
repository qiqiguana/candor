/*
 * This file was automatically generated by EvoSuite
 */

package umd.cs.shop;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.CharArrayReader;
import java.io.Reader;
import java.io.StreamTokenizer;
import org.junit.BeforeClass;
import umd.cs.shop.JSParserError;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoSuiteRunner.class)
public class JSPredicateFormEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: JSParserError");
      } catch(JSParserError e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      assertEquals("[]", jSPredicateForm0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(vA0");
        fail("Expecting exception: JSParserError");
      } catch(JSParserError e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(";.c<rMp");
        fail("Expecting exception: JSParserError");
      } catch(JSParserError e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'T';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) charArrayReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSPredicateForm0.print();
  }

  @Test
  public void test5()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.print();
      assertEquals("[]", jSPredicateForm0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) "[]");
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertNotNull(stringBuffer0);
      assertEquals("([])", stringBuffer0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) "[]");
      jSPredicateForm0.add((Object) jSPredicateForm0);
      // Undeclared exception!
      try {
        jSPredicateForm0.toStr();
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * umd.cs.shop.JSPredicateForm cannot be cast to umd.cs.shop.JSTerm
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'T';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) charArrayReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm0);
      jSTerm0.applySubstitutionPF(jSSubstitution0);
  }

  @Test
  public void test9()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      char[] charArray0 = new char[9];
      charArray0[5] = 'R';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) charArrayReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.matches((JSPredicateForm) jSTerm1);
  }

  @Test
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'T';
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      jSPredicateForm0.add((Object) "TT\u0000\u0000\u0000\u0000\u0000");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) charArrayReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.matches(jSPredicateForm0);
  }

  @Test
  public void test11()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      boolean boolean0 = jSPredicateForm0.equals((JSPredicateForm) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) "/");
      boolean boolean0 = jSPredicateForm0.equals(jSPredicateForm0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'T';
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      jSPredicateForm0.add((Object) "TT\u0000\u0000\u0000\u0000\u0000");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) charArrayReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSPredicateForm0.equals((JSPredicateForm) jSTerm0);
  }

  @Test
  public void test14()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) "/");
      jSPredicateForm0.add((Object) "/");
      // Undeclared exception!
      try {
        jSPredicateForm0.equals(jSPredicateForm0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * java.lang.String cannot be cast to umd.cs.shop.JSTerm
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'T';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) charArrayReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.standarizerPredicateForm();
  }

  @Test
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[1] = 'K';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) charArrayReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) "Token[EOF], line 1");
      // Undeclared exception!
      try {
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * java.lang.String cannot be cast to umd.cs.shop.JSTerm
         */
      }
  }
}
