/*
 * This file was automatically generated by EvoSuite
 */

package umd.cs.shop;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.Reader;
import java.io.StreamTokenizer;
import org.junit.BeforeClass;
import umd.cs.shop.JSParserError;
import umd.cs.shop.JSPlanningProblem;

@RunWith(EvoSuiteRunner.class)
public class JSPlanningProblemEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[5] = ' ';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0, (int) 'g');
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) lineNumberReader0);
      JSPlanningProblem jSPlanningProblem0 = null;
      try {
        jSPlanningProblem0 = new JSPlanningProblem(streamTokenizer0);
        fail("Expecting exception: JSParserError");
      } catch(JSParserError e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-495), (-495));
      InputStreamReader inputStreamReader0 = new InputStreamReader((InputStream) byteArrayInputStream0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) inputStreamReader0);
      JSPlanningProblem jSPlanningProblem0 = null;
      try {
        jSPlanningProblem0 = new JSPlanningProblem(streamTokenizer0);
        fail("Expecting exception: JSParserError");
      } catch(JSParserError e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[6] = ')';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader((Reader) charArrayReader0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) bufferedReader0);
      JSPlanningProblem jSPlanningProblem0 = null;
      try {
        jSPlanningProblem0 = new JSPlanningProblem(streamTokenizer0);
        fail("Expecting exception: JSParserError");
      } catch(JSParserError e) {
      }
  }
}
