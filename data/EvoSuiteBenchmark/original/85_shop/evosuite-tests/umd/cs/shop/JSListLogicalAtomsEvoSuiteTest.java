/*
 * This file was automatically generated by EvoSuite
 */

package umd.cs.shop;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.CharArrayReader;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import org.junit.BeforeClass;
import umd.cs.shop.JSListLogicalAtoms;
import umd.cs.shop.JSParserError;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;

@RunWith(EvoSuiteRunner.class)
public class JSListLogicalAtomsEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      JSListLogicalAtoms jSListLogicalAtoms0 = new JSListLogicalAtoms();
      String string0 = jSListLogicalAtoms0.Label();
      assertEquals("", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      JSListLogicalAtoms jSListLogicalAtoms0 = new JSListLogicalAtoms();
      jSListLogicalAtoms0.setName("|");
      assertEquals("", jSListLogicalAtoms0.Label());
  }

  @Test
  public void test2()  throws Throwable  {
      JSListLogicalAtoms jSListLogicalAtoms0 = new JSListLogicalAtoms();
      String string0 = jSListLogicalAtoms0.Name();
      assertEquals("", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      StringReader stringReader0 = new StringReader("M:/M");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) stringReader0);
      JSListLogicalAtoms jSListLogicalAtoms0 = null;
      try {
        jSListLogicalAtoms0 = new JSListLogicalAtoms(streamTokenizer0);
        fail("Expecting exception: JSParserError");
      } catch(JSParserError e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '?';
      charArray0[4] = '~';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) charArrayReader0);
      JSListLogicalAtoms jSListLogicalAtoms0 = new JSListLogicalAtoms(streamTokenizer0);
      JSListLogicalAtoms jSListLogicalAtoms1 = null;
      try {
        jSListLogicalAtoms1 = new JSListLogicalAtoms(streamTokenizer0);
        fail("Expecting exception: JSParserError");
      } catch(JSParserError e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nil");
      PushbackReader pushbackReader0 = new PushbackReader((Reader) stringReader0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) pushbackReader0);
      JSListLogicalAtoms jSListLogicalAtoms0 = new JSListLogicalAtoms(streamTokenizer0);
  }

  @Test
  public void test6()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '(';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) charArrayReader0);
      JSListLogicalAtoms jSListLogicalAtoms0 = null;
      try {
        jSListLogicalAtoms0 = new JSListLogicalAtoms(streamTokenizer0);
        fail("Expecting exception: JSParserError");
      } catch(JSParserError e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '(';
      charArray0[1] = '<';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) charArrayReader0);
      JSListLogicalAtoms jSListLogicalAtoms0 = null;
      try {
        jSListLogicalAtoms0 = new JSListLogicalAtoms(streamTokenizer0);
        fail("Expecting exception: JSParserError");
      } catch(JSParserError e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      JSListLogicalAtoms jSListLogicalAtoms0 = new JSListLogicalAtoms();
      jSListLogicalAtoms0.add((Object) null);
      jSListLogicalAtoms0.print();
      assertEquals(10, jSListLogicalAtoms0.capacity());
  }

  @Test
  public void test9()  throws Throwable  {
      JSListLogicalAtoms jSListLogicalAtoms0 = new JSListLogicalAtoms();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSListLogicalAtoms0.add((Object) jSPredicateForm0);
      jSListLogicalAtoms0.print();
      assertEquals("", jSListLogicalAtoms0.Label());
  }

  @Test
  public void test10()  throws Throwable  {
      JSListLogicalAtoms jSListLogicalAtoms0 = new JSListLogicalAtoms();
      JSListLogicalAtoms jSListLogicalAtoms1 = jSListLogicalAtoms0.standarizerListLogicalAtoms();
      assertNotNull(jSListLogicalAtoms1);
      assertNotSame(jSListLogicalAtoms1, jSListLogicalAtoms0);
  }

  @Test
  public void test11()  throws Throwable  {
      JSListLogicalAtoms jSListLogicalAtoms0 = new JSListLogicalAtoms();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSListLogicalAtoms0.add((Object) jSPredicateForm0);
      // Undeclared exception!
      try {
        jSListLogicalAtoms0.standarizerListLogicalAtoms();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 0 >= 0
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      JSListLogicalAtoms jSListLogicalAtoms0 = new JSListLogicalAtoms();
      JSListLogicalAtoms jSListLogicalAtoms1 = jSListLogicalAtoms0.applySubstitutionListLogicalAtoms((JSSubstitution) null);
      assertNotNull(jSListLogicalAtoms1);
      
      jSListLogicalAtoms0.add((Object) null);
      jSListLogicalAtoms1.addElements(jSListLogicalAtoms0);
      // Undeclared exception!
      try {
        jSListLogicalAtoms1.applySubstitutionListLogicalAtoms((JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '?';
      charArray0[4] = '~';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) charArrayReader0);
      JSListLogicalAtoms jSListLogicalAtoms0 = new JSListLogicalAtoms(streamTokenizer0);
      jSListLogicalAtoms0.Cdr();
  }

  @Test
  public void test14()  throws Throwable  {
      JSListLogicalAtoms jSListLogicalAtoms0 = new JSListLogicalAtoms();
      jSListLogicalAtoms0.add((Object) "");
      jSListLogicalAtoms0.add((Object) null);
      JSListLogicalAtoms jSListLogicalAtoms1 = jSListLogicalAtoms0.Cdr();
      assertEquals("[null]", jSListLogicalAtoms1.toString());
      assertNotNull(jSListLogicalAtoms1);
  }
}
