/*
 * This file was automatically generated by EvoSuite
 */

package umd.cs.shop;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.BufferedReader;
import java.io.CharArrayReader;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import org.junit.BeforeClass;
import umd.cs.shop.JSListConjuncts;
import umd.cs.shop.JSParserError;

@RunWith(EvoSuiteRunner.class)
public class JSListConjunctsEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      JSListConjuncts jSListConjuncts0 = new JSListConjuncts();
      jSListConjuncts0.print();
      assertEquals(true, jSListConjuncts0.isEmpty());
  }

  @Test
  public void test1()  throws Throwable  {
      StringReader stringReader0 = new StringReader("dxpectSdY '('");
      BufferedReader bufferedReader0 = new BufferedReader((Reader) stringReader0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) bufferedReader0);
      JSListConjuncts jSListConjuncts0 = null;
      try {
        jSListConjuncts0 = new JSListConjuncts(streamTokenizer0);
        fail("Expecting exception: JSParserError");
      } catch(JSParserError e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) stringReader0);
      JSListConjuncts jSListConjuncts0 = null;
      try {
        jSListConjuncts0 = new JSListConjuncts(streamTokenizer0);
        fail("Expecting exception: JSParserError");
      } catch(JSParserError e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = ')';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) charArrayReader0);
      JSListConjuncts jSListConjuncts0 = new JSListConjuncts(streamTokenizer0);
      jSListConjuncts0.standarizerListConjuncts();
  }

  @Test
  public void test4()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '*';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) charArrayReader0);
      JSListConjuncts jSListConjuncts0 = null;
      try {
        jSListConjuncts0 = new JSListConjuncts(streamTokenizer0);
        fail("Expecting exception: JSParserError");
      } catch(JSParserError e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'F';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader((Reader) charArrayReader0, (int) 'F');
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) bufferedReader0);
      JSListConjuncts jSListConjuncts0 = null;
      try {
        jSListConjuncts0 = new JSListConjuncts(streamTokenizer0);
        fail("Expecting exception: JSParserError");
      } catch(JSParserError e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      JSListConjuncts jSListConjuncts0 = new JSListConjuncts();
      jSListConjuncts0.insertElementAt((Object) "/", 0);
      // Undeclared exception!
      try {
        jSListConjuncts0.print();
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * java.lang.String cannot be cast to umd.cs.shop.JSListLogicalAtoms
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      JSListConjuncts jSListConjuncts0 = new JSListConjuncts();
      jSListConjuncts0.addElement((Object) jSListConjuncts0);
      // Undeclared exception!
      try {
        jSListConjuncts0.standarizerListConjuncts();
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * umd.cs.shop.JSListConjuncts cannot be cast to umd.cs.shop.JSListLogicalAtoms
         */
      }
  }
}
