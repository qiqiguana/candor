/*
 * This file was automatically generated by EvoSuite
 */

package umd.cs.shop;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.BufferedReader;
import java.io.CharArrayReader;
import java.io.LineNumberReader;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.util.Vector;
import org.junit.BeforeClass;
import umd.cs.shop.JSListAxioms;
import umd.cs.shop.JSListMethods;
import umd.cs.shop.JSListOperators;
import umd.cs.shop.JSParserError;
import umd.cs.shop.JSPlanningDomain;
import umd.cs.shop.JSPlanningProblem;

@RunWith(EvoSuiteRunner.class)
public class JSPlanningDomainEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      JSPlanningDomain jSPlanningDomain0 = new JSPlanningDomain();
      // Undeclared exception!
      try {
        jSPlanningDomain0.solveAll((JSPlanningProblem) null, true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      JSPlanningDomain jSPlanningDomain0 = new JSPlanningDomain();
      jSPlanningDomain0.print();
  }

  @Test
  public void test2()  throws Throwable  {
      JSPlanningDomain jSPlanningDomain0 = new JSPlanningDomain();
      JSListMethods jSListMethods0 = jSPlanningDomain0.methods();
      assertEquals(10, jSListMethods0.capacity());
  }

  @Test
  public void test3()  throws Throwable  {
      JSPlanningDomain jSPlanningDomain0 = new JSPlanningDomain();
      JSListOperators jSListOperators0 = jSPlanningDomain0.operators();
      // Undeclared exception!
      try {
        jSPlanningDomain0.solve((JSPlanningProblem) null, (Vector) jSListOperators0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      JSPlanningDomain jSPlanningDomain0 = new JSPlanningDomain();
      JSListAxioms jSListAxioms0 = jSPlanningDomain0.axioms();
      assertEquals(10, jSListAxioms0.capacity());
  }

  @Test
  public void test5()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = ')';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader((Reader) charArrayReader0);
      PushbackReader pushbackReader0 = new PushbackReader((Reader) bufferedReader0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) pushbackReader0);
      JSPlanningDomain jSPlanningDomain0 = null;
      try {
        jSPlanningDomain0 = new JSPlanningDomain(streamTokenizer0);
        fail("Expecting exception: JSParserError");
      } catch(JSParserError e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = ')';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSPlanningDomain jSPlanningDomain0 = new JSPlanningDomain();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) charArrayReader0);
      jSPlanningDomain0.parserOpsMethsAxs(streamTokenizer0);
      JSPlanningDomain jSPlanningDomain1 = null;
      try {
        jSPlanningDomain1 = new JSPlanningDomain(streamTokenizer0);
        fail("Expecting exception: JSParserError");
      } catch(JSParserError e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      JSPlanningDomain jSPlanningDomain0 = new JSPlanningDomain();
      char[] charArray0 = new char[9];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) charArrayReader0);
      // Undeclared exception!
      try {
        jSPlanningDomain0.parserOpsMethsAxs(streamTokenizer0);
        fail("Expecting exception: JSParserError");
      } catch(JSParserError e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      JSPlanningDomain jSPlanningDomain0 = new JSPlanningDomain();
      char[] charArray0 = new char[8];
      charArray0[0] = '>';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) lineNumberReader0);
      // Undeclared exception!
      try {
        jSPlanningDomain0.parserOpsMethsAxs(streamTokenizer0);
        fail("Expecting exception: JSParserError");
      } catch(JSParserError e) {
      }
  }
}
