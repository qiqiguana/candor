/*
 * This file was automatically generated by EvoSuite
 */

package umd.cs.shop;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.BufferedReader;
import java.io.CharArrayReader;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import org.junit.BeforeClass;
import umd.cs.shop.JSParserError;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoSuiteRunner.class)
public class JSTermEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm0);
      assertEquals(0, jSSubstitution0.size());
  }

  @Test
  public void test1()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try {
        jSTerm0.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 0 >= 0
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[1] = '1';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader((Reader) charArrayReader0, 45);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) bufferedReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm0);
      jSTerm0.applySubstitutionT(jSSubstitution0);
  }

  @Test
  public void test3()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      // Undeclared exception!
      try {
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 0 >= 0
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: JSParserError");
      } catch(JSParserError e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(~J");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) stringReader0);
      // Undeclared exception!
      try {
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: JSParserError");
      } catch(JSParserError e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) stringReader0);
      // Undeclared exception!
      try {
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: JSParserError");
      } catch(JSParserError e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'V';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) charArrayReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.matches(jSTerm0);
  }

  @Test
  public void test8()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[2] = '@';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader((Reader) charArrayReader0, 45);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) bufferedReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: JSParserError");
      } catch(JSParserError e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("CzNxY>` Wf*@~!\"Lz");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) stringReader0);
      // Undeclared exception!
      try {
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: JSParserError");
      } catch(JSParserError e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.insertElementAt(object0, 0);
      jSTerm0.print();
      assertEquals(10, jSTerm0.capacity());
  }

  @Test
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.add(object0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm1.equals(jSTerm0));
  }

  @Test
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.add((Object) "");
      jSTerm0.matches(jSTerm0);
      assertEquals(false, jSTerm0.isGround());
      assertEquals(true, jSTerm0.isVariable());
  }

  @Test
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSTerm0);
      JSTerm jSTerm1 = jSTerm0.call();
      assertNotNull(jSTerm1);
      
      // Undeclared exception!
      try {
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
      }
  }

  @Test
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "-:wV");
      jSTerm0.add((Object) jSTerm0);
      jSTerm1.add((Object) jSTerm1);
      JSTerm jSTerm2 = jSTerm0.call();
      assertNotNull(jSTerm2);
      
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm2);
      assertEquals(false, jSTerm2.isConstant());
      assertEquals("[[(this Collection)]]", jSTerm2.toString());
      assertNotNull(jSSubstitution0);
      assertEquals(true, jSTerm2.isFunction());
      assertTrue(jSTerm2.equals(jSTerm0));
  }

  @Test
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try {
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 0 >= 0
         */
      }
  }

  @Test
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.isGround();
      assertEquals(true, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'B';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) charArrayReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isGround();
  }

  @Test
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try {
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 0 >= 0
         */
      }
  }

  @Test
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'B';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) charArrayReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.standardizerTerm();
  }

  @Test
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'B';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) charArrayReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.call();
  }

  @Test
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = jSTerm0.call();
      assertEquals(true, jSTerm0.isVariable());
      assertEquals(false, jSTerm1.isGround());
  }
}
