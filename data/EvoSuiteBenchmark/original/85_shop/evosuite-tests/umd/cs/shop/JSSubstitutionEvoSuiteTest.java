/*
 * This file was automatically generated by EvoSuite
 */

package umd.cs.shop;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import umd.cs.shop.JSPairVarTerm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoSuiteRunner.class)
public class JSSubstitutionEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.print();
      assertEquals(false, jSSubstitution0.fail());
  }

  @Test
  public void test1()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm0, (JSSubstitution) null);
      JSSubstitution jSSubstitution1 = jSSubstitution0.cloneS();
      jSSubstitution1.addElement((Object) ":");
      jSSubstitution1.add((Object) ":");
      // Undeclared exception!
      try {
        jSSubstitution0.addElements(jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * java.lang.String cannot be cast to umd.cs.shop.JSPairVarTerm
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.instance((JSTerm) null);
      assertEquals(false, jSSubstitution0.fail());
  }

  @Test
  public void test3()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPairVarTerm jSPairVarTerm0 = new JSPairVarTerm((JSTerm) null, (JSTerm) null);
      jSSubstitution0.addElement((Object) jSPairVarTerm0);
      // Undeclared exception!
      try {
        jSSubstitution0.cloneS();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSSubstitution0.standarizerSubs();
      JSPairVarTerm jSPairVarTerm0 = new JSPairVarTerm((JSTerm) null, (JSTerm) null);
      jSSubstitution1.addElement((Object) jSPairVarTerm0);
      jSSubstitution0.addElements(jSSubstitution1);
      assertEquals(false, jSSubstitution0.isEmpty());
      assertTrue(jSSubstitution0.equals(jSSubstitution1));
  }

  @Test
  public void test5()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution0.removeElements(jSSubstitution0);
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(0, jSSubstitution0.size());
  }

  @Test
  public void test6()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm0, (JSSubstitution) null);
      jSSubstitution0.print();
      assertEquals(true, jSSubstitution0.fail());
  }
}
