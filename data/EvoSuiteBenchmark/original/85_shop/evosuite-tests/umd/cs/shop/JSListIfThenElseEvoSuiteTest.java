/*
 * This file was automatically generated by EvoSuite
 */

package umd.cs.shop;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Vector;
import org.junit.BeforeClass;
import umd.cs.shop.JSListAxioms;
import umd.cs.shop.JSListIfThenElse;
import umd.cs.shop.JSParserError;
import umd.cs.shop.JSPlanningDomain;
import umd.cs.shop.JSState;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTasks;

@RunWith(EvoSuiteRunner.class)
public class JSListIfThenElseEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      JSListIfThenElse jSListIfThenElse0 = new JSListIfThenElse();
      jSListIfThenElse0.print();
      assertEquals(true, jSListIfThenElse0.isEmpty());
  }

  @Test
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)42;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputStreamReader inputStreamReader0 = new InputStreamReader((InputStream) byteArrayInputStream0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) inputStreamReader0);
      JSListIfThenElse jSListIfThenElse0 = null;
      try {
        jSListIfThenElse0 = new JSListIfThenElse(streamTokenizer0);
        fail("Expecting exception: JSParserError");
      } catch(JSParserError e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) stringReader0);
      char[] charArray0 = new char[2];
      stringReader0.read(charArray0);
      JSListIfThenElse jSListIfThenElse0 = null;
      try {
        jSListIfThenElse0 = new JSListIfThenElse(streamTokenizer0);
        fail("Expecting exception: JSParserError");
      } catch(JSParserError e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[6] = (byte) (-7);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputStreamReader inputStreamReader0 = new InputStreamReader((InputStream) byteArrayInputStream0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) inputStreamReader0);
      JSListIfThenElse jSListIfThenElse0 = null;
      try {
        jSListIfThenElse0 = new JSListIfThenElse(streamTokenizer0);
        fail("Expecting exception: JSParserError");
      } catch(JSParserError e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[3] = ')';
      charArray0[2] = 'c';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader((Reader) charArrayReader0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) bufferedReader0);
      JSListIfThenElse jSListIfThenElse0 = null;
      try {
        jSListIfThenElse0 = new JSListIfThenElse(streamTokenizer0);
        fail("Expecting exception: JSParserError");
      } catch(JSParserError e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      JSListIfThenElse jSListIfThenElse0 = new JSListIfThenElse();
      jSListIfThenElse0.add((Object) "+h~8{n|ot(/$V(J2");
      // Undeclared exception!
      try {
        jSListIfThenElse0.print();
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * java.lang.String cannot be cast to umd.cs.shop.JSPairIfThen
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      JSListIfThenElse jSListIfThenElse0 = new JSListIfThenElse();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSListAxioms jSListAxioms0 = new JSListAxioms();
      JSTasks jSTasks0 = jSListIfThenElse0.evalPrec((JSState) null, jSSubstitution0, jSListAxioms0);
      assertEquals(true, jSTasks0.fail());
      assertNotNull(jSTasks0);
  }

  @Test
  public void test7()  throws Throwable  {
      JSListIfThenElse jSListIfThenElse0 = new JSListIfThenElse();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSListAxioms jSListAxioms0 = new JSListAxioms();
      jSListIfThenElse0.add((Object) jSSubstitution0);
      // Undeclared exception!
      try {
        jSListIfThenElse0.evalPrec((JSState) null, jSSubstitution0, jSListAxioms0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSPairIfThen
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      JSListIfThenElse jSListIfThenElse0 = new JSListIfThenElse();
      JSPlanningDomain jSPlanningDomain0 = new JSPlanningDomain();
      JSListAxioms jSListAxioms0 = jSPlanningDomain0.axioms();
      Vector<Object> vector0 = jSListIfThenElse0.evalPrecAll((JSState) null, (JSSubstitution) null, jSListAxioms0);
      assertEquals(0, vector0.size());
  }

  @Test
  public void test9()  throws Throwable  {
      JSListIfThenElse jSListIfThenElse0 = new JSListIfThenElse();
      jSListIfThenElse0.add((Object) null);
      JSPlanningDomain jSPlanningDomain0 = new JSPlanningDomain();
      JSListAxioms jSListAxioms0 = jSPlanningDomain0.axioms();
      // Undeclared exception!
      try {
        jSListIfThenElse0.evalPrecAll((JSState) null, (JSSubstitution) null, jSListAxioms0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      JSListIfThenElse jSListIfThenElse0 = new JSListIfThenElse();
      JSListIfThenElse jSListIfThenElse1 = jSListIfThenElse0.standarizerListIfTE();
      assertNotNull(jSListIfThenElse1);
      assertNotSame(jSListIfThenElse1, jSListIfThenElse0);
  }

  @Test
  public void test11()  throws Throwable  {
      JSListIfThenElse jSListIfThenElse0 = new JSListIfThenElse();
      jSListIfThenElse0.add(0, (Object) jSListIfThenElse0);
      // Undeclared exception!
      try {
        jSListIfThenElse0.standarizerListIfTE();
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * umd.cs.shop.JSListIfThenElse cannot be cast to umd.cs.shop.JSPairIfThen
         */
      }
  }
}
