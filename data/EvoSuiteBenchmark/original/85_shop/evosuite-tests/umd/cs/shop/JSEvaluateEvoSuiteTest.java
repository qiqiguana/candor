/*
 * This file was automatically generated by EvoSuite
 */

package umd.cs.shop;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import umd.cs.shop.JSEvaluate;
import umd.cs.shop.JSTerm;

@RunWith(EvoSuiteRunner.class)
public class JSEvaluateEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.addsub((float) 1L, (float) 1L, 37);
      assertEquals("[38.0]", jSTerm0.toString());
      assertEquals(true, jSTerm0.isConstant());
  }

  @Test
  public void test1()  throws Throwable  {
      JSEvaluate jSEvaluate0 = new JSEvaluate();
      assertNotNull(jSEvaluate0);
  }

  @Test
  public void test2()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.mult((float) 0L, (float) 0L);
      JSTerm jSTerm1 = JSEvaluate.applyOperatorUnary("not", jSTerm0);
      assertNotNull(jSTerm1);
      assertEquals("[0.0]", jSTerm0.toString());
      assertEquals(true, jSTerm0.isConstant());
      assertEquals(false, jSTerm1.isConstant());
  }

  @Test
  public void test3()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.floor((float) 1298L);
      JSTerm jSTerm1 = JSEvaluate.applyOperator(">d", jSTerm0, jSTerm0);
      assertEquals("[1298.0]", jSTerm0.toString());
      assertEquals(true, jSTerm0.isConstant());
      assertEquals(false, jSTerm1.isConstant());
      assertNotNull(jSTerm1);
  }

  @Test
  public void test4()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.greaterequal((-446.88623F), (-3.1356442F));
      // Undeclared exception!
      try {
        JSEvaluate.applyOperator("r.Fxx&Ng7Un(Rh]:9\"", jSTerm0, jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 0 >= 0
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.ceil(1.0F);
      jSTerm0.add((Object) jSTerm0);
      JSEvaluate.applyOperatorUnary("r", jSTerm0);
      assertEquals(2, jSTerm0.size());
      assertEquals("[1.0, (this Collection)]", jSTerm0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.div(1677.4355F, (-1.0F));
      assertEquals(true, jSTerm0.isConstant());
      assertEquals("[-1677.4355]", jSTerm0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.div((float) 0L, (float) 0L);
      assertEquals("[]", jSTerm0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.greater(1585.4467F, 1507.9133F);
      assertEquals("[t]", jSTerm0.toString());
      assertEquals(true, jSTerm0.isConstant());
  }

  @Test
  public void test9()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.greater(221.29706F, 221.29706F);
      assertEquals(0, jSTerm0.size());
  }

  @Test
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.greaterequal((-3.1356442F), (-3.1356442F));
      JSTerm jSTerm1 = JSEvaluate.applyOperator("r.Fxx&Ng7Un(Rh]:9\"", jSTerm0, jSTerm0);
      assertNotNull(jSTerm1);
      
      JSTerm jSTerm2 = JSEvaluate.member(jSTerm1, jSTerm1);
      assertEquals("[t]", jSTerm0.toString());
      assertEquals(true, jSTerm0.isConstant());
      assertNotNull(jSTerm2);
  }

  @Test
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.equal(0.0F, 0.0F);
      JSTerm jSTerm1 = JSEvaluate.minElement(jSTerm0);
      assertEquals("[t]", jSTerm0.toString());
      assertNotNull(jSTerm1);
      assertEquals(true, jSTerm0.isConstant());
      assertEquals(false, jSTerm1.isConstant());
  }

  @Test
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.equal((-1.0F), 1677.4355F);
      JSTerm jSTerm1 = JSEvaluate.maxElement(jSTerm0);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals(jSTerm0));
      assertNotNull(jSTerm1);
  }

  @Test
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.notequal((-176.5001F), 10.539635F);
      assertEquals("[t]", jSTerm0.toString());
      assertEquals(true, jSTerm0.isConstant());
  }

  @Test
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.maxOf((-1776.912F), (-1776.912F));
      JSTerm jSTerm1 = JSEvaluate.applyOperator("notequal", jSTerm0, jSTerm0);
      assertEquals(true, jSTerm0.isConstant());
      assertEquals("[-1776.912]", jSTerm0.toString());
      assertEquals("[]", jSTerm1.toString());
      assertNotNull(jSTerm1);
  }

  @Test
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.minOf((-1560.3221F), (-1560.3221F));
      JSTerm jSTerm1 = JSEvaluate.applyOperatorUnary("ceil", jSTerm0);
      assertEquals("[-1560.0]", jSTerm1.toString());
      assertNotNull(jSTerm1);
      assertEquals(true, jSTerm1.isConstant());
      assertEquals(true, jSTerm0.isConstant());
  }

  @Test
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.minOf((-176.5001F), 10.539635F);
      assertEquals(true, jSTerm0.isConstant());
      assertEquals("[-176.5001]", jSTerm0.toString());
  }

  @Test
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.maxOf((-3.1356442F), (-446.88623F));
      assertEquals("[-3.1356442]", jSTerm0.toString());
      assertEquals(true, jSTerm0.isConstant());
  }

  @Test
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.ceil(1585.4467F);
      JSTerm jSTerm1 = JSEvaluate.applyOperator("<", jSTerm0, jSTerm0);
      assertEquals(true, jSTerm0.isConstant());
      assertEquals("[1586.0]", jSTerm0.toString());
      assertEquals(true, jSTerm1.isConstant());
      assertEquals("[t]", jSTerm1.toString());
      assertNotNull(jSTerm1);
  }

  @Test
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.floor(3.4028235E38F);
      JSTerm jSTerm1 = JSEvaluate.applyOperator("member", jSTerm0, jSTerm0);
      assertNotNull(jSTerm1);
      
      JSTerm jSTerm2 = JSEvaluate.not(jSTerm1);
      assertEquals("[2.14748365E9]", jSTerm0.toString());
      assertEquals(true, jSTerm0.isConstant());
      assertEquals(true, jSTerm2.isConstant());
      assertEquals("[t]", jSTerm2.toString());
  }

  @Test
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.floor(221.29706F);
      JSTerm jSTerm1 = JSEvaluate.maxElement(jSTerm0);
      assertNotNull(jSTerm1);
      
      JSTerm jSTerm2 = JSEvaluate.minElement(jSTerm1);
      assertNotNull(jSTerm2);
      assertNotSame(jSTerm1, jSTerm2);
      assertTrue(jSTerm1.equals(jSTerm2));
      assertEquals(true, jSTerm0.isConstant());
      assertEquals("[221.0]", jSTerm0.toString());
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = JSEvaluate.OperantNum("not");
      assertEquals(1, int0);
  }

  @Test
  public void test22()  throws Throwable  {
      int int0 = JSEvaluate.OperantNum("Line ");
      assertEquals(2, int0);
  }

  @Test
  public void test23()  throws Throwable  {
      int int0 = JSEvaluate.OperantNum("floor");
      assertEquals(1, int0);
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = JSEvaluate.OperantNum("ceil");
      assertEquals(1, int0);
  }

  @Test
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.floor(221.29706F);
      JSTerm jSTerm1 = JSEvaluate.applyOperator("max", jSTerm0, jSTerm0);
      assertNotNull(jSTerm1);
      assertEquals(true, jSTerm1.isConstant());
      assertEquals(true, jSTerm0.isConstant());
      assertEquals("[221.0]", jSTerm1.toString());
  }

  @Test
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.mult(0.0F, 0.0F);
      JSTerm jSTerm1 = JSEvaluate.applyOperatorUnary("foFor", jSTerm0);
      assertNotNull(jSTerm1);
      assertEquals("[0.0]", jSTerm0.toString());
      assertEquals("[]", jSTerm1.toString());
      assertEquals(true, jSTerm0.isConstant());
  }
}
