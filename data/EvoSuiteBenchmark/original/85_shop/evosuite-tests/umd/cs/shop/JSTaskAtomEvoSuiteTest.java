/*
 * This file was automatically generated by EvoSuite
 */

package umd.cs.shop;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Vector;
import org.junit.BeforeClass;
import umd.cs.shop.JSJshopNode;
import umd.cs.shop.JSOperator;
import umd.cs.shop.JSPairPlanTState;
import umd.cs.shop.JSPlanningDomain;
import umd.cs.shop.JSReduction;
import umd.cs.shop.JSState;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTState;
import umd.cs.shop.JSTaskAtom;

@RunWith(EvoSuiteRunner.class)
public class JSTaskAtomEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      JSTaskAtom jSTaskAtom0 = new JSTaskAtom();
      boolean boolean0 = jSTaskAtom0.isCompound();
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      JSTaskAtom jSTaskAtom0 = new JSTaskAtom();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTaskAtom0.isPrimitive = true;
      // Undeclared exception!
      try {
        jSTaskAtom0.applySubstitutionTA(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 0 >= 0
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      JSTaskAtom jSTaskAtom0 = new JSTaskAtom();
      JSPlanningDomain jSPlanningDomain0 = new JSPlanningDomain();
      JSTState jSTState0 = new JSTState();
      JSPairPlanTState jSPairPlanTState0 = jSTaskAtom0.seekSimplePlan(jSPlanningDomain0, jSTState0);
      assertEquals(true, jSTaskAtom0.isGround());
      assertNotNull(jSPairPlanTState0);
  }

  @Test
  public void test3()  throws Throwable  {
      JSTaskAtom jSTaskAtom0 = new JSTaskAtom();
      JSJshopNode jSJshopNode0 = new JSJshopNode();
      jSTaskAtom0.add((Object) jSJshopNode0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTaskAtom jSTaskAtom1 = jSTaskAtom0.applySubstitutionTA(jSSubstitution0);
      assertEquals(1, jSTaskAtom0.size());
      assertTrue(jSTaskAtom0.equals(jSTaskAtom1));
  }

  @Test
  public void test4()  throws Throwable  {
      JSTaskAtom jSTaskAtom0 = new JSTaskAtom();
      jSTaskAtom0.add((Object) "[]");
      JSJshopNode jSJshopNode0 = new JSJshopNode();
      jSTaskAtom0.add((Object) jSJshopNode0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try {
        jSTaskAtom0.applySubstitutionTA(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * umd.cs.shop.JSJshopNode cannot be cast to umd.cs.shop.JSTerm
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      JSTaskAtom jSTaskAtom0 = new JSTaskAtom();
      jSTaskAtom0.add((Object) "");
      JSTaskAtom jSTaskAtom1 = jSTaskAtom0.cloneTA();
      assertEquals(1, jSTaskAtom0.size());
      assertTrue(jSTaskAtom0.equals(jSTaskAtom1));
  }

  @Test
  public void test6()  throws Throwable  {
      JSTaskAtom jSTaskAtom0 = new JSTaskAtom();
      JSOperator jSOperator0 = new JSOperator();
      jSTaskAtom0.add((Object) jSOperator0);
      jSTaskAtom0.add((Object) "");
      // Undeclared exception!
      try {
        jSTaskAtom0.cloneTA();
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * java.lang.String cannot be cast to umd.cs.shop.JSTerm
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      JSTaskAtom jSTaskAtom0 = new JSTaskAtom();
      jSTaskAtom0.add((Object) "/mnt/fastdata/ac1gf/SF110/dist/85_shop/nMf/nMf");
      jSTaskAtom0.add((Object) null);
      JSPlanningDomain jSPlanningDomain0 = new JSPlanningDomain();
      // Undeclared exception!
      try {
        jSTaskAtom0.reduce(jSPlanningDomain0, (JSState) null, (JSReduction) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      JSTaskAtom jSTaskAtom0 = new JSTaskAtom();
      jSTaskAtom0.makePrimitive();
      // Undeclared exception!
      try {
        jSTaskAtom0.standarizerTA();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 0 >= 0
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      JSTaskAtom jSTaskAtom0 = new JSTaskAtom();
      jSTaskAtom0.add((Object) "[]");
      JSTaskAtom jSTaskAtom1 = jSTaskAtom0.standarizerTA();
      assertEquals(1, jSTaskAtom0.size());
      assertEquals(false, jSTaskAtom1.isPrimitive());
  }

  @Test
  public void test10()  throws Throwable  {
      JSTaskAtom jSTaskAtom0 = new JSTaskAtom();
      jSTaskAtom0.add((Object) "UTF8");
      jSTaskAtom0.add((Object) "/mnt/fastdata/ac1gf/SF110/dist/85_shop/vNAEqnXtqD6T+9*ae");
      // Undeclared exception!
      try {
        jSTaskAtom0.standarizerTA();
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * java.lang.String cannot be cast to umd.cs.shop.JSTerm
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      JSTaskAtom jSTaskAtom0 = new JSTaskAtom();
      JSJshopNode jSJshopNode0 = new JSJshopNode();
      jSTaskAtom0.add((Object) jSJshopNode0);
      JSJshopNode jSJshopNode1 = jSTaskAtom0.findInList((Vector) jSTaskAtom0);
      assertNotSame(jSJshopNode1, jSJshopNode0);
      assertNotNull(jSJshopNode1);
  }
}
