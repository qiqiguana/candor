;;;  Logistic domain, implemented by Jason Yue Cao(Defdomain logistics   (     ;; basic operators     (:operator (!load-truck ?obj ?truck ?loc)                ()                ((obj-at ?obj ?loc))                ((in-truck ?obj ?truck)))                (:operator (!unload-truck ?obj ?truck ?loc)                ()                ((in-truck ?obj ?truck))                ((obj-at ?obj ?loc)))     (:operator (!load-airplane ?obj ?airplane ?loc)                ()                ((obj-at ?obj ?loc))                ((in-airplane ?obj ?airplane)))     (:operator (!unload-airplane ?obj ?airplane ?loc)                ()                ((in-airplane ?obj ?airplane))                ((obj-at ?obj ?loc)))          (:operator (!drive-truck ?truck ?locfrom ?locto)                ()                ((truck-at ?truck ?locfrom))                ((truck-at ?truck ?locto)))     (:operator (!fly-airplane ?airplane ?airportfrom ?airportto)                ()                ((airplane-at ?airplane ?airportfrom))                ((airplane-at ?airplane ?airportto)))                     ;; book-keeping methods & ops, to keep track of what needs to be done         (:operator (!assert ?g)                ()                ()                ?g                0)     (:operator (!remove ?g)                ()                ?g                ()                0)     (:operator (!do-nothing)                ()                ()                ()                0)     (:method (achieve-goals ?goals)              ()              ((assert-goals ?goals nil)(clean-up) (do-plan1)))     (:method (assert-goals (list ?goal . ?goals) ?out)              ()              ((assert-goals ?goals (list (goal ?goal) . ?out))))     (:method (assert-goals nil ?out)              ()              ((!assert ?out)))     ;; remove irrelavent objects     (:method (clean-up)               (:first (obj-at ?obj-1 ?loc-1)               (not (goal (obj-at ?obj-1 ?x1))))             ((!remove (list (obj-at ?obj-1 ?loc-1)))               (clean-up))     ;; remove goals that already exist in the current state              (:first (goal (obj-at ?obj-2 ?loc-2))               (obj-at ?obj-2 ?loc-2))             ((!remove (list (goal (obj-at ?obj-2 ?loc-2))))               (!remove (list (obj-at ?obj-2 ?loc-2)))               (clean-up))       ;; remove empty airplanes thats in the airport with      ;; another airplane       (:first (airplane-at ?airplane1 ?airport)        (airplane-at ?airplane2 ?airport)        (different ?airplane1 ?airplane2)        (not (in-airplane ?anyobject ?airplane1)))       ((!remove (list (airplane-at ?airplane1 ?airport)))  (clean-up))     ;; remove empty truck thats in the same city with     ;; another truck              (:first (truck ?truck1 ?city-4)                      (truck ?truck2 ?city-4)                      (different ?truck1 ?truck2)                      (truck-at ?truck2 ?loc-4))              ((!remove (list (truck-at ?truck2 ?loc-4)))                (!remove (list (truck ?truck2 ?city-4)))                (clean-up))              ()             ((!do-nothing))    );;;-------------------------------------------------    ;; actual AI planning methods    (:method (drive-truck ?truck ?loc-from ?loc-to)      ((same ?loc-from ?loc-to))     ((!do-nothing))      ()     ((!drive-truck ?truck ?loc-from ?loc-to)))    (:method (drive-truck-to ?truck ?loc-to)             ((truck-at ?truck ?loc-from)              (different ?loc-from ?loc-to))            ((!drive-truck ?truck ?loc-from ?loc-to))             ()            ((!do-nothing)));;;-------------------------------------------------    (:method (load-truck ?obj ?truck ?loc)    ;; ?obj at goal location             ((goal1 (obj-at ?obj ?loc)))            ((!do-nothing))    ;; ?obj at airport and waiting to be delivered to another    ;; city             ((airport ?loc)              (goal1 (obj-at ?obj ?loc-to))              (in-city ?loc-to ?city-to)              (in-city ?loc ?city-now)              (different ?city-now ?city-to))            ((!do-nothing))        ;; everything else             ()            ((!load-truck ?obj ?truck ?loc)));;;-------------------------------------------------    (:method (unload-truck ?obj ?truck ?loc)             ((obj-at ?obj ?loc))            ((!do-nothing))                          ((goal1 (obj-at ?obj ?loc)))            ((!unload-truck ?obj ?truck ?loc)              (!remove (list (goal1 (obj-at ?obj ?loc))))              (!remove ( list (obj-at ?obj ?loc))))             ()            ((!unload-truck ?obj ?truck ?loc)))              ;;;-------------------------------------------------    ;; same city deliver    (:method (do-plan1)      (:first (goal (obj-at ?obj ?loc-goal))       (in-city ?loc-goal ?city-goal)       (obj-at ?obj ?loc-now)       (in-city ?loc-now ?city-goal)       (truck ?truck ?city-goal)             )     ((!remove (list (goal (obj-at ?obj ?loc-goal))))              (!assert (list (goal1 (obj-at ?obj ?loc-goal))   (tasks (list (drive-truck-to ?truck ?loc-now)         (load-truck ?obj ?truck ?loc-now)         (drive-truck-to ?truck ?loc-goal)         (unload-truck ?obj ?truck ?loc-goal)))))       (do-plan1))     ;; different cities      (:first (goal (obj-at ?obj ?loc-goal))       (in-city ?loc-goal ?city-goal)       (obj-at ?obj ?loc-now)       (in-city ?loc-now ?city-now)       (different ?city-goal ?city-now)       (truck ?truck-goal ?city-goal)       (airport ?airport-now) (in-city ?airport-now ?city-now)       (airport ?airport-goal) (in-city ?airport-goal ?city-goal)       (different ?loc-goal ?airport-goal))     ((!remove (list (goal (obj-at ?obj ?loc-goal))))              (!assert (list (goal1 (obj-at ?obj ?loc-goal))   (tasks (list (fly-airplane-with ?obj ?airport-now ?airport-goal)         (drive-truck-to ?truck-goal ?airport-goal)         (load-truck ?obj ?truck-goal ?airport-goal)         (drive-truck-to ?truck-goal ?loc-goal)         (unload-truck ?obj ?truck-goal ?loc-goal)))))              (do-plan1))      (:first (goal (obj-at ?obj ?loc-goal))       (in-city ?loc-goal ?city-goal)       (obj-at ?obj ?loc-now)       (in-city ?loc-now ?city-now)       (different ?city-goal ?city-now)       (airport ?airport-now) (in-city ?airport-now ?city-now)       (airport ?airport-goal) (in-city ?airport-goal ?city-goal))     ((!remove (list (goal (obj-at ?obj ?loc-goal))))              (!assert (list (goal1 (obj-at ?obj ?loc-goal))   (tasks (list (fly-airplane-with ?obj ?airport-now ?airport-goal)))))       (do-plan1))    ;; no more goals to convert to task            ()           ((do-plan)))     ;;--------------------------------------------------------    ;; no more tasks to perform, exit    (:method (do-plan)             ((not (tasks (list ?x . ?moretasks))))            ((!do-nothing))      ((tasks nil))     ((!remove (list (tasks nil)))       (do-plan));;;-------------------------------------------------------    ;; unload or load object from truck             (:first (tasks (list (load-truck ?obj ?truck ?loc) . ?moretasks)))            ((load-truck ?obj ?truck ?loc)              (!remove (list (tasks (list (load-truck ?obj ?truck ?loc) . ?moretasks))))              (!assert (list (tasks ?moretasks)))              (do-plan))             (:first (tasks (list (unload-truck ?obj ?truck ?loc) . ?moretasks)))            ((unload-truck ?obj ?truck ?loc)              (!remove (list (tasks (list (unload-truck ?obj ?truck ?loc) . ?moretasks))))              (!assert (list (tasks ?moretasks)))              (do-plan));;;-------------------------------------------------------    ;; remove (drive-truck-to ?truck ?loc-goal) if ?truck is at ?loc-goal             (:first (tasks (list (drive-truck-to ?truck ?loc-goal) . ?moretasks))              (truck-at ?truck ?loc-goal))            ((!remove (list (tasks (list (drive-truck-to ?truck ?loc-goal) . ?moretasks))))              (!assert (list (tasks ?moretasks)))              (do-plan));;;---------------------------------------------------------------    ;; fly airplane to any city that has object that needs to be delivered     ;; to another city and no airplane in that city            (:first (tasks (list (fly-airplane-with ?obj ?airport1 ?airport2) . ?moretasks))             (not (airplane-at ?anyairplane ?airport1))             (airplane-at ?airplane ?airport-current)             (in-city ?airport-current ?city-current))           ((collect-all ?city-current ?airport-current ?airplane)             (load-all-obj ?airplane ?airport-current ?city-current)             (!fly-airplane ?airplane ?airport-current ?airport1)      (unload-objects ?airplane ?airport1)             (do-plan))    ;; fly airplane to any city that is the destination of any object    ;; in the current city            (:first (tasks (list (fly-airplane-with ?obj ?airport1 ?airport2) . ?moretasks))             (airplane-at ?airplane ?airport1)             (in-city ?airport1 ?city1))           ((collect-all ?city1 ?airport1 ?airplane)             (load-all-obj ?airplane ?airport1 ?city1)             (!fly-airplane ?airplane ?airport1 ?airport2)      (unload-objects ?airplane ?airport2)             (do-plan))    ;; fly airplane to the destination of any package on board    (:first (tasks (list (unload-airplane ?obj ?airplane ?airport) . ?moretasks))     (airplane-at ?airplane ?airport-now))   ((!fly-airplane ?airplane ?airport-now ?airport)     (unload-objects ?airplane ?airport)     (do-plan));;;-------------------------------------------------------------------    ;; drive truck to any location that has objects that need to be    ;; picked up      (:first (tasks (list (drive-truck-to ?truck ?loc) (load-truck ?obj ?truck ?loc).?moretasks)))     ((drive-truck-to ?truck ?loc)       (load-truck ?obj ?truck ?loc)       (!remove (list (tasks (list (drive-truck-to ?truck ?loc) (load-truck ?obj ?truck ?loc). ?moretasks))))       (!assert (list (tasks ?moretasks)))       (do-plan))    ;; drive truck to any location that has object in truck that needs    ;; to be delivered to      (:first (tasks (list (drive-truck-to ?truck ?loc) . ?moretasks)))     ((drive-truck-to ?truck ?loc)       (!remove (list (tasks (list(drive-truck-to ?truck ?loc). ?moretasks))))       (!assert (list (tasks ?moretasks)))       (do-plan))     )              ;;;-------------------------------------------------------    (:method (collect-all ?city ?airport ?airplane)             (:first (truck ?truck ?city))            ((collect-all1 ?city ?truck ?airport ?airplane))             ()            ((!do-nothing)))    (:method (collect-all1 ?city ?truck ?airport ?airplane)    ;; unload or load object from truck             (:first (tasks (list (load-truck ?obj ?truck ?loc) . ?moretasks)))            ((load-truck ?obj ?truck ?loc)              (!remove (list (tasks (list (load-truck ?obj ?truck ?loc) . ?moretasks))))              (!assert (list (tasks  ?moretasks)))              (collect-all1 ?city ?truck ?airport ?airplane))             (:first (tasks (list (unload-truck ?obj ?truck ?loc) . ?moretasks)))            ((unload-truck ?obj ?truck ?loc)              (!remove (list (tasks (list (unload-truck ?obj ?truck ?loc) . ?moretasks))))              (!assert (list (tasks  ?moretasks)))              (collect-all1 ?city ?truck ?airport ?airplane))    ;; remove (drive-truck-to ?truck ?loc-goal) if ?truck is at ?loc-goal             (:first (tasks (list (drive-truck-to ?truck ?loc-goal) . ?moretasks))              (truck-at ?truck ?loc-goal))            ((!remove (list (tasks (list (drive-truck-to ?truck ?loc-goal) . ?moretasks))))              (!assert (list (tasks  ?moretasks)))              (collect-all1 ?city ?truck ?airport ?airplane))    ;; drive truck to any location other than the airport that has object     ;; to be picked up and no object to be delivered to      (:first (tasks (list (drive-truck-to ?truck ?loc) (load-truck ?obj ?truck ?loc) . ?moretasks))       (different ?loc ?airport)       (no-more-delivery-loc ?loc))     ((drive-truck-to ?truck ?loc)       (load-truck ?obj ?truck ?loc)       (!remove (list (tasks (list (drive-truck-to ?truck ?loc) (load-truck ?obj ?truck ?loc) . ?moretasks))))       (!assert (list (tasks  ?moretasks)))       (collect-all1 ?city ?truck ?airport ?airplane))             (:first              (in-city ?loc ?city) (obj-at ?obj ?loc)              (different ?loc ?airport)               (no-more-delivery-loc ?loc)       (tasks (list (fly-airplane-with ?obj ?airport ?other-airport) . ?moretasks))              (truck-at ?truck ?loc-current))            ((drive-truck ?truck ?loc-current ?loc)       (!load-truck ?obj ?truck ?loc)       (!remove (list (tasks (list (fly-airplane-with ?obj ?airport ?other-airport).?moretasks))))       (!assert (list (tasks (list (unload-airplane ?obj ?airplane ?other-airport) . ?moretasks))))              (collect-all1 ?city ?truck ?airport ?airplane))    ;; drive truck to any location other than the airport that has object     ;; to be picked up      (:first (tasks (list (drive-truck-to ?truck ?loc) (load-truck ?obj ?truck ?loc) . ?moretasks))       (different ?loc ?airport))            ((drive-truck-to ?truck ?loc)       (load-truck ?obj ?truck ?loc)       (!remove (list (tasks (list (drive-truck-to ?truck ?loc) (load-truck ?obj ?truck ?loc) . ?moretasks))))       (!assert (list (tasks  ?moretasks)))       (collect-all1 ?city ?truck ?airport ?airplane))             (:first              (in-city ?loc ?city) (obj-at ?obj ?loc)              (different ?loc ?airport)               (tasks (list (fly-airplane-with ?obj ?airport ?other-airport) . ?moretasks))              (truck-at ?truck ?loc-current))            ((drive-truck ?truck ?loc-current ?loc)       (!load-truck ?obj ?truck ?loc)       (!remove (list (tasks (list (fly-airplane-with ?obj ?airport ?other-airport) . ?moretasks))))       (!assert (list (tasks (list (unload-airplane ?obj ?airplane ?other-airport) . ?moretasks))))              (collect-all1 ?city ?truck ?airport ?airplane))    ;; if there is any object on truck that needs to be delivered to    ;; the airport, go to the airport and drop all objects that needs    ;; to be delivered to another city             (:first              (in-truck ?obj ?truck)        (tasks (list (unload-airplane ?obj ?airplane ?some-airport) . ?moretasks))              (truck-at ?truck ?loc-current))            ((drive-truck ?truck ?loc-current ?airport)              (!unload-truck ?obj ?truck ?airport)              (unload-at-airport ?truck ?airport))    ;; no object needs to be collected (there may be objects in airport    ;; that needs to be delivered, but we will collect them later in the     ;; main routine, in here, I will ignore them).             ()            ((!do-nothing)));;;--------------------------------------------------------------------    (:method (unload-objects ?airplane ?airport)      (:first (tasks (list (unload-airplane ?obj ?airplane ?airport) . ?moretasks)))     ((!unload-airplane ?obj ?airplane ?airport)       (!remove (list (tasks (list (unload-airplane ?obj ?airplane ?airport) . ?moretasks))))       (!assert (list (tasks  ?moretasks)))       (unload-objects ?airplane ?airport))      ()     ((!do-nothing)))    (:method (unload-at-airport ?truck ?airport)             (:first (in-truck ?obj ?truck)       (tasks (list (unload-airplane ?obj ?airplane ?some-airport) . ?moretasks)))            ((!unload-truck ?obj ?truck ?airport)              (unload-at-airport ?truck ?airport))            ;; no more object to unload, exit             ()            ((!do-nothing))    );;;-----------------------------------------------------------------    ;; load all objects in airport that has final destination in     ;; city other than the current city    (:method (load-all-obj ?airplane ?airport ?city)             (:first (obj-at ?obj ?airport)       (tasks ( list (unload-airplane ?obj ?airplane ?some-airport) . ?moretasks)))            ((!load-airplane ?obj ?airplane ?airport)              (load-all-obj ?airplane ?airport ?city))      (:first (obj-at ?obj ?airport)       (tasks (list (fly-airplane-with ?obj ?airport ?some-airport) . ?moretasks)))     ((!load-airplane ?obj ?airplane ?airport)       (!remove (list (tasks (list (fly-airplane-with ?obj ?airport ?some-airport). ?moretasks))))       (!assert (list (tasks (list (unload-airplane ?obj ?airplane ?some-airport). ?moretasks))))       (load-all-obj ?airplane ?airport ?city))             ()            ((!do-nothing))    );;;------------------------------------------    ;; state axioms    (:- (no-more-goal-at ?loc)        ((not (goal (obj-at ?x ?loc)))))    ;; check which city ?obj is in    (:- (obj-in-city ?obj ?city)        ((city ?city)         (obj-at ?obj ?loc)         (in-city ?loc ?city)))    (:- (obj-in-city ?obj ?city)        ((city ?city)         (in-truck ?obj ?truck)         (truck ?truck ?city)))    (:- (obj-in-city ?obj ?city)        ((city ?city)         (in-airplane ?obj ?airplane)         (airplane-at ?airplane ?airport)         (in-city ?airport ?city)))    (:- (no-more-delivery-city ?city)        ((not (more-delivery-city ?city))))    ;; true if there are more out of town deliveries     (:- (more-delivery-city ?city)         ((city ?city)         (goal (obj-at ?obj ?loc))         (obj-in-city ?obj ?city1)         (in-city ?loc ?city)         (different ?city1 ?city)))    (:- (no-more-delivery-loc ?loc)        ((not (more-delivery-loc ?loc))))    (:- (no-more-goal)        ((not (goal ?x))))    (:- (same ?x ?x) ())    (:- (different ?x ?y) ((not (same ?x ?y))))  ));;;--------------------------------------------------------------