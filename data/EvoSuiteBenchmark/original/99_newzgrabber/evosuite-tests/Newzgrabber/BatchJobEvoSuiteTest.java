/*
 * This file was automatically generated by EvoSuite
 */

package Newzgrabber;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import Newzgrabber.BatchJob;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BatchJobEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          BatchJob batchJob0 = new BatchJob("nNNVV\"hK=!", "nNNVV\"hK=!", "nNNVV\"hK=!", (-1311), (-1311));
          String string0 = batchJob0.getGroup();
          assertEquals(-1311, batchJob0.getLastid());
          assertNotNull(string0);
          assertEquals(false, batchJob0.createDirectory());
          assertEquals(-1311, batchJob0.getFirstid());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
      BatchJob batchJob0 = new BatchJob(".", ".", ".", (-20), (-20));
      batchJob0.getPassword();
      assertEquals(-20, batchJob0.getFirstid());
      assertEquals(-20, batchJob0.getLastid());
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          BatchJob batchJob0 = new BatchJob("nNNVV\"hK=!", "nNNVV\"hK=!", "nNNVV\"hK=!", (-1311), (-1311));
          batchJob0.setPassword("nNNVV\"hK=!");
          assertEquals(-1311, batchJob0.getFirstid());
          assertEquals(false, batchJob0.createDirectory());
          assertEquals(-1311, batchJob0.getLastid());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
      BatchJob batchJob0 = new BatchJob(".", ".", ".", (-20), (-20));
      batchJob0.setUsername(".");
      assertEquals(-20, batchJob0.getLastid());
      assertEquals(-20, batchJob0.getFirstid());
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          BatchJob batchJob0 = new BatchJob("nNNVV\"hK=!", "nNNVV\"hK=!", "nNNVV\"hK=!", (-1311), (-1311));
          String string0 = batchJob0.getServer();
          assertNotNull(string0);
          assertEquals(false, batchJob0.createDirectory());
          assertEquals(-1311, batchJob0.getLastid());
          assertEquals(-1311, batchJob0.getFirstid());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
      BatchJob batchJob0 = new BatchJob(".", ".", ".", (-20), (-20));
      String string0 = batchJob0.getDirectory();
      assertEquals(-20, batchJob0.getLastid());
      assertEquals(-20, batchJob0.getFirstid());
      assertNotNull(string0);
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          BatchJob batchJob0 = new BatchJob("nNNVV\"hK=!", "nNNVV\"hK=!", "nNNVV\"hK=!", (-1311), (-1311));
          int int0 = batchJob0.getLastid();
          assertEquals(false, batchJob0.createDirectory());
          assertEquals(-1311, batchJob0.getFirstid());
          assertEquals((-1311), int0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          BatchJob batchJob0 = new BatchJob("nNNVV\"hK=!", "nNNVV\"hK=!", "nNNVV\"hK=!", (-1311), (-1311));
          int int0 = batchJob0.getFirstid();
          assertEquals(-1311, batchJob0.getLastid());
          assertEquals(false, batchJob0.createDirectory());
          assertEquals((-1311), int0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test8()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          BatchJob batchJob0 = new BatchJob("nNNVV\"hK=!", "nNNVV\"hK=!", "nNNVV\"hK=!", (-1311), (-1311));
          batchJob0.getUsername();
          assertEquals(-1311, batchJob0.getLastid());
          assertEquals(-1311, batchJob0.getFirstid());
          assertEquals(false, batchJob0.createDirectory());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
