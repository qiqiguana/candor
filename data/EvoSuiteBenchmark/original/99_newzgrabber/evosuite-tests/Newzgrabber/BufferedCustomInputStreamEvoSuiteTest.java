/*
 * This file was automatically generated by EvoSuite
 */

package Newzgrabber;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import Newzgrabber.BufferedCustomInputStream;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BufferedCustomInputStreamEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream((InputStream) pipedInputStream0);
      // Undeclared exception!
      try {
        bufferedCustomInputStream0.setTempfile((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * name can't be null
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 196, (int) (byte)121);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream((InputStream) byteArrayInputStream0, (int) (byte)121);
  }

  @Test
  public void test2()  throws Throwable  {
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream((InputStream) null, 1, true);
      bufferedCustomInputStream0.setRemoveCarriages(true);
      assertEquals(true, bufferedCustomInputStream0.markSupported());
  }

  @Test
  public void test3()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream((InputStream) pipedInputStream0);
      bufferedCustomInputStream0.closeTemp();
      assertEquals(true, bufferedCustomInputStream0.markSupported());
  }

  @Test
  public void test4()  throws Throwable  {
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream((InputStream) null, 745, true);
      bufferedCustomInputStream0.close();
      assertNull(bufferedCustomInputStream0.readLine());
  }

  @Test
  public void test5()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream((InputStream) pipedInputStream0);
      boolean boolean0 = bufferedCustomInputStream0.ready();
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) pipedInputStream0, 1611);
      byte[] byteArray0 = new byte[2];
      pipedOutputStream0.write(byteArray0);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream((InputStream) bufferedInputStream0, 1611, false);
      bufferedCustomInputStream0.ready();
  }
}
