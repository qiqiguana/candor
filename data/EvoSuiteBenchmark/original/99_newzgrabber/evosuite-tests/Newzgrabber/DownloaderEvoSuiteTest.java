/*
 * This file was automatically generated by EvoSuite
 */

package Newzgrabber;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import Newzgrabber.Downloader;
import java.io.File;
import java.io.IOException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DownloaderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Downloader downloader0 = new Downloader();
      downloader0.setGroup("Y?");
      assertEquals(false, downloader0.ABORT);
      assertEquals(-1, downloader0.getTimeout());
  }

  @Test
  public void test1()  throws Throwable  {
      Downloader downloader0 = new Downloader();
      downloader0.getGroup();
      assertEquals(-1, downloader0.getTimeout());
      assertEquals(false, downloader0.ABORT);
  }

  @Test
  public void test2()  throws Throwable  {
      Downloader downloader0 = new Downloader();
      downloader0.setTitle("nW9'$oM^XT5(J\"5");
      assertEquals(-1, downloader0.getTimeout());
      assertEquals(false, downloader0.ABORT);
  }

  @Test
  public void test3()  throws Throwable  {
      Downloader downloader0 = new Downloader();
      int int0 = downloader0.getTimeout();
      assertEquals((-1), int0);
      assertEquals(false, downloader0.ABORT);
  }

  @Test
  public void test4()  throws Throwable  {
      Downloader downloader0 = new Downloader();
      downloader0.setPassword("Y?");
      assertEquals(false, downloader0.ABORT);
      assertEquals(-1, downloader0.getTimeout());
  }

  @Test
  public void test5()  throws Throwable  {
      Downloader downloader0 = new Downloader();
      downloader0.setTimeout((-2040));
      assertEquals(-2040, downloader0.getTimeout());
  }

  @Test
  public void test6()  throws Throwable  {
      Downloader downloader0 = new Downloader();
      downloader0.setServer("Y?");
      assertEquals(-1, downloader0.getTimeout());
      assertEquals(false, downloader0.ABORT);
  }

  @Test
  public void test7()  throws Throwable  {
      Downloader downloader0 = new Downloader();
      Object[] objectArray0 = new Object[9];
      downloader0.setDownloadData(objectArray0);
      assertEquals(false, downloader0.ABORT);
      assertEquals(-1, downloader0.getTimeout());
  }

  @Test
  public void test8()  throws Throwable  {
      Downloader downloader0 = new Downloader();
      downloader0.getTotalLines();
      assertEquals(false, downloader0.ABORT);
      assertEquals(-1, downloader0.getTimeout());
  }

  @Test
  public void test9()  throws Throwable  {
      Downloader downloader0 = new Downloader();
      downloader0.setDownloadDirectory((File) null);
      assertEquals(-1, downloader0.getTimeout());
      assertEquals(false, downloader0.ABORT);
  }

  @Test
  public void test10()  throws Throwable  {
      Downloader downloader0 = new Downloader();
      downloader0.setTotalLines(354L);
      assertEquals(354L, downloader0.getTotalLines());
      assertEquals(-1, downloader0.getTimeout());
  }

  @Test
  public void test11()  throws Throwable  {
      Downloader downloader0 = new Downloader();
      long[] longArray0 = new long[1];
      downloader0.setIds(longArray0);
      long long0 = downloader0.getBaseMessageId();
      assertEquals(0L, downloader0.getBaseMessageId());
      assertEquals(0L, long0);
  }

  @Test
  public void test12()  throws Throwable  {
      Downloader downloader0 = new Downloader();
      downloader0.setTableIndex((-1));
      assertEquals(-1, downloader0.getTimeout());
      assertEquals(false, downloader0.ABORT);
  }

  @Test
  public void test13()  throws Throwable  {
      Downloader downloader0 = new Downloader();
      downloader0.setUsername("Y?");
      assertEquals(false, downloader0.ABORT);
      assertEquals(-1, downloader0.getTimeout());
  }

  @Test
  public void test14()  throws Throwable  {
      Downloader downloader0 = new Downloader();
      long long0 = downloader0.getBaseMessageId();
      assertEquals(false, downloader0.ABORT);
      assertEquals(-1, downloader0.getTimeout());
      assertEquals((-1L), long0);
  }

  @Test
  public void test15()  throws Throwable  {
      Downloader downloader0 = new Downloader();
      downloader0.close();
      assertEquals(-1, downloader0.getTimeout());
      assertEquals(false, downloader0.ABORT);
  }

  @Test
  public void test16()  throws Throwable  {
      Downloader downloader0 = new Downloader();
      long[] longArray0 = new long[1];
      downloader0.setIds(longArray0);
      // Undeclared exception!
      try {
        downloader0.startDownload();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
