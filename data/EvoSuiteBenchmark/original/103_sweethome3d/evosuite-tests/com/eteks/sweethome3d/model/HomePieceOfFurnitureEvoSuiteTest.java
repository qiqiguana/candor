/*
 * This file was automatically generated by EvoSuite
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.eteks.sweethome3d.model.CatalogDoorOrWindow;
import com.eteks.sweethome3d.model.CatalogLight;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.DoorOrWindow;
import com.eteks.sweethome3d.model.HomeDoorOrWindow;
import com.eteks.sweethome3d.model.HomeLight;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.Light;
import com.eteks.sweethome3d.model.LightSource;
import com.eteks.sweethome3d.model.PieceOfFurniture;
import com.eteks.sweethome3d.model.Sash;
import com.eteks.sweethome3d.model.TextStyle;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import java.math.BigDecimal;
import java.math.MathContext;
import java.math.RoundingMode;
import java.net.URL;
import java.util.Comparator;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class HomePieceOfFurnitureEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[8];
      float[][] floatArray0 = new float[4][3];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("", "", "", (Content) null, (Content) null, (Content) null, (float) 1, 1.0F, (-1959.994F), 0.0F, true, lightSourceArray0, floatArray0, "", true, true, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight((Light) catalogLight0);
      homeLight0.getShininess();
      assertEquals((-1959.994F), homeLight0.getHeight(), 0.01F);
      assertEquals(1.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(true, homeLight0.isMovable());
      assertEquals(1.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getX(), 0.01F);
  }

  @Test
  public void test1()  throws Throwable  {
      Sash[] sashArray0 = new Sash[8];
      float[][] floatArray0 = new float[3][7];
      BigDecimal bigDecimal0 = new BigDecimal((-1340));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow((String) null, (String) null, (String) null, (Content) null, (Content) null, 0.0F, (-1193.9607F), (-1.0F), 800.0329F, true, 1417.7587F, 800.0329F, sashArray0, floatArray0, (String) null, true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow((DoorOrWindow) catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals(true, homeDoorOrWindow1.isMovable());
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals((-1.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(800.0329F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-596.98035F), homeDoorOrWindow1.getY(), 0.01F);
  }

  @Test
  public void test2()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Sash[] sashArray0 = new Sash[5];
      float[][] floatArray0 = new float[5][9];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (Content) null, (Content) null, 424.31317F, 0.0F, (-955.54095F), 1548.7609F, false, 0.0F, 0.0F, sashArray0, integer0, floatArray0, false, (-2.3392506F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow((DoorOrWindow) catalogDoorOrWindow0);
      homeDoorOrWindow0.getLevel();
      assertEquals((-955.54095F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(424.31317F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1548.7609F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1548.7609F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
  }

  @Test
  public void test3()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[8];
      float[][] floatArray0 = new float[4][3];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("", "", "", (Content) null, (Content) null, (Content) null, (float) 1903, (float) 0, 0.0F, (-1326.2432F), true, lightSourceArray0, floatArray0, "1kX@y^l#]pjZ}Y", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight((Light) catalogLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture((PieceOfFurniture) homeLight0);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(true, homeLight0.isResizable());
      assertEquals(951.5F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(true, homeLight0.isMovable());
      assertNotNull(homePieceOfFurniture0);
      assertEquals(true, homeLight0.isDeformable());
      assertEquals((-1326.2432F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(true, homePieceOfFurniture0.isTexturable());
      assertEquals(1903.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(true, homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
  }

  @Test
  public void test4()  throws Throwable  {
      Sash[] sashArray0 = new Sash[1];
      float[][] floatArray0 = new float[5][4];
      BigDecimal bigDecimal0 = new BigDecimal(600000L);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("w", "w", "Us|`fnOE*!+", (Content) null, (Content) null, 0.0F, 0.0F, (-1324.2063F), 0.0F, true, 3.4028235E38F, 788.95465F, sashArray0, floatArray0, "Us|`fnOE*!+", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow((DoorOrWindow) catalogDoorOrWindow0);
      homeDoorOrWindow0.move((-1.0F), (-1727.5714F));
      boolean boolean0 = homeDoorOrWindow0.isPointAt(387.07587F, 0.3926991F, (float) 1103L);
      assertEquals((-1.0F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      float[][] floatArray0 = new float[4][3];
      Sash[] sashArray0 = new Sash[10];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", (Content) null, (Content) null, (Content) null, 7.3554025F, (-1007.13837F), 1.0F, 651.2375F, true, (float) 1, 0.3926991F, sashArray0, floatArray0, "", true, false, true, (BigDecimal) null, (BigDecimal) null);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow((DoorOrWindow) catalogDoorOrWindow0);
      homeDoorOrWindow0.intersectsRectangle(0.0F, 576.6024F, (-1041.4089F), (-1756.1768F));
      assertEquals((-1007.13837F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(3.6777012F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(true, homeDoorOrWindow0.isMovable());
      assertEquals((-503.56918F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(7.3554025F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(651.2375F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
  }

  @Test
  public void test6()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.NAME;
      Comparator<HomePieceOfFurniture> comparator0 = HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      assertNotNull(comparator0);
  }

  @Test
  public void test7()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[8];
      float[][] floatArray0 = new float[4][3];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("", "", "", (Content) null, (Content) null, (Content) null, (float) 1903, (float) 0, 0.0F, (-1326.2432F), true, lightSourceArray0, floatArray0, "1kX@y^l#]pjZ}Y", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight((Light) catalogLight0);
      homeLight0.setName("");
      assertEquals(true, homeLight0.isMovable());
      assertEquals(951.5F, homeLight0.getX(), 0.01F);
      assertEquals((-1326.2432F), homeLight0.getElevation(), 0.01F);
      assertEquals(1903.0F, homeLight0.getWidth(), 0.01F);
  }

  @Test
  public void test8()  throws Throwable  {
      Sash[] sashArray0 = new Sash[1];
      float[][] floatArray0 = new float[5][4];
      BigDecimal bigDecimal0 = new BigDecimal(600000L);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("w", "w", "Us|`fnOE*!+", (Content) null, (Content) null, 0.0F, 0.0F, (-1324.2063F), 0.0F, true, 3.4028235E38F, 788.95465F, sashArray0, floatArray0, "Us|`fnOE*!+", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow((DoorOrWindow) catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameVisible(true);
      homeDoorOrWindow0.setNameVisible(true);
      assertEquals(true, homeDoorOrWindow0.isNameVisible());
  }

  @Test
  public void test9()  throws Throwable  {
      Sash[] sashArray0 = new Sash[1];
      float[][] floatArray0 = new float[5][4];
      BigDecimal bigDecimal0 = new BigDecimal(600000L);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("w", "w", "Us|`fnOE*!+", (Content) null, (Content) null, 0.0F, 0.0F, (-1324.2063F), 0.0F, true, 3.4028235E38F, 788.95465F, sashArray0, floatArray0, "Us|`fnOE*!+", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow((DoorOrWindow) catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameXOffset(1805.6508F);
      assertEquals(1805.6508F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(true, homeDoorOrWindow0.isMovable());
  }

  @Test
  public void test10()  throws Throwable  {
      float float0 = (-1007.13837F);
      float[][] floatArray0 = new float[4][3];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Sash[] sashArray0 = new Sash[10];
      String[] stringArray0 = new String[7];
      Long long0 = Long.valueOf((long) 1903);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "RQ4u2qfF", "", "", stringArray0, long0, (Float) 0.0F, (Content) null, (Content) null, (Content) null, 1634.9315F, 236.15144F, 0.0F, 1023.0714F, false, 0.0F, float0, sashArray0, floatArray0, "", true, false, false, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow((DoorOrWindow) catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameYOffset(0.0F);
      assertEquals(236.15144F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(1023.0714F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(1634.9315F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(118.07572F, homeDoorOrWindow0.getY(), 0.01F);
  }

  @Test
  public void test11()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[8];
      LightSource lightSource0 = new LightSource(0.0F, 1.0F, (-1007.13837F), 0, (Float) 0.0F);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[4][3];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Float float0 = lightSourceArray0[0].getDiameter();
      Sash[] sashArray0 = new Sash[10];
      String[] stringArray0 = new String[7];
      Long long0 = Long.valueOf((long) 1903);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "RQ4u2qfF", "", "", stringArray0, long0, (Float) 0.0F, (Content) null, (Content) null, (Content) null, 1634.9315F, 0.5F, 0.0F, 1023.0714F, false, 0.0F, (float) float0, sashArray0, floatArray0, "", true, false, false, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow((DoorOrWindow) catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameYOffset(0.5F);
      assertEquals(0.5F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
  }

  @Test
  public void test12()  throws Throwable  {
      float[][] floatArray0 = new float[3][7];
      BigDecimal bigDecimal0 = new BigDecimal((-1340));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("x4p", "x4p", "x4p", (Content) null, (Content) null, (Content) null, (-1.0F), 0.0F, 0.0F, (-1.0F), false, floatArray0, "x4p", false, bigDecimal0, bigDecimal0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture((PieceOfFurniture) catalogPieceOfFurniture0);
      TextStyle textStyle0 = new TextStyle(0.0F);
      homePieceOfFurniture0.setNameStyle(textStyle0);
      assertEquals((-1.0F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-1.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-1.0F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
  }

  @Test
  public void test13()  throws Throwable  {
      float[][] floatArray0 = new float[4][3];
      Sash[] sashArray0 = new Sash[10];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", (Content) null, (Content) null, (Content) null, 7.3554025F, (-1007.13837F), 1.0F, 651.2375F, true, (float) 1, 0.3926991F, sashArray0, floatArray0, "", true, false, true, (BigDecimal) null, (BigDecimal) null);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow((DoorOrWindow) catalogDoorOrWindow0);
      homeDoorOrWindow0.setDescription("");
      assertEquals(1.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(true, homeDoorOrWindow0.isMovable());
      assertEquals(651.2375F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(3.6777012F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1007.13837F), homeDoorOrWindow0.getDepth(), 0.01F);
  }

  @Test
  public void test14()  throws Throwable  {
      float[][] floatArray0 = new float[3][7];
      BigDecimal bigDecimal0 = new BigDecimal((-1340));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("x4p", "x4p", "x4p", (Content) null, (Content) null, (Content) null, (-1.0F), 0.0F, 0.0F, (-1.0F), false, floatArray0, "x4p", false, bigDecimal0, bigDecimal0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture((PieceOfFurniture) catalogPieceOfFurniture0);
      // Undeclared exception!
      try {
        homePieceOfFurniture0.setDepth(1572.113F);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Piece isn't resizable
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      Sash[] sashArray0 = new Sash[1];
      float[][] floatArray0 = new float[5][4];
      BigDecimal bigDecimal0 = new BigDecimal(600000L);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("w", "w", "Us|`fnOE*!+", (Content) null, (Content) null, 0.0F, 0.0F, (-1324.2063F), 0.0F, true, 3.4028235E38F, 788.95465F, sashArray0, floatArray0, "Us|`fnOE*!+", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow((DoorOrWindow) catalogDoorOrWindow0);
      homeDoorOrWindow0.setDepth(0.0F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1324.2063F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(true, homeDoorOrWindow0.isResizable());
      assertEquals(true, homeDoorOrWindow0.isMovable());
  }

  @Test
  public void test16()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[8];
      LightSource lightSource0 = new LightSource(0.0F, 1.0F, (-1007.13837F), 0, (Float) 0.0F);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[4][3];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Float float0 = lightSourceArray0[0].getDiameter();
      Sash[] sashArray0 = new Sash[10];
      String[] stringArray0 = new String[7];
      Long long0 = Long.valueOf((long) 1903);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "RQ4u2qfF", "", "", stringArray0, long0, (Float) 0.0F, (Content) null, (Content) null, (Content) null, 1634.9315F, 0.5F, 0.0F, 1023.0714F, false, 0.0F, (float) float0, sashArray0, floatArray0, "", true, false, false, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow((DoorOrWindow) catalogDoorOrWindow0);
      homeDoorOrWindow0.setHeight(0.0F);
      assertEquals(true, homeDoorOrWindow0.isResizable());
      assertEquals(1023.0714F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.25F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(1634.9315F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1023.0714F, homeDoorOrWindow0.getElevation(), 0.01F);
  }

  @Test
  public void test17()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      Sash[] sashArray0 = new Sash[9];
      float[][] floatArray0 = new float[3][9];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("9yweK$/*T", "", "9yweK$/*T", (Content) temporaryURLContent0, (Content) temporaryURLContent0, (Content) temporaryURLContent0, (-1711.3956F), (-1711.3956F), (-701.9607F), (-701.9607F), false, (-1800.9596F), (-1711.3956F), sashArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow((DoorOrWindow) catalogDoorOrWindow0);
      float float0 = homeDoorOrWindow0.getGroundElevation();
      assertEquals((-701.9607F), float0, 0.01F);
      assertEquals((-701.9607F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1711.3956F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-855.6978F), homeDoorOrWindow0.getX(), 0.01F);
  }

  @Test
  public void test18()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[8];
      float[][] floatArray0 = new float[4][3];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("", "", "", (Content) null, (Content) null, (Content) null, (float) 0, 1.0F, (-1959.994F), 0.0F, true, lightSourceArray0, floatArray0, "", true, true, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight((Light) catalogLight0);
      homeLight0.setElevation(0.0F);
      assertEquals(true, homeLight0.isMovable());
      assertEquals(1.0F, homeLight0.getDepth(), 0.01F);
      assertEquals((-1959.994F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
  }

  @Test
  public void test19()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[8];
      float[][] floatArray0 = new float[4][3];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("", "", "", (Content) null, (Content) null, (Content) null, (float) 1, 1.0F, (-1959.994F), 0.0F, true, lightSourceArray0, floatArray0, "", true, true, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight((Light) catalogLight0);
      homeLight0.setElevation(1903.0F);
      assertEquals(1903.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(1.0F, homeLight0.getWidth(), 0.01F);
  }

  @Test
  public void test20()  throws Throwable  {
      Sash[] sashArray0 = new Sash[8];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      float[][] floatArray0 = new float[8][7];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow((String) null, (String) null, (String) null, (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.3926991F, 1.0F, true, 0.0F, 1653.2068F, sashArray0, floatArray0, (String) null, false, false, false, bigDecimal0, bigDecimal0, (String) null);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow((DoorOrWindow) catalogDoorOrWindow0);
      assertEquals(true, homeDoorOrWindow0.isMovable());
      
      homeDoorOrWindow0.setMovable(true);
      assertEquals(0.3926991F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
  }

  @Test
  public void test21()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[8];
      float[][] floatArray0 = new float[4][3];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("", "", "", (Content) null, (Content) null, (Content) null, (float) 1903, (float) 0, 0.0F, (-1326.2432F), true, lightSourceArray0, floatArray0, "1kX@y^l#]pjZ}Y", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight((Light) catalogLight0);
      assertEquals(true, homeLight0.isMovable());
      
      homeLight0.setMovable(false);
      assertEquals(false, homeLight0.isMovable());
  }

  @Test
  public void test22()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[8];
      LightSource lightSource0 = new LightSource(0.0F, 1.0F, (-1007.13837F), 0, (Float) 0.0F);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[4][3];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Float float0 = lightSourceArray0[0].getDiameter();
      Sash[] sashArray0 = new Sash[10];
      String[] stringArray0 = new String[7];
      Long long0 = Long.valueOf((long) 1903);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "RQ4u2qfF", "", "", stringArray0, long0, (Float) 0.0F, (Content) null, (Content) null, (Content) null, 1634.9315F, 0.5F, 0.0F, 1023.0714F, false, 0.0F, (float) float0, sashArray0, floatArray0, "", true, false, false, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow((DoorOrWindow) catalogDoorOrWindow0);
      homeDoorOrWindow0.setMovable(true);
      assertEquals(true, homeDoorOrWindow0.isMovable());
      assertEquals(1023.0714F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
  }

  @Test
  public void test23()  throws Throwable  {
      Sash[] sashArray0 = new Sash[8];
      BigDecimal bigDecimal0 = new BigDecimal(0);
      float[][] floatArray0 = new float[3][7];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow((String) null, (String) null, (String) null, (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.3926991F, 1.0F, true, 0.0F, 1653.2068F, sashArray0, floatArray0, (String) null, false, false, false, bigDecimal0, bigDecimal0, (String) null);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow((DoorOrWindow) catalogDoorOrWindow0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try {
        homeDoorOrWindow0.setColor(integer0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Piece isn't texturable
         */
      }
  }

  @Test
  public void test24()  throws Throwable  {
      Sash[] sashArray0 = new Sash[8];
      float[][] floatArray0 = new float[3][7];
      BigDecimal bigDecimal0 = new BigDecimal((-1340));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow((String) null, (String) null, (String) null, (Content) null, (Content) null, 0.0F, (-1193.9607F), (-1.0F), 800.0329F, true, 1417.7587F, 800.0329F, sashArray0, floatArray0, (String) null, true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow((DoorOrWindow) catalogDoorOrWindow0);
      Integer integer0 = new Integer(0);
      homeDoorOrWindow0.setColor(integer0);
      assertEquals(true, homeDoorOrWindow0.isTexturable());
      assertEquals(true, homeDoorOrWindow0.isMovable());
      assertEquals((-596.98035F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(800.0329F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(800.0329F, homeDoorOrWindow0.getElevation(), 0.01F);
  }

  @Test
  public void test25()  throws Throwable  {
      Sash[] sashArray0 = new Sash[8];
      float[][] floatArray0 = new float[3][7];
      Integer integer0 = new Integer(0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow((String) null, (Content) null, (Content) null, (-15.502981F), (-338.23535F), (-731.4557F), 0.0F, false, 0.0F, 1915.1782F, sashArray0, integer0, floatArray0, false, 0.0F, false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow((DoorOrWindow) catalogDoorOrWindow0);
      homeDoorOrWindow0.setColor(integer0);
      assertEquals(true, homeDoorOrWindow0.isTexturable());
      assertEquals((-731.4557F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-7.7514906F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-169.11768F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-338.23535F), homeDoorOrWindow0.getDepth(), 0.01F);
  }

  @Test
  public void test26()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      float[][] floatArray0 = new float[9][4];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, (String) null, (Content) null, (Content) null, (-1.0F), 0.3926991F, (float) 0L, 3.4028235E38F, false, lightSourceArray0, floatArray0, (String) null, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight((Light) catalogLight0);
      homeLight0.setTexture((HomeTexture) null);
      assertEquals(true, homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals(3.4028235E38F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
  }

  @Test
  public void test27()  throws Throwable  {
      Sash[] sashArray0 = new Sash[1];
      float[][] floatArray0 = new float[5][4];
      BigDecimal bigDecimal0 = new BigDecimal(600000L);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("w", "w", "Us|`fnOE*!+", (Content) null, (Content) null, 0.0F, 0.0F, (-1324.2063F), 0.0F, true, 3.4028235E38F, 788.95465F, sashArray0, floatArray0, "Us|`fnOE*!+", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow((DoorOrWindow) catalogDoorOrWindow0);
      homeDoorOrWindow0.setShininess((Float) 0.0F);
      assertEquals((-1324.2063F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(true, homeDoorOrWindow0.isMovable());
      assertEquals(true, homeDoorOrWindow0.isTexturable());
  }

  @Test
  public void test28()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[8];
      LightSource lightSource0 = new LightSource(0.0F, 1.0F, (-1007.13837F), 0, (Float) 0.0F);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[4][3];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Float float0 = lightSourceArray0[0].getDiameter();
      Sash[] sashArray0 = new Sash[10];
      String[] stringArray0 = new String[7];
      Long long0 = Long.valueOf((long) 1903);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "RQ4u2qfF", "", "", stringArray0, long0, (Float) 0.0F, (Content) null, (Content) null, (Content) null, 1634.9315F, 0.5F, 0.0F, 1023.0714F, false, 0.0F, (float) float0, sashArray0, floatArray0, "", true, false, false, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow((DoorOrWindow) catalogDoorOrWindow0);
      BigDecimal bigDecimal1 = homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      assertEquals(0.5F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(1634.9315F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1023.0714F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(2, bigDecimal1.shortValueExact());
      assertNotNull(bigDecimal1);
  }

  @Test
  public void test29()  throws Throwable  {
      float[][] floatArray0 = new float[4][3];
      Sash[] sashArray0 = new Sash[10];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", (Content) null, (Content) null, (Content) null, 0.3926991F, (-1007.13837F), 1.0F, 651.2375F, true, (float) 1, 0.3926991F, sashArray0, floatArray0, "", true, false, true, (BigDecimal) null, (BigDecimal) null);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow((DoorOrWindow) catalogDoorOrWindow0);
      homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      assertEquals(true, homeDoorOrWindow0.isMovable());
      assertEquals(0.19634955F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(651.2375F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-503.56918F), homeDoorOrWindow0.getY(), 0.01F);
  }

  @Test
  public void test30()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      float[][] floatArray0 = new float[9][4];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, (String) null, (Content) null, (Content) null, (-1.0F), (float) 0L, (float) 0L, 3.4028235E38F, false, lightSourceArray0, floatArray0, (String) null, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight((Light) catalogLight0);
      homeLight0.setY(0.0F);
      assertEquals((-0.5F), homeLight0.getX(), 0.01F);
      assertEquals(3.4028235E38F, homeLight0.getElevation(), 0.01F);
      assertEquals(3.4028235E38F, homeLight0.getGroundElevation(), 0.01F);
  }

  @Test
  public void test31()  throws Throwable  {
      Sash[] sashArray0 = new Sash[1];
      float[][] floatArray0 = new float[5][4];
      BigDecimal bigDecimal0 = new BigDecimal(600000L);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("w", "w", "Us|`fnOE*!+", (Content) null, (Content) null, 0.0F, 0.0F, (-1324.2063F), 0.0F, true, 3.4028235E38F, 788.95465F, sashArray0, floatArray0, "Us|`fnOE*!+", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow((DoorOrWindow) catalogDoorOrWindow0);
      homeDoorOrWindow0.setAngle(0.0F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1324.2063F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(true, homeDoorOrWindow0.isMovable());
  }

  @Test
  public void test32()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Sash[] sashArray0 = new Sash[5];
      float[][] floatArray0 = new float[5][9];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (Content) null, (Content) null, 424.31317F, 0.0F, (-955.54095F), 1548.7609F, false, 0.0F, 0.0F, sashArray0, integer0, floatArray0, false, (-2.3392506F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow((DoorOrWindow) catalogDoorOrWindow0);
      homeDoorOrWindow0.setModelMirrored(true);
      assertEquals(true, homeDoorOrWindow0.isModelMirrored());
  }

  @Test
  public void test33()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Sash[] sashArray0 = new Sash[5];
      float[][] floatArray0 = new float[5][9];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (Content) null, (Content) null, 424.31317F, 0.0F, (-955.54095F), 1548.7609F, false, 0.0F, 0.0F, sashArray0, integer0, floatArray0, false, (-2.3392506F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow((DoorOrWindow) catalogDoorOrWindow0);
      homeDoorOrWindow0.setLevel((Level) null);
      assertEquals((-955.54095F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(424.31317F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1548.7609F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1548.7609F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
  }

  @Test
  public void test34()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      float[][] floatArray0 = new float[9][4];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, (String) null, (Content) null, (Content) null, (-1.0F), 0.3926991F, (float) 0L, 3.4028235E38F, false, lightSourceArray0, floatArray0, (String) null, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight((Light) catalogLight0);
      boolean boolean0 = homeLight0.isBottomRightPointAt((-79.23698F), 637.8869F, (-1898.3877F));
      assertEquals(false, boolean0);
      
      homeLight0.containsPoint(0.0F, (-832.2402F), 0.0F);
      assertEquals((-1.0F), homeLight0.getWidth(), 0.01F);
      assertEquals((-0.5F), homeLight0.getX(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals(3.4028235E38F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
  }

  @Test
  public void test35()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[8];
      float[][] floatArray0 = new float[4][3];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("", "", "", (Content) null, (Content) null, (Content) null, (float) 1903, (-1007.13837F), 0.0F, (-1326.2432F), true, lightSourceArray0, floatArray0, "1kX@y^l#]pjZ}Y", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight((Light) catalogLight0);
      boolean boolean0 = homeLight0.containsPoint(1.0F, (-599.16833F), 1832.246F);
      assertEquals(true, homeLight0.isMovable());
      assertEquals((-503.56918F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(1903.0F, homeLight0.getWidth(), 0.01F);
      assertEquals((-1326.2432F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(false, boolean0);
      assertEquals(951.5F, homeLight0.getX(), 0.01F);
  }

  @Test
  public void test36()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      float[][] floatArray0 = new float[9][4];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, (String) null, (Content) null, (Content) null, (-1.0F), 0.3926991F, (float) 0L, 3.4028235E38F, false, lightSourceArray0, floatArray0, (String) null, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight((Light) catalogLight0);
      homeLight0.containsPoint(0.0F, (-832.2402F), 0.0F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals(3.4028235E38F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-0.5F), homeLight0.getX(), 0.01F);
      assertEquals((-1.0F), homeLight0.getWidth(), 0.01F);
  }

  @Test
  public void test37()  throws Throwable  {
      Class<?> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      Sash[] sashArray0 = new Sash[9];
      float[][] floatArray0 = new float[3][4];
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      MathContext mathContext0 = new MathContext(0, roundingMode0);
      BigDecimal bigDecimal0 = new BigDecimal(0, mathContext0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", (Content) resourceURLContent0, (Content) resourceURLContent0, (Content) resourceURLContent0, (float) (-665L), (-708.7892F), (-708.7892F), (-708.7892F), false, (-1808.8395F), 916.2118F, sashArray0, floatArray0, "", false, false, false, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow((DoorOrWindow) catalogDoorOrWindow0);
      boolean boolean0 = homeDoorOrWindow0.isPointAt(0.0F, (-1.0F), (-777.98486F));
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-708.7892F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(false, boolean0);
      assertEquals((-665.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-354.3946F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-708.7892F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-332.5F), homeDoorOrWindow0.getX(), 0.01F);
  }

  @Test
  public void test38()  throws Throwable  {
      Sash[] sashArray0 = new Sash[1];
      float[][] floatArray0 = new float[5][4];
      BigDecimal bigDecimal0 = new BigDecimal(600000L);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("w", "w", "Us|`fnOE*!+", (Content) null, (Content) null, 0.0F, 0.0F, (-1324.2063F), 0.0F, true, 3.4028235E38F, 788.95465F, sashArray0, floatArray0, "Us|`fnOE*!+", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow((DoorOrWindow) catalogDoorOrWindow0);
      boolean boolean0 = homeDoorOrWindow0.isPointAt(387.07587F, 0.3926991F, (float) 1103L);
      assertEquals((-1324.2063F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(true, homeDoorOrWindow0.isMovable());
      assertEquals(true, boolean0);
  }

  @Test
  public void test39()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[8];
      float[][] floatArray0 = new float[4][3];
      BigDecimal bigDecimal0 = new BigDecimal((-1055L));
      CatalogLight catalogLight0 = new CatalogLight("9I", "9I", "9I", (Content) null, (Content) null, (-1007.13837F), (-1.551605F), (-1007.13837F), 1478.7521F, true, lightSourceArray0, floatArray0, "9I", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight((Light) catalogLight0);
      boolean boolean0 = homeLight0.isTopRightPointAt((-1330.6226F), (-1330.6226F), (-814.08777F));
      assertEquals((-1007.13837F), homeLight0.getHeight(), 0.01F);
      assertEquals((-1.551605F), homeLight0.getDepth(), 0.01F);
      assertEquals(false, boolean0);
      assertEquals(true, homeLight0.isMovable());
      assertEquals((-1007.13837F), homeLight0.getWidth(), 0.01F);
      assertEquals((-503.56918F), homeLight0.getX(), 0.01F);
      assertEquals((-0.7758025F), homeLight0.getY(), 0.01F);
      assertEquals(1478.7521F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
  }

  @Test
  public void test40()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[8];
      float[][] floatArray0 = new float[4][3];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("", "", "", (Content) null, (Content) null, (Content) null, (float) 1, 1.0F, (-1959.994F), 0.0F, true, lightSourceArray0, floatArray0, "", true, true, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight((Light) catalogLight0);
      boolean boolean0 = homeLight0.isTopRightPointAt(0.0F, (-784.6296F), (-804.9394F));
      assertEquals(1.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(false, boolean0);
      assertEquals(0.5F, homeLight0.getX(), 0.01F);
      assertEquals((-1959.994F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertEquals(1.0F, homeLight0.getWidth(), 0.01F);
  }

  @Test
  public void test41()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[8];
      float[][] floatArray0 = new float[4][3];
      BigDecimal bigDecimal0 = new BigDecimal((-1055L));
      CatalogLight catalogLight0 = new CatalogLight("9I", "9I", "9I", (Content) null, (Content) null, (-1007.13837F), (-1.551605F), (-1007.13837F), 1478.7521F, true, lightSourceArray0, floatArray0, "9I", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight((Light) catalogLight0);
      boolean boolean0 = homeLight0.isNameCenterPointAt(1627.6971F, 0.0F, 0.0F);
      assertEquals((-1007.13837F), homeLight0.getHeight(), 0.01F);
      assertEquals(true, homeLight0.isMovable());
      assertEquals(1478.7521F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(false, boolean0);
      assertEquals((-503.56918F), homeLight0.getX(), 0.01F);
      assertEquals((-0.7758025F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
  }
}
