/*
 * This file was automatically generated by EvoSuite
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.eteks.sweethome3d.model.BackgroundImage;
import com.eteks.sweethome3d.model.Camera;
import com.eteks.sweethome3d.model.CatalogLight;
import com.eteks.sweethome3d.model.CollectionListener;
import com.eteks.sweethome3d.model.Compass;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.DimensionLine;
import com.eteks.sweethome3d.model.Home;
import com.eteks.sweethome3d.model.HomeEnvironment;
import com.eteks.sweethome3d.model.HomeLight;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.HomePrint;
import com.eteks.sweethome3d.model.Label;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.Light;
import com.eteks.sweethome3d.model.LightSource;
import com.eteks.sweethome3d.model.ObserverCamera;
import com.eteks.sweethome3d.model.Room;
import com.eteks.sweethome3d.model.Selectable;
import com.eteks.sweethome3d.model.SelectionListener;
import com.eteks.sweethome3d.model.Wall;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.math.BigDecimal;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class HomeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Home home0 = new Home((-1360.9014F));
      assertNotNull(home0);
      
      home0.isRecovered();
      assertEquals((-1360.9014F), home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test1()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      home0.addRoomsListener((CollectionListener<Room>) null);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test2()  throws Throwable  {
      LinkedList<Label> linkedList0 = new LinkedList<Label>();
      List<Room> list0 = Home.getRoomsSubList((List<? extends Selectable>) linkedList0);
      List<DimensionLine> list1 = Home.getDimensionLinesSubList(list0);
      assertEquals(0, list1.size());
  }

  @Test
  public void test3()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      home0.removeRoomsListener((CollectionListener<Room>) null);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test4()  throws Throwable  {
      Home home0 = new Home(1538.4164F);
      assertNotNull(home0);
      
      float[][] floatArray0 = new float[10][5];
      Room room0 = new Room(floatArray0);
      home0.addRoom(room0);
      assertEquals(false, home0.isEmpty());
  }

  @Test
  public void test5()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      long long0 = home0.getVersion();
      assertEquals(3700L, long0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test6()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      List<Room> list0 = home0.getRooms();
      assertNotNull(list0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test7()  throws Throwable  {
      Home home0 = new Home((-1360.9014F));
      assertNotNull(home0);
      
      home0.getPrint();
      assertEquals((-1360.9014F), home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test8()  throws Throwable  {
      Home home0 = new Home(1206.9747F);
      assertNotNull(home0);
      
      LightSource[] lightSourceArray0 = new LightSource[9];
      float[][] floatArray0 = new float[7][2];
      float[] floatArray1 = new float[5];
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray0[0];
      floatArray0[2] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("", "", "", (Content) null, (Content) null, (Content) null, 1206.9747F, 851.45703F, 851.45703F, 1983.2451F, false, lightSourceArray0, "", floatArray0, "", true, false, false, bigDecimal0, (BigDecimal) null, "");
      HomeLight homeLight0 = new HomeLight((Light) catalogLight0);
      home0.addPieceOfFurniture((HomePieceOfFurniture) homeLight0);
      assertEquals(false, home0.isEmpty());
  }

  @Test
  public void test9()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      Home.Property home_Property0 = Home.Property.PRINT;
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("3V[]6g", (PropertyChangeListener) null);
      home0.addPropertyChangeListener(home_Property0, (PropertyChangeListener) propertyChangeListenerProxy0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test10()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(true, home0.isEmpty());
      assertNotNull(home0);
      
      DimensionLine dimensionLine0 = new DimensionLine(447.90118F, (-345.30542F), 447.90118F, 0.0F, 0.0F);
      home0.addDimensionLine(dimensionLine0);
      boolean boolean0 = home0.isEmpty();
      assertEquals(false, home0.isEmpty());
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      Home home0 = new Home((-56.38139F));
      assertNotNull(home0);
      
      ObserverCamera observerCamera0 = home0.getObserverCamera();
      assertNotNull(observerCamera0);
      
      home0.setCamera((Camera) observerCamera0);
      assertEquals(1372766400177L, observerCamera0.getTime());
      
      home0.clone();
      assertEquals((-56.38139F), home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test12()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      List<HomePieceOfFurniture> list0 = home0.getFurniture();
      assertNotNull(list0);
      
      List<Wall> list1 = Home.getWallsSubList(list0);
      assertNotNull(list1);
      
      List<Level> list2 = Home.getLevelsSubList(list1);
      assertNotNull(list2);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test13()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      home0.isModified();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test14()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      List<Selectable> list0 = home0.getSelectedItems();
      assertNotNull(list0);
      
      List<Selectable> list1 = Home.duplicate(list0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNotSame(list0, list1);
      assertNotNull(list1);
  }

  @Test
  public void test15()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      float float0 = home0.getWallHeight();
      assertEquals(250.0F, float0, 0.01F);
  }

  @Test
  public void test16()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      DimensionLine dimensionLine0 = new DimensionLine(0.0F, 68.35F, 0.0F, 0.0F, 0.0F);
      home0.deleteDimensionLine(dimensionLine0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test17()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      List<Camera> list0 = home0.getStoredCameras();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNotNull(list0);
  }

  @Test
  public void test18()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      home0.addWallsListener((CollectionListener<Wall>) null);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test19()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      home0.isBasePlanLocked();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test20()  throws Throwable  {
      Home home0 = new Home((-1360.9014F));
      assertNotNull(home0);
      
      home0.removeSelectionListener((SelectionListener) null);
      assertEquals((-1360.9014F), home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test21()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      home0.getBackgroundImage();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test22()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      home0.addLabelsListener((CollectionListener<Label>) null);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test23()  throws Throwable  {
      Home home0 = new Home((-1360.9014F));
      assertNotNull(home0);
      
      // Undeclared exception!
      try {
        home0.deleteLabel((Label) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test24()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      HomeEnvironment homeEnvironment0 = home0.getEnvironment();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNotNull(homeEnvironment0);
  }

  @Test
  public void test25()  throws Throwable  {
      Home home0 = new Home(0.0F);
      assertNotNull(home0);
      
      Collection<DimensionLine> collection0 = home0.getDimensionLines();
      assertNotNull(collection0);
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test26()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      home0.removeLabelsListener((CollectionListener<Label>) null);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test27()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      home0.removeFurnitureListener((CollectionListener<HomePieceOfFurniture>) null);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test28()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      Home.Property home_Property0 = Home.Property.FURNITURE_VISIBLE_PROPERTIES;
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", (PropertyChangeListener) null);
      home0.removePropertyChangeListener(home_Property0, (PropertyChangeListener) propertyChangeListenerProxy0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test29()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      home0.addFurnitureListener((CollectionListener<HomePieceOfFurniture>) null);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test30()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      Camera camera0 = home0.getCamera();
      assertNotNull(camera0);
      assertEquals(1372766400849L, camera0.getTime());
  }

  @Test
  public void test31()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertEquals(true, home0.isEmpty());
      
      Label label0 = new Label("", 0.0F, (-290.7478F));
      home0.addLabel(label0);
      boolean boolean0 = home0.isEmpty();
      assertEquals(false, home0.isEmpty());
      assertEquals(false, boolean0);
  }

  @Test
  public void test32()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      home0.addSelectionListener((SelectionListener) null);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test33()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      home0.getFurnitureSortedProperty();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test34()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      List<HomePieceOfFurniture> list0 = home0.getFurniture();
      assertNotNull(list0);
      
      List<Wall> list1 = Home.getWallsSubList(list0);
      assertNotNull(list1);
      
      List<HomePieceOfFurniture> list2 = Home.getFurnitureSubList(list1);
      assertNotNull(list2);
      assertNotSame(list2, list0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test35()  throws Throwable  {
      Home home0 = new Home((-1360.9014F));
      assertNotNull(home0);
      
      List<Level> list0 = home0.getLevels();
      assertNotNull(list0);
      assertEquals((-1360.9014F), home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test36()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      home0.removeWallsListener((CollectionListener<Wall>) null);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test37()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      home0.removeLevelsListener((CollectionListener<Level>) null);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test38()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      List<HomePieceOfFurniture> list0 = home0.getFurniture();
      assertNotNull(list0);
      
      List<Label> list1 = Home.getLabelsSubList(list0);
      assertNotNull(list1);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test39()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      Collection<Label> collection0 = home0.getLabels();
      assertNotNull(collection0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test40()  throws Throwable  {
      Home home0 = new Home((-1360.9014F));
      assertNotNull(home0);
      
      home0.removeDimensionLinesListener((CollectionListener<DimensionLine>) null);
      assertEquals((-1360.9014F), home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test41()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      home0.setVisualProperty("e+Tb}]F0", "e+Tb}]F0");
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test42()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      home0.getSelectedLevel();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test43()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      Compass compass0 = home0.getCompass();
      assertNotNull(compass0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(true, compass0.isVisible());
  }

  @Test
  public void test44()  throws Throwable  {
      Home home0 = new Home((-1360.9014F));
      assertNotNull(home0);
      
      home0.getName();
      assertEquals((-1360.9014F), home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test45()  throws Throwable  {
      Home home0 = new Home((-56.38139F));
      assertNotNull(home0);
      
      home0.getVisualProperty("Etc/Universal");
      assertEquals((-56.38139F), home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test46()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      home0.addDimensionLinesListener((CollectionListener<DimensionLine>) null);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test47()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(true, home0.isEmpty());
      assertNotNull(home0);
      
      Wall wall0 = new Wall((-15.933333F), (-15.933333F), (-15.933333F), 0.0F, 0.0F);
      home0.addWall(wall0);
      boolean boolean0 = home0.isEmpty();
      assertEquals(false, home0.isEmpty());
      assertEquals(false, boolean0);
  }

  @Test
  public void test48()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      home0.isFurnitureDescendingSorted();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test49()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      // Undeclared exception!
      try {
        home0.addLevel((Level) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test50()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      home0.deleteLevel((Level) null);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test51()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Home home0 = new Home((List<HomePieceOfFurniture>) linkedList0);
      assertNotNull(home0);
      
      home0.setSelectedLevel((Level) null);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test52()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      Level level0 = new Level("", (-66.2833F), (-66.2833F), (-66.2833F));
      home0.setSelectedLevel(level0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test53()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      home0.deletePieceOfFurniture((HomePieceOfFurniture) null);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test54()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Home home0 = new Home((List<HomePieceOfFurniture>) linkedList0);
      assertNotNull(home0);
      
      home0.setSelectedItems((List<? extends Selectable>) linkedList0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test55()  throws Throwable  {
      Home home0 = new Home(0.0F);
      assertNotNull(home0);
      
      float[][] floatArray0 = new float[7][4];
      Room room0 = new Room(floatArray0);
      home0.deleteRoom(room0);
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test56()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      home0.addWall(wall0);
      assertEquals(false, home0.isEmpty());
      
      home0.deleteWall(wall0);
      assertEquals(true, home0.isEmpty());
  }

  @Test
  public void test57()  throws Throwable  {
      Home home0 = new Home((-1360.9014F));
      assertNotNull(home0);
      
      boolean boolean0 = home0.isEmpty();
      assertEquals((-1360.9014F), home0.getWallHeight(), 0.01F);
      assertEquals(true, boolean0);
  }

  @Test
  public void test58()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      home0.setName("}W&Q");
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test59()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      home0.setName((String) null);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test60()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      home0.setModified(false);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test61()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      home0.setModified(true);
      assertEquals(true, home0.isModified());
  }

  @Test
  public void test62()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      home0.setRecovered(false);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test63()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      home0.setRecovered(true);
      assertEquals(true, home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test64()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      home0.setFurnitureSortedProperty((HomePieceOfFurniture.SortableProperty) null);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test65()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX_PERCENTAGE;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test66()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      home0.setFurnitureDescendingSorted(false);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test67()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      home0.setFurnitureDescendingSorted(true);
      assertEquals(true, home0.isFurnitureDescendingSorted());
  }

  @Test
  public void test68()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      // Undeclared exception!
      try {
        home0.setFurnitureVisibleProperties((List<HomePieceOfFurniture.SortableProperty>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test69()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      List<HomePieceOfFurniture.SortableProperty> list0 = home0.getFurnitureVisibleProperties();
      assertNotNull(list0);
      
      home0.setFurnitureVisibleProperties(list0);
      assertEquals(5, list0.size());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test70()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      home0.setBackgroundImage((BackgroundImage) null);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test71()  throws Throwable  {
      Home home0 = new Home(0.0F);
      assertNotNull(home0);
      
      BackgroundImage backgroundImage0 = new BackgroundImage((Content) null, (-533.4858F), (-1676.7705F), 7.2621584F, 0.0F, 1736.8086F, (float) 420L, (float) 420L, true);
      home0.setBackgroundImage(backgroundImage0);
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test72()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      home0.setCamera((Camera) null);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test73()  throws Throwable  {
      Home home0 = new Home(0.0F);
      assertNotNull(home0);
      
      Home home1 = home0.clone();
      assertNotNull(home1);
      
      Camera camera0 = home1.getCamera();
      assertNotNull(camera0);
      assertEquals(1372766400121L, camera0.getTime());
  }

  @Test
  public void test74()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      // Undeclared exception!
      try {
        home0.setStoredCameras((List<Camera>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test75()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      home0.setPrint((HomePrint) null);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test76()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      HomePrint.PaperOrientation homePrint_PaperOrientation0 = HomePrint.PaperOrientation.LANDSCAPE;
      HomePrint homePrint0 = new HomePrint(homePrint_PaperOrientation0, 0.0F, 0.0F, 0.0F, 1490.7012F, 0.0F, 0.0F, true, true, true, (Float) 0.0F, "3V[]6g", "3V[]6g");
      home0.setPrint(homePrint0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test77()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      home0.setBasePlanLocked(false);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test78()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      home0.setBasePlanLocked(true);
      assertEquals(true, home0.isBasePlanLocked());
      
      home0.setBasePlanLocked(false);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test
  public void test79()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      Wall wall0 = new Wall(818.67096F, 818.67096F, 32.58917F, 818.67096F, 0.0F);
      home0.addWall(wall0);
      Home home1 = home0.clone();
      assertEquals(false, home0.isEmpty());
      assertEquals(false, home1.isEmpty());
  }

  @Test
  public void test80()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      
      Label label0 = new Label("Africa/Lome", 447.90118F, 447.90118F);
      home0.addLabel(label0);
      Home home1 = home0.clone();
      assertEquals(false, home0.isEmpty());
      assertEquals(false, home1.isEmpty());
  }

  @Test
  public void test81()  throws Throwable  {
      LinkedList<Label> linkedList0 = new LinkedList<Label>();
      Label label0 = new Label("OTE`;9 ^3@m`", 0.0F, 0.0F);
      linkedList0.add(label0);
      List<Selectable> list0 = Home.duplicate((List<? extends Selectable>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(false, list0.isEmpty());
  }

  @Test
  public void test82()  throws Throwable  {
      LinkedList<Label> linkedList0 = new LinkedList<Label>();
      Label label0 = new Label("1`g),^t?&9v", 0.0F, 0.0F);
      linkedList0.add(label0);
      List<Label> list0 = Home.getLabelsSubList((List<? extends Selectable>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(false, list0.isEmpty());
  }
}
