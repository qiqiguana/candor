/*
 * This file was automatically generated by EvoSuite
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.eteks.sweethome3d.model.CatalogDoorOrWindow;
import com.eteks.sweethome3d.model.CatalogLight;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.FurnitureCategory;
import com.eteks.sweethome3d.model.HomeLight;
import com.eteks.sweethome3d.model.Light;
import com.eteks.sweethome3d.model.LightSource;
import com.eteks.sweethome3d.model.Sash;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import java.math.BigDecimal;
import java.net.URL;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class CatalogPieceOfFurnitureEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, false);
      LightSource[] lightSourceArray0 = new LightSource[10];
      CatalogLight catalogLight0 = new CatalogLight("", "", "", (Content) resourceURLContent0, (Content) resourceURLContent0, (Content) resourceURLContent0, (-1936.5673F), (-1936.5673F), (-1936.5673F), (float) 60000L, false, lightSourceArray0, (float[][]) null, "", false, (BigDecimal) null, (BigDecimal) null);
      HomeLight homeLight0 = new HomeLight((Light) catalogLight0);
      assertEquals(60000.0F, catalogLight0.getElevation(), 0.01F);
      assertNotNull(homeLight0);
      assertEquals((-1936.5673F), catalogLight0.getDepth(), 0.01F);
      assertEquals(true, catalogLight0.isDeformable());
      assertEquals(false, catalogLight0.isMovable());
      assertEquals(false, catalogLight0.isDoorOrWindow());
      assertEquals((-1936.5673F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-1936.5673F), catalogLight0.getHeight(), 0.01F);
      assertEquals(false, homeLight0.isDoorOrWindow());
  }

  @Test
  public void test1()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      Sash[] sashArray0 = new Sash[2];
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((double) 0.0F);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("com.eteks.sweethome3d.tools.temporarySubFolder", "com.eteks.sweethome3d.tools.temporarySubFolder", "com.eteks.sweethome3d.tools.temporarySubFolder", (Content) uRLContent0, (Content) uRLContent0, (Content) uRLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, 0.0F, sashArray0, floatArray0, "com.eteks.sweethome3d.tools.temporarySubFolder", true, true, true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogDoorOrWindow0);
      
      catalogDoorOrWindow0.getCreationDate();
      assertEquals(true, catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
  }

  @Test
  public void test2()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      Sash[] sashArray0 = new Sash[2];
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((double) 0.0F);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("com.eteks.sweethome3d.tools.temporarySubFolder", "com.eteks.sweethome3d.tools.temporarySubFolder", "com.eteks.sweethome3d.tools.temporarySubFolder", (Content) uRLContent0, (Content) uRLContent0, (Content) uRLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, 0.0F, 0.0F, sashArray0, floatArray0, "com.eteks.sweethome3d.tools.temporarySubFolder", true, true, true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogDoorOrWindow0);
      
      catalogDoorOrWindow0.getTags();
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(true, catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
  }

  @Test
  public void test3()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("X`Z43iX^k\"vQ-%l", (Content) null, (Content) null, (-6.248636F), (-6.248636F), (-6.248636F), false, false);
      assertNotNull(catalogPieceOfFurniture0);
      
      catalogPieceOfFurniture0.getInformation();
      assertEquals(false, catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-6.248636F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(false, catalogPieceOfFurniture0.isMovable());
      assertEquals((-6.248636F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-6.248636F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
  }

  @Test
  public void test4()  throws Throwable  {
      Sash[] sashArray0 = new Sash[10];
      float[][] floatArray0 = new float[5][4];
      BigDecimal bigDecimal0 = new BigDecimal((double) (-10.002116F));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("||u2f(Y:*//9.X^TP", "||u2f(Y:*//9.X^TP", "@/%{$o:L/", (Content) null, (Content) null, (-10.002116F), (float) 0L, (float) 0L, (float) 0L, true, (float) 0L, (float) 0L, sashArray0, floatArray0, "||u2f(Y:*//9.X^TP", true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogDoorOrWindow0);
      
      int int0 = catalogDoorOrWindow0.hashCode();
      assertEquals(2016847325, int0);
  }

  @Test
  public void test5()  throws Throwable  {
      Long long0 = new Long(1L);
      Float float0 = new Float((double) long0);
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      float[][] floatArray0 = new float[3][2];
      float[] floatArray1 = new float[10];
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray0[0];
      floatArray0[2] = floatArray1;
      LightSource[] lightSourceArray0 = new LightSource[7];
      BigDecimal bigDecimal0 = new BigDecimal((long) (-1984));
      CatalogLight catalogLight0 = new CatalogLight("", "", "", (Content) resourceURLContent0, (Content) resourceURLContent0, (Content) resourceURLContent0, (float) float0, (float) long0, (float) 1L, 0.0F, true, lightSourceArray0, floatArray0, "", true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      
      catalogLight0.getCategory();
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(1.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(true, catalogLight0.isMovable());
      assertEquals(false, catalogLight0.isDoorOrWindow());
  }

  @Test
  public void test6()  throws Throwable  {
      Long long0 = new Long(1L);
      Float float0 = new Float((double) long0);
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      Integer integer0 = new Integer((-1984));
      float[][] floatArray0 = new float[3][2];
      float[] floatArray1 = new float[10];
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray0[0];
      floatArray0[2] = floatArray1;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) resourceURLContent0, (Content) resourceURLContent0, (float) float0, (float) float0, (float) long0, (float) float0, true, integer0, floatArray0, true, (float) integer0, true);
      assertNotNull(catalogPieceOfFurniture0);
      
      catalogPieceOfFurniture0.getGrade();
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(false, catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(1.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(true, catalogPieceOfFurniture0.isMovable());
  }

  @Test
  public void test7()  throws Throwable  {
      Long long0 = new Long(1L);
      Float float0 = new Float((double) long0);
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      float[][] floatArray0 = new float[3][2];
      float[] floatArray1 = new float[10];
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray0[0];
      floatArray0[2] = floatArray1;
      LightSource[] lightSourceArray0 = new LightSource[7];
      BigDecimal bigDecimal0 = new BigDecimal((long) (-1984));
      CatalogLight catalogLight0 = new CatalogLight("", "", "", (Content) resourceURLContent0, (Content) resourceURLContent0, (Content) resourceURLContent0, (float) float0, (float) long0, (float) 1L, 0.0F, true, lightSourceArray0, floatArray0, "", true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      
      catalogLight0.setCategory((FurnitureCategory) null);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(false, catalogLight0.isDoorOrWindow());
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(true, catalogLight0.isMovable());
      assertEquals(1.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
  }

  @Test
  public void test8()  throws Throwable  {
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, false);
      LightSource[] lightSourceArray0 = new LightSource[10];
      CatalogLight catalogLight0 = new CatalogLight("", "", "", (Content) resourceURLContent0, (Content) resourceURLContent0, (Content) resourceURLContent0, (-1936.5673F), (-1936.5673F), (-1936.5673F), (float) 60000L, false, lightSourceArray0, (float[][]) null, "", false, (BigDecimal) null, (BigDecimal) null);
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      catalogLight0.equals((Object) bigDecimal0);
      assertEquals(60000.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(false, catalogLight0.isMovable());
      assertEquals((-1936.5673F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-1936.5673F), catalogLight0.getHeight(), 0.01F);
      assertEquals((-1936.5673F), catalogLight0.getWidth(), 0.01F);
      assertEquals(false, catalogLight0.isDoorOrWindow());
  }

  @Test
  public void test9()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("X`Z43iX^k\"vQ-%l", (Content) null, (Content) null, (-6.248636F), (-6.248636F), (-6.248636F), false, false);
      assertNotNull(catalogPieceOfFurniture0);
      
      catalogPieceOfFurniture0.getCreator();
      assertEquals((-6.248636F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-6.248636F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-6.248636F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(false, catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(false, catalogPieceOfFurniture0.isMovable());
  }

  @Test
  public void test10()  throws Throwable  {
      Long long0 = new Long(1L);
      Float float0 = new Float((double) long0);
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      Integer integer0 = new Integer((-1984));
      float[][] floatArray0 = new float[3][2];
      float[] floatArray1 = new float[10];
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray0[0];
      floatArray0[2] = floatArray1;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) resourceURLContent0, (Content) resourceURLContent0, (float) float0, (float) float0, (float) long0, (float) float0, true, integer0, floatArray0, true, (float) integer0, true);
      assertNotNull(catalogPieceOfFurniture0);
      
      float float1 = catalogPieceOfFurniture0.getIconYaw();
      assertEquals(1.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-1984.0F), float1, 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(false, catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(true, catalogPieceOfFurniture0.isMovable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
  }

  @Test
  public void test11()  throws Throwable  {
      Long long0 = new Long(1L);
      Float float0 = new Float((double) long0);
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      Integer integer0 = new Integer((-1984));
      float[][] floatArray0 = new float[3][2];
      float[] floatArray1 = new float[10];
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray0[0];
      floatArray0[2] = floatArray1;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) resourceURLContent0, (Content) resourceURLContent0, (float) float0, (float) float0, (float) long0, (float) float0, true, integer0, floatArray0, true, (float) integer0, true);
      assertNotNull(catalogPieceOfFurniture0);
      
      boolean boolean0 = catalogPieceOfFurniture0.isProportional();
      assertEquals(1.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(false, catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(1.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(true, catalogPieceOfFurniture0.isMovable());
      assertEquals(true, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      Long long0 = new Long(1L);
      Float float0 = new Float((double) long0);
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      Integer integer0 = new Integer((-1984));
      float[][] floatArray0 = new float[3][2];
      float[] floatArray1 = new float[10];
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray0[0];
      floatArray0[2] = floatArray1;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) resourceURLContent0, (Content) resourceURLContent0, (float) float0, (float) float0, (float) long0, (float) float0, true, integer0, floatArray0, true, (float) integer0, true);
      assertNotNull(catalogPieceOfFurniture0);
      
      int int0 = catalogPieceOfFurniture0.compareTo(catalogPieceOfFurniture0);
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(false, catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0, int0);
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(true, catalogPieceOfFurniture0.isMovable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
  }

  @Test
  public void test13()  throws Throwable  {
      float[][] floatArray0 = new float[5][4];
      BigDecimal bigDecimal0 = new BigDecimal((double) (-10.002116F));
      LightSource[] lightSourceArray0 = new LightSource[40];
      CatalogLight catalogLight0 = new CatalogLight("||u2f(Y:*//9.X^TP", "@/%{$o:L/", "@/%{$o:L/", (Content) null, (Content) null, (Content) null, (-10.002116F), (-10.002116F), (float) 0L, (-10.002116F), true, lightSourceArray0, floatArray0, "||u2f(Y:*//9.X^TP", true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      
      String[] stringArray0 = new String[8];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("||u2f(Y:*//9.X^TP", "||u2f(Y:*//9.X^TP", "||u2f(Y:*//9.X^TP", "||u2f(Y:*//9.X^TP", stringArray0, (Long) 0L, (Float) (-10.002116F), (Content) null, (Content) null, (Content) null, (float) 0L, (-10.002116F), (float) 0L, (float) 0L, true, (String) null, floatArray0, (String) null, true, true, true, bigDecimal0, bigDecimal0, (String) null);
      int int0 = catalogLight0.compareTo(catalogPieceOfFurniture0);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-10.002116F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-1), int0);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("||u2f(Y:*//9.X^TP", catalogLight0.getId());
      assertEquals(false, catalogLight0.isDoorOrWindow());
      assertEquals((-10.002116F), catalogLight0.getWidth(), 0.01F);
      assertEquals("@/%{$o:L/", catalogLight0.getName());
      assertEquals(true, catalogLight0.isMovable());
      assertEquals((-10.002116F), catalogLight0.getElevation(), 0.01F);
      assertEquals("@/%{$o:L/", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
  }

  @Test
  public void test14()  throws Throwable  {
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      Integer integer0 = new Integer((-1984));
      float[][] floatArray0 = new float[10][9];
      BigDecimal bigDecimal0 = new BigDecimal(1L);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", "", "", (Content) resourceURLContent0, (Content) resourceURLContent0, (Content) resourceURLContent0, (float) (-1984), (float) 1L, (float) (-1984), 0.0F, false, "", floatArray0, "", false, false, true, bigDecimal0, bigDecimal0, "");
      assertNotNull(catalogPieceOfFurniture0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture1 = new CatalogPieceOfFurniture("", (Content) resourceURLContent0, (Content) resourceURLContent0, 0.0F, 0.0F, 0.0F, 300.6348F, true, integer0, floatArray0, false, 875.1336F, true);
      int int0 = catalogPieceOfFurniture0.compareTo(catalogPieceOfFurniture1);
      assertEquals((-1), int0);
      assertEquals(true, catalogPieceOfFurniture1.isMovable());
      assertEquals(300.6348F, catalogPieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(false, catalogPieceOfFurniture0.isMovable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-1984.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(false, catalogPieceOfFurniture1.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture1.getHeight(), 0.01F);
  }
}
