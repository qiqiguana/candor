/*
 * This file was automatically generated by EvoSuite
 */

package com.eteks.sweethome3d.swing;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.swing.SwingTools;
import java.awt.Color;
import java.awt.HeadlessException;
import java.net.URL;
import java.util.List;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JComponent;
import javax.swing.JInternalFrame;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.JViewport;
import javax.swing.border.BevelBorder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.text.JTextComponent;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SwingToolsEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      JTextField jTextField0 = new JTextField(0);
      SwingTools.addAutoSelectionOnFocusGain((JTextComponent) jTextField0);
      assertEquals(0, jTextField0.getSelectionStart());
  }

  @Test
  public void test1()  throws Throwable  {
      SwingTools.updateSwingResourceLanguage();
  }

  @Test
  public void test2()  throws Throwable  {
      DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer();
      JScrollPane jScrollPane0 = SwingTools.createScrollPane((JComponent) defaultListCellRenderer0);
      assertNotNull(jScrollPane0);
      
      Class<?> class0 = SwingTools.class;
      List<JViewport> list0 = SwingTools.findChildren((JComponent) jScrollPane0, (Class<JViewport>) class0);
      assertNotNull(list0);
      assertEquals(true, jScrollPane0.isMinimumSizeSet());
      assertEquals(0, list0.size());
      assertEquals(20, jScrollPane0.getVerticalScrollBarPolicy());
  }

  @Test
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try {
        SwingTools.showSplashScreenWindow((URL) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * input == null!
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      boolean boolean0 = SwingTools.showDocumentInBrowser((URL) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try {
        SwingTools.hideDisabledMenuItems((JPopupMenu) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try {
        SwingTools.updateSwingResourceLanguage((UserPreferences) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer();
      SwingTools.installFocusBorder((JComponent) defaultListCellRenderer0);
      assertEquals(false, defaultListCellRenderer0.isPaintingForPrint());
  }

  @Test
  public void test8()  throws Throwable  {
      JRadioButton[] jRadioButtonArray0 = new JRadioButton[16];
      // Undeclared exception!
      try {
        SwingTools.deselectAllRadioButtons(jRadioButtonArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      JPanel jPanel0 = SwingTools.createTitledPanel("tuyW:RZb+h[>FV");
      // Undeclared exception!
      try {
        SwingTools.showConfirmDialog((JComponent) null, (JComponent) jPanel0, "tuyW:RZb+h[>FV", (JComponent) jPanel0);
        fail("Expecting exception: HeadlessException");
      } catch(HeadlessException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      // Undeclared exception!
      try {
        SwingTools.showConfirmDialog((JComponent) jInternalFrame0, (JComponent) jInternalFrame0, "[!d1(c&]", (JComponent) jInternalFrame0);
        fail("Expecting exception: HeadlessException");
      } catch(HeadlessException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try {
        SwingTools.showMessageDialog((JComponent) null, (JComponent) null, "", 0, (JComponent) null);
        fail("Expecting exception: HeadlessException");
      } catch(HeadlessException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      JInternalFrame jInternalFrame0 = new JInternalFrame((String) null, false, false, false);
      // Undeclared exception!
      try {
        SwingTools.showMessageDialog((JComponent) jInternalFrame0, (JComponent) jInternalFrame0, (String) null, 0, (JComponent) jInternalFrame0);
        fail("Expecting exception: HeadlessException");
      } catch(HeadlessException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      CatalogTexture catalogTexture0 = new CatalogTexture("com.sun.java.swing.plaf.gtk.GTKLookAndFeel", "com.sun.java.swing.plaf.gtk.GTKLookAndFeel", (Content) null, 1107.7515F, 1107.7515F, "com.sun.java.swing.plaf.gtk.GTKLookAndFeel", true);
      // Undeclared exception!
      try {
        SwingTools.getPatternImage((TextureImage) catalogTexture0, (Color) null, (Color) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test14()  throws Throwable  {
      BevelBorder bevelBorder0 = (BevelBorder)SwingTools.getDropableComponentBorder();
      assertEquals(true, bevelBorder0.isBorderOpaque());
  }

  @Test
  public void test15()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      JTable jTable0 = new JTable((TableModel) defaultTableModel0);
      Class<?> class0 = SwingTools.class;
      List<JViewport> list0 = SwingTools.findChildren((JComponent) jTable0, (Class<JViewport>) class0);
      assertEquals(0, list0.size());
  }
}
