/*
 * This file was automatically generated by EvoSuite
 */

package com.eteks.sweethome3d.viewcontroller;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.eteks.sweethome3d.model.Home;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.swing.SwingViewFactory;
import com.eteks.sweethome3d.viewcontroller.ObserverCameraController;
import com.eteks.sweethome3d.viewcontroller.View;
import com.eteks.sweethome3d.viewcontroller.ViewFactory;
import java.beans.PropertyChangeListener;
import javax.swing.plaf.basic.BasicLabelUI;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ObserverCameraControllerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Home home0 = new Home();
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      ObserverCameraController observerCameraController0 = new ObserverCameraController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0);
      assertNotNull(observerCameraController0);
      
      ObserverCameraController.Property observerCameraController_Property0 = ObserverCameraController.Property.FIELD_OF_VIEW_IN_DEGREES;
      BasicLabelUI basicLabelUI0 = new BasicLabelUI();
      observerCameraController0.addPropertyChangeListener(observerCameraController_Property0, (PropertyChangeListener) basicLabelUI0);
      assertEquals(63, observerCameraController0.getFieldOfViewInDegrees());
      assertEquals(true, observerCameraController0.isElevationAdjusted());
      assertEquals(50.0F, observerCameraController0.getX(), 0.01F);
      assertEquals(315, observerCameraController0.getYawInDegrees());
      assertEquals(10.0F, observerCameraController0.getMinimumElevation(), 0.01F);
      assertEquals(11, observerCameraController0.getPitchInDegrees());
      assertEquals(170.0F, observerCameraController0.getElevation(), 0.01F);
  }

  @Test
  public void test1()  throws Throwable  {
      Home home0 = new Home();
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      ObserverCameraController observerCameraController0 = new ObserverCameraController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0);
      assertNotNull(observerCameraController0);
      
      observerCameraController0.modifyObserverCamera();
      assertEquals(315, observerCameraController0.getYawInDegrees());
      assertEquals(true, observerCameraController0.isElevationAdjusted());
      assertEquals(10.0F, observerCameraController0.getMinimumElevation(), 0.01F);
      assertEquals(50.0F, observerCameraController0.getY(), 0.01F);
      assertEquals(50.0F, observerCameraController0.getX(), 0.01F);
      assertEquals(11, observerCameraController0.getPitchInDegrees());
      assertEquals(63, observerCameraController0.getFieldOfViewInDegrees());
      assertEquals(170.0F, observerCameraController0.getElevation(), 0.01F);
  }

  @Test
  public void test2()  throws Throwable  {
      Home home0 = new Home();
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      ObserverCameraController observerCameraController0 = new ObserverCameraController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0);
      assertNotNull(observerCameraController0);
      
      float float0 = observerCameraController0.getMinimumElevation();
      assertEquals(170.0F, observerCameraController0.getElevation(), 0.01F);
      assertEquals(10.0F, float0, 0.01F);
      assertEquals(315, observerCameraController0.getYawInDegrees());
      assertEquals(50.0F, observerCameraController0.getX(), 0.01F);
      assertEquals(50.0F, observerCameraController0.getY(), 0.01F);
      assertEquals(63, observerCameraController0.getFieldOfViewInDegrees());
      assertEquals(true, observerCameraController0.isElevationAdjusted());
      assertEquals(11, observerCameraController0.getPitchInDegrees());
  }

  @Test
  public void test3()  throws Throwable  {
      Home home0 = new Home();
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      ObserverCameraController observerCameraController0 = new ObserverCameraController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0);
      assertNotNull(observerCameraController0);
      
      ObserverCameraController.Property observerCameraController_Property0 = ObserverCameraController.Property.ELEVATION;
      observerCameraController0.removePropertyChangeListener(observerCameraController_Property0, (PropertyChangeListener) null);
      assertEquals(50.0F, observerCameraController0.getY(), 0.01F);
      assertEquals(50.0F, observerCameraController0.getX(), 0.01F);
      assertEquals(170.0F, observerCameraController0.getElevation(), 0.01F);
      assertEquals(true, observerCameraController0.isElevationAdjusted());
      assertEquals(11, observerCameraController0.getPitchInDegrees());
      assertEquals(63, observerCameraController0.getFieldOfViewInDegrees());
      assertEquals(315, observerCameraController0.getYawInDegrees());
      assertEquals(10.0F, observerCameraController0.getMinimumElevation(), 0.01F);
  }

  @Test
  public void test4()  throws Throwable  {
      Home home0 = new Home((-1.0F));
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      ObserverCameraController observerCameraController0 = new ObserverCameraController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0);
      assertNotNull(observerCameraController0);
      
      // Undeclared exception!
      try {
        observerCameraController0.displayView((View) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      Home home0 = new Home();
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      ObserverCameraController observerCameraController0 = new ObserverCameraController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0);
      assertNotNull(observerCameraController0);
      
      observerCameraController0.updateProperties();
      assertEquals(170.0F, observerCameraController0.getElevation(), 0.01F);
      assertEquals(315, observerCameraController0.getYawInDegrees());
      assertEquals(true, observerCameraController0.isElevationAdjusted());
      assertEquals(50.0F, observerCameraController0.getY(), 0.01F);
      assertEquals(10.0F, observerCameraController0.getMinimumElevation(), 0.01F);
      assertEquals(50.0F, observerCameraController0.getX(), 0.01F);
      assertEquals(11, observerCameraController0.getPitchInDegrees());
      assertEquals(63, observerCameraController0.getFieldOfViewInDegrees());
  }

  @Test
  public void test6()  throws Throwable  {
      Home home0 = new Home();
      Level level0 = new Level("", (-329.966F), (-329.966F), (-329.966F));
      home0.setSelectedLevel(level0);
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      ObserverCameraController observerCameraController0 = new ObserverCameraController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0);
      assertEquals(true, observerCameraController0.isElevationAdjusted());
      assertNotNull(observerCameraController0);
      
      observerCameraController0.setElevationAdjusted(false);
      assertEquals(50.0F, observerCameraController0.getY(), 0.01F);
  }

  @Test
  public void test7()  throws Throwable  {
      Home home0 = new Home();
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      ObserverCameraController observerCameraController0 = new ObserverCameraController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0);
      assertNotNull(observerCameraController0);
      
      boolean boolean0 = observerCameraController0.isObserverCameraElevationAdjustedEditable();
      assertEquals(true, observerCameraController0.isElevationAdjusted());
      assertEquals(11, observerCameraController0.getPitchInDegrees());
      assertEquals(170.0F, observerCameraController0.getElevation(), 0.01F);
      assertEquals(50.0F, observerCameraController0.getX(), 0.01F);
      assertEquals(63, observerCameraController0.getFieldOfViewInDegrees());
      assertEquals(50.0F, observerCameraController0.getY(), 0.01F);
      assertEquals(315, observerCameraController0.getYawInDegrees());
      assertEquals(10.0F, observerCameraController0.getMinimumElevation(), 0.01F);
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      Home home0 = new Home();
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      ObserverCameraController observerCameraController0 = new ObserverCameraController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0);
      assertNotNull(observerCameraController0);
      assertEquals(true, observerCameraController0.isElevationAdjusted());
      
      observerCameraController0.setElevationAdjusted(false);
      observerCameraController0.modifyObserverCamera();
      assertEquals(10.0F, observerCameraController0.getMinimumElevation(), 0.01F);
  }

  @Test
  public void test9()  throws Throwable  {
      Home home0 = new Home();
      Level level0 = new Level("", (-329.966F), (-329.966F), (-329.966F));
      home0.setSelectedLevel(level0);
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      ObserverCameraController observerCameraController0 = new ObserverCameraController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0);
      assertNotNull(observerCameraController0);
      
      observerCameraController0.modifyObserverCamera();
      assertEquals(315, observerCameraController0.getYawInDegrees());
      assertEquals(50.0F, observerCameraController0.getX(), 0.01F);
      assertEquals(true, observerCameraController0.isElevationAdjusted());
      assertEquals(50.0F, observerCameraController0.getY(), 0.01F);
      assertEquals(499.966F, observerCameraController0.getElevation(), 0.01F);
      assertEquals(63, observerCameraController0.getFieldOfViewInDegrees());
      assertEquals(10.0F, observerCameraController0.getMinimumElevation(), 0.01F);
      assertEquals(11, observerCameraController0.getPitchInDegrees());
  }
}
