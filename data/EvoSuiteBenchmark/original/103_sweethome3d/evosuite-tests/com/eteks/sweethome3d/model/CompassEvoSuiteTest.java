/*
 * This file was automatically generated by EvoSuite
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.eteks.sweethome3d.model.Compass;
import java.beans.PropertyChangeListener;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class CompassEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Compass compass0 = new Compass(165.33234F, 165.33234F, 165.33234F);
      float float0 = compass0.getLatitude();
      assertEquals(165.33234F, compass0.getX(), 0.01F);
      assertEquals(165.33234F, compass0.getY(), 0.01F);
      assertEquals(true, compass0.isVisible());
      assertEquals(0.95265883F, float0, 0.01F);
      assertEquals(165.33234F, compass0.getDiameter(), 0.01F);
  }

  @Test
  public void test1()  throws Throwable  {
      Compass compass0 = new Compass(93.52038F, 93.52038F, 93.52038F);
      assertNotNull(compass0);
      
      Compass compass1 = compass0.clone();
      assertEquals(93.52038F, compass0.getY(), 0.01F);
      assertEquals(93.52038F, compass0.getX(), 0.01F);
      assertEquals(93.52038F, compass0.getDiameter(), 0.01F);
      assertEquals(true, compass0.isVisible());
      assertNotSame(compass0, compass1);
  }

  @Test
  public void test2()  throws Throwable  {
      Compass compass0 = new Compass(0.0F, 0.0F, 0.0F);
      assertNotNull(compass0);
      
      compass0.containsPoint(0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, compass0.getX(), 0.01F);
      assertEquals(true, compass0.isVisible());
      assertEquals(0.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getDiameter(), 0.01F);
  }

  @Test
  public void test3()  throws Throwable  {
      Compass compass0 = new Compass(46.618107F, 46.618107F, 46.618107F);
      assertNotNull(compass0);
      
      compass0.removePropertyChangeListener((PropertyChangeListener) null);
      assertEquals(true, compass0.isVisible());
      assertEquals(46.618107F, compass0.getY(), 0.01F);
      assertEquals(46.618107F, compass0.getX(), 0.01F);
      assertEquals(46.618107F, compass0.getDiameter(), 0.01F);
  }

  @Test
  public void test4()  throws Throwable  {
      Compass compass0 = new Compass(93.52038F, 93.52038F, 93.52038F);
      assertNotNull(compass0);
      
      String string0 = compass0.getTimeZone();
      assertNotNull(string0);
      assertEquals(93.52038F, compass0.getX(), 0.01F);
      assertEquals(true, compass0.isVisible());
      assertEquals(93.52038F, compass0.getY(), 0.01F);
      assertEquals(93.52038F, compass0.getDiameter(), 0.01F);
  }

  @Test
  public void test5()  throws Throwable  {
      Compass compass0 = new Compass(0.0F, 0.0F, 0.0F);
      assertNotNull(compass0);
      
      compass0.move(0.0F, 0.0F);
      assertEquals(0.0F, compass0.getDiameter(), 0.01F);
      assertEquals(true, compass0.isVisible());
      assertEquals(0.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getX(), 0.01F);
  }

  @Test
  public void test6()  throws Throwable  {
      Compass compass0 = new Compass(1.0F, 1.0F, 11.759723F);
      assertNotNull(compass0);
      
      float float0 = compass0.getLongitude();
      assertEquals(11.759723F, compass0.getDiameter(), 0.01F);
      assertEquals(true, compass0.isVisible());
      assertEquals((-0.10355619F), float0, 0.01F);
      assertEquals(1.0F, compass0.getY(), 0.01F);
      assertEquals(1.0F, compass0.getX(), 0.01F);
  }

  @Test
  public void test7()  throws Throwable  {
      Compass compass0 = new Compass(0.0F, 0.0F, 0.0F);
      assertNotNull(compass0);
      
      compass0.intersectsRectangle(0.0F, (-1.0218756F), 0.0F, 0.0F);
      assertEquals(true, compass0.isVisible());
      assertEquals(0.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getDiameter(), 0.01F);
      assertEquals(0.0F, compass0.getX(), 0.01F);
  }

  @Test
  public void test8()  throws Throwable  {
      Compass compass0 = new Compass(93.52038F, 93.52038F, 93.52038F);
      assertNotNull(compass0);
      
      compass0.addPropertyChangeListener((PropertyChangeListener) null);
      assertEquals(93.52038F, compass0.getY(), 0.01F);
      assertEquals(true, compass0.isVisible());
      assertEquals(93.52038F, compass0.getDiameter(), 0.01F);
      assertEquals(93.52038F, compass0.getX(), 0.01F);
  }

  @Test
  public void test9()  throws Throwable  {
      Compass compass0 = new Compass(0.0F, 0.0F, 0.0F);
      assertNotNull(compass0);
      
      boolean boolean0 = compass0.isVisible();
      assertEquals(0.0F, compass0.getDiameter(), 0.01F);
      assertEquals(0.0F, compass0.getX(), 0.01F);
      assertEquals(0.0F, compass0.getY(), 0.01F);
      assertEquals(true, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      Compass compass0 = new Compass(0.0F, 0.0F, 0.0F);
      float float0 = compass0.getSunAzimuth(168L);
      assertEquals(0.2158986F, float0, 0.01F);
      
      float float1 = compass0.getSunElevation(168L);
      assertEquals((-1.0127262F), float1, 0.01F);
  }

  @Test
  public void test11()  throws Throwable  {
      Compass compass0 = new Compass(165.33234F, 165.33234F, 165.33234F);
      assertNotNull(compass0);
      
      float[][] floatArray0 = compass0.getPoints();
      assertNotNull(floatArray0);
      
      compass0.getPoints();
      assertEquals(165.33234F, compass0.getY(), 0.01F);
      assertEquals(165.33234F, compass0.getX(), 0.01F);
      assertEquals(true, compass0.isVisible());
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals(165.33234F, compass0.getDiameter(), 0.01F);
  }

  @Test
  public void test12()  throws Throwable  {
      Compass compass0 = new Compass(30.905083F, 30.905083F, 30.905083F);
      assertNotNull(compass0);
      
      compass0.setX(114.933334F);
      assertEquals(114.933334F, compass0.getX(), 0.01F);
      assertEquals(30.905083F, compass0.getY(), 0.01F);
  }

  @Test
  public void test13()  throws Throwable  {
      Compass compass0 = new Compass(1.0F, 11.759723F, 1.0F);
      assertEquals(11.759723F, compass0.getY(), 0.01F);
      assertNotNull(compass0);
      
      compass0.setY(1.0F);
      assertEquals(1.0F, compass0.getY(), 0.01F);
      assertEquals(1.0F, compass0.getDiameter(), 0.01F);
  }

  @Test
  public void test14()  throws Throwable  {
      Compass compass0 = new Compass(1.0F, 11.759723F, 1.0F);
      assertNotNull(compass0);
      assertEquals(1.0F, compass0.getDiameter(), 0.01F);
      
      compass0.setDiameter(1.0F);
      assertEquals(11.759723F, compass0.getY(), 0.01F);
      assertEquals(true, compass0.isVisible());
      assertEquals(1.0F, compass0.getX(), 0.01F);
  }

  @Test
  public void test15()  throws Throwable  {
      Compass compass0 = new Compass((-14.546591F), (-648.298F), (-14.546591F));
      assertEquals((-14.546591F), compass0.getDiameter(), 0.01F);
      assertNotNull(compass0);
      
      compass0.setDiameter((-648.298F));
      assertEquals((-648.298F), compass0.getDiameter(), 0.01F);
      assertEquals((-14.546591F), compass0.getX(), 0.01F);
  }

  @Test
  public void test16()  throws Throwable  {
      Compass compass0 = new Compass(0.0F, 0.0F, 0.0F);
      assertEquals(true, compass0.isVisible());
      assertNotNull(compass0);
      
      compass0.setVisible(true);
      assertEquals(0.0F, compass0.getDiameter(), 0.01F);
      assertEquals(0.0F, compass0.getX(), 0.01F);
      assertEquals(0.0F, compass0.getY(), 0.01F);
  }

  @Test
  public void test17()  throws Throwable  {
      Compass compass0 = new Compass((-14.546591F), (-648.298F), (-14.546591F));
      assertNotNull(compass0);
      
      compass0.setVisible(false);
      assertEquals(false, compass0.isVisible());
      
      compass0.setVisible(true);
      assertEquals((-648.298F), compass0.getY(), 0.01F);
  }

  @Test
  public void test18()  throws Throwable  {
      Compass compass0 = new Compass(0.0F, 0.0F, 0.0F);
      assertNotNull(compass0);
      
      compass0.setNorthDirection(0.0F);
      assertEquals(0.0F, compass0.getDiameter(), 0.01F);
      assertEquals(0.0F, compass0.getX(), 0.01F);
      assertEquals(0.0F, compass0.getY(), 0.01F);
      assertEquals(true, compass0.isVisible());
  }

  @Test
  public void test19()  throws Throwable  {
      Compass compass0 = new Compass(1.0F, 1.0F, 11.759723F);
      assertNotNull(compass0);
      
      compass0.setNorthDirection(1.0F);
      assertEquals(1.0F, compass0.getNorthDirection(), 0.01F);
  }

  @Test
  public void test20()  throws Throwable  {
      Compass compass0 = new Compass(0.0F, 0.0F, 0.0F);
      assertNotNull(compass0);
      
      compass0.setLatitude(0.0F);
      compass0.setLatitude(0.0F);
      assertEquals(0.0F, compass0.getLatitude(), 0.01F);
  }

  @Test
  public void test21()  throws Throwable  {
      Compass compass0 = new Compass(1.0F, 1.0F, 11.759723F);
      assertNotNull(compass0);
      
      compass0.setLongitude((-0.10355619F));
      assertEquals(1.0F, compass0.getY(), 0.01F);
      assertEquals(11.759723F, compass0.getDiameter(), 0.01F);
      assertEquals(1.0F, compass0.getX(), 0.01F);
      assertEquals(true, compass0.isVisible());
  }

  @Test
  public void test22()  throws Throwable  {
      Compass compass0 = new Compass(0.0F, 0.0F, 0.0F);
      assertNotNull(compass0);
      
      compass0.setLongitude(0.0F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(0.0F, compass0.getDiameter(), 0.01F);
  }

  @Test
  public void test23()  throws Throwable  {
      Compass compass0 = new Compass(93.52038F, 93.52038F, 93.52038F);
      assertNotNull(compass0);
      
      compass0.setTimeZone("Europe/Belfast");
      assertEquals(93.52038F, compass0.getY(), 0.01F);
      assertEquals(93.52038F, compass0.getX(), 0.01F);
      assertEquals(true, compass0.isVisible());
      assertEquals(93.52038F, compass0.getDiameter(), 0.01F);
  }

  @Test
  public void test24()  throws Throwable  {
      Compass compass0 = new Compass(0.0F, 0.0F, 0.0F);
      assertNotNull(compass0);
      
      compass0.setTimeZone("America/North_Dakota/Center");
      float float0 = compass0.getSunElevation(1L);
      assertEquals("America/North_Dakota/Center", compass0.getTimeZone());
      assertEquals((-0.9502566F), float0, 0.01F);
  }

  @Test
  public void test25()  throws Throwable  {
      Compass compass0 = new Compass(46.618107F, 46.618107F, 46.618107F);
      assertNotNull(compass0);
      
      // Undeclared exception!
      try {
        compass0.setTimeZone((String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Time zone ID can't be null
         */
      }
  }

  @Test
  public void test26()  throws Throwable  {
      Compass compass0 = new Compass(30.905083F, 30.905083F, 30.905083F);
      assertNotNull(compass0);
      
      boolean boolean0 = compass0.containsPoint(114.933334F, 30.905083F, 114.933334F);
      assertEquals(true, compass0.isVisible());
      assertEquals(true, boolean0);
      assertEquals(30.905083F, compass0.getX(), 0.01F);
      assertEquals(30.905083F, compass0.getY(), 0.01F);
  }

  @Test
  public void test27()  throws Throwable  {
      Compass compass0 = new Compass(0.0F, 0.0F, 0.0F);
      float float0 = compass0.getSunElevation(1L);
      assertEquals((-1.0127262F), float0, 0.01F);
      
      float float1 = compass0.getSunAzimuth((-2027L));
      assertEquals(0.21552207F, float1, 0.01F);
      assertEquals(0.0F, compass0.getDiameter(), 0.01F);
      assertEquals(0.0F, compass0.getY(), 0.01F);
  }
}
