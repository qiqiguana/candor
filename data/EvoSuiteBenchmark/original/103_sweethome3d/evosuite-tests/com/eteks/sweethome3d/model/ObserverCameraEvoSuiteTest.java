/*
 * This file was automatically generated by EvoSuite
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.eteks.sweethome3d.model.Camera;
import com.eteks.sweethome3d.model.ObserverCamera;
import java.beans.PropertyChangeListener;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ObserverCameraEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ObserverCamera observerCamera0 = new ObserverCamera((-1113.797F), (-1113.797F), (-1113.797F), (-1113.797F), (-1113.797F), (-1113.797F));
      ObserverCamera observerCamera1 = (ObserverCamera)observerCamera0.clone();
      assertEquals((-1113.797F), observerCamera1.getFieldOfView(), 0.01F);
  }

  @Test
  public void test1()  throws Throwable  {
      ObserverCamera observerCamera0 = new ObserverCamera(6.416848F, 6.416848F, 6.416848F, 6.416848F, 6.416848F, 6.416848F);
      observerCamera0.setCamera((Camera) observerCamera0);
      assertEquals(1372766400971L, observerCamera0.getTime());
  }

  @Test
  public void test2()  throws Throwable  {
      ObserverCamera observerCamera0 = new ObserverCamera(193.57121F, 193.57121F, 193.57121F, 193.57121F, 193.57121F, 193.57121F);
      observerCamera0.removePropertyChangeListener((PropertyChangeListener) null);
      assertEquals(1372766400588L, observerCamera0.getTime());
  }

  @Test
  public void test3()  throws Throwable  {
      ObserverCamera observerCamera0 = new ObserverCamera(6.416848F, 6.416848F, 6.416848F, 6.416848F, 6.416848F, 6.416848F);
      observerCamera0.addPropertyChangeListener((PropertyChangeListener) null);
      assertEquals(1372766400604L, observerCamera0.getTime());
  }

  @Test
  public void test4()  throws Throwable  {
      ObserverCamera observerCamera0 = new ObserverCamera(193.57121F, 193.57121F, 193.57121F, 193.57121F, 193.57121F, 193.57121F);
      observerCamera0.isFixedSize();
      assertEquals(1372766400614L, observerCamera0.getTime());
  }

  @Test
  public void test5()  throws Throwable  {
      ObserverCamera observerCamera0 = new ObserverCamera((-538.7404F), (-538.7404F), (-538.7404F), (-538.7404F), (-538.7404F), (-538.7404F));
      observerCamera0.move((-538.7404F), (-538.7404F));
      assertEquals((-1077.4808F), observerCamera0.getY(), 0.01F);
      assertEquals((-1077.4808F), observerCamera0.getX(), 0.01F);
  }

  @Test
  public void test6()  throws Throwable  {
      ObserverCamera observerCamera0 = new ObserverCamera(37.476074F, 0.0F, 37.476074F, 0.0F, 37.476074F, 0.0F);
      observerCamera0.setFixedSize(false);
      assertEquals(1372766400736L, observerCamera0.getTime());
  }

  @Test
  public void test7()  throws Throwable  {
      ObserverCamera observerCamera0 = new ObserverCamera((-1113.797F), (-1113.797F), (-1113.797F), (-1113.797F), (-1113.797F), (-1113.797F));
      observerCamera0.setFixedSize(true);
      assertEquals(46.6F, observerCamera0.getWidth(), 0.01F);
      assertEquals(1372766400751L, observerCamera0.getTime());
  }

  @Test
  public void test8()  throws Throwable  {
      ObserverCamera observerCamera0 = new ObserverCamera(193.57121F, 193.57121F, 193.57121F, 193.57121F, 193.57121F, 193.57121F);
      observerCamera0.getPoints();
      observerCamera0.getPoints();
      assertEquals(1372766400318L, observerCamera0.getTime());
  }

  @Test
  public void test9()  throws Throwable  {
      ObserverCamera observerCamera0 = new ObserverCamera((-538.7404F), (-538.7404F), (-538.7404F), (-538.7404F), (-538.7404F), (-538.7404F));
      boolean boolean0 = observerCamera0.containsPoint((-538.7404F), (-538.7404F), (-538.7404F));
      assertEquals(1372766400125L, observerCamera0.getTime());
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      ObserverCamera observerCamera0 = new ObserverCamera(37.476074F, 0.0F, 37.476074F, 0.0F, 37.476074F, 0.0F);
      observerCamera0.containsPoint(0.0F, 37.476074F, 0.0F);
      boolean boolean0 = observerCamera0.intersectsRectangle(37.476074F, 37.476074F, 37.476074F, 0.0F);
      assertEquals(1372766400631L, observerCamera0.getTime());
      assertEquals(false, boolean0);
  }
}
