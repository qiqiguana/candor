/*
 * This file was automatically generated by EvoSuite
 */

package com.eteks.sweethome3d.tools;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.eteks.sweethome3d.tools.ExtensionsClassLoader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.security.AllPermission;
import java.security.CodeSource;
import java.security.PermissionCollection;
import java.security.Permissions;
import java.security.Principal;
import java.security.ProtectionDomain;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ExtensionsClassLoaderEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      AllPermission allPermission0 = new AllPermission();
      PermissionCollection permissionCollection0 = allPermission0.newPermissionCollection();
      ProtectionDomain protectionDomain0 = new ProtectionDomain((CodeSource) null, permissionCollection0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "q9N s.152<<OzGR]";
      stringArray0[1] = "q9N s.152<<OzGR]";
      stringArray0[2] = "q9N s.152<<OzGR]";
      stringArray0[3] = "q9N s.152<<OzGR]";
      stringArray0[4] = "q9N s.152<<OzGR]";
      stringArray0[5] = "q9N s.152<<OzGR]";
      stringArray0[6] = "q9N s.152<<OzGR]";
      stringArray0[7] = "q9N s.152<<OzGR]";
      ExtensionsClassLoader extensionsClassLoader0 = new ExtensionsClassLoader(classLoader0, protectionDomain0, stringArray0, stringArray0);
      String string0 = extensionsClassLoader0.findLibrary("q9N s.152<<OzGR]");
      assertNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
          String[] stringArray0 = new String[7];
          stringArray0[0] = "21et\ft(.";
          stringArray0[1] = "21et\ft(.";
          stringArray0[2] = "21et\ft(.";
          stringArray0[3] = "21et\ft(.";
          stringArray0[4] = "21et\ft(.";
          stringArray0[5] = "21et\ft(.";
          stringArray0[6] = "21et\ft(.";
          URL[] uRLArray0 = new URL[3];
          File file0 = new File("21et\ft(.");
          URI uRI0 = file0.toURI();
          URL uRL0 = uRI0.toURL();
          uRLArray0[0] = uRL0;
          String[] stringArray1 = new String[1];
          ExtensionsClassLoader extensionsClassLoader0 = null;
          try {
            extensionsClassLoader0 = new ExtensionsClassLoader(classLoader0, (ProtectionDomain) null, stringArray0, uRLArray0, stringArray1, file0, "21et\ft(.");
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission 21et\ft(. write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.mkdir(File.java:1155)
             * java.io.File.mkdirs(File.java:1184)
             * com.eteks.sweethome3d.tools.ExtensionsClassLoader.<init>(ExtensionsClassLoader.java:144)
             * sun.reflect.GeneratedConstructorAccessor43.newInstance(Unknown Source)
             * sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)
             * java.lang.reflect.Constructor.newInstance(Constructor.java:513)
             * org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
      URL[] uRLArray0 = new URL[4];
      File file0 = new File("/mnt/fastdata/ac1gf/SF110/dist/103_sweethome3d/)%60pCtdik%23C%5CA*DqT.jar");
      URI uRI0 = file0.toURI();
      URL uRL0 = uRI0.toURL();
      uRLArray0[0] = uRL0;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      String[] stringArray0 = new String[10];
      stringArray0[0] = "/mnt/fastdata/ac1gf/SF110/dist/103_sweethome3d/)%60pCtdik%23C%5CA*DqT.jar";
      stringArray0[1] = "/mnt/fastdata/ac1gf/SF110/dist/103_sweethome3d/)%60pCtdik%23C%5CA*DqT.jar";
      stringArray0[2] = "/mnt/fastdata/ac1gf/SF110/dist/103_sweethome3d/)%60pCtdik%23C%5CA*DqT.jar";
      stringArray0[3] = "/mnt/fastdata/ac1gf/SF110/dist/103_sweethome3d/)%60pCtdik%23C%5CA*DqT.jar";
      stringArray0[4] = "/mnt/fastdata/ac1gf/SF110/dist/103_sweethome3d/)%60pCtdik%23C%5CA*DqT.jar";
      stringArray0[5] = "/mnt/fastdata/ac1gf/SF110/dist/103_sweethome3d/)%60pCtdik%23C%5CA*DqT.jar";
      stringArray0[6] = "/mnt/fastdata/ac1gf/SF110/dist/103_sweethome3d/)%60pCtdik%23C%5CA*DqT.jar";
      stringArray0[7] = "/mnt/fastdata/ac1gf/SF110/dist/103_sweethome3d/)%60pCtdik%23C%5CA*DqT.jar";
      stringArray0[8] = "/mnt/fastdata/ac1gf/SF110/dist/103_sweethome3d/)%60pCtdik%23C%5CA*DqT.jar";
      stringArray0[9] = "/mnt/fastdata/ac1gf/SF110/dist/103_sweethome3d/)%60pCtdik%23C%5CA*DqT.jar";
      ExtensionsClassLoader extensionsClassLoader0 = null;
      try {
        extensionsClassLoader0 = new ExtensionsClassLoader(classLoader0, (ProtectionDomain) null, stringArray0, uRLArray0, stringArray0, (File) null, "/mnt/fastdata/ac1gf/SF110/dist/103_sweethome3d/)%60pCtdik%23C%5CA*DqT.jar");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Couldn't extract extension jars
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      URL[] uRLArray0 = new URL[4];
      File file0 = new File(")`pRJCtdik#C*DqT");
      URI uRI0 = file0.toURI();
      URL uRL0 = uRI0.toURL();
      uRLArray0[0] = uRL0;
      Permissions permissions0 = new Permissions();
      ProtectionDomain protectionDomain0 = new ProtectionDomain((CodeSource) null, (PermissionCollection) permissions0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = ")`pRJCtdik#C*DqT";
      stringArray0[1] = "";
      File file1 = new File("");
      File file2 = new File(file1, "");
      ExtensionsClassLoader extensionsClassLoader0 = null;
      try {
        extensionsClassLoader0 = new ExtensionsClassLoader((ClassLoader) null, protectionDomain0, stringArray0, uRLArray0, stringArray0, file2, ")`pRJCtdik#C*DqT");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Couldn't extract extension jars
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
          String[] stringArray0 = new String[3];
          stringArray0[0] = " O o";
          stringArray0[1] = " O o";
          stringArray0[2] = " O o";
          ExtensionsClassLoader extensionsClassLoader0 = new ExtensionsClassLoader(classLoader0, (ProtectionDomain) null, stringArray0, stringArray0);
          File file0 = new File(" O o", " O o");
          // Undeclared exception!
          try {
            extensionsClassLoader0.copyInputStreamToFile((InputStream) null, file0);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission  O o/ O o write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:183)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:145)
             * com.eteks.sweethome3d.tools.ExtensionsClassLoader.copyInputStreamToFile(ExtensionsClassLoader.java:216)
             * sun.reflect.GeneratedMethodAccessor132.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      AllPermission allPermission0 = new AllPermission("?", "?");
      PermissionCollection permissionCollection0 = allPermission0.newPermissionCollection();
      Principal[] principalArray0 = new Principal[1];
      ProtectionDomain protectionDomain0 = new ProtectionDomain((CodeSource) null, permissionCollection0, classLoader0, principalArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "?";
      stringArray0[1] = "?";
      stringArray0[2] = "?";
      String[] stringArray1 = new String[5];
      ExtensionsClassLoader extensionsClassLoader0 = new ExtensionsClassLoader(classLoader0, protectionDomain0, stringArray0, stringArray1);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try {
        extensionsClassLoader0.copyInputStreamToFile((InputStream) pipedInputStream0, (File) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * name can't be null
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      AllPermission allPermission0 = new AllPermission();
      PermissionCollection permissionCollection0 = allPermission0.newPermissionCollection();
      ProtectionDomain protectionDomain0 = new ProtectionDomain((CodeSource) null, permissionCollection0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "q9N s.152<<OzGR]";
      stringArray0[1] = "q9N s.152<<OzGR]";
      stringArray0[2] = "q9N s.152<<OzGR]";
      stringArray0[3] = "q9N s.152<<OzGR]";
      stringArray0[4] = "q9N s.152<<OzGR]";
      stringArray0[5] = "q9N s.152<<OzGR]";
      stringArray0[6] = "q9N s.152<<OzGR]";
      stringArray0[7] = "q9N s.152<<OzGR]";
      ExtensionsClassLoader extensionsClassLoader0 = new ExtensionsClassLoader(classLoader0, protectionDomain0, stringArray0, stringArray0);
      try {
        extensionsClassLoader0.loadClass("q9N s.152<<OzGR]", false);
        fail("Expecting exception: ClassNotFoundException");
      } catch(ClassNotFoundException e) {
        /*
         * Class q9N s.152<<OzGR]
         */
      }
  }
}
