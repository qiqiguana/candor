/*
 * This file was automatically generated by EvoSuite
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import java.beans.PropertyChangeListener;
import java.net.URL;
import java.util.LinkedList;
import java.util.List;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class WallEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, (-777.05396F), 1.0F);
      wall0.getLeftSideColor();
  }

  @Test
  public void test1()  throws Throwable  {
      Wall wall0 = new Wall((-800.144F), 0.0F, (-1827.3207F), 1412.4357F, (-800.144F), 0.0F);
      TextureImage textureImage0 = wall0.getPattern();
      assertNull(textureImage0);
  }

  @Test
  public void test2()  throws Throwable  {
      Wall wall0 = new Wall((-937.85394F), (-937.85394F), (-937.85394F), 298.93805F, (-937.85394F));
      wall0.move(0.0F, 0.0F);
      assertEquals(1236.792F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1236.792F, wall0.getLength(), 0.01F);
  }

  @Test
  public void test3()  throws Throwable  {
      Wall wall0 = new Wall((-937.85394F), (-937.85394F), (-937.85394F), 298.7689F, (-937.85394F));
      wall0.getHeightAtEnd();
  }

  @Test
  public void test4()  throws Throwable  {
      Wall wall0 = new Wall((-937.85394F), 0.0F, (-937.85394F), 313.78653F, (-937.85394F));
      wall0.intersectsRectangle((-1.0F), 0.0F, 0.0F, (-750.7855F));
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
  }

  @Test
  public void test5()  throws Throwable  {
      Wall wall0 = new Wall((-800.144F), 0.0F, (-1827.3207F), 1412.4357F, (-800.144F), 0.0F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.offer(wall0);
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertNotNull(list0);
      assertEquals(1, list0.size());
  }

  @Test
  public void test6()  throws Throwable  {
      Wall wall0 = new Wall((-937.85394F), (-937.85394F), (-937.85394F), 298.7689F, (-937.85394F));
      wall0.setWallAtEnd(wall0);
      boolean boolean0 = wall0.containsPoint(298.7689F, (-2022.2188F), 298.7689F);
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      Wall wall0 = new Wall((-800.144F), 0.0F, (-1827.3207F), 1412.4357F, (-800.144F), 0.0F);
      wall0.setWallAtStart(wall0);
      boolean boolean0 = wall0.containsWallEndAt((-1827.3207F), (-1827.3207F), (-1827.3207F));
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      Wall wall0 = new Wall((-937.85394F), (-937.85394F), (-937.85394F), 298.7689F, (-937.85394F));
      wall0.removePropertyChangeListener((PropertyChangeListener) null);
      assertEquals((-937.85394F), wall0.getThickness(), 0.01F);
  }

  @Test
  public void test9()  throws Throwable  {
      Wall wall0 = new Wall(313.78653F, 313.78653F, 313.78653F, 313.78653F, 313.78653F);
      wall0.getRightSideColor();
  }

  @Test
  public void test10()  throws Throwable  {
      Wall wall0 = new Wall(17.83758F, (-984.2377F), 17.83758F, (-984.2377F), 17.83758F, 17.83758F);
      float float0 = wall0.getThickness();
      assertEquals(17.83758F, float0, 0.01F);
  }

  @Test
  public void test11()  throws Throwable  {
      Wall wall0 = new Wall((-937.85394F), (-937.85394F), (-937.85394F), 298.7689F, (-937.85394F));
      float float0 = wall0.getLeftSideShininess();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test12()  throws Throwable  {
      Wall wall0 = new Wall((-800.144F), 0.0F, (-1827.3207F), 1412.4357F, (-800.144F), 0.0F);
      wall0.addPropertyChangeListener((PropertyChangeListener) null);
      assertEquals((-1313.7323F), wall0.getXArcCircleCenter(), 0.01F);
  }

  @Test
  public void test13()  throws Throwable  {
      Wall wall0 = new Wall((-800.144F), 0.0F, (-1827.3207F), 1412.4357F, (-800.144F), 0.0F);
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(homeTexture0);
  }

  @Test
  public void test14()  throws Throwable  {
      Wall wall0 = new Wall((-937.85394F), 0.0F, (-937.85394F), 313.78653F, (-937.85394F));
      float float0 = wall0.getRightSideShininess();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test15()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, (-777.05396F), 1.0F);
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
  }

  @Test
  public void test16()  throws Throwable  {
      Wall wall0 = new Wall((-800.144F), 0.0F, (-1827.3207F), 1412.4357F, (-800.144F), 0.0F);
      Level level0 = wall0.getLevel();
      assertNull(level0);
  }

  @Test
  public void test17()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, (-777.05396F), 1.0F);
      float float0 = wall0.getStartPointToEndPointDistance();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test18()  throws Throwable  {
      Wall wall0 = new Wall((-800.144F), 0.0F, (-1827.3207F), 1412.4357F, (-800.144F), 0.0F);
      float float0 = wall0.getLength();
      assertEquals(1746.444F, float0, 0.01F);
  }

  @Test
  public void test19()  throws Throwable  {
      Wall wall0 = new Wall((-800.144F), 0.0F, (-1827.3207F), 1412.4357F, (-800.144F), 0.0F);
      Float float0 = wall0.getHeight();
      wall0.setArcExtent(float0);
      float float1 = wall0.getLength();
      assertEquals((-8.3875343E18F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1746.444F, float1, 0.01F);
  }

  @Test
  public void test20()  throws Throwable  {
      Wall wall0 = new Wall(313.78653F, 313.78653F, 313.78653F, 313.78653F, 313.78653F);
      wall0.setArcExtent((Float) (-2022.2188F));
      float float0 = wall0.getLength();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test21()  throws Throwable  {
      Wall wall0 = new Wall((-937.85394F), (-937.85394F), (-937.85394F), 298.7689F, (-937.85394F));
      wall0.setArcExtent((Float) (-2022.2188F));
      wall0.setArcExtent((Float) (-2022.2188F));
      assertEquals(2689845.5F, wall0.getLength(), 0.01F);
      assertEquals((-2115.5544F), wall0.getXArcCircleCenter(), 0.01F);
  }

  @Test
  public void test22()  throws Throwable  {
      Wall wall0 = new Wall((-937.85394F), 0.0F, (-937.85394F), 313.78653F, (-937.85394F));
      wall0.setArcExtent((Float) 313.78653F);
      float float0 = wall0.getXArcCircleCenter();
      assertEquals((-105.776184F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-105.776184F), float0, 0.01F);
  }

  @Test
  public void test23()  throws Throwable  {
      Wall wall0 = new Wall((-937.85394F), (-937.85394F), (-937.85394F), 298.93805F, (-937.85394F));
      float float0 = wall0.getXArcCircleCenter();
      assertEquals((-937.85394F), float0, 0.01F);
  }

  @Test
  public void test24()  throws Throwable  {
      Wall wall0 = new Wall(302.74457F, 302.74457F, 0.1F, (-1.0F), (-1.0F));
      float float0 = wall0.getYArcCircleCenter();
      assertEquals(150.87228F, float0, 0.01F);
  }

  @Test
  public void test25()  throws Throwable  {
      Wall wall0 = new Wall((-937.85394F), 0.0F, (-937.85394F), 313.78653F, (-937.85394F));
      wall0.setArcExtent((Float) 0.0F);
      float float0 = wall0.getYArcCircleCenter();
      assertEquals((-2.56226149E18F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(156.89326F, float0, 0.01F);
  }

  @Test
  public void test26()  throws Throwable  {
      Wall wall0 = new Wall(313.78653F, 313.78653F, 313.78653F, 313.78653F, 313.78653F);
      wall0.setWallAtStart(wall0);
      wall0.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
  }

  @Test
  public void test27()  throws Throwable  {
      Wall wall0 = new Wall((-937.85394F), (-937.85394F), (-937.85394F), 298.93805F, (-937.85394F));
      Wall wall1 = new Wall((-16.156967F), (-16.156967F), 19.352665F, (-109.45285F), (-16.156967F), (-1814.8588F));
      wall0.setWallAtEnd(wall1);
      wall1.setWallAtStart(wall0);
      wall0.setWallAtEnd(wall0);
      assertEquals((-937.85394F), wall0.getXArcCircleCenter(), 0.01F);
  }

  @Test
  public void test28()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, (-777.05396F), 1.0F);
      wall0.setWallAtEnd((Wall) null);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
  }

  @Test
  public void test29()  throws Throwable  {
      Wall wall0 = new Wall(302.74457F, 302.74457F, 0.1F, (-1.0F), (-1.0F));
      Wall wall1 = new Wall((-937.85394F), (-937.85394F), (-937.85394F), 302.74457F, (-937.85394F));
      wall1.setWallAtEnd(wall1);
      wall1.setWallAtStart(wall1);
      wall1.setWallAtStart(wall0);
      assertEquals(false, wall1.isTrapezoidal());
  }

  @Test
  public void test30()  throws Throwable  {
      Wall wall0 = new Wall(302.74457F, 302.74457F, 0.1F, (-1.0F), (-1.0F));
      Wall wall1 = new Wall((-937.85394F), (-937.85394F), (-937.85394F), 302.74457F, (-937.85394F));
      wall1.setWallAtStart(wall0);
      wall1.setWallAtStart(wall1);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
  }

  @Test
  public void test31()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      wall0.setThickness(1.0F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
  }

  @Test
  public void test32()  throws Throwable  {
      Wall wall0 = new Wall((-937.85394F), 0.0F, (-937.85394F), 313.78653F, (-937.85394F));
      wall0.setHeight((Float) (-937.85394F));
      assertEquals((-937.85394F), wall0.getXStart(), 0.01F);
  }

  @Test
  public void test33()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      wall0.setHeight((Float) null);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
  }

  @Test
  public void test34()  throws Throwable  {
      Wall wall0 = new Wall((-105.95571F), (-105.95571F), 0.01F, (-105.95571F), 0.01F, (-105.95571F));
      wall0.setHeightAtEnd((Float) (-105.95571F));
      Level level0 = new Level("RIGHT_SIDE_TEXTURE", (-105.95571F), 0.01F, 943.5236F);
      Level level1 = level0.clone();
      wall0.setLevel(level1);
      boolean boolean0 = wall0.isAtLevel(level0);
      assertEquals(false, wall0.isTrapezoidal());
      assertEquals(false, boolean0);
  }

  @Test
  public void test35()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      wall0.setHeightAtEnd((Float) null);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
  }

  @Test
  public void test36()  throws Throwable  {
      Wall wall0 = new Wall(298.5855F, 298.5855F, 298.5855F, 298.5855F, 298.5855F);
      wall0.setHeightAtEnd((Float) 298.5855F);
      wall0.setHeightAtEnd((Float) 298.5855F);
      assertEquals(298.5855F, wall0.getXStart(), 0.01F);
  }

  @Test
  public void test37()  throws Throwable  {
      Wall wall0 = new Wall(6.727928F, 6.727928F, 711.5539F, 711.5539F, 711.5539F);
      boolean boolean0 = wall0.isTrapezoidal();
      assertEquals(false, boolean0);
  }

  @Test
  public void test38()  throws Throwable  {
      Wall wall0 = new Wall((-105.95571F), (-105.95571F), 0.01F, (-105.95571F), 0.01F, (-105.95571F));
      Level level0 = new Level("RIGHT_SIDE_TEXTURE", (-105.95571F), 0.01F, 943.5236F);
      Level level1 = level0.clone();
      wall0.setLevel(level1);
      boolean boolean0 = wall0.isAtLevel(level0);
      assertEquals(false, boolean0);
      assertEquals(false, wall0.isTrapezoidal());
  }

  @Test
  public void test39()  throws Throwable  {
      Wall wall0 = new Wall(228.45766F, 228.45766F, 0.01F, 228.45766F, 228.45766F, 228.45766F);
      Float float0 = new Float(1183.1270894447416);
      wall0.setHeightAtEnd(float0);
      Level level0 = new Level("PATTERN", 228.45766F, 0.01F, 228.45766F);
      Level level1 = level0.clone();
      wall0.setLevel(level1);
      boolean boolean0 = wall0.isAtLevel(level0);
      assertEquals(true, wall0.isTrapezoidal());
      assertEquals(true, boolean0);
  }

  @Test
  public void test40()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, (-777.05396F), 1.0F);
      Integer integer0 = new Integer((-289));
      wall0.setLeftSideColor(integer0);
      wall0.setLeftSideColor(integer0);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
  }

  @Test
  public void test41()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, (-777.05396F), 1.0F);
      wall0.setLeftSideColor((Integer) null);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
  }

  @Test
  public void test42()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      Integer integer0 = new Integer((-18));
      wall0.setRightSideColor(integer0);
      assertEquals(-18, integer0.byteValue());
  }

  @Test
  public void test43()  throws Throwable  {
      Wall wall0 = new Wall((-800.144F), 0.0F, (-1827.3207F), 1412.4357F, (-800.144F), 0.0F);
      wall0.setRightSideColor((Integer) null);
      assertEquals((-1313.7323F), wall0.getXArcCircleCenter(), 0.01F);
  }

  @Test
  public void test44()  throws Throwable  {
      Wall wall0 = new Wall((-1.7326932F), (-1.7326932F), (-1.7326932F), (-16.9862F), (-1.7326932F), (-1311.096F));
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      CatalogTexture catalogTexture0 = new CatalogTexture("Ea", "Ea", (Content) temporaryURLContent0, (-16.9862F), (-1.7326932F), "Ea");
      HomeTexture homeTexture0 = new HomeTexture((TextureImage) catalogTexture0);
      wall0.setLeftSideTexture(homeTexture0);
      assertEquals(15.253508F, wall0.getLength(), 0.01F);
  }

  @Test
  public void test45()  throws Throwable  {
      Wall wall0 = new Wall((-800.144F), 0.0F, (-1827.3207F), 1412.4357F, (-800.144F), 0.0F);
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(false, wall0.isTrapezoidal());
  }

  @Test
  public void test46()  throws Throwable  {
      Wall wall0 = new Wall((-937.85394F), 0.0F, (-937.85394F), 313.78653F, (-937.85394F));
      Class<?> class0 = Wall.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", true);
      CatalogTexture catalogTexture0 = new CatalogTexture("E65,`;D4", (Content) resourceURLContent0, (-1358.2253F), (-1358.2253F));
      HomeTexture homeTexture0 = new HomeTexture((TextureImage) catalogTexture0);
      wall0.setRightSideTexture(homeTexture0);
      assertEquals(313.78653F, wall0.getYEnd(), 0.01F);
  }

  @Test
  public void test47()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, (-777.05396F), 1.0F);
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
  }

  @Test
  public void test48()  throws Throwable  {
      Wall wall0 = new Wall(313.78653F, 313.78653F, 313.78653F, 313.78653F, 313.78653F);
      wall0.setLeftSideShininess(0.0F);
      assertEquals(313.78653F, wall0.getThickness(), 0.01F);
  }

  @Test
  public void test49()  throws Throwable  {
      Wall wall0 = new Wall((-937.85394F), (-937.85394F), (-937.85394F), 298.7689F, (-937.85394F));
      wall0.setLeftSideShininess((-2022.2188F));
      assertEquals((-2022.2188F), wall0.getLeftSideShininess(), 0.01F);
  }

  @Test
  public void test50()  throws Throwable  {
      Wall wall0 = new Wall((-800.144F), 0.0F, (-1827.3207F), 1412.4357F, (-800.144F), 0.0F);
      wall0.setRightSideShininess(0.0F);
      assertEquals((-800.144F), wall0.getXStart(), 0.01F);
  }

  @Test
  public void test51()  throws Throwable  {
      Wall wall0 = new Wall((-937.85394F), (-937.85394F), (-937.85394F), 298.93805F, (-937.85394F));
      wall0.setRightSideShininess(1.0F);
      assertEquals(1.0F, wall0.getRightSideShininess(), 0.01F);
  }

  @Test
  public void test52()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, (-777.05396F), 1.0F);
      wall0.setPattern((TextureImage) null);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
  }

  @Test
  public void test53()  throws Throwable  {
      Wall wall0 = new Wall((-937.85394F), 0.0F, (-937.85394F), 313.78653F, (-937.85394F));
      Class<?> class0 = Wall.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", true);
      CatalogTexture catalogTexture0 = new CatalogTexture("E65,`;D4", (Content) resourceURLContent0, (-1358.2253F), (-1358.2253F));
      wall0.setPattern((TextureImage) catalogTexture0);
      assertEquals(313.78653F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test
  public void test54()  throws Throwable  {
      Wall wall0 = new Wall(302.74457F, 302.74457F, 0.1F, (-1.0F), (-1.0F));
      wall0.setLevel((Level) null);
      assertEquals(428.78256F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test
  public void test55()  throws Throwable  {
      Wall wall0 = new Wall((-800.144F), 0.0F, (-1827.3207F), 1412.4357F, (-800.144F), 0.0F);
      boolean boolean0 = wall0.isAtLevel((Level) null);
      assertEquals(true, boolean0);
  }

  @Test
  public void test56()  throws Throwable  {
      Wall wall0 = new Wall((-800.144F), 0.0F, (-1827.3207F), 1412.4357F, (-800.144F), 0.0F);
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Level level0 = new Level("dMG`Q H$HS*]y`", (-1827.8315F), (float) float0, (float) float0);
      assertNotNull(level0);
      
      boolean boolean0 = wall0.isAtLevel(level0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test57()  throws Throwable  {
      Wall wall0 = new Wall((-937.85394F), 0.0F, (-937.85394F), 313.78653F, (-937.85394F));
      wall0.setArcExtent((Float) 313.78653F);
      Float float0 = wall0.getArcExtent();
      Level level0 = new Level("", (-937.85394F), (float) float0, 0.0F);
      assertEquals(265695.66F, wall0.getLength(), 0.01F);
      
      wall0.setLevel(level0);
      boolean boolean0 = wall0.isAtLevel((Level) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test58()  throws Throwable  {
      Wall wall0 = new Wall((-937.85394F), (-937.85394F), (-937.85394F), 319.463F, (-937.85394F));
      wall0.setWallAtStart(wall0);
      wall0.setWallAtEnd(wall0);
      boolean boolean0 = wall0.containsPoint(319.463F, (-2010.4833F), 319.463F);
      assertEquals(false, boolean0);
  }

  @Test
  public void test59()  throws Throwable  {
      Wall wall0 = new Wall(313.78653F, 313.78653F, 313.78653F, 313.78653F, 313.78653F);
      Wall wall1 = new Wall(313.78653F, 0.0F, 313.78653F, (-2022.2188F), 1.0F, 313.78653F);
      wall0.setWallAtEnd(wall1);
      wall1.setWallAtStart(wall0);
      boolean boolean0 = wall1.containsPoint(313.78653F, 1.0F, 313.78653F);
      assertEquals(true, boolean0);
      
      boolean boolean1 = wall0.containsWallEndAt((-652.04724F), (-652.04724F), 0.0F);
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test60()  throws Throwable  {
      Wall wall0 = new Wall((-937.85394F), (-937.85394F), (-937.85394F), 298.93805F, (-937.85394F));
      wall0.setXStart((-2022.2188F));
      wall0.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall0);
      wall0.getPoints();
      assertEquals(1644.8408F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2022.2188F), wall0.getXStart(), 0.01F);
  }

  @Test
  public void test61()  throws Throwable  {
      Wall wall0 = new Wall((-937.85394F), (-937.85394F), (-937.85394F), 302.74457F, (-937.85394F));
      wall0.setYEnd((-937.85394F));
      wall0.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall0);
      wall0.getPoints();
      assertEquals((-937.85394F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test
  public void test62()  throws Throwable  {
      Wall wall0 = new Wall((-937.85394F), (-937.85394F), (-937.85394F), 298.93805F, (-937.85394F));
      Wall wall1 = new Wall((-16.156967F), (-16.156967F), 19.352665F, (-109.45285F), (-16.156967F), (-1814.8588F));
      wall0.setWallAtEnd(wall1);
      wall1.setWallAtStart(wall0);
      wall0.containsWallStartAt(295.68555F, 1236.792F, 0.0F);
      boolean boolean0 = wall1.intersectsRectangle((-1418.4769F), 0.0F, 43.812046F, 0.0F);
      assertEquals(false, boolean0);
  }

  @Test
  public void test63()  throws Throwable  {
      Wall wall0 = new Wall((-937.85394F), (-937.85394F), (-937.85394F), 298.93805F, (-937.85394F));
      Wall wall1 = new Wall((-16.156967F), (-16.156967F), 19.352665F, (-109.45285F), (-16.156967F), (-1814.8588F));
      wall0.setWallAtEnd(wall1);
      wall1.setThickness(1685.7253F);
      wall1.setWallAtStart(wall0);
      wall0.setXStart((-2022.2188F));
      wall0.containsWallStartAt(295.68555F, 1236.792F, 0.0F);
      boolean boolean0 = wall1.intersectsRectangle((-1418.4769F), 0.0F, 43.812046F, 0.0F);
      assertEquals(1685.7253F, wall1.getThickness(), 0.01F);
      assertEquals(false, boolean0);
  }

  @Test
  public void test64()  throws Throwable  {
      Wall wall0 = new Wall((-937.85394F), (-937.85394F), (-937.85394F), 298.7689F, (-937.85394F));
      Wall wall1 = new Wall(298.7689F, 0.0F, 298.7689F, (-2022.2188F), (-2022.2188F), 298.7689F);
      wall1.setWallAtStart(wall0);
      boolean boolean0 = wall1.containsPoint(298.7689F, (-2022.2188F), 298.7689F);
      assertEquals(true, boolean0);
  }

  @Test
  public void test65()  throws Throwable  {
      Wall wall0 = new Wall(313.78653F, 313.78653F, 313.78653F, 313.78653F, 313.78653F);
      Wall wall1 = new Wall(313.78653F, 295.68555F, 313.78653F, (-2022.2188F), 1.0F, 313.78653F);
      wall0.setWallAtEnd(wall1);
      wall1.setYEnd(295.68555F);
      wall1.setWallAtStart(wall0);
      boolean boolean0 = wall1.containsPoint(313.78653F, 1.0F, 313.78653F);
      assertEquals(true, boolean0);
      
      boolean boolean1 = wall0.containsWallEndAt((-652.04724F), (-652.04724F), 0.0F);
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test66()  throws Throwable  {
      Wall wall0 = new Wall((-937.85394F), (-937.85394F), (-937.85394F), 298.7689F, (-937.85394F));
      Wall wall1 = new Wall(298.7689F, 0.0F, 298.7689F, (-2022.2188F), (-2022.2188F), 298.7689F);
      wall1.setWallAtEnd(wall0);
      boolean boolean0 = wall1.containsPoint(298.7689F, (-2022.2188F), 298.7689F);
      assertEquals(true, boolean0);
  }

  @Test
  public void test67()  throws Throwable  {
      Wall wall0 = new Wall((-800.144F), 0.0F, (-1827.3207F), 1412.4357F, (-800.144F), 0.0F);
      Float float0 = wall0.getHeight();
      wall0.setArcExtent(float0);
      wall0.containsWallStartAt((-1827.8315F), (-1827.8315F), (float) float0);
      assertEquals((-1.1533412E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-8.3875343E18F), wall0.getYArcCircleCenter(), 0.01F);
  }

  @Test
  public void test68()  throws Throwable  {
      Wall wall0 = new Wall(313.78653F, 313.78653F, 313.78653F, 313.78653F, 313.78653F);
      wall0.setArcExtent((Float) (-2022.2188F));
      boolean boolean0 = wall0.containsPoint(313.78653F, 1.0F, 313.78653F);
      assertEquals(true, boolean0);
  }

  @Test
  public void test69()  throws Throwable  {
      Wall wall0 = new Wall((-937.85394F), (-937.85394F), (-937.85394F), 298.7689F, (-937.85394F));
      wall0.setYStart(0.0F);
      wall0.setArcExtent((Float) (-2022.2188F));
      boolean boolean0 = wall0.containsPoint(298.7689F, (-2022.2188F), 298.7689F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(true, boolean0);
  }

  @Test
  public void test70()  throws Throwable  {
      Wall wall0 = new Wall((-937.85394F), 0.0F, (-937.85394F), 313.78653F, (-937.85394F));
      wall0.setArcExtent((Float) 313.78653F);
      boolean boolean0 = wall0.intersectsRectangle((-1.0F), 0.0F, 0.0F, (-750.7855F));
      assertEquals((-105.776184F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(true, boolean0);
  }

  @Test
  public void test71()  throws Throwable  {
      Wall wall0 = new Wall((-937.85394F), (-937.85394F), (-937.85394F), 298.93805F, (-937.85394F));
      Wall wall1 = new Wall((-16.156967F), (-16.156967F), 19.352665F, (-109.45285F), (-16.156967F), (-1814.8588F));
      wall0.setWallAtEnd(wall1);
      wall1.setWallAtStart(wall0);
      wall0.move((-1833.7413F), (-324.7815F));
      wall0.setXStart((-2022.2188F));
      wall0.containsWallStartAt(295.68555F, 1236.792F, 0.0F);
      assertEquals((-1262.6355F), wall0.getYStart(), 0.01F);
      assertEquals(1446.105F, wall0.getLength(), 0.01F);
  }
}
