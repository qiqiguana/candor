/*
 * This file was automatically generated by EvoSuite
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.eteks.sweethome3d.model.LengthUnit;
import java.text.Format;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class LengthUnitEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.MILLIMETER;
      Format format0 = lengthUnit0.getFormat();
      assertNotNull(format0);
  }

  @Test
  public void test1()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.MILLIMETER;
      Format format0 = lengthUnit0.getFormatWithUnit();
      assertNotNull(format0);
  }

  @Test
  public void test2()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.MILLIMETER;
      float float0 = lengthUnit0.unitToCentimeter(2.54F);
      assertEquals(0.254F, float0, 0.01F);
  }

  @Test
  public void test3()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.MILLIMETER;
      float float0 = lengthUnit0.getMinimumLength();
      assertEquals(0.1F, float0, 0.01F);
  }

  @Test
  public void test4()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.MILLIMETER;
      float float0 = lengthUnit0.getMagnetizedLength(0.3175F, 0.3175F);
      assertEquals(0.5F, float0, 0.01F);
  }

  @Test
  public void test5()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.MILLIMETER;
      float float0 = lengthUnit0.centimeterToUnit(0.1F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test
  public void test6()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.MILLIMETER;
      String string0 = lengthUnit0.getName();
      assertEquals("mm", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.MILLIMETER;
      float float0 = lengthUnit0.getMaximumLength();
      assertEquals(100000.0F, float0, 0.01F);
  }

  @Test
  public void test8()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.MILLIMETER;
      Format format0 = lengthUnit0.getAreaFormatWithUnit();
      assertNotNull(format0);
  }

  @Test
  public void test9()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.METER;
      float float0 = lengthUnit0.centimeterToUnit(0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test10()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.METER;
      float float0 = lengthUnit0.getMinimumLength();
      assertEquals(0.1F, float0, 0.01F);
  }

  @Test
  public void test11()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.METER;
      float float0 = lengthUnit0.getMagnetizedLength(0.0F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test12()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.METER;
      Format format0 = lengthUnit0.getAreaFormatWithUnit();
      assertNotNull(format0);
  }

  @Test
  public void test13()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.METER;
      Format format0 = lengthUnit0.getFormat();
      assertNotNull(format0);
  }

  @Test
  public void test14()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.METER;
      String string0 = lengthUnit0.getName();
      assertEquals("m", string0);
  }

  @Test
  public void test15()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.METER;
      Format format0 = lengthUnit0.getFormatWithUnit();
      assertNotNull(format0);
  }

  @Test
  public void test16()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.METER;
      float float0 = lengthUnit0.unitToCentimeter(0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test17()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.METER;
      float float0 = lengthUnit0.getMaximumElevation();
      assertEquals(10000.0F, float0, 0.01F);
  }

  @Test
  public void test18()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.INCH;
      Format format0 = lengthUnit0.getFormat();
      assertNotNull(format0);
  }

  @Test
  public void test19()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.INCH;
      float float0 = lengthUnit0.centimeterToUnit(5.0E-4F);
      assertEquals(1.9685041E-4F, float0, 0.01F);
  }

  @Test
  public void test20()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.INCH;
      float float0 = lengthUnit0.getMaximumLength();
      assertEquals(253934.97F, float0, 0.01F);
  }

  @Test
  public void test21()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.INCH;
      float float0 = lengthUnit0.getMinimumLength();
      assertEquals(0.3175F, float0, 0.01F);
  }

  @Test
  public void test22()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.INCH;
      float float0 = lengthUnit0.unitToCentimeter(1.0F);
      assertEquals(2.54F, float0, 0.01F);
  }

  @Test
  public void test23()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.INCH;
      Format format0 = lengthUnit0.getAreaFormatWithUnit();
      assertNotNull(format0);
  }

  @Test
  public void test24()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.INCH;
      String string0 = lengthUnit0.getName();
      assertEquals("inch", string0);
  }

  @Test
  public void test25()  throws Throwable  {
      float float0 = LengthUnit.centimeterToFoot(0.1F);
      assertEquals(0.0032808399F, float0, 0.01F);
  }

  @Test
  public void test26()  throws Throwable  {
      float float0 = LengthUnit.footToCentimeter(0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test27()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.CENTIMETER;
      Format format0 = lengthUnit0.getFormat();
      assertNotNull(format0);
  }

  @Test
  public void test28()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.CENTIMETER;
      Format format0 = lengthUnit0.getAreaFormatWithUnit();
      assertNotNull(format0);
  }

  @Test
  public void test29()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.CENTIMETER;
      Format format0 = lengthUnit0.getFormatWithUnit();
      assertNotNull(format0);
  }

  @Test
  public void test30()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.CENTIMETER;
      float float0 = lengthUnit0.unitToCentimeter(0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test31()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.CENTIMETER;
      float float0 = lengthUnit0.getMinimumLength();
      assertEquals(0.1F, float0, 0.01F);
  }

  @Test
  public void test32()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.CENTIMETER;
      float float0 = lengthUnit0.getMaximumElevation();
      assertEquals(10000.0F, float0, 0.01F);
  }

  @Test
  public void test33()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.CENTIMETER;
      float float0 = lengthUnit0.getMagnetizedLength(971.40063F, 971.40063F);
      assertEquals(1000.0F, float0, 0.01F);
  }

  @Test
  public void test34()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.CENTIMETER;
      float float0 = lengthUnit0.centimeterToUnit((-1159.544F));
      assertEquals((-1159.544F), float0, 0.01F);
  }

  @Test
  public void test35()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.CENTIMETER;
      String string0 = lengthUnit0.getName();
      assertEquals("cm", string0);
  }

  @Test
  public void test36()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.INCH;
      float float0 = lengthUnit0.getMagnetizedLength(0.01F, 0.01F);
      assertEquals(0.01F, float0, 0.01F);
      assertEquals(253934.97F, lengthUnit0.getMaximumLength(), 0.01F);
  }

  @Test
  public void test37()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.INCH;
      float float0 = lengthUnit0.getMagnetizedLength(10000.0F, 10000.0F);
      assertEquals(9997.439F, float0, 0.01F);
  }

  @Test
  public void test38()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.INCH;
      float float0 = lengthUnit0.getMagnetizedLength(5.541046F, 5.541046F);
      assertEquals(7.62F, float0, 0.01F);
  }

  @Test
  public void test39()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.INCH;
      float float0 = lengthUnit0.getMagnetizedLength(2.54F, 2.54F);
      assertEquals(2.54F, float0, 0.01F);
      assertEquals(253934.97F, lengthUnit0.getMaximumLength(), 0.01F);
  }

  @Test
  public void test40()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.INCH;
      float float0 = lengthUnit0.getMagnetizedLength(1.0F, 1.0F);
      assertEquals(1.27F, float0, 0.01F);
  }

  @Test
  public void test41()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.INCH;
      float float0 = lengthUnit0.getMagnetizedLength(0.0F, 0.5F);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(25393.496F, lengthUnit0.getMaximumElevation(), 0.01F);
  }

  @Test
  public void test42()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.MILLIMETER;
      float float0 = lengthUnit0.getMagnetizedLength(0.254F, 49.632133F);
      assertEquals(0.254F, float0, 0.01F);
  }

  @Test
  public void test43()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.MILLIMETER;
      float float0 = lengthUnit0.getMagnetizedLength(49.632133F, 2.54F);
      assertEquals(50.0F, float0, 0.01F);
  }

  @Test
  public void test44()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.CENTIMETER;
      float float0 = lengthUnit0.getMagnetizedLength(0.0032808399F, 1.0F);
      assertEquals(0.0032808399F, float0, 0.01F);
  }
}
