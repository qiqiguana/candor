/*
 * This file was automatically generated by EvoSuite
 */

package com.eteks.sweethome3d.j3d;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.eteks.sweethome3d.j3d.OBJWriter;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.io.OutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Writer;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.media.j3d.Clip;
import javax.media.j3d.Node;
import javax.media.j3d.OrientedShape3D;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class OBJWriterEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      OBJWriter oBJWriter0 = new OBJWriter((Writer) pipedWriter0);
      OBJWriter oBJWriter1 = null;
      try {
        oBJWriter1 = new OBJWriter((Writer) oBJWriter0, "illum ", 94);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Pipe not connected
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      OBJWriter oBJWriter0 = new OBJWriter((OutputStream) null);
      oBJWriter0.write((int) 'I');
  }

  @Test
  public void test2()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1054);
      OBJWriter oBJWriter0 = new OBJWriter((Writer) charArrayWriter0);
      // Undeclared exception!
      try {
        oBJWriter0.write((String) null, (int) '\u0000', (int) '\u0000');
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1054);
      OBJWriter oBJWriter0 = new OBJWriter((Writer) charArrayWriter0);
      char[] charArray0 = new char[5];
      oBJWriter0.write(charArray0);
      assertEquals(8, charArrayWriter0.size());
      assertEquals("# \u0000\u0000\u0000\u0000\u0000\n", charArrayWriter0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      OBJWriter oBJWriter0 = new OBJWriter((OutputStream) null, "#lW8{Aj ", 1775);
      assertNotNull(oBJWriter0);
  }

  @Test
  public void test5()  throws Throwable  {
      OBJWriter oBJWriter0 = new OBJWriter((OutputStream) null);
      oBJWriter0.writeNode((Node) null, (String) null);
      oBJWriter0.writeNode((Node) null);
  }

  @Test
  public void test6()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      OBJWriter oBJWriter0 = new OBJWriter((Writer) pipedWriter0);
      OrientedShape3D orientedShape3D0 = new OrientedShape3D();
      try {
        oBJWriter0.writeNode((Node) orientedShape3D0, "0Qf");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Pipe not connected
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      OBJWriter oBJWriter0 = new OBJWriter((Writer) pipedWriter0);
      OrientedShape3D orientedShape3D0 = new OrientedShape3D();
      PipedReader pipedReader0 = new PipedReader();
      pipedWriter0.connect(pipedReader0);
      oBJWriter0.writeNode((Node) orientedShape3D0, "5KIl~vU#TVO");
  }

  @Test
  public void test8()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      OBJWriter oBJWriter0 = new OBJWriter((Writer) pipedWriter0);
      OrientedShape3D orientedShape3D0 = new OrientedShape3D();
      try {
        oBJWriter0.writeNode((Node) orientedShape3D0, "illum ");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Pipe not connected
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1054);
      OBJWriter oBJWriter0 = new OBJWriter((Writer) charArrayWriter0);
      oBJWriter0.close();
  }

  @Test
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          Clip clip0 = new Clip();
          // Undeclared exception!
          try {
            OBJWriter.writeNodeInZIPFile((Node) clip0, (File) null, (-176), "%j)H=zY,'B$n,AR7L", "%j)H=zY,'B$n,AR7L");
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission /tmp/obj5808016047558362523tmp write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.checkAndCreate(File.java:1696)
             * java.io.File.createTempFile(File.java:1792)
             * java.io.File.createTempFile(File.java:1828)
             * com.eteks.sweethome3d.j3d.OBJWriter.writeNodeInZIPFile(OBJWriter.java:1253)
             * sun.reflect.GeneratedMethodAccessor84.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
