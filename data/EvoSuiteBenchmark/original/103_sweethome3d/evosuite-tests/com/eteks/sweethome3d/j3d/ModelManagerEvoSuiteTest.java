/*
 * This file was automatically generated by EvoSuite
 */

package com.eteks.sweethome3d.j3d;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.eteks.sweethome3d.j3d.ModelManager;
import com.eteks.sweethome3d.model.CatalogLight;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.HomeLight;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.Light;
import com.eteks.sweethome3d.model.LightSource;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import java.awt.geom.Area;
import java.io.IOException;
import java.math.BigDecimal;
import java.net.URL;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.media.j3d.Billboard;
import javax.media.j3d.Clip;
import javax.media.j3d.Link;
import javax.media.j3d.ModelClip;
import javax.media.j3d.Node;
import javax.media.j3d.OrientedShape3D;
import javax.media.j3d.Transform3D;
import javax.vecmath.Matrix3f;
import javax.vecmath.Quat4d;
import javax.vecmath.Quat4f;
import javax.vecmath.Vector3d;
import javax.vecmath.Vector3f;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ModelManagerEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      ModelManager modelManager0 = ModelManager.getInstance();
      Link link0 = new Link();
      Link link1 = (Link)modelManager0.cloneNode((Node) link0);
      assertEquals(true, link1.getBoundsAutoCompute());
  }

  @Test
  public void test1()  throws Throwable  {
      ModelManager modelManager0 = ModelManager.getInstance();
      // Undeclared exception!
      try {
        modelManager0.getSize((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Node has no bounds
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      ModelManager modelManager0 = ModelManager.getInstance();
      // Undeclared exception!
      try {
        modelManager0.loadModel((Content) null, (ModelManager.ModelObserver) null);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Asynchronous call out of Event Dispatch Thread
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      ModelManager modelManager0 = ModelManager.getInstance();
      Link link0 = new Link();
      float[][] floatArray0 = new float[4][9];
      // Undeclared exception!
      try {
        modelManager0.getNormalizedTransform((Node) link0, floatArray0, (-30.656837F));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Node has no bounds
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      ModelManager modelManager0 = ModelManager.getInstance();
      assertNotNull(modelManager0);
      
      float float0 = modelManager0.getMinimumSize();
      assertEquals(0.0010F, float0, 0.01F);
  }

  @Test
  public void test5()  throws Throwable  {
      ModelManager modelManager0 = ModelManager.getInstance();
      float[][] floatArray0 = new float[3][10];
      // Undeclared exception!
      try {
        modelManager0.getNormalizedTransformGroup((Node) null, floatArray0, 196.91348F);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Node has no bounds
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      ModelManager modelManager0 = ModelManager.getInstance();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, false);
      // Undeclared exception!
      try {
        modelManager0.loadModel((Content) resourceURLContent0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      ModelManager modelManager0 = ModelManager.getInstance();
      modelManager0.clear();
      assertEquals(0.0010F, modelManager0.getMinimumSize(), 0.01F);
  }

  @Test
  public void test8()  throws Throwable  {
      ModelManager modelManager0 = ModelManager.getInstance();
      Clip clip0 = new Clip((-1464.3714422242476));
      Matrix3f matrix3f0 = new Matrix3f((-72.24366F), (-72.24366F), (-72.24366F), (-72.24366F), 898.43964F, 1649.1838F, (-72.24366F), (-72.24366F), (-1542.2213F));
      Vector3d vector3d0 = new Vector3d();
      Transform3D transform3D0 = new Transform3D(matrix3f0, vector3d0, (double) 898.43964F);
      // Undeclared exception!
      try {
        modelManager0.getSize((Node) clip0, transform3D0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Node has no bounds
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      ModelManager modelManager0 = ModelManager.getInstance();
      Billboard billboard0 = new Billboard();
      Quat4d quat4d0 = new Quat4d();
      Quat4f quat4f0 = new Quat4f(quat4d0);
      float[] floatArray0 = new float[6];
      Vector3f vector3f0 = new Vector3f(floatArray0);
      Vector3d vector3d0 = new Vector3d(vector3f0);
      Transform3D transform3D0 = new Transform3D(quat4f0, vector3d0, (-1.0));
      // Undeclared exception!
      try {
        modelManager0.getBounds((Node) billboard0, transform3D0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Node has no bounds
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      ModelManager modelManager0 = ModelManager.getInstance();
      OrientedShape3D orientedShape3D0 = new OrientedShape3D();
      // Undeclared exception!
      try {
        modelManager0.getBounds((Node) orientedShape3D0);
        fail("Expecting exception: NoClassDefFoundError");
      } catch(NoClassDefFoundError e) {
        /*
         * Could not initialize class javax.media.j3d.VirtualUniverse
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          ModelManager modelManager0 = ModelManager.getInstance();
          // Undeclared exception!
          try {
            modelManager0.loadModel((Content) null, true, (ModelManager.ModelObserver) null);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission /home/ac1gf/.eteks/sweethome3d/work/3700-b209aaa4-95c0-40a9-9c01-68f23f087a14 write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.mkdir(File.java:1155)
             * java.io.File.mkdirs(File.java:1184)
             * com.eteks.sweethome3d.tools.OperatingSystem.getDefaultTemporaryFolder(OperatingSystem.java:168)
             * com.eteks.sweethome3d.tools.OperatingSystem.createTemporaryFile(OperatingSystem.java:121)
             * com.eteks.sweethome3d.tools.TemporaryURLContent.copyToTemporaryURLContent(TemporaryURLContent.java:55)
             * com.eteks.sweethome3d.j3d.ModelManager.loadModel(ModelManager.java:614)
             * com.eteks.sweethome3d.j3d.ModelManager.loadModel(ModelManager.java:492)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test12()  throws Throwable  {
      ModelManager modelManager0 = ModelManager.getInstance();
      ModelClip modelClip0 = new ModelClip();
      ModelClip modelClip1 = (ModelClip)modelManager0.cloneNode((Node) modelClip0);
      assertEquals(true, modelClip1.getBoundsAutoCompute());
  }

  @Test
  public void test13()  throws Throwable  {
      ModelManager modelManager0 = ModelManager.getInstance();
      Link link0 = new Link();
      Area area0 = modelManager0.getAreaOnFloor((Node) link0);
      assertEquals(true, area0.isSingular());
  }

  @Test
  public void test14()  throws Throwable  {
      ModelManager modelManager0 = ModelManager.getInstance();
      OrientedShape3D orientedShape3D0 = new OrientedShape3D();
      Area area0 = modelManager0.getAreaOnFloor((Node) orientedShape3D0);
      assertEquals(true, area0.isPolygonal());
  }

  @Test
  public void test15()  throws Throwable  {
      ModelManager modelManager0 = ModelManager.getInstance();
      String[] stringArray0 = new String[1];
      Long long0 = new Long((-1180L));
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[7];
      float[][] floatArray0 = new float[8][4];
      BigDecimal bigDecimal0 = new BigDecimal((-1180L));
      CatalogLight catalogLight0 = new CatalogLight("offset", "offset", "offset", "offset", stringArray0, long0, (Float) 255.0F, (Content) null, (Content) temporaryURLContent0, (Content) null, 0.0F, 0.0F, (-1.0F), (-1793.6007F), false, lightSourceArray0, "tristrips", floatArray0, "offset", true, false, true, bigDecimal0, bigDecimal0, "tristrips");
      HomeLight homeLight0 = new HomeLight((Light) catalogLight0);
      Area area0 = modelManager0.getAreaOnFloor((HomePieceOfFurniture) homeLight0);
      assertEquals(true, area0.isEmpty());
      assertNotNull(area0);
  }

  @Test
  public void test16()  throws Throwable  {
      ModelManager modelManager0 = ModelManager.getInstance();
      LightSource[] lightSourceArray0 = new LightSource[2];
      float[][] floatArray0 = new float[7][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 19);
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, (String) null, (Content) null, (Content) null, (Content) null, 128.0F, (-1063.6727F), 789.51324F, 128.0F, false, lightSourceArray0, (String) null, floatArray0, (String) null, false, true, false, bigDecimal0, bigDecimal0, (String) null);
      HomeLight homeLight0 = new HomeLight((Light) catalogLight0);
      // Undeclared exception!
      try {
        modelManager0.getAreaOnFloor((HomePieceOfFurniture) homeLight0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * No cut out shape associated to piece
         */
      }
  }
}
