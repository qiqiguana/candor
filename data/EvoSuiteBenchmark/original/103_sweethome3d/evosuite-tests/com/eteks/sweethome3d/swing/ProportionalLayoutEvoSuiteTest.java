/*
 * This file was automatically generated by EvoSuite
 */

package com.eteks.sweethome3d.swing;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.eteks.sweethome3d.swing.ProportionalLayout;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import javax.swing.JMenu;
import javax.swing.JPasswordField;
import javax.swing.JToolTip;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ProportionalLayoutEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ProportionalLayout proportionalLayout0 = new ProportionalLayout(32);
      float float0 = proportionalLayout0.getLayoutAlignmentY((Container) null);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test1()  throws Throwable  {
      ProportionalLayout proportionalLayout0 = new ProportionalLayout(32);
      proportionalLayout0.invalidateLayout((Container) null);
  }

  @Test
  public void test2()  throws Throwable  {
      ProportionalLayout proportionalLayout0 = new ProportionalLayout();
      JPasswordField jPasswordField0 = new JPasswordField("m2C", 4);
      // Undeclared exception!
      try {
        proportionalLayout0.addLayoutComponent("m2C", (Component) jPasswordField0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Use addLayoutComponent with a Constraints object
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      ProportionalLayout proportionalLayout0 = new ProportionalLayout(205);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      proportionalLayout0.removeLayoutComponent((Component) defaultTreeCellRenderer0);
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
  }

  @Test
  public void test4()  throws Throwable  {
      ProportionalLayout proportionalLayout0 = new ProportionalLayout();
      JToolTip jToolTip0 = new JToolTip();
      float float0 = proportionalLayout0.getLayoutAlignmentX((Container) jToolTip0);
      assertEquals(0.5F, float0, 0.01F);
  }

  @Test
  public void test5()  throws Throwable  {
      ProportionalLayout proportionalLayout0 = new ProportionalLayout(205);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      proportionalLayout0.addLayoutComponent((Component) defaultTreeCellRenderer0, (Object) "SmallIcon");
      assertEquals(true, defaultTreeCellRenderer0.isOptimizedDrawingEnabled());
  }

  @Test
  public void test6()  throws Throwable  {
      ProportionalLayout proportionalLayout0 = new ProportionalLayout();
      JToolTip jToolTip0 = new JToolTip();
      proportionalLayout0.layoutContainer((Container) jToolTip0);
      assertEquals(false, jToolTip0.isValid());
  }

  @Test
  public void test7()  throws Throwable  {
      ProportionalLayout proportionalLayout0 = new ProportionalLayout((-1863));
      JMenu jMenu0 = new JMenu();
      Dimension dimension0 = proportionalLayout0.minimumLayoutSize((Container) jMenu0);
      assertEquals("java.awt.Dimension[width=4,height=4]", dimension0.toString());
      assertNotNull(dimension0);
  }

  @Test
  public void test8()  throws Throwable  {
      ProportionalLayout proportionalLayout0 = new ProportionalLayout((-1863));
      JMenu jMenu0 = new JMenu();
      Dimension dimension0 = proportionalLayout0.maximumLayoutSize((Container) jMenu0);
      assertEquals("java.awt.Dimension[width=4,height=4]", dimension0.toString());
      assertNotNull(dimension0);
  }

  @Test
  public void test9()  throws Throwable  {
      ProportionalLayout proportionalLayout0 = new ProportionalLayout();
      JMenu jMenu0 = new JMenu();
      Dimension dimension0 = proportionalLayout0.preferredLayoutSize((Container) jMenu0);
      assertEquals("java.awt.Dimension[width=4,height=4]", dimension0.toString());
      assertNotNull(dimension0);
  }
}
