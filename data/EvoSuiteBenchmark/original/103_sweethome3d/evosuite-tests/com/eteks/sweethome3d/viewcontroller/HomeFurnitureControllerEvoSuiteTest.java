/*
 * This file was automatically generated by EvoSuite
 */

package com.eteks.sweethome3d.viewcontroller;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.eteks.sweethome3d.model.Home;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.swing.SwingViewFactory;
import com.eteks.sweethome3d.viewcontroller.ContentManager;
import com.eteks.sweethome3d.viewcontroller.HomeFurnitureController;
import com.eteks.sweethome3d.viewcontroller.View;
import com.eteks.sweethome3d.viewcontroller.ViewFactory;
import java.beans.PropertyChangeListener;
import java.util.List;
import java.util.Vector;
import javax.swing.JLayeredPane;
import javax.swing.plaf.metal.MetalLabelUI;
import javax.swing.undo.UndoableEditSupport;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class HomeFurnitureControllerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Home home0 = new Home(8.0058565F);
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport((Object) "javax.swing.CellRendererPane[,0,0,0x0,invalid,hidden]");
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0, undoableEditSupport0);
      assertNotNull(homeFurnitureController0);
      
      HomeFurnitureController.Property homeFurnitureController_Property0 = HomeFurnitureController.Property.RESIZABLE;
      MetalLabelUI metalLabelUI0 = new MetalLabelUI();
      homeFurnitureController0.removePropertyChangeListener(homeFurnitureController_Property0, (PropertyChangeListener) metalLabelUI0);
      assertEquals(true, homeFurnitureController0.isResizable());
      assertEquals(true, homeFurnitureController0.isTexturable());
      assertEquals(false, homeFurnitureController0.isBasePlanItemEditable());
      assertEquals(true, homeFurnitureController0.isDeformable());
      assertEquals(false, homeFurnitureController0.isProportional());
  }

  @Test
  public void test1()  throws Throwable  {
      Home home0 = new Home(8.0058565F);
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport((Object) "javax.swing.CellRendererPane[,0,0,0x0,invalid,hidden]");
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0, undoableEditSupport0);
      assertNotNull(homeFurnitureController0);
      
      homeFurnitureController0.setHeight((Float) 8.0058565F);
      assertEquals(true, homeFurnitureController0.isTexturable());
      assertEquals(true, homeFurnitureController0.isDeformable());
      assertEquals(true, homeFurnitureController0.isResizable());
      assertEquals(false, homeFurnitureController0.isProportional());
  }

  @Test
  public void test2()  throws Throwable  {
      Home home0 = new Home(8.0058565F);
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport((Object) "javax.swing.CellRendererPane[,0,0,0x0,invalid,hidden]");
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0, undoableEditSupport0);
      assertNotNull(homeFurnitureController0);
      
      homeFurnitureController0.setWidth((Float) 8.0058565F);
      homeFurnitureController0.updateProperties();
      assertEquals(false, homeFurnitureController0.isProportional());
      assertEquals(true, homeFurnitureController0.isResizable());
      assertEquals(true, homeFurnitureController0.isTexturable());
  }

  @Test
  public void test3()  throws Throwable  {
      Home home0 = new Home(8.0058565F);
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport((Object) "javax.swing.CellRendererPane[,0,0,0x0,invalid,hidden]");
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0, undoableEditSupport0);
      assertNotNull(homeFurnitureController0);
      
      homeFurnitureController0.isBasePlanItemEditable();
      assertEquals(false, homeFurnitureController0.isProportional());
      assertEquals(true, homeFurnitureController0.isTexturable());
      assertEquals(true, homeFurnitureController0.isResizable());
      assertEquals(true, homeFurnitureController0.isDeformable());
  }

  @Test
  public void test4()  throws Throwable  {
      Home home0 = new Home(0.0F);
      UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport((Object) "expandsSelectedPaths");
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) null, undoableEditSupport0);
      assertNotNull(homeFurnitureController0);
      
      homeFurnitureController0.getPaint();
      assertEquals(false, homeFurnitureController0.isBasePlanItemEditable());
      assertEquals(false, homeFurnitureController0.isProportional());
      assertEquals(true, homeFurnitureController0.isTexturable());
      assertEquals(true, homeFurnitureController0.isDeformable());
      assertEquals(true, homeFurnitureController0.isResizable());
  }

  @Test
  public void test5()  throws Throwable  {
      Vector<HomePieceOfFurniture> vector0 = new Vector<HomePieceOfFurniture>();
      Home home0 = new Home((List<HomePieceOfFurniture>) vector0);
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport();
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0, undoableEditSupport0);
      assertNotNull(homeFurnitureController0);
      
      boolean boolean0 = homeFurnitureController0.isDeformable();
      assertEquals(false, homeFurnitureController0.isBasePlanItemEditable());
      assertEquals(true, boolean0);
      assertEquals(true, homeFurnitureController0.isTexturable());
      assertEquals(false, homeFurnitureController0.isProportional());
      assertEquals(true, homeFurnitureController0.isResizable());
  }

  @Test
  public void test6()  throws Throwable  {
      Home home0 = new Home(0.0F);
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0, (ContentManager) null, (UndoableEditSupport) null);
      assertNotNull(homeFurnitureController0);
      
      homeFurnitureController0.getNameVisible();
      assertEquals(false, homeFurnitureController0.isProportional());
      assertEquals(true, homeFurnitureController0.isResizable());
      assertEquals(true, homeFurnitureController0.isDeformable());
      assertEquals(true, homeFurnitureController0.isTexturable());
      assertEquals(false, homeFurnitureController0.isBasePlanItemEditable());
  }

  @Test
  public void test7()  throws Throwable  {
      Home home0 = new Home(8.0058565F);
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport((Object) "javax.swing.CellRendererPane[,0,0,0x0,invalid,hidden]");
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0, undoableEditSupport0);
      assertNotNull(homeFurnitureController0);
      
      homeFurnitureController0.setDepth((Float) 8.0058565F);
      homeFurnitureController0.updateProperties();
      assertEquals(false, homeFurnitureController0.isBasePlanItemEditable());
      assertEquals(false, homeFurnitureController0.isProportional());
      assertEquals(true, homeFurnitureController0.isTexturable());
      assertEquals(true, homeFurnitureController0.isResizable());
      assertEquals(true, homeFurnitureController0.isDeformable());
  }

  @Test
  public void test8()  throws Throwable  {
      Home home0 = new Home(0.0F);
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport((Object) "localhost/127.0.0.1");
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0, undoableEditSupport0);
      assertNotNull(homeFurnitureController0);
      
      homeFurnitureController0.getModelMirrored();
      assertEquals(false, homeFurnitureController0.isProportional());
      assertEquals(false, homeFurnitureController0.isBasePlanItemEditable());
      assertEquals(true, homeFurnitureController0.isTexturable());
      assertEquals(true, homeFurnitureController0.isResizable());
      assertEquals(true, homeFurnitureController0.isDeformable());
  }

  @Test
  public void test9()  throws Throwable  {
      Vector<HomePieceOfFurniture> vector0 = new Vector<HomePieceOfFurniture>();
      Home home0 = new Home((List<HomePieceOfFurniture>) vector0);
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport();
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0, undoableEditSupport0);
      assertNotNull(homeFurnitureController0);
      
      HomeFurnitureController.Property homeFurnitureController_Property0 = HomeFurnitureController.Property.HEIGHT;
      MetalLabelUI metalLabelUI0 = new MetalLabelUI();
      homeFurnitureController0.addPropertyChangeListener(homeFurnitureController_Property0, (PropertyChangeListener) metalLabelUI0);
      assertEquals(false, homeFurnitureController0.isProportional());
      assertEquals(true, homeFurnitureController0.isResizable());
      assertEquals(true, homeFurnitureController0.isTexturable());
      assertEquals(true, homeFurnitureController0.isDeformable());
  }

  @Test
  public void test10()  throws Throwable  {
      Home home0 = new Home((-5.281316F));
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport();
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0, undoableEditSupport0);
      assertNotNull(homeFurnitureController0);
      
      boolean boolean0 = homeFurnitureController0.isResizable();
      assertEquals(true, boolean0);
      assertEquals(false, homeFurnitureController0.isProportional());
      assertEquals(true, homeFurnitureController0.isTexturable());
      assertEquals(true, homeFurnitureController0.isDeformable());
      assertEquals(false, homeFurnitureController0.isBasePlanItemEditable());
  }

  @Test
  public void test11()  throws Throwable  {
      Home home0 = new Home((-5.281316F));
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport();
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0, undoableEditSupport0);
      assertNotNull(homeFurnitureController0);
      
      homeFurnitureController0.getDepth();
      assertEquals(true, homeFurnitureController0.isDeformable());
      assertEquals(true, homeFurnitureController0.isResizable());
      assertEquals(false, homeFurnitureController0.isProportional());
      assertEquals(false, homeFurnitureController0.isBasePlanItemEditable());
      assertEquals(true, homeFurnitureController0.isTexturable());
  }

  @Test
  public void test12()  throws Throwable  {
      Home home0 = new Home(0.0F);
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport((Object) "localhost/127.0.0.1");
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0, undoableEditSupport0);
      assertNotNull(homeFurnitureController0);
      
      homeFurnitureController0.getX();
      assertEquals(true, homeFurnitureController0.isDeformable());
      assertEquals(false, homeFurnitureController0.isProportional());
      assertEquals(true, homeFurnitureController0.isTexturable());
      assertEquals(false, homeFurnitureController0.isBasePlanItemEditable());
      assertEquals(true, homeFurnitureController0.isResizable());
  }

  @Test
  public void test13()  throws Throwable  {
      Home home0 = new Home((-5.281316F));
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport();
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0, undoableEditSupport0);
      assertNotNull(homeFurnitureController0);
      
      homeFurnitureController0.getColor();
      assertEquals(false, homeFurnitureController0.isBasePlanItemEditable());
      assertEquals(true, homeFurnitureController0.isDeformable());
      assertEquals(false, homeFurnitureController0.isProportional());
      assertEquals(true, homeFurnitureController0.isResizable());
      assertEquals(true, homeFurnitureController0.isTexturable());
  }

  @Test
  public void test14()  throws Throwable  {
      Home home0 = new Home(0.0F);
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0, (ContentManager) null, (UndoableEditSupport) null);
      assertNotNull(homeFurnitureController0);
      
      // Undeclared exception!
      try {
        homeFurnitureController0.displayView((View) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test15()  throws Throwable  {
      Home home0 = new Home(0.0F);
      UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport((Object) "expandsSelectedPaths");
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) null, undoableEditSupport0);
      assertNotNull(homeFurnitureController0);
      
      homeFurnitureController0.isLightPowerEditable();
      assertEquals(true, homeFurnitureController0.isDeformable());
      assertEquals(true, homeFurnitureController0.isResizable());
      assertEquals(false, homeFurnitureController0.isProportional());
      assertEquals(true, homeFurnitureController0.isTexturable());
  }

  @Test
  public void test16()  throws Throwable  {
      HomeFurnitureController.FurniturePaint homeFurnitureController_FurniturePaint0 = HomeFurnitureController.FurniturePaint.TEXTURED;
      Class<HomeFurnitureController.FurniturePaint> class0 = homeFurnitureController_FurniturePaint0.getDeclaringClass();
      Home home0 = new Home(0.0F);
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport((Object) class0);
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0, undoableEditSupport0);
      assertNotNull(homeFurnitureController0);
      
      homeFurnitureController0.getBasePlanItem();
      assertEquals(true, homeFurnitureController0.isResizable());
      assertEquals(false, homeFurnitureController0.isBasePlanItemEditable());
      assertEquals(false, homeFurnitureController0.isProportional());
      assertEquals(true, homeFurnitureController0.isTexturable());
      assertEquals(true, homeFurnitureController0.isDeformable());
  }

  @Test
  public void test17()  throws Throwable  {
      Vector<HomePieceOfFurniture> vector0 = new Vector<HomePieceOfFurniture>();
      Home home0 = new Home((List<HomePieceOfFurniture>) vector0);
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport();
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0, undoableEditSupport0);
      assertNotNull(homeFurnitureController0);
      
      homeFurnitureController0.getElevation();
      assertEquals(false, homeFurnitureController0.isBasePlanItemEditable());
      assertEquals(true, homeFurnitureController0.isResizable());
      assertEquals(true, homeFurnitureController0.isTexturable());
      assertEquals(true, homeFurnitureController0.isDeformable());
      assertEquals(false, homeFurnitureController0.isProportional());
  }

  @Test
  public void test18()  throws Throwable  {
      Home home0 = new Home(8.0058565F);
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport((Object) "javax.swing.CellRendererPane[,0,0,0x0,invalid,hidden]");
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0, undoableEditSupport0);
      assertNotNull(homeFurnitureController0);
      
      homeFurnitureController0.getShininess();
      assertEquals(false, homeFurnitureController0.isProportional());
      assertEquals(true, homeFurnitureController0.isDeformable());
      assertEquals(false, homeFurnitureController0.isBasePlanItemEditable());
      assertEquals(true, homeFurnitureController0.isTexturable());
      assertEquals(true, homeFurnitureController0.isResizable());
  }

  @Test
  public void test19()  throws Throwable  {
      Home home0 = new Home(0.0F);
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0, (ContentManager) null, (UndoableEditSupport) null);
      assertNotNull(homeFurnitureController0);
      
      boolean boolean0 = homeFurnitureController0.isTexturable();
      assertEquals(true, homeFurnitureController0.isDeformable());
      assertEquals(true, homeFurnitureController0.isResizable());
      assertEquals(false, homeFurnitureController0.isProportional());
      assertEquals(true, boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      Home home0 = new Home((-5.281316F));
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport();
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0, undoableEditSupport0);
      assertNotNull(homeFurnitureController0);
      
      homeFurnitureController0.getAngleInDegrees();
      assertEquals(true, homeFurnitureController0.isResizable());
      assertEquals(true, homeFurnitureController0.isTexturable());
      assertEquals(true, homeFurnitureController0.isDeformable());
  }

  @Test
  public void test21()  throws Throwable  {
      Home home0 = new Home(8.0058565F);
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport((Object) "javax.swing.CellRendererPane[,0,0,0x0,invalid,hidden]");
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0, undoableEditSupport0);
      assertNotNull(homeFurnitureController0);
      
      homeFurnitureController0.getVisible();
      assertEquals(true, homeFurnitureController0.isResizable());
      assertEquals(true, homeFurnitureController0.isTexturable());
      assertEquals(true, homeFurnitureController0.isDeformable());
      assertEquals(false, homeFurnitureController0.isBasePlanItemEditable());
  }

  @Test
  public void test22()  throws Throwable  {
      Home home0 = new Home(8.0058565F);
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport((Object) "javax.swing.CellRendererPane[,0,0,0x0,invalid,hidden]");
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0, undoableEditSupport0);
      assertNotNull(homeFurnitureController0);
      
      homeFurnitureController0.getLightPower();
      assertEquals(false, homeFurnitureController0.isProportional());
      assertEquals(true, homeFurnitureController0.isTexturable());
      assertEquals(true, homeFurnitureController0.isDeformable());
      assertEquals(true, homeFurnitureController0.isResizable());
  }

  @Test
  public void test23()  throws Throwable  {
      Home home0 = new Home(0.0F);
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0, (ContentManager) null, (UndoableEditSupport) null);
      assertNotNull(homeFurnitureController0);
      
      homeFurnitureController0.getHeight();
      assertEquals(true, homeFurnitureController0.isTexturable());
      assertEquals(true, homeFurnitureController0.isDeformable());
      assertEquals(true, homeFurnitureController0.isResizable());
      assertEquals(false, homeFurnitureController0.isBasePlanItemEditable());
  }

  @Test
  public void test24()  throws Throwable  {
      Home home0 = new Home(8.0058565F);
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport((Object) "javax.swing.CellRendererPane[,0,0,0x0,invalid,hidden]");
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0, undoableEditSupport0);
      assertNotNull(homeFurnitureController0);
      
      homeFurnitureController0.getIcon();
      assertEquals(true, homeFurnitureController0.isResizable());
      assertEquals(true, homeFurnitureController0.isTexturable());
      assertEquals(true, homeFurnitureController0.isDeformable());
  }

  @Test
  public void test25()  throws Throwable  {
      Home home0 = new Home(0.0F);
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0, (UndoableEditSupport) null);
      assertNotNull(homeFurnitureController0);
      
      homeFurnitureController0.getWidth();
      assertEquals(true, homeFurnitureController0.isResizable());
      assertEquals(false, homeFurnitureController0.isProportional());
      assertEquals(false, homeFurnitureController0.isBasePlanItemEditable());
      assertEquals(true, homeFurnitureController0.isDeformable());
      assertEquals(true, homeFurnitureController0.isTexturable());
  }

  @Test
  public void test26()  throws Throwable  {
      Home home0 = new Home(0.0F);
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0, (ContentManager) null, (UndoableEditSupport) null);
      assertNotNull(homeFurnitureController0);
      
      homeFurnitureController0.getName();
      assertEquals(true, homeFurnitureController0.isDeformable());
      assertEquals(false, homeFurnitureController0.isProportional());
      assertEquals(true, homeFurnitureController0.isTexturable());
      assertEquals(true, homeFurnitureController0.isResizable());
  }

  @Test
  public void test27()  throws Throwable  {
      Home home0 = new Home(0.0F);
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0, (ContentManager) null, (UndoableEditSupport) null);
      assertNotNull(homeFurnitureController0);
      
      homeFurnitureController0.getAngle();
      assertEquals(false, homeFurnitureController0.isProportional());
      assertEquals(true, homeFurnitureController0.isResizable());
      assertEquals(false, homeFurnitureController0.isBasePlanItemEditable());
      assertEquals(true, homeFurnitureController0.isTexturable());
      assertEquals(true, homeFurnitureController0.isDeformable());
  }

  @Test
  public void test28()  throws Throwable  {
      Vector<HomePieceOfFurniture> vector0 = new Vector<HomePieceOfFurniture>();
      Home home0 = new Home((List<HomePieceOfFurniture>) vector0);
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport();
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0, undoableEditSupport0);
      assertNotNull(homeFurnitureController0);
      
      homeFurnitureController0.getY();
      assertEquals(true, homeFurnitureController0.isResizable());
      assertEquals(false, homeFurnitureController0.isBasePlanItemEditable());
      assertEquals(true, homeFurnitureController0.isTexturable());
      assertEquals(false, homeFurnitureController0.isProportional());
      assertEquals(true, homeFurnitureController0.isDeformable());
  }

  @Test
  public void test29()  throws Throwable  {
      Home home0 = new Home(0.0F);
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport((Object) "localhost/127.0.0.1");
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0, undoableEditSupport0);
      assertNotNull(homeFurnitureController0);
      
      homeFurnitureController0.setName("caret-down");
      assertEquals(true, homeFurnitureController0.isTexturable());
      assertEquals(true, homeFurnitureController0.isDeformable());
      assertEquals(false, homeFurnitureController0.isProportional());
      assertEquals(false, homeFurnitureController0.isBasePlanItemEditable());
      assertEquals(true, homeFurnitureController0.isResizable());
  }

  @Test
  public void test30()  throws Throwable  {
      Home home0 = new Home(0.0F);
      UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport((Object) "expandsSelectedPaths");
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) null, undoableEditSupport0);
      assertNotNull(homeFurnitureController0);
      
      Boolean boolean0 = new Boolean(true);
      homeFurnitureController0.setNameVisible(boolean0);
      assertEquals(false, homeFurnitureController0.isProportional());
      assertEquals(true, homeFurnitureController0.isResizable());
      assertEquals(true, homeFurnitureController0.isDeformable());
      assertEquals(false, homeFurnitureController0.isBasePlanItemEditable());
      assertEquals(true, homeFurnitureController0.isTexturable());
  }

  @Test
  public void test31()  throws Throwable  {
      Home home0 = new Home(0.0F);
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0, (UndoableEditSupport) null);
      assertNotNull(homeFurnitureController0);
      
      homeFurnitureController0.setX((Float) 0.0F);
      assertEquals(true, homeFurnitureController0.isDeformable());
      assertEquals(false, homeFurnitureController0.isProportional());
      assertEquals(true, homeFurnitureController0.isTexturable());
      assertEquals(true, homeFurnitureController0.isResizable());
  }

  @Test
  public void test32()  throws Throwable  {
      Home home0 = new Home(8.0058565F);
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport((Object) "javax.swing.CellRendererPane[,0,0,0x0,invalid,hidden]");
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0, undoableEditSupport0);
      assertNotNull(homeFurnitureController0);
      
      homeFurnitureController0.setY((Float) 8.0058565F);
      assertEquals(false, homeFurnitureController0.isProportional());
      assertEquals(false, homeFurnitureController0.isBasePlanItemEditable());
      assertEquals(true, homeFurnitureController0.isResizable());
      assertEquals(true, homeFurnitureController0.isTexturable());
      assertEquals(true, homeFurnitureController0.isDeformable());
  }

  @Test
  public void test33()  throws Throwable  {
      Home home0 = new Home(0.0F);
      UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport((Object) "expandsSelectedPaths");
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) null, undoableEditSupport0);
      assertNotNull(homeFurnitureController0);
      
      homeFurnitureController0.setElevation((Float) 0.0F);
      assertEquals(true, homeFurnitureController0.isResizable());
      assertEquals(true, homeFurnitureController0.isTexturable());
      assertEquals(false, homeFurnitureController0.isProportional());
      assertEquals(true, homeFurnitureController0.isDeformable());
      assertEquals(false, homeFurnitureController0.isBasePlanItemEditable());
  }

  @Test
  public void test34()  throws Throwable  {
      Home home0 = new Home(0.0F);
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0, (UndoableEditSupport) null);
      assertNotNull(homeFurnitureController0);
      
      homeFurnitureController0.setAngle((Float) 0.0F);
      assertEquals(true, homeFurnitureController0.isTexturable());
      assertEquals(false, homeFurnitureController0.isProportional());
      assertEquals(true, homeFurnitureController0.isDeformable());
      assertEquals(true, homeFurnitureController0.isResizable());
      assertEquals(false, homeFurnitureController0.isBasePlanItemEditable());
  }

  @Test
  public void test35()  throws Throwable  {
      Vector<HomePieceOfFurniture> vector0 = new Vector<HomePieceOfFurniture>();
      Home home0 = new Home((List<HomePieceOfFurniture>) vector0);
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport();
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0, undoableEditSupport0);
      assertNotNull(homeFurnitureController0);
      
      homeFurnitureController0.setAngle((Float) null);
      assertEquals(true, homeFurnitureController0.isDeformable());
      assertEquals(false, homeFurnitureController0.isProportional());
      assertEquals(true, homeFurnitureController0.isResizable());
      assertEquals(true, homeFurnitureController0.isTexturable());
  }

  @Test
  public void test36()  throws Throwable  {
      Home home0 = new Home(0.0F);
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport((Object) "localhost/127.0.0.1");
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0, undoableEditSupport0);
      assertNotNull(homeFurnitureController0);
      
      homeFurnitureController0.setBasePlanItem((Boolean) null);
      assertEquals(true, homeFurnitureController0.isResizable());
      assertEquals(true, homeFurnitureController0.isDeformable());
      assertEquals(true, homeFurnitureController0.isTexturable());
      assertEquals(false, homeFurnitureController0.isProportional());
      assertEquals(false, homeFurnitureController0.isBasePlanItemEditable());
  }

  @Test
  public void test37()  throws Throwable  {
      Home home0 = new Home((-5.281316F));
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport();
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0, undoableEditSupport0);
      assertNotNull(homeFurnitureController0);
      
      homeFurnitureController0.setBasePlanItem((Boolean) false);
      assertEquals(false, homeFurnitureController0.isProportional());
      assertEquals(true, homeFurnitureController0.isDeformable());
      assertEquals(true, homeFurnitureController0.isResizable());
      assertEquals(true, homeFurnitureController0.isTexturable());
      assertEquals(false, homeFurnitureController0.isBasePlanItemEditable());
  }

  @Test
  public void test38()  throws Throwable  {
      Home home0 = new Home(0.0F);
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport((Object) "localhost/127.0.0.1");
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0, undoableEditSupport0);
      assertNotNull(homeFurnitureController0);
      
      homeFurnitureController0.setWidth((Float) 0.0F);
      assertEquals(true, homeFurnitureController0.isTexturable());
      assertEquals(true, homeFurnitureController0.isResizable());
      assertEquals(true, homeFurnitureController0.isDeformable());
  }

  @Test
  public void test39()  throws Throwable  {
      Home home0 = new Home((-5.281316F));
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport();
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0, undoableEditSupport0);
      assertNotNull(homeFurnitureController0);
      
      homeFurnitureController0.setDepth((Float) (-5.281316F));
      homeFurnitureController0.setDepth((Float) (-5.281316F));
      assertEquals(true, homeFurnitureController0.isResizable());
      assertEquals(false, homeFurnitureController0.isProportional());
      assertEquals(true, homeFurnitureController0.isTexturable());
      assertEquals(true, homeFurnitureController0.isDeformable());
  }

  @Test
  public void test40()  throws Throwable  {
      Home home0 = new Home(0.0F);
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport((Object) "localhost/127.0.0.1");
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0, undoableEditSupport0);
      assertNotNull(homeFurnitureController0);
      
      homeFurnitureController0.setHeight((Float) 0.0F);
      homeFurnitureController0.setHeight((Float) 0.0F);
      assertEquals(true, homeFurnitureController0.isDeformable());
      assertEquals(true, homeFurnitureController0.isResizable());
      assertEquals(false, homeFurnitureController0.isProportional());
      assertEquals(true, homeFurnitureController0.isTexturable());
  }

  @Test
  public void test41()  throws Throwable  {
      HomeFurnitureController.FurniturePaint homeFurnitureController_FurniturePaint0 = HomeFurnitureController.FurniturePaint.TEXTURED;
      Home home0 = new Home(0.0F);
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport((Object) homeFurnitureController_FurniturePaint0);
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0, undoableEditSupport0);
      assertNotNull(homeFurnitureController0);
      
      homeFurnitureController0.setProportional(true);
      assertEquals(true, homeFurnitureController0.isProportional());
  }

  @Test
  public void test42()  throws Throwable  {
      Vector<HomePieceOfFurniture> vector0 = new Vector<HomePieceOfFurniture>();
      Home home0 = new Home((List<HomePieceOfFurniture>) vector0);
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport();
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0, undoableEditSupport0);
      assertNotNull(homeFurnitureController0);
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      homeFurnitureController0.setColor(integer0);
      assertEquals(false, homeFurnitureController0.isBasePlanItemEditable());
      assertEquals(true, homeFurnitureController0.isTexturable());
      assertEquals(true, homeFurnitureController0.isResizable());
      assertEquals(true, homeFurnitureController0.isDeformable());
      assertEquals(false, homeFurnitureController0.isProportional());
  }

  @Test
  public void test43()  throws Throwable  {
      Vector<HomePieceOfFurniture> vector0 = new Vector<HomePieceOfFurniture>();
      Home home0 = new Home((List<HomePieceOfFurniture>) vector0);
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport();
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0, undoableEditSupport0);
      assertNotNull(homeFurnitureController0);
      
      HomeFurnitureController.FurnitureShininess homeFurnitureController_FurnitureShininess0 = HomeFurnitureController.FurnitureShininess.SHINY;
      homeFurnitureController0.setShininess(homeFurnitureController_FurnitureShininess0);
      assertEquals(false, homeFurnitureController0.isBasePlanItemEditable());
      assertEquals(false, homeFurnitureController0.isProportional());
      assertEquals(true, homeFurnitureController0.isTexturable());
      assertEquals(true, homeFurnitureController0.isDeformable());
      assertEquals(true, homeFurnitureController0.isResizable());
  }

  @Test
  public void test44()  throws Throwable  {
      Home home0 = new Home((-5.281316F));
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport();
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0, undoableEditSupport0);
      assertNotNull(homeFurnitureController0);
      
      homeFurnitureController0.setVisible((Boolean) false);
      assertEquals(true, homeFurnitureController0.isDeformable());
      assertEquals(true, homeFurnitureController0.isTexturable());
      assertEquals(false, homeFurnitureController0.isProportional());
      assertEquals(true, homeFurnitureController0.isResizable());
  }

  @Test
  public void test45()  throws Throwable  {
      Home home0 = new Home(0.0F);
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0, (UndoableEditSupport) null);
      assertNotNull(homeFurnitureController0);
      
      Boolean boolean0 = Boolean.TRUE;
      homeFurnitureController0.setModelMirrored(boolean0);
      assertEquals(false, homeFurnitureController0.isBasePlanItemEditable());
      assertEquals(true, homeFurnitureController0.isResizable());
      assertEquals(true, homeFurnitureController0.isTexturable());
      assertEquals(false, homeFurnitureController0.isProportional());
      assertEquals(true, homeFurnitureController0.isDeformable());
  }

  @Test
  public void test46()  throws Throwable  {
      Home home0 = new Home((-5.281316F));
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport();
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0, undoableEditSupport0);
      assertNotNull(homeFurnitureController0);
      
      homeFurnitureController0.setLightPower((Float) 76.767F);
      assertEquals(true, homeFurnitureController0.isTexturable());
      assertEquals(true, homeFurnitureController0.isDeformable());
      assertEquals(true, homeFurnitureController0.isResizable());
      assertEquals(false, homeFurnitureController0.isProportional());
  }

  @Test
  public void test47()  throws Throwable  {
      Home home0 = new Home(0.0F);
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      HomeFurnitureController homeFurnitureController0 = new HomeFurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0, (ContentManager) null, (UndoableEditSupport) null);
      assertNotNull(homeFurnitureController0);
      
      homeFurnitureController0.modifyFurniture();
      assertEquals(false, homeFurnitureController0.isBasePlanItemEditable());
      assertEquals(true, homeFurnitureController0.isDeformable());
      assertEquals(true, homeFurnitureController0.isTexturable());
      assertEquals(false, homeFurnitureController0.isProportional());
      assertEquals(true, homeFurnitureController0.isResizable());
  }
}
