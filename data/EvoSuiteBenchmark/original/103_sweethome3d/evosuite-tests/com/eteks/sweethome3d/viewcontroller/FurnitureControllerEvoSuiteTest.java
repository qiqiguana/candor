/*
 * This file was automatically generated by EvoSuite
 */

package com.eteks.sweethome3d.viewcontroller;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.eteks.sweethome3d.model.CatalogDoorOrWindow;
import com.eteks.sweethome3d.model.CatalogLight;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.DoorOrWindow;
import com.eteks.sweethome3d.model.Home;
import com.eteks.sweethome3d.model.HomeDoorOrWindow;
import com.eteks.sweethome3d.model.HomeLight;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.Light;
import com.eteks.sweethome3d.model.LightSource;
import com.eteks.sweethome3d.model.PieceOfFurniture;
import com.eteks.sweethome3d.model.Sash;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.swing.SwingViewFactory;
import com.eteks.sweethome3d.viewcontroller.ContentManager;
import com.eteks.sweethome3d.viewcontroller.FurnitureController;
import com.eteks.sweethome3d.viewcontroller.HomeController;
import com.eteks.sweethome3d.viewcontroller.ViewFactory;
import java.math.BigDecimal;
import java.util.List;
import java.util.Vector;
import javax.swing.undo.UndoableEditSupport;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class FurnitureControllerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Home home0 = new Home(0.0F);
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      FurnitureController furnitureController0 = new FurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0);
      furnitureController0.alignSelectedFurnitureOnLeft();
  }

  @Test
  public void test1()  throws Throwable  {
      Home home0 = new Home((-1921.026F));
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      FurnitureController furnitureController0 = new FurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0);
      furnitureController0.alignSelectedFurnitureSideBySide();
  }

  @Test
  public void test2()  throws Throwable  {
      Home home0 = new Home((-1921.026F));
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      FurnitureController furnitureController0 = new FurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0);
      furnitureController0.alignSelectedFurnitureOnRightSide();
  }

  @Test
  public void test3()  throws Throwable  {
      Home home0 = new Home((-1921.026F));
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      HomeController homeController0 = new HomeController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0);
      FurnitureController furnitureController0 = homeController0.getFurnitureController();
      furnitureController0.alignSelectedFurnitureOnRight();
  }

  @Test
  public void test4()  throws Throwable  {
      Home home0 = new Home();
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      FurnitureController furnitureController0 = new FurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0);
      furnitureController0.alignSelectedFurnitureOnLeftSide();
  }

  @Test
  public void test5()  throws Throwable  {
      Home home0 = new Home(1134.0382F);
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      FurnitureController furnitureController0 = new FurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0);
      // Undeclared exception!
      try {
        furnitureController0.createHomeFurnitureGroup((List<HomePieceOfFurniture>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      Home home0 = new Home((-1921.026F));
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      HomeController homeController0 = new HomeController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0);
      FurnitureController furnitureController0 = homeController0.getFurnitureController();
      furnitureController0.selectAll();
  }

  @Test
  public void test7()  throws Throwable  {
      Home home0 = new Home((-1921.026F));
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      FurnitureController furnitureController0 = new FurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0);
      furnitureController0.alignSelectedFurnitureOnBottom();
  }

  @Test
  public void test8()  throws Throwable  {
      Home home0 = new Home();
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      FurnitureController furnitureController0 = new FurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0);
      // Undeclared exception!
      try {
        furnitureController0.importFurniture("java.awt.FlowLayout[hgap=5,vgap=5,align=center]");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      Home home0 = new Home((-1921.026F));
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      FurnitureController furnitureController0 = new FurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0);
      assertNotNull(furnitureController0);
      
      Sash[] sashArray0 = new Sash[10];
      float[][] floatArray0 = new float[6][8];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "yy$ZYIKcLfUQ(*-", "", (Content) null, (Content) null, (Content) null, 0.0F, (-1228.6113F), 0.0F, 0.0F, true, (float) 0, (-405.18384F), sashArray0, floatArray0, "", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = (HomeDoorOrWindow)furnitureController0.createHomePieceOfFurniture((PieceOfFurniture) catalogDoorOrWindow0);
      boolean boolean0 = furnitureController0.isPieceOfFurnitureDeletable((HomePieceOfFurniture) homeDoorOrWindow0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      Home home0 = new Home((-1921.026F));
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      HomeController homeController0 = new HomeController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0);
      FurnitureController furnitureController0 = homeController0.getFurnitureController();
      assertNotNull(furnitureController0);
      
      furnitureController0.deleteSelection();
      assertEquals(false, home0.isBasePlanLocked());
  }

  @Test
  public void test11()  throws Throwable  {
      Home home0 = new Home((-1921.026F));
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      HomeController homeController0 = new HomeController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0);
      FurnitureController furnitureController0 = homeController0.getFurnitureController();
      furnitureController0.distributeSelectedFurnitureVertically();
  }

  @Test
  public void test12()  throws Throwable  {
      Home home0 = new Home(1134.0382F);
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      FurnitureController furnitureController0 = new FurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0);
      furnitureController0.alignSelectedFurnitureOnBackSide();
  }

  @Test
  public void test13()  throws Throwable  {
      Home home0 = new Home(1134.0382F);
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      FurnitureController furnitureController0 = new FurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0);
      furnitureController0.alignSelectedFurnitureOnFrontSide();
  }

  @Test
  public void test14()  throws Throwable  {
      Home home0 = new Home((-1921.026F));
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      FurnitureController furnitureController0 = new FurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0);
      furnitureController0.distributeSelectedFurnitureHorizontally();
  }

  @Test
  public void test15()  throws Throwable  {
      Home home0 = new Home((-1921.026F));
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      FurnitureController furnitureController0 = new FurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0);
      furnitureController0.alignSelectedFurnitureOnTop();
  }

  @Test
  public void test16()  throws Throwable  {
      Home home0 = new Home((-1921.026F));
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      HomeController homeController0 = new HomeController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0);
      FurnitureController furnitureController0 = homeController0.getFurnitureController();
      assertNotNull(furnitureController0);
      
      Vector<HomePieceOfFurniture> vector0 = new Vector<HomePieceOfFurniture>();
      furnitureController0.addFurniture((List<HomePieceOfFurniture>) vector0);
      assertEquals(false, home0.isBasePlanLocked());
  }

  @Test
  public void test17()  throws Throwable  {
      Home home0 = new Home(0.0F);
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      FurnitureController furnitureController0 = new FurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0);
      // Undeclared exception!
      try {
        furnitureController0.getView();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test18()  throws Throwable  {
      Home home0 = new Home((-1921.026F));
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      FurnitureController furnitureController0 = new FurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0, (ContentManager) null, (UndoableEditSupport) null);
      assertNotNull(furnitureController0);
      
      furnitureController0.deleteSelection();
      assertEquals(false, home0.isBasePlanLocked());
  }

  @Test
  public void test19()  throws Throwable  {
      Home home0 = new Home((-1921.026F));
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      FurnitureController furnitureController0 = new FurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0);
      assertNotNull(furnitureController0);
      
      Sash[] sashArray0 = new Sash[10];
      float[][] floatArray0 = new float[6][8];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "yy$ZYIKcLfUQ(*-", "", (Content) null, (Content) null, (Content) null, 0.0F, (-1228.6113F), 0.0F, 0.0F, true, (float) 0, (-405.18384F), sashArray0, floatArray0, "", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow((DoorOrWindow) catalogDoorOrWindow0);
      boolean boolean0 = furnitureController0.isPieceOfFurniturePartOfBasePlan((HomePieceOfFurniture) homeDoorOrWindow0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      Home home0 = new Home((-1921.026F));
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      FurnitureController furnitureController0 = new FurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0);
      float[][] floatArray0 = new float[6][8];
      LightSource[] lightSourceArray0 = new LightSource[9];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("", "", "", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, floatArray0, "", true, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight((Light) catalogLight0);
      HomeLight homeLight1 = (HomeLight)furnitureController0.createHomePieceOfFurniture((PieceOfFurniture) homeLight0);
      assertEquals("", homeLight1.getName());
  }

  @Test
  public void test21()  throws Throwable  {
      Home home0 = new Home(0.0F);
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      FurnitureController furnitureController0 = new FurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0);
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.VISIBLE;
      furnitureController0.toggleFurnitureSort(homePieceOfFurniture_SortableProperty0);
  }

  @Test
  public void test22()  throws Throwable  {
      Home home0 = new Home(0.0F);
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      FurnitureController furnitureController0 = new FurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0);
      furnitureController0.toggleFurnitureSortOrder();
      assertEquals(true, home0.isFurnitureDescendingSorted());
  }

  @Test
  public void test23()  throws Throwable  {
      Home home0 = new Home((-1921.026F));
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      UndoableEditSupport undoableEditSupport0 = new UndoableEditSupport((Object) null);
      FurnitureController furnitureController0 = new FurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0, (ContentManager) null, undoableEditSupport0);
      assertNotNull(furnitureController0);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.PRICE;
      furnitureController0.sortFurniture(homePieceOfFurniture_SortableProperty0);
      assertEquals(false, home0.isFurnitureDescendingSorted());
  }

  @Test
  public void test24()  throws Throwable  {
      Home home0 = new Home((-1921.026F));
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      FurnitureController furnitureController0 = new FurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0);
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX;
      furnitureController0.toggleFurnitureVisibleProperty(homePieceOfFurniture_SortableProperty0);
  }

  @Test
  public void test25()  throws Throwable  {
      Home home0 = new Home();
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      FurnitureController furnitureController0 = new FurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0);
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.WIDTH;
      furnitureController0.toggleFurnitureVisibleProperty(homePieceOfFurniture_SortableProperty0);
  }

  @Test
  public void test26()  throws Throwable  {
      Home home0 = new Home();
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      FurnitureController furnitureController0 = new FurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0);
      furnitureController0.toggleFurnitureVisibleProperty((HomePieceOfFurniture.SortableProperty) null);
  }

  @Test
  public void test27()  throws Throwable  {
      Home home0 = new Home((-1921.026F));
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      FurnitureController furnitureController0 = new FurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0);
      furnitureController0.modifySelectedFurniture();
  }

  @Test
  public void test28()  throws Throwable  {
      Home home0 = new Home((-1921.026F));
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      FurnitureController furnitureController0 = new FurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0);
      furnitureController0.toggleSelectedFurnitureVisibility();
  }

  @Test
  public void test29()  throws Throwable  {
      Home home0 = new Home((-1921.026F));
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      HomeController homeController0 = new HomeController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0);
      FurnitureController furnitureController0 = homeController0.getFurnitureController();
      furnitureController0.groupSelectedFurniture();
  }

  @Test
  public void test30()  throws Throwable  {
      Home home0 = new Home((-1921.026F));
      SwingViewFactory swingViewFactory0 = new SwingViewFactory();
      FurnitureController furnitureController0 = new FurnitureController(home0, (UserPreferences) null, (ViewFactory) swingViewFactory0);
      furnitureController0.ungroupSelectedFurniture();
  }
}
