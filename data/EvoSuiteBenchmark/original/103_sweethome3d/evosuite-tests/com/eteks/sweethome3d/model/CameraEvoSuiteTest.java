/*
 * This file was automatically generated by EvoSuite
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.eteks.sweethome3d.model.Camera;
import java.beans.PropertyChangeListener;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class CameraEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Camera camera0 = new Camera(4.628312F, 4.628312F, 4.628312F, 1934.2107F, 1934.2107F, 1934.2107F);
      assertNotNull(camera0);
      
      camera0.setCamera(camera0);
      assertEquals(1372766400802L, camera0.getTime());
  }

  @Test
  public void test1()  throws Throwable  {
      Camera camera0 = new Camera(4.628312F, 4.628312F, 4.628312F, 1934.2107F, 1934.2107F, 1934.2107F);
      assertNotNull(camera0);
      
      camera0.removePropertyChangeListener((PropertyChangeListener) null);
      assertEquals(1372766400103L, camera0.getTime());
  }

  @Test
  public void test2()  throws Throwable  {
      Camera.Lens camera_Lens0 = Camera.Lens.SPHERICAL;
      Camera camera0 = new Camera((-1507.1981F), (-1507.1981F), (-1507.1981F), (-1507.1981F), (-1507.1981F), (-1507.1981F), 38L, camera_Lens0);
      camera0.getName();
      assertEquals((-1507.1981F), camera0.getYaw(), 0.01F);
      assertEquals((-1507.1981F), camera0.getZ(), 0.01F);
      assertEquals((-1507.1981F), camera0.getY(), 0.01F);
      assertEquals(38L, camera0.getTime());
      assertEquals((-1507.1981F), camera0.getFieldOfView(), 0.01F);
      assertEquals((-1507.1981F), camera0.getPitch(), 0.01F);
      assertEquals((-1507.1981F), camera0.getX(), 0.01F);
  }

  @Test
  public void test3()  throws Throwable  {
      Camera camera0 = new Camera(4.628312F, 4.628312F, 4.628312F, 1934.2107F, 1934.2107F, 1934.2107F);
      assertNotNull(camera0);
      
      Camera camera1 = camera0.clone();
      assertEquals(1372766400348L, camera1.getTime());
  }

  @Test
  public void test4()  throws Throwable  {
      Camera camera0 = new Camera(4.628312F, 4.628312F, 4.628312F, 1934.2107F, 1934.2107F, 1934.2107F);
      assertNotNull(camera0);
      
      camera0.addPropertyChangeListener((PropertyChangeListener) null);
      assertEquals(1372766400514L, camera0.getTime());
  }

  @Test
  public void test5()  throws Throwable  {
      Camera camera0 = new Camera(4.628312F, 4.628312F, 4.628312F, 1934.2107F, 1934.2107F, 1934.2107F);
      assertNotNull(camera0);
      
      long long0 = camera0.getTime();
      assertEquals(1372766400654L, long0);
  }

  @Test
  public void test6()  throws Throwable  {
      long long0 = Camera.convertTimeToTimeZone(38L, "[rH>}UH#0hoWPiBD");
      assertEquals(38L, long0);
  }

  @Test
  public void test7()  throws Throwable  {
      Camera camera0 = new Camera(4.628312F, 4.628312F, 4.628312F, 1934.2107F, 1934.2107F, 1934.2107F);
      assertNotNull(camera0);
      
      camera0.getLens();
      assertEquals(1372766400019L, camera0.getTime());
      assertEquals(4.628312F, camera0.getZ(), 0.01F);
  }

  @Test
  public void test8()  throws Throwable  {
      Camera camera0 = new Camera(0.8498671F, 0.8498671F, 0.8498671F, 0.8498671F, 0.8498671F, 0.8498671F);
      assertNotNull(camera0);
      
      camera0.setName("PINHtL[");
      camera0.setName("PINHtL[");
      assertEquals(1372766400197L, camera0.getTime());
  }

  @Test
  public void test9()  throws Throwable  {
      Camera camera0 = new Camera(4.628312F, 4.628312F, 4.628312F, 1934.2107F, 1934.2107F, 1934.2107F);
      assertNotNull(camera0);
      
      camera0.setName((String) null);
      assertEquals(1372766400377L, camera0.getTime());
      assertEquals(4.628312F, camera0.getY(), 0.01F);
  }

  @Test
  public void test10()  throws Throwable  {
      Camera.Lens camera_Lens0 = Camera.Lens.SPHERICAL;
      Camera camera0 = new Camera((-1507.1981F), (-1507.1981F), (-1507.1981F), (-1507.1981F), (-1507.1981F), (-1507.1981F), 38L, camera_Lens0);
      Camera camera1 = new Camera((float) 38L, (float) 38L, (float) 38L, (float) 38L, (float) 38L, (-1507.1981F), 38L, camera_Lens0);
      camera0.setCamera(camera1);
      assertEquals(38.0F, camera0.getY(), 0.01F);
      assertEquals((-1507.1981F), camera1.getFieldOfView(), 0.01F);
  }

  @Test
  public void test11()  throws Throwable  {
      Camera camera0 = new Camera(4.628312F, 4.628312F, 4.628312F, 1934.2107F, 1934.2107F, 1934.2107F);
      assertNotNull(camera0);
      
      camera0.setFieldOfView(4.628312F);
      assertEquals(1372766400760L, camera0.getTime());
  }

  @Test
  public void test12()  throws Throwable  {
      Camera camera0 = new Camera(0.8498671F, 0.8498671F, 0.8498671F, 0.8498671F, 0.8498671F, 0.8498671F);
      assertNotNull(camera0);
      
      camera0.setTime((-418L));
      camera0.setTime((-418L));
      assertEquals((-418L), camera0.getTime());
      assertEquals(0.8498671F, camera0.getY(), 0.01F);
  }

  @Test
  public void test13()  throws Throwable  {
      Camera camera0 = new Camera(0.8498671F, 0.8498671F, 0.8498671F, 0.8498671F, 0.8498671F, 0.8498671F);
      assertNotNull(camera0);
      
      Camera.Lens camera_Lens0 = Camera.Lens.SPHERICAL;
      camera0.setLens(camera_Lens0);
      camera0.setLens(camera_Lens0);
      assertEquals(Camera.Lens.SPHERICAL, camera0.getLens());
      assertEquals(1372766400077L, camera0.getTime());
  }
}
