/*
 * This file was automatically generated by EvoSuite
 */

package visu.handball.moves.actions;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.awt.event.ActionEvent;
import org.junit.BeforeClass;
import visu.handball.moves.actions.NewPassEventAction;
import visu.handball.moves.model.HandballModel;
import visu.handball.moves.model.MoveEvent;
import visu.handball.moves.model.player.Offender;
import visu.handball.moves.model.player.Player;

@RunWith(EvoSuiteRunner.class)
public class NewPassEventActionEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      NewPassEventAction newPassEventAction0 = new NewPassEventAction(handballModel0);
      ActionEvent actionEvent0 = new ActionEvent((Object) "top", (-15), "top", (long) (-15), (-15));
      newPassEventAction0.actionPerformed(actionEvent0);
      assertEquals("top", actionEvent0.getActionCommand());
  }

  @Test
  public void test1()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      Offender offender0 = new Offender((-243), (-243));
      NewPassEventAction newPassEventAction0 = new NewPassEventAction(handballModel0);
      MoveEvent moveEvent0 = new MoveEvent((Player) offender0, (-243));
      handballModel0.addMoveEvent(moveEvent0);
      HandballModel.State handballModel_State0 = HandballModel.State.EDIT;
      handballModel0.setState(handballModel_State0);
      ActionEvent actionEvent0 = new ActionEvent((Object) "standard", (-243), "standard", (-243));
      newPassEventAction0.actionPerformed(actionEvent0);
      assertEquals(false, newPassEventAction0.isEnabled());
      assertEquals(-243, handballModel0.getHighestSequenceNumber());
  }

  @Test
  public void test2()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      NewPassEventAction newPassEventAction0 = new NewPassEventAction(handballModel0);
      HandballModel.State handballModel_State0 = HandballModel.State.EDIT;
      handballModel0.setState(handballModel_State0);
      assertEquals(HandballModel.State.EDIT, handballModel0.getState());
  }

  @Test
  public void test3()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      Offender offender0 = new Offender((-243), (-243));
      NewPassEventAction newPassEventAction0 = new NewPassEventAction(handballModel0);
      MoveEvent moveEvent0 = new MoveEvent((Player) offender0, (-243));
      handballModel0.addMoveEvent(moveEvent0);
      HandballModel.State handballModel_State0 = HandballModel.State.EDIT;
      handballModel0.setState(handballModel_State0);
      handballModel0.setBallOwnerSilent(offender0);
      newPassEventAction0.modelChanged();
      assertEquals(true, newPassEventAction0.isEnabled());
  }

  @Test
  public void test4()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      Offender offender0 = new Offender((-243), (-243));
      NewPassEventAction newPassEventAction0 = new NewPassEventAction(handballModel0);
      MoveEvent moveEvent0 = new MoveEvent((Player) offender0, (-243));
      handballModel0.addMoveEvent(moveEvent0);
      HandballModel.State handballModel_State0 = HandballModel.State.EDIT;
      handballModel0.setState(handballModel_State0);
      ActionEvent actionEvent0 = new ActionEvent((Object) "standard", (-243), "standard", (-243));
      handballModel0.setDestinationPointForEvent(moveEvent0, 1, 1, false);
      handballModel0.setBallOwnerSilent(offender0);
      newPassEventAction0.actionPerformed(actionEvent0);
      assertEquals(false, newPassEventAction0.isEnabled());
      assertEquals(true, handballModel0.passEventDefined());
  }
}
