/*
 * This file was automatically generated by EvoSuite
 */

package visu.handball.moves.model;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.List;
import org.junit.BeforeClass;
import visu.handball.moves.model.ColorModel;
import visu.handball.moves.model.HandballModel;
import visu.handball.moves.model.HandballModelListener;
import visu.handball.moves.model.MoveEvent;
import visu.handball.moves.model.PassEvent;
import visu.handball.moves.model.PlayerRemovedListener;
import visu.handball.moves.model.TableHandballModel;
import visu.handball.moves.model.player.Ball;
import visu.handball.moves.model.player.Defender;
import visu.handball.moves.model.player.HighlightableItem;
import visu.handball.moves.model.player.MovePoint;
import visu.handball.moves.model.player.Offender;
import visu.handball.moves.model.player.Player;
import visu.handball.moves.views.DefenderDrawer;
import visu.handball.moves.views.OffenderDrawer;

@RunWith(EvoSuiteRunner.class)
public class HandballModelEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      // Undeclared exception!
      try {
        handballModel0.setDelay(1515, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 1515, Size: 0
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      ColorModel colorModel0 = new ColorModel();
      OffenderDrawer offenderDrawer0 = new OffenderDrawer(handballModel0, colorModel0);
      assertNotNull(offenderDrawer0);
      
      boolean boolean0 = handballModel0.removePlayerRemovedListener((PlayerRemovedListener) offenderDrawer0);
      assertEquals(true, boolean0);
      assertEquals(true, handballModel0.isSaved());
  }

  @Test
  public void test2()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      handballModel0.initAnimation();
      assertEquals(true, handballModel0.isSaved());
  }

  @Test
  public void test3()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      Ball ball0 = handballModel0.getBall();
      assertNotNull(ball0);
      assertEquals(true, handballModel0.isSaved());
      assertEquals(-500, ball0.getCurrent_x());
      assertEquals(-500, ball0.getCurrent_y());
  }

  @Test
  public void test4()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      handballModel0.getHightligtedItem();
      assertEquals(true, handballModel0.isSaved());
  }

  @Test
  public void test5()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      TableHandballModel tableHandballModel0 = new TableHandballModel(handballModel0);
      assertNotNull(tableHandballModel0);
      
      boolean boolean0 = handballModel0.removeListener((HandballModelListener) tableHandballModel0);
      assertEquals(true, boolean0);
      assertEquals(true, handballModel0.isSaved());
  }

  @Test
  public void test6()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      Offender offender0 = new Offender(0, 60);
      MoveEvent moveEvent0 = new MoveEvent((Player) offender0, 0, 1);
      handballModel0.setDestinationPointForEvent(moveEvent0, 1, 0, false);
      handballModel0.setActualMoveEvent(moveEvent0);
      assertEquals("Laufweg zu Position (1,0)", moveEvent0.toString());
      
      handballModel0.stopAnimation();
      assertEquals(true, handballModel0.isSaved());
  }

  @Test
  public void test7()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      MovePoint movePoint0 = new MovePoint(1338, 1338);
      // Undeclared exception!
      try {
        handballModel0.setMovePointTo(movePoint0, 1338, 1338);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      handballModel0.moveBallTo(9133, 0);
      assertEquals(true, handballModel0.isSaved());
  }

  @Test
  public void test9()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      handballModel0.getMarkedPlayer();
      assertEquals(true, handballModel0.isSaved());
  }

  @Test
  public void test10()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      Defender defender0 = new Defender(1449, 1449);
      PassEvent passEvent0 = new PassEvent((Player) defender0, 1, 10);
      handballModel0.addMoveEvent((MoveEvent) passEvent0);
      // Undeclared exception!
      try {
        handballModel0.removePlayer((Player) defender0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      Offender offender0 = new Offender(0, 0);
      handballModel0.setFirstBallOwner(offender0);
      handballModel0.removePlayer((Player) offender0);
      assertEquals(0, offender0.counter);
      assertEquals(false, offender0.hasBall());
  }

  @Test
  public void test12()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      handballModel0.addOffender(0, 1990);
      Offender offender0 = new Offender((-2022), (-62));
      handballModel0.removePlayer((Player) offender0);
      assertEquals(1, offender0.counter);
      assertEquals(false, handballModel0.isSaved());
      assertEquals("Angreifer 2", offender0.toString());
  }

  @Test
  public void test13()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      assertEquals(true, handballModel0.isSaved());
      
      handballModel0.addDefender(9133, 0);
      handballModel0.computePlayerPositions(0);
      assertEquals(false, handballModel0.isSaved());
  }

  @Test
  public void test14()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      assertEquals(true, handballModel0.isSaved());
      
      handballModel0.addOffender(19, 19);
      handballModel0.removePlayer((Player) null);
      assertEquals(false, handballModel0.isSaved());
  }

  @Test
  public void test15()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      Offender offender0 = new Offender(0, 0);
      TableHandballModel tableHandballModel0 = new TableHandballModel(handballModel0);
      handballModel0.setBallOwner(offender0);
      assertEquals(true, handballModel0.isBallSet());
      assertEquals(true, offender0.hasBall());
  }

  @Test
  public void test16()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      ColorModel colorModel0 = new ColorModel();
      DefenderDrawer defenderDrawer0 = new DefenderDrawer(handballModel0, colorModel0);
      assertNotNull(defenderDrawer0);
      
      Offender offender0 = new Offender(0, 0);
      handballModel0.removePlayer((Player) offender0);
      assertEquals(0, offender0.counter);
  }

  @Test
  public void test17()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      ColorModel colorModel0 = new ColorModel();
      OffenderDrawer offenderDrawer0 = new OffenderDrawer(handballModel0, colorModel0);
      assertNotNull(offenderDrawer0);
      
      Defender defender0 = new Defender(1449, 1449);
      handballModel0.removePlayer((Player) defender0);
      assertEquals(0, defender0.counter);
  }

  @Test
  public void test18()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      HandballModel.State handballModel_State0 = HandballModel.State.EDIT;
      handballModel0.setState(handballModel_State0);
      Offender offender0 = new Offender((-1807), (-1));
      MoveEvent moveEvent0 = new MoveEvent((Player) offender0, (-1807));
      handballModel0.addMoveEvent(moveEvent0);
      handballModel0.setState(handballModel_State0);
      assertEquals(false, handballModel0.isSaved());
      assertEquals(-1807, handballModel0.getHighestSequenceNumber());
      assertEquals(HandballModel.State.EDIT, handballModel0.getState());
  }

  @Test
  public void test19()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      assertEquals(true, handballModel0.isSaved());
      
      handballModel0.addMoveEvent((MoveEvent) null);
      HandballModel.State handballModel_State0 = HandballModel.State.EDIT;
      // Undeclared exception!
      try {
        handballModel0.setState(handballModel_State0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test20()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      HandballModel.State handballModel_State0 = HandballModel.State.PLACE_DEFENDERS;
      handballModel0.setState(handballModel_State0);
      assertEquals(HandballModel.State.PLACE_DEFENDERS, handballModel0.getState());
  }

  @Test
  public void test21()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      Offender offender0 = new Offender(0, 60);
      MoveEvent moveEvent0 = new MoveEvent((Player) offender0, 0, 1);
      handballModel0.setDestinationPointForEvent(moveEvent0, 1, 0, false);
      handballModel0.setActualMoveEvent(moveEvent0);
      assertEquals(true, moveEvent0.isDestinationPointSet());
      
      handballModel0.startAnimation(false);
      assertEquals(HandballModel.State.ANIMATION_RUNNING, handballModel0.getState());
  }

  @Test
  public void test22()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      Defender defender0 = new Defender((-1701), 1037);
      PassEvent passEvent0 = new PassEvent((Player) defender0, 1, 1);
      handballModel0.addMoveEvent((MoveEvent) passEvent0);
      MoveEvent moveEvent0 = new MoveEvent((Player) defender0, 1);
      handballModel0.setActualMoveEvent(moveEvent0);
      moveEvent0.setSequenceNr(1037);
      handballModel0.stopAnimation();
      assertEquals(1037, handballModel0.getAcutalSequenceNr());
      assertEquals(HandballModel.State.EDIT_EVENT, handballModel0.getState());
  }

  @Test
  public void test23()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      Offender offender0 = new Offender((-1807), 13);
      MoveEvent moveEvent0 = new MoveEvent((Player) offender0, (-1807));
      handballModel0.addMoveEvent(moveEvent0);
      moveEvent0.setDestinationPoint(13, 2, true);
      handballModel0.computePlayerPositions((-1));
      assertEquals(-1807, handballModel0.getHighestSequenceNumber());
      assertEquals(false, handballModel0.isSaved());
  }

  @Test
  public void test24()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      Offender offender0 = new Offender((-1807), (-1));
      MoveEvent moveEvent0 = new MoveEvent((Player) offender0, (-1807));
      handballModel0.addMoveEvent(moveEvent0);
      moveEvent0.setDestinationPoint(1015, (-1), false);
      handballModel0.computePlayerPositions((-1));
      assertEquals(-1807, handballModel0.getHighestSequenceNumber());
      assertEquals(false, handballModel0.isSaved());
  }

  @Test
  public void test25()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      Defender defender0 = new Defender(1449, 1449);
      handballModel0.setHighLightedItem((HighlightableItem) defender0);
      handballModel0.setHighLightedItem((HighlightableItem) defender0);
      assertEquals(true, defender0.isHightlighted());
      assertEquals("Verteidiger 1", defender0.toString());
  }

  @Test
  public void test26()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      handballModel0.setHighLightedItem((HighlightableItem) null);
      assertEquals(true, handballModel0.isSaved());
  }

  @Test
  public void test27()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertEquals(true, handballModel0.isSaved());
      assertNotNull(handballModel0);
      
      handballModel0.addDefender(9133, 0);
      handballModel0.getNearestHighlightableItem(9133, (-680));
      assertEquals(false, handballModel0.isSaved());
  }

  @Test
  public void test28()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertEquals(true, handballModel0.isSaved());
      assertNotNull(handballModel0);
      
      handballModel0.addOffender(0, 1990);
      Offender offender0 = handballModel0.getNearestOffender(4, 1995);
      assertEquals(false, handballModel0.isSaved());
      assertEquals(1990, offender0.getCurrent_y());
  }

  @Test
  public void test29()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      Offender offender0 = new Offender(0, 60);
      MoveEvent moveEvent0 = new MoveEvent((Player) offender0, 0, 1);
      handballModel0.setDestinationPointForEvent(moveEvent0, 1, 0, false);
      handballModel0.setActualMoveEvent(moveEvent0);
      handballModel0.getNearestHighlightableItem(0, 1);
      assertEquals(HandballModel.State.EDIT, handballModel0.getState());
      assertEquals(true, handballModel0.isSaved());
  }

  @Test
  public void test30()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      Defender defender0 = new Defender((-1701), 8657);
      PassEvent passEvent0 = new PassEvent((Player) defender0, (-1701), (-1701));
      handballModel0.setActualMoveEvent((MoveEvent) passEvent0);
      handballModel0.setDestinationPointForEvent((MoveEvent) passEvent0, (-1332), (-1013), false);
      handballModel0.getNearestHighlightableItem((-1898), 8657);
      assertEquals(-1701, handballModel0.getAcutalSequenceNr());
      assertEquals(true, handballModel0.isSaved());
  }

  @Test
  public void test31()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      Defender defender0 = new Defender((-1701), 8657);
      PassEvent passEvent0 = new PassEvent((Player) defender0, (-1701), (-1701));
      handballModel0.setActualMoveEvent((MoveEvent) passEvent0);
      handballModel0.setControlPointForEvent((MoveEvent) passEvent0, (-1013), (-1113), false);
      handballModel0.getNearestHighlightableItem((-1898), 8657);
      assertEquals(-1701, handballModel0.getAcutalSequenceNr());
      assertEquals(HandballModel.State.EDIT_EVENT, handballModel0.getState());
  }

  @Test
  public void test32()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      Offender offender0 = new Offender(73, 73);
      PassEvent passEvent0 = new PassEvent((Player) offender0, 73, 0);
      handballModel0.addMoveEvent((MoveEvent) passEvent0);
      handballModel0.startAnimation(false);
      handballModel0.movePlayerTo((Player) offender0, 73, 0);
      assertEquals(true, offender0.isMarked());
      assertEquals(73, handballModel0.getAcutalSequenceNr());
  }

  @Test
  public void test33()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      Offender offender0 = new Offender(216, 216);
      handballModel0.movePlayerTo((Player) offender0, (-243), (-243));
      assertEquals(-243, offender0.getStart_x());
      assertEquals(true, handballModel0.isSaved());
  }

  @Test
  public void test34()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      assertEquals(true, handballModel0.isSaved());
      
      handballModel0.setMoveName((String) null);
      HandballModel handballModel1 = new HandballModel();
      handballModel1.initWithLoadedModel(handballModel0);
      assertEquals(false, handballModel0.isSaved());
      
      boolean boolean0 = handballModel1.isSaved();
      assertEquals(true, boolean0);
  }

  @Test
  public void test35()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertEquals(true, handballModel0.isSaved());
      assertNotNull(handballModel0);
      
      handballModel0.setMoveName((String) null);
      boolean boolean0 = handballModel0.isSaved();
      assertEquals(false, handballModel0.isSaved());
      assertEquals(false, boolean0);
  }

  @Test
  public void test36()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertEquals(true, handballModel0.isSaved());
      assertNotNull(handballModel0);
      
      handballModel0.setMoveName("?uSFG;y~<9g]rx2O");
      boolean boolean0 = handballModel0.isSaved();
      assertEquals(false, boolean0);
  }

  @Test
  public void test37()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      assertEquals(true, handballModel0.isSaved());
      
      handballModel0.addOffender(1, 1);
      boolean boolean0 = handballModel0.isSaved();
      assertEquals(false, handballModel0.isSaved());
      assertEquals(false, boolean0);
  }

  @Test
  public void test38()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertEquals(true, handballModel0.isSaved());
      assertNotNull(handballModel0);
      
      handballModel0.addDefender(9133, 0);
      boolean boolean0 = handballModel0.isSaved();
      assertEquals(false, handballModel0.isSaved());
      assertEquals(false, boolean0);
  }

  @Test
  public void test39()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      Defender defender0 = new Defender(1, 1);
      PassEvent passEvent0 = new PassEvent((Player) defender0, 1, 1);
      handballModel0.addMoveEvent((MoveEvent) passEvent0);
      boolean boolean0 = handballModel0.isSaved();
      assertEquals(false, handballModel0.isSaved());
      assertEquals(1, handballModel0.getHighestSequenceNumber());
      assertEquals(false, boolean0);
  }

  @Test
  public void test40()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      Offender offender0 = new Offender(0, 0);
      handballModel0.setFirstBallOwner(offender0);
      boolean boolean0 = handballModel0.isSaved();
      assertEquals(true, handballModel0.isBallSet());
      assertEquals(false, boolean0);
  }

  @Test
  public void test41()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      handballModel0.setComment((String) null);
      boolean boolean0 = handballModel0.isSaved();
      assertEquals(true, boolean0);
  }

  @Test
  public void test42()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      handballModel0.setComment("[eTI=");
      boolean boolean0 = handballModel0.isSaved();
      assertEquals(false, boolean0);
      assertEquals("[eTI=", handballModel0.getComment());
  }

  @Test
  public void test43()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      HandballModel handballModel1 = new HandballModel();
      handballModel0.setComment("[eTI=");
      handballModel1.markAsSaved(handballModel0);
      assertEquals("[eTI=", handballModel0.getComment());
      
      boolean boolean0 = handballModel1.isSaved();
      assertEquals(false, boolean0);
  }

  @Test
  public void test44()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      handballModel0.setComment("vBf4vW( $EBG.])Y");
      HandballModel handballModel1 = new HandballModel();
      handballModel1.initWithLoadedModel(handballModel0);
      boolean boolean0 = handballModel1.isSaved();
      assertEquals("vBf4vW( $EBG.])Y", handballModel1.getComment());
      assertEquals(true, boolean0);
  }

  @Test
  public void test45()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      assertEquals(true, handballModel0.isSaved());
      
      handballModel0.addOffender(0, (-1673));
      HandballModel handballModel1 = new HandballModel();
      handballModel1.initWithLoadedModel(handballModel0);
      assertEquals(false, handballModel0.isSaved());
      
      boolean boolean0 = handballModel1.isSaved();
      assertEquals(true, boolean0);
  }

  @Test
  public void test46()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      Offender offender0 = new Offender((-2022), 0);
      handballModel0.setFirstBallOwner(offender0);
      handballModel0.setBallOwnerSilent(offender0);
      assertEquals(true, offender0.hasBall());
  }

  @Test
  public void test47()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      handballModel0.setBallOwnerSilent((Offender) null);
      assertEquals(true, handballModel0.isSaved());
  }

  @Test
  public void test48()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      // Undeclared exception!
      try {
        handballModel0.pauseAnimation(false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test49()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      // Undeclared exception!
      try {
        handballModel0.pauseAnimation(true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test50()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      Defender defender0 = new Defender((-1488), (-1488));
      MoveEvent moveEvent0 = new MoveEvent((Player) defender0, (-1488));
      handballModel0.setActualMoveEvent(moveEvent0);
      handballModel0.startAnimation(true);
      // Undeclared exception!
      try {
        handballModel0.nextAnimationStep();
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 0, Size: 0
         */
      }
  }

  @Test
  public void test51()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      Defender defender0 = new Defender((-1175), (-1175));
      MoveEvent moveEvent0 = new MoveEvent((Player) defender0, (-1175));
      handballModel0.setActualMoveEvent(moveEvent0);
      handballModel0.startAnimation(true);
      assertEquals(-1175, handballModel0.getAcutalSequenceNr());
      
      handballModel0.initWithLoadedModel(handballModel0);
      // Undeclared exception!
      try {
        handballModel0.nextAnimationStep();
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 0, Size: 0
         */
      }
  }

  @Test
  public void test52()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      Offender offender0 = new Offender(0, 60);
      MoveEvent moveEvent0 = new MoveEvent((Player) offender0, 0, 1);
      handballModel0.setActualMoveEvent(moveEvent0);
      assertEquals(true, moveEvent0.isMarked());
      
      boolean boolean0 = handballModel0.isMarkedPlayerAddable();
      assertEquals(true, boolean0);
  }

  @Test
  public void test53()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      Offender offender0 = new Offender(73, 73);
      PassEvent passEvent0 = new PassEvent((Player) offender0, 73, 0);
      handballModel0.addMoveEvent((MoveEvent) passEvent0);
      boolean boolean0 = handballModel0.passEventDefined();
      assertEquals(73, handballModel0.getHighestSequenceNumber());
      assertEquals(false, handballModel0.isSaved());
      assertEquals(false, boolean0);
  }

  @Test
  public void test54()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      Offender offender0 = new Offender(73, 73);
      PassEvent passEvent0 = new PassEvent((Player) offender0, 73, 0);
      handballModel0.addMoveEvent((MoveEvent) passEvent0);
      handballModel0.startAnimation(false);
      boolean boolean0 = handballModel0.passEventDefined();
      assertEquals(73, handballModel0.getAcutalSequenceNr());
      assertEquals(true, boolean0);
  }

  @Test
  public void test55()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      Offender offender0 = new Offender((-1807), (-1));
      MoveEvent moveEvent0 = new MoveEvent((Player) offender0, (-1807));
      handballModel0.addMoveEvent(moveEvent0);
      boolean boolean0 = handballModel0.passEventDefined((-1807));
      assertEquals(-1807, handballModel0.getHighestSequenceNumber());
      assertEquals(false, handballModel0.isSaved());
      assertEquals(false, boolean0);
  }

  @Test
  public void test56()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      Defender defender0 = new Defender((-1701), 1037);
      PassEvent passEvent0 = new PassEvent((Player) defender0, 1, 1);
      handballModel0.addMoveEvent((MoveEvent) passEvent0);
      boolean boolean0 = handballModel0.passEventDefinedAfter(0);
      assertEquals(1, handballModel0.getHighestSequenceNumber());
      assertEquals(false, handballModel0.isSaved());
      assertEquals(true, boolean0);
  }

  @Test
  public void test57()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      assertEquals(true, handballModel0.isSaved());
      
      handballModel0.addMoveEvent((MoveEvent) null);
      boolean boolean0 = handballModel0.passEventDefinedAfter(0);
      assertEquals(false, handballModel0.isSaved());
      assertEquals(false, boolean0);
  }

  @Test
  public void test58()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      Offender offender0 = new Offender(0, 0);
      PassEvent passEvent0 = new PassEvent((Player) offender0, 0, 0);
      handballModel0.addMoveEvent((MoveEvent) passEvent0);
      boolean boolean0 = handballModel0.passEventDefinedAfter(0);
      assertEquals(true, handballModel0.passEventDefined());
      assertEquals(false, handballModel0.isSaved());
      assertEquals(false, boolean0);
  }

  @Test
  public void test59()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      Offender offender0 = new Offender((-1807), (-1));
      MoveEvent moveEvent0 = new MoveEvent((Player) offender0, 1);
      handballModel0.addMoveEvent(moveEvent0);
      boolean boolean0 = handballModel0.eventDefinedAfter((-1330));
      assertEquals(1, handballModel0.getHighestSequenceNumber());
      assertEquals(false, handballModel0.isSaved());
      assertEquals(true, boolean0);
  }

  @Test
  public void test60()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      Offender offender0 = new Offender((-1807), (-1));
      MoveEvent moveEvent0 = new MoveEvent((Player) offender0, (-1807));
      handballModel0.addMoveEvent(moveEvent0);
      boolean boolean0 = handballModel0.eventDefinedAfter((-1330));
      assertEquals(-1807, handballModel0.getHighestSequenceNumber());
      assertEquals(false, handballModel0.isSaved());
      assertEquals(false, boolean0);
  }

  @Test
  public void test61()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      Offender offender0 = new Offender(0, 0);
      PassEvent passEvent0 = new PassEvent((Player) offender0, 0, 0);
      handballModel0.addMoveEvent((MoveEvent) passEvent0);
      boolean boolean0 = handballModel0.hasPlayerBallInNextSequence((Player) null);
      assertEquals(false, handballModel0.isSaved());
      assertEquals(true, handballModel0.passEventDefined());
      assertEquals(false, boolean0);
  }

  @Test
  public void test62()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      HandballModel.State handballModel_State0 = HandballModel.State.EDIT;
      handballModel0.setState(handballModel_State0);
      Offender offender0 = new Offender((-1807), (-1807));
      MoveEvent moveEvent0 = new MoveEvent((Player) offender0, (-1807));
      handballModel0.addMoveEvent(moveEvent0);
      boolean boolean0 = handballModel0.hasPlayerBallInNextSequence((Player) offender0);
      assertEquals(-1807, handballModel0.getHighestSequenceNumber());
      assertEquals(false, handballModel0.isSaved());
      assertEquals(false, boolean0);
  }

  @Test
  public void test63()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      Offender offender0 = new Offender((-1807), (-1));
      MoveEvent moveEvent0 = new MoveEvent((Player) offender0, 1);
      handballModel0.addMoveEvent(moveEvent0);
      boolean boolean0 = handballModel0.hasPlayerBallInNextSequence((Player) offender0);
      assertEquals(1, handballModel0.getHighestSequenceNumber());
      assertEquals(false, handballModel0.isSaved());
      assertEquals(false, boolean0);
  }

  @Test
  public void test64()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      boolean boolean0 = handballModel0.isBallSet();
      assertEquals(true, handballModel0.isSaved());
      assertEquals(false, boolean0);
  }

  @Test
  public void test65()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      Offender offender0 = new Offender(216, 216);
      handballModel0.setBallOwnerSilent(offender0);
      boolean boolean0 = handballModel0.isBallSet();
      assertEquals(true, handballModel0.isBallSet());
      assertEquals(true, boolean0);
  }

  @Test
  public void test66()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      Defender defender0 = new Defender((-1701), (-1701));
      PassEvent passEvent0 = new PassEvent((Player) defender0, 1, 1);
      handballModel0.addMoveEvent((MoveEvent) passEvent0);
      boolean boolean0 = handballModel0.isGoalPassSet();
      assertEquals(1, handballModel0.getHighestSequenceNumber());
      assertEquals(false, handballModel0.isSaved());
      assertEquals(false, boolean0);
  }

  @Test
  public void test67()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      assertEquals(true, handballModel0.isSaved());
      
      handballModel0.addMoveEvent((MoveEvent) null);
      boolean boolean0 = handballModel0.isGoalPassSet();
      assertEquals(false, handballModel0.isSaved());
      assertEquals(false, boolean0);
  }

  @Test
  public void test68()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      Offender offender0 = new Offender(0, 0);
      PassEvent passEvent0 = new PassEvent((Player) offender0, 0, 0);
      handballModel0.addMoveEvent((MoveEvent) passEvent0);
      List<MoveEvent> list0 = handballModel0.getActualMoveEvents();
      assertEquals(false, handballModel0.isSaved());
      assertEquals(true, handballModel0.passEventDefined());
      assertEquals(1, list0.size());
  }

  @Test
  public void test69()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      Offender offender0 = new Offender((-1807), (-1));
      MoveEvent moveEvent0 = new MoveEvent((Player) offender0, 1);
      handballModel0.addMoveEvent(moveEvent0);
      List<MoveEvent> list0 = handballModel0.getMoveEvents((-1807));
      assertEquals(false, handballModel0.isSaved());
      assertEquals(1, handballModel0.getHighestSequenceNumber());
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test70()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      Offender offender0 = new Offender((-1807), (-1));
      MoveEvent moveEvent0 = new MoveEvent((Player) offender0, 1);
      handballModel0.addMoveEvent(moveEvent0);
      moveEvent0.setSequenceNr((-1063));
      List<MoveEvent> list0 = handballModel0.getMoveEvents((-1807));
      assertEquals(-1063, handballModel0.getHighestSequenceNumber());
      assertEquals(false, handballModel0.isSaved());
      assertEquals(0, list0.size());
  }

  @Test
  public void test71()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      HandballModel.State handballModel_State0 = HandballModel.State.EDIT;
      handballModel0.setState(handballModel_State0);
      Offender offender0 = new Offender((-1807), (-1807));
      MoveEvent moveEvent0 = new MoveEvent((Player) offender0, (-1807));
      handballModel0.addMoveEvent(moveEvent0);
      assertEquals(-1807, handballModel0.getAcutalSequenceNr());
      
      handballModel0.removeEventsAfter();
      assertEquals(HandballModel.State.EDIT_EVENT, handballModel0.getState());
  }

  @Test
  public void test72()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      Defender defender0 = new Defender(1449, 1449);
      MoveEvent moveEvent0 = new MoveEvent((Player) defender0, 1, 1);
      handballModel0.addMoveEvent(moveEvent0);
      handballModel0.removePlayer((Player) defender0);
      assertEquals(0, defender0.counter);
  }

  @Test
  public void test73()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      Offender offender0 = new Offender((-1807), (-1));
      MoveEvent moveEvent0 = new MoveEvent((Player) offender0, 1);
      handballModel0.addMoveEvent(moveEvent0);
      handballModel0.removePlayer((Player) null);
      assertEquals(1, handballModel0.getHighestSequenceNumber());
      assertEquals(false, handballModel0.isSaved());
      assertEquals(HandballModel.State.PLACE_OFFENDERS, handballModel0.getState());
  }

  @Test
  public void test74()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      Offender offender0 = new Offender((-1807), (-1));
      MoveEvent moveEvent0 = new MoveEvent((Player) offender0, 1);
      handballModel0.addMoveEvent(moveEvent0);
      int int0 = handballModel0.getHighestSequenceNumber();
      assertEquals(1, handballModel0.getHighestSequenceNumber());
      assertEquals(false, handballModel0.isSaved());
      assertEquals(1, int0);
  }

  @Test
  public void test75()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      assertNotNull(handballModel0);
      
      handballModel0.setComment((String) null);
      String string0 = handballModel0.getComment();
      assertNotNull(string0);
      assertEquals(true, handballModel0.isSaved());
  }
}
