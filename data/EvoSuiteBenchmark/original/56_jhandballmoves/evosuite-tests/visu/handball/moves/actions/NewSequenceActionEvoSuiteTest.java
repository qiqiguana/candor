/*
 * This file was automatically generated by EvoSuite
 */

package visu.handball.moves.actions;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.awt.event.ActionEvent;
import org.junit.BeforeClass;
import visu.handball.moves.actions.NewSequenceAction;
import visu.handball.moves.model.HandballModel;
import visu.handball.moves.model.MoveEvent;
import visu.handball.moves.model.player.Offender;
import visu.handball.moves.model.player.Player;

@RunWith(EvoSuiteRunner.class)
public class NewSequenceActionEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      NewSequenceAction newSequenceAction0 = new NewSequenceAction(handballModel0);
      newSequenceAction0.actionPerformed((ActionEvent) null);
      assertEquals(true, newSequenceAction0.isEnabled());
  }

  @Test
  public void test1()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      Offender offender0 = new Offender((-198), (-198));
      MoveEvent moveEvent0 = new MoveEvent((Player) offender0, 1, (-198));
      handballModel0.setActualMoveEvent(moveEvent0);
      NewSequenceAction newSequenceAction0 = new NewSequenceAction(handballModel0);
      ActionEvent actionEvent0 = new ActionEvent((Object) "disabledSelectedIcon", (-198), "disabledSelectedIcon", (long) (-198), 1);
      newSequenceAction0.actionPerformed(actionEvent0);
      HandballModel.State handballModel_State0 = HandballModel.State.EDIT;
      handballModel0.setState(handballModel_State0);
      assertEquals(false, handballModel0.isSaved());
      assertEquals(true, handballModel0.isMarkedPlayerAddable());
  }

  @Test
  public void test2()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      NewSequenceAction newSequenceAction0 = new NewSequenceAction(handballModel0);
      HandballModel.State handballModel_State0 = HandballModel.State.EDIT;
      handballModel0.setState(handballModel_State0);
      assertEquals(HandballModel.State.EDIT, handballModel0.getState());
  }

  @Test
  public void test3()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      Offender offender0 = new Offender((-198), (-198));
      MoveEvent moveEvent0 = new MoveEvent((Player) offender0, 1, (-198));
      handballModel0.setActualMoveEvent(moveEvent0);
      NewSequenceAction newSequenceAction0 = new NewSequenceAction(handballModel0);
      HandballModel.State handballModel_State0 = HandballModel.State.EDIT;
      handballModel0.setState(handballModel_State0);
      assertEquals(HandballModel.State.EDIT, handballModel0.getState());
  }
}
