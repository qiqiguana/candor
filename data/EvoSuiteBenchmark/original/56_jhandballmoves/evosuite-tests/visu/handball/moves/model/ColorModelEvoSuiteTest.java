/*
 * This file was automatically generated by EvoSuite
 */

package visu.handball.moves.model;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.LayoutManager;
import java.util.Properties;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.plaf.ColorUIResource;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import visu.handball.moves.model.ColorModel;
import visu.handball.moves.model.HandballModel;
import visu.handball.moves.views.Field;

@RunWith(EvoSuiteRunner.class)
public class ColorModelEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      ColorModel colorModel0 = new ColorModel();
      assertNotNull(colorModel0);
      
      Color color0 = colorModel0.getHightlightColor();
      assertNotNull(color0);
      
      colorModel0.setFieldColor(color0);
      assertEquals(-256, color0.getRGB());
      assertEquals(255, color0.getRed());
  }

  @Test
  public void test1()  throws Throwable  {
      ColorModel colorModel0 = new ColorModel();
      assertNotNull(colorModel0);
      
      Color color0 = colorModel0.getHightlightColor();
      assertNotNull(color0);
      
      colorModel0.setMoveColor(color0);
      assertEquals(255, color0.getGreen());
      assertEquals("java.awt.Color[r=255,g=255,b=0]", color0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      ColorModel colorModel0 = new ColorModel();
      assertNotNull(colorModel0);
      
      Color color0 = colorModel0.getPassColor();
      assertNotNull(color0);
      
      colorModel0.setHightlightColor(color0);
      assertEquals(192, color0.getGreen());
      assertEquals(192, color0.getRed());
  }

  @Test
  public void test3()  throws Throwable  {
      ColorModel colorModel0 = new ColorModel();
      assertNotNull(colorModel0);
      
      Color color0 = colorModel0.getHightlightColor();
      assertNotNull(color0);
      
      colorModel0.setFillBallColor(color0);
      assertEquals(-256, color0.getRGB());
      assertEquals("java.awt.Color[r=255,g=255,b=0]", color0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      ColorModel colorModel0 = new ColorModel();
      assertNotNull(colorModel0);
      
      Properties properties0 = colorModel0.getProperties();
      assertNotNull(properties0);
      assertEquals("{eventDrawer.pass=-4144960, playerDrawer.selected=-16711681, playerDrawer.attackers=-16711936, eventPointDrawer.fill=-65281, ballDrawer.fill=-16777216, eventDrawer.move=-16777216, eventPointDrawer.outline=-16777216, playerDrawer.defenders=-65536, ballDrawer.outline=-1, fieldDrawer.field=-16776961, fieldDrawer.line=-1, drawer.highlight=-256}", properties0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      ColorModel colorModel0 = new ColorModel();
      assertNotNull(colorModel0);
      
      Color color0 = colorModel0.getPassColor();
      assertNotNull(color0);
      
      colorModel0.setSelectedPlayerColor(color0);
      assertEquals(192, color0.getGreen());
      assertEquals(192, color0.getRed());
  }

  @Test
  public void test6()  throws Throwable  {
      ColorModel colorModel0 = new ColorModel();
      // Undeclared exception!
      try {
        colorModel0.setProperties((Properties) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      ColorModel colorModel0 = new ColorModel();
      JPasswordField jPasswordField0 = new JPasswordField("-%c");
      Color color0 = jPasswordField0.getForeground();
      colorModel0.setEventPointOutlineColor(color0);
      assertEquals(255, color0.getAlpha());
  }

  @Test
  public void test8()  throws Throwable  {
      ColorModel colorModel0 = new ColorModel();
      BorderLayout borderLayout0 = new BorderLayout((-1715), (-1715));
      JPanel jPanel0 = new JPanel((LayoutManager) borderLayout0);
      ColorUIResource colorUIResource0 = (ColorUIResource)jPanel0.getBackground();
      colorModel0.setLineColor((Color) colorUIResource0);
      assertEquals(238, colorUIResource0.getBlue());
  }

  @Test
  public void test9()  throws Throwable  {
      ColorModel colorModel0 = new ColorModel();
      assertNotNull(colorModel0);
      
      Color color0 = colorModel0.getHightlightColor();
      assertNotNull(color0);
      
      colorModel0.setPassColor(color0);
      assertEquals(-256, color0.getRGB());
      assertEquals(255, color0.getRed());
  }

  @Test
  public void test10()  throws Throwable  {
      ColorModel colorModel0 = new ColorModel();
      colorModel0.resetColors();
  }

  @Test
  public void test11()  throws Throwable  {
      ColorModel colorModel0 = new ColorModel();
      colorModel0.setAttackersColor((Color) null);
  }

  @Test
  public void test12()  throws Throwable  {
      ColorModel colorModel0 = new ColorModel();
      assertNotNull(colorModel0);
      
      Color color0 = colorModel0.getPassColor();
      assertNotNull(color0);
      
      colorModel0.setEventPointFillColor(color0);
      assertEquals(192, color0.getBlue());
      assertEquals(192, color0.getRed());
  }

  @Test
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          ColorModel colorModel0 = new ColorModel();
          colorModel0.saveProperties();
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test14()  throws Throwable  {
      ColorModel colorModel0 = new ColorModel();
      JPasswordField jPasswordField0 = new JPasswordField("-%c");
      Color color0 = jPasswordField0.getForeground();
      colorModel0.setDefendersColor(color0);
      assertEquals(51, color0.getGreen());
  }

  @Test
  public void test15()  throws Throwable  {
      ColorModel colorModel0 = new ColorModel();
      assertNotNull(colorModel0);
      
      Color color0 = colorModel0.getPassColor();
      assertNotNull(color0);
      
      HandballModel handballModel0 = new HandballModel();
      Field field0 = new Field(handballModel0, colorModel0);
      assertNotNull(field0);
      
      colorModel0.setOutlineBallColor(color0);
      assertEquals(192, color0.getRed());
      assertEquals(192, color0.getGreen());
  }
}
