/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ConfigurationEditorGUI.java
 *
 * Created on 2010-09-27, 05:50:23
 */
package org.javathena.conf;

import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;

import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;

/**
 * 
 * @author Francois
 */
public class ConfigurationEditorGUI extends javax.swing.JFrame
{

	/**
	 * 
	 */
	private static final long serialVersionUID = -4302061665296418519L;
	private File fLoginLog;
	private File fAccountFilename;

	
	// Variables declaration - do not modify
	private javax.swing.JButton bAccountFilename;
	private javax.swing.JButton bLoginLogFilename;
	private javax.swing.JComboBox cbAccountEngine;
	private javax.swing.JCheckBox chbAutoregistration;
	private javax.swing.JCheckBox chbCheckClientVersion;
	private javax.swing.JCheckBox chbConsole;
	private javax.swing.JCheckBox chbDynamicPassFailureBan;
	private javax.swing.JCheckBox chbEnableAdmin;
	private javax.swing.JCheckBox chbIPBan;
	private javax.swing.JCheckBox chbLogLlogin;
	private javax.swing.JCheckBox chbStdoutWithAnsiSequence;
	private javax.swing.JCheckBox chbUseDnsbl;
	private javax.swing.JCheckBox chbUseMD5Passwords;
	private javax.swing.JMenuBar jMenuBar1;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JLabel lAccountEngine;
	private javax.swing.JLabel lAccountFilename;
	private javax.swing.JLabel lAdminAllowedHost1;
	private javax.swing.JLabel lAdminPassword;
	private javax.swing.JLabel lAllowedRegs;
	private javax.swing.JLabel lClientVersion;
	private javax.swing.JLabel lDNSBLServers;
	private javax.swing.JLabel lDateFormat;
	private javax.swing.JLabel lDynamicBanDuration;
	private javax.swing.JLabel lDynamicBanInterval;
	private javax.swing.JLabel lDynamicBanLimit;
	private javax.swing.JLabel lIpBanCleanupInterval;
	private javax.swing.JLabel lIpSyncInterval;
	private javax.swing.JLabel lLoginLogFilename;
	private javax.swing.JLabel lMinLevelToConnect;
	private javax.swing.JLabel lServerAdresse;
	private javax.swing.JLabel lServerPort;
	private javax.swing.JLabel lStartTimitedTime;
	private javax.swing.JLabel lTimeAllowed;
	private javax.swing.JLabel lTimestampFormat;
	private javax.swing.JMenu mFile;
	private javax.swing.JMenuItem miLoad;
	private javax.swing.JMenuItem miQuit;
	private javax.swing.JMenuItem miSave;
	private javax.swing.JPanel pContainer;
	private javax.swing.JTextField tAccountFilename;
	private javax.swing.JTextField tAdminPassword;
	private javax.swing.JTextField tAllowedRegs;
	private javax.swing.JTextField tAutoregistration;
	private javax.swing.JTextField tClientVersion;
	private javax.swing.JTextField tDNSBLServers;
	private javax.swing.JTextField tDateFormat;
	private javax.swing.JTextField tDynamicBanDuration;
	private javax.swing.JTextField tDynamicBanInterval;
	private javax.swing.JTextField tDynamicBanLimit;
	private javax.swing.JTextField tIpBanCleanupInterval;
	private javax.swing.JTextField tIpSyncInterval;
	private javax.swing.JTextField tLoginLogFilename;
	private javax.swing.JTextField tMinLevelToConnect;
	private javax.swing.JTextField tServerAdresse;
	private javax.swing.JTextField tServerPort;
	private javax.swing.JTextField tStartTimitedTime;
	private javax.swing.JTextField tTimeAllowed;
	private javax.swing.JTextField tTimestampFormat;
	private javax.swing.JTextField tlAdminAllowedHost1;

	// End of variables declaration
	/** Creates new form ConfigurationEditorGUI */
	public ConfigurationEditorGUI()
	{
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        pContainer = new javax.swing.JPanel();
        chbStdoutWithAnsiSequence = new javax.swing.JCheckBox();
        lServerAdresse = new javax.swing.JLabel();
        tServerAdresse = new javax.swing.JTextField();
        lServerPort = new javax.swing.JLabel();
        tServerPort = new javax.swing.JTextField();
        lIpBanCleanupInterval = new javax.swing.JLabel();
        tIpBanCleanupInterval = new javax.swing.JTextField();
        lIpSyncInterval = new javax.swing.JLabel();
        tIpSyncInterval = new javax.swing.JTextField();
        lDynamicBanInterval = new javax.swing.JLabel();
        tDynamicBanInterval = new javax.swing.JTextField();
        lDynamicBanLimit = new javax.swing.JLabel();
        tDynamicBanLimit = new javax.swing.JTextField();
        lDynamicBanDuration = new javax.swing.JLabel();
        tDynamicBanDuration = new javax.swing.JTextField();
        lAccountEngine = new javax.swing.JLabel();
        cbAccountEngine = new javax.swing.JComboBox();
        lTimestampFormat = new javax.swing.JLabel();
        tTimestampFormat = new javax.swing.JTextField();
        lDateFormat = new javax.swing.JLabel();
        tDateFormat = new javax.swing.JTextField();
        lAccountFilename = new javax.swing.JLabel();
        tAccountFilename = new javax.swing.JTextField();
        lLoginLogFilename = new javax.swing.JLabel();
        bAccountFilename = new javax.swing.JButton();
        tLoginLogFilename = new javax.swing.JTextField();
        bLoginLogFilename = new javax.swing.JButton();
        chbDynamicPassFailureBan = new javax.swing.JCheckBox();
        chbIPBan = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        chbEnableAdmin = new javax.swing.JCheckBox();
        lAdminPassword = new javax.swing.JLabel();
        tAdminPassword = new javax.swing.JTextField();
        lAdminAllowedHost1 = new javax.swing.JLabel();
        tlAdminAllowedHost1 = new javax.swing.JTextField();
        chbConsole = new javax.swing.JCheckBox();
        lDNSBLServers = new javax.swing.JLabel();
        tDNSBLServers = new javax.swing.JTextField();
        chbAutoregistration = new javax.swing.JCheckBox();
        tAutoregistration = new javax.swing.JTextField();
        chbLogLlogin = new javax.swing.JCheckBox();
        lAllowedRegs = new javax.swing.JLabel();
        tAllowedRegs = new javax.swing.JTextField();
        lTimeAllowed = new javax.swing.JLabel();
        tTimeAllowed = new javax.swing.JTextField();
        lMinLevelToConnect = new javax.swing.JLabel();
        tMinLevelToConnect = new javax.swing.JTextField();
        lStartTimitedTime = new javax.swing.JLabel();
        tStartTimitedTime = new javax.swing.JTextField();
        chbCheckClientVersion = new javax.swing.JCheckBox();
        lClientVersion = new javax.swing.JLabel();
        tClientVersion = new javax.swing.JTextField();
        chbUseDnsbl = new javax.swing.JCheckBox();
        chbUseMD5Passwords = new javax.swing.JCheckBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        mFile = new javax.swing.JMenu();
        miLoad = new javax.swing.JMenuItem();
        miSave = new javax.swing.JMenuItem();
        miQuit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        chbStdoutWithAnsiSequence.setText("Stdout with ansi sequence");

        lServerAdresse.setText("Server adresse(ip)");

        tServerAdresse.setText("jTextField1");

        lServerPort.setText("Server port");

        tServerPort.setText("jTextField1");

        lIpBanCleanupInterval.setText("Ip ban cleanup(in seconde)");

        tIpBanCleanupInterval.setText("jTextField1");

        lIpSyncInterval.setText("Ip sync interval");

        tIpSyncInterval.setText("jTextField1");

        lDynamicBanInterval.setText("Dynamic ban interval");

        tDynamicBanInterval.setText("jTextField1");

        lDynamicBanLimit.setText("Dynamic ban limit");

        tDynamicBanLimit.setText("jTextField1");

        lDynamicBanDuration.setText("Dynamic ban duration");

        tDynamicBanDuration.setText("jTextField1");

        lAccountEngine.setText("Account engine");

        cbAccountEngine.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Auto", "TXT", "SQL" }));

        lTimestampFormat.setText("Timestamp format");

        tTimestampFormat.setText("jTextField1");

        lDateFormat.setText("Date format");

        tDateFormat.setText("jTextField1");

        lAccountFilename.setText("Account filename");

        tAccountFilename.setText("jTextField1");

        lLoginLogFilename.setText("Login log filename");

        bAccountFilename.setText("Broswer");
		bAccountFilename.addMouseListener(new java.awt.event.MouseAdapter()
		{
			public void mouseClicked(java.awt.event.MouseEvent evt)
			{
				bAccountFilenameMouseClicked(evt);
			}
		});

        tLoginLogFilename.setText("jTextField1");

        bLoginLogFilename.setText("Broswer");
		bLoginLogFilename.addMouseListener(new java.awt.event.MouseAdapter()
		{
			public void mouseClicked(java.awt.event.MouseEvent evt)
			{
				bLoginLogFilenameMouseClicked(evt);
			}
		});

        chbDynamicPassFailureBan.setText("Dynamic pas failure ban");

        chbIPBan.setText("IP Ban");

        javax.swing.GroupLayout pContainerLayout = new javax.swing.GroupLayout(pContainer);
        pContainer.setLayout(pContainerLayout);
        pContainerLayout.setHorizontalGroup(
            pContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chbIPBan)
                    .addComponent(chbDynamicPassFailureBan)
                    .addComponent(lDynamicBanDuration)
                    .addComponent(chbStdoutWithAnsiSequence)
                    .addGroup(pContainerLayout.createSequentialGroup()
                        .addGroup(pContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pContainerLayout.createSequentialGroup()
                                .addGroup(pContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lServerAdresse)
                                    .addComponent(lServerPort)
                                    .addComponent(lIpBanCleanupInterval)
                                    .addComponent(lIpSyncInterval)
                                    .addComponent(lAccountEngine)
                                    .addComponent(lTimestampFormat)
                                    .addComponent(lDateFormat)
                                    .addComponent(lDynamicBanLimit)
                                    .addComponent(lDynamicBanInterval)
                                    .addComponent(lLoginLogFilename))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tTimestampFormat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cbAccountEngine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tIpSyncInterval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tIpBanCleanupInterval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(pContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(tServerAdresse)
                                        .addComponent(tServerPort))
                                    .addComponent(tDynamicBanDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tDynamicBanLimit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tDynamicBanInterval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(pContainerLayout.createSequentialGroup()
                                        .addGroup(pContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(tDateFormat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(tAccountFilename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(bAccountFilename))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pContainerLayout.createSequentialGroup()
                                        .addComponent(tLoginLogFilename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(bLoginLogFilename))))
                            .addComponent(lAccountFilename))
                        .addGap(77, 77, 77)))
                .addContainerGap())
        );
        pContainerLayout.setVerticalGroup(
            pContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lServerAdresse)
                    .addComponent(tServerAdresse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lServerPort)
                    .addComponent(tServerPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lIpBanCleanupInterval)
                    .addComponent(tIpBanCleanupInterval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lIpSyncInterval)
                    .addComponent(tIpSyncInterval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addComponent(chbIPBan)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chbDynamicPassFailureBan)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tDynamicBanInterval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lDynamicBanInterval))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tDynamicBanLimit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lDynamicBanLimit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lDynamicBanDuration)
                    .addComponent(tDynamicBanDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lAccountEngine)
                    .addComponent(cbAccountEngine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lTimestampFormat)
                    .addComponent(tTimestampFormat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lDateFormat)
                    .addComponent(tDateFormat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chbStdoutWithAnsiSequence)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lAccountFilename)
                    .addComponent(tAccountFilename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bAccountFilename))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bLoginLogFilename)
                    .addComponent(tLoginLogFilename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lLoginLogFilename))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        chbEnableAdmin.setText("Enable Admin");

        lAdminPassword.setText("Admin password");

        tAdminPassword.setText("jTextField1");

        lAdminAllowedHost1.setText("Admin allowed host");

        tlAdminAllowedHost1.setText("jTextField1");

        chbConsole.setText("console");

        lDNSBLServers.setText("DNSBL servers");

        tDNSBLServers.setText("jTextField1");

        chbAutoregistration.setText("Autoregistration");

        tAutoregistration.setText("jTextField1");

        chbLogLlogin.setText("Log login");

        lAllowedRegs.setText("Allowed regs");

        tAllowedRegs.setText("jTextField1");

        lTimeAllowed.setText("Time allowed");

        tTimeAllowed.setText("jTextField1");

        lMinLevelToConnect.setText("Min level to connect");

        tMinLevelToConnect.setText("jTextField1");

        lStartTimitedTime.setText("Start limited time");

        tStartTimitedTime.setText("jTextField1");

        chbCheckClientVersion.setText("Check client version");

        lClientVersion.setText("Client version");

        tClientVersion.setText("jTextField1");

        chbUseDnsbl.setText("Use dnsbl");

        chbUseMD5Passwords.setText("Use MD5 passwords");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chbCheckClientVersion)
                    .addComponent(lClientVersion)
                    .addComponent(lMinLevelToConnect)
                    .addComponent(lStartTimitedTime)
                    .addComponent(lTimeAllowed)
                    .addComponent(chbLogLlogin)
                    .addComponent(lAllowedRegs)
                    .addComponent(chbAutoregistration)
                    .addComponent(chbEnableAdmin)
                    .addComponent(lAdminPassword)
                    .addComponent(lAdminAllowedHost1)
                    .addComponent(chbConsole)
                    .addComponent(lDNSBLServers)
                    .addComponent(chbUseDnsbl)
                    .addComponent(chbUseMD5Passwords))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 4, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(tAdminPassword)
                                .addComponent(tlAdminAllowedHost1)
                                .addComponent(tDNSBLServers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(tAutoregistration, 0, 0, Short.MAX_VALUE)
                                .addComponent(tAllowedRegs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(tTimeAllowed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(tMinLevelToConnect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(tClientVersion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tStartTimitedTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chbEnableAdmin)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lAdminPassword)
                    .addComponent(tAdminPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lAdminAllowedHost1)
                    .addComponent(tlAdminAllowedHost1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chbConsole)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lDNSBLServers)
                    .addComponent(tDNSBLServers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chbAutoregistration)
                    .addComponent(tAutoregistration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chbLogLlogin)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lAllowedRegs)
                    .addComponent(tAllowedRegs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lTimeAllowed)
                    .addComponent(tTimeAllowed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lMinLevelToConnect)
                    .addComponent(tMinLevelToConnect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lStartTimitedTime)
                    .addComponent(tStartTimitedTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chbCheckClientVersion)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lClientVersion)
                    .addComponent(tClientVersion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chbUseDnsbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chbUseMD5Passwords)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        mFile.setText("File");

        miLoad.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        miLoad.setText("Load");
        miLoad.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                miLoadMouseReleased(evt);
            }
        });
        mFile.add(miLoad);

        miSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        miSave.setText("Save");
        miSave.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                miSaveMouseReleased(evt);
            }
        });
        mFile.add(miSave);

        miQuit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        miQuit.setText("Quit");
        miQuit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                miQuitMouseReleased(evt);
            }
        });
        mFile.add(miQuit);

        jMenuBar1.add(mFile);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(pContainer, javax.swing.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>

	private void bAccountFilenameMouseClicked(java.awt.event.MouseEvent evt)
	{
		JFileChooser chooser = new JFileChooser();
		chooser.setFileFilter(new FiltreSimple(
				"JavAthena/eAthena account file", ".txt"));
		chooser.setFileFilter(new FiltreSimple(
				"JavAthena/eAthena account file", ".xml"));
		int returnVal = chooser.showOpenDialog(this);
		if (returnVal == JFileChooser.APPROVE_OPTION)
		{
			fLoginLog = chooser.getSelectedFile();
		}
	}

	private void bLoginLogFilenameMouseClicked(java.awt.event.MouseEvent evt)
	{
		JFileChooser chooser = new JFileChooser();

		chooser.setFileFilter(new FiltreSimple("JavAthena/eAthena log file",
				".txt"));

		int returnVal = chooser.showOpenDialog(this);
		if (returnVal == JFileChooser.APPROVE_OPTION)
		{
			fAccountFilename = chooser.getSelectedFile();
		}
	}

	private void miLoadMouseReleased(java.awt.event.MouseEvent evt)
	{
		if(evt.getButton() == MouseEvent.BUTTON1)
		{
			loadConf();
		}
	}

	private void miSaveMouseReleased(java.awt.event.MouseEvent evt)
	{
		if(evt.getButton() == MouseEvent.BUTTON1)
		{
			saveConf();
		}
	}

	private void miQuitMouseReleased(java.awt.event.MouseEvent evt)
	{
		if(evt.getButton() == MouseEvent.BUTTON1)
		{
			System.exit(0);
		}
	}

	public void saveConf()
	{
		LoginAthena conf = new LoginAthena();
		
		conf.setAccount_engine(cbAccountEngine.getSelectedItem().toString());
		conf.setAccount_filename(tAccountFilename.getText());
		conf.setAdmin_allowed_host(tlAdminAllowedHost1.getText());
		conf.setAdmin_pass(tAdminPassword.getText());
		conf.setAdmin_state(chbEnableAdmin.isSelected());
		conf.setAllowed_regs(Integer.parseInt(tAllowedRegs.getText()));
		conf.setCheck_client_version(chbCheckClientVersion.isSelected());
		conf.setClient_version_to_connect(Integer.parseInt(tClientVersion.getText()));
		conf.setConsole(chbConsole.isSelected());
		conf.setDate_format(tDateFormat.getText());
		conf.setDnsbl_servs(tDNSBLServers.getText());
		conf.setDynamic_pass_failure_ban(chbDynamicPassFailureBan.isSelected());
		conf.setDynamic_pass_failure_ban_duration(Integer.parseInt(tDynamicBanDuration.getText()));
		conf.setDynamic_pass_failure_ban_interval(Integer.parseInt(tDynamicBanInterval.getText()));
		conf.setDynamic_pass_failure_ban_limit(Integer.parseInt(tDynamicBanLimit.getText()));
		conf.setIp_sync_interval(Integer.parseInt(tIpSyncInterval.getText()));
		conf.setIpban(chbIPBan.isSelected());
		conf.setIpban_cleanup_interval(Integer.parseInt(tIpBanCleanupInterval.getText()));
		conf.setLog_login(chbLogLlogin.isSelected());
		conf.setLogin_log_filename(tLoginLogFilename.getText());
		conf.setLogin_port(Integer.parseInt(tServerPort.getText()));
		conf.setMin_level_to_connect(Integer.parseInt(tMinLevelToConnect.getText()));
		conf.setNew_account_flag(chbAutoregistration.isSelected());
		conf.setStart_limited_time(Integer.parseInt(tStartTimitedTime.getText()));
		conf.setStdout_with_ansisequence(chbStdoutWithAnsiSequence.isSelected());
		conf.setTime_allowed(Integer.parseInt(tTimeAllowed.getText()));
		conf.setTimestamp_format(tTimestampFormat.getText());
		conf.setUse_dnsbl(chbUseDnsbl.isSelected());
		conf.setUse_MD5_passwords(chbUseMD5Passwords.isSelected());
		
		try
		{
			conf.save();
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
		
	}
	
	public void loadConf()
	{
		LoginAthena conf = null;
		try
		{
			conf = LoginAthena.load();
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
		
		cbAccountEngine.setSelectedItem(conf.getAccount_engine());
		tAccountFilename.setText(conf.getAccount_filename());
		tlAdminAllowedHost1.setText(conf.getAdmin_allowed_host());
		tAdminPassword.setText(conf.getAdmin_pass());
		chbEnableAdmin.setSelected(conf.getAdmin_state());
		tAllowedRegs.setText(conf.getAllowed_regs() + "");
		chbCheckClientVersion.setSelected(conf.isCheck_client_version());
		tClientVersion.setText(conf.getClient_version_to_connect() +"");
		chbConsole.setSelected(conf.isConsole());
		tDateFormat.setText(conf.getDate_format());
		tDNSBLServers.setText(conf.getDnsbl_servs());
		chbDynamicPassFailureBan.setSelected(conf.isDynamic_pass_failure_ban());
		tDynamicBanDuration.setText(conf.getDynamic_pass_failure_ban_duration() + "");
		tDynamicBanInterval.setText(conf.getDynamic_pass_failure_ban_interval() + "");
		tDynamicBanLimit.setText(conf.getDynamic_pass_failure_ban_limit() + "");
		tIpSyncInterval.setText(conf.getIp_sync_interval() + "");
		chbIPBan.setSelected(conf.isIpban());
		tIpBanCleanupInterval.setText(conf.getIpban_cleanup_interval() + "");
		chbLogLlogin.setSelected(conf.isLog_login());
		tLoginLogFilename.setText(conf.getLogin_log_filename());
		tServerPort.setText(conf.getLogin_port() + "");
		tMinLevelToConnect.setText(conf.getMin_level_to_connect() + "");
		chbAutoregistration.setSelected(conf.getNew_account_flag());
		tStartTimitedTime.setText(conf.getStart_limited_time() + "");
		chbStdoutWithAnsiSequence.setSelected(conf.isStdout_with_ansisequence());
		tTimeAllowed.setText(conf.getTime_allowed() + "");
		tTimestampFormat.setText(conf.getTimestamp_format());
		chbUseDnsbl.setSelected(conf.isUse_dnsbl());
		chbUseMD5Passwords.setSelected(conf.isUse_md5_passwds());
	}
	


	/**
	 * @return the fLoginLog
	 */
	public File getfLoginLog()
	{
		return fLoginLog;
	}

	/**
	 * @param fLoginLog
	 *            the fLoginLog to set
	 */
	public void setfLoginLog(File fLoginLog)
	{
		this.fLoginLog = fLoginLog;
	}

	/**
	 * @return the fAccountFilename
	 */
	public File getfAccountFilename()
	{
		return fAccountFilename;
	}

	/**
	 * @param fAccountFilename
	 *            the fAccountFilename to set
	 */
	public void setfAccountFilename(File fAccountFilename)
	{
		this.fAccountFilename = fAccountFilename;
	}
}

class FiltreSimple extends FileFilter
{
	// Description et extension acceptee par le filtre

	private String description;
	private String extension;

	// Constructeur a partir de la description et de l'extension acceptee

	public FiltreSimple(String description, String extension)
	{
		if (description == null || extension == null)
		{
			throw new NullPointerException(
					"La description (ou extension) ne peutetre null.");
		}
		this.description = description;
		this.extension = extension;
	}

	// Implementation de FileFilter

	public boolean accept(File file)
	{
		if (file.isDirectory())
		{
			return true;
		}
		String nomFichier = file.getName().toLowerCase();

		return nomFichier.endsWith(extension);
	}

	public String getDescription()
	{
		return description;
	}
}
