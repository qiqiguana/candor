/*
 * This file was automatically generated by EvoSuite
 */

package org.javathena.login;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.net.Proxy;
import java.net.Socket;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.runtime.System;
import org.evosuite.sandbox.Sandbox;
import org.javathena.core.data.IParse;
import org.javathena.core.data.Socket_data;
import org.javathena.data.MySQLDBManagement;
import org.javathena.login.Login;
import org.javathena.login.parse.FromClient;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class LoginEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          Login login0 = null;
          try {
            login0 = new Login();
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.lang.RuntimePermission shutdownHooks)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.Runtime.addShutdownHook(Runtime.java:190)
             * org.javathena.login.Login.<init>(Login.java:568)
             * sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             * sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)
             * sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)
             * java.lang.reflect.Constructor.newInstance(Constructor.java:513)
             * org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
      FromClient fromClient0 = new FromClient();
      Socket_data socket_data0 = new Socket_data((Socket) null, (IParse) fromClient0);
      Login.logUnknownPackets(socket_data0);
      assertNull(socket_data0.getName());
  }

  @Test
  public void test2()  throws Throwable  {
      MySQLDBManagement mySQLDBManagement0 = (MySQLDBManagement)Login.getDbManagemtType();
      assertNull(mySQLDBManagement0);
  }

  @Test
  public void test3()  throws Throwable  {
      Login.setPASSWORDENC(127);
  }

  @Test
  public void test4()  throws Throwable  {
      Login.display_title();
  }

  @Test
  public void test5()  throws Throwable  {
      Proxy proxy0 = Proxy.NO_PROXY;
      Socket socket0 = new Socket(proxy0);
      FromClient fromClient0 = new FromClient();
      Socket_data socket_data0 = new Socket_data(socket0, (IParse) fromClient0);
      // Undeclared exception!
      try {
        Login.version(socket_data0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      FromClient fromClient0 = new FromClient();
      Socket_data socket_data0 = new Socket_data((Socket) null, (IParse) fromClient0);
      // Undeclared exception!
      try {
        Login.codingKeyAdministration(socket_data0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = Login.getPASSWORDENC();
      assertEquals((-127), int0);
  }

  @Test
  public void test8()  throws Throwable  {
      Socket socket0 = new Socket();
      FromClient fromClient0 = new FromClient();
      Socket_data socket_data0 = new Socket_data(socket0, (IParse) fromClient0);
      Login.getMd5Data(socket_data0);
      // Undeclared exception!
      try {
        Login.codingKey(socket_data0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      // Undeclared exception!
      try {
        Login.login_log("");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = Login.mmo_auth_initXML();
      assertEquals(0, int0);
  }

  @Test
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Login.showTab(byteArray0);
  }

  @Test
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try {
        Login.do_initSQL();
        fail("Expecting exception: System.SystemExitException");
      } catch(System.SystemExitException e) {
      }
  }
}
