/*
 * This file was automatically generated by EvoSuite
 */

package org.javathena.login;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.net.Proxy;
import java.net.Socket;
import java.sql.SQLException;
import javolution.util.FastMap;
import javolution.util.FastTable;
import org.javathena.core.data.Auth_data;
import org.javathena.core.data.Socket_data;
import org.javathena.login.UserManagement;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class UserManagementEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Proxy proxy0 = Proxy.NO_PROXY;
      Socket socket0 = new Socket(proxy0);
      Socket_data socket_data0 = new Socket_data(socket0);
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try {
        UserManagement.numberOfUser(socket_data0, byteArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = UserManagement.getNBSession();
      assertEquals(0, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      Proxy proxy0 = Proxy.NO_PROXY;
      Socket socket0 = new Socket(proxy0);
      Socket_data socket_data0 = new Socket_data(socket0);
      UserManagement.addSession(socket_data0);
      assertEquals("0.0.0.0", socket_data0.getIpStr());
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = UserManagement.online_db_final();
      assertEquals(0, int0);
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = UserManagement.getNBGM();
      assertEquals(0, int0);
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = UserManagement.getAccountIdCount();
      assertEquals(0, int0);
  }

  @Test
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try {
        UserManagement.getUserSQL((Integer) 0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      UserManagement.addAccountIdCount();
  }

  @Test
  public void test8()  throws Throwable  {
      UserManagement.debugXML();
  }

  @Test
  public void test9()  throws Throwable  {
      // Undeclared exception!
      try {
        UserManagement.addIpToBanListMySQL("[N`*E9Fj$R:Ry:`^=+");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
        /*
         * For input string: \"[N`*E9Fj$R:Ry:`^=+\"
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try {
        UserManagement.getSessionAt(100);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      UserManagement.addAccountIdCount((int) (byte)0);
  }

  @Test
  public void test12()  throws Throwable  {
      FastMap<Integer, Auth_data> fastMap0 = new FastMap<Integer, Auth_data>();
      UserManagement.setAuth_dats(fastMap0);
      assertEquals("[]", fastMap0.toString());
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = UserManagement.getNBUser();
      assertEquals(0, int0);
  }

  @Test
  public void test14()  throws Throwable  {
      UserManagement.setAccountIdCount(0);
  }

  @Test
  public void test15()  throws Throwable  {
      Auth_data auth_data0 = UserManagement.getUserTxt((Integer) (-423));
      assertNull(auth_data0);
  }

  @Test
  public void test16()  throws Throwable  {
      Auth_data auth_data0 = UserManagement.addUserSQL("Banned.", "Banned.", "Banned.", (-92));
      assertNull(auth_data0);
  }

  @Test
  public void test17()  throws Throwable  {
      Integer integer0 = UserManagement.getAccountID("");
      UserManagement.isGM((long) integer0);
  }

  @Test
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try {
        UserManagement.getSessionAt(100);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try {
        UserManagement.getUserSQL("");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test20()  throws Throwable  {
      Auth_data auth_data0 = UserManagement.addUserTXT("", "*Tm0EUv6.%4k@", "*Tm0EUv6.%4k@", ':');
      assertNotNull(auth_data0);
      assertEquals("0\t\t*Tm0EUv6.%4k@\t:\t*Tm0EUv6.%4k@\t0\t0\t0\t0\t0\t0\tnull\t", auth_data0.toString());
  }

  @Test
  public void test21()  throws Throwable  {
      Auth_data auth_data0 = new Auth_data();
      Auth_data auth_data1 = UserManagement.removeUser(auth_data0);
      assertNull(auth_data1);
  }

  @Test
  public void test22()  throws Throwable  {
      Auth_data auth_data0 = new Auth_data();
      UserManagement.add_online_user(auth_data0);
      // Undeclared exception!
      try {
        UserManagement.unban((Socket_data) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      // Undeclared exception!
      try {
        UserManagement.connectionOfClient((Socket_data) null, byteArray0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 30
         */
      }
  }

  @Test
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      // Undeclared exception!
      try {
        UserManagement.connectionOfClient((Socket_data) null, byteArray0, true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = UserManagement.levelIsValid(83, "", 83, 83);
      assertEquals(83, int0);
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = UserManagement.levelIsValid((-1390), (String) null, (-1390), (-1390));
      assertEquals((-1), int0);
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = UserManagement.levelIsValid(1069, (String) null, 1069, 1069);
      assertEquals(99, int0);
  }

  @Test
  public void test28()  throws Throwable  {
      UserManagement.remove_online_user((Integer) 46);
  }

  @Test
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[10];
      int int0 = UserManagement.charif_sendallwos((-225), intArray0);
      assertEquals(0, int0);
  }

  @Test
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      int int0 = UserManagement.charif_sendallwos(3, byteArray0);
      assertEquals(0, int0);
  }

  @Test
  public void test31()  throws Throwable  {
      Auth_data auth_data0 = UserManagement.addUserTXT("C|'Qa#C?.WiXKs", "C|'Qa#C?.WiXKs", "C|'Qa#C?.WiXKs", ',');
      assertNotNull(auth_data0);
      assertEquals("18\tC|'Qa#C?.WiXKs\tC|'Qa#C?.WiXKs\t,\t-\t0\t0\t0\t0\t0\t0\tnull\t", auth_data0.toString());
  }

  @Test
  public void test32()  throws Throwable  {
      Auth_data auth_data0 = UserManagement.getUserTxt("3E9(<W");
      assertNull(auth_data0);
  }

  @Test
  public void test33()  throws Throwable  {
      Auth_data auth_data0 = UserManagement.getUserTxt("");
      assertEquals("17\t\t*Tm0EUv6.%4k@\t:\t*Tm0EUv6.%4k@\t0\t0\t0\t0\t0\t0\tnull\t", auth_data0.toString());
  }

  @Test
  public void test34()  throws Throwable  {
      FastTable<Integer> fastTable0 = UserManagement.getAccountIds();
      assertEquals("[0, -2, 1, 2, 3, 5, 6, 7, 9, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 8, 4, 10, 15, 23, 24, 25, 26, 27, 29, 31, 32, 33, 34, 35, 36, 37, 39, 42, 44, 45, 46, 47, 48, -49, 51, 52, -1]", fastTable0.toString());
      assertNotNull(fastTable0);
  }

  @Test
  public void test35()  throws Throwable  {
      UserManagement.dynamicFailBanCheckTXT("=By]");
  }

  @Test
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try {
        UserManagement.sendUserList((Socket_data) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test37()  throws Throwable  {
      FastMap<Integer, Auth_data> fastMap0 = new FastMap<Integer, Auth_data>();
      fastMap0.put((Integer) (-423), (Auth_data) null);
      // Undeclared exception!
      try {
        UserManagement.setAuth_dats(fastMap0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test38()  throws Throwable  {
      Socket_data socket_data0 = UserManagement.getSessionAt(0);
      byte[] byteArray0 = new byte[2];
      UserManagement.receiveAllOnlinAccounts(socket_data0, byteArray0);
      assertEquals(0, socket_data0.getUsers());
  }
}
