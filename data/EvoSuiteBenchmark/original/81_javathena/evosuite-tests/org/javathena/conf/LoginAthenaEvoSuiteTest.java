/*
 * This file was automatically generated by EvoSuite
 */

package org.javathena.conf;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javolution.util.FastTable;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.javathena.conf.LoginAthena;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class LoginAthenaEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      int int0 = loginAthena0.getAllowed_regs();
      assertEquals(0, int0);
      assertEquals(true, loginAthena0.isIpban());
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
      assertEquals(false, loginAthena0.isConsole());
  }

  @Test
  public void test1()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      loginAthena0.setUse_MD5_passwords(true);
      assertEquals(true, loginAthena0.getUse_MD5_passwords());
  }

  @Test
  public void test2()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      loginAthena0.setAdmin_allowed_host("_OWs");
      assertEquals(true, loginAthena0.isIpban());
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      assertEquals(false, loginAthena0.isConsole());
  }

  @Test
  public void test3()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      loginAthena0.setDate_format((String) null);
      assertEquals(false, loginAthena0.isConsole());
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      assertEquals(true, loginAthena0.isIpban());
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
  }

  @Test
  public void test4()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      
      loginAthena0.setBind_ip_str((String) null);
      assertEquals(true, loginAthena0.isIpban());
      assertEquals(false, loginAthena0.isConsole());
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
  }

  @Test
  public void test5()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      loginAthena0.getAdmin_pass();
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      assertEquals(false, loginAthena0.isConsole());
      assertEquals(true, loginAthena0.isIpban());
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
  }

  @Test
  public void test6()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      loginAthena0.setUse_dnsbl(false);
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      assertEquals(false, loginAthena0.isUse_dnsbl());
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
      assertEquals(true, loginAthena0.isIpban());
      assertEquals(false, loginAthena0.isConsole());
  }

  @Test
  public void test7()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      boolean boolean0 = loginAthena0.isDynamic_pass_failure_ban();
      assertEquals(false, loginAthena0.isConsole());
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      assertEquals(true, boolean0);
      assertEquals(true, loginAthena0.isIpban());
  }

  @Test
  public void test8()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      FastTable<String> fastTable0 = loginAthena0.getBanIps();
      assertEquals(true, loginAthena0.isIpban());
      assertNotNull(fastTable0);
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      assertEquals(false, loginAthena0.isConsole());
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
  }

  @Test
  public void test9()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      loginAthena0.getDate_format();
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
      assertEquals(true, loginAthena0.isIpban());
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      assertEquals(false, loginAthena0.isConsole());
  }

  @Test
  public void test10()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      loginAthena0.setDynamic_pass_failure_ban(true);
      assertEquals(true, loginAthena0.isIpban());
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      assertEquals(false, loginAthena0.isConsole());
  }

  @Test
  public void test11()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      loginAthena0.setMin_level_to_connect(0);
      assertEquals(0, loginAthena0.getMin_level_to_connect());
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      assertEquals(false, loginAthena0.isConsole());
      assertEquals(true, loginAthena0.isIpban());
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
  }

  @Test
  public void test12()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      loginAthena0.isUse_md5_passwds();
      assertEquals(false, loginAthena0.isConsole());
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
      assertEquals(true, loginAthena0.isIpban());
  }

  @Test
  public void test13()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      loginAthena0.getNew_account_flag();
      assertEquals(false, loginAthena0.isConsole());
      assertEquals(true, loginAthena0.isIpban());
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
  }

  @Test
  public void test14()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      loginAthena0.getDnsbl_servs();
      assertEquals(false, loginAthena0.isConsole());
      assertEquals(true, loginAthena0.isIpban());
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
  }

  @Test
  public void test15()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      loginAthena0.getTimestamp_format();
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
      assertEquals(true, loginAthena0.isIpban());
      assertEquals(false, loginAthena0.isConsole());
  }

  @Test
  public void test16()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      loginAthena0.setTimestamp_format("_OWs");
      assertEquals(true, loginAthena0.isIpban());
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
      assertEquals(false, loginAthena0.isConsole());
  }

  @Test
  public void test17()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      loginAthena0.setBanIps((FastTable<String>) null);
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
      assertEquals(false, loginAthena0.isConsole());
      assertEquals(true, loginAthena0.isIpban());
  }

  @Test
  public void test18()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      loginAthena0.isStdout_with_ansisequence();
      assertEquals(true, loginAthena0.isIpban());
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      assertEquals(false, loginAthena0.isConsole());
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
  }

  @Test
  public void test19()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      loginAthena0.setIpban_cleanup_interval(0);
      assertEquals(false, loginAthena0.isConsole());
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
      assertEquals(0, loginAthena0.getIpban_cleanup_interval());
      assertEquals(true, loginAthena0.isIpban());
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
  }

  @Test
  public void test20()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      int int0 = loginAthena0.getStart_limited_time();
      assertEquals(0, int0);
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      assertEquals(false, loginAthena0.isConsole());
      assertEquals(true, loginAthena0.isIpban());
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
  }

  @Test
  public void test21()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      loginAthena0.getAdmin_state();
      assertEquals(false, loginAthena0.isConsole());
      assertEquals(true, loginAthena0.isIpban());
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
  }

  @Test
  public void test22()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      loginAthena0.setDynamic_pass_failure_ban_duration(0);
      assertEquals(true, loginAthena0.isIpban());
      assertEquals(false, loginAthena0.isConsole());
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      assertEquals(0, loginAthena0.getDynamic_pass_failure_ban_duration());
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
  }

  @Test
  public void test23()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      int int0 = loginAthena0.getDynamic_pass_failure_ban_duration();
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
      assertEquals(true, loginAthena0.isIpban());
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      assertEquals(false, loginAthena0.isConsole());
      assertEquals(0, int0);
  }

  @Test
  public void test24()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      loginAthena0.isLog_login();
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
      assertEquals(false, loginAthena0.isConsole());
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      assertEquals(true, loginAthena0.isIpban());
  }

  @Test
  public void test25()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      loginAthena0.setAdmin_state(false);
      assertEquals(false, loginAthena0.isConsole());
      assertEquals(false, loginAthena0.getAdmin_state());
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
      assertEquals(true, loginAthena0.isIpban());
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
  }

  @Test
  public void test26()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      loginAthena0.setDynamic_pass_failure_ban_limit(0);
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      assertEquals(0, loginAthena0.getDynamic_pass_failure_ban_limit());
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
      assertEquals(false, loginAthena0.isConsole());
      assertEquals(true, loginAthena0.isIpban());
  }

  @Test
  public void test27()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      loginAthena0.setLogin_port(1519);
      assertEquals(1519, loginAthena0.getLogin_port());
      assertEquals(true, loginAthena0.isIpban());
  }

  @Test
  public void test28()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      loginAthena0.setTime_allowed(0);
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      assertEquals(false, loginAthena0.isConsole());
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
      assertEquals(true, loginAthena0.isIpban());
      assertEquals(0, loginAthena0.getTime_allowed());
  }

  @Test
  public void test29()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      loginAthena0.addToBanListTXT("m&2n/^Zk-");
      assertEquals(true, loginAthena0.isIpban());
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      assertEquals(false, loginAthena0.isConsole());
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
  }

  @Test
  public void test30()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      int int0 = loginAthena0.getDynamic_pass_failure_ban_limit();
      assertEquals(true, loginAthena0.isIpban());
      assertEquals(false, loginAthena0.isConsole());
      assertEquals(0, int0);
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
  }

  @Test
  public void test31()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      loginAthena0.setDynamic_pass_failure_ban_interval((-26));
      assertEquals(-26, loginAthena0.getDynamic_pass_failure_ban_interval());
      assertEquals(true, loginAthena0.isIpban());
  }

  @Test
  public void test32()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      loginAthena0.setAccount_engine("_OWs");
      assertEquals(false, loginAthena0.isConsole());
      assertEquals(true, loginAthena0.isIpban());
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
  }

  @Test
  public void test33()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      loginAthena0.isUse_dnsbl();
      assertEquals(true, loginAthena0.isIpban());
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      assertEquals(false, loginAthena0.isConsole());
  }

  @Test
  public void test34()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      loginAthena0.setAllowed_regs((-36));
      assertEquals(-36, loginAthena0.getAllowed_regs());
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
  }

  @Test
  public void test35()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      loginAthena0.setDnsbl_servs((String) null);
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      assertEquals(false, loginAthena0.isConsole());
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
      assertEquals(true, loginAthena0.isIpban());
  }

  @Test
  public void test36()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      loginAthena0.setConsole(false);
      assertEquals(true, loginAthena0.isIpban());
      assertEquals(false, loginAthena0.isConsole());
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
  }

  @Test
  public void test37()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      loginAthena0.getAccount_filename();
      assertEquals(true, loginAthena0.isIpban());
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
      assertEquals(false, loginAthena0.isConsole());
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
  }

  @Test
  public void test38()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      loginAthena0.setClient_version_to_connect((-26));
      assertEquals(-26, loginAthena0.getClient_version_to_connect());
  }

  @Test
  public void test39()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      int int0 = loginAthena0.getIpban_cleanup_interval();
      assertEquals(true, loginAthena0.isIpban());
      assertEquals(0, int0);
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
      assertEquals(false, loginAthena0.isConsole());
  }

  @Test
  public void test40()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      int int0 = loginAthena0.getIp_sync_interval();
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      assertEquals(0, int0);
      assertEquals(true, loginAthena0.isIpban());
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
      assertEquals(false, loginAthena0.isConsole());
  }

  @Test
  public void test41()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      loginAthena0.setStart_limited_time((-26));
      assertEquals(-26, loginAthena0.getStart_limited_time());
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
  }

  @Test
  public void test42()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      int int0 = loginAthena0.getTime_allowed();
      assertEquals(true, loginAthena0.isIpban());
      assertEquals(false, loginAthena0.isConsole());
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
      assertEquals(0, int0);
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
  }

  @Test
  public void test43()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      boolean boolean0 = loginAthena0.isConsole();
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      assertEquals(true, loginAthena0.isIpban());
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
      assertEquals(false, boolean0);
  }

  @Test
  public void test44()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      loginAthena0.setLog_login(false);
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
      assertEquals(false, loginAthena0.isConsole());
      assertEquals(false, loginAthena0.isLog_login());
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      assertEquals(true, loginAthena0.isIpban());
  }

  @Test
  public void test45()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      loginAthena0.setLogin_log_filename("_OWs");
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      assertEquals(false, loginAthena0.isConsole());
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
      assertEquals(true, loginAthena0.isIpban());
  }

  @Test
  public void test46()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      loginAthena0.getAccount_engine();
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
      assertEquals(true, loginAthena0.isIpban());
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      assertEquals(false, loginAthena0.isConsole());
  }

  @Test
  public void test47()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      int int0 = loginAthena0.getDynamic_pass_failure_ban_interval();
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      assertEquals(0, int0);
      assertEquals(true, loginAthena0.isIpban());
      assertEquals(false, loginAthena0.isConsole());
  }

  @Test
  public void test48()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      loginAthena0.getLogin_log_filename();
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
      assertEquals(true, loginAthena0.isIpban());
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      assertEquals(false, loginAthena0.isConsole());
  }

  @Test
  public void test49()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      String string0 = loginAthena0.getBind_ip_str();
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
      assertEquals(true, loginAthena0.isIpban());
      assertEquals("127.0.0.1", string0);
      assertEquals(false, loginAthena0.isConsole());
      assertNotNull(string0);
  }

  @Test
  public void test50()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      boolean boolean0 = loginAthena0.isIpban();
      assertEquals(true, boolean0);
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
      assertEquals(false, loginAthena0.isConsole());
  }

  @Test
  public void test51()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      loginAthena0.getUse_MD5_passwords();
      assertEquals(true, loginAthena0.isIpban());
      assertEquals(false, loginAthena0.isConsole());
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
  }

  @Test
  public void test52()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      loginAthena0.setIp_sync_interval(0);
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      assertEquals(true, loginAthena0.isIpban());
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
      assertEquals(0, loginAthena0.getIp_sync_interval());
      assertEquals(false, loginAthena0.isConsole());
  }

  @Test
  public void test53()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      loginAthena0.checkIpBanTXT("m&2n/^Zk-");
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
      assertEquals(true, loginAthena0.isIpban());
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      assertEquals(false, loginAthena0.isConsole());
  }

  @Test
  public void test54()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      loginAthena0.setCheck_client_version(false);
      assertEquals(false, loginAthena0.isCheck_client_version());
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      assertEquals(true, loginAthena0.isIpban());
      assertEquals(false, loginAthena0.isConsole());
  }

  @Test
  public void test55()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      loginAthena0.setAdmin_pass((String) null);
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      assertEquals(false, loginAthena0.isConsole());
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
      assertEquals(true, loginAthena0.isIpban());
  }

  @Test
  public void test56()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      int int0 = loginAthena0.getMin_level_to_connect();
      assertEquals(false, loginAthena0.isConsole());
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
      assertEquals(0, int0);
      assertEquals(true, loginAthena0.isIpban());
  }

  @Test
  public void test57()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      loginAthena0.setStdout_with_ansisequence(false);
      assertEquals(true, loginAthena0.isIpban());
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
      assertEquals(false, loginAthena0.isStdout_with_ansisequence());
      assertEquals(false, loginAthena0.isConsole());
  }

  @Test
  public void test58()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      loginAthena0.setAccount_filename((String) null);
      assertEquals(true, loginAthena0.isIpban());
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      assertEquals(false, loginAthena0.isConsole());
  }

  @Test
  public void test59()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      loginAthena0.isCheck_client_version();
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
      assertEquals(false, loginAthena0.isConsole());
      assertEquals(true, loginAthena0.isIpban());
  }

  @Test
  public void test60()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          LoginAthena loginAthena0 = new LoginAthena();
          // Undeclared exception!
          try {
            loginAthena0.save();
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission conf/login_athena.xml write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:183)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:84)
             * java.io.FileWriter.<init>(FileWriter.java:46)
             * org.javathena.conf.LoginAthena.save(LoginAthena.java:430)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test61()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      int int0 = loginAthena0.getLogin_port();
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
      assertEquals(0, int0);
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      assertEquals(false, loginAthena0.isConsole());
      assertEquals(true, loginAthena0.isIpban());
  }

  @Test
  public void test62()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      int int0 = loginAthena0.getClient_version_to_connect();
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
      assertEquals(false, loginAthena0.isConsole());
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      assertEquals(true, loginAthena0.isIpban());
      assertEquals(0, int0);
  }

  @Test
  public void test63()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      loginAthena0.getAdmin_allowed_host();
      assertEquals(false, loginAthena0.isConsole());
      assertEquals(true, loginAthena0.isIpban());
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
  }

  @Test
  public void test64()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      loginAthena0.setNew_account_flag(false);
      assertEquals(true, loginAthena0.isIpban());
      assertEquals(false, loginAthena0.getNew_account_flag());
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
      assertEquals(true, loginAthena0.isDynamic_pass_failure_ban());
      assertEquals(false, loginAthena0.isConsole());
  }

  @Test
  public void test65()  throws Throwable  {
      LoginAthena loginAthena0 = new LoginAthena();
      assertEquals(true, loginAthena0.isIpban());
      
      loginAthena0.setIpban(false);
      assertEquals(false, loginAthena0.isIpban());
      assertEquals("127.0.0.1", loginAthena0.getBind_ip_str());
  }
}
