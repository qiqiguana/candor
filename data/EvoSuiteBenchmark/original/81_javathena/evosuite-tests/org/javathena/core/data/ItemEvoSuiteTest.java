/*
 * This file was automatically generated by EvoSuite
 */

package org.javathena.core.data;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.javathena.core.data.Item;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ItemEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Item item0 = new Item();
      short short0 = item0.getNameid();
      assertEquals((short)0, short0);
  }

  @Test
  public void test1()  throws Throwable  {
      Item item0 = new Item();
      assertNotNull(item0);
      
      item0.setAttribute(0);
      assertEquals(0, item0.getAttribute());
  }

  @Test
  public void test2()  throws Throwable  {
      Item item0 = new Item();
      assertNotNull(item0);
      
      item0.setNameid((short)0);
      assertEquals(0, item0.getNameid());
  }

  @Test
  public void test3()  throws Throwable  {
      Item item0 = new Item();
      assertNotNull(item0);
      
      int int0 = item0.getRefine();
      assertEquals(0, int0);
  }

  @Test
  public void test4()  throws Throwable  {
      Item item0 = new Item();
      int int0 = item0.getCard(0);
      assertEquals(0, int0);
  }

  @Test
  public void test5()  throws Throwable  {
      Item item0 = new Item();
      short short0 = item0.getEquip();
      assertEquals((short)0, short0);
  }

  @Test
  public void test6()  throws Throwable  {
      Item item0 = new Item();
      assertNotNull(item0);
      
      int int0 = item0.getAttribute();
      assertEquals(0, int0);
  }

  @Test
  public void test7()  throws Throwable  {
      Item item0 = new Item();
      assertNotNull(item0);
      
      item0.setEquip((short)0);
      assertEquals(0, item0.getEquip());
  }

  @Test
  public void test8()  throws Throwable  {
      Item item0 = new Item();
      assertNotNull(item0);
      
      item0.setIdentify(0);
      assertEquals(0, item0.getIdentify());
  }

  @Test
  public void test9()  throws Throwable  {
      Item item0 = new Item();
      assertNotNull(item0);
      
      int int0 = item0.getId();
      assertEquals(0, int0);
  }

  @Test
  public void test10()  throws Throwable  {
      Item item0 = new Item();
      item0.setCard(0, (-1979));
      assertEquals(0, item0.getAmount());
  }

  @Test
  public void test11()  throws Throwable  {
      Item item0 = new Item();
      short short0 = item0.getAmount();
      assertEquals((short)0, short0);
  }

  @Test
  public void test12()  throws Throwable  {
      Item item0 = new Item();
      assertNotNull(item0);
      
      item0.setAmount((short)0);
      assertEquals(0, item0.getAmount());
  }

  @Test
  public void test13()  throws Throwable  {
      Item item0 = new Item();
      assertNotNull(item0);
      
      int int0 = item0.getExpire_time();
      assertEquals(0, int0);
  }

  @Test
  public void test14()  throws Throwable  {
      Item item0 = new Item();
      assertNotNull(item0);
      
      item0.setId(0);
      assertEquals(0, item0.getId());
  }

  @Test
  public void test15()  throws Throwable  {
      Item item0 = new Item();
      assertNotNull(item0);
      
      item0.setRefine((-1));
      assertEquals(-1, item0.getRefine());
  }

  @Test
  public void test16()  throws Throwable  {
      Item item0 = new Item();
      assertNotNull(item0);
      
      item0.setExpire_time(0);
      assertEquals(0, item0.getExpire_time());
  }

  @Test
  public void test17()  throws Throwable  {
      Item item0 = new Item();
      assertNotNull(item0);
      
      int int0 = item0.getIdentify();
      assertEquals(0, int0);
  }
}
