/*
 * This file was automatically generated by EvoSuite
 */

package org.javathena.core.data;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import javolution.util.FastTable;
import org.javathena.core.data.Friend;
import org.javathena.core.data.Hotkey;
import org.javathena.core.data.IndexedFastMap;
import org.javathena.core.data.Item;
import org.javathena.core.data.PersistenteData;
import org.javathena.core.data.Point;
import org.javathena.core.data.ROCharacter;
import org.javathena.core.data.Skill;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ROCharacterEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ROCharacter.JOB rOCharacter_JOB0 = ROCharacter.JOB.SNIPER;
      int int0 = rOCharacter_JOB0.getValue();
      assertEquals(4012, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      int int0 = rOCharacter0.getSp();
      assertEquals(0, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setFame((int) (short)0);
      assertEquals(0, rOCharacter0.getFame());
  }

  @Test
  public void test3()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      String string0 = rOCharacter0.getName();
      assertNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      // Undeclared exception!
      try {
        rOCharacter0.getInventoryItem(444);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setInt((short)646);
      assertEquals(646, rOCharacter0.getIntel());
      assertEquals(646, rOCharacter0.getInt());
  }

  @Test
  public void test6()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      short short0 = rOCharacter0.getHair();
      assertEquals((short)0, short0);
  }

  @Test
  public void test7()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      int int0 = rOCharacter0.getHp();
      assertEquals(0, int0);
  }

  @Test
  public void test8()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      int int0 = rOCharacter0.getSpear_faith();
      assertEquals(0, int0);
  }

  @Test
  public void test9()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setStatus_point((int) (short)0);
      assertEquals(0, rOCharacter0.getStatus_point());
  }

  @Test
  public void test10()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      rOCharacter0.addInventoryItem((Item) null);
      assertEquals(0, rOCharacter0.getSp());
  }

  @Test
  public void test11()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setMapip((int) (short)0);
      assertEquals(0, rOCharacter0.getMapip());
  }

  @Test
  public void test12()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      short short0 = rOCharacter0.getIntel();
      assertEquals((short)0, short0);
  }

  @Test
  public void test13()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      rOCharacter0.addPoint((Point) null);
      assertEquals(0, rOCharacter0.getStr());
  }

  @Test
  public void test14()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      ROCharacter.JOB rOCharacter_JOB0 = ROCharacter.JOB.BABY_HUNTER;
      rOCharacter0.setClass_(rOCharacter_JOB0);
      assertEquals(0, rOCharacter0.getSkill_point());
  }

  @Test
  public void test15()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      rOCharacter0.setStorage((FastTable<Item>) null);
      assertEquals(0, rOCharacter0.getAccount_id());
  }

  @Test
  public void test16()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setGuild_id((int) (short)0);
      assertEquals(0, rOCharacter0.getGuild_id());
  }

  @Test
  public void test17()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      // Undeclared exception!
      try {
        rOCharacter0.getPoint(23);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test18()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      FastTable<Point> fastTable0 = rOCharacter0.getMemoPoints();
      assertEquals(0, fastTable0.size());
  }

  @Test
  public void test19()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      int int0 = rOCharacter0.getSlot();
      assertEquals(0, int0);
  }

  @Test
  public void test20()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setSword_calls(0);
      assertEquals(0, rOCharacter0.getSword_calls());
  }

  @Test
  public void test21()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setAccount_id((int) (short)0);
      assertEquals(0, rOCharacter0.getAccount_id());
  }

  @Test
  public void test22()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setChild(0);
      assertEquals(0, rOCharacter0.getChild());
  }

  @Test
  public void test23()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setBase_level((int) (short)0);
      assertEquals(0, rOCharacter0.getBase_level());
  }

  @Test
  public void test24()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      short short0 = rOCharacter0.getAgi();
      assertEquals((short)0, short0);
  }

  @Test
  public void test25()  throws Throwable  {
      ROCharacter.setPersistenceMethod((PersistenteData<IndexedFastMap<Integer, ROCharacter>>) null);
  }

  @Test
  public void test26()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setParty_id((int) (short)0);
      assertEquals(0, rOCharacter0.getParty_id());
  }

  @Test
  public void test27()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setSex('Y');
      assertEquals(89, rOCharacter0.getSex());
  }

  @Test
  public void test28()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setHair_color((short) (-1569));
      assertEquals(-1569, rOCharacter0.getHair_color());
  }

  @Test
  public void test29()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setMax_sp(119);
      assertEquals(119, rOCharacter0.getMax_sp());
  }

  @Test
  public void test30()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      int int0 = rOCharacter0.getZeny();
      assertEquals(0, int0);
  }

  @Test
  public void test31()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      FastTable<Skill> fastTable0 = new FastTable<Skill>((-1871));
      rOCharacter0.setSkill(fastTable0);
      assertEquals(0, rOCharacter0.getManner());
  }

  @Test
  public void test32()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      int int0 = rOCharacter0.getJob_exp();
      assertEquals(0, int0);
  }

  @Test
  public void test33()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setHom_id((int) (short)0);
      assertEquals(0, rOCharacter0.getHom_id());
  }

  @Test
  public void test34()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      int int0 = rOCharacter0.getKarma();
      assertEquals(0, int0);
  }

  @Test
  public void test35()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      short short0 = rOCharacter0.getStr();
      assertEquals((short)0, short0);
  }

  @Test
  public void test36()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      int int0 = rOCharacter0.getMother();
      assertEquals(0, int0);
  }

  @Test
  public void test37()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      Friend friend0 = new Friend(0, 0, "_");
      rOCharacter0.addFriend(friend0, (int) (short)0);
      assertEquals(0, rOCharacter0.getMother());
  }

  @Test
  public void test38()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      int int0 = rOCharacter0.getJob_level();
      assertEquals(0, int0);
  }

  @Test
  public void test39()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      // Undeclared exception!
      try {
        rOCharacter0.addHotkey((Hotkey) null, (int) (short)0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test40()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      short short0 = rOCharacter0.getHead_bottom();
      assertEquals((short)0, short0);
  }

  @Test
  public void test41()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      int int0 = rOCharacter0.getMapport();
      assertEquals(0, int0);
  }

  @Test
  public void test42()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      FastTable<Item> fastTable0 = rOCharacter0.getStorage();
      assertEquals(true, fastTable0.isEmpty());
  }

  @Test
  public void test43()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setHead_top((short)1625);
      assertEquals(1625, rOCharacter0.getHead_top());
  }

  @Test
  public void test44()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setJob_level((int) (short)1496);
      assertEquals(1496, rOCharacter0.getJob_level());
  }

  @Test
  public void test45()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setChar_id(0);
      assertEquals(0, rOCharacter0.getChar_id());
  }

  @Test
  public void test46()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setHair((short)1639);
      assertEquals(1639, rOCharacter0.getHair());
  }

  @Test
  public void test47()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      FastTable<Item> fastTable0 = rOCharacter0.getInventory();
      rOCharacter0.setInventory(fastTable0);
      assertEquals(0, rOCharacter0.getHead_bottom());
  }

  @Test
  public void test48()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setFather((int) (short) (-1));
      assertEquals(-1, rOCharacter0.getFather());
  }

  @Test
  public void test49()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      short short0 = rOCharacter0.getVit();
      assertEquals((short)0, short0);
  }

  @Test
  public void test50()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      int int0 = rOCharacter0.getChar_id();
      assertEquals(0, int0);
  }

  @Test
  public void test51()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      FastTable<Item> fastTable0 = rOCharacter0.getCart();
      assertEquals(0, fastTable0.size());
  }

  @Test
  public void test52()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      short short0 = rOCharacter0.getRename();
      assertEquals((short)0, short0);
  }

  @Test
  public void test53()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      Hotkey[] hotkeyArray0 = new Hotkey[10];
      rOCharacter0.setHotkeys(hotkeyArray0);
      assertEquals(0, rOCharacter0.getDex());
  }

  @Test
  public void test54()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      int int0 = rOCharacter0.getArch_calls();
      assertEquals(0, int0);
  }

  @Test
  public void test55()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      short short0 = rOCharacter0.getHead_top();
      assertEquals((short)0, short0);
  }

  @Test
  public void test56()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      int int0 = rOCharacter0.getSkill_point();
      assertEquals(0, int0);
  }

  @Test
  public void test57()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      int int0 = rOCharacter0.getMax_sp();
      assertEquals(0, int0);
  }

  @Test
  public void test58()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      int int0 = rOCharacter0.getFame();
      assertEquals(0, int0);
  }

  @Test
  public void test59()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setSp((-1508));
      assertEquals(-1508, rOCharacter0.getSp());
  }

  @Test
  public void test60()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      Point point0 = rOCharacter0.getSave_point();
      assertNull(point0);
  }

  @Test
  public void test61()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setHp((int) (short)0);
      assertEquals(0, rOCharacter0.getHp());
  }

  @Test
  public void test62()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setVit((short) (-1765));
      assertEquals(-1765, rOCharacter0.getVit());
  }

  @Test
  public void test63()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setOption((int) (short) (-1));
      assertEquals(-1, rOCharacter0.getOption());
  }

  @Test
  public void test64()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setKarma(23);
      assertEquals(23, rOCharacter0.getKarma());
  }

  @Test
  public void test65()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setMother((int) (short)0);
      assertEquals(0, rOCharacter0.getMother());
  }

  @Test
  public void test66()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      short short0 = rOCharacter0.getInt();
      assertEquals((short)0, short0);
  }

  @Test
  public void test67()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      rOCharacter0.setName("_");
      assertEquals(0, rOCharacter0.getMapip());
  }

  @Test
  public void test68()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setMer_id((int) (short)0);
      assertEquals(0, rOCharacter0.getMer_id());
  }

  @Test
  public void test69()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setHead_mid((short) (-1765));
      assertEquals(-1765, rOCharacter0.getHead_mid());
  }

  @Test
  public void test70()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      short short0 = rOCharacter0.getHead_mid();
      assertEquals((short)0, short0);
  }

  @Test
  public void test71()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setIntel((short) (-1765));
      assertEquals(-1765, rOCharacter0.getInt());
      assertEquals(-1765, rOCharacter0.getIntel());
  }

  @Test
  public void test72()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      boolean boolean0 = rOCharacter0.isShow_equip();
      assertEquals(false, boolean0);
  }

  @Test
  public void test73()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      int int0 = rOCharacter0.getSword_faith();
      assertEquals(0, int0);
  }

  @Test
  public void test74()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setRename((short)1496);
      assertEquals(1496, rOCharacter0.getRename());
  }

  @Test
  public void test75()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setLuk((short)0);
      assertEquals(0, rOCharacter0.getLuk());
  }

  @Test
  public void test76()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      int int0 = rOCharacter0.getAccount_id();
      assertEquals(0, int0);
  }

  @Test
  public void test77()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      short short0 = rOCharacter0.getShield();
      assertEquals((short)0, short0);
  }

  @Test
  public void test78()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setStr((short) (-1));
      assertEquals(-1, rOCharacter0.getStr());
  }

  @Test
  public void test79()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      int int0 = rOCharacter0.getSword_calls();
      assertEquals(0, int0);
  }

  @Test
  public void test80()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      int int0 = rOCharacter0.getGuild_id();
      assertEquals(0, int0);
  }

  @Test
  public void test81()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      int int0 = rOCharacter0.getBase_level();
      assertEquals(0, int0);
  }

  @Test
  public void test82()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      short short0 = rOCharacter0.getWeapon();
      assertEquals((short)0, short0);
  }

  @Test
  public void test83()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      int int0 = rOCharacter0.getMapip();
      assertEquals(0, int0);
  }

  @Test
  public void test84()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      int int0 = rOCharacter0.getStatus_point();
      assertEquals(0, int0);
  }

  @Test
  public void test85()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setShield((short)0);
      assertEquals(0, rOCharacter0.getShield());
  }

  @Test
  public void test86()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setHead_bottom((short)0);
      assertEquals(0, rOCharacter0.getHead_bottom());
  }

  @Test
  public void test87()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setMax_hp(0);
      assertEquals(0, rOCharacter0.getMax_hp());
  }

  @Test
  public void test88()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setJob_exp(0);
      assertEquals(0, rOCharacter0.getJob_exp());
  }

  @Test
  public void test89()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setArch_calls((int) (short)0);
      assertEquals(0, rOCharacter0.getArch_calls());
  }

  @Test
  public void test90()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      int int0 = rOCharacter0.getPet_id();
      assertEquals(0, int0);
  }

  @Test
  public void test91()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setClothes_color((short)0);
      assertEquals(0, rOCharacter0.getClothes_color());
  }

  @Test
  public void test92()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      rOCharacter0.getClass_();
  }

  @Test
  public void test93()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      Hotkey[] hotkeyArray0 = rOCharacter0.getHotkeys();
      assertNull(hotkeyArray0);
  }

  @Test
  public void test94()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setSlot(0);
      assertEquals(0, rOCharacter0.getSlot());
  }

  @Test
  public void test95()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      int int0 = rOCharacter0.getChild();
      assertEquals(0, int0);
  }

  @Test
  public void test96()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      int int0 = rOCharacter0.getOption();
      assertEquals(0, int0);
  }

  @Test
  public void test97()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      Friend[] friendArray0 = new Friend[2];
      rOCharacter0.setFriends(friendArray0);
      assertEquals(0, rOCharacter0.getStr());
  }

  @Test
  public void test98()  throws Throwable  {
      PersistenteData<IndexedFastMap<Integer, ROCharacter>> persistenteData0 = ROCharacter.getPersistenceMethod();
      assertNull(persistenteData0);
  }

  @Test
  public void test99()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setDex((short)0);
      assertEquals(0, rOCharacter0.getDex());
  }

  @Test
  public void test100()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      int int0 = rOCharacter0.getParty_id();
      assertEquals(0, int0);
  }

  @Test
  public void test101()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      int int0 = rOCharacter0.getMax_hp();
      assertEquals(0, int0);
  }

  @Test
  public void test102()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setAgi((short) (-421));
      assertEquals(-421, rOCharacter0.getAgi());
  }

  @Test
  public void test103()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      Skill skill0 = new Skill((short)1639, (short)1639);
      rOCharacter0.addSkill(skill0);
      assertEquals(0, rOCharacter0.getHp());
  }

  @Test
  public void test104()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setZeny((int) (short)0);
      assertEquals(0, rOCharacter0.getZeny());
  }

  @Test
  public void test105()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      int int0 = rOCharacter0.getPartner_id();
      assertEquals(0, int0);
  }

  @Test
  public void test106()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      int int0 = rOCharacter0.getFather();
      assertEquals(0, int0);
  }

  @Test
  public void test107()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setSpear_calls(0);
      assertEquals(0, rOCharacter0.getSpear_calls());
  }

  @Test
  public void test108()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      short short0 = rOCharacter0.getLuk();
      assertEquals((short)0, short0);
  }

  @Test
  public void test109()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      int int0 = rOCharacter0.getBase_exp();
      assertEquals(0, int0);
  }

  @Test
  public void test110()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      Point point0 = rOCharacter0.getLast_point();
      assertNull(point0);
  }

  @Test
  public void test111()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      short short0 = rOCharacter0.getClothes_color();
      assertEquals((short)0, short0);
  }

  @Test
  public void test112()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      int int0 = rOCharacter0.getHom_id();
      assertEquals(0, int0);
  }

  @Test
  public void test113()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setSword_faith((int) (short)1496);
      assertEquals(1496, rOCharacter0.getSword_faith());
  }

  @Test
  public void test114()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setSkill_point((int) (short)0);
      assertEquals(0, rOCharacter0.getSkill_point());
  }

  @Test
  public void test115()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      rOCharacter0.setSave_point((Point) null);
      assertEquals(0, rOCharacter0.getSex());
  }

  @Test
  public void test116()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      int int0 = rOCharacter0.getSex();
      assertEquals(0, int0);
  }

  @Test
  public void test117()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setPartner_id(0);
      assertEquals(0, rOCharacter0.getPartner_id());
  }

  @Test
  public void test118()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setMapport(0);
      assertEquals(0, rOCharacter0.getMapport());
  }

  @Test
  public void test119()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      FastTable<Item> fastTable0 = new FastTable<Item>();
      rOCharacter0.setCart(fastTable0);
      assertEquals(0, rOCharacter0.getIntel());
  }

  @Test
  public void test120()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      Friend[] friendArray0 = rOCharacter0.getFriends();
      assertNotNull(friendArray0);
  }

  @Test
  public void test121()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      int int0 = rOCharacter0.getSpear_calls();
      assertEquals(0, int0);
  }

  @Test
  public void test122()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      short short0 = rOCharacter0.getManner();
      assertEquals((short)0, short0);
  }

  @Test
  public void test123()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      rOCharacter0.setLast_point((Point) null);
      assertNull(rOCharacter0.getName());
  }

  @Test
  public void test124()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      int int0 = rOCharacter0.getArch_faith();
      assertEquals(0, int0);
  }

  @Test
  public void test125()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      short short0 = rOCharacter0.getDex();
      assertEquals((short)0, short0);
  }

  @Test
  public void test126()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setSpear_faith(8);
      assertEquals(8, rOCharacter0.getSpear_faith());
  }

  @Test
  public void test127()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      short short0 = rOCharacter0.getHair_color();
      assertEquals((short)0, short0);
  }

  @Test
  public void test128()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      rOCharacter0.addCartItem((Item) null);
      assertEquals(0, rOCharacter0.getWeapon());
  }

  @Test
  public void test129()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setArch_faith((int) (short) (-1569));
      assertEquals(-1569, rOCharacter0.getArch_faith());
  }

  @Test
  public void test130()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setWeapon((short)0);
      assertEquals(0, rOCharacter0.getWeapon());
  }

  @Test
  public void test131()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      FastTable<Skill> fastTable0 = rOCharacter0.getSkill();
      assertEquals(true, fastTable0.isEmpty());
  }

  @Test
  public void test132()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      FastTable<Point> fastTable0 = new FastTable<Point>();
      rOCharacter0.setMemoPoints(fastTable0);
      assertEquals(0, rOCharacter0.getHom_id());
  }

  @Test
  public void test133()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setPet_id(1);
      assertEquals(1, rOCharacter0.getPet_id());
  }

  @Test
  public void test134()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      int int0 = rOCharacter0.getMer_id();
      assertEquals(0, int0);
  }

  @Test
  public void test135()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      // Undeclared exception!
      try {
        rOCharacter0.getCartItem(14);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test136()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setBase_exp((int) (short)0);
      assertEquals(0, rOCharacter0.getBase_exp());
  }

  @Test
  public void test137()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      rOCharacter0.addGlobalReg("ZeoP~!FO(", "ZeoP~!FO(");
      assertEquals(0, rOCharacter0.getClothes_color());
  }

  @Test
  public void test138()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setShow_equip(false);
      assertEquals(false, rOCharacter0.isShow_equip());
  }

  @Test
  public void test139()  throws Throwable  {
      ROCharacter rOCharacter0 = new ROCharacter();
      assertNotNull(rOCharacter0);
      
      rOCharacter0.setManner((short)337);
      assertEquals(337, rOCharacter0.getManner());
  }

  @Test
  public void test140()  throws Throwable  {
      ROCharacter.JOB rOCharacter_JOB0 = ROCharacter.JOB.parseFromValue(0);
      assertEquals(ROCharacter.JOB.NOVICE, rOCharacter_JOB0);
  }

  @Test
  public void test141()  throws Throwable  {
      ROCharacter.JOB rOCharacter_JOB0 = ROCharacter.JOB.parseFromValue(14);
      assertEquals(ROCharacter.JOB.CRUSADER, rOCharacter_JOB0);
  }

  @Test
  public void test142()  throws Throwable  {
      ROCharacter.JOB rOCharacter_JOB0 = ROCharacter.JOB.parseFromValue(1);
      assertEquals(ROCharacter.JOB.SWORDMAN, rOCharacter_JOB0);
  }

  @Test
  public void test143()  throws Throwable  {
      ROCharacter.JOB rOCharacter_JOB0 = ROCharacter.JOB.parseFromValue(4);
      assertEquals(ROCharacter.JOB.ACOLYTE, rOCharacter_JOB0);
  }

  @Test
  public void test144()  throws Throwable  {
      ROCharacter.JOB rOCharacter_JOB0 = ROCharacter.JOB.parseFromValue(8);
      assertEquals(ROCharacter.JOB.PRIEST, rOCharacter_JOB0);
  }

  @Test
  public void test145()  throws Throwable  {
      ROCharacter.JOB rOCharacter_JOB0 = ROCharacter.JOB.parseFromValue(11);
      assertEquals(ROCharacter.JOB.HUNTER, rOCharacter_JOB0);
  }

  @Test
  public void test146()  throws Throwable  {
      ROCharacter.JOB rOCharacter_JOB0 = ROCharacter.JOB.parseFromValue(16);
      assertEquals(ROCharacter.JOB.SAGE, rOCharacter_JOB0);
  }

  @Test
  public void test147()  throws Throwable  {
      ROCharacter.JOB rOCharacter_JOB0 = ROCharacter.JOB.parseFromValue((int) '\u0013');
      assertEquals(ROCharacter.JOB.BARD, rOCharacter_JOB0);
  }

  @Test
  public void test148()  throws Throwable  {
      ROCharacter.JOB rOCharacter_JOB0 = ROCharacter.JOB.parseFromValue(23);
      assertEquals(ROCharacter.JOB.SUPER_NOVICE, rOCharacter_JOB0);
  }

  @Test
  public void test149()  throws Throwable  {
      ROCharacter.JOB rOCharacter_JOB0 = ROCharacter.JOB.parseFromValue(27);
      assertEquals(ROCharacter.JOB.SUMMER, rOCharacter_JOB0);
  }

  @Test
  public void test150()  throws Throwable  {
      ROCharacter.JOB rOCharacter_JOB0 = ROCharacter.JOB.parseFromValue(4004);
      assertEquals(ROCharacter.JOB.ARCHER_HIGH, rOCharacter_JOB0);
  }

  @Test
  public void test151()  throws Throwable  {
      ROCharacter.JOB rOCharacter_JOB0 = ROCharacter.JOB.parseFromValue(4012);
      assertEquals(ROCharacter.JOB.SNIPER, rOCharacter_JOB0);
  }

  @Test
  public void test152()  throws Throwable  {
      ROCharacter.JOB rOCharacter_JOB0 = ROCharacter.JOB.parseFromValue(4028);
      assertEquals(ROCharacter.JOB.BABY_MERCHANT, rOCharacter_JOB0);
  }

  @Test
  public void test153()  throws Throwable  {
      ROCharacter.JOB rOCharacter_JOB0 = ROCharacter.JOB.parseFromValue(4034);
      assertEquals(ROCharacter.JOB.BABY_HUNTER, rOCharacter_JOB0);
  }

  @Test
  public void test154()  throws Throwable  {
      ROCharacter.JOB rOCharacter_JOB0 = ROCharacter.JOB.parseFromValue(4045);
      assertEquals(ROCharacter.JOB.SUPER_BABY, rOCharacter_JOB0);
  }

  @Test
  public void test155()  throws Throwable  {
      ROCharacter.JOB.parseFromValue((int) (short) (-1569));
  }
}
