/*
 * This file was automatically generated by EvoSuite
 */

package org.javathena.core.utiles;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.UnsupportedEncodingException;
import java.net.Inet4Address;
import java.net.UnknownHostException;
import java.security.NoSuchAlgorithmException;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.NoSuchElementException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.runtime.System;
import org.evosuite.sandbox.Sandbox;
import org.javathena.core.utiles.Functions;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class FunctionsEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      Functions.showFatalError("1cevR??flcuVpAQ7C");
  }

  @Test
  public void test1()  throws Throwable  {
      Functions.showSQL("&*:%%bxh&_D-cv;Ubtt");
  }

  @Test
  public void test2()  throws Throwable  {
      Functions.showDebug("WMREvm\"= ");
  }

  @Test
  public void test3()  throws Throwable  {
      Functions.showInfo("");
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          Inet4Address inet4Address0 = (Inet4Address)Functions.stringToInet("=|/K");
          assertEquals(false, inet4Address0.isMulticastAddress());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
      Functions.showWarning("");
  }

  @Test
  public void test6()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try {
        Functions.showFatalError("AsxGBYA'/Tf(8", objectArray0);
        fail("Expecting exception: System.SystemExitException");
      } catch(System.SystemExitException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      Object[] objectArray0 = new Object[13];
      Functions.showNotice("\n", objectArray0);
  }

  @Test
  public void test8()  throws Throwable  {
      Functions.showNotice("off");
  }

  @Test
  public void test9()  throws Throwable  {
      Object[] objectArray0 = new Object[13];
      Functions.showSQL("u]+hH1qr0", objectArray0);
  }

  @Test
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Functions.showMessage("", objectArray0);
  }

  @Test
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Functions.showDebug("oui", objectArray0);
  }

  @Test
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Functions.showInfo("AsxGBYA'/Tf(8", objectArray0);
  }

  @Test
  public void test13()  throws Throwable  {
      Functions.showStatus("b/.}(Zk19");
  }

  @Test
  public void test14()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Functions.showStatus("", objectArray0);
  }

  @Test
  public void test15()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Functions.showError("", objectArray0);
  }

  @Test
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      String string0 = Functions.byteTabToString(142, 142, byteArray0);
      assertEquals("", string0);
  }

  @Test
  public void test17()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Functions.showWarning("WD t.-hj\"#-R5D", objectArray0);
  }

  @Test
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try {
        Functions.stringToCalendar("UZ+!pC&m\"o|f[?c ");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 1
         */
      }
  }

  @Test
  public void test19()  throws Throwable  {
      Functions.showError("WMREvm\"= ");
  }

  @Test
  public void test20()  throws Throwable  {
      Functions.showMessage("\n");
  }

  @Test
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Functions.intToByteTab(1, 4095, byteArray0);
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = Functions.getMd5String();
      assertEquals("401459215617618171442532396", string0);
      assertNotNull(string0);
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = Functions.getValueFromConfigString("\n", "\n");
      assertNull(string0);
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = Functions.charSexToInt('F');
      assertEquals(0, int0);
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = Functions.charSexToInt('M');
      assertEquals(1, int0);
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = Functions.charSexToInt('S');
      assertEquals(2, int0);
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = Functions.charSexToInt('f');
      assertEquals(0, int0);
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = Functions.charSexToInt('s');
      assertEquals(2, int0);
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = Functions.charSexToInt('l');
      assertEquals((-1), int0);
  }

  @Test
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Functions.intToByteTab((int) (byte)70, (int) 'S', (int) 'S', byteArray0);
  }

  @Test
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[6];
      Functions.intToIntTab((-195), (-195), (-603), intArray0);
  }

  @Test
  public void test32()  throws Throwable  {
      int[] intArray0 = new int[10];
      Functions.intToIntTab(0, 0, 1207, intArray0);
  }

  @Test
  public void test33()  throws Throwable  {
      int[] intArray0 = new int[8];
      // Undeclared exception!
      try {
        Functions.intToIntTab((-665), (-1738), (-665), intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * -1738
         */
      }
  }

  @Test
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      double double0 = Functions.byteTabToDouble(0, 0, byteArray0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try {
        Functions.byteTabToDouble((-6), 759, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * -6
         */
      }
  }

  @Test
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      int int0 = Functions.byteTabToInt((int) (byte) (-39), (int) (byte) (-39), byteArray0);
      assertEquals(0, int0);
  }

  @Test
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try {
        Functions.byteTabToInt((-1144), 0, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * -1144
         */
      }
  }

  @Test
  public void test38()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance();
      String string0 = Functions.calendarToString((Calendar) gregorianCalendar0);
      assertEquals("java.util.GregorianCalendar[time=1372719785738,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Belfast\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/Belfast,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=3,SECOND=5,MILLISECOND=738,ZONE_OFFSET=0,DST_OFFSET=3600000]", gregorianCalendar0.toString());
      assertEquals("2013-06-02 00:03:05:38", string0);
  }

  @Test
  public void test39()  throws Throwable  {
      String string0 = Functions.calendarToString((Calendar) null);
      assertEquals("0", string0);
      assertNotNull(string0);
  }

  @Test
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      Functions.stringToByteTable("Hogn_lo_C8", byteArray0, (int) (byte)0, 0);
  }

  @Test
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try {
        Functions.stringToByteTable("b/.}(Zk19", byteArray0, (-786), (int) (byte)70);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * -786
         */
      }
  }

  @Test
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Functions.stringToByteTable("", byteArray0, (int) (byte) (-38), (int) (byte)0);
  }

  @Test
  public void test43()  throws Throwable  {
      int int0 = Functions.unsignedByteToInt((byte)11);
      assertEquals(11, int0);
  }

  @Test
  public void test44()  throws Throwable  {
      int int0 = Functions.unsignedByteToInt((byte) (-114));
      assertEquals(142, int0);
  }

  @Test
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      String string0 = Functions.unsignedBytesToString(byteArray0, 1, 0);
      assertEquals("", string0);
  }

  @Test
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)34;
      String string0 = Functions.unsignedBytesToString(byteArray0, 0, 144);
      assertEquals("\"", string0);
      assertNotNull(string0);
  }

  @Test
  public void test47()  throws Throwable  {
      int int0 = Functions.parseByteToInt((byte) (-114));
      assertEquals(142, int0);
  }

  @Test
  public void test48()  throws Throwable  {
      byte byte0 = Functions.parseIntToByte(0);
      assertEquals((byte)0, byte0);
  }

  @Test
  public void test49()  throws Throwable  {
      try {
        Functions.parseIntToByte(1309);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * Value doit etre inferieur a 256 et superieur a -128
         */
      }
  }

  @Test
  public void test50()  throws Throwable  {
      try {
        Functions.parseIntToByte((-195));
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * Value doit etre inferieur a 256 et superieur a -128
         */
      }
  }

  @Test
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Functions.doubleToByteTab(0L, (-10), (-10), byteArray0);
  }

  @Test
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try {
        Functions.doubleToByteTab(0L, 0, 765, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test53()  throws Throwable  {
      int[] intArray0 = new int[1];
      Functions.longToIntTab((long) 'F', (int) 'F', (int) 'F', intArray0);
  }

  @Test
  public void test54()  throws Throwable  {
      int[] intArray0 = new int[8];
      // Undeclared exception!
      try {
        Functions.longToIntTab((-630L), (-9), 56, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * -9
         */
      }
  }

  @Test
  public void test55()  throws Throwable  {
      boolean boolean0 = Functions.e_mail_check("//");
      assertEquals(false, boolean0);
  }

  @Test
  public void test56()  throws Throwable  {
      boolean boolean0 = Functions.e_mail_check("A(l*abzO$dJcJA|f fR");
      assertEquals(false, boolean0);
  }

  @Test
  public void test57()  throws Throwable  {
      boolean boolean0 = Functions.e_mail_check("cv@Y;HUiLME_ZM");
      assertEquals(false, boolean0);
  }

  @Test
  public void test58()  throws Throwable  {
      boolean boolean0 = Functions.e_mail_check("pV.@");
      assertEquals(true, boolean0);
  }

  @Test
  public void test59()  throws Throwable  {
      String string0 = Functions.encryptePassword("", "", "^Y2w[S_", (-20));
      assertNull(string0);
  }

  @Test
  public void test60()  throws Throwable  {
      String string0 = Functions.encryptePassword("oui", "oui", "oui", 2);
      assertEquals("\uFFFD%0W%\uFFFD\u05026\uFFFD:o\uFFFD\uFFFD|8", string0);
      assertNotNull(string0);
  }

  @Test
  public void test61()  throws Throwable  {
      boolean boolean0 = Functions.checkEncryptedPassword("1cevR??flcuVpAQ7C", "1cevR??flcuVpAQ7C", "1cevR??flcuVpAQ7C", 1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test62()  throws Throwable  {
      boolean boolean0 = Functions.checkEncryptedPassword("", "^Y2w[S_", "", (-1374));
      assertEquals(false, boolean0);
  }

  @Test
  public void test63()  throws Throwable  {
      // Undeclared exception!
      try {
        Functions.ipStringToByteTab("1");
        fail("Expecting exception: NoSuchElementException");
      } catch(NoSuchElementException e) {
      }
  }

  @Test
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try {
        Functions.ipStringToByteTab("Q_gI*pn$", byteArray0, (int) (byte)0);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
        /*
         * For input string: \"Q_gI*pn$\"
         */
      }
  }

  @Test
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[36];
      byte[] byteArray1 = Functions.subByteTab(byteArray0, (int) (byte)0, (int) (byte)8);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test
  public void test66()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          // Undeclared exception!
          try {
            Functions.open_log("/.(Zk19");
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission /.(Zk19 write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.createNewFile(File.java:882)
             * org.javathena.core.utiles.Functions.open_log(Functions.java:556)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test67()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          // Undeclared exception!
          try {
            Functions.open_log("b/.}(Zk19");
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission b write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.mkdir(File.java:1155)
             * org.javathena.core.utiles.Functions.open_log(Functions.java:554)
             * sun.reflect.GeneratedMethodAccessor101.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try {
        Functions.byteTabToString((int) (byte)0, 512, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-90);
      String string0 = Functions.byteTabToString(0, 998, byteArray0, true);
      assertNotNull(string0);
      assertEquals("\uFFA6", string0);
  }

  @Test
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      short short0 = Functions.byteTabToShort((-1), (-1), byteArray0);
      assertEquals((short)0, short0);
  }

  @Test
  public void test71()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try {
        Functions.byteTabToShort(8, 910, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 8
         */
      }
  }

  @Test
  public void test72()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Functions.byteTableToByteTab(byteArray0, (int) (byte)0, (int) (byte)0, byteArray0);
  }

  @Test
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try {
        Functions.byteTableToByteTab(byteArray0, (int) (byte)0, 11, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 9
         */
      }
  }

  @Test
  public void test74()  throws Throwable  {
      char char0 = Functions.byteSexToChar((byte)70);
      assertEquals('S', char0);
  }

  @Test
  public void test75()  throws Throwable  {
      char char0 = Functions.byteSexToChar((byte)0);
      assertEquals('F', char0);
  }

  @Test
  public void test76()  throws Throwable  {
      char char0 = Functions.byteSexToChar((byte)1);
      assertEquals('M', char0);
  }

  @Test
  public void test77()  throws Throwable  {
      int int0 = Functions.config_switch("");
      assertEquals((-1), int0);
  }

  @Test
  public void test78()  throws Throwable  {
      int int0 = Functions.config_switch("oui");
      assertEquals(1, int0);
  }

  @Test
  public void test79()  throws Throwable  {
      int int0 = Functions.config_switch("nein");
      assertEquals(0, int0);
  }
}
