/*
 * This file was automatically generated by EvoSuite
 */

package org.javathena.utiles;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.javathena.core.utiles.ACO;
import org.javathena.utiles.ConfigurationManagement;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ConfigurationManagementEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ConfigurationManagement.addChar_id_count();
  }

  @Test
  public void test1()  throws Throwable  {
      int[] intArray0 = new int[6];
      ConfigurationManagement.setSubneti(intArray0);
  }

  @Test
  public void test2()  throws Throwable  {
      long long0 = ConfigurationManagement.getNew_reg_tick();
      assertEquals(0L, long0);
  }

  @Test
  public void test3()  throws Throwable  {
      ACO aCO0 = ACO.MUTUAL_FAILTURE;
      ConfigurationManagement.setAccess_order(aCO0);
  }

  @Test
  public void test4()  throws Throwable  {
      ConfigurationManagement.setServer_num((-1));
  }

  @Test
  public void test5()  throws Throwable  {
      int[] intArray0 = new int[3];
      ConfigurationManagement.setSubnetmaski(intArray0);
  }

  @Test
  public void test6()  throws Throwable  {
      ConfigurationManagement.addGMMax(0);
  }

  @Test
  public void test7()  throws Throwable  {
      String string0 = ConfigurationManagement.getBackup_txt_flag();
      assertNull(string0);
  }

  @Test
  public void test8()  throws Throwable  {
      boolean boolean0 = ConfigurationManagement.isConsole_silent();
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = ConfigurationManagement.getChar_id_count();
      assertEquals((-1), int0);
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = ConfigurationManagement.getAccess_denynum();
      assertEquals(0, int0);
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = ConfigurationManagement.getEmail_creation();
      assertEquals(0, int0);
  }

  @Test
  public void test12()  throws Throwable  {
      ConfigurationManagement.setTimestamp_format((String) null);
  }

  @Test
  public void test13()  throws Throwable  {
      long long0 = ConfigurationManagement.getStartLimitedTime();
      assertEquals((-1L), long0);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = ConfigurationManagement.getAccess_deny();
      assertNull(string0);
  }

  @Test
  public void test15()  throws Throwable  {
      long long0 = ConfigurationManagement.getNum_regs();
      assertEquals(0L, long0);
  }

  @Test
  public void test16()  throws Throwable  {
      ConfigurationManagement.setStart_limited_time((long) (-276));
  }

  @Test
  public void test17()  throws Throwable  {
      ConfigurationManagement.setChar_id_count(0);
  }

  @Test
  public void test18()  throws Throwable  {
      ConfigurationManagement.setLogin_ip_str((String) null);
  }

  @Test
  public void test19()  throws Throwable  {
      ConfigurationManagement.addGMMax();
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = ConfigurationManagement.getScdata_txt();
      assertNull(string0);
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = ConfigurationManagement.getAutosave_interval();
      assertEquals(0, int0);
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = ConfigurationManagement.getChar_txt();
      assertNull(string0);
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = ConfigurationManagement.getFriends_txt();
      assertNull(string0);
  }

  @Test
  public void test24()  throws Throwable  {
      ConfigurationManagement.setAuth_before_save_file(0);
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = ConfigurationManagement.getWisp_server_name();
      assertNull(string0);
  }

  @Test
  public void test26()  throws Throwable  {
      ConfigurationManagement.setLan_char_ip((String) null);
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = ConfigurationManagement.getAuth_before_save_file();
      assertEquals(0, int0);
  }

  @Test
  public void test28()  throws Throwable  {
      int[] intArray0 = ConfigurationManagement.getSubnetmaski();
      assertNotNull(intArray0);
  }

  @Test
  public void test29()  throws Throwable  {
      ConfigurationManagement.setStartLimitedTime((long) 0);
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = ConfigurationManagement.getLan_char_ip();
      assertNull(string0);
  }

  @Test
  public void test31()  throws Throwable  {
      ConfigurationManagement.setNew_reg_tick(448L);
  }

  @Test
  public void test32()  throws Throwable  {
      ConfigurationManagement.setConsole_silent(true);
  }

  @Test
  public void test33()  throws Throwable  {
      int int0 = ConfigurationManagement.getAutosave_time();
      assertEquals(0, int0);
  }

  @Test
  public void test34()  throws Throwable  {
      String string0 = ConfigurationManagement.getLogin_ip_str();
      assertNull(string0);
  }

  @Test
  public void test35()  throws Throwable  {
      ConfigurationManagement.setAccess_denynum(1);
  }

  @Test
  public void test36()  throws Throwable  {
      int[] intArray0 = ConfigurationManagement.getSubneti();
      assertNotNull(intArray0);
  }

  @Test
  public void test37()  throws Throwable  {
      ConfigurationManagement.addChar_id_count(0);
  }

  @Test
  public void test38()  throws Throwable  {
      ConfigurationManagement.addNum_regs((long) 3);
  }

  @Test
  public void test39()  throws Throwable  {
      ACO aCO0 = ConfigurationManagement.getAccess_order();
      assertEquals(ACO.MUTUAL_FAILTURE, aCO0);
  }

  @Test
  public void test40()  throws Throwable  {
      int int0 = ConfigurationManagement.getGMMax();
      assertEquals(0, int0);
  }

  @Test
  public void test41()  throws Throwable  {
      String string0 = ConfigurationManagement.getMax_connect_user();
      assertNull(string0);
  }

  @Test
  public void test42()  throws Throwable  {
      int int0 = ConfigurationManagement.getAccess_allownum();
      assertEquals(0, int0);
  }

  @Test
  public void test43()  throws Throwable  {
      ConfigurationManagement.setAccess_allow((String) null);
  }

  @Test
  public void test44()  throws Throwable  {
      ConfigurationManagement.setNum_regs(0L);
  }

  @Test
  public void test45()  throws Throwable  {
      int int0 = ConfigurationManagement.lesslessAuth_before_save_file();
      assertEquals((-1), int0);
  }

  @Test
  public void test46()  throws Throwable  {
      ConfigurationManagement.setGMMax((-1));
  }

  @Test
  public void test47()  throws Throwable  {
      ConfigurationManagement.setAccess_allownum((-276));
  }

  @Test
  public void test48()  throws Throwable  {
      String string0 = ConfigurationManagement.getAccess_allow();
      assertNull(string0);
  }

  @Test
  public void test49()  throws Throwable  {
      ConfigurationManagement.addNum_regs();
  }

  @Test
  public void test50()  throws Throwable  {
      ConfigurationManagement.setAccess_deny("y>y7Bq;2m+|");
  }

  @Test
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try {
        ConfigurationManagement.login_lan_config_read("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 3
         */
      }
  }

  @Test
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try {
        ConfigurationManagement.login_config_readTXT((String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 3
         */
      }
  }

  @Test
  public void test53()  throws Throwable  {
      boolean boolean0 = ConfigurationManagement.yesNoOnOffToBoolean("NO");
      assertEquals(false, boolean0);
  }

  @Test
  public void test54()  throws Throwable  {
      boolean boolean0 = ConfigurationManagement.yesNoOnOffToBoolean("OFF");
      assertEquals(false, boolean0);
  }

  @Test
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try {
        ConfigurationManagement.yesNoOnOffToBoolean("yET");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * anw doit etre egale a yes/no/on/off
         */
      }
  }

  @Test
  public void test56()  throws Throwable  {
      ConfigurationManagement.display_conf_warnings();
  }

  @Test
  public void test57()  throws Throwable  {
      ConfigurationManagement.getLoginAthenaConf();
      ConfigurationManagement.yesNoOnOffToBoolean("ON");
      ConfigurationManagement.getGm_allow_level();
      ConfigurationManagement.display_conf_warnings();
  }

  @Test
  public void test58()  throws Throwable  {
      int int0 = ConfigurationManagement.login_config_readXML("/");
      assertEquals(0, int0);
  }

  @Test
  public void test59()  throws Throwable  {
      int int0 = ConfigurationManagement.login_config_readXML("ON");
      assertEquals(0, int0);
  }
}
