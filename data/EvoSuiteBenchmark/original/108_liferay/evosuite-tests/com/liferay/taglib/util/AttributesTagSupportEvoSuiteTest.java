/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.taglib.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.taglib.util.AttributesTagSupport;
import java.util.Map;
import javax.servlet.http.HttpServletRequest;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class AttributesTagSupportEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      AttributesTagSupport attributesTagSupport0 = new AttributesTagSupport();
      attributesTagSupport0.setScopedAttribute("", "");
      assertEquals(0, attributesTagSupport0.doAfterBody());
  }

  @Test
  public void test1()  throws Throwable  {
      AttributesTagSupport attributesTagSupport0 = new AttributesTagSupport();
      attributesTagSupport0.clearDynamicAttributes();
      assertEquals(0, attributesTagSupport0.doAfterBody());
  }

  @Test
  public void test2()  throws Throwable  {
      AttributesTagSupport attributesTagSupport0 = new AttributesTagSupport();
      Map<String, Object> map0 = attributesTagSupport0.getDynamicAttributes();
      assertEquals(0, map0.size());
  }

  @Test
  public void test3()  throws Throwable  {
      AttributesTagSupport attributesTagSupport0 = new AttributesTagSupport();
      attributesTagSupport0.setDynamicAttribute("EU", "EU", "QEUE");
      assertEquals(0, attributesTagSupport0.doAfterBody());
  }

  @Test
  public void test4()  throws Throwable  {
      AttributesTagSupport attributesTagSupport0 = new AttributesTagSupport();
      attributesTagSupport0.release();
      assertEquals(0, attributesTagSupport0.doAfterBody());
  }

  @Test
  public void test5()  throws Throwable  {
      AttributesTagSupport attributesTagSupport0 = new AttributesTagSupport();
      String string0 = attributesTagSupport0.getAttributeNamespace();
      assertEquals("", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      AttributesTagSupport attributesTagSupport0 = new AttributesTagSupport();
      Map<String, Object> map0 = attributesTagSupport0.getScopedAttributes();
      assertEquals(true, map0.isEmpty());
  }

  @Test
  public void test7()  throws Throwable  {
      AttributesTagSupport attributesTagSupport0 = new AttributesTagSupport();
      attributesTagSupport0.setAttributeNamespace("/PJh`3fp[TH6F9Z. h");
      Byte byte0 = new Byte((byte) (-109));
      // Undeclared exception!
      try {
        attributesTagSupport0.setNamespacedAttribute((HttpServletRequest) null, "/PJh`3fp[TH6F9Z. h", (Object) byte0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      AttributesTagSupport attributesTagSupport0 = new AttributesTagSupport();
      // Undeclared exception!
      try {
        attributesTagSupport0.setNamespacedAttribute((HttpServletRequest) null, " th{key ", (Object) "");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      AttributesTagSupport attributesTagSupport0 = new AttributesTagSupport();
      Boolean boolean0 = Boolean.valueOf("");
      // Undeclared exception!
      try {
        attributesTagSupport0.setNamespacedAttribute((HttpServletRequest) null, "", (Object) boolean0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      AttributesTagSupport attributesTagSupport0 = new AttributesTagSupport();
      Byte byte0 = new Byte((byte) (-109));
      // Undeclared exception!
      try {
        attributesTagSupport0.setNamespacedAttribute((HttpServletRequest) null, "/PJh`3fp[TH6F9Z. h", (Object) byte0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
