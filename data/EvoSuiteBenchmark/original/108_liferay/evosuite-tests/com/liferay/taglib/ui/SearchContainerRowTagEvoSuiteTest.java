/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.taglib.ui;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.dao.search.ResultRow;
import com.liferay.portal.kernel.repository.model.RepositoryModel;
import com.liferay.portal.model.BaseModel;
import com.liferay.taglib.ui.SearchContainerRowTag;
import com.liferay.taglib.ui.SearchContainerTag;
import com.liferay.taglib.util.ParamAndPropertyAncestorTagImpl;
import java.util.List;
import java.util.Map;
import javax.servlet.ServletContext;
import javax.servlet.jsp.JspException;
import javax.servlet.jsp.PageContext;
import javax.servlet.jsp.tagext.BodyTag;
import org.jfree.data.xy.XYDatasetTableModel;
import org.junit.BeforeClass;
import org.springframework.mock.web.MockPageContext;

@RunWith(EvoSuiteRunner.class)
public class SearchContainerRowTagEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SearchContainerRowTag<BaseModel<String>> searchContainerRowTag0 = new SearchContainerRowTag<BaseModel<String>>();
      String string0 = searchContainerRowTag0.getIndexVar();
      assertEquals("index", string0);
      assertNotNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      SearchContainerRowTag<ParamAndPropertyAncestorTagImpl> searchContainerRowTag0 = new SearchContainerRowTag<ParamAndPropertyAncestorTagImpl>();
      searchContainerRowTag0.setRowIdProperty("row");
      assertNull(searchContainerRowTag0.getClassName());
  }

  @Test
  public void test2()  throws Throwable  {
      SearchContainerRowTag<BodyTag> searchContainerRowTag0 = new SearchContainerRowTag<BodyTag>();
      searchContainerRowTag0.setKeyProperty("clssame");
      assertEquals("clssame", searchContainerRowTag0.getKeyProperty());
  }

  @Test
  public void test3()  throws Throwable  {
      SearchContainerRowTag<BodyTag> searchContainerRowTag0 = new SearchContainerRowTag<BodyTag>();
      searchContainerRowTag0.setRowVar("clssame");
      assertNull(searchContainerRowTag0.getClassName());
  }

  @Test
  public void test4()  throws Throwable  {
      SearchContainerRowTag<BodyTag> searchContainerRowTag0 = new SearchContainerRowTag<BodyTag>();
      ResultRow resultRow0 = new ResultRow((Object) "RadioButtonUI", "RadioButtonUI", 1);
      searchContainerRowTag0.setRow(resultRow0);
      searchContainerRowTag0.setHeaderNamesAssigned(true);
      // Undeclared exception!
      try {
        searchContainerRowTag0.doAfterBody();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      SearchContainerRowTag<String> searchContainerRowTag0 = new SearchContainerRowTag<String>();
      searchContainerRowTag0.setOrderableHeaders((Map<String, String>) null);
      assertEquals("model", searchContainerRowTag0.getModelVar());
  }

  @Test
  public void test6()  throws Throwable  {
      SearchContainerRowTag<String> searchContainerRowTag0 = new SearchContainerRowTag<String>();
      boolean boolean0 = searchContainerRowTag0.isStringKey();
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      SearchContainerRowTag<ParamAndPropertyAncestorTagImpl> searchContainerRowTag0 = new SearchContainerRowTag<ParamAndPropertyAncestorTagImpl>();
      searchContainerRowTag0.setIndexVar("index");
      assertEquals(false, searchContainerRowTag0.isStringKey());
  }

  @Test
  public void test8()  throws Throwable  {
      SearchContainerRowTag<Integer> searchContainerRowTag0 = new SearchContainerRowTag<Integer>();
      boolean boolean0 = searchContainerRowTag0.isHeaderNamesAssigned();
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      SearchContainerRowTag<SearchContainerTag<ParamAndPropertyAncestorTagImpl>> searchContainerRowTag0 = new SearchContainerRowTag<SearchContainerTag<ParamAndPropertyAncestorTagImpl>>();
      boolean boolean0 = searchContainerRowTag0.isBold();
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      SearchContainerRowTag<ParamAndPropertyAncestorTagImpl> searchContainerRowTag0 = new SearchContainerRowTag<ParamAndPropertyAncestorTagImpl>();
      boolean boolean0 = searchContainerRowTag0.isEscapedModel();
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      SearchContainerRowTag<BodyTag> searchContainerRowTag0 = new SearchContainerRowTag<BodyTag>();
      String string0 = searchContainerRowTag0.getKeyProperty();
      assertNull(string0);
  }

  @Test
  public void test12()  throws Throwable  {
      SearchContainerRowTag<Integer> searchContainerRowTag0 = new SearchContainerRowTag<Integer>();
      searchContainerRowTag0.setModelVar("");
      assertEquals(false, searchContainerRowTag0.isBold());
  }

  @Test
  public void test13()  throws Throwable  {
      SearchContainerRowTag<XYDatasetTableModel> searchContainerRowTag0 = new SearchContainerRowTag<XYDatasetTableModel>();
      searchContainerRowTag0.setEscapedModel(false);
      assertEquals(false, searchContainerRowTag0.isEscapedModel());
  }

  @Test
  public void test14()  throws Throwable  {
      SearchContainerRowTag<SearchContainerTag<BodyTag>> searchContainerRowTag0 = new SearchContainerRowTag<SearchContainerTag<BodyTag>>();
      String string0 = searchContainerRowTag0.getModelVar();
      assertEquals("model", string0);
      assertNotNull(string0);
  }

  @Test
  public void test15()  throws Throwable  {
      SearchContainerRowTag<BodyTag> searchContainerRowTag0 = new SearchContainerRowTag<BodyTag>();
      searchContainerRowTag0.setHeaderNamesAssigned(true);
      // Undeclared exception!
      try {
        searchContainerRowTag0.doAfterBody();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test16()  throws Throwable  {
      SearchContainerRowTag<RepositoryModel<String>> searchContainerRowTag0 = new SearchContainerRowTag<RepositoryModel<String>>();
      ResultRow resultRow0 = searchContainerRowTag0.getRow();
      assertNull(resultRow0);
  }

  @Test
  public void test17()  throws Throwable  {
      SearchContainerRowTag<BodyTag> searchContainerRowTag0 = new SearchContainerRowTag<BodyTag>();
      searchContainerRowTag0.setStringKey(true);
      assertEquals(false, searchContainerRowTag0.isStringKey());
  }

  @Test
  public void test18()  throws Throwable  {
      SearchContainerRowTag<SearchContainerTag<BodyTag>> searchContainerRowTag0 = new SearchContainerRowTag<SearchContainerTag<BodyTag>>();
      String string0 = searchContainerRowTag0.getRowVar();
      assertNotNull(string0);
      assertEquals("row", string0);
  }

  @Test
  public void test19()  throws Throwable  {
      SearchContainerRowTag<BaseModel<ParamAndPropertyAncestorTagImpl>> searchContainerRowTag0 = new SearchContainerRowTag<BaseModel<ParamAndPropertyAncestorTagImpl>>();
      searchContainerRowTag0.setBold(true);
      assertEquals(true, searchContainerRowTag0.isBold());
  }

  @Test
  public void test20()  throws Throwable  {
      SearchContainerRowTag<BodyTag> searchContainerRowTag0 = new SearchContainerRowTag<BodyTag>();
      String string0 = searchContainerRowTag0.getClassName();
      assertNull(string0);
  }

  @Test
  public void test21()  throws Throwable  {
      SearchContainerRowTag<BodyTag> searchContainerRowTag0 = new SearchContainerRowTag<BodyTag>();
      List<String> list0 = searchContainerRowTag0.getHeaderNames();
      SearchContainerRowTag<Integer> searchContainerRowTag1 = new SearchContainerRowTag<Integer>();
      searchContainerRowTag1.setHeaderNames(list0);
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test22()  throws Throwable  {
      SearchContainerRowTag<BaseModel<BodyTag>> searchContainerRowTag0 = new SearchContainerRowTag<BaseModel<BodyTag>>();
      searchContainerRowTag0.setClassName("classNae");
      assertEquals("classNae", searchContainerRowTag0.getClassName());
  }

  @Test
  public void test23()  throws Throwable  {
      SearchContainerRowTag<BaseModel<BodyTag>> searchContainerRowTag0 = new SearchContainerRowTag<BaseModel<BodyTag>>();
      // Undeclared exception!
      try {
        searchContainerRowTag0.addParam("classHoverName", "classHoverName");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test24()  throws Throwable  {
      SearchContainerRowTag<SearchContainerTag<Object>> searchContainerRowTag0 = new SearchContainerRowTag<SearchContainerTag<Object>>();
      // Undeclared exception!
      try {
        searchContainerRowTag0.addParam("className", "className");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test25()  throws Throwable  {
      SearchContainerRowTag<String> searchContainerRowTag0 = new SearchContainerRowTag<String>();
      // Undeclared exception!
      try {
        searchContainerRowTag0.addParam("restricted", "restricted");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test26()  throws Throwable  {
      SearchContainerRowTag<RepositoryModel<String>> searchContainerRowTag0 = new SearchContainerRowTag<RepositoryModel<String>>();
      MockPageContext mockPageContext0 = new MockPageContext((ServletContext) null);
      searchContainerRowTag0.setPageContext((PageContext) mockPageContext0);
      // Undeclared exception!
      try {
        searchContainerRowTag0.addParam("\"#DS2U0YV*.T.EMyq", "\"#DS2U0YV*.T.EMyq");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test27()  throws Throwable  {
      SearchContainerRowTag<BodyTag> searchContainerRowTag0 = new SearchContainerRowTag<BodyTag>();
      // Undeclared exception!
      try {
        searchContainerRowTag0.doAfterBody();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test28()  throws Throwable  {
      SearchContainerRowTag<BaseModel<BodyTag>> searchContainerRowTag0 = new SearchContainerRowTag<BaseModel<BodyTag>>();
      int int0 = searchContainerRowTag0.doEndTag();
      assertEquals(false, searchContainerRowTag0.isStringKey());
      assertEquals(false, searchContainerRowTag0.isEscapedModel());
      assertEquals(6, int0);
      assertEquals(false, searchContainerRowTag0.isHeaderNamesAssigned());
      assertEquals("row", searchContainerRowTag0.getRowVar());
      assertEquals("index", searchContainerRowTag0.getIndexVar());
      assertEquals("model", searchContainerRowTag0.getModelVar());
      assertEquals(false, searchContainerRowTag0.isBold());
  }

  @Test
  public void test29()  throws Throwable  {
      SearchContainerRowTag<BaseModel<BodyTag>> searchContainerRowTag0 = new SearchContainerRowTag<BaseModel<BodyTag>>();
      try {
        searchContainerRowTag0.doStartTag();
        fail("Expecting exception: JspException");
      } catch(JspException e) {
        /*
         * Requires liferay-ui:search-container
         */
      }
  }

  @Test
  public void test30()  throws Throwable  {
      SearchContainerRowTag<BaseModel<String>> searchContainerRowTag0 = new SearchContainerRowTag<BaseModel<String>>();
      searchContainerRowTag0.getHeaderNames();
      List<String> list0 = searchContainerRowTag0.getHeaderNames();
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test31()  throws Throwable  {
      SearchContainerRowTag<SearchContainerTag<ParamAndPropertyAncestorTagImpl>> searchContainerRowTag0 = new SearchContainerRowTag<SearchContainerTag<ParamAndPropertyAncestorTagImpl>>();
      Map<String, String> map0 = searchContainerRowTag0.getOrderableHeaders();
      Map<String, String> map1 = searchContainerRowTag0.getOrderableHeaders();
      assertTrue(map1.equals(map0));
  }
}
