/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.search.lucene.highlight;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.search.lucene.highlight.QueryTermExtractor;
import org.apache.lucene.index.Term;
import org.apache.lucene.search.BooleanClause;
import org.apache.lucene.search.BooleanQuery;
import org.apache.lucene.search.Filter;
import org.apache.lucene.search.FilteredQuery;
import org.apache.lucene.search.NumericRangeFilter;
import org.apache.lucene.search.PhraseQuery;
import org.apache.lucene.search.Query;
import org.apache.lucene.search.TermQuery;
import org.apache.lucene.search.TermRangeFilter;
import org.apache.lucene.search.TermRangeQuery;
import org.apache.lucene.search.highlight.WeightedTerm;
import org.apache.lucene.search.spans.SpanTermQuery;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class QueryTermExtractorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      QueryTermExtractor queryTermExtractor0 = new QueryTermExtractor();
      assertNotNull(queryTermExtractor0);
  }

  @Test
  public void test1()  throws Throwable  {
      BooleanQuery[] booleanQueryArray0 = new BooleanQuery[10];
      TermRangeFilter termRangeFilter0 = TermRangeFilter.Less((String) null, (String) null);
      FilteredQuery filteredQuery0 = new FilteredQuery((Query) booleanQueryArray0[2], (Filter) termRangeFilter0);
      WeightedTerm[] weightedTermArray0 = QueryTermExtractor.getTerms((Query) filteredQuery0, false, (String) null);
      assertNotNull(weightedTermArray0);
  }

  @Test
  public void test2()  throws Throwable  {
      WeightedTerm[] weightedTermArray0 = QueryTermExtractor.getTerms((Query) null, false, "");
      assertNotNull(weightedTermArray0);
  }

  @Test
  public void test3()  throws Throwable  {
      BooleanQuery[] booleanQueryArray0 = new BooleanQuery[10];
      BooleanQuery booleanQuery0 = new BooleanQuery(false);
      booleanQueryArray0[0] = booleanQuery0;
      BooleanClause.Occur booleanClause_Occur0 = BooleanClause.Occur.MUST_NOT;
      booleanQuery0.add((Query) booleanQueryArray0[0], booleanClause_Occur0);
      TermRangeFilter termRangeFilter0 = TermRangeFilter.Less((String) null, (String) null);
      FilteredQuery filteredQuery0 = new FilteredQuery((Query) booleanQueryArray0[0], (Filter) termRangeFilter0);
      WeightedTerm[] weightedTermArray0 = QueryTermExtractor.getTerms((Query) filteredQuery0, false, (String) null);
      assertNotNull(weightedTermArray0);
  }

  @Test
  public void test4()  throws Throwable  {
      PhraseQuery phraseQuery0 = new PhraseQuery();
      Double double0 = new Double((double) 7858);
      NumericRangeFilter<Double> numericRangeFilter0 = NumericRangeFilter.newDoubleRange("**rw[<8wB[A~j", 7858, double0, double0, false, true);
      FilteredQuery filteredQuery0 = new FilteredQuery((Query) phraseQuery0, (Filter) numericRangeFilter0);
      Query[] queryArray0 = new Query[4];
      queryArray0[0] = (Query) phraseQuery0;
      BooleanQuery booleanQuery0 = (BooleanQuery)filteredQuery0.combine(queryArray0);
      WeightedTerm[] weightedTermArray0 = QueryTermExtractor.getTerms((Query) booleanQuery0, true, "**rw[<8wB[A~j");
      assertNotNull(weightedTermArray0);
  }

  @Test
  public void test5()  throws Throwable  {
      TermRangeQuery termRangeQuery0 = new TermRangeQuery("7Rn9 ", "7Rn9 ", "7Rn9 ", true, true);
      Query[] queryArray0 = new Query[6];
      queryArray0[0] = (Query) termRangeQuery0;
      BooleanQuery booleanQuery0 = (BooleanQuery)termRangeQuery0.combine(queryArray0);
      WeightedTerm[] weightedTermArray0 = QueryTermExtractor.getTerms((Query) booleanQuery0, false, "7Rn9 ");
      assertNotNull(weightedTermArray0);
  }

  @Test
  public void test6()  throws Throwable  {
      Term term0 = new Term("F>");
      TermQuery termQuery0 = new TermQuery(term0);
      WeightedTerm[] weightedTermArray0 = QueryTermExtractor.getTerms((Query) termQuery0, false, "F>");
      assertNotNull(weightedTermArray0);
  }

  @Test
  public void test7()  throws Throwable  {
      Term term0 = new Term(" lRw|G*^/%P", " lRw|G*^/%P");
      SpanTermQuery spanTermQuery0 = new SpanTermQuery(term0);
      WeightedTerm[] weightedTermArray0 = QueryTermExtractor.getTerms((Query) spanTermQuery0, false, (String) null);
      assertNotNull(weightedTermArray0);
  }

  @Test
  public void test8()  throws Throwable  {
      Term term0 = new Term("F>");
      TermQuery termQuery0 = new TermQuery(term0);
      WeightedTerm[] weightedTermArray0 = QueryTermExtractor.getTerms((Query) termQuery0, false, "pTp2]]#J/&cml'TI");
      assertNotNull(weightedTermArray0);
  }
}
