/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.dao.orm.hibernate;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.caucho.el.Expr;
import com.caucho.el.NeExpr;
import com.caucho.el.ShortValueExpression;
import com.caucho.xml.QName;
import com.liferay.portal.dao.orm.hibernate.ShortType;
import java.io.Serializable;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.media.jai.operator.ExpDescriptor;
import javax.print.attribute.standard.JobKOctetsProcessed;
import org.hibernate.engine.SessionImplementor;
import org.hibernate.type.Type;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ShortTypeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ShortType shortType0 = new ShortType();
      Type[] typeArray0 = shortType0.getPropertyTypes();
      assertNotNull(typeArray0);
  }

  @Test
  public void test1()  throws Throwable  {
      ShortType shortType0 = new ShortType();
      ShortType shortType1 = (ShortType)shortType0.assemble((Serializable) shortType0, (SessionImplementor) null, (Object) null);
      assertSame(shortType1, shortType0);
  }

  @Test
  public void test2()  throws Throwable  {
      ShortType shortType0 = new ShortType();
      ShortType shortType1 = (ShortType)shortType0.replace((Object) shortType0, (Object) shortType0, (SessionImplementor) null, (Object) shortType0);
      assertEquals(false, shortType1.isMutable());
  }

  @Test
  public void test3()  throws Throwable  {
      ShortType shortType0 = new ShortType();
      String string0 = (String)shortType0.disassemble((Object) "undeployment", (SessionImplementor) null);
      assertEquals("undeployment", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      ShortType shortType0 = new ShortType();
      Class<Short> class0 = shortType0.returnedClass();
      assertEquals(false, class0.isSynthetic());
  }

  @Test
  public void test5()  throws Throwable  {
      ShortType shortType0 = new ShortType();
      String[] stringArray0 = shortType0.getPropertyNames();
      assertNotNull(stringArray0);
  }

  @Test
  public void test6()  throws Throwable  {
      ShortType shortType0 = new ShortType();
      boolean boolean0 = shortType0.isMutable();
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      ShortType shortType0 = new ShortType();
      Object object0 = shortType0.getPropertyValue((Object) null, 866);
      assertNull(object0);
  }

  @Test
  public void test8()  throws Throwable  {
      ShortType shortType0 = new ShortType();
      QName qName0 = new QName("w`=,N0", "w`=,N0", "w`=,N0");
      QName qName1 = (QName)shortType0.deepCopy((Object) qName0);
      shortType0.setPropertyValue((Object) qName1, 1672, (Object) qName1);
      assertEquals(false, shortType0.isMutable());
  }

  @Test
  public void test9()  throws Throwable  {
      ShortType shortType0 = new ShortType();
      ExpDescriptor expDescriptor0 = new ExpDescriptor();
      Class<Object> class0 = expDescriptor0.getRenderableDestClass();
      int int0 = shortType0.hashCode((Object) class0);
      assertEquals(605581544, int0);
  }

  @Test
  public void test10()  throws Throwable  {
      ShortType shortType0 = new ShortType();
      boolean boolean0 = shortType0.equals((Object) null, (Object) "1.2.840.113549.3");
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      ShortType shortType0 = new ShortType();
      ExpDescriptor expDescriptor0 = new ExpDescriptor();
      Class<Object> class0 = expDescriptor0.getRenderableDestClass();
      boolean boolean0 = shortType0.equals((Object) class0, (Object) class0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      ShortType shortType0 = new ShortType();
      NeExpr neExpr0 = new NeExpr((Expr) null, (Expr) null);
      ShortValueExpression shortValueExpression0 = new ShortValueExpression((Expr) neExpr0);
      boolean boolean0 = shortType0.equals((Object) shortValueExpression0, (Object) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      ShortType shortType0 = new ShortType();
      JobKOctetsProcessed jobKOctetsProcessed0 = new JobKOctetsProcessed(605581544);
      boolean boolean0 = shortType0.equals((Object) jobKOctetsProcessed0, (Object) 605581544);
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      ShortType shortType0 = new ShortType();
      // Undeclared exception!
      try {
        shortType0.nullSafeSet((PreparedStatement) null, (Object) "returnItemType", 781, (SessionImplementor) null);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * java.lang.String cannot be cast to java.lang.Short
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      ShortType shortType0 = new ShortType();
      // Undeclared exception!
      try {
        shortType0.nullSafeSet((PreparedStatement) null, (Object) null, 790, (SessionImplementor) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
