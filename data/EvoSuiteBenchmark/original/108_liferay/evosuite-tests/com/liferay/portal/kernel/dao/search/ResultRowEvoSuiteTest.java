/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.dao.search;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.dao.search.ButtonSearchEntry;
import com.liferay.portal.kernel.dao.search.ResultRow;
import com.liferay.portal.kernel.dao.search.SearchEntry;
import com.liferay.portal.kernel.dao.search.TextSearchEntry;
import java.util.List;
import java.util.Map;
import javax.portlet.PortletURL;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.BeforeClass;
import org.portletbridge.portlet.PseudoPortletURL;

@RunWith(EvoSuiteRunner.class)
public class ResultRowEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ResultRow resultRow0 = new ResultRow("k8CjU*", (Object) "type", "N+,sgR-:", 1, false);
      resultRow0.addJSP("k8CjU*", "k8CjU*", "N+,sgR-:", (ServletContext) null, (HttpServletRequest) null, (HttpServletResponse) null);
      assertEquals("N+,sgR-:", resultRow0.getPrimaryKey());
      assertEquals("k8CjU*", resultRow0.getRowId());
      assertEquals(1, resultRow0.getPos());
      assertEquals(false, resultRow0.isBold());
  }

  @Test
  public void test1()  throws Throwable  {
      ResultRow resultRow0 = new ResultRow((Object) "RENDER_MARKUP", "RENDER_MARKUP", 0);
      resultRow0.addText("RENDER_MARKUP", "RENDER_MARKUP", "RENDER_MARKUP");
      assertEquals(false, resultRow0.isBold());
      assertEquals("RENDER_MARKUP", resultRow0.getPrimaryKey());
      assertEquals(0, resultRow0.getPos());
      assertEquals("1", resultRow0.getRowId());
  }

  @Test
  public void test2()  throws Throwable  {
      ResultRow resultRow0 = new ResultRow((Object) "org.dom4j.dom.DOMDocument@580ef3c9 [Document: name null]", (-310L), 0, true);
      resultRow0.addJSP("-w?G!+HXxCmhh3eb");
      assertEquals("1", resultRow0.getRowId());
      assertEquals(true, resultRow0.isBold());
      assertEquals("-310", resultRow0.getPrimaryKey());
      assertEquals(0, resultRow0.getPos());
  }

  @Test
  public void test3()  throws Throwable  {
      ResultRow resultRow0 = new ResultRow((Object) "arrayMapping", (-256L), 525);
      int int0 = resultRow0.getPos();
      assertEquals(525, int0);
      assertEquals("526", resultRow0.getRowId());
      assertEquals(false, resultRow0.isBold());
      assertEquals("-256", resultRow0.getPrimaryKey());
  }

  @Test
  public void test4()  throws Throwable  {
      ResultRow resultRow0 = new ResultRow((Object) "arrayMapping", (-256L), 525);
      resultRow0.addButton("arrayMapping", "arrayMapping", 525, "arrayMapping", "*");
      assertEquals(525, resultRow0.getPos());
      assertEquals("-256", resultRow0.getPrimaryKey());
      assertEquals("526", resultRow0.getRowId());
      assertEquals(false, resultRow0.isBold());
  }

  @Test
  public void test5()  throws Throwable  {
      ResultRow resultRow0 = new ResultRow("),FAG*zi", (Object) "SansSerif", "SansSerif", 308, true);
      resultRow0.setSkip(true);
      assertEquals(true, resultRow0.isSkip());
      assertEquals(308, resultRow0.getPos());
  }

  @Test
  public void test6()  throws Throwable  {
      ResultRow resultRow0 = new ResultRow((Object) null, (String) null, 6, true);
      resultRow0.getData();
      assertEquals(6, resultRow0.getPos());
      assertEquals(true, resultRow0.isBold());
  }

  @Test
  public void test7()  throws Throwable  {
      ResultRow resultRow0 = new ResultRow((Object) null, "QzZS]", 68);
      List<SearchEntry> list0 = resultRow0.getEntries();
      assertEquals("QzZS]", resultRow0.getPrimaryKey());
      assertNotNull(list0);
      assertEquals("69", resultRow0.getRowId());
      assertEquals(false, resultRow0.isBold());
      assertEquals(68, resultRow0.getPos());
  }

  @Test
  public void test8()  throws Throwable  {
      ResultRow resultRow0 = new ResultRow("k8CjU*", (Object) "type", "N+,sgR-:", 1, false);
      resultRow0.getClassHoverName();
      assertEquals(1, resultRow0.getPos());
      assertEquals(false, resultRow0.isBold());
      assertEquals("N+,sgR-:", resultRow0.getPrimaryKey());
      assertEquals("k8CjU*", resultRow0.getRowId());
  }

  @Test
  public void test9()  throws Throwable  {
      ResultRow resultRow0 = new ResultRow((Object) null, "QzZS]", 68);
      // Undeclared exception!
      try {
        resultRow0.addText(68, "QzZS]", (PortletURL) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 68, Size: 0
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      ResultRow resultRow0 = new ResultRow((Object) "arrayMapping", (-256L), 525);
      assertEquals("526", resultRow0.getRowId());
      
      resultRow0.setRowId("arrayMapping");
      assertEquals(525, resultRow0.getPos());
  }

  @Test
  public void test11()  throws Throwable  {
      ResultRow resultRow0 = new ResultRow((Object) "org.dom4j.dom.DOMDocument@580ef3c9 [Document: name null]", (-310L), 0, true);
      assertEquals("-310", resultRow0.getPrimaryKey());
      
      resultRow0.setPrimaryKey("org.dom4j.dom.DOMDocument@580ef3c9 [Document: name null]");
      assertEquals("1", resultRow0.getRowId());
      assertEquals(0, resultRow0.getPos());
      assertEquals(true, resultRow0.isBold());
  }

  @Test
  public void test12()  throws Throwable  {
      ResultRow resultRow0 = new ResultRow((Object) null, "jLPw{|o1'Z;,f;Bx", 14);
      resultRow0.addJSP("jLPw{|o1'Z;,f;Bx", "jLPw{|o1'Z;,f;Bx", "jLPw{|o1'Z;,f;Bx");
      assertEquals(14, resultRow0.getPos());
      assertEquals("jLPw{|o1'Z;,f;Bx", resultRow0.getPrimaryKey());
      assertEquals(false, resultRow0.isBold());
      assertEquals("15", resultRow0.getRowId());
  }

  @Test
  public void test13()  throws Throwable  {
      ResultRow resultRow0 = new ResultRow((Object) "RENDER_MARKUP", "RENDER_MARKUP", 0);
      resultRow0.getClassName();
      assertEquals(0, resultRow0.getPos());
      assertEquals("1", resultRow0.getRowId());
      assertEquals("RENDER_MARKUP", resultRow0.getPrimaryKey());
      assertEquals(false, resultRow0.isBold());
  }

  @Test
  public void test14()  throws Throwable  {
      ResultRow resultRow0 = new ResultRow((Object) "arrayMapping", (-256L), 525);
      boolean boolean0 = resultRow0.isBold();
      assertEquals(525, resultRow0.getPos());
      assertEquals("526", resultRow0.getRowId());
      assertEquals(false, boolean0);
      assertEquals("-256", resultRow0.getPrimaryKey());
  }

  @Test
  public void test15()  throws Throwable  {
      ResultRow resultRow0 = new ResultRow((Object) "RMI", 0L, 831);
      String string0 = resultRow0.getRowId();
      assertNotNull(string0);
      assertEquals(false, resultRow0.isBold());
      assertEquals("832", string0);
      assertEquals("0", resultRow0.getPrimaryKey());
      assertEquals(831, resultRow0.getPos());
  }

  @Test
  public void test16()  throws Throwable  {
      ResultRow resultRow0 = new ResultRow((Object) null, (String) null, 6, true);
      ButtonSearchEntry buttonSearchEntry0 = new ButtonSearchEntry();
      resultRow0.addSearchEntry((SearchEntry) buttonSearchEntry0);
      assertEquals(true, resultRow0.isBold());
      assertEquals(6, resultRow0.getPos());
  }

  @Test
  public void test17()  throws Throwable  {
      ResultRow resultRow0 = new ResultRow("),FAG*zi", (Object) "SansSerif", "SansSerif", 308, true);
      PseudoPortletURL pseudoPortletURL0 = new PseudoPortletURL("SansSerif", "),FAG*zi");
      resultRow0.addText("SansSerif", "),FAG*zi", "),FAG*zi", (PortletURL) pseudoPortletURL0);
      assertEquals(308, resultRow0.getPos());
      assertEquals("),FAG*zi", resultRow0.getRowId());
      assertEquals(true, resultRow0.isBold());
      assertEquals("SansSerif", resultRow0.getPrimaryKey());
  }

  @Test
  public void test18()  throws Throwable  {
      ResultRow resultRow0 = new ResultRow((Object) null, (String) null, 6, true);
      String string0 = resultRow0.getPrimaryKey();
      assertEquals(6, resultRow0.getPos());
      assertNull(string0);
      assertEquals(true, resultRow0.isBold());
  }

  @Test
  public void test19()  throws Throwable  {
      ResultRow resultRow0 = new ResultRow((Object) null, (String) null, 6, true);
      resultRow0.addButton((String) null, (String) null);
      assertEquals(6, resultRow0.getPos());
      assertEquals(true, resultRow0.isBold());
  }

  @Test
  public void test20()  throws Throwable  {
      ResultRow resultRow0 = new ResultRow("k8CjU", (Object) "type", "K", 1, false);
      resultRow0.addButton("type", "k8CjU", "type", "K");
      assertEquals(1, resultRow0.getPos());
      assertEquals(false, resultRow0.isBold());
      assertEquals("k8CjU", resultRow0.getRowId());
      assertEquals("K", resultRow0.getPrimaryKey());
  }

  @Test
  public void test21()  throws Throwable  {
      ResultRow resultRow0 = new ResultRow((Object) null, (String) null, (-494));
      resultRow0.addJSP((String) null, (ServletContext) null, (HttpServletRequest) null, (HttpServletResponse) null);
      assertEquals(false, resultRow0.isBold());
      assertEquals(-494, resultRow0.getPos());
  }

  @Test
  public void test22()  throws Throwable  {
      ResultRow resultRow0 = new ResultRow((Object) null, (-1860L), (-1480));
      assertEquals(false, resultRow0.isBold());
      
      resultRow0.setBold(true);
      assertEquals(true, resultRow0.isBold());
      assertEquals(-1480, resultRow0.getPos());
  }

  @Test
  public void test23()  throws Throwable  {
      ResultRow resultRow0 = new ResultRow((Object) "org.dom4j.dom.DOMDocument@580ef3c9 [Document: name null]", (-310L), 0, true);
      resultRow0.setClassHoverName("-w?G!+HXxCmhh3eb");
      assertEquals(0, resultRow0.getPos());
      assertEquals("1", resultRow0.getRowId());
      assertEquals("-310", resultRow0.getPrimaryKey());
      assertEquals(true, resultRow0.isBold());
  }

  @Test
  public void test24()  throws Throwable  {
      ResultRow resultRow0 = new ResultRow((Object) null, "QzZS]", 68);
      resultRow0.setObject((Object) null);
      assertEquals(68, resultRow0.getPos());
      assertEquals(false, resultRow0.isBold());
      assertEquals("QzZS]", resultRow0.getPrimaryKey());
      assertEquals("69", resultRow0.getRowId());
  }

  @Test
  public void test25()  throws Throwable  {
      ResultRow resultRow0 = new ResultRow((Object) null, (-1860L), (-1480));
      resultRow0.setRestricted(true);
      resultRow0.addButton(0, "Bvn?b9cU", "Bvn?b9cU", 0, "M\"|\"nW", "M\"|\"nW");
      assertEquals(true, resultRow0.isRestricted());
      assertEquals(-1480, resultRow0.getPos());
  }

  @Test
  public void test26()  throws Throwable  {
      ResultRow resultRow0 = new ResultRow((Object) "RENDER_MARKUP", "RENDER_MARKUP", 0);
      ButtonSearchEntry buttonSearchEntry0 = new ButtonSearchEntry();
      resultRow0.addSearchEntry(0, (SearchEntry) buttonSearchEntry0);
      assertEquals(0, resultRow0.getPos());
      assertEquals("1", resultRow0.getRowId());
      assertEquals("RENDER_MARKUP", resultRow0.getPrimaryKey());
      assertEquals(false, resultRow0.isBold());
  }

  @Test
  public void test27()  throws Throwable  {
      ResultRow resultRow0 = new ResultRow("),FAG*zi", (Object) "SansSerif", "SansSerif", 308, true);
      resultRow0.addJSP("SansSerif", "),FAG*zi", 308, "Handler");
      assertEquals(308, resultRow0.getPos());
      assertEquals("),FAG*zi", resultRow0.getRowId());
      assertEquals(true, resultRow0.isBold());
      assertEquals("SansSerif", resultRow0.getPrimaryKey());
  }

  @Test
  public void test28()  throws Throwable  {
      ResultRow resultRow0 = new ResultRow("),FAG*zi", (Object) "SansSerif", "SansSerif", 308, true);
      resultRow0.addJSP("),FAG*zi", "),FAG*zi", 308, "),FAG*zi", (ServletContext) null, (HttpServletRequest) null, (HttpServletResponse) null);
      assertEquals(308, resultRow0.getPos());
      assertEquals("SansSerif", resultRow0.getPrimaryKey());
      assertEquals(true, resultRow0.isBold());
      assertEquals("),FAG*zi", resultRow0.getRowId());
  }

  @Test
  public void test29()  throws Throwable  {
      ResultRow resultRow0 = new ResultRow((Object) "cacheLevelFull", "cacheLevelFull", (-2011));
      String string0 = (String)resultRow0.getObject();
      assertEquals("-2010", resultRow0.getRowId());
      assertNotNull(string0);
      assertEquals(-2011, resultRow0.getPos());
      assertEquals(false, resultRow0.isBold());
      assertEquals("cacheLevelFull", resultRow0.getPrimaryKey());
  }

  @Test
  public void test30()  throws Throwable  {
      ResultRow resultRow0 = new ResultRow("k8CjU*", (Object) "type", "N+,sgR-:", 1, false);
      // Undeclared exception!
      try {
        resultRow0.removeSearchEntry(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 1, Size: 0
         */
      }
  }

  @Test
  public void test31()  throws Throwable  {
      ResultRow resultRow0 = new ResultRow((Object) null, "QzZS]", 68);
      resultRow0.addText("QzZS]", "QzZS]", 68, "QzZS]", (PortletURL) null);
      assertEquals("QzZS]", resultRow0.getPrimaryKey());
      assertEquals(false, resultRow0.isBold());
      assertEquals(68, resultRow0.getPos());
      assertEquals("69", resultRow0.getRowId());
  }

  @Test
  public void test32()  throws Throwable  {
      ResultRow resultRow0 = new ResultRow("),FAG*zi", (Object) "SansSerif", "SansSerif", 308, true);
      resultRow0.isRestricted();
      assertEquals("SansSerif", resultRow0.getPrimaryKey());
      assertEquals(308, resultRow0.getPos());
      assertEquals(true, resultRow0.isBold());
      assertEquals("),FAG*zi", resultRow0.getRowId());
  }

  @Test
  public void test33()  throws Throwable  {
      ResultRow resultRow0 = new ResultRow((Object) "RENDER_MARKUP", "RENDER_MARKUP", 0);
      resultRow0.addText("RENDER_MARKUP", "RENDER_MARKUP", "RENDER_MARKUP", "RENDER_MARKUP");
      assertEquals("1", resultRow0.getRowId());
      assertEquals(0, resultRow0.getPos());
      assertEquals(false, resultRow0.isBold());
      assertEquals("RENDER_MARKUP", resultRow0.getPrimaryKey());
  }

  @Test
  public void test34()  throws Throwable  {
      ResultRow resultRow0 = new ResultRow((Object) null, "jLPw{|o1'Z;,f;Bx", 14);
      resultRow0.addText("jLPw{|o1'Z;,f;Bx", (PortletURL) null);
      assertEquals("15", resultRow0.getRowId());
      assertEquals("jLPw{|o1'Z;,f;Bx", resultRow0.getPrimaryKey());
      assertEquals(false, resultRow0.isBold());
      assertEquals(14, resultRow0.getPos());
  }

  @Test
  public void test35()  throws Throwable  {
      ResultRow resultRow0 = new ResultRow((Object) null, (-1860L), (-1480));
      resultRow0.setData((Map<String, Object>) null);
      assertEquals("-1860", resultRow0.getPrimaryKey());
      assertEquals(false, resultRow0.isBold());
      assertEquals("-1479", resultRow0.getRowId());
      assertEquals(-1480, resultRow0.getPos());
  }

  @Test
  public void test36()  throws Throwable  {
      ResultRow resultRow0 = new ResultRow("k8CjU", (Object) "type", "K", 1, false);
      resultRow0.isSkip();
      assertEquals("k8CjU", resultRow0.getRowId());
      assertEquals(1, resultRow0.getPos());
      assertEquals("K", resultRow0.getPrimaryKey());
      assertEquals(false, resultRow0.isBold());
  }

  @Test
  public void test37()  throws Throwable  {
      ResultRow resultRow0 = new ResultRow((Object) "RMI", 0L, 831);
      resultRow0.setClassName("RMI");
      assertEquals(831, resultRow0.getPos());
      assertEquals("0", resultRow0.getPrimaryKey());
      assertEquals(false, resultRow0.isBold());
      assertEquals("832", resultRow0.getRowId());
  }

  @Test
  public void test38()  throws Throwable  {
      ResultRow resultRow0 = new ResultRow("2nOs}%0}:~7|37WTK", (Object) "innerName", "innerName", 144, false);
      PseudoPortletURL pseudoPortletURL0 = new PseudoPortletURL("innerName", "innerName");
      // Undeclared exception!
      try {
        resultRow0.addText(144, "2nOs}%0}:~7|37WTK", "innerName", 144, "innerName", (PortletURL) pseudoPortletURL0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 144, Size: 0
         */
      }
  }

  @Test
  public void test39()  throws Throwable  {
      ResultRow resultRow0 = new ResultRow((Object) "org.dom4j.dom.DOMDocument@580ef3c9 [Document: name null]", (-310L), 0, true);
      resultRow0.addText(0, "org.dom4j.dom.DOMDocument@580ef3c9 [Document: name null]", "org.dom4j.dom.DOMDocument@580ef3c9 [Document: name null]", 0, "org.dom4j.dom.DOMDocument@580ef3c9 [Document: name null]", (PortletURL) null);
      assertEquals(true, resultRow0.isBold());
      assertEquals("-310", resultRow0.getPrimaryKey());
      assertEquals("1", resultRow0.getRowId());
      assertEquals(0, resultRow0.getPos());
  }

  @Test
  public void test40()  throws Throwable  {
      ResultRow resultRow0 = new ResultRow((Object) null, (-1860L), (-1480));
      resultRow0.setRestricted(true);
      PseudoPortletURL pseudoPortletURL0 = new PseudoPortletURL("Bvn?b9cU", "M\"|\"nW");
      // Undeclared exception!
      try {
        resultRow0.addText((-1480), "M\"|\"nW", (PortletURL) pseudoPortletURL0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: -1480, Size: 0
         */
      }
  }

  @Test
  public void test41()  throws Throwable  {
      ResultRow resultRow0 = new ResultRow((Object) "RENDER_MARKUP", "RENDER_MARKUP", 0);
      ButtonSearchEntry buttonSearchEntry0 = new ButtonSearchEntry();
      resultRow0.addText(0, (TextSearchEntry) buttonSearchEntry0);
      assertEquals(0, resultRow0.getPos());
      assertEquals("RENDER_MARKUP", resultRow0.getPrimaryKey());
      assertEquals("1", resultRow0.getRowId());
      assertEquals(false, resultRow0.isBold());
  }

  @Test
  public void test42()  throws Throwable  {
      ResultRow resultRow0 = new ResultRow("2nOs}%0}:~7|37WTK", (Object) "innerName", "innerName", 144, false);
      PseudoPortletURL pseudoPortletURL0 = new PseudoPortletURL("innerName", "innerName");
      resultRow0.addText("2nOs}%0}:~7|37WTK", (PortletURL) pseudoPortletURL0);
      assertEquals(false, resultRow0.isBold());
      assertEquals("innerName", resultRow0.getPrimaryKey());
      assertEquals(144, resultRow0.getPos());
      assertEquals("2nOs}%0}:~7|37WTK", resultRow0.getRowId());
  }

  @Test
  public void test43()  throws Throwable  {
      ResultRow resultRow0 = new ResultRow("k8CjU", (Object) "type", "K", 1, false);
      ButtonSearchEntry buttonSearchEntry0 = new ButtonSearchEntry();
      resultRow0.addText((TextSearchEntry) buttonSearchEntry0);
      assertEquals(false, resultRow0.isBold());
      assertEquals(1, resultRow0.getPos());
      assertEquals("K", resultRow0.getPrimaryKey());
      assertEquals("k8CjU", resultRow0.getRowId());
  }

  @Test
  public void test44()  throws Throwable  {
      ResultRow resultRow0 = new ResultRow("),FAG*zi", (Object) "SansSerif", "SansSerif", 308, true);
      resultRow0.getParameter("Handler");
      resultRow0.getParameter("SansSerif");
      assertEquals(true, resultRow0.isBold());
      assertEquals(308, resultRow0.getPos());
      assertEquals("SansSerif", resultRow0.getPrimaryKey());
      assertEquals("),FAG*zi", resultRow0.getRowId());
  }

  @Test
  public void test45()  throws Throwable  {
      ResultRow resultRow0 = new ResultRow("),FAG*zi", (Object) "SansSerif", "SansSerif", 308, true);
      resultRow0.getParameter("Handler");
      resultRow0.setParameter("Handler", (Object) null);
      assertEquals(true, resultRow0.isBold());
      assertEquals(308, resultRow0.getPos());
      assertEquals("SansSerif", resultRow0.getPrimaryKey());
      assertEquals("),FAG*zi", resultRow0.getRowId());
  }

  @Test
  public void test46()  throws Throwable  {
      ResultRow resultRow0 = new ResultRow((Object) "cacheLevelFull", "cacheLevelFull", (-2011));
      resultRow0.setParameter("cacheLevelFull", "cacheLevelFull");
      assertEquals("cacheLevelFull", resultRow0.getPrimaryKey());
      assertEquals(false, resultRow0.isBold());
      assertEquals(-2011, resultRow0.getPos());
      assertEquals("-2010", resultRow0.getRowId());
  }
}
