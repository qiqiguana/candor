/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.io;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.io.LimitedInputStream;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import javax.swing.DefaultListModel;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class LimitedInputStreamEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LimitedInputStream limitedInputStream0 = new LimitedInputStream((InputStream) null, 0L, 0L);
      limitedInputStream0.mark((int) (byte) (-95));
      assertEquals(false, limitedInputStream0.markSupported());
  }

  @Test
  public void test1()  throws Throwable  {
      LimitedInputStream limitedInputStream0 = new LimitedInputStream((InputStream) null, 0L, 831L);
      // Undeclared exception!
      try {
        limitedInputStream0.close();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      LimitedInputStream limitedInputStream0 = new LimitedInputStream((InputStream) null, 0L, 0L);
      assertNotNull(limitedInputStream0);
      
      boolean boolean0 = limitedInputStream0.markSupported();
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      LimitedInputStream limitedInputStream0 = new LimitedInputStream((InputStream) null, 0L, 0L);
      limitedInputStream0.reset();
      assertEquals(false, limitedInputStream0.markSupported());
  }

  @Test
  public void test4()  throws Throwable  {
      LimitedInputStream limitedInputStream0 = null;
      try {
        limitedInputStream0 = new LimitedInputStream((InputStream) null, (-866L), (-1137L));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Offset is less than 0
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      DefaultListModel defaultListModel0 = new DefaultListModel();
      Enumeration<?> enumeration0 = defaultListModel0.elements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      LimitedInputStream limitedInputStream0 = null;
      try {
        limitedInputStream0 = new LimitedInputStream((InputStream) sequenceInputStream0, 10L, (-283L));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Length is less than 0
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1278, 0);
      LimitedInputStream limitedInputStream0 = null;
      try {
        limitedInputStream0 = new LimitedInputStream((InputStream) byteArrayInputStream0, 1284652111352L, 229L);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Most likely reached the end of the input stream
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) (byte)0, (int) (byte)1);
      LimitedInputStream limitedInputStream0 = new LimitedInputStream((InputStream) byteArrayInputStream0, (long) (byte)1, 927L);
      limitedInputStream0.read();
  }

  @Test
  public void test8()  throws Throwable  {
      DefaultListModel defaultListModel0 = new DefaultListModel();
      Enumeration<?> enumeration0 = defaultListModel0.elements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      LimitedInputStream limitedInputStream0 = new LimitedInputStream((InputStream) sequenceInputStream0, 0L, 1824L);
      assertNotNull(limitedInputStream0);
      
      int int0 = limitedInputStream0.available();
      assertEquals(0, int0);
  }

  @Test
  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      LimitedInputStream limitedInputStream0 = new LimitedInputStream((InputStream) byteArrayInputStream0, (long) (byte)0, (long) (byte)0);
      assertNotNull(limitedInputStream0);
      
      int int0 = limitedInputStream0.available();
      assertEquals(0, int0);
  }

  @Test
  public void test10()  throws Throwable  {
      LimitedInputStream limitedInputStream0 = new LimitedInputStream((InputStream) null, 0L, 0L);
      assertNotNull(limitedInputStream0);
      
      int int0 = limitedInputStream0.read();
      assertEquals((-1), int0);
  }

  @Test
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) (byte)0, (int) (byte)16);
      LimitedInputStream limitedInputStream0 = new LimitedInputStream((InputStream) byteArrayInputStream0, (long) (byte)1, 927L);
      int int0 = limitedInputStream0.read();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, int0);
  }

  @Test
  public void test12()  throws Throwable  {
      DefaultListModel defaultListModel0 = new DefaultListModel();
      Enumeration<?> enumeration0 = defaultListModel0.elements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      LimitedInputStream limitedInputStream0 = new LimitedInputStream((InputStream) sequenceInputStream0, 0L, 1L);
      assertNotNull(limitedInputStream0);
      
      byte[] byteArray0 = new byte[13];
      int int0 = limitedInputStream0.read(byteArray0);
      assertEquals(0, limitedInputStream0.available());
      assertEquals((-1), int0);
  }

  @Test
  public void test13()  throws Throwable  {
      LimitedInputStream limitedInputStream0 = new LimitedInputStream((InputStream) null, 0L, 0L);
      assertNotNull(limitedInputStream0);
      
      byte[] byteArray0 = new byte[5];
      int int0 = limitedInputStream0.read(byteArray0);
      assertEquals((-1), int0);
  }

  @Test
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) (byte)0, (int) (byte)16);
      LimitedInputStream limitedInputStream0 = new LimitedInputStream((InputStream) byteArrayInputStream0, (long) (byte)1, 927L);
      int int0 = limitedInputStream0.read(byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, int0);
  }

  @Test
  public void test15()  throws Throwable  {
      DefaultListModel defaultListModel0 = new DefaultListModel();
      Enumeration<?> enumeration0 = defaultListModel0.elements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      LimitedInputStream limitedInputStream0 = new LimitedInputStream((InputStream) sequenceInputStream0, 0L, 1824L);
      assertNotNull(limitedInputStream0);
      
      byte[] byteArray0 = new byte[3];
      int int0 = limitedInputStream0.read(byteArray0, (-1300), 1848);
      assertEquals(0, limitedInputStream0.available());
      assertEquals((-1), int0);
  }

  @Test
  public void test16()  throws Throwable  {
      LimitedInputStream limitedInputStream0 = new LimitedInputStream((InputStream) null, 0L, 0L);
      assertNotNull(limitedInputStream0);
      
      byte[] byteArray0 = new byte[6];
      int int0 = limitedInputStream0.read(byteArray0, (-1228), (-1228));
      assertEquals((-1), int0);
  }

  @Test
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) (byte)0, (int) (byte)1);
      LimitedInputStream limitedInputStream0 = new LimitedInputStream((InputStream) byteArrayInputStream0, (long) (byte)1, 927L);
      // Undeclared exception!
      try {
        limitedInputStream0.read(byteArray0, (-504), 525);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) (byte)0, (int) (byte)16);
      LimitedInputStream limitedInputStream0 = new LimitedInputStream((InputStream) byteArrayInputStream0, (long) (byte)1, 927L);
      long long0 = limitedInputStream0.skip((long) (byte)16);
      assertEquals(-1, byteArrayInputStream0.read());
      assertEquals(2L, long0);
  }

  @Test
  public void test19()  throws Throwable  {
      LimitedInputStream limitedInputStream0 = new LimitedInputStream((InputStream) null, 0L, 0L);
      // Undeclared exception!
      try {
        limitedInputStream0.skip(1863L);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
