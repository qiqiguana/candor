/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.security.ldap;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.util.SafeProperties;
import com.liferay.portal.model.Contact;
import com.liferay.portal.model.User;
import com.liferay.portal.model.impl.ColorSchemeImpl;
import com.liferay.portal.security.ldap.DefaultPortalToLDAPConverter;
import com.liferay.portal.security.ldap.Modifications;
import com.liferay.portal.service.ServiceContext;
import java.io.Serializable;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import javax.naming.directory.Attributes;
import javax.naming.directory.BasicAttribute;
import javax.naming.directory.BasicAttributes;
import org.codehaus.groovy.control.CompilerConfiguration;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DefaultPortalToLDAPConverterEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DefaultPortalToLDAPConverter defaultPortalToLDAPConverter0 = new DefaultPortalToLDAPConverter();
      defaultPortalToLDAPConverter0.setUserDNFieldName("");
  }

  @Test
  public void test1()  throws Throwable  {
      DefaultPortalToLDAPConverter defaultPortalToLDAPConverter0 = new DefaultPortalToLDAPConverter();
      ServiceContext serviceContext0 = new ServiceContext();
      Map<String, Serializable> map0 = serviceContext0.getAttributes();
      Properties properties0 = new Properties();
      Modifications modifications0 = defaultPortalToLDAPConverter0.getLDAPContactModifications((Contact) null, map0, properties0, properties0);
      assertNull(modifications0);
  }

  @Test
  public void test2()  throws Throwable  {
      DefaultPortalToLDAPConverter defaultPortalToLDAPConverter0 = new DefaultPortalToLDAPConverter();
      CompilerConfiguration compilerConfiguration0 = CompilerConfiguration.DEFAULT;
      List<String> list0 = compilerConfiguration0.getClasspath();
      defaultPortalToLDAPConverter0.setUserReservedFieldNames(list0);
      assertEquals(0, list0.size());
  }

  @Test
  public void test3()  throws Throwable  {
      DefaultPortalToLDAPConverter defaultPortalToLDAPConverter0 = new DefaultPortalToLDAPConverter();
      BasicAttributes basicAttributes0 = new BasicAttributes(true);
      defaultPortalToLDAPConverter0.addAttributeMapping((String) null, (Object) "initialValue", (Attributes) basicAttributes0);
      assertEquals(true, basicAttributes0.isCaseIgnored());
  }

  @Test
  public void test4()  throws Throwable  {
      DefaultPortalToLDAPConverter defaultPortalToLDAPConverter0 = new DefaultPortalToLDAPConverter();
      assertNotNull(defaultPortalToLDAPConverter0);
      
      BasicAttributes basicAttributes0 = new BasicAttributes(true);
      defaultPortalToLDAPConverter0.addAttributeMapping("cL#z1;6s~", (Object) "InternalFrameUI", (Attributes) basicAttributes0);
      assertEquals("{cl#z1;6s~=cL#z1;6s~: InternalFrameUI}", basicAttributes0.toString());
      assertEquals(1, basicAttributes0.size());
  }

  @Test
  public void test5()  throws Throwable  {
      DefaultPortalToLDAPConverter defaultPortalToLDAPConverter0 = new DefaultPortalToLDAPConverter();
      defaultPortalToLDAPConverter0.addAttributeMapping("ldap.import.user.password.default", (Object) null, (Attributes) null);
  }

  @Test
  public void test6()  throws Throwable  {
      DefaultPortalToLDAPConverter defaultPortalToLDAPConverter0 = new DefaultPortalToLDAPConverter();
      BasicAttributes basicAttributes0 = new BasicAttributes();
      defaultPortalToLDAPConverter0.addAttributeMapping("", "", (Attributes) basicAttributes0);
      assertEquals("No attributes", basicAttributes0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      DefaultPortalToLDAPConverter defaultPortalToLDAPConverter0 = new DefaultPortalToLDAPConverter();
      assertNotNull(defaultPortalToLDAPConverter0);
      
      BasicAttributes basicAttributes0 = new BasicAttributes();
      defaultPortalToLDAPConverter0.addAttributeMapping("ze[SYv", "", (Attributes) basicAttributes0);
      assertEquals(0, basicAttributes0.size());
      assertEquals("No attributes", basicAttributes0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      DefaultPortalToLDAPConverter defaultPortalToLDAPConverter0 = new DefaultPortalToLDAPConverter();
      assertNotNull(defaultPortalToLDAPConverter0);
      
      BasicAttributes basicAttributes0 = new BasicAttributes(true);
      defaultPortalToLDAPConverter0.addAttributeMapping("ArgumentListExpression", "ArgumentListExpression", (Attributes) basicAttributes0);
      assertEquals(1, basicAttributes0.size());
      assertEquals("{argumentlistexpression=ArgumentListExpression: ArgumentListExpression}", basicAttributes0.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      DefaultPortalToLDAPConverter defaultPortalToLDAPConverter0 = new DefaultPortalToLDAPConverter();
      BasicAttribute basicAttribute0 = new BasicAttribute("");
      Modifications modifications0 = Modifications.getInstance();
      defaultPortalToLDAPConverter0.addModificationItem(basicAttribute0, modifications0);
      assertEquals(false, basicAttribute0.isOrdered());
  }

  @Test
  public void test10()  throws Throwable  {
      DefaultPortalToLDAPConverter defaultPortalToLDAPConverter0 = new DefaultPortalToLDAPConverter();
      defaultPortalToLDAPConverter0.addModificationItem("", "", (Modifications) null);
  }

  @Test
  public void test11()  throws Throwable  {
      DefaultPortalToLDAPConverter defaultPortalToLDAPConverter0 = new DefaultPortalToLDAPConverter();
      defaultPortalToLDAPConverter0.addModificationItem("VY;MSWT?.i4lVa", "", (Modifications) null);
  }

  @Test
  public void test12()  throws Throwable  {
      DefaultPortalToLDAPConverter defaultPortalToLDAPConverter0 = new DefaultPortalToLDAPConverter();
      // Undeclared exception!
      try {
        defaultPortalToLDAPConverter0.addModificationItem("G-,gA%<@h0*2", "G-,gA%<@h0*2", (Modifications) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      DefaultPortalToLDAPConverter defaultPortalToLDAPConverter0 = new DefaultPortalToLDAPConverter();
      ColorSchemeImpl colorSchemeImpl0 = new ColorSchemeImpl("HP^W");
      SafeProperties safeProperties0 = (SafeProperties)colorSchemeImpl0.getSettingsProperties();
      try {
        defaultPortalToLDAPConverter0.getLDAPUserModifications((User) null, (Map<String, Serializable>) null, (Properties) safeProperties0, (Properties) safeProperties0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
