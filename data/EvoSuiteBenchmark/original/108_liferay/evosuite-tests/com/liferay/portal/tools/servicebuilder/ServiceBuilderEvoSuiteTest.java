/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.tools.servicebuilder;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.tools.servicebuilder.Entity;
import com.liferay.portal.tools.servicebuilder.EntityMapping;
import com.liferay.portal.tools.servicebuilder.ServiceBuilder;
import com.thoughtworks.qdox.model.JavaClass;
import com.thoughtworks.qdox.model.JavaClassParent;
import com.thoughtworks.qdox.model.JavaField;
import com.thoughtworks.qdox.model.JavaMethod;
import com.thoughtworks.qdox.model.JavaParameter;
import com.thoughtworks.qdox.model.Type;
import com.thoughtworks.qdox.model.TypeVariable;
import com.thoughtworks.qdox.parser.structs.TypeVariableDef;
import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import javax.swing.JSlider;
import javax.swing.plaf.FontUIResource;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ServiceBuilderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("", "L<Uke}n1", "L<Uke}n1", "", "L<Uke}n1", "\\", "", "`>~X_Il}P1==>u+", "`>~X_Il}P1==>u+", "\\", "", "\\", "`>~X_Il}P1==>u+", "pWDkR{S:WTzT73!RaI", "L<Uke}n1", "pWDkR{S:WTzT73!RaI", "", "", "pWDkR{S:WTzT73!RaI", true, "\\", "\\", "pWDkR{S:WTzT73!RaI", "pWDkR{S:WTzT73!RaI", "`>~X_Il}P1==>u+");
      // Undeclared exception!
      try {
        serviceBuilder0.getEntityMapping("hk.NU$,U:4c2Y");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try {
        ServiceBuilder.writeFile((File) null, "'ed& q1c<$ g p x h p9 ids");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("", "L<Uke}n1", "L<Uke}n1", "", "L<Uke}n1", "\\", "", "`>~X_Il}P1==>u+", "`>~X_Il}P1==>u+", "\\", "", "\\", "`>~X_Il}P1==>u+", "pWDkR{S:WTzT73!RaI", "L<Uke}n1", "pWDkR{S:WTzT73!RaI", "", "", "pWDkR{S:WTzT73!RaI", true, "\\", "\\", "pWDkR{S:WTzT73!RaI", "pWDkR{S:WTzT73!RaI", "`>~X_Il}P1==>u+");
      JavaMethod javaMethod0 = new JavaMethod("\\");
      // Undeclared exception!
      try {
        serviceBuilder0.isServiceReadOnlyMethod(javaMethod0, (List<String>) null);
        fail("Expecting exception: NoClassDefFoundError");
      } catch(NoClassDefFoundError e) {
        /*
         * Could not initialize class com.liferay.portal.util.PropsValues
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("", "", "'ed&Q1c<$GPXHP9", "'ed&Q1c<$GPXHP9", "", "", "'ed&Q1c<$GPXHP9", "'ed&Q1c<$GPXHP9", "", "'ed&Q1c<$GPXHP9", "", "", "", "", "'ed&Q1c<$GPXHP9", "", "", "", "", false, "", "", "", "", "", false, (-1137L), false);
      assertNotNull(serviceBuilder0);
      
      JavaMethod javaMethod0 = new JavaMethod();
      String string0 = serviceBuilder0.getJavadocComment(javaMethod0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("", ",e/schlichtherle/nio/charset/IBM437Char~et", "", "", ",e/schlichtherle/nio/charset/IBM437Char~et", (String) null, "", ",e/schlichtherle/nio/charset/IBM437Char~et", (String) null, "", (String) null, ",e/schlichtherle/nio/charset/IBM437Char~et", ",e/schlichtherle/nio/charset/IBM437Char~et", (String) null, "", "", (String) null, "", "", false, (String) null, (String) null, "", ",e/schlichtherle/nio/charset/IBM437Char~et", ",e/schlichtherle/nio/charset/IBM437Char~et");
      assertNotNull(serviceBuilder0);
      
      JavaClass javaClass0 = new JavaClass((String) null);
      String string0 = serviceBuilder0.getJavadocComment(javaClass0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test
  public void test5()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("Cannot add null series.", ",6lj0J`y/", "java.iovoid", "dl.file.extensions.strict.check", "java.iovoid", "java.iovoid", "0=!HjA8e=bQ2k", "0=!HjA8e=bQ2k", ",6lj0J`y/", "java.iovoid", "\"$CwjTYL^?c", "0=!HjA8e=bQ2k", "dl.file.extensions.strict.check", "0=!HjA8e=bQ2k", "Cannot add null series.", "0=!HjA8e=bQ2k", "0=!HjA8e=bQ2k", ",6lj0J`y/", "]fJ_k", true, "Cannot add null series.", ",6lj0J`y/", ",6lj0J`y/", "]fJ_k", "\u0000]-?wZo{");
      // Undeclared exception!
      try {
        serviceBuilder0.getCreateTableSQL((Entity) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("RaMwyr=|N^", "<entity class=", "RaMwyr=|N^", ",6lj0J`y/", "Cannot add null series.", "p|/JJ]b%lEj^C`z", ",6lj0J`y/", "java.iovoid", "Yy~. 6Lih\"h.&E6", "get base u r i ids", "Sm:#/No(1l", "<entity class=", "<br />", "p|/JJ]b%lEj^C`z", "java.iovoid", "<entity class=", "<entity class=", "p|/JJ]b%lEj^C`z", "Cannot add null series.", false, "long", "RaMwyr=|N^", (String) null, "p|/JJ]b%lEj^C`z", "get base u r i ids");
      EntityMapping entityMapping0 = new EntityMapping("Yy~. 6Lih\"h.&E6", "get base u r i ids", "<br />");
      // Undeclared exception!
      try {
        serviceBuilder0.getCreateMappingTableSQL(entityMapping0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("", "L<Uke}n1", "L<Uke}n1", "", "L<Uke}n1", "\\", "", "`>~X_Il}P1==>u+", "`>~X_Il}P1==>u+", "\\", "", "\\", "`>~X_Il}P1==>u+", "pWDkR{S:WTzT73!RaI", "L<Uke}n1", "pWDkR{S:WTzT73!RaI", "", "", "pWDkR{S:WTzT73!RaI", true, "\\", "\\", "pWDkR{S:WTzT73!RaI", "pWDkR{S:WTzT73!RaI", "`>~X_Il}P1==>u+");
      assertNotNull(serviceBuilder0);
      
      JavaClass javaClass0 = new JavaClass();
      Type type0 = new Type("", "\\", 0, (JavaClassParent) javaClass0);
      JavaParameter javaParameter0 = new JavaParameter(type0, "^0Yul1Ani&!c_Rk0", false);
      String string0 = serviceBuilder0.getParameterType(javaParameter0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test8()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("", ",e/schlichtherle/nio/charset/IBM437Char~et", "", "", ",e/schlichtherle/nio/charset/IBM437Char~et", (String) null, "", ",e/schlichtherle/nio/charset/IBM437Char~et", (String) null, "", (String) null, ",e/schlichtherle/nio/charset/IBM437Char~et", ",e/schlichtherle/nio/charset/IBM437Char~et", (String) null, "", "", (String) null, "", "", false, (String) null, (String) null, "", ",e/schlichtherle/nio/charset/IBM437Char~et", ",e/schlichtherle/nio/charset/IBM437Char~et");
      assertNotNull(serviceBuilder0);
      
      JavaMethod javaMethod0 = new JavaMethod(",e/schlichtherle/nio/charset/IBM437Char~et");
      String string0 = serviceBuilder0.getReturnType(javaMethod0);
      assertNotNull(string0);
      assertEquals("void", string0);
  }

  @Test
  public void test9()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder((String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, "\nlist = ", "3qi", "3qi", "3qi", (String) null, false, "3qi", "3qi", "3qi", "3qi", "3qi", false, 0L, true);
      assertNotNull(serviceBuilder0);
      
      String string0 = serviceBuilder0.getDimensions("3qi");
      assertNotNull(string0);
      assertEquals("[][][]", string0);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = ServiceBuilder.toHumanName((String) null);
      assertNull(string0);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = ServiceBuilder.toHumanName("'ed& q1c<$ g p x h p9 id");
      assertNotNull(string0);
      assertEquals("'ed& q1c<$ g p x h p9 ID", string0);
  }

  @Test
  public void test12()  throws Throwable  {
      File file0 = new File((File) null, "ST9if4U6(Vl<");
      // Undeclared exception!
      try {
        ServiceBuilder.writeFileRaw(file0, "<entity class=");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("", ",e/schlichtherle/nio/charset/IBM437Char~et", "", "", ",e/schlichtherle/nio/charset/IBM437Char~et", (String) null, "", ",e/schlichtherle/nio/charset/IBM437Char~et", (String) null, "", (String) null, ",e/schlichtherle/nio/charset/IBM437Char~et", ",e/schlichtherle/nio/charset/IBM437Char~et", (String) null, "", "", (String) null, "", "", false, (String) null, (String) null, "", ",e/schlichtherle/nio/charset/IBM437Char~et", ",e/schlichtherle/nio/charset/IBM437Char~et");
      assertNotNull(serviceBuilder0);
      
      Type type0 = Type.VOID;
      String string0 = serviceBuilder0.getClassName(type0);
      assertNotNull(string0);
      assertEquals("void", string0);
  }

  @Test
  public void test14()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("", ",e/schlichtherle/nio/charset/IBM437Char~et", "", "", ",e/schlichtherle/nio/charset/IBM437Char~et", (String) null, "", ",e/schlichtherle/nio/charset/IBM437Char~et", (String) null, "", (String) null, ",e/schlichtherle/nio/charset/IBM437Char~et", ",e/schlichtherle/nio/charset/IBM437Char~et", (String) null, "", "", (String) null, "", "", false, (String) null, (String) null, "", ",e/schlichtherle/nio/charset/IBM437Char~et", ",e/schlichtherle/nio/charset/IBM437Char~et");
      assertNotNull(serviceBuilder0);
      
      Type type0 = new Type(",e/schlichtherle/nio/charset/IBM437Char~et", 1469);
      String string0 = serviceBuilder0.getClassName(type0);
      assertEqualse/schlichtherle/nio/charset/IBM437Char~et;", string0);
      assertNotNull(string0);
  }

  @Test
  public void test15()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "0=!HjA8e=bQ2k", true, "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "0=!HjA8e=bQ2k", "5.`V^Ak~lVI/FCI", "org.apache.axis.encoding.ser.SimpleListDeserializer", true, (-363L), true);
      Entity entity0 = serviceBuilder0.getEntityByParameterTypeValue("org.apache.axis.encoding.ser.SimpleListDeserializer");
      assertNull(entity0);
  }

  @Test
  public void test16()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("", ",e/schlichtherle/nio/charset/IBM437Char~et", "", "", ",e/schlichtherle/nio/charset/IBM437Char~et", (String) null, "", ",e/schlichtherle/nio/charset/IBM437Char~et", (String) null, "", (String) null, ",e/schlichtherle/nio/charset/IBM437Char~et", ",e/schlichtherle/nio/charset/IBM437Char~et", (String) null, "", "", (String) null, "", "", false, (String) null, (String) null, "", ",e/schlichtherle/nio/charset/IBM437Char~et", ",e/schlichtherle/nio/charset/IBM437Char~et");
      Entity entity0 = serviceBuilder0.getEntityByGenericsName("");
      assertNull(entity0);
  }

  @Test
  public void test17()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("Z", "Z", "Z", "Z", "Z", (String) null, "Z", "Z", "Z", (String) null, (String) null, (String) null, (String) null, "Z", "Z", (String) null, "Z", "Z", "Z", true, (String) null, "Z", "", "Z", "");
      assertNotNull(serviceBuilder0);
      
      String string0 = serviceBuilder0.getGeneratorClass("Z");
      assertEquals("Z", string0);
  }

  @Test
  public void test18()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("G9|P}O_vX&f", "", "", "", "Iv", "", "G9|P}O_vX&f", "G9|P}O_vX&f", "", "aW(M=rL|?&Hd*ATh(", "d1u1_d4JIi,`{f0", "G9|P}O_vX&f", (String) null, "d1u1_d4JIi,`{f0", "d1u1_d4JIi,`{f0", (String) null, "", "G9|P}O_vX&f", "", true, (String) null, "", "x/G-`,hR'eR#|8<", "", "", false, 4294967295L, true);
      assertNotNull(serviceBuilder0);
      
      String string0 = serviceBuilder0.getGeneratorClass((String) null);
      assertNotNull(string0);
      assertEquals("assigned", string0);
  }

  @Test
  public void test19()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("z id", "z id", "z id", "z id", "z id", "z id", "z id", "z id", "z id", "z id", "I4j", "I4j", "I4j", "V~6itUo", "I4j", "V~6itUo", "I4j", "V~6itUo", "I4j", false, "I4j", "z id", "z id", "", "I4j");
      assertNotNull(serviceBuilder0);
      
      TypeVariableDef typeVariableDef0 = new TypeVariableDef("");
      TypeVariable typeVariable0 = new TypeVariable("I4j", typeVariableDef0, (JavaClassParent) null);
      String string0 = serviceBuilder0.getListActualTypeArguments((Type) typeVariable0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test20()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("Cannot add null series.", ",6lj0J`y/", "java.iovoid", "dl.file.extensions.strict.check", "java.iovoid", "java.iovoid", "0=!HjA8e=bQ2k", "0=!HjA8e=bQ2k", ",6lj0J`y/", "java.iovoid", "\"$CwjTYL^?c", "0=!HjA8e=bQ2k", "dl.file.extensions.strict.check", "0=!HjA8e=bQ2k", "Cannot add null series.", "0=!HjA8e=bQ2k", "0=!HjA8e=bQ2k", ",6lj0J`y/", "]fJ_k", true, "Cannot add null series.", ",6lj0J`y/", ",6lj0J`y/", "]fJ_k", "\u0000]-?wZo{");
      assertNotNull(serviceBuilder0);
      
      Type type0 = new Type(",6lj0J`y/", 1);
      String string0 = serviceBuilder0.getLiteralClass(type0);
      assertEquals(",6lj0J`y/[].class", string0);
      assertNotNull(string0);
  }

  @Test
  public void test21()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder((String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, "\nlist = ", "3qi", "3qi", "3qi", (String) null, false, "3qi", "3qi", "3qi", "3qi", "3qi", false, 0L, true);
      assertNotNull(serviceBuilder0);
      
      Entity entity0 = new Entity("\nlist = ");
      assertNotNull(entity0);
      
      // Undeclared exception!
      try {
        serviceBuilder0.getNoSuchEntityException(entity0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test22()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("", "L<Uke}n1", "L<Uke}n1", "", "L<Uke}n1", "\\", "", "`>~X_Il}P1==>u+", "`>~X_Il}P1==>u+", "\\", "", "\\", "`>~X_Il}P1==>u+", "pWDkR{S:WTzT73!RaI", "L<Uke}n1", "pWDkR{S:WTzT73!RaI", "", "", "pWDkR{S:WTzT73!RaI", true, "\\", "\\", "pWDkR{S:WTzT73!RaI", "pWDkR{S:WTzT73!RaI", "`>~X_Il}P1==>u+");
      assertNotNull(serviceBuilder0);
      
      String string0 = serviceBuilder0.getPrimitiveObj("./");
      assertEquals("./", string0);
  }

  @Test
  public void test23()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("<?xml version=\"1.0\"?>\n<entity-mappings version=\"1.0\" xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm http://java.sun.com/xml/ns/persistence/orm_1_0.xsd\"\n>\n<persistence-unit-metadata>\n\t<xml-mapping-metadata-complete />\n\t<persistence-unit-defaults>\n\t\t<access>PROPERTY</access>\n\t</persistence-unit-defaults>\n</persistence-unit-metadata>\n</entity-mappings>", "double", "<?xml version=\"1.0\"?>\n<entity-mappings version=\"1.0\" xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm http://java.sun.com/xml/ns/persistence/orm_1_0.xsd\"\n>\n<persistence-unit-metadata>\n\t<xml-mapping-metadata-complete />\n\t<persistence-unit-defaults>\n\t\t<access>PROPERTY</access>\n\t</persistence-unit-defaults>\n</persistence-unit-metadata>\n</entity-mappings>", "<?xml version=\"1.0\"?>\n<entity-mappings version=\"1.0\" xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm http://java.sun.com/xml/ns/persistence/orm_1_0.xsd\"\n>\n<persistence-unit-metadata>\n\t<xml-mapping-metadata-complete />\n\t<persistence-unit-defaults>\n\t\t<access>PROPERTY</access>\n\t</persistence-unit-defaults>\n</persistence-unit-metadata>\n</entity-mappings>", "", "", "", "", "", "<?xml version=\"1.0\"?>\n<entity-mappings version=\"1.0\" xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm http://java.sun.com/xml/ns/persistence/orm_1_0.xsd\"\n>\n<persistence-unit-metadata>\n\t<xml-mapping-metadata-complete />\n\t<persistence-unit-defaults>\n\t\t<access>PROPERTY</access>\n\t</persistence-unit-defaults>\n</persistence-unit-metadata>\n</entity-mappings>", "org.jaxen.saxpath.base.XPathReader", "double", "double", "double", "org.jaxen.saxpath.base.XPathReader", "", "double", "double", "org.jaxen.saxpath.base.XPathReader", false, "", "org.jaxen.saxpath.base.XPathReader", "", "double", "<?xml version=\"1.0\"?>\n<entity-mappings version=\"1.0\" xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm http://java.sun.com/xml/ns/persistence/orm_1_0.xsd\"\n>\n<persistence-unit-metadata>\n\t<xml-mapping-metadata-complete />\n\t<persistence-unit-defaults>\n\t\t<access>PROPERTY</access>\n\t</persistence-unit-defaults>\n</persistence-unit-metadata>\n</entity-mappings>");
      assertNotNull(serviceBuilder0);
      
      String string0 = serviceBuilder0.getPrimitiveObjValue("");
      assertEquals("", string0);
  }

  @Test
  public void test24()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("/J!lvs;n!rr-:!X", "create", "", "create", "/J!lvs;n!rr-:!X", "create", "/J!lvs;n!rr-:!X", "/J!lvs;n!rr-:!X", "equals", "create", "create", "/J!lvs;n!rr-:!X", "/J!lvs;n!rr-:!X", "/J!lvs;n!rr-:!X", "", ":pK\"t", "", "create", "create", false, "create", "equals", "", ":pK\"t", "", false, (-223L), false);
      String string0 = serviceBuilder0.getSqlType("equals");
      assertNull(string0);
  }

  @Test
  public void test25()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("<?xml version=\"1.0\"?>\n<entity-mappings version=\"1.0\" xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm http://java.sun.com/xml/ns/persistence/orm_1_0.xsd\"\n>\n<persistence-unit-metadata>\n\t<xml-mapping-metadata-complete />\n\t<persistence-unit-defaults>\n\t\t<access>PROPERTY</access>\n\t</persistence-unit-defaults>\n</persistence-unit-metadata>\n</entity-mappings>", "double", "<?xml version=\"1.0\"?>\n<entity-mappings version=\"1.0\" xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm http://java.sun.com/xml/ns/persistence/orm_1_0.xsd\"\n>\n<persistence-unit-metadata>\n\t<xml-mapping-metadata-complete />\n\t<persistence-unit-defaults>\n\t\t<access>PROPERTY</access>\n\t</persistence-unit-defaults>\n</persistence-unit-metadata>\n</entity-mappings>", "<?xml version=\"1.0\"?>\n<entity-mappings version=\"1.0\" xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm http://java.sun.com/xml/ns/persistence/orm_1_0.xsd\"\n>\n<persistence-unit-metadata>\n\t<xml-mapping-metadata-complete />\n\t<persistence-unit-defaults>\n\t\t<access>PROPERTY</access>\n\t</persistence-unit-defaults>\n</persistence-unit-metadata>\n</entity-mappings>", "", "", "", "", "", "<?xml version=\"1.0\"?>\n<entity-mappings version=\"1.0\" xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm http://java.sun.com/xml/ns/persistence/orm_1_0.xsd\"\n>\n<persistence-unit-metadata>\n\t<xml-mapping-metadata-complete />\n\t<persistence-unit-defaults>\n\t\t<access>PROPERTY</access>\n\t</persistence-unit-defaults>\n</persistence-unit-metadata>\n</entity-mappings>", "org.jaxen.saxpath.base.XPathReader", "double", "double", "double", "org.jaxen.saxpath.base.XPathReader", "", "double", "double", "org.jaxen.saxpath.base.XPathReader", false, "", "org.jaxen.saxpath.base.XPathReader", "", "double", "<?xml version=\"1.0\"?>\n<entity-mappings version=\"1.0\" xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm http://java.sun.com/xml/ns/persistence/orm_1_0.xsd\"\n>\n<persistence-unit-metadata>\n\t<xml-mapping-metadata-complete />\n\t<persistence-unit-defaults>\n\t\t<access>PROPERTY</access>\n\t</persistence-unit-defaults>\n</persistence-unit-metadata>\n</entity-mappings>");
      assertNotNull(serviceBuilder0);
      
      String string0 = serviceBuilder0.getSqlType("double");
      assertNotNull(string0);
      assertEquals("DOUBLE", string0);
  }

  @Test
  public void test26()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "0=!HjA8e=bQ2k", true, "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "0=!HjA8e=bQ2k", "5.`V^Ak~lVI/FCI", "org.apache.axis.encoding.ser.SimpleListDeserializer", true, (-363L), true);
      String string0 = serviceBuilder0.getSqlType("5.`V^Ak~lVI/FCI", "", "~`8U27Ulk");
      assertNull(string0);
  }

  @Test
  public void test27()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("returnType:  ", "load\\", "load\\", "H&GHVgc0aD~w=m]wv", "H&GHVgc0aD~w=m]wv", "PN\"", "PN\"", "PN\"", "H&GHVgc0aD~w=m]wv", "", "returnType:  ", "H&GHVgc0aD~w=m]wv", "load\\", "returnType:  ", "returnType:  ", "H&GHVgc0aD~w=m]wv", "PN\"", "load\\", "H&GHVgc0aD~w=m]wv", false, "returnType:  ", "returnType:  ", "returnType:  ", "returnType:  ", "H&GHVgc0aD~w=m]wv");
      assertNotNull(serviceBuilder0);
      
      JavaField javaField0 = new JavaField("");
      String string0 = serviceBuilder0.getVariableName(javaField0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test28()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("LNrX4x5", "portal.security.manager.preload.classloader.classes", "", "Unknown key: ", "", "kaDnTe3", "LNrX4x5", "portal.security.manager.preload.classloader.classes", "", "spring_infrastructure_xml", "LNrX4x5", ":none", "", "", "", "", "+E$V@\"oS!kk' I", "", "+E$V@\"oS!kk' I", false, "", ".u(j4WC+&:3IUfD", "", "}l0NjfXS'", "=L", true, 0L, true);
      assertNotNull(serviceBuilder0);
      
      JavaField javaField0 = new JavaField("+E$V@\"oS!kk' I");
      String string0 = serviceBuilder0.getVariableName(javaField0);
      assertNotNull(string0);
      assertEquals("+E$V@\"oS!kk' I", string0);
  }

  @Test
  public void test29()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("LNrX4x5", "portal.security.manager.preload.classloader.classes", "", "Unknown key: ", "", "kaDnTe3", "LNrX4x5", "portal.security.manager.preload.classloader.classes", "", "spring_infrastructure_xml", "LNrX4x5", ":none", "", "", "", "", "+E$V@\"oS!kk' I", "", "+E$V@\"oS!kk' I", false, "", ".u(j4WC+&:3IUfD", "", "}l0NjfXS'", "=L", true, 0L, true);
      assertNotNull(serviceBuilder0);
      
      boolean boolean0 = serviceBuilder0.hasEntityByGenericsName("lI_n$e>q-S?I$?`Q");
      assertEquals(false, boolean0);
  }

  @Test
  public void test30()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("", ",e/schlichtherle/nio/charset/IBM437Char~et", "", "", ",e/schlichtherle/nio/charset/IBM437Char~et", (String) null, "", ",e/schlichtherle/nio/charset/IBM437Char~et", (String) null, "", (String) null, ",e/schlichtherle/nio/charset/IBM437Char~et", ",e/schlichtherle/nio/charset/IBM437Char~et", (String) null, "", "", (String) null, "", "", false, (String) null, (String) null, "", ",e/schlichtherle/nio/charset/IBM437Char~et", ",e/schlichtherle/nio/charset/IBM437Char~et");
      assertNotNull(serviceBuilder0);
      
      boolean boolean0 = serviceBuilder0.hasEntityByGenericsName("");
      assertEquals(false, boolean0);
  }

  @Test
  public void test31()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("/J!lvs;n!rr-:!X", "create", "", "create", "/J!lvs;n!rr-:!X", "create", "/J!lvs;n!rr-:!X", "/J!lvs;n!rr-:!X", "equals", "create", "create", "/J!lvs;n!rr-:!X", "/J!lvs;n!rr-:!X", "/J!lvs;n!rr-:!X", "", ":pK\"t", "", "create", "create", false, "create", "equals", "", ":pK\"t", "", false, (-223L), false);
      assertNotNull(serviceBuilder0);
      
      boolean boolean0 = serviceBuilder0.hasEntityByParameterTypeValue("/J!lvs;n!rr-:!X");
      assertEquals(false, boolean0);
  }

  @Test
  public void test32()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("Z", "Z", "Z", "Z", "Z", (String) null, "Z", "Z", "Z", (String) null, (String) null, (String) null, (String) null, "Z", "Z", (String) null, "Z", "Z", "Z", true, (String) null, "Z", "", "Z", "");
      assertNotNull(serviceBuilder0);
      
      boolean boolean0 = serviceBuilder0.hasEntityByParameterTypeValue((String) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test33()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "0=!HjA8e=bQ2k", true, "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "0=!HjA8e=bQ2k", "5.`V^Ak~lVI/FCI", "org.apache.axis.encoding.ser.SimpleListDeserializer", true, (-363L), true);
      assertNotNull(serviceBuilder0);
      
      JavaMethod javaMethod0 = new JavaMethod("~`8U27Ulk");
      boolean boolean0 = serviceBuilder0.isBasePersistenceMethod(javaMethod0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test34()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "0=!HjA8e=bQ2k", true, "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "0=!HjA8e=bQ2k", "5.`V^Ak~lVI/FCI", "org.apache.axis.encoding.ser.SimpleListDeserializer", true, (-363L), true);
      assertNotNull(serviceBuilder0);
      
      JavaMethod javaMethod0 = new JavaMethod("~`8U27Ulk");
      boolean boolean0 = serviceBuilder0.isCustomMethod(javaMethod0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test35()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("<?xml version=\"1.0\"?>\n<entity-mappings version=\"1.0\" xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm http://java.sun.com/xml/ns/persistence/orm_1_0.xsd\"\n>\n<persistence-unit-metadata>\n\t<xml-mapping-metadata-complete />\n\t<persistence-unit-defaults>\n\t\t<access>PROPERTY</access>\n\t</persistence-unit-defaults>\n</persistence-unit-metadata>\n</entity-mappings>", "double", "<?xml version=\"1.0\"?>\n<entity-mappings version=\"1.0\" xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm http://java.sun.com/xml/ns/persistence/orm_1_0.xsd\"\n>\n<persistence-unit-metadata>\n\t<xml-mapping-metadata-complete />\n\t<persistence-unit-defaults>\n\t\t<access>PROPERTY</access>\n\t</persistence-unit-defaults>\n</persistence-unit-metadata>\n</entity-mappings>", "<?xml version=\"1.0\"?>\n<entity-mappings version=\"1.0\" xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm http://java.sun.com/xml/ns/persistence/orm_1_0.xsd\"\n>\n<persistence-unit-metadata>\n\t<xml-mapping-metadata-complete />\n\t<persistence-unit-defaults>\n\t\t<access>PROPERTY</access>\n\t</persistence-unit-defaults>\n</persistence-unit-metadata>\n</entity-mappings>", "", "", "", "", "", "<?xml version=\"1.0\"?>\n<entity-mappings version=\"1.0\" xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm http://java.sun.com/xml/ns/persistence/orm_1_0.xsd\"\n>\n<persistence-unit-metadata>\n\t<xml-mapping-metadata-complete />\n\t<persistence-unit-defaults>\n\t\t<access>PROPERTY</access>\n\t</persistence-unit-defaults>\n</persistence-unit-metadata>\n</entity-mappings>", "org.jaxen.saxpath.base.XPathReader", "double", "double", "double", "org.jaxen.saxpath.base.XPathReader", "", "double", "double", "org.jaxen.saxpath.base.XPathReader", false, "", "org.jaxen.saxpath.base.XPathReader", "", "double", "<?xml version=\"1.0\"?>\n<entity-mappings version=\"1.0\" xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm http://java.sun.com/xml/ns/persistence/orm_1_0.xsd\"\n>\n<persistence-unit-metadata>\n\t<xml-mapping-metadata-complete />\n\t<persistence-unit-defaults>\n\t\t<access>PROPERTY</access>\n\t</persistence-unit-defaults>\n</persistence-unit-metadata>\n</entity-mappings>");
      assertNotNull(serviceBuilder0);
      
      boolean boolean0 = serviceBuilder0.isHBMCamelCasePropertyAccessor("double");
      assertEquals(false, boolean0);
  }

  @Test
  public void test36()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("Z", "Z", "Z", "Z", "Z", (String) null, "Z", "Z", "Z", (String) null, (String) null, (String) null, (String) null, "Z", "Z", (String) null, "Z", "Z", "Z", true, (String) null, "Z", "", "Z", "");
      assertNotNull(serviceBuilder0);
      
      boolean boolean0 = serviceBuilder0.isHBMCamelCasePropertyAccessor("Z");
      assertEquals(false, boolean0);
  }

  @Test
  public void test37()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("Z", "Z", "Z", "Z", "Z", (String) null, "Z", "Z", "Z", (String) null, (String) null, (String) null, (String) null, "Z", "Z", (String) null, "Z", "Z", "Z", true, (String) null, "Z", "", "Z", "");
      assertNotNull(serviceBuilder0);
      
      boolean boolean0 = serviceBuilder0.isHBMCamelCasePropertyAccessor("'ed& q1c<$ g p x h p9");
      assertEquals(false, boolean0);
  }

  @Test
  public void test38()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "0=!HjA8e=bQ2k", true, "5.`V^Ak~lVI/FCI", "5.`V^Ak~lVI/FCI", "0=!HjA8e=bQ2k", "5.`V^Ak~lVI/FCI", "org.apache.axis.encoding.ser.SimpleListDeserializer", true, (-363L), true);
      assertNotNull(serviceBuilder0);
      
      JavaMethod javaMethod0 = new JavaMethod("~`8U27Ulk");
      String[] stringArray0 = new String[10];
      stringArray0[0] = "~`8U27Ulk";
      boolean boolean0 = serviceBuilder0.isReadOnlyMethod(javaMethod0, (List<String>) null, stringArray0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test39()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("", "", "'ed&Q1c<$GPXHP9", "'ed&Q1c<$GPXHP9", "", "", "'ed&Q1c<$GPXHP9", "'ed&Q1c<$GPXHP9", "", "'ed&Q1c<$GPXHP9", "", "", "", "", "'ed&Q1c<$GPXHP9", "", "", "", "", false, "", "", "", "", "", false, (-1137L), false);
      assertNotNull(serviceBuilder0);
      
      JavaMethod javaMethod0 = new JavaMethod();
      boolean boolean0 = serviceBuilder0.isSoapMethod(javaMethod0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test40()  throws Throwable  {
      File file0 = new File("xa");
      JSlider jSlider0 = new JSlider();
      FontUIResource fontUIResource0 = (FontUIResource)jSlider0.getFont();
      Map<?, ?> map0 = fontUIResource0.getAttributes();
      // Undeclared exception!
      try {
        ServiceBuilder.writeFile(file0, "xa", "xa", map0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
        /*
         * String index out of range: -4
         */
      }
  }
}
