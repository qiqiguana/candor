/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.tools.servicebuilder;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.tools.servicebuilder.Entity;
import com.liferay.portal.tools.servicebuilder.EntityColumn;
import com.liferay.portal.tools.servicebuilder.EntityFinder;
import com.liferay.portal.tools.servicebuilder.EntityOrder;
import java.util.LinkedList;
import java.util.List;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class EntityEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Entity entity0 = new Entity(".d*emV=Qw *}Nm?");
      String string0 = entity0.getHumanName();
      assertEquals(false, entity0.hasLocalService());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals("liferayTransactionManager", entity0.getTXManager());
      assertNotNull(string0);
      assertEquals(false, entity0.hasFinderClass());
      assertEquals(".d*emV=Qw *}Nm?", entity0.getName());
      assertEquals(".d*em v= qw *} nm?", string0);
      assertEquals(true, entity0.isDefaultSessionFactory());
      assertEquals(false, entity0.hasUuid());
      assertEquals("liferayDataSource", entity0.getDataSource());
  }

  @Test
  public void test1()  throws Throwable  {
      Entity entity0 = new Entity("pkMuSp");
      boolean boolean0 = entity0.equals((Object) entity0);
      assertEquals(true, entity0.hasRemoteService());
      assertEquals(true, entity0.isDefaultDataSource());
      assertEquals(true, boolean0);
      assertEquals(false, entity0.hasFinderClass());
      assertEquals(false, entity0.hasUuid());
      assertEquals(true, entity0.isDefaultSessionFactory());
      assertEquals(false, entity0.hasUuidAccessor());
      assertEquals("liferayTransactionManager", entity0.getTXManager());
      assertEquals("pkMuSps", entity0.getNames());
      assertEquals("pk mu sps", entity0.getHumanNames());
  }

  @Test
  public void test2()  throws Throwable  {
      Entity entity0 = new Entity("\"U)lu *|5");
      boolean boolean0 = entity0.hasRemoteService();
      assertEquals(true, boolean0);
      assertEquals(false, entity0.hasFinderClass());
      assertEquals(true, entity0.isDefaultTXManager());
      assertEquals(false, entity0.hasUuid());
      assertEquals("\" u)lu *|5", entity0.getHumanName());
      assertEquals(true, entity0.isDefaultSessionFactory());
      assertEquals("liferayDataSource", entity0.getDataSource());
      assertEquals(false, entity0.hasLocalService());
      assertEquals("\"u)lu *|5", entity0.getVarName());
      assertEquals(false, entity0.hasUuidAccessor());
  }

  @Test
  public void test3()  throws Throwable  {
      Entity entity0 = new Entity("\"U)lu *|5");
      entity0.isCacheEnabled();
      assertEquals(false, entity0.hasLocalService());
      assertEquals(false, entity0.hasUuid());
      assertEquals(false, entity0.hasUuidAccessor());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals("\" u)lu *|5s", entity0.getHumanNames());
      assertEquals(false, entity0.hasFinderClass());
      assertEquals("liferaySessionFactory", entity0.getSessionFactory());
      assertEquals(true, entity0.isDefaultTXManager());
      assertEquals("\"U)lu *|5", entity0.getSpringPropertyName());
      assertEquals("liferayDataSource", entity0.getDataSource());
      assertEquals("\" u)lu *|5", entity0.getHumanName());
  }

  @Test
  public void test4()  throws Throwable  {
      Entity entity0 = new Entity("^+_0gyC#_&l~");
      List<EntityColumn> list0 = entity0.getCollectionList();
      EntityOrder entityOrder0 = new EntityOrder(false, (List<EntityColumn>) null);
      Entity entity1 = new Entity("^+_0gyC#_&l~", "^+_0gyC#_&l~", "^+_0gyC#_&l~", "^+_0gyC#_&l~", "^+_0gyC#_&l~", "^+_0gyC#_&l~", "^+_0gyC#_&l~", false, false, false, false, "^+_0gyC#_&l~", "^+_0gyC#_&l~", "^+_0gyC#_&l~", "^+_0gyC#_&l~", "^+_0gyC#_&l~", false, false, (List<EntityColumn>) null, (List<EntityColumn>) null, list0, list0, (List<EntityColumn>) null, entityOrder0, (List<EntityFinder>) null, (List<Entity>) null, (List<String>) null);
      entity1.hasFinderClass();
      assertEquals("", entity1.getShortName());
      assertEquals(false, entity0.hasUuid());
      assertEquals(false, entity0.hasFinderClass());
      assertEquals("^+_0gyC#_&l~", entity1.getAlias());
      assertEquals(true, entity0.isDefaultTXManager());
      assertEquals("^+_0gy c#_&l~s", entity0.getHumanNames());
      assertEquals("^+_0gyC#_&l~", entity1.getPackagePath());
      assertEquals("^+_0gyC#_&l~", entity1.getPortletName());
      assertEquals(false, entity0.hasUuidAccessor());
      assertEquals(false, entity0.hasLocalService());
      assertEquals("^+_0gyC#_&l~", entity1.getPersistenceClass());
      assertEquals("^+_0gyC#_&l~", entity1.getDataSource());
      assertEquals(true, entity0.hasRemoteService());
      assertTrue(entity1.equals(entity0));
  }

  @Test
  public void test5()  throws Throwable  {
      Entity entity0 = new Entity((String) null);
      String string0 = entity0.getFinderClass();
      assertEquals(false, entity0.hasUuid());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals(false, entity0.hasLocalService());
      assertEquals(false, entity0.hasUuidAccessor());
      assertNull(string0);
      assertEquals(true, entity0.isDefaultTXManager());
  }

  @Test
  public void test6()  throws Throwable  {
      Entity entity0 = new Entity(".d*emV=Qw *}Nm?");
      String string0 = entity0.getTXManager();
      assertEquals(false, entity0.hasFinderClass());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals(true, entity0.isDefaultSessionFactory());
      assertNotNull(string0);
      assertEquals("liferayTransactionManager", string0);
      assertEquals(false, entity0.hasUuidAccessor());
      assertEquals(".d*em v= qw *} nm?", entity0.getHumanName());
      assertEquals(false, entity0.hasUuid());
      assertEquals(".d*emV=Qw *}Nm?s", entity0.getNames());
      assertEquals(false, entity0.hasLocalService());
  }

  @Test
  public void test7()  throws Throwable  {
      Entity entity0 = new Entity("uV [`*<WWl^O2@+T7");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      entity0.setParentTransients((List<String>) linkedList0);
      assertEquals(false, entity0.hasUuidAccessor());
      assertEquals(false, entity0.hasFinderClass());
      assertEquals(false, entity0.hasLocalService());
      assertEquals(true, entity0.isDefaultDataSource());
      assertEquals("u v [`*< w wl^ o2@+ t7", entity0.getHumanName());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals("liferaySessionFactory", entity0.getSessionFactory());
      assertEquals("uV [`*<WWl^O2@+T7s", entity0.getVarNames());
      assertEquals("u v [`*< w wl^ o2@+ t7s", entity0.getHumanNames());
  }

  @Test
  public void test8()  throws Throwable  {
      Entity entity0 = new Entity("uV [`*<WWl^O2@+T7");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      entity0.setTransients((List<String>) linkedList0);
      assertEquals("liferayDataSource", entity0.getDataSource());
      assertEquals("liferayTransactionManager", entity0.getTXManager());
      assertEquals(false, entity0.hasUuidAccessor());
      assertEquals(false, entity0.hasUuid());
      assertEquals(false, entity0.hasFinderClass());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals("u v [`*< w wl^ o2@+ t7", entity0.getHumanName());
      assertEquals(false, entity0.hasLocalService());
      assertEquals("uV [`*<WWl^O2@+T7", entity0.getSpringPropertyName());
      assertEquals("liferaySessionFactory", entity0.getSessionFactory());
      assertEquals(true, entity0.isDefaultDataSource());
  }

  @Test
  public void test9()  throws Throwable  {
      Entity entity0 = new Entity("pkMuSp");
      entity0.getPKList();
      assertEquals("liferayTransactionManager", entity0.getTXManager());
      assertEquals(false, entity0.hasUuid());
      assertEquals(false, entity0.hasFinderClass());
      assertEquals("pkMuSps", entity0.getVarNames());
      assertEquals("pk mu sps", entity0.getHumanNames());
      assertEquals(false, entity0.hasLocalService());
      assertEquals(false, entity0.hasUuidAccessor());
      assertEquals(true, entity0.isDefaultDataSource());
      assertEquals(true, entity0.isDefaultSessionFactory());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals("pk mu sp", entity0.getHumanName());
  }

  @Test
  public void test10()  throws Throwable  {
      Entity entity0 = new Entity("\"U)lu *|5");
      entity0.setPortalReference(false);
      assertEquals(false, entity0.hasUuid());
      assertEquals("\" u)lu *|5s", entity0.getHumanNames());
      assertEquals(false, entity0.hasUuidAccessor());
      assertEquals("liferayTransactionManager", entity0.getTXManager());
      assertEquals(false, entity0.isPortalReference());
      assertEquals(false, entity0.hasLocalService());
      assertEquals(false, entity0.hasFinderClass());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals("liferaySessionFactory", entity0.getSessionFactory());
      assertEquals("\"u)lu *|5s", entity0.getVarNames());
      assertEquals(true, entity0.isDefaultDataSource());
      assertEquals("\"u)lu *|5", entity0.getVarName());
  }

  @Test
  public void test11()  throws Throwable  {
      Entity entity0 = new Entity("userId");
      String string0 = entity0.getTable();
      assertEquals("user ID", entity0.getHumanName());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals(false, entity0.hasUuidAccessor());
      assertEquals(false, entity0.hasLocalService());
      assertNull(string0);
      assertEquals("liferayTransactionManager", entity0.getTXManager());
      assertEquals("userId", entity0.getName());
      assertEquals("liferaySessionFactory", entity0.getSessionFactory());
      assertEquals(true, entity0.isDefaultDataSource());
      assertEquals(false, entity0.hasUuid());
      assertEquals(false, entity0.hasFinderClass());
  }

  @Test
  public void test12()  throws Throwable  {
      Entity entity0 = new Entity(".d*emV=Qw *}Nm?");
      String string0 = entity0.getVarNames();
      assertEquals(false, entity0.hasLocalService());
      assertEquals(false, entity0.hasUuidAccessor());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals(".d*emV=Qw *}Nm?s", string0);
      assertEquals(".d*em v= qw *} nm?", entity0.getHumanName());
      assertEquals("liferaySessionFactory", entity0.getSessionFactory());
      assertEquals(false, entity0.hasFinderClass());
      assertEquals(false, entity0.hasUuid());
      assertNotNull(string0);
      assertEquals("liferayDataSource", entity0.getDataSource());
      assertEquals(true, entity0.isDefaultTXManager());
  }

  @Test
  public void test13()  throws Throwable  {
      Entity entity0 = new Entity("userId");
      String string0 = entity0.getHumanNames();
      assertEquals(false, entity0.hasUuid());
      assertEquals(true, entity0.isDefaultSessionFactory());
      assertEquals("userId", entity0.getName());
      assertEquals("user IDs", string0);
      assertEquals(false, entity0.hasLocalService());
      assertEquals(true, entity0.isDefaultDataSource());
      assertEquals("liferayTransactionManager", entity0.getTXManager());
      assertEquals(false, entity0.hasFinderClass());
      assertNotNull(string0);
      assertEquals(true, entity0.hasRemoteService());
  }

  @Test
  public void test14()  throws Throwable  {
      Entity entity0 = new Entity("^+_0gyC#_&l~");
      entity0.getColumnList();
      assertEquals(false, entity0.hasUuidAccessor());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals(false, entity0.hasFinderClass());
      assertEquals(true, entity0.isDefaultTXManager());
      assertEquals(false, entity0.hasUuid());
      assertEquals(false, entity0.hasLocalService());
      assertEquals(true, entity0.isDefaultDataSource());
      assertEquals("^+_0gy c#_&l~s", entity0.getHumanNames());
      assertEquals("^+_0gyC#_&l~", entity0.getVarName());
  }

  @Test
  public void test15()  throws Throwable  {
      Entity entity0 = new Entity((String) null);
      String string0 = entity0.getPersistenceClass();
      assertNull(string0);
      assertEquals(true, entity0.isDefaultSessionFactory());
      assertEquals(false, entity0.hasLocalService());
      assertEquals(false, entity0.hasUuid());
      assertEquals("liferayDataSource", entity0.getDataSource());
      assertEquals("liferayTransactionManager", entity0.getTXManager());
      assertEquals(false, entity0.hasUuidAccessor());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals(true, entity0.isDefaultTXManager());
  }

  @Test
  public void test16()  throws Throwable  {
      Entity entity0 = new Entity((String) null);
      String string0 = entity0.getSpringPropertyName();
      assertNull(string0);
      assertEquals(false, entity0.hasUuid());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals(false, entity0.hasLocalService());
      assertEquals(true, entity0.isDefaultTXManager());
      assertEquals(false, entity0.hasUuidAccessor());
      assertEquals(true, entity0.isDefaultSessionFactory());
      assertEquals(true, entity0.isDefaultDataSource());
  }

  @Test
  public void test17()  throws Throwable  {
      Entity entity0 = new Entity("pkMuSp");
      String string0 = entity0.getDataSource();
      assertEquals("liferayDataSource", string0);
      assertEquals(false, entity0.hasLocalService());
      assertEquals(false, entity0.hasUuidAccessor());
      assertEquals(true, entity0.isDefaultSessionFactory());
      assertEquals(false, entity0.hasFinderClass());
      assertNotNull(string0);
      assertEquals(true, entity0.isDefaultTXManager());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals(false, entity0.hasUuid());
      assertEquals("pk mu sp", entity0.getHumanName());
  }

  @Test
  public void test18()  throws Throwable  {
      Entity entity0 = new Entity("^+_0gyC#_&l~");
      entity0.getTxRequiredList();
      assertEquals(false, entity0.hasUuid());
      assertEquals(false, entity0.hasUuidAccessor());
      assertEquals(true, entity0.isDefaultDataSource());
      assertEquals(true, entity0.isDefaultTXManager());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals("^+_0gy c#_&l~", entity0.getHumanName());
      assertEquals(false, entity0.hasLocalService());
      assertEquals(false, entity0.hasFinderClass());
      assertEquals("^+_0gyC#_&l~", entity0.getName());
      assertEquals("liferaySessionFactory", entity0.getSessionFactory());
  }

  @Test
  public void test19()  throws Throwable  {
      Entity entity0 = new Entity("EBx>j*2");
      entity0.isContainerModel();
      assertEquals(true, entity0.hasRemoteService());
      assertEquals(true, entity0.isDefaultDataSource());
      assertEquals(false, entity0.hasUuid());
      assertEquals("liferayTransactionManager", entity0.getTXManager());
      assertEquals("e bx>j*2", entity0.getHumanName());
      assertEquals(false, entity0.hasFinderClass());
      assertEquals(false, entity0.hasLocalService());
      assertEquals(false, entity0.hasUuidAccessor());
      assertEquals("liferaySessionFactory", entity0.getSessionFactory());
      assertEquals(true, entity0.isDefaultTXManager());
  }

  @Test
  public void test20()  throws Throwable  {
      Entity entity0 = new Entity("EBx>j*2");
      entity0.isJsonEnabled();
      assertEquals("EBx>j*2s", entity0.getNames());
      assertEquals(false, entity0.hasFinderClass());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals(false, entity0.hasUuidAccessor());
      assertEquals("e bx>j*2s", entity0.getHumanNames());
      assertEquals("liferayDataSource", entity0.getDataSource());
      assertEquals(true, entity0.isDefaultSessionFactory());
      assertEquals(false, entity0.hasUuid());
      assertEquals(false, entity0.hasLocalService());
      assertEquals(true, entity0.isDefaultTXManager());
  }

  @Test
  public void test21()  throws Throwable  {
      Entity entity0 = new Entity("^+_0gyC#_&l~");
      entity0.getFinderList();
      assertEquals(false, entity0.hasLocalService());
      assertEquals(false, entity0.hasUuidAccessor());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals("liferaySessionFactory", entity0.getSessionFactory());
      assertEquals(true, entity0.isDefaultDataSource());
      assertEquals(false, entity0.hasUuid());
      assertEquals("liferayTransactionManager", entity0.getTXManager());
      assertEquals("^+_0gyC#_&l~s", entity0.getVarNames());
      assertEquals("^+_0gy c#_&l~s", entity0.getHumanNames());
      assertEquals("^+_0gyC#_&l~", entity0.getSpringPropertyName());
  }

  @Test
  public void test22()  throws Throwable  {
      Entity entity0 = new Entity(".d*emV=Qw *}Nm?");
      boolean boolean0 = entity0.hasUuid();
      assertEquals("liferayDataSource", entity0.getDataSource());
      assertEquals(false, entity0.hasLocalService());
      assertEquals(false, entity0.hasFinderClass());
      assertEquals(true, entity0.isDefaultTXManager());
      assertEquals(".d*em v= qw *} nm?s", entity0.getHumanNames());
      assertEquals(false, entity0.hasUuidAccessor());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals(".d*emV=Qw *}Nm?", entity0.getVarName());
      assertEquals(false, boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      Entity entity0 = new Entity("pkMuSp");
      entity0.getReferenceList();
      assertEquals(false, entity0.hasLocalService());
      assertEquals(false, entity0.hasUuidAccessor());
      assertEquals(false, entity0.hasUuid());
      assertEquals("liferayTransactionManager", entity0.getTXManager());
      assertEquals("liferayDataSource", entity0.getDataSource());
      assertEquals(true, entity0.isDefaultSessionFactory());
      assertEquals("pkMuSp", entity0.getVarName());
      assertEquals("pk mu sps", entity0.getHumanNames());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals(false, entity0.hasFinderClass());
  }

  @Test
  public void test24()  throws Throwable  {
      Entity entity0 = new Entity("W|$2dd:2-rNx[1*WB_");
      String string0 = entity0.getSessionFactory();
      assertNotNull(string0);
      assertEquals(false, entity0.hasUuid());
      assertEquals(false, entity0.hasFinderClass());
      assertEquals("w|$2dd:2-r nx[1* w b_", entity0.getHumanName());
      assertEquals(false, entity0.hasLocalService());
      assertEquals("liferaySessionFactory", string0);
      assertEquals("liferayDataSource", entity0.getDataSource());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals(true, entity0.isDefaultTXManager());
      assertEquals(false, entity0.hasUuidAccessor());
      assertEquals("W|$2dd:2-rNx[1*WB_", entity0.getName());
  }

  @Test
  public void test25()  throws Throwable  {
      Entity entity0 = new Entity("EBx>j*2");
      entity0.isPortalReference();
      assertEquals(false, entity0.hasLocalService());
      assertEquals(false, entity0.hasFinderClass());
      assertEquals(false, entity0.hasUuid());
      assertEquals("e bx>j*2", entity0.getHumanName());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals("liferaySessionFactory", entity0.getSessionFactory());
      assertEquals("EBx>j*2", entity0.getSpringPropertyName());
      assertEquals(false, entity0.hasUuidAccessor());
      assertEquals("liferayTransactionManager", entity0.getTXManager());
  }

  @Test
  public void test26()  throws Throwable  {
      Entity entity0 = new Entity("^+_0gyC#_&l~");
      List<EntityColumn> list0 = entity0.getFinderColumnsList();
      EntityOrder entityOrder0 = new EntityOrder(false, (List<EntityColumn>) null);
      Entity entity1 = new Entity("^+_0gyC#_&l~", "^+_0gyC#_&l~", "^+_0gyC#_&l~", "^+_0gyC#_&l~", "^+_0gyC#_&l~", "^+_0gyC#_&l~", "^+_0gyC#_&l~", false, false, false, false, "^+_0gyC#_&l~", "^+_0gyC#_&l~", "^+_0gyC#_&l~", "^+_0gyC#_&l~", "^+_0gyC#_&l~", false, false, (List<EntityColumn>) null, (List<EntityColumn>) null, list0, list0, (List<EntityColumn>) null, entityOrder0, (List<EntityFinder>) null, (List<Entity>) null, (List<String>) null);
      boolean boolean0 = entity1.hasLazyBlobColumn();
      assertEquals(true, entity0.hasRemoteService());
      assertEquals("^+_0gyC#_&l~", entity1.getFinderClass());
      assertEquals(true, entity0.isDefaultTXManager());
      assertTrue(entity1.equals(entity0));
      assertEquals(false, entity0.hasUuid());
      assertEquals("^+_0gyC#_&l~", entity1.getAlias());
      assertEquals(true, entity0.isDefaultSessionFactory());
      assertEquals("^+_0gyC#_&l~", entity1.getSessionFactory());
      assertEquals("^+_0gyC#_&l~", entity1.getPortletName());
      assertEquals(false, entity1.hasUuidAccessor());
      assertEquals("^+_0gyC#_&l~", entity1.getPackagePath());
      assertEquals(false, boolean0);
      assertEquals("^+_0gyC#_&l~", entity1.getDataSource());
      assertEquals("^+_0gy c#_&l~s", entity0.getHumanNames());
      assertEquals("", entity1.getShortName());
      assertEquals("^+_0gyC#_&l~", entity1.getTable());
      assertEquals(false, entity1.hasLocalService());
      assertEquals("^+_0gyC#_&l~", entity1.getPersistenceClass());
  }

  @Test
  public void test27()  throws Throwable  {
      Entity entity0 = new Entity((String) null);
      entity0.getBlobList();
      assertEquals(true, entity0.hasRemoteService());
      assertEquals(false, entity0.hasUuid());
      assertEquals("liferayTransactionManager", entity0.getTXManager());
      assertEquals(false, entity0.hasUuidAccessor());
      assertEquals(false, entity0.hasLocalService());
      assertEquals(true, entity0.isDefaultDataSource());
  }

  @Test
  public void test28()  throws Throwable  {
      Entity entity0 = new Entity("EBx>j*2");
      String string0 = entity0.getAlias();
      assertEquals(false, entity0.hasUuidAccessor());
      assertEquals(false, entity0.hasUuid());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals("e bx>j*2", entity0.getHumanName());
      assertEquals(false, entity0.hasFinderClass());
      assertEquals(false, entity0.hasLocalService());
      assertEquals("liferaySessionFactory", entity0.getSessionFactory());
      assertNull(string0);
      assertEquals(true, entity0.isDefaultDataSource());
      assertEquals("liferayTransactionManager", entity0.getTXManager());
      assertEquals(true, entity0.isDefaultTXManager());
  }

  @Test
  public void test29()  throws Throwable  {
      Entity entity0 = new Entity("EBx>j*2");
      boolean boolean0 = entity0.hasUuidAccessor();
      assertEquals(true, entity0.isDefaultSessionFactory());
      assertEquals(true, entity0.isDefaultDataSource());
      assertEquals(false, entity0.hasUuid());
      assertEquals("e bx>j*2s", entity0.getHumanNames());
      assertEquals(true, entity0.isDefaultTXManager());
      assertEquals("EBx>j*2", entity0.getName());
      assertEquals(false, entity0.hasLocalService());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals(false, boolean0);
  }

  @Test
  public void test30()  throws Throwable  {
      Entity entity0 = new Entity((String) null);
      entity0.getOrder();
      assertEquals(false, entity0.hasUuidAccessor());
      assertEquals(false, entity0.hasLocalService());
      assertEquals(false, entity0.hasFinderClass());
      assertEquals(true, entity0.isDefaultTXManager());
      assertEquals(true, entity0.isDefaultDataSource());
      assertEquals("liferaySessionFactory", entity0.getSessionFactory());
      assertEquals(true, entity0.hasRemoteService());
  }

  @Test
  public void test31()  throws Throwable  {
      Entity entity0 = new Entity("EBx>j*2");
      // Undeclared exception!
      try {
        entity0.getColumn("EBx>j*2");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test32()  throws Throwable  {
      Entity entity0 = new Entity("userId");
      String string0 = entity0.getPackagePath();
      assertEquals(false, entity0.hasLocalService());
      assertEquals("liferayDataSource", entity0.getDataSource());
      assertEquals("userIds", entity0.getVarNames());
      assertEquals("user IDs", entity0.getHumanNames());
      assertEquals(false, entity0.hasUuid());
      assertEquals(false, entity0.hasFinderClass());
      assertEquals("liferayTransactionManager", entity0.getTXManager());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals(true, entity0.isDefaultSessionFactory());
      assertEquals(false, entity0.hasUuidAccessor());
      assertNull(string0);
  }

  @Test
  public void test33()  throws Throwable  {
      Entity entity0 = new Entity("com/liferIy/portal/tools/servicebuilder/dependencies/model.ftl");
      boolean boolean0 = entity0.hasLocalService();
      assertEquals(false, entity0.hasUuidAccessor());
      assertEquals(false, entity0.hasUuid());
      assertEquals(false, boolean0);
      assertEquals(true, entity0.hasRemoteService());
      assertEquals("liferaySessionFactory", entity0.getSessionFactory());
      assertEquals(true, entity0.isDefaultTXManager());
      assertEquals(false, entity0.hasFinderClass());
      assertEquals("com/liferIy/portal/tools/servicebuilder/dependencies/model.ftls", entity0.getVarNames());
      assertEquals("com/lifer iy/portal/tools/servicebuilder/dependencies/model.ftl", entity0.getHumanName());
      assertEquals("liferayDataSource", entity0.getDataSource());
  }

  @Test
  public void test34()  throws Throwable  {
      Entity entity0 = new Entity("\"U)lu *|5");
      String string0 = entity0.getNames();
      assertEquals("\"U)lu *|5s", string0);
      assertNotNull(string0);
      assertEquals(true, entity0.hasRemoteService());
      assertEquals(false, entity0.hasFinderClass());
      assertEquals(false, entity0.hasLocalService());
      assertEquals(false, entity0.hasUuidAccessor());
      assertEquals(true, entity0.isDefaultDataSource());
      assertEquals(false, entity0.hasUuid());
      assertEquals("liferayTransactionManager", entity0.getTXManager());
      assertEquals(true, entity0.isDefaultSessionFactory());
      assertEquals("\" u)lu *|5", entity0.getHumanName());
  }

  @Test
  public void test35()  throws Throwable  {
      Entity entity0 = new Entity("uV [`*<WWl^O2@+T7");
      String string0 = entity0.getPortletName();
      assertEquals(false, entity0.hasLocalService());
      assertEquals(true, entity0.isDefaultSessionFactory());
      assertEquals(false, entity0.hasFinderClass());
      assertEquals(false, entity0.hasUuid());
      assertEquals("liferayTransactionManager", entity0.getTXManager());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals("u v [`*< w wl^ o2@+ t7", entity0.getHumanName());
      assertEquals(false, entity0.hasUuidAccessor());
      assertEquals(true, entity0.isDefaultDataSource());
      assertNull(string0);
      assertEquals("uV [`*<WWl^O2@+T7s", entity0.getNames());
  }

  @Test
  public void test36()  throws Throwable  {
      Entity entity0 = new Entity(".d*emV=Qw *}Nm?");
      String string0 = entity0.getPortletShortName();
      assertNull(string0);
      assertEquals(true, entity0.hasRemoteService());
      assertEquals(true, entity0.isDefaultTXManager());
      assertEquals(false, entity0.hasFinderClass());
      assertEquals(false, entity0.hasUuidAccessor());
      assertEquals(false, entity0.hasUuid());
      assertEquals(false, entity0.hasLocalService());
      assertEquals(true, entity0.isDefaultSessionFactory());
      assertEquals(".d*em v= qw *} nm?", entity0.getHumanName());
  }

  @Test
  public void test37()  throws Throwable  {
      Entity entity0 = new Entity((String) null);
      entity0.getParentTransients();
      assertEquals(false, entity0.hasFinderClass());
      assertEquals(false, entity0.hasUuid());
      assertEquals(true, entity0.isDefaultSessionFactory());
      assertEquals(false, entity0.hasLocalService());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals("liferayTransactionManager", entity0.getTXManager());
      assertEquals("liferayDataSource", entity0.getDataSource());
      assertEquals(false, entity0.hasUuidAccessor());
  }

  @Test
  public void test38()  throws Throwable  {
      Entity entity0 = new Entity("EBx>j*2");
      int int0 = entity0.hashCode();
      assertEquals(false, entity0.hasLocalService());
      assertEquals(false, entity0.hasFinderClass());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals("e bx>j*2", entity0.getHumanName());
      assertEquals("liferaySessionFactory", entity0.getSessionFactory());
      assertEquals(true, entity0.isDefaultDataSource());
      assertEquals(false, entity0.hasUuidAccessor());
      assertEquals((-1184458705), int0);
      assertEquals(false, entity0.hasUuid());
      assertEquals(true, entity0.isDefaultTXManager());
  }

  @Test
  public void test39()  throws Throwable  {
      Entity entity0 = new Entity("\"U)lu *|5");
      entity0.getRegularColList();
      assertEquals(false, entity0.hasFinderClass());
      assertEquals("\"U)lu *|5", entity0.getSpringPropertyName());
      assertEquals(true, entity0.isDefaultTXManager());
      assertEquals(false, entity0.hasUuid());
      assertEquals("\" u)lu *|5s", entity0.getHumanNames());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals(true, entity0.isDefaultSessionFactory());
      assertEquals(false, entity0.hasLocalService());
      assertEquals("liferayDataSource", entity0.getDataSource());
      assertEquals(true, entity0.isDefaultDataSource());
  }

  @Test
  public void test40()  throws Throwable  {
      Entity entity0 = new Entity((String) null);
      entity0.getTransients();
      assertEquals(false, entity0.hasUuid());
      assertEquals(true, entity0.isDefaultSessionFactory());
      assertEquals(false, entity0.hasUuidAccessor());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals(false, entity0.hasFinderClass());
      assertEquals("liferaySessionFactory", entity0.getSessionFactory());
  }

  @Test
  public void test41()  throws Throwable  {
      LinkedList<EntityColumn> linkedList0 = new LinkedList<EntityColumn>();
      EntityOrder entityOrder0 = new EntityOrder(false, (List<EntityColumn>) linkedList0);
      LinkedList<EntityFinder> linkedList1 = new LinkedList<EntityFinder>();
      Entity entity0 = new Entity("W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", true, true, true, true, "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", false, true, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, entityOrder0, (List<EntityFinder>) linkedList1, (List<Entity>) null, (List<String>) null);
      // Undeclared exception!
      try {
        entity0.isHierarchicalTree();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * There is no primary key for entity W|$2dd:2-rNx[1*W_
         */
      }
  }

  @Test
  public void test42()  throws Throwable  {
      LinkedList<EntityColumn> linkedList0 = new LinkedList<EntityColumn>();
      EntityColumn entityColumn0 = new EntityColumn("W|$2dd:2-rNx[1*WB_");
      linkedList0.add(entityColumn0);
      EntityColumn entityColumn1 = Entity.getColumn("W|$2dd:2-rNx[1*WB_", (List<EntityColumn>) linkedList0);
      assertEquals("w|$2dd:2-r nx[1* w b_", entityColumn1.getHumanName());
  }

  @Test
  public void test43()  throws Throwable  {
      LinkedList<EntityColumn> linkedList0 = new LinkedList<EntityColumn>();
      EntityColumn entityColumn0 = new EntityColumn("W|$2dd:2-rNx[1*WB_");
      linkedList0.add(entityColumn0);
      // Undeclared exception!
      try {
        Entity.getColumn("liferaySessionFactory", (List<EntityColumn>) linkedList0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Column liferaySessionFactory not found
         */
      }
  }

  @Test
  public void test44()  throws Throwable  {
      Entity entity0 = new Entity("pkMuSp");
      List<EntityColumn> list0 = entity0.getFinderColumnsList();
      assertNotNull(list0);
      
      EntityOrder entityOrder0 = new EntityOrder(true, (List<EntityColumn>) null);
      Entity entity1 = new Entity("pkMuSp", "pkMuSp", "pkMuSp", "pkMuSp", "pkMuSp", "pkMuSp", "pkMuSp", true, true, true, true, "pkMuSp", "pkMuSp", "pkMuSp", "pkMuSp", "pkMuSp", false, true, (List<EntityColumn>) null, (List<EntityColumn>) null, list0, list0, list0, entityOrder0, (List<EntityFinder>) null, (List<Entity>) null, (List<String>) null);
      boolean boolean0 = entity1.isWorkflowEnabled();
      assertEquals(false, entity0.hasLocalService());
      assertEquals(false, entity0.hasFinderClass());
      assertEquals("", entity1.getShortName());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals("pkMuSp", entity1.getTable());
      assertEquals(false, entity0.hasUuid());
      assertEquals(false, boolean0);
      assertEquals("pk mu sps", entity0.getHumanNames());
      assertEquals(true, entity0.isDefaultTXManager());
      assertEquals("pkMuSp", entity1.getPersistenceClass());
      assertEquals(true, entity0.isDefaultSessionFactory());
      assertTrue(entity1.equals(entity0));
      assertEquals("pkMuSp", entity1.getPackagePath());
      assertEquals(false, entity0.hasUuidAccessor());
      assertEquals("liferayDataSource", entity0.getDataSource());
  }

  @Test
  public void test45()  throws Throwable  {
      LinkedList<EntityColumn> linkedList0 = new LinkedList<EntityColumn>();
      EntityColumn entityColumn0 = new EntityColumn("W|$2dd:2-rNx[1*WB_");
      linkedList0.add(entityColumn0);
      boolean boolean0 = Entity.hasColumn("W|$2dd:2-rNx[1*WB_", (List<EntityColumn>) linkedList0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test46()  throws Throwable  {
      LinkedList<EntityColumn> linkedList0 = new LinkedList<EntityColumn>();
      EntityFinder entityFinder0 = new EntityFinder("W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", true, "W|$2dd:2-rNx[1*W_", true, (List<EntityColumn>) linkedList0);
      EntityOrder entityOrder0 = new EntityOrder(true, (List<EntityColumn>) linkedList0);
      LinkedList<EntityFinder> linkedList1 = new LinkedList<EntityFinder>();
      linkedList1.add(entityFinder0);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Entity entity0 = new Entity("W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "k*HQo3", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "k*HQo3", "S$yHukUMoPm5S$yHukUMoPm5", true, true, true, true, "S$yHukUMoPm5S$yHukUMoPm5", "W|$2dd:2-rNx[1*W_", ".WU3<e", "S$yHukUMoPm5S$yHukUMoPm5", ".WU3<e", true, false, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, entityOrder0, (List<EntityFinder>) linkedList1, (List<Entity>) null, (List<String>) linkedList2);
      List<EntityFinder> list0 = entity0.getCollectionFinderList();
      assertNotNull(list0);
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPackagePath());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPortletName());
      assertEquals("S$yHukUMoPm5S$yHukUMoPm5", entity0.getAlias());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getHumanName());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals("k*HQo3", entity0.getTable());
      assertEquals("S$yHukUMoPm5S$yHukUMoPm5", entity0.getSessionFactory());
      assertEquals("k*HQo3", entity0.getPortletShortName());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getFinderClass());
      assertEquals(true, list0.isEmpty());
      assertEquals(".WU3<e", entity0.getDataSource());
      assertEquals(true, entity0.hasUuid());
      assertEquals("S$yHukUMoPm5S$yHukUMoPm5", entity0.getPersistenceClass());
      assertEquals(true, entity0.hasLocalService());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getShortName());
      assertEquals(".WU3<e", entity0.getTXManager());
      assertEquals(true, entity0.hasUuidAccessor());
  }

  @Test
  public void test47()  throws Throwable  {
      LinkedList<EntityColumn> linkedList0 = new LinkedList<EntityColumn>();
      EntityColumn entityColumn0 = new EntityColumn("W|$2dd:2-rNx[1*W_");
      linkedList0.add(entityColumn0);
      EntityOrder entityOrder0 = new EntityOrder(true, (List<EntityColumn>) linkedList0);
      LinkedList<EntityFinder> linkedList1 = new LinkedList<EntityFinder>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Entity entity0 = new Entity("W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "k*HQo3", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "k*HQo3", "S$yHukUMoPm5S$yHukUMoPm5", true, true, true, true, "S$yHukUMoPm5S$yHukUMoPm5", "W|$2dd:2-rNx[1*W_", ".WU3<e", "S$yHukUMoPm5S$yHukUMoPm5", ".WU3<e", true, false, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, entityOrder0, (List<EntityFinder>) linkedList1, (List<Entity>) null, (List<String>) linkedList2);
      entity0.getColumnByMappingTable("W|$2dd:2-rNx[1*W_");
      assertEquals(true, entity0.hasUuid());
      assertEquals(true, entity0.hasUuidAccessor());
      assertEquals("k*HQo3", entity0.getPortletShortName());
      assertEquals("W|$2dd:2-rNx[1*W_s", entity0.getHumanNames());
      assertEquals(true, entity0.hasLocalService());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals(".WU3<e", entity0.getDataSource());
      assertEquals("S$yHukUMoPm5S$yHukUMoPm5", entity0.getAlias());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPackagePath());
      assertEquals(".WU3<e", entity0.getTXManager());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPortletName());
      assertEquals("S$yHukUMoPm5S$yHukUMoPm5", entity0.getPersistenceClass());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getFinderClass());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getName());
      assertEquals("S$yHukUMoPm5S$yHukUMoPm5", entity0.getSessionFactory());
      assertEquals("k*HQo3", entity0.getTable());
  }

  @Test
  public void test48()  throws Throwable  {
      LinkedList<EntityColumn> linkedList0 = new LinkedList<EntityColumn>();
      EntityOrder entityOrder0 = new EntityOrder(false, (List<EntityColumn>) linkedList0);
      LinkedList<EntityFinder> linkedList1 = new LinkedList<EntityFinder>();
      EntityColumn entityColumn0 = new EntityColumn("W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", false, false, true, "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", false, false, false, false, false, true);
      linkedList0.add(entityColumn0);
      Entity entity0 = new Entity("W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", true, true, true, true, "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", false, true, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, entityOrder0, (List<EntityFinder>) linkedList1, (List<Entity>) null, (List<String>) null);
      assertEquals(true, entity0.hasUuid());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPortletName());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getTable());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPackagePath());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getHumanName());
      assertEquals(true, entity0.hasUuidAccessor());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getFinderClass());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getAlias());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getTXManager());
      assertEquals(true, entity0.hasLocalService());
      assertEquals("", entity0.getShortName());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getSessionFactory());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getDataSource());
  }

  @Test
  public void test49()  throws Throwable  {
      LinkedList<EntityColumn> linkedList0 = new LinkedList<EntityColumn>();
      EntityOrder entityOrder0 = new EntityOrder(true, (List<EntityColumn>) linkedList0);
      LinkedList<EntityFinder> linkedList1 = new LinkedList<EntityFinder>();
      EntityColumn entityColumn0 = new EntityColumn("W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", true, true, true, "W|$2dd:2-rNx[1*W_", "k*HQo3", "k*HQo3", "k*HQo3", "W|$2dd:2-rNx[1*W_", false, false, true, true, true, true);
      linkedList0.add(entityColumn0);
      Entity entity0 = new Entity("W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "k*HQo3", "W|$2dd:2-rNx[1*W_", "k*HQo3", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", true, true, true, true, "W|$2dd:2-rNx[1*W_", "k*HQo3", "k*HQo3", "k*HQo3", "W|$2dd:2-rNx[1*W_", true, true, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, entityOrder0, (List<EntityFinder>) linkedList1, (List<Entity>) null, (List<String>) null);
      EntityColumn entityColumn1 = entity0.getFilterPKColumn();
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPersistenceClass());
      assertEquals(true, entity0.hasUuid());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getTable());
      assertNotNull(entityColumn1);
      assertEquals("k*HQo3", entity0.getHumanName());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPackagePath());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getShortName());
      assertEquals("k*HQo3", entity0.getSessionFactory());
      assertEquals(true, entity0.hasUuidAccessor());
      assertEquals("k*HQo3", entity0.getFinderClass());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getTXManager());
      assertEquals("k*HQo3", entity0.getDataSource());
      assertEquals("k*HQo3", entity0.getPortletShortName());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPortletName());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getAlias());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getName());
  }

  @Test
  public void test50()  throws Throwable  {
      EntityOrder entityOrder0 = new EntityOrder(true, (List<EntityColumn>) null);
      LinkedList<EntityFinder> linkedList0 = new LinkedList<EntityFinder>();
      Entity entity0 = new Entity((String) null, (String) null, (String) null, "VCHAR", "VCHAR", (String) null, (String) null, true, true, true, true, (String) null, (String) null, (String) null, (String) null, (String) null, true, true, (List<EntityColumn>) null, (List<EntityColumn>) null, (List<EntityColumn>) null, (List<EntityColumn>) null, (List<EntityColumn>) null, entityOrder0, (List<EntityFinder>) linkedList0, (List<Entity>) null, (List<String>) null);
      List<EntityFinder> list0 = entity0.getCollectionFinderList();
      assertEquals(true, entity0.hasRemoteService());
      assertNotNull(list0);
      assertEquals(true, entity0.hasUuidAccessor());
      assertEquals(true, entity0.hasLocalService());
      assertEquals("VCHARs", entity0.getHumanNames());
      assertEquals("liferayDataSource", entity0.getDataSource());
      assertEquals("liferaySessionFactory", entity0.getSessionFactory());
      assertEquals(false, entity0.hasFinderClass());
      assertEquals(true, entity0.isDefaultTXManager());
      assertEquals(true, entity0.isDefaultDataSource());
  }

  @Test
  public void test51()  throws Throwable  {
      LinkedList<EntityColumn> linkedList0 = new LinkedList<EntityColumn>();
      EntityOrder entityOrder0 = new EntityOrder(true, (List<EntityColumn>) linkedList0);
      LinkedList<EntityFinder> linkedList1 = new LinkedList<EntityFinder>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Entity entity0 = new Entity("W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "k*HQo3", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "k*HQo3", "S$yHukUMoPm5S$yHukUMoPm5", true, true, true, true, "S$yHukUMoPm5S$yHukUMoPm5", "W|$2dd:2-rNx[1*W_", ".WU3<e", "S$yHukUMoPm5S$yHukUMoPm5", ".WU3<e", true, false, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, entityOrder0, (List<EntityFinder>) linkedList1, (List<Entity>) null, (List<String>) linkedList2);
      entity0.getColumnByMappingTable("W|$2dd:2-rNx[1*W_");
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPackagePath());
      assertEquals("k*HQo3", entity0.getTable());
      assertEquals(".WU3<e", entity0.getDataSource());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals("W|$2dd:2-rNx[1*W_s", entity0.getHumanNames());
      assertEquals(true, entity0.hasUuidAccessor());
      assertEquals("S$yHukUMoPm5S$yHukUMoPm5", entity0.getAlias());
      assertEquals("S$yHukUMoPm5S$yHukUMoPm5", entity0.getPersistenceClass());
      assertEquals("k*HQo3", entity0.getPortletShortName());
      assertEquals(true, entity0.hasUuid());
      assertEquals(true, entity0.hasLocalService());
      assertEquals(".WU3<e", entity0.getTXManager());
      assertEquals("S$yHukUMoPm5S$yHukUMoPm5", entity0.getSessionFactory());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getFinderClass());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPortletName());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getShortName());
  }

  @Test
  public void test52()  throws Throwable  {
      LinkedList<EntityColumn> linkedList0 = new LinkedList<EntityColumn>();
      EntityColumn entityColumn0 = new EntityColumn("W|$2dd:2-rNx[1*W_");
      linkedList0.add(entityColumn0);
      EntityOrder entityOrder0 = new EntityOrder(true, (List<EntityColumn>) linkedList0);
      LinkedList<EntityFinder> linkedList1 = new LinkedList<EntityFinder>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Entity entity0 = new Entity("W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "k*HQo3", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "k*HQo3", "S$yHukUMoPm5S$yHukUMoPm5", true, true, true, true, "S$yHukUMoPm5S$yHukUMoPm5", "W|$2dd:2-rNx[1*W_", ".WU3<e", "S$yHukUMoPm5S$yHukUMoPm5", ".WU3<e", true, false, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, entityOrder0, (List<EntityFinder>) linkedList1, (List<Entity>) null, (List<String>) linkedList2);
      EntityColumn entityColumn1 = entity0.getFilterPKColumn();
      assertEquals("S$yHukUMoPm5S$yHukUMoPm5", entity0.getAlias());
      assertEquals(true, entity0.hasUuidAccessor());
      assertEquals(".WU3<e", entity0.getTXManager());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getFinderClass());
      assertEquals(true, entity0.hasUuid());
      assertEquals("S$yHukUMoPm5S$yHukUMoPm5", entity0.getSessionFactory());
      assertEquals("k*HQo3", entity0.getPortletShortName());
      assertEquals(true, entity0.hasLocalService());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPackagePath());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getShortName());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPortletName());
      assertEquals("W|$2dd:2-rNx[1*W_s", entity0.getHumanNames());
      assertEquals("S$yHukUMoPm5S$yHukUMoPm5", entity0.getPersistenceClass());
      assertEquals(".WU3<e", entity0.getDataSource());
      assertNotNull(entityColumn1);
      assertEquals(true, entity0.hasRemoteService());
      assertEquals("k*HQo3", entity0.getTable());
  }

  @Test
  public void test53()  throws Throwable  {
      LinkedList<EntityColumn> linkedList0 = new LinkedList<EntityColumn>();
      Entity entity0 = new Entity("Sf$yHu>UMobPm5", "Sf$yHu>UMobPm5", "Sf$yHu>UMobPm5", "Sf$yHu>UMobPm5", "Sf$yHu>UMobPm5", "Sf$yHu>UMobPm5", (String) null, true, false, false, true, "Sf$yHu>UMobPm5", (String) null, "Sf$yHu>UMobPm5", (String) null, (String) null, true, true, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (EntityOrder) null, (List<EntityFinder>) null, (List<Entity>) null, (List<String>) null);
      // Undeclared exception!
      try {
        entity0.getPKClassName();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * There is no primary key for entity Sf$yHu>UMobPm5
         */
      }
  }

  @Test
  public void test54()  throws Throwable  {
      LinkedList<EntityColumn> linkedList0 = new LinkedList<EntityColumn>();
      EntityColumn entityColumn0 = new EntityColumn("W|$2dd:2-rNx[1*W_");
      linkedList0.add(entityColumn0);
      EntityOrder entityOrder0 = new EntityOrder(true, (List<EntityColumn>) linkedList0);
      LinkedList<EntityFinder> linkedList1 = new LinkedList<EntityFinder>();
      linkedList0.add(entityColumn0);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Entity entity0 = new Entity("W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "k*HQo3", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "k*HQo3", "S$yHukUMoPm5S$yHukUMoPm5", true, true, true, true, "S$yHukUMoPm5S$yHukUMoPm5", "W|$2dd:2-rNx[1*W_", ".WU3<e", "S$yHukUMoPm5S$yHukUMoPm5", ".WU3<e", true, false, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, entityOrder0, (List<EntityFinder>) linkedList1, (List<Entity>) null, (List<String>) linkedList2);
      String string0 = entity0.getPKClassName();
      assertEquals(true, entity0.hasLocalService());
      assertEquals(true, entity0.hasUuid());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getFinderClass());
      assertEquals("S$yHukUMoPm5S$yHukUMoPm5", entity0.getPersistenceClass());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPortletName());
      assertEquals(".WU3<e", entity0.getTXManager());
      assertEquals("k*HQo3", entity0.getPortletShortName());
      assertEquals("k*HQo3", entity0.getTable());
      assertEquals(true, entity0.hasUuidAccessor());
      assertEquals("S$yHukUMoPm5S$yHukUMoPm5", entity0.getSessionFactory());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals("W|$2dd:2-rNx[1*W_s", entity0.getHumanNames());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPackagePath());
      assertNotNull(string0);
      assertEquals("W|$2dd:2-rNx[1*W_PK", string0);
      assertEquals(".WU3<e", entity0.getDataSource());
      assertEquals("S$yHukUMoPm5S$yHukUMoPm5", entity0.getAlias());
  }

  @Test
  public void test55()  throws Throwable  {
      LinkedList<EntityColumn> linkedList0 = new LinkedList<EntityColumn>();
      EntityColumn entityColumn0 = new EntityColumn("W|$2dd:2-rNx[1*W_");
      linkedList0.add(entityColumn0);
      linkedList0.add(entityColumn0);
      EntityOrder entityOrder0 = new EntityOrder(false, (List<EntityColumn>) linkedList0);
      LinkedList<EntityFinder> linkedList1 = new LinkedList<EntityFinder>();
      Entity entity0 = new Entity("W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", true, true, true, true, "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", false, true, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, entityOrder0, (List<EntityFinder>) linkedList1, (List<Entity>) null, (List<String>) null);
      String string0 = entity0.getPKDBName();
      assertEquals("w|$2dd:2-rNx[1*W_PK", string0);
      assertNotNull(string0);
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPortletName());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getSessionFactory());
      assertEquals(true, entity0.hasUuid());
      assertEquals(true, entity0.hasLocalService());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getTXManager());
      assertEquals("", entity0.getShortName());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPersistenceClass());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPackagePath());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getDataSource());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getAlias());
      assertEquals(true, entity0.hasUuidAccessor());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals("W|$2dd:2-rNx[1*W_s", entity0.getHumanNames());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getTable());
  }

  @Test
  public void test56()  throws Throwable  {
      Entity entity0 = new Entity("uV [`*<WWl^O2@+T7");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      EntityOrder entityOrder0 = new EntityOrder(false, (List<EntityColumn>) null);
      List<EntityColumn> list0 = entity0.getFinderColumnsList();
      assertNotNull(list0);
      
      Entity entity1 = new Entity((String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, false, false, false, false, (String) null, (String) null, (String) null, (String) null, (String) null, false, false, list0, list0, list0, list0, list0, entityOrder0, (List<EntityFinder>) null, (List<Entity>) null, (List<String>) linkedList0);
      // Undeclared exception!
      try {
        entity1.isGroupedModel();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * There is no primary key for entity null
         */
      }
  }

  @Test
  public void test57()  throws Throwable  {
      LinkedList<EntityColumn> linkedList0 = new LinkedList<EntityColumn>();
      EntityColumn entityColumn0 = new EntityColumn("W|$2dd:2-rNx[1*W_");
      linkedList0.add(entityColumn0);
      linkedList0.add(entityColumn0);
      EntityOrder entityOrder0 = new EntityOrder(true, (List<EntityColumn>) linkedList0);
      LinkedList<EntityFinder> linkedList1 = new LinkedList<EntityFinder>();
      Entity entity0 = new Entity("W|$2dd:2-rNx[1*W_", "k*HQo3", "k*HQo3", "k*HQo3", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", true, true, true, true, "k*HQo3", "k*HQo3", "W|$2dd:2-rNx[1*W_", "k*HQo3", "k*HQ)W|$2dd:2-rNx[1*W_", true, true, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, entityOrder0, (List<EntityFinder>) linkedList1, (List<Entity>) null, (List<String>) null);
      boolean boolean0 = entity0.isGroupedModel();
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getHumanName());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getAlias());
      assertEquals("k*HQo3", entity0.getPortletName());
      assertEquals(false, boolean0);
      assertEquals("", entity0.getShortName());
      assertEquals("k*HQ)W|$2dd:2-rNx[1*W_", entity0.getTXManager());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPackagePath());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getDataSource());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals(true, entity0.hasUuid());
      assertEquals(true, entity0.hasUuidAccessor());
      assertEquals("k*HQo3PK", entity0.getPKVarName());
      assertEquals("k*HQo3", entity0.getSessionFactory());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getTable());
      assertEquals("k*HQo3", entity0.getFinderClass());
      assertEquals("k*HQo3", entity0.getPersistenceClass());
  }

  @Test
  public void test58()  throws Throwable  {
      LinkedList<EntityColumn> linkedList0 = new LinkedList<EntityColumn>();
      EntityOrder entityOrder0 = new EntityOrder(true, (List<EntityColumn>) linkedList0);
      LinkedList<EntityFinder> linkedList1 = new LinkedList<EntityFinder>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Entity entity0 = new Entity("W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "k*HQo3", "W|$2dd:2-rNx[1*W_", "k*HQo3", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", true, true, true, true, "W|$2dd:2-rNx[1*W_", "k*HQo3", "k*HQo3", "k*HQo3", "W|$2dd:2-rNx[1*W_", true, true, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, entityOrder0, (List<EntityFinder>) linkedList1, (List<Entity>) null, (List<String>) linkedList2);
      String string0 = entity0.getShortName();
      assertEquals(true, entity0.hasUuid());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals("k*HQo3", entity0.getDataSource());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPortletName());
      assertEquals("W|$2dd:2-rNx[1*W_", string0);
      assertEquals(true, entity0.hasUuidAccessor());
      assertEquals("k*HQo3", entity0.getFinderClass());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getAlias());
      assertEquals("k*HQo3", entity0.getHumanName());
      assertEquals(true, entity0.hasLocalService());
      assertEquals("k*HQo3", entity0.getSessionFactory());
      assertEquals("k*HQo3", entity0.getPortletShortName());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPersistenceClass());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPackagePath());
      assertNotNull(string0);
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getTable());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getTXManager());
  }

  @Test
  public void test59()  throws Throwable  {
      LinkedList<EntityColumn> linkedList0 = new LinkedList<EntityColumn>();
      EntityOrder entityOrder0 = new EntityOrder(false, (List<EntityColumn>) linkedList0);
      LinkedList<EntityFinder> linkedList1 = new LinkedList<EntityFinder>();
      Entity entity0 = new Entity("W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", true, true, true, true, "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", false, true, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, entityOrder0, (List<EntityFinder>) linkedList1, (List<Entity>) null, (List<String>) null);
      String string0 = entity0.getShortName();
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getDataSource());
      assertEquals(true, entity0.hasLocalService());
      assertEquals("W|$2dd:2-rNx[1*W_s", entity0.getHumanNames());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getTable());
      assertEquals(true, entity0.hasUuid());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPersistenceClass());
      assertNotNull(string0);
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getFinderClass());
      assertEquals(true, entity0.hasUuidAccessor());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getAlias());
      assertEquals("", string0);
      assertEquals(true, entity0.hasRemoteService());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getSessionFactory());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getTXManager());
  }

  @Test
  public void test60()  throws Throwable  {
      LinkedList<EntityColumn> linkedList0 = new LinkedList<EntityColumn>();
      EntityFinder entityFinder0 = new EntityFinder("W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", true, "W|$2dd:2-rNx[1*W_", true, (List<EntityColumn>) linkedList0);
      EntityOrder entityOrder0 = new EntityOrder(true, (List<EntityColumn>) linkedList0);
      LinkedList<EntityFinder> linkedList1 = new LinkedList<EntityFinder>();
      linkedList1.add(entityFinder0);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Entity entity0 = new Entity("W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "k*HQo3", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "k*HQo3", "S$yHukUMoPm5S$yHukUMoPm5", true, true, true, true, "S$yHukUMoPm5S$yHukUMoPm5", "W|$2dd:2-rNx[1*W_", ".WU3<e", "S$yHukUMoPm5S$yHukUMoPm5", ".WU3<e", true, false, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, entityOrder0, (List<EntityFinder>) linkedList1, (List<Entity>) null, (List<String>) linkedList2);
      List<EntityFinder> list0 = entity0.getUniqueFinderList();
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPackagePath());
      assertEquals("S$yHukUMoPm5S$yHukUMoPm5", entity0.getAlias());
      assertEquals(true, entity0.hasLocalService());
      assertEquals("W|$2dd:2-rNx[1*W_s", entity0.getHumanNames());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getShortName());
      assertNotNull(list0);
      assertEquals(true, entity0.hasUuid());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPortletName());
      assertEquals("k*HQo3", entity0.getTable());
      assertEquals("k*HQo3", entity0.getPortletShortName());
      assertEquals(".WU3<e", entity0.getTXManager());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getFinderClass());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals("S$yHukUMoPm5S$yHukUMoPm5", entity0.getSessionFactory());
      assertEquals(".WU3<e", entity0.getDataSource());
      assertEquals("S$yHukUMoPm5S$yHukUMoPm5", entity0.getPersistenceClass());
  }

  @Test
  public void test61()  throws Throwable  {
      LinkedList<EntityColumn> linkedList0 = new LinkedList<EntityColumn>();
      EntityFinder entityFinder0 = new EntityFinder("W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", true, "W|$2dd:2-rNx[1*W_", false, (List<EntityColumn>) linkedList0);
      EntityOrder entityOrder0 = new EntityOrder(false, (List<EntityColumn>) linkedList0);
      LinkedList<EntityFinder> linkedList1 = new LinkedList<EntityFinder>();
      linkedList1.add(entityFinder0);
      Entity entity0 = new Entity("W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "k*HQo3", "W|$2dd:2-rNx[1*W_", "k*HQo3", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", true, true, true, true, "W|$2dd:2-rNx[1*W_", "k*HQo3", "k*HQo3", "k*HQo3", "W|$2dd:2-rNx[1*W_", true, true, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, entityOrder0, (List<EntityFinder>) linkedList1, (List<Entity>) null, (List<String>) null);
      boolean boolean0 = entity0.hasArrayableOperator();
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getTable());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getAlias());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPortletName());
      assertEquals(true, entity0.hasUuidAccessor());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPersistenceClass());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getTXManager());
      assertEquals("k*HQo3", entity0.getSessionFactory());
      assertEquals("k*HQo3s", entity0.getHumanNames());
      assertEquals(false, boolean0);
      assertEquals(true, entity0.hasUuid());
      assertEquals("k*HQo3", entity0.getPortletShortName());
      assertEquals("k*HQo3", entity0.getDataSource());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getShortName());
      assertEquals("k*HQo3", entity0.getFinderClass());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPackagePath());
  }

  @Test
  public void test62()  throws Throwable  {
      Entity entity0 = new Entity("userId");
      boolean boolean0 = entity0.hasColumns();
      assertEquals(false, entity0.hasUuid());
      assertEquals("user ID", entity0.getHumanName());
      assertEquals(false, boolean0);
      assertEquals(false, entity0.hasLocalService());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals("liferayTransactionManager", entity0.getTXManager());
      assertEquals(false, entity0.hasFinderClass());
      assertEquals(false, entity0.hasUuidAccessor());
      assertEquals("liferaySessionFactory", entity0.getSessionFactory());
      assertEquals(true, entity0.isDefaultDataSource());
      assertEquals("userId", entity0.getVarName());
  }

  @Test
  public void test63()  throws Throwable  {
      LinkedList<EntityColumn> linkedList0 = new LinkedList<EntityColumn>();
      EntityOrder entityOrder0 = new EntityOrder(true, (List<EntityColumn>) linkedList0);
      LinkedList<EntityFinder> linkedList1 = new LinkedList<EntityFinder>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Entity entity0 = new Entity("W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "k*HQo3", "W|$2dd:2-rNx[1*W_", "k*HQo3", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", true, true, true, true, "W|$2dd:2-rNx[1*W_", "k*HQo3", "k*HQo3", "k*HQo3", "W|$2dd:2-rNx[1*W_", true, true, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, entityOrder0, (List<EntityFinder>) linkedList1, (List<Entity>) null, (List<String>) linkedList2);
      entity0.hasColumns();
      assertEquals("k*HQo3", entity0.getFinderClass());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getAlias());
      assertEquals(true, entity0.hasLocalService());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPackagePath());
      assertEquals("k*HQo3", entity0.getPortletShortName());
      assertEquals(false, entity0.isDefaultTXManager());
      assertEquals("k*HQo3s", entity0.getHumanNames());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPortletName());
      assertEquals(true, entity0.hasUuidAccessor());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getTable());
      assertEquals("k*HQo3", entity0.getSessionFactory());
      assertEquals(true, entity0.hasUuid());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPersistenceClass());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getShortName());
      assertEquals("k*HQo3", entity0.getDataSource());
  }

  @Test
  public void test64()  throws Throwable  {
      LinkedList<EntityColumn> linkedList0 = new LinkedList<EntityColumn>();
      EntityColumn entityColumn0 = new EntityColumn("W|$2dd:2-rNx[1*W_");
      linkedList0.add(entityColumn0);
      EntityOrder entityOrder0 = new EntityOrder(true, (List<EntityColumn>) linkedList0);
      LinkedList<EntityFinder> linkedList1 = new LinkedList<EntityFinder>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Entity entity0 = new Entity("W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "k*HQo3", "W|$2dd:2-rNx[1*W_", "k*HQo3", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", true, true, true, true, "W|$2dd:2-rNx[1*W_", "k*HQo3", "k*HQo3", "k*HQo3", "W|$2dd:2-rNx[1*W_", true, true, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, entityOrder0, (List<EntityFinder>) linkedList1, (List<Entity>) null, (List<String>) linkedList2);
      boolean boolean0 = entity0.hasColumns();
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getAlias());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getTable());
      assertEquals("k*HQo3", entity0.getPortletShortName());
      assertEquals("k*HQo3", entity0.getHumanName());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getShortName());
      assertEquals(true, boolean0);
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPackagePath());
      assertEquals(true, entity0.hasUuid());
      assertEquals(true, entity0.hasUuidAccessor());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPersistenceClass());
      assertEquals(true, entity0.hasLocalService());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getTXManager());
      assertEquals("k*HQo3", entity0.getFinderClass());
      assertEquals("k*HQo3", entity0.getDataSource());
      assertEquals("k*HQo3", entity0.getSessionFactory());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPortletName());
  }

  @Test
  public void test65()  throws Throwable  {
      Entity entity0 = new Entity("com/liferIy/portal/tools/servicebuilder/dependencies/model.ftl");
      boolean boolean0 = entity0.hasEagerBlobColumn();
      assertEquals(true, entity0.hasRemoteService());
      assertEquals(true, entity0.isDefaultTXManager());
      assertEquals(false, entity0.hasUuidAccessor());
      assertEquals(false, boolean0);
      assertEquals(false, entity0.hasLocalService());
      assertEquals(false, entity0.hasFinderClass());
      assertEquals(true, entity0.isDefaultDataSource());
      assertEquals("com/lifer iy/portal/tools/servicebuilder/dependencies/model.ftl", entity0.getHumanName());
      assertEquals("com/liferIy/portal/tools/servicebuilder/dependencies/model.ftl", entity0.getVarName());
      assertEquals(true, entity0.isDefaultSessionFactory());
  }

  @Test
  public void test66()  throws Throwable  {
      LinkedList<EntityColumn> linkedList0 = new LinkedList<EntityColumn>();
      Entity entity0 = new Entity("Sf$yHu>UMobPm5", "Sf$yHu>UMobPm5", "Sf$yHu>UMobPm5", "Sf$yHu>UMobPm5", "Sf$yHu>UMobPm5", "Sf$yHu>UMobPm5", (String) null, true, false, false, true, "Sf$yHu>UMobPm5", (String) null, "Sf$yHu>UMobPm5", (String) null, (String) null, true, true, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (EntityOrder) null, (List<EntityFinder>) null, (List<Entity>) null, (List<String>) null);
      boolean boolean0 = entity0.hasEagerBlobColumn();
      assertEquals(false, boolean0);
      assertEquals("", entity0.getShortName());
      assertEquals(true, entity0.hasUuid());
      assertEquals("Sf$yHu>UMobPm5", entity0.getTable());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals("liferayTransactionManager", entity0.getTXManager());
      assertEquals(false, entity0.hasLocalService());
      assertEquals(false, entity0.hasUuidAccessor());
      assertEquals("Sf$yHu>UMobPm5", entity0.getPersistenceClass());
      assertEquals("Sf$yHu>UMobPm5", entity0.getDataSource());
      assertEquals("Sf$yHu>UMobPm5", entity0.getPackagePath());
      assertEquals("Sf$yHu>UMobPm5s", entity0.getHumanNames());
      assertEquals("liferaySessionFactory", entity0.getSessionFactory());
      assertEquals(false, entity0.hasFinderClass());
  }

  @Test
  public void test67()  throws Throwable  {
      LinkedList<EntityColumn> linkedList0 = new LinkedList<EntityColumn>();
      EntityColumn entityColumn0 = new EntityColumn("W|$2dd:2-rNx[1*W_");
      linkedList0.add(entityColumn0);
      EntityOrder entityOrder0 = new EntityOrder(true, (List<EntityColumn>) linkedList0);
      LinkedList<EntityFinder> linkedList1 = new LinkedList<EntityFinder>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Entity entity0 = new Entity("W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "k*HQo3", "W|$2dd:2-rNx[1*W_", "k*HQo3", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", true, true, true, true, "W|$2dd:2-rNx[1*W_", "k*HQo3", "k*HQo3", "k*HQo3", "W|$2dd:2-rNx[1*W_", true, true, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, entityOrder0, (List<EntityFinder>) linkedList1, (List<Entity>) null, (List<String>) linkedList2);
      boolean boolean0 = entity0.hasEagerBlobColumn();
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getShortName());
      assertEquals(true, entity0.hasUuid());
      assertEquals(true, entity0.hasLocalService());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getTable());
      assertEquals(false, boolean0);
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getAlias());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getTXManager());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPersistenceClass());
      assertEquals("k*HQo3", entity0.getDataSource());
      assertEquals("k*HQo3", entity0.getHumanName());
      assertEquals(true, entity0.hasUuidAccessor());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals("k*HQo3", entity0.getPortletShortName());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPackagePath());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPortletName());
      assertEquals("k*HQo3", entity0.getSessionFactory());
      assertEquals("k*HQo3", entity0.getFinderClass());
  }

  @Test
  public void test68()  throws Throwable  {
      LinkedList<EntityColumn> linkedList0 = new LinkedList<EntityColumn>();
      EntityOrder entityOrder0 = new EntityOrder(true, (List<EntityColumn>) linkedList0);
      LinkedList<EntityFinder> linkedList1 = new LinkedList<EntityFinder>();
      EntityColumn entityColumn0 = new EntityColumn("W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", true, true, true, "W|$2dd:2-rNx[1*W_", "k*HQo3", "k*HQo3", "k*HQo3", "W|$2dd:2-rNx[1*W_", false, false, true, true, true, true);
      linkedList0.add(entityColumn0);
      Entity entity0 = new Entity("W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "k*HQo3", "W|$2dd:2-rNx[1*W_", "k*HQo3", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", true, true, true, true, "W|$2dd:2-rNx[1*W_", "k*HQo3", "k*HQo3", "k*HQo3", "W|$2dd:2-rNx[1*W_", true, true, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, entityOrder0, (List<EntityFinder>) linkedList1, (List<Entity>) null, (List<String>) null);
      boolean boolean0 = entity0.hasEagerBlobColumn();
      assertEquals("k*HQo3", entity0.getFinderClass());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getTXManager());
      assertEquals("k*HQo3", entity0.getHumanName());
      assertEquals("k*HQo3", entity0.getPortletShortName());
      assertEquals(true, entity0.hasUuid());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPackagePath());
      assertEquals(true, entity0.hasLocalService());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPortletName());
      assertEquals(true, boolean0);
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getTable());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getAlias());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPersistenceClass());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getShortName());
      assertEquals("k*HQo3", entity0.getSessionFactory());
      assertEquals("k*HQo3", entity0.getDataSource());
  }

  @Test
  public void test69()  throws Throwable  {
      Entity entity0 = new Entity("EBx>j*2");
      boolean boolean0 = entity0.hasFinderClass();
      assertEquals(false, entity0.hasUuid());
      assertEquals(false, entity0.hasLocalService());
      assertEquals(true, entity0.isDefaultSessionFactory());
      assertEquals("e bx>j*2", entity0.getHumanName());
      assertEquals("EBx>j*2s", entity0.getNames());
      assertEquals("liferayDataSource", entity0.getDataSource());
      assertEquals(false, boolean0);
      assertEquals(true, entity0.isDefaultTXManager());
      assertEquals(true, entity0.hasRemoteService());
  }

  @Test
  public void test70()  throws Throwable  {
      Entity entity0 = new Entity("userId");
      boolean boolean0 = entity0.hasLazyBlobColumn();
      assertEquals(false, entity0.hasFinderClass());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals(true, entity0.isDefaultDataSource());
      assertEquals(true, entity0.isDefaultTXManager());
      assertEquals("user ID", entity0.getHumanName());
      assertEquals(false, boolean0);
      assertEquals(false, entity0.hasUuid());
      assertEquals("userId", entity0.getName());
      assertEquals(false, entity0.hasUuidAccessor());
      assertEquals("liferaySessionFactory", entity0.getSessionFactory());
      assertEquals(false, entity0.hasLocalService());
  }

  @Test
  public void test71()  throws Throwable  {
      LinkedList<EntityColumn> linkedList0 = new LinkedList<EntityColumn>();
      EntityColumn entityColumn0 = new EntityColumn("W|$2dd:2-rNx[1*W_");
      linkedList0.add(entityColumn0);
      EntityOrder entityOrder0 = new EntityOrder(true, (List<EntityColumn>) linkedList0);
      LinkedList<EntityFinder> linkedList1 = new LinkedList<EntityFinder>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Entity entity0 = new Entity("W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "k*HQo3", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "k*HQo3", "S$yHukUMoPm5S$yHukUMoPm5", true, true, true, true, "S$yHukUMoPm5S$yHukUMoPm5", "W|$2dd:2-rNx[1*W_", ".WU3<e", "S$yHukUMoPm5S$yHukUMoPm5", ".WU3<e", true, false, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, entityOrder0, (List<EntityFinder>) linkedList1, (List<Entity>) null, (List<String>) linkedList2);
      boolean boolean0 = entity0.hasLazyBlobColumn();
      assertEquals(".WU3<e", entity0.getDataSource());
      assertEquals("k*HQo3", entity0.getPortletShortName());
      assertEquals(true, entity0.hasUuid());
      assertEquals("k*HQo3", entity0.getTable());
      assertEquals("S$yHukUMoPm5S$yHukUMoPm5", entity0.getPersistenceClass());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals("w|$2dd:2-rNx[1*W_s", entity0.getVarNames());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getFinderClass());
      assertEquals(true, boolean0);
      assertEquals(true, entity0.hasUuidAccessor());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPackagePath());
      assertEquals(".WU3<e", entity0.getTXManager());
      assertEquals("S$yHukUMoPm5S$yHukUMoPm5", entity0.getSessionFactory());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPortletName());
      assertEquals("S$yHukUMoPm5S$yHukUMoPm5", entity0.getAlias());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getHumanName());
  }

  @Test
  public void test72()  throws Throwable  {
      LinkedList<EntityColumn> linkedList0 = new LinkedList<EntityColumn>();
      EntityColumn entityColumn0 = new EntityColumn("W|$2dd:2-rNx[1*W_");
      linkedList0.add(entityColumn0);
      EntityOrder entityOrder0 = new EntityOrder(false, (List<EntityColumn>) linkedList0);
      LinkedList<EntityFinder> linkedList1 = new LinkedList<EntityFinder>();
      Entity entity0 = new Entity("W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", true, true, true, true, "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", false, true, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, entityOrder0, (List<EntityFinder>) linkedList1, (List<Entity>) null, (List<String>) null);
      boolean boolean0 = entity0.hasLocalizedColumn();
      assertEquals(true, entity0.hasRemoteService());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getFinderClass());
      assertEquals(false, boolean0);
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getTXManager());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getDataSource());
      assertEquals(true, entity0.hasUuid());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getTable());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getSessionFactory());
      assertEquals(true, entity0.hasUuidAccessor());
      assertEquals("W|$2dd:2-rNx[1*W_s", entity0.getNames());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPortletName());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPackagePath());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getAlias());
      assertEquals(true, entity0.hasLocalService());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPersistenceClass());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getHumanName());
  }

  @Test
  public void test73()  throws Throwable  {
      LinkedList<EntityColumn> linkedList0 = new LinkedList<EntityColumn>();
      EntityOrder entityOrder0 = new EntityOrder(true, (List<EntityColumn>) linkedList0);
      LinkedList<EntityFinder> linkedList1 = new LinkedList<EntityFinder>();
      EntityColumn entityColumn0 = new EntityColumn("W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", true, true, true, "W|$2dd:2-rNx[1*W_", "k*HQo3", "k*HQo3", "k*HQo3", "W|$2dd:2-rNx[1*W_", false, false, true, true, true, true);
      linkedList0.add(entityColumn0);
      Entity entity0 = new Entity("W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "k*HQo3", "W|$2dd:2-rNx[1*W_", "k*HQo3", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", true, true, true, true, "W|$2dd:2-rNx[1*W_", "k*HQo3", "k*HQo3", "k*HQo3", "W|$2dd:2-rNx[1*W_", true, true, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, entityOrder0, (List<EntityFinder>) linkedList1, (List<Entity>) null, (List<String>) null);
      boolean boolean0 = entity0.hasLocalizedColumn();
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getShortName());
      assertEquals(true, entity0.hasUuid());
      assertEquals("k*HQo3s", entity0.getHumanNames());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPortletName());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPackagePath());
      assertEquals(true, entity0.hasLocalService());
      assertEquals("k*HQo3", entity0.getSessionFactory());
      assertEquals(true, boolean0);
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getTXManager());
      assertEquals("k*HQo3", entity0.getPortletShortName());
      assertEquals(true, entity0.hasUuidAccessor());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getAlias());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPersistenceClass());
      assertEquals("k*HQo3", entity0.getFinderClass());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getTable());
      assertEquals("k*HQo3", entity0.getDataSource());
  }

  @Test
  public void test74()  throws Throwable  {
      LinkedList<EntityColumn> linkedList0 = new LinkedList<EntityColumn>();
      EntityColumn entityColumn0 = new EntityColumn("W|$2dd:2-rNx[1*W_");
      linkedList0.add(entityColumn0);
      linkedList0.add(entityColumn0);
      EntityOrder entityOrder0 = new EntityOrder(false, (List<EntityColumn>) linkedList0);
      LinkedList<EntityFinder> linkedList1 = new LinkedList<EntityFinder>();
      Entity entity0 = new Entity("W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", true, true, true, true, "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", false, true, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, entityOrder0, (List<EntityFinder>) linkedList1, (List<Entity>) null, (List<String>) null);
      boolean boolean0 = entity0.isHierarchicalTree();
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getDataSource());
      assertEquals(true, entity0.hasUuidAccessor());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getSessionFactory());
      assertEquals("", entity0.getShortName());
      assertEquals(true, entity0.hasLocalService());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getTXManager());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getFinderClass());
      assertEquals("w|$2dd:2-rNx[1*W_PK", entity0.getPKVarName());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPortletName());
      assertEquals("W|$2dd:2-rNx[1*W_s", entity0.getHumanNames());
      assertEquals(false, boolean0);
      assertEquals(true, entity0.hasUuid());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPersistenceClass());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getAlias());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getTable());
  }

  @Test
  public void test75()  throws Throwable  {
      Entity entity0 = new Entity("pkMuSp");
      List<EntityColumn> list0 = entity0.getFinderColumnsList();
      assertNotNull(list0);
      
      EntityOrder entityOrder0 = new EntityOrder(true, (List<EntityColumn>) null);
      Entity entity1 = new Entity("pkMuSp", "pkMuSp", "pkMuSp", "pkMuSp", "pkMuSp", "pkMuSp", "pkMuSp", true, true, true, true, "pkMuSp", "pkMuSp", "pkMuSp", "pkMuSp", "pkMuSp", false, true, (List<EntityColumn>) null, (List<EntityColumn>) null, list0, list0, list0, entityOrder0, (List<EntityFinder>) null, (List<Entity>) null, (List<String>) null);
      entity1.isAttachedModel();
      assertEquals("pkMuSp", entity1.getPackagePath());
      assertEquals("pkMuSp", entity1.getTable());
      assertEquals(true, entity0.isDefaultSessionFactory());
      assertEquals(true, entity1.hasUuidAccessor());
      assertEquals("pkMuSp", entity1.getDataSource());
      assertEquals("liferayDataSource", entity0.getDataSource());
      assertEquals(false, entity0.hasLocalService());
      assertEquals("liferayTransactionManager", entity0.getTXManager());
      assertTrue(entity1.equals(entity0));
      assertEquals("", entity1.getShortName());
      assertEquals(false, entity0.hasUuid());
      assertEquals(false, entity1.isAuditedModel());
      assertEquals(false, entity0.hasFinderClass());
      assertEquals(true, entity0.hasRemoteService());
  }

  @Test
  public void test76()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      EntityOrder entityOrder0 = new EntityOrder(false, (List<EntityColumn>) null);
      Entity entity0 = new Entity((String) null, (String) null, (String) null, (String) null, (String) null, (String) null, "uV [`*<WWl^O2@+T7", false, true, false, false, "uV [`*<WWl^O2@+T7", (String) null, "uV [`*<WWl^O2@+T7", "uV [`*<WWl^O2@+T7", "uV [`*<WWl^O2@+T7", false, true, (List<EntityColumn>) null, (List<EntityColumn>) null, (List<EntityColumn>) null, (List<EntityColumn>) null, (List<EntityColumn>) null, entityOrder0, (List<EntityFinder>) null, (List<Entity>) null, (List<String>) linkedList0);
      boolean boolean0 = entity0.isDefaultDataSource();
      assertEquals(false, entity0.hasLocalService());
      assertEquals(false, entity0.hasRemoteService());
      assertEquals(false, boolean0);
      assertEquals("uV [`*<WWl^O2@+T7", entity0.getPersistenceClass());
      assertEquals(false, entity0.hasUuid());
      assertEquals("uV [`*<WWl^O2@+T7", entity0.getSessionFactory());
      assertEquals(false, entity0.hasFinderClass());
      assertEquals("uV [`*<WWl^O2@+T7", entity0.getTXManager());
      assertEquals(true, entity0.hasUuidAccessor());
      assertEquals("uV [`*<WWl^O2@+T7", entity0.getAlias());
      assertEquals("uV [`*<WWl^O2@+T7", entity0.getDataSource());
  }

  @Test
  public void test77()  throws Throwable  {
      Entity entity0 = new Entity("\"U)lu *|5");
      boolean boolean0 = entity0.isDefaultDataSource();
      assertEquals(true, boolean0);
      assertEquals(false, entity0.hasUuid());
      assertEquals(false, entity0.hasFinderClass());
      assertEquals("liferayTransactionManager", entity0.getTXManager());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals("\"U)lu *|5s", entity0.getNames());
      assertEquals("\" u)lu *|5", entity0.getHumanName());
      assertEquals(false, entity0.hasLocalService());
      assertEquals("liferaySessionFactory", entity0.getSessionFactory());
      assertEquals(false, entity0.hasUuidAccessor());
  }

  @Test
  public void test78()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      EntityOrder entityOrder0 = new EntityOrder(false, (List<EntityColumn>) null);
      Entity entity0 = new Entity((String) null, (String) null, (String) null, (String) null, (String) null, (String) null, "uV [`*<WWl^O2@+T7", false, true, false, false, "uV [`*<WWl^O2@+T7", (String) null, "uV [`*<WWl^O2@+T7", "uV [`*<WWl^O2@+T7", "uV [`*<WWl^O2@+T7", false, true, (List<EntityColumn>) null, (List<EntityColumn>) null, (List<EntityColumn>) null, (List<EntityColumn>) null, (List<EntityColumn>) null, entityOrder0, (List<EntityFinder>) null, (List<Entity>) null, (List<String>) linkedList0);
      boolean boolean0 = entity0.isDefaultSessionFactory();
      assertEquals(false, boolean0);
      assertEquals("uV [`*<WWl^O2@+T7", entity0.getPersistenceClass());
      assertEquals(false, entity0.hasFinderClass());
      assertEquals("uV [`*<WWl^O2@+T7", entity0.getSessionFactory());
      assertEquals("uV [`*<WWl^O2@+T7", entity0.getTXManager());
      assertEquals(false, entity0.isDefaultDataSource());
      assertEquals("uV [`*<WWl^O2@+T7", entity0.getAlias());
      assertEquals(false, entity0.hasLocalService());
      assertEquals(true, entity0.hasUuidAccessor());
      assertEquals(false, entity0.hasUuid());
  }

  @Test
  public void test79()  throws Throwable  {
      Entity entity0 = new Entity("EBx>j*2");
      boolean boolean0 = entity0.isDefaultSessionFactory();
      assertEquals(false, entity0.hasLocalService());
      assertEquals(true, boolean0);
      assertEquals("e bx>j*2", entity0.getHumanName());
      assertEquals(false, entity0.hasFinderClass());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals("eBx>j*2", entity0.getVarName());
      assertEquals(false, entity0.hasUuid());
      assertEquals(false, entity0.hasUuidAccessor());
  }

  @Test
  public void test80()  throws Throwable  {
      Entity entity0 = new Entity("^+_0gyC#_&l~");
      List<EntityColumn> list0 = entity0.getCollectionList();
      EntityOrder entityOrder0 = new EntityOrder(false, (List<EntityColumn>) null);
      Entity entity1 = new Entity("^+_0gyC#_&l~", "^+_0gyC#_&l~", "^+_0gyC#_&l~", "^+_0gyC#_&l~", "^+_0gyC#_&l~", "^+_0gyC#_&l~", "^+_0gyC#_&l~", false, false, false, false, "^+_0gyC#_&l~", "^+_0gyC#_&l~", "^+_0gyC#_&l~", "^+_0gyC#_&l~", "^+_0gyC#_&l~", false, false, (List<EntityColumn>) null, (List<EntityColumn>) null, list0, list0, (List<EntityColumn>) null, entityOrder0, (List<EntityFinder>) null, (List<Entity>) null, (List<String>) null);
      boolean boolean0 = entity1.isDefaultTXManager();
      assertEquals("^+_0gyC#_&l~", entity1.getPersistenceClass());
      assertEquals(false, entity0.hasUuid());
      assertEquals(false, entity0.hasLocalService());
      assertEquals(false, entity0.hasUuidAccessor());
      assertEquals("", entity1.getShortName());
      assertTrue(entity1.equals(entity0));
      assertEquals(false, entity1.isDefaultSessionFactory());
      assertEquals("^+_0gyC#_&l~", entity1.getPackagePath());
      assertEquals("^+_0gyC#_&l~", entity1.getPortletName());
      assertEquals(true, entity0.isDefaultTXManager());
      assertEquals("^+_0gyC#_&l~", entity1.getDataSource());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals("^+_0gyC#_&l~", entity1.getTable());
      assertEquals(false, boolean0);
      assertEquals("^+_0gy c#_&l~s", entity0.getHumanNames());
      assertEquals("^+_0gyC#_&l~", entity1.getAlias());
      assertEquals(true, entity0.isDefaultSessionFactory());
      assertEquals(false, entity0.hasFinderClass());
  }

  @Test
  public void test81()  throws Throwable  {
      Entity entity0 = new Entity("EBx>j*2");
      boolean boolean0 = entity0.isDefaultTXManager();
      assertEquals(false, entity0.hasUuidAccessor());
      assertEquals(false, entity0.hasUuid());
      assertEquals("liferaySessionFactory", entity0.getSessionFactory());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals(false, entity0.hasFinderClass());
      assertEquals("e bx>j*2", entity0.getHumanName());
      assertEquals(true, entity0.isDefaultDataSource());
      assertEquals(false, entity0.hasLocalService());
      assertEquals(true, boolean0);
  }

  @Test
  public void test82()  throws Throwable  {
      Entity entity0 = new Entity("userId");
      entity0.isOrdered();
      assertEquals(false, entity0.hasUuid());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals(false, entity0.hasUuidAccessor());
      assertEquals("user ID", entity0.getHumanName());
      assertEquals(false, entity0.hasLocalService());
      assertEquals("userId", entity0.getSpringPropertyName());
      assertEquals(true, entity0.isDefaultSessionFactory());
      assertEquals(false, entity0.hasFinderClass());
      assertEquals(true, entity0.isDefaultDataSource());
      assertEquals(true, entity0.isDefaultTXManager());
  }

  @Test
  public void test83()  throws Throwable  {
      LinkedList<EntityColumn> linkedList0 = new LinkedList<EntityColumn>();
      EntityOrder entityOrder0 = new EntityOrder(true, (List<EntityColumn>) linkedList0);
      LinkedList<EntityFinder> linkedList1 = new LinkedList<EntityFinder>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Entity entity0 = new Entity("W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "k*HQo3", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "k*HQo3", "S$yHukUMoPm5S$yHukUMoPm5", true, true, true, true, "S$yHukUMoPm5S$yHukUMoPm5", "W|$2dd:2-rNx[1*W_", ".WU3<e", "S$yHukUMoPm5S$yHukUMoPm5", ".WU3<e", true, false, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, entityOrder0, (List<EntityFinder>) linkedList1, (List<Entity>) null, (List<String>) linkedList2);
      boolean boolean0 = entity0.isOrdered();
      assertEquals("S$yHukUMoPm5S$yHukUMoPm5", entity0.getAlias());
      assertEquals("S$yHukUMoPm5S$yHukUMoPm5", entity0.getPersistenceClass());
      assertEquals(true, entity0.hasUuid());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPackagePath());
      assertEquals(true, entity0.hasUuidAccessor());
      assertEquals(true, entity0.hasLocalService());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getShortName());
      assertEquals("k*HQo3", entity0.getTable());
      assertEquals(".WU3<e", entity0.getDataSource());
      assertEquals("S$yHukUMoPm5S$yHukUMoPm5", entity0.getSessionFactory());
      assertEquals("k*HQo3", entity0.getPortletShortName());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getHumanName());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPortletName());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getFinderClass());
      assertEquals(true, boolean0);
      assertEquals(".WU3<e", entity0.getTXManager());
      assertEquals(true, entity0.hasRemoteService());
  }

  @Test
  public void test84()  throws Throwable  {
      LinkedList<EntityColumn> linkedList0 = new LinkedList<EntityColumn>();
      EntityOrder entityOrder0 = new EntityOrder(true, (List<EntityColumn>) linkedList0);
      LinkedList<EntityFinder> linkedList1 = new LinkedList<EntityFinder>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Entity entity0 = new Entity("W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "k*HQo3", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "k*HQo3", "S$yHukUMoPm5S$yHukUMoPm5", true, true, false, false, "S$yHukUMoPm5S$yHukUMoPm5", "W|$2dd:2-rNx[1*W_", ".WU3<e", "S$yHukUMoPm5S$yHukUMoPm5", ".WU3<e", true, false, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, entityOrder0, (List<EntityFinder>) linkedList1, (List<Entity>) null, (List<String>) linkedList2);
      boolean boolean0 = entity0.isPermissionCheckEnabled();
      assertEquals(".WU3<e", entity0.getTXManager());
      assertEquals("S$yHukUMoPm5S$yHukUMoPm5", entity0.getSessionFactory());
      assertEquals(true, entity0.hasUuidAccessor());
      assertEquals("S$yHukUMoPm5S$yHukUMoPm5", entity0.getAlias());
      assertEquals("k*HQo3", entity0.getPortletShortName());
      assertEquals(false, boolean0);
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPortletName());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPackagePath());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getShortName());
      assertEquals("W|$2dd:2-rNx[1*W_s", entity0.getHumanNames());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getFinderClass());
      assertEquals(".WU3<e", entity0.getDataSource());
      assertEquals(false, entity0.hasRemoteService());
      assertEquals("k*HQo3", entity0.getTable());
      assertEquals(false, entity0.hasLocalService());
      assertEquals(true, entity0.hasUuid());
      assertEquals("S$yHukUMoPm5S$yHukUMoPm5", entity0.getPersistenceClass());
  }

  @Test
  public void test85()  throws Throwable  {
      Entity entity0 = new Entity("Group");
      EntityFinder entityFinder0 = new EntityFinder("Group", "Group", false, "Group", true, (List<EntityColumn>) null);
      boolean boolean0 = entity0.isPermissionCheckEnabled(entityFinder0);
      assertEquals(false, boolean0);
      assertEquals(true, entity0.isDefaultDataSource());
      assertEquals("groups", entity0.getHumanNames());
      assertEquals("Group", entity0.getName());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals(false, entity0.hasFinderClass());
      assertEquals(true, entity0.isDefaultSessionFactory());
      assertEquals(true, entity0.isDefaultTXManager());
      assertEquals(false, entity0.hasUuid());
      assertEquals(false, entity0.hasLocalService());
  }

  @Test
  public void test86()  throws Throwable  {
      Entity entity0 = new Entity("pkMuSp");
      EntityFinder entityFinder0 = new EntityFinder("pkMuSp", "pkMuSp", false, "pkMuSp", false, (List<EntityColumn>) null);
      entity0.isPermissionCheckEnabled(entityFinder0);
      assertEquals(false, entity0.hasUuid());
      assertEquals(false, entity0.hasLocalService());
      assertEquals(false, entity0.hasUuidAccessor());
      assertEquals("liferaySessionFactory", entity0.getSessionFactory());
      assertEquals("pk mu sp", entity0.getHumanName());
      assertEquals(true, entity0.isDefaultTXManager());
      assertEquals("liferayDataSource", entity0.getDataSource());
      assertEquals(false, entity0.hasFinderClass());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals(true, entity0.isDefaultDataSource());
  }

  @Test
  public void test87()  throws Throwable  {
      LinkedList<EntityColumn> linkedList0 = new LinkedList<EntityColumn>();
      EntityOrder entityOrder0 = new EntityOrder(true, (List<EntityColumn>) linkedList0);
      LinkedList<EntityFinder> linkedList1 = new LinkedList<EntityFinder>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Entity entity0 = new Entity("W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "k*HQo3", "W|$2dd:2-rNx[1*W_", "k*HQo3", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", true, true, true, true, "W|$2dd:2-rNx[1*W_", "k*HQo3", "k*HQo3", "k*HQo3", "W|$2dd:2-rNx[1*W_", true, true, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, entityOrder0, (List<EntityFinder>) linkedList1, (List<Entity>) null, (List<String>) linkedList2);
      boolean boolean0 = entity0.isPermissionedModel();
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getTable());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPortletName());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getAlias());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPackagePath());
      assertEquals(false, boolean0);
      assertEquals("k*HQo3", entity0.getFinderClass());
      assertEquals("k*HQo3", entity0.getPortletShortName());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getShortName());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getTXManager());
      assertEquals("k*HQo3", entity0.getSessionFactory());
      assertEquals("k*HQo3", entity0.getDataSource());
      assertEquals(true, entity0.hasUuid());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPersistenceClass());
      assertEquals(true, entity0.hasLocalService());
      assertEquals("k*HQo3s", entity0.getHumanNames());
  }

  @Test
  public void test88()  throws Throwable  {
      LinkedList<EntityColumn> linkedList0 = new LinkedList<EntityColumn>();
      EntityColumn entityColumn0 = new EntityColumn("W|$2dd:2-rNx[1*W_");
      linkedList0.add(entityColumn0);
      EntityOrder entityOrder0 = new EntityOrder(true, (List<EntityColumn>) linkedList0);
      LinkedList<EntityFinder> linkedList1 = new LinkedList<EntityFinder>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Entity entity0 = new Entity("W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "k*HQo3", "W|$2dd:2-rNx[1*W_", "W|$2dd:2-rNx[1*W_", "k*HQo3", "S$yHukUMoPm5S$yHukUMoPm5", true, true, true, true, "S$yHukUMoPm5S$yHukUMoPm5", "W|$2dd:2-rNx[1*W_", ".WU3<e", "S$yHukUMoPm5S$yHukUMoPm5", ".WU3<e", true, false, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, (List<EntityColumn>) linkedList0, entityOrder0, (List<EntityFinder>) linkedList1, (List<Entity>) null, (List<String>) linkedList2);
      boolean boolean0 = entity0.isResourcedModel();
      assertEquals(true, entity0.hasUuid());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPKVarName());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPackagePath());
      assertEquals("W|$2dd:2-rNx[1*W_s", entity0.getHumanNames());
      assertEquals(true, entity0.hasLocalService());
      assertEquals("S$yHukUMoPm5S$yHukUMoPm5", entity0.getPersistenceClass());
      assertEquals("S$yHukUMoPm5S$yHukUMoPm5", entity0.getAlias());
      assertEquals(".WU3<e", entity0.getTXManager());
      assertEquals("k*HQo3", entity0.getTable());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getFinderClass());
      assertEquals("W|$2dd:2-rNx[1*W_", entity0.getPortletName());
      assertEquals(".WU3<e", entity0.getDataSource());
      assertEquals(true, entity0.hasRemoteService());
      assertEquals("k*HQo3", entity0.getPortletShortName());
      assertEquals(false, boolean0);
      assertEquals(true, entity0.hasUuidAccessor());
      assertEquals("S$yHukUMoPm5S$yHukUMoPm5", entity0.getSessionFactory());
      assertEquals("w|$2dd:2-rNx[1*W_", entity0.getSpringPropertyName());
  }
}
