/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.util.AggregateClassLoader;
import java.io.IOException;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.Collection;
import java.util.Enumeration;
import java.util.List;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class AggregateClassLoaderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      URL[] uRLArray0 = new URL[7];
      ClassLoader[] classLoaderArray0 = new ClassLoader[7];
      URLClassLoader uRLClassLoader0 = new URLClassLoader(uRLArray0);
      classLoaderArray0[1] = (ClassLoader) uRLClassLoader0;
      AggregateClassLoader aggregateClassLoader0 = (AggregateClassLoader)AggregateClassLoader.getAggregateClassLoader(classLoaderArray0);
      URLClassLoader uRLClassLoader1 = new URLClassLoader(uRLArray0, (ClassLoader) aggregateClassLoader0);
      // Undeclared exception!
      try {
        uRLClassLoader1.getResource("fc");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader[] classLoaderArray0 = new ClassLoader[51];
      classLoaderArray0[0] = classLoader0;
      AggregateClassLoader aggregateClassLoader0 = new AggregateClassLoader(classLoaderArray0[0]);
      aggregateClassLoader0.addClassLoader(classLoaderArray0);
      try {
        aggregateClassLoader0.findClass("");
        fail("Expecting exception: ClassNotFoundException");
      } catch(ClassNotFoundException e) {
        /*
         * Unable to find class 
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = AggregateClassLoader.getAggregateClassLoader(classLoader0, (ClassLoader[]) null);
      assertNull(classLoader1);
  }

  @Test
  public void test3()  throws Throwable  {
      ClassLoader[] classLoaderArray0 = new ClassLoader[1];
      AggregateClassLoader aggregateClassLoader0 = (AggregateClassLoader)AggregateClassLoader.getAggregateClassLoader(classLoaderArray0);
      assertNull(aggregateClassLoader0);
  }

  @Test
  public void test4()  throws Throwable  {
      ClassLoader classLoader0 = AggregateClassLoader.getAggregateClassLoader((ClassLoader[]) null);
      assertNull(classLoader0);
  }

  @Test
  public void test5()  throws Throwable  {
      AggregateClassLoader aggregateClassLoader0 = new AggregateClassLoader((ClassLoader) null);
      ClassLoader[] classLoaderArray0 = new ClassLoader[37];
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoaderArray0[0] = classLoader0;
      classLoaderArray0[26] = (ClassLoader) aggregateClassLoader0;
      aggregateClassLoader0.addClassLoader(classLoaderArray0);
  }

  @Test
  public void test6()  throws Throwable  {
      AggregateClassLoader aggregateClassLoader0 = new AggregateClassLoader((ClassLoader) null);
      ClassLoader[] classLoaderArray0 = new ClassLoader[37];
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoaderArray0[0] = classLoader0;
      aggregateClassLoader0.addClassLoader(classLoaderArray0);
      List<ClassLoader> list0 = aggregateClassLoader0.getClassLoaders();
      aggregateClassLoader0.addClassLoader((Collection<ClassLoader>) list0);
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
  }

  @Test
  public void test7()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      AggregateClassLoader aggregateClassLoader0 = new AggregateClassLoader(classLoader0);
      boolean boolean0 = aggregateClassLoader0.equals((Object) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      AggregateClassLoader aggregateClassLoader0 = new AggregateClassLoader(classLoader0);
      AggregateClassLoader aggregateClassLoader1 = new AggregateClassLoader((ClassLoader) aggregateClassLoader0);
      boolean boolean0 = aggregateClassLoader0.equals((Object) aggregateClassLoader1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      ClassLoader[] classLoaderArray0 = new ClassLoader[51];
      AggregateClassLoader aggregateClassLoader0 = new AggregateClassLoader(classLoaderArray0[0]);
      AggregateClassLoader aggregateClassLoader1 = (AggregateClassLoader)AggregateClassLoader.getAggregateClassLoader(classLoaderArray0);
      assertNotNull(aggregateClassLoader1);
      
      boolean boolean0 = aggregateClassLoader0.equals((Object) aggregateClassLoader1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      URL[] uRLArray0 = new URL[7];
      ClassLoader[] classLoaderArray0 = new ClassLoader[7];
      URLClassLoader uRLClassLoader0 = new URLClassLoader(uRLArray0);
      AggregateClassLoader aggregateClassLoader0 = (AggregateClassLoader)AggregateClassLoader.getAggregateClassLoader((ClassLoader) uRLClassLoader0, classLoaderArray0);
      URLClassLoader uRLClassLoader1 = URLClassLoader.newInstance(uRLArray0, (ClassLoader) aggregateClassLoader0);
      // Undeclared exception!
      try {
        uRLClassLoader1.getResource("fc");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader[] classLoaderArray0 = new ClassLoader[51];
      classLoaderArray0[0] = classLoader0;
      AggregateClassLoader aggregateClassLoader0 = new AggregateClassLoader(classLoaderArray0[0]);
      aggregateClassLoader0.addClassLoader(classLoaderArray0);
      Enumeration<URL> enumeration0 = aggregateClassLoader0.getResources("");
      assertEquals(false, enumeration0.hasMoreElements());
  }

  @Test
  public void test12()  throws Throwable  {
      AggregateClassLoader aggregateClassLoader0 = new AggregateClassLoader((ClassLoader) null);
      Enumeration<URL> enumeration0 = aggregateClassLoader0.getResources("1U");
      assertEquals(false, enumeration0.hasMoreElements());
  }

  @Test
  public void test13()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      AggregateClassLoader aggregateClassLoader0 = new AggregateClassLoader(classLoader0);
      int int0 = aggregateClassLoader0.hashCode();
      assertEquals(1, int0);
  }

  @Test
  public void test14()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      AggregateClassLoader aggregateClassLoader0 = new AggregateClassLoader(classLoader0);
      ClassLoader[] classLoaderArray0 = new ClassLoader[22];
      classLoaderArray0[6] = classLoader0;
      aggregateClassLoader0.addClassLoader(classLoaderArray0);
      try {
        aggregateClassLoader0.loadClass("v=uRah7yRw=L.h]ctda");
        fail("Expecting exception: ClassNotFoundException");
      } catch(ClassNotFoundException e) {
        /*
         * Unable to load class v=uRah7yRw=L.h]ctda
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      AggregateClassLoader aggregateClassLoader0 = new AggregateClassLoader((ClassLoader) null);
      try {
        aggregateClassLoader0.loadClass("1U");
        fail("Expecting exception: ClassNotFoundException");
      } catch(ClassNotFoundException e) {
        /*
         * Parent class loader has been garbage collected
         */
      }
  }
}
