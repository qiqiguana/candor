/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.json;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.json.JSONArrayImpl;
import com.liferay.portal.json.JSONObjectImpl;
import com.liferay.portal.kernel.json.JSONArray;
import com.liferay.portal.kernel.json.JSONException;
import java.io.CharArrayWriter;
import java.io.Writer;
import java.util.Date;
import java.util.Iterator;
import java.util.Map;
import org.json.JSONObject;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class JSONObjectImplEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      JSONObjectImpl jSONObjectImpl0 = new JSONObjectImpl((Object) "SwingDisplayedMnemonicIndexKey");
      JSONObject jSONObject0 = jSONObjectImpl0.getJSONObject();
      JSONObjectImpl jSONObjectImpl1 = new JSONObjectImpl(jSONObject0);
      assertNotSame(jSONObjectImpl0, jSONObjectImpl1);
  }

  @Test
  public void test1()  throws Throwable  {
      JSONObjectImpl jSONObjectImpl0 = new JSONObjectImpl((Object) "ShortDescription");
      String[] stringArray0 = new String[7];
      JSONObjectImpl jSONObjectImpl1 = new JSONObjectImpl((com.liferay.portal.kernel.json.JSONObject) jSONObjectImpl0, stringArray0);
      assertEquals("{}", jSONObjectImpl1.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      JSONObjectImpl jSONObjectImpl0 = new JSONObjectImpl();
      String string0 = jSONObjectImpl0.getString((String) null);
      assertEquals("", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      JSONObjectImpl jSONObjectImpl0 = new JSONObjectImpl();
      double double0 = jSONObjectImpl0.getDouble((String) null, (double) 0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test4()  throws Throwable  {
      JSONObjectImpl jSONObjectImpl0 = new JSONObjectImpl((Object) "borderPainted");
      boolean boolean0 = jSONObjectImpl0.getBoolean("borderPainted", true);
      assertEquals(true, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      JSONObjectImpl jSONObjectImpl0 = new JSONObjectImpl();
      Object object0 = jSONObjectImpl0.remove("KB^ksh_ddz@^OG(BC");
      assertNull(object0);
  }

  @Test
  public void test6()  throws Throwable  {
      JSONObjectImpl jSONObjectImpl0 = null;
      try {
        jSONObjectImpl0 = new JSONObjectImpl("*adlxUDoNbXFXGcql");
        fail("Expecting exception: JSONException");
      } catch(JSONException e) {
        /*
         * org.json.JSONException: A JSONObject text must begin with '{' at 1 [character 2 line 1]
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      JSONObjectImpl jSONObjectImpl0 = new JSONObjectImpl();
      Iterator<String> iterator0 = jSONObjectImpl0.keys();
      assertEquals(false, iterator0.hasNext());
  }

  @Test
  public void test8()  throws Throwable  {
      JSONObjectImpl jSONObjectImpl0 = new JSONObjectImpl();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = (CharArrayWriter)jSONObjectImpl0.write((Writer) charArrayWriter0);
      assertNotNull(charArrayWriter1);
      assertEquals("{}", charArrayWriter0.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      JSONObjectImpl jSONObjectImpl0 = new JSONObjectImpl();
      int int0 = jSONObjectImpl0.getInt("KB^ksh_ddz@^OG(BC", (-183));
      assertEquals((-183), int0);
  }

  @Test
  public void test10()  throws Throwable  {
      JSONObjectImpl jSONObjectImpl0 = new JSONObjectImpl((Object) "ShortDescription");
      long long0 = jSONObjectImpl0.getLong((String) null);
      assertEquals(0L, long0);
  }

  @Test
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[9];
      JSONObjectImpl jSONObjectImpl0 = new JSONObjectImpl((Object) "SmallIcon", stringArray0);
      String string0 = jSONObjectImpl0.toString();
      assertEquals("{}", string0);
  }

  @Test
  public void test12()  throws Throwable  {
      JSONObjectImpl jSONObjectImpl0 = new JSONObjectImpl();
      boolean boolean0 = jSONObjectImpl0.has("*adlxUDoNbXFXGcql");
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      JSONObjectImpl jSONObjectImpl0 = new JSONObjectImpl();
      int int0 = jSONObjectImpl0.length();
      assertEquals(0, int0);
  }

  @Test
  public void test14()  throws Throwable  {
      JSONObjectImpl jSONObjectImpl0 = new JSONObjectImpl((Object) "SwingDisplayedMnemonicIndexKey");
      JSONArrayImpl jSONArrayImpl0 = (JSONArrayImpl)jSONObjectImpl0.names();
      assertEquals("[\"bytes\",\"empty\"]", jSONArrayImpl0.toString());
  }

  @Test
  public void test15()  throws Throwable  {
      JSONObjectImpl jSONObjectImpl0 = new JSONObjectImpl();
      int int0 = jSONObjectImpl0.getInt((String) null);
      assertEquals(0, int0);
  }

  @Test
  public void test16()  throws Throwable  {
      JSONObjectImpl jSONObjectImpl0 = new JSONObjectImpl((Map<?, ?>) null);
      assertEquals(0, jSONObjectImpl0.length());
  }

  @Test
  public void test17()  throws Throwable  {
      JSONObjectImpl jSONObjectImpl0 = new JSONObjectImpl();
      String string0 = jSONObjectImpl0.toString(162);
      assertEquals("{}", string0);
  }

  @Test
  public void test18()  throws Throwable  {
      JSONObjectImpl jSONObjectImpl0 = new JSONObjectImpl();
      double double0 = jSONObjectImpl0.getDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test19()  throws Throwable  {
      JSONObjectImpl jSONObjectImpl0 = new JSONObjectImpl();
      boolean boolean0 = jSONObjectImpl0.isNull((String) null);
      assertEquals(true, boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      JSONObjectImpl jSONObjectImpl0 = new JSONObjectImpl();
      boolean boolean0 = jSONObjectImpl0.getBoolean((String) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      JSONObjectImpl jSONObjectImpl0 = new JSONObjectImpl();
      long long0 = jSONObjectImpl0.getLong("*adlxUDoNbXFXGcql", 1216L);
      assertEquals(1216L, long0);
  }

  @Test
  public void test22()  throws Throwable  {
      JSONObjectImpl jSONObjectImpl0 = new JSONObjectImpl((Object) "borderPainted");
      String string0 = jSONObjectImpl0.getString("borderPainted", "borderPainted");
      assertEquals("borderPainted", string0);
  }

  @Test
  public void test23()  throws Throwable  {
      JSONObjectImpl jSONObjectImpl0 = new JSONObjectImpl((Object) "ShortDescription");
      JSONArrayImpl jSONArrayImpl0 = (JSONArrayImpl)jSONObjectImpl0.getJSONArray("ShortDescription");
      assertNull(jSONArrayImpl0);
  }

  @Test
  public void test24()  throws Throwable  {
      JSONObjectImpl jSONObjectImpl0 = new JSONObjectImpl();
      JSONObjectImpl jSONObjectImpl1 = (JSONObjectImpl)jSONObjectImpl0.getJSONObject("*adlxUDoNbXFXGcql");
      assertNull(jSONObjectImpl1);
  }

  @Test
  public void test25()  throws Throwable  {
      JSONObjectImpl jSONObjectImpl0 = new JSONObjectImpl();
      JSONObjectImpl jSONObjectImpl1 = (JSONObjectImpl)jSONObjectImpl0.put((String) null, true);
      assertSame(jSONObjectImpl0, jSONObjectImpl1);
  }

  @Test
  public void test26()  throws Throwable  {
      JSONObjectImpl jSONObjectImpl0 = new JSONObjectImpl();
      Date date0 = new Date((long) 0);
      JSONObjectImpl jSONObjectImpl1 = (JSONObjectImpl)jSONObjectImpl0.put((String) null, date0);
      assertSame(jSONObjectImpl1, jSONObjectImpl0);
  }

  @Test
  public void test27()  throws Throwable  {
      JSONObjectImpl jSONObjectImpl0 = new JSONObjectImpl();
      JSONObjectImpl jSONObjectImpl1 = (JSONObjectImpl)jSONObjectImpl0.put((String) null, (-575.8515896000488));
      assertSame(jSONObjectImpl0, jSONObjectImpl1);
  }

  @Test
  public void test28()  throws Throwable  {
      JSONObjectImpl jSONObjectImpl0 = new JSONObjectImpl();
      JSONObjectImpl jSONObjectImpl1 = (JSONObjectImpl)jSONObjectImpl0.put((String) null, 162);
      assertEquals(0, jSONObjectImpl1.length());
  }

  @Test
  public void test29()  throws Throwable  {
      JSONObjectImpl jSONObjectImpl0 = new JSONObjectImpl((Object) "ShortDescription");
      JSONObjectImpl jSONObjectImpl1 = (JSONObjectImpl)jSONObjectImpl0.put("ShortDescription", (JSONArray) null);
      assertSame(jSONObjectImpl1, jSONObjectImpl0);
  }

  @Test
  public void test30()  throws Throwable  {
      JSONObjectImpl jSONObjectImpl0 = new JSONObjectImpl();
      JSONObjectImpl jSONObjectImpl1 = (JSONObjectImpl)jSONObjectImpl0.put((String) null, (com.liferay.portal.kernel.json.JSONObject) jSONObjectImpl0);
      assertEquals("{}", jSONObjectImpl1.toString());
  }

  @Test
  public void test31()  throws Throwable  {
      JSONObjectImpl jSONObjectImpl0 = new JSONObjectImpl();
      JSONObjectImpl jSONObjectImpl1 = (JSONObjectImpl)jSONObjectImpl0.put((String) null, (long) 0);
      assertEquals("{}", jSONObjectImpl1.toString());
  }

  @Test
  public void test32()  throws Throwable  {
      JSONObjectImpl jSONObjectImpl0 = new JSONObjectImpl((Object) "ShortDescription");
      JSONObjectImpl jSONObjectImpl1 = (JSONObjectImpl)jSONObjectImpl0.put((String) null, (String) null);
      assertSame(jSONObjectImpl1, jSONObjectImpl0);
  }

  @Test
  public void test33()  throws Throwable  {
      JSONObjectImpl jSONObjectImpl0 = new JSONObjectImpl();
      JSONObjectImpl jSONObjectImpl1 = (JSONObjectImpl)jSONObjectImpl0.putException((Exception) null);
      assertSame(jSONObjectImpl1, jSONObjectImpl0);
  }
}
