/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.util.Tuple;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TupleEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Tuple tuple0 = new Tuple(objectArray0);
      int int0 = tuple0.getSize();
      assertEquals(3, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Tuple tuple0 = new Tuple(objectArray0);
      // Undeclared exception!
      try {
        tuple0.getObject(1307688040);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 1307688040
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Tuple tuple0 = new Tuple(objectArray0);
      boolean boolean0 = tuple0.equals((Object) tuple0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      Tuple tuple0 = new Tuple(objectArray0);
      boolean boolean0 = tuple0.equals(object0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Tuple tuple0 = new Tuple(objectArray0);
      Object[] objectArray1 = new Object[4];
      Tuple tuple1 = new Tuple(objectArray1);
      boolean boolean0 = tuple0.equals((Object) tuple1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = objectArray0[0];
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      objectArray0[4] = objectArray0[0];
      objectArray0[5] = objectArray0[0];
      objectArray0[6] = object0;
      Tuple tuple0 = new Tuple(objectArray0);
      boolean boolean0 = tuple0.equals((Object) tuple0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Tuple tuple0 = new Tuple(objectArray0);
      Object[] objectArray1 = new Object[4];
      Tuple tuple1 = new Tuple(objectArray1);
      boolean boolean0 = tuple0.equals((Object) tuple1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Tuple tuple0 = new Tuple(objectArray0);
      Object[] objectArray1 = new Object[4];
      Tuple tuple1 = new Tuple(objectArray1);
      boolean boolean0 = tuple1.equals((Object) tuple0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Tuple tuple0 = new Tuple(objectArray0);
      int int0 = tuple0.hashCode();
      assertEquals(172506291, int0);
  }
}
