/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.repository.proxy;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.caucho.loader.DynamicClassLoader;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.repository.DefaultLocalRepositoryImpl;
import com.liferay.portal.kernel.repository.LocalRepository;
import com.liferay.portal.kernel.repository.Repository;
import com.liferay.portal.kernel.repository.RepositoryException;
import com.liferay.portal.kernel.repository.cmis.CMISRepositoryHandler;
import com.liferay.portal.repository.cmis.CMISAtomPubRepository;
import com.liferay.portal.repository.cmis.CMISRepository;
import com.liferay.portal.repository.cmis.CMISWebServicesRepository;
import com.liferay.portal.repository.proxy.LocalRepositoryProxyBean;
import com.liferay.portal.service.ServiceContext;
import groovy.lang.ExpandoMetaClass;
import groovy.lang.GroovyClassLoader;
import java.io.File;
import java.io.IOException;
import org.apache.lucene.store.SimpleFSLockFactory;
import org.codehaus.groovy.reflection.CachedClass;
import org.codehaus.groovy.runtime.callsite.CallSiteClassLoader;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class LocalRepositoryProxyBeanEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      CMISAtomPubRepository cMISAtomPubRepository0 = new CMISAtomPubRepository();
      CMISRepository cMISRepository0 = new CMISRepository((CMISRepositoryHandler) cMISAtomPubRepository0);
      DefaultLocalRepositoryImpl defaultLocalRepositoryImpl0 = (DefaultLocalRepositoryImpl)cMISRepository0.getLocalRepository();
      GroovyClassLoader groovyClassLoader0 = new GroovyClassLoader();
      LocalRepositoryProxyBean localRepositoryProxyBean0 = new LocalRepositoryProxyBean((LocalRepository) defaultLocalRepositoryImpl0, (ClassLoader) groovyClassLoader0);
      try {
        localRepositoryProxyBean0.deleteFolder(0L);
        fail("Expecting exception: RepositoryException");
      } catch(RepositoryException e) {
        /*
         * java.lang.NullPointerException
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      CMISWebServicesRepository cMISWebServicesRepository0 = new CMISWebServicesRepository();
      DefaultLocalRepositoryImpl defaultLocalRepositoryImpl0 = (DefaultLocalRepositoryImpl)cMISWebServicesRepository0.getLocalRepository();
      GroovyClassLoader groovyClassLoader0 = new GroovyClassLoader();
      DynamicClassLoader dynamicClassLoader0 = new DynamicClassLoader((ClassLoader) groovyClassLoader0, false);
      LocalRepositoryProxyBean localRepositoryProxyBean0 = new LocalRepositoryProxyBean((LocalRepository) defaultLocalRepositoryImpl0, (ClassLoader) dynamicClassLoader0);
      // Undeclared exception!
      try {
        localRepositoryProxyBean0.getFolder(498L, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      CMISAtomPubRepository cMISAtomPubRepository0 = new CMISAtomPubRepository();
      DefaultLocalRepositoryImpl defaultLocalRepositoryImpl0 = (DefaultLocalRepositoryImpl)cMISAtomPubRepository0.getLocalRepository();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      LocalRepositoryProxyBean localRepositoryProxyBean0 = new LocalRepositoryProxyBean((LocalRepository) defaultLocalRepositoryImpl0, classLoader0);
      SimpleFSLockFactory simpleFSLockFactory0 = new SimpleFSLockFactory("\"V4C/Ah-TP~");
      File file0 = simpleFSLockFactory0.getLockDir();
      // Undeclared exception!
      try {
        localRepositoryProxyBean0.updateFileEntry(1231L, 1144L, "\"V4C/Ah-TP~", "\"V4C/Ah-TP~", "\"V4C/Ah-TP~", "\"V4C/Ah-TP~", "\"V4C/Ah-TP~", false, file0, (ServiceContext) null);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      CMISAtomPubRepository cMISAtomPubRepository0 = new CMISAtomPubRepository();
      DefaultLocalRepositoryImpl defaultLocalRepositoryImpl0 = (DefaultLocalRepositoryImpl)cMISAtomPubRepository0.getLocalRepository();
      LocalRepositoryProxyBean localRepositoryProxyBean0 = new LocalRepositoryProxyBean((LocalRepository) defaultLocalRepositoryImpl0, (ClassLoader) null);
      long long0 = localRepositoryProxyBean0.getRepositoryId();
      assertEquals(0L, long0);
  }

  @Test
  public void test4()  throws Throwable  {
      CMISAtomPubRepository cMISAtomPubRepository0 = new CMISAtomPubRepository();
      DefaultLocalRepositoryImpl defaultLocalRepositoryImpl0 = new DefaultLocalRepositoryImpl((Repository) cMISAtomPubRepository0);
      Class<?> class0 = LocalRepositoryProxyBean.class;
      ExpandoMetaClass expandoMetaClass0 = null;
      try {
        expandoMetaClass0 = new ExpandoMetaClass((Class) class0, true, true);
        fail("Expecting exception: NoClassDefFoundError");
      } catch(NoClassDefFoundError e) {
        /*
         * Could not initialize class groovy.lang.GroovySystem
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      CMISAtomPubRepository cMISAtomPubRepository0 = new CMISAtomPubRepository();
      DefaultLocalRepositoryImpl defaultLocalRepositoryImpl0 = (DefaultLocalRepositoryImpl)cMISAtomPubRepository0.getLocalRepository();
      LocalRepositoryProxyBean localRepositoryProxyBean0 = new LocalRepositoryProxyBean((LocalRepository) defaultLocalRepositoryImpl0, (ClassLoader) null);
      ServiceContext serviceContext0 = new ServiceContext();
      // Undeclared exception!
      try {
        localRepositoryProxyBean0.addFolder((-1013L), 11644473599985L, "i", "i", serviceContext0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
      }
  }
}
