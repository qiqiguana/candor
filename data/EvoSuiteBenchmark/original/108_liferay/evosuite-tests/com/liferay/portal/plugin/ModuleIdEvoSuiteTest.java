/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.plugin;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.plugin.Version;
import com.liferay.portal.plugin.ModuleId;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ModuleIdEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Version version0 = Version.getInstance("cD}#nBrN3IWK!c<NJ$i");
      ModuleId moduleId0 = new ModuleId("cD}#nBrN3IWK!c<NJ$i", "cD}#nBrN3IWK!c<NJ$i", version0, "cD}#nBrN3IWK!c<NJ$i");
      boolean boolean0 = moduleId0.isSameVersionAs("cD}#nBrN3IWK!c<NJ$i");
      assertEquals(true, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      Version version0 = Version.getInstance("cD}#nBrN3IWK!c<NJ$i");
      ModuleId moduleId0 = new ModuleId("cD}#nBrN3IWK!c<NJ$i", "cD}#nBrN3IWK!c<NJ$i", version0, "cD}#nBrN3IWK!c<NJ$i");
      String string0 = moduleId0.getArtifactPath();
      assertNotNull(string0);
      assertEquals("/cD}#nBrN3IWK!c<NJ$i/cD}#nBrN3IWK!c<NJ$i/cD}#nBrN3IWK!c<NJ$i/cD}#nBrN3IWK!c<NJ$i-cD}#nBrN3IWK!c<NJ$i.cD}#nBrN3IWK!c<NJ$i", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      Version version0 = Version.getInstance("`k+,L\"+8(/");
      ModuleId moduleId0 = new ModuleId("`k+,L\"+8(/", "`k+,L\"+8(/", version0, "`k+,L\"+8(/");
      String string0 = moduleId0.getType();
      assertEquals("`k+,L\"+8(/", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      Version version0 = Version.getInstance("?+");
      ModuleId moduleId0 = new ModuleId("?+", "?+", version0, "?+");
      int int0 = moduleId0.hashCode();
      assertEquals((-1409011761), int0);
  }

  @Test
  public void test4()  throws Throwable  {
      Version version0 = Version.getInstance("*/Wl(2LfDDJyhYBg/Wl(2LfDDJyhYBg/Wl(2LfDDJyhYBg");
      ModuleId moduleId0 = new ModuleId("*/Wl(2LfDDJyhYBg/Wl(2LfDDJyhYBg/Wl(2LfDDJyhYBg", "*/Wl(2LfDDJyhYBg/Wl(2LfDDJyhYBg/Wl(2LfDDJyhYBg", version0, "*");
      moduleId0.isLaterVersionThan("*/Wl(2LfDDJyhYBg/Wl(2LfDDJyhYBg/Wl(2LfDDJyhYBg");
      assertEquals("/*/Wl(2LfDDJyhYBg/Wl(2LfDDJyhYBg/Wl(2LfDDJyhYBg/*/Wl(2LfDDJyhYBg/Wl(2LfDDJyhYBg/Wl(2LfDDJyhYBg/*/Wl(2LfDDJyhYBg/Wl(2LfDDJyhYBg/Wl(2LfDDJyhYBg/*/Wl(2LfDDJyhYBg/Wl(2LfDDJyhYBg/Wl(2LfDDJyhYBg-*/Wl(2LfDDJyhYBg/Wl(2LfDDJyhYBg/Wl(2LfDDJyhYBg.*", moduleId0.getArtifactPath());
      assertEquals("*/Wl(2LfDDJyhYBg/Wl(2LfDDJyhYBg/Wl(2LfDDJyhYBg/*/Wl(2LfDDJyhYBg/Wl(2LfDDJyhYBg/Wl(2LfDDJyhYBg/*/Wl(2LfDDJyhYBg/Wl(2LfDDJyhYBg/Wl(2LfDDJyhYBg/*", moduleId0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      Version version0 = Version.getInstance("Y$_TEs");
      ModuleId moduleId0 = new ModuleId("Y$_TEs", "Y$_TEs", version0, "Y$_TEs");
      boolean boolean0 = moduleId0.isPreviousVersionThan("Y$_TEs");
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      Version version0 = Version.getInstance("`k+,L\"+8(/");
      ModuleId moduleId0 = new ModuleId("`k+,L\"+8(/", "`k+,L\"+8(/", version0, "`k+,L\"+8(/");
      String string0 = moduleId0.getPackageId();
      assertNotNull(string0);
      assertEquals("`k+,L\"+8(//`k+,L\"+8(/", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      Version version0 = Version.getInstance("?+");
      ModuleId moduleId0 = new ModuleId("?+", "?+", version0, "?+");
      String string0 = moduleId0.getGroupId();
      assertEquals("?+", string0);
  }

  @Test
  public void test8()  throws Throwable  {
      ModuleId moduleId0 = ModuleId.getInstance("7/7/7/7");
      String string0 = moduleId0.getArtifactId();
      assertEquals("7", string0);
  }

  @Test
  public void test9()  throws Throwable  {
      Version version0 = Version.getInstance("`k+,L\"+8(/");
      ModuleId moduleId0 = new ModuleId("`k+,L\"+8(/", "`k+,L\"+8(/", version0, "`k+,L\"+8(/");
      String string0 = moduleId0.getVersion();
      assertEquals("`k+,L\"+8(/", string0);
  }

  @Test
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try {
        ModuleId.getInstance("?+");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * The moduleId ?+ is not correct
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Version version0 = Version.getInstance("Y$_TEs");
      ModuleId moduleId0 = new ModuleId("Y$_TEs", "Y$_TEs", version0, "Y$_TEs");
      boolean boolean0 = moduleId0.equals((Object) moduleId0);
      assertEquals("Y$_TEs/Y$_TEs/Y$_TEs/Y$_TEs", moduleId0.toString());
      assertEquals(true, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      Version version0 = Version.getInstance("\"t9,euEy_Q:,4R");
      ModuleId moduleId0 = new ModuleId("\"t9,euEy_Q:,4R", "\"t9,euEy_Q:,4R", version0, "\"t9,euEy_Q:,4R");
      boolean boolean0 = moduleId0.equals((Object) "\"t9,euEy_Q:,4R");
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      ModuleId moduleId0 = new ModuleId("7/7/7/7");
      assertNotNull(moduleId0);
      assertEquals("/7/7/7/7-7.7", moduleId0.getArtifactPath());
  }
}
