/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.servlet;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.servlet.PipingJspWriter;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PipingJspWriterEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      PipingJspWriter pipingJspWriter0 = new PipingJspWriter((Writer) stringWriter0);
      pipingJspWriter0.write("OV5>$sYgW", 0, 0);
      assertEquals("", stringWriter0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      PipingJspWriter pipingJspWriter0 = new PipingJspWriter((Writer) charArrayWriter0);
      pipingJspWriter0.println(0L);
      assertEquals("0\n", charArrayWriter0.toString());
      assertEquals(2, charArrayWriter0.size());
  }

  @Test
  public void test2()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PrintWriter printWriter0 = new PrintWriter((Writer) pipedWriter0);
      PipingJspWriter pipingJspWriter0 = new PipingJspWriter((Writer) printWriter0);
      pipingJspWriter0.print((long) 'i');
      assertEquals(true, printWriter0.checkError());
  }

  @Test
  public void test3()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      PipingJspWriter pipingJspWriter0 = new PipingJspWriter((Writer) stringWriter0);
      pipingJspWriter0.write((-1205));
      assertEquals("\uFB4B", stringWriter0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      PipingJspWriter pipingJspWriter0 = new PipingJspWriter((Writer) charArrayWriter0);
      pipingJspWriter0.println((int) 'B');
      assertEquals(3, charArrayWriter0.size());
      assertEquals("66\n", charArrayWriter0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PrintWriter printWriter0 = new PrintWriter((Writer) pipedWriter0);
      PipingJspWriter pipingJspWriter0 = new PipingJspWriter((Writer) printWriter0);
      char[] charArray0 = new char[5];
      pipingJspWriter0.write(charArray0, (int) '`', (int) '`');
      assertEquals(true, printWriter0.checkError());
  }

  @Test
  public void test6()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      PipingJspWriter pipingJspWriter0 = new PipingJspWriter((Writer) charArrayWriter0);
      pipingJspWriter0.print((int) 'I');
      assertEquals(2, charArrayWriter0.size());
      assertEquals("73", charArrayWriter0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      PipingJspWriter pipingJspWriter0 = new PipingJspWriter((Writer) charArrayWriter0);
      pipingJspWriter0.flush();
      assertEquals(false, pipingJspWriter0.isAutoFlush());
  }

  @Test
  public void test8()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      PipingJspWriter pipingJspWriter0 = new PipingJspWriter((Writer) charArrayWriter0);
      pipingJspWriter0.println(1346.4619104543608);
      assertEquals("1346.4619104543608\n", charArrayWriter0.toString());
      assertEquals(19, charArrayWriter0.size());
  }

  @Test
  public void test9()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      PipingJspWriter pipingJspWriter0 = new PipingJspWriter((Writer) stringWriter0);
      pipingJspWriter0.close();
      assertEquals(0, pipingJspWriter0.getRemaining());
  }

  @Test
  public void test10()  throws Throwable  {
      PipingJspWriter pipingJspWriter0 = new PipingJspWriter((Writer) null);
      PipingJspWriter pipingJspWriter1 = new PipingJspWriter((Writer) pipingJspWriter0);
      // Undeclared exception!
      try {
        pipingJspWriter1.print(true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      PipingJspWriter pipingJspWriter0 = new PipingJspWriter((Writer) charArrayWriter0);
      pipingJspWriter0.print(0.0);
      assertEquals(3, charArrayWriter0.size());
      assertEquals("0.0", charArrayWriter0.toString());
  }

  @Test
  public void test12()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PrintWriter printWriter0 = new PrintWriter((Writer) pipedWriter0);
      PipingJspWriter pipingJspWriter0 = new PipingJspWriter((Writer) printWriter0);
      try {
        pipingJspWriter0.clear();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      PipingJspWriter pipingJspWriter0 = new PipingJspWriter((Writer) stringWriter0);
      pipingJspWriter0.println(')');
      assertEquals(")\n", stringWriter0.toString());
  }

  @Test
  public void test14()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PrintWriter printWriter0 = new PrintWriter((Writer) pipedWriter0);
      PipingJspWriter pipingJspWriter0 = new PipingJspWriter((Writer) printWriter0);
      pipingJspWriter0.println(743.37976F);
      assertEquals(true, printWriter0.checkError());
  }

  @Test
  public void test15()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      PipingJspWriter pipingJspWriter0 = new PipingJspWriter((Writer) stringWriter0);
      pipingJspWriter0.print(',');
      assertEquals(",", stringWriter0.toString());
  }

  @Test
  public void test16()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PrintWriter printWriter0 = new PrintWriter((Writer) pipedWriter0);
      PipingJspWriter pipingJspWriter0 = new PipingJspWriter((Writer) printWriter0);
      pipingJspWriter0.print((Object) "{}");
      assertEquals(true, printWriter0.checkError());
  }

  @Test
  public void test17()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      PipingJspWriter pipingJspWriter0 = new PipingJspWriter((Writer) charArrayWriter0);
      pipingJspWriter0.clearBuffer();
      assertEquals(0, pipingJspWriter0.getRemaining());
  }

  @Test
  public void test18()  throws Throwable  {
      PipingJspWriter pipingJspWriter0 = new PipingJspWriter((Writer) null);
      // Undeclared exception!
      try {
        pipingJspWriter0.print((-357.09296F));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test19()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      PipingJspWriter pipingJspWriter0 = new PipingJspWriter((Writer) charArrayWriter0);
      char[] charArray0 = new char[8];
      pipingJspWriter0.print(charArray0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charArrayWriter0.toString());
      assertEquals(8, charArrayWriter0.size());
  }

  @Test
  public void test20()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      PipingJspWriter pipingJspWriter0 = new PipingJspWriter((Writer) charArrayWriter0);
      pipingJspWriter0.println((Object) ";.jar");
      assertEquals(6, charArrayWriter0.size());
      assertEquals(";.jar\n", charArrayWriter0.toString());
  }

  @Test
  public void test21()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      PipingJspWriter pipingJspWriter0 = new PipingJspWriter((Writer) charArrayWriter0);
      pipingJspWriter0.println();
      assertEquals("\n", charArrayWriter0.toString());
      assertEquals(1, charArrayWriter0.size());
  }

  @Test
  public void test22()  throws Throwable  {
      PipingJspWriter pipingJspWriter0 = new PipingJspWriter((Writer) null);
      int int0 = pipingJspWriter0.getRemaining();
      assertEquals(0, int0);
  }

  @Test
  public void test23()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PrintWriter printWriter0 = new PrintWriter((Writer) pipedWriter0);
      PipingJspWriter pipingJspWriter0 = new PipingJspWriter((Writer) printWriter0);
      pipingJspWriter0.newLine();
      assertEquals(true, printWriter0.checkError());
  }

  @Test
  public void test24()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PrintWriter printWriter0 = new PrintWriter((Writer) pipedWriter0);
      PipingJspWriter pipingJspWriter0 = new PipingJspWriter((Writer) printWriter0);
      char[] charArray0 = new char[5];
      pipingJspWriter0.println(charArray0);
      assertEquals(true, printWriter0.checkError());
  }

  @Test
  public void test25()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      PipingJspWriter pipingJspWriter0 = new PipingJspWriter((Writer) charArrayWriter0);
      char[] charArray0 = new char[8];
      pipingJspWriter0.write(charArray0);
      assertEquals(8, charArrayWriter0.size());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charArrayWriter0.toString());
  }

  @Test
  public void test26()  throws Throwable  {
      PipingJspWriter pipingJspWriter0 = new PipingJspWriter((Writer) null);
      // Undeclared exception!
      try {
        pipingJspWriter0.print(false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test27()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      PipingJspWriter pipingJspWriter0 = new PipingJspWriter((Writer) charArrayWriter0);
      pipingJspWriter0.print("UTF-8");
      assertEquals(5, charArrayWriter0.size());
      assertEquals("UTF-8", charArrayWriter0.toString());
  }

  @Test
  public void test28()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      PipingJspWriter pipingJspWriter0 = new PipingJspWriter((Writer) charArrayWriter0);
      pipingJspWriter0.print((String) null);
      assertEquals("null", charArrayWriter0.toString());
      assertEquals(4, charArrayWriter0.size());
  }

  @Test
  public void test29()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipingJspWriter pipingJspWriter0 = new PipingJspWriter((Writer) pipedWriter0);
      try {
        pipingJspWriter0.println(false);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Pipe not connected
         */
      }
  }

  @Test
  public void test30()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipingJspWriter pipingJspWriter0 = new PipingJspWriter((Writer) pipedWriter0);
      try {
        pipingJspWriter0.println(true);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Pipe not connected
         */
      }
  }

  @Test
  public void test31()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      PipingJspWriter pipingJspWriter0 = new PipingJspWriter((Writer) charArrayWriter0);
      pipingJspWriter0.println("`eBmFaPP\"62R@P");
      assertEquals(15, charArrayWriter0.size());
      assertEquals("`eBmFaPP\"62R@P\n", charArrayWriter0.toString());
  }

  @Test
  public void test32()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      PipingJspWriter pipingJspWriter0 = new PipingJspWriter((Writer) stringWriter0);
      pipingJspWriter0.println((String) null);
      assertEquals("null\n", stringWriter0.toString());
  }
}
