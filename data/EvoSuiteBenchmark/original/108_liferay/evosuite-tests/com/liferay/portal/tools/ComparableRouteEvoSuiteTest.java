/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.tools;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.tools.ComparableRoute;
import java.util.Map;
import java.util.Set;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ComparableRouteEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ComparableRoute comparableRoute0 = new ComparableRoute("{\u0000:.*}");
      Map<String, String> map0 = comparableRoute0.getOverriddenParameters();
      assertEquals(0, map0.size());
  }

  @Test
  public void test1()  throws Throwable  {
      ComparableRoute comparableRoute0 = new ComparableRoute("{\u0000:.*}");
      comparableRoute0.addOverriddenParameter("{\u0000:.*}", "{\u0000:.*}");
      assertEquals("{\u0000:.*}", comparableRoute0.getPattern());
  }

  @Test
  public void test2()  throws Throwable  {
      ComparableRoute comparableRoute0 = new ComparableRoute("k<K-84<8''x");
      comparableRoute0.addGeneratedParameter("k<K-84<8''x", "k<K-84<8''x");
      assertEquals("k<K-84<8''x", comparableRoute0.getPattern());
  }

  @Test
  public void test3()  throws Throwable  {
      ComparableRoute comparableRoute0 = new ComparableRoute("{\u0000:.*}");
      comparableRoute0.addIgnoredParameter("{\u0000:.*}");
      assertEquals("{\u0000:.*}", comparableRoute0.getPattern());
  }

  @Test
  public void test4()  throws Throwable  {
      ComparableRoute comparableRoute0 = new ComparableRoute(")c+5b}T+R");
      Map<String, String> map0 = comparableRoute0.getGeneratedParameters();
      assertEquals(true, map0.isEmpty());
  }

  @Test
  public void test5()  throws Throwable  {
      ComparableRoute comparableRoute0 = new ComparableRoute("{\u0000:.*}");
      Set<String> set0 = comparableRoute0.getIgnoredParameters();
      assertEquals(true, set0.isEmpty());
  }

  @Test
  public void test6()  throws Throwable  {
      ComparableRoute comparableRoute0 = new ComparableRoute("0[/s|`(.!d*)");
      ComparableRoute comparableRoute1 = new ComparableRoute(" ct'<");
      int int0 = comparableRoute0.compareTo(comparableRoute1);
      assertEquals(1, int0);
  }

  @Test
  public void test7()  throws Throwable  {
      ComparableRoute comparableRoute0 = new ComparableRoute("L<jb4c[5nc)3reB@DG");
      ComparableRoute comparableRoute1 = new ComparableRoute("SKS2G1{FGjNV&t%m5|si");
      boolean boolean0 = comparableRoute1.equals((Object) comparableRoute0);
      assertFalse(comparableRoute0.equals(comparableRoute1));
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      ComparableRoute comparableRoute0 = new ComparableRoute("L<jb4c[5nc)3reB@DG");
      ComparableRoute comparableRoute1 = new ComparableRoute("SKS2G1{FGjNV&t%m5|si");
      int int0 = comparableRoute0.compareTo(comparableRoute1);
      assertEquals((-1), int0);
  }

  @Test
  public void test9()  throws Throwable  {
      ComparableRoute comparableRoute0 = new ComparableRoute("{\u0000:.*}");
      ComparableRoute comparableRoute1 = new ComparableRoute("U[pu{p@");
      int int0 = comparableRoute1.compareTo(comparableRoute0);
      assertEquals((-1), int0);
  }

  @Test
  public void test10()  throws Throwable  {
      ComparableRoute comparableRoute0 = new ComparableRoute("{\u0000:.*}");
      ComparableRoute comparableRoute1 = new ComparableRoute("U[pu{p@");
      int int0 = comparableRoute0.compareTo(comparableRoute1);
      assertEquals(1, int0);
  }

  @Test
  public void test11()  throws Throwable  {
      ComparableRoute comparableRoute0 = new ComparableRoute("k<K-84<8''x");
      ComparableRoute comparableRoute1 = new ComparableRoute("9d#sVQjT@:`rG#%");
      int int0 = comparableRoute1.compareTo(comparableRoute0);
      assertEquals((-1), int0);
  }

  @Test
  public void test12()  throws Throwable  {
      ComparableRoute comparableRoute0 = new ComparableRoute("k<K-84<8''x");
      ComparableRoute comparableRoute1 = new ComparableRoute("9d#sVQjT@:`rG#%");
      int int0 = comparableRoute0.compareTo(comparableRoute1);
      assertEquals(1, int0);
  }

  @Test
  public void test13()  throws Throwable  {
      ComparableRoute comparableRoute0 = new ComparableRoute(")c+5b}T+R");
      ComparableRoute comparableRoute1 = new ComparableRoute("[s/.(!'z)");
      int int0 = comparableRoute0.compareTo(comparableRoute1);
      assertEquals((-1), int0);
  }

  @Test
  public void test14()  throws Throwable  {
      ComparableRoute comparableRoute0 = new ComparableRoute("[s/.(!'z)");
      comparableRoute0.addImplicitParameter("[s/.(!'z)", "[s/.(!'z)");
      ComparableRoute comparableRoute1 = new ComparableRoute("[s/.(!'z)");
      int int0 = comparableRoute0.compareTo(comparableRoute1);
      assertEquals((-1), int0);
  }

  @Test
  public void test15()  throws Throwable  {
      ComparableRoute comparableRoute0 = new ComparableRoute("[/.](?!*)");
      ComparableRoute comparableRoute1 = new ComparableRoute("[/.](?!*)");
      assertTrue(comparableRoute1.equals(comparableRoute0));
      
      comparableRoute1.addImplicitParameter("[/.](?!*)", "[/.](?!*)");
      int int0 = comparableRoute0.compareTo(comparableRoute1);
      assertFalse(comparableRoute1.equals(comparableRoute0));
      assertEquals(1, int0);
  }

  @Test
  public void test16()  throws Throwable  {
      ComparableRoute comparableRoute0 = new ComparableRoute("[/.](?!*)");
      boolean boolean0 = comparableRoute0.equals((Object) 1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      ComparableRoute comparableRoute0 = new ComparableRoute("{\u0000:.*}");
      ComparableRoute comparableRoute1 = new ComparableRoute("{\u0000:.*}");
      boolean boolean0 = comparableRoute0.equals((Object) comparableRoute1);
      assertEquals(true, boolean0);
  }
}
