/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.search.generic;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.search.BooleanClause;
import com.liferay.portal.kernel.search.Query;
import com.liferay.portal.search.generic.BooleanQueryImpl;
import java.util.List;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BooleanQueryImplEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BooleanQueryImpl booleanQueryImpl0 = new BooleanQueryImpl();
      Integer integer0 = new Integer((-714));
      booleanQueryImpl0.addRequiredTerm("PwA$/*,nkn", integer0);
      assertEquals(true, booleanQueryImpl0.hasClauses());
  }

  @Test
  public void test1()  throws Throwable  {
      BooleanQueryImpl booleanQueryImpl0 = new BooleanQueryImpl();
      booleanQueryImpl0.addRequiredTerm("PwA$/*,nkn", "PwA$/*,nkn");
      assertEquals(true, booleanQueryImpl0.hasClauses());
  }

  @Test
  public void test2()  throws Throwable  {
      BooleanQueryImpl booleanQueryImpl0 = new BooleanQueryImpl();
      booleanQueryImpl0.addRangeTerm(" dd%`cm", 0, 0);
      assertEquals(true, booleanQueryImpl0.hasClauses());
  }

  @Test
  public void test3()  throws Throwable  {
      BooleanQueryImpl booleanQueryImpl0 = new BooleanQueryImpl();
      BooleanQueryImpl booleanQueryImpl1 = (BooleanQueryImpl)booleanQueryImpl0.getWrappedQuery();
      assertSame(booleanQueryImpl1, booleanQueryImpl0);
  }

  @Test
  public void test4()  throws Throwable  {
      BooleanQueryImpl booleanQueryImpl0 = new BooleanQueryImpl();
      Short short0 = new Short((short) (-887));
      booleanQueryImpl0.addRangeTerm("i", short0, short0);
      assertEquals(true, booleanQueryImpl0.hasClauses());
  }

  @Test
  public void test5()  throws Throwable  {
      BooleanQueryImpl booleanQueryImpl0 = new BooleanQueryImpl();
      Long long0 = new Long(32768L);
      booleanQueryImpl0.addRangeTerm("", long0, (Long) 32768L);
      assertEquals(true, booleanQueryImpl0.hasClauses());
  }

  @Test
  public void test6()  throws Throwable  {
      BooleanQueryImpl booleanQueryImpl0 = new BooleanQueryImpl();
      booleanQueryImpl0.addRequiredTerm("minimumSiilrity < 0", (long) (short)1090);
      assertEquals(true, booleanQueryImpl0.hasClauses());
  }

  @Test
  public void test7()  throws Throwable  {
      BooleanQueryImpl booleanQueryImpl0 = new BooleanQueryImpl();
      Double double0 = new Double((-1848.017975623909));
      booleanQueryImpl0.addExactTerm(", product of:", double0);
      assertEquals(true, booleanQueryImpl0.hasClauses());
  }

  @Test
  public void test8()  throws Throwable  {
      BooleanQueryImpl booleanQueryImpl0 = new BooleanQueryImpl();
      List<BooleanClause> list0 = booleanQueryImpl0.clauses();
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test9()  throws Throwable  {
      BooleanQueryImpl booleanQueryImpl0 = new BooleanQueryImpl();
      Integer integer0 = new Integer((-1690));
      booleanQueryImpl0.addNumericRangeTerm("", (Integer) (-1690), integer0);
      assertEquals(true, booleanQueryImpl0.hasClauses());
  }

  @Test
  public void test10()  throws Throwable  {
      BooleanQueryImpl booleanQueryImpl0 = new BooleanQueryImpl();
      Short short0 = new Short((short)1090);
      booleanQueryImpl0.addNumericRangeTerm("minimumSiilrity < 0", (Short) (short)1090, short0);
      assertEquals(true, booleanQueryImpl0.hasClauses());
  }

  @Test
  public void test11()  throws Throwable  {
      BooleanQueryImpl booleanQueryImpl0 = new BooleanQueryImpl();
      assertEquals(false, booleanQueryImpl0.hasClauses());
      
      booleanQueryImpl0.addTerm("UTF-16", (-1579L));
      boolean boolean0 = booleanQueryImpl0.hasClauses();
      assertEquals(true, booleanQueryImpl0.hasClauses());
      assertEquals(true, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      BooleanQueryImpl booleanQueryImpl0 = new BooleanQueryImpl();
      Short short0 = new Short((short)1090);
      booleanQueryImpl0.addRequiredTerm("minimumSiilrity < 0", short0);
      assertEquals(true, booleanQueryImpl0.hasClauses());
  }

  @Test
  public void test13()  throws Throwable  {
      BooleanQueryImpl booleanQueryImpl0 = new BooleanQueryImpl();
      booleanQueryImpl0.addExactTerm("minimumSiilrity < 0", true);
      assertEquals(true, booleanQueryImpl0.hasClauses());
  }

  @Test
  public void test14()  throws Throwable  {
      BooleanQueryImpl booleanQueryImpl0 = new BooleanQueryImpl();
      booleanQueryImpl0.add((Query) booleanQueryImpl0, (String) null);
      assertEquals(true, booleanQueryImpl0.hasClauses());
  }

  @Test
  public void test15()  throws Throwable  {
      BooleanQueryImpl booleanQueryImpl0 = new BooleanQueryImpl();
      Short short0 = new Short((short)1090);
      Double double0 = new Double((double) short0);
      booleanQueryImpl0.addRequiredTerm("minimumSiilrity < 0", double0);
      assertEquals(true, booleanQueryImpl0.hasClauses());
  }

  @Test
  public void test16()  throws Throwable  {
      BooleanQueryImpl booleanQueryImpl0 = new BooleanQueryImpl();
      // Undeclared exception!
      try {
        booleanQueryImpl0.addRangeTerm("i", (Integer) null, (Integer) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test17()  throws Throwable  {
      BooleanQueryImpl booleanQueryImpl0 = new BooleanQueryImpl();
      booleanQueryImpl0.addTerm("", "");
      assertEquals(true, booleanQueryImpl0.hasClauses());
  }

  @Test
  public void test18()  throws Throwable  {
      BooleanQueryImpl booleanQueryImpl0 = new BooleanQueryImpl();
      booleanQueryImpl0.addRequiredTerm("PwA$/*,nkn", true);
      assertEquals(true, booleanQueryImpl0.hasClauses());
  }

  @Test
  public void test19()  throws Throwable  {
      BooleanQueryImpl booleanQueryImpl0 = new BooleanQueryImpl();
      booleanQueryImpl0.addRequiredTerm((String) null, (Long) 1L);
      assertEquals(true, booleanQueryImpl0.hasClauses());
  }

  @Test
  public void test20()  throws Throwable  {
      BooleanQueryImpl booleanQueryImpl0 = new BooleanQueryImpl();
      booleanQueryImpl0.addExactTerm("", (Boolean) false);
      assertEquals(true, booleanQueryImpl0.hasClauses());
  }

  @Test
  public void test21()  throws Throwable  {
      BooleanQueryImpl booleanQueryImpl0 = new BooleanQueryImpl();
      booleanQueryImpl0.addExactTerm("=", 12.100287255583833);
      assertEquals(true, booleanQueryImpl0.hasClauses());
  }

  @Test
  public void test22()  throws Throwable  {
      BooleanQueryImpl booleanQueryImpl0 = new BooleanQueryImpl();
      Long long0 = new Long(1L);
      booleanQueryImpl0.addNumericRangeTerm((String) null, long0, (Long) 1L);
      assertEquals(true, booleanQueryImpl0.hasClauses());
  }

  @Test
  public void test23()  throws Throwable  {
      BooleanQueryImpl booleanQueryImpl0 = new BooleanQueryImpl();
      booleanQueryImpl0.addExactTerm("minimumSiilrity < 0", (Short) (short)1090);
      assertEquals(true, booleanQueryImpl0.hasClauses());
  }

  @Test
  public void test24()  throws Throwable  {
      BooleanQueryImpl booleanQueryImpl0 = new BooleanQueryImpl();
      Integer integer0 = Integer.valueOf((-1365));
      booleanQueryImpl0.addExactTerm("3ull 'task' arg\"met.", integer0);
      assertEquals(true, booleanQueryImpl0.hasClauses());
  }

  @Test
  public void test25()  throws Throwable  {
      BooleanQueryImpl booleanQueryImpl0 = new BooleanQueryImpl();
      booleanQueryImpl0.addRequiredTerm("PwA$/*,nkn", (-714));
      assertEquals(true, booleanQueryImpl0.hasClauses());
  }

  @Test
  public void test26()  throws Throwable  {
      BooleanQueryImpl booleanQueryImpl0 = new BooleanQueryImpl();
      booleanQueryImpl0.addRequiredTerm("flags", (short)1700);
      assertEquals(true, booleanQueryImpl0.hasClauses());
  }

  @Test
  public void test27()  throws Throwable  {
      BooleanQueryImpl booleanQueryImpl0 = new BooleanQueryImpl();
      booleanQueryImpl0.addRequiredTerm(", product of:", (-1848.017975623909));
      assertEquals(true, booleanQueryImpl0.hasClauses());
  }

  @Test
  public void test28()  throws Throwable  {
      BooleanQueryImpl booleanQueryImpl0 = new BooleanQueryImpl();
      booleanQueryImpl0.addRangeTerm("3ull 'task' arg\"met.", "3ull 'task' arg\"met.", "3ull 'task' arg\"met.");
      assertEquals(true, booleanQueryImpl0.hasClauses());
  }

  @Test
  public void test29()  throws Throwable  {
      BooleanQueryImpl booleanQueryImpl0 = new BooleanQueryImpl();
      Boolean boolean0 = new Boolean((String) null);
      booleanQueryImpl0.addRequiredTerm((String) null, boolean0);
      assertEquals(true, booleanQueryImpl0.hasClauses());
  }

  @Test
  public void test30()  throws Throwable  {
      BooleanQueryImpl booleanQueryImpl0 = new BooleanQueryImpl();
      Long long0 = new Long((long) 0);
      booleanQueryImpl0.addExactTerm(" dd%`cm", long0);
      assertEquals(true, booleanQueryImpl0.hasClauses());
  }

  @Test
  public void test31()  throws Throwable  {
      BooleanQueryImpl booleanQueryImpl0 = new BooleanQueryImpl();
      booleanQueryImpl0.addRequiredTerm("PwA$/*,nkn", "PwA$/*,nkn", true);
      assertEquals(true, booleanQueryImpl0.hasClauses());
  }

  @Test
  public void test32()  throws Throwable  {
      BooleanQueryImpl booleanQueryImpl0 = new BooleanQueryImpl();
      booleanQueryImpl0.addRequiredTerm("=", "=", true, true);
      assertEquals(true, booleanQueryImpl0.hasClauses());
  }

  @Test
  public void test33()  throws Throwable  {
      BooleanQueryImpl booleanQueryImpl0 = new BooleanQueryImpl();
      booleanQueryImpl0.addTerm(", product of:", ", product of:", false, true);
      assertEquals(true, booleanQueryImpl0.hasClauses());
  }

  @Test
  public void test34()  throws Throwable  {
      BooleanQueryImpl booleanQueryImpl0 = new BooleanQueryImpl();
      booleanQueryImpl0.addTerm("=", "=", true, false);
      assertEquals(true, booleanQueryImpl0.hasClauses());
  }

  @Test
  public void test35()  throws Throwable  {
      BooleanQueryImpl booleanQueryImpl0 = new BooleanQueryImpl();
      boolean boolean0 = booleanQueryImpl0.hasClauses();
      assertEquals(false, boolean0);
  }
}
