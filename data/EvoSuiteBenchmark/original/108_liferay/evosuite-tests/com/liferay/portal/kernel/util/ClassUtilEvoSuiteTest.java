/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.util.ClassUtil;
import de.schlichtherle.io.ArchiveDetector;
import de.schlichtherle.io.DefaultArchiveDetector;
import de.schlichtherle.io.File;
import groovy.lang.GroovyClassLoader;
import java.awt.color.ColorSpace;
import java.io.CharArrayReader;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.StringReader;
import java.util.Set;
import java.util.Stack;
import javax.swing.event.ChangeListener;
import javax.swing.tree.TreeCellRenderer;
import org.geotools.factory.Hints;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ClassUtilEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(d+s*(%|px|cm|mm|in|pt|pc|em|ex))s*(d+s*(%|px|cm|mm|in|pt|pc|em|ex)|top|bottom|center)");
      ClassUtil.getClasses((Reader) stringReader0, "PM*P?A140oFr(CN)9<j");
      assertEquals(-1, stringReader0.read());
  }

  @Test
  public void test1()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
  }

  @Test
  public void test2()  throws Throwable  {
      DefaultArchiveDetector defaultArchiveDetector0 = ArchiveDetector.NULL;
      File file0 = new File("", "", (ArchiveDetector) defaultArchiveDetector0);
      try {
        ClassUtil.getClasses((java.io.File) file0);
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
        /*
         * / (Is a directory)
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      StringReader stringReader0 = new StringReader("interface");
      PushbackReader pushbackReader0 = new PushbackReader((Reader) stringReader0);
      Set<String> set0 = ClassUtil.getClasses((Reader) pushbackReader0, "");
      assertEquals(0, set0.size());
  }

  @Test
  public void test4()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[2] = '@';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      ClassUtil.getClasses((Reader) charArrayReader0, (String) null);
      assertEquals(-1, charArrayReader0.read());
      assertEquals(false, charArrayReader0.ready());
  }

  @Test
  public void test5()  throws Throwable  {
      GroovyClassLoader groovyClassLoader0 = new GroovyClassLoader();
      String string0 = ClassUtil.getParentPath((ClassLoader) groovyClassLoader0, "groovy.swing.factory.TDFactory.class");
      assertEquals("script1000002.groovy", groovyClassLoader0.generateScriptName());
      assertEquals("/mnt/fastdata/ac1gf/SF110/dist/108_liferay/lib/groovy.jar!/", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      String string0 = ClassUtil.getParentPath(classLoader0, "groovy.swing.factory.TDFactory");
      assertNotNull(string0);
      assertEquals("/mnt/fastdata/ac1gf/SF110/dist/108_liferay/lib/groovy.jar!/", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      Class<?> class0 = ChangeListener.class;
      Class<?> class1 = TreeCellRenderer.class;
      boolean boolean0 = ClassUtil.isSubclass(class0, class1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      Class<?> class0 = ClassUtil.class;
      boolean boolean0 = ClassUtil.isSubclass(class0, class0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      Class<?> class0 = ClassUtil.class;
      boolean boolean0 = ClassUtil.isSubclass((Class<?>) null, class0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      Class<?> class0 = Hints.Key.class;
      boolean boolean0 = ClassUtil.isSubclass(class0, (Class<?>) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      Class<?> class0 = Object.class;
      Class<?> class1 = ColorSpace.class;
      boolean boolean0 = ClassUtil.isSubclass(class1, class0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      boolean boolean0 = ClassUtil.isSubclass((Class<?>) null, "");
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      Class<?> class0 = Stack.class;
      boolean boolean0 = ClassUtil.isSubclass(class0, (String) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      Class<?> class0 = Hints.Key.class;
      boolean boolean0 = ClassUtil.isSubclass(class0, "java.lang.Object");
      assertEquals(true, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      Class<?> class0 = java.io.File.class;
      boolean boolean0 = ClassUtil.isSubclass(class0, "Uri9AdY");
      assertEquals(false, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[2] = '@';
      charArray0[3] = '5';
      charArray0[4] = '@';
      charArray0[7] = 'D';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      // Undeclared exception!
      try {
        ClassUtil.getClasses((Reader) charArrayReader0, (String) null);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * No match found
         */
      }
  }
}
