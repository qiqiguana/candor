/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.io.unsync;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.io.unsync.UnsyncByteArrayInputStream;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class UnsyncByteArrayInputStreamEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      UnsyncByteArrayInputStream unsyncByteArrayInputStream0 = new UnsyncByteArrayInputStream(byteArray0, 0, 1);
      assertEquals(0, unsyncByteArrayInputStream0.read());
      
      boolean boolean0 = unsyncByteArrayInputStream0.markSupported();
      assertEquals(-1, unsyncByteArrayInputStream0.read());
      assertEquals(true, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      UnsyncByteArrayInputStream unsyncByteArrayInputStream0 = new UnsyncByteArrayInputStream(byteArray0);
      unsyncByteArrayInputStream0.reset();
      assertEquals(2, unsyncByteArrayInputStream0.available());
  }

  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      UnsyncByteArrayInputStream unsyncByteArrayInputStream0 = new UnsyncByteArrayInputStream(byteArray0);
      int int0 = unsyncByteArrayInputStream0.read(byteArray0);
      assertEquals(-1, unsyncByteArrayInputStream0.read());
      assertEquals(1, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      UnsyncByteArrayInputStream unsyncByteArrayInputStream0 = new UnsyncByteArrayInputStream(byteArray0, 0, 1);
      assertEquals(0, unsyncByteArrayInputStream0.read());
      
      unsyncByteArrayInputStream0.mark(0);
      assertEquals(0, unsyncByteArrayInputStream0.available());
      assertEquals(-1, unsyncByteArrayInputStream0.read());
  }

  @Test
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      UnsyncByteArrayInputStream unsyncByteArrayInputStream0 = new UnsyncByteArrayInputStream(byteArray0);
      int int0 = unsyncByteArrayInputStream0.available();
      assertEquals(1, int0);
  }

  @Test
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      UnsyncByteArrayInputStream unsyncByteArrayInputStream0 = new UnsyncByteArrayInputStream(byteArray0, 0, 1);
      assertEquals(0, unsyncByteArrayInputStream0.read());
      
      unsyncByteArrayInputStream0.skip((long) (byte)59);
      int int0 = unsyncByteArrayInputStream0.read();
      assertEquals(-1, unsyncByteArrayInputStream0.read());
      assertEquals((-1), int0);
  }

  @Test
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      UnsyncByteArrayInputStream unsyncByteArrayInputStream0 = new UnsyncByteArrayInputStream(byteArray0);
      int int0 = unsyncByteArrayInputStream0.read();
      assertEquals(7, unsyncByteArrayInputStream0.available());
      assertEquals(0, int0);
  }

  @Test
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      UnsyncByteArrayInputStream unsyncByteArrayInputStream0 = new UnsyncByteArrayInputStream(byteArray0);
      assertEquals(1, unsyncByteArrayInputStream0.available());
      
      int int0 = unsyncByteArrayInputStream0.read(byteArray0, (-1648), (-1874));
      assertEquals(0, int0);
  }

  @Test
  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      UnsyncByteArrayInputStream unsyncByteArrayInputStream0 = new UnsyncByteArrayInputStream(byteArray0, 0, 0);
      assertEquals(-1, unsyncByteArrayInputStream0.read());
      assertNotNull(unsyncByteArrayInputStream0);
      
      int int0 = unsyncByteArrayInputStream0.read(byteArray0);
      assertEquals((-1), int0);
      assertEquals(0, unsyncByteArrayInputStream0.available());
  }

  @Test
  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      UnsyncByteArrayInputStream unsyncByteArrayInputStream0 = new UnsyncByteArrayInputStream(byteArray0);
      int int0 = unsyncByteArrayInputStream0.read(byteArray0, 0, 951);
      assertEquals(-1, unsyncByteArrayInputStream0.read());
      assertEquals(8, int0);
  }

  @Test
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      UnsyncByteArrayInputStream unsyncByteArrayInputStream0 = new UnsyncByteArrayInputStream(byteArray0);
      assertEquals(1, unsyncByteArrayInputStream0.available());
      
      long long0 = unsyncByteArrayInputStream0.skip((-1883L));
      assertEquals(0L, long0);
  }

  @Test
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      UnsyncByteArrayInputStream unsyncByteArrayInputStream0 = new UnsyncByteArrayInputStream(byteArray0, 0, 1);
      assertEquals(0, unsyncByteArrayInputStream0.read());
      
      long long0 = unsyncByteArrayInputStream0.skip((long) (byte)0);
      assertEquals(-1, unsyncByteArrayInputStream0.read());
      assertEquals(0L, long0);
  }
}
