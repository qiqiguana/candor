/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.json;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.json.PortalBeanObjectFactory;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import flexjson.JSONException;
import flexjson.ObjectBinder;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PortalBeanObjectFactoryEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      PortalBeanObjectFactory portalBeanObjectFactory0 = new PortalBeanObjectFactory();
      Class<?> class0 = Method.class;
      ObjectBinder objectBinder0 = new ObjectBinder();
      // Undeclared exception!
      try {
        portalBeanObjectFactory0.instantiate(objectBinder0, (Object) null, (Type) class0, (Class) class0);
        fail("Expecting exception: JSONException");
      } catch(JSONException e) {
        /*
         * Unable to instantiate java.lang.reflect.Method at [  ]
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      PortalBeanObjectFactory portalBeanObjectFactory0 = new PortalBeanObjectFactory();
      Class<?> class0 = Date.class;
      portalBeanObjectFactory0.setSafeMode(true);
      ObjectBinder objectBinder0 = new ObjectBinder();
      HashMap<Integer, PortalBeanObjectFactory> hashMap0 = new HashMap<Integer, PortalBeanObjectFactory>();
      HashMap<Object, Object> hashMap1 = (HashMap<Object, Object>)portalBeanObjectFactory0.instantiate(objectBinder0, (Object) hashMap0, (Type) class0, (Class) class0);
      assertNotNull(hashMap1);
      assertEquals("{class=java.util.Date}", hashMap1.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      PortalBeanObjectFactory portalBeanObjectFactory0 = new PortalBeanObjectFactory();
      ObjectBinder objectBinder0 = new ObjectBinder();
      Class<?> class0 = LogFactoryUtil.class;
      // Undeclared exception!
      try {
        portalBeanObjectFactory0.instantiate(objectBinder0, (Object) null, (Type) class0, (Class) class0);
        fail("Expecting exception: JSONException");
      } catch(JSONException e) {
        /*
         * Not instantiating com.liferay.portal.kernel.log.LogFactoryUtil at [  ]
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      PortalBeanObjectFactory portalBeanObjectFactory0 = new PortalBeanObjectFactory();
      ObjectBinder objectBinder0 = new ObjectBinder();
      Class<?> class0 = PortalBeanObjectFactory.class;
      Map<String, Field> map0 = portalBeanObjectFactory0.getDeclaredFields(class0);
      assertNotNull(map0);
      
      // Undeclared exception!
      try {
        portalBeanObjectFactory0.instantiate(objectBinder0, (Object) map0, (Type) class0, (Class) class0);
        fail("Expecting exception: NoClassDefFoundError");
      } catch(NoClassDefFoundError e) {
        /*
         * Could not initialize class com.liferay.portal.util.PropsValues
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      PortalBeanObjectFactory portalBeanObjectFactory0 = new PortalBeanObjectFactory();
      Class<?> class0 = Double.class;
      Map<String, Field> map0 = portalBeanObjectFactory0.getDeclaredFields(class0);
      assertNotNull(map0);
      
      portalBeanObjectFactory0.removeInvalidFields((Map<?, ?>) map0, class0);
      assertEquals(11, map0.size());
  }

  @Test
  public void test5()  throws Throwable  {
      PortalBeanObjectFactory portalBeanObjectFactory0 = new PortalBeanObjectFactory();
      Class<?> class0 = Method.class;
      Map<String, Field> map0 = portalBeanObjectFactory0.getDeclaredFields(class0);
      assertNotNull(map0);
      
      portalBeanObjectFactory0.removeInvalidFields((Map<?, ?>) map0, class0);
      assertEquals(18, map0.size());
  }

  @Test
  public void test6()  throws Throwable  {
      PortalBeanObjectFactory portalBeanObjectFactory0 = new PortalBeanObjectFactory();
      Class<?> class0 = Method.class;
      Map<String, Field> map0 = portalBeanObjectFactory0.getDeclaredFields(class0);
      assertNotNull(map0);
      
      Class<?> class1 = Class.class;
      portalBeanObjectFactory0.removeInvalidFields((Map<?, ?>) map0, class1);
      assertEquals(17, map0.size());
  }
}
