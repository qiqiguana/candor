/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.servlet;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.servlet.PortalClassLoaderFilter;
import java.io.IOException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.tuckey.web.MockChain;
import org.tuckey.web.MockFilterConfig;

@RunWith(EvoSuiteRunner.class)
public class PortalClassLoaderFilterEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          PortalClassLoaderFilter portalClassLoaderFilter0 = new PortalClassLoaderFilter();
          MockChain mockChain0 = new MockChain();
          // Undeclared exception!
          try {
            portalClassLoaderFilter0.doFilter((ServletRequest) null, (ServletResponse) null, (FilterChain) mockChain0);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.lang.RuntimePermission getClassLoader.portal)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * com.liferay.portal.kernel.util.PortalClassLoaderUtil.getClassLoader(PortalClassLoaderUtil.java:38)
             * com.liferay.portal.kernel.servlet.PortalClassLoaderFilter.doFilter(PortalClassLoaderFilter.java:56)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          PortalClassLoaderFilter portalClassLoaderFilter0 = new PortalClassLoaderFilter();
          portalClassLoaderFilter0.destroy();
          assertEquals(true, portalClassLoaderFilter0.isFilterEnabled());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
      PortalClassLoaderFilter portalClassLoaderFilter0 = new PortalClassLoaderFilter();
      MockFilterConfig mockFilterConfig0 = new MockFilterConfig();
      portalClassLoaderFilter0.init((FilterConfig) mockFilterConfig0);
      assertEquals(true, portalClassLoaderFilter0.isFilterEnabled());
  }

  @Test
  public void test3()  throws Throwable  {
      PortalClassLoaderFilter portalClassLoaderFilter0 = new PortalClassLoaderFilter();
      boolean boolean0 = portalClassLoaderFilter0.isFilterEnabled();
      assertEquals(true, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      PortalClassLoaderFilter portalClassLoaderFilter0 = new PortalClassLoaderFilter();
      boolean boolean0 = portalClassLoaderFilter0.isFilterEnabled((HttpServletRequest) null, (HttpServletResponse) null);
      assertEquals(true, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      PortalClassLoaderFilter portalClassLoaderFilter0 = new PortalClassLoaderFilter();
      portalClassLoaderFilter0.setFilterEnabled(false);
      assertEquals(true, portalClassLoaderFilter0.isFilterEnabled());
  }
}
