/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.repository.cmis.search;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.bean.BeanLocatorException;
import com.liferay.portal.kernel.repository.cmis.search.BaseCmisSearchQueryBuilder;
import com.liferay.portal.kernel.repository.cmis.search.CMISConjunction;
import com.liferay.portal.kernel.repository.cmis.search.CMISDisjunction;
import com.liferay.portal.kernel.repository.cmis.search.CMISJunction;
import com.liferay.portal.kernel.repository.cmis.search.CMISSimpleExpressionOperator;
import com.liferay.portal.kernel.search.BooleanClauseOccur;
import com.liferay.portal.kernel.search.BooleanClauseOccurImpl;
import com.liferay.portal.kernel.search.Query;
import com.liferay.portal.kernel.search.QueryConfig;
import com.liferay.portal.kernel.search.QueryTerm;
import com.liferay.portal.kernel.search.SearchException;
import com.liferay.portal.search.generic.BooleanQueryImpl;
import com.liferay.portal.search.generic.QueryTermImpl;
import com.liferay.portal.search.generic.TermRangeQueryImpl;
import com.liferay.portal.search.generic.WildcardQueryImpl;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BaseCmisSearchQueryBuilderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BaseCmisSearchQueryBuilder baseCmisSearchQueryBuilder0 = new BaseCmisSearchQueryBuilder();
      CMISConjunction cMISConjunction0 = new CMISConjunction();
      QueryTermImpl queryTermImpl0 = new QueryTermImpl((String) null, (String) null);
      WildcardQueryImpl wildcardQueryImpl0 = new WildcardQueryImpl((QueryTerm) queryTermImpl0);
      // Undeclared exception!
      try {
        baseCmisSearchQueryBuilder0.traverseQuery((CMISJunction) cMISConjunction0, (Query) wildcardQueryImpl0, (QueryConfig) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * StringEquals is not supposed to work on a null caller
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      BaseCmisSearchQueryBuilder baseCmisSearchQueryBuilder0 = new BaseCmisSearchQueryBuilder();
      CMISConjunction cMISConjunction0 = new CMISConjunction();
      TermRangeQueryImpl termRangeQueryImpl0 = new TermRangeQueryImpl((String) null, (String) null, (String) null, false, false);
      // Undeclared exception!
      try {
        baseCmisSearchQueryBuilder0.traverseQuery((CMISJunction) cMISConjunction0, (Query) termRangeQueryImpl0, (QueryConfig) null);
        fail("Expecting exception: NoClassDefFoundError");
      } catch(NoClassDefFoundError e) {
        /*
         * Could not initialize class com.liferay.portal.kernel.repository.cmis.search.CMISParameterValueUtil
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      BaseCmisSearchQueryBuilder baseCmisSearchQueryBuilder0 = new BaseCmisSearchQueryBuilder();
      CMISDisjunction cMISDisjunction0 = new CMISDisjunction();
      BooleanQueryImpl booleanQueryImpl0 = new BooleanQueryImpl();
      booleanQueryImpl0.addRequiredTerm("folderId", (short)39);
      // Undeclared exception!
      try {
        baseCmisSearchQueryBuilder0.traverseQuery((CMISJunction) cMISDisjunction0, (Query) booleanQueryImpl0, (QueryConfig) null);
        fail("Expecting exception: BeanLocatorException");
      } catch(BeanLocatorException e) {
        /*
         * BeanLocator has not been set
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      BaseCmisSearchQueryBuilder baseCmisSearchQueryBuilder0 = new BaseCmisSearchQueryBuilder();
      CMISSimpleExpressionOperator cMISSimpleExpressionOperator0 = CMISSimpleExpressionOperator.EQ;
      // Undeclared exception!
      try {
        baseCmisSearchQueryBuilder0.buildFieldExpression("content", "content", cMISSimpleExpressionOperator0);
        fail("Expecting exception: NoClassDefFoundError");
      } catch(NoClassDefFoundError e) {
        /*
         * Could not initialize class com.liferay.portal.kernel.repository.cmis.search.CMISParameterValueUtil
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      BaseCmisSearchQueryBuilder baseCmisSearchQueryBuilder0 = new BaseCmisSearchQueryBuilder();
      CMISDisjunction cMISDisjunction0 = new CMISDisjunction();
      BooleanQueryImpl booleanQueryImpl0 = new BooleanQueryImpl();
      booleanQueryImpl0.addRequiredTerm("IS_NULLABLE", "IS_NULLABLE");
      // Undeclared exception!
      try {
        baseCmisSearchQueryBuilder0.traverseQuery((CMISJunction) cMISDisjunction0, (Query) booleanQueryImpl0, (QueryConfig) null);
        fail("Expecting exception: NoClassDefFoundError");
      } catch(NoClassDefFoundError e) {
        /*
         * Could not initialize class com.liferay.portal.kernel.repository.cmis.search.CMISParameterValueUtil
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      BaseCmisSearchQueryBuilder baseCmisSearchQueryBuilder0 = new BaseCmisSearchQueryBuilder();
      CMISSimpleExpressionOperator cMISSimpleExpressionOperator0 = CMISSimpleExpressionOperator.EQ;
      try {
        baseCmisSearchQueryBuilder0.buildFieldExpression("userId", "userId", cMISSimpleExpressionOperator0);
        fail("Expecting exception: SearchException");
      } catch(SearchException e) {
        /*
         * Unable to determine user {userId=userId}
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      BaseCmisSearchQueryBuilder baseCmisSearchQueryBuilder0 = new BaseCmisSearchQueryBuilder();
      CMISDisjunction cMISDisjunction0 = new CMISDisjunction();
      BooleanQueryImpl booleanQueryImpl0 = new BooleanQueryImpl();
      com.liferay.portal.search.lucene.BooleanQueryImpl booleanQueryImpl1 = new com.liferay.portal.search.lucene.BooleanQueryImpl();
      BooleanClauseOccurImpl booleanClauseOccurImpl0 = (BooleanClauseOccurImpl)BooleanClauseOccur.MUST_NOT;
      booleanQueryImpl0.add((Query) booleanQueryImpl1, (BooleanClauseOccur) booleanClauseOccurImpl0);
      baseCmisSearchQueryBuilder0.traverseQuery((CMISJunction) cMISDisjunction0, (Query) booleanQueryImpl0, (QueryConfig) null);
      assertEquals(true, booleanQueryImpl0.hasClauses());
  }

  @Test
  public void test7()  throws Throwable  {
      BaseCmisSearchQueryBuilder baseCmisSearchQueryBuilder0 = new BaseCmisSearchQueryBuilder();
      baseCmisSearchQueryBuilder0.traverseQuery((CMISJunction) null, (Query) null, (QueryConfig) null);
  }
}
