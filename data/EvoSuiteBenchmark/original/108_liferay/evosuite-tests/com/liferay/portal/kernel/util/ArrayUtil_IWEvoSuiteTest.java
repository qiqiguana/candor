/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.json.JSONArray;
import com.liferay.portal.kernel.util.Accessor;
import com.liferay.portal.kernel.util.ArrayUtil_IW;
import java.util.Comparator;
import javax.swing.JLayeredPane;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ArrayUtil_IWEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      boolean[] booleanArray0 = new boolean[5];
      boolean[] booleanArray1 = arrayUtil_IW0.subset(booleanArray0, 96, 0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
  }

  @Test
  public void test1()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      long[] longArray0 = new long[4];
      long[] longArray1 = arrayUtil_IW0.remove(longArray0, 1653L);
      assertFalse(longArray1.equals(longArray0));
  }

  @Test
  public void test2()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      short[] shortArray0 = new short[6];
      Short[] shortArray1 = arrayUtil_IW0.toArray(shortArray0);
      assertNotNull(shortArray1);
  }

  @Test
  public void test3()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      Object[] objectArray0 = new Object[10];
      String[] stringArray0 = arrayUtil_IW0.toStringArray(objectArray0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test4()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      long[] longArray0 = new long[8];
      long[] longArray1 = arrayUtil_IW0.clone(longArray0);
      assertFalse(longArray1.equals(longArray0));
  }

  @Test
  public void test5()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      byte[][] byteArray0 = new byte[10][7];
      byte[] byteArray1 = arrayUtil_IW0.append(byteArray0);
      assertNotNull(byteArray1);
  }

  @Test
  public void test6()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      Byte[] byteArray0 = new Byte[6];
      // Undeclared exception!
      try {
        arrayUtil_IW0.toArray(byteArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      short[] shortArray0 = new short[1];
      short[] shortArray1 = arrayUtil_IW0.remove(shortArray0, (short) (-618));
      assertFalse(shortArray0.equals(shortArray1));
  }

  @Test
  public void test8()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      Object[] objectArray0 = new Object[7];
      Object[] objectArray1 = arrayUtil_IW0.clone(objectArray0, 0, 0);
      assertFalse(objectArray0.equals(objectArray1));
  }

  @Test
  public void test9()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      double[] doubleArray0 = new double[8];
      String[] stringArray0 = arrayUtil_IW0.toStringArray(doubleArray0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test10()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      float[] floatArray0 = new float[4];
      // Undeclared exception!
      try {
        arrayUtil_IW0.clone(floatArray0, (-60), (-60));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      assertNotNull(arrayUtil_IW0);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = arrayUtil_IW0.contains(booleanArray0, true);
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = arrayUtil_IW0.remove(doubleArray0, 0.0);
      assertFalse(doubleArray1.equals(doubleArray0));
  }

  @Test
  public void test13()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      long[] longArray0 = new long[3];
      long[] longArray1 = arrayUtil_IW0.subset(longArray0, 1180, 241);
      assertSame(longArray0, longArray1);
  }

  @Test
  public void test14()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      int[] intArray0 = new int[7];
      Integer[] integerArray0 = arrayUtil_IW0.toArray(intArray0);
      assertNotNull(integerArray0);
  }

  @Test
  public void test15()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      int[] intArray0 = new int[1];
      int[] intArray1 = arrayUtil_IW0.unique(intArray0);
      assertFalse(intArray0.equals(intArray1));
  }

  @Test
  public void test16()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      Integer[] integerArray0 = new Integer[4];
      boolean boolean0 = arrayUtil_IW0.contains((Object[]) integerArray0, (Object) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = arrayUtil_IW0.clone(doubleArray0, 0, 0);
      assertFalse(doubleArray0.equals(doubleArray1));
  }

  @Test
  public void test18()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = arrayUtil_IW0.unique(byteArray0);
      assertFalse(byteArray1.equals(byteArray0));
  }

  @Test
  public void test19()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      float[][] floatArray0 = new float[4][6];
      float[] floatArray1 = arrayUtil_IW0.append(floatArray0);
      assertNotNull(floatArray1);
  }

  @Test
  public void test20()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      assertNotNull(arrayUtil_IW0);
      
      int[] intArray0 = new int[4];
      boolean boolean0 = arrayUtil_IW0.contains(intArray0, 0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      float[] floatArray0 = new float[9];
      String[] stringArray0 = arrayUtil_IW0.toStringArray(floatArray0);
      String string0 = (String)arrayUtil_IW0.getValue((Object[]) stringArray0, 0);
      assertEquals("0.0", string0);
  }

  @Test
  public void test22()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      int[] intArray0 = new int[10];
      int[] intArray1 = arrayUtil_IW0.clone(intArray0);
      assertFalse(intArray1.equals(intArray0));
  }

  @Test
  public void test23()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      String[] stringArray0 = new String[8];
      String[] stringArray1 = arrayUtil_IW0.clone(stringArray0);
      assertFalse(stringArray0.equals(stringArray1));
  }

  @Test
  public void test24()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      char[] charArray0 = new char[6];
      char[] charArray1 = arrayUtil_IW0.append(charArray0, 'P');
      assertFalse(charArray1.equals(charArray0));
  }

  @Test
  public void test25()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      char[] charArray0 = new char[1];
      char[] charArray1 = arrayUtil_IW0.remove(charArray0, 'E');
      assertFalse(charArray1.equals(charArray0));
  }

  @Test
  public void test26()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      char[] charArray0 = new char[10];
      char[] charArray1 = arrayUtil_IW0.subset(charArray0, (-1176), (int) '9');
      assertSame(charArray1, charArray0);
  }

  @Test
  public void test27()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      short[] shortArray0 = new short[6];
      short[] shortArray1 = arrayUtil_IW0.clone(shortArray0);
      assertFalse(shortArray0.equals(shortArray1));
  }

  @Test
  public void test28()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      String[] stringArray0 = new String[6];
      String[] stringArray1 = arrayUtil_IW0.append(stringArray0, "ScKK9\"+");
      assertFalse(stringArray1.equals(stringArray0));
  }

  @Test
  public void test29()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      double[] doubleArray0 = new double[1];
      Double[] doubleArray1 = arrayUtil_IW0.toArray(doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test
  public void test30()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      short[] shortArray0 = new short[24];
      short[] shortArray1 = arrayUtil_IW0.unique(shortArray0);
      assertFalse(shortArray1.equals(shortArray0));
  }

  @Test
  public void test31()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try {
        arrayUtil_IW0.clone(byteArray0, (int) (byte)13, (-1476));
        fail("Expecting exception: NegativeArraySizeException");
      } catch(NegativeArraySizeException e) {
      }
  }

  @Test
  public void test32()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try {
        arrayUtil_IW0.remove(stringArray0, "q\"wCbVVT)$-[q");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test33()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      int[] intArray0 = new int[4];
      String[] stringArray0 = arrayUtil_IW0.toStringArray(intArray0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test34()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      String[] stringArray0 = new String[3];
      String[] stringArray1 = arrayUtil_IW0.append(stringArray0, stringArray0);
      assertFalse(stringArray0.equals(stringArray1));
  }

  @Test
  public void test35()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = arrayUtil_IW0.unique(doubleArray0);
      assertFalse(doubleArray0.equals(doubleArray1));
  }

  @Test
  public void test36()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      boolean[][] booleanArray0 = new boolean[3][10];
      boolean[] booleanArray1 = arrayUtil_IW0.append(booleanArray0);
      assertNotNull(booleanArray1);
  }

  @Test
  public void test37()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      Object[] objectArray0 = new Object[6];
      Object[] objectArray1 = arrayUtil_IW0.subset(objectArray0, (-319), (-319));
      assertSame(objectArray1, objectArray0);
  }

  @Test
  public void test38()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      char[] charArray0 = new char[3];
      char[] charArray1 = arrayUtil_IW0.clone(charArray0, (int) '\u0000', 944);
      assertFalse(charArray1.equals(charArray0));
  }

  @Test
  public void test39()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      Integer[][] integerArray0 = new Integer[1][5];
      Integer[][] integerArray1 = arrayUtil_IW0.clone(integerArray0);
      assertFalse(integerArray0.equals(integerArray1));
  }

  @Test
  public void test40()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      double[] doubleArray0 = new double[9];
      boolean boolean0 = arrayUtil_IW0.contains(doubleArray0, 1998.4066225175643);
      assertEquals(false, boolean0);
  }

  @Test
  public void test41()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      int[] intArray0 = new int[5];
      int[] intArray1 = arrayUtil_IW0.remove(intArray0, 0);
      assertFalse(intArray1.equals(intArray0));
  }

  @Test
  public void test42()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      int[] intArray0 = new int[4];
      int[] intArray1 = arrayUtil_IW0.subset(intArray0, 599, 0);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
  }

  @Test
  public void test43()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      float[] floatArray0 = new float[4];
      float[] floatArray1 = arrayUtil_IW0.clone(floatArray0);
      assertFalse(floatArray1.equals(floatArray0));
  }

  @Test
  public void test44()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try {
        arrayUtil_IW0.combine(objectArray0, objectArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test45()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      boolean[] booleanArray0 = new boolean[9];
      // Undeclared exception!
      try {
        arrayUtil_IW0.clone(booleanArray0, 1246, 1246);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test46()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      boolean[] booleanArray0 = new boolean[2];
      boolean[] booleanArray1 = arrayUtil_IW0.append(booleanArray0, true);
      assertFalse(booleanArray1.equals(booleanArray0));
  }

  @Test
  public void test47()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      Short[] shortArray0 = new Short[6];
      // Undeclared exception!
      try {
        arrayUtil_IW0.toArray(shortArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test48()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try {
        arrayUtil_IW0.removeByPrefix(stringArray0, "");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test49()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      double[] doubleArray0 = new double[10];
      double[] doubleArray1 = arrayUtil_IW0.subset(doubleArray0, 0, 0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test
  public void test50()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      short[] shortArray0 = new short[1];
      short[] shortArray1 = arrayUtil_IW0.subset(shortArray0, (-1527), 695);
      assertSame(shortArray0, shortArray1);
  }

  @Test
  public void test51()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      short[] shortArray0 = new short[6];
      boolean boolean0 = arrayUtil_IW0.contains(shortArray0, (short)28);
      assertEquals(false, boolean0);
  }

  @Test
  public void test52()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = arrayUtil_IW0.append(byteArray0, (byte)1);
      assertFalse(byteArray1.equals(byteArray0));
  }

  @Test
  public void test53()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      char[] charArray0 = new char[6];
      char[] charArray1 = arrayUtil_IW0.clone(charArray0);
      assertFalse(charArray0.equals(charArray1));
  }

  @Test
  public void test54()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = arrayUtil_IW0.clone(byteArray0);
      assertFalse(byteArray0.equals(byteArray1));
  }

  @Test
  public void test55()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      long[] longArray0 = new long[6];
      boolean boolean0 = arrayUtil_IW0.contains(longArray0, (-103L));
      assertEquals(false, boolean0);
  }

  @Test
  public void test56()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = arrayUtil_IW0.append(doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test
  public void test57()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      // Undeclared exception!
      try {
        arrayUtil_IW0.toStringArray((JSONArray) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test58()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      boolean[] booleanArray0 = new boolean[4];
      Boolean[] booleanArray1 = arrayUtil_IW0.toArray(booleanArray0);
      assertNotNull(booleanArray1);
  }

  @Test
  public void test59()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      Double[] doubleArray0 = new Double[2];
      // Undeclared exception!
      try {
        arrayUtil_IW0.toArray(doubleArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test60()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      int[][] intArray0 = new int[6][7];
      int[] intArray1 = arrayUtil_IW0.append(intArray0);
      assertNotNull(intArray1);
  }

  @Test
  public void test61()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      String[][] stringArray0 = new String[9][5];
      String[][] stringArray1 = arrayUtil_IW0.clone(stringArray0, 0, 0);
      assertFalse(stringArray1.equals(stringArray0));
  }

  @Test
  public void test62()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = arrayUtil_IW0.subset(byteArray0, (-1), 0);
      assertSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
  }

  @Test
  public void test63()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      int[] intArray0 = new int[6];
      int[] intArray1 = arrayUtil_IW0.append(intArray0, (-600));
      assertFalse(intArray1.equals(intArray0));
  }

  @Test
  public void test64()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      Integer[] integerArray0 = new Integer[7];
      // Undeclared exception!
      try {
        arrayUtil_IW0.toArray(integerArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test65()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      long[][] longArray0 = new long[2][6];
      long[] longArray1 = arrayUtil_IW0.clone(longArray0[0], 0, 722);
      assertNotNull(longArray1);
  }

  @Test
  public void test66()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      Object[][] objectArray0 = new Object[6][3];
      Object[] objectArray1 = arrayUtil_IW0.append(objectArray0);
      assertNotNull(objectArray1);
  }

  @Test
  public void test67()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      long[] longArray0 = new long[5];
      String[] stringArray0 = arrayUtil_IW0.toStringArray(longArray0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test68()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = arrayUtil_IW0.remove(booleanArray0, true);
      assertFalse(booleanArray0.equals(booleanArray1));
  }

  @Test
  public void test69()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      Character[] characterArray0 = new Character[8];
      // Undeclared exception!
      try {
        arrayUtil_IW0.toArray(characterArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test70()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try {
        arrayUtil_IW0.toString(objectArray0, (Accessor<Object, Object>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test71()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      short[][] shortArray0 = new short[4][8];
      short[] shortArray1 = arrayUtil_IW0.append(shortArray0);
      assertNotNull(shortArray1);
  }

  @Test
  public void test72()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      boolean[] booleanArray0 = new boolean[6];
      boolean[] booleanArray1 = arrayUtil_IW0.clone(booleanArray0);
      assertFalse(booleanArray0.equals(booleanArray1));
  }

  @Test
  public void test73()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      short[] shortArray0 = new short[2];
      // Undeclared exception!
      try {
        arrayUtil_IW0.clone(shortArray0, (-410), (-410));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test74()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      byte[] byteArray0 = new byte[10];
      String[] stringArray0 = arrayUtil_IW0.toStringArray(byteArray0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test75()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      byte[] byteArray0 = new byte[3];
      Byte[] byteArray1 = arrayUtil_IW0.toArray(byteArray0);
      assertNotNull(byteArray1);
  }

  @Test
  public void test76()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      double[][] doubleArray0 = new double[1][4];
      Object[][] objectArray0 = new Object[3][2];
      Object[][] objectArray1 = arrayUtil_IW0.append(objectArray0, (Object[]) doubleArray0);
      assertFalse(objectArray1.equals(objectArray0));
  }

  @Test
  public void test77()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      String[][] stringArray0 = new String[8][4];
      arrayUtil_IW0.reverse(stringArray0[2]);
  }

  @Test
  public void test78()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      char[] charArray0 = new char[3];
      String[] stringArray0 = arrayUtil_IW0.toStringArray(charArray0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test79()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      char[] charArray0 = new char[8];
      Character[] characterArray0 = arrayUtil_IW0.toArray(charArray0);
      assertNotNull(characterArray0);
  }

  @Test
  public void test80()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      boolean[] booleanArray0 = new boolean[6];
      String[] stringArray0 = arrayUtil_IW0.toStringArray(booleanArray0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test81()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      Character[] characterArray0 = new Character[8];
      // Undeclared exception!
      try {
        arrayUtil_IW0.toString((Object[]) characterArray0, "tb*BJuc06[");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test82()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      Float[] floatArray0 = new Float[3];
      // Undeclared exception!
      try {
        arrayUtil_IW0.toArray(floatArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test83()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      Long[] longArray0 = new Long[10];
      // Undeclared exception!
      try {
        arrayUtil_IW0.toArray(longArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test84()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      float[] floatArray0 = new float[22];
      float[] floatArray1 = arrayUtil_IW0.append(floatArray0, 0.6F);
      assertFalse(floatArray0.equals(floatArray1));
  }

  @Test
  public void test85()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      long[][] longArray0 = new long[2][6];
      long[] longArray1 = arrayUtil_IW0.append(longArray0);
      assertNotNull(longArray1);
  }

  @Test
  public void test86()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try {
        arrayUtil_IW0.clone(intArray0, 487, 0);
        fail("Expecting exception: NegativeArraySizeException");
      } catch(NegativeArraySizeException e) {
      }
  }

  @Test
  public void test87()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = arrayUtil_IW0.contains(byteArray0, (byte) (-31));
      assertEquals(false, boolean0);
  }

  @Test
  public void test88()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      char[][] charArray0 = new char[9][3];
      char[] charArray1 = arrayUtil_IW0.append(charArray0);
      assertNotNull(charArray1);
  }

  @Test
  public void test89()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      float[] floatArray0 = new float[10];
      float[] floatArray1 = arrayUtil_IW0.unique(floatArray0);
      assertFalse(floatArray0.equals(floatArray1));
  }

  @Test
  public void test90()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      double[] doubleArray0 = new double[13];
      double[] doubleArray1 = arrayUtil_IW0.append(doubleArray0, 0.0);
      assertFalse(doubleArray1.equals(doubleArray0));
  }

  @Test
  public void test91()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try {
        arrayUtil_IW0.toString(objectArray0, "", "");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test92()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      short[] shortArray0 = new short[8];
      String[] stringArray0 = arrayUtil_IW0.toStringArray(shortArray0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test93()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      char[] charArray0 = new char[10];
      boolean boolean0 = arrayUtil_IW0.contains(charArray0, 'i');
      assertEquals(false, boolean0);
  }

  @Test
  public void test94()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try {
        arrayUtil_IW0.distinct(stringArray0, (Comparator<String>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test95()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      float[] floatArray0 = new float[4];
      float[] floatArray1 = arrayUtil_IW0.subset(floatArray0, 0, 0);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test
  public void test96()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = arrayUtil_IW0.clone(doubleArray0);
      assertFalse(doubleArray1.equals(doubleArray0));
  }

  @Test
  public void test97()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try {
        arrayUtil_IW0.distinct(stringArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test98()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      float[] floatArray0 = new float[6];
      Float[] floatArray1 = arrayUtil_IW0.toArray(floatArray0);
      assertNotNull(floatArray1);
  }

  @Test
  public void test99()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      long[] longArray0 = new long[2];
      Long[] longArray1 = arrayUtil_IW0.toArray(longArray0);
      assertNotNull(longArray1);
  }

  @Test
  public void test100()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = arrayUtil_IW0.remove(byteArray0, (byte)12);
      assertFalse(byteArray0.equals(byteArray1));
  }

  @Test
  public void test101()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      float[] floatArray0 = new float[6];
      boolean boolean0 = arrayUtil_IW0.contains(floatArray0, (float) (short)9508);
      assertEquals(false, boolean0);
  }

  @Test
  public void test102()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      Object[] objectArray0 = new Object[5];
      Long[] longArray0 = arrayUtil_IW0.toLongArray(objectArray0);
      assertNotNull(longArray0);
  }

  @Test
  public void test103()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      Object[][] objectArray0 = new Object[4][4];
      Object[][] objectArray1 = arrayUtil_IW0.append(objectArray0, objectArray0);
      assertFalse(objectArray0.equals(objectArray1));
  }

  @Test
  public void test104()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      Boolean[] booleanArray0 = new Boolean[4];
      // Undeclared exception!
      try {
        arrayUtil_IW0.toArray(booleanArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test105()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      long[] longArray0 = new long[7];
      long[] longArray1 = arrayUtil_IW0.unique(longArray0);
      assertFalse(longArray0.equals(longArray1));
  }

  @Test
  public void test106()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      assertNotNull(arrayUtil_IW0);
      
      Object[] objectArray0 = new Object[8];
      int int0 = arrayUtil_IW0.getLength(objectArray0);
      assertEquals(8, int0);
  }

  @Test
  public void test107()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      short[] shortArray0 = new short[7];
      short[] shortArray1 = arrayUtil_IW0.append(shortArray0, (short) (-1));
      assertFalse(shortArray0.equals(shortArray1));
  }

  @Test
  public void test108()  throws Throwable  {
      ArrayUtil_IW arrayUtil_IW0 = ArrayUtil_IW.getInstance();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      long[] longArray0 = new long[1];
      long[] longArray1 = arrayUtil_IW0.append(longArray0, (long) integer0);
      assertFalse(longArray0.equals(longArray1));
  }
}
