/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringUtil;
import groovy.lang.GroovyClassLoader;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Collection;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class StringUtilEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = StringUtil.merge(charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      String string0 = StringUtil.appendParentheticalSuffix("", (-1));
      assertNotNull(string0);
      assertEquals(" (-1)", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      String string0 = StringUtil.shorten((String) null);
      assertNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      String string0 = StringUtil.add((String) null, (String) null);
      assertNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      String string0 = StringUtil.replace(",CZzYR]y4", ",CZzYR]y4", (String) null, (Map<String, String>) hashtable0);
      assertEquals(",CZzYR]y4", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      float[] floatArray0 = StringUtil.split("(Iw1YZyoCsSe", (-1.0F));
      assertNotNull(floatArray0);
  }

  @Test
  public void test6()  throws Throwable  {
      int[] intArray0 = StringUtil.split("6IKC%['%7xDPq8QB%", 0);
      assertNotNull(intArray0);
  }

  @Test
  public void test7()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
      assertNotNull(stringUtil0);
  }

  @Test
  public void test8()  throws Throwable  {
      short[] shortArray0 = new short[1];
      String string0 = StringUtil.merge(shortArray0);
      assertEquals("0", string0);
      assertNotNull(string0);
  }

  @Test
  public void test9()  throws Throwable  {
      String string0 = StringUtil.remove("t'Xpq&|Y0bRHd:I|~", "t'Xpq&|Y0bRHd:I|~");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = StringUtil.safePath("~");
      assertEquals("~", string0);
      assertNotNull(string0);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = StringUtil.trimTrailing((String) null);
      assertNull(string0);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = StringUtil.trimLeading("*", 'c');
      assertNotNull(string0);
      assertEquals("*", string0);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = StringUtil.trimLeading("THq/");
      assertEquals("THq/", string0);
      assertNotNull(string0);
  }

  @Test
  public void test14()  throws Throwable  {
      boolean[] booleanArray0 = StringUtil.split("4e8", false);
      assertNotNull(booleanArray0);
  }

  @Test
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      String string0 = StringUtil.merge(doubleArray0);
      assertNotNull(string0);
      assertEquals("0.0,0.0,0.0,0.0", string0);
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = StringUtil.shorten("8L]1LBs6hS", "");
      assertEquals("8L]1LBs6hS", string0);
      assertNotNull(string0);
  }

  @Test
  public void test17()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      List<Object> list0 = defaultIntervalCategoryDataset0.getRowKeys();
      String string0 = StringUtil.merge((Collection<?>) list0);
      assertEquals("Series 1,Series 2", string0);
      assertNotNull(string0);
  }

  @Test
  public void test18()  throws Throwable  {
      boolean boolean0 = StringUtil.matchesIgnoreCase("color", "icons/page_pate.png");
      assertEquals(false, boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      short[] shortArray0 = StringUtil.split((String) null, (short)667);
      assertNotNull(shortArray0);
  }

  @Test
  public void test20()  throws Throwable  {
      boolean boolean0 = StringUtil.endsWith("", '');
      assertEquals(false, boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      String string0 = StringUtil.merge(objectArray0);
      assertNotNull(string0);
      assertEquals("null,null,null,null,null,null", string0);
  }

  @Test
  public void test22()  throws Throwable  {
      String[] stringArray0 = StringUtil.split("");
      assertNotNull(stringArray0);
  }

  @Test
  public void test23()  throws Throwable  {
      long[] longArray0 = new long[3];
      String string0 = StringUtil.merge(longArray0);
      assertNotNull(string0);
      assertEquals("0,0,0", string0);
  }

  @Test
  public void test24()  throws Throwable  {
      boolean boolean0 = StringUtil.contains("", "");
      assertEquals(true, boolean0);
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = StringUtil.randomize("javax.swing.JSeparator");
      assertEquals("iSpgorv.antwJaesarjax.", string0);
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = StringUtil.quote("THq/");
      assertEquals("'THq/'", string0);
      assertNotNull(string0);
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = StringUtil.wrap("o1.9i");
      assertNotNull(string0);
      assertEquals("o1.9i\n", string0);
  }

  @Test
  public void test28()  throws Throwable  {
      boolean boolean0 = StringUtil.startsWith("(Iw1YZyoCsSe", 'c');
      assertEquals(false, boolean0);
  }

  @Test
  public void test29()  throws Throwable  {
      double[] doubleArray0 = StringUtil.split("color", 1095.489320498872);
      assertNotNull(doubleArray0);
  }

  @Test
  public void test30()  throws Throwable  {
      float[] floatArray0 = new float[1];
      String string0 = StringUtil.merge(floatArray0);
      assertNotNull(string0);
      assertEquals("0.0", string0);
  }

  @Test
  public void test31()  throws Throwable  {
      String string0 = StringUtil.trimTrailing("*", 'c');
      assertNotNull(string0);
      assertEquals("*", string0);
  }

  @Test
  public void test32()  throws Throwable  {
      long[] longArray0 = StringUtil.split("XGFy", (long) 't');
      assertNotNull(longArray0);
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = StringUtil.valueOf((Object) null);
      assertEquals("null", string0);
  }

  @Test
  public void test34()  throws Throwable  {
      int[] intArray0 = new int[9];
      String string0 = StringUtil.merge(intArray0);
      assertEquals("0,0,0,0,0,0,0,0,0", string0);
      assertNotNull(string0);
  }

  @Test
  public void test35()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      String string0 = StringUtil.merge(booleanArray0);
      assertEquals("false", string0);
      assertNotNull(string0);
  }

  @Test
  public void test36()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      try {
        StringUtil.read(classLoader0, "\"");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Unable to open resource in class loader \"
         */
      }
  }

  @Test
  public void test37()  throws Throwable  {
      String string0 = StringUtil.add("~", "9@H%[*J{THty0T", "~", false);
      assertNotNull(string0);
      assertEquals("~9@H%[*J{THty0T~", string0);
  }

  @Test
  public void test38()  throws Throwable  {
      String string0 = StringUtil.add("T(uLa?OY\"5YDl}P-%y", "E=t^fq$N>-)#|^H", "E=t^fq$N>-)#|^H", true);
      assertEquals("T(uLa?OY\"5YDl}P-%yE=t^fq$N>-)#|^HE=t^fq$N>-)#|^HE=t^fq$N>-)#|^H", string0);
      assertNotNull(string0);
  }

  @Test
  public void test39()  throws Throwable  {
      String string0 = StringUtil.add("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      String string0 = StringUtil.bytesToHexString(byteArray0);
      assertEquals("00000000000000000000", string0);
      assertNotNull(string0);
  }

  @Test
  public void test41()  throws Throwable  {
      boolean boolean0 = StringUtil.contains("", "", (String) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test42()  throws Throwable  {
      boolean boolean0 = StringUtil.contains("", "", "");
      assertEquals(true, boolean0);
  }

  @Test
  public void test43()  throws Throwable  {
      int int0 = StringUtil.count((String) null, (String) null);
      assertEquals(0, int0);
  }

  @Test
  public void test44()  throws Throwable  {
      int int0 = StringUtil.count("", "");
      assertEquals(0, int0);
  }

  @Test
  public void test45()  throws Throwable  {
      int int0 = StringUtil.count(" (-1467)", " (-1467)");
      assertEquals(1, int0);
  }

  @Test
  public void test46()  throws Throwable  {
      boolean boolean0 = StringUtil.endsWith(")", ")");
      assertEquals(true, boolean0);
  }

  @Test
  public void test47()  throws Throwable  {
      boolean boolean0 = StringUtil.endsWith(",", '=');
      assertEquals(false, boolean0);
  }

  @Test
  public void test48()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = StringUtil.extract("K47P9-T$Py%R=I_A", charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test
  public void test49()  throws Throwable  {
      String string0 = StringUtil.extractChars("E=t^fq$N>-)#|^H");
      assertNotNull(string0);
      assertEquals("EtfqNH", string0);
  }

  @Test
  public void test50()  throws Throwable  {
      String string0 = StringUtil.extractDigits("9@H%[*J{THty0T");
      assertNotNull(string0);
      assertEquals("90", string0);
  }

  @Test
  public void test51()  throws Throwable  {
      String string0 = StringUtil.extractFirst("Hk\"a({};", ')');
      assertNull(string0);
  }

  @Test
  public void test52()  throws Throwable  {
      String string0 = StringUtil.extractFirst("9@H%[*J{THty0T", "9@H%[*J{THty0T");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test
  public void test53()  throws Throwable  {
      String string0 = StringUtil.extractFirst((String) null, "");
      assertNull(string0);
  }

  @Test
  public void test54()  throws Throwable  {
      String string0 = StringUtil.extractFirst(",CZzYR]y4", "Vz70z-");
      assertNull(string0);
  }

  @Test
  public void test55()  throws Throwable  {
      String string0 = StringUtil.extractLast("Z", 'P');
      assertNull(string0);
  }

  @Test
  public void test56()  throws Throwable  {
      String string0 = StringUtil.extractLast("THq/", 'H');
      assertEquals("q/", string0);
      assertNotNull(string0);
  }

  @Test
  public void test57()  throws Throwable  {
      String string0 = StringUtil.extractLast("color", "color");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test
  public void test58()  throws Throwable  {
      String string0 = StringUtil.extractLeadingDigits("");
      assertEquals("", string0);
  }

  @Test
  public void test59()  throws Throwable  {
      String string0 = StringUtil.extractLeadingDigits("9@H%[*J{THty0T");
      assertEquals("9", string0);
      assertNotNull(string0);
  }

  @Test
  public void test60()  throws Throwable  {
      String string0 = StringUtil.insert("~", "~", 1049);
      assertNotNull(string0);
      assertEquals("~~", string0);
  }

  @Test
  public void test61()  throws Throwable  {
      String string0 = StringUtil.insert("wYU(F;Bq4Kdm|0ei ", "E$L,r&Ny?[Z}qt", 0);
      assertNotNull(string0);
      assertEquals("E$L,r&Ny?[Z}qtwYU(F;Bq4Kdm|0ei ", string0);
  }

  @Test
  public void test62()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      StringUtil.lowerCase(stringArray0);
  }

  @Test
  public void test63()  throws Throwable  {
      boolean boolean0 = StringUtil.matches("9@H%[*J{THty0T", "9@H%[*J{THty0T");
      assertEquals(true, boolean0);
  }

  @Test
  public void test64()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      String string0 = StringUtil.merge(booleanArray0, "E=t^fq$N>-)#|^H");
      assertNotNull(string0);
      assertEquals("falseE=t^fq$N>-)#|^HfalseE=t^fq$N>-)#|^HfalseE=t^fq$N>-)#|^HfalseE=t^fq$N>-)#|^HfalseE=t^fq$N>-)#|^HfalseE=t^fq$N>-)#|^Hfalse", string0);
  }

  @Test
  public void test65()  throws Throwable  {
      char[] charArray0 = new char[6];
      String string0 = StringUtil.merge(charArray0, "initOutArchive.en...");
      assertNotNull(string0);
      assertEquals("initOutArchive.en...initOutArchive.en...initOutArchive.en...initOutArchive.en...initOutArchive.en...", string0);
  }

  @Test
  public void test66()  throws Throwable  {
      float[] floatArray0 = new float[10];
      String string0 = StringUtil.merge(floatArray0, (String) null);
      assertNotNull(string0);
      assertEquals("0.0null0.0null0.0null0.0null0.0null0.0null0.0null0.0null0.0null0.0", string0);
  }

  @Test
  public void test67()  throws Throwable  {
      long[] longArray0 = StringUtil.split("E=t^fq$N>-)#|^H", "E=t^fq$N>-)#|^H", (-345L));
      assertNotNull(longArray0);
      
      String string0 = StringUtil.merge(longArray0, "T(uLa?OY\"5YDl}P-%y");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test
  public void test68()  throws Throwable  {
      String[] stringArray0 = StringUtil.splitLines("");
      String string0 = StringUtil.merge((Object[]) stringArray0, "5L^Z:");
      assertEquals("", string0);
  }

  @Test
  public void test69()  throws Throwable  {
      short[] shortArray0 = new short[9];
      String string0 = StringUtil.merge(shortArray0, "5L^Z:");
      assertNotNull(string0);
      assertEquals("05L^Z:05L^Z:05L^Z:05L^Z:05L^Z:05L^Z:05L^Z:05L^Z:0", string0);
  }

  @Test
  public void test70()  throws Throwable  {
      GroovyClassLoader groovyClassLoader0 = new GroovyClassLoader();
      StringUtil.read((ClassLoader) groovyClassLoader0, "", true);
      assertEquals("script1000002.groovy", groovyClassLoader0.generateScriptName());
  }

  @Test
  public void test71()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      String string0 = StringUtil.read((InputStream) byteArrayInputStream0);
      assertEquals(-1, byteArrayInputStream0.read());
      assertEquals("", string0);
  }

  @Test
  public void test72()  throws Throwable  {
      String string0 = StringUtil.replace("9@H%[*J{THty0T", '/', 'D');
      assertNotNull(string0);
      assertEquals("9@H%[*J{THty0T", string0);
  }

  @Test
  public void test73()  throws Throwable  {
      String string0 = StringUtil.replace("/", '\"', "/");
      assertEquals("/", string0);
      assertNotNull(string0);
  }

  @Test
  public void test74()  throws Throwable  {
      String string0 = StringUtil.replace("9@H%[*J{THty0T", "9@H%[*J{THty0T", "9@H%[*J{THty0T");
      assertNotNull(string0);
      assertEquals("9@H%[*J{THty0T", string0);
  }

  @Test
  public void test75()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = StringUtil.replace("sqgQE:mzykwYR#Ol", (String[]) null, stringArray0);
      assertNull(string0);
  }

  @Test
  public void test76()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = StringUtil.replace("", stringArray0, stringArray0, true);
      assertEquals("", string0);
  }

  @Test
  public void test77()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = StringUtil.replace("9@H%[*J{THty0T", stringArray0, stringArray0, false);
      assertNotNull(string0);
      assertEquals("9@H%[*J{THty0T", string0);
  }

  @Test
  public void test78()  throws Throwable  {
      String string0 = StringUtil.replaceFirst("", 'f', 'c');
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test79()  throws Throwable  {
      String string0 = StringUtil.replaceFirst((String) null, 'S', 'C');
      assertNull(string0);
  }

  @Test
  public void test80()  throws Throwable  {
      String string0 = StringUtil.replaceFirst("~", '*', "rUfL8");
      assertEquals("~", string0);
      assertNotNull(string0);
  }

  @Test
  public void test81()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = StringUtil.replaceFirst("sqgQE:mzykwYR#Ol", stringArray0, stringArray0);
      assertNull(string0);
  }

  @Test
  public void test82()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "initOutArchive.en...";
      String string0 = StringUtil.replaceFirst("1_ EQ',\"", stringArray0, stringArray0);
      assertEquals("1_ EQ',\"", string0);
      assertNotNull(string0);
  }

  @Test
  public void test83()  throws Throwable  {
      String string0 = StringUtil.replaceFirst("BE4o`6@;:qKJ3eA4kE", '3', "BE4o`6@;:qKJ3eA4kE");
      assertNotNull(string0);
      assertEquals("BE4o`6@;:qKJBE4o`6@;:qKJ3eA4kEeA4kE", string0);
  }

  @Test
  public void test84()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = StringUtil.replaceFirst((String) null, stringArray0, stringArray0);
      assertNull(string0);
  }

  @Test
  public void test85()  throws Throwable  {
      String string0 = StringUtil.replaceLast("", 'D', 'D');
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test
  public void test86()  throws Throwable  {
      String string0 = StringUtil.replaceLast("THq/", 'S', "THq/");
      assertNotNull(string0);
      assertEquals("THq/", string0);
  }

  @Test
  public void test87()  throws Throwable  {
      String string0 = StringUtil.replaceLast((String) null, (String) null, (String) null);
      assertNull(string0);
  }

  @Test
  public void test88()  throws Throwable  {
      String string0 = StringUtil.replaceLast("NNHM{A]+Bu.EyYmk", "NNHM{A]+Bu.EyYmk", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test
  public void test89()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtil.replaceLast("initOutArchive.entering", stringArray0, stringArray0);
      assertNull(string0);
  }

  @Test
  public void test90()  throws Throwable  {
      StringBundler stringBundler0 = StringUtil.replaceToStringBundler("E=t^fq$N>-)#|^H", "E=t^fq$N>-)#|^H", "E=t^fq$N>-)#|^H", (Map<String, String>) null);
      assertEquals(16, stringBundler0.length());
  }

  @Test
  public void test91()  throws Throwable  {
      HashMap<String, StringBundler> hashMap0 = new HashMap<String, StringBundler>();
      StringBundler stringBundler0 = StringUtil.replaceWithStringBundler("wYU(F;Bq4Kdm|0ei ", "wYU(F;Bq4Kdm|0ei ", "wYU(F;Bq4Kdm|0ei ", (Map<String, StringBundler>) hashMap0);
      assertEquals(16, stringBundler0.capacity());
  }

  @Test
  public void test92()  throws Throwable  {
      HashMap<String, StringBundler> hashMap0 = new HashMap<String, StringBundler>();
      StringBundler stringBundler0 = new StringBundler();
      hashMap0.put("wYU(F;Bq4Kdm|0ei ", stringBundler0);
      StringBundler stringBundler1 = StringUtil.replaceWithStringBundler("wYU(F;Bq4Kdm|0ei ", "wYU(F;Bq4Kdm|0ei ", "wYU(F;Bq4Kdm|0ei ", (Map<String, StringBundler>) hashMap0);
      assertNotNull(stringBundler1);
      assertEquals(2, stringBundler1.capacity());
      assertEquals("wYU(F;Bq4Kdm|0ei ", stringBundler1.toString());
  }

  @Test
  public void test93()  throws Throwable  {
      String string0 = StringUtil.reverse("GKA32bHs!dZ");
      assertEquals("Zd!sHb23AKG", string0);
      assertNotNull(string0);
  }

  @Test
  public void test94()  throws Throwable  {
      // Undeclared exception!
      try {
        StringUtil.shorten(")", (-1603));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
        /*
         * String index out of range: -1603
         */
      }
  }

  @Test
  public void test95()  throws Throwable  {
      String string0 = StringUtil.shorten("initOutArchive.entering");
      assertNotNull(string0);
      assertEquals("initOutArchive.en...", string0);
  }

  @Test
  public void test96()  throws Throwable  {
      String[] stringArray0 = StringUtil.split("R7&,9[i|e3S1H3O,R7&,9[i|e3S1H3O,R7&,9[i|e3S1H3O,");
      assertNotNull(stringArray0);
  }

  @Test
  public void test97()  throws Throwable  {
      short[] shortArray0 = StringUtil.split("T(uLa?OY\"5YDl}P-%yE=t^fq$N>-)#|^HE=t^fq$N>-)#|^HE=t^fq$N>-)#|^H", "E=t^fq$N>-)#|^H", (short)483);
      assertNotNull(shortArray0);
  }

  @Test
  public void test98()  throws Throwable  {
      boolean[] booleanArray0 = StringUtil.split("qx&h,`WW[o3@tN%[e=C", "requestFocus", false);
      assertNotNull(booleanArray0);
  }

  @Test
  public void test99()  throws Throwable  {
      String[] stringArray0 = StringUtil.splitLines("5L^Z:");
      assertNotNull(stringArray0);
  }

  @Test
  public void test100()  throws Throwable  {
      boolean boolean0 = StringUtil.startsWith("BE4o`6@;:qKJ3eA4kEBE4o`6@;:qKJ3eA4kEBE4o`6@;:qKJ3eA4kE", "BE4o`6@;:qKJ3eA4kE");
      assertEquals(true, boolean0);
  }

  @Test
  public void test101()  throws Throwable  {
      int int0 = StringUtil.startsWithWeight("9@H%[*J{THty0T", "9@H%[*J{THty0T");
      assertEquals(14, int0);
  }

  @Test
  public void test102()  throws Throwable  {
      String string0 = StringUtil.strip("initOutArchive.en...", '}');
      assertEquals("initOutArchive.en...", string0);
      assertNotNull(string0);
  }

  @Test
  public void test103()  throws Throwable  {
      String string0 = StringUtil.strip("|JNnxRPI", 'N');
      assertEquals("|JnxRPI", string0);
      assertNotNull(string0);
  }

  @Test
  public void test104()  throws Throwable  {
      String string0 = StringUtil.stripBetween((String) null, (String) null, "icons/page_pate.png");
      assertNull(string0);
  }

  @Test
  public void test105()  throws Throwable  {
      String string0 = StringUtil.stripBetween("sqgQE:mzykwYR#Ol", "", "sqgQE:mzykwYR#Ol");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test106()  throws Throwable  {
      StringUtil.toCharCode("h4.T");
  }

  @Test
  public void test107()  throws Throwable  {
      StringUtil.toHexString(1232);
  }

  @Test
  public void test108()  throws Throwable  {
      StringUtil.toHexString((-1L));
  }

  @Test
  public void test109()  throws Throwable  {
      StringUtil.toHexString((Object) "javax.media.jai.operator.MaxFilterShape:MAX_MASK_X=3");
  }

  @Test
  public void test110()  throws Throwable  {
      StringUtil.trim((String) null, '~');
  }

  @Test
  public void test111()  throws Throwable  {
      StringUtil.trim("", 'S');
  }

  @Test
  public void test112()  throws Throwable  {
      StringUtil.trim(" Public Fields and Properties ");
  }

  @Test
  public void test113()  throws Throwable  {
      StringUtil.trimTrailing("");
  }

  @Test
  public void test114()  throws Throwable  {
      StringUtil.unquote(")");
  }

  @Test
  public void test115()  throws Throwable  {
      StringUtil.upperCase("EtfqNH");
  }

  @Test
  public void test116()  throws Throwable  {
      StringUtil.upperCaseFirstLetter(")");
  }

  @Test
  public void test117()  throws Throwable  {
      StringUtil.upperCaseFirstLetter("|S\"5e%R}");
  }

  @Test
  public void test118()  throws Throwable  {
      StringUtil.upperCaseFirstLetter("i;`{");
  }

  @Test
  public void test119()  throws Throwable  {
      String[] stringArray0 = new String[10];
      stringArray0[0] = "_(*K4Rp2.I";
      stringArray0[2] = "_(*K4Rp2.I";
      stringArray0[4] = "_(*K4Rp2.I";
      stringArray0[5] = "_(*K4Rp2.I";
      stringArray0[1] = "_(*K4Rp2.I";
      stringArray0[3] = "_(*K4Rp2.I";
      stringArray0[7] = "5h)2Wp;i!_c* N;R";
      stringArray0[8] = "_(*K4Rp2.I";
      stringArray0[9] = "5h)2Wp;i!_c* N;R";
      stringArray0[6] = "";
      StringUtil.highlight("_(*K4Rp2.I", stringArray0);
  }

  @Test
  public void test120()  throws Throwable  {
      StringUtil.highlight("1_ EQ',\"", "1_ EQ',\"", "1_ EQ',\"", "1_ EQ',\"");
  }

  @Test
  public void test121()  throws Throwable  {
      StringUtil.wrap((String) null);
  }

  @Test
  public void test122()  throws Throwable  {
      StringUtil.wrap("T(uLa?OY\"5YDl}P-%yE=t^fq$N>-)#|^H", 0, "T(uLa?OY\"5YDl}P-%yE=t^fq$N>-)#|^H");
  }

  @Test
  public void test123()  throws Throwable  {
      StringUtil.wrap("As@U", 0, "As@U");
  }
}
