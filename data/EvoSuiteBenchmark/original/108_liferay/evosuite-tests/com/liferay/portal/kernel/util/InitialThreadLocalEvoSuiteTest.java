/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.util.CentralizedThreadLocal;
import com.liferay.portal.kernel.util.InitialThreadLocal;
import java.util.Locale;
import javax.swing.JComponent;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class InitialThreadLocalEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      InitialThreadLocal<Cloneable> initialThreadLocal0 = new InitialThreadLocal<Cloneable>((String) null, (Cloneable) null, false);
      InitialThreadLocal<InitialThreadLocal<Cloneable>> initialThreadLocal1 = new InitialThreadLocal<InitialThreadLocal<Cloneable>>((String) null, initialThreadLocal0);
      InitialThreadLocal<Cloneable> initialThreadLocal2 = initialThreadLocal1.get();
      assertSame(initialThreadLocal2, initialThreadLocal0);
  }

  @Test
  public void test1()  throws Throwable  {
      Locale locale0 = JComponent.getDefaultLocale();
      InitialThreadLocal<Cloneable> initialThreadLocal0 = new InitialThreadLocal<Cloneable>("PS6nZYB@(7$D:F", (Cloneable) locale0, false);
      Locale locale1 = (Locale)initialThreadLocal0.get();
      assertNotNull(locale1);
      assertNotSame(locale0, locale1);
  }

  @Test
  public void test2()  throws Throwable  {
      InitialThreadLocal<String> initialThreadLocal0 = new InitialThreadLocal<String>((String) null, "}h");
      String string0 = initialThreadLocal0.toString();
      assertNotNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      CentralizedThreadLocal<Integer> centralizedThreadLocal0 = new CentralizedThreadLocal<Integer>(false);
      InitialThreadLocal<CentralizedThreadLocal<Integer>> initialThreadLocal0 = new InitialThreadLocal<CentralizedThreadLocal<Integer>>("", centralizedThreadLocal0, false);
      String string0 = initialThreadLocal0.toString();
      assertEquals("", string0);
  }
}
