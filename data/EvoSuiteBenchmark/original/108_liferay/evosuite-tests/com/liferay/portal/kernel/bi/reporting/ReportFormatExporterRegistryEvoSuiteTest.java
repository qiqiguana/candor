/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.bi.reporting;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.bi.reporting.ReportFormat;
import com.liferay.portal.kernel.bi.reporting.ReportFormatExporter;
import com.liferay.portal.kernel.bi.reporting.ReportFormatExporterRegistry;
import java.util.HashMap;
import java.util.Map;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ReportFormatExporterRegistryEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ReportFormatExporterRegistry reportFormatExporterRegistry0 = new ReportFormatExporterRegistry();
      HashMap<String, ReportFormatExporter> hashMap0 = new HashMap<String, ReportFormatExporter>();
      reportFormatExporterRegistry0.setReportFormatExporters((Map<String, ReportFormatExporter>) hashMap0);
      assertEquals(true, hashMap0.isEmpty());
  }

  @Test
  public void test1()  throws Throwable  {
      ReportFormat reportFormat0 = ReportFormat.TXT;
      ReportFormatExporterRegistry reportFormatExporterRegistry0 = new ReportFormatExporterRegistry();
      // Undeclared exception!
      try {
        reportFormatExporterRegistry0.getReportFormatExporter(reportFormat0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * No report format exporter found for txt
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      ReportFormatExporterRegistry reportFormatExporterRegistry0 = new ReportFormatExporterRegistry();
      HashMap<String, ReportFormatExporter> hashMap0 = new HashMap<String, ReportFormatExporter>();
      hashMap0.put("HTM", (ReportFormatExporter) null);
      // Undeclared exception!
      try {
        reportFormatExporterRegistry0.setReportFormatExporters((Map<String, ReportFormatExporter>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Invalid value HTM
         */
      }
  }
}
