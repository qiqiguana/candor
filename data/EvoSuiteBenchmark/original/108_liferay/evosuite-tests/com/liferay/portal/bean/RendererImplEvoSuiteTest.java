/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.bean;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.bean.RendererImpl;
import com.liferay.portal.kernel.bean.RendererException;
import javax.portlet.PortletRequest;
import javax.portlet.PortletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class RendererImplEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      RendererImpl rendererImpl0 = new RendererImpl();
      String string0 = rendererImpl0.renderEntity((HttpServletRequest) null, (HttpServletResponse) null, "", (Object) null);
      assertNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      RendererImpl rendererImpl0 = new RendererImpl();
      // Undeclared exception!
      try {
        rendererImpl0.renderEntity((PortletRequest) null, (PortletResponse) null, "\\", (Object) "pages-per-minute-color", "\\");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      RendererImpl rendererImpl0 = new RendererImpl();
      // Undeclared exception!
      try {
        rendererImpl0.renderBean((HttpServletRequest) null, (HttpServletResponse) null, "I", (Object) "value");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      RendererImpl rendererImpl0 = new RendererImpl();
      // Undeclared exception!
      try {
        rendererImpl0.renderBean((PortletRequest) null, (PortletResponse) null, (Object) "tobottom-toleft");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      RendererImpl rendererImpl0 = new RendererImpl();
      String string0 = rendererImpl0.renderEntity((HttpServletRequest) null, (HttpServletResponse) null, "", "", (Object) "");
      assertNull(string0);
  }

  @Test
  public void test5()  throws Throwable  {
      RendererImpl rendererImpl0 = new RendererImpl();
      // Undeclared exception!
      try {
        rendererImpl0.renderEntity((HttpServletRequest) null, (HttpServletResponse) null, "rg.apache.axzs.ehcodi6g.TypeMapngImpl", (Object) null, "rg.apache.axzs.ehcodi6g.TypeMapngImpl");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 1
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      RendererImpl rendererImpl0 = new RendererImpl();
      // Undeclared exception!
      try {
        rendererImpl0.renderBean((HttpServletRequest) null, (HttpServletResponse) null, (Object) rendererImpl0, "/");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      RendererImpl rendererImpl0 = new RendererImpl();
      // Undeclared exception!
      try {
        rendererImpl0.renderBean((PortletRequest) null, (PortletResponse) null, (Object) "service", "service");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      RendererImpl rendererImpl0 = new RendererImpl();
      // Undeclared exception!
      try {
        rendererImpl0.renderEntity((PortletRequest) null, (PortletResponse) null, "Not supported yet", (Object) rendererImpl0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      RendererImpl rendererImpl0 = new RendererImpl();
      // Undeclared exception!
      try {
        rendererImpl0.renderBean((PortletRequest) null, (PortletResponse) null, "fileFilterChanged", (Object) "fileFilterChanged");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      RendererImpl rendererImpl0 = new RendererImpl();
      // Undeclared exception!
      try {
        rendererImpl0.renderEntity((PortletRequest) null, (PortletResponse) null, "trace", "trace", (Object) "trace");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      RendererImpl rendererImpl0 = new RendererImpl();
      String string0 = rendererImpl0.renderBean((HttpServletRequest) null, (HttpServletResponse) null, (Object) null);
      assertNull(string0);
  }

  @Test
  public void test12()  throws Throwable  {
      RendererImpl rendererImpl0 = new RendererImpl();
      // Undeclared exception!
      try {
        rendererImpl0.renderEntity((HttpServletRequest) null, (HttpServletResponse) null, "/", "/", (Object) "model", "/");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 1
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      RendererImpl rendererImpl0 = new RendererImpl();
      // Undeclared exception!
      try {
        rendererImpl0.renderEntity((HttpServletRequest) null, (HttpServletResponse) null, "u", "u", (Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 1
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      RendererImpl rendererImpl0 = new RendererImpl();
      Class<?> class0 = Long.class;
      Class<?> class1 = rendererImpl0.mapToPrimitive(class0);
      Class<?> class2 = rendererImpl0.mapToPrimitive(class1);
      assertNotNull(class2);
      assertEquals("long", class2.getCanonicalName());
  }

  @Test
  public void test15()  throws Throwable  {
      RendererImpl rendererImpl0 = new RendererImpl();
      Class<?> class0 = Integer.class;
      Class<?> class1 = rendererImpl0.mapToPrimitive(class0);
      assertNotNull(class1);
      assertEquals("int", class1.toString());
  }
}
