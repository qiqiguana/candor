/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.util.ListWrapper;
import com.liferay.portal.xml.NodeList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TranslatedListEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      NodeList<Object, String> nodeList0 = new NodeList<Object, String>((List<Object>) linkedList0, (List<String>) linkedList1);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      ListWrapper<Integer> listWrapper0 = new ListWrapper<Integer>((List<Integer>) linkedList2);
      NodeList<Integer, Object> nodeList1 = new NodeList<Integer, Object>((List<Integer>) listWrapper0, (List<Object>) nodeList0);
      // Undeclared exception!
      try {
        nodeList1.subList(16, 16);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * toIndex = 16
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      ListWrapper<Object> listWrapper0 = new ListWrapper<Object>((List<Object>) linkedList1);
      NodeList<Object, Object> nodeList0 = new NodeList<Object, Object>((List<Object>) linkedList1, (List<Object>) listWrapper0);
      NodeList<String, Object> nodeList1 = new NodeList<String, Object>((List<String>) linkedList0, (List<Object>) nodeList0);
      NodeList<String, String> nodeList2 = new NodeList<String, String>((List<String>) linkedList0, (List<String>) linkedList0);
      // Undeclared exception!
      try {
        nodeList1.remove((Object) nodeList2);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * com.liferay.portal.xml.NodeList
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      NodeList<String, ListWrapper<Object>> nodeList0 = new NodeList<String, ListWrapper<Object>>((List<String>) linkedList0, (List<ListWrapper<Object>>) null);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      NodeList<Integer, Integer> nodeList1 = new NodeList<Integer, Integer>((List<Integer>) null, (List<Integer>) null);
      NodeList<Object, Integer> nodeList2 = new NodeList<Object, Integer>((List<Object>) linkedList1, (List<Integer>) nodeList1);
      NodeList<String, Object> nodeList3 = new NodeList<String, Object>((List<String>) nodeList0, (List<Object>) nodeList2);
      // Undeclared exception!
      try {
        nodeList3.remove((-782));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      NodeList<String, String> nodeList0 = new NodeList<String, String>((List<String>) linkedList0, (List<String>) linkedList0);
      // Undeclared exception!
      try {
        nodeList0.add("R");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * java.lang.String
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      NodeList<Object, Object> nodeList0 = new NodeList<Object, Object>((List<Object>) null, (List<Object>) null);
      // Undeclared exception!
      try {
        nodeList0.set((-122), (Object) "Ix)v<R0lwxU;7|Yo|/");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * java.lang.String
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<ListWrapper<Object>> linkedList1 = new LinkedList<ListWrapper<Object>>();
      NodeList<ListWrapper<Object>, ListWrapper<Integer>> nodeList0 = new NodeList<ListWrapper<Object>, ListWrapper<Integer>>((List<ListWrapper<Object>>) linkedList1, (List<ListWrapper<Integer>>) null);
      ListWrapper<Object> listWrapper0 = new ListWrapper<Object>((List<Object>) linkedList0);
      // Undeclared exception!
      try {
        nodeList0.add(0, listWrapper0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * com.liferay.portal.kernel.util.ListWrapper
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      NodeList<Object, String> nodeList0 = new NodeList<Object, String>((List<Object>) linkedList0, (List<String>) linkedList1);
      LinkedList<ListWrapper<Integer>> linkedList2 = new LinkedList<ListWrapper<Integer>>();
      NodeList<Object, ListWrapper<Integer>> nodeList1 = new NodeList<Object, ListWrapper<Integer>>((List<Object>) nodeList0, (List<ListWrapper<Integer>>) linkedList2);
      boolean boolean0 = nodeList1.addAll(16, (Collection<?>) nodeList0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      NodeList<Object, Object> nodeList0 = new NodeList<Object, Object>((List<Object>) linkedList0, (List<Object>) linkedList0);
      Object object0 = new Object();
      linkedList0.add(object0);
      // Undeclared exception!
      try {
        nodeList0.addAll((Collection<?>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * java.lang.Object
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      NodeList<Object, Object> nodeList0 = new NodeList<Object, Object>((List<Object>) linkedList0, (List<Object>) linkedList0);
      linkedList0.add((Object) "[]");
      // Undeclared exception!
      try {
        nodeList0.addAll(1321, (Collection<?>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * java.lang.String
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      NodeList<Object, Object> nodeList0 = new NodeList<Object, Object>((List<Object>) linkedList0, (List<Object>) linkedList0);
      boolean boolean0 = nodeList0.removeAll((Collection<?>) linkedList0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<ListWrapper<String>> linkedList1 = new LinkedList<ListWrapper<String>>();
      linkedList0.add("yw)Lu0**Q!6Z^q");
      NodeList<ListWrapper<String>, String> nodeList0 = new NodeList<ListWrapper<String>, String>((List<ListWrapper<String>>) linkedList1, (List<String>) linkedList0);
      NodeList<String, ListWrapper<String>> nodeList1 = new NodeList<String, ListWrapper<String>>((List<String>) linkedList0, (List<ListWrapper<String>>) nodeList0);
      // Undeclared exception!
      try {
        nodeList1.removeAll((Collection<?>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * java.lang.String
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListWrapper<Integer> listWrapper0 = new ListWrapper<Integer>((List<Integer>) linkedList0);
      NodeList<Integer, Integer> nodeList0 = new NodeList<Integer, Integer>((List<Integer>) listWrapper0, (List<Integer>) listWrapper0);
      boolean boolean0 = nodeList0.retainAll((Collection<?>) listWrapper0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      ListWrapper<Integer> listWrapper0 = new ListWrapper<Integer>((List<Integer>) linkedList0);
      NodeList<Integer, Integer> nodeList0 = new NodeList<Integer, Integer>((List<Integer>) listWrapper0, (List<Integer>) listWrapper0);
      // Undeclared exception!
      try {
        nodeList0.retainAll((Collection<?>) listWrapper0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
