/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.util.MemoryMultiValueMap;
import java.io.Serializable;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.TreeSet;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MemoryMultiValueMapEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      MemoryMultiValueMap<Integer, Integer> memoryMultiValueMap0 = new MemoryMultiValueMap<Integer, Integer>();
      HashMap<Object, Map.Entry<Integer, Serializable>> hashMap0 = new HashMap<Object, Map.Entry<Integer, Serializable>>();
      int int0 = memoryMultiValueMap0.size((Object) hashMap0);
      assertEquals(0, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      MemoryMultiValueMap<String, String> memoryMultiValueMap0 = new MemoryMultiValueMap<String, String>();
      memoryMultiValueMap0.clear();
      assertEquals(true, memoryMultiValueMap0.isEmpty());
  }

  @Test
  public void test2()  throws Throwable  {
      MemoryMultiValueMap<Serializable, Serializable> memoryMultiValueMap0 = new MemoryMultiValueMap<Serializable, Serializable>();
      boolean boolean0 = memoryMultiValueMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      MemoryMultiValueMap<String, Serializable> memoryMultiValueMap0 = new MemoryMultiValueMap<String, Serializable>();
      boolean boolean0 = memoryMultiValueMap0.containsKey((Object) false);
      assertEquals(true, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      MemoryMultiValueMap<Serializable, String> memoryMultiValueMap0 = new MemoryMultiValueMap<Serializable, String>();
      Collection<String> collection0 = memoryMultiValueMap0.values();
      memoryMultiValueMap0.putAll((Serializable) "$Z", (Collection<? extends String>) collection0);
      assertEquals(true, memoryMultiValueMap0.isEmpty());
  }

  @Test
  public void test5()  throws Throwable  {
      MemoryMultiValueMap<Object[], HashSet<Object[]>> memoryMultiValueMap0 = new MemoryMultiValueMap<Object[], HashSet<Object[]>>();
      Object[] objectArray0 = new Object[9];
      LinkedHashSet<Object[]> linkedHashSet0 = new LinkedHashSet<Object[]>();
      memoryMultiValueMap0.put(objectArray0, (HashSet<Object[]>) linkedHashSet0);
      HashSet<HashSet<Boolean>> hashSet0 = new HashSet<HashSet<Boolean>>(125);
      boolean boolean0 = memoryMultiValueMap0.containsValue((Object) hashSet0);
      assertEquals(true, memoryMultiValueMap0.isEmpty());
      assertEquals(true, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      MemoryMultiValueMap<Serializable, String> memoryMultiValueMap0 = new MemoryMultiValueMap<Serializable, String>();
      memoryMultiValueMap0.put((Serializable) null, "searchEngine");
      TreeSet<HashMap<Map.Entry<Serializable, Serializable>, Serializable>> treeSet0 = new TreeSet<HashMap<Map.Entry<Serializable, Serializable>, Serializable>>();
      boolean boolean0 = memoryMultiValueMap0.containsValue((Object) treeSet0);
      assertEquals(1, memoryMultiValueMap0.size());
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      MemoryMultiValueMap<Serializable, Serializable> memoryMultiValueMap0 = new MemoryMultiValueMap<Serializable, Serializable>();
      HashMap<String, Serializable> hashMap0 = new HashMap<String, Serializable>();
      memoryMultiValueMap0.put((Serializable) hashMap0, (Serializable) hashMap0);
      memoryMultiValueMap0.put((Serializable) hashMap0, (Serializable) hashMap0);
      assertEquals(true, memoryMultiValueMap0.isEmpty());
      assertEquals(1, memoryMultiValueMap0.size());
  }

  @Test
  public void test8()  throws Throwable  {
      MemoryMultiValueMap<Serializable, Serializable> memoryMultiValueMap0 = new MemoryMultiValueMap<Serializable, Serializable>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      memoryMultiValueMap0.put((Serializable) true, (Serializable) null);
      memoryMultiValueMap0.putAll((Serializable) true, (Collection<? extends Serializable>) linkedHashSet0);
      assertEquals(true, memoryMultiValueMap0.isEmpty());
      assertEquals(1, memoryMultiValueMap0.size());
  }

  @Test
  public void test9()  throws Throwable  {
      MemoryMultiValueMap<String, String> memoryMultiValueMap0 = new MemoryMultiValueMap<String, String>();
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      String string0 = memoryMultiValueMap0.remove((Object) hashSet0);
      assertNull(string0);
  }

  @Test
  public void test10()  throws Throwable  {
      MemoryMultiValueMap<Serializable, Serializable> memoryMultiValueMap0 = new MemoryMultiValueMap<Serializable, Serializable>();
      HashMap<String, Serializable> hashMap0 = new HashMap<String, Serializable>();
      memoryMultiValueMap0.put((Serializable) hashMap0, (Serializable) hashMap0);
      assertEquals(true, memoryMultiValueMap0.isEmpty());
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<Serializable, String> hashMap2 = new HashMap<Serializable, String>((Map<? extends Serializable, ? extends String>) hashMap1);
      memoryMultiValueMap0.remove((Object) hashMap2);
      assertEquals(true, memoryMultiValueMap0.isEmpty());
  }
}
