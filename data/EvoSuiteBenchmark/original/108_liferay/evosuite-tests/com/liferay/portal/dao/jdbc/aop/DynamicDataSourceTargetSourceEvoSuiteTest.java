/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.dao.jdbc.aop;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.dao.jdbc.aop.DynamicDataSourceTargetSource;
import com.liferay.portal.dao.jdbc.aop.Operation;
import interbase.interclient.ConnectionPoolModule;
import interbase.interclient.DataSource;
import java.util.EmptyStackException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DynamicDataSourceTargetSourceEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DynamicDataSourceTargetSource dynamicDataSourceTargetSource0 = new DynamicDataSourceTargetSource();
      DataSource dataSource0 = new DataSource();
      dynamicDataSourceTargetSource0.setReadDataSource((javax.sql.DataSource) dataSource0);
      assertNull(dataSource0.getPassword());
  }

  @Test
  public void test1()  throws Throwable  {
      DynamicDataSourceTargetSource dynamicDataSourceTargetSource0 = new DynamicDataSourceTargetSource();
      boolean boolean0 = dynamicDataSourceTargetSource0.isStatic();
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      DynamicDataSourceTargetSource dynamicDataSourceTargetSource0 = new DynamicDataSourceTargetSource();
      // Undeclared exception!
      try {
        dynamicDataSourceTargetSource0.popMethod();
        fail("Expecting exception: EmptyStackException");
      } catch(EmptyStackException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      DynamicDataSourceTargetSource dynamicDataSourceTargetSource0 = new DynamicDataSourceTargetSource();
      dynamicDataSourceTargetSource0.releaseTarget((Object) null);
      assertEquals(false, dynamicDataSourceTargetSource0.isStatic());
  }

  @Test
  public void test4()  throws Throwable  {
      DynamicDataSourceTargetSource dynamicDataSourceTargetSource0 = new DynamicDataSourceTargetSource();
      dynamicDataSourceTargetSource0.pushMethod("d");
      assertEquals(false, dynamicDataSourceTargetSource0.isStatic());
  }

  @Test
  public void test5()  throws Throwable  {
      DynamicDataSourceTargetSource dynamicDataSourceTargetSource0 = new DynamicDataSourceTargetSource();
      ConnectionPoolModule connectionPoolModule0 = new ConnectionPoolModule();
      dynamicDataSourceTargetSource0.setWriteDataSource((javax.sql.DataSource) connectionPoolModule0);
      assertEquals(false, dynamicDataSourceTargetSource0.inOperation());
  }

  @Test
  public void test6()  throws Throwable  {
      DynamicDataSourceTargetSource dynamicDataSourceTargetSource0 = new DynamicDataSourceTargetSource();
      Object object0 = dynamicDataSourceTargetSource0.getTarget();
      assertNull(object0);
  }

  @Test
  public void test7()  throws Throwable  {
      DynamicDataSourceTargetSource dynamicDataSourceTargetSource0 = new DynamicDataSourceTargetSource();
      assertEquals(Operation.WRITE, dynamicDataSourceTargetSource0.getOperation());
      
      Operation operation0 = Operation.READ;
      dynamicDataSourceTargetSource0.setOperation(operation0);
      assertEquals(false, dynamicDataSourceTargetSource0.inOperation());
  }
}
