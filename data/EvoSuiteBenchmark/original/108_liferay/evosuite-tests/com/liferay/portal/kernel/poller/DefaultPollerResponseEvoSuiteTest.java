/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.poller;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.json.JSONArrayImpl;
import com.liferay.portal.json.JSONObjectImpl;
import com.liferay.portal.kernel.json.JSONArray;
import com.liferay.portal.kernel.json.JSONObject;
import com.liferay.portal.kernel.messaging.Message;
import com.liferay.portal.kernel.poller.DefaultPollerResponse;
import com.liferay.portal.kernel.poller.PollerHeader;
import com.liferay.portal.kernel.poller.PollerResponseClosedException;
import java.util.HashMap;
import java.util.Map;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DefaultPollerResponseEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DefaultPollerResponse defaultPollerResponse0 = new DefaultPollerResponse((PollerHeader) null, " due to overlapping prototypes between:", " due to overlapping prototypes between:");
      JSONArrayImpl jSONArrayImpl0 = new JSONArrayImpl();
      try {
        defaultPollerResponse0.setParameter(" due to overlapping prototypes between:", (JSONArray) jSONArrayImpl0);
        fail("Expecting exception: PollerResponseClosedException");
      } catch(PollerResponseClosedException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      DefaultPollerResponse defaultPollerResponse0 = new DefaultPollerResponse((PollerHeader) null, "l$!", "l$!");
      String string0 = defaultPollerResponse0.getPortletId();
      assertEquals("l$!", string0);
      assertNotNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      DefaultPollerResponse defaultPollerResponse0 = new DefaultPollerResponse((PollerHeader) null, "{a", "{a");
      boolean boolean0 = defaultPollerResponse0.isEmpty();
      assertEquals("{a", defaultPollerResponse0.getPortletId());
      assertEquals(true, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      PollerHeader pollerHeader0 = new PollerHeader(1710L, 1710L, 1710L, (Map<String, Boolean>) hashMap0, false);
      DefaultPollerResponse defaultPollerResponse0 = new DefaultPollerResponse(pollerHeader0, "", "");
      PollerHeader pollerHeader1 = defaultPollerResponse0.getPollerHeader();
      assertNotNull(pollerHeader1);
      assertEquals("", defaultPollerResponse0.getPortletId());
  }

  @Test
  public void test4()  throws Throwable  {
      DefaultPollerResponse defaultPollerResponse0 = new DefaultPollerResponse((PollerHeader) null, "l$!", "l$!");
      defaultPollerResponse0.close();
      assertEquals("l$!", defaultPollerResponse0.getPortletId());
  }

  @Test
  public void test5()  throws Throwable  {
      DefaultPollerResponse defaultPollerResponse0 = new DefaultPollerResponse((PollerHeader) null, "-x$653?f", "-x$653?f");
      Message message0 = new Message();
      message0.setResponseDestinationName("-x$653?f");
      defaultPollerResponse0.createResponseMessage(message0);
      // Undeclared exception!
      try {
        defaultPollerResponse0.close();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      DefaultPollerResponse defaultPollerResponse0 = new DefaultPollerResponse((PollerHeader) null, "-x$653?f", "-x$653?f");
      Message message0 = new Message();
      defaultPollerResponse0.createResponseMessage(message0);
      assertEquals("-x$653?f", defaultPollerResponse0.getPortletId());
  }

  @Test
  public void test7()  throws Throwable  {
      DefaultPollerResponse defaultPollerResponse0 = new DefaultPollerResponse((PollerHeader) null, "-x$653?f", "-x$653?f");
      Message message0 = new Message();
      JSONArrayImpl jSONArrayImpl0 = new JSONArrayImpl();
      message0.setResponseDestinationName("-x$653?f");
      defaultPollerResponse0.createResponseMessage(message0);
      defaultPollerResponse0.setParameter("-x$653?f", (JSONArray) jSONArrayImpl0);
      assertEquals(true, defaultPollerResponse0.isEmpty());
  }

  @Test
  public void test8()  throws Throwable  {
      DefaultPollerResponse defaultPollerResponse0 = new DefaultPollerResponse((PollerHeader) null, "-x$653?f", "-x$653?f");
      Message message0 = new Message();
      message0.setResponseDestinationName("-x$653?f");
      defaultPollerResponse0.createResponseMessage(message0);
      JSONObjectImpl jSONObjectImpl0 = new JSONObjectImpl();
      defaultPollerResponse0.setParameter("-x$653?f", (JSONObject) jSONObjectImpl0);
      assertEquals(true, defaultPollerResponse0.isEmpty());
  }

  @Test
  public void test9()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      PollerHeader pollerHeader0 = new PollerHeader(31L, 31L, 31L, (Map<String, Boolean>) hashMap0, true);
      DefaultPollerResponse defaultPollerResponse0 = new DefaultPollerResponse(pollerHeader0, "i", "i");
      JSONObjectImpl jSONObjectImpl0 = new JSONObjectImpl();
      try {
        defaultPollerResponse0.setParameter("i", (JSONObject) jSONObjectImpl0);
        fail("Expecting exception: PollerResponseClosedException");
      } catch(PollerResponseClosedException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      DefaultPollerResponse defaultPollerResponse0 = new DefaultPollerResponse((PollerHeader) null, "-x$653?f", "-x$653?f");
      Message message0 = new Message();
      message0.setResponseDestinationName("-x$653?f");
      defaultPollerResponse0.createResponseMessage(message0);
      defaultPollerResponse0.setParameter("-x$653?f", "-x$653?f");
      assertEquals(true, defaultPollerResponse0.isEmpty());
  }

  @Test
  public void test11()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      PollerHeader pollerHeader0 = new PollerHeader(1710L, 1710L, 1710L, (Map<String, Boolean>) hashMap0, false);
      DefaultPollerResponse defaultPollerResponse0 = new DefaultPollerResponse(pollerHeader0, "", "");
      try {
        defaultPollerResponse0.setParameter("", "");
        fail("Expecting exception: PollerResponseClosedException");
      } catch(PollerResponseClosedException e) {
      }
  }
}
