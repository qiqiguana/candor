/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.io.unsync;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.io.unsync.UnsyncBufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class UnsyncBufferedOutputStreamEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UnsyncBufferedOutputStream unsyncBufferedOutputStream0 = new UnsyncBufferedOutputStream((OutputStream) byteArrayOutputStream0);
      byte[] byteArray0 = new byte[10];
      unsyncBufferedOutputStream0.write(byteArray0);
      unsyncBufferedOutputStream0.close();
      assertEquals(10, byteArrayOutputStream0.size());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UnsyncBufferedOutputStream unsyncBufferedOutputStream0 = null;
      try {
        unsyncBufferedOutputStream0 = new UnsyncBufferedOutputStream((OutputStream) byteArrayOutputStream0, (-1313));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Size is less than 0
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UnsyncBufferedOutputStream unsyncBufferedOutputStream0 = new UnsyncBufferedOutputStream((OutputStream) byteArrayOutputStream0);
      unsyncBufferedOutputStream0.flush();
  }

  @Test
  public void test3()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UnsyncBufferedOutputStream unsyncBufferedOutputStream0 = new UnsyncBufferedOutputStream((OutputStream) byteArrayOutputStream0, 1);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try {
        unsyncBufferedOutputStream0.write(byteArray0, (int) (byte)81, (int) (byte)81);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(12);
      UnsyncBufferedOutputStream unsyncBufferedOutputStream0 = new UnsyncBufferedOutputStream((OutputStream) byteArrayOutputStream0, 12);
      byte[] byteArray0 = new byte[7];
      unsyncBufferedOutputStream0.write(475);
      // Undeclared exception!
      try {
        unsyncBufferedOutputStream0.write(byteArray0, (-1506), 521);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UnsyncBufferedOutputStream unsyncBufferedOutputStream0 = new UnsyncBufferedOutputStream((OutputStream) byteArrayOutputStream0);
      assertNotNull(unsyncBufferedOutputStream0);
      
      byte[] byteArray0 = new byte[10];
      unsyncBufferedOutputStream0.write(byteArray0);
      unsyncBufferedOutputStream0.write(byteArray0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test
  public void test6()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(12);
      UnsyncBufferedOutputStream unsyncBufferedOutputStream0 = new UnsyncBufferedOutputStream((OutputStream) byteArrayOutputStream0, 12);
      PrintStream printStream0 = new PrintStream((OutputStream) unsyncBufferedOutputStream0);
      byte[] byteArray0 = new byte[9];
      unsyncBufferedOutputStream0.write(byteArray0);
      Object[] objectArray0 = new Object[8];
      printStream0.format("Ts_fg.", objectArray0);
      assertEquals(15, byteArrayOutputStream0.size());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ts_fg.", byteArrayOutputStream0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UnsyncBufferedOutputStream unsyncBufferedOutputStream0 = new UnsyncBufferedOutputStream((OutputStream) byteArrayOutputStream0, 1);
      unsyncBufferedOutputStream0.write(0);
      unsyncBufferedOutputStream0.write((int) (byte)26);
      assertEquals(1, byteArrayOutputStream0.size());
      assertEquals("\u0000", byteArrayOutputStream0.toString());
  }
}
