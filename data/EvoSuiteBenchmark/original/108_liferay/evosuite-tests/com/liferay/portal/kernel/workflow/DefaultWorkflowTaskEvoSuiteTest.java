/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.workflow;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.workflow.DefaultWorkflowTask;
import com.liferay.portal.kernel.workflow.WorkflowTaskAssignee;
import java.io.Serializable;
import java.util.Date;
import java.util.List;
import java.util.Map;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import org.jfree.data.time.Year;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DefaultWorkflowTaskEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DefaultWorkflowTask defaultWorkflowTask0 = new DefaultWorkflowTask();
      String string0 = defaultWorkflowTask0.getName();
      assertNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      DefaultWorkflowTask defaultWorkflowTask0 = new DefaultWorkflowTask();
      defaultWorkflowTask0.setWorkflowDefinitionName("XDy\"48");
      assertNull(defaultWorkflowTask0.getName());
  }

  @Test
  public void test2()  throws Throwable  {
      DefaultWorkflowTask defaultWorkflowTask0 = new DefaultWorkflowTask();
      Map<String, Serializable> map0 = defaultWorkflowTask0.getOptionalAttributes();
      assertNull(map0);
  }

  @Test
  public void test3()  throws Throwable  {
      DefaultWorkflowTask defaultWorkflowTask0 = new DefaultWorkflowTask();
      defaultWorkflowTask0.setDescription("lqsX");
      assertEquals((-1L), defaultWorkflowTask0.getAssigneeUserId());
  }

  @Test
  public void test4()  throws Throwable  {
      DefaultWorkflowTask defaultWorkflowTask0 = new DefaultWorkflowTask();
      Date date0 = defaultWorkflowTask0.getCompletionDate();
      assertNull(date0);
  }

  @Test
  public void test5()  throws Throwable  {
      DefaultWorkflowTask defaultWorkflowTask0 = new DefaultWorkflowTask();
      defaultWorkflowTask0.setName("f}");
      assertEquals(0L, defaultWorkflowTask0.getWorkflowInstanceId());
  }

  @Test
  public void test6()  throws Throwable  {
      DefaultWorkflowTask defaultWorkflowTask0 = new DefaultWorkflowTask();
      defaultWorkflowTask0.setWorkflowDefinitionVersion(233);
      assertEquals(233, defaultWorkflowTask0.getWorkflowDefinitionVersion());
  }

  @Test
  public void test7()  throws Throwable  {
      DefaultWorkflowTask defaultWorkflowTask0 = new DefaultWorkflowTask();
      defaultWorkflowTask0.setWorkflowDefinitionId((-1L));
      assertEquals((-1L), defaultWorkflowTask0.getWorkflowDefinitionId());
  }

  @Test
  public void test8()  throws Throwable  {
      DefaultWorkflowTask defaultWorkflowTask0 = new DefaultWorkflowTask();
      long long0 = defaultWorkflowTask0.getWorkflowDefinitionId();
      assertEquals(0L, long0);
  }

  @Test
  public void test9()  throws Throwable  {
      DefaultWorkflowTask defaultWorkflowTask0 = new DefaultWorkflowTask();
      long long0 = defaultWorkflowTask0.getWorkflowTaskId();
      assertEquals(0L, long0);
  }

  @Test
  public void test10()  throws Throwable  {
      DefaultWorkflowTask defaultWorkflowTask0 = new DefaultWorkflowTask();
      defaultWorkflowTask0.setCreateDate((Date) null);
      assertEquals(0L, defaultWorkflowTask0.getWorkflowInstanceId());
  }

  @Test
  public void test11()  throws Throwable  {
      DefaultWorkflowTask defaultWorkflowTask0 = new DefaultWorkflowTask();
      String string0 = defaultWorkflowTask0.getWorkflowDefinitionName();
      assertNull(string0);
  }

  @Test
  public void test12()  throws Throwable  {
      DefaultWorkflowTask defaultWorkflowTask0 = new DefaultWorkflowTask();
      defaultWorkflowTask0.setOptionalAttributes((Map<String, Serializable>) null);
      assertEquals(false, defaultWorkflowTask0.isAssignedToSingleUser());
  }

  @Test
  public void test13()  throws Throwable  {
      DefaultWorkflowTask defaultWorkflowTask0 = new DefaultWorkflowTask();
      int int0 = defaultWorkflowTask0.getWorkflowDefinitionVersion();
      assertEquals(0, int0);
  }

  @Test
  public void test14()  throws Throwable  {
      DefaultWorkflowTask defaultWorkflowTask0 = new DefaultWorkflowTask();
      boolean boolean0 = defaultWorkflowTask0.isAsynchronous();
      assertEquals(false, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      DefaultWorkflowTask defaultWorkflowTask0 = new DefaultWorkflowTask();
      Date date0 = defaultWorkflowTask0.getCreateDate();
      assertNull(date0);
  }

  @Test
  public void test16()  throws Throwable  {
      DefaultWorkflowTask defaultWorkflowTask0 = new DefaultWorkflowTask();
      Year year0 = new Year();
      Date date0 = year0.getStart();
      defaultWorkflowTask0.setCompletionDate(date0);
      boolean boolean0 = defaultWorkflowTask0.isCompleted();
      assertEquals(true, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      DefaultWorkflowTask defaultWorkflowTask0 = new DefaultWorkflowTask();
      defaultWorkflowTask0.setWorkflowTaskId((-1L));
      assertEquals((-1L), defaultWorkflowTask0.getWorkflowTaskId());
  }

  @Test
  public void test18()  throws Throwable  {
      DefaultWorkflowTask defaultWorkflowTask0 = new DefaultWorkflowTask();
      defaultWorkflowTask0.setDueDate((Date) null);
      assertEquals((-1L), defaultWorkflowTask0.getAssigneeUserId());
  }

  @Test
  public void test19()  throws Throwable  {
      DefaultWorkflowTask defaultWorkflowTask0 = new DefaultWorkflowTask();
      Date date0 = defaultWorkflowTask0.getDueDate();
      assertNull(date0);
  }

  @Test
  public void test20()  throws Throwable  {
      DefaultWorkflowTask defaultWorkflowTask0 = new DefaultWorkflowTask();
      String string0 = defaultWorkflowTask0.getDescription();
      assertNull(string0);
  }

  @Test
  public void test21()  throws Throwable  {
      DefaultWorkflowTask defaultWorkflowTask0 = new DefaultWorkflowTask();
      defaultWorkflowTask0.setAsynchronous(false);
      assertEquals(false, defaultWorkflowTask0.isAsynchronous());
  }

  @Test
  public void test22()  throws Throwable  {
      DefaultWorkflowTask defaultWorkflowTask0 = new DefaultWorkflowTask();
      long long0 = defaultWorkflowTask0.getWorkflowInstanceId();
      assertEquals(0L, long0);
  }

  @Test
  public void test23()  throws Throwable  {
      DefaultWorkflowTask defaultWorkflowTask0 = new DefaultWorkflowTask();
      defaultWorkflowTask0.setWorkflowInstanceId(0L);
      assertEquals(0, defaultWorkflowTask0.getWorkflowDefinitionVersion());
  }

  @Test
  public void test24()  throws Throwable  {
      DefaultWorkflowTask defaultWorkflowTask0 = new DefaultWorkflowTask();
      long long0 = defaultWorkflowTask0.getAssigneeUserId();
      assertEquals(false, defaultWorkflowTask0.isAssignedToSingleUser());
      assertEquals((-1L), long0);
  }

  @Test
  public void test25()  throws Throwable  {
      DefaultWorkflowTask defaultWorkflowTask0 = new DefaultWorkflowTask();
      Object[] objectArray0 = new Object[5];
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, 29);
      TableRowSorter<DefaultTableModel> tableRowSorter0 = new TableRowSorter<DefaultTableModel>(defaultTableModel0);
      List<?> list0 = tableRowSorter0.getSortKeys();
      defaultWorkflowTask0.setWorkflowTaskAssignees(list0);
      List<WorkflowTaskAssignee> list1 = defaultWorkflowTask0.getWorkflowTaskAssignees();
      assertEquals(true, list1.isEmpty());
  }

  @Test
  public void test26()  throws Throwable  {
      DefaultWorkflowTask defaultWorkflowTask0 = new DefaultWorkflowTask();
      List<WorkflowTaskAssignee> list0 = defaultWorkflowTask0.getWorkflowTaskAssignees();
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test27()  throws Throwable  {
      DefaultWorkflowTask defaultWorkflowTask0 = new DefaultWorkflowTask();
      Object[] objectArray0 = new Object[5];
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, 29);
      TableRowSorter<DefaultTableModel> tableRowSorter0 = new TableRowSorter<DefaultTableModel>(defaultTableModel0);
      List<?> list0 = tableRowSorter0.getSortKeys();
      defaultWorkflowTask0.setWorkflowTaskAssignees(list0);
      boolean boolean0 = defaultWorkflowTask0.isAssignedToSingleUser();
      assertEquals(false, boolean0);
  }

  @Test
  public void test28()  throws Throwable  {
      DefaultWorkflowTask defaultWorkflowTask0 = new DefaultWorkflowTask();
      boolean boolean0 = defaultWorkflowTask0.isCompleted();
      assertEquals(false, boolean0);
  }

  @Test
  public void test29()  throws Throwable  {
      DefaultWorkflowTask defaultWorkflowTask0 = new DefaultWorkflowTask();
      Object[] objectArray0 = new Object[4];
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, 29);
      TableRowSorter<DefaultTableModel> tableRowSorter0 = new TableRowSorter<DefaultTableModel>(defaultTableModel0);
      List<?> list0 = tableRowSorter0.getSortKeys();
      defaultWorkflowTask0.setWorkflowTaskAssignees(list0);
      defaultWorkflowTask0.setWorkflowTaskAssignees(list0);
      assertEquals(true, list0.isEmpty());
  }
}
