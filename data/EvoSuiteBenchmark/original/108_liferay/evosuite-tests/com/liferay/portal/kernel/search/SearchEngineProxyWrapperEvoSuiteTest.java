/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.search;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.search.BaseSearchEngine;
import com.liferay.portal.kernel.search.IndexSearcher;
import com.liferay.portal.kernel.search.IndexSearcherProxyBean;
import com.liferay.portal.kernel.search.IndexWriter;
import com.liferay.portal.kernel.search.IndexWriterProxyBean;
import com.liferay.portal.kernel.search.SearchEngine;
import com.liferay.portal.kernel.search.SearchEngineProxyWrapper;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SearchEngineProxyWrapperEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      BaseSearchEngine baseSearchEngine0 = new BaseSearchEngine();
      IndexWriterProxyBean indexWriterProxyBean0 = new IndexWriterProxyBean();
      SearchEngineProxyWrapper searchEngineProxyWrapper0 = new SearchEngineProxyWrapper((SearchEngine) baseSearchEngine0, (IndexSearcher) null, (IndexWriter) indexWriterProxyBean0);
      boolean boolean0 = searchEngineProxyWrapper0.isLuceneBased();
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      BaseSearchEngine baseSearchEngine0 = new BaseSearchEngine();
      SearchEngineProxyWrapper searchEngineProxyWrapper0 = new SearchEngineProxyWrapper((SearchEngine) baseSearchEngine0, (IndexSearcher) null, (IndexWriter) null);
      IndexSearcher indexSearcher0 = searchEngineProxyWrapper0.getIndexSearcher();
      assertNull(indexSearcher0);
  }

  @Test
  public void test2()  throws Throwable  {
      BaseSearchEngine baseSearchEngine0 = new BaseSearchEngine();
      SearchEngineProxyWrapper searchEngineProxyWrapper0 = new SearchEngineProxyWrapper((SearchEngine) baseSearchEngine0, (IndexSearcher) null, (IndexWriter) null);
      String string0 = searchEngineProxyWrapper0.getVendor();
      assertNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      SearchEngineProxyWrapper searchEngineProxyWrapper0 = new SearchEngineProxyWrapper((SearchEngine) null, (IndexSearcher) null, (IndexWriter) null);
      // Undeclared exception!
      try {
        searchEngineProxyWrapper0.getBooleanQueryFactory();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          BaseSearchEngine baseSearchEngine0 = new BaseSearchEngine();
          IndexSearcherProxyBean indexSearcherProxyBean0 = new IndexSearcherProxyBean();
          SearchEngineProxyWrapper searchEngineProxyWrapper0 = new SearchEngineProxyWrapper((SearchEngine) baseSearchEngine0, (IndexSearcher) indexSearcherProxyBean0, (IndexWriter) null);
          // Undeclared exception!
          try {
            searchEngineProxyWrapper0.getBooleanClauseFactory();
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.lang.RuntimePermission getClassLoader.portal)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * com.liferay.portal.kernel.util.PortalClassLoaderUtil.getClassLoader(PortalClassLoaderUtil.java:38)
             * com.liferay.portal.kernel.search.BaseSearchEngine.getBooleanClauseFactory(BaseSearchEngine.java:30)
             * com.liferay.portal.kernel.search.SearchEngineProxyWrapper.getBooleanClauseFactory(SearchEngineProxyWrapper.java:34)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
      BaseSearchEngine baseSearchEngine0 = new BaseSearchEngine();
      IndexSearcherProxyBean indexSearcherProxyBean0 = new IndexSearcherProxyBean();
      SearchEngineProxyWrapper searchEngineProxyWrapper0 = new SearchEngineProxyWrapper((SearchEngine) baseSearchEngine0, (IndexSearcher) indexSearcherProxyBean0, (IndexWriter) null);
      BaseSearchEngine baseSearchEngine1 = (BaseSearchEngine)searchEngineProxyWrapper0.getSearchEngine();
      assertNull(baseSearchEngine1.getVendor());
  }

  @Test
  public void test6()  throws Throwable  {
      BaseSearchEngine baseSearchEngine0 = new BaseSearchEngine();
      IndexSearcherProxyBean indexSearcherProxyBean0 = new IndexSearcherProxyBean();
      SearchEngineProxyWrapper searchEngineProxyWrapper0 = new SearchEngineProxyWrapper((SearchEngine) baseSearchEngine0, (IndexSearcher) indexSearcherProxyBean0, (IndexWriter) null);
      searchEngineProxyWrapper0.getClusteredWritePriority();
  }

  @Test
  public void test7()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          BaseSearchEngine baseSearchEngine0 = new BaseSearchEngine();
          SearchEngineProxyWrapper searchEngineProxyWrapper0 = new SearchEngineProxyWrapper((SearchEngine) baseSearchEngine0, (IndexSearcher) null, (IndexWriter) null);
          // Undeclared exception!
          try {
            searchEngineProxyWrapper0.getTermRangeQueryFactory();
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.lang.RuntimePermission getClassLoader.portal)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * com.liferay.portal.kernel.util.PortalClassLoaderUtil.getClassLoader(PortalClassLoaderUtil.java:38)
             * com.liferay.portal.kernel.search.BaseSearchEngine.getTermRangeQueryFactory(BaseSearchEngine.java:115)
             * com.liferay.portal.kernel.search.SearchEngineProxyWrapper.getTermRangeQueryFactory(SearchEngineProxyWrapper.java:62)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test8()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          BaseSearchEngine baseSearchEngine0 = new BaseSearchEngine();
          IndexSearcherProxyBean indexSearcherProxyBean0 = new IndexSearcherProxyBean();
          SearchEngineProxyWrapper searchEngineProxyWrapper0 = new SearchEngineProxyWrapper((SearchEngine) baseSearchEngine0, (IndexSearcher) indexSearcherProxyBean0, (IndexWriter) null);
          // Undeclared exception!
          try {
            searchEngineProxyWrapper0.getTermQueryFactory();
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.lang.RuntimePermission getClassLoader.portal)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * com.liferay.portal.kernel.util.PortalClassLoaderUtil.getClassLoader(PortalClassLoaderUtil.java:38)
             * com.liferay.portal.kernel.search.BaseSearchEngine.getTermQueryFactory(BaseSearchEngine.java:89)
             * com.liferay.portal.kernel.search.SearchEngineProxyWrapper.getTermQueryFactory(SearchEngineProxyWrapper.java:58)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test9()  throws Throwable  {
      BaseSearchEngine baseSearchEngine0 = new BaseSearchEngine();
      IndexSearcherProxyBean indexSearcherProxyBean0 = new IndexSearcherProxyBean();
      SearchEngineProxyWrapper searchEngineProxyWrapper0 = new SearchEngineProxyWrapper((SearchEngine) baseSearchEngine0, (IndexSearcher) indexSearcherProxyBean0, (IndexWriter) null);
      IndexWriter indexWriter0 = searchEngineProxyWrapper0.getIndexWriter();
      assertNull(indexWriter0);
  }

  @Test
  public void test10()  throws Throwable  {
      BaseSearchEngine baseSearchEngine0 = new BaseSearchEngine();
      SearchEngineProxyWrapper searchEngineProxyWrapper0 = new SearchEngineProxyWrapper((SearchEngine) baseSearchEngine0, (IndexSearcher) null, (IndexWriter) null);
      boolean boolean0 = searchEngineProxyWrapper0.isClusteredWrite();
      assertEquals(false, boolean0);
  }
}
