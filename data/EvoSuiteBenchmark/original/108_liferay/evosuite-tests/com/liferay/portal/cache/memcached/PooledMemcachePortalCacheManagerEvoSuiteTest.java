/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.cache.memcached;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.cache.memcached.MemcachedClientFactory;
import com.liferay.portal.cache.memcached.PooledMemcachePortalCacheManager;
import com.liferay.portal.cache.memcached.PooledMemcachedClientFactory;
import com.liferay.portal.kernel.cache.PortalCache;
import java.net.URL;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PooledMemcachePortalCacheManagerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      PooledMemcachePortalCacheManager<PortalCache<String, String>> pooledMemcachePortalCacheManager0 = new PooledMemcachePortalCacheManager<PortalCache<String, String>>();
      pooledMemcachePortalCacheManager0.setTimeout((-1903));
  }

  @Test
  public void test1()  throws Throwable  {
      PooledMemcachePortalCacheManager<String> pooledMemcachePortalCacheManager0 = new PooledMemcachePortalCacheManager<String>();
      PortalCache<String, String> portalCache0 = pooledMemcachePortalCacheManager0.getCache("");
      assertNotNull(portalCache0);
      
      PortalCache<String, String> portalCache1 = pooledMemcachePortalCacheManager0.getCache("");
      assertSame(portalCache1, portalCache0);
  }

  @Test
  public void test2()  throws Throwable  {
      PooledMemcachePortalCacheManager<Object> pooledMemcachePortalCacheManager0 = new PooledMemcachePortalCacheManager<Object>();
      pooledMemcachePortalCacheManager0.reconfigureCaches((URL) null);
  }

  @Test
  public void test3()  throws Throwable  {
      PooledMemcachePortalCacheManager<PortalCache<String, Object>> pooledMemcachePortalCacheManager0 = new PooledMemcachePortalCacheManager<PortalCache<String, Object>>();
      pooledMemcachePortalCacheManager0.afterPropertiesSet();
  }

  @Test
  public void test4()  throws Throwable  {
      PooledMemcachePortalCacheManager<PortalCache<Integer, String>> pooledMemcachePortalCacheManager0 = new PooledMemcachePortalCacheManager<PortalCache<Integer, String>>();
      pooledMemcachePortalCacheManager0.clearAll();
  }

  @Test
  public void test5()  throws Throwable  {
      PooledMemcachePortalCacheManager<Integer> pooledMemcachePortalCacheManager0 = new PooledMemcachePortalCacheManager<Integer>();
      PooledMemcachedClientFactory pooledMemcachedClientFactory0 = new PooledMemcachedClientFactory();
      pooledMemcachePortalCacheManager0.setMemcachedClientPool((MemcachedClientFactory) pooledMemcachedClientFactory0);
  }

  @Test
  public void test6()  throws Throwable  {
      PooledMemcachePortalCacheManager<Integer> pooledMemcachePortalCacheManager0 = new PooledMemcachePortalCacheManager<Integer>();
      // Undeclared exception!
      try {
        pooledMemcachePortalCacheManager0.setTimeoutTimeUnit("");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * No enum const class java.util.concurrent.TimeUnit.
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      PooledMemcachePortalCacheManager<String> pooledMemcachePortalCacheManager0 = new PooledMemcachePortalCacheManager<String>();
      pooledMemcachePortalCacheManager0.removeCache("");
  }

  @Test
  public void test8()  throws Throwable  {
      PooledMemcachePortalCacheManager<Integer> pooledMemcachePortalCacheManager0 = new PooledMemcachePortalCacheManager<Integer>();
      pooledMemcachePortalCacheManager0.getCache("%PgSeE;L", true);
      pooledMemcachePortalCacheManager0.destroy();
  }
}
