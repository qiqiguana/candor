/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.messaging;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.messaging.LayoutsRemotePublisherRequest;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class LayoutsRemotePublisherRequestEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LayoutsRemotePublisherRequest layoutsRemotePublisherRequest0 = new LayoutsRemotePublisherRequest();
      long long0 = layoutsRemotePublisherRequest0.getSourceGroupId();
      assertEquals(0L, long0);
  }

  @Test
  public void test1()  throws Throwable  {
      LayoutsRemotePublisherRequest layoutsRemotePublisherRequest0 = new LayoutsRemotePublisherRequest();
      Date date0 = layoutsRemotePublisherRequest0.getStartDate();
      assertNull(date0);
  }

  @Test
  public void test2()  throws Throwable  {
      LayoutsRemotePublisherRequest layoutsRemotePublisherRequest0 = new LayoutsRemotePublisherRequest();
      HashMap<String, String[]> hashMap0 = new HashMap<String, String[]>();
      layoutsRemotePublisherRequest0.setParameterMap((Map<String, String[]>) hashMap0);
      assertNull(layoutsRemotePublisherRequest0.getCronText());
  }

  @Test
  public void test3()  throws Throwable  {
      LayoutsRemotePublisherRequest layoutsRemotePublisherRequest0 = new LayoutsRemotePublisherRequest();
      layoutsRemotePublisherRequest0.setUserId((-1L));
      assertEquals((-1L), layoutsRemotePublisherRequest0.getUserId());
  }

  @Test
  public void test4()  throws Throwable  {
      LayoutsRemotePublisherRequest layoutsRemotePublisherRequest0 = new LayoutsRemotePublisherRequest();
      layoutsRemotePublisherRequest0.setSecureConnection(true);
      assertEquals(true, layoutsRemotePublisherRequest0.isSecureConnection());
  }

  @Test
  public void test5()  throws Throwable  {
      LayoutsRemotePublisherRequest layoutsRemotePublisherRequest0 = new LayoutsRemotePublisherRequest();
      String string0 = layoutsRemotePublisherRequest0.getRemotePathContext();
      assertNull(string0);
  }

  @Test
  public void test6()  throws Throwable  {
      LayoutsRemotePublisherRequest layoutsRemotePublisherRequest0 = new LayoutsRemotePublisherRequest();
      layoutsRemotePublisherRequest0.setRemoteAddress("h0%");
      assertEquals("h0%", layoutsRemotePublisherRequest0.getRemoteAddress());
  }

  @Test
  public void test7()  throws Throwable  {
      LayoutsRemotePublisherRequest layoutsRemotePublisherRequest0 = new LayoutsRemotePublisherRequest();
      Date date0 = new Date((-701L));
      layoutsRemotePublisherRequest0.setEndDate(date0);
      assertNull(layoutsRemotePublisherRequest0.getCronText());
  }

  @Test
  public void test8()  throws Throwable  {
      LayoutsRemotePublisherRequest layoutsRemotePublisherRequest0 = new LayoutsRemotePublisherRequest();
      String string0 = layoutsRemotePublisherRequest0.getRemoteAddress();
      layoutsRemotePublisherRequest0.setRemotePathContext(string0);
      assertEquals(false, layoutsRemotePublisherRequest0.isRemotePrivateLayout());
  }

  @Test
  public void test9()  throws Throwable  {
      LayoutsRemotePublisherRequest layoutsRemotePublisherRequest0 = new LayoutsRemotePublisherRequest();
      boolean boolean0 = layoutsRemotePublisherRequest0.isSecureConnection();
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      LayoutsRemotePublisherRequest layoutsRemotePublisherRequest0 = new LayoutsRemotePublisherRequest();
      Map<Long, Boolean> map0 = layoutsRemotePublisherRequest0.getLayoutIdMap();
      assertNull(map0);
  }

  @Test
  public void test11()  throws Throwable  {
      LayoutsRemotePublisherRequest layoutsRemotePublisherRequest0 = new LayoutsRemotePublisherRequest();
      Date date0 = new Date();
      layoutsRemotePublisherRequest0.setScheduledFireTime(date0);
      assertEquals(113, date0.getYear());
  }

  @Test
  public void test12()  throws Throwable  {
      LayoutsRemotePublisherRequest layoutsRemotePublisherRequest0 = new LayoutsRemotePublisherRequest();
      Date date0 = layoutsRemotePublisherRequest0.getEndDate();
      assertNull(date0);
  }

  @Test
  public void test13()  throws Throwable  {
      Date date0 = new Date((-2012L));
      LayoutsRemotePublisherRequest layoutsRemotePublisherRequest0 = new LayoutsRemotePublisherRequest((-2012L), (-2012L), false, (Map<Long, Boolean>) null, (Map<String, String[]>) null, "wQ%qP7)8Ep,p/6", 1129, "wQ%qP7)8Ep,p/6", true, 0L, false, date0, date0);
      assertEquals(1129, layoutsRemotePublisherRequest0.getRemotePort());
      assertEquals(true, layoutsRemotePublisherRequest0.isSecureConnection());
      assertEquals(false, layoutsRemotePublisherRequest0.isPrivateLayout());
      assertEquals("wQ%qP7)8Ep,p/6", layoutsRemotePublisherRequest0.getRemoteAddress());
      assertEquals(false, layoutsRemotePublisherRequest0.isRemotePrivateLayout());
      assertEquals((-2012L), layoutsRemotePublisherRequest0.getSourceGroupId());
      assertEquals((-2012L), layoutsRemotePublisherRequest0.getUserId());
      assertEquals("wQ%qP7)8Ep,p/6", layoutsRemotePublisherRequest0.getRemotePathContext());
      assertEquals(0L, layoutsRemotePublisherRequest0.getRemoteGroupId());
  }

  @Test
  public void test14()  throws Throwable  {
      LayoutsRemotePublisherRequest layoutsRemotePublisherRequest0 = new LayoutsRemotePublisherRequest();
      long long0 = layoutsRemotePublisherRequest0.getUserId();
      assertEquals(0L, long0);
  }

  @Test
  public void test15()  throws Throwable  {
      LayoutsRemotePublisherRequest layoutsRemotePublisherRequest0 = new LayoutsRemotePublisherRequest();
      layoutsRemotePublisherRequest0.setRemotePrivateLayout(true);
      assertEquals(true, layoutsRemotePublisherRequest0.isRemotePrivateLayout());
  }

  @Test
  public void test16()  throws Throwable  {
      LayoutsRemotePublisherRequest layoutsRemotePublisherRequest0 = new LayoutsRemotePublisherRequest();
      boolean boolean0 = layoutsRemotePublisherRequest0.isPrivateLayout();
      assertEquals(false, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      LayoutsRemotePublisherRequest layoutsRemotePublisherRequest0 = new LayoutsRemotePublisherRequest();
      layoutsRemotePublisherRequest0.setPrivateLayout(false);
      assertEquals(false, layoutsRemotePublisherRequest0.isPrivateLayout());
  }

  @Test
  public void test18()  throws Throwable  {
      LayoutsRemotePublisherRequest layoutsRemotePublisherRequest0 = new LayoutsRemotePublisherRequest();
      int int0 = layoutsRemotePublisherRequest0.getRemotePort();
      assertEquals(0, int0);
  }

  @Test
  public void test19()  throws Throwable  {
      LayoutsRemotePublisherRequest layoutsRemotePublisherRequest0 = new LayoutsRemotePublisherRequest();
      layoutsRemotePublisherRequest0.setRemoteGroupId(1L);
      assertEquals(1L, layoutsRemotePublisherRequest0.getRemoteGroupId());
  }

  @Test
  public void test20()  throws Throwable  {
      LayoutsRemotePublisherRequest layoutsRemotePublisherRequest0 = new LayoutsRemotePublisherRequest();
      layoutsRemotePublisherRequest0.setStartDate((Date) null);
      assertNull(layoutsRemotePublisherRequest0.getRemotePathContext());
  }

  @Test
  public void test21()  throws Throwable  {
      LayoutsRemotePublisherRequest layoutsRemotePublisherRequest0 = new LayoutsRemotePublisherRequest();
      layoutsRemotePublisherRequest0.setSourceGroupId((-244L));
      assertEquals((-244L), layoutsRemotePublisherRequest0.getSourceGroupId());
  }

  @Test
  public void test22()  throws Throwable  {
      LayoutsRemotePublisherRequest layoutsRemotePublisherRequest0 = new LayoutsRemotePublisherRequest();
      String string0 = layoutsRemotePublisherRequest0.getRemoteAddress();
      layoutsRemotePublisherRequest0.setCronText(string0);
      assertEquals(false, layoutsRemotePublisherRequest0.isRemotePrivateLayout());
  }

  @Test
  public void test23()  throws Throwable  {
      LayoutsRemotePublisherRequest layoutsRemotePublisherRequest0 = new LayoutsRemotePublisherRequest();
      Date date0 = layoutsRemotePublisherRequest0.getScheduledFireTime();
      assertNull(date0);
  }

  @Test
  public void test24()  throws Throwable  {
      LayoutsRemotePublisherRequest layoutsRemotePublisherRequest0 = new LayoutsRemotePublisherRequest();
      long long0 = layoutsRemotePublisherRequest0.getRemoteGroupId();
      assertEquals(0L, long0);
  }

  @Test
  public void test25()  throws Throwable  {
      LayoutsRemotePublisherRequest layoutsRemotePublisherRequest0 = new LayoutsRemotePublisherRequest();
      Map<String, String[]> map0 = layoutsRemotePublisherRequest0.getParameterMap();
      assertNull(map0);
  }

  @Test
  public void test26()  throws Throwable  {
      LayoutsRemotePublisherRequest layoutsRemotePublisherRequest0 = new LayoutsRemotePublisherRequest();
      layoutsRemotePublisherRequest0.setRemotePort(1664);
      assertEquals(1664, layoutsRemotePublisherRequest0.getRemotePort());
  }

  @Test
  public void test27()  throws Throwable  {
      LayoutsRemotePublisherRequest layoutsRemotePublisherRequest0 = new LayoutsRemotePublisherRequest();
      layoutsRemotePublisherRequest0.setLayoutIdMap((Map<Long, Boolean>) null);
      assertNull(layoutsRemotePublisherRequest0.getCronText());
  }

  @Test
  public void test28()  throws Throwable  {
      LayoutsRemotePublisherRequest layoutsRemotePublisherRequest0 = new LayoutsRemotePublisherRequest();
      String string0 = layoutsRemotePublisherRequest0.getCronText();
      assertNull(string0);
  }

  @Test
  public void test29()  throws Throwable  {
      LayoutsRemotePublisherRequest layoutsRemotePublisherRequest0 = new LayoutsRemotePublisherRequest();
      boolean boolean0 = layoutsRemotePublisherRequest0.isRemotePrivateLayout();
      assertEquals(false, boolean0);
  }
}
