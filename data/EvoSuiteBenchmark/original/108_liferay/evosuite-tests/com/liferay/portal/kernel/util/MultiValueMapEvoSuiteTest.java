/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.util.MemoryMultiValueMap;
import java.io.Serializable;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MultiValueMapEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      MemoryMultiValueMap<Integer, Integer> memoryMultiValueMap0 = new MemoryMultiValueMap<Integer, Integer>();
      // Undeclared exception!
      try {
        memoryMultiValueMap0.entrySet();
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      MemoryMultiValueMap<Serializable, Serializable> memoryMultiValueMap0 = new MemoryMultiValueMap<Serializable, Serializable>();
      // Undeclared exception!
      try {
        memoryMultiValueMap0.get((Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      MemoryMultiValueMap<Integer, Serializable> memoryMultiValueMap0 = new MemoryMultiValueMap<Integer, Serializable>();
      MemoryMultiValueMap<Integer, Integer> memoryMultiValueMap1 = new MemoryMultiValueMap<Integer, Integer>();
      memoryMultiValueMap1.put((Integer) 1, (Integer) 1);
      memoryMultiValueMap0.putAll((Map<? extends Integer, ? extends Serializable>) memoryMultiValueMap1);
      assertEquals(false, memoryMultiValueMap0.isEmpty());
      assertEquals(1, memoryMultiValueMap0.size());
  }

  @Test
  public void test3()  throws Throwable  {
      MemoryMultiValueMap<String, Serializable> memoryMultiValueMap0 = new MemoryMultiValueMap<String, Serializable>();
      HashMap<String, Serializable> hashMap0 = new HashMap<String, Serializable>();
      hashMap0.put(".FN*'zj", (Serializable) ".FN*'zj");
      memoryMultiValueMap0.putAll((Map<? extends String, ? extends Serializable>) hashMap0);
      assertEquals(1, memoryMultiValueMap0.size());
      assertEquals(false, memoryMultiValueMap0.isEmpty());
  }

  @Test
  public void test4()  throws Throwable  {
      MemoryMultiValueMap<Serializable, String> memoryMultiValueMap0 = new MemoryMultiValueMap<Serializable, String>();
      memoryMultiValueMap0.put((Serializable) null, "");
      int int0 = memoryMultiValueMap0.size();
      assertEquals(1, memoryMultiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test
  public void test5()  throws Throwable  {
      MemoryMultiValueMap<Integer, Serializable> memoryMultiValueMap0 = new MemoryMultiValueMap<Integer, Serializable>();
      int int0 = memoryMultiValueMap0.size((Object) "{}");
      assertEquals(0, int0);
  }

  @Test
  public void test6()  throws Throwable  {
      MemoryMultiValueMap<Serializable, Serializable> memoryMultiValueMap0 = new MemoryMultiValueMap<Serializable, Serializable>();
      LinkedList<Serializable> linkedList0 = new LinkedList<Serializable>();
      memoryMultiValueMap0.putAll((Serializable) null, (Collection<? extends Serializable>) linkedList0);
      Collection<Serializable> collection0 = memoryMultiValueMap0.values();
      assertEquals(0, collection0.size());
      assertNotNull(collection0);
  }
}
