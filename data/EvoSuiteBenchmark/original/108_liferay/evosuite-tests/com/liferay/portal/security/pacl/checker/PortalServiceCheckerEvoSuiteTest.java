/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.security.pacl.checker;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.security.pacl.permission.PortalServicePermission;
import com.liferay.portal.security.pacl.ActivePACLPolicy;
import com.liferay.portal.security.pacl.InactivePACLPolicy;
import com.liferay.portal.security.pacl.PACLPolicy;
import com.liferay.portal.security.pacl.checker.PortalServiceChecker;
import de.schlichtherle.nio.charset.IBM437Charset;
import java.lang.reflect.Method;
import java.security.Permission;
import java.util.Properties;
import java.util.Set;
import javax.media.jai.PlanarImage;
import org.evosuite.instrumentation.InstrumentingClassLoader;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PortalServiceCheckerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      PortalServiceChecker portalServiceChecker0 = new PortalServiceChecker();
      PortalServicePermission portalServicePermission0 = new PortalServicePermission("icon", (Object) "icon", (Method) null);
      portalServiceChecker0.checkPermission((Permission) portalServicePermission0);
      assertEquals("(com.liferay.portal.kernel.security.pacl.permission.PortalServicePermission icon)", portalServicePermission0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      PortalServiceChecker portalServiceChecker0 = new PortalServiceChecker();
      Object[] objectArray0 = new Object[1];
      boolean boolean0 = portalServiceChecker0.hasService((Object) "icon", (Method) null, objectArray0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      PortalServiceChecker portalServiceChecker0 = new PortalServiceChecker();
      Properties properties0 = new Properties();
      InactivePACLPolicy inactivePACLPolicy0 = new InactivePACLPolicy("icon", (ClassLoader) null, properties0);
      portalServiceChecker0.setPACLPolicy((PACLPolicy) inactivePACLPolicy0);
      Object[] objectArray0 = new Object[10];
      // Undeclared exception!
      try {
        portalServiceChecker0.hasService((Object) "icon", (Method) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      PortalServiceChecker portalServiceChecker0 = new PortalServiceChecker();
      String string0 = portalServiceChecker0.getInterfaceName("u kTjlImpl");
      assertEquals("u kTjl", string0);
      assertNotNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      PortalServiceChecker portalServiceChecker0 = new PortalServiceChecker();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Properties properties0 = new Properties();
      ActivePACLPolicy activePACLPolicy0 = new ActivePACLPolicy("?='B##+8i'!|uGJE", classLoader0, properties0);
      portalServiceChecker0.getServices((PACLPolicy) activePACLPolicy0);
      assertEquals("{active=true, hashCode=1633054866, servletContextName=?='B##+8i'!|uGJE}", activePACLPolicy0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      PortalServiceChecker portalServiceChecker0 = new PortalServiceChecker();
      InstrumentingClassLoader instrumentingClassLoader0 = (InstrumentingClassLoader)portalServiceChecker0.getPortalClassLoader();
      Properties properties0 = new Properties();
      ActivePACLPolicy activePACLPolicy0 = new ActivePACLPolicy("94-+JO", (ClassLoader) instrumentingClassLoader0, properties0);
      portalServiceChecker0.setPACLPolicy((PACLPolicy) activePACLPolicy0);
      assertEquals("{active=true, hashCode=474548484, servletContextName=94-+JO}", activePACLPolicy0.toString());
      
      Class<?> class0 = PlanarImage.class;
      boolean boolean0 = portalServiceChecker0.hasDynamicQuery(class0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      PortalServiceChecker portalServiceChecker0 = new PortalServiceChecker();
      Class<?> class0 = PortalServiceChecker.class;
      boolean boolean0 = portalServiceChecker0.hasDynamicQuery(class0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      PortalServiceChecker portalServiceChecker0 = new PortalServiceChecker();
      IBM437Charset iBM437Charset0 = new IBM437Charset();
      Set<String> set0 = iBM437Charset0.aliases();
      portalServiceChecker0.touchServices(set0);
      assertEquals(false, set0.isEmpty());
  }
}
