/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.tools.deploy;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.caucho.j2ee.deployclient.DeploymentStatusImpl;
import com.caucho.j2ee.deployclient.TargetImpl;
import com.caucho.j2ee.deployclient.TargetModuleIDImpl;
import com.liferay.portal.tools.deploy.DeploymentHandler;
import com.liferay.portal.tools.deploy.DeploymentProgressListener;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.enterprise.deploy.shared.StateType;
import javax.enterprise.deploy.spi.TargetModuleID;
import javax.enterprise.deploy.spi.status.DeploymentStatus;
import javax.enterprise.deploy.spi.status.ProgressEvent;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DeploymentProgressListenerEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          DeploymentHandler deploymentHandler0 = new DeploymentHandler("/", "/", "/", "/");
          DeploymentProgressListener deploymentProgressListener0 = new DeploymentProgressListener(deploymentHandler0, "/");
          TargetImpl targetImpl0 = new TargetImpl();
          TargetModuleIDImpl targetModuleIDImpl0 = new TargetModuleIDImpl(targetImpl0, "/");
          DeploymentStatusImpl deploymentStatusImpl0 = new DeploymentStatusImpl();
          ProgressEvent progressEvent0 = new ProgressEvent((Object) "/", (TargetModuleID) targetModuleIDImpl0, (DeploymentStatus) deploymentStatusImpl0);
          deploymentProgressListener0.handleProgressEvent(progressEvent0);
          assertEquals("javax.enterprise.deploy.spi.status.ProgressEvent[source=/]", progressEvent0.toString());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          DeploymentHandler deploymentHandler0 = new DeploymentHandler("/", "/", "/", "/");
          DeploymentProgressListener deploymentProgressListener0 = new DeploymentProgressListener(deploymentHandler0, "/");
          TargetImpl targetImpl0 = new TargetImpl();
          TargetModuleIDImpl targetModuleIDImpl0 = new TargetModuleIDImpl(targetImpl0, "/");
          DeploymentStatusImpl deploymentStatusImpl0 = new DeploymentStatusImpl();
          ProgressEvent progressEvent0 = new ProgressEvent((Object) "/", (TargetModuleID) targetModuleIDImpl0, (DeploymentStatus) deploymentStatusImpl0);
          StateType stateType0 = StateType.COMPLETED;
          deploymentStatusImpl0.setState(stateType0);
          deploymentProgressListener0.handleProgressEvent(progressEvent0);
          assertEquals("javax.enterprise.deploy.spi.status.ProgressEvent[source=/]", progressEvent0.toString());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          DeploymentHandler deploymentHandler0 = new DeploymentHandler("/", "/", "/", "/");
          DeploymentProgressListener deploymentProgressListener0 = new DeploymentProgressListener(deploymentHandler0, "/");
          TargetImpl targetImpl0 = new TargetImpl();
          TargetModuleIDImpl targetModuleIDImpl0 = new TargetModuleIDImpl(targetImpl0, "/");
          DeploymentStatusImpl deploymentStatusImpl0 = new DeploymentStatusImpl();
          ProgressEvent progressEvent0 = new ProgressEvent((Object) "/", (TargetModuleID) targetModuleIDImpl0, (DeploymentStatus) deploymentStatusImpl0);
          StateType stateType0 = StateType.FAILED;
          deploymentStatusImpl0.setState(stateType0);
          deploymentProgressListener0.handleProgressEvent(progressEvent0);
          assertEquals("javax.enterprise.deploy.spi.status.ProgressEvent[source=/]", progressEvent0.toString());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
