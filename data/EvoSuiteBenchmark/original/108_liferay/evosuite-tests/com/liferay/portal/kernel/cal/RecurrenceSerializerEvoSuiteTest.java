/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.cal;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.cal.DayAndPosition;
import com.liferay.portal.kernel.cal.Duration;
import com.liferay.portal.kernel.cal.Recurrence;
import com.liferay.portal.kernel.cal.RecurrenceSerializer;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Locale;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class RecurrenceSerializerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      RecurrenceSerializer recurrenceSerializer0 = new RecurrenceSerializer();
      assertNotNull(recurrenceSerializer0);
  }

  @Test
  public void test1()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance(locale0);
      Duration duration0 = new Duration((-11));
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0, 3);
      String string0 = RecurrenceSerializer.toCronText(recurrence0);
      assertEquals("java.util.GregorianCalendar[time=1372739754940,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=35,SECOND=54,MILLISECOND=940,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals("54 35 4 2/1 * ? *", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar((-1922), (-1922), (-1922), (-1922), (-1922));
      Duration duration0 = new Duration(6, (-1922), (-1922));
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0, 6);
      String string0 = RecurrenceSerializer.toCronText(recurrence0);
      assertEquals("0 58 13 ? 5 ? 2089/1", string0);
      assertNotNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(43, 43, 43, 43, 43, 43);
      Duration duration0 = new Duration(43, 43, 43, 43);
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      String string0 = RecurrenceSerializer.toCronText(recurrence0);
      assertEquals("43 43 19 13 9 ? 46", string0);
      assertNotNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance(locale0);
      Duration duration0 = new Duration((-11));
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0, 3);
      DayAndPosition[] dayAndPositionArray0 = new DayAndPosition[2];
      DayAndPosition dayAndPosition0 = new DayAndPosition();
      dayAndPositionArray0[0] = dayAndPosition0;
      dayAndPositionArray0[1] = dayAndPositionArray0[0];
      recurrence0.setByDay(dayAndPositionArray0);
      String string0 = RecurrenceSerializer.toCronText(recurrence0);
      assertEquals(1372739787070L, gregorianCalendar0.getTimeInMillis());
      assertEquals("27 36 4 ? * 0,0 *", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance(locale0);
      Duration duration0 = new Duration(4, 4, 4, 4);
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0, 4);
      String string0 = RecurrenceSerializer.toCronText(recurrence0);
      assertEquals("java.util.GregorianCalendar[time=1372739807682,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=36,SECOND=47,MILLISECOND=682,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals("47 36 4 ? * 3/1 *", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance(locale0);
      Duration duration0 = new Duration(4, 4, 4, 4);
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0, 4);
      DayAndPosition[] dayAndPositionArray0 = new DayAndPosition[2];
      DayAndPosition dayAndPosition0 = new DayAndPosition();
      dayAndPositionArray0[0] = dayAndPosition0;
      dayAndPositionArray0[1] = dayAndPosition0;
      recurrence0.setByDay(dayAndPositionArray0);
      String string0 = RecurrenceSerializer.toCronText(recurrence0);
      assertEquals(1372739818073L, gregorianCalendar0.getTimeInMillis());
      assertEquals("58 36 4 ? * 0,0/1 *", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance(locale0);
      Duration duration0 = new Duration(5, 5, 5, 5);
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0, 5);
      String string0 = RecurrenceSerializer.toCronText(recurrence0);
      assertEquals(1372739838952L, gregorianCalendar0.getTimeInMillis());
      assertEquals("18 37 4 ? 7/1 ? *", string0);
  }

  @Test
  public void test8()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance(locale0);
      Duration duration0 = new Duration(5, 5, 5, 5);
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0, 5);
      int[] intArray0 = new int[12];
      recurrence0.setByMonthDay(intArray0);
      String string0 = RecurrenceSerializer.toCronText(recurrence0);
      assertEquals("com.liferay.portal.kernel.cal.Recurrence[dtStart=java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=37,SECOND=29,MILLISECOND=422,ZONE_OFFSET=?,DST_OFFSET=?],duration=com.liferay.portal.kernel.cal.Duration[weeks=0,days=5,hours=5,minutes=5,seconds=5],frequency=5,interval=1,until=null,byDay=null,byMonthDay=[0,0,0,0,0,0,0,0,0,0,0,0],byYearDay=null,byWeekNo=null,byMonth=null]", recurrence0.toString());
      assertEquals("29 37 4 ? 7/1 ? *", string0);
  }

  @Test
  public void test9()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance(locale0);
      Duration duration0 = new Duration(5, 5, 5, 5);
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0, 5);
      int[] intArray0 = new int[1];
      recurrence0.setByMonthDay(intArray0);
      String string0 = RecurrenceSerializer.toCronText(recurrence0);
      assertEquals("java.util.GregorianCalendar[time=1372739864436,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=37,SECOND=44,MILLISECOND=436,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals("44 37 4 0 7/1 ? *", string0);
  }

  @Test
  public void test10()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar((-1922), (-1922), (-1922), (-1922), (-1922));
      Duration duration0 = new Duration(6, (-1922), (-1922));
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0, (-1922));
      String string0 = RecurrenceSerializer.toCronText(recurrence0);
      assertEquals("0 58 13 6 5 6 2089", string0);
      assertNotNull(string0);
  }

  @Test
  public void test11()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar((-1922), (-1922), (-1922), (-1922), (-1922));
      Duration duration0 = new Duration(6, (-1922), (-1922));
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0, 6);
      int[] intArray0 = new int[1];
      recurrence0.setByMonth(intArray0);
      String string0 = RecurrenceSerializer.toCronText(recurrence0);
      assertNotNull(string0);
      assertEquals("0 58 13 ? 1 ? 2089/1", string0);
  }
}
