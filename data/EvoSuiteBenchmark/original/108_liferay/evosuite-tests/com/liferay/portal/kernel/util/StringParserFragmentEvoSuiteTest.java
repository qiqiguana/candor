/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.util.StringParserFragment;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class StringParserFragmentEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      StringParserFragment stringParserFragment0 = new StringParserFragment("NM<:`>TmNS30tw");
      assertNotNull(stringParserFragment0);
      
      String string0 = stringParserFragment0.getPattern();
      assertEquals("M<", stringParserFragment0.getName());
      assertNotNull(string0);
      assertEquals("`>TmNS30t", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      StringParserFragment stringParserFragment0 = new StringParserFragment("h0%");
      assertNotNull(stringParserFragment0);
      
      boolean boolean0 = stringParserFragment0.matches("h0%");
      assertEquals(true, boolean0);
      assertEquals("0", stringParserFragment0.getName());
  }

  @Test
  public void test2()  throws Throwable  {
      StringParserFragment stringParserFragment0 = new StringParserFragment("Gsg0\"H2C+MwC~+");
      assertNotNull(stringParserFragment0);
      
      stringParserFragment0.isRaw();
      assertEquals("{sg0\"H2C+MwC~}", stringParserFragment0.getToken());
      assertEquals("sg0\"H2C+MwC~", stringParserFragment0.getName());
  }

  @Test
  public void test3()  throws Throwable  {
      StringParserFragment stringParserFragment0 = new StringParserFragment("NM<:`>TmNS30tw");
      assertNotNull(stringParserFragment0);
      
      String string0 = stringParserFragment0.getName();
      assertEquals("M<", string0);
      assertEquals("`>TmNS30t", stringParserFragment0.getPattern());
      assertNotNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      StringParserFragment stringParserFragment0 = new StringParserFragment("]i)<K''.#");
      assertNotNull(stringParserFragment0);
      
      String string0 = stringParserFragment0.getToken();
      assertNotNull(string0);
      assertEquals("{i)<K''.}", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      StringParserFragment stringParserFragment0 = null;
      try {
        stringParserFragment0 = new StringParserFragment("M<");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Fragment is null
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      StringParserFragment stringParserFragment0 = null;
      try {
        stringParserFragment0 = new StringParserFragment("1\b>k %40)k:<");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Pattern is null
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      StringParserFragment stringParserFragment0 = null;
      try {
        stringParserFragment0 = new StringParserFragment("5:MV'~+e&N/WI");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Name is null
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      StringParserFragment stringParserFragment0 = null;
      try {
        stringParserFragment0 = new StringParserFragment("N%=");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Name is null
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      StringParserFragment stringParserFragment0 = new StringParserFragment("g%!dM`sy6);?D@y&~");
      assertEquals("{!dM`sy6);?D@y&}", stringParserFragment0.getToken());
      assertNotNull(stringParserFragment0);
  }
}
