/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringUtil_IW;
import groovy.lang.GroovyClassLoader;
import java.io.IOException;
import java.util.Collection;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.geotools.factory.Hints;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class StringUtil_IWEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      float[] floatArray0 = stringUtil_IW0.split("Yn7~5", "Yn7~5", 0.6F);
      assertNotNull(floatArray0);
  }

  @Test
  public void test1()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      char[] charArray0 = new char[15];
      String string0 = stringUtil_IW0.merge(charArray0, "");
      assertEquals("", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      double[] doubleArray0 = new double[7];
      String string0 = stringUtil_IW0.merge(doubleArray0);
      assertEquals("0.0,0.0,0.0,0.0,0.0,0.0,0.0", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.extractChars("h");
      assertEquals("h", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      double[] doubleArray0 = stringUtil_IW0.split("", "", 0.5);
      assertNotNull(doubleArray0);
  }

  @Test
  public void test5()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      char[] charArray0 = new char[3];
      String string0 = stringUtil_IW0.extract("", charArray0);
      assertEquals("", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.trim("", '3');
      assertEquals("", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      int[] intArray0 = new int[4];
      String string0 = stringUtil_IW0.merge(intArray0, "");
      assertEquals("0000", string0);
  }

  @Test
  public void test8()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.safePath("pH{MELOT@r[R0");
      assertEquals("pH{MELOT@r[R0", string0);
  }

  @Test
  public void test9()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.remove("p;whn^F&L", "p;whn^F&L");
      assertEquals("", string0);
  }

  @Test
  public void test10()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      assertNotNull(stringUtil_IW0);
      
      int int0 = stringUtil_IW0.startsWithWeight("!!ZtitzC}1=F-u'in", "null");
      assertEquals(0, int0);
  }

  @Test
  public void test11()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String[] stringArray0 = new String[5];
      String string0 = stringUtil_IW0.replace("iL|$D~Q~7{@\"B", stringArray0, stringArray0, true);
      assertEquals("iL|$D~Q~7{@\"B", string0);
  }

  @Test
  public void test12()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      double[] doubleArray0 = stringUtil_IW0.split("", 507.28503798529954);
      assertNotNull(doubleArray0);
  }

  @Test
  public void test13()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.extractFirst((String) null, '3');
      assertNull(string0);
  }

  @Test
  public void test14()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      String string0 = stringUtil_IW0.replace("groovy.xml.StreamingDOMBuilder$_closure3_closure8", "", "", (Map<String, String>) hashtable0);
      assertNotNull(string0);
      assertEquals("groovy.xml.StreamingDOMBuilder$_closure3_closure8", string0);
  }

  @Test
  public void test15()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.unquote("670,670,670,670,670,0");
      assertEquals("670,670,670,670,670,0", string0);
  }

  @Test
  public void test16()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.quote("");
      assertEquals("''", string0);
  }

  @Test
  public void test17()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.replaceFirst("En?-%-nH$D1.3", "En?-%-nH$D1.3", "En?-%-nH$D1.3");
      assertEquals("En?-%-nH$D1.3", string0);
  }

  @Test
  public void test18()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      // Undeclared exception!
      try {
        stringUtil_IW0.shorten("", (-433));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
        /*
         * String index out of range: -433
         */
      }
  }

  @Test
  public void test19()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String[] stringArray0 = stringUtil_IW0.split("Q-7EDGs", ',');
      assertNotNull(stringArray0);
  }

  @Test
  public void test20()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.quote("}W~uo&=3Wo;y", "}W~uo&=3Wo;y");
      assertEquals("}W~uo&=3Wo;y}W~uo&=3Wo;y}W~uo&=3Wo;y", string0);
  }

  @Test
  public void test21()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      char[] charArray0 = new char[3];
      String string0 = stringUtil_IW0.trim("", charArray0);
      assertEquals("", string0);
  }

  @Test
  public void test22()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      float[] floatArray0 = new float[8];
      String string0 = stringUtil_IW0.merge(floatArray0);
      assertEquals("0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0", string0);
  }

  @Test
  public void test23()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      StringBundler stringBundler0 = stringUtil_IW0.replaceWithStringBundler("Q-7EDGs,", "", "Q-7EDGs,", (Map<String, StringBundler>) null);
      assertEquals("Q-7EDGs,", stringBundler0.toString());
      assertNotNull(stringBundler0);
  }

  @Test
  public void test24()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.replaceLast("%", "%", "%");
      assertEquals("%", string0);
  }

  @Test
  public void test25()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.extractDigits(",q{M(X#,d J_%=)8>;");
      assertEquals("8", string0);
  }

  @Test
  public void test26()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.reverse((String) null);
      assertNull(string0);
  }

  @Test
  public void test27()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      assertNotNull(stringUtil_IW0);
      
      boolean boolean0 = stringUtil_IW0.startsWith(";0}wqMZw", ";0}wqMZw");
      assertEquals(true, boolean0);
  }

  @Test
  public void test28()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      assertNotNull(stringUtil_IW0);
      
      boolean boolean0 = stringUtil_IW0.endsWith("", "");
      assertEquals(true, boolean0);
  }

  @Test
  public void test29()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Yn7~5";
      stringArray0[1] = "Yn7~5";
      stringArray0[2] = "Yn7~5";
      stringArray0[3] = "layout-flow";
      Hints.OptionKey hints_OptionKey0 = new Hints.OptionKey(stringArray0);
      Set<String> set0 = hints_OptionKey0.getOptions();
      String string0 = stringUtil_IW0.merge((Collection<?>) set0);
      assertEquals("Yn7~5,layout-flow", string0);
  }

  @Test
  public void test30()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      short[] shortArray0 = new short[1];
      String string0 = stringUtil_IW0.merge(shortArray0, "0");
      assertEquals("0", string0);
  }

  @Test
  public void test31()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      long[] longArray0 = new long[6];
      String string0 = stringUtil_IW0.merge(longArray0);
      assertEquals("0,0,0,0,0,0", string0);
  }

  @Test
  public void test32()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      byte[] byteArray0 = new byte[8];
      String string0 = stringUtil_IW0.bytesToHexString(byteArray0);
      assertEquals("0000000000000000", string0);
  }

  @Test
  public void test33()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      boolean[] booleanArray0 = new boolean[4];
      String string0 = stringUtil_IW0.merge(booleanArray0);
      assertEquals("false,false,false,false", string0);
  }

  @Test
  public void test34()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.replaceFirst("%j']6", '9', '9');
      assertEquals("%j']6", string0);
  }

  @Test
  public void test35()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.toHexString(0);
      assertNotNull(string0);
      assertEquals("0", string0);
  }

  @Test
  public void test36()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.toHexString((Object) null);
      assertEquals("null", string0);
  }

  @Test
  public void test37()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      long[] longArray0 = new long[1];
      String string0 = stringUtil_IW0.merge(longArray0, "U");
      assertEquals("0", string0);
  }

  @Test
  public void test38()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.remove("", "", (String) null);
      assertNull(string0);
  }

  @Test
  public void test39()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      char[] charArray0 = new char[6];
      String string0 = stringUtil_IW0.trimLeading("Yn7~5", charArray0);
      assertEquals("Yn7~5", string0);
  }

  @Test
  public void test40()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      Object[] objectArray0 = new Object[1];
      String string0 = stringUtil_IW0.merge(objectArray0);
      assertEquals("null", string0);
  }

  @Test
  public void test41()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      GroovyClassLoader groovyClassLoader0 = new GroovyClassLoader();
      try {
        stringUtil_IW0.read((ClassLoader) groovyClassLoader0, "a)TA1c");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Unable to open resource in class loader a)TA1c
         */
      }
  }

  @Test
  public void test42()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.replaceLast("", '}', '}');
      assertEquals("", string0);
  }

  @Test
  public void test43()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      char[] charArray0 = new char[15];
      String string0 = stringUtil_IW0.trimTrailing("(~5{?", charArray0);
      assertEquals("(~5{?", string0);
  }

  @Test
  public void test44()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.insert("%j']6", "", 343);
      assertEquals("%j']6", string0);
      assertNotNull(string0);
  }

  @Test
  public void test45()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String[] stringArray0 = stringUtil_IW0.splitLines("U");
      assertNotNull(stringArray0);
  }

  @Test
  public void test46()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      // Undeclared exception!
      try {
        stringUtil_IW0.upperCaseFirstLetter((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test47()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.trimLeading("*H\"G0ruL", '#');
      assertEquals("*H\"G0ruL", string0);
  }

  @Test
  public void test48()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.add("(Ljava/lang/Object;)", "(Ljava/lang/Object;)", "(Ljava/lang/Object;)", false);
      assertEquals("(Ljava/lang/Object;)(Ljava/lang/Object;)(Ljava/lang/Object;)", string0);
  }

  @Test
  public void test49()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.stripBetween("tabbedPane", "tabbedPane", "tabbedPane");
      assertEquals("tabbedPane", string0);
  }

  @Test
  public void test50()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      int[] intArray0 = stringUtil_IW0.split("X'q8v^R!H/GVVumc", (-1026));
      assertNotNull(intArray0);
  }

  @Test
  public void test51()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.upperCase("U");
      assertEquals("U", string0);
  }

  @Test
  public void test52()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      long[] longArray0 = stringUtil_IW0.split("0", (-1653L));
      assertNotNull(longArray0);
  }

  @Test
  public void test53()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.shorten("tabbedPane", "tabbedPane");
      assertEquals("tabbedPane", string0);
  }

  @Test
  public void test54()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      long long0 = 1284652111760L;
      String string0 = stringUtil_IW0.toHexString(long0);
      assertNotNull(string0);
      assertEquals("12b1b3b9790", string0);
  }

  @Test
  public void test55()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String[] stringArray0 = new String[8];
      String string0 = stringUtil_IW0.replace("*H\"G0ruL", stringArray0, stringArray0);
      assertEquals("*H\"G0ruL", string0);
  }

  @Test
  public void test56()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      float[] floatArray0 = new float[9];
      String string0 = stringUtil_IW0.merge(floatArray0, "Q-7EDGs");
      assertEquals("0.0Q-7EDGs0.0Q-7EDGs0.0Q-7EDGs0.0Q-7EDGs0.0Q-7EDGs0.0Q-7EDGs0.0Q-7EDGs0.0Q-7EDGs0.0", string0);
  }

  @Test
  public void test57()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try {
        stringUtil_IW0.highlight("9", stringArray0, "9", "9");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test58()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.trimLeading("%");
      assertEquals("%", string0);
  }

  @Test
  public void test59()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.replaceLast("true&uR!B;4p8etrue&uR!B;4p8etrue&uR!B;4p8etrue&uR!B;4p8efalse&uR!B;4p8etrue&uR!B;4p8etrue&uR!B;4p8etrue&uR!B;4p8etrue&uR!B;4p8etrue", 'n', "true&uR!B;4p8etrue&uR!B;4p8etrue&uR!B;4p8etrue&uR!B;4p8efalse&uR!B;4p8etrue&uR!B;4p8etrue&uR!B;4p8etrue&uR!B;4p8etrue&uR!B;4p8etrue");
      assertEquals("true&uR!B;4p8etrue&uR!B;4p8etrue&uR!B;4p8etrue&uR!B;4p8efalse&uR!B;4p8etrue&uR!B;4p8etrue&uR!B;4p8etrue&uR!B;4p8etrue&uR!B;4p8etrue", string0);
  }

  @Test
  public void test60()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      boolean[] booleanArray0 = stringUtil_IW0.split("", false);
      assertNotNull(booleanArray0);
  }

  @Test
  public void test61()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      boolean[] booleanArray0 = new boolean[10];
      String string0 = stringUtil_IW0.merge(booleanArray0, "&uR!B;4p8e");
      assertEquals("false&uR!B;4p8efalse&uR!B;4p8efalse&uR!B;4p8efalse&uR!B;4p8efalse&uR!B;4p8efalse&uR!B;4p8efalse&uR!B;4p8efalse&uR!B;4p8efalse&uR!B;4p8efalse", string0);
  }

  @Test
  public void test62()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.extractLast("", "");
      assertEquals("", string0);
  }

  @Test
  public void test63()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try {
        stringUtil_IW0.lowerCase(stringArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test64()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.trim("");
      assertEquals("", string0);
  }

  @Test
  public void test65()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String[] stringArray0 = stringUtil_IW0.split("");
      assertNotNull(stringArray0);
  }

  @Test
  public void test66()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      float[] floatArray0 = stringUtil_IW0.split("p;whn^F&L", 0.0F);
      assertNotNull(floatArray0);
  }

  @Test
  public void test67()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String[] stringArray0 = stringUtil_IW0.split("U", "U");
      assertNotNull(stringArray0);
  }

  @Test
  public void test68()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.extractLast("", '}');
      assertNull(string0);
  }

  @Test
  public void test69()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.trimTrailing("ac");
      assertEquals("ac", string0);
  }

  @Test
  public void test70()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      Object[] objectArray0 = new Object[7];
      String string0 = stringUtil_IW0.merge(objectArray0, "");
      assertEquals("nullnullnullnullnullnullnull", string0);
  }

  @Test
  public void test71()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      assertNotNull(stringUtil_IW0);
      
      boolean boolean0 = stringUtil_IW0.contains("", "U", "0");
      assertEquals(false, boolean0);
  }

  @Test
  public void test72()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String[] stringArray0 = new String[10];
      String string0 = stringUtil_IW0.replaceLast("", stringArray0, stringArray0);
      assertNull(string0);
  }

  @Test
  public void test73()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      short[] shortArray0 = new short[7];
      String string0 = stringUtil_IW0.merge(shortArray0);
      assertEquals("0,0,0,0,0,0,0", string0);
  }

  @Test
  public void test74()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.replace((String) null, (String) null, (String) null, 1651);
      assertNull(string0);
  }

  @Test
  public void test75()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.quote("U", '+');
      assertEquals("+U+", string0);
      assertNotNull(string0);
  }

  @Test
  public void test76()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.shorten("QB");
      assertEquals("QB", string0);
  }

  @Test
  public void test77()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      List<Object> list0 = defaultKeyedValues2DDataset0.getColumnKeys();
      String string0 = stringUtil_IW0.merge((Collection<?>) list0, "0");
      assertEquals("", string0);
  }

  @Test
  public void test78()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.extractFirst("", "1345,-1073,0,1801,-1555,-1,1992");
      assertNull(string0);
  }

  @Test
  public void test79()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.replaceFirst("", 'Y', "");
      assertEquals("", string0);
  }

  @Test
  public void test80()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      assertNotNull(stringUtil_IW0);
      
      int int0 = stringUtil_IW0.count("Q-7EDGs", "Q-7EDGs");
      assertEquals(1, int0);
  }

  @Test
  public void test81()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.replace("}W~uo&=3Wo;y", '+', "}W~uo&=3Wo;y");
      assertEquals("}W~uo&=3Wo;y", string0);
  }

  @Test
  public void test82()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.add("144120120120", "");
      assertEquals("144120120120,,", string0);
      assertNotNull(string0);
  }

  @Test
  public void test83()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      boolean boolean0 = stringUtil_IW0.startsWith("UN]M", 'G');
      assertEquals(false, boolean0);
  }

  @Test
  public void test84()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      String string0 = stringUtil_IW0.read(classLoader0, "Amj`,r0 Q(,+", true);
      assertEquals("", string0);
  }

  @Test
  public void test85()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String[] stringArray0 = new String[5];
      String string0 = stringUtil_IW0.highlight("", stringArray0);
      assertEquals("", string0);
  }

  @Test
  public void test86()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.strip("", '9');
      assertEquals("", string0);
  }

  @Test
  public void test87()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = "";
      int int0 = 966;
      String string1 = stringUtil_IW0.shorten(string0, int0, string0);
      assertSame(string1, string0);
  }

  @Test
  public void test88()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.valueOf((Object) "670,670,670,670,670,0");
      assertEquals("670,670,670,670,670,0", string0);
  }

  @Test
  public void test89()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      short[] shortArray0 = stringUtil_IW0.split("", (short)600);
      assertNotNull(shortArray0);
  }

  @Test
  public void test90()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.wrap("(~5{?", 572, "(~5{?");
      assertNotNull(string0);
      assertEquals("(~5{?(~5{?", string0);
  }

  @Test
  public void test91()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.wrap("");
      assertEquals("", string0);
  }

  @Test
  public void test92()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.toCharCode("U");
      assertEquals("85", string0);
  }

  @Test
  public void test93()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      boolean[] booleanArray0 = stringUtil_IW0.split((String) null, "-moz-box-flex", true);
      assertNotNull(booleanArray0);
  }

  @Test
  public void test94()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      double[] doubleArray0 = new double[5];
      String string0 = stringUtil_IW0.merge(doubleArray0, "null");
      assertEquals("0.0null0.0null0.0null0.0null0.0", string0);
  }

  @Test
  public void test95()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      boolean boolean0 = stringUtil_IW0.endsWith((String) null, '|');
      assertEquals(false, boolean0);
  }

  @Test
  public void test96()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.add(",q{M(X#,d J_%=)8>;", "", ",q{M(X#,d J_%=)8>;");
      assertEquals(",q{M(X#,d J_%=)8>;", string0);
      assertNotNull(string0);
  }

  @Test
  public void test97()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      int[] intArray0 = new int[10];
      String string0 = stringUtil_IW0.merge(intArray0);
      assertEquals("0,0,0,0,0,0,0,0,0,0", string0);
  }

  @Test
  public void test98()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      assertNotNull(stringUtil_IW0);
      
      boolean boolean0 = stringUtil_IW0.matches("&uR!B;4p8e", "&uR!B;4p8e");
      assertEquals(true, boolean0);
  }

  @Test
  public void test99()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      assertNotNull(stringUtil_IW0);
      
      boolean boolean0 = stringUtil_IW0.matchesIgnoreCase("", "");
      assertEquals(true, boolean0);
  }

  @Test
  public void test100()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      long[] longArray0 = stringUtil_IW0.split("pH{MELOT@r[R0", "pH{MELOT@r[R0", 1440L);
      assertNotNull(longArray0);
  }

  @Test
  public void test101()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      int[] intArray0 = stringUtil_IW0.split("", "%j']6", 960);
      assertNotNull(intArray0);
  }

  @Test
  public void test102()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.trimTrailing("!!ZtitzC}1=F-u'in", 'u');
      assertEquals("!!ZtitzC}1=F-u'in", string0);
  }

  @Test
  public void test103()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      char[] charArray0 = new char[6];
      String string0 = stringUtil_IW0.merge(charArray0);
      assertEquals(",,,,,", string0);
  }

  @Test
  public void test104()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.replace("", 'C', 'C');
      assertEquals("", string0);
  }

  @Test
  public void test105()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.lowerCase("");
      assertEquals("", string0);
  }

  @Test
  public void test106()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.randomize("");
      assertEquals("", string0);
  }

  @Test
  public void test107()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.appendParentheticalSuffix("U", 1560);
      assertNotNull(string0);
      assertEquals("U (1560)", string0);
  }

  @Test
  public void test108()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.replace("}W~uo&=3Wo;y", "}W~uo&=3Wo;y", "}W~uo&=3Wo;y");
      assertEquals("}W~uo&=3Wo;y", string0);
  }

  @Test
  public void test109()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String[] stringArray0 = new String[4];
      String string0 = stringUtil_IW0.replaceFirst("0", stringArray0, stringArray0);
      assertNull(string0);
  }

  @Test
  public void test110()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.extractLeadingDigits("En?-%-nH$D1.3");
      assertEquals("", string0);
  }

  @Test
  public void test111()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      short[] shortArray0 = stringUtil_IW0.split("!!ZtitzC}1=F-u'in", "", (short)0);
      assertNotNull(shortArray0);
  }

  @Test
  public void test112()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      assertNotNull(stringUtil_IW0);
      
      boolean boolean0 = stringUtil_IW0.contains("", "");
      assertEquals(true, boolean0);
  }

  @Test
  public void test113()  throws Throwable  {
      StringUtil_IW stringUtil_IW0 = StringUtil_IW.getInstance();
      String string0 = stringUtil_IW0.appendParentheticalSuffix("", "");
      assertEquals(" ()", string0);
  }
}
