/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.cache.ehcache;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.cache.ehcache.EhcacheConfigurationUtil;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import jcifs.smb.Handler;
import net.sf.ehcache.CacheException;
import net.sf.ehcache.config.Configuration;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class EhcacheConfigurationUtilEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      Configuration configuration0 = EhcacheConfigurationUtil.getConfiguration((URL) null);
      assertNull(configuration0);
  }

  @Test
  public void test1()  throws Throwable  {
      EhcacheConfigurationUtil ehcacheConfigurationUtil0 = new EhcacheConfigurationUtil();
      assertNotNull(ehcacheConfigurationUtil0);
  }

  @Test
  public void test2()  throws Throwable  {
      Configuration configuration0 = EhcacheConfigurationUtil.getConfiguration("");
      assertNull(configuration0);
  }

  @Test
  public void test3()  throws Throwable  {
      Configuration configuration0 = EhcacheConfigurationUtil.getConfiguration("%m{*ipY RsDo53B", true);
      assertNull(configuration0);
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          Handler handler0 = new Handler();
          URL uRL0 = new URL("", "", 306, "", (URLStreamHandler) handler0);
          // Undeclared exception!
          try {
            EhcacheConfigurationUtil.getConfiguration(uRL0, false);
            fail("Expecting exception: CacheException");
          } catch(CacheException e) {
            /*
             * Error configuring from ://:306. Initial cause was Security manager blocks (java.net.SocketPermission localhost:1024- listen,resolve)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkListen(SecurityManager.java:1118)
             * java.net.DatagramSocket.bind(DatagramSocket.java:369)
             * java.net.DatagramSocket.<init>(DatagramSocket.java:211)
             * java.net.DatagramSocket.<init>(DatagramSocket.java:262)
             * jcifs.netbios.NameServiceClient.ensureOpen(NameServiceClient.java:146)
             * jcifs.netbios.NameServiceClient.send(NameServiceClient.java:230)
             * jcifs.netbios.NameServiceClient.getByName(NameServiceClient.java:371)
             * jcifs.netbios.NbtAddress.doNameQuery(NbtAddress.java:307)
             * jcifs.netbios.NbtAddress.getByName(NbtAddress.java:422)
             * jcifs.netbios.NbtAddress.getByName(NbtAddress.java:403)
             * jcifs.smb.SmbFile.getFirstAddress(SmbFile.java:845)
             * jcifs.smb.SmbFile.connect(SmbFile.java:946)
             * jcifs.smb.SmbFile.connect0(SmbFile.java:875)
             * jcifs.smb.SmbFile.open0(SmbFile.java:965)
             * jcifs.smb.SmbFile.open(SmbFile.java:999)
             * jcifs.smb.SmbFileInputStream.<init>(SmbFileInputStream.java:73)
             * jcifs.smb.SmbFileInputStream.<init>(SmbFileInputStream.java:65)
             * jcifs.smb.SmbFile.getInputStream(SmbFile.java:2833)
             * java.net.URL.openStream(URL.java:1010)
             * net.sf.ehcache.config.ConfigurationFactory.parseConfiguration(ConfigurationFactory.java:100)
             * com.liferay.portal.cache.ehcache.EhcacheConfigurationUtil.getConfiguration(EhcacheConfigurationUtil.java:77)
             * com.liferay.portal.cache.ehcache.EhcacheConfigurationUtil.getConfiguration(EhcacheConfigurationUtil.java:67)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
