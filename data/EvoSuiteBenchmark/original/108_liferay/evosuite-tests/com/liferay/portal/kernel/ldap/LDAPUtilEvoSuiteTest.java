/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.ldap;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.ldap.LDAPUtil;
import java.util.Properties;
import javax.naming.NamingException;
import javax.naming.directory.Attribute;
import javax.naming.directory.Attributes;
import javax.naming.directory.BasicAttribute;
import javax.naming.directory.BasicAttributes;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class LDAPUtilEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BasicAttributes basicAttributes0 = new BasicAttributes("Ws*Fu)uL<:^", (Object) null);
      Properties properties0 = new Properties();
      String string0 = LDAPUtil.getAttributeString((Attributes) basicAttributes0, properties0, "Ws*Fu)uL<:^");
      assertEquals("", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      LDAPUtil lDAPUtil0 = new LDAPUtil();
      assertNotNull(lDAPUtil0);
  }

  @Test
  public void test2()  throws Throwable  {
      String string0 = LDAPUtil.getFullProviderURL("ZX!", "ZX!");
      assertNotNull(string0);
      assertEquals("ZX!/ZX!", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      BasicAttributes basicAttributes0 = new BasicAttributes("groovy.jmx.builder.JmxMetaMapBuilder$_buildAttributeMapFrom_closure3", (Object) "javax.swing.tree.DefaultTreeCellRenderer[Tree.cellRenderer,0,0,0x0,invalid,alignmentX=0.0,alignmentY=0.0,border=,flags=8388608,maximumSize=,minimumSize=,preferredSize=,defaultIcon=,disabledIcon=,horizontalAlignment=LEADING,horizontalTextPosition=TRAILING,iconTextGap=4,labelFor=,text=,verticalAlignment=CENTER,verticalTextPosition=CENTER]", false);
      Properties properties0 = new Properties();
      String string0 = LDAPUtil.getAttributeString((Attributes) basicAttributes0, properties0, "groovy.jmx.builder.JmxMetaMapBuilder$_buildAttributeMapFrom_closure3", "groovy.jmx.builder.JmxMetaMapBuilder$_buildAttributeMapFrom_closure3");
      assertNotNull(string0);
      assertEquals("groovy.jmx.builder.JmxMetaMapBuilder$_buildAttributeMapFrom_closure3", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      BasicAttributes basicAttributes0 = new BasicAttributes();
      Properties properties0 = new Properties();
      Object object0 = LDAPUtil.getAttributeObject((Attributes) basicAttributes0, properties0, "M>c)9M.,h|b(Hs}bZ");
      assertNull(object0);
  }

  @Test
  public void test5()  throws Throwable  {
      BasicAttributes basicAttributes0 = new BasicAttributes(false);
      Properties properties0 = new Properties();
      String[] stringArray0 = LDAPUtil.getAttributeStringArray((Attributes) basicAttributes0, properties0, "groovy.inspect.swingui.TreeNodeBuildingNodeOperation$_collectConstructorData_closure5");
      assertNull(stringArray0);
  }

  @Test
  public void test6()  throws Throwable  {
      BasicAttributes basicAttributes0 = new BasicAttributes(false);
      Properties properties0 = new Properties();
      Object object0 = new Object();
      Object object1 = LDAPUtil.getAttributeObject((Attributes) basicAttributes0, properties0, "groovy.inspect.swingui.TreeNodeBuildingNodeOperation$_collectConstructorData_closure5", object0);
      assertSame(object1, object0);
  }

  @Test
  public void test7()  throws Throwable  {
      BasicAttributes basicAttributes0 = new BasicAttributes("Ws*Fu)uL<:^", (Object) null);
      Object object0 = LDAPUtil.getAttributeObject((Attributes) basicAttributes0, "Ws*Fu)uL<:^", (Object) null);
      assertNull(object0);
  }

  @Test
  public void test8()  throws Throwable  {
      BasicAttributes basicAttributes0 = new BasicAttributes();
      Object object0 = LDAPUtil.getAttributeObject((Attributes) basicAttributes0, "ZX!");
      assertNull(object0);
  }

  @Test
  public void test9()  throws Throwable  {
      BasicAttributes basicAttributes0 = new BasicAttributes(">'", (Object) "AcceleratorKey", true);
      String string0 = (String)LDAPUtil.getAttributeObject((Attributes) basicAttributes0, ">'");
      assertEquals("AcceleratorKey", string0);
  }

  @Test
  public void test10()  throws Throwable  {
      BasicAttributes basicAttributes0 = new BasicAttributes("Ws*Fu)uL<:^", (Object) null);
      String string0 = LDAPUtil.getAttributeString((Attributes) basicAttributes0, "Ws*Fu)uL<:^");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test11()  throws Throwable  {
      BasicAttributes basicAttributes0 = new BasicAttributes(false);
      String string0 = LDAPUtil.getAttributeString((Attributes) basicAttributes0, "groovy.inspect.swingui.TreeNodeBuildingNodeOperation$_collectConstructorData_closure5", "groovy.inspect.swingui.TreeNodeBuildingNodeOperation$_collectConstructorData_closure5");
      assertEquals("groovy.inspect.swingui.TreeNodeBuildingNodeOperation$_collectConstructorData_closure5", string0);
  }

  @Test
  public void test12()  throws Throwable  {
      BasicAttributes basicAttributes0 = new BasicAttributes("vZvB", "default");
      String string0 = LDAPUtil.getAttributeString((Attributes) basicAttributes0, "vZvB");
      assertNotNull(string0);
      assertEquals("default", string0);
  }

  @Test
  public void test13()  throws Throwable  {
      BasicAttributes basicAttributes0 = new BasicAttributes("nC2 X", (Object) null, false);
      String[] stringArray0 = LDAPUtil.getAttributeStringArray((Attributes) basicAttributes0, "nC2 X");
      assertNotNull(stringArray0);
  }

  @Test
  public void test14()  throws Throwable  {
      BasicAttributes basicAttributes0 = new BasicAttributes("ZX!", "Constant");
      String[] stringArray0 = LDAPUtil.getAttributeStringArray((Attributes) basicAttributes0, "Constant");
      assertNull(stringArray0);
  }

  @Test
  public void test15()  throws Throwable  {
      BasicAttributes basicAttributes0 = new BasicAttributes("POFr=+", (Object) "-1097.9034", true);
      BasicAttribute basicAttribute0 = new BasicAttribute("+OZ");
      basicAttributes0.put((Attribute) basicAttribute0);
      String[] stringArray0 = LDAPUtil.getAttributeStringArray((Attributes) basicAttributes0, "+OZ");
      assertNull(stringArray0);
  }

  @Test
  public void test16()  throws Throwable  {
      BasicAttributes basicAttributes0 = new BasicAttributes("ZX!", "Constant");
      String[] stringArray0 = LDAPUtil.getAttributeStringArray((Attributes) basicAttributes0, "ZX!");
      assertNotNull(stringArray0);
  }

  @Test
  public void test17()  throws Throwable  {
      try {
        LDAPUtil.parseDate("Ws*Fu)uL<:^");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test18()  throws Throwable  {
      try {
        LDAPUtil.parseDate("M>c)9M.,h|b(Hs}bZ");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test19()  throws Throwable  {
      try {
        LDAPUtil.parseDate("12hYu5L=ZngUZ");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test20()  throws Throwable  {
      try {
        LDAPUtil.parseDate(".//*[local-name()='");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test21()  throws Throwable  {
      try {
        LDAPUtil.parseDate("+O");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test22()  throws Throwable  {
      try {
        LDAPUtil.parseDate("TSZUIC.`4aY");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
