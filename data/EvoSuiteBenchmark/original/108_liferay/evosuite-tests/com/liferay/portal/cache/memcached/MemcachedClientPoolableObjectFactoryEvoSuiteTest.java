/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.cache.memcached;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.cache.memcached.MemcachedClientPoolableObjectFactory;
import java.util.LinkedList;
import java.util.List;
import net.spy.memcached.BinaryConnectionFactory;
import net.spy.memcached.ConnectionFactory;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MemcachedClientPoolableObjectFactoryEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      MemcachedClientPoolableObjectFactory memcachedClientPoolableObjectFactory0 = new MemcachedClientPoolableObjectFactory();
      boolean boolean0 = memcachedClientPoolableObjectFactory0.validateObject((Object) memcachedClientPoolableObjectFactory0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      MemcachedClientPoolableObjectFactory memcachedClientPoolableObjectFactory0 = new MemcachedClientPoolableObjectFactory();
      Object object0 = new Object();
      memcachedClientPoolableObjectFactory0.passivateObject(object0);
  }

  @Test
  public void test2()  throws Throwable  {
      MemcachedClientPoolableObjectFactory memcachedClientPoolableObjectFactory0 = new MemcachedClientPoolableObjectFactory();
      Object object0 = new Object();
      // Undeclared exception!
      try {
        memcachedClientPoolableObjectFactory0.destroyObject(object0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * java.lang.Object cannot be cast to net.spy.memcached.MemcachedClientIF
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      MemcachedClientPoolableObjectFactory memcachedClientPoolableObjectFactory0 = new MemcachedClientPoolableObjectFactory();
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      memcachedClientPoolableObjectFactory0.setConnectionFactory((ConnectionFactory) binaryConnectionFactory0);
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
  }

  @Test
  public void test4()  throws Throwable  {
      MemcachedClientPoolableObjectFactory memcachedClientPoolableObjectFactory0 = new MemcachedClientPoolableObjectFactory();
      try {
        memcachedClientPoolableObjectFactory0.makeObject();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * Connection factory required
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      MemcachedClientPoolableObjectFactory memcachedClientPoolableObjectFactory0 = new MemcachedClientPoolableObjectFactory();
      Object object0 = new Object();
      memcachedClientPoolableObjectFactory0.activateObject(object0);
  }

  @Test
  public void test6()  throws Throwable  {
      MemcachedClientPoolableObjectFactory memcachedClientPoolableObjectFactory0 = new MemcachedClientPoolableObjectFactory();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offer("[kg3FW5");
      memcachedClientPoolableObjectFactory0.setAddresses((List<String>) linkedList0);
      assertEquals(false, linkedList0.isEmpty());
  }
}
