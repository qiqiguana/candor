/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.poller;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.bean.BeanLocatorException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSONObject;
import com.liferay.portal.kernel.messaging.Message;
import com.liferay.portal.kernel.poller.PollerHeader;
import com.liferay.portal.kernel.poller.PollerRequest;
import com.liferay.portal.poller.PollerRequestHandlerImpl;
import com.liferay.portal.poller.PollerSession;
import java.lang.reflect.Array;
import java.nio.charset.Charset;
import java.util.List;
import java.util.Map;
import java.util.SortedMap;
import java.util.Vector;
import javax.servlet.http.HttpServletRequest;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PollerRequestHandlerImplEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      PollerRequestHandlerImpl pollerRequestHandlerImpl0 = new PollerRequestHandlerImpl();
      PollerRequest pollerRequest0 = pollerRequestHandlerImpl0.createPollerRequest((HttpServletRequest) null, true, (PollerHeader) null, "");
      assertNull(pollerRequest0);
  }

  @Test
  public void test1()  throws Throwable  {
      PollerRequestHandlerImpl pollerRequestHandlerImpl0 = new PollerRequestHandlerImpl();
      // Undeclared exception!
      try {
        pollerRequestHandlerImpl0.parsePollerRequestParameters("");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      PollerRequestHandlerImpl pollerRequestHandlerImpl0 = new PollerRequestHandlerImpl();
      Map<String, Object>[] mapArray0 = (Map<String, Object>[]) Array.newInstance(Map.class, 1);
      SortedMap<String, Charset> sortedMap0 = Charset.availableCharsets();
      mapArray0[0] = (Map<String, Object>) sortedMap0;
      PollerHeader pollerHeader0 = pollerRequestHandlerImpl0.parsePollerRequestHeader(mapArray0);
      assertNull(pollerHeader0);
  }

  @Test
  public void test3()  throws Throwable  {
      PollerRequestHandlerImpl pollerRequestHandlerImpl0 = new PollerRequestHandlerImpl();
      // Undeclared exception!
      try {
        pollerRequestHandlerImpl0.getPollerSessionId((PollerHeader) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      PollerRequestHandlerImpl pollerRequestHandlerImpl0 = new PollerRequestHandlerImpl();
      // Undeclared exception!
      try {
        pollerRequestHandlerImpl0.getPollerHeader("aDn8;*-nk9-Jxqoyj");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      PollerRequestHandlerImpl pollerRequestHandlerImpl0 = new PollerRequestHandlerImpl();
      PollerHeader pollerHeader0 = pollerRequestHandlerImpl0.getPollerHeader("");
      assertNull(pollerHeader0);
  }

  @Test
  public void test6()  throws Throwable  {
      PollerRequestHandlerImpl pollerRequestHandlerImpl0 = new PollerRequestHandlerImpl();
      try {
        pollerRequestHandlerImpl0.processRequest((HttpServletRequest) null, "Null 'x' argument.");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      PollerRequestHandlerImpl pollerRequestHandlerImpl0 = new PollerRequestHandlerImpl();
      JSONObject jSONObject0 = pollerRequestHandlerImpl0.processRequest((HttpServletRequest) null, "");
      assertNull(jSONObject0);
  }

  @Test
  public void test8()  throws Throwable  {
      PollerRequestHandlerImpl pollerRequestHandlerImpl0 = new PollerRequestHandlerImpl();
      Message message0 = new Message();
      pollerRequestHandlerImpl0.receive(message0);
      assertNull(message0.getResponseDestinationName());
  }

  @Test
  public void test9()  throws Throwable  {
      PollerRequestHandlerImpl pollerRequestHandlerImpl0 = new PollerRequestHandlerImpl();
      PollerHeader pollerHeader0 = new PollerHeader((-1534L), (-1534L), (-1534L), (Map<String, Boolean>) null, true);
      // Undeclared exception!
      try {
        pollerRequestHandlerImpl0.createPollerResponseHeader(pollerHeader0);
        fail("Expecting exception: BeanLocatorException");
      } catch(BeanLocatorException e) {
        /*
         * BeanLocator has not been set
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      PollerRequestHandlerImpl pollerRequestHandlerImpl0 = new PollerRequestHandlerImpl();
      JSONObject jSONObject0 = pollerRequestHandlerImpl0.createPollerResponseHeader((PollerHeader) null);
      assertNull(jSONObject0);
  }

  @Test
  public void test11()  throws Throwable  {
      PollerRequestHandlerImpl pollerRequestHandlerImpl0 = new PollerRequestHandlerImpl();
      PollerHeader pollerHeader0 = new PollerHeader((-1881L), (-1881L), (-1881L), (Map<String, Boolean>) null, false);
      // Undeclared exception!
      try {
        pollerRequestHandlerImpl0.createPollerResponseHeader(pollerHeader0);
        fail("Expecting exception: BeanLocatorException");
      } catch(BeanLocatorException e) {
        /*
         * BeanLocator has not been set
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      PollerRequestHandlerImpl pollerRequestHandlerImpl0 = new PollerRequestHandlerImpl();
      PollerSession pollerSession0 = new PollerSession("B!mneFUc?kJy)Y");
      Vector<PollerRequest> vector0 = new Vector<PollerRequest>(0, 0);
      pollerRequestHandlerImpl0.executePollerRequests(pollerSession0, (List<PollerRequest>) vector0);
      assertEquals("[]", vector0.toString());
  }

  @Test
  public void test13()  throws Throwable  {
      PollerRequestHandlerImpl pollerRequestHandlerImpl0 = new PollerRequestHandlerImpl();
      PollerSession pollerSession0 = new PollerSession("");
      Vector<PollerRequest> vector0 = new Vector<PollerRequest>(4, 4);
      PollerRequest pollerRequest0 = new PollerRequest((HttpServletRequest) null, (PollerHeader) null, "", (Map<String, String>) null, "", false);
      vector0.add(pollerRequest0);
      // Undeclared exception!
      try {
        pollerRequestHandlerImpl0.executePollerRequests(pollerSession0, (List<PollerRequest>) vector0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test14()  throws Throwable  {
      PollerRequestHandlerImpl pollerRequestHandlerImpl0 = new PollerRequestHandlerImpl();
      PollerSession pollerSession0 = new PollerSession("");
      Vector<PollerRequest> vector0 = new Vector<PollerRequest>(4, 4);
      PollerRequest pollerRequest0 = new PollerRequest((HttpServletRequest) null, (PollerHeader) null, "", (Map<String, String>) null, "", true);
      vector0.add(pollerRequest0);
      // Undeclared exception!
      try {
        pollerRequestHandlerImpl0.executePollerRequests(pollerSession0, (List<PollerRequest>) vector0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test15()  throws Throwable  {
      PollerRequestHandlerImpl pollerRequestHandlerImpl0 = new PollerRequestHandlerImpl();
      boolean boolean0 = pollerRequestHandlerImpl0.isReceiveRequest((String) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      PollerRequestHandlerImpl pollerRequestHandlerImpl0 = new PollerRequestHandlerImpl();
      boolean boolean0 = pollerRequestHandlerImpl0.isReceiveRequest("/receive");
      assertEquals(true, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      PollerRequestHandlerImpl pollerRequestHandlerImpl0 = new PollerRequestHandlerImpl();
      boolean boolean0 = pollerRequestHandlerImpl0.isReceiveRequest("aDn8;*-nk9-Jxqoyj");
      assertEquals(false, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      PollerRequestHandlerImpl pollerRequestHandlerImpl0 = new PollerRequestHandlerImpl();
      Map<String, Object>[] mapArray0 = (Map<String, Object>[]) Array.newInstance(Map.class, 26);
      SortedMap<String, Charset> sortedMap0 = Charset.availableCharsets();
      mapArray0[2] = (Map<String, Object>) sortedMap0;
      Map<String, String> map0 = pollerRequestHandlerImpl0.parseData(mapArray0[2]);
      assertEquals(0, map0.size());
      assertNotNull(map0);
  }
}
