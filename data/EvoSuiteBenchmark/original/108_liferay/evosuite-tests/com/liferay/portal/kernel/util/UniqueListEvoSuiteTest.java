/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.util.UniqueList;
import java.util.ArrayList;
import java.util.Collection;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class UniqueListEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      UniqueList<Integer> uniqueList0 = new UniqueList<Integer>();
      // Undeclared exception!
      try {
        uniqueList0.add(9, (Integer) 9);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 9, Size: 0
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      UniqueList<Object> uniqueList0 = new UniqueList<Object>(570);
      uniqueList0.add((Object) 570);
      boolean boolean0 = uniqueList0.add((Object) 570);
      assertEquals(1, uniqueList0.size());
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      UniqueList<String> uniqueList0 = new UniqueList<String>();
      UniqueList<ArrayList<String>> uniqueList1 = new UniqueList<ArrayList<String>>();
      uniqueList1.add((ArrayList<String>) uniqueList0);
      uniqueList1.add(0, (ArrayList<String>) uniqueList0);
      assertEquals(1, uniqueList1.size());
      assertEquals("[[]]", uniqueList1.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      UniqueList<Object> uniqueList0 = new UniqueList<Object>(0);
      ArrayList<ArrayList<Object>> arrayList0 = new ArrayList<ArrayList<Object>>();
      arrayList0.add((ArrayList<Object>) uniqueList0);
      arrayList0.add((ArrayList<Object>) uniqueList0);
      UniqueList<ArrayList<Object>> uniqueList1 = new UniqueList<ArrayList<Object>>((Collection<ArrayList<Object>>) arrayList0);
      assertNotNull(uniqueList1);
      assertEquals("[[]]", uniqueList1.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      UniqueList<Object> uniqueList0 = new UniqueList<Object>(0);
      UniqueList<String> uniqueList1 = new UniqueList<String>();
      UniqueList<ArrayList<String>> uniqueList2 = new UniqueList<ArrayList<String>>();
      uniqueList2.add((ArrayList<String>) uniqueList1);
      boolean boolean0 = uniqueList0.addAll(0, (Collection<?>) uniqueList2);
      assertEquals(false, uniqueList2.isEmpty());
      assertEquals(true, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      UniqueList<Object> uniqueList0 = new UniqueList<Object>(570);
      UniqueList<String> uniqueList1 = new UniqueList<String>();
      UniqueList<ArrayList<String>> uniqueList2 = new UniqueList<ArrayList<String>>();
      uniqueList0.add((Object) uniqueList2);
      UniqueList<ArrayList<String>> uniqueList3 = new UniqueList<ArrayList<String>>();
      uniqueList3.add((ArrayList<String>) uniqueList1);
      boolean boolean0 = uniqueList0.addAll(0, (Collection<?>) uniqueList3);
      assertEquals("[[]]", uniqueList3.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      UniqueList<String> uniqueList0 = new UniqueList<String>();
      UniqueList<ArrayList<String>> uniqueList1 = new UniqueList<ArrayList<String>>();
      // Undeclared exception!
      try {
        uniqueList1.set(0, (ArrayList<String>) uniqueList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 0, Size: 0
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      UniqueList<String> uniqueList0 = new UniqueList<String>();
      UniqueList<ArrayList<String>> uniqueList1 = new UniqueList<ArrayList<String>>();
      uniqueList1.add((ArrayList<String>) uniqueList0);
      uniqueList1.set(0, (ArrayList<String>) uniqueList0);
      assertEquals(false, uniqueList1.isEmpty());
      assertEquals(1, uniqueList1.size());
  }
}
