/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.model;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.model.ResourceBlockPermission;
import com.liferay.portal.model.ResourceBlockPermissionSoap;
import java.util.LinkedList;
import java.util.List;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ResourceBlockPermissionSoapEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ResourceBlockPermissionSoap resourceBlockPermissionSoap0 = new ResourceBlockPermissionSoap();
      long long0 = resourceBlockPermissionSoap0.getActionIds();
      assertEquals(0L, long0);
  }

  @Test
  public void test1()  throws Throwable  {
      ResourceBlockPermissionSoap resourceBlockPermissionSoap0 = new ResourceBlockPermissionSoap();
      long long0 = resourceBlockPermissionSoap0.getRoleId();
      assertEquals(0L, long0);
  }

  @Test
  public void test2()  throws Throwable  {
      ResourceBlockPermissionSoap resourceBlockPermissionSoap0 = new ResourceBlockPermissionSoap();
      long long0 = resourceBlockPermissionSoap0.getPrimaryKey();
      assertEquals(0L, long0);
  }

  @Test
  public void test3()  throws Throwable  {
      ResourceBlockPermissionSoap resourceBlockPermissionSoap0 = new ResourceBlockPermissionSoap();
      resourceBlockPermissionSoap0.setRoleId(0L);
      assertEquals(0L, resourceBlockPermissionSoap0.getPrimaryKey());
  }

  @Test
  public void test4()  throws Throwable  {
      ResourceBlockPermissionSoap resourceBlockPermissionSoap0 = new ResourceBlockPermissionSoap();
      resourceBlockPermissionSoap0.setActionIds(0L);
      assertEquals(0L, resourceBlockPermissionSoap0.getRoleId());
  }

  @Test
  public void test5()  throws Throwable  {
      ResourceBlockPermissionSoap resourceBlockPermissionSoap0 = new ResourceBlockPermissionSoap();
      resourceBlockPermissionSoap0.setPrimaryKey(0L);
      assertEquals(0L, resourceBlockPermissionSoap0.getResourceBlockId());
  }

  @Test
  public void test6()  throws Throwable  {
      ResourceBlockPermissionSoap resourceBlockPermissionSoap0 = new ResourceBlockPermissionSoap();
      resourceBlockPermissionSoap0.setResourceBlockId(0L);
      assertEquals(0L, resourceBlockPermissionSoap0.getActionIds());
  }

  @Test
  public void test7()  throws Throwable  {
      ResourceBlockPermissionSoap resourceBlockPermissionSoap0 = new ResourceBlockPermissionSoap();
      long long0 = resourceBlockPermissionSoap0.getResourceBlockPermissionId();
      assertEquals(0L, long0);
  }

  @Test
  public void test8()  throws Throwable  {
      ResourceBlockPermissionSoap resourceBlockPermissionSoap0 = new ResourceBlockPermissionSoap();
      long long0 = resourceBlockPermissionSoap0.getResourceBlockId();
      assertEquals(0L, long0);
  }

  @Test
  public void test9()  throws Throwable  {
      LinkedList<ResourceBlockPermission> linkedList0 = new LinkedList<ResourceBlockPermission>();
      linkedList0.add((ResourceBlockPermission) null);
      // Undeclared exception!
      try {
        ResourceBlockPermissionSoap.toSoapModels((List<ResourceBlockPermission>) linkedList0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      ResourceBlockPermission[][] resourceBlockPermissionArray0 = new ResourceBlockPermission[1][7];
      // Undeclared exception!
      try {
        ResourceBlockPermissionSoap.toSoapModels(resourceBlockPermissionArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      LinkedList<ResourceBlockPermission> linkedList0 = new LinkedList<ResourceBlockPermission>();
      ResourceBlockPermissionSoap[] resourceBlockPermissionSoapArray0 = ResourceBlockPermissionSoap.toSoapModels((List<ResourceBlockPermission>) linkedList0);
      assertNotNull(resourceBlockPermissionSoapArray0);
  }
}
