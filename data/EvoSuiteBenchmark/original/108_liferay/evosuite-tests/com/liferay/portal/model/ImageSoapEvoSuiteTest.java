/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.model;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.model.Image;
import com.liferay.portal.model.ImageSoap;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ImageSoapEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ImageSoap imageSoap0 = new ImageSoap();
      imageSoap0.setPrimaryKey((long) 0);
      assertEquals(0, imageSoap0.getHeight());
  }

  @Test
  public void test1()  throws Throwable  {
      ImageSoap imageSoap0 = new ImageSoap();
      imageSoap0.setType((String) null);
      assertEquals(0, imageSoap0.getWidth());
  }

  @Test
  public void test2()  throws Throwable  {
      ImageSoap imageSoap0 = new ImageSoap();
      long long0 = imageSoap0.getImageId();
      assertEquals(0L, long0);
  }

  @Test
  public void test3()  throws Throwable  {
      ImageSoap imageSoap0 = new ImageSoap();
      String string0 = imageSoap0.getType();
      assertNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      ImageSoap imageSoap0 = new ImageSoap();
      imageSoap0.setSize(0);
      assertEquals(0, imageSoap0.getSize());
  }

  @Test
  public void test5()  throws Throwable  {
      ImageSoap imageSoap0 = new ImageSoap();
      int int0 = imageSoap0.getWidth();
      assertEquals(0, int0);
  }

  @Test
  public void test6()  throws Throwable  {
      ImageSoap imageSoap0 = new ImageSoap();
      imageSoap0.setModifiedDate((Date) null);
      assertEquals(0, imageSoap0.getHeight());
  }

  @Test
  public void test7()  throws Throwable  {
      ImageSoap imageSoap0 = new ImageSoap();
      imageSoap0.setText((String) null);
      assertNull(imageSoap0.getType());
  }

  @Test
  public void test8()  throws Throwable  {
      ImageSoap imageSoap0 = new ImageSoap();
      int int0 = imageSoap0.getSize();
      assertEquals(0, int0);
  }

  @Test
  public void test9()  throws Throwable  {
      ImageSoap imageSoap0 = new ImageSoap();
      imageSoap0.setHeight(0);
      assertEquals(0, imageSoap0.getHeight());
  }

  @Test
  public void test10()  throws Throwable  {
      ImageSoap imageSoap0 = new ImageSoap();
      String string0 = imageSoap0.getText();
      assertNull(string0);
  }

  @Test
  public void test11()  throws Throwable  {
      ImageSoap imageSoap0 = new ImageSoap();
      Date date0 = imageSoap0.getModifiedDate();
      assertNull(date0);
  }

  @Test
  public void test12()  throws Throwable  {
      ImageSoap imageSoap0 = new ImageSoap();
      imageSoap0.setWidth(0);
      assertEquals(0, imageSoap0.getWidth());
  }

  @Test
  public void test13()  throws Throwable  {
      Image[][] imageArray0 = new Image[1][1];
      // Undeclared exception!
      try {
        ImageSoap.toSoapModels(imageArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test14()  throws Throwable  {
      ImageSoap imageSoap0 = new ImageSoap();
      long long0 = imageSoap0.getPrimaryKey();
      assertEquals(0L, long0);
  }

  @Test
  public void test15()  throws Throwable  {
      ImageSoap imageSoap0 = new ImageSoap();
      int int0 = imageSoap0.getHeight();
      assertEquals(0, int0);
  }

  @Test
  public void test16()  throws Throwable  {
      LinkedList<Image> linkedList0 = new LinkedList<Image>();
      ImageSoap[] imageSoapArray0 = ImageSoap.toSoapModels((List<Image>) linkedList0);
      assertNotNull(imageSoapArray0);
  }

  @Test
  public void test17()  throws Throwable  {
      LinkedList<Image> linkedList0 = new LinkedList<Image>();
      linkedList0.add((Image) null);
      // Undeclared exception!
      try {
        ImageSoap.toSoapModels((List<Image>) linkedList0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
