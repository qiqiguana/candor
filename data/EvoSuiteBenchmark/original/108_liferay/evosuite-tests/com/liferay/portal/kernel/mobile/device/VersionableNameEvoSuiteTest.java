/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.mobile.device;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.mobile.device.VersionableName;
import java.io.Serializable;
import java.util.LinkedHashSet;
import java.util.Set;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class VersionableNameEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      VersionableName versionableName0 = new VersionableName("@16_^&-pfga", "@16_^&-pfga");
      assertNotNull(versionableName0);
      
      VersionableName versionableName1 = VersionableName.UNKNOWN;
      boolean boolean0 = versionableName0.equals((Object) versionableName1);
      assertEquals("{name=@16_^&-pfga, versions=[@16_^&-pfga]}", versionableName0.toString());
      assertFalse(versionableName1.equals(versionableName0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      VersionableName versionableName0 = new VersionableName("(UUm1fdr>");
      assertNotNull(versionableName0);
      
      int int0 = versionableName0.compareTo(versionableName0);
      assertEquals(0, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      VersionableName versionableName0 = new VersionableName("(UUm1fdr>");
      assertNotNull(versionableName0);
      
      String string0 = versionableName0.toString();
      assertNotNull(string0);
      assertEquals("{name=(UUm1fdr>, versions=null}", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      VersionableName versionableName0 = null;
      try {
        versionableName0 = new VersionableName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Name is null
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      VersionableName versionableName0 = VersionableName.UNKNOWN;
      versionableName0.addVersion((String) null);
      assertEquals("{name=unknown, versions=[unknown]}", versionableName0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      VersionableName versionableName0 = new VersionableName("(UUm1fdr>");
      assertNotNull(versionableName0);
      
      versionableName0.addVersion("(UUm1fdr>");
      assertEquals("{name=(UUm1fdr>, versions=[(UUm1fdr>]}", versionableName0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      VersionableName versionableName0 = VersionableName.UNKNOWN;
      LinkedHashSet<Set<Serializable>> linkedHashSet0 = new LinkedHashSet<Set<Serializable>>();
      Object[] objectArray0 = linkedHashSet0.toArray();
      boolean boolean0 = versionableName0.equals((Object) objectArray0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      VersionableName versionableName0 = new VersionableName("(UUm1fdr>");
      assertNotNull(versionableName0);
      
      VersionableName versionableName1 = new VersionableName("(UUm1fdr>");
      boolean boolean0 = versionableName0.equals((Object) versionableName1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      VersionableName versionableName0 = VersionableName.UNKNOWN;
      Set<String> set0 = versionableName0.getVersions();
      assertEquals(false, set0.isEmpty());
      assertNotNull(set0);
  }

  @Test
  public void test9()  throws Throwable  {
      VersionableName versionableName0 = new VersionableName("(UUm1fdr>");
      Set<String> set0 = versionableName0.getVersions();
      assertEquals(true, set0.isEmpty());
  }

  @Test
  public void test10()  throws Throwable  {
      VersionableName versionableName0 = VersionableName.UNKNOWN;
      int int0 = versionableName0.hashCode();
      assertEquals((-284840886), int0);
  }
}
