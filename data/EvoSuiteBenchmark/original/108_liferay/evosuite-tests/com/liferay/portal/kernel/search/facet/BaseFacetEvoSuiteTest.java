/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.search.facet;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.search.SearchContext;
import com.liferay.portal.kernel.search.facet.ModifiedFacet;
import com.liferay.portal.kernel.search.facet.MultiValueFacet;
import com.liferay.portal.kernel.search.facet.RangeFacet;
import com.liferay.portal.kernel.search.facet.ScopeFacet;
import com.liferay.portal.kernel.search.facet.SimpleFacet;
import com.liferay.portal.kernel.search.facet.collector.FacetCollector;
import com.liferay.portal.kernel.search.facet.config.FacetConfiguration;
import com.liferay.portal.kernel.search.facet.util.BaseFacetValueValidator;
import com.liferay.portal.kernel.search.facet.util.FacetValueValidator;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BaseFacetEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SimpleFacet simpleFacet0 = new SimpleFacet((SearchContext) null);
      ScopeFacet scopeFacet0 = new ScopeFacet((SearchContext) null);
      BaseFacetValueValidator baseFacetValueValidator0 = (BaseFacetValueValidator)scopeFacet0.getFacetValueValidator();
      simpleFacet0.setFacetValueValidator((FacetValueValidator) baseFacetValueValidator0);
      assertNull(simpleFacet0.getFieldName());
  }

  @Test
  public void test1()  throws Throwable  {
      SearchContext searchContext0 = new SearchContext();
      RangeFacet rangeFacet0 = new RangeFacet(searchContext0);
      boolean boolean0 = rangeFacet0.isStatic();
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      SearchContext searchContext0 = new SearchContext();
      RangeFacet rangeFacet0 = new RangeFacet(searchContext0);
      rangeFacet0.setStatic(true);
      assertEquals(true, rangeFacet0.isStatic());
  }

  @Test
  public void test3()  throws Throwable  {
      SearchContext searchContext0 = new SearchContext();
      ModifiedFacet modifiedFacet0 = new ModifiedFacet(searchContext0);
      // Undeclared exception!
      try {
        modifiedFacet0.getFacetClause();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      MultiValueFacet multiValueFacet0 = new MultiValueFacet((SearchContext) null);
      FacetCollector facetCollector0 = multiValueFacet0.getFacetCollector();
      assertNull(facetCollector0);
  }

  @Test
  public void test5()  throws Throwable  {
      SearchContext searchContext0 = new SearchContext();
      MultiValueFacet multiValueFacet0 = new MultiValueFacet(searchContext0);
      String string0 = multiValueFacet0.getFieldName();
      assertNull(string0);
  }

  @Test
  public void test6()  throws Throwable  {
      SearchContext searchContext0 = new SearchContext();
      SimpleFacet simpleFacet0 = new SimpleFacet(searchContext0);
      simpleFacet0.setFacetCollector((FacetCollector) null);
      assertNull(simpleFacet0.getFieldName());
  }

  @Test
  public void test7()  throws Throwable  {
      SearchContext searchContext0 = new SearchContext();
      RangeFacet rangeFacet0 = new RangeFacet(searchContext0);
      FacetConfiguration facetConfiguration0 = rangeFacet0.getFacetConfiguration();
      ModifiedFacet modifiedFacet0 = new ModifiedFacet(searchContext0);
      modifiedFacet0.setFacetConfiguration(facetConfiguration0);
      assertNull(modifiedFacet0.getFieldName());
  }

  @Test
  public void test8()  throws Throwable  {
      ScopeFacet scopeFacet0 = new ScopeFacet((SearchContext) null);
      assertNotNull(scopeFacet0);
      
      BaseFacetValueValidator baseFacetValueValidator0 = (BaseFacetValueValidator)scopeFacet0.getFacetValueValidator();
      BaseFacetValueValidator baseFacetValueValidator1 = (BaseFacetValueValidator)scopeFacet0.getFacetValueValidator();
      assertNotNull(baseFacetValueValidator1);
      assertSame(baseFacetValueValidator1, baseFacetValueValidator0);
  }
}
