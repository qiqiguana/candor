/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.io.unsync;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.io.unsync.UnsyncByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class UnsyncByteArrayOutputStreamEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      UnsyncByteArrayOutputStream unsyncByteArrayOutputStream0 = new UnsyncByteArrayOutputStream();
      assertNotNull(unsyncByteArrayOutputStream0);
      
      String string0 = unsyncByteArrayOutputStream0.toString();
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      UnsyncByteArrayOutputStream unsyncByteArrayOutputStream0 = new UnsyncByteArrayOutputStream();
      byte[] byteArray0 = unsyncByteArrayOutputStream0.toByteArray();
      assertNotNull(byteArray0);
  }

  @Test
  public void test2()  throws Throwable  {
      UnsyncByteArrayOutputStream unsyncByteArrayOutputStream0 = new UnsyncByteArrayOutputStream();
      byte[] byteArray0 = unsyncByteArrayOutputStream0.unsafeGetByteArray();
      assertNotNull(byteArray0);
  }

  @Test
  public void test3()  throws Throwable  {
      UnsyncByteArrayOutputStream unsyncByteArrayOutputStream0 = new UnsyncByteArrayOutputStream();
      try {
        unsyncByteArrayOutputStream0.toString("");
        fail("Expecting exception: UnsupportedEncodingException");
      } catch(UnsupportedEncodingException e) {
        /*
         * 
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      UnsyncByteArrayOutputStream unsyncByteArrayOutputStream0 = new UnsyncByteArrayOutputStream();
      assertNotNull(unsyncByteArrayOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) unsyncByteArrayOutputStream0);
      unsyncByteArrayOutputStream0.writeTo((OutputStream) dataOutputStream0);
      assertEquals(0, dataOutputStream0.size());
      assertEquals(0, unsyncByteArrayOutputStream0.size());
  }

  @Test
  public void test5()  throws Throwable  {
      UnsyncByteArrayOutputStream unsyncByteArrayOutputStream0 = new UnsyncByteArrayOutputStream();
      assertNotNull(unsyncByteArrayOutputStream0);
      
      ByteBuffer byteBuffer0 = unsyncByteArrayOutputStream0.unsafeGetByteBuffer();
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=32]", byteBuffer0.toString());
      assertNotNull(byteBuffer0);
  }

  @Test
  public void test6()  throws Throwable  {
      UnsyncByteArrayOutputStream unsyncByteArrayOutputStream0 = new UnsyncByteArrayOutputStream();
      assertNotNull(unsyncByteArrayOutputStream0);
      
      byte[] byteArray0 = new byte[1];
      unsyncByteArrayOutputStream0.write(byteArray0);
      assertEquals(1, unsyncByteArrayOutputStream0.size());
      assertEquals("\u0000", unsyncByteArrayOutputStream0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      UnsyncByteArrayOutputStream unsyncByteArrayOutputStream0 = new UnsyncByteArrayOutputStream();
      assertNotNull(unsyncByteArrayOutputStream0);
      
      int int0 = unsyncByteArrayOutputStream0.size();
      assertEquals(0, int0);
  }

  @Test
  public void test8()  throws Throwable  {
      UnsyncByteArrayOutputStream unsyncByteArrayOutputStream0 = new UnsyncByteArrayOutputStream();
      assertNotNull(unsyncByteArrayOutputStream0);
      
      unsyncByteArrayOutputStream0.reset();
      assertEquals("", unsyncByteArrayOutputStream0.toString());
      assertEquals(0, unsyncByteArrayOutputStream0.size());
  }

  @Test
  public void test9()  throws Throwable  {
      UnsyncByteArrayOutputStream unsyncByteArrayOutputStream0 = new UnsyncByteArrayOutputStream(0);
      assertNotNull(unsyncByteArrayOutputStream0);
      
      byte[] byteArray0 = new byte[2];
      unsyncByteArrayOutputStream0.write(byteArray0);
      assertEquals(2, unsyncByteArrayOutputStream0.size());
      assertEquals("\u0000\u0000", unsyncByteArrayOutputStream0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      UnsyncByteArrayOutputStream unsyncByteArrayOutputStream0 = new UnsyncByteArrayOutputStream();
      assertNotNull(unsyncByteArrayOutputStream0);
      
      unsyncByteArrayOutputStream0.write(935);
      assertEquals(1, unsyncByteArrayOutputStream0.size());
      assertEquals("\uFFFD", unsyncByteArrayOutputStream0.toString());
  }

  @Test
  public void test11()  throws Throwable  {
      UnsyncByteArrayOutputStream unsyncByteArrayOutputStream0 = new UnsyncByteArrayOutputStream(0);
      assertNotNull(unsyncByteArrayOutputStream0);
      
      unsyncByteArrayOutputStream0.write(0);
      assertEquals("\u0000", unsyncByteArrayOutputStream0.toString());
      assertEquals(1, unsyncByteArrayOutputStream0.size());
  }
}
