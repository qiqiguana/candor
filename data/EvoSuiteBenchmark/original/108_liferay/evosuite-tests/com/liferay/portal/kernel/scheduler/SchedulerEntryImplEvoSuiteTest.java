/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.scheduler;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.messaging.MessageListener;
import com.liferay.portal.kernel.scheduler.IntervalTrigger;
import com.liferay.portal.kernel.scheduler.SchedulerEntryImpl;
import com.liferay.portal.kernel.scheduler.SchedulerException;
import com.liferay.portal.kernel.scheduler.TimeUnit;
import com.liferay.portal.kernel.scheduler.TriggerType;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SchedulerEntryImplEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SchedulerEntryImpl schedulerEntryImpl0 = new SchedulerEntryImpl();
      String string0 = schedulerEntryImpl0.toString();
      assertEquals(", description=, eventListener=null, eventListenerClass=, propertyKey=, timeUnit=null, trigger=null, triggerType=null, triggerValue=}", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      SchedulerEntryImpl schedulerEntryImpl0 = new SchedulerEntryImpl();
      schedulerEntryImpl0.setEventListenerClass("");
      assertEquals(", description=, eventListener=null, eventListenerClass=, propertyKey=, timeUnit=null, trigger=null, triggerType=null, triggerValue=}", schedulerEntryImpl0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      SchedulerEntryImpl schedulerEntryImpl0 = new SchedulerEntryImpl();
      schedulerEntryImpl0.setPropertyKey(", description=, eventListener=null, eventListenerClass=, propertyKey=, timeUnit=null, trigger=null, triggerType=null, triggerValue=}");
      assertNull(schedulerEntryImpl0.getTimeUnit());
  }

  @Test
  public void test3()  throws Throwable  {
      SchedulerEntryImpl schedulerEntryImpl0 = new SchedulerEntryImpl();
      schedulerEntryImpl0.setTriggerValue("");
      assertNull(schedulerEntryImpl0.getTimeUnit());
  }

  @Test
  public void test4()  throws Throwable  {
      SchedulerEntryImpl schedulerEntryImpl0 = new SchedulerEntryImpl();
      schedulerEntryImpl0.getTimeUnit();
  }

  @Test
  public void test5()  throws Throwable  {
      SchedulerEntryImpl schedulerEntryImpl0 = new SchedulerEntryImpl();
      schedulerEntryImpl0.getTriggerType();
  }

  @Test
  public void test6()  throws Throwable  {
      SchedulerEntryImpl schedulerEntryImpl0 = new SchedulerEntryImpl();
      String string0 = schedulerEntryImpl0.getDescription();
      assertEquals("", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      SchedulerEntryImpl schedulerEntryImpl0 = new SchedulerEntryImpl();
      String string0 = schedulerEntryImpl0.getPropertyKey();
      assertEquals("", string0);
  }

  @Test
  public void test8()  throws Throwable  {
      SchedulerEntryImpl schedulerEntryImpl0 = new SchedulerEntryImpl();
      String string0 = schedulerEntryImpl0.getEventListenerClass();
      assertEquals("", string0);
  }

  @Test
  public void test9()  throws Throwable  {
      SchedulerEntryImpl schedulerEntryImpl0 = new SchedulerEntryImpl();
      schedulerEntryImpl0.setTriggerValue((-4));
      assertEquals("-4", schedulerEntryImpl0.getTriggerValue());
      assertEquals(", description=, eventListener=null, eventListenerClass=, propertyKey=, timeUnit=null, trigger=null, triggerType=null, triggerValue=-4}", schedulerEntryImpl0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      SchedulerEntryImpl schedulerEntryImpl0 = new SchedulerEntryImpl();
      schedulerEntryImpl0.setTriggerValue((-1547L));
      assertEquals(", description=, eventListener=null, eventListenerClass=, propertyKey=, timeUnit=null, trigger=null, triggerType=null, triggerValue=-1547}", schedulerEntryImpl0.toString());
      assertEquals("-1547", schedulerEntryImpl0.getTriggerValue());
  }

  @Test
  public void test11()  throws Throwable  {
      SchedulerEntryImpl schedulerEntryImpl0 = new SchedulerEntryImpl();
      TimeUnit timeUnit0 = TimeUnit.MINUTE;
      schedulerEntryImpl0.setTimeUnit(timeUnit0);
      TriggerType triggerType0 = TriggerType.SIMPLE;
      schedulerEntryImpl0.setTriggerType(triggerType0);
      schedulerEntryImpl0.getTrigger();
      schedulerEntryImpl0.getTrigger();
      assertEquals(", description=, eventListener=null, eventListenerClass=, propertyKey=, timeUnit=minute, trigger={interval=0, {endDate=null, groupName=, jobName=, startDate=null, triggerType=SIMPLE}}, triggerType=SIMPLE, triggerValue=}", schedulerEntryImpl0.toString());
  }

  @Test
  public void test12()  throws Throwable  {
      SchedulerEntryImpl schedulerEntryImpl0 = new SchedulerEntryImpl();
      schedulerEntryImpl0.setEventListener((MessageListener) null);
      assertEquals("", schedulerEntryImpl0.getEventListenerClass());
  }

  @Test
  public void test13()  throws Throwable  {
      SchedulerEntryImpl schedulerEntryImpl0 = new SchedulerEntryImpl();
      schedulerEntryImpl0.setDescription("");
      assertNull(schedulerEntryImpl0.getTimeUnit());
  }

  @Test
  public void test14()  throws Throwable  {
      SchedulerEntryImpl schedulerEntryImpl0 = new SchedulerEntryImpl();
      MessageListener messageListener0 = schedulerEntryImpl0.getEventListener();
      assertNull(messageListener0);
  }

  @Test
  public void test15()  throws Throwable  {
      SchedulerEntryImpl schedulerEntryImpl0 = new SchedulerEntryImpl();
      String string0 = schedulerEntryImpl0.getTriggerValue();
      assertEquals("", string0);
  }

  @Test
  public void test16()  throws Throwable  {
      SchedulerEntryImpl schedulerEntryImpl0 = new SchedulerEntryImpl();
      TriggerType triggerType0 = TriggerType.CRON;
      schedulerEntryImpl0.setTriggerType(triggerType0);
      schedulerEntryImpl0.getTrigger();
      assertEquals(", description=, eventListener=null, eventListenerClass=, propertyKey=, timeUnit=null, trigger={cronText=, {endDate=null, groupName=, jobName=, startDate=null, triggerType=CRON}}, triggerType=CRON, triggerValue=}", schedulerEntryImpl0.toString());
  }

  @Test
  public void test17()  throws Throwable  {
      SchedulerEntryImpl schedulerEntryImpl0 = new SchedulerEntryImpl();
      TriggerType triggerType0 = TriggerType.SIMPLE;
      schedulerEntryImpl0.setTriggerType(triggerType0);
      TimeUnit timeUnit0 = TimeUnit.DAY;
      schedulerEntryImpl0.setTimeUnit(timeUnit0);
      IntervalTrigger intervalTrigger0 = (IntervalTrigger)schedulerEntryImpl0.getTrigger();
      assertEquals(", description=, eventListener=null, eventListenerClass=, propertyKey=, timeUnit=day, trigger={interval=0, {endDate=null, groupName=, jobName=, startDate=null, triggerType=SIMPLE}}, triggerType=SIMPLE, triggerValue=}", schedulerEntryImpl0.toString());
      assertEquals("{interval=0, {endDate=null, groupName=, jobName=, startDate=null, triggerType=SIMPLE}}", intervalTrigger0.toString());
  }

  @Test
  public void test18()  throws Throwable  {
      SchedulerEntryImpl schedulerEntryImpl0 = new SchedulerEntryImpl();
      TriggerType triggerType0 = TriggerType.SIMPLE;
      schedulerEntryImpl0.setTriggerType(triggerType0);
      TimeUnit timeUnit0 = TimeUnit.HOUR;
      schedulerEntryImpl0.setTimeUnit(timeUnit0);
      schedulerEntryImpl0.getTrigger();
      assertEquals(", description=, eventListener=null, eventListenerClass=, propertyKey=, timeUnit=hour, trigger={interval=0, {endDate=null, groupName=, jobName=, startDate=null, triggerType=SIMPLE}}, triggerType=SIMPLE, triggerValue=}", schedulerEntryImpl0.toString());
  }

  @Test
  public void test19()  throws Throwable  {
      SchedulerEntryImpl schedulerEntryImpl0 = new SchedulerEntryImpl();
      TriggerType triggerType0 = TriggerType.SIMPLE;
      schedulerEntryImpl0.setTriggerType(triggerType0);
      TimeUnit timeUnit0 = TimeUnit.SECOND;
      schedulerEntryImpl0.setTimeUnit(timeUnit0);
      schedulerEntryImpl0.getTrigger();
      assertEquals(", description=, eventListener=null, eventListenerClass=, propertyKey=, timeUnit=second, trigger={interval=0, {endDate=null, groupName=, jobName=, startDate=null, triggerType=SIMPLE}}, triggerType=SIMPLE, triggerValue=}", schedulerEntryImpl0.toString());
  }

  @Test
  public void test20()  throws Throwable  {
      SchedulerEntryImpl schedulerEntryImpl0 = new SchedulerEntryImpl();
      TriggerType triggerType0 = TriggerType.SIMPLE;
      schedulerEntryImpl0.setTriggerType(triggerType0);
      TimeUnit timeUnit0 = TimeUnit.WEEK;
      schedulerEntryImpl0.setTimeUnit(timeUnit0);
      schedulerEntryImpl0.getTrigger();
      assertEquals(", description=, eventListener=null, eventListenerClass=, propertyKey=, timeUnit=week, trigger={interval=0, {endDate=null, groupName=, jobName=, startDate=null, triggerType=SIMPLE}}, triggerType=SIMPLE, triggerValue=}", schedulerEntryImpl0.toString());
  }
}
