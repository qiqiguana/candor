/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.util.SetUtil;
import java.util.Collection;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.StringTokenizer;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SetUtilEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SetUtil setUtil0 = new SetUtil();
      assertNotNull(setUtil0);
  }

  @Test
  public void test1()  throws Throwable  {
      Set<String> set0 = SetUtil.fromString("");
      assertEquals(true, set0.isEmpty());
  }

  @Test
  public void test2()  throws Throwable  {
      Set<Boolean> set0 = SetUtil.fromArray((boolean[]) null);
      assertEquals(0, set0.size());
  }

  @Test
  public void test3()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      Set<Boolean> set0 = SetUtil.fromArray(booleanArray0);
      assertEquals(1, set0.size());
      assertNotNull(set0);
  }

  @Test
  public void test4()  throws Throwable  {
      Set<Byte> set0 = SetUtil.fromArray((byte[]) null);
      assertEquals(0, set0.size());
  }

  @Test
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Set<Byte> set0 = SetUtil.fromArray(byteArray0);
      assertEquals(false, set0.isEmpty());
      assertNotNull(set0);
  }

  @Test
  public void test6()  throws Throwable  {
      Set<Character> set0 = SetUtil.fromArray((char[]) null);
      assertNotNull(set0);
      
      Set<Character> set1 = SetUtil.fromCollection((Collection<Character>) set0);
      assertSame(set0, set1);
      assertNotNull(set1);
  }

  @Test
  public void test7()  throws Throwable  {
      char[] charArray0 = new char[1];
      Set<Character> set0 = SetUtil.fromArray(charArray0);
      assertNotNull(set0);
      assertEquals(false, set0.isEmpty());
  }

  @Test
  public void test8()  throws Throwable  {
      Set<Double> set0 = SetUtil.fromArray((double[]) null);
      assertEquals(0, set0.size());
  }

  @Test
  public void test9()  throws Throwable  {
      double[] doubleArray0 = new double[23];
      Set<Double> set0 = SetUtil.fromArray(doubleArray0);
      assertEquals(1, set0.size());
      assertNotNull(set0);
  }

  @Test
  public void test10()  throws Throwable  {
      Float[] floatArray0 = new Float[5];
      Set<Float> set0 = SetUtil.fromArray(floatArray0);
      assertNotNull(set0);
      assertEquals(1, set0.size());
  }

  @Test
  public void test11()  throws Throwable  {
      Set<Float> set0 = SetUtil.fromArray((float[]) null);
      assertEquals(0, set0.size());
  }

  @Test
  public void test12()  throws Throwable  {
      float[] floatArray0 = new float[1];
      Set<Float> set0 = SetUtil.fromArray(floatArray0);
      assertNotNull(set0);
      assertEquals(false, set0.isEmpty());
  }

  @Test
  public void test13()  throws Throwable  {
      Set<Integer> set0 = SetUtil.fromArray((int[]) null);
      assertEquals(true, set0.isEmpty());
  }

  @Test
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[1];
      Set<Integer> set0 = SetUtil.fromArray(intArray0);
      assertEquals(false, set0.isEmpty());
      assertNotNull(set0);
  }

  @Test
  public void test15()  throws Throwable  {
      Set<Long> set0 = SetUtil.fromArray((long[]) null);
      assertEquals(0, set0.size());
  }

  @Test
  public void test16()  throws Throwable  {
      long[] longArray0 = new long[1];
      Set<Long> set0 = SetUtil.fromArray(longArray0);
      assertEquals(false, set0.isEmpty());
      assertNotNull(set0);
  }

  @Test
  public void test17()  throws Throwable  {
      Set<Short> set0 = SetUtil.fromArray((short[]) null);
      assertEquals(0, set0.size());
  }

  @Test
  public void test18()  throws Throwable  {
      short[] shortArray0 = new short[10];
      Set<Short> set0 = SetUtil.fromArray(shortArray0);
      assertEquals(1, set0.size());
      assertNotNull(set0);
  }

  @Test
  public void test19()  throws Throwable  {
      Set<Float> set0 = SetUtil.fromCollection((Collection<Float>) null);
      assertEquals(true, set0.isEmpty());
  }

  @Test
  public void test20()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Set<Byte> set0 = SetUtil.fromCollection((Collection<Byte>) linkedList0);
      assertEquals(true, set0.isEmpty());
  }

  @Test
  public void test21()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("[2YzTA");
      Set<Object> set0 = SetUtil.fromEnumeration((Enumeration<Object>) stringTokenizer0);
      assertEquals(0, set0.size());
  }

  @Test
  public void test22()  throws Throwable  {
      LinkedHashSet<Boolean> linkedHashSet0 = new LinkedHashSet<Boolean>();
      Boolean boolean0 = Boolean.FALSE;
      linkedHashSet0.add(boolean0);
      Iterator<Boolean> iterator0 = linkedHashSet0.iterator();
      Set<Boolean> set0 = SetUtil.fromIterator(iterator0);
      assertEquals(false, iterator0.hasNext());
      assertEquals(false, set0.isEmpty());
  }

  @Test
  public void test23()  throws Throwable  {
      Set<Character> set0 = SetUtil.fromList((List<Character>) null);
      assertEquals(0, set0.size());
  }

  @Test
  public void test24()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Set<Integer> set0 = SetUtil.fromList((List<Integer>) linkedList0);
      assertEquals(0, set0.size());
  }

  @Test
  public void test25()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) (-1303));
      Set<Integer> set0 = SetUtil.fromList((List<Integer>) linkedList0);
      assertEquals(1, set0.size());
  }
}
