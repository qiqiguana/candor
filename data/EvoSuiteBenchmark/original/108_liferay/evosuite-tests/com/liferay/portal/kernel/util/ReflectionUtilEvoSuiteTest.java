/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.util.ReflectionUtil;
import java.lang.annotation.Annotation;
import javax.inject.Named;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ReflectionUtilEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ReflectionUtil reflectionUtil0 = new ReflectionUtil();
      assertNotNull(reflectionUtil0);
  }

  @Test
  public void test1()  throws Throwable  {
      Class<?> class0 = Named.class;
      Class<?> class1 = ReflectionUtil.getAnnotationDeclaringClass(class0, class0);
      assertNull(class1);
  }

  @Test
  public void test2()  throws Throwable  {
      Class<?> class0 = ReflectionUtil.class;
      Class<?> class1 = ReflectionUtil.getAnnotationDeclaringClass(class0, class0);
      assertNull(class1);
  }

  @Test
  public void test3()  throws Throwable  {
      Class<?>[] classArray0 = ReflectionUtil.getParameterTypes((Object[]) null);
      assertNull(classArray0);
  }

  @Test
  public void test4()  throws Throwable  {
      Object[] objectArray0 = new Object[10];
      objectArray0[9] = (Object) false;
      Class<?>[] classArray0 = ReflectionUtil.getParameterTypes(objectArray0);
      assertNotNull(classArray0);
  }

  @Test
  public void test5()  throws Throwable  {
      Class<?> class0 = ReflectionUtil.class;
      Object[] objectArray0 = new Object[10];
      objectArray0[6] = (Object) class0;
      Class<?>[] classArray0 = ReflectionUtil.getParameterTypes(objectArray0);
      assertNotNull(classArray0);
  }

  @Test
  public void test6()  throws Throwable  {
      Class<?> class0 = Named.class;
      // Undeclared exception!
      try {
        ReflectionUtil.isAnnotationDeclaredInClass((Class<? extends Annotation>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      Class<?> class0 = ReflectionUtil.class;
      // Undeclared exception!
      try {
        ReflectionUtil.isAnnotationDeclaredInClass(class0, (Class<?>) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }
}
