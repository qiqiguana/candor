/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.deploy.hot;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.deploy.hot.HotDeployEvent;
import com.liferay.portal.kernel.plugin.PluginPackage;
import java.util.Set;
import javax.servlet.ServletContext;
import org.junit.BeforeClass;
import org.tuckey.web.MockServletContext;

@RunWith(EvoSuiteRunner.class)
public class HotDeployEventEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      MockServletContext mockServletContext0 = new MockServletContext();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      HotDeployEvent hotDeployEvent0 = new HotDeployEvent((ServletContext) mockServletContext0, classLoader0);
      MockServletContext mockServletContext1 = (MockServletContext)hotDeployEvent0.getServletContext();
      assertEquals(0, mockServletContext1.getMinorVersion());
  }

  @Test
  public void test1()  throws Throwable  {
      MockServletContext mockServletContext0 = new MockServletContext();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      HotDeployEvent hotDeployEvent0 = new HotDeployEvent((ServletContext) mockServletContext0, classLoader0);
      ClassLoader classLoader1 = hotDeployEvent0.getContextClassLoader();
      assertSame(classLoader0, classLoader1);
  }

  @Test
  public void test2()  throws Throwable  {
      MockServletContext mockServletContext0 = new MockServletContext();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      HotDeployEvent hotDeployEvent0 = new HotDeployEvent((ServletContext) mockServletContext0, classLoader0);
      hotDeployEvent0.setPluginPackage((PluginPackage) null);
      assertNull(hotDeployEvent0.getServletContextName());
  }

  @Test
  public void test3()  throws Throwable  {
      MockServletContext mockServletContext0 = new MockServletContext();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      HotDeployEvent hotDeployEvent0 = new HotDeployEvent((ServletContext) mockServletContext0, classLoader0);
      PluginPackage pluginPackage0 = hotDeployEvent0.getPluginPackage();
      assertNull(pluginPackage0);
  }

  @Test
  public void test4()  throws Throwable  {
      MockServletContext mockServletContext0 = new MockServletContext();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      HotDeployEvent hotDeployEvent0 = new HotDeployEvent((ServletContext) mockServletContext0, classLoader0);
      String string0 = hotDeployEvent0.getServletContextName();
      assertNull(string0);
  }

  @Test
  public void test5()  throws Throwable  {
      MockServletContext mockServletContext0 = new MockServletContext();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      HotDeployEvent hotDeployEvent0 = new HotDeployEvent((ServletContext) mockServletContext0, classLoader0);
      Set<String> set0 = hotDeployEvent0.getDependentServletContextNames();
      assertEquals(true, set0.isEmpty());
  }
}
