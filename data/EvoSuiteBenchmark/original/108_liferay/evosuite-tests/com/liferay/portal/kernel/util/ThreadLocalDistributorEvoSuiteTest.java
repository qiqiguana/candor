/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.util.KeyValuePair;
import com.liferay.portal.kernel.util.ThreadLocalDistributor;
import groovy.lang.GroovyClassLoader;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.List;
import javax.swing.DebugGraphics;
import org.evosuite.instrumentation.InstrumentingClassLoader;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ThreadLocalDistributorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ThreadLocalDistributor threadLocalDistributor0 = new ThreadLocalDistributor();
      PrintStream printStream0 = DebugGraphics.logStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) printStream0);
      threadLocalDistributor0.writeExternal((ObjectOutput) objectOutputStream0);
  }

  @Test
  public void test1()  throws Throwable  {
      ThreadLocalDistributor threadLocalDistributor0 = new ThreadLocalDistributor();
      // Undeclared exception!
      try {
        threadLocalDistributor0.readExternal((ObjectInput) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      ThreadLocalDistributor threadLocalDistributor0 = new ThreadLocalDistributor();
      threadLocalDistributor0.setThreadLocalSources((List<KeyValuePair>) null);
  }

  @Test
  public void test3()  throws Throwable  {
      ThreadLocalDistributor threadLocalDistributor0 = new ThreadLocalDistributor();
      GroovyClassLoader groovyClassLoader0 = new GroovyClassLoader();
      threadLocalDistributor0.setClassLoader((ClassLoader) groovyClassLoader0);
      assertEquals("script1000002.groovy", groovyClassLoader0.generateScriptName());
  }

  @Test
  public void test4()  throws Throwable  {
      ThreadLocalDistributor threadLocalDistributor0 = new ThreadLocalDistributor();
      try {
        threadLocalDistributor0.afterPropertiesSet();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Thread local sources is null
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      ThreadLocalDistributor threadLocalDistributor0 = new ThreadLocalDistributor();
      InstrumentingClassLoader instrumentingClassLoader0 = (InstrumentingClassLoader)threadLocalDistributor0.getClassLoader();
      InstrumentingClassLoader instrumentingClassLoader1 = (InstrumentingClassLoader)threadLocalDistributor0.getClassLoader();
      assertSame(instrumentingClassLoader1, instrumentingClassLoader0);
  }
}
