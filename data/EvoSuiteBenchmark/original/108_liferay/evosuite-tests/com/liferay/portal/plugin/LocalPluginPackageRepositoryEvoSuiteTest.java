/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.plugin;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.plugin.PluginPackage;
import com.liferay.portal.plugin.LocalPluginPackageRepository;
import com.liferay.portal.plugin.PluginPackageImpl;
import java.util.List;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class LocalPluginPackageRepositoryEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LocalPluginPackageRepository localPluginPackageRepository0 = new LocalPluginPackageRepository();
      localPluginPackageRepository0.unregisterPluginPackageInstallation("J1,[Ub`mi*C");
  }

  @Test
  public void test1()  throws Throwable  {
      LocalPluginPackageRepository localPluginPackageRepository0 = new LocalPluginPackageRepository();
      // Undeclared exception!
      try {
        localPluginPackageRepository0.removePluginPackage((PluginPackage) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      LocalPluginPackageRepository localPluginPackageRepository0 = new LocalPluginPackageRepository();
      localPluginPackageRepository0.removePluginPackage("g_JKR)isS@lC7BkC");
  }

  @Test
  public void test3()  throws Throwable  {
      LocalPluginPackageRepository localPluginPackageRepository0 = new LocalPluginPackageRepository();
      List<PluginPackage> list0 = localPluginPackageRepository0.getPluginPackages();
      assertEquals(0, list0.size());
  }

  @Test
  public void test4()  throws Throwable  {
      LocalPluginPackageRepository localPluginPackageRepository0 = new LocalPluginPackageRepository();
      PluginPackage pluginPackage0 = localPluginPackageRepository0.getInstallingPluginPackage("3i9~");
      assertNull(pluginPackage0);
  }

  @Test
  public void test5()  throws Throwable  {
      LocalPluginPackageRepository localPluginPackageRepository0 = new LocalPluginPackageRepository();
      localPluginPackageRepository0.registerPluginPackageInstallation("g_JKR)isS@lC7BkC");
      PluginPackage pluginPackage0 = localPluginPackageRepository0.getLatestPluginPackage("J1,[Ub`mi*C", "J1,[Ub`mi*C");
      assertNull(pluginPackage0);
  }

  @Test
  public void test6()  throws Throwable  {
      LocalPluginPackageRepository localPluginPackageRepository0 = new LocalPluginPackageRepository();
      List<PluginPackage> list0 = localPluginPackageRepository0.getSortedPluginPackages();
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test7()  throws Throwable  {
      LocalPluginPackageRepository localPluginPackageRepository0 = new LocalPluginPackageRepository();
      PluginPackageImpl pluginPackageImpl0 = new PluginPackageImpl("e/schlichtherle/io/GloQalArchiveDriverRegistry");
      localPluginPackageRepository0.addPluginPackage((PluginPackage) pluginPackageImpl0);
      assertEquals("", pluginPackageImpl0.getShortDescription());
  }

  @Test
  public void test8()  throws Throwable  {
      LocalPluginPackageRepository localPluginPackageRepository0 = new LocalPluginPackageRepository();
      localPluginPackageRepository0.registerPluginPackageInstallation("g_JKR)isS@lC7BkC");
      PluginPackageImpl pluginPackageImpl0 = (PluginPackageImpl)localPluginPackageRepository0.getLatestPluginPackage("g_JKR)isS@lC7BkC", "J1,[Ub`mi*C");
      assertNull(pluginPackageImpl0);
  }

  @Test
  public void test9()  throws Throwable  {
      LocalPluginPackageRepository localPluginPackageRepository0 = new LocalPluginPackageRepository();
      localPluginPackageRepository0.registerPluginPackageInstallation("9:6}_}Gm");
      PluginPackageImpl pluginPackageImpl0 = (PluginPackageImpl)localPluginPackageRepository0.getLatestPluginPackage("9:6}_}Gm", "9:6}_}Gm");
      assertEquals("9:6}_}Gm", pluginPackageImpl0.getName());
      assertNotNull(pluginPackageImpl0);
      assertEquals("/9:6}_}Gm:9:6}_}Gm/9:6}_}Gm/unknown/war", pluginPackageImpl0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      LocalPluginPackageRepository localPluginPackageRepository0 = new LocalPluginPackageRepository();
      localPluginPackageRepository0.registerPluginPackageInstallation("g_JKR)isS@lC7BkC");
      List<PluginPackage> list0 = localPluginPackageRepository0.getPluginPackages("J1,[Ub`mi*C", "J1,[Ub`mi*C");
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test11()  throws Throwable  {
      LocalPluginPackageRepository localPluginPackageRepository0 = new LocalPluginPackageRepository();
      localPluginPackageRepository0.registerPluginPackageInstallation("9:6}_}Gm");
      List<PluginPackage> list0 = localPluginPackageRepository0.getPluginPackages("9:6}_}Gm", "9:6}_}Gm");
      assertNotNull(list0);
      assertEquals(1, list0.size());
  }

  @Test
  public void test12()  throws Throwable  {
      LocalPluginPackageRepository localPluginPackageRepository0 = new LocalPluginPackageRepository();
      localPluginPackageRepository0.registerPluginPackageInstallation("iablebellRenkre");
      List<PluginPackage> list0 = localPluginPackageRepository0.getPluginPackages("iablebellRenkre", "oi#,}\"jWF'G3T46'FR");
      assertNotNull(list0);
      assertEquals(0, list0.size());
  }

  @Test
  public void test13()  throws Throwable  {
      LocalPluginPackageRepository localPluginPackageRepository0 = new LocalPluginPackageRepository();
      PluginPackageImpl pluginPackageImpl0 = new PluginPackageImpl("e/schlichtherle/io/GloQalArchiveDriverRegistry");
      localPluginPackageRepository0.registerPluginPackageInstallation((PluginPackage) pluginPackageImpl0);
      assertNull(pluginPackageImpl0.getName());
  }

  @Test
  public void test14()  throws Throwable  {
      LocalPluginPackageRepository localPluginPackageRepository0 = new LocalPluginPackageRepository();
      localPluginPackageRepository0.registerPluginPackageInstallation("iablebellRenkre");
      localPluginPackageRepository0.registerPluginPackageInstallation("iablebellRenkre");
  }
}
