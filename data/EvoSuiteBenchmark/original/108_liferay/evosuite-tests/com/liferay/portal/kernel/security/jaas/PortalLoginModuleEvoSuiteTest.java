/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.security.jaas;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.security.jaas.PortalLoginModule;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.security.auth.Subject;
import javax.security.auth.callback.CallbackHandler;
import javax.security.auth.login.LoginException;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.postgresql.gss.GSSCallbackHandler;

@RunWith(EvoSuiteRunner.class)
public class PortalLoginModuleEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          PortalLoginModule portalLoginModule0 = new PortalLoginModule();
          // Undeclared exception!
          try {
            portalLoginModule0.login();
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          PortalLoginModule portalLoginModule0 = new PortalLoginModule();
          // Undeclared exception!
          try {
            portalLoginModule0.logout();
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          PortalLoginModule portalLoginModule0 = new PortalLoginModule();
          // Undeclared exception!
          try {
            portalLoginModule0.abort();
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          PortalLoginModule portalLoginModule0 = new PortalLoginModule();
          GSSCallbackHandler gSSCallbackHandler0 = new GSSCallbackHandler("'z$\"7{jVnKG@Y2;9", "'z$\"7{jVnKG@Y2;9");
          // Undeclared exception!
          try {
            portalLoginModule0.initialize((Subject) null, (CallbackHandler) gSSCallbackHandler0, (Map<String, ?>) null, (Map<String, ?>) null);
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          PortalLoginModule portalLoginModule0 = new PortalLoginModule();
          // Undeclared exception!
          try {
            portalLoginModule0.commit();
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
