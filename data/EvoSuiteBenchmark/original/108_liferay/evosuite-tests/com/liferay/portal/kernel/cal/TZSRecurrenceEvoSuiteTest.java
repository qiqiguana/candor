/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.cal;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.cal.DayAndPosition;
import com.liferay.portal.kernel.cal.Duration;
import com.liferay.portal.kernel.cal.TZSRecurrence;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TZSRecurrenceEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar();
      Duration duration0 = new Duration(1799);
      TZSRecurrence tZSRecurrence0 = new TZSRecurrence((Calendar) gregorianCalendar0, duration0);
      boolean boolean0 = tZSRecurrence0.isInRecurrence((Calendar) gregorianCalendar0, false);
      assertEquals("java.util.GregorianCalendar[time=1372739999512,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=f,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=-2042,endTime=1391,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=39,SECOND=59,MILLISECOND=512,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(true, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      Locale locale0 = Locale.UK;
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance(locale0);
      Duration duration0 = new Duration((-1));
      TZSRecurrence tZSRecurrence0 = new TZSRecurrence((Calendar) gregorianCalendar0, duration0, (-1));
      tZSRecurrence0.getTimeZone();
      assertEquals("java.util.GregorianCalendar[time=1372740010370,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=f,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=-2042,endTime=1391,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=40,SECOND=10,MILLISECOND=370,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals("com.liferay.portal.kernel.cal.TZSRecurrence[dtStart=java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=40,SECOND=10,MILLISECOND=370,ZONE_OFFSET=?,DST_OFFSET=?],duration=com.liferay.portal.kernel.cal.Duration[weeks=-1,days=0,hours=0,minutes=0,seconds=0],frequency=-1,interval=1,until=null,byDay=null,byMonthDay=null,byYearDay=null,byWeekNo=null,byMonth=null]", tZSRecurrence0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar();
      Duration duration0 = new Duration((-1035), (-394), (-394), (-1035));
      TZSRecurrence tZSRecurrence0 = new TZSRecurrence((Calendar) gregorianCalendar0, duration0);
      DayAndPosition dayAndPosition0 = new DayAndPosition();
      tZSRecurrence0.matchesIndividualByDay((Calendar) gregorianCalendar0, dayAndPosition0);
      assertEquals(1372740010821L, gregorianCalendar0.getTimeInMillis());
      assertEquals("com.liferay.portal.kernel.cal.TZSRecurrence[dtStart=java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=40,SECOND=10,MILLISECOND=821,ZONE_OFFSET=?,DST_OFFSET=?],duration=com.liferay.portal.kernel.cal.Duration[weeks=0,days=-1035,hours=-394,minutes=-394,seconds=-1035],frequency=7,interval=1,until=null,byDay=null,byMonthDay=null,byYearDay=null,byWeekNo=null,byMonth=null]", tZSRecurrence0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar();
      Duration duration0 = new Duration((-1035), (-394), (-394), (-1035));
      TZSRecurrence tZSRecurrence0 = new TZSRecurrence((Calendar) gregorianCalendar0, duration0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "f");
      tZSRecurrence0.setTimeZone((TimeZone) simpleTimeZone0);
      DayAndPosition dayAndPosition0 = new DayAndPosition();
      tZSRecurrence0.matchesIndividualByDay((Calendar) gregorianCalendar0, dayAndPosition0);
      assertEquals("java.util.GregorianCalendar[time=1372740011979,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=f,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=-2042,endTime=1391,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=40,SECOND=11,MILLISECOND=979,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals("com.liferay.portal.kernel.cal.TZSRecurrence[dtStart=java.util.GregorianCalendar[time=1372740011979,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=40,SECOND=11,MILLISECOND=979,ZONE_OFFSET=?,DST_OFFSET=?],duration=com.liferay.portal.kernel.cal.Duration[weeks=0,days=-1035,hours=-394,minutes=-394,seconds=-1035],frequency=7,interval=1,until=null,byDay=null,byMonthDay=null,byYearDay=null,byWeekNo=null,byMonth=null]", tZSRecurrence0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance(locale0);
      Duration duration0 = new Duration(734, 734, 734);
      TZSRecurrence tZSRecurrence0 = new TZSRecurrence((Calendar) gregorianCalendar0, duration0, 734);
      tZSRecurrence0.setTimeZone((TimeZone) null);
      assertEquals(1372740022686L, gregorianCalendar0.getTimeInMillis());
      assertEquals("com.liferay.portal.kernel.cal.TZSRecurrence[dtStart=java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=40,SECOND=22,MILLISECOND=686,ZONE_OFFSET=?,DST_OFFSET=?],duration=com.liferay.portal.kernel.cal.Duration[weeks=0,days=0,hours=734,minutes=734,seconds=734],frequency=734,interval=1,until=null,byDay=null,byMonthDay=null,byYearDay=null,byWeekNo=null,byMonth=null]", tZSRecurrence0.toString());
  }
}
