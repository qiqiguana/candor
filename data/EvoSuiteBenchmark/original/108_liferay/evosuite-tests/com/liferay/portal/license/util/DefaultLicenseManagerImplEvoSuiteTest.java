/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.license.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.json.JSONObjectImpl;
import com.liferay.portal.kernel.json.JSONObject;
import com.liferay.portal.license.util.DefaultLicenseManagerImpl;
import java.util.List;
import java.util.Map;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DefaultLicenseManagerImplEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DefaultLicenseManagerImpl defaultLicenseManagerImpl0 = new DefaultLicenseManagerImpl();
      defaultLicenseManagerImpl0.getLicenseInfo("");
  }

  @Test
  public void test1()  throws Throwable  {
      DefaultLicenseManagerImpl defaultLicenseManagerImpl0 = new DefaultLicenseManagerImpl();
      // Undeclared exception!
      try {
        defaultLicenseManagerImpl0.getHostName();
        fail("Expecting exception: NoClassDefFoundError");
      } catch(NoClassDefFoundError e) {
        /*
         * Could not initialize class com.liferay.portal.license.util.LicenseUtil
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      DefaultLicenseManagerImpl defaultLicenseManagerImpl0 = new DefaultLicenseManagerImpl();
      int int0 = defaultLicenseManagerImpl0.getLicenseState("Y}UH(t?d^H>r");
      assertEquals(0, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      DefaultLicenseManagerImpl defaultLicenseManagerImpl0 = new DefaultLicenseManagerImpl();
      List<Map<String, String>> list0 = defaultLicenseManagerImpl0.getLicenseProperties();
      assertNull(list0);
  }

  @Test
  public void test4()  throws Throwable  {
      DefaultLicenseManagerImpl defaultLicenseManagerImpl0 = new DefaultLicenseManagerImpl();
      List<Map<String, String>> list0 = defaultLicenseManagerImpl0.getClusterLicenseProperties("");
      assertNull(list0);
  }

  @Test
  public void test5()  throws Throwable  {
      DefaultLicenseManagerImpl defaultLicenseManagerImpl0 = new DefaultLicenseManagerImpl();
      Map<String, String> map0 = defaultLicenseManagerImpl0.getLicenseProperties("Y}UH(t?d^H>r");
      assertNull(map0);
  }

  @Test
  public void test6()  throws Throwable  {
      DefaultLicenseManagerImpl defaultLicenseManagerImpl0 = new DefaultLicenseManagerImpl();
      // Undeclared exception!
      try {
        defaultLicenseManagerImpl0.getIpAddresses();
        fail("Expecting exception: NoClassDefFoundError");
      } catch(NoClassDefFoundError e) {
        /*
         * Could not initialize class com.liferay.portal.license.util.LicenseUtil
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      DefaultLicenseManagerImpl defaultLicenseManagerImpl0 = new DefaultLicenseManagerImpl();
      // Undeclared exception!
      try {
        defaultLicenseManagerImpl0.getMacAddresses();
        fail("Expecting exception: NoClassDefFoundError");
      } catch(NoClassDefFoundError e) {
        /*
         * Could not initialize class com.liferay.portal.license.util.LicenseUtil
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      DefaultLicenseManagerImpl defaultLicenseManagerImpl0 = new DefaultLicenseManagerImpl();
      defaultLicenseManagerImpl0.checkLicense("");
  }

  @Test
  public void test9()  throws Throwable  {
      DefaultLicenseManagerImpl defaultLicenseManagerImpl0 = new DefaultLicenseManagerImpl();
      int int0 = defaultLicenseManagerImpl0.getLicenseState("");
      assertEquals(0, int0);
  }

  @Test
  public void test10()  throws Throwable  {
      DefaultLicenseManagerImpl defaultLicenseManagerImpl0 = new DefaultLicenseManagerImpl();
      JSONObjectImpl jSONObjectImpl0 = new JSONObjectImpl();
      defaultLicenseManagerImpl0.registerLicense((JSONObject) jSONObjectImpl0);
      assertEquals(0, jSONObjectImpl0.length());
  }
}
