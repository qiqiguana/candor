/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.dao.jdbc.spring;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.dao.jdbc.spring.DataSourceFactoryBean;
import interbase.interclient.ConnectionPoolModule;
import java.util.Properties;
import javax.sql.DataSource;

@RunWith(EvoSuiteRunner.class)
public class DataSourceFactoryBeanEvoSuiteTest {


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 com.liferay.portal.dao.jdbc.spring.DataSourceFactoryBean.setPropertyPrefixLookup(Ljava/lang/String;)V: root-Branch
   * 2 com.liferay.portal.dao.jdbc.spring.DataSourceFactoryBean.<init>()V: root-Branch
   */
  @Test
  public void test0()  throws Throwable  {
      DataSourceFactoryBean dataSourceFactoryBean0 = new DataSourceFactoryBean();
      // Undeclared exception!
      try {
        dataSourceFactoryBean0.setPropertyPrefixLookup("");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * key can't be empty
         */
      }
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 com.liferay.portal.dao.jdbc.spring.DataSourceFactoryBean.setPropertyPrefix(Ljava/lang/String;)V: root-Branch
   */
  @Test
  public void test1()  throws Throwable  {
      DataSourceFactoryBean dataSourceFactoryBean0 = new DataSourceFactoryBean();
      dataSourceFactoryBean0.setPropertyPrefix("fM");
      assertEquals(true, dataSourceFactoryBean0.isSingleton());
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * 1 com.liferay.portal.dao.jdbc.spring.DataSourceFactoryBean.createInstance()Ljavax/sql/DataSource;: I8 Branch 1 IFNONNULL L36 - true
   * 2 com.liferay.portal.dao.jdbc.spring.DataSourceFactoryBean.setProperties(Ljava/util/Properties;)V: root-Branch
   */
  @Test
  public void test2()  throws Throwable  {
      DataSourceFactoryBean dataSourceFactoryBean0 = new DataSourceFactoryBean();
      Properties properties0 = new Properties();
      dataSourceFactoryBean0.setProperties(properties0);
      try {
        dataSourceFactoryBean0.createInstance();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 com.liferay.portal.dao.jdbc.spring.DataSourceFactoryBean.destroyInstance(Ljavax/sql/DataSource;)V: root-Branch
   */
  @Test
  public void test3()  throws Throwable  {
      DataSourceFactoryBean dataSourceFactoryBean0 = new DataSourceFactoryBean();
      ConnectionPoolModule connectionPoolModule0 = new ConnectionPoolModule();
      try {
        dataSourceFactoryBean0.destroyInstance((DataSource) connectionPoolModule0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 com.liferay.portal.dao.jdbc.spring.DataSourceFactoryBean.getObjectType()Ljava/lang/Class;: root-Branch
   */
  @Test
  public void test4()  throws Throwable  {
      DataSourceFactoryBean dataSourceFactoryBean0 = new DataSourceFactoryBean();
      Class<DataSource> class0 = dataSourceFactoryBean0.getObjectType();
      assertEquals("javax.sql.DataSource", class0.getName());
  }

  //Test case number: 5
  /*
   * 2 covered goals:
   * 1 com.liferay.portal.dao.jdbc.spring.DataSourceFactoryBean.createInstance()Ljavax/sql/DataSource;: I8 Branch 1 IFNONNULL L36 - false
   * 2 com.liferay.portal.dao.jdbc.spring.DataSourceFactoryBean.<init>()V: root-Branch
   */
  @Test
  public void test5()  throws Throwable  {
      DataSourceFactoryBean dataSourceFactoryBean0 = new DataSourceFactoryBean();
      try {
        dataSourceFactoryBean0.createInstance();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
