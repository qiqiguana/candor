/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.io;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.io.ReaderInputStream;
import java.io.BufferedInputStream;
import java.io.CharArrayReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.Reader;
import java.io.StringReader;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ReaderInputStreamEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6tJ#2xT-/Bg22");
      ReaderInputStream readerInputStream0 = new ReaderInputStream((Reader) stringReader0);
      int int0 = readerInputStream0.available();
      assertEquals(-1, stringReader0.read());
      assertEquals(12, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      ReaderInputStream readerInputStream0 = new ReaderInputStream((Reader) null);
      String string0 = readerInputStream0.getEncoding();
      assertEquals("UTF-8", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      StringReader stringReader0 = new StringReader("W0");
      ReaderInputStream readerInputStream0 = new ReaderInputStream((Reader) stringReader0);
      assertEquals(-1, stringReader0.read());
      
      byte[] byteArray0 = new byte[19];
      int int0 = readerInputStream0.read(byteArray0);
      assertEquals((-1), int0);
  }

  @Test
  public void test3()  throws Throwable  {
      ReaderInputStream readerInputStream0 = null;
      try {
        readerInputStream0 = new ReaderInputStream((Reader) null, "", (-4), (-4));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Input buffer size -4 must be a positive number
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      ReaderInputStream readerInputStream0 = null;
      try {
        readerInputStream0 = new ReaderInputStream((Reader) null, "UTF-8", (int) (byte)58, (int) (byte) (-52));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Output buffer size -52 is less than 4
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6tJ#2xT-/Bg22");
      ReaderInputStream readerInputStream0 = new ReaderInputStream((Reader) stringReader0);
      readerInputStream0.close();
      readerInputStream0.close();
      assertEquals(false, readerInputStream0.markSupported());
  }

  @Test
  public void test6()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      ReaderInputStream readerInputStream0 = new ReaderInputStream((Reader) stringReader0);
      assertNotNull(readerInputStream0);
      
      int int0 = readerInputStream0.read();
      assertEquals((-1), int0);
  }

  @Test
  public void test7()  throws Throwable  {
      ReaderInputStream readerInputStream0 = new ReaderInputStream((Reader) null);
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try {
        readerInputStream0.read(byteArray0, (-1557), (-1557));
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      InputStreamReader inputStreamReader0 = new InputStreamReader((InputStream) bufferedInputStream0);
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) inputStreamReader0);
      ReaderInputStream readerInputStream0 = new ReaderInputStream((Reader) lineNumberReader0);
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try {
        readerInputStream0.read(byteArray0, (int) (byte)0, (-908));
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      ReaderInputStream readerInputStream0 = new ReaderInputStream((Reader) stringReader0);
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try {
        readerInputStream0.read(byteArray0, 0, (int) (byte)29);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      ReaderInputStream readerInputStream0 = new ReaderInputStream((Reader) stringReader0);
      assertNotNull(readerInputStream0);
      
      byte[] byteArray0 = new byte[8];
      int int0 = readerInputStream0.read(byteArray0, 0, 0);
      assertEquals(0, int0);
  }

  @Test
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("W0");
      ReaderInputStream readerInputStream0 = new ReaderInputStream((Reader) stringReader0);
      assertEquals(-1, stringReader0.read());
      
      byte[] byteArray0 = new byte[19];
      readerInputStream0.read();
      int int0 = readerInputStream0.read(byteArray0);
      assertEquals((-1), int0);
  }

  @Test
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6tJ#2xT-/Bg22");
      ReaderInputStream readerInputStream0 = new ReaderInputStream((Reader) stringReader0);
      long long0 = readerInputStream0.skip(1L);
      assertEquals(-1, stringReader0.read());
      assertEquals(1L, long0);
  }

  @Test
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!b^'HYX,;BqVZmqoy'");
      ReaderInputStream readerInputStream0 = new ReaderInputStream((Reader) stringReader0);
      // Undeclared exception!
      try {
        readerInputStream0.skip((-169L));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }

  @Test
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6tJ#2xT-/Bg22");
      ReaderInputStream readerInputStream0 = new ReaderInputStream((Reader) stringReader0);
      readerInputStream0.skip(0L);
      assertEquals(-1, stringReader0.read());
  }

  @Test
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      ReaderInputStream readerInputStream0 = new ReaderInputStream((Reader) charArrayReader0);
      assertEquals(-1, charArrayReader0.read());
      
      long long0 = readerInputStream0.skip((long) ',');
      assertEquals(0L, long0);
  }
}
