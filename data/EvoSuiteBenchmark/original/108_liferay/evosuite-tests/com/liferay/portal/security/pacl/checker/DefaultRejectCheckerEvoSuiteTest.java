/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.security.pacl.checker;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.security.pacl.checker.DefaultRejectChecker;
import java.io.ObjectStreamConstants;
import java.io.SerializablePermission;
import java.security.AllPermission;
import java.security.Permission;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DefaultRejectCheckerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DefaultRejectChecker defaultRejectChecker0 = new DefaultRejectChecker();
      defaultRejectChecker0.afterPropertiesSet();
  }

  @Test
  public void test1()  throws Throwable  {
      DefaultRejectChecker defaultRejectChecker0 = new DefaultRejectChecker();
      AllPermission allPermission0 = new AllPermission();
      // Undeclared exception!
      try {
        defaultRejectChecker0.checkPermission((Permission) allPermission0);
        fail("Expecting exception: SecurityException");
      } catch(SecurityException e) {
        /*
         * Permission java.security.AllPermission attempted to <all permissions> on <all actions>
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      DefaultRejectChecker defaultRejectChecker0 = new DefaultRejectChecker();
      SerializablePermission serializablePermission0 = ObjectStreamConstants.SUBSTITUTION_PERMISSION;
      // Undeclared exception!
      try {
        defaultRejectChecker0.checkPermission((Permission) serializablePermission0);
        fail("Expecting exception: SecurityException");
      } catch(SecurityException e) {
        /*
         * Permission java.io.SerializablePermission attempted to enableSubstitution
         */
      }
  }
}
