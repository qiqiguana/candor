/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.search.lucene;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.search.lucene.PerFieldAnalyzer;
import java.io.IOException;
import java.io.Reader;
import java.util.Hashtable;
import java.util.Map;
import java.util.Set;
import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.KeywordAnalyzer;
import org.apache.lucene.analysis.StopAnalyzer;
import org.apache.lucene.analysis.StopFilter;
import org.apache.lucene.document.Fieldable;
import org.apache.lucene.document.NumericField;
import org.apache.lucene.util.Version;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PerFieldAnalyzerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Version version0 = Version.LUCENE_29;
      StopAnalyzer stopAnalyzer0 = new StopAnalyzer(version0, (Set<?>) null);
      Hashtable<String, Analyzer> hashtable0 = new Hashtable<String, Analyzer>();
      PerFieldAnalyzer perFieldAnalyzer0 = new PerFieldAnalyzer((Analyzer) stopAnalyzer0, (Map<String, Analyzer>) hashtable0);
      perFieldAnalyzer0.addAnalyzer("~^(7Q>xg!7~#e//Jm", (Analyzer) stopAnalyzer0);
      perFieldAnalyzer0.reusableTokenStream("~^(7Q>xg!7~#e//Jm", (Reader) null);
      assertEquals(false, hashtable0.isEmpty());
      assertEquals(1, hashtable0.size());
  }

  @Test
  public void test1()  throws Throwable  {
      Version version0 = Version.LUCENE_29;
      StopAnalyzer stopAnalyzer0 = new StopAnalyzer(version0, (Set<?>) null);
      Hashtable<String, Analyzer> hashtable0 = new Hashtable<String, Analyzer>();
      PerFieldAnalyzer perFieldAnalyzer0 = new PerFieldAnalyzer((Analyzer) stopAnalyzer0, (Map<String, Analyzer>) hashtable0);
      StopFilter stopFilter0 = (StopFilter)perFieldAnalyzer0.reusableTokenStream("~^(7Q>xg!7~#e//Jm", (Reader) null);
      assertEquals(true, stopFilter0.getEnablePositionIncrements());
  }

  @Test
  public void test2()  throws Throwable  {
      KeywordAnalyzer keywordAnalyzer0 = new KeywordAnalyzer();
      PerFieldAnalyzer perFieldAnalyzer0 = new PerFieldAnalyzer((Analyzer) keywordAnalyzer0, (Map<String, Analyzer>) null);
      // Undeclared exception!
      try {
        perFieldAnalyzer0.tokenStream("xrMa(cRomag,n", (Reader) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      KeywordAnalyzer keywordAnalyzer0 = new KeywordAnalyzer();
      PerFieldAnalyzer perFieldAnalyzer0 = new PerFieldAnalyzer((Analyzer) keywordAnalyzer0, (Map<String, Analyzer>) null);
      // Undeclared exception!
      try {
        perFieldAnalyzer0.getPositionIncrementGap("Xi");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      Version version0 = Version.LUCENE_29;
      NumericField numericField0 = new NumericField("~^(7Q>xg!7~#e//Jm");
      StopAnalyzer stopAnalyzer0 = new StopAnalyzer(version0, (Set<?>) null);
      Hashtable<String, Analyzer> hashtable0 = new Hashtable<String, Analyzer>();
      PerFieldAnalyzer perFieldAnalyzer0 = new PerFieldAnalyzer((Analyzer) stopAnalyzer0, (Map<String, Analyzer>) hashtable0);
      int int0 = perFieldAnalyzer0.getOffsetGap((Fieldable) numericField0);
      assertEquals(1, int0);
  }
}
