/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.scheduler;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.scheduler.CronText;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.TimeZone;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class CronTextEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance(timeZone0);
      CronText cronText0 = new CronText((Calendar) gregorianCalendar0, 6, 6);
      cronText0.setStartDate((Calendar) gregorianCalendar0);
      assertEquals(1372741007869L, gregorianCalendar0.getTimeInMillis());
      assertEquals("47 56 5 2 7/6 ? *", cronText0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar();
      CronText cronText0 = new CronText((Calendar) gregorianCalendar0);
      cronText0.setInterval(3);
      assertEquals(1372741026222L, gregorianCalendar0.getTimeInMillis());
      assertEquals("java.util.GregorianCalendar[time=1372741026222,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GB-Eire\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=GB-Eire,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=57,SECOND=6,MILLISECOND=222,ZONE_OFFSET=0,DST_OFFSET=3600000]", gregorianCalendar0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      Locale locale0 = new Locale("w");
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance(locale0);
      CronText cronText0 = new CronText((Calendar) gregorianCalendar0, 7, (-17));
      GregorianCalendar gregorianCalendar1 = (GregorianCalendar)cronText0.getStartDate();
      assertEquals("java.util.GregorianCalendar[time=1372741044128,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GB-Eire\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=GB-Eire,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=57,SECOND=24,MILLISECOND=128,ZONE_OFFSET=0,DST_OFFSET=3600000]", gregorianCalendar0.toString());
      assertEquals(1372741044128L, gregorianCalendar1.getTimeInMillis());
  }

  @Test
  public void test3()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      CronText cronText0 = new CronText((Calendar) gregorianCalendar0, 2, 2);
      int int0 = cronText0.getInterval();
      assertEquals("java.util.GregorianCalendar[time=1372741067222,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GB-Eire\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=GB-Eire,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=57,SECOND=47,MILLISECOND=222,ZONE_OFFSET=0,DST_OFFSET=3600000]", gregorianCalendar0.toString());
      assertEquals(2, int0);
  }

  @Test
  public void test4()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar();
      CronText cronText0 = new CronText((Calendar) gregorianCalendar0);
      int int0 = cronText0.getFrequency();
      assertEquals("java.util.GregorianCalendar[time=1372741084591,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GB-Eire\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=GB-Eire,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=58,SECOND=4,MILLISECOND=591,ZONE_OFFSET=0,DST_OFFSET=3600000]", gregorianCalendar0.toString());
      assertEquals(1, int0);
  }

  @Test
  public void test5()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      CronText cronText0 = new CronText((Calendar) gregorianCalendar0, 4, 4);
      String string0 = cronText0.toString();
      assertEquals("java.util.GregorianCalendar[time=1372741102416,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GB-Eire\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=GB-Eire,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=58,SECOND=22,MILLISECOND=416,ZONE_OFFSET=0,DST_OFFSET=3600000]", gregorianCalendar0.toString());
      assertEquals("22 58 5 2/4 * ? *", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar();
      CronText cronText0 = new CronText((Calendar) gregorianCalendar0, 3, 3);
      String string0 = cronText0.toString();
      assertEquals("java.util.GregorianCalendar[time=1372741120498,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GB-Eire\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=GB-Eire,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=58,SECOND=40,MILLISECOND=498,ZONE_OFFSET=0,DST_OFFSET=3600000]", gregorianCalendar0.toString());
      assertEquals("40 * */3 * * ? *", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      Locale locale0 = new Locale("=fa'fIAlse");
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance(locale0);
      CronText cronText0 = new CronText((Calendar) gregorianCalendar0, 5, 5);
      String string0 = cronText0.toString();
      assertEquals(1372741138462L, gregorianCalendar0.getTimeInMillis());
      assertEquals("58 58 5 2/35 * ? *", string0);
  }

  @Test
  public void test8()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar();
      CronText cronText0 = new CronText((Calendar) gregorianCalendar0);
      // Undeclared exception!
      try {
        cronText0.setFrequency(17);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * 17
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar();
      CronText cronText0 = new CronText((Calendar) gregorianCalendar0, 7, 7);
      String string0 = cronText0.toString();
      assertEquals(1372741174389L, gregorianCalendar0.getTimeInMillis());
      assertEquals("34 59 5 2 7 ? 2013/7", string0);
  }

  @Test
  public void test10()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar();
      CronText cronText0 = new CronText((Calendar) gregorianCalendar0);
      String string0 = cronText0.toString();
      assertEquals(1372741192620L, gregorianCalendar0.getTimeInMillis());
      assertEquals("52 59 5 2 7 ? 2013", string0);
  }

  @Test
  public void test11()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      CronText cronText0 = new CronText((Calendar) gregorianCalendar0, 2, 2);
      String string0 = cronText0.toString();
      assertEquals("java.util.GregorianCalendar[time=1372741210803,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GB-Eire\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=GB-Eire,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=0,SECOND=10,MILLISECOND=803,ZONE_OFFSET=0,DST_OFFSET=3600000]", gregorianCalendar0.toString());
      assertEquals("10 */2 * * * ? *", string0);
  }

  @Test
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance(timeZone0);
      CronText cronText0 = new CronText((Calendar) gregorianCalendar0, 6, 6);
      String string0 = cronText0.toString();
      assertEquals("java.util.GregorianCalendar[time=1372741228930,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GB-Eire\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=GB-Eire,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=0,SECOND=28,MILLISECOND=930,ZONE_OFFSET=0,DST_OFFSET=3600000]", gregorianCalendar0.toString());
      assertEquals("28 0 6 2 7/6 ? *", string0);
  }
}
