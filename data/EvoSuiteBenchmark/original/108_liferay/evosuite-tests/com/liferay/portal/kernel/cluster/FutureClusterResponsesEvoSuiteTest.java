/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.cluster;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.cluster.Address;
import com.liferay.portal.kernel.cluster.ClusterNodeResponse;
import com.liferay.portal.kernel.cluster.ClusterNodeResponses;
import com.liferay.portal.kernel.cluster.FutureClusterResponses;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.CancellationException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class FutureClusterResponsesEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LinkedList<Address> linkedList0 = new LinkedList<Address>();
      FutureClusterResponses futureClusterResponses0 = new FutureClusterResponses((List<Address>) linkedList0);
      boolean boolean0 = futureClusterResponses0.expectsReply((Address) null);
      assertEquals(true, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      LinkedList<Address> linkedList0 = new LinkedList<Address>();
      FutureClusterResponses futureClusterResponses0 = new FutureClusterResponses((List<Address>) linkedList0);
      boolean boolean0 = futureClusterResponses0.isCancelled();
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      LinkedList<Address> linkedList0 = new LinkedList<Address>();
      FutureClusterResponses futureClusterResponses0 = new FutureClusterResponses((List<Address>) linkedList0);
      futureClusterResponses0.addExpectedReplyAddress((Address) null);
      assertEquals(true, futureClusterResponses0.isDone());
  }

  @Test
  public void test3()  throws Throwable  {
      LinkedList<Address> linkedList0 = new LinkedList<Address>();
      FutureClusterResponses futureClusterResponses0 = new FutureClusterResponses((List<Address>) linkedList0);
      // Undeclared exception!
      try {
        futureClusterResponses0.addClusterNodeResponse((ClusterNodeResponse) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      LinkedList<Address> linkedList0 = new LinkedList<Address>();
      FutureClusterResponses futureClusterResponses0 = new FutureClusterResponses((List<Address>) linkedList0);
      BlockingQueue<ClusterNodeResponse> blockingQueue0 = futureClusterResponses0.getPartialResults();
      assertEquals(2147483647, blockingQueue0.remainingCapacity());
  }

  @Test
  public void test5()  throws Throwable  {
      LinkedList<Address> linkedList0 = new LinkedList<Address>();
      linkedList0.add((Address) null);
      FutureClusterResponses futureClusterResponses0 = new FutureClusterResponses((List<Address>) linkedList0);
      futureClusterResponses0.cancel(false);
      boolean boolean0 = futureClusterResponses0.cancel(true);
      assertEquals(true, futureClusterResponses0.isCancelled());
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      LinkedList<Address> linkedList0 = new LinkedList<Address>();
      FutureClusterResponses futureClusterResponses0 = new FutureClusterResponses((List<Address>) linkedList0);
      boolean boolean0 = futureClusterResponses0.cancel(false);
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      LinkedList<Address> linkedList0 = new LinkedList<Address>();
      FutureClusterResponses futureClusterResponses0 = new FutureClusterResponses((List<Address>) linkedList0);
      ClusterNodeResponses clusterNodeResponses0 = futureClusterResponses0.get();
      assertEquals(0, clusterNodeResponses0.size());
  }

  @Test
  public void test8()  throws Throwable  {
      LinkedList<Address> linkedList0 = new LinkedList<Address>();
      linkedList0.add((Address) null);
      FutureClusterResponses futureClusterResponses0 = new FutureClusterResponses((List<Address>) linkedList0);
      futureClusterResponses0.cancel(false);
      // Undeclared exception!
      try {
        futureClusterResponses0.get();
        fail("Expecting exception: CancellationException");
      } catch(CancellationException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      LinkedList<Address> linkedList0 = new LinkedList<Address>();
      FutureClusterResponses futureClusterResponses0 = new FutureClusterResponses((List<Address>) linkedList0);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ClusterNodeResponses clusterNodeResponses0 = futureClusterResponses0.get(712L, timeUnit0);
      assertEquals(0, clusterNodeResponses0.size());
  }

  @Test
  public void test10()  throws Throwable  {
      LinkedList<Address> linkedList0 = new LinkedList<Address>();
      linkedList0.add((Address) null);
      FutureClusterResponses futureClusterResponses0 = new FutureClusterResponses((List<Address>) linkedList0);
      futureClusterResponses0.cancel(false);
      boolean boolean0 = futureClusterResponses0.isDone();
      assertEquals(true, futureClusterResponses0.isCancelled());
      assertEquals(true, boolean0);
  }
}
