/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.concurrent;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.concurrent.TaskQueue;
import com.liferay.portal.kernel.concurrent.ThreadPoolExecutor;
import com.liferay.portal.kernel.concurrent.ThreadPoolHandlerAdapter;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.TimeUnit;
import org.jgroups.util.DefaultThreadFactory;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ThreadPoolExecutorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(1984, 1984, (long) 1984, timeUnit0, true, 1984);
      assertNotNull(threadPoolExecutor0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("r~lHOH");
      DefaultThreadFactory defaultThreadFactory0 = new DefaultThreadFactory(threadGroup0, "r~lHOH", true, false);
      Thread thread0 = defaultThreadFactory0.newThread(threadGroup0, (Runnable) null, "r~lHOH");
      threadPoolExecutor0.submit((Runnable) thread0);
      threadPoolExecutor0.adjustPoolSize(0, 1984);
      assertEquals(1, threadPoolExecutor0.getPoolSize());
      assertEquals(0L, threadPoolExecutor0.getCompletedTaskCount());
  }

  @Test
  public void test1()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(1, Integer.MAX_VALUE, 451L, timeUnit0, false, 1);
      assertNotNull(threadPoolExecutor0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("QLEGEg+T`");
      DefaultThreadFactory defaultThreadFactory0 = new DefaultThreadFactory(threadGroup0, "QLEGEg+T`", true, false);
      Thread thread0 = defaultThreadFactory0.newThread((Runnable) null);
      threadPoolExecutor0.submit((Runnable) thread0);
      long long0 = threadPoolExecutor0.getTaskCount();
      assertEquals(1, threadPoolExecutor0.getLargestPoolSize());
      assertEquals(0L, long0);
  }

  @Test
  public void test2()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(604, 1984, (long) 1984, timeUnit0, true, 604);
      assertNotNull(threadPoolExecutor0);
      
      int int0 = threadPoolExecutor0.getPoolSize();
      assertEquals(604, threadPoolExecutor0.getCorePoolSize());
      assertEquals(604, threadPoolExecutor0.getRemainingTaskQueueCapacity());
      assertEquals(0, int0);
      assertEquals(true, threadPoolExecutor0.isAllowCoreThreadTimeout());
      assertEquals(1984, threadPoolExecutor0.getMaxPoolSize());
  }

  @Test
  public void test3()  throws Throwable  {
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(5, 1025);
      assertNotNull(threadPoolExecutor0);
      
      ThreadFactory threadFactory0 = threadPoolExecutor0.getThreadFactory();
      assertEquals(2147483647, threadPoolExecutor0.getRemainingTaskQueueCapacity());
      assertEquals(1025, threadPoolExecutor0.getMaxPoolSize());
      assertNotNull(threadFactory0);
      assertEquals(false, threadPoolExecutor0.isAllowCoreThreadTimeout());
      assertEquals(5, threadPoolExecutor0.getCorePoolSize());
  }

  @Test
  public void test4()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(1984, 1984, (long) 1984, timeUnit0, true, 1984);
      assertNotNull(threadPoolExecutor0);
      
      ThreadPoolHandlerAdapter threadPoolHandlerAdapter0 = (ThreadPoolHandlerAdapter)threadPoolExecutor0.getThreadPoolHandler();
      assertNotNull(threadPoolHandlerAdapter0);
      assertEquals(1984, threadPoolExecutor0.getMaxPoolSize());
      assertEquals(true, threadPoolExecutor0.isAllowCoreThreadTimeout());
      assertEquals(1984, threadPoolExecutor0.getRemainingTaskQueueCapacity());
      assertEquals(1984, threadPoolExecutor0.getCorePoolSize());
  }

  @Test
  public void test5()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(604, 1984, (long) 1984, timeUnit0, true, 604);
      assertNotNull(threadPoolExecutor0);
      
      TaskQueue<Runnable> taskQueue0 = threadPoolExecutor0.getTaskQueue();
      assertEquals(1984, threadPoolExecutor0.getMaxPoolSize());
      assertEquals(true, threadPoolExecutor0.isAllowCoreThreadTimeout());
      assertEquals(604, threadPoolExecutor0.getCorePoolSize());
      assertEquals(604, threadPoolExecutor0.getRemainingTaskQueueCapacity());
      assertNotNull(taskQueue0);
  }

  @Test
  public void test6()  throws Throwable  {
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor((-1352), (-1352));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor(1, 0, (-1L), timeUnit0, false, (-1308));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor(2040, 7);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor(3, 3, (-1L), timeUnit0, false, 107);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(1, 1630);
      assertNotNull(threadPoolExecutor0);
      
      threadPoolExecutor0.adjustPoolSize(44, 303);
      assertEquals(44, threadPoolExecutor0.getCorePoolSize());
      assertEquals(303, threadPoolExecutor0.getMaxPoolSize());
  }

  @Test
  public void test11()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(1984, 1984, (long) 1984, timeUnit0, true, 1984);
      assertNotNull(threadPoolExecutor0);
      
      boolean boolean0 = threadPoolExecutor0.isShutdown();
      assertEquals(true, threadPoolExecutor0.isAllowCoreThreadTimeout());
      assertEquals(false, boolean0);
      assertEquals(1984, threadPoolExecutor0.getCorePoolSize());
      assertEquals(1984, threadPoolExecutor0.getRemainingTaskQueueCapacity());
      assertEquals(1984, threadPoolExecutor0.getMaxPoolSize());
  }

  @Test
  public void test12()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(1984, 1984, (long) 1984, timeUnit0, true, 1984);
      assertNotNull(threadPoolExecutor0);
      
      boolean boolean0 = threadPoolExecutor0.isTerminated();
      assertEquals(false, boolean0);
      assertEquals(true, threadPoolExecutor0.isAllowCoreThreadTimeout());
      assertEquals(1984, threadPoolExecutor0.getMaxPoolSize());
      assertEquals(1984, threadPoolExecutor0.getCorePoolSize());
      assertEquals(1984, threadPoolExecutor0.getRemainingTaskQueueCapacity());
  }

  @Test
  public void test13()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(1984, 1984, (long) 1984, timeUnit0, true, 1984);
      assertNotNull(threadPoolExecutor0);
      
      threadPoolExecutor0.setKeepAliveTime((long) 1984, timeUnit0);
      assertEquals(true, threadPoolExecutor0.isAllowCoreThreadTimeout());
      assertEquals(1984, threadPoolExecutor0.getCorePoolSize());
      assertEquals(1984, threadPoolExecutor0.getMaxPoolSize());
      assertEquals(1984, threadPoolExecutor0.getRemainingTaskQueueCapacity());
  }

  @Test
  public void test14()  throws Throwable  {
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(5, 1025);
      assertNotNull(threadPoolExecutor0);
      
      threadPoolExecutor0.shutdown();
      assertEquals(true, threadPoolExecutor0.isShutdown());
      assertEquals(true, threadPoolExecutor0.isTerminated());
  }

  @Test
  public void test15()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(604, 1984, (long) 1984, timeUnit0, true, 604);
      assertNotNull(threadPoolExecutor0);
      
      threadPoolExecutor0.shutdownNow();
      assertEquals(true, threadPoolExecutor0.isShutdown());
      assertEquals(true, threadPoolExecutor0.isTerminated());
  }
}
