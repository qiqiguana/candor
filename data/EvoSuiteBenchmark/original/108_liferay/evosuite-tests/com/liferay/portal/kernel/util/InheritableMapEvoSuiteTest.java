/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.util.InheritableMap;
import java.util.HashMap;
import java.util.Map;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class InheritableMapEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      InheritableMap<String, Integer> inheritableMap0 = new InheritableMap<String, Integer>();
      InheritableMap<String, Object> inheritableMap1 = new InheritableMap<String, Object>((Map<? extends String, ?>) inheritableMap0);
      Map<String, Object> map0 = inheritableMap1.getParentMap();
      assertNull(map0);
  }

  @Test
  public void test1()  throws Throwable  {
      InheritableMap<Integer, Integer> inheritableMap0 = new InheritableMap<Integer, Integer>();
      inheritableMap0.clear();
      assertEquals(0, inheritableMap0.size());
  }

  @Test
  public void test2()  throws Throwable  {
      InheritableMap<Integer, Object> inheritableMap0 = new InheritableMap<Integer, Object>();
      InheritableMap<Integer, Integer> inheritableMap1 = new InheritableMap<Integer, Integer>();
      inheritableMap0.setParentMap((Map<? extends Integer, ?>) inheritableMap1);
      String string0 = inheritableMap0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      InheritableMap<HashMap<Integer, Object>, String> inheritableMap0 = new InheritableMap<HashMap<Integer, Object>, String>();
      boolean boolean0 = inheritableMap0.containsKey((Object) "{{}=Ki, }");
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      InheritableMap<Object, Integer> inheritableMap0 = new InheritableMap<Object, Integer>();
      InheritableMap<String, Integer> inheritableMap1 = new InheritableMap<String, Integer>();
      inheritableMap0.setParentMap((Map<?, ? extends Integer>) inheritableMap1);
      boolean boolean0 = inheritableMap0.containsKey((Object) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      InheritableMap<String, Integer> inheritableMap0 = new InheritableMap<String, Integer>();
      boolean boolean0 = inheritableMap0.containsValue((Object) "!Bjg]8 ?6Z}?");
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      InheritableMap<Object, Integer> inheritableMap0 = new InheritableMap<Object, Integer>();
      InheritableMap<String, Integer> inheritableMap1 = new InheritableMap<String, Integer>();
      inheritableMap0.setParentMap((Map<?, ? extends Integer>) inheritableMap1);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      boolean boolean0 = inheritableMap0.containsValue((Object) hashMap0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      InheritableMap<String, Object> inheritableMap0 = new InheritableMap<String, Object>();
      InheritableMap<String, String> inheritableMap1 = new InheritableMap<String, String>();
      inheritableMap0.setParentMap((Map<? extends String, ?>) inheritableMap1);
      inheritableMap1.put((String) null, "{{}=Ki, }");
      boolean boolean0 = inheritableMap0.containsValue((Object) "{{}=Ki, }");
      assertEquals(true, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      InheritableMap<HashMap<Integer, Object>, String> inheritableMap0 = new InheritableMap<HashMap<Integer, Object>, String>();
      InheritableMap<Integer, Object> inheritableMap1 = new InheritableMap<Integer, Object>();
      inheritableMap0.put((HashMap<Integer, Object>) inheritableMap1, "Ki");
      InheritableMap<String, Integer> inheritableMap2 = new InheritableMap<String, Integer>();
      InheritableMap<?, ?> inheritableMap3 = (InheritableMap<?, ?>)inheritableMap0.get((Object) inheritableMap2);
      assertEquals("Ki", inheritableMap3);
  }

  @Test
  public void test9()  throws Throwable  {
      InheritableMap<Object, Integer> inheritableMap0 = new InheritableMap<Object, Integer>();
      InheritableMap<String, Integer> inheritableMap1 = new InheritableMap<String, Integer>();
      inheritableMap0.setParentMap((Map<?, ? extends Integer>) inheritableMap1);
      InheritableMap<HashMap<HashMap<Object, Object>, HashMap<String, Object>>, HashMap<String, Object>> inheritableMap2 = new InheritableMap<HashMap<HashMap<Object, Object>, HashMap<String, Object>>, HashMap<String, Object>>();
      inheritableMap0.get((Object) inheritableMap2);
  }

  @Test
  public void test10()  throws Throwable  {
      InheritableMap<HashMap<Integer, Object>, String> inheritableMap0 = new InheritableMap<HashMap<Integer, Object>, String>();
      InheritableMap<Integer, Object> inheritableMap1 = new InheritableMap<Integer, Object>();
      inheritableMap0.put((HashMap<Integer, Object>) inheritableMap1, "Ki");
      InheritableMap<String, String> inheritableMap2 = new InheritableMap<String, String>();
      InheritableMap<?, ?> inheritableMap3 = (InheritableMap<?, ?>)inheritableMap0.remove((Object) inheritableMap2);
      assertEquals("Ki", inheritableMap3);
  }

  @Test
  public void test11()  throws Throwable  {
      InheritableMap<Object, Integer> inheritableMap0 = new InheritableMap<Object, Integer>();
      InheritableMap<String, Integer> inheritableMap1 = new InheritableMap<String, Integer>();
      inheritableMap0.setParentMap((Map<?, ? extends Integer>) inheritableMap1);
      inheritableMap0.remove((Object) "{}");
  }

  @Test
  public void test12()  throws Throwable  {
      InheritableMap<HashMap<Integer, Object>, String> inheritableMap0 = new InheritableMap<HashMap<Integer, Object>, String>();
      InheritableMap<Integer, Object> inheritableMap1 = new InheritableMap<Integer, Object>();
      inheritableMap0.put((HashMap<Integer, Object>) inheritableMap1, "Ki");
      String string0 = inheritableMap0.toString();
      assertNotNull(string0);
      assertEquals("{{}=Ki, }", inheritableMap0.toString());
      assertEquals("{{}=Ki, }", string0);
  }
}
