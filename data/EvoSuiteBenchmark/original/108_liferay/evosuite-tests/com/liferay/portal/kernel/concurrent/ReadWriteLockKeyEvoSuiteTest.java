/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.concurrent;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.concurrent.ReadWriteLockKey;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ReadWriteLockKeyEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ReadWriteLockKey<String> readWriteLockKey0 = new ReadWriteLockKey<String>("lJ}6dsk", false);
      int int0 = readWriteLockKey0.hashCode();
      assertEquals((-698144475), int0);
      assertEquals(false, readWriteLockKey0.isWriteLock());
  }

  @Test
  public void test1()  throws Throwable  {
      ReadWriteLockKey<Object> readWriteLockKey0 = new ReadWriteLockKey<Object>((Object) "%L8~", true);
      boolean boolean0 = readWriteLockKey0.isWriteLock();
      assertEquals(true, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      Object object0 = new Object();
      ReadWriteLockKey<Object> readWriteLockKey0 = new ReadWriteLockKey<Object>(object0, true);
      Object object1 = readWriteLockKey0.getKey();
      assertNotNull(object1);
      assertEquals(true, readWriteLockKey0.isWriteLock());
  }

  @Test
  public void test3()  throws Throwable  {
      ReadWriteLockKey<Integer> readWriteLockKey0 = new ReadWriteLockKey<Integer>((Integer) null, true);
      ReadWriteLockKey<ReadWriteLockKey<Object>> readWriteLockKey1 = new ReadWriteLockKey<ReadWriteLockKey<Object>>((ReadWriteLockKey<Object>) null, true);
      boolean boolean0 = readWriteLockKey0.equals((Object) readWriteLockKey1);
      assertEquals(true, readWriteLockKey0.isWriteLock());
      assertEquals(true, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      ReadWriteLockKey<String> readWriteLockKey0 = new ReadWriteLockKey<String>((String) null, true);
      boolean boolean0 = readWriteLockKey0.equals((Object) null);
      assertEquals(false, boolean0);
      assertEquals(true, readWriteLockKey0.isWriteLock());
  }

  @Test
  public void test5()  throws Throwable  {
      ReadWriteLockKey<ReadWriteLockKey<String>> readWriteLockKey0 = new ReadWriteLockKey<ReadWriteLockKey<String>>((ReadWriteLockKey<String>) null, true);
      ReadWriteLockKey<Object> readWriteLockKey1 = new ReadWriteLockKey<Object>((Object) readWriteLockKey0, true);
      Object object0 = new Object();
      boolean boolean0 = readWriteLockKey1.equals(object0);
      assertEquals(false, boolean0);
      assertEquals(true, readWriteLockKey0.isWriteLock());
  }

  @Test
  public void test6()  throws Throwable  {
      ReadWriteLockKey<String> readWriteLockKey0 = new ReadWriteLockKey<String>((String) null, true);
      ReadWriteLockKey<ReadWriteLockKey<String>> readWriteLockKey1 = new ReadWriteLockKey<ReadWriteLockKey<String>>(readWriteLockKey0, true);
      boolean boolean0 = readWriteLockKey1.equals((Object) readWriteLockKey0);
      assertEquals(false, boolean0);
      assertEquals(true, readWriteLockKey1.isWriteLock());
  }
}
