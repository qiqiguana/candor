/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.dao.orm.hibernate;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.dao.orm.hibernate.TypeTranslator;
import com.liferay.portal.kernel.dao.orm.Type;
import java.io.Serializable;
import org.hibernate.type.CalendarType;
import org.hibernate.type.CharacterArrayType;
import org.hibernate.type.CharacterType;
import org.hibernate.type.ClassType;
import org.hibernate.type.ClobType;
import org.hibernate.type.CurrencyType;
import org.hibernate.type.DateType;
import org.hibernate.type.DoubleType;
import org.hibernate.type.FloatType;
import org.hibernate.type.ImageType;
import org.hibernate.type.IntegerType;
import org.hibernate.type.LocaleType;
import org.hibernate.type.LongType;
import org.hibernate.type.MaterializedBlobType;
import org.hibernate.type.MaterializedClobType;
import org.hibernate.type.NumericBooleanType;
import org.hibernate.type.SerializableType;
import org.hibernate.type.ShortType;
import org.hibernate.type.StringType;
import org.hibernate.type.TextType;
import org.hibernate.type.TimeType;
import org.hibernate.type.TimeZoneType;
import org.hibernate.type.TimestampType;
import org.hibernate.type.TrueFalseType;
import org.hibernate.type.UUIDBinaryType;
import org.hibernate.type.UUIDCharType;
import org.hibernate.type.UrlType;
import org.hibernate.type.WrapperBinaryType;
import org.hibernate.type.YesNoType;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TypeTranslatorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      TypeTranslator typeTranslator0 = new TypeTranslator();
      assertNotNull(typeTranslator0);
  }

  @Test
  public void test1()  throws Throwable  {
      Type type0 = Type.CHARACTER_ARRAY;
      CharacterArrayType characterArrayType0 = (CharacterArrayType)TypeTranslator.translate(type0);
      assertEquals(false, characterArrayType0.isCollectionType());
  }

  @Test
  public void test2()  throws Throwable  {
      Type type0 = Type.BIG_DECIMAL;
      SerializableType<?> serializableType0 = (SerializableType<?>)TypeTranslator.translate(type0);
      assertEquals(false, serializableType0.isAssociationType());
  }

  @Test
  public void test3()  throws Throwable  {
      Type type0 = Type.BIG_INTEGER;
      SerializableType<?> serializableType0 = (SerializableType<?>)TypeTranslator.translate(type0);
      assertEquals(2, serializableType0.sqlType());
  }

  @Test
  public void test4()  throws Throwable  {
      Type type0 = Type.BINARY;
      SerializableType<?> serializableType0 = (SerializableType<?>)TypeTranslator.translate(type0);
      assertEquals(false, serializableType0.isAssociationType());
  }

  @Test
  public void test5()  throws Throwable  {
      Type type0 = Type.BLOB;
      SerializableType<?> serializableType0 = (SerializableType<?>)TypeTranslator.translate(type0);
      assertEquals(false, serializableType0.isCollectionType());
  }

  @Test
  public void test6()  throws Throwable  {
      Type type0 = Type.BOOLEAN;
      SerializableType<?> serializableType0 = (SerializableType<?>)TypeTranslator.translate(type0);
      assertEquals(false, serializableType0.isMutable());
  }

  @Test
  public void test7()  throws Throwable  {
      Type type0 = Type.BYTE;
      SerializableType<?> serializableType0 = (SerializableType<?>)TypeTranslator.translate(type0);
      assertEquals(false, serializableType0.isEntityType());
  }

  @Test
  public void test8()  throws Throwable  {
      Type type0 = Type.CALENDAR;
      SerializableType<?> serializableType0 = (SerializableType<?>)TypeTranslator.translate(type0);
      assertEquals(false, serializableType0.isAnyType());
  }

  @Test
  public void test9()  throws Throwable  {
      Type type0 = Type.CALENDAR_DATE;
      SerializableType<?> serializableType0 = (SerializableType<?>)TypeTranslator.translate(type0);
      assertEquals("calendar_date", serializableType0.getName());
  }

  @Test
  public void test10()  throws Throwable  {
      Type type0 = Type.CHAR_ARRAY;
      SerializableType<?> serializableType0 = (SerializableType<?>)TypeTranslator.translate(type0);
      assertEquals(false, serializableType0.isAnyType());
  }

  @Test
  public void test11()  throws Throwable  {
      Type type0 = Type.CHARACTER;
      CharacterType characterType0 = (CharacterType)TypeTranslator.translate(type0);
      assertEquals(false, characterType0.isCollectionType());
  }

  @Test
  public void test12()  throws Throwable  {
      Type type0 = Type.YES_NO;
      YesNoType yesNoType0 = (YesNoType)TypeTranslator.translate(type0);
      assertEquals(false, yesNoType0.isCollectionType());
  }

  @Test
  public void test13()  throws Throwable  {
      Type type0 = Type.CLASS;
      ClassType classType0 = (ClassType)TypeTranslator.translate(type0);
      assertEquals(false, classType0.isCollectionType());
  }

  @Test
  public void test14()  throws Throwable  {
      Type type0 = Type.CLOB;
      ClobType clobType0 = (ClobType)TypeTranslator.translate(type0);
      assertEquals(false, clobType0.isComponentType());
  }

  @Test
  public void test15()  throws Throwable  {
      Type type0 = Type.CURRENCY;
      CurrencyType currencyType0 = (CurrencyType)TypeTranslator.translate(type0);
      assertEquals(false, currencyType0.isAssociationType());
  }

  @Test
  public void test16()  throws Throwable  {
      Type type0 = Type.DATE;
      DateType dateType0 = (DateType)TypeTranslator.translate(type0);
      assertEquals(false, dateType0.isAssociationType());
  }

  @Test
  public void test17()  throws Throwable  {
      Type type0 = Type.DOUBLE;
      DoubleType doubleType0 = (DoubleType)TypeTranslator.translate(type0);
      assertEquals(false, doubleType0.isMutable());
  }

  @Test
  public void test18()  throws Throwable  {
      Type type0 = Type.FLOAT;
      FloatType floatType0 = (FloatType)TypeTranslator.translate(type0);
      assertEquals(false, floatType0.isAssociationType());
  }

  @Test
  public void test19()  throws Throwable  {
      Type type0 = Type.IMAGE;
      ImageType imageType0 = (ImageType)TypeTranslator.translate(type0);
      assertEquals(false, imageType0.isXMLElement());
  }

  @Test
  public void test20()  throws Throwable  {
      Type type0 = Type.INTEGER;
      IntegerType integerType0 = (IntegerType)TypeTranslator.translate(type0);
      assertEquals("integer", integerType0.getName());
  }

  @Test
  public void test21()  throws Throwable  {
      Type type0 = Type.LOCALE;
      LocaleType localeType0 = (LocaleType)TypeTranslator.translate(type0);
      assertEquals(false, localeType0.isEntityType());
  }

  @Test
  public void test22()  throws Throwable  {
      Type type0 = Type.LONG;
      LongType longType0 = (LongType)TypeTranslator.translate(type0);
      assertEquals(false, longType0.isCollectionType());
  }

  @Test
  public void test23()  throws Throwable  {
      Type type0 = Type.MATERIALIZED_BLOB;
      MaterializedBlobType materializedBlobType0 = (MaterializedBlobType)TypeTranslator.translate(type0);
      assertEquals(false, materializedBlobType0.isXMLElement());
  }

  @Test
  public void test24()  throws Throwable  {
      Type type0 = Type.MATERIALIZED_CLOB;
      MaterializedClobType materializedClobType0 = (MaterializedClobType)TypeTranslator.translate(type0);
      assertEquals(false, materializedClobType0.isCollectionType());
  }

  @Test
  public void test25()  throws Throwable  {
      Type type0 = Type.NUMERIC_BOOLEAN;
      NumericBooleanType numericBooleanType0 = (NumericBooleanType)TypeTranslator.translate(type0);
      assertEquals(false, numericBooleanType0.isXMLElement());
  }

  @Test
  public void test26()  throws Throwable  {
      Type type0 = Type.SERIALIZABLE;
      SerializableType<Serializable> serializableType0 = (SerializableType<Serializable>)TypeTranslator.translate(type0);
      assertEquals(-3, serializableType0.sqlType());
  }

  @Test
  public void test27()  throws Throwable  {
      Type type0 = Type.SHORT;
      ShortType shortType0 = (ShortType)TypeTranslator.translate(type0);
      assertEquals("short", shortType0.getName());
  }

  @Test
  public void test28()  throws Throwable  {
      Type type0 = Type.STRING;
      StringType stringType0 = (StringType)TypeTranslator.translate(type0);
      assertEquals(false, stringType0.isComponentType());
  }

  @Test
  public void test29()  throws Throwable  {
      Type type0 = Type.TEXT;
      TextType textType0 = (TextType)TypeTranslator.translate(type0);
      assertEquals(false, textType0.isAnyType());
  }

  @Test
  public void test30()  throws Throwable  {
      Type type0 = Type.TIME;
      TimeType timeType0 = (TimeType)TypeTranslator.translate(type0);
      assertEquals(false, timeType0.isEntityType());
  }

  @Test
  public void test31()  throws Throwable  {
      Type type0 = Type.TIMESTAMP;
      TimestampType timestampType0 = (TimestampType)TypeTranslator.translate(type0);
      assertEquals(false, timestampType0.isComponentType());
  }

  @Test
  public void test32()  throws Throwable  {
      Type type0 = Type.TIMEZONE;
      TimeZoneType timeZoneType0 = (TimeZoneType)TypeTranslator.translate(type0);
      assertEquals(false, timeZoneType0.isXMLElement());
  }

  @Test
  public void test33()  throws Throwable  {
      Type type0 = Type.TRUE_FALSE;
      TrueFalseType trueFalseType0 = (TrueFalseType)TypeTranslator.translate(type0);
      assertEquals(false, trueFalseType0.isComponentType());
  }

  @Test
  public void test34()  throws Throwable  {
      Type type0 = Type.URL;
      UrlType urlType0 = (UrlType)TypeTranslator.translate(type0);
      assertEquals(false, urlType0.isEntityType());
  }

  @Test
  public void test35()  throws Throwable  {
      Type type0 = Type.UUID_BINARY;
      UUIDBinaryType uUIDBinaryType0 = (UUIDBinaryType)TypeTranslator.translate(type0);
      assertEquals(false, uUIDBinaryType0.isEntityType());
  }

  @Test
  public void test36()  throws Throwable  {
      Type type0 = Type.UUID_CHAR;
      UUIDCharType uUIDCharType0 = (UUIDCharType)TypeTranslator.translate(type0);
      assertEquals("uuid-char", uUIDCharType0.getName());
  }

  @Test
  public void test37()  throws Throwable  {
      Type type0 = Type.WRAPPER_BINARY;
      WrapperBinaryType wrapperBinaryType0 = (WrapperBinaryType)TypeTranslator.translate(type0);
      assertEquals(true, wrapperBinaryType0.isMutable());
  }

  @Test
  public void test38()  throws Throwable  {
      CalendarType calendarType0 = (CalendarType)TypeTranslator.translate((Type) null);
      assertNull(calendarType0);
  }
}
