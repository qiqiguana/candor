/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.security.auth;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.security.auth.AuthToken;
import com.liferay.portal.security.auth.AuthTokenWrapper;
import com.liferay.portal.security.auth.SessionAuthToken;
import javax.servlet.http.HttpServletRequest;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class AuthTokenWrapperEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      AuthTokenWrapper authTokenWrapper0 = new AuthTokenWrapper((AuthToken) null);
      // Undeclared exception!
      try {
        authTokenWrapper0.getToken((HttpServletRequest) null, 1712L, "BW");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      SessionAuthToken sessionAuthToken0 = new SessionAuthToken();
      AuthTokenWrapper authTokenWrapper0 = new AuthTokenWrapper((AuthToken) sessionAuthToken0);
      // Undeclared exception!
      try {
        authTokenWrapper0.getToken((HttpServletRequest) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      SessionAuthToken sessionAuthToken0 = new SessionAuthToken();
      AuthTokenWrapper authTokenWrapper0 = new AuthTokenWrapper((AuthToken) sessionAuthToken0);
      // Undeclared exception!
      try {
        authTokenWrapper0.check((HttpServletRequest) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      SessionAuthToken sessionAuthToken0 = new SessionAuthToken();
      AuthTokenWrapper authTokenWrapper0 = new AuthTokenWrapper((AuthToken) sessionAuthToken0);
      authTokenWrapper0.setAuthToken((AuthToken) sessionAuthToken0);
  }

  @Test
  public void test4()  throws Throwable  {
      AuthTokenWrapper authTokenWrapper0 = new AuthTokenWrapper((AuthToken) null);
      authTokenWrapper0.setAuthToken((AuthToken) null);
  }
}
