/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.security.pacl.checker;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.security.pacl.checker.SecurityChecker;
import java.security.AllPermission;
import java.security.Permission;
import java.security.SecurityPermission;
import javax.swing.event.HyperlinkEvent;
import org.jfree.data.general.DatasetChangeListener;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SecurityCheckerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SecurityChecker securityChecker0 = new SecurityChecker();
      securityChecker0.afterPropertiesSet();
      assertEquals(false, securityChecker0.hasGetPolicy());
  }

  @Test
  public void test1()  throws Throwable  {
      SecurityChecker securityChecker0 = new SecurityChecker();
      AllPermission allPermission0 = new AllPermission();
      // Undeclared exception!
      try {
        securityChecker0.checkPermission((Permission) allPermission0);
        fail("Expecting exception: SecurityException");
      } catch(SecurityException e) {
        /*
         * Attempted to <all permissions> on <all actions>
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      SecurityChecker securityChecker0 = new SecurityChecker();
      SecurityPermission securityPermission0 = new SecurityPermission("getPolicy", "getPolicy");
      // Undeclared exception!
      try {
        securityChecker0.checkPermission((Permission) securityPermission0);
        fail("Expecting exception: SecurityException");
      } catch(SecurityException e) {
        /*
         * Attempted to get the policy
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      SecurityPermission securityPermission0 = new SecurityPermission("setPolicy");
      SecurityChecker securityChecker0 = new SecurityChecker();
      // Undeclared exception!
      try {
        securityChecker0.checkPermission((Permission) securityPermission0);
        fail("Expecting exception: SecurityException");
      } catch(SecurityException e) {
        /*
         * Attempted to set the policy
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      SecurityChecker securityChecker0 = new SecurityChecker();
      Class<?> class0 = HyperlinkEvent.class;
      securityChecker0.logGetPolicy(class0, 0);
      assertEquals(false, securityChecker0.hasSetPolicy());
  }

  @Test
  public void test5()  throws Throwable  {
      SecurityChecker securityChecker0 = new SecurityChecker();
      Class<?> class0 = DatasetChangeListener.class;
      securityChecker0.logSetPolicy(class0, (-1));
      assertEquals(false, securityChecker0.hasGetPolicy());
  }
}
