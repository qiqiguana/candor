/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.mail;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.mail.Account;
import com.liferay.portal.kernel.mail.IMAPAccount;
import com.liferay.portal.kernel.mail.POPAccount;
import com.liferay.portal.kernel.mail.SMTPAccount;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class AccountEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      IMAPAccount iMAPAccount0 = (IMAPAccount)Account.getInstance("imapsH.CpZO");
      String string0 = iMAPAccount0.getProtocol();
      assertEquals(false, iMAPAccount0.isSecure());
      assertNotNull(string0);
      assertEquals(143, iMAPAccount0.getPort());
      assertEquals("imapsH.CpZO", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      SMTPAccount sMTPAccount0 = (SMTPAccount)Account.getInstance("smtps", 0);
      String string0 = sMTPAccount0.getHost();
      assertEquals("smtps", sMTPAccount0.getProtocol());
      assertEquals(465, sMTPAccount0.getPort());
      assertEquals(true, sMTPAccount0.isSecure());
      assertNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      IMAPAccount iMAPAccount0 = (IMAPAccount)Account.getInstance("imapsH.CpZO");
      assertNotNull(iMAPAccount0);
      
      int int0 = iMAPAccount0.getPort();
      assertEquals(143, int0);
      assertEquals("imapsH.CpZO", iMAPAccount0.getProtocol());
      assertEquals(false, iMAPAccount0.isSecure());
  }

  @Test
  public void test3()  throws Throwable  {
      SMTPAccount sMTPAccount0 = (SMTPAccount)Account.getInstance("lCeI", 461);
      assertNotNull(sMTPAccount0);
      
      sMTPAccount0.setPort(461);
      assertEquals("lCeI", sMTPAccount0.getProtocol());
      assertEquals(false, sMTPAccount0.isSecure());
      assertEquals(461, sMTPAccount0.getPort());
  }

  @Test
  public void test4()  throws Throwable  {
      IMAPAccount iMAPAccount0 = (IMAPAccount)Account.getInstance("imapsH.CpZO");
      assertNotNull(iMAPAccount0);
      
      iMAPAccount0.setHost("imapsH.CpZO");
      assertEquals(143, iMAPAccount0.getPort());
      assertEquals("imapsH.CpZO", iMAPAccount0.getProtocol());
      assertEquals(false, iMAPAccount0.isSecure());
      assertEquals("imapsH.CpZO", iMAPAccount0.getHost());
  }

  @Test
  public void test5()  throws Throwable  {
      SMTPAccount sMTPAccount0 = (SMTPAccount)Account.getInstance("YrH7ySX<:Q");
      assertNotNull(sMTPAccount0);
      
      String string0 = sMTPAccount0.getUser();
      assertEquals(25, sMTPAccount0.getPort());
      assertEquals(false, sMTPAccount0.isSecure());
      assertNull(string0);
      assertEquals("YrH7ySX<:Q", sMTPAccount0.getProtocol());
  }

  @Test
  public void test6()  throws Throwable  {
      SMTPAccount sMTPAccount0 = (SMTPAccount)Account.getInstance("smtps", 0);
      String string0 = sMTPAccount0.getPassword();
      assertEquals("smtps", sMTPAccount0.getProtocol());
      assertNull(string0);
      assertEquals(465, sMTPAccount0.getPort());
      assertEquals(true, sMTPAccount0.isSecure());
  }

  @Test
  public void test7()  throws Throwable  {
      IMAPAccount iMAPAccount0 = (IMAPAccount)Account.getInstance("imapsH.CpZO");
      assertNotNull(iMAPAccount0);
      
      iMAPAccount0.setPassword("imapsH.CpZO");
      iMAPAccount0.setUser("imapsH.CpZO");
      boolean boolean0 = iMAPAccount0.isRequiresAuthentication();
      assertEquals(true, iMAPAccount0.isRequiresAuthentication());
      assertEquals(true, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      IMAPAccount iMAPAccount0 = (IMAPAccount)Account.getInstance("imapsH.CpZO");
      assertNotNull(iMAPAccount0);
      
      boolean boolean0 = iMAPAccount0.isSecure();
      assertEquals(false, boolean0);
      assertEquals("imapsH.CpZO", iMAPAccount0.getProtocol());
      assertEquals(143, iMAPAccount0.getPort());
  }

  @Test
  public void test9()  throws Throwable  {
      IMAPAccount iMAPAccount0 = (IMAPAccount)Account.getInstance("imaps");
      assertEquals("imaps", iMAPAccount0.getProtocol());
      assertEquals(993, iMAPAccount0.getPort());
      assertNotNull(iMAPAccount0);
      assertEquals(true, iMAPAccount0.isSecure());
  }

  @Test
  public void test10()  throws Throwable  {
      IMAPAccount iMAPAccount0 = (IMAPAccount)Account.getInstance("imapsH.CpZO", 6);
      assertEquals(false, iMAPAccount0.isSecure());
      assertEquals("imapsH.CpZO", iMAPAccount0.getProtocol());
      assertEquals(6, iMAPAccount0.getPort());
  }

  @Test
  public void test11()  throws Throwable  {
      POPAccount pOPAccount0 = (POPAccount)Account.getInstance("pop3s");
      assertNotNull(pOPAccount0);
      assertEquals(995, pOPAccount0.getPort());
      assertEquals("pop3s", pOPAccount0.getProtocol());
      assertEquals(true, pOPAccount0.isSecure());
  }

  @Test
  public void test12()  throws Throwable  {
      POPAccount pOPAccount0 = (POPAccount)Account.getInstance("pop3", 1452);
      assertEquals(false, pOPAccount0.isSecure());
      assertEquals("pop3", pOPAccount0.getProtocol());
      assertEquals(1452, pOPAccount0.getPort());
      assertNotNull(pOPAccount0);
  }

  @Test
  public void test13()  throws Throwable  {
      SMTPAccount sMTPAccount0 = (SMTPAccount)Account.getInstance("lCeI", 461);
      assertNotNull(sMTPAccount0);
      
      boolean boolean0 = sMTPAccount0.isRequiresAuthentication();
      assertEquals(false, boolean0);
      assertEquals(false, sMTPAccount0.isSecure());
      assertEquals(461, sMTPAccount0.getPort());
      assertEquals("lCeI", sMTPAccount0.getProtocol());
  }

  @Test
  public void test14()  throws Throwable  {
      IMAPAccount iMAPAccount0 = (IMAPAccount)Account.getInstance("imapsH.CpZO");
      assertNotNull(iMAPAccount0);
      
      iMAPAccount0.setUser("imapsH.CpZO");
      boolean boolean0 = iMAPAccount0.isRequiresAuthentication();
      assertEquals("imapsH.CpZO", iMAPAccount0.getProtocol());
      assertEquals(false, iMAPAccount0.isSecure());
      assertEquals(143, iMAPAccount0.getPort());
      assertEquals("imapsH.CpZO", iMAPAccount0.getUser());
      assertEquals(false, boolean0);
  }
}
