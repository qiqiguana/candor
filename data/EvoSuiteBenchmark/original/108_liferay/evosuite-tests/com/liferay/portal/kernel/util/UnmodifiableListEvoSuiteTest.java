/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.util.UnmodifiableList;
import java.io.Serializable;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.testcase.TestCaseExecutor;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class UnmodifiableListEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnmodifiableList<Serializable> unmodifiableList0 = new UnmodifiableList<Serializable>((List<? extends Serializable>) linkedList0);
      boolean boolean0 = unmodifiableList0.containsAll((Collection<?>) linkedList0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnmodifiableList<String> unmodifiableList0 = new UnmodifiableList<String>((List<? extends String>) linkedList0);
      // Undeclared exception!
      try {
        unmodifiableList0.get(17);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 17, Size: 0
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnmodifiableList<Object> unmodifiableList0 = new UnmodifiableList<Object>((List<?>) linkedList0);
      // Undeclared exception!
      try {
        unmodifiableList0.addAll((Collection<?>) linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Please make a copy of this read-only list before modifying it.
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      UnmodifiableList<Serializable> unmodifiableList0 = new UnmodifiableList<Serializable>((List<? extends Serializable>) linkedList0);
      // Undeclared exception!
      try {
        unmodifiableList0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Please make a copy of this read-only list before modifying it.
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnmodifiableList<Serializable> unmodifiableList0 = new UnmodifiableList<Serializable>((List<? extends Serializable>) linkedList0);
      // Undeclared exception!
      try {
        unmodifiableList0.add(0, 0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Please make a copy of this read-only list before modifying it.
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      UnmodifiableList<Integer> unmodifiableList0 = new UnmodifiableList<Integer>((List<? extends Integer>) linkedList0);
      // Undeclared exception!
      try {
        unmodifiableList0.remove(508);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Please make a copy of this read-only list before modifying it.
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnmodifiableList<String> unmodifiableList0 = new UnmodifiableList<String>((List<? extends String>) linkedList0);
      // Undeclared exception!
      try {
        unmodifiableList0.remove((Object) "[]");
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Please make a copy of this read-only list before modifying it.
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnmodifiableList<String> unmodifiableList0 = new UnmodifiableList<String>((List<? extends String>) linkedList0);
      assertNotNull(unmodifiableList0);
      
      UnmodifiableList<Object> unmodifiableList1 = new UnmodifiableList<Object>((List<?>) unmodifiableList0);
      int int0 = unmodifiableList1.hashCode();
      assertEquals(1, int0);
  }

  @Test
  public void test8()  throws Throwable  {
      LinkedList<UnmodifiableList<UnmodifiableList<Object>>> linkedList0 = new LinkedList<UnmodifiableList<UnmodifiableList<Object>>>();
      UnmodifiableList<Object> unmodifiableList0 = new UnmodifiableList<Object>((List<?>) linkedList0);
      // Undeclared exception!
      try {
        unmodifiableList0.removeAll((Collection<?>) linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Please make a copy of this read-only list before modifying it.
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnmodifiableList<String> unmodifiableList0 = new UnmodifiableList<String>((List<? extends String>) linkedList0);
      // Undeclared exception!
      try {
        unmodifiableList0.add("nl4QHI_u&7ev6DYd{k");
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Please make a copy of this read-only list before modifying it.
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnmodifiableList<String> unmodifiableList0 = new UnmodifiableList<String>((List<? extends String>) linkedList0);
      // Undeclared exception!
      try {
        unmodifiableList0.set((-819), "i>");
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Please make a copy of this read-only list before modifying it.
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnmodifiableList<Serializable> unmodifiableList0 = new UnmodifiableList<Serializable>((List<? extends Serializable>) linkedList0);
      assertNotNull(unmodifiableList0);
      
      UnmodifiableList<Object> unmodifiableList1 = new UnmodifiableList<Object>((List<?>) unmodifiableList0);
      boolean boolean0 = unmodifiableList1.isEmpty();
      assertEquals(true, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnmodifiableList<String> unmodifiableList0 = new UnmodifiableList<String>((List<? extends String>) linkedList0);
      assertNotNull(unmodifiableList0);
      
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      UnmodifiableList<Integer> unmodifiableList1 = new UnmodifiableList<Integer>((List<? extends Integer>) linkedList1);
      UnmodifiableList<Serializable> unmodifiableList2 = new UnmodifiableList<Serializable>((List<? extends Serializable>) unmodifiableList1);
      Object[] objectArray0 = unmodifiableList2.toArray();
      assertNotNull(objectArray0);
      
      Object[] objectArray1 = unmodifiableList0.toArray(objectArray0);
      assertNotNull(objectArray1);
      
      int int0 = unmodifiableList0.indexOf((Object) objectArray1);
      assertEquals((-1), int0);
  }

  @Test
  public void test13()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnmodifiableList<String> unmodifiableList0 = new UnmodifiableList<String>((List<? extends String>) linkedList0);
      assertNotNull(unmodifiableList0);
      
      UnmodifiableList<Object> unmodifiableList1 = new UnmodifiableList<Object>((List<?>) unmodifiableList0);
      LinkedList<UnmodifiableList<Object>> linkedList1 = new LinkedList<UnmodifiableList<Object>>();
      int int0 = unmodifiableList1.lastIndexOf((Object) linkedList1);
      assertEquals((-1), int0);
  }

  @Test
  public void test14()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      UnmodifiableList<Integer> unmodifiableList0 = new UnmodifiableList<Integer>((List<? extends Integer>) linkedList0);
      String string0 = unmodifiableList0.toString();
      assertEquals("[]", string0);
  }

  @Test
  public void test15()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      UnmodifiableList<Integer> unmodifiableList0 = new UnmodifiableList<Integer>((List<? extends Integer>) linkedList0);
      List<Integer> list0 = unmodifiableList0.subList(0, 0);
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test16()  throws Throwable  {
      LinkedList<UnmodifiableList<Integer>> linkedList0 = new LinkedList<UnmodifiableList<Integer>>();
      UnmodifiableList<Serializable> unmodifiableList0 = new UnmodifiableList<Serializable>((List<? extends Serializable>) linkedList0);
      // Undeclared exception!
      try {
        unmodifiableList0.retainAll((Collection<?>) linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Please make a copy of this read-only list before modifying it.
         */
      }
  }

  @Test
  public void test17()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnmodifiableList<String> unmodifiableList0 = new UnmodifiableList<String>((List<? extends String>) linkedList0);
      // Undeclared exception!
      try {
        unmodifiableList0.addAll(248, (Collection<? extends String>) linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Please make a copy of this read-only list before modifying it.
         */
      }
  }

  @Test
  public void test18()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnmodifiableList<String> unmodifiableList0 = new UnmodifiableList<String>((List<? extends String>) linkedList0);
      assertNotNull(unmodifiableList0);
      
      linkedList0.add("");
      UnmodifiableList<Object> unmodifiableList1 = new UnmodifiableList<Object>((List<?>) unmodifiableList0);
      boolean boolean0 = unmodifiableList1.contains((Object) true);
      assertEquals(1, unmodifiableList0.size());
      assertEquals(true, boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      LinkedList<UnmodifiableList<Serializable>> linkedList0 = new LinkedList<UnmodifiableList<Serializable>>();
      UnmodifiableList<Object> unmodifiableList0 = new UnmodifiableList<Object>((List<?>) linkedList0);
      UnmodifiableList<Serializable> unmodifiableList1 = new UnmodifiableList<Serializable>((List<? extends Serializable>) linkedList0);
      linkedList0.add(unmodifiableList1);
      unmodifiableList0.equals((Object) unmodifiableList0);
  }

  @Test
  public void test20()  throws Throwable  {
      UnmodifiableList<Serializable> unmodifiableList0 = null;
      try {
        unmodifiableList0 = new UnmodifiableList<Serializable>((List<? extends Serializable>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
