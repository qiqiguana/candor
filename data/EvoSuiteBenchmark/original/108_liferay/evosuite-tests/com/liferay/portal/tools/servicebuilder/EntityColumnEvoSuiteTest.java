/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.tools.servicebuilder;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.tools.servicebuilder.EntityColumn;
import javax.swing.JComboBox;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class EntityColumnEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      EntityColumn entityColumn0 = new EntityColumn("wY^g^>'vPn/NW0Y", "wY^g^>'vPn/NW0Y", "wY^g^>'vPn/NW0Y", false, false, false, "wY^g^>'vPn/NW0Y", "wY^g^>'vPn/NW0Y", "wY^g^>'vPn/NW0Y", "wY^g^>'vPn/NW0Y", "wY^g^>'vPn/NW0Y", false, false, false, false, false, false);
      entityColumn0.hashCode();
      assertEquals(true, entityColumn0.isOrderByAscending());
      assertEquals(true, entityColumn0.isMappingManyToMany());
      assertEquals(false, entityColumn0.isPrimary());
      assertEquals(false, entityColumn0.hasArrayableOperator());
      assertEquals(false, entityColumn0.isOrderColumn());
      assertEquals(false, entityColumn0.isAccessor());
      assertEquals(true, entityColumn0.isMappingOneToMany());
      assertEquals(false, entityColumn0.isFilterPrimary());
      assertEquals("WY^g^>'vPn/NW0Y", entityColumn0.getMethodName());
      assertEquals(true, entityColumn0.isCaseSensitive());
  }

  @Test
  public void test1()  throws Throwable  {
      EntityColumn entityColumn0 = new EntityColumn(".J::&TYyn@dfmEvD}k,");
      EntityColumn entityColumn1 = (EntityColumn)entityColumn0.clone();
      assertEquals(false, entityColumn1.hasArrayableOperator());
      assertEquals(false, entityColumn1.isOrderColumn());
      assertEquals(true, entityColumn0.isLazy());
      assertEquals(false, entityColumn1.isFilterPrimary());
      assertEquals(true, entityColumn1.isCaseSensitive());
      assertEquals(false, entityColumn1.isPrimary());
      assertTrue(entityColumn0.equals(entityColumn1));
      assertEquals(true, entityColumn1.isOrderByAscending());
      assertEquals(true, entityColumn1.isConvertNull());
      assertEquals(false, entityColumn1.isAccessor());
  }

  @Test
  public void test2()  throws Throwable  {
      EntityColumn entityColumn0 = new EntityColumn("AND");
      String string0 = entityColumn0.getUserUuidHumanName();
      assertEquals(false, entityColumn0.isOrderColumn());
      assertEquals("a uuid", string0);
      assertEquals(false, entityColumn0.isFilterPrimary());
      assertNotNull(string0);
      assertEquals(false, entityColumn0.isPrimary());
      assertEquals(false, entityColumn0.isMappingManyToMany());
      assertEquals(true, entityColumn0.isOrderByAscending());
      assertEquals(false, entityColumn0.hasArrayableOperator());
      assertEquals(true, entityColumn0.isCaseSensitive());
      assertEquals("AND", entityColumn0.getMethodName());
      assertEquals(false, entityColumn0.isAccessor());
  }

  @Test
  public void test3()  throws Throwable  {
      EntityColumn entityColumn0 = new EntityColumn((String) null, (String) null, (String) null, true, true, true, (String) null, (String) null, (String) null, (String) null, (String) null, true, true, true, true, true, true);
      entityColumn0.setFinderPath(true);
      assertEquals(true, entityColumn0.isFinderPath());
      assertEquals(false, entityColumn0.isOrderColumn());
  }

  @Test
  public void test4()  throws Throwable  {
      EntityColumn entityColumn0 = new EntityColumn(",F/8 T]_(=", ",F/8 T]_(=", "Byte", false, false, false, ",F/8 T]_(=", ",F/8 T]_(=", ",F/8 T]_(=", false, false, false, "Byte", "Byte", ",F/8 T]_(=", "Byte", false, false, false, false, false, false);
      boolean boolean0 = entityColumn0.isPrimitiveType();
      assertEquals("Byte", entityColumn0.getComparator());
      assertEquals(false, entityColumn0.isFilterPrimary());
      assertEquals(",F/8 T]_(=", entityColumn0.getEJBName());
      assertEquals(false, entityColumn0.isAccessor());
      assertEquals(", f/8  t]_(=s", entityColumn0.getHumanNames());
      assertEquals(",F/8 T]_Uuid", entityColumn0.getUserUuidName());
      assertEquals(",F/8 T]_(=", entityColumn0.getMappingKey());
      assertEquals(",F/8 T]_(=", entityColumn0.getIdType());
      assertEquals(",F/8 T]_(=", entityColumn0.getDBName());
      assertEquals("Byte", entityColumn0.getArrayableOperator());
      assertEquals(true, boolean0);
      assertEquals(",F/8 T]_(=", entityColumn0.getMethodName());
      assertEquals(",F/8 T]_(=", entityColumn0.getMappingTable());
      assertEquals(false, entityColumn0.isPrimary());
      assertEquals(false, entityColumn0.isCaseSensitive());
  }

  @Test
  public void test5()  throws Throwable  {
      EntityColumn entityColumn0 = new EntityColumn((String) null, (String) null, (String) null, true, true, true, (String) null, (String) null, (String) null, (String) null, (String) null, true, true, true, true, true, true);
      entityColumn0.getMethodName();
      assertEquals(true, entityColumn0.isOrderByAscending());
      assertEquals(true, entityColumn0.isAccessor());
      assertEquals(true, entityColumn0.isPrimary());
      assertEquals(false, entityColumn0.isOrderColumn());
      assertEquals(true, entityColumn0.isCaseSensitive());
      assertEquals(true, entityColumn0.isFilterPrimary());
  }

  @Test
  public void test6()  throws Throwable  {
      EntityColumn entityColumn0 = new EntityColumn(")xQTQh1%_MMp", ")xQTQh1%_MMp", ")xQTQh1%_MMp", false, false, false, ")xQTQh1%_MMp", ")xQTQh1%_MMp", ")xQTQh1%_MMp", ")xQTQh1%_MMp", ")xQTQh1%_MMp", false, false, false, false, false, false);
      entityColumn0.setLazy(false);
      assertEquals(false, entityColumn0.isFilterPrimary());
      assertEquals(true, entityColumn0.isMappingOneToMany());
      assertEquals(false, entityColumn0.hasArrayableOperator());
      assertEquals(false, entityColumn0.isLazy());
      assertEquals(false, entityColumn0.isAccessor());
      assertEquals(")xQTQh1%_MMp", entityColumn0.getMethodName());
      assertEquals(true, entityColumn0.isCaseSensitive());
      assertEquals(false, entityColumn0.isOrderColumn());
      assertEquals(false, entityColumn0.isPrimary());
      assertEquals(true, entityColumn0.isOrderByAscending());
  }

  @Test
  public void test7()  throws Throwable  {
      EntityColumn entityColumn0 = new EntityColumn("Collection", "Collection", "Collection", true, false, true, "Collection", "Collection", "Collection", "Collection", "Collection", true, false, false, false, false, false);
      entityColumn0.isFinderPath();
      assertEquals(true, entityColumn0.isOrderByAscending());
      assertEquals(true, entityColumn0.isMappingManyToMany());
      assertEquals(true, entityColumn0.isCaseSensitive());
      assertEquals(false, entityColumn0.isAccessor());
      assertEquals(false, entityColumn0.isOrderColumn());
      assertEquals("Collections", entityColumn0.getMethodNames());
      assertEquals(false, entityColumn0.hasArrayableOperator());
      assertEquals(true, entityColumn0.isFilterPrimary());
      assertEquals(true, entityColumn0.isPrimary());
      assertEquals(true, entityColumn0.isMappingOneToMany());
      assertEquals("Collection", entityColumn0.getMethodName());
  }

  @Test
  public void test8()  throws Throwable  {
      EntityColumn entityColumn0 = new EntityColumn("cVRaJ[uYa<U}H}G5W|");
      String string0 = entityColumn0.getMethodUserUuidName();
      assertEquals("CVRaJ[uYa<U}H}G5Uuid", string0);
      assertEquals(false, entityColumn0.isPrimary());
      assertEquals(false, entityColumn0.isOrderColumn());
      assertEquals(false, entityColumn0.isAccessor());
      assertEquals(true, entityColumn0.isOrderByAscending());
      assertEquals(true, entityColumn0.isCaseSensitive());
      assertEquals(false, entityColumn0.isMappingOneToMany());
      assertEquals(false, entityColumn0.isFilterPrimary());
      assertNotNull(string0);
  }

  @Test
  public void test9()  throws Throwable  {
      EntityColumn entityColumn0 = new EntityColumn(".zip", ".zip", ".zip", true, true, true, ".zip", ".zip", ".zip", ".zip", ".zip", true, true, true, true, true, true);
      entityColumn0.setContainerModel(true);
      assertEquals(false, entityColumn0.isOrderColumn());
      assertEquals(true, entityColumn0.isMappingManyToMany());
      assertEquals(true, entityColumn0.isContainerModel());
      assertEquals(true, entityColumn0.isAccessor());
      assertEquals(".zip", entityColumn0.getMethodName());
      assertEquals(true, entityColumn0.isOrderByAscending());
      assertEquals(true, entityColumn0.isFilterPrimary());
      assertEquals(true, entityColumn0.isCaseSensitive());
      assertEquals(false, entityColumn0.hasArrayableOperator());
      assertEquals(true, entityColumn0.isPrimary());
  }

  @Test
  public void test10()  throws Throwable  {
      EntityColumn entityColumn0 = new EntityColumn("cVRaJ[uYa<U}H}G5W|");
      assertEquals(true, entityColumn0.isOrderByAscending());
      
      entityColumn0.setOrderByAscending(false);
      assertEquals(false, entityColumn0.isPrimary());
  }

  @Test
  public void test11()  throws Throwable  {
      EntityColumn entityColumn0 = new EntityColumn("cVRaJ[uYa<U}H}G5W|");
      entityColumn0.setOrderColumn(false);
      assertEquals(false, entityColumn0.isPrimary());
      assertEquals(true, entityColumn0.isOrderByAscending());
      assertEquals(true, entityColumn0.isCaseSensitive());
      assertEquals(false, entityColumn0.isOrderColumn());
      assertEquals(false, entityColumn0.isFilterPrimary());
      assertEquals(false, entityColumn0.isAccessor());
      assertEquals("CVRaJ[uYa<U}H}G5Uuid", entityColumn0.getMethodUserUuidName());
  }

  @Test
  public void test12()  throws Throwable  {
      EntityColumn entityColumn0 = new EntityColumn("AND");
      entityColumn0.compareTo(entityColumn0);
      assertEquals(true, entityColumn0.isOrderByAscending());
      assertEquals(false, entityColumn0.isOrderColumn());
      assertEquals(false, entityColumn0.isAccessor());
      assertEquals(false, entityColumn0.hasArrayableOperator());
      assertEquals(false, entityColumn0.isPrimary());
      assertEquals(true, entityColumn0.isCaseSensitive());
      assertEquals(false, entityColumn0.isFilterPrimary());
  }

  @Test
  public void test13()  throws Throwable  {
      EntityColumn entityColumn0 = new EntityColumn((String) null, (String) null, (String) null, true, true, true, (String) null, (String) null, (String) null, (String) null, (String) null, true, true, true, true, true, true);
      entityColumn0.setDBName((String) null);
      assertEquals(true, entityColumn0.isFilterPrimary());
      assertEquals(true, entityColumn0.isPrimary());
      assertEquals(true, entityColumn0.isAccessor());
      assertEquals(false, entityColumn0.isOrderColumn());
      assertEquals(true, entityColumn0.isOrderByAscending());
      assertEquals(true, entityColumn0.isCaseSensitive());
  }

  @Test
  public void test14()  throws Throwable  {
      EntityColumn entityColumn0 = new EntityColumn(")xQTQh1%_MMp", ")xQTQh1%_MMp", ")xQTQh1%_MMp", false, false, false, ")xQTQh1%_MMp", ")xQTQh1%_MMp", ")xQTQh1%_MMp", ")xQTQh1%_MMp", ")xQTQh1%_MMp", false, false, false, false, false, false);
      String string0 = entityColumn0.getMethodNames();
      assertEquals(false, entityColumn0.isPrimary());
      assertEquals(false, entityColumn0.isFilterPrimary());
      assertEquals(true, entityColumn0.isCaseSensitive());
      assertEquals(false, entityColumn0.hasArrayableOperator());
      assertEquals(false, entityColumn0.isOrderColumn());
      assertEquals(true, entityColumn0.isOrderByAscending());
      assertEquals(true, entityColumn0.isMappingManyToMany());
      assertEquals(false, entityColumn0.isAccessor());
      assertEquals(")xQTQh1%_MMps", string0);
      assertEquals(true, entityColumn0.isMappingOneToMany());
      assertNotNull(string0);
  }

  @Test
  public void test15()  throws Throwable  {
      EntityColumn entityColumn0 = new EntityColumn("wY^g^>'vPn/NW0Y", "wY^g^>'vPn/NW0Y", "wY^g^>'vPn/NW0Y", false, false, false, "wY^g^>'vPn/NW0Y", "wY^g^>'vPn/NW0Y", "wY^g^>'vPn/NW0Y", "wY^g^>'vPn/NW0Y", "wY^g^>'vPn/NW0Y", false, false, false, false, false, false);
      boolean boolean0 = entityColumn0.isMappingManyToMany();
      assertEquals(true, boolean0);
      assertEquals(false, entityColumn0.isOrderColumn());
      assertEquals(false, entityColumn0.hasArrayableOperator());
      assertEquals(false, entityColumn0.isPrimary());
      assertEquals(true, entityColumn0.isMappingOneToMany());
      assertEquals(true, entityColumn0.isCaseSensitive());
      assertEquals(false, entityColumn0.isFilterPrimary());
      assertEquals(false, entityColumn0.isAccessor());
      assertEquals(true, entityColumn0.isOrderByAscending());
      assertEquals("WY^g^>'vPn/NWUuid", entityColumn0.getMethodUserUuidName());
  }

  @Test
  public void test16()  throws Throwable  {
      EntityColumn entityColumn0 = new EntityColumn((String) null, (String) null, (String) null, true, true, true, (String) null, (String) null, (String) null, (String) null, (String) null, true, true, true, true, true, true);
      entityColumn0.isMappingOneToMany();
      assertEquals(true, entityColumn0.isFilterPrimary());
      assertEquals(true, entityColumn0.isPrimary());
      assertEquals(true, entityColumn0.isAccessor());
      assertEquals(false, entityColumn0.isOrderColumn());
      assertEquals(true, entityColumn0.isCaseSensitive());
  }

  @Test
  public void test17()  throws Throwable  {
      EntityColumn entityColumn0 = new EntityColumn("Short", "Short", "Short", true, true, true, "Short", "Short", "Short", true, true, true, "Short", "Short", "Short", "Short", true, true, true, true, true, true);
      entityColumn0.setCaseSensitive(true);
      assertEquals(true, entityColumn0.isOrderColumn());
      assertEquals(true, entityColumn0.isOrderByAscending());
      assertEquals(true, entityColumn0.isCaseSensitive());
      assertEquals(true, entityColumn0.isAccessor());
      assertEquals("Short", entityColumn0.getMethodName());
      assertEquals(true, entityColumn0.isPrimary());
      assertEquals(true, entityColumn0.isFilterPrimary());
  }

  @Test
  public void test18()  throws Throwable  {
      EntityColumn entityColumn0 = new EntityColumn(",F/8 T]_(=", ",F/8 T]_(=", "Byte", false, false, false, ",F/8 T]_(=", ",F/8 T]_(=", ",F/8 T]_(=", false, false, false, "Byte", "Byte", ",F/8 T]_(=", "Byte", false, false, false, false, false, false);
      assertEquals("Byte", entityColumn0.getArrayableOperator());
      
      entityColumn0.setArrayableOperator(",F/8 T]_(=");
      assertEquals(false, entityColumn0.isOrderColumn());
  }

  @Test
  public void test19()  throws Throwable  {
      EntityColumn entityColumn0 = new EntityColumn("AND");
      String string0 = entityColumn0.getHumanNames();
      assertEquals(false, entityColumn0.isPrimary());
      assertEquals(false, entityColumn0.isMappingManyToMany());
      assertEquals(false, entityColumn0.isOrderColumn());
      assertEquals(false, entityColumn0.isAccessor());
      assertEquals(true, entityColumn0.isOrderByAscending());
      assertNotNull(string0);
      assertEquals(true, entityColumn0.isCaseSensitive());
      assertEquals(false, entityColumn0.hasArrayableOperator());
      assertEquals(false, entityColumn0.isFilterPrimary());
      assertEquals("ANDs", entityColumn0.getMethodNames());
  }

  @Test
  public void test20()  throws Throwable  {
      EntityColumn entityColumn0 = new EntityColumn("or", "or", "or", false, false, false, "or", "or", "or", false, false, false, "or", "AND", "AND", "AND", false, false, false, true, false, false);
      String string0 = entityColumn0.getNames();
      assertEquals(false, entityColumn0.isOrderByAscending());
      assertEquals("or", entityColumn0.getDBName());
      assertEquals("Ors", entityColumn0.getMethodNames());
      assertEquals(false, entityColumn0.isAccessor());
      assertEquals("AND", entityColumn0.getArrayableOperator());
      assertEquals("or", entityColumn0.getMappingTable());
      assertEquals("or", entityColumn0.getEJBName());
      assertEquals(false, entityColumn0.isCaseSensitive());
      assertEquals("or", entityColumn0.getComparator());
      assertEquals(false, entityColumn0.isPrimary());
      assertEquals(false, entityColumn0.isOrderColumn());
      assertEquals("ors", entityColumn0.getHumanNames());
      assertEquals(false, entityColumn0.isFilterPrimary());
      assertEquals("or", entityColumn0.getMappingKey());
      assertEquals("AND", entityColumn0.getIdType());
      assertNotNull(string0);
      assertEquals("ors", string0);
      assertEquals("or", entityColumn0.getType());
  }

  @Test
  public void test21()  throws Throwable  {
      EntityColumn entityColumn0 = new EntityColumn("or", "or", "or", false, false, false, "or", "or", "or", false, false, false, "or", "AND", "AND", "AND", false, false, false, true, false, false);
      entityColumn0.setIdParam("or");
      assertEquals("AND", entityColumn0.getIdType());
      assertEquals("or", entityColumn0.getMappingKey());
      assertEquals("or", entityColumn0.getComparator());
      assertEquals("or", entityColumn0.getEJBName());
      assertEquals(true, entityColumn0.isPrimitiveType());
      assertEquals(false, entityColumn0.isAccessor());
      assertEquals(false, entityColumn0.isCaseSensitive());
      assertEquals(false, entityColumn0.isPrimary());
      assertEquals("ors", entityColumn0.getNames());
      assertEquals("or", entityColumn0.getDBName());
      assertEquals("Ors", entityColumn0.getMethodNames());
      assertEquals(true, entityColumn0.isArrayableAndOperator());
      assertEquals(false, entityColumn0.isOrderByAscending());
      assertEquals(false, entityColumn0.isFilterPrimary());
      assertEquals("or", entityColumn0.getMappingTable());
      assertEquals("ors", entityColumn0.getHumanNames());
      assertEquals(false, entityColumn0.isOrderColumn());
      assertEquals("or", entityColumn0.getName());
  }

  @Test
  public void test22()  throws Throwable  {
      EntityColumn entityColumn0 = new EntityColumn("wY^g^>'vPn/NW0Y", "wY^g^>'vPn/NW0Y", "wY^g^>'vPn/NW0Y", false, false, false, "wY^g^>'vPn/NW0Y", "wY^g^>'vPn/NW0Y", "wY^g^>'vPn/NW0Y", "wY^g^>'vPn/NW0Y", "wY^g^>'vPn/NW0Y", false, false, false, false, false, false);
      entityColumn0.setComparator("wY^g^>'vPn/NW0Y");
      String string0 = entityColumn0.getHumanCondition(true);
      assertEquals(true, entityColumn0.isMappingManyToMany());
      assertNotNull(string0);
      assertEquals(true, entityColumn0.isMappingOneToMany());
      assertEquals("wY^g^>'vPn/NW0Y wY^g^>'vPn/NW0Y &#63;", string0);
      assertEquals(false, entityColumn0.isFilterPrimary());
      assertEquals(false, entityColumn0.isOrderColumn());
      assertEquals(false, entityColumn0.isPrimary());
      assertEquals(false, entityColumn0.isAccessor());
      assertEquals(true, entityColumn0.isOrderByAscending());
      assertEquals(true, entityColumn0.isCaseSensitive());
      assertEquals("WY^g^>'vPn/NW0Y", entityColumn0.getMethodName());
  }

  @Test
  public void test23()  throws Throwable  {
      EntityColumn entityColumn0 = new EntityColumn(".J::&TYyn@dfmEvD}k,");
      entityColumn0.setLocalized(false);
      assertEquals(false, entityColumn0.isMappingOneToMany());
      assertEquals(false, entityColumn0.isFilterPrimary());
      assertEquals(true, entityColumn0.isOrderByAscending());
      assertEquals(false, entityColumn0.isAccessor());
      assertEquals(true, entityColumn0.isCaseSensitive());
      assertEquals(false, entityColumn0.hasArrayableOperator());
      assertEquals(false, entityColumn0.isOrderColumn());
      assertEquals(false, entityColumn0.isPrimary());
  }

  @Test
  public void test24()  throws Throwable  {
      EntityColumn entityColumn0 = new EntityColumn("wY^g^>'vPn/NW0Y", "wY^g^>'vPn/NW0Y", "wY^g^>'vPn/NW0Y", false, false, false, "wY^g^>'vPn/NW0Y", "wY^g^>'vPn/NW0Y", "wY^g^>'vPn/NW0Y", "wY^g^>'vPn/NW0Y", "wY^g^>'vPn/NW0Y", false, false, false, false, false, false);
      entityColumn0.setIdType("wY^g^>'vPn/NW0Y");
      assertEquals(true, entityColumn0.isCaseSensitive());
      assertEquals(false, entityColumn0.isFilterPrimary());
      assertEquals(false, entityColumn0.isPrimary());
      assertEquals(false, entityColumn0.isAccessor());
      assertEquals(false, entityColumn0.isOrderColumn());
      assertEquals(false, entityColumn0.hasArrayableOperator());
      assertEquals("WY^g^>'vPn/NWUuid", entityColumn0.getMethodUserUuidName());
      assertEquals(true, entityColumn0.isOrderByAscending());
  }

  @Test
  public void test25()  throws Throwable  {
      EntityColumn entityColumn0 = new EntityColumn("LnEfg");
      entityColumn0.setConvertNull(true);
      assertEquals(true, entityColumn0.isOrderByAscending());
      assertEquals(true, entityColumn0.isCaseSensitive());
      assertEquals(false, entityColumn0.isMappingManyToMany());
      assertEquals("LnEfgs", entityColumn0.getMethodNames());
      assertEquals(false, entityColumn0.isOrderColumn());
      assertEquals(true, entityColumn0.isConvertNull());
      assertEquals(false, entityColumn0.isFilterPrimary());
      assertEquals(false, entityColumn0.isAccessor());
      assertEquals(false, entityColumn0.isPrimary());
  }

  @Test
  public void test26()  throws Throwable  {
      EntityColumn entityColumn0 = new EntityColumn("Short", "long", "long", false, false, false, "Short", "Short", "Short", "long", "long", false, false, false, false, false, false);
      entityColumn0.setParentContainerModel(false);
      assertEquals(false, entityColumn0.isOrderColumn());
      assertEquals("Short", entityColumn0.getMappingTable());
      assertEquals("long", entityColumn0.getIdType());
      assertEquals("short", entityColumn0.getHumanName());
      assertEquals(false, entityColumn0.isParentContainerModel());
      assertEquals(true, entityColumn0.isMappingOneToMany());
      assertEquals("Shorts", entityColumn0.getNames());
      assertEquals(false, entityColumn0.isFilterPrimary());
      assertEquals("long", entityColumn0.getDBName());
      assertEquals("long", entityColumn0.getType());
      assertEquals("Short", entityColumn0.getMappingKey());
      assertEquals(true, entityColumn0.isOrderByAscending());
      assertEquals(false, entityColumn0.hasArrayableOperator());
      assertEquals(false, entityColumn0.isAccessor());
      assertEquals(true, entityColumn0.isMappingManyToMany());
      assertEquals(true, entityColumn0.isCaseSensitive());
      assertEquals(false, entityColumn0.isPrimary());
      assertEquals("Short", entityColumn0.getEJBName());
      assertEquals("ShoUuid", entityColumn0.getMethodUserUuidName());
  }

  @Test
  public void test27()  throws Throwable  {
      EntityColumn entityColumn0 = new EntityColumn(")xQTQh1%_MMp", ")xQTQh1%_MMp", ")xQTQh1%_MMp", false, false, false, ")xQTQh1%_MMp", ")xQTQh1%_MMp", ")xQTQh1%_MMp", ")xQTQh1%_MMp", ")xQTQh1%_MMp", false, false, false, false, false, false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) entityColumn0;
      assertEquals(true, entityColumn0.isOrderByAscending());
      assertEquals(false, entityColumn0.isPrimary());
      assertEquals(false, entityColumn0.isOrderColumn());
      assertEquals(true, entityColumn0.isCaseSensitive());
      assertEquals(")xQTQh1%_MUuid", entityColumn0.getMethodUserUuidName());
      assertEquals(true, entityColumn0.isMappingManyToMany());
      assertEquals(false, entityColumn0.isAccessor());
      assertEquals(false, entityColumn0.hasArrayableOperator());
      assertEquals(false, entityColumn0.isFilterPrimary());
      
      JComboBox jComboBox0 = new JComboBox(objectArray0);
      assertNotNull(jComboBox0);
      assertEquals(0, jComboBox0.getSelectedIndex());
  }

  @Test
  public void test28()  throws Throwable  {
      EntityColumn entityColumn0 = new EntityColumn("AW>T'Kgk8R{", "AW>T'Kgk8R{", "Float", false, false, false, "AW>T'Kgk8R{", "Float", "Float", false, false, false, "Float", "Float", "Float", "Float", false, false, false, false, false, false);
      String string0 = entityColumn0.getHumanCondition(false);
      assertNotNull(string0);
      assertEquals(false, entityColumn0.isFilterPrimary());
      assertEquals("Float", entityColumn0.getMappingKey());
      assertEquals("AW>T'Kgk8R{ Float &#63;", string0);
      assertEquals(false, entityColumn0.isOrderColumn());
      assertEquals("a w> t' kgk8 r{s", entityColumn0.getHumanNames());
      assertEquals(false, entityColumn0.isCaseSensitive());
      assertEquals("Float", entityColumn0.getArrayableOperator());
      assertEquals("Float", entityColumn0.getIdType());
      assertEquals(false, entityColumn0.isOrderByAscending());
      assertEquals(false, entityColumn0.isAccessor());
      assertEquals("AW>T'Kgk8R{", entityColumn0.getEJBName());
      assertEquals(true, entityColumn0.isPrimitiveType());
      assertEquals("AW>T'Kgk8R{s", entityColumn0.getMethodNames());
      assertEquals(false, entityColumn0.isPrimary());
  }

  @Test
  public void test29()  throws Throwable  {
      EntityColumn entityColumn0 = new EntityColumn("or", "or", "or", false, false, false, "or", "or", "or", false, false, false, "or", "AND", "AND", "AND", false, false, false, true, false, false);
      String string0 = entityColumn0.getHumanCondition(true);
      assertEquals(false, entityColumn0.isCaseSensitive());
      assertEquals("ors", entityColumn0.getHumanNames());
      assertEquals("or or all &#63;", string0);
      assertEquals("or", entityColumn0.getEJBName());
      assertEquals("Or", entityColumn0.getMethodName());
      assertEquals("or", entityColumn0.getMappingKey());
      assertEquals(false, entityColumn0.isFilterPrimary());
      assertEquals(false, entityColumn0.isOrderByAscending());
      assertNotNull(string0);
      assertEquals(true, entityColumn0.isPrimitiveType());
      assertEquals(false, entityColumn0.isAccessor());
      assertEquals("AND", entityColumn0.getIdType());
      assertEquals(false, entityColumn0.isOrderColumn());
  }

  @Test
  public void test30()  throws Throwable  {
      EntityColumn entityColumn0 = new EntityColumn("wY^g^>'vPn/NW0Y", "wY^g^>'vPn/NW0Y", "wY^g^>'vPn/NW0Y", false, false, false, "wY^g^>'vPn/NW0Y", "wY^g^>'vPn/NW0Y", "wY^g^>'vPn/NW0Y", "wY^g^>'vPn/NW0Y", "wY^g^>'vPn/NW0Y", false, false, false, false, false, false);
      entityColumn0.isCollection();
      assertEquals(false, entityColumn0.hasArrayableOperator());
      assertEquals(false, entityColumn0.isAccessor());
      assertEquals(true, entityColumn0.isMappingManyToMany());
      assertEquals(false, entityColumn0.isPrimary());
      assertEquals(true, entityColumn0.isCaseSensitive());
      assertEquals(false, entityColumn0.isFilterPrimary());
      assertEquals(false, entityColumn0.isOrderColumn());
      assertEquals("WY^g^>'vPn/NW0Y", entityColumn0.getMethodName());
      assertEquals(true, entityColumn0.isOrderByAscending());
      assertEquals("WY^g^>'vPn/NWUuid", entityColumn0.getMethodUserUuidName());
  }

  @Test
  public void test31()  throws Throwable  {
      EntityColumn entityColumn0 = new EntityColumn("Collection", "Collection", "Collection", true, false, true, "Collection", "Collection", "Collection", "Collection", "Collection", true, false, false, false, false, false);
      boolean boolean0 = entityColumn0.isCollection();
      assertEquals(true, boolean0);
      assertEquals(false, entityColumn0.isOrderColumn());
      assertEquals(true, entityColumn0.isMappingManyToMany());
      assertEquals(false, entityColumn0.hasArrayableOperator());
      assertEquals(true, entityColumn0.isOrderByAscending());
      assertEquals(true, entityColumn0.isFilterPrimary());
      assertEquals(true, entityColumn0.isMappingOneToMany());
      assertEquals("Collections", entityColumn0.getMethodNames());
      assertEquals(false, entityColumn0.isAccessor());
      assertEquals(true, entityColumn0.isCaseSensitive());
      assertEquals(true, entityColumn0.isPrimary());
  }

  @Test
  public void test32()  throws Throwable  {
      EntityColumn entityColumn0 = new EntityColumn("wY^g^>'vPn/NW0Y", "wY^g^>'vPn/NW0Y", "wY^g^>'vPn/NW0Y", false, false, false, "wY^g^>'vPn/NW0Y", "wY^g^>'vPn/NW0Y", "wY^g^>'vPn/NW0Y", "wY^g^>'vPn/NW0Y", "wY^g^>'vPn/NW0Y", false, false, false, false, false, false);
      boolean boolean0 = entityColumn0.isPrimitiveType(false);
      assertEquals(false, entityColumn0.isAccessor());
      assertEquals(false, entityColumn0.isOrderColumn());
      assertEquals(true, entityColumn0.isCaseSensitive());
      assertEquals("WY^g^>'vPn/NW0Ys", entityColumn0.getMethodNames());
      assertEquals(false, entityColumn0.hasArrayableOperator());
      assertEquals(true, entityColumn0.isOrderByAscending());
      assertEquals(true, entityColumn0.isMappingOneToMany());
      assertEquals(true, boolean0);
  }

  @Test
  public void test33()  throws Throwable  {
      EntityColumn entityColumn0 = new EntityColumn("Collection", "Collection", "Collection", true, false, true, "Collection", "Collection", "Collection", "Collection", "Collection", true, false, false, false, false, false);
      boolean boolean0 = entityColumn0.isPrimitiveType(false);
      assertEquals(true, entityColumn0.isCaseSensitive());
      assertEquals(true, entityColumn0.isMappingManyToMany());
      assertEquals(false, entityColumn0.hasArrayableOperator());
      assertEquals(false, entityColumn0.isAccessor());
      assertEquals(true, entityColumn0.isPrimary());
      assertEquals(true, entityColumn0.isOrderByAscending());
      assertEquals(false, entityColumn0.isOrderColumn());
      assertEquals(true, entityColumn0.isFilterPrimary());
      assertEquals(false, boolean0);
      assertEquals("Collections", entityColumn0.getMethodNames());
      assertEquals(true, entityColumn0.isMappingOneToMany());
  }

  @Test
  public void test34()  throws Throwable  {
      EntityColumn entityColumn0 = new EntityColumn("Boolean", "Boolean", "Boolean", true, true, true, "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", true, true, true, true, true, true);
      boolean boolean0 = entityColumn0.isPrimitiveType();
      assertEquals(true, entityColumn0.isFilterPrimary());
      assertEquals(false, entityColumn0.isOrderColumn());
      assertEquals(true, entityColumn0.isMappingOneToMany());
      assertEquals(true, entityColumn0.isPrimary());
      assertEquals(true, entityColumn0.isOrderByAscending());
      assertEquals(false, entityColumn0.hasArrayableOperator());
      assertEquals(true, entityColumn0.isAccessor());
      assertEquals("Booleans", entityColumn0.getMethodNames());
      assertEquals(true, boolean0);
  }

  @Test
  public void test35()  throws Throwable  {
      EntityColumn entityColumn0 = new EntityColumn("#(ys.", "Double", "Double", true, true, true, "#(ys.", "#(ys.", "#(ys.", true, true, true, "Double", "#(ys.", "#(ys.", "#(ys.", true, true, true, true, true, true);
      boolean boolean0 = entityColumn0.isPrimitiveType(true);
      assertEquals(true, boolean0);
      assertEquals(true, entityColumn0.isAccessor());
      assertEquals(true, entityColumn0.isPrimary());
      assertEquals("Double", entityColumn0.getComparator());
      assertEquals("#(y uuid", entityColumn0.getUserUuidHumanName());
      assertEquals("#(ys.", entityColumn0.getMethodName());
      assertEquals("Double", entityColumn0.getDBName());
      assertEquals(true, entityColumn0.isOrderColumn());
      assertEquals("#(ys.", entityColumn0.getMappingKey());
      assertEquals(true, entityColumn0.isFilterPrimary());
      assertEquals("#(ys.", entityColumn0.getMappingTable());
      assertEquals(true, entityColumn0.isOrderByAscending());
      assertEquals("#(ys.", entityColumn0.getIdType());
      assertEquals(true, entityColumn0.isCaseSensitive());
      assertEquals("#(ys.", entityColumn0.getEJBName());
      assertEquals("#(ys.s", entityColumn0.getHumanNames());
  }

  @Test
  public void test36()  throws Throwable  {
      EntityColumn entityColumn0 = new EntityColumn("Char", "Char", "Char", true, true, true, "Char", "Char", "Char", "Char", "Char", true, true, true, true, true, true);
      entityColumn0.isPrimitiveType(true);
      assertEquals(true, entityColumn0.isOrderByAscending());
      assertEquals(true, entityColumn0.isPrimary());
      assertEquals(false, entityColumn0.isOrderColumn());
      assertEquals(true, entityColumn0.isCaseSensitive());
      assertEquals(true, entityColumn0.isMappingOneToMany());
      assertEquals(true, entityColumn0.isAccessor());
      assertEquals(false, entityColumn0.hasArrayableOperator());
      assertEquals("ChUuid", entityColumn0.getMethodUserUuidName());
  }

  @Test
  public void test37()  throws Throwable  {
      EntityColumn entityColumn0 = new EntityColumn(":>/QvPn", ":>/QvPn", "Long", true, true, true, ":>/QvPn", ":>/QvPn", ":>/QvPn", true, true, true, ":>/QvPn", ":>/QvPn", ":>/QvPn", ":>/QvPn", true, true, true, true, true, true);
      boolean boolean0 = entityColumn0.isPrimitiveType(true);
      assertEquals(true, entityColumn0.isCaseSensitive());
      assertEquals(true, entityColumn0.isAccessor());
      assertEquals(true, entityColumn0.isPrimary());
      assertEquals(":>/QvPn", entityColumn0.getEJBName());
      assertEquals(":>/QvPn", entityColumn0.getArrayableOperator());
      assertEquals(true, entityColumn0.isOrderColumn());
      assertEquals(":>/QvUuid", entityColumn0.getMethodUserUuidName());
      assertEquals(true, entityColumn0.isOrderByAscending());
      assertEquals(true, boolean0);
      assertEquals(":>/ qv pns", entityColumn0.getHumanNames());
  }

  @Test
  public void test38()  throws Throwable  {
      EntityColumn entityColumn0 = new EntityColumn("AW>T'Kgk8R{", "AW>T'Kgk8R{", "Float", false, false, false, "AW>T'Kgk8R{", "Float", "Float", false, false, false, "Float", "Float", "Float", "Float", false, false, false, false, false, false);
      boolean boolean0 = entityColumn0.isPrimitiveType();
      assertEquals("Float", entityColumn0.getMappingKey());
      assertEquals("AW>T'Kgk8R{", entityColumn0.getEJBName());
      assertEquals("Float", entityColumn0.getMappingTable());
      assertEquals(true, boolean0);
      assertEquals("AW>T'Kgk8R{", entityColumn0.getDBName());
      assertEquals("Float", entityColumn0.getComparator());
      assertEquals("AW>T'Kgk8R{s", entityColumn0.getNames());
      assertEquals(false, entityColumn0.isOrderByAscending());
      assertEquals(false, entityColumn0.isPrimary());
      assertEquals(false, entityColumn0.isCaseSensitive());
      assertEquals("a w> t' kgk8 r{", entityColumn0.getHumanName());
      assertEquals("AW>T'Kgk8R{", entityColumn0.getMethodName());
  }

  @Test
  public void test39()  throws Throwable  {
      EntityColumn entityColumn0 = new EntityColumn(":>/QvPn", ":>/QvPn", "LnEfg", true, true, true, "LnEfg", "LnEfg", "LnEfg", true, true, true, ":>/QvPn", "LnEfg", ":>/QvPn", ":>/QvPn", true, true, true, true, true, true);
      boolean boolean0 = entityColumn0.isPrimitiveType(true);
      assertEquals("LnEfg", entityColumn0.getArrayableOperator());
      assertEquals("LnEfg", entityColumn0.getEJBName());
      assertEquals("LnEfg", entityColumn0.getMappingKey());
      assertEquals(false, boolean0);
      assertEquals(":>/QvPn", entityColumn0.getIdType());
      assertEquals(true, entityColumn0.isAccessor());
      assertEquals(true, entityColumn0.isCaseSensitive());
      assertEquals(":>/QvPn", entityColumn0.getDBName());
      assertEquals(true, entityColumn0.isPrimary());
      assertEquals(true, entityColumn0.isFilterPrimary());
      assertEquals(":>/ qv pns", entityColumn0.getHumanNames());
      assertEquals("LnEfg", entityColumn0.getMappingTable());
      assertEquals("LnEfg", entityColumn0.getType());
      assertEquals(":>/QvUuid", entityColumn0.getUserUuidName());
      assertEquals(true, entityColumn0.isOrderByAscending());
      assertEquals(":>/QvPn", entityColumn0.getComparator());
      assertEquals(":>/QvPn", entityColumn0.getMethodName());
  }

  @Test
  public void test40()  throws Throwable  {
      EntityColumn entityColumn0 = new EntityColumn("Short", "Short", "Short", true, true, true, "Short", "Short", "Short", true, true, true, "Short", "Short", "Short", "Short", true, true, true, true, true, true);
      entityColumn0.isPrimitiveType();
      assertEquals(true, entityColumn0.isOrderColumn());
      assertEquals(true, entityColumn0.isCaseSensitive());
      assertEquals(true, entityColumn0.isOrderByAscending());
      assertEquals(true, entityColumn0.isFilterPrimary());
      assertEquals(true, entityColumn0.isAccessor());
      assertEquals("Short", entityColumn0.getMethodName());
  }

  @Test
  public void test41()  throws Throwable  {
      EntityColumn entityColumn0 = new EntityColumn("Char", "Char", "Char", true, true, true, "Char", "Char", "Char", "Char", "Char", true, true, true, true, true, true);
      entityColumn0.isUserUuid();
      assertEquals(false, entityColumn0.hasArrayableOperator());
      assertEquals(false, entityColumn0.isOrderColumn());
      assertEquals(true, entityColumn0.isOrderByAscending());
      assertEquals(true, entityColumn0.isPrimary());
      assertEquals(true, entityColumn0.isFilterPrimary());
      assertEquals(true, entityColumn0.isMappingManyToMany());
      assertEquals(true, entityColumn0.isCaseSensitive());
      assertEquals(true, entityColumn0.isAccessor());
      assertEquals("ChUuid", entityColumn0.getMethodUserUuidName());
      assertEquals("Char", entityColumn0.getMethodName());
  }

  @Test
  public void test42()  throws Throwable  {
      EntityColumn entityColumn0 = new EntityColumn("Short", "long", "long", false, false, false, "Short", "Short", "Short", "long", "long", false, false, false, false, false, false);
      boolean boolean0 = entityColumn0.isUserUuid();
      assertEquals("long", entityColumn0.getIdType());
      assertEquals(false, entityColumn0.hasArrayableOperator());
      assertEquals(false, entityColumn0.isAccessor());
      assertEquals(false, entityColumn0.isPrimary());
      assertEquals("long", entityColumn0.getType());
      assertEquals("Short", entityColumn0.getMappingKey());
      assertEquals(true, entityColumn0.isMappingManyToMany());
      assertEquals(false, entityColumn0.isOrderColumn());
      assertEquals("Short", entityColumn0.getMappingTable());
      assertEquals("Short", entityColumn0.getMethodName());
      assertEquals(true, entityColumn0.isOrderByAscending());
      assertEquals(false, boolean0);
      assertEquals("Short", entityColumn0.getEJBName());
      assertEquals(true, entityColumn0.isMappingOneToMany());
      assertEquals(false, entityColumn0.isFilterPrimary());
      assertEquals(true, entityColumn0.isCaseSensitive());
      assertEquals("sho uuid", entityColumn0.getUserUuidHumanName());
      assertEquals("long", entityColumn0.getDBName());
      assertEquals("shorts", entityColumn0.getHumanNames());
  }

  @Test
  public void test43()  throws Throwable  {
      EntityColumn entityColumn0 = new EntityColumn("!=", "!=", "!=", false, false, false, "!=", "!=", "!=", false, false, false, "!=", "!=", "!=", "!=", false, false, false, false, false, false);
      String string0 = entityColumn0.convertComparatorToHtml(">");
      assertEquals(false, entityColumn0.isOrderColumn());
      assertEquals(false, entityColumn0.isPrimary());
      assertEquals(false, entityColumn0.isAccessor());
      assertEquals(false, entityColumn0.isOrderByAscending());
      assertEquals(false, entityColumn0.isCaseSensitive());
      assertEquals("&gt;", string0);
  }

  @Test
  public void test44()  throws Throwable  {
      EntityColumn entityColumn0 = new EntityColumn("<", "<", "<", true, true, true, "Short", "<", "<", true, true, true, "<", "<", "<", "Short", true, true, true, true, true, true);
      String string0 = entityColumn0.getHumanCondition(true);
      assertEquals(true, entityColumn0.isOrderColumn());
      assertEquals(true, entityColumn0.isFilterPrimary());
      assertEquals("Short", entityColumn0.getEJBName());
      assertEquals("<", entityColumn0.getType());
      assertEquals("<", entityColumn0.getDBName());
      assertEquals("< &lt; any &#63;", string0);
      assertEquals(true, entityColumn0.isPrimary());
      assertEquals(true, entityColumn0.isAccessor());
      assertEquals("<", entityColumn0.getMappingTable());
      assertEquals(true, entityColumn0.isCaseSensitive());
      assertEquals("<", entityColumn0.getArrayableOperator());
  }

  @Test
  public void test45()  throws Throwable  {
      EntityColumn entityColumn0 = new EntityColumn("!=", "!=", "!=", false, false, false, "!=", "!=", "!=", false, false, false, "!=", "!=", "!=", "!=", false, false, false, false, false, false);
      String string0 = entityColumn0.convertComparatorToHtml("!=");
      assertEquals(false, entityColumn0.isFilterPrimary());
      assertEquals(false, entityColumn0.isAccessor());
      assertEquals("&ne;", string0);
      assertEquals(false, entityColumn0.isOrderByAscending());
  }
}
