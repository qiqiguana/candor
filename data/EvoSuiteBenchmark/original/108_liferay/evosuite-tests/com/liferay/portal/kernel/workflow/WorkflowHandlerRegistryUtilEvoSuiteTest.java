/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.workflow;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.workflow.WorkflowException;
import com.liferay.portal.kernel.workflow.WorkflowHandler;
import com.liferay.portal.kernel.workflow.WorkflowHandlerRegistry;
import com.liferay.portal.kernel.workflow.WorkflowHandlerRegistryUtil;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.workflow.WorkflowHandlerRegistryImpl;
import java.io.Serializable;
import java.text.Format;
import java.text.MessageFormat;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class WorkflowHandlerRegistryUtilEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ServiceContext serviceContext0 = new ServiceContext();
      try {
        WorkflowHandlerRegistryUtil.startWorkflowInstance(661L, 661L, "JZV", 661L, (Object) 661L, serviceContext0, (Map<String, Serializable>) null);
        fail("Expecting exception: WorkflowException");
      } catch(WorkflowException e) {
        /*
         * No workflow handler found for JZV
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      WorkflowHandlerRegistryUtil.getWorkflowHandlers();
  }

  @Test
  public void test2()  throws Throwable  {
      List<WorkflowHandler> list0 = WorkflowHandlerRegistryUtil.getScopeableWorkflowHandlers();
      WorkflowHandlerRegistryUtil.register(list0);
  }

  @Test
  public void test3()  throws Throwable  {
      WorkflowHandlerRegistryImpl workflowHandlerRegistryImpl0 = new WorkflowHandlerRegistryImpl();
      WorkflowHandlerRegistryUtil workflowHandlerRegistryUtil0 = new WorkflowHandlerRegistryUtil();
      workflowHandlerRegistryUtil0.setWorkflowHandlerRegistry((WorkflowHandlerRegistry) workflowHandlerRegistryImpl0);
  }

  @Test
  public void test4()  throws Throwable  {
      ServiceContext serviceContext0 = new ServiceContext();
      try {
        WorkflowHandlerRegistryUtil.startWorkflowInstance((-1L), (-1L), (-1L), "Calling v_lidate() on empty stack.", (-1L), (Object) "http://www.w3.org/2000/xmlns/", serviceContext0);
        fail("Expecting exception: WorkflowException");
      } catch(WorkflowException e) {
        /*
         * No workflow handler found for Calling v_lidate() on empty stack.
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      MessageFormat messageFormat0 = new MessageFormat("l", locale0);
      Format[] formatArray0 = messageFormat0.getFormatsByArgumentIndex();
      ServiceContext serviceContext0 = new ServiceContext();
      try {
        WorkflowHandlerRegistryUtil.startWorkflowInstance(4L, 4L, "l", 4L, (Object) formatArray0, serviceContext0);
        fail("Expecting exception: WorkflowException");
      } catch(WorkflowException e) {
        /*
         * No workflow handler found for l
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      List<WorkflowHandler> list0 = WorkflowHandlerRegistryUtil.getScopeableWorkflowHandlers();
      WorkflowHandlerRegistryUtil.unregister(list0);
      assertEquals(true, list0.isEmpty());
  }
}
