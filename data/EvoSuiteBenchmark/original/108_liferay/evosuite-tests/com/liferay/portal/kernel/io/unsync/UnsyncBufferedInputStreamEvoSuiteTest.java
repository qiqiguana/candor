/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.io.unsync;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.io.unsync.UnsyncBufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class UnsyncBufferedInputStreamEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1291);
      UnsyncBufferedInputStream unsyncBufferedInputStream0 = new UnsyncBufferedInputStream((InputStream) pipedInputStream0);
      assertNotNull(unsyncBufferedInputStream0);
      
      boolean boolean0 = unsyncBufferedInputStream0.markSupported();
      assertEquals(true, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      UnsyncBufferedInputStream unsyncBufferedInputStream0 = null;
      try {
        unsyncBufferedInputStream0 = new UnsyncBufferedInputStream((InputStream) null, (-206));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Size is less than 0
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      UnsyncBufferedInputStream unsyncBufferedInputStream0 = new UnsyncBufferedInputStream((InputStream) byteArrayInputStream0);
      assertEquals(-1, byteArrayInputStream0.read());
      
      int int0 = unsyncBufferedInputStream0.available();
      assertEquals(13, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      UnsyncBufferedInputStream unsyncBufferedInputStream0 = new UnsyncBufferedInputStream((InputStream) null);
      try {
        unsyncBufferedInputStream0.available();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Input stream is null
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      UnsyncBufferedInputStream unsyncBufferedInputStream0 = new UnsyncBufferedInputStream((InputStream) null);
      unsyncBufferedInputStream0.close();
      assertEquals(true, unsyncBufferedInputStream0.markSupported());
  }

  @Test
  public void test5()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      UnsyncBufferedInputStream unsyncBufferedInputStream0 = new UnsyncBufferedInputStream((InputStream) pushbackInputStream0);
      unsyncBufferedInputStream0.close();
      byte[] byteArray0 = new byte[10];
      try {
        unsyncBufferedInputStream0.read(byteArray0, (int) (byte)36, (int) (byte)0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Input stream is null
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      UnsyncBufferedInputStream unsyncBufferedInputStream0 = new UnsyncBufferedInputStream((InputStream) null);
      unsyncBufferedInputStream0.mark((-206));
      assertEquals(true, unsyncBufferedInputStream0.markSupported());
  }

  @Test
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      UnsyncBufferedInputStream unsyncBufferedInputStream0 = new UnsyncBufferedInputStream((InputStream) byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      
      unsyncBufferedInputStream0.mark(1678);
      unsyncBufferedInputStream0.skip((long) (byte)42);
      unsyncBufferedInputStream0.mark((int) (byte)59);
      assertEquals(-1, unsyncBufferedInputStream0.read());
  }

  @Test
  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      UnsyncBufferedInputStream unsyncBufferedInputStream0 = new UnsyncBufferedInputStream((InputStream) byteArrayInputStream0);
      unsyncBufferedInputStream0.read();
      assertEquals(0, byteArrayInputStream0.available());
      
      unsyncBufferedInputStream0.mark((int) (byte)59);
      assertEquals(4, unsyncBufferedInputStream0.available());
  }

  @Test
  public void test9()  throws Throwable  {
      UnsyncBufferedInputStream unsyncBufferedInputStream0 = new UnsyncBufferedInputStream((InputStream) null);
      try {
        unsyncBufferedInputStream0.read();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Input stream is null
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      UnsyncBufferedInputStream unsyncBufferedInputStream0 = new UnsyncBufferedInputStream((InputStream) byteArrayInputStream0);
      unsyncBufferedInputStream0.read();
      assertEquals(-1, byteArrayInputStream0.read());
      
      int int0 = unsyncBufferedInputStream0.read();
      assertEquals(0, int0);
  }

  @Test
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      UnsyncBufferedInputStream unsyncBufferedInputStream0 = new UnsyncBufferedInputStream((InputStream) byteArrayInputStream0);
      assertEquals(-1, byteArrayInputStream0.read());
      
      unsyncBufferedInputStream0.skip((long) (byte)42);
      int int0 = unsyncBufferedInputStream0.read();
      assertEquals((-1), int0);
  }

  @Test
  public void test12()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream((InputStream) pipedInputStream0, (InputStream) pipedInputStream0);
      UnsyncBufferedInputStream unsyncBufferedInputStream0 = new UnsyncBufferedInputStream((InputStream) sequenceInputStream0);
      assertNotNull(unsyncBufferedInputStream0);
      
      byte[] byteArray0 = new byte[11];
      int int0 = unsyncBufferedInputStream0.read(byteArray0, (int) (byte)0, (int) (byte)0);
      assertEquals(0, int0);
  }

  @Test
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      UnsyncBufferedInputStream unsyncBufferedInputStream0 = new UnsyncBufferedInputStream((InputStream) byteArrayInputStream0);
      assertEquals(-1, byteArrayInputStream0.read());
      
      unsyncBufferedInputStream0.skip((long) (byte)42);
      int int0 = unsyncBufferedInputStream0.read(byteArray0, (int) (byte)0, 117);
      assertEquals((-1), int0);
  }

  @Test
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      UnsyncBufferedInputStream unsyncBufferedInputStream0 = new UnsyncBufferedInputStream((InputStream) byteArrayInputStream0);
      unsyncBufferedInputStream0.read();
      byteArrayInputStream0.reset();
      int int0 = unsyncBufferedInputStream0.read(byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(9, int0);
  }

  @Test
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      UnsyncBufferedInputStream unsyncBufferedInputStream0 = new UnsyncBufferedInputStream((InputStream) byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      
      try {
        unsyncBufferedInputStream0.reset();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Resetting to invalid mark
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      UnsyncBufferedInputStream unsyncBufferedInputStream0 = new UnsyncBufferedInputStream((InputStream) null, 108);
      try {
        unsyncBufferedInputStream0.reset();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Input stream is null
         */
      }
  }

  @Test
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      UnsyncBufferedInputStream unsyncBufferedInputStream0 = new UnsyncBufferedInputStream((InputStream) byteArrayInputStream0);
      assertEquals(-1, byteArrayInputStream0.read());
      
      unsyncBufferedInputStream0.mark(1678);
      unsyncBufferedInputStream0.reset();
      assertEquals(12, unsyncBufferedInputStream0.available());
  }

  @Test
  public void test18()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      UnsyncBufferedInputStream unsyncBufferedInputStream0 = new UnsyncBufferedInputStream((InputStream) pushbackInputStream0);
      unsyncBufferedInputStream0.close();
      try {
        unsyncBufferedInputStream0.skip(90L);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Input stream is null
         */
      }
  }

  @Test
  public void test19()  throws Throwable  {
      FileDescriptor fileDescriptor0 = FileDescriptor.in;
      FileInputStream fileInputStream0 = new FileInputStream(fileDescriptor0);
      UnsyncBufferedInputStream unsyncBufferedInputStream0 = new UnsyncBufferedInputStream((InputStream) fileInputStream0);
      assertNotNull(unsyncBufferedInputStream0);
      
      long long0 = unsyncBufferedInputStream0.skip((-10L));
      assertEquals(0L, long0);
  }

  @Test
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      UnsyncBufferedInputStream unsyncBufferedInputStream0 = new UnsyncBufferedInputStream((InputStream) byteArrayInputStream0);
      unsyncBufferedInputStream0.read();
      assertEquals(0, byteArrayInputStream0.available());
      
      long long0 = unsyncBufferedInputStream0.skip(1456L);
      assertEquals(3L, long0);
  }

  @Test
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      UnsyncBufferedInputStream unsyncBufferedInputStream0 = new UnsyncBufferedInputStream((InputStream) byteArrayInputStream0);
      assertEquals(-1, byteArrayInputStream0.read());
      
      unsyncBufferedInputStream0.mark(1678);
      unsyncBufferedInputStream0.skip((long) (byte)42);
      long long0 = unsyncBufferedInputStream0.skip(1465L);
      assertEquals(0L, long0);
  }

  @Test
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      UnsyncBufferedInputStream unsyncBufferedInputStream0 = new UnsyncBufferedInputStream((InputStream) byteArrayInputStream0);
      assertEquals(-1, byteArrayInputStream0.read());
      
      unsyncBufferedInputStream0.mark(1678);
      int int0 = unsyncBufferedInputStream0.read(byteArray0, (int) (byte)0, 117);
      assertEquals(12, int0);
  }

  @Test
  public void test23()  throws Throwable  {
      UnsyncBufferedInputStream unsyncBufferedInputStream0 = new UnsyncBufferedInputStream((InputStream) null, 1547);
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try {
        unsyncBufferedInputStream0.readOnce(byteArray0, (int) (byte)0, 1547);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
