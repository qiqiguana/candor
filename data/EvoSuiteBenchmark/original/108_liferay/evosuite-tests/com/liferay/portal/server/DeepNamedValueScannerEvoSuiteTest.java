/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.server;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.util.IntegerWrapper;
import com.liferay.portal.server.DeepNamedValueScanner;
import java.lang.reflect.Proxy;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Set;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DeepNamedValueScannerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DeepNamedValueScanner deepNamedValueScanner0 = new DeepNamedValueScanner("", false);
      deepNamedValueScanner0.setSkipFirstCount(5);
      deepNamedValueScanner0.setTrackUsageCount(true);
      deepNamedValueScanner0.scan((Object) deepNamedValueScanner0);
      deepNamedValueScanner0.printStatistics(5);
      assertEquals(true, deepNamedValueScanner0.isTrackUsageCount());
      assertEquals(0, deepNamedValueScanner0.getSkipFirstCount());
  }

  @Test
  public void test1()  throws Throwable  {
      DeepNamedValueScanner deepNamedValueScanner0 = new DeepNamedValueScanner("`");
      boolean boolean0 = deepNamedValueScanner0.isTrackUsageCount();
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      DeepNamedValueScanner deepNamedValueScanner0 = new DeepNamedValueScanner("", false);
      deepNamedValueScanner0.getElapsedTime();
      assertEquals(false, deepNamedValueScanner0.isVisitStaticFields());
      assertEquals(false, deepNamedValueScanner0.isVisitSets());
  }

  @Test
  public void test3()  throws Throwable  {
      DeepNamedValueScanner deepNamedValueScanner0 = new DeepNamedValueScanner("Y#){%JoMXXU-9fO", true);
      boolean boolean0 = deepNamedValueScanner0.isVisitCollectionss();
      assertEquals(true, deepNamedValueScanner0.isVisitSets());
      assertEquals(true, deepNamedValueScanner0.isVisitArrays());
      assertEquals(true, boolean0);
      assertEquals(true, deepNamedValueScanner0.isVisitLists());
      assertEquals(true, deepNamedValueScanner0.isVisitMaps());
      assertEquals(true, deepNamedValueScanner0.isVisitStaticFields());
  }

  @Test
  public void test4()  throws Throwable  {
      DeepNamedValueScanner deepNamedValueScanner0 = new DeepNamedValueScanner("", false);
      deepNamedValueScanner0.setVisitCollections(true);
      HashSet<IntegerWrapper> hashSet0 = new HashSet<IntegerWrapper>();
      boolean boolean0 = deepNamedValueScanner0.scan((Object) hashSet0);
      assertEquals(true, deepNamedValueScanner0.isScanning());
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      DeepNamedValueScanner deepNamedValueScanner0 = new DeepNamedValueScanner("", false);
      boolean boolean0 = deepNamedValueScanner0.isVisitArrays();
      assertEquals(false, deepNamedValueScanner0.isVisitStaticFields());
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      DeepNamedValueScanner deepNamedValueScanner0 = new DeepNamedValueScanner("uQ>SK", false);
      deepNamedValueScanner0.setVisitSets(false);
      assertEquals(false, deepNamedValueScanner0.isVisitStaticFields());
      assertEquals(false, deepNamedValueScanner0.isVisitSets());
  }

  @Test
  public void test7()  throws Throwable  {
      DeepNamedValueScanner deepNamedValueScanner0 = new DeepNamedValueScanner("Y#){%JoMXXU-9fO", true);
      deepNamedValueScanner0.getMatchedValue();
      assertEquals(true, deepNamedValueScanner0.isVisitSets());
      assertEquals(true, deepNamedValueScanner0.isVisitStaticFields());
      assertEquals(true, deepNamedValueScanner0.isVisitCollectionss());
      assertEquals(true, deepNamedValueScanner0.isVisitLists());
      assertEquals(true, deepNamedValueScanner0.isVisitArrays());
      assertEquals(true, deepNamedValueScanner0.isVisitMaps());
  }

  @Test
  public void test8()  throws Throwable  {
      DeepNamedValueScanner deepNamedValueScanner0 = new DeepNamedValueScanner("uQ>SK", false);
      deepNamedValueScanner0.setVisitMaps(false);
      assertEquals(false, deepNamedValueScanner0.isVisitMaps());
      assertEquals(false, deepNamedValueScanner0.isVisitStaticFields());
      assertEquals(false, deepNamedValueScanner0.isVisitSets());
  }

  @Test
  public void test9()  throws Throwable  {
      DeepNamedValueScanner deepNamedValueScanner0 = new DeepNamedValueScanner("", false);
      deepNamedValueScanner0.isScanning();
      assertEquals(false, deepNamedValueScanner0.isVisitStaticFields());
      assertEquals(false, deepNamedValueScanner0.isVisitMaps());
  }

  @Test
  public void test10()  throws Throwable  {
      DeepNamedValueScanner deepNamedValueScanner0 = new DeepNamedValueScanner("Gava.java.lang.boolean", true);
      boolean boolean0 = deepNamedValueScanner0.isVisitMaps();
      assertEquals(true, boolean0);
      assertEquals(true, deepNamedValueScanner0.isVisitCollectionss());
      assertEquals(true, deepNamedValueScanner0.isVisitLists());
      assertEquals(true, deepNamedValueScanner0.isVisitArrays());
      assertEquals(true, deepNamedValueScanner0.isVisitSets());
      assertEquals(true, deepNamedValueScanner0.isVisitStaticFields());
  }

  @Test
  public void test11()  throws Throwable  {
      DeepNamedValueScanner deepNamedValueScanner0 = new DeepNamedValueScanner("uQ>SK", false);
      boolean boolean0 = deepNamedValueScanner0.isVisitStaticFields();
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      DeepNamedValueScanner deepNamedValueScanner0 = new DeepNamedValueScanner("*mgB 5m|a:");
      deepNamedValueScanner0.setVisitLists(false);
      assertEquals(false, deepNamedValueScanner0.isVisitLists());
  }

  @Test
  public void test13()  throws Throwable  {
      DeepNamedValueScanner deepNamedValueScanner0 = new DeepNamedValueScanner("`");
      deepNamedValueScanner0.setVisitStaticFields(false);
      assertEquals(false, deepNamedValueScanner0.isVisitStaticFields());
  }

  @Test
  public void test14()  throws Throwable  {
      DeepNamedValueScanner deepNamedValueScanner0 = new DeepNamedValueScanner("", false);
      deepNamedValueScanner0.setVisitArrays(false);
      assertEquals(false, deepNamedValueScanner0.isVisitArrays());
      assertEquals(false, deepNamedValueScanner0.isVisitStaticFields());
  }

  @Test
  public void test15()  throws Throwable  {
      DeepNamedValueScanner deepNamedValueScanner0 = new DeepNamedValueScanner("uQ>SK", false);
      deepNamedValueScanner0.getExcludedNames();
      assertEquals(false, deepNamedValueScanner0.isVisitStaticFields());
  }

  @Test
  public void test16()  throws Throwable  {
      DeepNamedValueScanner deepNamedValueScanner0 = new DeepNamedValueScanner("Y#){%JoMXXU-9fO", true);
      int int0 = deepNamedValueScanner0.getMatchingCount();
      assertEquals(true, deepNamedValueScanner0.isVisitCollectionss());
      assertEquals(true, deepNamedValueScanner0.isVisitStaticFields());
      assertEquals(true, deepNamedValueScanner0.isVisitSets());
      assertEquals(true, deepNamedValueScanner0.isVisitLists());
      assertEquals(true, deepNamedValueScanner0.isVisitArrays());
      assertEquals(0, int0);
      assertEquals(true, deepNamedValueScanner0.isVisitMaps());
  }

  @Test
  public void test17()  throws Throwable  {
      DeepNamedValueScanner deepNamedValueScanner0 = new DeepNamedValueScanner("lo3g", true);
      boolean boolean0 = deepNamedValueScanner0.isVisitLists();
      assertEquals(true, deepNamedValueScanner0.isVisitSets());
      assertEquals(true, deepNamedValueScanner0.isVisitCollectionss());
      assertEquals(true, deepNamedValueScanner0.isVisitMaps());
      assertEquals(true, deepNamedValueScanner0.isVisitStaticFields());
      assertEquals(true, deepNamedValueScanner0.isVisitArrays());
      assertEquals(true, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      DeepNamedValueScanner deepNamedValueScanner0 = new DeepNamedValueScanner("log", true);
      deepNamedValueScanner0.getExcludedClassNames();
      assertEquals(true, deepNamedValueScanner0.isVisitCollectionss());
      assertEquals(true, deepNamedValueScanner0.isVisitLists());
      assertEquals(true, deepNamedValueScanner0.isVisitSets());
      assertEquals(true, deepNamedValueScanner0.isVisitMaps());
      assertEquals(true, deepNamedValueScanner0.isVisitStaticFields());
      assertEquals(true, deepNamedValueScanner0.isVisitArrays());
  }

  @Test
  public void test19()  throws Throwable  {
      DeepNamedValueScanner deepNamedValueScanner0 = new DeepNamedValueScanner("", false);
      deepNamedValueScanner0.getIncludedClassNames();
      assertEquals(false, deepNamedValueScanner0.isVisitStaticFields());
  }

  @Test
  public void test20()  throws Throwable  {
      DeepNamedValueScanner deepNamedValueScanner0 = new DeepNamedValueScanner("*mgB 5m|a:");
      int int0 = deepNamedValueScanner0.getSkipFirstCount();
      assertEquals(0, int0);
  }

  @Test
  public void test21()  throws Throwable  {
      DeepNamedValueScanner deepNamedValueScanner0 = new DeepNamedValueScanner("Gava.java.lang.boolean", true);
      boolean boolean0 = deepNamedValueScanner0.isVisitSets();
      assertEquals(true, deepNamedValueScanner0.isVisitArrays());
      assertEquals(true, deepNamedValueScanner0.isVisitLists());
      assertEquals(true, deepNamedValueScanner0.isVisitCollectionss());
      assertEquals(true, deepNamedValueScanner0.isVisitStaticFields());
      assertEquals(true, deepNamedValueScanner0.isVisitMaps());
      assertEquals(true, boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      DeepNamedValueScanner deepNamedValueScanner0 = new DeepNamedValueScanner("`");
      deepNamedValueScanner0.printStatistics(684);
      assertEquals(false, deepNamedValueScanner0.isVisitCollectionss());
  }

  @Test
  public void test23()  throws Throwable  {
      DeepNamedValueScanner deepNamedValueScanner0 = new DeepNamedValueScanner("*mgB 5m|a:");
      deepNamedValueScanner0.setTrackUsageCount(false);
      assertEquals(false, deepNamedValueScanner0.isTrackUsageCount());
  }

  @Test
  public void test24()  throws Throwable  {
      DeepNamedValueScanner deepNamedValueScanner0 = new DeepNamedValueScanner("hML&FCsovX^Z(gd", true);
      deepNamedValueScanner0.setTrackUsageCount(true);
      try {
        deepNamedValueScanner0.scan((Object) deepNamedValueScanner0);
        fail("Expecting exception: ConcurrentModificationException");
      } catch(ConcurrentModificationException e) {
      }
  }

  @Test
  public void test25()  throws Throwable  {
      DeepNamedValueScanner deepNamedValueScanner0 = new DeepNamedValueScanner("lo3g", true);
      String[] stringArray0 = new String[6];
      stringArray0[1] = "lo3g";
      stringArray0[0] = "";
      stringArray0[2] = "";
      stringArray0[5] = "";
      stringArray0[3] = "";
      stringArray0[4] = "lo3g";
      deepNamedValueScanner0.setExcludedClassNames(stringArray0);
      HashSet<IntegerWrapper> hashSet0 = new HashSet<IntegerWrapper>();
      IntegerWrapper integerWrapper0 = new IntegerWrapper();
      hashSet0.add(integerWrapper0);
      boolean boolean0 = deepNamedValueScanner0.scan((Object) hashSet0);
      assertEquals(true, deepNamedValueScanner0.isScanning());
      assertEquals(false, boolean0);
  }

  @Test
  public void test26()  throws Throwable  {
      DeepNamedValueScanner deepNamedValueScanner0 = new DeepNamedValueScanner("log", true);
      String[] stringArray0 = new String[6];
      stringArray0[5] = "log";
      stringArray0[1] = "log";
      stringArray0[0] = "log";
      stringArray0[2] = "log";
      stringArray0[4] = "log";
      stringArray0[3] = "log";
      deepNamedValueScanner0.setExcludedClassNames(stringArray0);
      HashSet<IntegerWrapper> hashSet0 = new HashSet<IntegerWrapper>();
      IntegerWrapper integerWrapper0 = new IntegerWrapper((-1882));
      hashSet0.add(integerWrapper0);
      boolean boolean0 = deepNamedValueScanner0.scan((Object) hashSet0);
      assertEquals(true, deepNamedValueScanner0.isScanning());
      assertEquals(false, boolean0);
  }

  @Test
  public void test27()  throws Throwable  {
      DeepNamedValueScanner deepNamedValueScanner0 = new DeepNamedValueScanner("log", true);
      String[] stringArray0 = new String[6];
      stringArray0[5] = "log";
      stringArray0[1] = "log";
      stringArray0[0] = "log";
      stringArray0[2] = "log";
      stringArray0[4] = "log";
      stringArray0[3] = "log";
      deepNamedValueScanner0.setIncludedClassNames(stringArray0);
      HashSet<IntegerWrapper> hashSet0 = new HashSet<IntegerWrapper>();
      IntegerWrapper integerWrapper0 = new IntegerWrapper((-1882));
      hashSet0.add(integerWrapper0);
      boolean boolean0 = deepNamedValueScanner0.scan((Object) hashSet0);
      assertEquals(true, deepNamedValueScanner0.isScanning());
      assertEquals(false, boolean0);
  }

  @Test
  public void test28()  throws Throwable  {
      DeepNamedValueScanner deepNamedValueScanner0 = new DeepNamedValueScanner("log", true);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "log";
      stringArray0[1] = "log";
      stringArray0[2] = "log";
      stringArray0[3] = "log";
      deepNamedValueScanner0.setExcludedNames(stringArray0);
      try {
        deepNamedValueScanner0.scan((Object) deepNamedValueScanner0);
        fail("Expecting exception: ConcurrentModificationException");
      } catch(ConcurrentModificationException e) {
      }
  }

  @Test
  public void test29()  throws Throwable  {
      DeepNamedValueScanner deepNamedValueScanner0 = new DeepNamedValueScanner("hML&FCsovX^Z(gd", true);
      Object object0 = new Object();
      boolean boolean0 = deepNamedValueScanner0.scan(object0);
      assertEquals(true, deepNamedValueScanner0.isScanning());
      assertEquals(false, boolean0);
  }

  @Test
  public void test30()  throws Throwable  {
      DeepNamedValueScanner deepNamedValueScanner0 = new DeepNamedValueScanner("`");
      boolean boolean0 = deepNamedValueScanner0.scan((Object) null);
      assertEquals(true, deepNamedValueScanner0.isScanning());
      assertEquals(false, boolean0);
  }

  @Test
  public void test31()  throws Throwable  {
      DeepNamedValueScanner deepNamedValueScanner0 = new DeepNamedValueScanner("", false);
      deepNamedValueScanner0.setSkipFirstCount(5);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[3] = "";
      deepNamedValueScanner0.setIncludedClassNames(stringArray0);
      boolean boolean0 = deepNamedValueScanner0.scan((Object) deepNamedValueScanner0);
      assertEquals(0, deepNamedValueScanner0.getSkipFirstCount());
      assertEquals(true, boolean0);
  }

  @Test
  public void test32()  throws Throwable  {
      DeepNamedValueScanner deepNamedValueScanner0 = new DeepNamedValueScanner("Gava.java.lang.boolean", true);
      LinkedList<Set<Proxy>> linkedList0 = new LinkedList<Set<Proxy>>();
      boolean boolean0 = deepNamedValueScanner0.scan((Object) linkedList0);
      assertEquals(true, deepNamedValueScanner0.isScanning());
      assertEquals(false, boolean0);
  }

  @Test
  public void test33()  throws Throwable  {
      DeepNamedValueScanner deepNamedValueScanner0 = new DeepNamedValueScanner("log", true);
      HashMap<DeepNamedValueScanner, Proxy> hashMap0 = new HashMap<DeepNamedValueScanner, Proxy>();
      boolean boolean0 = deepNamedValueScanner0.scan((Object) hashMap0);
      assertEquals(true, deepNamedValueScanner0.isScanning());
      assertEquals(false, boolean0);
  }
}
