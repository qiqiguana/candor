/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.poller;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.poller.PollerHeader;
import com.liferay.portal.kernel.poller.PollerRequest;
import java.util.HashMap;
import java.util.Map;
import javax.servlet.http.HttpServletRequest;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PollerRequestEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PollerHeader pollerHeader0 = new PollerHeader(193L, 193L, 193L, (Map<String, Boolean>) null, false);
      PollerRequest pollerRequest0 = new PollerRequest((HttpServletRequest) null, pollerHeader0, "W,@;Id>", (Map<String, String>) hashMap0, "W,@;Id>", false);
      long long0 = pollerRequest0.getCompanyId();
      assertEquals(193L, long0);
      assertEquals(false, pollerRequest0.isReceiveRequest());
  }

  @Test
  public void test1()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      PollerHeader pollerHeader0 = new PollerHeader((-1L), (-1L), (-1L), (Map<String, Boolean>) hashMap0, false);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      PollerRequest pollerRequest0 = new PollerRequest((HttpServletRequest) null, pollerHeader0, "m/fkeLP", (Map<String, String>) hashMap1, "m/fkeLP", false);
      long long0 = pollerRequest0.getUserId();
      assertEquals((-1L), long0);
      assertEquals("{chunkId=m/fkeLP, parameterMap={}, pollerHeader={_browserKey=-1, companyId=-1, portletIdsMap={}, startPolling=false, timestamp=0, userId=-1}, portletId=m/fkeLP, receiveRequest=false}", pollerRequest0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PollerRequest pollerRequest0 = new PollerRequest((HttpServletRequest) null, (PollerHeader) null, "h", (Map<String, String>) hashMap0, "h", false);
      pollerRequest0.getRequest();
      assertEquals("{chunkId=h, parameterMap={}, pollerHeader=null, portletId=h, receiveRequest=false}", pollerRequest0.toString());
      assertEquals(false, pollerRequest0.isReceiveRequest());
  }

  @Test
  public void test3()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      PollerHeader pollerHeader0 = new PollerHeader((-1L), (-1L), (-1L), (Map<String, Boolean>) hashMap0, false);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      PollerRequest pollerRequest0 = new PollerRequest((HttpServletRequest) null, pollerHeader0, "m/fkeLP", (Map<String, String>) hashMap1, "m/fkeLP", false);
      String string0 = pollerRequest0.getChunkId();
      assertEquals("{chunkId=m/fkeLP, parameterMap={}, pollerHeader={_browserKey=-1, companyId=-1, portletIdsMap={}, startPolling=false, timestamp=0, userId=-1}, portletId=m/fkeLP, receiveRequest=false}", pollerRequest0.toString());
      assertNotNull(string0);
      assertEquals(false, pollerRequest0.isReceiveRequest());
  }

  @Test
  public void test4()  throws Throwable  {
      PollerRequest pollerRequest0 = new PollerRequest((HttpServletRequest) null, (PollerHeader) null, "}", (Map<String, String>) null, "}", false);
      pollerRequest0.getParameterMap();
      assertEquals("{chunkId=}, parameterMap=null, pollerHeader=null, portletId=}, receiveRequest=false}", pollerRequest0.toString());
      assertEquals(false, pollerRequest0.isReceiveRequest());
  }

  @Test
  public void test5()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PollerRequest pollerRequest0 = new PollerRequest((HttpServletRequest) null, (PollerHeader) null, (String) null, (Map<String, String>) hashMap0, (String) null, false);
      pollerRequest0.getPollerHeader();
      assertEquals("{chunkId=null, parameterMap={}, pollerHeader=null, portletId=null, receiveRequest=false}", pollerRequest0.toString());
      assertEquals(false, pollerRequest0.isReceiveRequest());
  }

  @Test
  public void test6()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PollerRequest pollerRequest0 = new PollerRequest((HttpServletRequest) null, (PollerHeader) null, (String) null, (Map<String, String>) hashMap0, "ox+<t&Ay+6:hB^'|", false);
      String string0 = pollerRequest0.toString();
      assertNotNull(string0);
      assertEquals("{chunkId=ox+<t&Ay+6:hB^'|, parameterMap={}, pollerHeader=null, portletId=null, receiveRequest=false}", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PollerRequest pollerRequest0 = new PollerRequest((HttpServletRequest) null, (PollerHeader) null, "h", (Map<String, String>) hashMap0, "h", false);
      // Undeclared exception!
      try {
        pollerRequest0.getBrowserKey();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PollerHeader pollerHeader0 = new PollerHeader(193L, 193L, 193L, (Map<String, Boolean>) null, false);
      PollerRequest pollerRequest0 = new PollerRequest((HttpServletRequest) null, pollerHeader0, "W,@;Id>", (Map<String, String>) hashMap0, "W,@;Id>", false);
      pollerRequest0.getTimestamp();
      assertEquals("{chunkId=W,@;Id>, parameterMap={}, pollerHeader={_browserKey=193, companyId=193, portletIdsMap=null, startPolling=false, timestamp=0, userId=193}, portletId=W,@;Id>, receiveRequest=false}", pollerRequest0.toString());
      assertEquals(false, pollerRequest0.isReceiveRequest());
  }

  @Test
  public void test9()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      PollerHeader pollerHeader0 = new PollerHeader((-1L), (-1L), (-1L), (Map<String, Boolean>) hashMap0, false);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      PollerRequest pollerRequest0 = new PollerRequest((HttpServletRequest) null, pollerHeader0, "m/fkeLP", (Map<String, String>) hashMap1, "m/fkeLP", false);
      String string0 = pollerRequest0.getPortletId();
      assertEquals(false, pollerRequest0.isReceiveRequest());
      assertNotNull(string0);
      assertEquals("{chunkId=m/fkeLP, parameterMap={}, pollerHeader={_browserKey=-1, companyId=-1, portletIdsMap={}, startPolling=false, timestamp=0, userId=-1}, portletId=m/fkeLP, receiveRequest=false}", pollerRequest0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PollerRequest pollerRequest0 = new PollerRequest((HttpServletRequest) null, (PollerHeader) null, "", (Map<String, String>) hashMap0, "", false);
      // Undeclared exception!
      try {
        pollerRequest0.getPortletIds();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      PollerRequest pollerRequest0 = new PollerRequest((HttpServletRequest) null, (PollerHeader) null, "}", (Map<String, String>) null, "}", false);
      // Undeclared exception!
      try {
        pollerRequest0.isInitialRequest();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PollerRequest pollerRequest0 = new PollerRequest((HttpServletRequest) null, (PollerHeader) null, (String) null, (Map<String, String>) hashMap0, "ox+<t&Ay+6:hB^'|", false);
      // Undeclared exception!
      try {
        pollerRequest0.isStartPolling();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      PollerRequest pollerRequest0 = new PollerRequest((HttpServletRequest) null, (PollerHeader) null, "}", (Map<String, String>) null, "}", false);
      boolean boolean0 = pollerRequest0.isReceiveRequest();
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      PollerHeader pollerHeader0 = new PollerHeader((-1L), (-1L), (-1L), (Map<String, Boolean>) hashMap0, false);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      PollerRequest pollerRequest0 = new PollerRequest((HttpServletRequest) null, pollerHeader0, "m/fkeLP", (Map<String, String>) hashMap1, "m/fkeLP", false);
      boolean boolean0 = pollerRequest0.equals((Object) "m/fkeLP");
      assertEquals(false, pollerRequest0.isReceiveRequest());
      assertEquals(false, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      PollerRequest pollerRequest0 = new PollerRequest((HttpServletRequest) null, (PollerHeader) null, "l", (Map<String, String>) null, "l", true);
      PollerRequest pollerRequest1 = new PollerRequest((HttpServletRequest) null, (PollerHeader) null, "l", (Map<String, String>) null, "l", true);
      boolean boolean0 = pollerRequest0.equals((Object) pollerRequest1);
      assertEquals(true, pollerRequest0.isReceiveRequest());
      assertEquals(true, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      PollerRequest pollerRequest0 = new PollerRequest((HttpServletRequest) null, (PollerHeader) null, "}", (Map<String, String>) null, "}", false);
      PollerRequest pollerRequest1 = new PollerRequest((HttpServletRequest) null, (PollerHeader) null, "{chu=TnkId=", (Map<String, String>) null, "{chu=TnkId=", false);
      boolean boolean0 = pollerRequest0.equals((Object) pollerRequest1);
      assertEquals(false, boolean0);
      assertEquals(false, pollerRequest1.isReceiveRequest());
  }

  @Test
  public void test17()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PollerRequest pollerRequest0 = new PollerRequest((HttpServletRequest) null, (PollerHeader) null, (String) null, (Map<String, String>) hashMap0, "ox+<t&Ay+6:hB^'|", false);
      int int0 = pollerRequest0.hashCode();
      assertEquals("{chunkId=ox+<t&Ay+6:hB^'|, parameterMap={}, pollerHeader=null, portletId=null, receiveRequest=false}", pollerRequest0.toString());
      assertEquals(0, int0);
  }

  @Test
  public void test18()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PollerHeader pollerHeader0 = new PollerHeader(193L, 193L, 193L, (Map<String, Boolean>) null, false);
      PollerRequest pollerRequest0 = new PollerRequest((HttpServletRequest) null, pollerHeader0, "W,@;Id>", (Map<String, String>) hashMap0, "W,@;Id>", false);
      int int0 = pollerRequest0.hashCode();
      assertEquals(1224027891, int0);
      assertEquals(false, pollerRequest0.isReceiveRequest());
  }
}
