/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.xml;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.xml.Visitor;
import com.liferay.portal.xml.ProcessingInstructionImpl;
import java.util.Map;
import org.dom4j.DocumentFactory;
import org.dom4j.Element;
import org.dom4j.ProcessingInstruction;
import org.dom4j.dom.DOMProcessingInstruction;
import org.dom4j.tree.DefaultProcessingInstruction;
import org.dom4j.tree.FlyweightProcessingInstruction;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ProcessingInstructionImplEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl((ProcessingInstruction) null);
      // Undeclared exception!
      try {
        processingInstructionImpl0.equals((Object) "layeredPane");
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * java.lang.String cannot be cast to com.liferay.portal.xml.ProcessingInstructionImpl
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      FlyweightProcessingInstruction flyweightProcessingInstruction0 = new FlyweightProcessingInstruction("bB", "bB");
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl((ProcessingInstruction) flyweightProcessingInstruction0);
      String string0 = processingInstructionImpl0.getValue("bB");
      assertEquals("", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      DocumentFactory documentFactory0 = new DocumentFactory();
      DefaultProcessingInstruction defaultProcessingInstruction0 = (DefaultProcessingInstruction)documentFactory0.createProcessingInstruction("sum", "sum");
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl((ProcessingInstruction) defaultProcessingInstruction0);
      // Undeclared exception!
      try {
        processingInstructionImpl0.setValues((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      DOMProcessingInstruction dOMProcessingInstruction0 = new DOMProcessingInstruction((Element) null, "null", "null");
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl((ProcessingInstruction) dOMProcessingInstruction0);
      boolean boolean0 = processingInstructionImpl0.removeValue("null");
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl((ProcessingInstruction) null);
      // Undeclared exception!
      try {
        processingInstructionImpl0.accept((Visitor<Integer>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl((ProcessingInstruction) null);
      // Undeclared exception!
      try {
        processingInstructionImpl0.setValue("http://xml.apache.org/axis/", "http://xml.apache.org/axis/");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      DocumentFactory documentFactory0 = new DocumentFactory();
      DefaultProcessingInstruction defaultProcessingInstruction0 = (DefaultProcessingInstruction)documentFactory0.createProcessingInstruction("sum", "sum");
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl((ProcessingInstruction) defaultProcessingInstruction0);
      int int0 = processingInstructionImpl0.hashCode();
      assertEquals(271455300, int0);
  }

  @Test
  public void test7()  throws Throwable  {
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl((ProcessingInstruction) null);
      // Undeclared exception!
      try {
        processingInstructionImpl0.toString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl((ProcessingInstruction) null);
      ProcessingInstruction processingInstruction0 = processingInstructionImpl0.getWrappedProcessingInstruction();
      assertNull(processingInstruction0);
  }

  @Test
  public void test9()  throws Throwable  {
      FlyweightProcessingInstruction flyweightProcessingInstruction0 = new FlyweightProcessingInstruction();
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl((ProcessingInstruction) flyweightProcessingInstruction0);
      String string0 = processingInstructionImpl0.getText();
      assertNull(string0);
  }

  @Test
  public void test10()  throws Throwable  {
      DOMProcessingInstruction dOMProcessingInstruction0 = new DOMProcessingInstruction("L}]S(2ZAtMG!2Nq", "L}]S(2ZAtMG!2Nq");
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl((ProcessingInstruction) dOMProcessingInstruction0);
      Map<String, String> map0 = processingInstructionImpl0.getValues();
      assertEquals(0, map0.size());
  }

  @Test
  public void test11()  throws Throwable  {
      FlyweightProcessingInstruction flyweightProcessingInstruction0 = new FlyweightProcessingInstruction();
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl((ProcessingInstruction) flyweightProcessingInstruction0);
      String string0 = processingInstructionImpl0.getTarget();
      assertNull(string0);
  }

  @Test
  public void test12()  throws Throwable  {
      DOMProcessingInstruction dOMProcessingInstruction0 = new DOMProcessingInstruction((Element) null, "null", "null");
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl((ProcessingInstruction) dOMProcessingInstruction0);
      processingInstructionImpl0.setTarget("P} H");
      assertEquals("<?P} H null?>", processingInstructionImpl0.formattedString());
      assertEquals("P} H", dOMProcessingInstruction0.getTarget());
  }
}
