/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.security.pacl.checker;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.security.pacl.permission.PortalHookPermission;
import com.liferay.portal.security.pacl.InactivePACLPolicy;
import com.liferay.portal.security.pacl.PACLPolicy;
import com.liferay.portal.security.pacl.checker.PortalHookChecker;
import java.security.Permission;
import java.util.Properties;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PortalHookCheckerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      PortalHookChecker portalHookChecker0 = new PortalHookChecker();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      PortalHookPermission portalHookPermission0 = new PortalHookPermission("hasIndexer", classLoader0, (Object) "mnemonic");
      // Undeclared exception!
      try {
        portalHookChecker0.checkPermission((Permission) portalHookPermission0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      PortalHookChecker portalHookChecker0 = new PortalHookChecker();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      PortalHookPermission portalHookPermission0 = new PortalHookPermission("customJspDir", classLoader0, (Object) "mnemonic");
      // Undeclared exception!
      try {
        portalHookChecker0.checkPermission((Permission) portalHookPermission0);
        fail("Expecting exception: SecurityException");
      } catch(SecurityException e) {
        /*
         * Attempted to set custom jsp dir
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      PortalHookChecker portalHookChecker0 = new PortalHookChecker();
      ClassLoader classLoader0 = portalHookChecker0.getCommonClassLoader();
      PortalHookPermission portalHookPermission0 = new PortalHookPermission("sxcu<k/ntOjU{", classLoader0, (Object) "First");
      portalHookChecker0.checkPermission((Permission) portalHookPermission0);
      assertEquals("sxcu<k/ntOjU{", portalHookPermission0.getName());
  }

  @Test
  public void test3()  throws Throwable  {
      PortalHookChecker portalHookChecker0 = new PortalHookChecker();
      PortalHookPermission portalHookPermission0 = new PortalHookPermission("service", (ClassLoader) null, (Object) "Default");
      // Undeclared exception!
      try {
        portalHookChecker0.checkPermission((Permission) portalHookPermission0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      PortalHookChecker portalHookChecker0 = new PortalHookChecker();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Properties properties0 = new Properties();
      InactivePACLPolicy inactivePACLPolicy0 = new InactivePACLPolicy("lPBQh#/9YC$E8\"3r:5", classLoader0, properties0);
      portalHookChecker0.setPACLPolicy((PACLPolicy) inactivePACLPolicy0);
      portalHookChecker0.afterPropertiesSet();
      assertEquals("lPBQh#/9YC$E8\"3r:5", portalHookChecker0.getServletContextName());
  }
}
