/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.io;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.io.WriterOutputStream;
import java.io.IOException;
import java.io.StringWriter;
import java.io.Writer;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class WriterOutputStreamEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      WriterOutputStream writerOutputStream0 = new WriterOutputStream((Writer) null, "UTF-8");
      String string0 = writerOutputStream0.getEncoding();
      assertEquals("UTF-8", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(29);
      WriterOutputStream writerOutputStream0 = new WriterOutputStream((Writer) stringWriter0);
      assertEquals("UTF-8", writerOutputStream0.getEncoding());
  }

  @Test
  public void test2()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      WriterOutputStream writerOutputStream0 = new WriterOutputStream((Writer) stringWriter0, (String) null, 6, 6, false);
      writerOutputStream0.flush();
      assertEquals("UTF-8", writerOutputStream0.getEncoding());
  }

  @Test
  public void test3()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      WriterOutputStream writerOutputStream0 = new WriterOutputStream((Writer) stringWriter0, (String) null, 6, 6, false);
      assertNotNull(writerOutputStream0);
      
      writerOutputStream0.close();
      assertEquals("", stringWriter0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      WriterOutputStream writerOutputStream0 = new WriterOutputStream((Writer) stringWriter0, (String) null, 6, 6, false);
      byte[] byteArray0 = new byte[8];
      writerOutputStream0.write(byteArray0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000", stringWriter0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      WriterOutputStream writerOutputStream0 = new WriterOutputStream((Writer) stringWriter0, (String) null, true);
      writerOutputStream0.write((int) 'J');
      assertEquals("J", stringWriter0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      WriterOutputStream writerOutputStream0 = null;
      try {
        writerOutputStream0 = new WriterOutputStream((Writer) null, "", (-17), (-17), true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Input buffer size -17 is less than 4
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(29);
      WriterOutputStream writerOutputStream0 = null;
      try {
        writerOutputStream0 = new WriterOutputStream((Writer) stringWriter0, "UTF\"-8", (int) (byte)111, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Output buffer size 0 must be a positive number
         */
      }
  }
}
