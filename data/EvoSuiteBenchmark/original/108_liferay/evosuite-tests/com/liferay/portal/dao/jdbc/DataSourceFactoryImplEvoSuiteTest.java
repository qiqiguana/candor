/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.dao.jdbc;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.dao.jdbc.DataSourceFactoryImpl;
import com.liferay.portal.dao.jdbc.util.DataSourceWrapper;
import interbase.interclient.ConnectionPoolModule;
import java.sql.SQLException;
import java.util.Properties;
import javax.sql.DataSource;
import org.apache.commons.dbcp.BasicDataSource;
import org.apache.tomcat.jdbc.pool.DataSourceProxy;
import org.apache.tomcat.jdbc.pool.PoolProperties;
import org.apache.tomcat.jdbc.pool.XADataSource;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DataSourceFactoryImplEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DataSourceFactoryImpl dataSourceFactoryImpl0 = new DataSourceFactoryImpl();
      Properties properties0 = new Properties();
      BasicDataSource basicDataSource0 = (BasicDataSource)dataSourceFactoryImpl0.initDataSourceDBCP(properties0);
      assertEquals(3, basicDataSource0.getNumTestsPerEvictionRun());
  }

  @Test
  public void test1()  throws Throwable  {
      DataSourceFactoryImpl dataSourceFactoryImpl0 = new DataSourceFactoryImpl();
      // Undeclared exception!
      try {
        dataSourceFactoryImpl0.initDataSource("H!=%3_3;^s>;", "H!=%3_3;^s>;", "H!=%3_3;^s>;", "H!=%3_3;^s>;");
        fail("Expecting exception: NoClassDefFoundError");
      } catch(NoClassDefFoundError e) {
        /*
         * Could not initialize class com.liferay.portal.util.PropsUtil
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      DataSourceFactoryImpl dataSourceFactoryImpl0 = new DataSourceFactoryImpl();
      ConnectionPoolModule connectionPoolModule0 = new ConnectionPoolModule();
      dataSourceFactoryImpl0.destroyDataSource((DataSource) connectionPoolModule0);
      assertNull(connectionPoolModule0.getDataSourceName());
  }

  @Test
  public void test3()  throws Throwable  {
      DataSourceFactoryImpl dataSourceFactoryImpl0 = new DataSourceFactoryImpl();
      XADataSource xADataSource0 = new XADataSource();
      DataSourceWrapper dataSourceWrapper0 = new DataSourceWrapper((DataSource) xADataSource0);
      dataSourceFactoryImpl0.destroyDataSource((DataSource) dataSourceWrapper0);
      assertEquals("Tomcat Connection Pool[1-176572588]", xADataSource0.getName());
  }

  @Test
  public void test4()  throws Throwable  {
      DataSourceFactoryImpl dataSourceFactoryImpl0 = new DataSourceFactoryImpl();
      Properties properties0 = new Properties();
      // Undeclared exception!
      try {
        dataSourceFactoryImpl0.initDataSource(properties0);
        fail("Expecting exception: NoClassDefFoundError");
      } catch(NoClassDefFoundError e) {
        /*
         * Could not initialize class com.liferay.portal.util.PropsUtil
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      DataSourceFactoryImpl dataSourceFactoryImpl0 = new DataSourceFactoryImpl();
      DataSourceProxy dataSourceProxy0 = new DataSourceProxy();
      Properties properties0 = dataSourceProxy0.getDbProperties();
      Properties properties1 = PoolProperties.getProperties("preferredtestquery", properties0);
      try {
        dataSourceFactoryImpl0.initDataSourceTomcat(properties1);
        fail("Expecting exception: SQLException");
      } catch(SQLException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      DataSourceFactoryImpl dataSourceFactoryImpl0 = new DataSourceFactoryImpl();
      Properties properties0 = new Properties();
      properties0.put((Object) "divider", (Object) "divider");
      try {
        dataSourceFactoryImpl0.initDataSourceTomcat(properties0);
        fail("Expecting exception: SQLException");
      } catch(SQLException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      DataSourceFactoryImpl dataSourceFactoryImpl0 = new DataSourceFactoryImpl();
      boolean boolean0 = dataSourceFactoryImpl0.isPropertyC3PO("maxpoolsize");
      assertEquals(true, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      DataSourceFactoryImpl dataSourceFactoryImpl0 = new DataSourceFactoryImpl();
      boolean boolean0 = dataSourceFactoryImpl0.isPropertyC3PO("minpoolsize");
      assertEquals(true, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      DataSourceFactoryImpl dataSourceFactoryImpl0 = new DataSourceFactoryImpl();
      boolean boolean0 = dataSourceFactoryImpl0.isPropertyDBCP("preferredtestquery");
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      DataSourceFactoryImpl dataSourceFactoryImpl0 = new DataSourceFactoryImpl();
      boolean boolean0 = dataSourceFactoryImpl0.isPropertyTomcat("jndi.name");
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      DataSourceFactoryImpl dataSourceFactoryImpl0 = new DataSourceFactoryImpl();
      boolean boolean0 = dataSourceFactoryImpl0.isPropertyTomcat("timebetweenevictionrunsmillis");
      assertEquals(true, boolean0);
  }
}
