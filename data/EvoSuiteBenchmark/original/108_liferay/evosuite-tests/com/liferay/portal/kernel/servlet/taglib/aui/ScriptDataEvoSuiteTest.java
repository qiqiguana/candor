/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.servlet.taglib.aui;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.servlet.taglib.aui.ScriptData;
import com.liferay.portal.kernel.util.StringBundler;
import java.util.Set;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ScriptDataEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ScriptData scriptData0 = new ScriptData();
      StringBundler stringBundler0 = scriptData0.getRawSB();
      assertNotNull(stringBundler0);
      
      scriptData0.append("", stringBundler0, "");
      StringBundler stringBundler1 = scriptData0.getCallbackSB();
      assertNotNull(stringBundler1);
      assertEquals(0, stringBundler1.length());
  }

  @Test
  public void test1()  throws Throwable  {
      ScriptData scriptData0 = new ScriptData();
      StringBundler stringBundler0 = scriptData0.getCallbackSB();
      assertEquals("", stringBundler0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      ScriptData scriptData0 = new ScriptData();
      scriptData0.append("sMif4$/O'^@r:&D@o'", "sMif4$/O'^@r:&D@o'", "sMif4$/O'^@r:&D@o'");
      StringBundler stringBundler0 = scriptData0.getRawSB();
      assertEquals(0, stringBundler0.length());
      assertNotNull(stringBundler0);
  }

  @Test
  public void test3()  throws Throwable  {
      ScriptData scriptData0 = new ScriptData();
      scriptData0.append("sMif4$/O'^@r:&D@o'", "sMif4$/O'^@r:&D@o'", "sMif4$/O'^@r:&D@o'");
      Set<String> set0 = scriptData0.getUseSet();
      assertNotNull(set0);
      assertEquals(false, set0.isEmpty());
  }

  @Test
  public void test4()  throws Throwable  {
      ScriptData scriptData0 = new ScriptData();
      scriptData0.append("sMif4$/O'^@r:&D@o'", "sMif4$/O'^@r:&D@o'", "sMif4$/O'^@r:&D@o'");
      scriptData0.mark();
      scriptData0.reset();
  }

  @Test
  public void test5()  throws Throwable  {
      ScriptData scriptData0 = new ScriptData();
      ScriptData scriptData1 = scriptData0.merge((ScriptData) null);
      assertSame(scriptData1, scriptData0);
  }

  @Test
  public void test6()  throws Throwable  {
      ScriptData scriptData0 = new ScriptData();
      ScriptData scriptData1 = scriptData0.merge(scriptData0);
      assertSame(scriptData0, scriptData1);
  }

  @Test
  public void test7()  throws Throwable  {
      ScriptData scriptData0 = new ScriptData();
      ScriptData scriptData1 = new ScriptData();
      ScriptData scriptData2 = scriptData0.merge(scriptData1);
      assertSame(scriptData0, scriptData2);
  }

  @Test
  public void test8()  throws Throwable  {
      ScriptData scriptData0 = new ScriptData();
      scriptData0.reset();
  }

  @Test
  public void test9()  throws Throwable  {
      ScriptData scriptData0 = new ScriptData();
      StringBundler stringBundler0 = scriptData0.getRawSB();
      scriptData0.append("", stringBundler0, "");
      scriptData0.append("", "", "");
  }

  @Test
  public void test10()  throws Throwable  {
      ScriptData scriptData0 = new ScriptData();
      StringBundler stringBundler0 = scriptData0.getRawSB();
      scriptData0.append("sMif4$/O'^@r:&D@o'", stringBundler0, "sMif4$/O'^@r:&D@o'");
      assertEquals(16, stringBundler0.capacity());
  }
}
