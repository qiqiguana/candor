/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.concurrent;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.concurrent.ConcurrentLFUCache;
import java.util.AbstractMap;
import java.util.Map;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ConcurrentLFUCacheEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ConcurrentLFUCache<Object, String> concurrentLFUCache0 = new ConcurrentLFUCache<Object, String>(1138);
      assertNotNull(concurrentLFUCache0);
      
      concurrentLFUCache0.put((Object) "S~mh'D3@m-f", "S~mh'D3@m-f");
      concurrentLFUCache0.put((Object) "S~mh'D3@m-f", "S~mh'D3@m-f");
      assertEquals(2L, concurrentLFUCache0.putCount());
      assertEquals("{evictCount=0, expectedSize=853, hitCount=0, maxSize=1138, missCount=0, putCount=2, size=1}", concurrentLFUCache0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      ConcurrentLFUCache<Object, String> concurrentLFUCache0 = new ConcurrentLFUCache<Object, String>(3);
      assertNotNull(concurrentLFUCache0);
      
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>((Integer) 17, (Object) concurrentLFUCache0);
      String string0 = abstractMap_SimpleEntry0.toString();
      assertEquals("17={evictCount=0, expectedSize=2, hitCount=0, maxSize=3, missCount=0, putCount=0, size=0}", string0);
      assertNotNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      ConcurrentLFUCache<Object, String> concurrentLFUCache0 = new ConcurrentLFUCache<Object, String>(3);
      assertNotNull(concurrentLFUCache0);
      
      concurrentLFUCache0.clear();
      assertEquals("{evictCount=0, expectedSize=2, hitCount=0, maxSize=3, missCount=0, putCount=0, size=0}", concurrentLFUCache0.toString());
      assertEquals(2, concurrentLFUCache0.expectedSize());
  }

  @Test
  public void test3()  throws Throwable  {
      ConcurrentLFUCache<Object, String> concurrentLFUCache0 = new ConcurrentLFUCache<Object, String>(1138);
      assertNotNull(concurrentLFUCache0);
      
      concurrentLFUCache0.missCount();
      assertEquals("{evictCount=0, expectedSize=853, hitCount=0, maxSize=1138, missCount=0, putCount=0, size=0}", concurrentLFUCache0.toString());
      assertEquals(853, concurrentLFUCache0.expectedSize());
  }

  @Test
  public void test4()  throws Throwable  {
      ConcurrentLFUCache<String, Integer> concurrentLFUCache0 = new ConcurrentLFUCache<String, Integer>(797);
      assertNotNull(concurrentLFUCache0);
      
      int int0 = concurrentLFUCache0.maxSize();
      assertEquals(797, int0);
      assertEquals("{evictCount=0, expectedSize=597, hitCount=0, maxSize=797, missCount=0, putCount=0, size=0}", concurrentLFUCache0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      ConcurrentLFUCache<String, Integer> concurrentLFUCache0 = new ConcurrentLFUCache<String, Integer>(797);
      assertNotNull(concurrentLFUCache0);
      
      concurrentLFUCache0.putCount();
      assertEquals("{evictCount=0, expectedSize=597, hitCount=0, maxSize=797, missCount=0, putCount=0, size=0}", concurrentLFUCache0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      ConcurrentLFUCache<Object, String> concurrentLFUCache0 = new ConcurrentLFUCache<Object, String>(1138);
      assertNotNull(concurrentLFUCache0);
      
      int int0 = concurrentLFUCache0.expectedSize();
      assertEquals(853, int0);
      assertEquals("{evictCount=0, expectedSize=853, hitCount=0, maxSize=1138, missCount=0, putCount=0, size=0}", concurrentLFUCache0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      ConcurrentLFUCache<Object, String> concurrentLFUCache0 = new ConcurrentLFUCache<Object, String>(3);
      assertNotNull(concurrentLFUCache0);
      
      Object object0 = new Object();
      concurrentLFUCache0.put((Object) "}YVC>UQ", "gS~mh'D3@m-f");
      concurrentLFUCache0.put(object0, "gS~mh'D3@m-f");
      concurrentLFUCache0.put((Object) "gS~mh'D3@m-f", "gS~mh'D3@m-f");
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>((Integer) 17, (Object) concurrentLFUCache0);
      concurrentLFUCache0.put((Object) abstractMap_SimpleEntry0, "}YVC>UQ");
      assertEquals(4L, concurrentLFUCache0.putCount());
      assertEquals(3, concurrentLFUCache0.size());
  }

  @Test
  public void test8()  throws Throwable  {
      ConcurrentLFUCache<Object, Object> concurrentLFUCache0 = new ConcurrentLFUCache<Object, Object>(128);
      assertNotNull(concurrentLFUCache0);
      
      concurrentLFUCache0.hitCount();
      assertEquals("{evictCount=0, expectedSize=96, hitCount=0, maxSize=128, missCount=0, putCount=0, size=0}", concurrentLFUCache0.toString());
      assertEquals(96, concurrentLFUCache0.expectedSize());
  }

  @Test
  public void test9()  throws Throwable  {
      ConcurrentLFUCache<Object, Object> concurrentLFUCache0 = new ConcurrentLFUCache<Object, Object>(128);
      assertNotNull(concurrentLFUCache0);
      
      concurrentLFUCache0.evictCount();
      assertEquals("{evictCount=0, expectedSize=96, hitCount=0, maxSize=128, missCount=0, putCount=0, size=0}", concurrentLFUCache0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      ConcurrentLFUCache<Map.Entry<Integer, String>, AbstractMap.SimpleEntry<Integer, Long>> concurrentLFUCache0 = null;
      try {
        concurrentLFUCache0 = new ConcurrentLFUCache<Map.Entry<Integer, String>, AbstractMap.SimpleEntry<Integer, Long>>(0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      ConcurrentLFUCache<Object, Integer> concurrentLFUCache0 = null;
      try {
        concurrentLFUCache0 = new ConcurrentLFUCache<Object, Integer>(17, (-4));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      ConcurrentLFUCache<Object, String> concurrentLFUCache0 = null;
      try {
        concurrentLFUCache0 = new ConcurrentLFUCache<Object, String>(735, 735);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      ConcurrentLFUCache<Integer, String> concurrentLFUCache0 = null;
      try {
        concurrentLFUCache0 = new ConcurrentLFUCache<Integer, String>(1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * maxSize and loadFactor are too small
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      ConcurrentLFUCache<String, Integer> concurrentLFUCache0 = new ConcurrentLFUCache<String, Integer>(797);
      assertNotNull(concurrentLFUCache0);
      
      concurrentLFUCache0.get("*/-g{~-0'b!q");
      assertEquals(1L, concurrentLFUCache0.missCount());
      assertEquals("{evictCount=0, expectedSize=597, hitCount=0, maxSize=797, missCount=1, putCount=0, size=0}", concurrentLFUCache0.toString());
  }

  @Test
  public void test15()  throws Throwable  {
      ConcurrentLFUCache<String, Integer> concurrentLFUCache0 = new ConcurrentLFUCache<String, Integer>(797);
      assertNotNull(concurrentLFUCache0);
      
      concurrentLFUCache0.put("*/-g{~-0'b!q", (Integer) 797);
      Integer integer0 = concurrentLFUCache0.get("*/-g{~-0'b!q");
      assertEquals(1, concurrentLFUCache0.size());
      assertEquals(797, (int)integer0);
  }

  @Test
  public void test16()  throws Throwable  {
      ConcurrentLFUCache<Object, Object> concurrentLFUCache0 = new ConcurrentLFUCache<Object, Object>(128);
      assertNotNull(concurrentLFUCache0);
      
      // Undeclared exception!
      try {
        concurrentLFUCache0.put((Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * Key is null
         */
      }
  }
}
