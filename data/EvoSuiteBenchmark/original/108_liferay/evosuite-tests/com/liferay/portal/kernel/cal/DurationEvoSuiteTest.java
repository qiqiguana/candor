/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.cal;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.cal.Duration;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DurationEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Duration duration0 = new Duration();
      duration0.setInterval(1873L);
      // Undeclared exception!
      try {
        duration0.checkWeeksOkay(1);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Weeks and non-weeks are incompatible
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      Duration duration0 = new Duration((-1), (-1), 20, 1);
      String string0 = duration0.toString();
      assertNotNull(string0);
      assertEquals("com.liferay.portal.kernel.cal.Duration[weeks=0,days=-1,hours=-1,minutes=20,seconds=1]", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      Duration duration0 = new Duration(0);
      long long0 = duration0.getInterval();
      assertEquals(0L, long0);
  }

  @Test
  public void test3()  throws Throwable  {
      Duration duration0 = new Duration((-1), (-1), 20, 1);
      Duration duration1 = (Duration)duration0.clone();
      assertNotSame(duration1, duration0);
      assertEquals("com.liferay.portal.kernel.cal.Duration[weeks=0,days=-1,hours=-1,minutes=20,seconds=1]", duration1.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      Duration duration0 = new Duration(0);
      int int0 = duration0.getHours();
      assertEquals(0, int0);
      assertEquals(0, duration0.getWeeks());
  }

  @Test
  public void test5()  throws Throwable  {
      Duration duration0 = new Duration(0);
      int int0 = duration0.getMinutes();
      assertEquals(0, int0);
      assertEquals(0L, duration0.getInterval());
  }

  @Test
  public void test6()  throws Throwable  {
      Duration duration0 = new Duration(334, 334, 334);
      int int0 = duration0.getDays();
      assertEquals(1222774000L, duration0.getInterval());
      assertEquals(0, int0);
  }

  @Test
  public void test7()  throws Throwable  {
      Duration duration0 = new Duration();
      int int0 = duration0.getSeconds();
      assertEquals(0, int0);
  }

  @Test
  public void test8()  throws Throwable  {
      Duration duration0 = new Duration(1200, (-852), (-1477), 1735);
      int int0 = duration0.getWeeks();
      assertEquals(0, int0);
      assertEquals(100525915000L, duration0.getInterval());
  }

  @Test
  public void test9()  throws Throwable  {
      Duration duration0 = new Duration((-1), (-1), 20, 1);
      assertEquals(-1, duration0.getDays());
      
      duration0.setDays(0);
      assertEquals(0, duration0.getDays());
      assertEquals((-2399000L), duration0.getInterval());
  }

  @Test
  public void test10()  throws Throwable  {
      Duration duration0 = new Duration(0);
      // Undeclared exception!
      try {
        duration0.setDays((-16));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Day value out of range
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Duration duration0 = new Duration(12, 12, 12, 12);
      duration0.setHours(0);
      assertEquals(0, duration0.getHours());
      assertEquals("com.liferay.portal.kernel.cal.Duration[weeks=0,days=12,hours=0,minutes=12,seconds=12]", duration0.toString());
  }

  @Test
  public void test12()  throws Throwable  {
      Duration duration0 = new Duration(1200, (-852), (-1477), 1735);
      // Undeclared exception!
      try {
        duration0.setHours((-1));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Hour value out of range
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      Duration duration0 = new Duration();
      // Undeclared exception!
      try {
        duration0.setInterval((-878L));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Negative-length interval
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      Duration duration0 = new Duration();
      // Undeclared exception!
      try {
        duration0.setMinutes((-1607));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Minute value out of range
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      Duration duration0 = new Duration();
      duration0.setSeconds(1903);
      assertEquals(31, duration0.getMinutes());
      assertEquals(43, duration0.getSeconds());
  }

  @Test
  public void test16()  throws Throwable  {
      Duration duration0 = new Duration(393, 393, (-1068), 3);
      // Undeclared exception!
      try {
        duration0.setSeconds((-1540));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Second value out of range
         */
      }
  }

  @Test
  public void test17()  throws Throwable  {
      Duration duration0 = new Duration(0);
      duration0.setWeeks(1352);
      // Undeclared exception!
      try {
        duration0.setMinutes(1352);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Weeks and non-weeks are incompatible
         */
      }
  }

  @Test
  public void test18()  throws Throwable  {
      Duration duration0 = new Duration();
      // Undeclared exception!
      try {
        duration0.setWeeks((-919));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Week value out of range
         */
      }
  }

  @Test
  public void test19()  throws Throwable  {
      Duration duration0 = new Duration(0);
      duration0.checkWeeksOkay(0);
      assertEquals(0L, duration0.getInterval());
      assertEquals("com.liferay.portal.kernel.cal.Duration[weeks=0,days=0,hours=0,minutes=0,seconds=0]", duration0.toString());
  }

  @Test
  public void test20()  throws Throwable  {
      Duration duration0 = new Duration(12, 12, 12, 12);
      // Undeclared exception!
      try {
        duration0.checkWeeksOkay(12);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Weeks and non-weeks are incompatible
         */
      }
  }

  @Test
  public void test21()  throws Throwable  {
      Duration duration0 = new Duration(334, 334, 334);
      // Undeclared exception!
      try {
        duration0.checkWeeksOkay(12);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Weeks and non-weeks are incompatible
         */
      }
  }

  @Test
  public void test22()  throws Throwable  {
      Duration duration0 = new Duration(0, Integer.MIN_VALUE, 0);
      // Undeclared exception!
      try {
        duration0.checkWeeksOkay((-109));
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Weeks and non-weeks are incompatible
         */
      }
  }
}
