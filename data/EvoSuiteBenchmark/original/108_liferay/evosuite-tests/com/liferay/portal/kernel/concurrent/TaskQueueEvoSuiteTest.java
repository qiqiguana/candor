/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.concurrent;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.concurrent.TaskQueue;
import java.util.Collection;
import java.util.LinkedList;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.ReentrantLock;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TaskQueueEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      TaskQueue<Object> taskQueue0 = new TaskQueue<Object>();
      assertNotNull(taskQueue0);
      
      boolean boolean0 = taskQueue0.remove((Object) "[]");
      assertEquals(false, boolean0);
      assertEquals(2147483647, taskQueue0.remainingCapacity());
  }

  @Test
  public void test1()  throws Throwable  {
      TaskQueue<Object> taskQueue0 = new TaskQueue<Object>();
      assertNotNull(taskQueue0);
      
      boolean[] booleanArray0 = new boolean[8];
      boolean boolean0 = taskQueue0.offer((Object) "[]", booleanArray0);
      assertEquals(2147483646, taskQueue0.remainingCapacity());
      assertEquals(true, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      TaskQueue<Object> taskQueue0 = new TaskQueue<Object>();
      assertNotNull(taskQueue0);
      
      ReentrantLock reentrantLock0 = taskQueue0.getTakeLock();
      assertEquals(2147483647, taskQueue0.remainingCapacity());
      assertEquals(true, reentrantLock0.isFair());
      assertNotNull(reentrantLock0);
  }

  @Test
  public void test3()  throws Throwable  {
      TaskQueue<String> taskQueue0 = null;
      try {
        taskQueue0 = new TaskQueue<String>((-1332));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      TaskQueue<Object> taskQueue0 = new TaskQueue<Object>();
      assertNotNull(taskQueue0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      int int0 = taskQueue0.drainTo((Collection<Object>) linkedList0);
      assertEquals(0, int0);
      assertEquals(2147483647, taskQueue0.remainingCapacity());
  }

  @Test
  public void test5()  throws Throwable  {
      TaskQueue<Object> taskQueue0 = new TaskQueue<Object>();
      assertNotNull(taskQueue0);
      
      // Undeclared exception!
      try {
        taskQueue0.drainTo((Collection<Object>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      TaskQueue<Object> taskQueue0 = new TaskQueue<Object>();
      assertNotNull(taskQueue0);
      
      boolean boolean0 = taskQueue0.isEmpty();
      assertEquals(2147483647, taskQueue0.remainingCapacity());
      assertEquals(true, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      TaskQueue<Integer> taskQueue0 = new TaskQueue<Integer>();
      assertNotNull(taskQueue0);
      
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      taskQueue0.poll(0L, timeUnit0);
      assertEquals(2147483647, taskQueue0.remainingCapacity());
  }
}
