/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.dao.orm.hibernate;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.dao.orm.hibernate.CriterionImpl;
import com.liferay.portal.dao.orm.hibernate.DynamicQueryImpl;
import com.liferay.portal.dao.orm.hibernate.OrderImpl;
import com.liferay.portal.dao.orm.hibernate.PropertyImpl;
import com.liferay.portal.kernel.dao.orm.Criterion;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.Order;
import com.liferay.portal.kernel.dao.orm.Projection;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Property;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DynamicQueryImplEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DynamicQueryImpl dynamicQueryImpl0 = new DynamicQueryImpl((DetachedCriteria) null);
      dynamicQueryImpl0.setLimit(0, 0);
  }

  @Test
  public void test1()  throws Throwable  {
      DetachedCriteria detachedCriteria0 = DetachedCriteria.forEntityName(" ", " ");
      DynamicQueryImpl dynamicQueryImpl0 = new DynamicQueryImpl(detachedCriteria0);
      Property property0 = Property.forName("com.liferay.portal.dao.orm.hibernate.DynamicQueryImpl@7e6dd7d8");
      PropertyImpl propertyImpl0 = new PropertyImpl(property0);
      CriterionImpl criterionImpl0 = (CriterionImpl)propertyImpl0.lt((DynamicQuery) dynamicQueryImpl0);
      DynamicQueryImpl dynamicQueryImpl1 = (DynamicQueryImpl)dynamicQueryImpl0.add((Criterion) criterionImpl0);
      assertSame(dynamicQueryImpl0, dynamicQueryImpl1);
  }

  @Test
  public void test2()  throws Throwable  {
      DynamicQueryImpl dynamicQueryImpl0 = new DynamicQueryImpl((DetachedCriteria) null);
      // Undeclared exception!
      try {
        dynamicQueryImpl0.list();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      DetachedCriteria detachedCriteria0 = DetachedCriteria.forEntityName("mtIo}u}3");
      DynamicQueryImpl dynamicQueryImpl0 = new DynamicQueryImpl(detachedCriteria0);
      Property property0 = Property.forName("mtIo}u}3");
      PropertyImpl propertyImpl0 = new PropertyImpl(property0);
      OrderImpl orderImpl0 = (OrderImpl)propertyImpl0.desc();
      DynamicQueryImpl dynamicQueryImpl1 = (DynamicQueryImpl)dynamicQueryImpl0.addOrder((Order) orderImpl0);
      assertSame(dynamicQueryImpl0, dynamicQueryImpl1);
  }

  @Test
  public void test4()  throws Throwable  {
      DetachedCriteria detachedCriteria0 = DetachedCriteria.forEntityName("mtIo}u}3");
      DynamicQueryImpl dynamicQueryImpl0 = new DynamicQueryImpl(detachedCriteria0);
      Property property0 = Property.forName("mtIo}u}3");
      PropertyImpl propertyImpl0 = new PropertyImpl(property0);
      dynamicQueryImpl0.setProjection((Projection) propertyImpl0);
      assertEquals("DetachableCriteria(CriteriaImpl(mtIo}u}3:this[][]mtIo}u}3))", detachedCriteria0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      DetachedCriteria detachedCriteria0 = DetachedCriteria.forEntityName("", "");
      Property property0 = Property.forName("");
      DynamicQueryImpl dynamicQueryImpl0 = new DynamicQueryImpl(detachedCriteria0);
      PropertyImpl propertyImpl0 = new PropertyImpl(property0);
      // Undeclared exception!
      try {
        dynamicQueryImpl0.setProjection((Projection) propertyImpl0, false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      DetachedCriteria detachedCriteria0 = DetachedCriteria.forEntityName(" ", " ");
      DynamicQueryImpl dynamicQueryImpl0 = new DynamicQueryImpl(detachedCriteria0);
      String string0 = dynamicQueryImpl0.toString();
      assertNotNull(string0);
  }
}
