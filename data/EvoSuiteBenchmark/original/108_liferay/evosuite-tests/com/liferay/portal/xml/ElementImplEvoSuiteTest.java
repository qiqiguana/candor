/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.xml;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.xml.Attribute;
import com.liferay.portal.kernel.xml.Visitor;
import com.liferay.portal.xml.AttributeImpl;
import com.liferay.portal.xml.CDATAImpl;
import com.liferay.portal.xml.ElementImpl;
import com.liferay.portal.xml.EntityImpl;
import com.liferay.portal.xml.NamespaceImpl;
import com.liferay.portal.xml.NodeImpl;
import com.liferay.portal.xml.QNameImpl;
import com.liferay.portal.xml.TextImpl;
import java.io.IOException;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import org.dom4j.CDATA;
import org.dom4j.DocumentFactory;
import org.dom4j.Element;
import org.dom4j.Entity;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.Text;
import org.dom4j.bean.BeanElement;
import org.dom4j.bean.BeanMetaData;
import org.dom4j.dom.DOMElement;
import org.dom4j.tree.BaseElement;
import org.dom4j.tree.DefaultAttribute;
import org.dom4j.tree.DefaultCDATA;
import org.dom4j.tree.DefaultElement;
import org.dom4j.tree.DefaultEntity;
import org.dom4j.tree.DefaultText;
import org.dom4j.tree.FlyweightAttribute;
import org.dom4j.tree.FlyweightEntity;
import org.dom4j.tree.NamespaceStack;
import org.dom4j.util.IndexedElement;
import org.dom4j.util.NonLazyElement;
import org.dom4j.util.UserDataElement;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ElementImplEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BaseElement baseElement0 = new BaseElement("Cannot retrieve the name of an unnamed savepoint.");
      ElementImpl elementImpl0 = new ElementImpl((Element) baseElement0);
      elementImpl0.addCDATA("Cannot retrieve the name of an unnamed savepoint.");
      assertEquals("Cannot retrieve the name of an unnamed savepoint.", elementImpl0.getText());
      assertEquals("Cannot retrieve the name of an unnamed savepoint.", baseElement0.getStringValue());
  }

  @Test
  public void test1()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("anyType");
      ElementImpl elementImpl0 = new ElementImpl((Element) dOMElement0);
      String string0 = elementImpl0.formattedString("anyType");
      assertEquals("\n<anyType/>", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      Namespace namespace0 = new Namespace(").", ").");
      DOMElement dOMElement0 = new DOMElement(").", namespace0);
      ElementImpl elementImpl0 = new ElementImpl((Element) dOMElement0);
      ElementImpl elementImpl1 = (ElementImpl)elementImpl0.createCopy();
      assertEquals("", elementImpl1.getTextTrim());
  }

  @Test
  public void test3()  throws Throwable  {
      BeanElement beanElement0 = new BeanElement("", (Object) null);
      ElementImpl elementImpl0 = new ElementImpl((Element) beanElement0);
      String string0 = elementImpl0.formattedString();
      assertEquals("\n</>", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("");
      ElementImpl elementImpl0 = new ElementImpl((Element) dOMElement0);
      List<com.liferay.portal.kernel.xml.Namespace> list0 = elementImpl0.getNamespacesForURI("");
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test5()  throws Throwable  {
      Class<?> class0 = Class.class;
      BeanMetaData beanMetaData0 = BeanMetaData.get(class0);
      QName qName0 = beanMetaData0.getQName(0);
      IndexedElement indexedElement0 = new IndexedElement(qName0);
      ElementImpl elementImpl0 = new ElementImpl((Element) indexedElement0);
      ElementImpl elementImpl1 = (ElementImpl)elementImpl0.createCopy("{H|;\",");
      assertEquals(0, elementImpl1.attributeCount());
  }

  @Test
  public void test6()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("GY`dy?v`BLMZ:");
      ElementImpl elementImpl0 = new ElementImpl((Element) dOMElement0);
      elementImpl0.addComment("GY`dy?v`BLMZ:");
      assertEquals("<GY`dy?v`BLMZ:><!--GY`dy?v`BLMZ:--></GY`dy?v`BLMZ:>", elementImpl0.asXML());
      assertEquals(1, dOMElement0.nodeCount());
  }

  @Test
  public void test7()  throws Throwable  {
      BeanElement beanElement0 = new BeanElement("", (Object) null);
      ElementImpl elementImpl0 = new ElementImpl((Element) beanElement0);
      Iterator<com.liferay.portal.kernel.xml.Element> iterator0 = elementImpl0.elementIterator("org.dom4j.QName@babe [name: d^:|Vtw+\"c#))%P6R namespace: \"org.dom4j.Namespace@4f9513bc [Namespace: prefix  mapped to URI \"d^:|Vtw+\"c#))%P6R\"]\"]");
      assertEquals(false, iterator0.hasNext());
  }

  @Test
  public void test8()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      QName qName0 = namespaceStack0.getQName("hB_%>N0p\"5CE1K", "hB_%>N0p\"5CE1K", "hB_%>N0p\"5CE1K");
      UserDataElement userDataElement0 = new UserDataElement(qName0);
      ElementImpl elementImpl0 = new ElementImpl((Element) userDataElement0);
      QNameImpl qNameImpl0 = (QNameImpl)elementImpl0.getQName();
      String string0 = elementImpl0.elementTextTrim((com.liferay.portal.kernel.xml.QName) qNameImpl0);
      assertNull(string0);
  }

  @Test
  public void test9()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("G`dy?v`BLZ:");
      ElementImpl elementImpl0 = new ElementImpl((Element) dOMElement0);
      elementImpl0.addElement("H2;,");
      elementImpl0.sortElementsByChildElement("H2;,", "G`dy?v`BLZ:");
      assertEquals(1, dOMElement0.nodeCount());
      assertEquals("\n<G`dy?v`BLZ:>\n\t<H2;,/>\n</G`dy?v`BLZ:>", elementImpl0.formattedString());
  }

  @Test
  public void test10()  throws Throwable  {
      QName qName0 = QName.get("*Xmj1gqyYTH^", "*Xmj1gqyYTH^", "*Xmj1gqyYTH^");
      DOMElement dOMElement0 = new DOMElement(qName0);
      ElementImpl elementImpl0 = new ElementImpl((Element) dOMElement0);
      List<com.liferay.portal.kernel.xml.Namespace> list0 = elementImpl0.declaredNamespaces();
      assertEquals(0, list0.size());
  }

  @Test
  public void test11()  throws Throwable  {
      BaseElement baseElement0 = new BaseElement("i");
      ElementImpl elementImpl0 = new ElementImpl((Element) baseElement0);
      elementImpl0.addAttribute("i", "Element");
      AttributeImpl attributeImpl0 = (AttributeImpl)elementImpl0.attribute(0);
      assertEquals(1, elementImpl0.attributeCount());
      
      boolean boolean0 = elementImpl0.remove((Attribute) attributeImpl0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("");
      dOMElement0.addElement("", "");
      ElementImpl elementImpl0 = new ElementImpl((Element) dOMElement0);
      elementImpl0.sortElementsByAttribute("", "~");
      assertEquals(true, dOMElement0.hasContent());
      assertEquals(false, dOMElement0.isTextOnly());
  }

  @Test
  public void test13()  throws Throwable  {
      QName qName0 = QName.get("GY`dy?v`BLMZ:", "GY`dy?v`BLMZ:");
      FlyweightAttribute flyweightAttribute0 = new FlyweightAttribute(qName0);
      BeanElement beanElement0 = new BeanElement(qName0, (Object) "ChoosableFileFilterChangedProperty");
      ElementImpl elementImpl0 = new ElementImpl((Element) beanElement0);
      AttributeImpl attributeImpl0 = new AttributeImpl((org.dom4j.Attribute) flyweightAttribute0);
      QNameImpl qNameImpl0 = (QNameImpl)attributeImpl0.getQName();
      String string0 = elementImpl0.attributeValue((com.liferay.portal.kernel.xml.QName) qNameImpl0, "GY`dy?v`BLMZ:");
      assertEquals("GY`dy?v`BLMZ:", string0);
  }

  @Test
  public void test14()  throws Throwable  {
      QName qName0 = QName.get("*Xmj1gqyYTH^", "*Xmj1gqyYTH^", "*Xmj1gqyYTH^");
      DOMElement dOMElement0 = new DOMElement(qName0);
      ElementImpl elementImpl0 = new ElementImpl((Element) dOMElement0);
      QNameImpl qNameImpl0 = (QNameImpl)elementImpl0.getQName();
      Iterator<com.liferay.portal.kernel.xml.Element> iterator0 = elementImpl0.elementIterator((com.liferay.portal.kernel.xml.QName) qNameImpl0);
      assertEquals(false, iterator0.hasNext());
  }

  @Test
  public void test15()  throws Throwable  {
      Class<?> class0 = Class.class;
      BeanMetaData beanMetaData0 = BeanMetaData.get(class0);
      QName qName0 = beanMetaData0.getQName(0);
      BeanElement beanElement0 = new BeanElement(qName0);
      ElementImpl elementImpl0 = new ElementImpl((Element) beanElement0);
      QNameImpl qNameImpl0 = (QNameImpl)elementImpl0.getQName("{H|;\",");
      String string0 = elementImpl0.elementText((com.liferay.portal.kernel.xml.QName) qNameImpl0);
      assertNull(string0);
  }

  @Test
  public void test16()  throws Throwable  {
      BaseElement baseElement0 = new BaseElement("Cannot retrieve the name of an unnamed savepoint.");
      ElementImpl elementImpl0 = new ElementImpl((Element) baseElement0);
      String string0 = elementImpl0.formattedString("Cannot retrieve the name of an unnamed savepoint.", false);
      assertNotNull(string0);
      assertEquals("\n<Cannot retrieve the name of an unnamed savepoint./>", string0);
  }

  @Test
  public void test17()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("");
      ElementImpl elementImpl0 = new ElementImpl((Element) dOMElement0);
      CDATAImpl cDATAImpl0 = new CDATAImpl((CDATA) null);
      boolean boolean0 = elementImpl0.remove((com.liferay.portal.kernel.xml.CDATA) cDATAImpl0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      Class<?> class0 = Class.class;
      BeanMetaData beanMetaData0 = BeanMetaData.get(class0);
      QName qName0 = beanMetaData0.getQName(0);
      BeanElement beanElement0 = new BeanElement(qName0);
      ElementImpl elementImpl0 = new ElementImpl((Element) beanElement0);
      String string0 = elementImpl0.attributeValue("{H|;\",", "{H|;\",");
      assertEquals("{H|;\",", string0);
  }

  @Test
  public void test19()  throws Throwable  {
      BeanElement beanElement0 = new BeanElement("", (Object) null);
      ElementImpl elementImpl0 = new ElementImpl((Element) beanElement0);
      String string0 = elementImpl0.getTextTrim();
      assertEquals("", string0);
  }

  @Test
  public void test20()  throws Throwable  {
      IndexedElement indexedElement0 = new IndexedElement("");
      ElementImpl elementImpl0 = new ElementImpl((Element) indexedElement0);
      int int0 = elementImpl0.hashCode();
      assertEquals(280832969, int0);
  }

  @Test
  public void test21()  throws Throwable  {
      BeanElement beanElement0 = new BeanElement("", (Object) null);
      ElementImpl elementImpl0 = new ElementImpl((Element) beanElement0);
      boolean boolean0 = elementImpl0.hasMixedContent();
      assertEquals(false, boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement(",H:", (Namespace) null);
      ElementImpl elementImpl0 = new ElementImpl((Element) dOMElement0);
      DefaultEntity defaultEntity0 = new DefaultEntity("", "");
      EntityImpl entityImpl0 = new EntityImpl((Entity) defaultEntity0);
      boolean boolean0 = elementImpl0.remove((com.liferay.portal.kernel.xml.Entity) entityImpl0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      DocumentFactory documentFactory0 = new DocumentFactory();
      NamespaceStack namespaceStack0 = new NamespaceStack(documentFactory0);
      QName qName0 = namespaceStack0.getQName("ZIkGn.UHqL", "ZIkGn.UHqL", "ZIkGn.UHqL");
      DOMElement dOMElement0 = new DOMElement("GY`dy?v`BLMZ:");
      ElementImpl elementImpl0 = new ElementImpl((Element) dOMElement0);
      QNameImpl qNameImpl0 = new QNameImpl(qName0);
      elementImpl0.addAttribute((com.liferay.portal.kernel.xml.QName) qNameImpl0, "GY`dy?v`BLMZ:");
      assertEquals("\n<GY`dy?v`BLMZ: xmlns=\"ZIkGn.UHqL\" ZIkGn.UHqL=\"GY`dy?v`BLMZ:\"/>", elementImpl0.formattedString());
      assertEquals(1, dOMElement0.attributeCount());
  }

  @Test
  public void test24()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("anyType");
      ElementImpl elementImpl0 = new ElementImpl((Element) dOMElement0);
      Iterator<Attribute> iterator0 = elementImpl0.attributeIterator();
      assertEquals(false, iterator0.hasNext());
  }

  @Test
  public void test25()  throws Throwable  {
      Namespace namespace0 = new Namespace(").", ").");
      DOMElement dOMElement0 = new DOMElement(").", namespace0);
      ElementImpl elementImpl0 = new ElementImpl((Element) dOMElement0);
      String string0 = elementImpl0.getNamespacePrefix();
      assertEquals(").", string0);
  }

  @Test
  public void test26()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement(",H:", (Namespace) null);
      ElementImpl elementImpl0 = new ElementImpl((Element) dOMElement0);
      boolean boolean0 = elementImpl0.isTextOnly();
      assertEquals(true, boolean0);
  }

  @Test
  public void test27()  throws Throwable  {
      QName qName0 = QName.get("*Xmj1gqyYTH^", "*Xmj1gqyYTH^", "*Xmj1gqyYTH^");
      DOMElement dOMElement0 = new DOMElement(qName0);
      ElementImpl elementImpl0 = new ElementImpl((Element) dOMElement0);
      boolean boolean0 = elementImpl0.isRootElement();
      assertEquals(false, boolean0);
  }

  @Test
  public void test28()  throws Throwable  {
      QName qName0 = QName.get("*Xmj1gqyYTH^", "*Xmj1gqyYTH^", "*Xmj1gqyYTH^");
      DOMElement dOMElement0 = new DOMElement(qName0);
      ElementImpl elementImpl0 = new ElementImpl((Element) dOMElement0);
      elementImpl0.setData((Object) "SwingDisplayedMnemonicIndexKey");
      assertEquals(true, elementImpl0.isTextOnly());
  }

  @Test
  public void test29()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("", (Namespace) null);
      ElementImpl elementImpl0 = new ElementImpl((Element) dOMElement0);
      QNameImpl qNameImpl0 = (QNameImpl)elementImpl0.getQName("");
      elementImpl0.setQName((com.liferay.portal.kernel.xml.QName) qNameImpl0);
      assertEquals("", elementImpl0.getName());
  }

  @Test
  public void test30()  throws Throwable  {
      BeanElement beanElement0 = new BeanElement("", (Object) null);
      ElementImpl elementImpl0 = new ElementImpl((Element) beanElement0);
      QNameImpl qNameImpl0 = (QNameImpl)elementImpl0.getQName();
      String string0 = elementImpl0.attributeValue((com.liferay.portal.kernel.xml.QName) qNameImpl0);
      assertNull(string0);
  }

  @Test
  public void test31()  throws Throwable  {
      DefaultElement defaultElement0 = new DefaultElement((String) null);
      ElementImpl elementImpl0 = new ElementImpl((Element) defaultElement0);
      FlyweightEntity flyweightEntity0 = new FlyweightEntity((String) null);
      EntityImpl entityImpl0 = new EntityImpl((Entity) flyweightEntity0);
      elementImpl0.add((com.liferay.portal.kernel.xml.Entity) entityImpl0);
      assertEquals(true, defaultElement0.hasContent());
      assertEquals(false, elementImpl0.isTextOnly());
  }

  @Test
  public void test32()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("GY`dy?v`BLMZ:");
      ElementImpl elementImpl0 = new ElementImpl((Element) dOMElement0);
      // Undeclared exception!
      try {
        elementImpl0.addProcessingInstruction("H2;\",", (Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test33()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement(",H:", (Namespace) null);
      ElementImpl elementImpl0 = new ElementImpl((Element) dOMElement0);
      QNameImpl qNameImpl0 = (QNameImpl)elementImpl0.getQName();
      ElementImpl elementImpl1 = (ElementImpl)elementImpl0.createCopy((com.liferay.portal.kernel.xml.QName) qNameImpl0);
      assertFalse(elementImpl0.equals(elementImpl1));
  }

  @Test
  public void test34()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement(",H:", (Namespace) null);
      ElementImpl elementImpl0 = new ElementImpl((Element) dOMElement0);
      String string0 = elementImpl0.elementTextTrim("");
      assertNull(string0);
  }

  @Test
  public void test35()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("anyType");
      ElementImpl elementImpl0 = new ElementImpl((Element) dOMElement0);
      elementImpl0.addNamespace("anyType", "anyType");
      assertEquals("<anyType xmlns:anyType=\"anyType\"></anyType>", elementImpl0.asXML());
      assertEquals(true, dOMElement0.hasContent());
  }

  @Test
  public void test36()  throws Throwable  {
      NonLazyElement nonLazyElement0 = new NonLazyElement("=y2%[8c");
      ElementImpl elementImpl0 = new ElementImpl((Element) nonLazyElement0);
      // Undeclared exception!
      try {
        elementImpl0.add((com.liferay.portal.kernel.xml.Namespace) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test37()  throws Throwable  {
      BeanElement beanElement0 = new BeanElement("3G$eq&C+0JR", "SortOrder.ASCENDING");
      ElementImpl elementImpl0 = new ElementImpl((Element) beanElement0);
      String string0 = elementImpl0.toString();
      assertNotNull(string0);
  }

  @Test
  public void test38()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("anyType");
      ElementImpl elementImpl0 = new ElementImpl((Element) dOMElement0);
      String string0 = elementImpl0.getQualifiedName();
      assertEquals("anyType", string0);
  }

  @Test
  public void test39()  throws Throwable  {
      ElementImpl elementImpl0 = new ElementImpl((Element) null);
      // Undeclared exception!
      try {
        elementImpl0.accept((Visitor<com.liferay.portal.kernel.xml.Namespace>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test40()  throws Throwable  {
      BeanElement beanElement0 = new BeanElement("3G$eq&C+0JR", "SortOrder.ASCENDING");
      ElementImpl elementImpl0 = new ElementImpl((Element) beanElement0);
      AttributeImpl attributeImpl0 = new AttributeImpl((org.dom4j.Attribute) null);
      // Undeclared exception!
      try {
        elementImpl0.add((Attribute) attributeImpl0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test41()  throws Throwable  {
      DefaultAttribute defaultAttribute0 = new DefaultAttribute("", "");
      QName qName0 = defaultAttribute0.getQName();
      UserDataElement userDataElement0 = new UserDataElement(qName0);
      ElementImpl elementImpl0 = new ElementImpl((Element) userDataElement0);
      elementImpl0.addProcessingInstruction("", "");
      assertEquals(true, userDataElement0.hasContent());
      assertEquals(false, elementImpl0.isTextOnly());
  }

  @Test
  public void test42()  throws Throwable  {
      IndexedElement indexedElement0 = new IndexedElement("");
      ElementImpl elementImpl0 = new ElementImpl((Element) indexedElement0);
      String string0 = elementImpl0.getNamespaceURI();
      assertEquals("", string0);
  }

  @Test
  public void test43()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement(",H:", (Namespace) null);
      ElementImpl elementImpl0 = new ElementImpl((Element) dOMElement0);
      DefaultText defaultText0 = new DefaultText((Element) dOMElement0, "");
      TextImpl textImpl0 = new TextImpl((Text) defaultText0);
      boolean boolean0 = elementImpl0.remove((com.liferay.portal.kernel.xml.Text) textImpl0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test44()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement(",H:", (Namespace) null);
      ElementImpl elementImpl0 = new ElementImpl((Element) dOMElement0);
      int int0 = elementImpl0.attributeCount();
      assertEquals(0, int0);
  }

  @Test
  public void test45()  throws Throwable  {
      Class<?> class0 = ElementImpl.class;
      BeanMetaData beanMetaData0 = new BeanMetaData(class0);
      QName qName0 = beanMetaData0.getQName(0);
      DOMElement dOMElement0 = new DOMElement(qName0, 1821);
      ElementImpl elementImpl0 = new ElementImpl((Element) dOMElement0);
      elementImpl0.getData();
  }

  @Test
  public void test46()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("", (Namespace) null);
      ElementImpl elementImpl0 = new ElementImpl((Element) dOMElement0);
      NamespaceImpl namespaceImpl0 = (NamespaceImpl)elementImpl0.getNamespace();
      boolean boolean0 = elementImpl0.remove((com.liferay.portal.kernel.xml.Namespace) namespaceImpl0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test47()  throws Throwable  {
      BeanElement beanElement0 = new BeanElement((QName) null, (Object) null);
      ElementImpl elementImpl0 = new ElementImpl((Element) beanElement0);
      DefaultCDATA defaultCDATA0 = new DefaultCDATA("5BU");
      CDATAImpl cDATAImpl0 = new CDATAImpl((CDATA) defaultCDATA0);
      elementImpl0.add((com.liferay.portal.kernel.xml.CDATA) cDATAImpl0);
      assertEquals("5BU", elementImpl0.getTextTrim());
      assertEquals("5BU", beanElement0.getStringValue());
  }

  @Test
  public void test48()  throws Throwable  {
      BaseElement baseElement0 = new BaseElement("Cannot retrieve the name of an unnamed savepoint.");
      ElementImpl elementImpl0 = new ElementImpl((Element) baseElement0);
      elementImpl0.appendAttributes((com.liferay.portal.kernel.xml.Element) elementImpl0);
      assertEquals("", elementImpl0.getNamespaceURI());
  }

  @Test
  public void test49()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement(",H:", (Namespace) null);
      ElementImpl elementImpl0 = new ElementImpl((Element) dOMElement0);
      ElementImpl elementImpl1 = (ElementImpl)elementImpl0.addText("");
      assertEquals(true, dOMElement0.hasChildNodes());
      assertTrue(elementImpl0.equals(elementImpl1));
  }

  @Test
  public void test50()  throws Throwable  {
      IndexedElement indexedElement0 = new IndexedElement("");
      ElementImpl elementImpl0 = new ElementImpl((Element) indexedElement0);
      elementImpl0.addEntity("", "");
      assertEquals(true, elementImpl0.hasContent());
      assertEquals(1, indexedElement0.nodeCount());
  }

  @Test
  public void test51()  throws Throwable  {
      BeanElement beanElement0 = new BeanElement("", (Object) null);
      ElementImpl elementImpl0 = new ElementImpl((Element) beanElement0);
      Iterator<com.liferay.portal.kernel.xml.Element> iterator0 = elementImpl0.elementIterator();
      assertEquals(false, iterator0.hasNext());
  }

  @Test
  public void test52()  throws Throwable  {
      DefaultElement defaultElement0 = new DefaultElement((String) null);
      ElementImpl elementImpl0 = new ElementImpl((Element) defaultElement0);
      List<com.liferay.portal.kernel.xml.Namespace> list0 = elementImpl0.additionalNamespaces();
      assertEquals(0, list0.size());
  }

  @Test
  public void test53()  throws Throwable  {
      BeanElement beanElement0 = new BeanElement("", (Object) null);
      ElementImpl elementImpl0 = new ElementImpl((Element) beanElement0);
      elementImpl0.attribute(209);
  }

  @Test
  public void test54()  throws Throwable  {
      BaseElement baseElement0 = new BaseElement("i");
      ElementImpl elementImpl0 = new ElementImpl((Element) baseElement0);
      QNameImpl qNameImpl0 = (QNameImpl)elementImpl0.getQName("Element");
      AttributeImpl attributeImpl0 = (AttributeImpl)elementImpl0.attribute((com.liferay.portal.kernel.xml.QName) qNameImpl0);
      assertNull(attributeImpl0);
  }

  @Test
  public void test55()  throws Throwable  {
      BeanElement beanElement0 = new BeanElement("", (Object) null);
      ElementImpl elementImpl0 = new ElementImpl((Element) beanElement0);
      AttributeImpl attributeImpl0 = (AttributeImpl)elementImpl0.attribute((String) null);
      assertNull(attributeImpl0);
  }

  @Test
  public void test56()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("G`dy?v`BLZ:");
      ElementImpl elementImpl0 = new ElementImpl((Element) dOMElement0);
      QName qName0 = dOMElement0.getQName();
      QNameImpl qNameImpl0 = new QNameImpl(qName0);
      ElementImpl elementImpl1 = (ElementImpl)elementImpl0.element((com.liferay.portal.kernel.xml.QName) qNameImpl0);
      assertNull(elementImpl1);
  }

  @Test
  public void test57()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("", (Namespace) null);
      ElementImpl elementImpl0 = new ElementImpl((Element) dOMElement0);
      ElementImpl elementImpl1 = (ElementImpl)elementImpl0.element("");
      assertNull(elementImpl1);
  }

  @Test
  public void test58()  throws Throwable  {
      BaseElement baseElement0 = new BaseElement("Cannot retrieve the name of an unnamed savepoint.");
      ElementImpl elementImpl0 = new ElementImpl((Element) baseElement0);
      // Undeclared exception!
      try {
        elementImpl0.equals((Object) "COLUMN_HEADER");
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * java.lang.String cannot be cast to com.liferay.portal.xml.ElementImpl
         */
      }
  }

  @Test
  public void test59()  throws Throwable  {
      IndexedElement indexedElement0 = new IndexedElement("log4j.throwableRenderer");
      ElementImpl elementImpl0 = new ElementImpl((Element) indexedElement0);
      NamespaceImpl namespaceImpl0 = (NamespaceImpl)elementImpl0.getNamespaceForPrefix((String) null);
      assertEquals("namespace::*[name()='']", namespaceImpl0.getUniquePath());
  }

  @Test
  public void test60()  throws Throwable  {
      BaseElement baseElement0 = new BaseElement("i");
      ElementImpl elementImpl0 = new ElementImpl((Element) baseElement0);
      NamespaceImpl namespaceImpl0 = (NamespaceImpl)elementImpl0.getNamespaceForPrefix("Element");
      assertNull(namespaceImpl0);
  }

  @Test
  public void test61()  throws Throwable  {
      BeanElement beanElement0 = new BeanElement("", (Object) null);
      ElementImpl elementImpl0 = new ElementImpl((Element) beanElement0);
      NamespaceImpl namespaceImpl0 = (NamespaceImpl)elementImpl0.getNamespaceForURI("");
      assertEquals("", namespaceImpl0.formattedString());
  }

  @Test
  public void test62()  throws Throwable  {
      NonLazyElement nonLazyElement0 = new NonLazyElement("=y2%[8c");
      ElementImpl elementImpl0 = new ElementImpl((Element) nonLazyElement0);
      NamespaceImpl namespaceImpl0 = (NamespaceImpl)elementImpl0.getNamespaceForURI("=y2%[8c");
      assertNull(namespaceImpl0);
  }

  @Test
  public void test63()  throws Throwable  {
      IndexedElement indexedElement0 = new IndexedElement((QName) null);
      ElementImpl elementImpl0 = new ElementImpl((Element) indexedElement0);
      QNameImpl qNameImpl0 = (QNameImpl)elementImpl0.getQName();
      assertNull(qNameImpl0);
  }

  @Test
  public void test64()  throws Throwable  {
      BeanElement beanElement0 = new BeanElement("", (Object) null);
      ElementImpl elementImpl0 = new ElementImpl((Element) beanElement0);
      NodeImpl nodeImpl0 = (NodeImpl)elementImpl0.getXPathResult(931);
      assertNull(nodeImpl0);
  }

  @Test
  public void test65()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      QName qName0 = namespaceStack0.getQName("hB_%>N0p\"5CE1K", "hB_%>N0p\"5CE1K", "hB_%>N0p\"5CE1K");
      UserDataElement userDataElement0 = new UserDataElement(qName0);
      ElementImpl elementImpl0 = new ElementImpl((Element) userDataElement0);
      elementImpl0.sortAttributes(false);
      assertEquals("hB_%>N0p\"5CE1K", elementImpl0.getName());
  }

  @Test
  public void test66()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      QName qName0 = namespaceStack0.getQName("hB_%>N0p\"5CE1K", "hB_%>N0p\"5CE1K", "hB_%>N0p\"5CE1K");
      UserDataElement userDataElement0 = new UserDataElement(qName0);
      ElementImpl elementImpl0 = new ElementImpl((Element) userDataElement0);
      elementImpl0.addElement("hB_%>N0p\"5CE1K", "hB_%>N0p\"5CE1K");
      elementImpl0.sortAttributes(true);
      assertEquals(1, elementImpl0.nodeCount());
  }

  @Test
  public void test67()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("");
      ElementImpl elementImpl0 = new ElementImpl((Element) dOMElement0);
      elementImpl0.addElement("~");
      elementImpl0.sortElementsByAttribute("", "~");
      assertEquals("<><~/></>", elementImpl0.compactString());
      assertEquals("<><~/></>", dOMElement0.asXML());
  }

  @Test
  public void test68()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("");
      dOMElement0.addElement("", "");
      ElementImpl elementImpl0 = new ElementImpl((Element) dOMElement0);
      elementImpl0.addElement("~");
      elementImpl0.sortElementsByAttribute("", "~");
      assertEquals(true, dOMElement0.hasContent());
      assertEquals("<></><~/></>", elementImpl0.compactString());
  }

  @Test
  public void test69()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("GY`dy?v`BLMZ:");
      ElementImpl elementImpl0 = new ElementImpl((Element) dOMElement0);
      dOMElement0.addElement("GY`dy?v`BLMZ:", "GY`dy?v`BLMZ:", "GY`dy?v`BLMZ:");
      elementImpl0.sortElementsByChildElement("H2;\",", "GY`dy?v`BLMZ:");
      assertEquals(1, elementImpl0.nodeCount());
      assertEquals(true, dOMElement0.hasChildNodes());
  }
}
