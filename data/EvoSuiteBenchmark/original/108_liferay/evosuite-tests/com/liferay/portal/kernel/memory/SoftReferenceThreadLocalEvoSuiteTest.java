/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.memory;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.memory.SoftReferenceThreadLocal;
import java.lang.ref.ReferenceQueue;
import java.lang.ref.SoftReference;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SoftReferenceThreadLocalEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SoftReferenceThreadLocal<String> softReferenceThreadLocal0 = new SoftReferenceThreadLocal<String>();
      softReferenceThreadLocal0.remove();
  }

  @Test
  public void test1()  throws Throwable  {
      SoftReferenceThreadLocal<String> softReferenceThreadLocal0 = new SoftReferenceThreadLocal<String>();
      softReferenceThreadLocal0.get();
      String string0 = softReferenceThreadLocal0.get();
      assertNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      SoftReferenceThreadLocal<SoftReference<String>> softReferenceThreadLocal0 = new SoftReferenceThreadLocal<SoftReference<String>>();
      ReferenceQueue<Object> referenceQueue0 = new ReferenceQueue<Object>();
      SoftReference<String> softReference0 = new SoftReference<String>("", (ReferenceQueue<? super String>) referenceQueue0);
      softReferenceThreadLocal0.set(softReference0);
      SoftReference<String> softReference1 = softReferenceThreadLocal0.get();
      assertSame(softReference1, softReference0);
  }
}
