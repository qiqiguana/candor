/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.io;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.io.Base64InputStream;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class Base64InputStreamEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1654);
      Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) pipedInputStream0);
      base64InputStream0.available();
  }

  @Test
  public void test1()  throws Throwable  {
      Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) null);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try {
        base64InputStream0.read(byteArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[3] = (byte)104;
      byteArray0[6] = (byte)104;
      byteArray0[7] = (byte)104;
      byteArray0[12] = (byte)65;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) byteArrayInputStream0);
      int int0 = base64InputStream0.read();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(24, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1654);
      Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) pipedInputStream0);
      byte[] byteArray0 = new byte[4];
      base64InputStream0.read(byteArray0, 1578, (int) (byte)0);
  }

  @Test
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) null);
      assertNotNull(base64InputStream0);
      
      int int0 = base64InputStream0.read(byteArray0, (-902), (int) (byte)35);
      assertEquals((-1), int0);
  }

  @Test
  public void test5()  throws Throwable  {
      Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) null);
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try {
        base64InputStream0.read(byteArray0, (int) (byte)32, 61);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) null);
      long long0 = base64InputStream0.skip((long) 0);
      assertEquals(0L, long0);
  }

  @Test
  public void test7()  throws Throwable  {
      Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) null);
      // Undeclared exception!
      try {
        base64InputStream0.skip(753L);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) null);
      byte[] byteArray0 = new byte[4];
      int int0 = base64InputStream0.decode(byteArray0, byteArray0, (int) (byte) (-48), (int) (byte) (-48));
      assertEquals((-1), int0);
  }

  @Test
  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-16);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) byteArrayInputStream0);
      assertEquals(-1, byteArrayInputStream0.read());
      
      int int0 = base64InputStream0.read();
      assertEquals(0, int0);
  }

  @Test
  public void test10()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1654);
      Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) pipedInputStream0);
      base64InputStream0.getByte('6');
  }

  @Test
  public void test11()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1654);
      Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) pipedInputStream0);
      base64InputStream0.getByte('+');
  }

  @Test
  public void test12()  throws Throwable  {
      Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) null);
      assertNotNull(base64InputStream0);
      
      int int0 = base64InputStream0.getByte('=');
      assertEquals(0, int0);
  }
}
