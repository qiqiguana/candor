/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.io;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.io.Base64OutputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class Base64OutputStreamEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      Base64OutputStream base64OutputStream0 = new Base64OutputStream((OutputStream) pipedOutputStream0);
      base64OutputStream0.close();
  }

  @Test
  public void test1()  throws Throwable  {
      Base64OutputStream base64OutputStream0 = new Base64OutputStream((OutputStream) null);
      // Undeclared exception!
      try {
        base64OutputStream0.encodeUnit((byte) (-82), (byte) (-82), (byte) (-89));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Base64OutputStream base64OutputStream0 = new Base64OutputStream((OutputStream) byteArrayOutputStream0);
      byte[] byteArray0 = new byte[5];
      base64OutputStream0.write(byteArray0);
      base64OutputStream0.flush();
      assertEquals(8, byteArrayOutputStream0.size());
      assertEquals("AAAAAAA=", byteArrayOutputStream0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      Base64OutputStream base64OutputStream0 = new Base64OutputStream((OutputStream) null);
      base64OutputStream0.write(163);
      // Undeclared exception!
      try {
        base64OutputStream0.close();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Base64OutputStream base64OutputStream0 = new Base64OutputStream((OutputStream) byteArrayOutputStream0);
      byte[] byteArray0 = new byte[5];
      base64OutputStream0.write(byteArray0, 1, (int) (byte) (-105));
  }

  @Test
  public void test5()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Base64OutputStream base64OutputStream0 = new Base64OutputStream((OutputStream) byteArrayOutputStream0);
      byte[] byteArray0 = new byte[5];
      base64OutputStream0.write(byteArray0);
      base64OutputStream0.write(byteArray0);
      assertEquals(12, byteArrayOutputStream0.size());
      assertEquals("AAAAAAAAAAAA", byteArrayOutputStream0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      Base64OutputStream base64OutputStream0 = new Base64OutputStream((OutputStream) pipedOutputStream0);
      byte[] byteArray0 = new byte[1];
      base64OutputStream0.write(byteArray0);
      base64OutputStream0.write(byteArray0);
  }

  @Test
  public void test7()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Base64OutputStream base64OutputStream0 = new Base64OutputStream((OutputStream) byteArrayOutputStream0);
      assertNotNull(base64OutputStream0);
      
      char char0 = base64OutputStream0.getChar((-13));
      assertEquals('?', char0);
  }

  @Test
  public void test8()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Base64OutputStream base64OutputStream0 = new Base64OutputStream((OutputStream) byteArrayOutputStream0);
      assertNotNull(base64OutputStream0);
      
      char char0 = base64OutputStream0.getChar(1536);
      assertEquals('?', char0);
  }

  @Test
  public void test9()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Base64OutputStream base64OutputStream0 = new Base64OutputStream((OutputStream) byteArrayOutputStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-65);
      base64OutputStream0.write(byteArray0);
      assertEquals(8, byteArrayOutputStream0.size());
      assertEquals("AAAAAP+/", byteArrayOutputStream0.toString());
  }
}
