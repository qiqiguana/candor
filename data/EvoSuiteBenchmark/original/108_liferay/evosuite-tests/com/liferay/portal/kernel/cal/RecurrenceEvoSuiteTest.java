/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.cal;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.cal.DayAndPosition;
import com.liferay.portal.kernel.cal.Duration;
import com.liferay.portal.kernel.cal.Recurrence;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class RecurrenceEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Duration duration0 = new Duration(0);
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      recurrence0.setUntil((Calendar) gregorianCalendar0);
      boolean boolean0 = recurrence0.candidateIsInRecurrence((Calendar) gregorianCalendar0, true);
      assertEquals("java.util.GregorianCalendar[time=1372738824596,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-1k+=){,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=20,SECOND=24,MILLISECOND=597,ZONE_OFFSET=1,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(true, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance(locale0);
      Duration duration0 = new Duration(3);
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0, 3);
      boolean boolean0 = recurrence0.isInRecurrence((Calendar) gregorianCalendar0);
      assertEquals("java.util.GregorianCalendar[time=1372738872476,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-1k+=){,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=21,SECOND=12,MILLISECOND=477,ZONE_OFFSET=1,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(true, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      Duration duration0 = new Duration();
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      recurrence0.getDtEnd();
      assertEquals(1372738894584L, gregorianCalendar0.getTimeInMillis());
      assertEquals("java.util.GregorianCalendar[time=1372738894584,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-1k+=){,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=21,SECOND=34,MILLISECOND=585,ZONE_OFFSET=1,DST_OFFSET=0]", gregorianCalendar0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      Duration duration0 = new Duration((-35), (-35), (-35));
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      int int0 = recurrence0.getOccurrence();
      assertEquals("java.util.GregorianCalendar[time=1372738908864,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-1k+=){,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=21,SECOND=48,MILLISECOND=865,ZONE_OFFSET=1,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(0, int0);
  }

  @Test
  public void test4()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      Duration duration0 = new Duration((-1117), (-1117), (-1124), 667);
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      int int0 = recurrence0.getInterval();
      assertEquals("java.util.GregorianCalendar[time=1372738921436,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-1k+=){,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=22,SECOND=1,MILLISECOND=437,ZONE_OFFSET=1,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(1, int0);
  }

  @Test
  public void test5()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      Duration duration0 = new Duration((-35), (-35), (-35));
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      recurrence0.setDuration(duration0);
      assertEquals("java.util.GregorianCalendar[time=1372738934070,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-1k+=){,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=22,SECOND=14,MILLISECOND=71,ZONE_OFFSET=1,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(1372738934070L, gregorianCalendar0.getTimeInMillis());
  }

  @Test
  public void test6()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance();
      Duration duration0 = new Duration(1589);
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      int int0 = recurrence0.getWeekStart();
      assertEquals("java.util.GregorianCalendar[time=1372738944798,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-1k+=){,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=22,SECOND=24,MILLISECOND=799,ZONE_OFFSET=1,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(2, int0);
  }

  @Test
  public void test7()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      Duration duration0 = new Duration((-35), (-35), (-35));
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      GregorianCalendar gregorianCalendar1 = (GregorianCalendar)recurrence0.getDtStart();
      assertEquals(1372738955713L, gregorianCalendar0.getTimeInMillis());
      assertEquals(2, gregorianCalendar1.getFirstDayOfWeek());
  }

  @Test
  public void test8()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      Duration duration0 = new Duration((-1117), (-1117), (-1124), 667);
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      recurrence0.setWeekStart((-2005));
      assertEquals("java.util.GregorianCalendar[time=1372738967553,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-1k+=){,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=22,SECOND=47,MILLISECOND=554,ZONE_OFFSET=1,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(1372738967553L, gregorianCalendar0.getTimeInMillis());
  }

  @Test
  public void test9()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      Duration duration0 = new Duration((-1117), (-1117), (-1124), 667);
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      int int0 = recurrence0.getFrequency();
      assertEquals(1372738980399L, gregorianCalendar0.getTimeInMillis());
      assertEquals(7, int0);
  }

  @Test
  public void test10()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      Duration duration0 = new Duration(0);
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      recurrence0.getDuration();
      assertEquals(1372738993045L, gregorianCalendar0.getTimeInMillis());
      assertEquals("com.liferay.portal.kernel.cal.Recurrence[dtStart=java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=23,SECOND=13,MILLISECOND=46,ZONE_OFFSET=?,DST_OFFSET=?],duration=com.liferay.portal.kernel.cal.Duration[weeks=0,days=0,hours=0,minutes=0,seconds=0],frequency=7,interval=1,until=null,byDay=null,byMonthDay=null,byYearDay=null,byWeekNo=null,byMonth=null]", recurrence0.toString());
  }

  @Test
  public void test11()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      Duration duration0 = new Duration((-1117), (-1117), (-1124), 667);
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      DayAndPosition[] dayAndPositionArray0 = new DayAndPosition[1];
      DayAndPosition dayAndPosition0 = new DayAndPosition();
      dayAndPositionArray0[0] = dayAndPosition0;
      recurrence0.setByDay(dayAndPositionArray0);
      recurrence0.getByDay();
      assertEquals("java.util.GregorianCalendar[time=1372739004022,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-1k+=){,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=23,SECOND=24,MILLISECOND=23,ZONE_OFFSET=1,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals("com.liferay.portal.kernel.cal.Recurrence[dtStart=java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=23,SECOND=24,MILLISECOND=23,ZONE_OFFSET=?,DST_OFFSET=?],duration=com.liferay.portal.kernel.cal.Duration[weeks=0,days=-1117,hours=-1117,minutes=-1124,seconds=667],frequency=7,interval=1,until=null,byDay=[com.liferay.portal.kernel.cal.DayAndPosition[day=0,position=0]],byMonthDay=null,byYearDay=null,byWeekNo=null,byMonth=null]", recurrence0.toString());
  }

  @Test
  public void test12()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance(locale0);
      Duration duration0 = new Duration(3);
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0, 3);
      recurrence0.getByDay();
      assertEquals("java.util.GregorianCalendar[time=1372739034412,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-1k+=){,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=23,SECOND=54,MILLISECOND=413,ZONE_OFFSET=1,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(3, recurrence0.getFrequency());
  }

  @Test
  public void test13()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance();
      Duration duration0 = new Duration(1589);
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      int[] intArray0 = new int[9];
      recurrence0.setByMonth(intArray0);
      recurrence0.getByMonth();
      assertEquals(1372739045293L, gregorianCalendar0.getTimeInMillis());
      assertEquals(2, recurrence0.getWeekStart());
  }

  @Test
  public void test14()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(0, 0, 0);
      Duration duration0 = new Duration(0, 0, 0);
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      assertNotNull(recurrence0);
      
      recurrence0.getByMonth();
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals("com.liferay.portal.kernel.cal.Recurrence[dtStart=java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=31,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?],duration=com.liferay.portal.kernel.cal.Duration[weeks=0,days=0,hours=0,minutes=0,seconds=0],frequency=7,interval=1,until=null,byDay=null,byMonthDay=null,byYearDay=null,byWeekNo=null,byMonth=null]", recurrence0.toString());
  }

  @Test
  public void test15()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      Duration duration0 = new Duration();
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      int[] intArray0 = new int[4];
      recurrence0.setByMonthDay(intArray0);
      recurrence0.getByMonthDay();
      assertEquals("java.util.GregorianCalendar[time=1372739074318,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-1k+=){,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=24,SECOND=34,MILLISECOND=319,ZONE_OFFSET=1,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals("com.liferay.portal.kernel.cal.Recurrence[dtStart=java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=24,SECOND=34,MILLISECOND=319,ZONE_OFFSET=?,DST_OFFSET=?],duration=com.liferay.portal.kernel.cal.Duration[weeks=0,days=0,hours=0,minutes=0,seconds=0],frequency=7,interval=1,until=null,byDay=null,byMonthDay=[0,0,0,0],byYearDay=null,byWeekNo=null,byMonth=null]", recurrence0.toString());
  }

  @Test
  public void test16()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      Duration duration0 = new Duration();
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      recurrence0.getByMonthDay();
      assertEquals(1372739092416L, gregorianCalendar0.getTimeInMillis());
      assertEquals("com.liferay.portal.kernel.cal.Recurrence[dtStart=java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=24,SECOND=52,MILLISECOND=417,ZONE_OFFSET=?,DST_OFFSET=?],duration=com.liferay.portal.kernel.cal.Duration[weeks=0,days=0,hours=0,minutes=0,seconds=0],frequency=7,interval=1,until=null,byDay=null,byMonthDay=null,byYearDay=null,byWeekNo=null,byMonth=null]", recurrence0.toString());
  }

  @Test
  public void test17()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      Duration duration0 = new Duration((-35), (-35), (-35));
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      int[] intArray0 = new int[9];
      recurrence0.setByWeekNo(intArray0);
      recurrence0.getByWeekNo();
      assertEquals(1372739103299L, gregorianCalendar0.getTimeInMillis());
      assertEquals("com.liferay.portal.kernel.cal.Recurrence[dtStart=java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=25,SECOND=3,MILLISECOND=300,ZONE_OFFSET=?,DST_OFFSET=?],duration=com.liferay.portal.kernel.cal.Duration[weeks=0,days=0,hours=-35,minutes=-35,seconds=-35],frequency=7,interval=1,until=null,byDay=null,byMonthDay=null,byYearDay=null,byWeekNo=[0,0,0,0,0,0,0,0,0],byMonth=null]", recurrence0.toString());
  }

  @Test
  public void test18()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance(locale0);
      Duration duration0 = new Duration(1810, 1810, 1810, 0);
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0, 1);
      recurrence0.getByWeekNo();
      assertEquals(1372739121582L, gregorianCalendar0.getTimeInMillis());
      assertEquals("com.liferay.portal.kernel.cal.Recurrence[dtStart=java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=25,SECOND=21,MILLISECOND=583,ZONE_OFFSET=?,DST_OFFSET=?],duration=com.liferay.portal.kernel.cal.Duration[weeks=0,days=1810,hours=1810,minutes=1810,seconds=0],frequency=1,interval=1,until=null,byDay=null,byMonthDay=null,byYearDay=null,byWeekNo=null,byMonth=null]", recurrence0.toString());
  }

  @Test
  public void test19()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance();
      Duration duration0 = new Duration(1589);
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      recurrence0.getByYearDay();
      assertEquals(1372739132686L, gregorianCalendar0.getTimeInMillis());
      assertEquals("com.liferay.portal.kernel.cal.Recurrence[dtStart=java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=25,SECOND=32,MILLISECOND=687,ZONE_OFFSET=?,DST_OFFSET=?],duration=com.liferay.portal.kernel.cal.Duration[weeks=1589,days=0,hours=0,minutes=0,seconds=0],frequency=7,interval=1,until=null,byDay=null,byMonthDay=null,byYearDay=null,byWeekNo=null,byMonth=null]", recurrence0.toString());
  }

  @Test
  public void test20()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      Duration duration0 = new Duration(0);
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      // Undeclared exception!
      try {
        recurrence0.getCandidateStartTime((Calendar) gregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Current time before DtStart
         */
      }
  }

  @Test
  public void test21()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      Duration duration0 = new Duration((-35), (-35), (-35));
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      recurrence0.setFrequency(4);
      boolean boolean0 = recurrence0.isInRecurrence((Calendar) gregorianCalendar0);
      assertEquals(1372739156581L, gregorianCalendar0.getTimeInMillis());
      assertEquals(false, boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance(locale0);
      Duration duration0 = new Duration(5);
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0, 5);
      boolean boolean0 = recurrence0.isInRecurrence((Calendar) gregorianCalendar0);
      assertEquals(1372739187285L, gregorianCalendar0.getTimeInMillis());
      assertEquals(true, boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance(locale0);
      Duration duration0 = new Duration(1810, 1810, 1810, 0);
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0, 1);
      recurrence0.getUntil();
      assertEquals(1372739255712L, gregorianCalendar0.getTimeInMillis());
      assertEquals("java.util.GregorianCalendar[time=1372739255712,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-1k+=){,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=27,SECOND=35,MILLISECOND=713,ZONE_OFFSET=1,DST_OFFSET=0]", gregorianCalendar0.toString());
  }

  @Test
  public void test24()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance();
      Duration duration0 = new Duration(1589);
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      recurrence0.setUntil((Calendar) gregorianCalendar0);
      recurrence0.getUntil();
      assertEquals("java.util.GregorianCalendar[time=1372739266868,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-1k+=){,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=27,SECOND=46,MILLISECOND=869,ZONE_OFFSET=1,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals("com.liferay.portal.kernel.cal.Recurrence[dtStart=java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=27,SECOND=46,MILLISECOND=869,ZONE_OFFSET=?,DST_OFFSET=?],duration=com.liferay.portal.kernel.cal.Duration[weeks=1589,days=0,hours=0,minutes=0,seconds=0],frequency=7,interval=1,until=java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=27,SECOND=46,MILLISECOND=869,ZONE_OFFSET=?,DST_OFFSET=?],byDay=null,byMonthDay=null,byYearDay=null,byWeekNo=null,byMonth=null]", recurrence0.toString());
  }

  @Test
  public void test25()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      Duration duration0 = new Duration();
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      GregorianCalendar gregorianCalendar1 = new GregorianCalendar((-1124), (-13), 1);
      boolean boolean0 = recurrence0.isInRecurrence((Calendar) gregorianCalendar1, true);
      assertEquals("java.util.GregorianCalendar[time=1372739300762,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-1k+=){,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=28,SECOND=20,MILLISECOND=763,ZONE_OFFSET=1,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test26()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      Duration duration0 = new Duration();
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      GregorianCalendar gregorianCalendar1 = new GregorianCalendar((-1124), (-13), 1);
      boolean boolean0 = recurrence0.isInRecurrence((Calendar) gregorianCalendar1, false);
      assertEquals(1372739327952L, gregorianCalendar0.getTimeInMillis());
      assertEquals(false, boolean0);
  }

  @Test
  public void test27()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance();
      Duration duration0 = new Duration(1589);
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      GregorianCalendar gregorianCalendar1 = new GregorianCalendar();
      int[] intArray0 = new int[9];
      recurrence0.setByMonth(intArray0);
      boolean boolean0 = recurrence0.isInRecurrence((Calendar) gregorianCalendar1, false);
      assertEquals(1372739354922L, gregorianCalendar0.getTimeInMillis());
      assertEquals(false, boolean0);
  }

  @Test
  public void test28()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance(locale0);
      Duration duration0 = new Duration(1810, 1810, 1810, 0);
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      GregorianCalendar gregorianCalendar1 = new GregorianCalendar();
      int[] intArray0 = new int[2];
      recurrence0.setByYearDay(intArray0);
      boolean boolean0 = recurrence0.isInRecurrence((Calendar) gregorianCalendar1, true);
      assertEquals("java.util.GregorianCalendar[time=1372739394057,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-1k+=){,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=29,SECOND=54,MILLISECOND=58,ZONE_OFFSET=1,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test29()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar((-1), (-1), (-1));
      Duration duration0 = new Duration((-1), (-1), (-1));
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      recurrence0.isInRecurrence((Calendar) gregorianCalendar0, true);
  }

  @Test
  public void test30()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance(locale0);
      Duration duration0 = new Duration(1810, 1810, 1810, 0);
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0, 1);
      recurrence0.setByMonth((int[]) null);
  }

  @Test
  public void test31()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      Duration duration0 = new Duration((-1117), (-1117), (-1124), 667);
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      recurrence0.setByMonthDay((int[]) null);
  }

  @Test
  public void test32()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance();
      Duration duration0 = new Duration(1589);
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      recurrence0.setByWeekNo((int[]) null);
  }

  @Test
  public void test33()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance();
      Duration duration0 = new Duration(1589);
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      recurrence0.setByYearDay((int[]) null);
  }

  @Test
  public void test34()  throws Throwable  {
      Recurrence recurrence0 = null;
      try {
        recurrence0 = new Recurrence();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test35()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance(locale0);
      Duration duration0 = new Duration(3);
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0, 3);
      recurrence0.setFrequency(0);
  }

  @Test
  public void test36()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "w,O{,KIRKt/Q;");
      Locale locale0 = Locale.KOREA;
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      Duration duration0 = new Duration((-1367), 0, 0, 1145);
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0, (-1367));
      // Undeclared exception!
      try {
        recurrence0.setFrequency(0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Invalid frequency
         */
      }
  }

  @Test
  public void test37()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      Duration duration0 = new Duration();
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      recurrence0.setInterval(0);
  }

  @Test
  public void test38()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance(locale0);
      Duration duration0 = new Duration(1810, 1810, 1810, 0);
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0, 1);
      recurrence0.setInterval(1);
  }

  @Test
  public void test39()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      Duration duration0 = new Duration((-1117), (-1117), (-1124), 667);
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      recurrence0.setUntil((Calendar) gregorianCalendar0);
      recurrence0.toString();
  }

  @Test
  public void test40()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      Duration duration0 = new Duration((-1117), (-1117), (-1124), 667);
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      DayAndPosition[] dayAndPositionArray0 = new DayAndPosition[1];
      DayAndPosition dayAndPosition0 = new DayAndPosition();
      dayAndPositionArray0[0] = dayAndPosition0;
      recurrence0.setByDay(dayAndPositionArray0);
      recurrence0.toString();
  }

  @Test
  public void test41()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(466, 1, 434, 0, (-539));
      // Undeclared exception!
      try {
        Recurrence.reduce_constant_length_field(1, (Calendar) gregorianCalendar0, (Calendar) gregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Not a constant length field
         */
      }
  }

  @Test
  public void test42()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      GregorianCalendar gregorianCalendar1 = new GregorianCalendar((-1124), (-13), 1);
      Recurrence.reduce_constant_length_field(11, (Calendar) gregorianCalendar0, (Calendar) gregorianCalendar1);
  }

  @Test
  public void test43()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(0, 0, 0);
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)TimeZone.getDefault();
      GregorianCalendar gregorianCalendar1 = new GregorianCalendar((TimeZone) simpleTimeZone0);
      Recurrence.reduce_day_of_month((Calendar) gregorianCalendar0, (Calendar) gregorianCalendar1);
  }

  @Test
  public void test44()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(93, 93, 93, 93, 93);
      Recurrence.reduce_day_of_year((Calendar) gregorianCalendar0, (Calendar) gregorianCalendar0);
  }

  @Test
  public void test45()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(93, 93, 93, 93, 93);
      GregorianCalendar gregorianCalendar1 = new GregorianCalendar();
      Recurrence.reduce_day_of_year((Calendar) gregorianCalendar0, (Calendar) gregorianCalendar1);
  }

  @Test
  public void test46()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance();
      Duration duration0 = new Duration(1589);
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      GregorianCalendar gregorianCalendar1 = new GregorianCalendar();
      recurrence0.setOccurrence(1589);
      recurrence0.isInRecurrence((Calendar) gregorianCalendar1, false);
  }

  @Test
  public void test47()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      Duration duration0 = new Duration((-1117), (-1117), (-1124), 667);
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      DayAndPosition[] dayAndPositionArray0 = new DayAndPosition[1];
      DayAndPosition dayAndPosition0 = new DayAndPosition();
      dayAndPositionArray0[0] = dayAndPosition0;
      recurrence0.setByDay(dayAndPositionArray0);
      recurrence0.candidateIsInRecurrence((Calendar) gregorianCalendar0, false);
  }

  @Test
  public void test48()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      Duration duration0 = new Duration();
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      int[] intArray0 = new int[4];
      recurrence0.setByMonthDay(intArray0);
      recurrence0.candidateIsInRecurrence((Calendar) gregorianCalendar0, true);
  }

  @Test
  public void test49()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      Duration duration0 = new Duration((-35), (-35), (-35));
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      int[] intArray0 = new int[9];
      recurrence0.setByWeekNo(intArray0);
      recurrence0.candidateIsInRecurrence((Calendar) gregorianCalendar0, true);
  }

  @Test
  public void test50()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      Duration duration0 = new Duration((-1117), (-1117), (-1124), 667);
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      DayAndPosition[] dayAndPositionArray0 = new DayAndPosition[1];
      DayAndPosition dayAndPosition0 = new DayAndPosition();
      dayAndPositionArray0[0] = dayAndPosition0;
      recurrence0.setByDay(dayAndPositionArray0);
      recurrence0.getMinimumInterval();
  }

  @Test
  public void test51()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      Duration duration0 = new Duration((-35), (-35), (-35));
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      int[] intArray0 = new int[9];
      recurrence0.setByMonthDay(intArray0);
      recurrence0.isInRecurrence((Calendar) gregorianCalendar0);
  }

  @Test
  public void test52()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar((-1), (-1), (-1));
      Duration duration0 = new Duration((-1), (-1), (-1));
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      int[] intArray0 = new int[4];
      recurrence0.setByWeekNo(intArray0);
      recurrence0.getMinimumInterval();
  }

  @Test
  public void test53()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar();
      Duration duration0 = new Duration(0, 1137, (-573));
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0, (-573));
      // Undeclared exception!
      try {
        recurrence0.isInRecurrence((Calendar) gregorianCalendar0, false);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Internal error: Unknown frequency value
         */
      }
  }

  @Test
  public void test54()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      Duration duration0 = new Duration((-35), (-35), (-35));
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      recurrence0.setFrequency(4);
      recurrence0.getRecurrenceCount((Calendar) gregorianCalendar0);
  }

  @Test
  public void test55()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      Duration duration0 = new Duration((-35), (-35), (-35));
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      recurrence0.setFrequency(0);
      // Undeclared exception!
      try {
        recurrence0.getRecurrenceCount((Calendar) gregorianCalendar0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * bad frequency internally...
         */
      }
  }

  @Test
  public void test56()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      Duration duration0 = new Duration((-35), (-35), (-35));
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      int[] intArray0 = new int[9];
      intArray0[0] = (-35);
      recurrence0.setByWeekNo(intArray0);
      recurrence0.matchesByWeekNo((Calendar) gregorianCalendar0);
  }

  @Test
  public void test57()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      Duration duration0 = new Duration((-35), (-35), (-35));
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      int[] intArray0 = new int[9];
      GregorianCalendar gregorianCalendar1 = new GregorianCalendar((-35), (-35), 0);
      recurrence0.matchesByField(intArray0, 0, (Calendar) gregorianCalendar1, false);
  }

  @Test
  public void test58()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance(locale0);
      Duration duration0 = new Duration(3);
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0, 3);
      DayAndPosition dayAndPosition0 = new DayAndPosition(3, 3);
      recurrence0.matchesIndividualByDay((Calendar) gregorianCalendar0, dayAndPosition0);
  }

  @Test
  public void test59()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      Duration duration0 = new Duration((-35), (-35), (-35));
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      int[] intArray0 = new int[9];
      recurrence0.setByWeekNo(intArray0);
      recurrence0.toString();
  }
}
