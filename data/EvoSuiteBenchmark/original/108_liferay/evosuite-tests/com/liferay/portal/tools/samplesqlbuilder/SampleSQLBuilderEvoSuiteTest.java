/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.tools.samplesqlbuilder;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.io.CharPipe;
import com.liferay.portal.tools.samplesqlbuilder.SampleSQLBuilder;
import com.liferay.portal.xml.ProcessingInstructionImpl;
import java.io.IOException;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.dom4j.Element;
import org.dom4j.ProcessingInstruction;
import org.dom4j.tree.DefaultProcessingInstruction;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SampleSQLBuilderEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SampleSQLBuilder sampleSQLBuilder0 = new SampleSQLBuilder((Map<String, String>) null, "\"f|7mK,1a,5sL,`", "\"f|7mK,1a,5sL,`", (-473), (-420), (-473), 1, (-643), (-420), 1, (-1450), 0, (-405), (-473), (-469), 0, 2001, (-405), (-149), 0, (-643), 0, 2447, "\"f|7mK,1a,5sL,`", false);
          CharPipe charPipe0 = new CharPipe();
          sampleSQLBuilder0.generateSQL(charPipe0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SampleSQLBuilder sampleSQLBuilder0 = new SampleSQLBuilder((Map<String, String>) null, "y _oPC/2l!", "", 1063, 4451, 0, 4540, (-1500), (-421), 0, (-1042), 4540, 30, (-1935), (-1500), (-1042), 30, 1063, 30, (-1485), 933, (-421), 1410, "y _oPC/2l!", false);
          // Undeclared exception!
          try {
            sampleSQLBuilder0.mergeSQL();
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission others.sql write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:183)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:145)
             * java.io.FileWriter.<init>(FileWriter.java:73)
             * com.liferay.portal.tools.samplesqlbuilder.SampleSQLBuilder.mergeSQL(SampleSQLBuilder.java:659)
             * sun.reflect.GeneratedMethodAccessor18.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          DefaultProcessingInstruction defaultProcessingInstruction0 = new DefaultProcessingInstruction((Element) null, "", "m5a&Z5|h11+9");
          ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl((ProcessingInstruction) defaultProcessingInstruction0);
          Map<String, String> map0 = processingInstructionImpl0.getValues();
          SampleSQLBuilder sampleSQLBuilder0 = new SampleSQLBuilder(map0, "m5a&Z5|h11+9", "F\"N!7>Yf%n", (-1073741428), (-1073741428), 1188, 1188, (-1002), 382, (-1073741428), (-1073741428), (-1073741428), 382, (-1023), 1188, (-1002), (-1368), (-1002), (-1), 0, 382, 1188, 1188, "m5a&Z5|h11+9", false);
          // Undeclared exception!
          try {
            sampleSQLBuilder0.writeToInsertSQLFile("m5a&Z5|h11+9", "F\"N!7>Yf%n");
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission m5a&Z5|h11+9.sql write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:183)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:145)
             * com.liferay.portal.tools.samplesqlbuilder.SampleSQLBuilder.createFileWriter(SampleSQLBuilder.java:474)
             * com.liferay.portal.tools.samplesqlbuilder.SampleSQLBuilder.writeToInsertSQLFile(SampleSQLBuilder.java:700)
             * sun.reflect.GeneratedMethodAccessor48.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
