/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.plugin;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.plugin.Version;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class VersionEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Version version0 = Version.getInstance("12042506.12042506.12l42507.104506");
      assertNotNull(version0);
      
      int int0 = version0.hashCode();
      assertEquals(1743563521, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      Version version0 = Version.getInstance("12042506.12042506.12l42507.104506");
      Version version1 = Version.incrementBugFix(version0);
      assertNotNull(version1);
      
      boolean boolean0 = version0.includes(version1);
      assertEquals(false, boolean0);
      assertEquals("12042506.12042506.1242508.104506", version1.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      Version version0 = new Version("Kb((?!d\u0001d)d+|1dd|2[0-4]d|2N[0-5]).((?!ddd)d+|1ddl2[0.4]d|25[0-5]).10042506.1204250N");
      boolean boolean0 = version0.includes(version0);
      boolean boolean1 = version0.isSameVersionAs("Kb((?!d\u0001d)d+|1dd|2[0-4]d|2N[0-5]).((?!ddd)d+|1ddl2[0.4]d|25[0-5]).10042506.1204250N");
      assertTrue(boolean1 == boolean0);
      
      Version version1 = Version.incrementMajor(version0);
      assertFalse(version0.equals(version1));
      assertEquals("1204206.((?!ddd)d+|1ddl2[0.4]d|25[0-5]).10042506.1204250N", version1.toString());
      assertNotNull(version1);
  }

  @Test
  public void test3()  throws Throwable  {
      Version version0 = Version.getInstance("Zq3`Bpi{7e)Dm2.0.0");
      assertNotNull(version0);
      
      Version version1 = Version.incrementBugFix(version0);
      assertNotNull(version1);
      assertSame(version1, version0);
  }

  @Test
  public void test4()  throws Throwable  {
      Version version0 = Version.getInstance("Zq3`Bpi{7e)Dm2.0.0");
      assertNotNull(version0);
      
      Version version1 = Version.incrementBuildNumber(version0);
      assertNotNull(version1);
      assertSame(version0, version1);
  }

  @Test
  public void test5()  throws Throwable  {
      Version version0 = Version.getInstance("12042506.12042506.12l42507.104506");
      assertNotNull(version0);
      
      Version version1 = Version.incrementBuildNumber(version0);
      assertNotNull(version1);
      
      boolean boolean0 = version1.includes(version0);
      assertEquals(false, boolean0);
      assertEquals("12042506.12042506.12l42507.104507", version1.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      Version version0 = Version.getInstance("unknown");
      assertNotNull(version0);
      
      Version version1 = Version.incrementMajor(version0);
      assertNotNull(version1);
      
      int int0 = version0.compareTo(version1);
      assertEquals("unknown", version1.toString());
      assertNotSame(version1, version0);
      assertEquals(1, int0);
  }

  @Test
  public void test7()  throws Throwable  {
      Version version0 = Version.getInstance("Zq3`Bpi{7e)Dm2.0.0");
      assertNotNull(version0);
      
      Version version1 = Version.incrementMinor(version0);
      assertNotNull(version1);
      assertEquals("Zq3`Bpi{7e)Dm2", version0.getMajor());
      assertSame(version0, version1);
  }

  @Test
  public void test8()  throws Throwable  {
      Version version0 = new Version("H.>c<2W FO@$");
      assertNotNull(version0);
      
      Version version1 = Version.incrementMinor(version0);
      assertNotNull(version1);
      
      boolean boolean0 = version1.isLaterVersionThan("H.>c<2W FO@$");
      assertEquals("H.3.0", version1.toString());
      assertEquals(false, boolean0);
      assertEquals("H.>c<2W FO@$", version0.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      Version version0 = new Version("F+");
      assertNotNull(version0);
      
      int int0 = version0.compareTo((Version) null);
      assertEquals(1, int0);
      assertEquals("F+", version0.getMajor());
  }

  @Test
  public void test10()  throws Throwable  {
      Version version0 = Version.getInstance("unknown");
      assertNotNull(version0);
      
      boolean boolean0 = version0.isLaterVersionThan("unknown");
      assertEquals(true, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      Version version0 = new Version("*");
      assertNotNull(version0);
      
      boolean boolean0 = version0.isPreviousVersionThan("k@xWr i172)1Z1rbx");
      assertEquals("*", version0.toString());
      assertEquals(true, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      Version version0 = new Version("Kb((?!d\u0001d)d+|1dd|2[0-4]d|2N[0-5]).((?!ddd)d+|1ddl2[0.4]d|25[0-5]).10042506.1204250N");
      Version version1 = Version.incrementBugFix(version0);
      assertNotNull(version1);
      
      boolean boolean0 = version1.isSameVersionAs("Kb((?!d\u0001d)d+|1dd|2[0-4]d|2N[0-5]).((?!ddd)d+|1ddl2[0.4]d|25[0-5]).10042506.1204250N");
      assertEquals("Kb((?!d\u0001d)d+|1dd|2[0-4]d|2N[0-5]).((?!ddd)d+|1ddl2[0.42506.10042506.1204250N", version1.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      Version version0 = Version.getInstance("12042506.12042506.12l42507.104506");
      assertNotNull(version0);
      
      boolean boolean0 = version0.equals((Object) null);
      assertEquals(false, boolean0);
      assertEquals("12l42507", version0.getBugFix());
  }

  @Test
  public void test14()  throws Throwable  {
      Version version0 = Version.getInstance("unknown");
      assertNotNull(version0);
      
      boolean boolean0 = version0.equals((Object) "unknown");
      assertEquals(false, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      Version version0 = Version.getInstance("unknown");
      assertNotNull(version0);
      
      boolean boolean0 = version0.includes(version0);
      assertEquals(true, boolean0);
      assertEquals("unknown", version0.toString());
      assertEquals("unknown", version0.getMajor());
      assertEquals("0", version0.getBugFix());
      assertEquals("0", version0.getMinor());
      assertEquals("", version0.getBuildNumber());
  }

  @Test
  public void test16()  throws Throwable  {
      Version version0 = Version.getInstance("unknown");
      assertNotNull(version0);
      
      Version version1 = Version.incrementMajor(version0);
      assertNotNull(version1);
      
      boolean boolean0 = version1.includes(version0);
      assertEquals(true, boolean0);
      assertEquals("unknown", version0.toString());
      assertEquals("unknown.0.0", version1.toString());
      assertFalse(version1.equals(version0));
  }

  @Test
  public void test17()  throws Throwable  {
      Version version0 = new Version("*");
      assertNotNull(version0);
      
      Version version1 = Version.getInstance("k@xWr i172)1Z1rbx");
      assertNotNull(version1);
      
      boolean boolean0 = version0.includes(version1);
      assertFalse(version0.equals(version1));
      assertEquals("k@xWr i172)1Z1rbx", version1.getMajor());
      assertEquals("*", version0.toString());
      assertEquals(true, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      Version version0 = Version.getInstance("Zq3`Bpi{7e)Dm2.0.0");
      Version version1 = Version.getInstance("10 &42506+");
      boolean boolean0 = version1.includes(version0);
      assertEquals("10 &42506+", version1.toString());
      assertEquals(false, boolean0);
      assertEquals("Zq3`Bpi{7e)Dm2.0.0", version0.toString());
  }

  @Test
  public void test19()  throws Throwable  {
      Version version0 = new Version("H.>c<2W FO@$");
      assertNotNull(version0);
      
      Version version1 = Version.incrementMinor(version0);
      assertNotNull(version1);
      
      boolean boolean0 = version0.includes(version1);
      assertEquals("H.3.0", version1.toString());
      assertEquals("H.>c<2W FO@$", version0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      Version version0 = new Version("F+");
      assertNotNull(version0);
      
      Version version1 = new Version("+.18");
      boolean boolean0 = version0.includes(version1);
      assertEquals("18", version1.getMinor());
      assertEquals("F+", version0.toString());
      assertFalse(version0.equals(version1));
      assertEquals(true, boolean0);
      assertEquals("+.18", version1.toString());
  }

  @Test
  public void test21()  throws Throwable  {
      Version version0 = Version.getInstance("Zq3`Bpi{7e)Dm2.0.0");
      assertNotNull(version0);
      
      boolean boolean0 = version0.isPreviousVersionThan("10 &42506+");
      assertEquals("Zq3`Bpi{7e)Dm2", version0.getMajor());
      assertEquals("Zq3`Bpi{7e)Dm2.0.0", version0.toString());
      assertEquals(false, boolean0);
  }
}
