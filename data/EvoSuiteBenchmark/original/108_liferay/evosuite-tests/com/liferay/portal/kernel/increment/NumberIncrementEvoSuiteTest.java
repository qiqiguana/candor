/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.increment;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.increment.Increment;
import com.liferay.portal.kernel.increment.NumberIncrement;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class NumberIncrementEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Float float0 = new Float(1.0);
      NumberIncrement numberIncrement0 = new NumberIncrement((Number) float0);
      Float float1 = (Float)numberIncrement0.getValue();
      assertEquals(1, float1.intValue());
  }

  @Test
  public void test1()  throws Throwable  {
      Float float0 = new Float(1.0);
      NumberIncrement numberIncrement0 = new NumberIncrement((Number) float0);
      Integer integer0 = Integer.getInteger("", (-548));
      Increment<Number> increment0 = numberIncrement0.decreaseForNew((Number) integer0);
      assertNotSame(numberIncrement0, increment0);
  }

  @Test
  public void test2()  throws Throwable  {
      Float float0 = new Float(310.75093495607234);
      NumberIncrement numberIncrement0 = new NumberIncrement((Number) float0);
      numberIncrement0.setValue((Number) float0);
      assertEquals(310.7509460449219, float0.doubleValue(), 0.01D);
  }

  @Test
  public void test3()  throws Throwable  {
      Float float0 = new Float(1.0);
      NumberIncrement numberIncrement0 = new NumberIncrement((Number) float0);
      numberIncrement0.decrease((Number) (-1L));
  }

  @Test
  public void test4()  throws Throwable  {
      Long long0 = new Long((-59L));
      NumberIncrement numberIncrement0 = new NumberIncrement((Number) long0);
      Increment<Number> increment0 = numberIncrement0.increaseForNew((Number) (short)799);
      assertNotSame(numberIncrement0, increment0);
  }

  @Test
  public void test5()  throws Throwable  {
      NumberIncrement numberIncrement0 = new NumberIncrement((Number) (-2000.8278946878786));
      Double double0 = new Double((-2000.8278946878786));
      numberIncrement0.increase((Number) double0);
      assertEquals(48, double0.byteValue());
  }

  @Test
  public void test6()  throws Throwable  {
      NumberIncrement numberIncrement0 = new NumberIncrement((Number) 1129);
      numberIncrement0.increase((Number) 1129);
  }

  @Test
  public void test7()  throws Throwable  {
      Float float0 = new Float(1.0);
      NumberIncrement numberIncrement0 = new NumberIncrement((Number) float0);
      Long long0 = new Long((-1L));
      Long long1 = (Long)numberIncrement0.add((Number) long0);
      assertEquals(0L, (long)long1);
  }

  @Test
  public void test8()  throws Throwable  {
      Long long0 = new Long(2030L);
      NumberIncrement numberIncrement0 = new NumberIncrement((Number) long0);
      Long long1 = (Long)numberIncrement0.addAsDouble((Number) null);
      assertEquals(2030.0F, long1.floatValue(), 0.01F);
  }

  @Test
  public void test9()  throws Throwable  {
      NumberIncrement numberIncrement0 = new NumberIncrement((Number) null);
      Number number0 = numberIncrement0.addAsInteger((Number) null);
      assertNull(number0);
  }

  @Test
  public void test10()  throws Throwable  {
      Long long0 = new Long(2030L);
      NumberIncrement numberIncrement0 = new NumberIncrement((Number) long0);
      Long long1 = (Long)numberIncrement0.addAsLong((Number) null);
      assertEquals("2030", long1.toString());
  }

  @Test
  public void test11()  throws Throwable  {
      NumberIncrement numberIncrement0 = new NumberIncrement((Number) (-2000.8278946878786));
      numberIncrement0.decrease((Number) (-2000.8278946878786));
  }

  @Test
  public void test12()  throws Throwable  {
      Long long0 = new Long((-59L));
      NumberIncrement numberIncrement0 = new NumberIncrement((Number) long0);
      Increment<Number> increment0 = numberIncrement0.decreaseForNew((Number) (short)799);
      assertNotSame(numberIncrement0, increment0);
  }

  @Test
  public void test13()  throws Throwable  {
      Long long0 = new Long(2030L);
      NumberIncrement numberIncrement0 = new NumberIncrement((Number) long0);
      Long long1 = (Long)numberIncrement0.subtractAsDouble((Number) null);
      assertEquals(2030, long1.shortValue());
  }

  @Test
  public void test14()  throws Throwable  {
      NumberIncrement numberIncrement0 = new NumberIncrement((Number) null);
      Number number0 = numberIncrement0.subtractAsInteger((Number) null);
      assertNull(number0);
  }

  @Test
  public void test15()  throws Throwable  {
      Long long0 = new Long(2030L);
      NumberIncrement numberIncrement0 = new NumberIncrement((Number) long0);
      Long long1 = (Long)numberIncrement0.subtractAsLong((Number) null);
      assertEquals("2030", long1.toString());
  }
}
