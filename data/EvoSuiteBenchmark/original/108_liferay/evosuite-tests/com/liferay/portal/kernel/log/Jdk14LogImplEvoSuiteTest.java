/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.log;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.log.Jdk14LogImpl;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class Jdk14LogImplEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      Jdk14LogImpl jdk14LogImpl0 = new Jdk14LogImpl(logger0);
      jdk14LogImpl0.info((Object) "SwingDisplayedMnemonicIndexKey", (Throwable) null);
      assertEquals(true, jdk14LogImpl0.isErrorEnabled());
  }

  @Test
  public void test1()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      Jdk14LogImpl jdk14LogImpl0 = new Jdk14LogImpl(logger0);
      jdk14LogImpl0.info((Object) "5");
      assertEquals(true, jdk14LogImpl0.isWarnEnabled());
  }

  @Test
  public void test2()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      Jdk14LogImpl jdk14LogImpl0 = new Jdk14LogImpl(logger0);
      // Undeclared exception!
      try {
        jdk14LogImpl0.debug((Throwable) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      Logger logger0 = Logger.getLogger("Q");
      Jdk14LogImpl jdk14LogImpl0 = new Jdk14LogImpl(logger0);
      boolean boolean0 = jdk14LogImpl0.isDebugEnabled();
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      Jdk14LogImpl jdk14LogImpl0 = new Jdk14LogImpl(logger0);
      boolean boolean0 = jdk14LogImpl0.isFatalEnabled();
      assertEquals(true, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      Jdk14LogImpl jdk14LogImpl0 = new Jdk14LogImpl(logger0);
      // Undeclared exception!
      try {
        jdk14LogImpl0.fatal((Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      Jdk14LogImpl jdk14LogImpl0 = new Jdk14LogImpl(logger0);
      jdk14LogImpl0.debug((Object) "UPPER_LEFT_CORNER");
      assertEquals(true, jdk14LogImpl0.isFatalEnabled());
  }

  @Test
  public void test7()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      Jdk14LogImpl jdk14LogImpl0 = new Jdk14LogImpl(logger0);
      jdk14LogImpl0.trace((Object) "ToolTipText");
      assertEquals(true, jdk14LogImpl0.isErrorEnabled());
  }

  @Test
  public void test8()  throws Throwable  {
      Logger logger0 = Logger.getLogger("Q");
      Level level0 = Level.FINER;
      Jdk14LogImpl jdk14LogImpl0 = new Jdk14LogImpl(logger0);
      jdk14LogImpl0.warn((Object) level0);
      assertEquals(false, jdk14LogImpl0.isDebugEnabled());
  }
}
