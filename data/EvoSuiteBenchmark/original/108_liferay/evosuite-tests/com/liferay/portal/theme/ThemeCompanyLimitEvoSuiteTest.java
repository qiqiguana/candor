/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.theme;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.theme.ThemeCompanyId;
import com.liferay.portal.theme.ThemeCompanyLimit;
import java.util.LinkedList;
import java.util.List;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ThemeCompanyLimitEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ThemeCompanyLimit themeCompanyLimit0 = new ThemeCompanyLimit();
      List<ThemeCompanyId> list0 = themeCompanyLimit0.getIncludes();
      assertEquals(0, list0.size());
  }

  @Test
  public void test1()  throws Throwable  {
      ThemeCompanyLimit themeCompanyLimit0 = new ThemeCompanyLimit();
      LinkedList<ThemeCompanyId> linkedList0 = new LinkedList<ThemeCompanyId>();
      themeCompanyLimit0.setIncludes((List<? extends ThemeCompanyId>) linkedList0);
      ThemeCompanyId themeCompanyId0 = new ThemeCompanyId("y", true);
      linkedList0.push(themeCompanyId0);
      boolean boolean0 = themeCompanyLimit0.isIncluded(0L);
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      ThemeCompanyLimit themeCompanyLimit0 = new ThemeCompanyLimit();
      List<ThemeCompanyId> list0 = themeCompanyLimit0.getExcludes();
      assertEquals(0, list0.size());
  }

  @Test
  public void test3()  throws Throwable  {
      ThemeCompanyLimit themeCompanyLimit0 = new ThemeCompanyLimit();
      boolean boolean0 = themeCompanyLimit0.isExcluded(0L);
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      ThemeCompanyLimit themeCompanyLimit0 = new ThemeCompanyLimit();
      LinkedList<ThemeCompanyId> linkedList0 = new LinkedList<ThemeCompanyId>();
      themeCompanyLimit0.setExcludes((List<? extends ThemeCompanyId>) linkedList0);
      assertEquals(0, linkedList0.size());
  }

  @Test
  public void test5()  throws Throwable  {
      ThemeCompanyLimit themeCompanyLimit0 = new ThemeCompanyLimit();
      LinkedList<ThemeCompanyId> linkedList0 = new LinkedList<ThemeCompanyId>();
      themeCompanyLimit0.setIncludes((List<? extends ThemeCompanyId>) linkedList0);
      ThemeCompanyId themeCompanyId0 = new ThemeCompanyId("y", false);
      linkedList0.add(themeCompanyId0);
      boolean boolean0 = themeCompanyLimit0.isIncluded(0L);
      assertEquals(true, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      ThemeCompanyLimit themeCompanyLimit0 = new ThemeCompanyLimit();
      LinkedList<ThemeCompanyId> linkedList0 = new LinkedList<ThemeCompanyId>();
      themeCompanyLimit0.setIncludes((List<? extends ThemeCompanyId>) linkedList0);
      ThemeCompanyId themeCompanyId0 = new ThemeCompanyId("y", false);
      linkedList0.add(themeCompanyId0);
      boolean boolean0 = themeCompanyLimit0.isIncluded((-8L));
      assertEquals(false, boolean0);
  }
}
