/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.dao.orm.hibernate;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.dao.orm.hibernate.ProjectionFactoryImpl;
import com.liferay.portal.dao.orm.hibernate.ProjectionImpl;
import com.liferay.portal.dao.orm.hibernate.ProjectionListImpl;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.dao.orm.Type;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ProjectionFactoryImplEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ProjectionFactoryImpl projectionFactoryImpl0 = new ProjectionFactoryImpl();
      ProjectionListImpl projectionListImpl0 = (ProjectionListImpl)projectionFactoryImpl0.projectionList();
      assertEquals("[]", projectionListImpl0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      ProjectionFactoryImpl projectionFactoryImpl0 = new ProjectionFactoryImpl();
      ProjectionImpl projectionImpl0 = (ProjectionImpl)projectionFactoryImpl0.sum("o::\"o_2ks:Olot#]@");
      assertEquals("sum(o::\"o_2ks:Olot#]@)", projectionImpl0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      ProjectionFactoryImpl projectionFactoryImpl0 = new ProjectionFactoryImpl();
      ProjectionImpl projectionImpl0 = (ProjectionImpl)projectionFactoryImpl0.groupProperty(") outside valid range.");
      assertEquals(") outside valid range.", projectionImpl0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      ProjectionFactoryImpl projectionFactoryImpl0 = new ProjectionFactoryImpl();
      ProjectionImpl projectionImpl0 = (ProjectionImpl)projectionFactoryImpl0.max(") outside valid range.");
      ProjectionImpl projectionImpl1 = (ProjectionImpl)projectionFactoryImpl0.alias((Projection) projectionImpl0, ") outside valid range.");
      assertEquals("max() outside valid range.) as ) outside valid range.", projectionImpl1.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      ProjectionFactoryImpl projectionFactoryImpl0 = new ProjectionFactoryImpl();
      ProjectionImpl projectionImpl0 = (ProjectionImpl)projectionFactoryImpl0.count(") outside valid range.");
      assertEquals("count() outside valid range.)", projectionImpl0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      ProjectionFactoryImpl projectionFactoryImpl0 = new ProjectionFactoryImpl();
      ProjectionImpl projectionImpl0 = (ProjectionImpl)projectionFactoryImpl0.property("5y");
      assertEquals("5y", projectionImpl0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      ProjectionFactoryImpl projectionFactoryImpl0 = new ProjectionFactoryImpl();
      ProjectionImpl projectionImpl0 = (ProjectionImpl)projectionFactoryImpl0.max("|%*\"|}gcnKA{/A");
      ProjectionImpl projectionImpl1 = (ProjectionImpl)projectionFactoryImpl0.distinct((Projection) projectionImpl0);
      assertEquals("distinct max(|%*\"|}gcnKA{/A)", projectionImpl1.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      ProjectionFactoryImpl projectionFactoryImpl0 = new ProjectionFactoryImpl();
      ProjectionImpl projectionImpl0 = (ProjectionImpl)projectionFactoryImpl0.avg("");
      assertEquals("avg()", projectionImpl0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      ProjectionFactoryImpl projectionFactoryImpl0 = new ProjectionFactoryImpl();
      ProjectionImpl projectionImpl0 = (ProjectionImpl)projectionFactoryImpl0.countDistinct("|%*\"|}gcnKA{/A");
      assertEquals("distinct count(|%*\"|}gcnKA{/A)", projectionImpl0.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      ProjectionFactoryImpl projectionFactoryImpl0 = new ProjectionFactoryImpl();
      ProjectionImpl projectionImpl0 = (ProjectionImpl)projectionFactoryImpl0.rowCount();
      assertEquals("count(*)", projectionImpl0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      ProjectionFactoryImpl projectionFactoryImpl0 = new ProjectionFactoryImpl();
      ProjectionImpl projectionImpl0 = (ProjectionImpl)projectionFactoryImpl0.min("");
      assertEquals("min()", projectionImpl0.toString());
  }

  @Test
  public void test11()  throws Throwable  {
      ProjectionFactoryImpl projectionFactoryImpl0 = new ProjectionFactoryImpl();
      String[] stringArray0 = new String[6];
      Type[] typeArray0 = new Type[4];
      ProjectionImpl projectionImpl0 = (ProjectionImpl)projectionFactoryImpl0.sqlProjection((String) null, stringArray0, typeArray0);
      assertNull(projectionImpl0.toString());
  }

  @Test
  public void test12()  throws Throwable  {
      ProjectionFactoryImpl projectionFactoryImpl0 = new ProjectionFactoryImpl();
      String[] stringArray0 = new String[2];
      ProjectionImpl projectionImpl0 = (ProjectionImpl)projectionFactoryImpl0.sqlProjection("|%*\"|}gcnKA{/A", stringArray0, (Type[]) null);
      assertEquals("|%*\"|}gcnKA{/A", projectionImpl0.toString());
  }
}
