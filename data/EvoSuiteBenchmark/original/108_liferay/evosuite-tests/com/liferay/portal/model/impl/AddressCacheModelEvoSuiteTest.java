/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.model.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.model.impl.AddressCacheModel;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class AddressCacheModelEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      AddressCacheModel addressCacheModel0 = new AddressCacheModel();
      // Undeclared exception!
      try {
        addressCacheModel0.readExternal((ObjectInput) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      AddressCacheModel addressCacheModel0 = new AddressCacheModel();
      String string0 = addressCacheModel0.toString();
      assertEquals("{addressId=0, companyId=0, userId=0, userName=null, createDate=0, modifiedDate=0, classNameId=0, classPK=0, street1=null, street2=null, street3=null, city=null, zip=null, regionId=0, countryId=0, typeId=0, mailing=false, primary=false}", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      AddressCacheModel addressCacheModel0 = new AddressCacheModel();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      addressCacheModel0.userName = "";
      addressCacheModel0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(false, addressCacheModel0.mailing);
  }

  @Test
  public void test3()  throws Throwable  {
      AddressCacheModel addressCacheModel0 = new AddressCacheModel();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      addressCacheModel0.street1 = "{addressId=0, companyId=0, userId=0, userName=null, createDate=0, modifiedDate=0, classNameId=0, classPK=0, street1=null, street2=null, street3=null, city=null, zip=null, regionId=0, countryId=0, typeId=0, mailing=false, primary=false}";
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) pipedOutputStream0);
      addressCacheModel0.writeExternal((ObjectOutput) objectOutputStream0);
  }

  @Test
  public void test4()  throws Throwable  {
      AddressCacheModel addressCacheModel0 = new AddressCacheModel();
      addressCacheModel0.street2 = "";
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      addressCacheModel0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(0L, addressCacheModel0.modifiedDate);
  }

  @Test
  public void test5()  throws Throwable  {
      AddressCacheModel addressCacheModel0 = new AddressCacheModel();
      addressCacheModel0.street3 = "";
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) pipedOutputStream0);
      addressCacheModel0.writeExternal((ObjectOutput) objectOutputStream0);
  }

  @Test
  public void test6()  throws Throwable  {
      AddressCacheModel addressCacheModel0 = new AddressCacheModel();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      addressCacheModel0.city = "";
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      addressCacheModel0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(0L, addressCacheModel0.modifiedDate);
  }

  @Test
  public void test7()  throws Throwable  {
      AddressCacheModel addressCacheModel0 = new AddressCacheModel();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      addressCacheModel0.zip = "";
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) pipedOutputStream0);
      addressCacheModel0.writeExternal((ObjectOutput) objectOutputStream0);
  }
}
