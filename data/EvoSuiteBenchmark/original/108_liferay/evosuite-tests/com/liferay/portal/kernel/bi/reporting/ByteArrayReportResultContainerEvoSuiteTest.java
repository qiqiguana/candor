/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.bi.reporting;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.bi.reporting.ByteArrayReportResultContainer;
import com.liferay.portal.kernel.bi.reporting.ReportGenerationException;
import com.liferay.portal.kernel.io.unsync.UnsyncByteArrayOutputStream;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ByteArrayReportResultContainerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ByteArrayReportResultContainer byteArrayReportResultContainer0 = new ByteArrayReportResultContainer("]+HS//1IP8");
      ByteArrayReportResultContainer byteArrayReportResultContainer1 = (ByteArrayReportResultContainer)byteArrayReportResultContainer0.clone("]+HS//1IP8");
      assertEquals(false, byteArrayReportResultContainer1.hasError());
  }

  @Test
  public void test1()  throws Throwable  {
      ByteArrayReportResultContainer byteArrayReportResultContainer0 = new ByteArrayReportResultContainer("]+HS//1IP8");
      String string0 = byteArrayReportResultContainer0.getReportName();
      assertEquals("]+HS//1IP8", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      ByteArrayReportResultContainer byteArrayReportResultContainer0 = new ByteArrayReportResultContainer();
      byteArrayReportResultContainer0.setReportGenerationException((ReportGenerationException) null);
      assertEquals(false, byteArrayReportResultContainer0.hasError());
  }

  @Test
  public void test3()  throws Throwable  {
      ByteArrayReportResultContainer byteArrayReportResultContainer0 = new ByteArrayReportResultContainer("]+HS//1IP8");
      // Undeclared exception!
      try {
        byteArrayReportResultContainer0.getResults();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      ByteArrayReportResultContainer byteArrayReportResultContainer0 = new ByteArrayReportResultContainer("]+HS//1IP8");
      UnsyncByteArrayOutputStream unsyncByteArrayOutputStream0 = (UnsyncByteArrayOutputStream)byteArrayReportResultContainer0.getOutputStream();
      assertNotNull(unsyncByteArrayOutputStream0);
      
      UnsyncByteArrayOutputStream unsyncByteArrayOutputStream1 = (UnsyncByteArrayOutputStream)byteArrayReportResultContainer0.getOutputStream();
      assertSame(unsyncByteArrayOutputStream1, unsyncByteArrayOutputStream0);
  }

  @Test
  public void test5()  throws Throwable  {
      ByteArrayReportResultContainer byteArrayReportResultContainer0 = new ByteArrayReportResultContainer("]+HS//1IP8");
      boolean boolean0 = byteArrayReportResultContainer0.hasError();
      assertEquals(false, boolean0);
  }
}
