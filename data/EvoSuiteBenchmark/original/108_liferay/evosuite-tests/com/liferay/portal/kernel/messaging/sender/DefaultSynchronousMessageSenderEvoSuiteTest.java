/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.messaging.sender;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.messaging.BridgingMessageListener;
import com.liferay.portal.kernel.messaging.DefaultMessageBus;
import com.liferay.portal.kernel.messaging.Destination;
import com.liferay.portal.kernel.messaging.Message;
import com.liferay.portal.kernel.messaging.MessageBus;
import com.liferay.portal.kernel.messaging.MessageBusException;
import com.liferay.portal.kernel.messaging.MessageListener;
import com.liferay.portal.kernel.messaging.SynchronousDestination;
import com.liferay.portal.kernel.messaging.sender.DefaultSynchronousMessageSender;
import com.liferay.portal.kernel.uuid.PortalUUID;
import com.liferay.portal.uuid.PortalUUIDImpl;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DefaultSynchronousMessageSenderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DefaultMessageBus defaultMessageBus0 = new DefaultMessageBus();
      PortalUUIDImpl portalUUIDImpl0 = new PortalUUIDImpl();
      DefaultSynchronousMessageSender defaultSynchronousMessageSender0 = new DefaultSynchronousMessageSender((MessageBus) defaultMessageBus0, (PortalUUID) portalUUIDImpl0, 0L);
      Message message0 = new Message();
      defaultSynchronousMessageSender0.send("", message0);
      assertEquals("c04c351d-c3ad-4e28-88b3-33fb82cde891", portalUUIDImpl0.generate());
  }

  @Test
  public void test1()  throws Throwable  {
      DefaultMessageBus defaultMessageBus0 = new DefaultMessageBus();
      PortalUUIDImpl portalUUIDImpl0 = new PortalUUIDImpl();
      DefaultSynchronousMessageSender defaultSynchronousMessageSender0 = new DefaultSynchronousMessageSender((MessageBus) defaultMessageBus0, (PortalUUID) portalUUIDImpl0, 0L);
      defaultSynchronousMessageSender0.setPortalUUID((PortalUUID) portalUUIDImpl0);
      assertEquals("e9c2164d-c3a1-48d2-bf5c-4961d781d4c3", portalUUIDImpl0.generate());
  }

  @Test
  public void test2()  throws Throwable  {
      DefaultMessageBus defaultMessageBus0 = new DefaultMessageBus();
      PortalUUIDImpl portalUUIDImpl0 = new PortalUUIDImpl();
      DefaultSynchronousMessageSender defaultSynchronousMessageSender0 = new DefaultSynchronousMessageSender((MessageBus) defaultMessageBus0, (PortalUUID) portalUUIDImpl0, 0L);
      defaultSynchronousMessageSender0.setMessageBus((MessageBus) defaultMessageBus0);
      assertEquals(0, defaultMessageBus0.getDestinationCount());
  }

  @Test
  public void test3()  throws Throwable  {
      DefaultSynchronousMessageSender defaultSynchronousMessageSender0 = new DefaultSynchronousMessageSender();
      assertNotNull(defaultSynchronousMessageSender0);
  }

  @Test
  public void test4()  throws Throwable  {
      DefaultMessageBus defaultMessageBus0 = new DefaultMessageBus();
      PortalUUIDImpl portalUUIDImpl0 = new PortalUUIDImpl();
      DefaultSynchronousMessageSender defaultSynchronousMessageSender0 = new DefaultSynchronousMessageSender((MessageBus) defaultMessageBus0, (PortalUUID) portalUUIDImpl0, 0L);
      defaultSynchronousMessageSender0.setTimeout(0L);
      assertEquals("fd2078e1-2999-43d7-a7e0-54a43016589e", portalUUIDImpl0.generate());
  }

  @Test
  public void test5()  throws Throwable  {
      DefaultMessageBus defaultMessageBus0 = new DefaultMessageBus();
      PortalUUIDImpl portalUUIDImpl0 = new PortalUUIDImpl();
      DefaultSynchronousMessageSender defaultSynchronousMessageSender0 = new DefaultSynchronousMessageSender((MessageBus) defaultMessageBus0, (PortalUUID) portalUUIDImpl0, 0L);
      SynchronousDestination synchronousDestination0 = new SynchronousDestination();
      defaultMessageBus0.addDestination((Destination) synchronousDestination0);
      Message message0 = new Message();
      defaultSynchronousMessageSender0.send("", message0);
      assertEquals("01e511e7-d643-4e31-a999-0004d06c580f", portalUUIDImpl0.generate());
  }

  @Test
  public void test6()  throws Throwable  {
      DefaultMessageBus defaultMessageBus0 = new DefaultMessageBus();
      PortalUUIDImpl portalUUIDImpl0 = new PortalUUIDImpl();
      DefaultSynchronousMessageSender defaultSynchronousMessageSender0 = new DefaultSynchronousMessageSender((MessageBus) defaultMessageBus0, (PortalUUID) portalUUIDImpl0, 0L);
      SynchronousDestination synchronousDestination0 = new SynchronousDestination();
      defaultMessageBus0.addDestination((Destination) synchronousDestination0);
      Message message0 = new Message();
      BridgingMessageListener bridgingMessageListener0 = new BridgingMessageListener();
      synchronousDestination0.register((MessageListener) bridgingMessageListener0);
      // Undeclared exception!
      try {
        defaultSynchronousMessageSender0.send("", message0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Destination liferay/message_bus/default_response is not configured
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      DefaultMessageBus defaultMessageBus0 = new DefaultMessageBus();
      PortalUUIDImpl portalUUIDImpl0 = new PortalUUIDImpl();
      DefaultSynchronousMessageSender defaultSynchronousMessageSender0 = new DefaultSynchronousMessageSender((MessageBus) defaultMessageBus0, (PortalUUID) portalUUIDImpl0, 0L);
      SynchronousDestination synchronousDestination0 = new SynchronousDestination();
      defaultMessageBus0.addDestination((Destination) synchronousDestination0);
      Message message0 = new Message();
      message0.setResponseDestinationName("/U.$]zuQr");
      BridgingMessageListener bridgingMessageListener0 = new BridgingMessageListener();
      synchronousDestination0.register((MessageListener) bridgingMessageListener0);
      // Undeclared exception!
      try {
        defaultSynchronousMessageSender0.send("", message0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Destination liferay/message_bus/default_response is not configured
         */
      }
  }
}
