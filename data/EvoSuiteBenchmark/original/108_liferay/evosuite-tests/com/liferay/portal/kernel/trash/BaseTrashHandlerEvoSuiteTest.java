/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.trash;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.bean.BeanLocatorException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.model.ContainerModel;
import com.liferay.portal.model.Group;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portlet.EventRequestImpl;
import com.liferay.portlet.blogs.trash.BlogsEntryTrashHandler;
import com.liferay.portlet.documentlibrary.trash.DLFileEntryTrashHandler;
import com.liferay.portlet.messageboards.trash.MBThreadTrashHandler;
import com.liferay.portlet.trash.model.TrashEntry;
import com.liferay.portlet.wiki.trash.WikiNodeTrashHandler;
import java.util.Date;
import java.util.List;
import javax.portlet.PortletRequest;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BaseTrashHandlerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BlogsEntryTrashHandler blogsEntryTrashHandler0 = new BlogsEntryTrashHandler();
      String string0 = blogsEntryTrashHandler0.getContainerModelName();
      assertEquals("", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      BlogsEntryTrashHandler blogsEntryTrashHandler0 = new BlogsEntryTrashHandler();
      String string0 = blogsEntryTrashHandler0.getRootContainerModelName();
      assertEquals("", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      MBThreadTrashHandler mBThreadTrashHandler0 = new MBThreadTrashHandler();
      EventRequestImpl eventRequestImpl0 = new EventRequestImpl();
      String string0 = mBThreadTrashHandler0.getRestoreLink((PortletRequest) eventRequestImpl0, 1870L);
      assertEquals("", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      DLFileEntryTrashHandler dLFileEntryTrashHandler0 = new DLFileEntryTrashHandler();
      List<ContainerModel> list0 = dLFileEntryTrashHandler0.getContainerModels((-1217L), (-1217L), (-14), (-14));
      assertNull(list0);
  }

  @Test
  public void test4()  throws Throwable  {
      BlogsEntryTrashHandler blogsEntryTrashHandler0 = new BlogsEntryTrashHandler();
      blogsEntryTrashHandler0.deleteTrashAttachments((Group) null, (Date) null);
      assertEquals("", blogsEntryTrashHandler0.getRootContainerModelName());
  }

  @Test
  public void test5()  throws Throwable  {
      BlogsEntryTrashHandler blogsEntryTrashHandler0 = new BlogsEntryTrashHandler();
      String string0 = blogsEntryTrashHandler0.getDeleteMessage();
      assertEquals("deleted-in-x", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      BlogsEntryTrashHandler blogsEntryTrashHandler0 = new BlogsEntryTrashHandler();
      blogsEntryTrashHandler0.updateTitle(1116L, "");
      assertEquals("deleted-in-x", blogsEntryTrashHandler0.getDeleteMessage());
  }

  @Test
  public void test7()  throws Throwable  {
      WikiNodeTrashHandler wikiNodeTrashHandler0 = new WikiNodeTrashHandler();
      ServiceContext serviceContext0 = new ServiceContext();
      // Undeclared exception!
      try {
        wikiNodeTrashHandler0.moveTrashEntry(0L, 0L, serviceContext0);
        fail("Expecting exception: BeanLocatorException");
      } catch(BeanLocatorException e) {
        /*
         * BeanLocator has not been set
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      BlogsEntryTrashHandler blogsEntryTrashHandler0 = new BlogsEntryTrashHandler();
      // Undeclared exception!
      try {
        blogsEntryTrashHandler0.deleteTrashEntry((-182L));
        fail("Expecting exception: BeanLocatorException");
      } catch(BeanLocatorException e) {
        /*
         * BeanLocator has not been set
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      MBThreadTrashHandler mBThreadTrashHandler0 = new MBThreadTrashHandler();
      String string0 = mBThreadTrashHandler0.getRestoreMessage((PortletRequest) null, (long) 0);
      assertEquals("", string0);
  }

  @Test
  public void test10()  throws Throwable  {
      MBThreadTrashHandler mBThreadTrashHandler0 = new MBThreadTrashHandler();
      String string0 = mBThreadTrashHandler0.getSubcontainerModelName();
      assertEquals("", string0);
  }

  @Test
  public void test11()  throws Throwable  {
      BlogsEntryTrashHandler blogsEntryTrashHandler0 = new BlogsEntryTrashHandler();
      // Undeclared exception!
      try {
        blogsEntryTrashHandler0.getTrashRenderer(1L);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      DLFileEntryTrashHandler dLFileEntryTrashHandler0 = new DLFileEntryTrashHandler();
      // Undeclared exception!
      try {
        dLFileEntryTrashHandler0.deleteTrashEntry(1021L, false);
        fail("Expecting exception: BeanLocatorException");
      } catch(BeanLocatorException e) {
        /*
         * BeanLocator has not been set
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      MBThreadTrashHandler mBThreadTrashHandler0 = new MBThreadTrashHandler();
      mBThreadTrashHandler0.checkDuplicateTrashEntry((TrashEntry) null, (long) 0, "");
      assertEquals("", mBThreadTrashHandler0.getRootContainerModelName());
  }

  @Test
  public void test14()  throws Throwable  {
      BlogsEntryTrashHandler blogsEntryTrashHandler0 = new BlogsEntryTrashHandler();
      ContainerModel containerModel0 = blogsEntryTrashHandler0.getContainerModel(1116L);
      assertNull(containerModel0);
  }

  @Test
  public void test15()  throws Throwable  {
      MBThreadTrashHandler mBThreadTrashHandler0 = new MBThreadTrashHandler();
      int int0 = mBThreadTrashHandler0.getContainerModelsCount(3600000L, 3600000L);
      assertEquals(0, int0);
  }
}
