/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.util.CentralizedThreadLocal;
import java.util.AbstractMap;
import java.util.HashMap;
import java.util.Map;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class CentralizedThreadLocalEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      CentralizedThreadLocal<Double> centralizedThreadLocal0 = new CentralizedThreadLocal<Double>(false);
      Double double0 = new Double((-153.65564145506002));
      centralizedThreadLocal0.set(double0);
      centralizedThreadLocal0.get();
      centralizedThreadLocal0.get();
      HashMap<CentralizedThreadLocal<?>, Object> hashMap0 = new HashMap<CentralizedThreadLocal<?>, Object>();
      CentralizedThreadLocal<Double> centralizedThreadLocal1 = new CentralizedThreadLocal<Double>(true);
      centralizedThreadLocal0.get();
      CentralizedThreadLocal<Short> centralizedThreadLocal2 = new CentralizedThreadLocal<Short>(true);
      CentralizedThreadLocal<CentralizedThreadLocal<Object>> centralizedThreadLocal3 = new CentralizedThreadLocal<CentralizedThreadLocal<Object>>(true);
      centralizedThreadLocal3.hashCode();
      CentralizedThreadLocal.setThreadLocals((Map<CentralizedThreadLocal<?>, Object>) hashMap0, (Map<CentralizedThreadLocal<?>, Object>) hashMap0);
      assertEquals(0, hashMap0.size());
  }

  @Test
  public void test1()  throws Throwable  {
      CentralizedThreadLocal.clearShortLivedThreadLocals();
  }

  @Test
  public void test2()  throws Throwable  {
      CentralizedThreadLocal<Float> centralizedThreadLocal0 = new CentralizedThreadLocal<Float>(false);
      centralizedThreadLocal0.remove();
  }

  @Test
  public void test3()  throws Throwable  {
      Map<CentralizedThreadLocal<?>, Object> map0 = CentralizedThreadLocal.getShortLivedThreadLocals();
      assertEquals(0, map0.size());
  }

  @Test
  public void test4()  throws Throwable  {
      Map<CentralizedThreadLocal<?>, Object> map0 = CentralizedThreadLocal.getLongLivedThreadLocals();
      assertEquals(0, map0.size());
  }

  @Test
  public void test5()  throws Throwable  {
      CentralizedThreadLocal.clearLongLivedThreadLocals();
  }

  @Test
  public void test6()  throws Throwable  {
      CentralizedThreadLocal<Double> centralizedThreadLocal0 = new CentralizedThreadLocal<Double>(false);
      CentralizedThreadLocal<Short> centralizedThreadLocal1 = new CentralizedThreadLocal<Short>(true);
      centralizedThreadLocal1.get();
  }

  @Test
  public void test7()  throws Throwable  {
      CentralizedThreadLocal<Double> centralizedThreadLocal0 = new CentralizedThreadLocal<Double>(false);
      Double double0 = new Double((-153.65564145506002));
      centralizedThreadLocal0.set(double0);
      HashMap<CentralizedThreadLocal<?>, Object> hashMap0 = new HashMap<CentralizedThreadLocal<?>, Object>();
      AbstractMap.SimpleEntry<String, ThreadLocal<Long>> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, ThreadLocal<Long>>("Gh3S@SbcGm$Df,", (ThreadLocal<Long>) null);
      hashMap0.put((CentralizedThreadLocal<?>) centralizedThreadLocal0, (Object) abstractMap_SimpleEntry0);
      CentralizedThreadLocal.setThreadLocals((Map<CentralizedThreadLocal<?>, Object>) hashMap0, (Map<CentralizedThreadLocal<?>, Object>) hashMap0);
      assertEquals(false, hashMap0.isEmpty());
  }

  @Test
  public void test8()  throws Throwable  {
      CentralizedThreadLocal<Float> centralizedThreadLocal0 = new CentralizedThreadLocal<Float>(false);
      Float float0 = new Float((-18.281046F));
      centralizedThreadLocal0.set(float0);
      centralizedThreadLocal0.remove();
  }
}
