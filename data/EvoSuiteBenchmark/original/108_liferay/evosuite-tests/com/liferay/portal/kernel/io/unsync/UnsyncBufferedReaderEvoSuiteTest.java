/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.io.unsync;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.io.unsync.UnsyncBufferedReader;
import de.schlichtherle.nio.charset.IBM437Charset;
import java.io.BufferedReader;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.StringReader;
import java.nio.charset.CharsetDecoder;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class UnsyncBufferedReaderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      UnsyncBufferedReader unsyncBufferedReader0 = new UnsyncBufferedReader((Reader) pipedReader0);
      assertNotNull(unsyncBufferedReader0);
      
      char[] charArray0 = new char[5];
      int int0 = unsyncBufferedReader0.read(charArray0, 0, (-1004));
      assertEquals(0, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      UnsyncBufferedReader unsyncBufferedReader0 = new UnsyncBufferedReader((Reader) null);
      assertNotNull(unsyncBufferedReader0);
      
      boolean boolean0 = unsyncBufferedReader0.markSupported();
      assertEquals(true, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^yQ}{rw,*7Voe");
      UnsyncBufferedReader unsyncBufferedReader0 = null;
      try {
        unsyncBufferedReader0 = new UnsyncBufferedReader((Reader) stringReader0, 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Size is less than 0
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      UnsyncBufferedReader unsyncBufferedReader0 = new UnsyncBufferedReader((Reader) null, 243);
      unsyncBufferedReader0.close();
      assertEquals(true, unsyncBufferedReader0.markSupported());
  }

  @Test
  public void test4()  throws Throwable  {
      StringReader stringReader0 = new StringReader("groovy.swing.factory.RichActionWidgetFactory");
      UnsyncBufferedReader unsyncBufferedReader0 = new UnsyncBufferedReader((Reader) stringReader0);
      unsyncBufferedReader0.close();
      try {
        unsyncBufferedReader0.reset();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Reader is null
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^yQ}{rw,*7Voe");
      UnsyncBufferedReader unsyncBufferedReader0 = new UnsyncBufferedReader((Reader) stringReader0);
      unsyncBufferedReader0.mark(0);
      assertEquals(-1, unsyncBufferedReader0.read());
  }

  @Test
  public void test6()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^yQ}{rw,*7Voe");
      UnsyncBufferedReader unsyncBufferedReader0 = new UnsyncBufferedReader((Reader) stringReader0);
      char[] charArray0 = new char[15];
      unsyncBufferedReader0.mark(43);
      unsyncBufferedReader0.read(charArray0);
      unsyncBufferedReader0.mark(3);
      assertEquals(true, unsyncBufferedReader0.ready());
  }

  @Test
  public void test7()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^yQ}{rw,*7Voe");
      UnsyncBufferedReader unsyncBufferedReader0 = new UnsyncBufferedReader((Reader) stringReader0);
      unsyncBufferedReader0.read();
      assertEquals(-1, stringReader0.read());
      
      unsyncBufferedReader0.mark(9);
      assertEquals(-1, unsyncBufferedReader0.read());
  }

  @Test
  public void test8()  throws Throwable  {
      UnsyncBufferedReader unsyncBufferedReader0 = new UnsyncBufferedReader((Reader) null, 243);
      try {
        unsyncBufferedReader0.read();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Reader is null
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      UnsyncBufferedReader unsyncBufferedReader0 = new UnsyncBufferedReader((Reader) null, 4096);
      char[] charArray0 = new char[7];
      try {
        unsyncBufferedReader0.read(charArray0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Reader is null
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^yQ}{rw,*7Voe");
      UnsyncBufferedReader unsyncBufferedReader0 = new UnsyncBufferedReader((Reader) stringReader0);
      assertEquals(-1, stringReader0.read());
      
      unsyncBufferedReader0.skip((long) 'q');
      char[] charArray0 = new char[10];
      int int0 = unsyncBufferedReader0.read(charArray0, (int) 'f', (int) 'q');
      assertEquals((-1), int0);
  }

  @Test
  public void test11()  throws Throwable  {
      UnsyncBufferedReader unsyncBufferedReader0 = new UnsyncBufferedReader((Reader) null);
      try {
        unsyncBufferedReader0.readLine();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Reader is null
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^yQ}{rw,*7Voe");
      UnsyncBufferedReader unsyncBufferedReader0 = new UnsyncBufferedReader((Reader) stringReader0);
      unsyncBufferedReader0.skip((long) 'q');
      String string0 = unsyncBufferedReader0.readLine();
      assertNull(string0);
  }

  @Test
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^yQ}{rw,*7Voe");
      UnsyncBufferedReader unsyncBufferedReader0 = new UnsyncBufferedReader((Reader) stringReader0);
      unsyncBufferedReader0.read();
      stringReader0.reset();
      String string0 = unsyncBufferedReader0.readLine();
      assertEquals(-1, stringReader0.read());
      assertEquals("yQ}{rw,*7Voe", string0);
  }

  @Test
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!xhK c8!^w*&");
      UnsyncBufferedReader unsyncBufferedReader0 = new UnsyncBufferedReader((Reader) stringReader0, 1);
      UnsyncBufferedReader unsyncBufferedReader1 = new UnsyncBufferedReader((Reader) unsyncBufferedReader0);
      char[] charArray0 = new char[10];
      int int0 = unsyncBufferedReader1.read(charArray0);
      assertEquals(-1, stringReader0.read());
      assertEquals((-1), int0);
  }

  @Test
  public void test15()  throws Throwable  {
      UnsyncBufferedReader unsyncBufferedReader0 = new UnsyncBufferedReader((Reader) null);
      try {
        unsyncBufferedReader0.ready();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Reader is null
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      FileDescriptor fileDescriptor0 = FileDescriptor.err;
      FileInputStream fileInputStream0 = new FileInputStream(fileDescriptor0);
      IBM437Charset iBM437Charset0 = new IBM437Charset();
      CharsetDecoder charsetDecoder0 = iBM437Charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader((InputStream) fileInputStream0, charsetDecoder0);
      UnsyncBufferedReader unsyncBufferedReader0 = new UnsyncBufferedReader((Reader) inputStreamReader0);
      assertNotNull(unsyncBufferedReader0);
      
      boolean boolean0 = unsyncBufferedReader0.ready();
      assertEquals(false, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 314);
      BufferedReader bufferedReader0 = new BufferedReader((Reader) pipedReader0, 314);
      PushbackReader pushbackReader0 = new PushbackReader((Reader) bufferedReader0);
      UnsyncBufferedReader unsyncBufferedReader0 = new UnsyncBufferedReader((Reader) pushbackReader0, 581);
      try {
        unsyncBufferedReader0.reset();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Resetting to invalid mark
         */
      }
  }

  @Test
  public void test18()  throws Throwable  {
      UnsyncBufferedReader unsyncBufferedReader0 = new UnsyncBufferedReader((Reader) null);
      // Undeclared exception!
      try {
        unsyncBufferedReader0.skip((-294L));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Skip is less than 0
         */
      }
  }

  @Test
  public void test19()  throws Throwable  {
      UnsyncBufferedReader unsyncBufferedReader0 = new UnsyncBufferedReader((Reader) null);
      try {
        unsyncBufferedReader0.skip((long) 0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Reader is null
         */
      }
  }

  @Test
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^yQ}{rw,*7Voe");
      UnsyncBufferedReader unsyncBufferedReader0 = new UnsyncBufferedReader((Reader) stringReader0);
      assertEquals(-1, stringReader0.read());
      
      long long0 = unsyncBufferedReader0.skip(0L);
      assertEquals(0L, long0);
  }

  @Test
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^yQ}{rw,*7Voe");
      UnsyncBufferedReader unsyncBufferedReader0 = new UnsyncBufferedReader((Reader) stringReader0);
      assertEquals(-1, stringReader0.read());
      
      char[] charArray0 = new char[15];
      unsyncBufferedReader0.mark(43);
      unsyncBufferedReader0.read(charArray0);
      long long0 = unsyncBufferedReader0.skip((long) 'q');
      assertEquals(0L, long0);
  }

  @Test
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^yQ}{rw,*7Voe");
      UnsyncBufferedReader unsyncBufferedReader0 = new UnsyncBufferedReader((Reader) stringReader0);
      assertEquals(-1, stringReader0.read());
      
      unsyncBufferedReader0.mark(3);
      unsyncBufferedReader0.skip((long) 'q');
      int int0 = unsyncBufferedReader0.read();
      assertEquals((-1), int0);
  }

  @Test
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^yQ}{rw,*7Voe");
      UnsyncBufferedReader unsyncBufferedReader0 = new UnsyncBufferedReader((Reader) stringReader0);
      unsyncBufferedReader0.fillInBuffer();
      assertEquals(-1, stringReader0.read());
      
      char[] charArray0 = new char[15];
      int int0 = unsyncBufferedReader0.read(charArray0);
      assertEquals((-1), int0);
  }
}
