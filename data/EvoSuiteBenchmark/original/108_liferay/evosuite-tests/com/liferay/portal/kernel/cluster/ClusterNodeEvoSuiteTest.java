/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.cluster;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.cluster.ClusterNode;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ClusterNodeEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          ClusterNode clusterNode0 = new ClusterNode("Ine address is null", (InetAddress) inet4Address0);
          assertNotNull(clusterNode0);
          
          String string0 = clusterNode0.toString();
          assertNotNull(string0);
          assertEquals("{clusterNodeId=Ine address is null, inetAddress=localhost/127.0.0.1, port=0}", string0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          ClusterNode clusterNode0 = new ClusterNode("Ine address is null", (InetAddress) inet4Address0);
          Inet4Address inet4Address1 = (Inet4Address)clusterNode0.getInetAddress();
          assertEquals(false, inet4Address1.isMCNodeLocal());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          ClusterNode clusterNode0 = new ClusterNode("Ine address is null", (InetAddress) inet4Address0);
          String string0 = clusterNode0.getClusterNodeId();
          assertEquals("Ine address is null", string0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          ClusterNode clusterNode0 = new ClusterNode("Ine address is null", (InetAddress) inet4Address0);
          assertNotNull(clusterNode0);
          
          int int0 = clusterNode0.hashCode();
          assertEquals((-1957449167), int0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          ClusterNode clusterNode0 = new ClusterNode("Ine address is null", (InetAddress) inet4Address0);
          assertNotNull(clusterNode0);
          
          int int0 = clusterNode0.getPort();
          assertEquals(0, int0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
      Inet4Address inet4Address0 = (Inet4Address)InetAddress.getByName((String) null);
      ClusterNode clusterNode0 = null;
      try {
        clusterNode0 = new ClusterNode((String) null, (InetAddress) inet4Address0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Cluster node ID is null
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      ClusterNode clusterNode0 = null;
      try {
        clusterNode0 = new ClusterNode("", (InetAddress) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Inet address is null
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      Inet4Address inet4Address0 = (Inet4Address)InetAddress.getByName("");
      ClusterNode clusterNode0 = new ClusterNode("", (InetAddress) inet4Address0);
      assertNotNull(clusterNode0);
      
      byte[] byteArray0 = new byte[4];
      Inet4Address inet4Address1 = (Inet4Address)InetAddress.getByAddress(byteArray0);
      ClusterNode clusterNode1 = new ClusterNode("", (InetAddress) inet4Address1);
      int int0 = clusterNode0.compareTo(clusterNode1);
      assertEquals(1, int0);
  }

  @Test
  public void test8()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          ClusterNode clusterNode0 = new ClusterNode("Ine address is null", (InetAddress) inet4Address0);
          assertNotNull(clusterNode0);
          
          int int0 = clusterNode0.compareTo(clusterNode0);
          assertEquals(0, int0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test9()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          ClusterNode clusterNode0 = new ClusterNode("Ine address is null", (InetAddress) inet4Address0);
          assertNotNull(clusterNode0);
          
          ClusterNode clusterNode1 = new ClusterNode("Ine address is null", (InetAddress) inet4Address0);
          clusterNode1.setPort(79);
          int int0 = clusterNode1.compareTo(clusterNode0);
          assertEquals(79, clusterNode1.getPort());
          assertEquals(1, int0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          ClusterNode clusterNode0 = new ClusterNode("Ine address is null", (InetAddress) inet4Address0);
          assertNotNull(clusterNode0);
          
          ClusterNode clusterNode1 = new ClusterNode("Ine address is null", (InetAddress) inet4Address0);
          clusterNode1.setPort(79);
          int int0 = clusterNode0.compareTo(clusterNode1);
          assertEquals(79, clusterNode1.getPort());
          assertEquals((-1), int0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          ClusterNode clusterNode0 = new ClusterNode("Ine address is null", (InetAddress) inet4Address0);
          assertNotNull(clusterNode0);
          
          ClusterNode clusterNode1 = new ClusterNode("4f", (InetAddress) inet4Address0);
          boolean boolean0 = clusterNode0.equals((Object) clusterNode1);
          assertEquals(false, boolean0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          ClusterNode clusterNode0 = new ClusterNode("Ine address is null", (InetAddress) inet4Address0);
          assertNotNull(clusterNode0);
          
          boolean boolean0 = clusterNode0.equals((Object) "4f");
          assertEquals(false, boolean0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          ClusterNode clusterNode0 = new ClusterNode("Ine address is null", (InetAddress) inet4Address0);
          assertNotNull(clusterNode0);
          
          ClusterNode clusterNode1 = new ClusterNode("Ine address is null", (InetAddress) inet4Address0);
          boolean boolean0 = clusterNode0.equals((Object) clusterNode1);
          assertEquals(true, boolean0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
