/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.search;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.browseengine.bobo.api.BrowseFacet;
import com.browseengine.bobo.api.FacetAccessible;
import com.browseengine.bobo.api.MappedFacetAccessible;
import com.liferay.portal.kernel.search.facet.collector.TermCollector;
import com.liferay.portal.search.BoboFacetCollector;
import com.liferay.portal.search.BoboTermCollector;
import java.util.List;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BoboFacetCollectorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BrowseFacet[] browseFacetArray0 = new BrowseFacet[1];
      BrowseFacet browseFacet0 = new BrowseFacet();
      browseFacetArray0[0] = browseFacet0;
      MappedFacetAccessible mappedFacetAccessible0 = new MappedFacetAccessible(browseFacetArray0);
      BoboFacetCollector boboFacetCollector0 = new BoboFacetCollector("", (FacetAccessible) mappedFacetAccessible0);
      assertNotNull(boboFacetCollector0);
      
      List<TermCollector> list0 = boboFacetCollector0.getTermCollectors();
      assertNotNull(list0);
      assertEquals(1, list0.size());
  }

  @Test
  public void test1()  throws Throwable  {
      BrowseFacet[] browseFacetArray0 = new BrowseFacet[1];
      BrowseFacet browseFacet0 = new BrowseFacet();
      browseFacetArray0[0] = browseFacet0;
      MappedFacetAccessible mappedFacetAccessible0 = new MappedFacetAccessible(browseFacetArray0);
      BoboFacetCollector boboFacetCollector0 = new BoboFacetCollector("", (FacetAccessible) mappedFacetAccessible0);
      BoboTermCollector boboTermCollector0 = (BoboTermCollector)boboFacetCollector0.getTermCollector("");
      assertNotNull(boboTermCollector0);
  }

  @Test
  public void test2()  throws Throwable  {
      BrowseFacet[] browseFacetArray0 = new BrowseFacet[8];
      BrowseFacet browseFacet0 = new BrowseFacet();
      browseFacetArray0[0] = browseFacet0;
      browseFacetArray0[1] = browseFacet0;
      browseFacetArray0[2] = browseFacetArray0[0];
      browseFacetArray0[3] = browseFacet0;
      browseFacetArray0[4] = browseFacetArray0[2];
      browseFacetArray0[5] = browseFacet0;
      browseFacetArray0[6] = browseFacetArray0[2];
      browseFacetArray0[7] = browseFacetArray0[1];
      MappedFacetAccessible mappedFacetAccessible0 = new MappedFacetAccessible(browseFacetArray0);
      BoboFacetCollector boboFacetCollector0 = new BoboFacetCollector("M/Gi?D3.+F", (FacetAccessible) mappedFacetAccessible0);
      String string0 = boboFacetCollector0.getFieldName();
      assertEquals("M/Gi?D3.+F", string0);
  }
}
