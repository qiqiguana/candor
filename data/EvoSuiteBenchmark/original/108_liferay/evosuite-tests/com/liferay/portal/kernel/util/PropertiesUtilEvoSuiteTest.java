/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.util.PropertiesUtil;
import com.liferay.portal.kernel.util.SafeProperties;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedReader;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.util.Hashtable;
import java.util.Map;
import java.util.Properties;
import javax.swing.DebugGraphics;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PropertiesUtilEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      // Undeclared exception!
      try {
        PropertiesUtil.list((Map<String, String>) hashtable0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      PrintStream printStream0 = DebugGraphics.logStream();
      PropertiesUtil.list((Map<String, String>) hashtable0, printStream0);
      assertEquals(true, printStream0.checkError());
  }

  @Test
  public void test2()  throws Throwable  {
      PropertiesUtil propertiesUtil0 = new PropertiesUtil();
      assertNotNull(propertiesUtil0);
  }

  @Test
  public void test3()  throws Throwable  {
      Properties properties0 = new Properties();
      String string0 = PropertiesUtil.list(properties0);
      assertEquals("-- listing properties --\n", string0);
      assertNotNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try {
        PropertiesUtil.list((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      Properties properties0 = PropertiesUtil.load("M08");
      assertNotNull(properties0);
      
      PropertiesUtil.copyProperties(properties0, properties0);
      assertEquals("{M08=}", properties0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      Properties properties0 = PropertiesUtil.load("sc)t*tl`kUs");
      assertNotNull(properties0);
      
      Properties properties1 = PropertiesUtil.fromMap(properties0);
      assertEquals("{sc)t*tl`kUs=}", properties1.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      hashtable0.put("", "");
      Properties properties0 = PropertiesUtil.fromMap((Map<String, String>) hashtable0);
      assertNotNull(properties0);
      assertEquals("{=}", properties0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Properties properties0 = PropertiesUtil.fromMap((Map<String, String>) hashtable0);
      PropertiesUtil.load(properties0, "bb-");
      PropertiesUtil.fromProperties(properties0, (Map<String, String>) hashtable0);
      assertEquals(1, hashtable0.size());
      assertEquals(false, hashtable0.isEmpty());
  }

  @Test
  public void test9()  throws Throwable  {
      Properties properties0 = PropertiesUtil.load("Ignoring HTTP status code [305] 'Use Proxy'", "Ignoring HTTP status code [305] 'Use Proxy'");
      assertNotNull(properties0);
      
      Properties properties1 = PropertiesUtil.getProperties(properties0, "Ignoring HTTP status code [305] 'Use Proxy'", false);
      assertFalse(properties1.equals(properties0));
      assertNotNull(properties1);
      assertEquals("{}", properties1.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      Properties properties0 = PropertiesUtil.load("M08");
      assertNotNull(properties0);
      
      Properties properties1 = PropertiesUtil.getProperties(properties0, "M08", true);
      assertEquals("{=}", properties1.toString());
      assertNotNull(properties1);
  }

  @Test
  public void test11()  throws Throwable  {
      Properties properties0 = PropertiesUtil.load("^<)UbQ+7WQdvzn9*'");
      assertNotNull(properties0);
      
      Properties properties1 = PropertiesUtil.getProperties(properties0, "^<)UbQ+7WQdvzn9*'", false);
      assertEquals("{^<)UbQ+7WQdvzn9*'=}", properties1.toString());
      assertNotNull(properties1);
      assertNotSame(properties0, properties1);
  }

  @Test
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try {
        PropertiesUtil.load((InputStream) null, "sc)t*tl`kUs");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      Properties properties0 = PropertiesUtil.load("", "");
      PropertiesUtil.load(properties0, "");
      assertEquals(0, properties0.size());
  }

  @Test
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try {
        PropertiesUtil.loadJDK6((Reader) null);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Failed to invoke java.util.Properties.load(Reader reader)
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(887);
      try {
        PropertiesUtil.loadJDK6((Reader) pipedReader0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Pipe not connected
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      Properties properties0 = PropertiesUtil.load("M08");
      assertNotNull(properties0);
      
      PropertiesUtil.merge(properties0, properties0);
      assertEquals("{M08=}", properties0.toString());
  }

  @Test
  public void test17()  throws Throwable  {
      Properties properties0 = PropertiesUtil.load("M08");
      assertNotNull(properties0);
      
      String string0 = PropertiesUtil.toString(properties0);
      assertEquals("M08=\n", string0);
      assertNotNull(string0);
  }

  @Test
  public void test18()  throws Throwable  {
      SafeProperties safeProperties0 = new SafeProperties();
      String string0 = PropertiesUtil.toString((Properties) safeProperties0);
      assertEquals("", string0);
  }

  @Test
  public void test19()  throws Throwable  {
      SafeProperties safeProperties0 = new SafeProperties();
      PropertiesUtil.load((Properties) safeProperties0, "wk");
      String string0 = PropertiesUtil.toString((Properties) safeProperties0);
      assertEquals(false, safeProperties0.isEmpty());
      assertEquals("wk=\n", string0);
  }

  @Test
  public void test20()  throws Throwable  {
      Properties properties0 = PropertiesUtil.load("Ignoring HTTP status code [305] 'Use Proxy'", "Ignoring HTTP status code [305] 'Use Proxy'");
      assertNotNull(properties0);
      
      PropertiesUtil.trimKeys(properties0);
      assertEquals("{Ignoring=HTTP status code [305] 'Use Proxy'}", properties0.toString());
      assertEquals(false, properties0.isEmpty());
  }
}
