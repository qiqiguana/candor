/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.monitoring;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.monitoring.DefaultMonitoringProcessor;
import com.liferay.portal.kernel.monitoring.Level;
import com.liferay.portal.kernel.monitoring.MonitoringException;
import com.liferay.portal.kernel.monitoring.statistics.DataSample;
import com.liferay.portal.kernel.monitoring.statistics.DataSampleProcessor;
import com.liferay.portal.monitoring.statistics.BaseDataSample;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DefaultMonitoringProcessorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DefaultMonitoringProcessor defaultMonitoringProcessor0 = new DefaultMonitoringProcessor();
      Set<String> set0 = defaultMonitoringProcessor0.getNamespaces();
      assertEquals(true, set0.isEmpty());
  }

  @Test
  public void test1()  throws Throwable  {
      DefaultMonitoringProcessor defaultMonitoringProcessor0 = new DefaultMonitoringProcessor();
      HashMap<String, List<DataSampleProcessor<DataSample>>> hashMap0 = new HashMap<String, List<DataSampleProcessor<DataSample>>>();
      defaultMonitoringProcessor0.setDataSampleProcessors((Map<String, List<DataSampleProcessor<DataSample>>>) hashMap0);
      assertEquals("{}", hashMap0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      DefaultMonitoringProcessor defaultMonitoringProcessor0 = new DefaultMonitoringProcessor();
      Level level0 = Level.MEDIUM;
      defaultMonitoringProcessor0.setLevel("LHO", level0);
      Level level1 = defaultMonitoringProcessor0.getLevel("LHO");
      assertEquals(Level.MEDIUM, level1);
  }

  @Test
  public void test3()  throws Throwable  {
      DefaultMonitoringProcessor defaultMonitoringProcessor0 = new DefaultMonitoringProcessor();
      Level level0 = defaultMonitoringProcessor0.getLevel("HIGH");
      assertEquals(Level.OFF, level0);
  }

  @Test
  public void test4()  throws Throwable  {
      DefaultMonitoringProcessor defaultMonitoringProcessor0 = new DefaultMonitoringProcessor();
      BaseDataSample baseDataSample0 = new BaseDataSample();
      Level level0 = Level.HIGH;
      defaultMonitoringProcessor0.setLevel("", level0);
      baseDataSample0.setNamespace("");
      defaultMonitoringProcessor0.processDataSample((DataSample) baseDataSample0);
      assertNull(baseDataSample0.getUser());
  }

  @Test
  public void test5()  throws Throwable  {
      DefaultMonitoringProcessor defaultMonitoringProcessor0 = new DefaultMonitoringProcessor();
      BaseDataSample baseDataSample0 = new BaseDataSample();
      baseDataSample0.setNamespace("");
      Level level0 = Level.OFF;
      defaultMonitoringProcessor0.setLevel("", level0);
      defaultMonitoringProcessor0.processDataSample((DataSample) baseDataSample0);
      assertEquals("", baseDataSample0.getNamespace());
  }

  @Test
  public void test6()  throws Throwable  {
      DefaultMonitoringProcessor defaultMonitoringProcessor0 = new DefaultMonitoringProcessor();
      BaseDataSample baseDataSample0 = new BaseDataSample();
      defaultMonitoringProcessor0.registerDataSampleProcessor("", (DataSampleProcessor<DataSample>) defaultMonitoringProcessor0);
      baseDataSample0.setNamespace("");
      defaultMonitoringProcessor0.unregisterDataSampleProcessor("", (DataSampleProcessor<DataSample>) defaultMonitoringProcessor0);
      defaultMonitoringProcessor0.processDataSample((DataSample) baseDataSample0);
      assertEquals(0L, baseDataSample0.getDuration());
  }

  @Test
  public void test7()  throws Throwable  {
      DefaultMonitoringProcessor defaultMonitoringProcessor0 = new DefaultMonitoringProcessor();
      BaseDataSample baseDataSample0 = new BaseDataSample();
      DefaultMonitoringProcessor defaultMonitoringProcessor1 = new DefaultMonitoringProcessor();
      defaultMonitoringProcessor0.registerDataSampleProcessor("", (DataSampleProcessor<DataSample>) defaultMonitoringProcessor1);
      baseDataSample0.setNamespace("");
      defaultMonitoringProcessor0.processDataSample((DataSample) baseDataSample0);
      assertNull(baseDataSample0.getDescription());
  }

  @Test
  public void test8()  throws Throwable  {
      DefaultMonitoringProcessor defaultMonitoringProcessor0 = new DefaultMonitoringProcessor();
      defaultMonitoringProcessor0.registerDataSampleProcessor("LHO", (DataSampleProcessor<DataSample>) defaultMonitoringProcessor0);
      defaultMonitoringProcessor0.registerDataSampleProcessor("LHO", (DataSampleProcessor<DataSample>) defaultMonitoringProcessor0);
  }

  @Test
  public void test9()  throws Throwable  {
      DefaultMonitoringProcessor defaultMonitoringProcessor0 = new DefaultMonitoringProcessor();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("HIGH", "HIGH");
      defaultMonitoringProcessor0.setLevels((Map<String, String>) hashMap0);
      assertEquals(false, hashMap0.isEmpty());
  }

  @Test
  public void test10()  throws Throwable  {
      DefaultMonitoringProcessor defaultMonitoringProcessor0 = new DefaultMonitoringProcessor();
      defaultMonitoringProcessor0.unregisterDataSampleProcessor("Uunsafe3.aretL.himit", (DataSampleProcessor<DataSample>) defaultMonitoringProcessor0);
  }
}
