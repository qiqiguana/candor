/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.parsers.creole.visitor.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.parsers.creole.ast.ASTNode;
import com.liferay.portal.parsers.creole.ast.BaseParentableNode;
import com.liferay.portal.parsers.creole.ast.BoldTextNode;
import com.liferay.portal.parsers.creole.ast.CollectionNode;
import com.liferay.portal.parsers.creole.ast.ForcedEndOfLineNode;
import com.liferay.portal.parsers.creole.ast.FormattedTextNode;
import com.liferay.portal.parsers.creole.ast.HeadingNode;
import com.liferay.portal.parsers.creole.ast.HorizontalNode;
import com.liferay.portal.parsers.creole.ast.ImageNode;
import com.liferay.portal.parsers.creole.ast.ItalicTextNode;
import com.liferay.portal.parsers.creole.ast.LineNode;
import com.liferay.portal.parsers.creole.ast.ListNode;
import com.liferay.portal.parsers.creole.ast.NoWikiSectionNode;
import com.liferay.portal.parsers.creole.ast.OrderedListItemNode;
import com.liferay.portal.parsers.creole.ast.OrderedListNode;
import com.liferay.portal.parsers.creole.ast.ParagraphNode;
import com.liferay.portal.parsers.creole.ast.ScapedNode;
import com.liferay.portal.parsers.creole.ast.UnformattedTextNode;
import com.liferay.portal.parsers.creole.ast.UnorderedListItemNode;
import com.liferay.portal.parsers.creole.ast.UnorderedListNode;
import com.liferay.portal.parsers.creole.ast.WikiPageNode;
import com.liferay.portal.parsers.creole.ast.extension.TableOfContentsNode;
import com.liferay.portal.parsers.creole.ast.table.TableDataNode;
import com.liferay.portal.parsers.creole.ast.table.TableHeaderNode;
import com.liferay.portal.parsers.creole.ast.table.TableNode;
import com.liferay.portal.parsers.creole.visitor.ASTVisitor;
import com.liferay.portal.parsers.creole.visitor.impl.LinkNodeCollectorVisitor;
import java.util.List;
import java.util.Vector;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BaseASTVisitorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LinkNodeCollectorVisitor linkNodeCollectorVisitor0 = new LinkNodeCollectorVisitor();
      ForcedEndOfLineNode forcedEndOfLineNode0 = new ForcedEndOfLineNode();
      linkNodeCollectorVisitor0.visit(forcedEndOfLineNode0);
  }

  @Test
  public void test1()  throws Throwable  {
      LinkNodeCollectorVisitor linkNodeCollectorVisitor0 = new LinkNodeCollectorVisitor();
      CollectionNode collectionNode0 = new CollectionNode();
      TableHeaderNode tableHeaderNode0 = new TableHeaderNode(collectionNode0);
      linkNodeCollectorVisitor0.visit(tableHeaderNode0);
      assertEquals(0, tableHeaderNode0.getChildASTNodesCount());
  }

  @Test
  public void test2()  throws Throwable  {
      LinkNodeCollectorVisitor linkNodeCollectorVisitor0 = new LinkNodeCollectorVisitor();
      HorizontalNode horizontalNode0 = new HorizontalNode(964);
      linkNodeCollectorVisitor0.visit(horizontalNode0);
  }

  @Test
  public void test3()  throws Throwable  {
      LinkNodeCollectorVisitor linkNodeCollectorVisitor0 = new LinkNodeCollectorVisitor();
      TableNode tableNode0 = new TableNode();
      Vector<ASTNode> vector0 = new Vector<ASTNode>();
      vector0.add((ASTNode) tableNode0);
      CollectionNode collectionNode0 = new CollectionNode((List<ASTNode>) vector0);
      ItalicTextNode italicTextNode0 = new ItalicTextNode((ASTNode) collectionNode0);
      linkNodeCollectorVisitor0.visit((FormattedTextNode) italicTextNode0);
      assertNull(italicTextNode0.getContent());
  }

  @Test
  public void test4()  throws Throwable  {
      LinkNodeCollectorVisitor linkNodeCollectorVisitor0 = new LinkNodeCollectorVisitor();
      linkNodeCollectorVisitor0.visit((ScapedNode) null);
  }

  @Test
  public void test5()  throws Throwable  {
      LinkNodeCollectorVisitor linkNodeCollectorVisitor0 = new LinkNodeCollectorVisitor();
      WikiPageNode wikiPageNode0 = new WikiPageNode(0);
      ListNode listNode0 = new ListNode((BaseParentableNode) wikiPageNode0);
      linkNodeCollectorVisitor0.visit(listNode0);
      assertEquals(0, listNode0.getChildASTNodesCount());
  }

  @Test
  public void test6()  throws Throwable  {
      LinkNodeCollectorVisitor linkNodeCollectorVisitor0 = new LinkNodeCollectorVisitor();
      TableOfContentsNode tableOfContentsNode0 = new TableOfContentsNode();
      linkNodeCollectorVisitor0.visit(tableOfContentsNode0);
  }

  @Test
  public void test7()  throws Throwable  {
      LinkNodeCollectorVisitor linkNodeCollectorVisitor0 = new LinkNodeCollectorVisitor();
      linkNodeCollectorVisitor0.visit((NoWikiSectionNode) null);
  }

  @Test
  public void test8()  throws Throwable  {
      LinkNodeCollectorVisitor linkNodeCollectorVisitor0 = new LinkNodeCollectorVisitor();
      TableDataNode tableDataNode0 = new TableDataNode();
      UnformattedTextNode unformattedTextNode0 = new UnformattedTextNode(30);
      unformattedTextNode0.addChildASTNode((ASTNode) tableDataNode0);
      linkNodeCollectorVisitor0.visit(unformattedTextNode0);
      assertNull(unformattedTextNode0.getContent());
  }

  @Test
  public void test9()  throws Throwable  {
      LinkNodeCollectorVisitor linkNodeCollectorVisitor0 = new LinkNodeCollectorVisitor();
      HeadingNode headingNode0 = new HeadingNode((CollectionNode) null, 0);
      linkNodeCollectorVisitor0.visit(headingNode0);
      assertEquals(0, headingNode0.getChildASTNodesCount());
  }

  @Test
  public void test10()  throws Throwable  {
      LinkNodeCollectorVisitor linkNodeCollectorVisitor0 = new LinkNodeCollectorVisitor();
      TableNode tableNode0 = new TableNode();
      Vector<ASTNode> vector0 = new Vector<ASTNode>();
      CollectionNode collectionNode0 = new CollectionNode((List<ASTNode>) vector0);
      OrderedListItemNode orderedListItemNode0 = new OrderedListItemNode(0, (BaseParentableNode) tableNode0, collectionNode0);
      linkNodeCollectorVisitor0.visit(orderedListItemNode0);
      assertEquals(0, orderedListItemNode0.getChildASTNodesCount());
  }

  @Test
  public void test11()  throws Throwable  {
      LinkNodeCollectorVisitor linkNodeCollectorVisitor0 = new LinkNodeCollectorVisitor();
      WikiPageNode wikiPageNode0 = new WikiPageNode((-1076));
      linkNodeCollectorVisitor0.visit(wikiPageNode0);
      assertEquals(0, wikiPageNode0.getChildASTNodesCount());
  }

  @Test
  public void test12()  throws Throwable  {
      LinkNodeCollectorVisitor linkNodeCollectorVisitor0 = new LinkNodeCollectorVisitor();
      UnorderedListNode unorderedListNode0 = new UnorderedListNode();
      linkNodeCollectorVisitor0.visit(unorderedListNode0);
      assertEquals(0, unorderedListNode0.getChildASTNodesCount());
  }

  @Test
  public void test13()  throws Throwable  {
      LinkNodeCollectorVisitor linkNodeCollectorVisitor0 = new LinkNodeCollectorVisitor();
      UnorderedListItemNode unorderedListItemNode0 = new UnorderedListItemNode(0, (BaseParentableNode) null, (CollectionNode) null);
      linkNodeCollectorVisitor0.visit(unorderedListItemNode0);
      assertEquals(0, unorderedListItemNode0.getLevel());
  }

  @Test
  public void test14()  throws Throwable  {
      LinkNodeCollectorVisitor linkNodeCollectorVisitor0 = new LinkNodeCollectorVisitor();
      Vector<ASTNode> vector0 = new Vector<ASTNode>();
      CollectionNode collectionNode0 = new CollectionNode((List<ASTNode>) vector0);
      LineNode lineNode0 = new LineNode(collectionNode0);
      linkNodeCollectorVisitor0.visit(lineNode0);
      assertEquals(0, lineNode0.getChildASTNodesCount());
  }

  @Test
  public void test15()  throws Throwable  {
      LinkNodeCollectorVisitor linkNodeCollectorVisitor0 = new LinkNodeCollectorVisitor();
      ParagraphNode paragraphNode0 = new ParagraphNode();
      linkNodeCollectorVisitor0.visit(paragraphNode0);
      assertEquals(0, paragraphNode0.getChildASTNodesCount());
  }

  @Test
  public void test16()  throws Throwable  {
      LinkNodeCollectorVisitor linkNodeCollectorVisitor0 = new LinkNodeCollectorVisitor();
      LineNode lineNode0 = new LineNode();
      List<ASTNode> list0 = lineNode0.getChildASTNodes();
      CollectionNode collectionNode0 = new CollectionNode(list0);
      BoldTextNode boldTextNode0 = new BoldTextNode((ASTNode) collectionNode0);
      linkNodeCollectorVisitor0.visit(boldTextNode0);
      assertEquals(0, boldTextNode0.getChildASTNodesCount());
  }

  @Test
  public void test17()  throws Throwable  {
      BoldTextNode boldTextNode0 = new BoldTextNode((ASTNode) null);
      boldTextNode0.addChildASTNode((ASTNode) null);
      LinkNodeCollectorVisitor linkNodeCollectorVisitor0 = new LinkNodeCollectorVisitor();
      // Undeclared exception!
      try {
        boldTextNode0.accept((ASTVisitor) linkNodeCollectorVisitor0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test18()  throws Throwable  {
      LinkNodeCollectorVisitor linkNodeCollectorVisitor0 = new LinkNodeCollectorVisitor();
      TableNode tableNode0 = new TableNode();
      Vector<ASTNode> vector0 = new Vector<ASTNode>();
      vector0.add((ASTNode) tableNode0);
      CollectionNode collectionNode0 = new CollectionNode((List<ASTNode>) vector0);
      linkNodeCollectorVisitor0.visit(collectionNode0);
      assertEquals(1, collectionNode0.size());
  }

  @Test
  public void test19()  throws Throwable  {
      LinkNodeCollectorVisitor linkNodeCollectorVisitor0 = new LinkNodeCollectorVisitor();
      CollectionNode collectionNode0 = new CollectionNode();
      TableHeaderNode tableHeaderNode0 = new TableHeaderNode(collectionNode0);
      OrderedListNode orderedListNode0 = new OrderedListNode((BaseParentableNode) tableHeaderNode0, collectionNode0);
      FormattedTextNode formattedTextNode0 = new FormattedTextNode("H4>O\"");
      collectionNode0.add((ASTNode) formattedTextNode0);
      linkNodeCollectorVisitor0.visit(orderedListNode0);
      assertEquals(1, orderedListNode0.getChildASTNodesCount());
  }

  @Test
  public void test20()  throws Throwable  {
      LinkNodeCollectorVisitor linkNodeCollectorVisitor0 = new LinkNodeCollectorVisitor();
      ImageNode imageNode0 = new ImageNode(30);
      linkNodeCollectorVisitor0.visit(imageNode0);
      assertNull(imageNode0.getLink());
  }

  @Test
  public void test21()  throws Throwable  {
      LinkNodeCollectorVisitor linkNodeCollectorVisitor0 = new LinkNodeCollectorVisitor();
      Vector<ASTNode> vector0 = new Vector<ASTNode>();
      CollectionNode collectionNode0 = new CollectionNode((List<ASTNode>) vector0);
      ImageNode imageNode0 = new ImageNode(collectionNode0, "biD'\"yH+-n1F{%i64\"");
      linkNodeCollectorVisitor0.visit(imageNode0);
      assertEquals(true, imageNode0.hasAltCollectionNode());
  }

  @Test
  public void test22()  throws Throwable  {
      LinkNodeCollectorVisitor linkNodeCollectorVisitor0 = new LinkNodeCollectorVisitor();
      ItalicTextNode italicTextNode0 = new ItalicTextNode((ASTNode) null);
      linkNodeCollectorVisitor0.visit(italicTextNode0);
      assertEquals(0, italicTextNode0.getChildASTNodesCount());
  }

  @Test
  public void test23()  throws Throwable  {
      LinkNodeCollectorVisitor linkNodeCollectorVisitor0 = new LinkNodeCollectorVisitor();
      TableNode tableNode0 = new TableNode();
      Vector<ASTNode> vector0 = new Vector<ASTNode>();
      vector0.add((ASTNode) tableNode0);
      CollectionNode collectionNode0 = new CollectionNode((List<ASTNode>) vector0);
      ItalicTextNode italicTextNode0 = new ItalicTextNode((ASTNode) collectionNode0);
      linkNodeCollectorVisitor0.visit(italicTextNode0);
      assertNull(italicTextNode0.getContent());
  }

  @Test
  public void test24()  throws Throwable  {
      LinkNodeCollectorVisitor linkNodeCollectorVisitor0 = new LinkNodeCollectorVisitor();
      LineNode lineNode0 = new LineNode();
      List<ASTNode> list0 = lineNode0.getChildASTNodes();
      CollectionNode collectionNode0 = new CollectionNode(list0);
      UnformattedTextNode unformattedTextNode0 = new UnformattedTextNode((ASTNode) collectionNode0);
      linkNodeCollectorVisitor0.visit(unformattedTextNode0);
      assertNull(unformattedTextNode0.getContent());
  }

  @Test
  public void test25()  throws Throwable  {
      LinkNodeCollectorVisitor linkNodeCollectorVisitor0 = new LinkNodeCollectorVisitor();
      linkNodeCollectorVisitor0.traverse((List<ASTNode>) null);
  }
}
