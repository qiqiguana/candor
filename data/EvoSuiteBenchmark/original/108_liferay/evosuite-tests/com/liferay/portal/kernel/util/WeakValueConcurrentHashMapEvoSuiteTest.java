/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.util.WeakValueConcurrentHashMap;
import java.io.Serializable;
import java.lang.ref.Reference;
import java.lang.ref.ReferenceQueue;
import java.lang.ref.SoftReference;
import java.lang.ref.WeakReference;
import java.util.Collection;
import java.util.Comparator;
import java.util.Map;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.ConcurrentSkipListMap;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class WeakValueConcurrentHashMapEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      WeakValueConcurrentHashMap<Map.Entry<Object, ConcurrentMap<Object, Serializable>>, Reference<ConcurrentMap<Integer, Serializable>>> weakValueConcurrentHashMap0 = new WeakValueConcurrentHashMap<Map.Entry<Object, ConcurrentMap<Object, Serializable>>, Reference<ConcurrentMap<Integer, Serializable>>>();
      WeakValueConcurrentHashMap<Object, Object> weakValueConcurrentHashMap1 = new WeakValueConcurrentHashMap<Object, Object>((Map<?, ?>) weakValueConcurrentHashMap0);
      assertEquals(true, weakValueConcurrentHashMap1.isEmpty());
  }

  @Test
  public void test1()  throws Throwable  {
      WeakValueConcurrentHashMap<Reference<Integer>, Integer> weakValueConcurrentHashMap0 = new WeakValueConcurrentHashMap<Reference<Integer>, Integer>(1218, 1218, 1218);
      WeakValueConcurrentHashMap<Serializable, Object> weakValueConcurrentHashMap1 = new WeakValueConcurrentHashMap<Serializable, Object>();
      WeakValueConcurrentHashMap<Object, Object> weakValueConcurrentHashMap2 = new WeakValueConcurrentHashMap<Object, Object>();
      ConcurrentSkipListMap<Reference<Object>, Map.Entry<Serializable, Object>> concurrentSkipListMap0 = new ConcurrentSkipListMap<Reference<Object>, Map.Entry<Serializable, Object>>((Comparator<? super Reference<Object>>) null);
      ReferenceQueue<Serializable> referenceQueue0 = new ReferenceQueue<Serializable>();
      WeakReference<Serializable> weakReference0 = new WeakReference<Serializable>((Serializable) concurrentSkipListMap0, (ReferenceQueue<? super Serializable>) referenceQueue0);
      // Undeclared exception!
      try {
        weakValueConcurrentHashMap1.replace((Serializable) weakValueConcurrentHashMap0, (Object) weakValueConcurrentHashMap2, (Object) weakReference0);
        fail("Expecting exception: NoClassDefFoundError");
      } catch(NoClassDefFoundError e) {
        /*
         * Could not initialize class com.liferay.portal.kernel.memory.FinalizeManager
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      WeakValueConcurrentHashMap<ConcurrentMap<String, Object>, Reference<Object>> weakValueConcurrentHashMap0 = new WeakValueConcurrentHashMap<ConcurrentMap<String, Object>, Reference<Object>>();
      int int0 = weakValueConcurrentHashMap0.size();
      assertEquals(0, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      WeakValueConcurrentHashMap<Integer, Map.Entry<String, Object>> weakValueConcurrentHashMap0 = new WeakValueConcurrentHashMap<Integer, Map.Entry<String, Object>>(1);
      weakValueConcurrentHashMap0.clear();
      assertEquals(0, weakValueConcurrentHashMap0.size());
  }

  @Test
  public void test4()  throws Throwable  {
      ConcurrentHashMap<Object, Integer> concurrentHashMap0 = new ConcurrentHashMap<Object, Integer>();
      WeakValueConcurrentHashMap<Object, Integer> weakValueConcurrentHashMap0 = new WeakValueConcurrentHashMap<Object, Integer>((Map<?, ? extends Integer>) concurrentHashMap0);
      TreeMap<Object, Serializable> treeMap0 = new TreeMap<Object, Serializable>();
      SoftReference<Object> softReference0 = new SoftReference<Object>((Object) treeMap0);
      boolean boolean0 = weakValueConcurrentHashMap0.containsValue((Object) softReference0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      WeakValueConcurrentHashMap<Serializable, ConcurrentMap<Serializable, String>> weakValueConcurrentHashMap0 = new WeakValueConcurrentHashMap<Serializable, ConcurrentMap<Serializable, String>>(1);
      assertNotNull(weakValueConcurrentHashMap0);
      
      boolean boolean0 = weakValueConcurrentHashMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      WeakValueConcurrentHashMap<Serializable, Serializable> weakValueConcurrentHashMap0 = new WeakValueConcurrentHashMap<Serializable, Serializable>(1, 1, 1);
      Serializable serializable0 = weakValueConcurrentHashMap0.get((Object) "{}");
      assertNull(serializable0);
  }

  @Test
  public void test7()  throws Throwable  {
      WeakValueConcurrentHashMap<Serializable, Reference<Object>> weakValueConcurrentHashMap0 = new WeakValueConcurrentHashMap<Serializable, Reference<Object>>(1894);
      Reference<Object> reference0 = weakValueConcurrentHashMap0.remove((Object) "searchEngine=null");
      assertNull(reference0);
  }

  @Test
  public void test8()  throws Throwable  {
      WeakValueConcurrentHashMap<Map.Entry<Serializable, Serializable>, Map.Entry<Integer, String>> weakValueConcurrentHashMap0 = new WeakValueConcurrentHashMap<Map.Entry<Serializable, Serializable>, Map.Entry<Integer, String>>(0);
      Collection<Map.Entry<Integer, String>> collection0 = weakValueConcurrentHashMap0.values();
      assertEquals(0, collection0.size());
  }
}
