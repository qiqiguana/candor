/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.security.jaas;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.security.jaas.PortalGroup;
import java.security.Principal;
import java.util.Enumeration;
import jcifs.smb.NtlmPasswordAuthentication;
import org.apache.jackrabbit.core.security.principal.EveryonePrincipal;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PortalGroupEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      PortalGroup portalGroup0 = new PortalGroup("The list of servers for this workgroup is not currently available.");
      Enumeration<Principal> enumeration0 = portalGroup0.members();
      assertEquals(false, enumeration0.hasMoreElements());
  }

  @Test
  public void test1()  throws Throwable  {
      PortalGroup portalGroup0 = new PortalGroup((String) null);
      byte[] byteArray0 = new byte[3];
      NtlmPasswordAuthentication ntlmPasswordAuthentication0 = new NtlmPasswordAuthentication("The specified local group does not exist.", "The specified local group does not exist.", byteArray0, byteArray0, byteArray0);
      boolean boolean0 = portalGroup0.addMember((Principal) ntlmPasswordAuthentication0);
      boolean boolean1 = portalGroup0.addMember((Principal) ntlmPasswordAuthentication0);
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      PortalGroup portalGroup0 = new PortalGroup((String) null);
      byte[] byteArray0 = new byte[3];
      NtlmPasswordAuthentication ntlmPasswordAuthentication0 = new NtlmPasswordAuthentication("The specified local group does not exist.", "The specified local group does not exist.", byteArray0, byteArray0, byteArray0);
      boolean boolean0 = portalGroup0.addMember((Principal) ntlmPasswordAuthentication0);
      EveryonePrincipal everyonePrincipal0 = EveryonePrincipal.getInstance();
      boolean boolean1 = portalGroup0.isMember((Principal) everyonePrincipal0);
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      PortalGroup portalGroup0 = new PortalGroup("D{dlp(XWhx");
      PortalGroup portalGroup1 = new PortalGroup("D{dlp(XWhx");
      boolean boolean0 = portalGroup0.addMember((Principal) portalGroup1);
      EveryonePrincipal everyonePrincipal0 = EveryonePrincipal.getInstance();
      boolean boolean1 = portalGroup0.isMember((Principal) everyonePrincipal0);
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      PortalGroup portalGroup0 = new PortalGroup("D{dlp(XWhx");
      PortalGroup portalGroup1 = new PortalGroup("D{dlp(XWhx");
      portalGroup0.addMember((Principal) portalGroup1);
      EveryonePrincipal everyonePrincipal0 = EveryonePrincipal.getInstance();
      boolean boolean0 = portalGroup1.addMember((Principal) everyonePrincipal0);
      assertEquals(true, boolean0);
      
      boolean boolean1 = portalGroup0.isMember((Principal) everyonePrincipal0);
      assertEquals(true, boolean1);
  }

  @Test
  public void test5()  throws Throwable  {
      PortalGroup portalGroup0 = new PortalGroup("");
      EveryonePrincipal everyonePrincipal0 = EveryonePrincipal.getInstance();
      boolean boolean0 = portalGroup0.removeMember((Principal) everyonePrincipal0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      PortalGroup portalGroup0 = new PortalGroup("");
      EveryonePrincipal everyonePrincipal0 = EveryonePrincipal.getInstance();
      boolean boolean0 = portalGroup0.addMember((Principal) everyonePrincipal0);
      assertEquals(true, boolean0);
      
      boolean boolean1 = portalGroup0.removeMember((Principal) everyonePrincipal0);
      assertEquals(true, boolean1);
  }
}
