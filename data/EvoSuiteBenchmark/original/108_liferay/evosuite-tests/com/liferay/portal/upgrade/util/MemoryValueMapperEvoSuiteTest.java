/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.upgrade.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.upgrade.StagnantRowException;
import com.liferay.portal.upgrade.util.MemoryValueMapper;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MemoryValueMapperEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>();
      MemoryValueMapper memoryValueMapper0 = new MemoryValueMapper((Set<Object>) hashSet0);
      Map<Object, Object> map0 = memoryValueMapper0.getMap();
      assertEquals(true, map0.isEmpty());
  }

  @Test
  public void test1()  throws Throwable  {
      MemoryValueMapper memoryValueMapper0 = new MemoryValueMapper();
      Iterator<Object> iterator0 = memoryValueMapper0.iterator();
      assertEquals(false, iterator0.hasNext());
  }

  @Test
  public void test2()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      MemoryValueMapper memoryValueMapper0 = new MemoryValueMapper((Set<Object>) linkedHashSet0);
      int int0 = memoryValueMapper0.size();
      assertEquals(0, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      MemoryValueMapper memoryValueMapper0 = new MemoryValueMapper((Set<Object>) linkedHashSet0);
      Object object0 = new Object();
      memoryValueMapper0.appendException(object0);
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
  }

  @Test
  public void test4()  throws Throwable  {
      MemoryValueMapper memoryValueMapper0 = new MemoryValueMapper();
      memoryValueMapper0.mapValue((Object) "[]", (Object) "[]");
      memoryValueMapper0.getNewValue((Object) "[]");
      assertEquals(1, memoryValueMapper0.size());
  }

  @Test
  public void test5()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      MemoryValueMapper memoryValueMapper0 = new MemoryValueMapper((Set<Object>) linkedHashSet0);
      try {
        memoryValueMapper0.getNewValue((Object) null);
        fail("Expecting exception: StagnantRowException");
      } catch(StagnantRowException e) {
        /*
         * null
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      treeSet0.add((Object) "[]");
      MemoryValueMapper memoryValueMapper0 = new MemoryValueMapper((Set<Object>) treeSet0);
      String string0 = (String)memoryValueMapper0.getNewValue((Object) "[]");
      assertEquals("[]", string0);
  }
}
