/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.spring.transaction;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.spring.transaction.TransactionInterceptor;
import org.junit.BeforeClass;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.interceptor.DefaultTransactionAttribute;
import org.springframework.transaction.interceptor.MatchAlwaysTransactionAttributeSource;
import org.springframework.transaction.interceptor.TransactionAttribute;
import org.springframework.transaction.interceptor.TransactionAttributeSource;
import org.springframework.transaction.jta.OC4JJtaTransactionManager;
import org.springframework.transaction.support.SimpleTransactionStatus;

@RunWith(EvoSuiteRunner.class)
public class TransactionInterceptorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      TransactionInterceptor transactionInterceptor0 = new TransactionInterceptor();
      MatchAlwaysTransactionAttributeSource matchAlwaysTransactionAttributeSource0 = new MatchAlwaysTransactionAttributeSource();
      transactionInterceptor0.setTransactionAttributeSource((TransactionAttributeSource) matchAlwaysTransactionAttributeSource0);
      assertEquals("org.springframework.transaction.interceptor.MatchAlwaysTransactionAttributeSource: PROPAGATION_REQUIRED,ISOLATION_DEFAULT", matchAlwaysTransactionAttributeSource0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      TransactionInterceptor transactionInterceptor0 = new TransactionInterceptor();
      OC4JJtaTransactionManager oC4JJtaTransactionManager0 = new OC4JJtaTransactionManager();
      transactionInterceptor0.setPlatformTransactionManager((PlatformTransactionManager) oC4JJtaTransactionManager0);
  }

  @Test
  public void test2()  throws Throwable  {
      TransactionInterceptor transactionInterceptor0 = new TransactionInterceptor();
      DefaultTransactionAttribute defaultTransactionAttribute0 = new DefaultTransactionAttribute((-50));
      SimpleTransactionStatus simpleTransactionStatus0 = new SimpleTransactionStatus(false);
      try {
        transactionInterceptor0.processThrowable((Throwable) null, (TransactionAttribute) defaultTransactionAttribute0, (TransactionStatus) simpleTransactionStatus0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      TransactionInterceptor transactionInterceptor0 = new TransactionInterceptor();
      DefaultTransactionAttribute defaultTransactionAttribute0 = new DefaultTransactionAttribute(0);
      SimpleTransactionStatus simpleTransactionStatus0 = new SimpleTransactionStatus(true);
      try {
        transactionInterceptor0.processThrowable((Throwable) null, (TransactionAttribute) defaultTransactionAttribute0, (TransactionStatus) simpleTransactionStatus0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * -1
         */
      }
  }
}
