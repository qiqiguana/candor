/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.dao.jdbc;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.dao.jdbc.OutputBlob;
import interbase.interclient.Blob;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.sql.SQLException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class OutputBlobEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      OutputBlob outputBlob0 = new OutputBlob((InputStream) pipedInputStream0, 0L);
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try {
        outputBlob0.setBytes(0L, byteArray0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(24);
      OutputBlob outputBlob0 = new OutputBlob((InputStream) pipedInputStream0, (long) 24);
      assertNotNull(outputBlob0);
      
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try {
        outputBlob0.position(byteArray0, (long) (byte)0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1944);
      OutputBlob outputBlob0 = new OutputBlob((InputStream) pipedInputStream0, (long) 1944);
      assertNotNull(outputBlob0);
      
      // Undeclared exception!
      try {
        outputBlob0.setBinaryStream((long) 1944);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1944);
      OutputBlob outputBlob0 = new OutputBlob((InputStream) pipedInputStream0, (long) 1944);
      assertNotNull(outputBlob0);
      
      long long0 = outputBlob0.length();
      assertEquals(1944L, long0);
  }

  @Test
  public void test4()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(157);
      OutputBlob outputBlob0 = new OutputBlob((InputStream) pipedInputStream0, (long) 157);
      assertNotNull(outputBlob0);
      
      PipedInputStream pipedInputStream1 = (PipedInputStream)outputBlob0.getBinaryStream();
      assertNotNull(pipedInputStream1);
      assertEquals(157L, outputBlob0.length());
  }

  @Test
  public void test5()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1944);
      OutputBlob outputBlob0 = new OutputBlob((InputStream) pipedInputStream0, (long) 1944);
      assertNotNull(outputBlob0);
      
      // Undeclared exception!
      try {
        outputBlob0.truncate((long) 1944);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-363), (-363));
      OutputBlob outputBlob0 = new OutputBlob((InputStream) byteArrayInputStream0, (long) (byte)0);
      // Undeclared exception!
      try {
        outputBlob0.setBytes((long) (byte)0, byteArray0, (-363), (-363));
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-363), (-363));
      OutputBlob outputBlob0 = new OutputBlob((InputStream) byteArrayInputStream0, (long) (byte)0);
      outputBlob0.free();
      assertEquals(0L, outputBlob0.length());
  }

  @Test
  public void test8()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(157);
      OutputBlob outputBlob0 = new OutputBlob((InputStream) pipedInputStream0, (long) 157);
      assertNotNull(outputBlob0);
      
      Blob blob0 = new Blob();
      // Undeclared exception!
      try {
        outputBlob0.position((java.sql.Blob) blob0, (long) (byte)116);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      OutputBlob outputBlob0 = null;
      try {
        outputBlob0 = new OutputBlob((InputStream) null, (-1702L));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Input stream is null
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      FileDescriptor fileDescriptor0 = FileDescriptor.err;
      FileInputStream fileInputStream0 = new FileInputStream(fileDescriptor0);
      OutputBlob outputBlob0 = null;
      try {
        outputBlob0 = new OutputBlob((InputStream) fileInputStream0, (-1775L));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Length is less than 0
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      FileDescriptor fileDescriptor0 = FileDescriptor.in;
      FileInputStream fileInputStream0 = new FileInputStream(fileDescriptor0);
      OutputBlob outputBlob0 = new OutputBlob((InputStream) fileInputStream0, 3L);
      assertNotNull(outputBlob0);
      
      try {
        outputBlob0.getBinaryStream(3L, 3L);
        fail("Expecting exception: SQLException");
      } catch(SQLException e) {
        /*
         * Invalid range
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      FileDescriptor fileDescriptor0 = FileDescriptor.in;
      FileInputStream fileInputStream0 = new FileInputStream(fileDescriptor0);
      OutputBlob outputBlob0 = new OutputBlob((InputStream) fileInputStream0, 1159L);
      assertNotNull(outputBlob0);
      
      try {
        outputBlob0.getBinaryStream((-107L), 1003L);
        fail("Expecting exception: SQLException");
      } catch(SQLException e) {
        /*
         * Position is less than 1
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      OutputBlob outputBlob0 = new OutputBlob((InputStream) pipedInputStream0, 1636L);
      assertNotNull(outputBlob0);
      
      try {
        outputBlob0.getBinaryStream(1284652111739L, (-1580L));
        fail("Expecting exception: SQLException");
      } catch(SQLException e) {
        /*
         * Invalid range
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      OutputBlob outputBlob0 = new OutputBlob((InputStream) byteArrayInputStream0, (long) (byte)9);
      // Undeclared exception!
      try {
        outputBlob0.getBinaryStream((long) (byte)9, (-938L));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Length is less than 0
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      OutputBlob outputBlob0 = new OutputBlob((InputStream) pipedInputStream0, 0L);
      byte[] byteArray0 = outputBlob0.getBytes(1284652111721L, (int) (byte)0);
      assertNotNull(byteArray0);
  }

  @Test
  public void test16()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1926);
      OutputBlob outputBlob0 = new OutputBlob((InputStream) pipedInputStream0, (long) 1926);
      assertNotNull(outputBlob0);
      
      try {
        outputBlob0.getBytes((-1L), 1926);
        fail("Expecting exception: SQLException");
      } catch(SQLException e) {
        /*
         * Position is less than 1
         */
      }
  }

  @Test
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 564, (int) (byte)0);
      OutputBlob outputBlob0 = new OutputBlob((InputStream) byteArrayInputStream0, 185L);
      assertNotNull(outputBlob0);
      
      try {
        outputBlob0.getBytes(1309L, (-552));
        fail("Expecting exception: SQLException");
      } catch(SQLException e) {
        /*
         * Length is less than 0
         */
      }
  }

  @Test
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      OutputBlob outputBlob0 = new OutputBlob((InputStream) byteArrayInputStream0, (long) (byte)9);
      outputBlob0.getBytes((long) (byte)9, 164);
      assertEquals(-1, byteArrayInputStream0.read());
      assertEquals(0, byteArrayInputStream0.available());
  }
}
