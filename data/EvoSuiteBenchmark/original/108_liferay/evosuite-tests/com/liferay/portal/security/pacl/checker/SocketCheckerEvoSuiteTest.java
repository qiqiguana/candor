/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.security.pacl.checker;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.security.pacl.InactivePACLPolicy;
import com.liferay.portal.security.pacl.PACLPolicy;
import com.liferay.portal.security.pacl.checker.SocketChecker;
import java.io.ObjectStreamConstants;
import java.io.SerializablePermission;
import java.security.Permission;
import java.security.SecurityPermission;
import java.util.Properties;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SocketCheckerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SocketChecker socketChecker0 = new SocketChecker();
      boolean boolean0 = socketChecker0.hasListen((-1066));
      assertEquals(true, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      SocketChecker socketChecker0 = new SocketChecker();
      SerializablePermission serializablePermission0 = ObjectStreamConstants.SUBCLASS_IMPLEMENTATION_PERMISSION;
      socketChecker0.checkPermission((Permission) serializablePermission0);
      assertEquals("(java.io.SerializablePermission enableSubclassImplementation)", serializablePermission0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      SocketChecker socketChecker0 = new SocketChecker();
      SecurityPermission securityPermission0 = new SecurityPermission(">:][E.7", "<*");
      socketChecker0.checkPermission((Permission) securityPermission0);
      assertEquals("", securityPermission0.getActions());
  }

  @Test
  public void test3()  throws Throwable  {
      SocketChecker socketChecker0 = new SocketChecker();
      boolean boolean0 = socketChecker0.hasAccept(" $voiG2Dt+#'Qu:.RM", (-756));
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      SocketChecker socketChecker0 = new SocketChecker();
      boolean boolean0 = socketChecker0.hasConnect("27", (-385));
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      SocketChecker socketChecker0 = new SocketChecker();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Properties properties0 = new Properties();
      InactivePACLPolicy inactivePACLPolicy0 = new InactivePACLPolicy("M%`GmQ", classLoader0, properties0);
      socketChecker0.setPACLPolicy((PACLPolicy) inactivePACLPolicy0);
      socketChecker0.afterPropertiesSet();
      assertEquals("M%`GmQ", socketChecker0.getServletContextName());
  }

  @Test
  public void test6()  throws Throwable  {
      SocketChecker socketChecker0 = new SocketChecker();
      socketChecker0.initHostsAndPorts("I", true);
  }

  @Test
  public void test7()  throws Throwable  {
      SocketChecker socketChecker0 = new SocketChecker();
      socketChecker0.initHostsAndPorts("o&=:0m)#<Amwlf?M_", false);
  }

  @Test
  public void test8()  throws Throwable  {
      SocketChecker socketChecker0 = new SocketChecker();
      socketChecker0.initListenPorts("V1wy^aT:V9F&#-fPSmf");
  }

  @Test
  public void test9()  throws Throwable  {
      SocketChecker socketChecker0 = new SocketChecker();
      socketChecker0.initListenPorts("27");
  }

  @Test
  public void test10()  throws Throwable  {
      SocketChecker socketChecker0 = new SocketChecker();
      socketChecker0.initListenPorts(")]WX)g8^(0NbY2Dj~#");
  }
}
