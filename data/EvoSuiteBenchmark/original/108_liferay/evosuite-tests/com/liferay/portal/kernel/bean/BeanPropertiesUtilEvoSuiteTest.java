/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.bean;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.bean.BeanPropertiesImpl;
import com.liferay.portal.kernel.bean.BeanProperties;
import com.liferay.portal.kernel.bean.BeanPropertiesUtil;
import java.util.Locale;
import javax.servlet.http.HttpServletRequest;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BeanPropertiesUtilEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BeanPropertiesUtil.copyProperties((Object) null, (Object) null);
  }

  @Test
  public void test1()  throws Throwable  {
      BeanPropertiesUtil.getDouble((Object) null, "", 1.0E-6);
  }

  @Test
  public void test2()  throws Throwable  {
      Class<?> class0 = BeanPropertiesUtil.class;
      BeanPropertiesUtil.getObjectType((Object) null, "Lv,\"@_S]#C", class0);
  }

  @Test
  public void test3()  throws Throwable  {
      BeanPropertiesUtil.getByte((Object) null, "");
  }

  @Test
  public void test4()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      BeanPropertiesUtil.getObject((Object) locale0, "4x", (Object) locale0);
  }

  @Test
  public void test5()  throws Throwable  {
      BeanPropertiesUtil.getInteger((Object) null, "");
  }

  @Test
  public void test6()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      BeanPropertiesUtil.getInteger((Object) locale0, "4x", (-846));
  }

  @Test
  public void test7()  throws Throwable  {
      String[] stringArray0 = new String[2];
      BeanPropertiesUtil.copyProperties((Object) null, (Object) null, stringArray0);
  }

  @Test
  public void test8()  throws Throwable  {
      BeanPropertiesUtil.getShort((Object) null, "Lv,\"@_S]#C", (short)0);
  }

  @Test
  public void test9()  throws Throwable  {
      BeanPropertiesUtil.getObjectTypeSilent((Object) null, "l%G{d");
  }

  @Test
  public void test10()  throws Throwable  {
      BeanPropertiesUtil.getString((Object) "zho", "YB@(7", "");
  }

  @Test
  public void test11()  throws Throwable  {
      BeanPropertiesUtil.getLongSilent((Object) null, "Yx/x");
  }

  @Test
  public void test12()  throws Throwable  {
      Class<?> class0 = BeanPropertiesUtil.class;
      BeanPropertiesUtil.getObjectTypeSilent((Object) null, "", class0);
  }

  @Test
  public void test13()  throws Throwable  {
      BeanPropertiesUtil.getBooleanSilent((Object) null, "", true);
  }

  @Test
  public void test14()  throws Throwable  {
      BeanPropertiesUtil.getShortSilent((Object) null, "I1 ]1BV,AyXl^udJ;HG");
  }

  @Test
  public void test15()  throws Throwable  {
      BeanPropertiesUtil.getString((Object) null, "Day");
  }

  @Test
  public void test16()  throws Throwable  {
      BeanPropertiesUtil beanPropertiesUtil0 = new BeanPropertiesUtil();
      BeanPropertiesImpl beanPropertiesImpl0 = new BeanPropertiesImpl();
      beanPropertiesUtil0.setBeanProperties((BeanProperties) beanPropertiesImpl0);
  }

  @Test
  public void test17()  throws Throwable  {
      Object object0 = BeanPropertiesUtil.getObjectSilent((Object) null, "Lv,\"@_S]#C", (Object) null);
      assertNull(object0);
  }

  @Test
  public void test18()  throws Throwable  {
      Object object0 = new Object();
      BeanPropertiesUtil.setProperty(object0, "", object0);
  }

  @Test
  public void test19()  throws Throwable  {
      float float0 = BeanPropertiesUtil.getFloatSilent((Object) null, "I1 ]1BV,AyXl^udJ;HG");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test20()  throws Throwable  {
      Object object0 = BeanPropertiesUtil.getObjectSilent((Object) null, "&");
      assertNull(object0);
  }

  @Test
  public void test21()  throws Throwable  {
      float float0 = BeanPropertiesUtil.getFloat((Object) null, "", 534.26605F);
      assertEquals(534.26605F, float0, 0.01F);
  }

  @Test
  public void test22()  throws Throwable  {
      Class<?> class0 = BeanPropertiesUtil.class;
      BeanPropertiesUtil.copyProperties((Object) null, (Object) null, class0);
  }

  @Test
  public void test23()  throws Throwable  {
      short short0 = BeanPropertiesUtil.getShortSilent((Object) null, "", (short) (-649));
      assertEquals((short) (-649), short0);
  }

  @Test
  public void test24()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      int int0 = BeanPropertiesUtil.getIntegerSilent((Object) locale0, "4x");
      assertEquals(0, int0);
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = BeanPropertiesUtil.getStringSilent((Object) null, "I1 ]1BV,AyXl^udJ;HG", "I1 ]1BV,AyXl^udJ;HG");
      assertEquals("I1 ]1BV,AyXl^udJ;HG", string0);
  }

  @Test
  public void test26()  throws Throwable  {
      byte byte0 = BeanPropertiesUtil.getByteSilent((Object) null, "zho", (byte)18);
      assertEquals((byte)18, byte0);
  }

  @Test
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try {
        BeanPropertiesUtil.setProperties((Object) null, (HttpServletRequest) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test28()  throws Throwable  {
      long long0 = BeanPropertiesUtil.getLongSilent((Object) null, "Day", 669L);
      assertEquals(669L, long0);
  }

  @Test
  public void test29()  throws Throwable  {
      double double0 = BeanPropertiesUtil.getDoubleSilent((Object) null, "");
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test30()  throws Throwable  {
      boolean boolean0 = BeanPropertiesUtil.getBoolean((Object) "Chine", "Chine", true);
      assertEquals(true, boolean0);
  }

  @Test
  public void test31()  throws Throwable  {
      byte byte0 = BeanPropertiesUtil.getByteSilent((Object) null, "");
      assertEquals((byte)0, byte0);
  }

  @Test
  public void test32()  throws Throwable  {
      double double0 = BeanPropertiesUtil.getDoubleSilent((Object) null, "Yx/x", (double) 0L);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test33()  throws Throwable  {
      int int0 = BeanPropertiesUtil.getIntegerSilent((Object) "I1 ]1BV,AyXl^udJ;HG", "I1 ]1BV,AyXl^udJ;HG", 1);
      assertEquals(1, int0);
  }

  @Test
  public void test34()  throws Throwable  {
      short short0 = BeanPropertiesUtil.getShort((Object) null, "");
      assertEquals((short)0, short0);
  }

  @Test
  public void test35()  throws Throwable  {
      boolean boolean0 = BeanPropertiesUtil.getBoolean((Object) null, "");
      assertEquals(false, boolean0);
  }

  @Test
  public void test36()  throws Throwable  {
      String string0 = BeanPropertiesUtil.getStringSilent((Object) null, "zho");
      assertEquals("", string0);
  }

  @Test
  public void test37()  throws Throwable  {
      Class<?> class0 = BeanPropertiesUtil.getObjectType((Object) null, "");
      assertNull(class0);
  }

  @Test
  public void test38()  throws Throwable  {
      long long0 = BeanPropertiesUtil.getLong((Object) null, "I1 ]1BV,AyXl^udJ;HG", (-1L));
      assertEquals((-1L), long0);
  }

  @Test
  public void test39()  throws Throwable  {
      float float0 = BeanPropertiesUtil.getFloat((Object) null, "");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test40()  throws Throwable  {
      long long0 = BeanPropertiesUtil.getLong((Object) null, "/");
      assertEquals(0L, long0);
  }

  @Test
  public void test41()  throws Throwable  {
      float float0 = BeanPropertiesUtil.getFloatSilent((Object) null, "zho", (float) (byte)31);
      assertEquals(31.0F, float0, 0.01F);
  }

  @Test
  public void test42()  throws Throwable  {
      byte byte0 = BeanPropertiesUtil.getByte((Object) null, "", (byte)21);
      assertEquals((byte)21, byte0);
  }

  @Test
  public void test43()  throws Throwable  {
      double double0 = BeanPropertiesUtil.getDouble((Object) null, "");
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test44()  throws Throwable  {
      boolean boolean0 = BeanPropertiesUtil.getBooleanSilent((Object) null, "Day");
      assertEquals(false, boolean0);
  }

  @Test
  public void test45()  throws Throwable  {
      Object object0 = BeanPropertiesUtil.getObject((Object) null, "&");
      assertNull(object0);
  }
}
