/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.io.unsync;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.io.unsync.UnsyncCharArrayWriter;
import de.schlichtherle.nio.charset.IBM437Charset;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.Writer;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.UnsupportedCharsetException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class UnsyncCharArrayWriterEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      UnsyncCharArrayWriter unsyncCharArrayWriter0 = new UnsyncCharArrayWriter();
      assertNotNull(unsyncCharArrayWriter0);
      
      unsyncCharArrayWriter0.reset();
      assertEquals(0, unsyncCharArrayWriter0.size());
      assertEquals("", unsyncCharArrayWriter0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      UnsyncCharArrayWriter unsyncCharArrayWriter0 = new UnsyncCharArrayWriter();
      assertNotNull(unsyncCharArrayWriter0);
      
      String string0 = unsyncCharArrayWriter0.toString();
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      UnsyncCharArrayWriter unsyncCharArrayWriter0 = new UnsyncCharArrayWriter();
      unsyncCharArrayWriter0.close();
      assertEquals(0, unsyncCharArrayWriter0.size());
  }

  @Test
  public void test3()  throws Throwable  {
      UnsyncCharArrayWriter unsyncCharArrayWriter0 = new UnsyncCharArrayWriter();
      assertNotNull(unsyncCharArrayWriter0);
      
      CharBuffer charBuffer0 = unsyncCharArrayWriter0.toCharBuffer();
      assertEquals(32, charBuffer0.capacity());
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.limit());
  }

  @Test
  public void test4()  throws Throwable  {
      UnsyncCharArrayWriter unsyncCharArrayWriter0 = new UnsyncCharArrayWriter();
      assertNotNull(unsyncCharArrayWriter0);
      
      int int0 = unsyncCharArrayWriter0.size();
      assertEquals(0, int0);
  }

  @Test
  public void test5()  throws Throwable  {
      UnsyncCharArrayWriter unsyncCharArrayWriter0 = new UnsyncCharArrayWriter();
      unsyncCharArrayWriter0.flush();
      assertEquals("", unsyncCharArrayWriter0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      UnsyncCharArrayWriter unsyncCharArrayWriter0 = new UnsyncCharArrayWriter();
      assertNotNull(unsyncCharArrayWriter0);
      
      char[] charArray0 = new char[9];
      unsyncCharArrayWriter0.write(charArray0);
      assertEquals(9, unsyncCharArrayWriter0.size());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", unsyncCharArrayWriter0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      UnsyncCharArrayWriter unsyncCharArrayWriter0 = new UnsyncCharArrayWriter();
      assertNotNull(unsyncCharArrayWriter0);
      
      UnsyncCharArrayWriter unsyncCharArrayWriter1 = (UnsyncCharArrayWriter)unsyncCharArrayWriter0.append('Z');
      assertEquals(1, unsyncCharArrayWriter0.size());
      assertEquals("Z", unsyncCharArrayWriter1.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      UnsyncCharArrayWriter unsyncCharArrayWriter0 = new UnsyncCharArrayWriter();
      assertNotNull(unsyncCharArrayWriter0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PrintWriter printWriter0 = new PrintWriter((OutputStream) byteArrayOutputStream0);
      int int0 = unsyncCharArrayWriter0.writeTo((Writer) printWriter0);
      assertEquals(0, int0);
      assertEquals("", byteArrayOutputStream0.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      UnsyncCharArrayWriter unsyncCharArrayWriter0 = new UnsyncCharArrayWriter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try {
        unsyncCharArrayWriter0.writeTo((OutputStream) byteArrayOutputStream0, "D");
        fail("Expecting exception: UnsupportedCharsetException");
      } catch(UnsupportedCharsetException e) {
        /*
         * D
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      UnsyncCharArrayWriter unsyncCharArrayWriter0 = new UnsyncCharArrayWriter(173);
      assertNotNull(unsyncCharArrayWriter0);
      
      UnsyncCharArrayWriter unsyncCharArrayWriter1 = (UnsyncCharArrayWriter)unsyncCharArrayWriter0.append((CharSequence) null);
      assertEquals(4, unsyncCharArrayWriter0.size());
      assertEquals("null", unsyncCharArrayWriter1.toString());
  }

  @Test
  public void test11()  throws Throwable  {
      UnsyncCharArrayWriter unsyncCharArrayWriter0 = new UnsyncCharArrayWriter();
      assertNotNull(unsyncCharArrayWriter0);
      
      UnsyncCharArrayWriter unsyncCharArrayWriter1 = (UnsyncCharArrayWriter)unsyncCharArrayWriter0.append((CharSequence) "", 0, 0);
      assertEquals(0, unsyncCharArrayWriter0.size());
      assertNotNull(unsyncCharArrayWriter1);
      assertEquals(0, unsyncCharArrayWriter1.size());
  }

  @Test
  public void test12()  throws Throwable  {
      UnsyncCharArrayWriter unsyncCharArrayWriter0 = new UnsyncCharArrayWriter(173);
      assertNotNull(unsyncCharArrayWriter0);
      
      UnsyncCharArrayWriter unsyncCharArrayWriter1 = (UnsyncCharArrayWriter)unsyncCharArrayWriter0.append((CharSequence) null, (-1952), (-867));
      assertEquals(4, unsyncCharArrayWriter0.size());
      assertEquals("null", unsyncCharArrayWriter1.toString());
  }

  @Test
  public void test13()  throws Throwable  {
      UnsyncCharArrayWriter unsyncCharArrayWriter0 = new UnsyncCharArrayWriter(0);
      char[] charArray0 = new char[9];
      unsyncCharArrayWriter0.write(charArray0, 0, (-1102));
      assertEquals(0, unsyncCharArrayWriter0.size());
  }

  @Test
  public void test14()  throws Throwable  {
      UnsyncCharArrayWriter unsyncCharArrayWriter0 = new UnsyncCharArrayWriter();
      assertNotNull(unsyncCharArrayWriter0);
      
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try {
        unsyncCharArrayWriter0.write(charArray0, (int) 'B', (int) 't');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test15()  throws Throwable  {
      UnsyncCharArrayWriter unsyncCharArrayWriter0 = new UnsyncCharArrayWriter(0);
      assertNotNull(unsyncCharArrayWriter0);
      
      unsyncCharArrayWriter0.append('L');
      assertEquals(1, unsyncCharArrayWriter0.size());
      assertEquals("L", unsyncCharArrayWriter0.toString());
  }

  @Test
  public void test16()  throws Throwable  {
      UnsyncCharArrayWriter unsyncCharArrayWriter0 = new UnsyncCharArrayWriter();
      assertNotNull(unsyncCharArrayWriter0);
      
      unsyncCharArrayWriter0.append((CharSequence) "de/schlichtherle/nio/charset/IBM437Charset");
      assertEquals(42, unsyncCharArrayWriter0.size());
      assertEquals("de/schlichtherle/nio/charset/IBM437Charset", unsyncCharArrayWriter0.toString());
  }

  @Test
  public void test17()  throws Throwable  {
      UnsyncCharArrayWriter unsyncCharArrayWriter0 = new UnsyncCharArrayWriter();
      assertNotNull(unsyncCharArrayWriter0);
      
      IBM437Charset iBM437Charset0 = new IBM437Charset();
      ByteBuffer byteBuffer0 = iBM437Charset0.encode("instantiated");
      CharBuffer charBuffer0 = iBM437Charset0.decode(byteBuffer0);
      unsyncCharArrayWriter0.write("iA0}B:hThe`[S'[");
      int int0 = unsyncCharArrayWriter0.writeTo(charBuffer0);
      assertEquals(15, unsyncCharArrayWriter0.size());
      assertEquals(2, int0);
  }

  @Test
  public void test18()  throws Throwable  {
      UnsyncCharArrayWriter unsyncCharArrayWriter0 = new UnsyncCharArrayWriter();
      assertNotNull(unsyncCharArrayWriter0);
      
      IBM437Charset iBM437Charset0 = new IBM437Charset();
      ByteBuffer byteBuffer0 = iBM437Charset0.encode("instantiated");
      CharBuffer charBuffer0 = iBM437Charset0.decode(byteBuffer0);
      int int0 = unsyncCharArrayWriter0.writeTo(charBuffer0);
      assertEquals('e', charBuffer0.get());
      assertEquals(0, int0);
  }
}
