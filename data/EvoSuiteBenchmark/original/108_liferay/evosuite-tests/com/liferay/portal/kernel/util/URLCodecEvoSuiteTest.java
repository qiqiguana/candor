/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.util.URLCodec;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class URLCodecEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      String string0 = URLCodec.encodeURL("*&]r=A`z");
      assertNotNull(string0);
      assertEquals("*%26%5Dr%3DA%60z", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      String string0 = URLCodec.decodeURL("H2%20%281%3AAP5%60q%3C", true);
      assertNotNull(string0);
      assertEquals("H2 (1:AP5`q<", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      URLCodec uRLCodec0 = new URLCodec();
      assertNotNull(uRLCodec0);
  }

  @Test
  public void test3()  throws Throwable  {
      String string0 = URLCodec.encodeURL("insantiate", true);
      assertNotNull(string0);
      assertEquals("insantiate", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try {
        URLCodec.decodeURL("RWtU/N6u%y{9t");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * { is not a hex char
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      String string0 = URLCodec.decodeURL((String) null);
      assertNull(string0);
  }

  @Test
  public void test6()  throws Throwable  {
      String string0 = URLCodec.decodeURL("", true);
      assertEquals("", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      String string0 = URLCodec.decodeURL("\"q+>=8N]PM");
      assertEquals("\"q >=8N]PM", string0);
      assertNotNull(string0);
  }

  @Test
  public void test8()  throws Throwable  {
      String string0 = URLCodec.decodeURL("%60eK%7B%20b%60%7E5");
      assertNotNull(string0);
      assertEquals("`eK{ b`~5", string0);
  }

  @Test
  public void test9()  throws Throwable  {
      String string0 = URLCodec.decodeURL("+isot+ahx+ch%23ar");
      assertEquals(" isot ahx ch#ar", string0);
      assertNotNull(string0);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = URLCodec.decodeURL("insantiate", "insantiate", true);
      assertNotNull(string0);
      assertEquals("insantiate", string0);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = URLCodec.encodeURL((String) null, "`eK{ b`~5", true);
      assertNull(string0);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = URLCodec.encodeURL("");
      assertEquals("", string0);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = URLCodec.encodeURL("e$mE?JV3Y2'd%");
      assertEquals("e%24mE%3FJV3Y2%27d%25", string0);
      assertNotNull(string0);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = URLCodec.encodeURL("de/clichtherle/ni/chart/I47Chrset");
      assertEquals("de%2Fclichtherle%2Fni%2Fchart%2FI47Chrset", string0);
      assertNotNull(string0);
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = URLCodec.encodeURL("H2 (1:AP5`q<", true);
      assertEquals("H2%20%281%3AAP5%60q%3C", string0);
      assertNotNull(string0);
  }

  @Test
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try {
        URLCodec.decodeURL("d.[l&7%m!", "insantiate", true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * ! is not a hex char
         */
      }
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = URLCodec.encodeURL("`eK{ b`~5", true);
      assertNotNull(string0);
      assertEquals("%60eK%7B%20b%60%7E5", string0);
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = URLCodec.encodeURL("`eK{ b`~5");
      assertEquals("%60eK%7B+b%60%7E5", string0);
      assertNotNull(string0);
  }
}
