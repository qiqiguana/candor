/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.messaging;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.messaging.BaseDestinationEventListener;
import com.liferay.portal.kernel.messaging.BridgingMessageListener;
import com.liferay.portal.kernel.messaging.Destination;
import com.liferay.portal.kernel.messaging.DestinationEventListener;
import com.liferay.portal.kernel.messaging.DummyMessageListener;
import com.liferay.portal.kernel.messaging.GlobalDestinationEventListener;
import com.liferay.portal.kernel.messaging.InvokerMessageListener;
import com.liferay.portal.kernel.messaging.MessageListener;
import com.liferay.portal.kernel.messaging.SerialDestination;
import com.liferay.portal.kernel.messaging.SynchronousDestination;
import java.util.Set;
import org.evosuite.instrumentation.InstrumentingClassLoader;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BaseDestinationEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SynchronousDestination synchronousDestination0 = new SynchronousDestination();
      synchronousDestination0.close();
      assertEquals("", synchronousDestination0.getName());
  }

  @Test
  public void test1()  throws Throwable  {
      SynchronousDestination synchronousDestination0 = new SynchronousDestination();
      boolean boolean0 = synchronousDestination0.isRegistered();
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      SynchronousDestination synchronousDestination0 = new SynchronousDestination();
      GlobalDestinationEventListener globalDestinationEventListener0 = new GlobalDestinationEventListener();
      synchronousDestination0.removeDestinationEventListener((DestinationEventListener) globalDestinationEventListener0);
      assertEquals(false, synchronousDestination0.isRegistered());
  }

  @Test
  public void test3()  throws Throwable  {
      SynchronousDestination synchronousDestination0 = new SynchronousDestination();
      BridgingMessageListener bridgingMessageListener0 = new BridgingMessageListener();
      synchronousDestination0.register((MessageListener) bridgingMessageListener0);
      BaseDestinationEventListener baseDestinationEventListener0 = new BaseDestinationEventListener();
      synchronousDestination0.addDestinationEventListener((DestinationEventListener) baseDestinationEventListener0);
      assertEquals(true, synchronousDestination0.isRegistered());
      
      boolean boolean0 = synchronousDestination0.unregister((MessageListener) bridgingMessageListener0, (ClassLoader) null);
      assertEquals(true, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      SerialDestination serialDestination0 = new SerialDestination();
      Set<MessageListener> set0 = serialDestination0.getMessageListeners();
      assertEquals(true, set0.isEmpty());
  }

  @Test
  public void test5()  throws Throwable  {
      SynchronousDestination synchronousDestination0 = new SynchronousDestination();
      DummyMessageListener dummyMessageListener0 = new DummyMessageListener();
      InvokerMessageListener invokerMessageListener0 = new InvokerMessageListener((MessageListener) dummyMessageListener0);
      InstrumentingClassLoader instrumentingClassLoader0 = (InstrumentingClassLoader)invokerMessageListener0.getClassLoader();
      synchronousDestination0.register((MessageListener) invokerMessageListener0, (ClassLoader) instrumentingClassLoader0);
      boolean boolean0 = synchronousDestination0.isRegistered();
      assertEquals(1, synchronousDestination0.getMessageListenerCount());
      assertEquals(true, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      SerialDestination serialDestination0 = new SerialDestination();
      BridgingMessageListener bridgingMessageListener0 = new BridgingMessageListener();
      boolean boolean0 = serialDestination0.unregister((MessageListener) bridgingMessageListener0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      SynchronousDestination synchronousDestination0 = new SynchronousDestination();
      synchronousDestination0.removeDestinationEventListeners();
      assertEquals(0, synchronousDestination0.getMessageListenerCount());
  }

  @Test
  public void test8()  throws Throwable  {
      SynchronousDestination synchronousDestination0 = new SynchronousDestination();
      synchronousDestination0.setName(", responseDestinationName=");
      synchronousDestination0.afterPropertiesSet();
      assertEquals(false, synchronousDestination0.isRegistered());
  }

  @Test
  public void test9()  throws Throwable  {
      SerialDestination serialDestination0 = new SerialDestination();
      // Undeclared exception!
      try {
        serialDestination0.afterPropertiesSet();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Name is null
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      SynchronousDestination synchronousDestination0 = new SynchronousDestination();
      BaseDestinationEventListener baseDestinationEventListener0 = new BaseDestinationEventListener();
      synchronousDestination0.addDestinationEventListener((DestinationEventListener) baseDestinationEventListener0);
      synchronousDestination0.copyDestinationEventListeners((Destination) synchronousDestination0);
      assertEquals("", synchronousDestination0.getName());
  }

  @Test
  public void test11()  throws Throwable  {
      SynchronousDestination synchronousDestination0 = new SynchronousDestination();
      SerialDestination serialDestination0 = new SerialDestination();
      BridgingMessageListener bridgingMessageListener0 = new BridgingMessageListener();
      serialDestination0.register((MessageListener) bridgingMessageListener0);
      serialDestination0.copyMessageListeners((Destination) synchronousDestination0);
      assertEquals(1, serialDestination0.getMessageListenerCount());
      
      synchronousDestination0.unregisterMessageListeners();
      assertEquals(0, synchronousDestination0.getMessageListenerCount());
  }

  @Test
  public void test12()  throws Throwable  {
      SynchronousDestination synchronousDestination0 = new SynchronousDestination();
      synchronousDestination0.unregisterMessageListeners();
      assertEquals(false, synchronousDestination0.isRegistered());
  }

  @Test
  public void test13()  throws Throwable  {
      SynchronousDestination synchronousDestination0 = new SynchronousDestination();
      BridgingMessageListener bridgingMessageListener0 = new BridgingMessageListener();
      BaseDestinationEventListener baseDestinationEventListener0 = new BaseDestinationEventListener();
      synchronousDestination0.addDestinationEventListener((DestinationEventListener) baseDestinationEventListener0);
      synchronousDestination0.fireMessageListenerRegisteredEvent((MessageListener) bridgingMessageListener0);
      assertEquals(false, synchronousDestination0.isRegistered());
  }

  @Test
  public void test14()  throws Throwable  {
      SynchronousDestination synchronousDestination0 = new SynchronousDestination();
      BridgingMessageListener bridgingMessageListener0 = new BridgingMessageListener();
      boolean boolean0 = synchronousDestination0.register((MessageListener) bridgingMessageListener0);
      boolean boolean1 = synchronousDestination0.register((MessageListener) bridgingMessageListener0);
      assertEquals(1, synchronousDestination0.getMessageListenerCount());
      assertFalse(boolean1 == boolean0);
  }
}
