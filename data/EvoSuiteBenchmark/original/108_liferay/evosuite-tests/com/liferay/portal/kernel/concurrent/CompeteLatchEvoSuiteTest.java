/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.concurrent;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.concurrent.CompeteLatch;
import java.util.concurrent.TimeUnit;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class CompeteLatchEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      CompeteLatch competeLatch0 = new CompeteLatch();
      competeLatch0.compete();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = competeLatch0.await((-1013L), timeUnit0);
      assertEquals(true, competeLatch0.done());
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      CompeteLatch competeLatch0 = new CompeteLatch();
      competeLatch0.await();
  }

  @Test
  public void test2()  throws Throwable  {
      CompeteLatch competeLatch0 = new CompeteLatch();
      boolean boolean0 = competeLatch0.isLocked();
      assertEquals(true, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      CompeteLatch competeLatch0 = new CompeteLatch();
      boolean boolean0 = competeLatch0.done();
      assertEquals(true, competeLatch0.compete());
      assertEquals(true, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      CompeteLatch competeLatch0 = new CompeteLatch();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      competeLatch0.await(283L, timeUnit0);
  }

  @Test
  public void test5()  throws Throwable  {
      CompeteLatch competeLatch0 = new CompeteLatch();
      competeLatch0.compete();
      assertEquals(true, competeLatch0.isLocked());
      
      boolean boolean0 = competeLatch0.done();
      assertEquals(true, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      CompeteLatch competeLatch0 = new CompeteLatch();
      competeLatch0.compete();
      boolean boolean0 = competeLatch0.isLocked();
      assertEquals(true, competeLatch0.done());
      assertEquals(true, boolean0);
  }
}
