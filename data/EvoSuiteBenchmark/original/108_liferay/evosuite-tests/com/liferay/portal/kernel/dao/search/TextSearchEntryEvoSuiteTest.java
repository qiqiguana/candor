/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.dao.search;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.dao.search.TextSearchEntry;
import java.util.HashMap;
import java.util.Map;
import javax.servlet.ServletContext;
import javax.servlet.jsp.PageContext;
import org.junit.BeforeClass;
import org.springframework.mock.web.MockPageContext;
import org.tuckey.web.MockServletContext;

@RunWith(EvoSuiteRunner.class)
public class TextSearchEntryEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      TextSearchEntry textSearchEntry0 = new TextSearchEntry();
      textSearchEntry0.setTitle("middle");
      assertEquals("middle", textSearchEntry0.getTitle());
  }

  @Test
  public void test1()  throws Throwable  {
      TextSearchEntry textSearchEntry0 = new TextSearchEntry();
      String string0 = textSearchEntry0.getName();
      assertNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      TextSearchEntry textSearchEntry0 = new TextSearchEntry();
      String string0 = textSearchEntry0.getHref();
      assertNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      TextSearchEntry textSearchEntry0 = new TextSearchEntry();
      textSearchEntry0.setTarget("n3");
      assertEquals("n3", textSearchEntry0.getTarget());
  }

  @Test
  public void test4()  throws Throwable  {
      TextSearchEntry textSearchEntry0 = new TextSearchEntry();
      textSearchEntry0.setName("middle");
      assertEquals("middle", textSearchEntry0.getName());
  }

  @Test
  public void test5()  throws Throwable  {
      TextSearchEntry textSearchEntry0 = new TextSearchEntry();
      Map<String, Object> map0 = textSearchEntry0.getData();
      assertNull(map0);
  }

  @Test
  public void test6()  throws Throwable  {
      TextSearchEntry textSearchEntry0 = new TextSearchEntry();
      String string0 = textSearchEntry0.getTitle();
      assertNull(string0);
  }

  @Test
  public void test7()  throws Throwable  {
      TextSearchEntry textSearchEntry0 = new TextSearchEntry();
      String string0 = textSearchEntry0.getTarget();
      assertNull(string0);
  }

  @Test
  public void test8()  throws Throwable  {
      TextSearchEntry textSearchEntry0 = new TextSearchEntry();
      // Undeclared exception!
      try {
        textSearchEntry0.clone();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      TextSearchEntry textSearchEntry0 = new TextSearchEntry();
      MockServletContext mockServletContext0 = new MockServletContext();
      textSearchEntry0.setHref("");
      MockPageContext mockPageContext0 = new MockPageContext((ServletContext) mockServletContext0);
      try {
        textSearchEntry0.print((PageContext) mockPageContext0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      TextSearchEntry textSearchEntry0 = new TextSearchEntry();
      try {
        textSearchEntry0.print((PageContext) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      TextSearchEntry textSearchEntry0 = new TextSearchEntry();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      textSearchEntry0.setData((Map<String, Object>) hashMap0);
      MockServletContext mockServletContext0 = new MockServletContext();
      textSearchEntry0.setHref("");
      MockPageContext mockPageContext0 = new MockPageContext((ServletContext) mockServletContext0);
      hashMap0.put("", (Object) "middle");
      try {
        textSearchEntry0.print((PageContext) mockPageContext0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
