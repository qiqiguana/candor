/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.util.Validator_IW;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class Validator_IWEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      boolean boolean0 = validator_IW0.isGregorianDate((-925), 1821, 0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      boolean boolean0 = validator_IW0.isEmailAddress("-t:2XLas");
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      boolean boolean0 = validator_IW0.isEmailAddressSpecialChar('j');
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      assertNotNull(validator_IW0);
      
      boolean[] booleanArray0 = new boolean[3];
      boolean boolean0 = validator_IW0.equalsSorted(booleanArray0, booleanArray0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      assertNotNull(validator_IW0);
      
      boolean boolean0 = validator_IW0.equals(0.0F, 0.0F);
      assertEquals(true, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      assertNotNull(validator_IW0);
      
      double[] doubleArray0 = new double[4];
      boolean boolean0 = validator_IW0.equalsSorted(doubleArray0, doubleArray0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      assertNotNull(validator_IW0);
      
      boolean boolean0 = validator_IW0.equals((short)0, (short)0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      assertNotNull(validator_IW0);
      
      boolean boolean0 = validator_IW0.equals((byte) (-1), (byte) (-1));
      assertEquals(true, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      boolean boolean0 = validator_IW0.isAddress(".* (");
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      assertNotNull(validator_IW0);
      
      long[] longArray0 = new long[2];
      boolean boolean0 = validator_IW0.equalsSorted(longArray0, longArray0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      assertNotNull(validator_IW0);
      
      char[] charArray0 = new char[8];
      boolean boolean0 = validator_IW0.equalsSorted(charArray0, charArray0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      assertNotNull(validator_IW0);
      
      boolean boolean0 = validator_IW0.equals((Object) null, (Object) null);
      assertEquals(true, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      boolean boolean0 = validator_IW0.isDigit('G');
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      boolean boolean0 = validator_IW0.isChar("");
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      assertNotNull(validator_IW0);
      
      boolean boolean0 = validator_IW0.equals(true, false);
      assertEquals(false, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      boolean boolean0 = validator_IW0.isNull((Object) "-9223372036854775807");
      assertEquals(false, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      assertNotNull(validator_IW0);
      
      float[] floatArray0 = new float[9];
      boolean boolean0 = validator_IW0.equalsSorted(floatArray0, floatArray0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      boolean boolean0 = validator_IW0.isHTML("Zrs!Y");
      assertEquals(false, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      boolean boolean0 = validator_IW0.isXml("-t:2XLas");
      assertEquals(false, boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      assertNotNull(validator_IW0);
      
      boolean boolean0 = validator_IW0.isPhoneNumber("en?Hxti}Zw~EiRF|A2A");
      assertEquals(true, boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      boolean boolean0 = validator_IW0.isHostName("-t:2XLas");
      assertEquals(false, boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      assertNotNull(validator_IW0);
      
      boolean boolean0 = validator_IW0.equals((-33), (-33));
      assertEquals(true, boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      assertNotNull(validator_IW0);
      
      boolean boolean0 = validator_IW0.equals('<', '<');
      assertEquals(true, boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      boolean boolean0 = validator_IW0.isWhitespace('g');
      assertEquals(false, boolean0);
  }

  @Test
  public void test24()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      assertNotNull(validator_IW0);
      
      boolean boolean0 = validator_IW0.isJulianDate(0, 0, 0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test25()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      boolean boolean0 = validator_IW0.isNumber("|JM>r$");
      assertEquals(false, boolean0);
  }

  @Test
  public void test26()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      boolean boolean0 = validator_IW0.isUrl("4");
      assertEquals(false, boolean0);
  }

  @Test
  public void test27()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      boolean boolean0 = validator_IW0.isDate((-389), 818, 818);
      assertEquals(false, boolean0);
  }

  @Test
  public void test28()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      boolean boolean0 = validator_IW0.isDomain("$vDEj+^MB[S");
      assertEquals(false, boolean0);
  }

  @Test
  public void test29()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      boolean boolean0 = validator_IW0.isNotNull("");
      assertEquals(false, boolean0);
  }

  @Test
  public void test30()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      Long long0 = new Long((-1L));
      boolean boolean0 = validator_IW0.isNull(long0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test31()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      assertNotNull(validator_IW0);
      
      Long long0 = Long.valueOf((long) (-925));
      boolean boolean0 = validator_IW0.isNotNull(long0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test32()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      boolean boolean0 = validator_IW0.isVariableTerm("");
      assertEquals(false, boolean0);
  }

  @Test
  public void test33()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      assertNotNull(validator_IW0);
      
      boolean boolean0 = validator_IW0.isFilePath("E|(,N*7L(^", true);
      assertEquals(true, boolean0);
  }

  @Test
  public void test34()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      boolean boolean0 = validator_IW0.isNull("\"|x]q[+uG*Sag:GO^");
      assertEquals(false, boolean0);
  }

  @Test
  public void test35()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      boolean boolean0 = validator_IW0.isName("4");
      assertEquals(false, boolean0);
  }

  @Test
  public void test36()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      assertNotNull(validator_IW0);
      
      int[] intArray0 = new int[10];
      boolean boolean0 = validator_IW0.equalsSorted(intArray0, intArray0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test37()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      assertNotNull(validator_IW0);
      
      boolean boolean0 = validator_IW0.isBlank("");
      assertEquals(true, boolean0);
  }

  @Test
  public void test38()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      assertNotNull(validator_IW0);
      
      boolean boolean0 = validator_IW0.isHex("A-Il");
      assertEquals(true, boolean0);
  }

  @Test
  public void test39()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      boolean boolean0 = validator_IW0.isAlphanumericName("-t:2XLas");
      assertEquals(false, boolean0);
  }

  @Test
  public void test40()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      assertNotNull(validator_IW0);
      
      boolean boolean0 = validator_IW0.isFileExtension("4");
      assertEquals(true, boolean0);
  }

  @Test
  public void test41()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      boolean boolean0 = validator_IW0.isVariableName("");
      assertEquals(false, boolean0);
  }

  @Test
  public void test42()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      boolean boolean0 = validator_IW0.isIPAddress("(");
      assertEquals(false, boolean0);
  }

  @Test
  public void test43()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      assertNotNull(validator_IW0);
      
      Object[] objectArray0 = new Object[1];
      boolean boolean0 = validator_IW0.isNotNull(objectArray0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test44()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      assertNotNull(validator_IW0);
      
      Object[] objectArray0 = new Object[1];
      boolean boolean0 = validator_IW0.equalsSorted(objectArray0, objectArray0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test45()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      assertNotNull(validator_IW0);
      
      boolean boolean0 = validator_IW0.isFileName("-t:2XLas");
      assertEquals(true, boolean0);
  }

  @Test
  public void test46()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      assertNotNull(validator_IW0);
      
      short[] shortArray0 = new short[4];
      boolean boolean0 = validator_IW0.equalsSorted(shortArray0, shortArray0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test47()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      assertNotNull(validator_IW0);
      
      boolean boolean0 = validator_IW0.isNotNull((Object) "903");
      assertEquals(true, boolean0);
  }

  @Test
  public void test48()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      assertNotNull(validator_IW0);
      
      boolean boolean0 = validator_IW0.equals(1L, (long) 'Y');
      assertEquals(false, boolean0);
  }

  @Test
  public void test49()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      assertNotNull(validator_IW0);
      
      boolean boolean0 = validator_IW0.isAscii(',');
      assertEquals(true, boolean0);
  }

  @Test
  public void test50()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      assertNotNull(validator_IW0);
      
      boolean boolean0 = validator_IW0.isChar('`');
      assertEquals(false, boolean0);
  }

  @Test
  public void test51()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      assertNotNull(validator_IW0);
      
      boolean boolean0 = validator_IW0.isLUHN("\"|x]q[+uG*Sag:GO^");
      assertEquals(true, boolean0);
  }

  @Test
  public void test52()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      boolean boolean0 = validator_IW0.isDigit("");
      assertEquals(false, boolean0);
  }

  @Test
  public void test53()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      Object[] objectArray0 = new Object[5];
      boolean boolean0 = validator_IW0.isNull(objectArray0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test54()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      boolean boolean0 = validator_IW0.isPassword("$vDEj+^MB[S");
      assertEquals(false, boolean0);
  }

  @Test
  public void test55()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      assertNotNull(validator_IW0);
      
      boolean boolean0 = validator_IW0.equals((double) (-925), (double) (-925));
      assertEquals(true, boolean0);
  }

  @Test
  public void test56()  throws Throwable  {
      Validator_IW validator_IW0 = Validator_IW.getInstance();
      assertNotNull(validator_IW0);
      
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = validator_IW0.equalsSorted(byteArray0, byteArray0);
      assertEquals(true, boolean0);
  }
}
