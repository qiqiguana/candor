/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.security.pacl.checker;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.security.pacl.checker.SQLChecker;
import java.security.AllPermission;
import java.security.Permission;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.SpinnerListModel;
import net.sf.jsqlparser.statement.create.table.CreateTable;
import net.sf.jsqlparser.statement.delete.Delete;
import net.sf.jsqlparser.statement.drop.Drop;
import net.sf.jsqlparser.statement.insert.Insert;
import net.sf.jsqlparser.statement.replace.Replace;
import net.sf.jsqlparser.statement.select.Select;
import net.sf.jsqlparser.statement.truncate.Truncate;
import net.sf.jsqlparser.statement.update.Update;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SQLCheckerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SQLChecker sQLChecker0 = new SQLChecker();
      Update update0 = new Update();
      // Undeclared exception!
      try {
        sQLChecker0.hasSQL(update0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      SQLChecker sQLChecker0 = new SQLChecker();
      Select select0 = new Select();
      // Undeclared exception!
      try {
        sQLChecker0.hasSQL(select0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      SQLChecker sQLChecker0 = new SQLChecker();
      Replace replace0 = new Replace();
      // Undeclared exception!
      try {
        sQLChecker0.hasSQL(replace0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      SQLChecker sQLChecker0 = new SQLChecker();
      Insert insert0 = new Insert();
      // Undeclared exception!
      try {
        sQLChecker0.hasSQL(insert0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      SQLChecker sQLChecker0 = new SQLChecker();
      Delete delete0 = new Delete();
      // Undeclared exception!
      try {
        sQLChecker0.hasSQL(delete0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      SQLChecker sQLChecker0 = new SQLChecker();
      CreateTable createTable0 = new CreateTable();
      // Undeclared exception!
      try {
        sQLChecker0.hasSQL(createTable0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      SQLChecker sQLChecker0 = new SQLChecker();
      // Undeclared exception!
      try {
        sQLChecker0.afterPropertiesSet();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      SQLChecker sQLChecker0 = new SQLChecker();
      AllPermission allPermission0 = new AllPermission();
      // Undeclared exception!
      try {
        sQLChecker0.checkPermission((Permission) allPermission0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      SQLChecker sQLChecker0 = new SQLChecker();
      Truncate truncate0 = new Truncate();
      // Undeclared exception!
      try {
        sQLChecker0.hasSQL(truncate0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      SQLChecker sQLChecker0 = new SQLChecker();
      Drop drop0 = new Drop();
      // Undeclared exception!
      try {
        sQLChecker0.hasSQL(drop0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      SQLChecker sQLChecker0 = new SQLChecker();
      SpinnerListModel spinnerListModel0 = new SpinnerListModel();
      List<?> list0 = spinnerListModel0.getList();
      HashSet<String> hashSet0 = new HashSet<String>();
      // Undeclared exception!
      try {
        sQLChecker0.isAllowedTables(list0, (Set<String>) hashSet0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
