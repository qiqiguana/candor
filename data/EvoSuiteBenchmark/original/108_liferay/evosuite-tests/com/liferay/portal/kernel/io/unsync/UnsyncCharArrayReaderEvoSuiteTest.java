/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.io.unsync;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.io.unsync.UnsyncCharArrayReader;
import java.io.IOException;
import java.nio.CharBuffer;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class UnsyncCharArrayReaderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      char[] charArray0 = new char[15];
      UnsyncCharArrayReader unsyncCharArrayReader0 = new UnsyncCharArrayReader(charArray0);
      int int0 = unsyncCharArrayReader0.read(charArray0);
      assertEquals(-1, unsyncCharArrayReader0.read());
      assertEquals(14, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      char[] charArray0 = new char[11];
      UnsyncCharArrayReader unsyncCharArrayReader0 = new UnsyncCharArrayReader(charArray0, (int) '\u0000', (int) 'J');
      boolean boolean0 = unsyncCharArrayReader0.markSupported();
      assertEquals(true, boolean0);
      assertEquals(0, unsyncCharArrayReader0.read());
  }

  @Test
  public void test2()  throws Throwable  {
      char[] charArray0 = new char[10];
      UnsyncCharArrayReader unsyncCharArrayReader0 = new UnsyncCharArrayReader(charArray0, (int) '\u0000', (int) '\u0000');
      unsyncCharArrayReader0.close();
      try {
        unsyncCharArrayReader0.skip((long) 'Y');
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Stream closed
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      char[] charArray0 = new char[5];
      UnsyncCharArrayReader unsyncCharArrayReader0 = new UnsyncCharArrayReader(charArray0);
      unsyncCharArrayReader0.mark((int) ':');
      assertEquals(0, unsyncCharArrayReader0.read());
  }

  @Test
  public void test4()  throws Throwable  {
      char[] charArray0 = new char[1];
      UnsyncCharArrayReader unsyncCharArrayReader0 = new UnsyncCharArrayReader(charArray0);
      unsyncCharArrayReader0.close();
      try {
        unsyncCharArrayReader0.mark(0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Stream closed
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      char[] charArray0 = new char[22];
      UnsyncCharArrayReader unsyncCharArrayReader0 = new UnsyncCharArrayReader(charArray0, (int) 'c', (int) '\u0000');
      assertNotNull(unsyncCharArrayReader0);
      
      int int0 = unsyncCharArrayReader0.read();
      assertEquals(false, unsyncCharArrayReader0.ready());
      assertEquals((-1), int0);
  }

  @Test
  public void test6()  throws Throwable  {
      char[] charArray0 = new char[22];
      UnsyncCharArrayReader unsyncCharArrayReader0 = new UnsyncCharArrayReader(charArray0, (int) 'c', (int) '\u0000');
      unsyncCharArrayReader0.close();
      try {
        unsyncCharArrayReader0.read();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Stream closed
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      char[] charArray0 = new char[5];
      UnsyncCharArrayReader unsyncCharArrayReader0 = new UnsyncCharArrayReader(charArray0);
      int int0 = unsyncCharArrayReader0.read();
      assertEquals(0, int0);
      assertEquals(true, unsyncCharArrayReader0.ready());
  }

  @Test
  public void test8()  throws Throwable  {
      char[] charArray0 = new char[7];
      UnsyncCharArrayReader unsyncCharArrayReader0 = new UnsyncCharArrayReader(charArray0, (int) 'M', (int) 'M');
      unsyncCharArrayReader0.close();
      try {
        unsyncCharArrayReader0.read(charArray0, (int) 'M', (int) '\u0000');
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Stream closed
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      char[] charArray0 = new char[1];
      UnsyncCharArrayReader unsyncCharArrayReader0 = new UnsyncCharArrayReader(charArray0, (int) '\u000F', (int) '\u000F');
      int int0 = unsyncCharArrayReader0.read(charArray0, (int) '\u000F', (-17));
      assertEquals(false, unsyncCharArrayReader0.ready());
      assertEquals(0, int0);
  }

  @Test
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[22];
      UnsyncCharArrayReader unsyncCharArrayReader0 = new UnsyncCharArrayReader(charArray0, (int) 'c', (int) '\u0000');
      assertNotNull(unsyncCharArrayReader0);
      
      int int0 = unsyncCharArrayReader0.read(charArray0);
      assertEquals(false, unsyncCharArrayReader0.ready());
      assertEquals((-1), int0);
  }

  @Test
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[5];
      UnsyncCharArrayReader unsyncCharArrayReader0 = new UnsyncCharArrayReader(charArray0);
      // Undeclared exception!
      try {
        unsyncCharArrayReader0.read(charArray0, (int) ':', (int) ':');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[1];
      UnsyncCharArrayReader unsyncCharArrayReader0 = new UnsyncCharArrayReader(charArray0);
      // Undeclared exception!
      try {
        unsyncCharArrayReader0.read((CharBuffer) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[15];
      UnsyncCharArrayReader unsyncCharArrayReader0 = new UnsyncCharArrayReader(charArray0);
      unsyncCharArrayReader0.close();
      try {
        unsyncCharArrayReader0.read((CharBuffer) null);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Stream closed
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[2];
      UnsyncCharArrayReader unsyncCharArrayReader0 = new UnsyncCharArrayReader(charArray0, (int) 'K', (int) 'K');
      boolean boolean0 = unsyncCharArrayReader0.ready();
      assertEquals(false, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[4];
      UnsyncCharArrayReader unsyncCharArrayReader0 = new UnsyncCharArrayReader(charArray0);
      unsyncCharArrayReader0.close();
      try {
        unsyncCharArrayReader0.ready();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Stream closed
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[5];
      UnsyncCharArrayReader unsyncCharArrayReader0 = new UnsyncCharArrayReader(charArray0);
      boolean boolean0 = unsyncCharArrayReader0.ready();
      assertEquals(true, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[5];
      UnsyncCharArrayReader unsyncCharArrayReader0 = new UnsyncCharArrayReader(charArray0);
      unsyncCharArrayReader0.reset();
      assertEquals(true, unsyncCharArrayReader0.markSupported());
  }

  @Test
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[2];
      UnsyncCharArrayReader unsyncCharArrayReader0 = new UnsyncCharArrayReader(charArray0, (int) 'K', (int) 'K');
      unsyncCharArrayReader0.close();
      try {
        unsyncCharArrayReader0.reset();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Stream closed
         */
      }
  }

  @Test
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[11];
      UnsyncCharArrayReader unsyncCharArrayReader0 = new UnsyncCharArrayReader(charArray0, (int) '\u0000', (int) 'J');
      long long0 = unsyncCharArrayReader0.skip((long) '\u0000');
      assertEquals(0, unsyncCharArrayReader0.read());
      assertEquals(0L, long0);
  }

  @Test
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[22];
      UnsyncCharArrayReader unsyncCharArrayReader0 = new UnsyncCharArrayReader(charArray0, (int) 'c', (int) '\u0000');
      assertNotNull(unsyncCharArrayReader0);
      
      long long0 = unsyncCharArrayReader0.skip((-1692L));
      assertEquals(false, unsyncCharArrayReader0.ready());
      assertEquals(0L, long0);
  }

  @Test
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[1];
      UnsyncCharArrayReader unsyncCharArrayReader0 = new UnsyncCharArrayReader(charArray0, (int) '\u000F', (int) '\u000F');
      long long0 = unsyncCharArrayReader0.skip((long) '\u000F');
      assertEquals(-1, unsyncCharArrayReader0.read());
      assertEquals(false, unsyncCharArrayReader0.ready());
      assertEquals((-14L), long0);
  }
}
