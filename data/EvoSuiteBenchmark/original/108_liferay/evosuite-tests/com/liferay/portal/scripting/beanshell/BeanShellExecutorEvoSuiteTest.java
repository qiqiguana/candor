/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.scripting.beanshell;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.scripting.ExecutionException;
import com.liferay.portal.kernel.scripting.ScriptingException;
import com.liferay.portal.scripting.beanshell.BeanShellExecutor;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BeanShellExecutorEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      BeanShellExecutor beanShellExecutor0 = new BeanShellExecutor();
      String string0 = beanShellExecutor0.getLanguage();
      assertEquals("beanshell", string0);
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          BeanShellExecutor beanShellExecutor0 = new BeanShellExecutor();
          LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
          HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
          ClassLoader[] classLoaderArray0 = new ClassLoader[1];
          try {
            beanShellExecutor0.eval((Set<String>) null, (Map<String, Object>) hashMap0, (Set<String>) linkedHashSet0, "", classLoaderArray0);
            fail("Expecting exception: ScriptingException");
          } catch(ScriptingException e) {
            /*
             * Security manager blocks (java.lang.RuntimePermission getClassLoader.portal)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * com.liferay.portal.kernel.util.PortalClassLoaderUtil.getClassLoader(PortalClassLoaderUtil.java:38)
             * com.liferay.portal.security.pacl.PACLClassLoaderUtil.getPortalClassLoader(PACLClassLoaderUtil.java:64)
             * com.liferay.portal.scripting.beanshell.BeanShellExecutor.eval(BeanShellExecutor.java:54)
             * sun.reflect.GeneratedMethodAccessor31.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
      BeanShellExecutor beanShellExecutor0 = new BeanShellExecutor();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ClassLoader[] classLoaderArray0 = new ClassLoader[2];
      try {
        beanShellExecutor0.eval((Set<String>) linkedHashSet0, (Map<String, Object>) hashMap0, (Set<String>) linkedHashSet0, "beanshell", classLoaderArray0);
        fail("Expecting exception: ExecutionException");
      } catch(ExecutionException e) {
        /*
         * Constrained execution not supported for BeanShell
         */
      }
  }
}
