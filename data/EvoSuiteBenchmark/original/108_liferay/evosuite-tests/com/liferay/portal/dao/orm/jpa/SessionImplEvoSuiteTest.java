/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.dao.orm.jpa;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.dao.orm.jpa.SessionImpl;
import com.liferay.portal.kernel.dao.orm.ORMException;
import java.io.Serializable;
import java.sql.Connection;
import java.util.Map;
import java.util.TreeMap;
import javax.persistence.FlushModeType;
import javax.persistence.LockModeType;
import org.hibernate.collection.PersistentSortedMap;
import org.hibernate.criterion.Example;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SessionImplEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SessionImpl sessionImpl0 = new SessionImpl();
      Class<?> class0 = Example.PropertySelector.class;
      try {
        sessionImpl0.load(class0, class0);
        fail("Expecting exception: ORMException");
      } catch(ORMException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      SessionImpl sessionImpl0 = new SessionImpl();
      // Undeclared exception!
      try {
        sessionImpl0.createSQLQuery("m6");
        fail("Expecting exception: NoClassDefFoundError");
      } catch(NoClassDefFoundError e) {
        /*
         * Could not initialize class com.liferay.portal.dao.orm.common.SQLTransformer
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      SessionImpl sessionImpl0 = new SessionImpl();
      try {
        sessionImpl0.delete((Object) "");
        fail("Expecting exception: ORMException");
      } catch(ORMException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      SessionImpl sessionImpl0 = new SessionImpl();
      Class<?> class0 = SessionImpl.class;
      try {
        sessionImpl0.get(class0, (Serializable) "U_x");
        fail("Expecting exception: ORMException");
      } catch(ORMException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      SessionImpl sessionImpl0 = new SessionImpl();
      try {
        sessionImpl0.contains((Object) "select @@identity");
        fail("Expecting exception: ORMException");
      } catch(ORMException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      SessionImpl sessionImpl0 = new SessionImpl();
      try {
        sessionImpl0.merge((Object) " ");
        fail("Expecting exception: ORMException");
      } catch(ORMException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      SessionImpl sessionImpl0 = new SessionImpl();
      FlushModeType flushModeType0 = FlushModeType.COMMIT;
      LockModeType lockModeType0 = LockModeType.READ;
      Class<?> class0 = SessionImpl.class;
      // Undeclared exception!
      try {
        sessionImpl0.uniqueResult("1X", (Map<Integer, Object>) null, (Map<String, Object>) null, true, (-1), (-1), flushModeType0, lockModeType0, true, class0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      SessionImpl sessionImpl0 = new SessionImpl();
      try {
        sessionImpl0.clear();
        fail("Expecting exception: ORMException");
      } catch(ORMException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      SessionImpl sessionImpl0 = new SessionImpl();
      // Undeclared exception!
      try {
        sessionImpl0.createQuery(":1N?@Q|salSSdg");
        fail("Expecting exception: NoClassDefFoundError");
      } catch(NoClassDefFoundError e) {
        /*
         * Could not initialize class com.liferay.portal.dao.orm.common.SQLTransformer
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      SessionImpl sessionImpl0 = new SessionImpl();
      Object object0 = sessionImpl0.getWrappedSession();
      assertNull(object0);
  }

  @Test
  public void test10()  throws Throwable  {
      SessionImpl sessionImpl0 = new SessionImpl();
      try {
        sessionImpl0.save((Object) "/");
        fail("Expecting exception: ORMException");
      } catch(ORMException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      SessionImpl sessionImpl0 = new SessionImpl();
      PersistentSortedMap persistentSortedMap0 = new PersistentSortedMap();
      FlushModeType flushModeType0 = FlushModeType.AUTO;
      LockModeType lockModeType0 = LockModeType.OPTIMISTIC;
      // Undeclared exception!
      try {
        sessionImpl0.executeUpdate((String) null, (Map<Integer, Object>) persistentSortedMap0, (Map<String, Object>) persistentSortedMap0, false, (-264), (-264), flushModeType0, lockModeType0, true, (Class<?>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      SessionImpl sessionImpl0 = new SessionImpl();
      Connection connection0 = sessionImpl0.close();
      assertNull(connection0);
  }

  @Test
  public void test13()  throws Throwable  {
      SessionImpl sessionImpl0 = new SessionImpl();
      try {
        sessionImpl0.flush();
        fail("Expecting exception: ORMException");
      } catch(ORMException e) {
      }
  }

  @Test
  public void test14()  throws Throwable  {
      SessionImpl sessionImpl0 = new SessionImpl();
      try {
        sessionImpl0.saveOrUpdate((Object) null);
        fail("Expecting exception: ORMException");
      } catch(ORMException e) {
      }
  }

  @Test
  public void test15()  throws Throwable  {
      SessionImpl sessionImpl0 = new SessionImpl();
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      FlushModeType flushModeType0 = FlushModeType.AUTO;
      LockModeType lockModeType0 = LockModeType.PESSIMISTIC_WRITE;
      Class<?> class0 = SessionImpl.class;
      // Undeclared exception!
      try {
        sessionImpl0.list("J|/O", (Map<Integer, Object>) null, (Map<String, Object>) treeMap0, false, 572, 572, flushModeType0, lockModeType0, false, class0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test16()  throws Throwable  {
      SessionImpl sessionImpl0 = new SessionImpl();
      sessionImpl0.evict((Object) null);
  }
}
