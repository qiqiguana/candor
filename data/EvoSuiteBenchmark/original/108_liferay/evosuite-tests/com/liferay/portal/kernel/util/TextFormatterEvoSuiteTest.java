/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.util.TextFormatter;
import java.util.Locale;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TextFormatterEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      String string0 = TextFormatter.format("_JkO<la+Aoi~%QTk1-", 4);
      assertNotNull(string0);
      assertEquals("_jko<la+aoi~%qtk1-", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      TextFormatter textFormatter0 = new TextFormatter();
      assertNotNull(textFormatter0);
  }

  @Test
  public void test2()  throws Throwable  {
      String string0 = TextFormatter.format("W{ju{>gv4~k", 13);
      assertEquals("W{ju{>gv4~k", string0);
      assertNotNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      String string0 = TextFormatter.format("d^1{d#20m$p", 2);
      assertEquals("d^1{d#20m$p", string0);
      assertNotNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      String string0 = TextFormatter.format("$Xow)gl|$&-.{t8", 1);
      assertNotNull(string0);
      assertEquals("$xow)gl|$&-.{t8", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      String string0 = TextFormatter.format("*&!<t ]v:`", 3);
      assertEquals("*&!<t]v:`", string0);
      assertNotNull(string0);
  }

  @Test
  public void test6()  throws Throwable  {
      String string0 = TextFormatter.format(")D21c}=*2IC", 10);
      assertNotNull(string0);
      assertEquals(")-d21c}=*2-i-c", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      Locale locale0 = Locale.UK;
      String string0 = TextFormatter.formatStorageSize(Integer.MAX_VALUE, locale0);
      assertNotNull(string0);
      assertEquals("2GB", string0);
  }

  @Test
  public void test8()  throws Throwable  {
      String string0 = TextFormatter.format("String is null", 14);
      assertEquals("String is null", string0);
      assertNotNull(string0);
  }

  @Test
  public void test9()  throws Throwable  {
      String string0 = TextFormatter.format("\r\ny", 0);
      assertNotNull(string0);
      assertEquals("Y", string0);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = TextFormatter.format("", 11);
      assertNull(string0);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = TextFormatter.format("Z~$_%4", 5);
      assertNotNull(string0);
      assertEquals("z~$_%4", string0);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = TextFormatter.format("2)", 6);
      assertEquals("2)", string0);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = TextFormatter.format("0k", 7);
      assertEquals("0k", string0);
      assertNotNull(string0);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = TextFormatter.format("+QWhBO9", 8);
      assertNotNull(string0);
      assertEquals("+qWhBO9", string0);
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = TextFormatter.format("$Xow)gl|$&-.{t8", 9);
      assertEquals("$xow)gl|$& .{t8", string0);
      assertNotNull(string0);
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = TextFormatter.format("*&!<t ]v:`", 11);
      assertEquals("*&!<t ]v:`", string0);
      assertNotNull(string0);
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = TextFormatter.format("[_a-zA-Z]+[_a-zA-Z0-9]*", 12);
      assertNotNull(string0);
      assertEquals("[_aZAZ]+[_aZAZ09]*", string0);
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = TextFormatter.format("]2QBc!q|t>pN", 15);
      assertEquals("]2q-bc!q|t>pn", string0);
      assertNotNull(string0);
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = TextFormatter.format("CN(", 33);
      assertEquals("CN(", string0);
      assertNotNull(string0);
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = TextFormatter.formatName("\r\n");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = TextFormatter.formatName("");
      assertEquals("", string0);
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = TextFormatter.formatName("*&!<t ]v:`");
      assertEquals("*&!<t ]v:`", string0);
      assertNotNull(string0);
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = TextFormatter.formatPlural("-R1 .8y");
      assertEquals("-R1 .8ies", string0);
      assertNotNull(string0);
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = TextFormatter.formatPlural("");
      assertEquals("", string0);
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = TextFormatter.formatPlural("[_a-zA-Z]+[_a-zA-Z0-9]*s");
      assertEquals("[_a-zA-Z]+[_a-zA-Z0-9]*ses", string0);
      assertNotNull(string0);
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = TextFormatter.formatPlural("[_a-zA-Z]+[_a-zA-Z0-9]*");
      assertEquals("[_a-zA-Z]+[_a-zA-Z0-9]*s", string0);
      assertNotNull(string0);
  }

  @Test
  public void test27()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      String string0 = TextFormatter.formatStorageSize((-427.56803156787333), locale0);
      assertNotNull(string0);
      assertEquals("-0k", string0);
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = TextFormatter.format("*&!<t ]v:`", 5);
      assertEquals("*&!<t]v:`", string0);
      assertNotNull(string0);
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = TextFormatter.format("j9wsV", 6);
      assertNotNull(string0);
      assertEquals("J9wsV", string0);
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = TextFormatter.format("\r\ny", 8);
      assertNotNull(string0);
      assertEquals("y", string0);
  }

  @Test
  public void test31()  throws Throwable  {
      String string0 = TextFormatter.format("c>/+w.5cE|3'G/v", 8);
      assertEquals("c>/+w.5cE|3'G/v", string0);
  }

  @Test
  public void test32()  throws Throwable  {
      String string0 = TextFormatter.format("C>/+w.5cE|3'G/v", 8);
      assertEquals("c>/+w.5cE|3'G/v", string0);
      assertNotNull(string0);
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = TextFormatter.format("Cn(", 8);
      assertEquals("cn(", string0);
      assertNotNull(string0);
  }

  @Test
  public void test34()  throws Throwable  {
      String string0 = TextFormatter.format("CN(", 8);
      assertNotNull(string0);
      assertEquals("cn(", string0);
  }

  @Test
  public void test35()  throws Throwable  {
      String string0 = TextFormatter.format("p>/+Np!Kw4Wl[", 11);
      assertEquals("p>/+Np!Kw4Wl[", string0);
      assertNotNull(string0);
  }

  @Test
  public void test36()  throws Throwable  {
      String string0 = TextFormatter.format("HQ", 11);
      assertEquals("HQ", string0);
      assertNotNull(string0);
  }

  @Test
  public void test37()  throws Throwable  {
      String string0 = TextFormatter.format("Qw", 11);
      assertEquals("qw", string0);
      assertNotNull(string0);
  }

  @Test
  public void test38()  throws Throwable  {
      String string0 = TextFormatter.format("VA6[48ZB/4,I>f", 15);
      assertEquals("va6[48zb/4,i>f", string0);
      assertNotNull(string0);
  }

  @Test
  public void test39()  throws Throwable  {
      String string0 = TextFormatter.format("[_a-zA-Z]+[_a-zA-Z0-9]*", 15);
      assertNotNull(string0);
      assertEquals("[_a-z-a-z]+[_a-z-a-z0-9]*", string0);
  }
}
