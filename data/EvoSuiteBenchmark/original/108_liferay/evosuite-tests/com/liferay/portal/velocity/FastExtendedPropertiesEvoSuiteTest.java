/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.velocity;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.velocity.FastExtendedProperties;
import java.io.IOException;
import java.util.Collection;
import java.util.Enumeration;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import org.apache.commons.collections.ExtendedProperties;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class FastExtendedPropertiesEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ExtendedProperties extendedProperties0 = new ExtendedProperties();
      FastExtendedProperties fastExtendedProperties0 = new FastExtendedProperties(extendedProperties0);
      assertNotNull(fastExtendedProperties0);
      
      boolean boolean0 = fastExtendedProperties0.equals((Object) fastExtendedProperties0);
      assertEquals(true, fastExtendedProperties0.isInitialized());
      assertEquals(true, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      FastExtendedProperties fastExtendedProperties0 = new FastExtendedProperties();
      fastExtendedProperties0.clearProperty("");
      assertEquals(0, fastExtendedProperties0.size());
  }

  @Test
  public void test2()  throws Throwable  {
      FastExtendedProperties fastExtendedProperties0 = new FastExtendedProperties();
      boolean boolean0 = fastExtendedProperties0.containsValue((Object) "Translate");
      assertEquals(true, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      FastExtendedProperties fastExtendedProperties0 = new FastExtendedProperties();
      Enumeration<Object> enumeration0 = fastExtendedProperties0.elements();
      assertEquals(false, enumeration0.hasMoreElements());
  }

  @Test
  public void test4()  throws Throwable  {
      FastExtendedProperties fastExtendedProperties0 = new FastExtendedProperties();
      int int0 = fastExtendedProperties0.hashCode();
      assertEquals(0, int0);
  }

  @Test
  public void test5()  throws Throwable  {
      FastExtendedProperties fastExtendedProperties0 = new FastExtendedProperties();
      FastExtendedProperties fastExtendedProperties1 = new FastExtendedProperties((ExtendedProperties) fastExtendedProperties0);
      assertNotNull(fastExtendedProperties1);
      assertEquals(true, fastExtendedProperties1.isInitialized());
  }

  @Test
  public void test6()  throws Throwable  {
      FastExtendedProperties fastExtendedProperties0 = new FastExtendedProperties();
      Collection<Object> collection0 = fastExtendedProperties0.values();
      assertEquals(0, collection0.size());
  }

  @Test
  public void test7()  throws Throwable  {
      FastExtendedProperties fastExtendedProperties0 = new FastExtendedProperties();
      fastExtendedProperties0.clear();
      assertEquals(false, fastExtendedProperties0.isInitialized());
  }

  @Test
  public void test8()  throws Throwable  {
      FastExtendedProperties fastExtendedProperties0 = new FastExtendedProperties();
      fastExtendedProperties0.put((Object) "1.0", (Object) "ViewportUI");
      assertEquals("{1.0=ViewportUI}", fastExtendedProperties0.toString());
      assertEquals(1, fastExtendedProperties0.size());
  }

  @Test
  public void test9()  throws Throwable  {
      FastExtendedProperties fastExtendedProperties0 = new FastExtendedProperties();
      FastExtendedProperties fastExtendedProperties1 = (FastExtendedProperties)fastExtendedProperties0.clone();
      assertNotNull(fastExtendedProperties1);
      assertNotSame(fastExtendedProperties0, fastExtendedProperties1);
  }

  @Test
  public void test10()  throws Throwable  {
      FastExtendedProperties fastExtendedProperties0 = new FastExtendedProperties();
      String string0 = fastExtendedProperties0.toString();
      assertEquals("{}", string0);
  }

  @Test
  public void test11()  throws Throwable  {
      FastExtendedProperties fastExtendedProperties0 = new FastExtendedProperties();
      boolean boolean0 = fastExtendedProperties0.isEmpty();
      assertEquals(true, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      FastExtendedProperties fastExtendedProperties0 = new FastExtendedProperties();
      fastExtendedProperties0.putAll((Map) fastExtendedProperties0);
      assertEquals(true, fastExtendedProperties0.isEmpty());
  }

  @Test
  public void test13()  throws Throwable  {
      FastExtendedProperties fastExtendedProperties0 = new FastExtendedProperties();
      // Undeclared exception!
      try {
        fastExtendedProperties0.getInteger("Xc:gCM2~");
        fail("Expecting exception: NoSuchElementException");
      } catch(NoSuchElementException e) {
        /*
         * 'Xc:gCM2~' doesn't map to an existing object
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      FastExtendedProperties fastExtendedProperties0 = new FastExtendedProperties();
      Set<Object> set0 = fastExtendedProperties0.keySet();
      assertEquals(true, set0.isEmpty());
  }

  @Test
  public void test15()  throws Throwable  {
      FastExtendedProperties fastExtendedProperties0 = new FastExtendedProperties();
      boolean boolean0 = fastExtendedProperties0.contains((Object) "Name");
      assertEquals(true, boolean0);
  }
}
