/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.servlet.filters.invoker;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.servlet.filters.invoker.Dispatcher;
import com.liferay.portal.kernel.servlet.filters.invoker.FilterMapping;
import java.util.LinkedList;
import java.util.List;
import javax.servlet.Filter;
import javax.servlet.FilterConfig;
import javax.servlet.http.HttpServletRequest;
import jcifs.http.NtlmHttpFilter;
import org.junit.BeforeClass;
import org.tuckey.web.MockFilterConfig;

@RunWith(EvoSuiteRunner.class)
public class FilterMappingEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      NtlmHttpFilter ntlmHttpFilter0 = new NtlmHttpFilter();
      MockFilterConfig mockFilterConfig0 = new MockFilterConfig();
      FilterMapping filterMapping0 = new FilterMapping((Filter) ntlmHttpFilter0, (FilterConfig) mockFilterConfig0, (List<String>) linkedList0, (List<String>) linkedList0);
      assertNotNull(filterMapping0);
      
      boolean boolean0 = filterMapping0.isMatchURLPattern("9I#[y/.()zQ", "*.r.a.");
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      NtlmHttpFilter ntlmHttpFilter0 = new NtlmHttpFilter();
      MockFilterConfig mockFilterConfig0 = new MockFilterConfig();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FilterMapping filterMapping0 = new FilterMapping((Filter) ntlmHttpFilter0, (FilterConfig) mockFilterConfig0, (List<String>) linkedList0, (List<String>) linkedList0);
      NtlmHttpFilter ntlmHttpFilter1 = (NtlmHttpFilter)filterMapping0.getFilter();
      assertSame(ntlmHttpFilter0, ntlmHttpFilter1);
  }

  @Test
  public void test2()  throws Throwable  {
      NtlmHttpFilter ntlmHttpFilter0 = new NtlmHttpFilter();
      MockFilterConfig mockFilterConfig0 = new MockFilterConfig();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FilterMapping filterMapping0 = new FilterMapping((Filter) ntlmHttpFilter0, (FilterConfig) mockFilterConfig0, (List<String>) linkedList0, (List<String>) linkedList0);
      filterMapping0.setFilter((Filter) ntlmHttpFilter0);
  }

  @Test
  public void test3()  throws Throwable  {
      NtlmHttpFilter ntlmHttpFilter0 = new NtlmHttpFilter();
      MockFilterConfig mockFilterConfig0 = new MockFilterConfig();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FilterMapping filterMapping0 = new FilterMapping((Filter) ntlmHttpFilter0, (FilterConfig) mockFilterConfig0, (List<String>) linkedList0, (List<String>) linkedList0);
      assertNotNull(filterMapping0);
      
      Dispatcher dispatcher0 = Dispatcher.FORWARD;
      boolean boolean0 = filterMapping0.isMatch((HttpServletRequest) null, dispatcher0, "FORWARD");
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      NtlmHttpFilter ntlmHttpFilter0 = new NtlmHttpFilter();
      MockFilterConfig mockFilterConfig0 = new MockFilterConfig();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FilterMapping filterMapping0 = new FilterMapping((Filter) ntlmHttpFilter0, (FilterConfig) mockFilterConfig0, (List<String>) linkedList0, (List<String>) linkedList0);
      linkedList0.add("");
      Dispatcher dispatcher0 = Dispatcher.REQUEST;
      boolean boolean0 = filterMapping0.isMatch((HttpServletRequest) null, dispatcher0, (String) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      NtlmHttpFilter ntlmHttpFilter0 = new NtlmHttpFilter();
      MockFilterConfig mockFilterConfig0 = new MockFilterConfig();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FilterMapping filterMapping0 = new FilterMapping((Filter) ntlmHttpFilter0, (FilterConfig) mockFilterConfig0, (List<String>) linkedList0, (List<String>) linkedList0);
      linkedList0.add("FORWARD");
      Dispatcher dispatcher0 = Dispatcher.FORWARD;
      filterMapping0.initDispatchers((List<String>) linkedList0);
      // Undeclared exception!
      try {
        filterMapping0.isMatch((HttpServletRequest) null, dispatcher0, "FORWARD");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      NtlmHttpFilter ntlmHttpFilter0 = new NtlmHttpFilter();
      MockFilterConfig mockFilterConfig0 = new MockFilterConfig();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("ERROR");
      FilterMapping filterMapping0 = new FilterMapping((Filter) ntlmHttpFilter0, (FilterConfig) mockFilterConfig0, (List<String>) linkedList0, (List<String>) linkedList0);
      assertNotNull(filterMapping0);
      
      Dispatcher dispatcher0 = Dispatcher.ERROR;
      boolean boolean0 = filterMapping0.isMatchDispatcher(dispatcher0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      NtlmHttpFilter ntlmHttpFilter0 = new NtlmHttpFilter();
      MockFilterConfig mockFilterConfig0 = new MockFilterConfig();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FilterMapping filterMapping0 = new FilterMapping((Filter) ntlmHttpFilter0, (FilterConfig) mockFilterConfig0, (List<String>) linkedList0, (List<String>) linkedList0);
      linkedList0.add("./*/b");
      // Undeclared exception!
      try {
        filterMapping0.initDispatchers((List<String>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Invalid dispatcher ./*_/b
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      NtlmHttpFilter ntlmHttpFilter0 = new NtlmHttpFilter();
      MockFilterConfig mockFilterConfig0 = new MockFilterConfig();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("INCLUDE");
      FilterMapping filterMapping0 = new FilterMapping((Filter) ntlmHttpFilter0, (FilterConfig) mockFilterConfig0, (List<String>) linkedList0, (List<String>) linkedList0);
      assertNotNull(filterMapping0);
      
      Dispatcher dispatcher0 = Dispatcher.INCLUDE;
      boolean boolean0 = filterMapping0.isMatchDispatcher(dispatcher0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      NtlmHttpFilter ntlmHttpFilter0 = new NtlmHttpFilter();
      MockFilterConfig mockFilterConfig0 = new MockFilterConfig();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("REQUEST");
      FilterMapping filterMapping0 = new FilterMapping((Filter) ntlmHttpFilter0, (FilterConfig) mockFilterConfig0, (List<String>) linkedList0, (List<String>) linkedList0);
      assertNotNull(filterMapping0);
  }

  @Test
  public void test10()  throws Throwable  {
      NtlmHttpFilter ntlmHttpFilter0 = new NtlmHttpFilter();
      MockFilterConfig mockFilterConfig0 = new MockFilterConfig();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FilterMapping filterMapping0 = new FilterMapping((Filter) ntlmHttpFilter0, (FilterConfig) mockFilterConfig0, (List<String>) linkedList0, (List<String>) linkedList0);
      assertNotNull(filterMapping0);
      
      Dispatcher dispatcher0 = Dispatcher.ERROR;
      boolean boolean0 = filterMapping0.isMatch((HttpServletRequest) null, dispatcher0, "FORWARD");
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      NtlmHttpFilter ntlmHttpFilter0 = new NtlmHttpFilter();
      MockFilterConfig mockFilterConfig0 = new MockFilterConfig();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FilterMapping filterMapping0 = new FilterMapping((Filter) ntlmHttpFilter0, (FilterConfig) mockFilterConfig0, (List<String>) linkedList0, (List<String>) linkedList0);
      assertNotNull(filterMapping0);
      
      Dispatcher dispatcher0 = Dispatcher.INCLUDE;
      boolean boolean0 = filterMapping0.isMatchDispatcher(dispatcher0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      NtlmHttpFilter ntlmHttpFilter0 = new NtlmHttpFilter();
      MockFilterConfig mockFilterConfig0 = new MockFilterConfig();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("ERROR");
      FilterMapping filterMapping0 = new FilterMapping((Filter) ntlmHttpFilter0, (FilterConfig) mockFilterConfig0, (List<String>) linkedList0, (List<String>) linkedList0);
      assertNotNull(filterMapping0);
      
      Dispatcher dispatcher0 = Dispatcher.REQUEST;
      boolean boolean0 = filterMapping0.isMatchDispatcher(dispatcher0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      NtlmHttpFilter ntlmHttpFilter0 = new NtlmHttpFilter();
      MockFilterConfig mockFilterConfig0 = new MockFilterConfig();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FilterMapping filterMapping0 = new FilterMapping((Filter) ntlmHttpFilter0, (FilterConfig) mockFilterConfig0, (List<String>) linkedList0, (List<String>) linkedList0);
      assertNotNull(filterMapping0);
      
      boolean boolean0 = filterMapping0.isMatchURLPattern("CEQUEST", "/*");
      assertEquals(true, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      NtlmHttpFilter ntlmHttpFilter0 = new NtlmHttpFilter();
      MockFilterConfig mockFilterConfig0 = new MockFilterConfig();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FilterMapping filterMapping0 = new FilterMapping((Filter) ntlmHttpFilter0, (FilterConfig) mockFilterConfig0, (List<String>) linkedList0, (List<String>) linkedList0);
      assertNotNull(filterMapping0);
      
      boolean boolean0 = filterMapping0.isMatchURLPattern(".", "./*");
      assertEquals(true, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      NtlmHttpFilter ntlmHttpFilter0 = new NtlmHttpFilter();
      MockFilterConfig mockFilterConfig0 = new MockFilterConfig();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FilterMapping filterMapping0 = new FilterMapping((Filter) ntlmHttpFilter0, (FilterConfig) mockFilterConfig0, (List<String>) linkedList0, (List<String>) linkedList0);
      assertNotNull(filterMapping0);
      
      boolean boolean0 = filterMapping0.isMatchURLPattern("REQUEST", "C/*");
      assertEquals(false, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      NtlmHttpFilter ntlmHttpFilter0 = new NtlmHttpFilter();
      MockFilterConfig mockFilterConfig0 = new MockFilterConfig();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FilterMapping filterMapping0 = new FilterMapping((Filter) ntlmHttpFilter0, (FilterConfig) mockFilterConfig0, (List<String>) linkedList0, (List<String>) linkedList0);
      assertNotNull(filterMapping0);
      
      boolean boolean0 = filterMapping0.isMatchURLPattern(".N*/H*", "./*");
      assertEquals(false, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      NtlmHttpFilter ntlmHttpFilter0 = new NtlmHttpFilter();
      MockFilterConfig mockFilterConfig0 = new MockFilterConfig();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FilterMapping filterMapping0 = new FilterMapping((Filter) ntlmHttpFilter0, (FilterConfig) mockFilterConfig0, (List<String>) linkedList0, (List<String>) linkedList0);
      assertNotNull(filterMapping0);
      
      boolean boolean0 = filterMapping0.isMatchURLPattern("./*/b", "./*");
      assertEquals(true, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      NtlmHttpFilter ntlmHttpFilter0 = new NtlmHttpFilter();
      MockFilterConfig mockFilterConfig0 = new MockFilterConfig();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FilterMapping filterMapping0 = new FilterMapping((Filter) ntlmHttpFilter0, (FilterConfig) mockFilterConfig0, (List<String>) linkedList0, (List<String>) linkedList0);
      assertNotNull(filterMapping0);
      
      boolean boolean0 = filterMapping0.isMatchURLPattern("CEQUEST", "*.*.");
      assertEquals(false, boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      NtlmHttpFilter ntlmHttpFilter0 = new NtlmHttpFilter();
      MockFilterConfig mockFilterConfig0 = new MockFilterConfig();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FilterMapping filterMapping0 = new FilterMapping((Filter) ntlmHttpFilter0, (FilterConfig) mockFilterConfig0, (List<String>) linkedList0, (List<String>) linkedList0);
      assertNotNull(filterMapping0);
      
      boolean boolean0 = filterMapping0.isMatchURLPattern("/*", "*.*.");
      assertEquals(false, boolean0);
  }
}
