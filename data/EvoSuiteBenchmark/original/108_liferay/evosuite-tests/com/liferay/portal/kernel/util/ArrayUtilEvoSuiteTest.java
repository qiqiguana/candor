/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.json.JSONArrayImpl;
import com.liferay.portal.kernel.json.JSONArray;
import com.liferay.portal.kernel.util.Accessor;
import com.liferay.portal.kernel.util.ArrayUtil;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ArrayUtilEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      // Undeclared exception!
      try {
        ArrayUtil.clone(doubleArray0, 230, 379);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[10];
      boolean[] booleanArray1 = ArrayUtil.clone(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
  }

  @Test
  public void test2()  throws Throwable  {
      Object[][] objectArray0 = new Object[4][6];
      Object[][] objectArray1 = ArrayUtil.append(objectArray0, objectArray0);
      assertNotNull(objectArray1);
      assertNotSame(objectArray0, objectArray1);
  }

  @Test
  public void test3()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      // Undeclared exception!
      try {
        ArrayUtil.clone(booleanArray0, 1635, 1635);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtil.append(shortArray0, (short)334);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
  }

  @Test
  public void test5()  throws Throwable  {
      char[] charArray0 = new char[7];
      char[] charArray1 = ArrayUtil.append(charArray0, 'K');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
  }

  @Test
  public void test6()  throws Throwable  {
      Float[][] floatArray0 = new Float[8][6];
      // Undeclared exception!
      try {
        ArrayUtil.clone(floatArray0, (-1318), (-1318));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short[] shortArray1 = ArrayUtil.clone(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
  }

  @Test
  public void test8()  throws Throwable  {
      long[] longArray0 = new long[5];
      long[] longArray1 = ArrayUtil.clone(longArray0, 0, 0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
  }

  @Test
  public void test9()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      boolean[] booleanArray1 = ArrayUtil.append(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
  }

  @Test
  public void test10()  throws Throwable  {
      float[][] floatArray0 = new float[5][10];
      float[] floatArray1 = ArrayUtil.clone(floatArray0[0]);
      assertNotNull(floatArray1);
  }

  @Test
  public void test11()  throws Throwable  {
      long[] longArray0 = new long[3];
      long[] longArray1 = ArrayUtil.clone(longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = ArrayUtil.append(doubleArray0, 8.686397969560455);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
  }

  @Test
  public void test13()  throws Throwable  {
      Float[][] floatArray0 = new Float[4][5];
      Float[][] floatArray1 = ArrayUtil.clone(floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[4];
      // Undeclared exception!
      try {
        ArrayUtil.clone(intArray0, (-1758), 53);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[7];
      int[] intArray1 = ArrayUtil.append(intArray0, 0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
  }

  @Test
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = ArrayUtil.append(byteArray0, (byte) (-87));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test
  public void test17()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      Float[] floatArray1 = ArrayUtil.clone(floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test
  public void test18()  throws Throwable  {
      byte[][] byteArray0 = new byte[7][10];
      byte[] byteArray1 = ArrayUtil.clone(byteArray0[2], (int) (byte)0, (int) (byte)0);
      assertNotNull(byteArray1);
  }

  @Test
  public void test19()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer[] integerArray1 = ArrayUtil.append(integerArray0, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotNull(integerArray1);
  }

  @Test
  public void test20()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try {
        ArrayUtil.toString(objectArray0, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[2];
      char[] charArray1 = ArrayUtil.clone(charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test
  public void test22()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try {
        ArrayUtil.clone(objectArray0, 739, 739);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test23()  throws Throwable  {
      Byte[][] byteArray0 = new Byte[1][6];
      Byte[] byteArray1 = new Byte[9];
      Byte[][] byteArray2 = ArrayUtil.append(byteArray0, byteArray1);
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
  }

  @Test
  public void test24()  throws Throwable  {
      long[] longArray0 = new long[10];
      long[] longArray1 = ArrayUtil.append(longArray0, 0L);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try {
        ArrayUtil.clone(charArray0, 391, 1527);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = ArrayUtil.clone(byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = ArrayUtil.distinct(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
  }

  @Test
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[3];
      int[] intArray1 = ArrayUtil.clone(intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test
  public void test29()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short[] shortArray1 = ArrayUtil.clone(shortArray0, 0, 8729);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test
  public void test30()  throws Throwable  {
      ArrayUtil arrayUtil0 = new ArrayUtil();
      assertNotNull(arrayUtil0);
  }

  @Test
  public void test31()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtil.append(floatArray0, (-919.5607F));
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test
  public void test32()  throws Throwable  {
      Byte[] byteArray0 = new Byte[9];
      Byte[] byteArray1 = ArrayUtil.append(byteArray0, byteArray0[0]);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test
  public void test33()  throws Throwable  {
      double[][] doubleArray0 = new double[5][2];
      double[] doubleArray1 = ArrayUtil.clone(doubleArray0[0]);
      assertNotNull(doubleArray1);
  }

  @Test
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try {
        ArrayUtil.toString(stringArray0, (Accessor<String, Float>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test35()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float[] floatArray1 = ArrayUtil.clone(floatArray0, 0, 0);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test
  public void test36()  throws Throwable  {
      boolean[][] booleanArray0 = new boolean[10][7];
      boolean[] booleanArray1 = ArrayUtil.append(booleanArray0);
      assertNotNull(booleanArray1);
  }

  @Test
  public void test37()  throws Throwable  {
      byte[][] byteArray0 = new byte[7][10];
      byte[] byteArray1 = ArrayUtil.append(byteArray0);
      assertNotNull(byteArray1);
  }

  @Test
  public void test38()  throws Throwable  {
      char[][] charArray0 = new char[5][10];
      char[] charArray1 = ArrayUtil.append(charArray0);
      assertNotNull(charArray1);
  }

  @Test
  public void test39()  throws Throwable  {
      double[][] doubleArray0 = new double[5][2];
      double[] doubleArray1 = ArrayUtil.append(doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test
  public void test40()  throws Throwable  {
      float[][] floatArray0 = new float[10][8];
      float[] floatArray1 = ArrayUtil.append(floatArray0);
      assertNotNull(floatArray1);
  }

  @Test
  public void test41()  throws Throwable  {
      int[][] intArray0 = new int[9][5];
      int[] intArray1 = ArrayUtil.append(intArray0);
      assertNotNull(intArray1);
  }

  @Test
  public void test42()  throws Throwable  {
      long[][] longArray0 = new long[20][9];
      long[] longArray1 = ArrayUtil.append(longArray0);
      assertNotNull(longArray1);
  }

  @Test
  public void test43()  throws Throwable  {
      short[][] shortArray0 = new short[7][1];
      short[] shortArray1 = ArrayUtil.append(shortArray0);
      assertNotNull(shortArray1);
  }

  @Test
  public void test44()  throws Throwable  {
      String[][] stringArray0 = new String[4][7];
      String[] stringArray1 = ArrayUtil.append(stringArray0);
      assertNotNull(stringArray1);
  }

  @Test
  public void test45()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean boolean0 = ArrayUtil.contains(booleanArray0, false);
      assertEquals(true, boolean0);
  }

  @Test
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      boolean boolean0 = ArrayUtil.contains(byteArray0, (byte)107);
      assertEquals(false, boolean0);
  }

  @Test
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      boolean boolean0 = ArrayUtil.contains(byteArray0, (byte)0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test48()  throws Throwable  {
      char[] charArray0 = new char[4];
      boolean boolean0 = ArrayUtil.contains(charArray0, 'b');
      assertEquals(false, boolean0);
  }

  @Test
  public void test49()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[3] = 'b';
      boolean boolean0 = ArrayUtil.contains(charArray0, 'b');
      assertEquals(true, boolean0);
  }

  @Test
  public void test50()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = ArrayUtil.contains(doubleArray0, (-1.0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test51()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      boolean boolean0 = ArrayUtil.contains(doubleArray0, 0.0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test52()  throws Throwable  {
      float[] floatArray0 = new float[2];
      boolean boolean0 = ArrayUtil.contains(floatArray0, (float) 'q');
      assertEquals(false, boolean0);
  }

  @Test
  public void test53()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[2] = (float) 'N';
      boolean boolean0 = ArrayUtil.contains(floatArray0, 78.0F);
      assertEquals(true, boolean0);
  }

  @Test
  public void test54()  throws Throwable  {
      int[] intArray0 = new int[2];
      boolean boolean0 = ArrayUtil.contains(intArray0, 240);
      assertEquals(false, boolean0);
  }

  @Test
  public void test55()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 240;
      boolean boolean0 = ArrayUtil.contains(intArray0, 240);
      assertEquals(true, boolean0);
  }

  @Test
  public void test56()  throws Throwable  {
      long[] longArray0 = new long[9];
      boolean boolean0 = ArrayUtil.contains(longArray0, (-664L));
      assertEquals(false, boolean0);
  }

  @Test
  public void test57()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[4] = (long) 'E';
      boolean boolean0 = ArrayUtil.contains(longArray0, 69L);
      assertEquals(true, boolean0);
  }

  @Test
  public void test58()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      boolean boolean0 = ArrayUtil.contains(objectArray0, objectArray0[1]);
      assertEquals(false, boolean0);
  }

  @Test
  public void test59()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) (byte) (-1);
      boolean boolean0 = ArrayUtil.contains(objectArray0, objectArray0[1]);
      assertEquals(true, boolean0);
  }

  @Test
  public void test60()  throws Throwable  {
      boolean boolean0 = ArrayUtil.contains((short[]) null, (short) (-226));
      assertEquals(false, boolean0);
  }

  @Test
  public void test61()  throws Throwable  {
      short[] shortArray0 = new short[5];
      boolean boolean0 = ArrayUtil.contains(shortArray0, (short)1093);
      assertEquals(false, boolean0);
  }

  @Test
  public void test62()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1270;
      boolean boolean0 = ArrayUtil.contains(shortArray0, (short)1270);
      assertEquals(true, boolean0);
  }

  @Test
  public void test63()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "^E7*-";
      stringArray0[1] = "";
      stringArray0[2] = "HRGk+";
      stringArray0[3] = "";
      // Undeclared exception!
      try {
        ArrayUtil.distinct(stringArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test64()  throws Throwable  {
      Long[] longArray0 = new Long[8];
      int int0 = ArrayUtil.getLength((Object[]) longArray0);
      assertEquals(8, int0);
  }

  @Test
  public void test65()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try {
        ArrayUtil.getValue(objectArray0, (-1568));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * -1568
         */
      }
  }

  @Test
  public void test66()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = ArrayUtil.getValue(objectArray0, (int) 'e');
      assertNull(object0);
  }

  @Test
  public void test67()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtil.remove(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)5;
      byte[] byteArray1 = ArrayUtil.remove(byteArray0, (byte)0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test
  public void test69()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[6] = '\u001D';
      char[] charArray1 = ArrayUtil.remove(charArray0, '\u001D');
      assertNotSame(charArray0, charArray1);
  }

  @Test
  public void test70()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = 1160.05217478728;
      double[] doubleArray1 = ArrayUtil.remove(doubleArray0, (double) 0);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test
  public void test71()  throws Throwable  {
      int[] intArray0 = new int[22];
      intArray0[0] = (int) 'E';
      int[] intArray1 = ArrayUtil.remove(intArray0, 69);
      assertNotSame(intArray0, intArray1);
  }

  @Test
  public void test72()  throws Throwable  {
      long[] longArray0 = new long[9];
      long[] longArray1 = ArrayUtil.remove(longArray0, (-239L));
      assertNotSame(longArray0, longArray1);
  }

  @Test
  public void test73()  throws Throwable  {
      char[] charArray0 = new char[10];
      long[] longArray0 = new long[9];
      long[] longArray1 = ArrayUtil.remove(longArray0, (long) charArray0[1]);
      assertNotSame(longArray1, longArray0);
  }

  @Test
  public void test74()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[3] = (short)1009;
      short[] shortArray1 = ArrayUtil.remove(shortArray0, (short)1009);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test
  public void test75()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "{L%G";
      stringArray0[1] = "2$VZ,88K4dYTV,";
      String[] stringArray1 = ArrayUtil.remove(stringArray0, "2$VZ,88K4dYTV,");
      assertNotSame(stringArray1, stringArray0);
  }

  @Test
  public void test76()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "tokenize";
      stringArray0[2] = "y";
      stringArray0[3] = "Akg";
      String[] stringArray1 = ArrayUtil.removeByPrefix(stringArray0, "");
      assertNotSame(stringArray0, stringArray1);
  }

  @Test
  public void test77()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Ih?9U4-4";
      // Undeclared exception!
      try {
        ArrayUtil.removeByPrefix(stringArray0, "vi>L`q$L2=");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test78()  throws Throwable  {
      String[] stringArray0 = new String[10];
      ArrayUtil.reverse(stringArray0);
  }

  @Test
  public void test79()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      boolean[] booleanArray1 = ArrayUtil.subset(booleanArray0, (-118), (-118));
      assertSame(booleanArray1, booleanArray0);
  }

  @Test
  public void test80()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[10];
      // Undeclared exception!
      try {
        ArrayUtil.subset(booleanArray0, 165, 165);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test81()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtil.subset(booleanArray0, 420, 340);
      assertSame(booleanArray1, booleanArray0);
  }

  @Test
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtil.subset(byteArray0, (-833), (int) (byte)0);
      assertSame(byteArray1, byteArray0);
  }

  @Test
  public void test83()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try {
        ArrayUtil.subset(byteArray0, 167, 186);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test84()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = ArrayUtil.subset(byteArray0, (int) 'j', 0);
      assertSame(byteArray0, byteArray1);
  }

  @Test
  public void test85()  throws Throwable  {
      char[] charArray0 = new char[2];
      char[] charArray1 = ArrayUtil.subset(charArray0, 0, 0);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
  }

  @Test
  public void test86()  throws Throwable  {
      char[] charArray0 = new char[2];
      char[] charArray1 = ArrayUtil.subset(charArray0, 496, 0);
      assertSame(charArray0, charArray1);
  }

  @Test
  public void test87()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = ArrayUtil.subset(doubleArray0, (-1075), 0);
      assertSame(doubleArray0, doubleArray1);
  }

  @Test
  public void test88()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = ArrayUtil.subset(doubleArray0, 655, (int) (byte)0);
      assertSame(doubleArray0, doubleArray1);
  }

  @Test
  public void test89()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = ArrayUtil.subset(doubleArray0, (int) (byte)0, (int) (byte)0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test
  public void test90()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float[] floatArray1 = ArrayUtil.subset(floatArray0, (-398), (int) ')');
      assertSame(floatArray0, floatArray1);
  }

  @Test
  public void test91()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float[] floatArray1 = ArrayUtil.subset(floatArray0, 0, 1);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test
  public void test92()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float[] floatArray1 = ArrayUtil.subset(floatArray0, 1305, 1134);
      assertSame(floatArray0, floatArray1);
  }

  @Test
  public void test93()  throws Throwable  {
      int[] intArray0 = new int[4];
      int[] intArray1 = ArrayUtil.subset(intArray0, (-661), 0);
      assertSame(intArray1, intArray0);
  }

  @Test
  public void test94()  throws Throwable  {
      int[] intArray0 = new int[8];
      // Undeclared exception!
      try {
        ArrayUtil.subset(intArray0, 14, 1527);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test95()  throws Throwable  {
      int[] intArray0 = new int[4];
      int[] intArray1 = ArrayUtil.subset(intArray0, 0, (-1222));
      assertSame(intArray0, intArray1);
  }

  @Test
  public void test96()  throws Throwable  {
      long[] longArray0 = new long[9];
      long[] longArray1 = ArrayUtil.subset(longArray0, (-639), (-639));
      assertSame(longArray1, longArray0);
  }

  @Test
  public void test97()  throws Throwable  {
      long[] longArray0 = new long[2];
      long[] longArray1 = ArrayUtil.subset(longArray0, 296, 0);
      assertSame(longArray1, longArray0);
  }

  @Test
  public void test98()  throws Throwable  {
      long[] longArray0 = new long[9];
      long[] longArray1 = ArrayUtil.subset(longArray0, 0, (-1));
      assertSame(longArray0, longArray1);
  }

  @Test
  public void test99()  throws Throwable  {
      long[] longArray0 = new long[2];
      long[] longArray1 = ArrayUtil.subset(longArray0, 0, 0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
  }

  @Test
  public void test100()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtil.subset(shortArray0, (int) (short)0, 0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test
  public void test101()  throws Throwable  {
      Float[] floatArray0 = new Float[6];
      Float[] floatArray1 = ArrayUtil.subset(floatArray0, (-1), (-1));
      assertSame(floatArray0, floatArray1);
  }

  @Test
  public void test102()  throws Throwable  {
      Double[] doubleArray0 = new Double[7];
      Double[] doubleArray1 = ArrayUtil.subset(doubleArray0, 0, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
  }

  @Test
  public void test103()  throws Throwable  {
      Short[] shortArray0 = new Short[5];
      Short[] shortArray1 = ArrayUtil.subset(shortArray0, 0, (-1353));
      assertSame(shortArray0, shortArray1);
  }

  @Test
  public void test104()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      Boolean[] booleanArray1 = ArrayUtil.toArray(booleanArray0);
      assertNotNull(booleanArray1);
  }

  @Test
  public void test105()  throws Throwable  {
      byte[][] byteArray0 = new byte[7][10];
      Byte[] byteArray1 = ArrayUtil.toArray(byteArray0[2]);
      assertNotNull(byteArray1);
  }

  @Test
  public void test106()  throws Throwable  {
      char[] charArray0 = new char[10];
      Character[] characterArray0 = ArrayUtil.toArray(charArray0);
      assertNotNull(characterArray0);
  }

  @Test
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      Double[] doubleArray1 = ArrayUtil.toArray(doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test
  public void test108()  throws Throwable  {
      float[] floatArray0 = new float[9];
      Float[] floatArray1 = ArrayUtil.toArray(floatArray0);
      assertNotNull(floatArray1);
  }

  @Test
  public void test109()  throws Throwable  {
      float[][] floatArray0 = new float[5][10];
      float[] floatArray1 = ArrayUtil.unique(floatArray0[3]);
      assertNotNull(floatArray1);
  }

  @Test
  public void test110()  throws Throwable  {
      int[] intArray0 = new int[22];
      Integer[] integerArray0 = ArrayUtil.toArray(intArray0);
      assertNotNull(integerArray0);
  }

  @Test
  public void test111()  throws Throwable  {
      long[] longArray0 = new long[1];
      Long[] longArray1 = ArrayUtil.toArray(longArray0);
      assertNotNull(longArray1);
  }

  @Test
  public void test112()  throws Throwable  {
      short[] shortArray0 = new short[9];
      Short[] shortArray1 = ArrayUtil.toArray(shortArray0);
      assertNotNull(shortArray1);
  }

  @Test
  public void test113()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Long[] longArray0 = ArrayUtil.toLongArray((Object[]) stringArray0);
      assertNotNull(longArray0);
  }

  @Test
  public void test114()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[10];
      String[] stringArray0 = ArrayUtil.toStringArray(booleanArray0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String[] stringArray0 = ArrayUtil.toStringArray(byteArray0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test116()  throws Throwable  {
      char[] charArray0 = new char[7];
      String[] stringArray0 = ArrayUtil.toStringArray(charArray0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test117()  throws Throwable  {
      Date[] dateArray0 = new Date[2];
      Date date0 = new Date(0L);
      dateArray0[0] = date0;
      dateArray0[1] = dateArray0[0];
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)DateFormat.getDateInstance(0);
      String[] stringArray0 = ArrayUtil.toStringArray(dateArray0, (DateFormat) simpleDateFormat0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      String[] stringArray0 = ArrayUtil.toStringArray(doubleArray0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test119()  throws Throwable  {
      float[] floatArray0 = new float[4];
      String[] stringArray0 = ArrayUtil.toStringArray(floatArray0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test120()  throws Throwable  {
      int[] intArray0 = new int[7];
      String[] stringArray0 = ArrayUtil.toStringArray(intArray0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test121()  throws Throwable  {
      JSONArrayImpl jSONArrayImpl0 = new JSONArrayImpl();
      JSONArrayImpl jSONArrayImpl1 = (JSONArrayImpl)jSONArrayImpl0.put(0L);
      String[] stringArray0 = ArrayUtil.toStringArray((JSONArray) jSONArrayImpl1);
      assertNotNull(stringArray0);
  }

  @Test
  public void test122()  throws Throwable  {
      long[] longArray0 = new long[9];
      String[] stringArray0 = ArrayUtil.toStringArray(longArray0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test123()  throws Throwable  {
      long[][] longArray0 = new long[4][6];
      String[] stringArray0 = ArrayUtil.toStringArray((Object[]) longArray0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test124()  throws Throwable  {
      short[] shortArray0 = new short[22];
      String[] stringArray0 = ArrayUtil.toStringArray(shortArray0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtil.unique(byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = ArrayUtil.unique(doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test
  public void test127()  throws Throwable  {
      int[] intArray0 = new int[5];
      int[] intArray1 = ArrayUtil.unique(intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test
  public void test128()  throws Throwable  {
      long[] longArray0 = new long[6];
      long[] longArray1 = ArrayUtil.unique(longArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test
  public void test129()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short[] shortArray1 = ArrayUtil.unique(shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }
}
