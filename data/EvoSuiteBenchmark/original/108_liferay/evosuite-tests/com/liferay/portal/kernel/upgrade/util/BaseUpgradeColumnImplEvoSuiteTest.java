/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.upgrade.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.upgrade.util.DateUpgradeColumnImpl;
import com.liferay.portal.kernel.upgrade.util.SwapUpgradeColumnImpl;
import com.liferay.portal.kernel.upgrade.util.TempUpgradeColumnImpl;
import com.liferay.portal.kernel.upgrade.util.ValueMapper;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BaseUpgradeColumnImplEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DateUpgradeColumnImpl dateUpgradeColumnImpl0 = new DateUpgradeColumnImpl("e@}*");
      Integer integer0 = new Integer(0);
      Integer integer1 = dateUpgradeColumnImpl0.getNewColumnType(integer0);
      assertEquals(0L, integer1.longValue());
  }

  @Test
  public void test1()  throws Throwable  {
      DateUpgradeColumnImpl dateUpgradeColumnImpl0 = new DateUpgradeColumnImpl("e@}*");
      dateUpgradeColumnImpl0.setNewValue((Object) "0");
      assertEquals("e@}*", dateUpgradeColumnImpl0.getName());
  }

  @Test
  public void test2()  throws Throwable  {
      DateUpgradeColumnImpl dateUpgradeColumnImpl0 = new DateUpgradeColumnImpl((String) null);
      // Undeclared exception!
      try {
        dateUpgradeColumnImpl0.increment();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      TempUpgradeColumnImpl tempUpgradeColumnImpl0 = new TempUpgradeColumnImpl("");
      Object object0 = tempUpgradeColumnImpl0.getNewValue();
      assertNull(object0);
  }

  @Test
  public void test4()  throws Throwable  {
      DateUpgradeColumnImpl dateUpgradeColumnImpl0 = new DateUpgradeColumnImpl("e@}*");
      Object object0 = dateUpgradeColumnImpl0.getOldValue();
      assertNull(object0);
  }

  @Test
  public void test5()  throws Throwable  {
      Integer integer0 = new Integer(0);
      TempUpgradeColumnImpl tempUpgradeColumnImpl0 = new TempUpgradeColumnImpl("e@}*", integer0);
      String string0 = tempUpgradeColumnImpl0.getName();
      assertEquals("e@}*", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      DateUpgradeColumnImpl dateUpgradeColumnImpl0 = new DateUpgradeColumnImpl("e@}*");
      dateUpgradeColumnImpl0.setOldValue((Object) "e@}*");
      assertEquals("e@}*", dateUpgradeColumnImpl0.getName());
  }

  @Test
  public void test7()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      SwapUpgradeColumnImpl swapUpgradeColumnImpl0 = new SwapUpgradeColumnImpl("", integer0, (ValueMapper) null);
      Integer integer1 = swapUpgradeColumnImpl0.getOldColumnType((Integer) (-1));
      assertSame(integer1, integer0);
  }

  @Test
  public void test8()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      TempUpgradeColumnImpl tempUpgradeColumnImpl0 = new TempUpgradeColumnImpl("");
      Integer integer1 = tempUpgradeColumnImpl0.getOldColumnType(integer0);
      assertEquals((-1.0), integer1.doubleValue(), 0.01D);
  }

  @Test
  public void test9()  throws Throwable  {
      DateUpgradeColumnImpl dateUpgradeColumnImpl0 = new DateUpgradeColumnImpl("e@}*");
      boolean boolean0 = dateUpgradeColumnImpl0.isApplicable("|uP5bNGl6zLr>`>");
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      DateUpgradeColumnImpl dateUpgradeColumnImpl0 = new DateUpgradeColumnImpl("|uP5bNGl6zLr>`>");
      boolean boolean0 = dateUpgradeColumnImpl0.isApplicable("|uP5bNGl6zLr>`>");
      assertEquals(true, boolean0);
  }
}
