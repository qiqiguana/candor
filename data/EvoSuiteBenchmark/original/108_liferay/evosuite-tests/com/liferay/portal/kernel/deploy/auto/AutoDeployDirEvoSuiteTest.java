/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.deploy.auto;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.deploy.auto.AutoDeployDir;
import com.liferay.portal.kernel.deploy.auto.AutoDeployListener;
import java.io.File;
import java.io.IOException;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class AutoDeployDirEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      LinkedList<AutoDeployListener> linkedList0 = new LinkedList<AutoDeployListener>();
      AutoDeployDir autoDeployDir0 = new AutoDeployDir("", (File) null, (File) null, (long) 57, 57, (List<AutoDeployListener>) linkedList0);
      List<AutoDeployListener> list0 = autoDeployDir0.getListeners();
      assertEquals(57L, autoDeployDir0.getInterval());
      assertNotNull(list0);
      assertEquals(57, autoDeployDir0.getBlacklistThreshold());
      assertEquals("", autoDeployDir0.getName());
  }

  @Test
  public void test1()  throws Throwable  {
      LinkedList<AutoDeployListener> linkedList0 = new LinkedList<AutoDeployListener>();
      AutoDeployDir autoDeployDir0 = new AutoDeployDir("", (File) null, (File) null, (long) 57, 57, (List<AutoDeployListener>) linkedList0);
      autoDeployDir0.buildAutoDeploymentContext((File) null);
      assertEquals(57L, autoDeployDir0.getInterval());
      assertEquals("", autoDeployDir0.getName());
      assertEquals(57, autoDeployDir0.getBlacklistThreshold());
  }

  @Test
  public void test2()  throws Throwable  {
      File file0 = new File("", "");
      LinkedList<AutoDeployListener> linkedList0 = new LinkedList<AutoDeployListener>();
      AutoDeployDir autoDeployDir0 = new AutoDeployDir("", file0, file0, (-836L), (-92), (List<AutoDeployListener>) linkedList0);
      autoDeployDir0.unregisterListener((AutoDeployListener) null);
      assertEquals((-836L), autoDeployDir0.getInterval());
      assertEquals("", autoDeployDir0.getName());
      assertEquals(-92, autoDeployDir0.getBlacklistThreshold());
  }

  @Test
  public void test3()  throws Throwable  {
      LinkedList<AutoDeployListener> linkedList0 = new LinkedList<AutoDeployListener>();
      AutoDeployDir autoDeployDir0 = new AutoDeployDir("liferay-portlet-ext.tld", (File) null, (File) null, 9223372036854775805L, 6100, (List<AutoDeployListener>) linkedList0);
      String string0 = autoDeployDir0.getName();
      assertEquals(9223372036854775805L, autoDeployDir0.getInterval());
      assertNotNull(string0);
      assertEquals(6100, autoDeployDir0.getBlacklistThreshold());
      assertEquals("liferay-portlet-ext.tld", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      LinkedList<AutoDeployListener> linkedList0 = new LinkedList<AutoDeployListener>();
      AutoDeployDir autoDeployDir0 = new AutoDeployDir("liferay-portlet-ext.tld", (File) null, (File) null, 9223372036854775805L, 6100, (List<AutoDeployListener>) linkedList0);
      autoDeployDir0.getDestDir();
      assertEquals("liferay-portlet-ext.tld", autoDeployDir0.getName());
      assertEquals(9223372036854775805L, autoDeployDir0.getInterval());
      assertEquals(6100, autoDeployDir0.getBlacklistThreshold());
  }

  @Test
  public void test5()  throws Throwable  {
      LinkedList<AutoDeployListener> linkedList0 = new LinkedList<AutoDeployListener>();
      AutoDeployDir autoDeployDir0 = new AutoDeployDir("", (File) null, (File) null, (long) 57, 57, (List<AutoDeployListener>) linkedList0);
      long long0 = autoDeployDir0.getInterval();
      assertEquals(57L, long0);
      assertEquals("", autoDeployDir0.getName());
      assertEquals(57, autoDeployDir0.getBlacklistThreshold());
  }

  @Test
  public void test6()  throws Throwable  {
      LinkedList<AutoDeployListener> linkedList0 = new LinkedList<AutoDeployListener>();
      AutoDeployDir autoDeployDir0 = new AutoDeployDir("", (File) null, (File) null, (-1124L), 1250, (List<AutoDeployListener>) linkedList0);
      autoDeployDir0.getDeployDir();
      assertEquals((-1124L), autoDeployDir0.getInterval());
      assertEquals("", autoDeployDir0.getName());
      assertEquals(1250, autoDeployDir0.getBlacklistThreshold());
  }

  @Test
  public void test7()  throws Throwable  {
      LinkedList<AutoDeployListener> linkedList0 = new LinkedList<AutoDeployListener>();
      AutoDeployDir autoDeployDir0 = new AutoDeployDir("liferay-portlet-ext.tld", (File) null, (File) null, 9223372036854775805L, 6100, (List<AutoDeployListener>) linkedList0);
      autoDeployDir0.registerListener((AutoDeployListener) null);
      assertEquals("liferay-portlet-ext.tld", autoDeployDir0.getName());
      assertEquals(9223372036854775805L, autoDeployDir0.getInterval());
      assertEquals(6100, autoDeployDir0.getBlacklistThreshold());
  }

  @Test
  public void test8()  throws Throwable  {
      LinkedList<AutoDeployListener> linkedList0 = new LinkedList<AutoDeployListener>();
      AutoDeployDir autoDeployDir0 = new AutoDeployDir("", (File) null, (File) null, (long) 57, 57, (List<AutoDeployListener>) linkedList0);
      int int0 = autoDeployDir0.getBlacklistThreshold();
      assertEquals("", autoDeployDir0.getName());
      assertEquals(57, int0);
      assertEquals(57L, autoDeployDir0.getInterval());
  }

  @Test
  public void test9()  throws Throwable  {
      File file0 = new File("", "");
      LinkedList<AutoDeployListener> linkedList0 = new LinkedList<AutoDeployListener>();
      AutoDeployDir autoDeployDir0 = new AutoDeployDir("", file0, file0, (-836L), (-92), (List<AutoDeployListener>) linkedList0);
      autoDeployDir0.start();
      assertEquals((-836L), autoDeployDir0.getInterval());
      assertEquals(-92, autoDeployDir0.getBlacklistThreshold());
      assertEquals("", autoDeployDir0.getName());
  }

  @Test
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          File file0 = new File("JY$~t*o");
          LinkedList<AutoDeployListener> linkedList0 = new LinkedList<AutoDeployListener>();
          AutoDeployDir autoDeployDir0 = new AutoDeployDir("JY$~t*o", file0, file0, (long) (-89), (-89), (List<AutoDeployListener>) linkedList0);
          // Undeclared exception!
          try {
            autoDeployDir0.start();
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission JY$~t*o write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.mkdir(File.java:1155)
             * java.io.File.mkdirs(File.java:1184)
             * com.liferay.portal.kernel.deploy.auto.AutoDeployDir.start(AutoDeployDir.java:88)
             * sun.reflect.GeneratedMethodAccessor150.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test11()  throws Throwable  {
      LinkedList<AutoDeployListener> linkedList0 = new LinkedList<AutoDeployListener>();
      AutoDeployDir autoDeployDir0 = new AutoDeployDir("", (File) null, (File) null, (-1124L), 1250, (List<AutoDeployListener>) linkedList0);
      autoDeployDir0.stop();
      assertEquals((-1124L), autoDeployDir0.getInterval());
      assertEquals("", autoDeployDir0.getName());
      assertEquals(1250, autoDeployDir0.getBlacklistThreshold());
  }

  @Test
  public void test12()  throws Throwable  {
      File file0 = new File("<");
      File file1 = file0.getCanonicalFile();
      File file2 = file1.getParentFile();
      LinkedList<AutoDeployListener> linkedList0 = new LinkedList<AutoDeployListener>();
      AutoDeployDir autoDeployDir0 = new AutoDeployDir("<", file2, file1, 10000L, 1, (List<AutoDeployListener>) linkedList0);
      autoDeployDir0.start();
      autoDeployDir0.stop();
      assertEquals(10000L, autoDeployDir0.getInterval());
      assertEquals("<", autoDeployDir0.getName());
      assertEquals(1, autoDeployDir0.getBlacklistThreshold());
  }

  @Test
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          File file0 = new File("<");
          File file1 = file0.getCanonicalFile();
          File file2 = file1.getParentFile();
          LinkedList<AutoDeployListener> linkedList0 = new LinkedList<AutoDeployListener>();
          AutoDeployDir autoDeployDir0 = new AutoDeployDir("<", file2, file1, 10000L, 1, (List<AutoDeployListener>) linkedList0);
          // Undeclared exception!
          try {
            autoDeployDir0.scanDirectory();
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission /mnt/fastdata/ac1gf/SF110/dist/108_liferay/liferay.jar write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.canWrite(File.java:711)
             * com.liferay.portal.kernel.deploy.auto.AutoDeployDir.processFile(AutoDeployDir.java:152)
             * com.liferay.portal.kernel.deploy.auto.AutoDeployDir.scanDirectory(AutoDeployDir.java:235)
             * sun.reflect.GeneratedMethodAccessor152.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test14()  throws Throwable  {
      File file0 = new File("<");
      LinkedList<AutoDeployListener> linkedList0 = new LinkedList<AutoDeployListener>();
      AutoDeployDir autoDeployDir0 = new AutoDeployDir("<", file0, file0, (long) 1, 1, (List<AutoDeployListener>) linkedList0);
      autoDeployDir0.processFile(file0);
      assertEquals("<", autoDeployDir0.getName());
      assertEquals(1, autoDeployDir0.getBlacklistThreshold());
      assertEquals(1L, autoDeployDir0.getInterval());
  }

  @Test
  public void test15()  throws Throwable  {
      File file0 = new File("", "");
      LinkedList<AutoDeployListener> linkedList0 = new LinkedList<AutoDeployListener>();
      AutoDeployDir autoDeployDir0 = new AutoDeployDir("", file0, file0, 1935L, (-18), (List<AutoDeployListener>) linkedList0);
      autoDeployDir0.scanDirectory();
      assertEquals("", autoDeployDir0.getName());
      assertEquals(1935L, autoDeployDir0.getInterval());
      assertEquals(-18, autoDeployDir0.getBlacklistThreshold());
  }
}
