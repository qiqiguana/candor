/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.xmlrpc;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.util.Tuple;
import com.liferay.portal.kernel.xmlrpc.Response;
import com.liferay.portal.kernel.xmlrpc.XmlRpcException;
import com.liferay.portal.xmlrpc.XmlRpcParser;
import java.io.IOException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class XmlRpcParserEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      XmlRpcParser xmlRpcParser0 = new XmlRpcParser();
      try {
        XmlRpcParser.wrapValue((Object) xmlRpcParser0);
        fail("Expecting exception: XmlRpcException");
      } catch(XmlRpcException e) {
        /*
         * Unsupported type class com.liferay.portal.xmlrpc.XmlRpcParser
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      Tuple tuple0 = XmlRpcParser.parseMethod("<?xml version=\"1.0\" encoding=\"UTF-8\"?><methodCall><methodName>11111111111111111111111111011110</methodName><params><param><value><string>11111111111111111111111111011110</string></value></param><param><value><string>11111111111111111111111111011110</string></value></param><param><value><i4>-34</i4></value></param></params></methodCall>");
      assertEquals(2, tuple0.getSize());
  }

  @Test
  public void test2()  throws Throwable  {
      try {
        XmlRpcParser.parseMethod("<?xml version=\"1.0\" encoding=\"UTF-8\"?><methodCall><methodName>true</methodName><params><param><value><boolean>1</boolean></value></param><param><value><boolean>0</boolean></value></param><param></param></params></methodCall>");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Not a textual event (END_ELEMENT)
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      Tuple tuple0 = XmlRpcParser.parseMethod("<?xml version=\"1.0\" encoding=\"UTF-8\"?><methodCall><methodName>g9Hfp?>~tU\"KhlA2Y</methodName><params><param><value><double>1493.833</double></value></param></params></methodCall>");
      assertEquals(2, tuple0.getSize());
  }

  @Test
  public void test4()  throws Throwable  {
      try {
        XmlRpcParser.parseMethod((String) null);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      Response response0 = XmlRpcParser.parseResponse("<value><string>11111111111111111111111111011110</string></value>");
      assertNull(response0);
  }

  @Test
  public void test6()  throws Throwable  {
      try {
        XmlRpcParser.parseResponse((String) null);
        fail("Expecting exception: XmlRpcException");
      } catch(XmlRpcException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      try {
        XmlRpcParser.parseResponse("7<AH=lBr&9");
        fail("Expecting exception: XmlRpcException");
      } catch(XmlRpcException e) {
        /*
         * 7<AH=lBr&9
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) boolean0;
      String string0 = XmlRpcParser.buildMethod("true", objectArray0);
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><methodCall><methodName>true</methodName><params><param><value><boolean>1</boolean></value></param><param></param><param></param></params></methodCall>", string0);
      assertNotNull(string0);
  }

  @Test
  public void test9()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "11111111111111111111111111011110";
      String string0 = XmlRpcParser.buildMethod("11111111111111111111111111011110", objectArray0);
      assertNotNull(string0);
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><methodCall><methodName>11111111111111111111111111011110</methodName><params><param><value><string>11111111111111111111111111011110</string></value></param><param></param><param></param></params></methodCall>", string0);
  }

  @Test
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[2] = (Object) (-34);
      String string0 = XmlRpcParser.buildMethod("11111111111111111111111111011110", objectArray0);
      assertNotNull(string0);
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><methodCall><methodName>11111111111111111111111111011110</methodName><params><param></param><param></param><param><value><i4>-34</i4></value></param></params></methodCall>", string0);
  }

  @Test
  public void test11()  throws Throwable  {
      Short short0 = new Short((short) (-22));
      String string0 = XmlRpcParser.wrapValue((Object) short0);
      assertEquals("<value><i4>-22</i4></value>", string0);
      assertNotNull(string0);
  }

  @Test
  public void test12()  throws Throwable  {
      Double double0 = new Double((double) (short) (-1001));
      String string0 = XmlRpcParser.wrapValue((Object) double0);
      assertEquals("<value><double>-1001.0</double></value>", string0);
      assertNotNull(string0);
  }

  @Test
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 1493.833F;
      String string0 = XmlRpcParser.buildMethod("g9Hfp?>~tU\"KhlA2Y", objectArray0);
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><methodCall><methodName>g9Hfp?>~tU\"KhlA2Y</methodName><params><param><value><double>1493.833</double></value></param></params></methodCall>", string0);
      assertNotNull(string0);
  }

  @Test
  public void test14()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) false;
      String string0 = XmlRpcParser.buildMethod("true", objectArray0);
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><methodCall><methodName>true</methodName><params><param></param><param><value><boolean>0</boolean></value></param><param></param></params></methodCall>", string0);
      assertNotNull(string0);
  }
}
