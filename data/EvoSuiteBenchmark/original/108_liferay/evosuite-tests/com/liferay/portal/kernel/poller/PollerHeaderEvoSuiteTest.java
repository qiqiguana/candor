/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.kernel.poller;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.poller.PollerHeader;
import java.util.HashMap;
import java.util.Map;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PollerHeaderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      PollerHeader pollerHeader0 = new PollerHeader(1873L, (-865L), 1769L, (Map<String, Boolean>) hashMap0, false);
      Map<String, Boolean> map0 = pollerHeader0.getPortletIdsMap();
      assertEquals("{_browserKey=1769, companyId=1873, portletIdsMap={}, startPolling=false, timestamp=0, userId=-865}", pollerHeader0.toString());
      assertNotNull(map0);
  }

  @Test
  public void test1()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      PollerHeader pollerHeader0 = new PollerHeader(0L, 1190L, 1190L, (Map<String, Boolean>) hashMap0, true);
      long long0 = pollerHeader0.getCompanyId();
      assertEquals("{_browserKey=1190, companyId=0, portletIdsMap={}, startPolling=true, timestamp=0, userId=1190}", pollerHeader0.toString());
      assertEquals(true, pollerHeader0.isStartPolling());
      assertEquals(0L, long0);
  }

  @Test
  public void test2()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      PollerHeader pollerHeader0 = new PollerHeader(1873L, (-865L), 1769L, (Map<String, Boolean>) hashMap0, false);
      pollerHeader0.getTimestamp();
      assertEquals("{_browserKey=1769, companyId=1873, portletIdsMap={}, startPolling=false, timestamp=0, userId=-865}", pollerHeader0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      PollerHeader pollerHeader0 = new PollerHeader(292L, 0L, 1L, (Map<String, Boolean>) hashMap0, true);
      long long0 = pollerHeader0.getBrowserKey();
      assertEquals("{_browserKey=1, companyId=292, portletIdsMap={}, startPolling=true, timestamp=0, userId=0}", pollerHeader0.toString());
      assertEquals(true, pollerHeader0.isStartPolling());
      assertEquals(1L, long0);
  }

  @Test
  public void test4()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      PollerHeader pollerHeader0 = new PollerHeader(292L, 0L, 1L, (Map<String, Boolean>) hashMap0, true);
      long long0 = pollerHeader0.getUserId();
      assertEquals("{_browserKey=1, companyId=292, portletIdsMap={}, startPolling=true, timestamp=0, userId=0}", pollerHeader0.toString());
      assertEquals(true, pollerHeader0.isStartPolling());
      assertEquals(0L, long0);
  }

  @Test
  public void test5()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      PollerHeader pollerHeader0 = new PollerHeader(292L, 0L, 1L, (Map<String, Boolean>) hashMap0, true);
      String string0 = pollerHeader0.toString();
      assertEquals(true, pollerHeader0.isStartPolling());
      assertEquals("{_browserKey=1, companyId=292, portletIdsMap={}, startPolling=true, timestamp=0, userId=0}", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      PollerHeader pollerHeader0 = new PollerHeader(1353L, (-1376L), (-1376L), (Map<String, Boolean>) null, false);
      boolean boolean0 = pollerHeader0.isStartPolling();
      assertEquals("{_browserKey=-1376, companyId=1353, portletIdsMap=null, startPolling=false, timestamp=0, userId=-1376}", pollerHeader0.toString());
      assertEquals(false, boolean0);
  }
}
