/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portal.cache.memcached;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.cache.memcached.DefaultMemcachedClientFactory;
import com.liferay.portal.cache.memcached.MemcachePortalCache;
import com.liferay.portal.cache.memcached.MemcachePortalCacheManager;
import com.liferay.portal.cache.memcached.MemcachedClientFactory;
import com.liferay.portal.kernel.cache.PortalCacheManager;
import java.net.URL;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MemcachePortalCacheManagerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      MemcachePortalCacheManager<String> memcachePortalCacheManager0 = new MemcachePortalCacheManager<String>();
      // Undeclared exception!
      try {
        memcachePortalCacheManager0.getCache(".");
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Unable to initiatlize Memcache connection
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      MemcachePortalCacheManager<MemcachePortalCache<String>> memcachePortalCacheManager0 = new MemcachePortalCacheManager<MemcachePortalCache<String>>();
      memcachePortalCacheManager0.clearAll();
  }

  @Test
  public void test2()  throws Throwable  {
      MemcachePortalCacheManager<Object> memcachePortalCacheManager0 = new MemcachePortalCacheManager<Object>();
      DefaultMemcachedClientFactory defaultMemcachedClientFactory0 = new DefaultMemcachedClientFactory();
      memcachePortalCacheManager0.setMemcachedClientPool((MemcachedClientFactory) defaultMemcachedClientFactory0);
  }

  @Test
  public void test3()  throws Throwable  {
      MemcachePortalCacheManager<MemcachePortalCache<String>> memcachePortalCacheManager0 = new MemcachePortalCacheManager<MemcachePortalCache<String>>();
      // Undeclared exception!
      try {
        memcachePortalCacheManager0.setTimeoutTimeUnit("+g");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * No enum const class java.util.concurrent.TimeUnit.+g
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      MemcachePortalCacheManager<MemcachePortalCache<String>> memcachePortalCacheManager0 = new MemcachePortalCacheManager<MemcachePortalCache<String>>();
      memcachePortalCacheManager0.removeCache("A!)o|R4@SZ");
  }

  @Test
  public void test5()  throws Throwable  {
      MemcachePortalCacheManager<MemcachePortalCache<String>> memcachePortalCacheManager0 = new MemcachePortalCacheManager<MemcachePortalCache<String>>();
      memcachePortalCacheManager0.reconfigureCaches((URL) null);
  }

  @Test
  public void test6()  throws Throwable  {
      MemcachePortalCacheManager<Object> memcachePortalCacheManager0 = new MemcachePortalCacheManager<Object>();
      memcachePortalCacheManager0.setTimeout((-1814));
  }

  @Test
  public void test7()  throws Throwable  {
      MemcachePortalCacheManager<PortalCacheManager<Integer, String>> memcachePortalCacheManager0 = new MemcachePortalCacheManager<PortalCacheManager<Integer, String>>();
      memcachePortalCacheManager0.destroy();
  }
}
