/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portlet.dynamicdatamapping.storage;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.workflow.comparator.BaseWorkflowTaskDueDateComparator;
import com.liferay.portal.kernel.workflow.comparator.BaseWorkflowTaskNameComparator;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portlet.dynamicdatamapping.StorageException;
import com.liferay.portlet.dynamicdatamapping.storage.ExpandoStorageAdapter;
import com.liferay.portlet.dynamicdatamapping.storage.Fields;
import com.liferay.portlet.dynamicdatamapping.storage.XMLStorageAdapter;
import com.liferay.portlet.dynamicdatamapping.storage.query.Condition;
import com.liferay.portlet.dynamicdatamapping.storage.query.JunctionImpl;
import com.liferay.portlet.dynamicdatamapping.storage.query.LogicalOperator;
import java.util.List;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BaseStorageAdapterEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ExpandoStorageAdapter expandoStorageAdapter0 = new ExpandoStorageAdapter();
      try {
        expandoStorageAdapter0.queryCount(0L, (Condition) null);
        fail("Expecting exception: StorageException");
      } catch(StorageException e) {
        /*
         * com.liferay.portal.kernel.bean.BeanLocatorException: BeanLocator has not been set
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      ExpandoStorageAdapter expandoStorageAdapter0 = new ExpandoStorageAdapter();
      try {
        expandoStorageAdapter0.update((-1780L), (Fields) null, (ServiceContext) null);
        fail("Expecting exception: StorageException");
      } catch(StorageException e) {
        /*
         * com.liferay.portal.kernel.bean.BeanLocatorException: BeanLocator has not been set
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      ExpandoStorageAdapter expandoStorageAdapter0 = new ExpandoStorageAdapter();
      try {
        expandoStorageAdapter0.getFieldsList(1527L, (List<String>) null);
        fail("Expecting exception: StorageException");
      } catch(StorageException e) {
        /*
         * com.liferay.portal.kernel.bean.BeanLocatorException: BeanLocator has not been set
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      XMLStorageAdapter xMLStorageAdapter0 = new XMLStorageAdapter();
      try {
        xMLStorageAdapter0.deleteByDDMStructure((-7L));
        fail("Expecting exception: StorageException");
      } catch(StorageException e) {
        /*
         * com.liferay.portal.kernel.bean.BeanLocatorException: BeanLocator has not been set
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      XMLStorageAdapter xMLStorageAdapter0 = new XMLStorageAdapter();
      try {
        xMLStorageAdapter0.getFields((-671L));
        fail("Expecting exception: StorageException");
      } catch(StorageException e) {
        /*
         * com.liferay.portal.kernel.bean.BeanLocatorException: BeanLocator has not been set
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      XMLStorageAdapter xMLStorageAdapter0 = new XMLStorageAdapter();
      long[] longArray0 = new long[10];
      BaseWorkflowTaskNameComparator baseWorkflowTaskNameComparator0 = new BaseWorkflowTaskNameComparator(true);
      try {
        xMLStorageAdapter0.getFieldsList((-1501L), longArray0, (OrderByComparator) baseWorkflowTaskNameComparator0);
        fail("Expecting exception: StorageException");
      } catch(StorageException e) {
        /*
         * com.liferay.portal.kernel.bean.BeanLocatorException: BeanLocator has not been set
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      XMLStorageAdapter xMLStorageAdapter0 = new XMLStorageAdapter();
      LogicalOperator logicalOperator0 = LogicalOperator.OR;
      JunctionImpl junctionImpl0 = new JunctionImpl(logicalOperator0);
      BaseWorkflowTaskDueDateComparator baseWorkflowTaskDueDateComparator0 = new BaseWorkflowTaskDueDateComparator();
      try {
        xMLStorageAdapter0.query(31L, (List<String>) null, (Condition) junctionImpl0, (OrderByComparator) baseWorkflowTaskDueDateComparator0);
        fail("Expecting exception: StorageException");
      } catch(StorageException e) {
        /*
         * com.liferay.portal.kernel.bean.BeanLocatorException: BeanLocator has not been set
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      ExpandoStorageAdapter expandoStorageAdapter0 = new ExpandoStorageAdapter();
      ServiceContext serviceContext0 = new ServiceContext();
      try {
        expandoStorageAdapter0.create(1759L, 1759L, (Fields) null, serviceContext0);
        fail("Expecting exception: StorageException");
      } catch(StorageException e) {
        /*
         * com.liferay.portal.kernel.bean.BeanLocatorException: BeanLocator has not been set
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      XMLStorageAdapter xMLStorageAdapter0 = new XMLStorageAdapter();
      long[] longArray0 = new long[3];
      try {
        xMLStorageAdapter0.getFieldsMap(16L, longArray0);
        fail("Expecting exception: StorageException");
      } catch(StorageException e) {
        /*
         * com.liferay.portal.kernel.bean.BeanLocatorException: BeanLocator has not been set
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      XMLStorageAdapter xMLStorageAdapter0 = new XMLStorageAdapter();
      try {
        xMLStorageAdapter0.deleteByClass((-892L));
        fail("Expecting exception: StorageException");
      } catch(StorageException e) {
        /*
         * com.liferay.portal.kernel.bean.BeanLocatorException: BeanLocator has not been set
         */
      }
  }
}
