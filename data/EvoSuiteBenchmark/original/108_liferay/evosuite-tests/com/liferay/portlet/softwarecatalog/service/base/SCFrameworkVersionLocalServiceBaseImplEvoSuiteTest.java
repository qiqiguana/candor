/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portlet.softwarecatalog.service.base;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.counter.service.CounterLocalService;
import com.liferay.portal.dao.orm.hibernate.DynamicQueryImpl;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.workflow.comparator.BaseWorkflowTaskNameComparator;
import com.liferay.portal.service.ResourceLocalService;
import com.liferay.portal.service.ResourceLocalServiceWrapper;
import com.liferay.portal.service.UserLocalService;
import com.liferay.portal.service.UserService;
import com.liferay.portal.service.persistence.UserFinder;
import com.liferay.portal.service.persistence.UserPersistence;
import com.liferay.portlet.softwarecatalog.model.SCFrameworkVersion;
import com.liferay.portlet.softwarecatalog.service.SCFrameworkVersionLocalService;
import com.liferay.portlet.softwarecatalog.service.SCFrameworkVersionLocalServiceWrapper;
import com.liferay.portlet.softwarecatalog.service.SCFrameworkVersionService;
import com.liferay.portlet.softwarecatalog.service.SCLicenseLocalService;
import com.liferay.portlet.softwarecatalog.service.SCLicenseService;
import com.liferay.portlet.softwarecatalog.service.SCProductEntryLocalService;
import com.liferay.portlet.softwarecatalog.service.SCProductEntryService;
import com.liferay.portlet.softwarecatalog.service.SCProductScreenshotLocalService;
import com.liferay.portlet.softwarecatalog.service.SCProductVersionLocalService;
import com.liferay.portlet.softwarecatalog.service.SCProductVersionService;
import com.liferay.portlet.softwarecatalog.service.impl.SCFrameworkVersionLocalServiceImpl;
import com.liferay.portlet.softwarecatalog.service.persistence.SCFrameworkVersionPersistence;
import com.liferay.portlet.softwarecatalog.service.persistence.SCLicensePersistence;
import com.liferay.portlet.softwarecatalog.service.persistence.SCProductEntryPersistence;
import com.liferay.portlet.softwarecatalog.service.persistence.SCProductScreenshotPersistence;
import com.liferay.portlet.softwarecatalog.service.persistence.SCProductVersionPersistence;
import java.io.Serializable;
import org.hibernate.criterion.DetachedCriteria;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SCFrameworkVersionLocalServiceBaseImplEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      SCLicensePersistence sCLicensePersistence0 = sCFrameworkVersionLocalServiceImpl0.getSCLicensePersistence();
      assertNull(sCLicensePersistence0);
  }

  @Test
  public void test1()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      sCFrameworkVersionLocalServiceImpl0.setSCProductScreenshotPersistence((SCProductScreenshotPersistence) null);
      assertNull(sCFrameworkVersionLocalServiceImpl0.getBeanIdentifier());
  }

  @Test
  public void test2()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      SCProductScreenshotPersistence sCProductScreenshotPersistence0 = sCFrameworkVersionLocalServiceImpl0.getSCProductScreenshotPersistence();
      assertNull(sCProductScreenshotPersistence0);
  }

  @Test
  public void test3()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      sCFrameworkVersionLocalServiceImpl0.setSCProductEntryService((SCProductEntryService) null);
      assertNull(sCFrameworkVersionLocalServiceImpl0.getBeanIdentifier());
  }

  @Test
  public void test4()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      UserPersistence userPersistence0 = sCFrameworkVersionLocalServiceImpl0.getUserPersistence();
      assertNull(userPersistence0);
  }

  @Test
  public void test5()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      UserService userService0 = sCFrameworkVersionLocalServiceImpl0.getUserService();
      assertNull(userService0);
  }

  @Test
  public void test6()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      // Undeclared exception!
      try {
        sCFrameworkVersionLocalServiceImpl0.deleteSCFrameworkVersion((-38L));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      sCFrameworkVersionLocalServiceImpl0.setUserService((UserService) null);
      assertEquals("com.liferay.portlet.softwarecatalog.model.SCFrameworkVersion", sCFrameworkVersionLocalServiceImpl0.getModelClassName());
  }

  @Test
  public void test8()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      SCLicenseService sCLicenseService0 = sCFrameworkVersionLocalServiceImpl0.getSCLicenseService();
      assertNull(sCLicenseService0);
  }

  @Test
  public void test9()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      SCProductScreenshotLocalService sCProductScreenshotLocalService0 = sCFrameworkVersionLocalServiceImpl0.getSCProductScreenshotLocalService();
      assertNull(sCProductScreenshotLocalService0);
  }

  @Test
  public void test10()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      sCFrameworkVersionLocalServiceImpl0.setSCProductScreenshotLocalService((SCProductScreenshotLocalService) null);
      assertNull(sCFrameworkVersionLocalServiceImpl0.getBeanIdentifier());
  }

  @Test
  public void test11()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      SCFrameworkVersionLocalService sCFrameworkVersionLocalService0 = sCFrameworkVersionLocalServiceImpl0.getSCFrameworkVersionLocalService();
      assertNull(sCFrameworkVersionLocalService0);
  }

  @Test
  public void test12()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      Class<?> class0 = sCFrameworkVersionLocalServiceImpl0.getModelClass();
      assertEquals(false, class0.isEnum());
  }

  @Test
  public void test13()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      // Undeclared exception!
      try {
        sCFrameworkVersionLocalServiceImpl0.updateSCFrameworkVersion((SCFrameworkVersion) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test14()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      try {
        sCFrameworkVersionLocalServiceImpl0.runSQL("%#Gvf");
        fail("Expecting exception: SystemException");
      } catch(SystemException e) {
        /*
         * java.lang.NullPointerException
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      sCFrameworkVersionLocalServiceImpl0.setSCFrameworkVersionService((SCFrameworkVersionService) null);
      assertEquals("com.liferay.portlet.softwarecatalog.model.SCFrameworkVersion", sCFrameworkVersionLocalServiceImpl0.getModelClassName());
  }

  @Test
  public void test16()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      SCFrameworkVersionLocalServiceWrapper sCFrameworkVersionLocalServiceWrapper0 = new SCFrameworkVersionLocalServiceWrapper((SCFrameworkVersionLocalService) sCFrameworkVersionLocalServiceImpl0);
      sCFrameworkVersionLocalServiceImpl0.setSCFrameworkVersionLocalService((SCFrameworkVersionLocalService) sCFrameworkVersionLocalServiceWrapper0);
      assertEquals("com.liferay.portlet.softwarecatalog.model.SCFrameworkVersion", sCFrameworkVersionLocalServiceImpl0.getModelClassName());
  }

  @Test
  public void test17()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      String string0 = sCFrameworkVersionLocalServiceImpl0.getModelClassName();
      assertEquals("com.liferay.portlet.softwarecatalog.model.SCFrameworkVersion", string0);
  }

  @Test
  public void test18()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      SCProductEntryLocalService sCProductEntryLocalService0 = sCFrameworkVersionLocalServiceImpl0.getSCProductEntryLocalService();
      assertNull(sCProductEntryLocalService0);
  }

  @Test
  public void test19()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      // Undeclared exception!
      try {
        sCFrameworkVersionLocalServiceImpl0.getSCFrameworkVersions((-552), (-552));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test20()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      // Undeclared exception!
      try {
        sCFrameworkVersionLocalServiceImpl0.dynamicQueryCount((DynamicQuery) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test21()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      String string0 = sCFrameworkVersionLocalServiceImpl0.getBeanIdentifier();
      assertNull(string0);
  }

  @Test
  public void test22()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      // Undeclared exception!
      try {
        sCFrameworkVersionLocalServiceImpl0.getSCFrameworkVersion(1L);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test23()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      sCFrameworkVersionLocalServiceImpl0.setBeanIdentifier("");
      assertEquals("", sCFrameworkVersionLocalServiceImpl0.getBeanIdentifier());
  }

  @Test
  public void test24()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      SCFrameworkVersionService sCFrameworkVersionService0 = sCFrameworkVersionLocalServiceImpl0.getSCFrameworkVersionService();
      assertNull(sCFrameworkVersionService0);
  }

  @Test
  public void test25()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      // Undeclared exception!
      try {
        sCFrameworkVersionLocalServiceImpl0.getSCFrameworkVersionsCount();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test26()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      CounterLocalService counterLocalService0 = sCFrameworkVersionLocalServiceImpl0.getCounterLocalService();
      assertNull(counterLocalService0);
  }

  @Test
  public void test27()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      SCProductEntryPersistence sCProductEntryPersistence0 = sCFrameworkVersionLocalServiceImpl0.getSCProductEntryPersistence();
      assertNull(sCProductEntryPersistence0);
  }

  @Test
  public void test28()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      // Undeclared exception!
      try {
        sCFrameworkVersionLocalServiceImpl0.dynamicQuery();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test29()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      // Undeclared exception!
      try {
        sCFrameworkVersionLocalServiceImpl0.afterPropertiesSet();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test30()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      sCFrameworkVersionLocalServiceImpl0.setSCProductVersionService((SCProductVersionService) null);
      assertEquals("com.liferay.portlet.softwarecatalog.model.SCFrameworkVersion", sCFrameworkVersionLocalServiceImpl0.getModelClassName());
  }

  @Test
  public void test31()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      // Undeclared exception!
      try {
        sCFrameworkVersionLocalServiceImpl0.getPersistedModel((Serializable) "avg");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test32()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      sCFrameworkVersionLocalServiceImpl0.setSCLicensePersistence((SCLicensePersistence) null);
      assertNull(sCFrameworkVersionLocalServiceImpl0.getBeanIdentifier());
  }

  @Test
  public void test33()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      sCFrameworkVersionLocalServiceImpl0.setSCProductEntryPersistence((SCProductEntryPersistence) null);
      assertEquals("com.liferay.portlet.softwarecatalog.model.SCFrameworkVersion", sCFrameworkVersionLocalServiceImpl0.getModelClassName());
  }

  @Test
  public void test34()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      sCFrameworkVersionLocalServiceImpl0.setUserFinder((UserFinder) null);
      assertEquals("com.liferay.portlet.softwarecatalog.model.SCFrameworkVersion", sCFrameworkVersionLocalServiceImpl0.getModelClassName());
  }

  @Test
  public void test35()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      SCProductVersionPersistence sCProductVersionPersistence0 = sCFrameworkVersionLocalServiceImpl0.getSCProductVersionPersistence();
      assertNull(sCProductVersionPersistence0);
  }

  @Test
  public void test36()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      sCFrameworkVersionLocalServiceImpl0.setSCFrameworkVersionPersistence((SCFrameworkVersionPersistence) null);
      assertNull(sCFrameworkVersionLocalServiceImpl0.getBeanIdentifier());
  }

  @Test
  public void test37()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      SCLicenseLocalService sCLicenseLocalService0 = sCFrameworkVersionLocalServiceImpl0.getSCLicenseLocalService();
      assertNull(sCLicenseLocalService0);
  }

  @Test
  public void test38()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      SCProductVersionService sCProductVersionService0 = sCFrameworkVersionLocalServiceImpl0.getSCProductVersionService();
      assertNull(sCProductVersionService0);
  }

  @Test
  public void test39()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      DetachedCriteria detachedCriteria0 = DetachedCriteria.forEntityName("yCoM", "yCoM");
      DynamicQueryImpl dynamicQueryImpl0 = new DynamicQueryImpl(detachedCriteria0);
      // Undeclared exception!
      try {
        sCFrameworkVersionLocalServiceImpl0.dynamicQuery((DynamicQuery) dynamicQueryImpl0, (-629), 20000);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test40()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      // Undeclared exception!
      try {
        sCFrameworkVersionLocalServiceImpl0.addSCFrameworkVersion((SCFrameworkVersion) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test41()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      // Undeclared exception!
      try {
        sCFrameworkVersionLocalServiceImpl0.fetchSCFrameworkVersion(1L);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test42()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      sCFrameworkVersionLocalServiceImpl0.setSCProductVersionLocalService((SCProductVersionLocalService) null);
      assertEquals("com.liferay.portlet.softwarecatalog.model.SCFrameworkVersion", sCFrameworkVersionLocalServiceImpl0.getModelClassName());
  }

  @Test
  public void test43()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      // Undeclared exception!
      try {
        sCFrameworkVersionLocalServiceImpl0.dynamicQuery((DynamicQuery) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test44()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      sCFrameworkVersionLocalServiceImpl0.setSCProductEntryLocalService((SCProductEntryLocalService) null);
      assertNull(sCFrameworkVersionLocalServiceImpl0.getBeanIdentifier());
  }

  @Test
  public void test45()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      ResourceLocalServiceWrapper resourceLocalServiceWrapper0 = new ResourceLocalServiceWrapper((ResourceLocalService) null);
      sCFrameworkVersionLocalServiceImpl0.setResourceLocalService((ResourceLocalService) resourceLocalServiceWrapper0);
      assertEquals("com.liferay.portlet.softwarecatalog.model.SCFrameworkVersion", sCFrameworkVersionLocalServiceImpl0.getModelClassName());
  }

  @Test
  public void test46()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      SCProductVersionLocalService sCProductVersionLocalService0 = sCFrameworkVersionLocalServiceImpl0.getSCProductVersionLocalService();
      assertNull(sCProductVersionLocalService0);
  }

  @Test
  public void test47()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      sCFrameworkVersionLocalServiceImpl0.setSCProductVersionPersistence((SCProductVersionPersistence) null);
      assertEquals("com.liferay.portlet.softwarecatalog.model.SCFrameworkVersion", sCFrameworkVersionLocalServiceImpl0.getModelClassName());
  }

  @Test
  public void test48()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      sCFrameworkVersionLocalServiceImpl0.setSCLicenseService((SCLicenseService) null);
      assertEquals("com.liferay.portlet.softwarecatalog.model.SCFrameworkVersion", sCFrameworkVersionLocalServiceImpl0.getModelClassName());
  }

  @Test
  public void test49()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      sCFrameworkVersionLocalServiceImpl0.setUserPersistence((UserPersistence) null);
      assertEquals("com.liferay.portlet.softwarecatalog.model.SCFrameworkVersion", sCFrameworkVersionLocalServiceImpl0.getModelClassName());
  }

  @Test
  public void test50()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      UserFinder userFinder0 = sCFrameworkVersionLocalServiceImpl0.getUserFinder();
      assertNull(userFinder0);
  }

  @Test
  public void test51()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      BaseWorkflowTaskNameComparator baseWorkflowTaskNameComparator0 = new BaseWorkflowTaskNameComparator(true);
      // Undeclared exception!
      try {
        sCFrameworkVersionLocalServiceImpl0.dynamicQuery((DynamicQuery) null, 1723, 1723, (OrderByComparator) baseWorkflowTaskNameComparator0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test52()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      // Undeclared exception!
      try {
        sCFrameworkVersionLocalServiceImpl0.destroy();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test53()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      // Undeclared exception!
      try {
        sCFrameworkVersionLocalServiceImpl0.deleteSCFrameworkVersion((SCFrameworkVersion) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test54()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      SCFrameworkVersionPersistence sCFrameworkVersionPersistence0 = sCFrameworkVersionLocalServiceImpl0.getSCFrameworkVersionPersistence();
      assertNull(sCFrameworkVersionPersistence0);
  }

  @Test
  public void test55()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      sCFrameworkVersionLocalServiceImpl0.setSCLicenseLocalService((SCLicenseLocalService) null);
      assertEquals("com.liferay.portlet.softwarecatalog.model.SCFrameworkVersion", sCFrameworkVersionLocalServiceImpl0.getModelClassName());
  }

  @Test
  public void test56()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      SCProductEntryService sCProductEntryService0 = sCFrameworkVersionLocalServiceImpl0.getSCProductEntryService();
      assertNull(sCProductEntryService0);
  }

  @Test
  public void test57()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      ResourceLocalService resourceLocalService0 = sCFrameworkVersionLocalServiceImpl0.getResourceLocalService();
      assertNull(resourceLocalService0);
  }

  @Test
  public void test58()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      sCFrameworkVersionLocalServiceImpl0.setCounterLocalService((CounterLocalService) null);
      assertNull(sCFrameworkVersionLocalServiceImpl0.getBeanIdentifier());
  }

  @Test
  public void test59()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      UserLocalService userLocalService0 = sCFrameworkVersionLocalServiceImpl0.getUserLocalService();
      assertNull(userLocalService0);
  }

  @Test
  public void test60()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      // Undeclared exception!
      try {
        sCFrameworkVersionLocalServiceImpl0.createSCFrameworkVersion((-730L));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test61()  throws Throwable  {
      SCFrameworkVersionLocalServiceImpl sCFrameworkVersionLocalServiceImpl0 = new SCFrameworkVersionLocalServiceImpl();
      sCFrameworkVersionLocalServiceImpl0.setUserLocalService((UserLocalService) null);
      assertEquals("com.liferay.portlet.softwarecatalog.model.SCFrameworkVersion", sCFrameworkVersionLocalServiceImpl0.getModelClassName());
  }
}
