/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portlet.messageboards.model;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portlet.messageboards.model.MBMailingList;
import com.liferay.portlet.messageboards.model.MBMailingListSoap;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MBMailingListSoapEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      String string0 = mBMailingListSoap0.getOutUserName();
      assertNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      String string0 = mBMailingListSoap0.getOutServerName();
      assertNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      boolean boolean0 = mBMailingListSoap0.isOutUseSSL();
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      long long0 = mBMailingListSoap0.getUserId();
      assertEquals(0L, long0);
  }

  @Test
  public void test4()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      mBMailingListSoap0.setGroupId((-1275L));
      assertEquals((-1275L), mBMailingListSoap0.getGroupId());
  }

  @Test
  public void test5()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      mBMailingListSoap0.setInPassword("\"");
      assertEquals(0L, mBMailingListSoap0.getGroupId());
  }

  @Test
  public void test6()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      mBMailingListSoap0.setOutServerName("ndyh`k(;v");
      assertEquals(0L, mBMailingListSoap0.getGroupId());
  }

  @Test
  public void test7()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      String string0 = mBMailingListSoap0.getUserName();
      assertNull(string0);
  }

  @Test
  public void test8()  throws Throwable  {
      MBMailingList[][] mBMailingListArray0 = new MBMailingList[2][2];
      // Undeclared exception!
      try {
        MBMailingListSoap.toSoapModels(mBMailingListArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      String string0 = mBMailingListSoap0.getInPassword();
      assertNull(string0);
  }

  @Test
  public void test10()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      mBMailingListSoap0.setOutCustom(false);
      assertEquals(false, mBMailingListSoap0.isOutCustom());
      assertEquals(false, mBMailingListSoap0.getOutCustom());
  }

  @Test
  public void test11()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      mBMailingListSoap0.setOutUseSSL(false);
      assertEquals(false, mBMailingListSoap0.getOutUseSSL());
      assertEquals(false, mBMailingListSoap0.isOutUseSSL());
  }

  @Test
  public void test12()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      mBMailingListSoap0.setPrimaryKey(0L);
      assertEquals(false, mBMailingListSoap0.getAllowAnonymous());
  }

  @Test
  public void test13()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      boolean boolean0 = mBMailingListSoap0.isInUseSSL();
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      String string0 = mBMailingListSoap0.getInUserName();
      assertNull(string0);
  }

  @Test
  public void test15()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      mBMailingListSoap0.setInUserName((String) null);
      assertEquals(false, mBMailingListSoap0.getActive());
  }

  @Test
  public void test16()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      int int0 = mBMailingListSoap0.getOutServerPort();
      assertEquals(0, int0);
  }

  @Test
  public void test17()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      String string0 = mBMailingListSoap0.getInProtocol();
      assertNull(string0);
  }

  @Test
  public void test18()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      boolean boolean0 = mBMailingListSoap0.isOutCustom();
      assertEquals(false, boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      mBMailingListSoap0.setUserName("GZvg[gfb; ");
      assertNull(mBMailingListSoap0.getInPassword());
  }

  @Test
  public void test20()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      mBMailingListSoap0.setUserId(0L);
      assertEquals(0L, mBMailingListSoap0.getGroupId());
  }

  @Test
  public void test21()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      mBMailingListSoap0.setUuid((String) null);
      assertEquals(false, mBMailingListSoap0.isActive());
  }

  @Test
  public void test22()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      long long0 = mBMailingListSoap0.getCompanyId();
      assertEquals(0L, long0);
  }

  @Test
  public void test23()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      boolean boolean0 = mBMailingListSoap0.getOutCustom();
      assertEquals(false, boolean0);
  }

  @Test
  public void test24()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      long long0 = mBMailingListSoap0.getCategoryId();
      assertEquals(0L, long0);
  }

  @Test
  public void test25()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      mBMailingListSoap0.setInProtocol("GZvg[gfb; ");
      assertNull(mBMailingListSoap0.getInUserName());
  }

  @Test
  public void test26()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      String string0 = mBMailingListSoap0.getOutEmailAddress();
      assertNull(string0);
  }

  @Test
  public void test27()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      boolean boolean0 = mBMailingListSoap0.getOutUseSSL();
      assertEquals(false, boolean0);
  }

  @Test
  public void test28()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      mBMailingListSoap0.setCreateDate((Date) null);
      assertEquals(false, mBMailingListSoap0.isActive());
  }

  @Test
  public void test29()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      mBMailingListSoap0.setModifiedDate((Date) null);
      assertEquals(0L, mBMailingListSoap0.getUserId());
  }

  @Test
  public void test30()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      mBMailingListSoap0.setInServerPort(18);
      assertEquals(18, mBMailingListSoap0.getInServerPort());
  }

  @Test
  public void test31()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      boolean boolean0 = mBMailingListSoap0.getActive();
      assertEquals(false, boolean0);
  }

  @Test
  public void test32()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      String string0 = mBMailingListSoap0.getInServerName();
      assertNull(string0);
  }

  @Test
  public void test33()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      String string0 = mBMailingListSoap0.getEmailAddress();
      assertNull(string0);
  }

  @Test
  public void test34()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      long long0 = mBMailingListSoap0.getMailingListId();
      assertEquals(0L, long0);
  }

  @Test
  public void test35()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      int int0 = mBMailingListSoap0.getInServerPort();
      assertEquals(0, int0);
  }

  @Test
  public void test36()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      mBMailingListSoap0.setOutPassword((String) null);
      assertNull(mBMailingListSoap0.getOutEmailAddress());
  }

  @Test
  public void test37()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      mBMailingListSoap0.setInReadInterval(0);
      assertEquals(0, mBMailingListSoap0.getInReadInterval());
  }

  @Test
  public void test38()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      mBMailingListSoap0.setOutUserName("Kt}");
      assertEquals(0L, mBMailingListSoap0.getUserId());
  }

  @Test
  public void test39()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      mBMailingListSoap0.setOutServerPort(0);
      assertEquals(0, mBMailingListSoap0.getOutServerPort());
  }

  @Test
  public void test40()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      mBMailingListSoap0.setActive(false);
      assertEquals(false, mBMailingListSoap0.isActive());
      assertEquals(false, mBMailingListSoap0.getActive());
  }

  @Test
  public void test41()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      long long0 = mBMailingListSoap0.getPrimaryKey();
      assertEquals(0L, long0);
  }

  @Test
  public void test42()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      boolean boolean0 = mBMailingListSoap0.isAllowAnonymous();
      assertEquals(false, boolean0);
  }

  @Test
  public void test43()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      int int0 = mBMailingListSoap0.getInReadInterval();
      assertEquals(0, int0);
  }

  @Test
  public void test44()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      mBMailingListSoap0.setInServerName((String) null);
      assertNull(mBMailingListSoap0.getEmailAddress());
  }

  @Test
  public void test45()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      String string0 = mBMailingListSoap0.getUuid();
      assertNull(string0);
  }

  @Test
  public void test46()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      Date date0 = mBMailingListSoap0.getModifiedDate();
      assertNull(date0);
  }

  @Test
  public void test47()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      mBMailingListSoap0.setAllowAnonymous(false);
      assertEquals(false, mBMailingListSoap0.getAllowAnonymous());
      assertEquals(false, mBMailingListSoap0.isAllowAnonymous());
  }

  @Test
  public void test48()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      mBMailingListSoap0.setInUseSSL(false);
      assertEquals(false, mBMailingListSoap0.isInUseSSL());
      assertEquals(false, mBMailingListSoap0.getInUseSSL());
  }

  @Test
  public void test49()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      boolean boolean0 = mBMailingListSoap0.getInUseSSL();
      assertEquals(false, boolean0);
  }

  @Test
  public void test50()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      boolean boolean0 = mBMailingListSoap0.getAllowAnonymous();
      assertEquals(false, boolean0);
  }

  @Test
  public void test51()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      String string0 = mBMailingListSoap0.getOutPassword();
      assertNull(string0);
  }

  @Test
  public void test52()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      mBMailingListSoap0.setCompanyId(811L);
      assertEquals(811L, mBMailingListSoap0.getCompanyId());
  }

  @Test
  public void test53()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      boolean boolean0 = mBMailingListSoap0.isActive();
      assertEquals(false, boolean0);
  }

  @Test
  public void test54()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      Date date0 = mBMailingListSoap0.getCreateDate();
      assertNull(date0);
  }

  @Test
  public void test55()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      long long0 = mBMailingListSoap0.getGroupId();
      assertEquals(0L, long0);
  }

  @Test
  public void test56()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      mBMailingListSoap0.setOutEmailAddress("ndyh`k(;v");
      assertNull(mBMailingListSoap0.getUuid());
  }

  @Test
  public void test57()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      mBMailingListSoap0.setCategoryId((-1275L));
      assertEquals((-1275L), mBMailingListSoap0.getCategoryId());
  }

  @Test
  public void test58()  throws Throwable  {
      MBMailingListSoap mBMailingListSoap0 = new MBMailingListSoap();
      mBMailingListSoap0.setEmailAddress("\"");
      assertEquals(false, mBMailingListSoap0.getOutUseSSL());
  }

  @Test
  public void test59()  throws Throwable  {
      LinkedList<MBMailingList> linkedList0 = new LinkedList<MBMailingList>();
      MBMailingListSoap[] mBMailingListSoapArray0 = MBMailingListSoap.toSoapModels((List<MBMailingList>) linkedList0);
      assertNotNull(mBMailingListSoapArray0);
  }

  @Test
  public void test60()  throws Throwable  {
      LinkedList<MBMailingList> linkedList0 = new LinkedList<MBMailingList>();
      linkedList0.add((MBMailingList) null);
      // Undeclared exception!
      try {
        MBMailingListSoap.toSoapModels((List<MBMailingList>) linkedList0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
