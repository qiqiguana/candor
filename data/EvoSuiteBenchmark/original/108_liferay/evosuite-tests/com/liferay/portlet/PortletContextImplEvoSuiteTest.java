/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portlet;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.model.Portlet;
import com.liferay.portlet.PortletContextImpl;
import com.liferay.portlet.PortletRequestDispatcherImpl;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Enumeration;
import java.util.Set;
import javax.servlet.ServletContext;
import org.junit.BeforeClass;
import org.tuckey.web.MockServletContext;

@RunWith(EvoSuiteRunner.class)
public class PortletContextImplEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      MockServletContext mockServletContext0 = new MockServletContext();
      PortletContextImpl portletContextImpl0 = new PortletContextImpl((Portlet) null, (ServletContext) mockServletContext0);
      assertNotNull(portletContextImpl0);
      
      int int0 = portletContextImpl0.getMinorVersion();
      assertEquals(0, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      MockServletContext mockServletContext0 = new MockServletContext();
      PortletContextImpl portletContextImpl0 = new PortletContextImpl((Portlet) null, (ServletContext) mockServletContext0);
      Enumeration<String> enumeration0 = portletContextImpl0.getContainerRuntimeOptions();
      assertNull(enumeration0);
  }

  @Test
  public void test2()  throws Throwable  {
      MockServletContext mockServletContext0 = new MockServletContext();
      PortletContextImpl portletContextImpl0 = new PortletContextImpl((Portlet) null, (ServletContext) mockServletContext0);
      InputStream inputStream0 = portletContextImpl0.getResourceAsStream("cKTDYWKCLJ:r8I");
      assertNull(inputStream0);
  }

  @Test
  public void test3()  throws Throwable  {
      MockServletContext mockServletContext0 = new MockServletContext();
      PortletContextImpl portletContextImpl0 = new PortletContextImpl((Portlet) null, (ServletContext) mockServletContext0);
      // Undeclared exception!
      try {
        portletContextImpl0.isWARFile();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      MockServletContext mockServletContext0 = new MockServletContext();
      PortletContextImpl portletContextImpl0 = new PortletContextImpl((Portlet) null, (ServletContext) mockServletContext0);
      Enumeration<String> enumeration0 = portletContextImpl0.getAttributeNames();
      assertNull(enumeration0);
  }

  @Test
  public void test5()  throws Throwable  {
      MockServletContext mockServletContext0 = new MockServletContext();
      PortletContextImpl portletContextImpl0 = new PortletContextImpl((Portlet) null, (ServletContext) mockServletContext0);
      Enumeration<String> enumeration0 = portletContextImpl0.getInitParameterNames();
      assertNull(enumeration0);
  }

  @Test
  public void test6()  throws Throwable  {
      MockServletContext mockServletContext0 = new MockServletContext();
      PortletContextImpl portletContextImpl0 = new PortletContextImpl((Portlet) null, (ServletContext) mockServletContext0);
      assertNotNull(portletContextImpl0);
      
      int int0 = portletContextImpl0.getMajorVersion();
      assertEquals(2, int0);
  }

  @Test
  public void test7()  throws Throwable  {
      MockServletContext mockServletContext0 = new MockServletContext();
      PortletContextImpl portletContextImpl0 = new PortletContextImpl((Portlet) null, (ServletContext) mockServletContext0);
      String string0 = portletContextImpl0.getServerInfo();
      assertEquals("Liferay Portal Community Edition / 6.2.0", string0);
  }

  @Test
  public void test8()  throws Throwable  {
      MockServletContext mockServletContext0 = new MockServletContext();
      PortletContextImpl portletContextImpl0 = new PortletContextImpl((Portlet) null, (ServletContext) mockServletContext0);
      String string0 = portletContextImpl0.getPortletContextName();
      assertEquals("", string0);
  }

  @Test
  public void test9()  throws Throwable  {
      MockServletContext mockServletContext0 = new MockServletContext();
      PortletContextImpl portletContextImpl0 = new PortletContextImpl((Portlet) null, (ServletContext) mockServletContext0);
      String string0 = portletContextImpl0.getMimeType("%@faI2N");
      assertNull(string0);
  }

  @Test
  public void test10()  throws Throwable  {
      MockServletContext mockServletContext0 = new MockServletContext();
      PortletContextImpl portletContextImpl0 = new PortletContextImpl((Portlet) null, (ServletContext) mockServletContext0);
      Set<String> set0 = portletContextImpl0.getResourcePaths("IUDaK");
      assertNull(set0);
  }

  @Test
  public void test11()  throws Throwable  {
      MockServletContext mockServletContext0 = new MockServletContext();
      PortletContextImpl portletContextImpl0 = new PortletContextImpl((Portlet) null, (ServletContext) mockServletContext0);
      MockServletContext mockServletContext1 = (MockServletContext)portletContextImpl0.getServletContext();
      assertNull(mockServletContext1.getServerInfo());
  }

  @Test
  public void test12()  throws Throwable  {
      MockServletContext mockServletContext0 = new MockServletContext();
      PortletContextImpl portletContextImpl0 = new PortletContextImpl((Portlet) null, (ServletContext) mockServletContext0);
      Portlet portlet0 = portletContextImpl0.getPortlet();
      assertNull(portlet0);
  }

  @Test
  public void test13()  throws Throwable  {
      MockServletContext mockServletContext0 = new MockServletContext();
      PortletContextImpl portletContextImpl0 = new PortletContextImpl((Portlet) null, (ServletContext) mockServletContext0);
      String string0 = portletContextImpl0.getRealPath("bdoFb");
      assertNull(string0);
  }

  @Test
  public void test14()  throws Throwable  {
      MockServletContext mockServletContext0 = new MockServletContext();
      PortletContextImpl portletContextImpl0 = new PortletContextImpl((Portlet) null, (ServletContext) mockServletContext0);
      Object object0 = portletContextImpl0.getAttribute("%@faI2N");
      assertNull(object0);
  }

  @Test
  public void test15()  throws Throwable  {
      MockServletContext mockServletContext0 = new MockServletContext();
      PortletContextImpl portletContextImpl0 = new PortletContextImpl((Portlet) null, (ServletContext) mockServletContext0);
      // Undeclared exception!
      try {
        portletContextImpl0.getAttribute((String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }

  @Test
  public void test16()  throws Throwable  {
      MockServletContext mockServletContext0 = new MockServletContext();
      PortletContextImpl portletContextImpl0 = new PortletContextImpl((Portlet) null, (ServletContext) mockServletContext0);
      String string0 = portletContextImpl0.getInitParameter("IUDaK");
      assertNull(string0);
  }

  @Test
  public void test17()  throws Throwable  {
      MockServletContext mockServletContext0 = new MockServletContext();
      PortletContextImpl portletContextImpl0 = new PortletContextImpl((Portlet) null, (ServletContext) mockServletContext0);
      // Undeclared exception!
      try {
        portletContextImpl0.getInitParameter((String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }

  @Test
  public void test18()  throws Throwable  {
      MockServletContext mockServletContext0 = new MockServletContext();
      PortletContextImpl portletContextImpl0 = new PortletContextImpl((Portlet) null, (ServletContext) mockServletContext0);
      PortletRequestDispatcherImpl portletRequestDispatcherImpl0 = (PortletRequestDispatcherImpl)portletContextImpl0.getNamedDispatcher((String) null);
      assertNull(portletRequestDispatcherImpl0);
  }

  @Test
  public void test19()  throws Throwable  {
      MockServletContext mockServletContext0 = new MockServletContext();
      PortletContextImpl portletContextImpl0 = new PortletContextImpl((Portlet) null, (ServletContext) mockServletContext0);
      PortletRequestDispatcherImpl portletRequestDispatcherImpl0 = (PortletRequestDispatcherImpl)portletContextImpl0.getRequestDispatcher("J.yR#p#T:Lnr#_Z8");
      assertNull(portletRequestDispatcherImpl0);
  }

  @Test
  public void test20()  throws Throwable  {
      MockServletContext mockServletContext0 = new MockServletContext();
      PortletContextImpl portletContextImpl0 = new PortletContextImpl((Portlet) null, (ServletContext) mockServletContext0);
      try {
        portletContextImpl0.getResource((String) null);
        fail("Expecting exception: MalformedURLException");
      } catch(MalformedURLException e) {
      }
  }

  @Test
  public void test21()  throws Throwable  {
      MockServletContext mockServletContext0 = new MockServletContext();
      PortletContextImpl portletContextImpl0 = new PortletContextImpl((Portlet) null, (ServletContext) mockServletContext0);
      URL uRL0 = portletContextImpl0.getResource("/^ib#I(LR<k]^");
      assertNull(uRL0);
  }

  @Test
  public void test22()  throws Throwable  {
      MockServletContext mockServletContext0 = new MockServletContext();
      PortletContextImpl portletContextImpl0 = new PortletContextImpl((Portlet) null, (ServletContext) mockServletContext0);
      try {
        portletContextImpl0.getResource("<![CCDATA[");
        fail("Expecting exception: MalformedURLException");
      } catch(MalformedURLException e) {
      }
  }

  @Test
  public void test23()  throws Throwable  {
      MockServletContext mockServletContext0 = new MockServletContext();
      PortletContextImpl portletContextImpl0 = new PortletContextImpl((Portlet) null, (ServletContext) mockServletContext0);
      portletContextImpl0.log("IUDaK");
      assertEquals("Liferay Portal Community Edition / 6.2.0", portletContextImpl0.getServerInfo());
  }

  @Test
  public void test24()  throws Throwable  {
      MockServletContext mockServletContext0 = new MockServletContext();
      PortletContextImpl portletContextImpl0 = new PortletContextImpl((Portlet) null, (ServletContext) mockServletContext0);
      portletContextImpl0.log("cKTDYWKCLJ:r8I", (Throwable) null);
      assertEquals(0, portletContextImpl0.getMinorVersion());
  }

  @Test
  public void test25()  throws Throwable  {
      MockServletContext mockServletContext0 = new MockServletContext();
      PortletContextImpl portletContextImpl0 = new PortletContextImpl((Portlet) null, (ServletContext) mockServletContext0);
      portletContextImpl0.removeAttribute("");
      assertEquals("Liferay Portal Community Edition / 6.2.0", portletContextImpl0.getServerInfo());
  }

  @Test
  public void test26()  throws Throwable  {
      MockServletContext mockServletContext0 = new MockServletContext();
      PortletContextImpl portletContextImpl0 = new PortletContextImpl((Portlet) null, (ServletContext) mockServletContext0);
      // Undeclared exception!
      try {
        portletContextImpl0.removeAttribute((String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }

  @Test
  public void test27()  throws Throwable  {
      MockServletContext mockServletContext0 = new MockServletContext();
      PortletContextImpl portletContextImpl0 = new PortletContextImpl((Portlet) null, (ServletContext) mockServletContext0);
      portletContextImpl0.setAttribute("J.yR#p#T:Lnr#_Z8", "Liferay Portal Community Edition / 6.2.0");
      assertEquals("Liferay Portal Community Edition / 6.2.0", portletContextImpl0.getServerInfo());
  }

  @Test
  public void test28()  throws Throwable  {
      MockServletContext mockServletContext0 = new MockServletContext();
      PortletContextImpl portletContextImpl0 = new PortletContextImpl((Portlet) null, (ServletContext) mockServletContext0);
      // Undeclared exception!
      try {
        portletContextImpl0.setAttribute((String) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }
}
