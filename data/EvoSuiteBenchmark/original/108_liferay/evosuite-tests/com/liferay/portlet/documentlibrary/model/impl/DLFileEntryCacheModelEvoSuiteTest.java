/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portlet.documentlibrary.model.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portlet.documentlibrary.model.impl.DLFileEntryCacheModel;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import javax.swing.DebugGraphics;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DLFileEntryCacheModelEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DLFileEntryCacheModel dLFileEntryCacheModel0 = new DLFileEntryCacheModel();
      // Undeclared exception!
      try {
        dLFileEntryCacheModel0.readExternal((ObjectInput) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      DLFileEntryCacheModel dLFileEntryCacheModel0 = new DLFileEntryCacheModel();
      String string0 = dLFileEntryCacheModel0.toString();
      assertEquals("{uuid=null, fileEntryId=0, groupId=0, companyId=0, userId=0, userName=null, versionUserId=0, versionUserName=null, createDate=0, modifiedDate=0, repositoryId=0, folderId=0, name=null, extension=null, mimeType=null, title=null, description=null, extraSettings=null, fileEntryTypeId=0, version=null, size=0, readCount=0, smallImageId=0, largeImageId=0, custom1ImageId=0, custom2ImageId=0, manualCheckInRequired=false}", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      DLFileEntryCacheModel dLFileEntryCacheModel0 = new DLFileEntryCacheModel();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PrintStream printStream0 = new PrintStream((OutputStream) pipedOutputStream0, false);
      dLFileEntryCacheModel0.uuid = "";
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) printStream0);
      dLFileEntryCacheModel0.writeExternal((ObjectOutput) objectOutputStream0);
  }

  @Test
  public void test3()  throws Throwable  {
      DLFileEntryCacheModel dLFileEntryCacheModel0 = new DLFileEntryCacheModel();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PrintStream printStream0 = new PrintStream((OutputStream) pipedOutputStream0, false);
      dLFileEntryCacheModel0.userName = "}M";
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) printStream0);
      dLFileEntryCacheModel0.writeExternal((ObjectOutput) objectOutputStream0);
  }

  @Test
  public void test4()  throws Throwable  {
      DLFileEntryCacheModel dLFileEntryCacheModel0 = new DLFileEntryCacheModel();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PrintStream printStream0 = new PrintStream((OutputStream) pipedOutputStream0, false);
      dLFileEntryCacheModel0.versionUserName = "H`i_nrD>";
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) printStream0);
      dLFileEntryCacheModel0.writeExternal((ObjectOutput) objectOutputStream0);
  }

  @Test
  public void test5()  throws Throwable  {
      DLFileEntryCacheModel dLFileEntryCacheModel0 = new DLFileEntryCacheModel();
      dLFileEntryCacheModel0.extension = "<";
      PrintStream printStream0 = DebugGraphics.logStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) printStream0);
      dLFileEntryCacheModel0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(0L, dLFileEntryCacheModel0.custom2ImageId);
  }

  @Test
  public void test6()  throws Throwable  {
      DLFileEntryCacheModel dLFileEntryCacheModel0 = new DLFileEntryCacheModel();
      PrintStream printStream0 = DebugGraphics.logStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) printStream0);
      dLFileEntryCacheModel0.mimeType = "<";
      dLFileEntryCacheModel0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(0L, dLFileEntryCacheModel0.custom2ImageId);
  }
}
