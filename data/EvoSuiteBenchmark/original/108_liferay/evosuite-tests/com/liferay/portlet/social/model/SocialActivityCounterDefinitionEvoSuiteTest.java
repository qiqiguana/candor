/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portlet.social.model;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portlet.social.model.SocialActivityCounterDefinition;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SocialActivityCounterDefinitionEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SocialActivityCounterDefinition socialActivityCounterDefinition0 = new SocialActivityCounterDefinition();
      SocialActivityCounterDefinition socialActivityCounterDefinition1 = socialActivityCounterDefinition0.clone();
      socialActivityCounterDefinition0.setEnabled(false);
      boolean boolean0 = socialActivityCounterDefinition0.equals((Object) socialActivityCounterDefinition1);
      assertEquals(false, boolean0);
      assertEquals(false, socialActivityCounterDefinition0.isEnabled());
  }

  @Test
  public void test1()  throws Throwable  {
      SocialActivityCounterDefinition socialActivityCounterDefinition0 = new SocialActivityCounterDefinition();
      int int0 = socialActivityCounterDefinition0.getLimitPeriod();
      assertEquals(1, int0);
      assertEquals(1, socialActivityCounterDefinition0.getIncrement());
      assertEquals(0, socialActivityCounterDefinition0.getPeriodLength());
      assertEquals(true, socialActivityCounterDefinition0.isEnabled());
      assertEquals(true, socialActivityCounterDefinition0.isLimitEnabled());
  }

  @Test
  public void test2()  throws Throwable  {
      SocialActivityCounterDefinition socialActivityCounterDefinition0 = new SocialActivityCounterDefinition();
      int int0 = socialActivityCounterDefinition0.getIncrement();
      assertEquals(1, socialActivityCounterDefinition0.getLimitPeriod());
      assertEquals(true, socialActivityCounterDefinition0.isLimitEnabled());
      assertEquals(0, socialActivityCounterDefinition0.getPeriodLength());
      assertEquals(true, socialActivityCounterDefinition0.isEnabled());
      assertEquals(1, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      SocialActivityCounterDefinition socialActivityCounterDefinition0 = new SocialActivityCounterDefinition();
      // Undeclared exception!
      try {
        socialActivityCounterDefinition0.getKey();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      SocialActivityCounterDefinition socialActivityCounterDefinition0 = new SocialActivityCounterDefinition();
      int int0 = socialActivityCounterDefinition0.getPeriodLength();
      assertEquals(true, socialActivityCounterDefinition0.isEnabled());
      assertEquals(true, socialActivityCounterDefinition0.isLimitEnabled());
      assertEquals(0, int0);
      assertEquals(1, socialActivityCounterDefinition0.getLimitPeriod());
      assertEquals(1, socialActivityCounterDefinition0.getIncrement());
  }

  @Test
  public void test5()  throws Throwable  {
      SocialActivityCounterDefinition socialActivityCounterDefinition0 = new SocialActivityCounterDefinition();
      socialActivityCounterDefinition0.getName();
      assertEquals(true, socialActivityCounterDefinition0.isLimitEnabled());
      assertEquals(1, socialActivityCounterDefinition0.getLimitPeriod());
      assertEquals(0, socialActivityCounterDefinition0.getPeriodLength());
      assertEquals(1, socialActivityCounterDefinition0.getIncrement());
      assertEquals(true, socialActivityCounterDefinition0.isEnabled());
  }

  @Test
  public void test6()  throws Throwable  {
      SocialActivityCounterDefinition socialActivityCounterDefinition0 = new SocialActivityCounterDefinition();
      boolean boolean0 = socialActivityCounterDefinition0.isEnabled();
      assertEquals(true, socialActivityCounterDefinition0.isLimitEnabled());
      assertEquals(1, socialActivityCounterDefinition0.getIncrement());
      assertEquals(0, socialActivityCounterDefinition0.getPeriodLength());
      assertEquals(1, socialActivityCounterDefinition0.getLimitPeriod());
      assertEquals(true, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      SocialActivityCounterDefinition socialActivityCounterDefinition0 = new SocialActivityCounterDefinition();
      boolean boolean0 = socialActivityCounterDefinition0.isLimitEnabled();
      assertEquals(true, boolean0);
      assertEquals(0, socialActivityCounterDefinition0.getPeriodLength());
      assertEquals(1, socialActivityCounterDefinition0.getLimitPeriod());
      assertEquals(true, socialActivityCounterDefinition0.isEnabled());
      assertEquals(1, socialActivityCounterDefinition0.getIncrement());
  }

  @Test
  public void test8()  throws Throwable  {
      SocialActivityCounterDefinition socialActivityCounterDefinition0 = new SocialActivityCounterDefinition();
      socialActivityCounterDefinition0.isTransient();
      assertEquals(true, socialActivityCounterDefinition0.isLimitEnabled());
      assertEquals(1, socialActivityCounterDefinition0.getIncrement());
      assertEquals(0, socialActivityCounterDefinition0.getPeriodLength());
      assertEquals(true, socialActivityCounterDefinition0.isEnabled());
      assertEquals(1, socialActivityCounterDefinition0.getLimitPeriod());
  }

  @Test
  public void test9()  throws Throwable  {
      SocialActivityCounterDefinition socialActivityCounterDefinition0 = new SocialActivityCounterDefinition();
      int int0 = socialActivityCounterDefinition0.getLimitValue();
      assertEquals(0, socialActivityCounterDefinition0.getPeriodLength());
      assertEquals(0, int0);
      assertEquals(1, socialActivityCounterDefinition0.getIncrement());
      assertEquals(1, socialActivityCounterDefinition0.getLimitPeriod());
      assertEquals(true, socialActivityCounterDefinition0.isLimitEnabled());
      assertEquals(true, socialActivityCounterDefinition0.isEnabled());
  }

  @Test
  public void test10()  throws Throwable  {
      SocialActivityCounterDefinition socialActivityCounterDefinition0 = new SocialActivityCounterDefinition();
      int int0 = socialActivityCounterDefinition0.getOwnerType();
      assertEquals(1, socialActivityCounterDefinition0.getLimitPeriod());
      assertEquals(0, socialActivityCounterDefinition0.getPeriodLength());
      assertEquals(true, socialActivityCounterDefinition0.isEnabled());
      assertEquals(0, int0);
      assertEquals(true, socialActivityCounterDefinition0.isLimitEnabled());
      assertEquals(1, socialActivityCounterDefinition0.getIncrement());
  }

  @Test
  public void test11()  throws Throwable  {
      SocialActivityCounterDefinition socialActivityCounterDefinition0 = new SocialActivityCounterDefinition();
      boolean boolean0 = socialActivityCounterDefinition0.equals((Object) null);
      assertEquals(1, socialActivityCounterDefinition0.getIncrement());
      assertEquals(true, socialActivityCounterDefinition0.isLimitEnabled());
      assertEquals(false, boolean0);
      assertEquals(0, socialActivityCounterDefinition0.getPeriodLength());
      assertEquals(true, socialActivityCounterDefinition0.isEnabled());
      assertEquals(1, socialActivityCounterDefinition0.getLimitPeriod());
  }

  @Test
  public void test12()  throws Throwable  {
      SocialActivityCounterDefinition socialActivityCounterDefinition0 = new SocialActivityCounterDefinition();
      SocialActivityCounterDefinition socialActivityCounterDefinition1 = socialActivityCounterDefinition0.clone();
      boolean boolean0 = socialActivityCounterDefinition1.equals((Object) socialActivityCounterDefinition0);
      assertEquals(true, boolean0);
      assertEquals(0, socialActivityCounterDefinition0.getPeriodLength());
  }

  @Test
  public void test13()  throws Throwable  {
      SocialActivityCounterDefinition socialActivityCounterDefinition0 = new SocialActivityCounterDefinition();
      SocialActivityCounterDefinition socialActivityCounterDefinition1 = new SocialActivityCounterDefinition();
      socialActivityCounterDefinition0.setIncrement(0);
      boolean boolean0 = socialActivityCounterDefinition0.equals((Object) socialActivityCounterDefinition1);
      assertEquals(0, socialActivityCounterDefinition0.getIncrement());
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      SocialActivityCounterDefinition socialActivityCounterDefinition0 = new SocialActivityCounterDefinition();
      SocialActivityCounterDefinition socialActivityCounterDefinition1 = socialActivityCounterDefinition0.clone();
      socialActivityCounterDefinition0.setLimitEnabled(false);
      boolean boolean0 = socialActivityCounterDefinition0.equals((Object) socialActivityCounterDefinition1);
      assertEquals(false, socialActivityCounterDefinition0.isLimitEnabled());
      assertEquals(false, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      SocialActivityCounterDefinition socialActivityCounterDefinition0 = new SocialActivityCounterDefinition();
      SocialActivityCounterDefinition socialActivityCounterDefinition1 = new SocialActivityCounterDefinition();
      socialActivityCounterDefinition0.setLimitPeriod("");
      boolean boolean0 = socialActivityCounterDefinition1.equals((Object) socialActivityCounterDefinition0);
      assertEquals(3, socialActivityCounterDefinition0.getLimitPeriod());
      assertEquals(false, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      SocialActivityCounterDefinition socialActivityCounterDefinition0 = new SocialActivityCounterDefinition();
      SocialActivityCounterDefinition socialActivityCounterDefinition1 = socialActivityCounterDefinition0.clone();
      socialActivityCounterDefinition0.setLimitValue((-1200));
      boolean boolean0 = socialActivityCounterDefinition1.equals((Object) socialActivityCounterDefinition0);
      assertEquals(-1200, socialActivityCounterDefinition0.getLimitValue());
      assertEquals(false, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      SocialActivityCounterDefinition socialActivityCounterDefinition0 = new SocialActivityCounterDefinition();
      socialActivityCounterDefinition0.setName("xq#&");
      SocialActivityCounterDefinition socialActivityCounterDefinition1 = new SocialActivityCounterDefinition();
      boolean boolean0 = socialActivityCounterDefinition0.equals((Object) socialActivityCounterDefinition1);
      assertEquals(1, socialActivityCounterDefinition0.getLimitPeriod());
      assertEquals(0, socialActivityCounterDefinition0.getPeriodLength());
      assertFalse(socialActivityCounterDefinition1.equals(socialActivityCounterDefinition0));
      assertEquals(false, boolean0);
      assertEquals(1, socialActivityCounterDefinition0.getIncrement());
      assertEquals(true, socialActivityCounterDefinition0.isLimitEnabled());
      assertEquals(true, socialActivityCounterDefinition0.isEnabled());
  }

  @Test
  public void test18()  throws Throwable  {
      SocialActivityCounterDefinition socialActivityCounterDefinition0 = new SocialActivityCounterDefinition();
      socialActivityCounterDefinition0.setOwnerType("actor");
      SocialActivityCounterDefinition socialActivityCounterDefinition1 = new SocialActivityCounterDefinition();
      boolean boolean0 = socialActivityCounterDefinition0.equals((Object) socialActivityCounterDefinition1);
      assertEquals(1, socialActivityCounterDefinition0.getOwnerType());
      assertEquals(false, boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      SocialActivityCounterDefinition socialActivityCounterDefinition0 = new SocialActivityCounterDefinition();
      socialActivityCounterDefinition0.setPeriodLength((-340));
      SocialActivityCounterDefinition socialActivityCounterDefinition1 = new SocialActivityCounterDefinition();
      boolean boolean0 = socialActivityCounterDefinition0.equals((Object) socialActivityCounterDefinition1);
      assertEquals(-340, socialActivityCounterDefinition0.getPeriodLength());
      assertEquals(false, boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      SocialActivityCounterDefinition socialActivityCounterDefinition0 = new SocialActivityCounterDefinition();
      socialActivityCounterDefinition0.setTransient(true);
      SocialActivityCounterDefinition socialActivityCounterDefinition1 = new SocialActivityCounterDefinition();
      boolean boolean0 = socialActivityCounterDefinition1.equals((Object) socialActivityCounterDefinition0);
      assertEquals(true, socialActivityCounterDefinition0.isTransient());
      assertEquals(false, boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      SocialActivityCounterDefinition socialActivityCounterDefinition0 = new SocialActivityCounterDefinition();
      socialActivityCounterDefinition0.setLimitPeriod("day");
      assertEquals(true, socialActivityCounterDefinition0.isLimitEnabled());
      assertEquals(0, socialActivityCounterDefinition0.getPeriodLength());
      assertEquals(true, socialActivityCounterDefinition0.isEnabled());
      assertEquals(1, socialActivityCounterDefinition0.getLimitPeriod());
      assertEquals(1, socialActivityCounterDefinition0.getIncrement());
  }

  @Test
  public void test22()  throws Throwable  {
      SocialActivityCounterDefinition socialActivityCounterDefinition0 = new SocialActivityCounterDefinition();
      socialActivityCounterDefinition0.setLimitPeriod("lifetime");
      assertEquals(2, socialActivityCounterDefinition0.getLimitPeriod());
      assertEquals(0, socialActivityCounterDefinition0.getPeriodLength());
  }

  @Test
  public void test23()  throws Throwable  {
      SocialActivityCounterDefinition socialActivityCounterDefinition0 = new SocialActivityCounterDefinition();
      socialActivityCounterDefinition0.setOwnerType("asset");
      assertEquals(2, socialActivityCounterDefinition0.getOwnerType());
  }

  @Test
  public void test24()  throws Throwable  {
      SocialActivityCounterDefinition socialActivityCounterDefinition0 = new SocialActivityCounterDefinition();
      socialActivityCounterDefinition0.setOwnerType("B3%");
      assertEquals(0, socialActivityCounterDefinition0.getPeriodLength());
      assertEquals(1, socialActivityCounterDefinition0.getLimitPeriod());
      assertEquals(1, socialActivityCounterDefinition0.getIncrement());
      assertEquals(0, socialActivityCounterDefinition0.getOwnerType());
      assertEquals(true, socialActivityCounterDefinition0.isLimitEnabled());
      assertEquals(true, socialActivityCounterDefinition0.isEnabled());
  }

  @Test
  public void test25()  throws Throwable  {
      SocialActivityCounterDefinition socialActivityCounterDefinition0 = new SocialActivityCounterDefinition();
      socialActivityCounterDefinition0.setOwnerType("creator");
      assertEquals(3, socialActivityCounterDefinition0.getOwnerType());
  }
}
