/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portlet.trash.model;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portlet.trash.model.TrashVersion;
import com.liferay.portlet.trash.model.TrashVersionSoap;
import java.util.LinkedList;
import java.util.List;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TrashVersionSoapEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      TrashVersionSoap trashVersionSoap0 = new TrashVersionSoap();
      long long0 = trashVersionSoap0.getPrimaryKey();
      assertEquals(0L, long0);
  }

  @Test
  public void test1()  throws Throwable  {
      TrashVersionSoap trashVersionSoap0 = new TrashVersionSoap();
      trashVersionSoap0.setEntryId(0L);
      assertEquals(0L, trashVersionSoap0.getEntryId());
  }

  @Test
  public void test2()  throws Throwable  {
      TrashVersionSoap trashVersionSoap0 = new TrashVersionSoap();
      trashVersionSoap0.setStatus(0);
      assertEquals(0, trashVersionSoap0.getStatus());
  }

  @Test
  public void test3()  throws Throwable  {
      TrashVersionSoap trashVersionSoap0 = new TrashVersionSoap();
      int int0 = trashVersionSoap0.getStatus();
      assertEquals(0, int0);
  }

  @Test
  public void test4()  throws Throwable  {
      TrashVersionSoap trashVersionSoap0 = new TrashVersionSoap();
      trashVersionSoap0.setPrimaryKey((long) 0);
      assertEquals(0L, trashVersionSoap0.getEntryId());
  }

  @Test
  public void test5()  throws Throwable  {
      TrashVersionSoap trashVersionSoap0 = new TrashVersionSoap();
      long long0 = trashVersionSoap0.getEntryId();
      assertEquals(0L, long0);
  }

  @Test
  public void test6()  throws Throwable  {
      TrashVersionSoap trashVersionSoap0 = new TrashVersionSoap();
      long long0 = trashVersionSoap0.getClassNameId();
      assertEquals(0L, long0);
  }

  @Test
  public void test7()  throws Throwable  {
      TrashVersionSoap trashVersionSoap0 = new TrashVersionSoap();
      trashVersionSoap0.setClassNameId(0L);
      assertEquals(0L, trashVersionSoap0.getClassNameId());
  }

  @Test
  public void test8()  throws Throwable  {
      TrashVersionSoap trashVersionSoap0 = new TrashVersionSoap();
      long long0 = trashVersionSoap0.getVersionId();
      assertEquals(0L, long0);
  }

  @Test
  public void test9()  throws Throwable  {
      TrashVersionSoap trashVersionSoap0 = new TrashVersionSoap();
      long long0 = trashVersionSoap0.getClassPK();
      assertEquals(0L, long0);
  }

  @Test
  public void test10()  throws Throwable  {
      TrashVersionSoap trashVersionSoap0 = new TrashVersionSoap();
      trashVersionSoap0.setClassPK((long) 0);
      assertEquals(0L, trashVersionSoap0.getEntryId());
  }

  @Test
  public void test11()  throws Throwable  {
      LinkedList<TrashVersion> linkedList0 = new LinkedList<TrashVersion>();
      linkedList0.add((TrashVersion) null);
      // Undeclared exception!
      try {
        TrashVersionSoap.toSoapModels((List<TrashVersion>) linkedList0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      TrashVersion[][] trashVersionArray0 = new TrashVersion[1][9];
      // Undeclared exception!
      try {
        TrashVersionSoap.toSoapModels(trashVersionArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      LinkedList<TrashVersion> linkedList0 = new LinkedList<TrashVersion>();
      TrashVersionSoap[] trashVersionSoapArray0 = TrashVersionSoap.toSoapModels((List<TrashVersion>) linkedList0);
      assertNotNull(trashVersionSoapArray0);
  }
}
