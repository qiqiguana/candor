/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portlet.dynamicdatalists.asset;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.bean.BeanLocatorException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.security.permission.PermissionChecker;
import com.liferay.portal.theme.ThemeDisplay;
import com.liferay.portlet.dynamicdatalists.asset.DDLRecordAssetRendererFactory;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DDLRecordAssetRendererFactoryEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DDLRecordAssetRendererFactory dDLRecordAssetRendererFactory0 = new DDLRecordAssetRendererFactory();
      String string0 = dDLRecordAssetRendererFactory0.getClassName();
      assertEquals("com.liferay.portlet.dynamicdatalists.model.DDLRecord", string0);
      assertNotNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      DDLRecordAssetRendererFactory dDLRecordAssetRendererFactory0 = new DDLRecordAssetRendererFactory();
      try {
        dDLRecordAssetRendererFactory0.hasPermission((PermissionChecker) null, 5000L, "");
        fail("Expecting exception: BeanLocatorException");
      } catch(BeanLocatorException e) {
        /*
         * BeanLocator has not been set
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      DDLRecordAssetRendererFactory dDLRecordAssetRendererFactory0 = new DDLRecordAssetRendererFactory();
      boolean boolean0 = dDLRecordAssetRendererFactory0.isSelectable();
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      DDLRecordAssetRendererFactory dDLRecordAssetRendererFactory0 = new DDLRecordAssetRendererFactory();
      // Undeclared exception!
      try {
        dDLRecordAssetRendererFactory0.getIconPath((ThemeDisplay) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      DDLRecordAssetRendererFactory dDLRecordAssetRendererFactory0 = new DDLRecordAssetRendererFactory();
      String string0 = dDLRecordAssetRendererFactory0.getType();
      assertEquals("record", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      DDLRecordAssetRendererFactory dDLRecordAssetRendererFactory0 = new DDLRecordAssetRendererFactory();
      boolean boolean0 = dDLRecordAssetRendererFactory0.isCategorizable();
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      DDLRecordAssetRendererFactory dDLRecordAssetRendererFactory0 = new DDLRecordAssetRendererFactory();
      // Undeclared exception!
      try {
        dDLRecordAssetRendererFactory0.getAssetRenderer((-1689L));
        fail("Expecting exception: BeanLocatorException");
      } catch(BeanLocatorException e) {
        /*
         * BeanLocator has not been set
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      DDLRecordAssetRendererFactory dDLRecordAssetRendererFactory0 = new DDLRecordAssetRendererFactory();
      // Undeclared exception!
      try {
        dDLRecordAssetRendererFactory0.getAssetRenderer(0L, 0);
        fail("Expecting exception: BeanLocatorException");
      } catch(BeanLocatorException e) {
        /*
         * BeanLocator has not been set
         */
      }
  }
}
