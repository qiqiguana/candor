/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portlet.softwarecatalog.service.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.security.auth.PrincipalException;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portlet.softwarecatalog.service.impl.SCFrameworkVersionServiceImpl;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SCFrameworkVersionServiceImplEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SCFrameworkVersionServiceImpl sCFrameworkVersionServiceImpl0 = new SCFrameworkVersionServiceImpl();
      // Undeclared exception!
      try {
        sCFrameworkVersionServiceImpl0.getFrameworkVersions(0L, true, 219, 219);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      SCFrameworkVersionServiceImpl sCFrameworkVersionServiceImpl0 = new SCFrameworkVersionServiceImpl();
      try {
        sCFrameworkVersionServiceImpl0.deleteFrameworkVersion(1111L);
        fail("Expecting exception: PrincipalException");
      } catch(PrincipalException e) {
        /*
         * PermissionChecker not initialized
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      SCFrameworkVersionServiceImpl sCFrameworkVersionServiceImpl0 = new SCFrameworkVersionServiceImpl();
      // Undeclared exception!
      try {
        sCFrameworkVersionServiceImpl0.getFrameworkVersions((-1L), false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      SCFrameworkVersionServiceImpl sCFrameworkVersionServiceImpl0 = new SCFrameworkVersionServiceImpl();
      // Undeclared exception!
      try {
        sCFrameworkVersionServiceImpl0.getFrameworkVersion((-1L));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      SCFrameworkVersionServiceImpl sCFrameworkVersionServiceImpl0 = new SCFrameworkVersionServiceImpl();
      ServiceContext serviceContext0 = new ServiceContext();
      try {
        sCFrameworkVersionServiceImpl0.addFrameworkVersion("fetchByC_K_O", "fetchByC_K_O", true, 433, serviceContext0);
        fail("Expecting exception: PrincipalException");
      } catch(PrincipalException e) {
        /*
         * PermissionChecker not initialized
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      SCFrameworkVersionServiceImpl sCFrameworkVersionServiceImpl0 = new SCFrameworkVersionServiceImpl();
      try {
        sCFrameworkVersionServiceImpl0.updateFrameworkVersion(1168L, "VbN", "VbN", true, 233);
        fail("Expecting exception: PrincipalException");
      } catch(PrincipalException e) {
        /*
         * PermissionChecker not initialized
         */
      }
  }
}
