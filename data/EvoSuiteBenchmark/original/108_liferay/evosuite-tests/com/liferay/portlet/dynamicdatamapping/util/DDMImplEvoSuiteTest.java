/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portlet.dynamicdatamapping.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.bean.BeanLocatorException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portlet.dynamicdatalists.model.DDLRecord;
import com.liferay.portlet.dynamicdatalists.model.DDLRecordWrapper;
import com.liferay.portlet.dynamicdatamapping.storage.Field;
import com.liferay.portlet.dynamicdatamapping.util.DDMImpl;
import com.liferay.portlet.dynamicdatamapping.util.comparator.StructureIdComparator;
import com.liferay.portlet.dynamicdatamapping.util.comparator.StructureModifiedDateComparator;
import com.liferay.portlet.dynamicdatamapping.util.comparator.TemplateIdComparator;
import com.liferay.portlet.dynamicdatamapping.util.comparator.TemplateModifiedDateComparator;
import java.io.InputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DDMImplEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DDMImpl dDMImpl0 = new DDMImpl();
      ServiceContext serviceContext0 = new ServiceContext();
      // Undeclared exception!
      try {
        dDMImpl0.getFields(2L, serviceContext0);
        fail("Expecting exception: BeanLocatorException");
      } catch(BeanLocatorException e) {
        /*
         * BeanLocator has not been set
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      DDMImpl dDMImpl0 = new DDMImpl();
      ServiceContext serviceContext0 = new ServiceContext();
      try {
        dDMImpl0.storeFieldFile((BaseModel<?>) null, "asc", (InputStream) null, serviceContext0);
        fail("Expecting exception: BeanLocatorException");
      } catch(BeanLocatorException e) {
        /*
         * BeanLocator has not been set
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      DDMImpl dDMImpl0 = new DDMImpl();
      ServiceContext serviceContext0 = new ServiceContext();
      // Undeclared exception!
      try {
        dDMImpl0.getFields(1749L, "", serviceContext0);
        fail("Expecting exception: BeanLocatorException");
      } catch(BeanLocatorException e) {
        /*
         * BeanLocator has not been set
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      DDMImpl dDMImpl0 = new DDMImpl();
      ServiceContext serviceContext0 = new ServiceContext();
      String string0 = dDMImpl0.uploadFieldFile(1267L, 1267L, (BaseModel<?>) null, "textarea", serviceContext0);
      assertEquals("", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      DDMImpl dDMImpl0 = new DDMImpl();
      DDLRecordWrapper dDLRecordWrapper0 = new DDLRecordWrapper((DDLRecord) null);
      String string0 = dDMImpl0.getFileUploadPath((BaseModel<?>) dDLRecordWrapper0);
      assertEquals("", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      DDMImpl dDMImpl0 = new DDMImpl();
      StructureIdComparator structureIdComparator0 = (StructureIdComparator)dDMImpl0.getStructureOrderByComparator("id", "id");
      assertNotNull(structureIdComparator0);
      assertEquals(false, structureIdComparator0.isAscending());
  }

  @Test
  public void test6()  throws Throwable  {
      DDMImpl dDMImpl0 = new DDMImpl();
      StructureIdComparator structureIdComparator0 = (StructureIdComparator)dDMImpl0.getStructureOrderByComparator("asc", "asc");
      assertNull(structureIdComparator0);
  }

  @Test
  public void test7()  throws Throwable  {
      DDMImpl dDMImpl0 = new DDMImpl();
      StructureModifiedDateComparator structureModifiedDateComparator0 = (StructureModifiedDateComparator)dDMImpl0.getStructureOrderByComparator("modified-date", "modified-date");
      assertNotNull(structureModifiedDateComparator0);
      assertEquals("DDMStructure.modifiedDate DESC", structureModifiedDateComparator0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      DDMImpl dDMImpl0 = new DDMImpl();
      TemplateIdComparator templateIdComparator0 = (TemplateIdComparator)dDMImpl0.getTemplateOrderByComparator("id", "id");
      assertEquals("DDMTemplate.templateId DESC", templateIdComparator0.getOrderBy());
      assertNotNull(templateIdComparator0);
  }

  @Test
  public void test9()  throws Throwable  {
      DDMImpl dDMImpl0 = new DDMImpl();
      TemplateIdComparator templateIdComparator0 = (TemplateIdComparator)dDMImpl0.getTemplateOrderByComparator("asc", "asc");
      assertNull(templateIdComparator0);
  }

  @Test
  public void test10()  throws Throwable  {
      DDMImpl dDMImpl0 = new DDMImpl();
      TemplateModifiedDateComparator templateModifiedDateComparator0 = (TemplateModifiedDateComparator)dDMImpl0.getTemplateOrderByComparator("modified-date", "prepaqreOutputWindow");
      assertNotNull(templateModifiedDateComparator0);
      assertEquals("DDMTemplate.modifiedDate DESC", templateModifiedDateComparator0.toString());
  }

  @Test
  public void test11()  throws Throwable  {
      DDMImpl dDMImpl0 = new DDMImpl();
      Field field0 = new Field();
      try {
        dDMImpl0.sendFieldFile((HttpServletRequest) null, (HttpServletResponse) null, field0);
        fail("Expecting exception: BeanLocatorException");
      } catch(BeanLocatorException e) {
        /*
         * BeanLocator has not been set
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      DDMImpl dDMImpl0 = new DDMImpl();
      dDMImpl0.sendFieldFile((HttpServletRequest) null, (HttpServletResponse) null, (Field) null);
  }
}
