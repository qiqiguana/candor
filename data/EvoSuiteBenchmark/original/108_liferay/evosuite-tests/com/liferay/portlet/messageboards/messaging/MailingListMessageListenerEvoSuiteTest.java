/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portlet.messageboards.messaging;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.bean.BeanLocatorException;
import com.liferay.portal.kernel.messaging.Message;
import com.liferay.portal.kernel.messaging.MessageListenerException;
import com.liferay.portlet.messageboards.messaging.MailingListMessageListener;
import com.liferay.portlet.messageboards.messaging.MailingListRequest;
import java.util.Properties;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.internet.MimeMessage;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MailingListMessageListenerEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      MailingListMessageListener mailingListMessageListener0 = new MailingListMessageListener();
      Message message0 = new Message();
      try {
        mailingListMessageListener0.receive(message0);
        fail("Expecting exception: MessageListenerException");
      } catch(MessageListenerException e) {
        /*
         * java.lang.NullPointerException
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      MailingListMessageListener mailingListMessageListener0 = new MailingListMessageListener();
      MailingListRequest mailingListRequest0 = new MailingListRequest();
      Message[] messageArray0 = new Message[1];
      Properties properties0 = new Properties();
      Session session0 = Session.getInstance(properties0);
      MimeMessage mimeMessage0 = new MimeMessage(session0);
      messageArray0[0] = (javax.mail.Message) mimeMessage0;
      try {
        mailingListMessageListener0.processMessages(mailingListRequest0, messageArray0);
        fail("Expecting exception: BeanLocatorException");
      } catch(BeanLocatorException e) {
        /*
         * BeanLocator has not been set
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          MailingListMessageListener mailingListMessageListener0 = new MailingListMessageListener();
          MailingListRequest mailingListRequest0 = new MailingListRequest();
          Message[] messageArray0 = new Message[1];
          Properties properties0 = new Properties();
          Session session0 = Session.getInstance(properties0);
          MimeMessage mimeMessage0 = new MimeMessage(session0);
          messageArray0[0] = (javax.mail.Message) mimeMessage0;
          mimeMessage0.setFrom();
          try {
            mailingListMessageListener0.processMessages(mailingListRequest0, messageArray0);
            fail("Expecting exception: BeanLocatorException");
          } catch(BeanLocatorException e) {
            /*
             * BeanLocator has not been set
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
