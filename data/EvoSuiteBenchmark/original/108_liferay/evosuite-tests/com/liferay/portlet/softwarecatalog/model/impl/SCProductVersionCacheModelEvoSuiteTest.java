/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portlet.softwarecatalog.model.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portlet.softwarecatalog.model.impl.SCProductVersionCacheModel;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import javax.swing.DebugGraphics;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SCProductVersionCacheModelEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SCProductVersionCacheModel sCProductVersionCacheModel0 = new SCProductVersionCacheModel();
      String string0 = sCProductVersionCacheModel0.toString();
      assertEquals("{productVersionId=0, companyId=0, userId=0, userName=null, createDate=0, modifiedDate=0, productEntryId=0, version=null, changeLog=null, downloadPageURL=null, directDownloadURL=null, repoStoreArtifact=false}", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      SCProductVersionCacheModel sCProductVersionCacheModel0 = new SCProductVersionCacheModel();
      // Undeclared exception!
      try {
        sCProductVersionCacheModel0.readExternal((ObjectInput) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      SCProductVersionCacheModel sCProductVersionCacheModel0 = new SCProductVersionCacheModel();
      sCProductVersionCacheModel0.userName = "cK!%,*TCIH%VLk=au";
      PrintStream printStream0 = DebugGraphics.logStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) printStream0);
      sCProductVersionCacheModel0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(0L, sCProductVersionCacheModel0.createDate);
  }

  @Test
  public void test3()  throws Throwable  {
      SCProductVersionCacheModel sCProductVersionCacheModel0 = new SCProductVersionCacheModel();
      PrintStream printStream0 = DebugGraphics.logStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) printStream0);
      sCProductVersionCacheModel0.version = "";
      sCProductVersionCacheModel0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(0L, sCProductVersionCacheModel0.productVersionId);
  }

  @Test
  public void test4()  throws Throwable  {
      SCProductVersionCacheModel sCProductVersionCacheModel0 = new SCProductVersionCacheModel();
      PrintStream printStream0 = DebugGraphics.logStream();
      sCProductVersionCacheModel0.directDownloadURL = "cK!%,*TCIH%VLk=au";
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) printStream0);
      sCProductVersionCacheModel0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(0L, sCProductVersionCacheModel0.userId);
  }
}
