/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portlet.messageboards.messaging;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portlet.messageboards.messaging.MailingListRequest;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MailingListRequestEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      MailingListRequest mailingListRequest0 = new MailingListRequest();
      mailingListRequest0.setInServerPort((-2043));
      assertEquals(-2043, mailingListRequest0.getInServerPort());
  }

  @Test
  public void test1()  throws Throwable  {
      MailingListRequest mailingListRequest0 = new MailingListRequest();
      String string0 = mailingListRequest0.getInProtocol();
      assertNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      MailingListRequest mailingListRequest0 = new MailingListRequest();
      long long0 = mailingListRequest0.getGroupId();
      assertEquals(0L, long0);
  }

  @Test
  public void test3()  throws Throwable  {
      MailingListRequest mailingListRequest0 = new MailingListRequest();
      mailingListRequest0.setInProtocol("iNY[}h#WpFkU <K");
      assertEquals(false, mailingListRequest0.isInUseSSL());
  }

  @Test
  public void test4()  throws Throwable  {
      MailingListRequest mailingListRequest0 = new MailingListRequest();
      long long0 = mailingListRequest0.getUserId();
      assertEquals(0L, long0);
  }

  @Test
  public void test5()  throws Throwable  {
      MailingListRequest mailingListRequest0 = new MailingListRequest();
      String string0 = mailingListRequest0.getInUserName();
      assertNull(string0);
  }

  @Test
  public void test6()  throws Throwable  {
      MailingListRequest mailingListRequest0 = new MailingListRequest();
      String string0 = mailingListRequest0.getInPassword();
      assertNull(string0);
  }

  @Test
  public void test7()  throws Throwable  {
      MailingListRequest mailingListRequest0 = new MailingListRequest();
      mailingListRequest0.setCategoryId(1583L);
      assertEquals(1583L, mailingListRequest0.getCategoryId());
  }

  @Test
  public void test8()  throws Throwable  {
      MailingListRequest mailingListRequest0 = new MailingListRequest();
      mailingListRequest0.setInUseSSL(false);
      assertEquals(false, mailingListRequest0.isInUseSSL());
  }

  @Test
  public void test9()  throws Throwable  {
      MailingListRequest mailingListRequest0 = new MailingListRequest();
      long long0 = mailingListRequest0.getCategoryId();
      assertEquals(0L, long0);
  }

  @Test
  public void test10()  throws Throwable  {
      MailingListRequest mailingListRequest0 = new MailingListRequest();
      mailingListRequest0.setInUserName("");
      assertNull(mailingListRequest0.getInServerName());
  }

  @Test
  public void test11()  throws Throwable  {
      MailingListRequest mailingListRequest0 = new MailingListRequest();
      boolean boolean0 = mailingListRequest0.isAllowAnonymous();
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      MailingListRequest mailingListRequest0 = new MailingListRequest();
      mailingListRequest0.setGroupId((-444L));
      assertEquals((-444L), mailingListRequest0.getGroupId());
  }

  @Test
  public void test13()  throws Throwable  {
      MailingListRequest mailingListRequest0 = new MailingListRequest();
      boolean boolean0 = mailingListRequest0.isInUseSSL();
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      MailingListRequest mailingListRequest0 = new MailingListRequest();
      mailingListRequest0.setInServerName((String) null);
      assertEquals(0, mailingListRequest0.getInServerPort());
  }

  @Test
  public void test15()  throws Throwable  {
      MailingListRequest mailingListRequest0 = new MailingListRequest();
      long long0 = mailingListRequest0.getCompanyId();
      assertEquals(0L, long0);
  }

  @Test
  public void test16()  throws Throwable  {
      MailingListRequest mailingListRequest0 = new MailingListRequest();
      mailingListRequest0.setInPassword((String) null);
      assertEquals(0L, mailingListRequest0.getCategoryId());
  }

  @Test
  public void test17()  throws Throwable  {
      MailingListRequest mailingListRequest0 = new MailingListRequest();
      mailingListRequest0.setCompanyId(0L);
      assertNull(mailingListRequest0.getInPassword());
  }

  @Test
  public void test18()  throws Throwable  {
      MailingListRequest mailingListRequest0 = new MailingListRequest();
      String string0 = mailingListRequest0.getInServerName();
      assertNull(string0);
  }

  @Test
  public void test19()  throws Throwable  {
      MailingListRequest mailingListRequest0 = new MailingListRequest();
      int int0 = mailingListRequest0.getInServerPort();
      assertEquals(0, int0);
  }

  @Test
  public void test20()  throws Throwable  {
      MailingListRequest mailingListRequest0 = new MailingListRequest();
      mailingListRequest0.setAllowAnonymous(true);
      assertEquals(true, mailingListRequest0.isAllowAnonymous());
  }

  @Test
  public void test21()  throws Throwable  {
      MailingListRequest mailingListRequest0 = new MailingListRequest();
      mailingListRequest0.setUserId(0L);
      assertNull(mailingListRequest0.getInUserName());
  }
}
