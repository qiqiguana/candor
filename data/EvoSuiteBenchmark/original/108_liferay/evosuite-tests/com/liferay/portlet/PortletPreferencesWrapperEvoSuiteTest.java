/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portlet;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portlet.PortletPreferencesImpl;
import com.liferay.portlet.PortletPreferencesWrapper;
import com.liferay.portlet.Preference;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import javax.portlet.PortletPreferences;
import javax.portlet.ReadOnlyException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PortletPreferencesWrapperEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      HashMap<String, Preference> hashMap0 = new HashMap<String, Preference>();
      PortletPreferencesImpl portletPreferencesImpl0 = new PortletPreferencesImpl((-1L), (-1L), (-2039), (long) (-2039), "-8n", "-8n", (Map<String, Preference>) hashMap0);
      PortletPreferencesWrapper portletPreferencesWrapper0 = new PortletPreferencesWrapper((PortletPreferences) portletPreferencesImpl0, "-8n");
      Enumeration<String> enumeration0 = portletPreferencesWrapper0.getNames();
      assertEquals(false, enumeration0.hasMoreElements());
  }

  @Test
  public void test1()  throws Throwable  {
      PortletPreferencesImpl portletPreferencesImpl0 = new PortletPreferencesImpl();
      PortletPreferencesWrapper portletPreferencesWrapper0 = new PortletPreferencesWrapper((PortletPreferences) portletPreferencesImpl0, "%");
      portletPreferencesWrapper0.setValue("%", "%");
      assertEquals(1, portletPreferencesImpl0.size());
  }

  @Test
  public void test2()  throws Throwable  {
      HashMap<String, Preference> hashMap0 = new HashMap<String, Preference>();
      PortletPreferencesImpl portletPreferencesImpl0 = new PortletPreferencesImpl((-1L), (-1L), (-2039), (long) (-2039), "-8n", "-8n", (Map<String, Preference>) hashMap0);
      PortletPreferencesWrapper portletPreferencesWrapper0 = new PortletPreferencesWrapper((PortletPreferences) portletPreferencesImpl0, "-8n");
      portletPreferencesWrapper0.reset("-8n");
  }

  @Test
  public void test3()  throws Throwable  {
      PortletPreferencesImpl portletPreferencesImpl0 = new PortletPreferencesImpl();
      PortletPreferencesWrapper portletPreferencesWrapper0 = new PortletPreferencesWrapper((PortletPreferences) portletPreferencesImpl0, "%");
      boolean boolean0 = portletPreferencesWrapper0.isReadOnly("%");
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      HashMap<String, Preference> hashMap0 = new HashMap<String, Preference>();
      PortletPreferencesImpl portletPreferencesImpl0 = new PortletPreferencesImpl((-1L), (-1L), (-2039), (long) (-2039), "-8n", "-8n", (Map<String, Preference>) hashMap0);
      PortletPreferencesWrapper portletPreferencesWrapper0 = new PortletPreferencesWrapper((PortletPreferences) portletPreferencesImpl0, "-8n");
      Map<String, String[]> map0 = portletPreferencesWrapper0.getMap();
      assertEquals(true, map0.isEmpty());
  }

  @Test
  public void test5()  throws Throwable  {
      PortletPreferencesImpl portletPreferencesImpl0 = new PortletPreferencesImpl();
      PortletPreferencesWrapper portletPreferencesWrapper0 = new PortletPreferencesWrapper((PortletPreferences) portletPreferencesImpl0, "~z");
      String string0 = portletPreferencesWrapper0.getValue("~z", "~z");
      assertEquals("~z", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      HashMap<String, Preference> hashMap0 = new HashMap<String, Preference>();
      PortletPreferencesImpl portletPreferencesImpl0 = new PortletPreferencesImpl((-1L), (-1L), (-2039), (long) (-2039), "-8n", "-8n", (Map<String, Preference>) hashMap0);
      PortletPreferencesWrapper portletPreferencesWrapper0 = new PortletPreferencesWrapper((PortletPreferences) portletPreferencesImpl0, "-8n");
      String[] stringArray0 = new String[5];
      String[] stringArray1 = portletPreferencesWrapper0.getValues("-8n", stringArray0);
      assertFalse(stringArray1.equals(stringArray0));
  }

  @Test
  public void test7()  throws Throwable  {
      HashMap<String, Preference> hashMap0 = new HashMap<String, Preference>();
      PortletPreferencesImpl portletPreferencesImpl0 = new PortletPreferencesImpl((-1L), (-1L), (-2039), (long) (-2039), "-8n", "-8n", (Map<String, Preference>) hashMap0);
      PortletPreferencesWrapper portletPreferencesWrapper0 = new PortletPreferencesWrapper((PortletPreferences) portletPreferencesImpl0, "-8n");
      PortletPreferencesWrapper portletPreferencesWrapper1 = new PortletPreferencesWrapper((PortletPreferences) portletPreferencesImpl0, "-8n");
      boolean boolean0 = portletPreferencesWrapper0.equals((Object) portletPreferencesWrapper1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      HashMap<String, Preference> hashMap0 = new HashMap<String, Preference>();
      PortletPreferencesImpl portletPreferencesImpl0 = new PortletPreferencesImpl((-1L), (-1L), (-2039), (long) (-2039), "-8n", "-8n", (Map<String, Preference>) hashMap0);
      PortletPreferencesWrapper portletPreferencesWrapper0 = new PortletPreferencesWrapper((PortletPreferences) portletPreferencesImpl0, "-8n");
      String[] stringArray0 = new String[5];
      portletPreferencesWrapper0.setValues("-8n", stringArray0);
      assertEquals(1, portletPreferencesImpl0.size());
  }

  @Test
  public void test9()  throws Throwable  {
      HashMap<String, Preference> hashMap0 = new HashMap<String, Preference>();
      PortletPreferencesImpl portletPreferencesImpl0 = new PortletPreferencesImpl((-1L), (-1L), (-2039), (long) (-2039), "-8n", "-8n", (Map<String, Preference>) hashMap0);
      PortletPreferencesWrapper portletPreferencesWrapper0 = new PortletPreferencesWrapper((PortletPreferences) portletPreferencesImpl0, "-8n");
      // Undeclared exception!
      try {
        portletPreferencesWrapper0.hashCode();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      HashMap<String, Preference> hashMap0 = new HashMap<String, Preference>();
      PortletPreferencesImpl portletPreferencesImpl0 = new PortletPreferencesImpl((-1L), (-1L), (-2039), (long) (-2039), "-8n", "-8n", (Map<String, Preference>) hashMap0);
      PortletPreferencesWrapper portletPreferencesWrapper0 = new PortletPreferencesWrapper((PortletPreferences) portletPreferencesImpl0, "-8n");
      PortletPreferencesImpl portletPreferencesImpl1 = new PortletPreferencesImpl("-8n", (Map<String, Preference>) hashMap0);
      PortletPreferencesWrapper portletPreferencesWrapper1 = new PortletPreferencesWrapper((PortletPreferences) portletPreferencesImpl1, "-8n");
      boolean boolean0 = portletPreferencesWrapper0.equals((Object) portletPreferencesWrapper1);
      assertEquals(false, boolean0);
  }
}
