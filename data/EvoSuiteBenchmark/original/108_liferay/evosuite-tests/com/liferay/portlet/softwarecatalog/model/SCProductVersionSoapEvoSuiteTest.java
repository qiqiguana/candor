/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portlet.softwarecatalog.model;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portlet.softwarecatalog.model.SCProductVersion;
import com.liferay.portlet.softwarecatalog.model.SCProductVersionSoap;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SCProductVersionSoapEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SCProductVersionSoap sCProductVersionSoap0 = new SCProductVersionSoap();
      String string0 = sCProductVersionSoap0.getDirectDownloadURL();
      assertNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      SCProductVersionSoap sCProductVersionSoap0 = new SCProductVersionSoap();
      sCProductVersionSoap0.setCreateDate((Date) null);
      assertEquals(0L, sCProductVersionSoap0.getUserId());
  }

  @Test
  public void test2()  throws Throwable  {
      SCProductVersionSoap sCProductVersionSoap0 = new SCProductVersionSoap();
      Date date0 = sCProductVersionSoap0.getCreateDate();
      assertNull(date0);
  }

  @Test
  public void test3()  throws Throwable  {
      SCProductVersionSoap sCProductVersionSoap0 = new SCProductVersionSoap();
      sCProductVersionSoap0.setDirectDownloadURL((String) null);
      assertNull(sCProductVersionSoap0.getUserName());
  }

  @Test
  public void test4()  throws Throwable  {
      SCProductVersionSoap sCProductVersionSoap0 = new SCProductVersionSoap();
      long long0 = sCProductVersionSoap0.getUserId();
      assertEquals(0L, long0);
  }

  @Test
  public void test5()  throws Throwable  {
      SCProductVersionSoap sCProductVersionSoap0 = new SCProductVersionSoap();
      sCProductVersionSoap0.setUserName((String) null);
      assertEquals(0L, sCProductVersionSoap0.getProductVersionId());
  }

  @Test
  public void test6()  throws Throwable  {
      SCProductVersionSoap sCProductVersionSoap0 = new SCProductVersionSoap();
      sCProductVersionSoap0.setCompanyId((-426L));
      assertEquals((-426L), sCProductVersionSoap0.getCompanyId());
  }

  @Test
  public void test7()  throws Throwable  {
      LinkedList<SCProductVersion> linkedList0 = new LinkedList<SCProductVersion>();
      linkedList0.add((SCProductVersion) null);
      // Undeclared exception!
      try {
        SCProductVersionSoap.toSoapModels((List<SCProductVersion>) linkedList0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      SCProductVersionSoap sCProductVersionSoap0 = new SCProductVersionSoap();
      sCProductVersionSoap0.setVersion((String) null);
      assertNull(sCProductVersionSoap0.getVersion());
  }

  @Test
  public void test9()  throws Throwable  {
      SCProductVersionSoap sCProductVersionSoap0 = new SCProductVersionSoap();
      long long0 = sCProductVersionSoap0.getProductVersionId();
      assertEquals(0L, long0);
  }

  @Test
  public void test10()  throws Throwable  {
      SCProductVersionSoap sCProductVersionSoap0 = new SCProductVersionSoap();
      String string0 = sCProductVersionSoap0.getChangeLog();
      assertNull(string0);
  }

  @Test
  public void test11()  throws Throwable  {
      SCProductVersionSoap sCProductVersionSoap0 = new SCProductVersionSoap();
      String string0 = sCProductVersionSoap0.getDownloadPageURL();
      assertNull(string0);
  }

  @Test
  public void test12()  throws Throwable  {
      SCProductVersionSoap sCProductVersionSoap0 = new SCProductVersionSoap();
      Date date0 = sCProductVersionSoap0.getModifiedDate();
      assertNull(date0);
  }

  @Test
  public void test13()  throws Throwable  {
      SCProductVersionSoap sCProductVersionSoap0 = new SCProductVersionSoap();
      String string0 = sCProductVersionSoap0.getVersion();
      assertNull(string0);
  }

  @Test
  public void test14()  throws Throwable  {
      SCProductVersionSoap sCProductVersionSoap0 = new SCProductVersionSoap();
      sCProductVersionSoap0.setChangeLog((String) null);
      assertNull(sCProductVersionSoap0.getVersion());
  }

  @Test
  public void test15()  throws Throwable  {
      SCProductVersionSoap sCProductVersionSoap0 = new SCProductVersionSoap();
      sCProductVersionSoap0.setProductEntryId(0L);
      assertNull(sCProductVersionSoap0.getChangeLog());
  }

  @Test
  public void test16()  throws Throwable  {
      SCProductVersionSoap sCProductVersionSoap0 = new SCProductVersionSoap();
      sCProductVersionSoap0.setDownloadPageURL((String) null);
      assertNull(sCProductVersionSoap0.getDownloadPageURL());
  }

  @Test
  public void test17()  throws Throwable  {
      SCProductVersionSoap sCProductVersionSoap0 = new SCProductVersionSoap();
      sCProductVersionSoap0.setPrimaryKey(0L);
      assertEquals(0L, sCProductVersionSoap0.getProductVersionId());
  }

  @Test
  public void test18()  throws Throwable  {
      SCProductVersionSoap sCProductVersionSoap0 = new SCProductVersionSoap();
      long long0 = sCProductVersionSoap0.getCompanyId();
      assertEquals(0L, long0);
  }

  @Test
  public void test19()  throws Throwable  {
      SCProductVersionSoap sCProductVersionSoap0 = new SCProductVersionSoap();
      sCProductVersionSoap0.setRepoStoreArtifact(false);
      assertEquals(false, sCProductVersionSoap0.getRepoStoreArtifact());
      assertEquals(false, sCProductVersionSoap0.isRepoStoreArtifact());
  }

  @Test
  public void test20()  throws Throwable  {
      SCProductVersionSoap sCProductVersionSoap0 = new SCProductVersionSoap();
      String string0 = sCProductVersionSoap0.getUserName();
      assertNull(string0);
  }

  @Test
  public void test21()  throws Throwable  {
      SCProductVersionSoap sCProductVersionSoap0 = new SCProductVersionSoap();
      boolean boolean0 = sCProductVersionSoap0.isRepoStoreArtifact();
      assertEquals(false, boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      SCProductVersionSoap sCProductVersionSoap0 = new SCProductVersionSoap();
      sCProductVersionSoap0.setUserId((-863L));
      assertEquals((-863L), sCProductVersionSoap0.getUserId());
  }

  @Test
  public void test23()  throws Throwable  {
      SCProductVersionSoap sCProductVersionSoap0 = new SCProductVersionSoap();
      long long0 = sCProductVersionSoap0.getProductEntryId();
      assertEquals(0L, long0);
  }

  @Test
  public void test24()  throws Throwable  {
      SCProductVersionSoap sCProductVersionSoap0 = new SCProductVersionSoap();
      boolean boolean0 = sCProductVersionSoap0.getRepoStoreArtifact();
      assertEquals(false, boolean0);
  }

  @Test
  public void test25()  throws Throwable  {
      SCProductVersionSoap sCProductVersionSoap0 = new SCProductVersionSoap();
      sCProductVersionSoap0.setModifiedDate((Date) null);
      assertNull(sCProductVersionSoap0.getChangeLog());
  }

  @Test
  public void test26()  throws Throwable  {
      SCProductVersionSoap sCProductVersionSoap0 = new SCProductVersionSoap();
      long long0 = sCProductVersionSoap0.getPrimaryKey();
      assertEquals(0L, long0);
  }

  @Test
  public void test27()  throws Throwable  {
      SCProductVersion[][] sCProductVersionArray0 = new SCProductVersion[1][7];
      // Undeclared exception!
      try {
        SCProductVersionSoap.toSoapModels(sCProductVersionArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test28()  throws Throwable  {
      LinkedList<SCProductVersion> linkedList0 = new LinkedList<SCProductVersion>();
      SCProductVersionSoap[] sCProductVersionSoapArray0 = SCProductVersionSoap.toSoapModels((List<SCProductVersion>) linkedList0);
      assertNotNull(sCProductVersionSoapArray0);
  }
}
