/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portlet.shopping.service;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.bean.BeanLocatorException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portlet.shopping.service.ShoppingOrderServiceUtil;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ShoppingOrderServiceUtilEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ServiceContext serviceContext0 = new ServiceContext();
      // Undeclared exception!
      try {
        ShoppingOrderServiceUtil.completeOrder(17L, "^c? 0n>o", "^c? 0n>o", "^c? 0n>o", (double) 17L, "^c? 0n>o", "^c? 0n>o", serviceContext0);
        fail("Expecting exception: BeanLocatorException");
      } catch(BeanLocatorException e) {
        /*
         * BeanLocator has not been set
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try {
        ShoppingOrderServiceUtil.getBeanIdentifier();
        fail("Expecting exception: BeanLocatorException");
      } catch(BeanLocatorException e) {
        /*
         * BeanLocator has not been set
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try {
        ShoppingOrderServiceUtil.updateOrder(234L, 234L, "sicCzde", "sicCzde", "sicCzde", "sicCzde", "sicCzde", "sicCzde", "sicCzde", "sicCzde", "sicCzde", "sicCzde", false, "sicCzde", "sicCzde", "sicCzde", "sicCzde", "sicCzde", "sicCzde", "sicCzde", "sicCzde", "sicCzde", "sicCzde", "sicCzde", "sicCzde", "sicCzde", 2008, 2008, "sicCzde", "sicCzde");
        fail("Expecting exception: BeanLocatorException");
      } catch(BeanLocatorException e) {
        /*
         * BeanLocator has not been set
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try {
        ShoppingOrderServiceUtil.setBeanIdentifier("defaultPolicy");
        fail("Expecting exception: BeanLocatorException");
      } catch(BeanLocatorException e) {
        /*
         * BeanLocator has not been set
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try {
        ShoppingOrderServiceUtil.deleteOrder((-1021L), (-1021L));
        fail("Expecting exception: BeanLocatorException");
      } catch(BeanLocatorException e) {
        /*
         * BeanLocator has not been set
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      ServiceContext serviceContext0 = new ServiceContext();
      // Undeclared exception!
      try {
        ShoppingOrderServiceUtil.sendEmail(0L, 0L, "zMmdh ", serviceContext0);
        fail("Expecting exception: BeanLocatorException");
      } catch(BeanLocatorException e) {
        /*
         * BeanLocator has not been set
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try {
        ShoppingOrderServiceUtil.getOrder((-300L), (-300L));
        fail("Expecting exception: BeanLocatorException");
      } catch(BeanLocatorException e) {
        /*
         * BeanLocator has not been set
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      // Undeclared exception!
      try {
        ShoppingOrderServiceUtil.updateOrder(73L, 73L, "Fh,rf", "Fh,rf", (double) 73L, "Fh,rf", "Fh,rf");
        fail("Expecting exception: BeanLocatorException");
      } catch(BeanLocatorException e) {
        /*
         * BeanLocator has not been set
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      ShoppingOrderServiceUtil shoppingOrderServiceUtil0 = new ShoppingOrderServiceUtil();
      assertNotNull(shoppingOrderServiceUtil0);
  }
}
