/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portlet;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portlet.CacheControlImpl;
import com.liferay.portlet.MimeResponseImpl;
import com.liferay.portlet.RenderResponseImpl;
import com.liferay.portlet.ResourceResponseImpl;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class CacheControlImplEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      RenderResponseImpl renderResponseImpl0 = new RenderResponseImpl();
      CacheControlImpl cacheControlImpl0 = new CacheControlImpl("X%4A8k\"t", 0, true, false, (MimeResponseImpl) renderResponseImpl0);
      int int0 = cacheControlImpl0.getExpirationTime();
      assertEquals(0, int0);
      assertEquals(true, cacheControlImpl0.isPublicScope());
      assertEquals(false, cacheControlImpl0.useCachedContent());
  }

  @Test
  public void test1()  throws Throwable  {
      CacheControlImpl cacheControlImpl0 = new CacheControlImpl((String) null, (-1205), false, true, (MimeResponseImpl) null);
      // Undeclared exception!
      try {
        cacheControlImpl0.setETag((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      CacheControlImpl cacheControlImpl0 = new CacheControlImpl(".HZn:)N<]rAUe4SpP.", 0, false, false, (MimeResponseImpl) null);
      // Undeclared exception!
      try {
        cacheControlImpl0.setPublicScope(false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      RenderResponseImpl renderResponseImpl0 = new RenderResponseImpl();
      CacheControlImpl cacheControlImpl0 = new CacheControlImpl("X%4A8k\"t", 0, true, false, (MimeResponseImpl) renderResponseImpl0);
      cacheControlImpl0.setUseCachedContent(false);
      assertEquals(true, cacheControlImpl0.isPublicScope());
      assertEquals(false, cacheControlImpl0.useCachedContent());
      assertEquals(0, cacheControlImpl0.getExpirationTime());
  }

  @Test
  public void test4()  throws Throwable  {
      RenderResponseImpl renderResponseImpl0 = new RenderResponseImpl();
      CacheControlImpl cacheControlImpl0 = new CacheControlImpl("p_p_id", 0, false, true, (MimeResponseImpl) renderResponseImpl0);
      cacheControlImpl0.setExpirationTime(0);
      assertEquals(false, cacheControlImpl0.isPublicScope());
      assertEquals(0, cacheControlImpl0.getExpirationTime());
      assertEquals(true, cacheControlImpl0.useCachedContent());
  }

  @Test
  public void test5()  throws Throwable  {
      ResourceResponseImpl resourceResponseImpl0 = new ResourceResponseImpl();
      CacheControlImpl cacheControlImpl0 = new CacheControlImpl("N4hg]~&pk:~,O", 1, true, true, (MimeResponseImpl) resourceResponseImpl0);
      boolean boolean0 = cacheControlImpl0.isPublicScope();
      assertEquals(true, boolean0);
      assertEquals(true, cacheControlImpl0.useCachedContent());
      assertEquals(1, cacheControlImpl0.getExpirationTime());
  }

  @Test
  public void test6()  throws Throwable  {
      RenderResponseImpl renderResponseImpl0 = new RenderResponseImpl();
      CacheControlImpl cacheControlImpl0 = new CacheControlImpl("", 0, true, true, (MimeResponseImpl) renderResponseImpl0);
      boolean boolean0 = cacheControlImpl0.useCachedContent();
      assertEquals(true, cacheControlImpl0.isPublicScope());
      assertEquals(true, boolean0);
      assertEquals(0, cacheControlImpl0.getExpirationTime());
  }

  @Test
  public void test7()  throws Throwable  {
      RenderResponseImpl renderResponseImpl0 = new RenderResponseImpl();
      CacheControlImpl cacheControlImpl0 = new CacheControlImpl("", 0, true, true, (MimeResponseImpl) renderResponseImpl0);
      String string0 = cacheControlImpl0.getETag();
      assertEquals(true, cacheControlImpl0.useCachedContent());
      assertEquals(0, cacheControlImpl0.getExpirationTime());
      assertEquals(true, cacheControlImpl0.isPublicScope());
      assertNotNull(string0);
  }
}
