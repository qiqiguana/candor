/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portlet.social.model;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portlet.social.model.SocialActivityLimit;
import com.liferay.portlet.social.model.SocialActivityLimitSoap;
import java.util.LinkedList;
import java.util.List;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SocialActivityLimitSoapEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SocialActivityLimitSoap socialActivityLimitSoap0 = new SocialActivityLimitSoap();
      socialActivityLimitSoap0.setPrimaryKey((long) (-770));
      assertEquals((-770L), socialActivityLimitSoap0.getPrimaryKey());
      assertEquals((-770L), socialActivityLimitSoap0.getActivityLimitId());
  }

  @Test
  public void test1()  throws Throwable  {
      LinkedList<SocialActivityLimit> linkedList0 = new LinkedList<SocialActivityLimit>();
      linkedList0.add((SocialActivityLimit) null);
      // Undeclared exception!
      try {
        SocialActivityLimitSoap.toSoapModels((List<SocialActivityLimit>) linkedList0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      SocialActivityLimitSoap socialActivityLimitSoap0 = new SocialActivityLimitSoap();
      socialActivityLimitSoap0.setActivityType((-770));
      assertEquals(-770, socialActivityLimitSoap0.getActivityType());
  }

  @Test
  public void test3()  throws Throwable  {
      SocialActivityLimitSoap socialActivityLimitSoap0 = new SocialActivityLimitSoap();
      long long0 = socialActivityLimitSoap0.getUserId();
      assertEquals(0L, long0);
  }

  @Test
  public void test4()  throws Throwable  {
      SocialActivityLimitSoap socialActivityLimitSoap0 = new SocialActivityLimitSoap();
      long long0 = socialActivityLimitSoap0.getClassPK();
      assertEquals(0L, long0);
  }

  @Test
  public void test5()  throws Throwable  {
      SocialActivityLimitSoap socialActivityLimitSoap0 = new SocialActivityLimitSoap();
      long long0 = socialActivityLimitSoap0.getActivityLimitId();
      assertEquals(0L, long0);
  }

  @Test
  public void test6()  throws Throwable  {
      SocialActivityLimitSoap socialActivityLimitSoap0 = new SocialActivityLimitSoap();
      long long0 = socialActivityLimitSoap0.getClassNameId();
      assertEquals(0L, long0);
  }

  @Test
  public void test7()  throws Throwable  {
      SocialActivityLimitSoap socialActivityLimitSoap0 = new SocialActivityLimitSoap();
      socialActivityLimitSoap0.setUserId((long) 0);
      assertEquals(0L, socialActivityLimitSoap0.getUserId());
  }

  @Test
  public void test8()  throws Throwable  {
      SocialActivityLimitSoap socialActivityLimitSoap0 = new SocialActivityLimitSoap();
      String string0 = socialActivityLimitSoap0.getValue();
      assertNull(string0);
  }

  @Test
  public void test9()  throws Throwable  {
      SocialActivityLimitSoap socialActivityLimitSoap0 = new SocialActivityLimitSoap();
      int int0 = socialActivityLimitSoap0.getActivityType();
      assertEquals(0, int0);
  }

  @Test
  public void test10()  throws Throwable  {
      SocialActivityLimitSoap socialActivityLimitSoap0 = new SocialActivityLimitSoap();
      socialActivityLimitSoap0.setActivityCounterName("8$)WBc[15by= ");
      assertEquals(0, socialActivityLimitSoap0.getActivityType());
  }

  @Test
  public void test11()  throws Throwable  {
      SocialActivityLimitSoap socialActivityLimitSoap0 = new SocialActivityLimitSoap();
      socialActivityLimitSoap0.setClassNameId(0L);
      assertEquals(0L, socialActivityLimitSoap0.getClassPK());
  }

  @Test
  public void test12()  throws Throwable  {
      SocialActivityLimitSoap socialActivityLimitSoap0 = new SocialActivityLimitSoap();
      long long0 = socialActivityLimitSoap0.getPrimaryKey();
      assertEquals(0L, long0);
  }

  @Test
  public void test13()  throws Throwable  {
      SocialActivityLimitSoap socialActivityLimitSoap0 = new SocialActivityLimitSoap();
      socialActivityLimitSoap0.setCompanyId(0L);
      assertEquals(0L, socialActivityLimitSoap0.getActivityLimitId());
  }

  @Test
  public void test14()  throws Throwable  {
      SocialActivityLimitSoap socialActivityLimitSoap0 = new SocialActivityLimitSoap();
      socialActivityLimitSoap0.setClassPK(0L);
      assertEquals(0L, socialActivityLimitSoap0.getClassNameId());
  }

  @Test
  public void test15()  throws Throwable  {
      SocialActivityLimitSoap socialActivityLimitSoap0 = new SocialActivityLimitSoap();
      long long0 = socialActivityLimitSoap0.getCompanyId();
      assertEquals(0L, long0);
  }

  @Test
  public void test16()  throws Throwable  {
      SocialActivityLimitSoap socialActivityLimitSoap0 = new SocialActivityLimitSoap();
      socialActivityLimitSoap0.setGroupId(0L);
      assertEquals(0L, socialActivityLimitSoap0.getClassPK());
  }

  @Test
  public void test17()  throws Throwable  {
      SocialActivityLimitSoap socialActivityLimitSoap0 = new SocialActivityLimitSoap();
      String string0 = socialActivityLimitSoap0.getActivityCounterName();
      assertNull(string0);
  }

  @Test
  public void test18()  throws Throwable  {
      SocialActivityLimitSoap socialActivityLimitSoap0 = new SocialActivityLimitSoap();
      socialActivityLimitSoap0.setValue("Qio]b&<;81$1");
      assertEquals(0L, socialActivityLimitSoap0.getGroupId());
  }

  @Test
  public void test19()  throws Throwable  {
      SocialActivityLimitSoap socialActivityLimitSoap0 = new SocialActivityLimitSoap();
      long long0 = socialActivityLimitSoap0.getGroupId();
      assertEquals(0L, long0);
  }

  @Test
  public void test20()  throws Throwable  {
      SocialActivityLimit[][] socialActivityLimitArray0 = new SocialActivityLimit[1][1];
      // Undeclared exception!
      try {
        SocialActivityLimitSoap.toSoapModels(socialActivityLimitArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test21()  throws Throwable  {
      LinkedList<SocialActivityLimit> linkedList0 = new LinkedList<SocialActivityLimit>();
      SocialActivityLimitSoap[] socialActivityLimitSoapArray0 = SocialActivityLimitSoap.toSoapModels((List<SocialActivityLimit>) linkedList0);
      assertNotNull(socialActivityLimitSoapArray0);
  }
}
