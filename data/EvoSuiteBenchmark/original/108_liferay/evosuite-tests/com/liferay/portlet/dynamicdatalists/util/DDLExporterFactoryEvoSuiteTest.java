/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portlet.dynamicdatalists.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portlet.dynamicdatalists.util.DDLCSVExporter;
import com.liferay.portlet.dynamicdatalists.util.DDLExportFormat;
import com.liferay.portlet.dynamicdatalists.util.DDLExporter;
import com.liferay.portlet.dynamicdatalists.util.DDLExporterFactory;
import java.util.HashMap;
import java.util.Map;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DDLExporterFactoryEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DDLExporterFactory dDLExporterFactory0 = new DDLExporterFactory();
      HashMap<String, DDLExporter> hashMap0 = new HashMap<String, DDLExporter>();
      dDLExporterFactory0.setDDLExporters((Map<String, DDLExporter>) hashMap0);
      assertEquals("{}", hashMap0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      DDLExportFormat dDLExportFormat0 = DDLExportFormat.CSV;
      try {
        DDLExporterFactory.getDDLExporter(dDLExportFormat0);
        fail("Expecting exception: PortalException");
      } catch(PortalException e) {
        /*
         * Invalid format type csv
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      DDLExporterFactory dDLExporterFactory0 = new DDLExporterFactory();
      HashMap<String, DDLExporter> hashMap0 = new HashMap<String, DDLExporter>();
      DDLCSVExporter dDLCSVExporter0 = new DDLCSVExporter();
      hashMap0.put("", (DDLExporter) dDLCSVExporter0);
      // Undeclared exception!
      try {
        dDLExporterFactory0.setDDLExporters((Map<String, DDLExporter>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Invalid value 
         */
      }
  }
}
