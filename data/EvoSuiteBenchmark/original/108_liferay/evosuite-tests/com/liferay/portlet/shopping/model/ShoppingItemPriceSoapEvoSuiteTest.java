/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portlet.shopping.model;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portlet.shopping.model.ShoppingItemPrice;
import com.liferay.portlet.shopping.model.ShoppingItemPriceSoap;
import java.util.LinkedList;
import java.util.List;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ShoppingItemPriceSoapEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ShoppingItemPriceSoap shoppingItemPriceSoap0 = new ShoppingItemPriceSoap();
      shoppingItemPriceSoap0.setStatus((-1008));
      assertEquals(-1008, shoppingItemPriceSoap0.getStatus());
  }

  @Test
  public void test1()  throws Throwable  {
      ShoppingItemPriceSoap shoppingItemPriceSoap0 = new ShoppingItemPriceSoap();
      int int0 = shoppingItemPriceSoap0.getMinQuantity();
      assertEquals(0, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      ShoppingItemPriceSoap shoppingItemPriceSoap0 = new ShoppingItemPriceSoap();
      shoppingItemPriceSoap0.setMinQuantity(0);
      assertEquals(0, shoppingItemPriceSoap0.getMinQuantity());
  }

  @Test
  public void test3()  throws Throwable  {
      ShoppingItemPriceSoap shoppingItemPriceSoap0 = new ShoppingItemPriceSoap();
      shoppingItemPriceSoap0.setPrimaryKey((long) 0);
      assertEquals(0L, shoppingItemPriceSoap0.getPrimaryKey());
  }

  @Test
  public void test4()  throws Throwable  {
      ShoppingItemPriceSoap shoppingItemPriceSoap0 = new ShoppingItemPriceSoap();
      long long0 = shoppingItemPriceSoap0.getItemId();
      assertEquals(0L, long0);
  }

  @Test
  public void test5()  throws Throwable  {
      ShoppingItemPriceSoap shoppingItemPriceSoap0 = new ShoppingItemPriceSoap();
      double double0 = shoppingItemPriceSoap0.getPrice();
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test6()  throws Throwable  {
      ShoppingItemPriceSoap shoppingItemPriceSoap0 = new ShoppingItemPriceSoap();
      int int0 = shoppingItemPriceSoap0.getMaxQuantity();
      assertEquals(0, int0);
  }

  @Test
  public void test7()  throws Throwable  {
      ShoppingItemPriceSoap shoppingItemPriceSoap0 = new ShoppingItemPriceSoap();
      long long0 = shoppingItemPriceSoap0.getItemPriceId();
      assertEquals(0L, long0);
  }

  @Test
  public void test8()  throws Throwable  {
      ShoppingItemPriceSoap shoppingItemPriceSoap0 = new ShoppingItemPriceSoap();
      shoppingItemPriceSoap0.setShipping((double) 0L);
      assertEquals(0.0, shoppingItemPriceSoap0.getShipping(), 0.01D);
  }

  @Test
  public void test9()  throws Throwable  {
      ShoppingItemPriceSoap shoppingItemPriceSoap0 = new ShoppingItemPriceSoap();
      boolean boolean0 = shoppingItemPriceSoap0.getUseShippingFormula();
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      ShoppingItemPriceSoap shoppingItemPriceSoap0 = new ShoppingItemPriceSoap();
      shoppingItemPriceSoap0.setMaxQuantity(0);
      assertEquals(0, shoppingItemPriceSoap0.getMaxQuantity());
  }

  @Test
  public void test11()  throws Throwable  {
      ShoppingItemPriceSoap shoppingItemPriceSoap0 = new ShoppingItemPriceSoap();
      double double0 = shoppingItemPriceSoap0.getDiscount();
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      ShoppingItemPriceSoap shoppingItemPriceSoap0 = new ShoppingItemPriceSoap();
      long long0 = shoppingItemPriceSoap0.getPrimaryKey();
      assertEquals(0L, long0);
  }

  @Test
  public void test13()  throws Throwable  {
      ShoppingItemPriceSoap shoppingItemPriceSoap0 = new ShoppingItemPriceSoap();
      shoppingItemPriceSoap0.setItemId(0L);
      assertEquals(false, shoppingItemPriceSoap0.getUseShippingFormula());
  }

  @Test
  public void test14()  throws Throwable  {
      ShoppingItemPriceSoap shoppingItemPriceSoap0 = new ShoppingItemPriceSoap();
      shoppingItemPriceSoap0.setDiscount((double) (-1008));
      assertEquals((-1008.0), shoppingItemPriceSoap0.getDiscount(), 0.01D);
  }

  @Test
  public void test15()  throws Throwable  {
      ShoppingItemPriceSoap shoppingItemPriceSoap0 = new ShoppingItemPriceSoap();
      boolean boolean0 = shoppingItemPriceSoap0.getTaxable();
      assertEquals(false, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      ShoppingItemPriceSoap shoppingItemPriceSoap0 = new ShoppingItemPriceSoap();
      double double0 = shoppingItemPriceSoap0.getShipping();
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test17()  throws Throwable  {
      ShoppingItemPriceSoap shoppingItemPriceSoap0 = new ShoppingItemPriceSoap();
      boolean boolean0 = shoppingItemPriceSoap0.isTaxable();
      assertEquals(false, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      ShoppingItemPriceSoap shoppingItemPriceSoap0 = new ShoppingItemPriceSoap();
      int int0 = shoppingItemPriceSoap0.getStatus();
      assertEquals(0, int0);
  }

  @Test
  public void test19()  throws Throwable  {
      ShoppingItemPriceSoap shoppingItemPriceSoap0 = new ShoppingItemPriceSoap();
      shoppingItemPriceSoap0.setPrice((double) 0L);
      assertEquals(0.0, shoppingItemPriceSoap0.getPrice(), 0.01D);
  }

  @Test
  public void test20()  throws Throwable  {
      LinkedList<ShoppingItemPrice> linkedList0 = new LinkedList<ShoppingItemPrice>();
      linkedList0.add((ShoppingItemPrice) null);
      // Undeclared exception!
      try {
        ShoppingItemPriceSoap.toSoapModels((List<ShoppingItemPrice>) linkedList0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test21()  throws Throwable  {
      ShoppingItemPriceSoap shoppingItemPriceSoap0 = new ShoppingItemPriceSoap();
      shoppingItemPriceSoap0.setTaxable(false);
      assertEquals(false, shoppingItemPriceSoap0.isTaxable());
      assertEquals(false, shoppingItemPriceSoap0.getTaxable());
  }

  @Test
  public void test22()  throws Throwable  {
      ShoppingItemPriceSoap shoppingItemPriceSoap0 = new ShoppingItemPriceSoap();
      shoppingItemPriceSoap0.setUseShippingFormula(false);
      assertEquals(false, shoppingItemPriceSoap0.isUseShippingFormula());
      assertEquals(false, shoppingItemPriceSoap0.getUseShippingFormula());
  }

  @Test
  public void test23()  throws Throwable  {
      ShoppingItemPriceSoap shoppingItemPriceSoap0 = new ShoppingItemPriceSoap();
      boolean boolean0 = shoppingItemPriceSoap0.isUseShippingFormula();
      assertEquals(false, boolean0);
  }

  @Test
  public void test24()  throws Throwable  {
      ShoppingItemPrice[][] shoppingItemPriceArray0 = new ShoppingItemPrice[1][8];
      // Undeclared exception!
      try {
        ShoppingItemPriceSoap.toSoapModels(shoppingItemPriceArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test25()  throws Throwable  {
      LinkedList<ShoppingItemPrice> linkedList0 = new LinkedList<ShoppingItemPrice>();
      ShoppingItemPriceSoap[] shoppingItemPriceSoapArray0 = ShoppingItemPriceSoap.toSoapModels((List<ShoppingItemPrice>) linkedList0);
      assertNotNull(shoppingItemPriceSoapArray0);
  }
}
