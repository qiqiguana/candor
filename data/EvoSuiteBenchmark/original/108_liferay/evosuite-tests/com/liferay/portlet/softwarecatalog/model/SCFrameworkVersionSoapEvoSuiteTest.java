/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portlet.softwarecatalog.model;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portlet.softwarecatalog.model.SCFrameworkVersion;
import com.liferay.portlet.softwarecatalog.model.SCFrameworkVersionSoap;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SCFrameworkVersionSoapEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SCFrameworkVersionSoap sCFrameworkVersionSoap0 = new SCFrameworkVersionSoap();
      sCFrameworkVersionSoap0.setPriority(6);
      assertEquals(6, sCFrameworkVersionSoap0.getPriority());
  }

  @Test
  public void test1()  throws Throwable  {
      SCFrameworkVersionSoap sCFrameworkVersionSoap0 = new SCFrameworkVersionSoap();
      sCFrameworkVersionSoap0.setPrimaryKey(0L);
      assertEquals(0L, sCFrameworkVersionSoap0.getFrameworkVersionId());
  }

  @Test
  public void test2()  throws Throwable  {
      SCFrameworkVersionSoap sCFrameworkVersionSoap0 = new SCFrameworkVersionSoap();
      sCFrameworkVersionSoap0.setUserId(0L);
      assertEquals(0, sCFrameworkVersionSoap0.getPriority());
  }

  @Test
  public void test3()  throws Throwable  {
      SCFrameworkVersionSoap sCFrameworkVersionSoap0 = new SCFrameworkVersionSoap();
      String string0 = sCFrameworkVersionSoap0.getName();
      assertNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      SCFrameworkVersionSoap sCFrameworkVersionSoap0 = new SCFrameworkVersionSoap();
      long long0 = sCFrameworkVersionSoap0.getFrameworkVersionId();
      assertEquals(0L, long0);
  }

  @Test
  public void test5()  throws Throwable  {
      SCFrameworkVersionSoap sCFrameworkVersionSoap0 = new SCFrameworkVersionSoap();
      Date date0 = sCFrameworkVersionSoap0.getModifiedDate();
      assertNull(date0);
  }

  @Test
  public void test6()  throws Throwable  {
      SCFrameworkVersionSoap sCFrameworkVersionSoap0 = new SCFrameworkVersionSoap();
      long long0 = sCFrameworkVersionSoap0.getCompanyId();
      assertEquals(0L, long0);
  }

  @Test
  public void test7()  throws Throwable  {
      LinkedList<SCFrameworkVersion> linkedList0 = new LinkedList<SCFrameworkVersion>();
      linkedList0.add((SCFrameworkVersion) null);
      // Undeclared exception!
      try {
        SCFrameworkVersionSoap.toSoapModels((List<SCFrameworkVersion>) linkedList0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      SCFrameworkVersionSoap sCFrameworkVersionSoap0 = new SCFrameworkVersionSoap();
      sCFrameworkVersionSoap0.setUserName("<FSQYg1vmf");
      assertEquals(false, sCFrameworkVersionSoap0.getActive());
  }

  @Test
  public void test9()  throws Throwable  {
      SCFrameworkVersionSoap sCFrameworkVersionSoap0 = new SCFrameworkVersionSoap();
      long long0 = sCFrameworkVersionSoap0.getUserId();
      assertEquals(0L, long0);
  }

  @Test
  public void test10()  throws Throwable  {
      SCFrameworkVersionSoap sCFrameworkVersionSoap0 = new SCFrameworkVersionSoap();
      sCFrameworkVersionSoap0.setUrl("!c-1u");
      assertEquals(0L, sCFrameworkVersionSoap0.getGroupId());
  }

  @Test
  public void test11()  throws Throwable  {
      SCFrameworkVersionSoap sCFrameworkVersionSoap0 = new SCFrameworkVersionSoap();
      boolean boolean0 = sCFrameworkVersionSoap0.getActive();
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      SCFrameworkVersionSoap sCFrameworkVersionSoap0 = new SCFrameworkVersionSoap();
      sCFrameworkVersionSoap0.setGroupId(912L);
      assertEquals(912L, sCFrameworkVersionSoap0.getGroupId());
  }

  @Test
  public void test13()  throws Throwable  {
      SCFrameworkVersionSoap sCFrameworkVersionSoap0 = new SCFrameworkVersionSoap();
      long long0 = sCFrameworkVersionSoap0.getPrimaryKey();
      assertEquals(0L, long0);
  }

  @Test
  public void test14()  throws Throwable  {
      SCFrameworkVersionSoap sCFrameworkVersionSoap0 = new SCFrameworkVersionSoap();
      boolean boolean0 = sCFrameworkVersionSoap0.isActive();
      assertEquals(false, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      SCFrameworkVersionSoap sCFrameworkVersionSoap0 = new SCFrameworkVersionSoap();
      sCFrameworkVersionSoap0.setActive(true);
      assertEquals(true, sCFrameworkVersionSoap0.getActive());
      assertEquals(true, sCFrameworkVersionSoap0.isActive());
  }

  @Test
  public void test16()  throws Throwable  {
      SCFrameworkVersionSoap sCFrameworkVersionSoap0 = new SCFrameworkVersionSoap();
      sCFrameworkVersionSoap0.setCompanyId(912L);
      assertEquals(912L, sCFrameworkVersionSoap0.getCompanyId());
  }

  @Test
  public void test17()  throws Throwable  {
      SCFrameworkVersionSoap sCFrameworkVersionSoap0 = new SCFrameworkVersionSoap();
      String string0 = sCFrameworkVersionSoap0.getUserName();
      assertNull(string0);
  }

  @Test
  public void test18()  throws Throwable  {
      SCFrameworkVersionSoap sCFrameworkVersionSoap0 = new SCFrameworkVersionSoap();
      String string0 = sCFrameworkVersionSoap0.getUrl();
      assertNull(string0);
  }

  @Test
  public void test19()  throws Throwable  {
      SCFrameworkVersionSoap sCFrameworkVersionSoap0 = new SCFrameworkVersionSoap();
      Date date0 = sCFrameworkVersionSoap0.getCreateDate();
      assertNull(date0);
  }

  @Test
  public void test20()  throws Throwable  {
      SCFrameworkVersionSoap sCFrameworkVersionSoap0 = new SCFrameworkVersionSoap();
      int int0 = sCFrameworkVersionSoap0.getPriority();
      assertEquals(0, int0);
  }

  @Test
  public void test21()  throws Throwable  {
      SCFrameworkVersionSoap sCFrameworkVersionSoap0 = new SCFrameworkVersionSoap();
      long long0 = sCFrameworkVersionSoap0.getGroupId();
      assertEquals(0L, long0);
  }

  @Test
  public void test22()  throws Throwable  {
      SCFrameworkVersionSoap sCFrameworkVersionSoap0 = new SCFrameworkVersionSoap();
      sCFrameworkVersionSoap0.setModifiedDate((Date) null);
      assertEquals(0L, sCFrameworkVersionSoap0.getGroupId());
  }

  @Test
  public void test23()  throws Throwable  {
      SCFrameworkVersionSoap sCFrameworkVersionSoap0 = new SCFrameworkVersionSoap();
      sCFrameworkVersionSoap0.setName((String) null);
      assertEquals(0L, sCFrameworkVersionSoap0.getPrimaryKey());
  }

  @Test
  public void test24()  throws Throwable  {
      SCFrameworkVersionSoap sCFrameworkVersionSoap0 = new SCFrameworkVersionSoap();
      sCFrameworkVersionSoap0.setCreateDate((Date) null);
      assertEquals(0L, sCFrameworkVersionSoap0.getCompanyId());
  }

  @Test
  public void test25()  throws Throwable  {
      SCFrameworkVersion[][] sCFrameworkVersionArray0 = new SCFrameworkVersion[1][10];
      // Undeclared exception!
      try {
        SCFrameworkVersionSoap.toSoapModels(sCFrameworkVersionArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test26()  throws Throwable  {
      LinkedList<SCFrameworkVersion> linkedList0 = new LinkedList<SCFrameworkVersion>();
      SCFrameworkVersionSoap[] sCFrameworkVersionSoapArray0 = SCFrameworkVersionSoap.toSoapModels((List<SCFrameworkVersion>) linkedList0);
      assertNotNull(sCFrameworkVersionSoapArray0);
  }
}
