/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portlet.unitconverter.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portlet.unitconverter.model.Conversion;
import com.liferay.portlet.unitconverter.util.ConverterUtil;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ConverterUtilEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try {
        ConverterUtil.getConversion(0, 0, 11, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 11
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      ConverterUtil converterUtil0 = new ConverterUtil();
      assertNotNull(converterUtil0);
  }

  @Test
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try {
        ConverterUtil.getConversion(3, (-260), (-260), 1.3954743843876905E9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * -260
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      Conversion conversion0 = ConverterUtil.getConversion(1, 0, 1, 0);
      assertEquals(0.0, conversion0.getToValue(), 0.01D);
      assertEquals(0, conversion0.getFromId());
      assertEquals(1, conversion0.getToId());
      assertEquals(1, conversion0.getType());
      assertEquals(0.0, conversion0.getFromValue(), 0.01D);
      assertNotNull(conversion0);
  }

  @Test
  public void test4()  throws Throwable  {
      Conversion conversion0 = ConverterUtil.getConversion(2, 2, 0, (-1639.9386862574704));
      assertEquals(2, conversion0.getType());
      assertNotNull(conversion0);
      assertEquals(2, conversion0.getFromId());
      assertEquals(0, conversion0.getToId());
      assertEquals((-1639.9386862574704), conversion0.getFromValue(), 0.01D);
      assertEquals((-26.87378201102506), conversion0.getToValue(), 0.01D);
  }

  @Test
  public void test5()  throws Throwable  {
      Conversion conversion0 = ConverterUtil.getConversion(1221, 0, 0, 889.5079458408675);
      assertEquals(0.0, conversion0.getToValue(), 0.01D);
      assertEquals(0, conversion0.getFromId());
      assertEquals(1221, conversion0.getType());
      assertEquals(889.5079458408675, conversion0.getFromValue(), 0.01D);
      assertEquals(0, conversion0.getToId());
  }

  @Test
  public void test6()  throws Throwable  {
      Conversion conversion0 = ConverterUtil.getConversion(4, 1, 1, 1853.1402512713896);
      assertEquals(1, conversion0.getToId());
      assertEquals(4, conversion0.getType());
      assertEquals(1853.1402512713894, conversion0.getToValue(), 0.01D);
      assertEquals(1853.1402512713896, conversion0.getFromValue(), 0.01D);
      assertEquals(1, conversion0.getFromId());
  }

  @Test
  public void test7()  throws Throwable  {
      double double0 = ConverterUtil.convertTemperature((-157), 2, 2);
      assertEquals((-459.67), double0, 0.01D);
  }

  @Test
  public void test8()  throws Throwable  {
      double double0 = ConverterUtil.convertTemperature(3, 3, 3);
      assertEquals(2.9999999997, double0, 0.01D);
  }

  @Test
  public void test9()  throws Throwable  {
      double double0 = ConverterUtil.convertTemperature(4, 4, 4);
      assertEquals(4.0, double0, 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      double double0 = ConverterUtil.convertTemperature(0, 0, 1853.1402512713896);
      assertEquals(1853.1402512713896, double0, 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      double double0 = ConverterUtil.convertTemperature(2, (-1299), 1.0);
      assertEquals(0.0, double0, 0.01D);
  }
}
