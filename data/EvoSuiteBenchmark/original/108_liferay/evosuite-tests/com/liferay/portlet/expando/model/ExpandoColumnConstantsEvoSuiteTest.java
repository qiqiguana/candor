/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portlet.expando.model;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portlet.expando.model.ExpandoColumnConstants;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ExpandoColumnConstantsEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ExpandoColumnConstants expandoColumnConstants0 = new ExpandoColumnConstants();
      assertNotNull(expandoColumnConstants0);
  }

  @Test
  public void test1()  throws Throwable  {
      Boolean boolean0 = (Boolean)ExpandoColumnConstants.getSerializable(16, "custom.field.java.lang.String.array");
      assertNotNull(boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      Boolean boolean0 = (Boolean)ExpandoColumnConstants.getSerializable(1, "'#=>V");
      assertEquals(false, (boolean)boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      String string0 = (String)ExpandoColumnConstants.getSerializable(2, "XP5+8K");
      assertNotNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      String string0 = (String)ExpandoColumnConstants.getSerializable(4, "XP5+8K");
      assertNotNull(string0);
      assertEquals("XP5+8K", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      Double double0 = (Double)ExpandoColumnConstants.getSerializable(5, "custom.field.double.array");
      assertEquals(0.0, (double)double0, 0.01D);
  }

  @Test
  public void test6()  throws Throwable  {
      Boolean boolean0 = (Boolean)ExpandoColumnConstants.getSerializable(6, "custom.field.double.array");
      assertNotNull(boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      Float float0 = (Float)ExpandoColumnConstants.getSerializable(7, "custom.field.float");
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test
  public void test8()  throws Throwable  {
      Boolean boolean0 = (Boolean)ExpandoColumnConstants.getSerializable(8, "custom.field.float.array");
      assertNotNull(boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      Integer integer0 = (Integer)ExpandoColumnConstants.getSerializable(9, "custom.field.int");
      assertEquals(0, (int)integer0);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = (String)ExpandoColumnConstants.getSerializable(10, "custom.field.boolean.array");
      assertNotNull(string0);
  }

  @Test
  public void test11()  throws Throwable  {
      Long long0 = (Long)ExpandoColumnConstants.getSerializable(11, "custom.field.long");
      assertEquals(0L, (long)long0);
  }

  @Test
  public void test12()  throws Throwable  {
      Short short0 = (Short)ExpandoColumnConstants.getSerializable(12, "custom.field.number.array");
      assertNotNull(short0);
  }

  @Test
  public void test13()  throws Throwable  {
      Integer integer0 = (Integer)ExpandoColumnConstants.getSerializable(17, "");
      assertEquals(0, (int)integer0);
  }

  @Test
  public void test14()  throws Throwable  {
      Integer integer0 = (Integer)ExpandoColumnConstants.getSerializable(18, "custom.field.number.array");
      assertNotNull(integer0);
  }

  @Test
  public void test15()  throws Throwable  {
      Short short0 = (Short)ExpandoColumnConstants.getSerializable(13, "custom.field.short");
      assertEquals((short)0, (short)short0);
  }

  @Test
  public void test16()  throws Throwable  {
      Boolean boolean0 = (Boolean)ExpandoColumnConstants.getSerializable(14, "XP5+8K");
      assertNotNull(boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = (String)ExpandoColumnConstants.getSerializable(390, "");
      assertEquals("", string0);
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = ExpandoColumnConstants.getTypeLabel(16);
      assertEquals("custom.field.java.lang.String.array", string0);
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = ExpandoColumnConstants.getTypeLabel(1);
      assertEquals("custom.field.boolean", string0);
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = ExpandoColumnConstants.getTypeLabel(2);
      assertEquals("custom.field.boolean.array", string0);
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = ExpandoColumnConstants.getTypeLabel(3);
      assertEquals("custom.field.java.util.Date", string0);
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = ExpandoColumnConstants.getTypeLabel(4);
      assertEquals("custom.field.java.util.Date.array", string0);
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = ExpandoColumnConstants.getTypeLabel(5);
      assertEquals("custom.field.double", string0);
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = ExpandoColumnConstants.getTypeLabel(6);
      assertEquals("custom.field.double.array", string0);
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = ExpandoColumnConstants.getTypeLabel(7);
      assertEquals("custom.field.float", string0);
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = ExpandoColumnConstants.getTypeLabel(8);
      assertEquals("custom.field.float.array", string0);
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = ExpandoColumnConstants.getTypeLabel(9);
      assertEquals("custom.field.int", string0);
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = ExpandoColumnConstants.getTypeLabel(10);
      assertEquals("custom.field.int.array", string0);
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = ExpandoColumnConstants.getTypeLabel(11);
      assertEquals("custom.field.long", string0);
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = ExpandoColumnConstants.getTypeLabel(12);
      assertEquals("custom.field.long.array", string0);
  }

  @Test
  public void test31()  throws Throwable  {
      String string0 = ExpandoColumnConstants.getTypeLabel(17);
      assertEquals("custom.field.number", string0);
  }

  @Test
  public void test32()  throws Throwable  {
      String string0 = ExpandoColumnConstants.getTypeLabel(18);
      assertEquals("custom.field.number.array", string0);
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = ExpandoColumnConstants.getTypeLabel(13);
      assertEquals("custom.field.short", string0);
  }

  @Test
  public void test34()  throws Throwable  {
      String string0 = ExpandoColumnConstants.getTypeLabel(14);
      assertEquals("custom.field.short.array", string0);
  }

  @Test
  public void test35()  throws Throwable  {
      String string0 = ExpandoColumnConstants.getTypeLabel(15);
      assertEquals("custom.field.java.lang.String", string0);
  }

  @Test
  public void test36()  throws Throwable  {
      String string0 = ExpandoColumnConstants.getTypeLabel(1663);
      assertEquals("Unknown", string0);
  }
}
