/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.portlet;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portlet.PortalPreferencesImpl;
import com.liferay.portlet.PortletPreferencesImpl;
import com.liferay.portlet.Preference;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import javax.portlet.ReadOnlyException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BasePreferencesImplEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      PortalPreferencesImpl portalPreferencesImpl0 = new PortalPreferencesImpl();
      PortalPreferencesImpl portalPreferencesImpl1 = (PortalPreferencesImpl)portalPreferencesImpl0.clone();
      assertTrue(portalPreferencesImpl0.equals(portalPreferencesImpl1));
  }

  @Test
  public void test1()  throws Throwable  {
      PortletPreferencesImpl portletPreferencesImpl0 = new PortletPreferencesImpl();
      portletPreferencesImpl0.size();
      assertEquals(0, portletPreferencesImpl0.getOwnerType());
  }

  @Test
  public void test2()  throws Throwable  {
      PortletPreferencesImpl portletPreferencesImpl0 = new PortletPreferencesImpl();
      Enumeration<String> enumeration0 = portletPreferencesImpl0.getNames();
      assertEquals(0, portletPreferencesImpl0.getOwnerType());
      assertNotNull(enumeration0);
  }

  @Test
  public void test3()  throws Throwable  {
      PortalPreferencesImpl portalPreferencesImpl0 = new PortalPreferencesImpl();
      portalPreferencesImpl0.reset();
      // Undeclared exception!
      try {
        portalPreferencesImpl0.toXML();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      PortalPreferencesImpl portalPreferencesImpl0 = new PortalPreferencesImpl();
      portalPreferencesImpl0.setValue("", "");
      portalPreferencesImpl0.getMap();
      assertEquals(1, portalPreferencesImpl0.size());
      assertEquals(0, portalPreferencesImpl0.getOwnerType());
  }

  @Test
  public void test5()  throws Throwable  {
      PortalPreferencesImpl portalPreferencesImpl0 = new PortalPreferencesImpl();
      String string0 = portalPreferencesImpl0.getValue("-z]lMy!L)", "-z]lMy!L)");
      assertEquals(0, portalPreferencesImpl0.getOwnerType());
      assertNull(string0);
  }

  @Test
  public void test6()  throws Throwable  {
      PortletPreferencesImpl portletPreferencesImpl0 = new PortletPreferencesImpl();
      // Undeclared exception!
      try {
        portletPreferencesImpl0.getValue((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      PortalPreferencesImpl portalPreferencesImpl0 = new PortalPreferencesImpl();
      Map<String, Preference> map0 = portalPreferencesImpl0.getModifiedPreferences();
      assertNotNull(map0);
      
      PortletPreferencesImpl portletPreferencesImpl0 = new PortletPreferencesImpl(16L, 16L, 6, (long) 6, "1.", "1.", map0);
      portletPreferencesImpl0.setValues("1.", (String[]) null);
      portletPreferencesImpl0.getValue("1.", "1.");
      assertEquals(1, portletPreferencesImpl0.size());
      assertEquals(6, portletPreferencesImpl0.getOwnerType());
  }

  @Test
  public void test8()  throws Throwable  {
      PortalPreferencesImpl portalPreferencesImpl0 = new PortalPreferencesImpl();
      portalPreferencesImpl0.getValues("1.", "1.");
      assertEquals(0, portalPreferencesImpl0.getOwnerType());
  }

  @Test
  public void test9()  throws Throwable  {
      PortalPreferencesImpl portalPreferencesImpl0 = new PortalPreferencesImpl();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try {
        portalPreferencesImpl0.getValues((String) null, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      PortletPreferencesImpl portletPreferencesImpl0 = new PortletPreferencesImpl();
      String[] stringArray0 = new String[10];
      portletPreferencesImpl0.setValue("I(ZlIl'HRoiur&x", "I(ZlIl'HRoiur&x");
      portletPreferencesImpl0.getValues("I(ZlIl'HRoiur&x", stringArray0);
      assertEquals(1, portletPreferencesImpl0.size());
      assertEquals(0, portletPreferencesImpl0.getOwnerType());
  }

  @Test
  public void test11()  throws Throwable  {
      HashMap<String, Preference> hashMap0 = new HashMap<String, Preference>();
      PortletPreferencesImpl portletPreferencesImpl0 = new PortletPreferencesImpl("J+)k{7rv{~<TQbe/<Q", (Map<String, Preference>) hashMap0);
      boolean boolean0 = portletPreferencesImpl0.isReadOnly("J+)k{7rv{~<TQbe/<Q");
      assertEquals(0, portletPreferencesImpl0.getOwnerType());
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      PortalPreferencesImpl portalPreferencesImpl0 = new PortalPreferencesImpl();
      // Undeclared exception!
      try {
        portalPreferencesImpl0.reset((String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      HashMap<String, Preference> hashMap0 = new HashMap<String, Preference>();
      PortletPreferencesImpl portletPreferencesImpl0 = new PortletPreferencesImpl("J+)k{7rv{~<TQbe/<Q", (Map<String, Preference>) hashMap0);
      Preference preference0 = new Preference("J+)k{7rv{~<TQbe/<Q", "J+)k{7rv{~<TQbe/<Q", true);
      hashMap0.put("J+)k{7rv{~<TQbe/<Q", preference0);
      boolean boolean0 = portletPreferencesImpl0.isReadOnly("J+)k{7rv{~<TQbe/<Q");
      assertEquals(true, boolean0);
      assertEquals(0, portletPreferencesImpl0.getOwnerType());
  }

  @Test
  public void test14()  throws Throwable  {
      PortalPreferencesImpl portalPreferencesImpl0 = new PortalPreferencesImpl();
      portalPreferencesImpl0.setValue("", "");
      assertEquals(1, portalPreferencesImpl0.size());
      
      portalPreferencesImpl0.reset("");
      assertEquals(0, portalPreferencesImpl0.size());
  }

  @Test
  public void test15()  throws Throwable  {
      PortalPreferencesImpl portalPreferencesImpl0 = new PortalPreferencesImpl();
      // Undeclared exception!
      try {
        portalPreferencesImpl0.setValue((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }

  @Test
  public void test16()  throws Throwable  {
      HashMap<String, Preference> hashMap0 = new HashMap<String, Preference>();
      PortletPreferencesImpl portletPreferencesImpl0 = new PortletPreferencesImpl("J+)k{7rv{~<TQbe/<Q", (Map<String, Preference>) hashMap0);
      Preference preference0 = new Preference("J+)k{7rv{~<TQbe/<Q", "J+)k{7rv{~<TQbe/<Q", true);
      hashMap0.put("J+)k{7rv{~<TQbe/<Q", preference0);
      try {
        portletPreferencesImpl0.setValue("J+)k{7rv{~<TQbe/<Q", "J+)k{7rv{~<TQbe/<Q");
        fail("Expecting exception: ReadOnlyException");
      } catch(ReadOnlyException e) {
        /*
         * J+)k{7rv{~<TQbe/<Q
         */
      }
  }

  @Test
  public void test17()  throws Throwable  {
      PortletPreferencesImpl portletPreferencesImpl0 = new PortletPreferencesImpl();
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try {
        portletPreferencesImpl0.setValues((String) null, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }

  @Test
  public void test18()  throws Throwable  {
      PortalPreferencesImpl portalPreferencesImpl0 = new PortalPreferencesImpl();
      portalPreferencesImpl0.setValue("", "");
      assertEquals(1, portalPreferencesImpl0.size());
      
      String[] stringArray0 = new String[13];
      portalPreferencesImpl0.setValues("", stringArray0);
      assertEquals(0, portalPreferencesImpl0.getOwnerType());
  }

  @Test
  public void test19()  throws Throwable  {
      PortalPreferencesImpl portalPreferencesImpl0 = new PortalPreferencesImpl();
      String[] stringArray0 = new String[8];
      String[] stringArray1 = portalPreferencesImpl0.getActualValues(stringArray0);
      assertEquals(0, portalPreferencesImpl0.getOwnerType());
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
  }

  @Test
  public void test20()  throws Throwable  {
      PortletPreferencesImpl portletPreferencesImpl0 = new PortletPreferencesImpl();
      String[] stringArray0 = new String[1];
      String[] stringArray1 = portletPreferencesImpl0.getValues(",readOnly=", stringArray0);
      assertEquals(0, portletPreferencesImpl0.getOwnerType());
      assertNull(stringArray1);
  }

  @Test
  public void test21()  throws Throwable  {
      PortalPreferencesImpl portalPreferencesImpl0 = new PortalPreferencesImpl();
      Map<String, Preference> map0 = portalPreferencesImpl0.getModifiedPreferences();
      assertNotNull(map0);
      
      PortletPreferencesImpl portletPreferencesImpl0 = new PortletPreferencesImpl(16L, 16L, 6, (long) 6, "1.", "1.", map0);
      String string0 = portletPreferencesImpl0.toXML();
      assertNotNull(string0);
      assertEquals(16L, portletPreferencesImpl0.getOwnerId());
      assertEquals(16L, portletPreferencesImpl0.getCompanyId());
      assertEquals(6, portletPreferencesImpl0.getOwnerType());
      assertEquals(0, portalPreferencesImpl0.getOwnerType());
  }

  @Test
  public void test22()  throws Throwable  {
      PortletPreferencesImpl portletPreferencesImpl0 = new PortletPreferencesImpl();
      // Undeclared exception!
      try {
        portletPreferencesImpl0.toXML();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
