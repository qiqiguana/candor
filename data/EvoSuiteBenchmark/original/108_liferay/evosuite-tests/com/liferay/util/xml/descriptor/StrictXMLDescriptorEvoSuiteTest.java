/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.util.xml.descriptor;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.util.xml.descriptor.StrictXMLDescriptor;
import org.dom4j.Document;
import org.dom4j.Element;
import org.dom4j.QName;
import org.dom4j.bean.BeanElement;
import org.dom4j.dom.DOMElement;
import org.dom4j.tree.BaseElement;
import org.dom4j.util.IndexedElement;
import org.dom4j.util.NonLazyElement;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class StrictXMLDescriptorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      StrictXMLDescriptor strictXMLDescriptor0 = new StrictXMLDescriptor();
      boolean boolean0 = strictXMLDescriptor0.canHandleType("iNf=", (Document) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      StrictXMLDescriptor strictXMLDescriptor0 = new StrictXMLDescriptor();
      BeanElement beanElement0 = new BeanElement("!&", "EJB");
      String[] stringArray0 = strictXMLDescriptor0.getChildrenOrder((Element) beanElement0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test2()  throws Throwable  {
      StrictXMLDescriptor strictXMLDescriptor0 = new StrictXMLDescriptor();
      IndexedElement indexedElement0 = new IndexedElement("!&");
      boolean boolean0 = strictXMLDescriptor0.canJoinChildren((Element) indexedElement0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      StrictXMLDescriptor strictXMLDescriptor0 = new StrictXMLDescriptor();
      String[] stringArray0 = strictXMLDescriptor0.getRootChildrenOrder();
      assertNotNull(stringArray0);
  }

  @Test
  public void test4()  throws Throwable  {
      StrictXMLDescriptor strictXMLDescriptor0 = new StrictXMLDescriptor();
      BaseElement baseElement0 = new BaseElement("~C,");
      NonLazyElement nonLazyElement0 = new NonLazyElement("ow(`W}");
      boolean boolean0 = strictXMLDescriptor0.areEqual((Element) nonLazyElement0, (Element) baseElement0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      StrictXMLDescriptor strictXMLDescriptor0 = new StrictXMLDescriptor();
      DOMElement dOMElement0 = new DOMElement("w<(`}");
      BeanElement beanElement0 = new BeanElement("w<(`}", "w<(`}");
      boolean boolean0 = strictXMLDescriptor0.areEqual((Element) dOMElement0, (Element) beanElement0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      StrictXMLDescriptor strictXMLDescriptor0 = new StrictXMLDescriptor();
      BeanElement beanElement0 = new BeanElement("!&", "EJB");
      IndexedElement indexedElement0 = new IndexedElement("!&");
      IndexedElement indexedElement1 = (IndexedElement)indexedElement0.addEntity("!&", "EJB");
      boolean boolean0 = strictXMLDescriptor0.areEqual((Element) beanElement0, (Element) indexedElement1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      StrictXMLDescriptor strictXMLDescriptor0 = new StrictXMLDescriptor();
      BeanElement beanElement0 = new BeanElement("!&", "EJB");
      IndexedElement indexedElement0 = new IndexedElement("!&");
      boolean boolean0 = strictXMLDescriptor0.areEqual((Element) beanElement0, (Element) indexedElement0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      StrictXMLDescriptor strictXMLDescriptor0 = new StrictXMLDescriptor();
      IndexedElement indexedElement0 = new IndexedElement("iNf=");
      QName qName0 = indexedElement0.getQName("iNf=");
      IndexedElement indexedElement1 = (IndexedElement)indexedElement0.addAttribute(qName0, "iNf=");
      boolean boolean0 = strictXMLDescriptor0.areEqual((Element) indexedElement1, (Element) indexedElement0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      StrictXMLDescriptor strictXMLDescriptor0 = new StrictXMLDescriptor();
      BeanElement beanElement0 = new BeanElement("!&", "EJB");
      boolean boolean0 = strictXMLDescriptor0.areEqual((Element) beanElement0, (Element) beanElement0);
      assertEquals(false, boolean0);
  }
}
