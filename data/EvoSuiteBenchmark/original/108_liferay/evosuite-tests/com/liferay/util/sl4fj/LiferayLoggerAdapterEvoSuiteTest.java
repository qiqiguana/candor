/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.util.sl4fj;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.log.Jdk14LogImpl;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogWrapper;
import com.liferay.util.sl4fj.LiferayLoggerAdapter;
import java.util.logging.Logger;
import org.junit.BeforeClass;
import org.slf4j.Marker;

@RunWith(EvoSuiteRunner.class)
public class LiferayLoggerAdapterEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      Jdk14LogImpl jdk14LogImpl0 = new Jdk14LogImpl(logger0);
      LiferayLoggerAdapter liferayLoggerAdapter0 = new LiferayLoggerAdapter((Log) jdk14LogImpl0);
      liferayLoggerAdapter0.debug("C,,63Y");
      assertEquals(false, liferayLoggerAdapter0.isDebugEnabled());
  }

  @Test
  public void test1()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      Jdk14LogImpl jdk14LogImpl0 = new Jdk14LogImpl(logger0);
      LiferayLoggerAdapter liferayLoggerAdapter0 = new LiferayLoggerAdapter((Log) jdk14LogImpl0);
      liferayLoggerAdapter0.error("C,,63Y");
      assertEquals(true, liferayLoggerAdapter0.isInfoEnabled());
  }

  @Test
  public void test2()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      Jdk14LogImpl jdk14LogImpl0 = new Jdk14LogImpl(logger0);
      LiferayLoggerAdapter liferayLoggerAdapter0 = new LiferayLoggerAdapter((Log) jdk14LogImpl0);
      liferayLoggerAdapter0.trace("");
      assertEquals(true, liferayLoggerAdapter0.isInfoEnabled());
  }

  @Test
  public void test3()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      Jdk14LogImpl jdk14LogImpl0 = new Jdk14LogImpl(logger0);
      LiferayLoggerAdapter liferayLoggerAdapter0 = new LiferayLoggerAdapter((Log) jdk14LogImpl0);
      liferayLoggerAdapter0.warn("C,,63Y", (Object) null);
      assertEquals(true, liferayLoggerAdapter0.isWarnEnabled());
  }

  @Test
  public void test4()  throws Throwable  {
      Logger logger0 = Logger.getLogger("6Ds2wx*i?^@WF-");
      Jdk14LogImpl jdk14LogImpl0 = new Jdk14LogImpl(logger0);
      LiferayLoggerAdapter liferayLoggerAdapter0 = new LiferayLoggerAdapter((Log) jdk14LogImpl0);
      liferayLoggerAdapter0.error((Marker) null, "6Ds2wx*i?^@WF-", (Object) "6Ds2wx*i?^@WF-");
      assertEquals(true, liferayLoggerAdapter0.isErrorEnabled());
  }

  @Test
  public void test5()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      Jdk14LogImpl jdk14LogImpl0 = new Jdk14LogImpl(logger0);
      LiferayLoggerAdapter liferayLoggerAdapter0 = new LiferayLoggerAdapter((Log) jdk14LogImpl0);
      liferayLoggerAdapter0.debug("C,,63Y", (Object) null);
      assertEquals(false, liferayLoggerAdapter0.isTraceEnabled());
  }

  @Test
  public void test6()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      Jdk14LogImpl jdk14LogImpl0 = new Jdk14LogImpl(logger0);
      LiferayLoggerAdapter liferayLoggerAdapter0 = new LiferayLoggerAdapter((Log) jdk14LogImpl0);
      liferayLoggerAdapter0.debug("", (Object) logger0, (Object) jdk14LogImpl0);
      assertEquals(true, jdk14LogImpl0.isWarnEnabled());
  }

  @Test
  public void test7()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      Jdk14LogImpl jdk14LogImpl0 = new Jdk14LogImpl(logger0);
      LogWrapper logWrapper0 = new LogWrapper((Log) jdk14LogImpl0);
      LiferayLoggerAdapter liferayLoggerAdapter0 = new LiferayLoggerAdapter((Log) logWrapper0);
      Object[] objectArray0 = new Object[7];
      liferayLoggerAdapter0.debug("Value", objectArray0);
      assertEquals("com.liferay.util.sl4fj.LiferayLoggerAdapter(null)", liferayLoggerAdapter0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      Logger logger0 = Logger.getLogger("6Ds2wx*i?^@WF-");
      Jdk14LogImpl jdk14LogImpl0 = new Jdk14LogImpl(logger0);
      LiferayLoggerAdapter liferayLoggerAdapter0 = new LiferayLoggerAdapter((Log) jdk14LogImpl0);
      Object[] objectArray0 = new Object[1];
      liferayLoggerAdapter0.error("6Ds2wx*i?^@WF-", objectArray0);
      assertEquals(true, liferayLoggerAdapter0.isErrorEnabled());
  }

  @Test
  public void test9()  throws Throwable  {
      Logger logger0 = Logger.getLogger("n&cMH\"Uw");
      Jdk14LogImpl jdk14LogImpl0 = new Jdk14LogImpl(logger0);
      LogWrapper logWrapper0 = new LogWrapper((Log) jdk14LogImpl0);
      LiferayLoggerAdapter liferayLoggerAdapter0 = new LiferayLoggerAdapter((Log) logWrapper0);
      liferayLoggerAdapter0.info("n&cMH\"Uw", "n&cMH\"Uw#");
      assertEquals(true, liferayLoggerAdapter0.isInfoEnabled());
  }

  @Test
  public void test10()  throws Throwable  {
      Logger logger0 = Logger.getLogger(">n+,!ds@g|V4g\"H");
      Jdk14LogImpl jdk14LogImpl0 = new Jdk14LogImpl(logger0);
      LiferayLoggerAdapter liferayLoggerAdapter0 = new LiferayLoggerAdapter((Log) jdk14LogImpl0);
      liferayLoggerAdapter0.info(">n+,!ds@g|V4g\"H", ">n+,!ds@g|V4g\"H", "JMenuBar");
      assertEquals(true, liferayLoggerAdapter0.isInfoEnabled());
  }

  @Test
  public void test11()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      Jdk14LogImpl jdk14LogImpl0 = new Jdk14LogImpl(logger0);
      LiferayLoggerAdapter liferayLoggerAdapter0 = new LiferayLoggerAdapter((Log) jdk14LogImpl0);
      liferayLoggerAdapter0.trace("", (Object) logger0);
      assertEquals(true, liferayLoggerAdapter0.isWarnEnabled());
  }

  @Test
  public void test12()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      Jdk14LogImpl jdk14LogImpl0 = new Jdk14LogImpl(logger0);
      LogWrapper logWrapper0 = new LogWrapper((Log) jdk14LogImpl0);
      LiferayLoggerAdapter liferayLoggerAdapter0 = new LiferayLoggerAdapter((Log) logWrapper0);
      Object[] objectArray0 = new Object[7];
      liferayLoggerAdapter0.trace("Value", objectArray0);
      assertEquals(true, liferayLoggerAdapter0.isWarnEnabled());
  }
}
