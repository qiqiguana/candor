/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.util.xml.descriptor;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.util.xml.ElementIdentifier;
import com.liferay.util.xml.descriptor.PortletAppDescriptor;
import com.liferay.util.xml.descriptor.StrutsConfigDescriptor;
import com.liferay.util.xml.descriptor.WebXML23Descriptor;
import com.liferay.util.xml.descriptor.WebXML24Descriptor;
import org.dom4j.DocumentFactory;
import org.dom4j.Element;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.bean.BeanElement;
import org.dom4j.tree.BaseElement;
import org.dom4j.tree.DefaultElement;
import org.dom4j.util.NonLazyElement;
import org.dom4j.util.UserDataElement;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SimpleXMLDescriptorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DocumentFactory documentFactory0 = new DocumentFactory();
      QName qName0 = documentFactory0.createQName("context-param", "context-param");
      NonLazyElement nonLazyElement0 = new NonLazyElement(qName0, 1641);
      WebXML23Descriptor webXML23Descriptor0 = new WebXML23Descriptor();
      boolean boolean0 = webXML23Descriptor0.areEqual((Element) nonLazyElement0, (Element) nonLazyElement0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      PortletAppDescriptor portletAppDescriptor0 = new PortletAppDescriptor();
      String[] stringArray0 = portletAppDescriptor0.getUniqueElements();
      assertNotNull(stringArray0);
  }

  @Test
  public void test2()  throws Throwable  {
      PortletAppDescriptor portletAppDescriptor0 = new PortletAppDescriptor();
      String[] stringArray0 = portletAppDescriptor0.getRootChildrenOrder();
      assertNotNull(stringArray0);
  }

  @Test
  public void test3()  throws Throwable  {
      PortletAppDescriptor portletAppDescriptor0 = new PortletAppDescriptor();
      ElementIdentifier[] elementIdentifierArray0 = portletAppDescriptor0.getElementsIdentifiedByAttribute();
      assertNotNull(elementIdentifierArray0);
  }

  @Test
  public void test4()  throws Throwable  {
      PortletAppDescriptor portletAppDescriptor0 = new PortletAppDescriptor();
      String[] stringArray0 = portletAppDescriptor0.getChildrenOrder((Element) null);
      assertNotNull(stringArray0);
  }

  @Test
  public void test5()  throws Throwable  {
      UserDataElement userDataElement0 = new UserDataElement("forward");
      QName qName0 = userDataElement0.getQName();
      BeanElement beanElement0 = new BeanElement(qName0);
      PortletAppDescriptor portletAppDescriptor0 = new PortletAppDescriptor();
      boolean boolean0 = portletAppDescriptor0.canJoinChildren((Element) beanElement0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      StrutsConfigDescriptor strutsConfigDescriptor0 = new StrutsConfigDescriptor();
      Namespace namespace0 = Namespace.get("c'RI!ZNBWH^y\"");
      BaseElement baseElement0 = new BaseElement("noElemAfter&ody12", namespace0);
      DefaultElement defaultElement0 = (DefaultElement)baseElement0.createCopy("c'RI!ZNBWH^y\"");
      boolean boolean0 = strutsConfigDescriptor0.areEqual((Element) defaultElement0, (Element) baseElement0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      StrutsConfigDescriptor strutsConfigDescriptor0 = new StrutsConfigDescriptor();
      BaseElement baseElement0 = new BaseElement("forward");
      boolean boolean0 = strutsConfigDescriptor0.areEqual((Element) baseElement0, (Element) baseElement0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      WebXML24Descriptor webXML24Descriptor0 = new WebXML24Descriptor();
      UserDataElement userDataElement0 = new UserDataElement("4[MPyK0QN");
      boolean boolean0 = webXML24Descriptor0.areEqual((Element) userDataElement0, (Element) userDataElement0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      StrutsConfigDescriptor strutsConfigDescriptor0 = new StrutsConfigDescriptor();
      BaseElement baseElement0 = new BaseElement("portlet");
      DefaultElement defaultElement0 = (DefaultElement)baseElement0.addElement("portlet", "portlet", "portlet");
      boolean boolean0 = strutsConfigDescriptor0.areEqual((Element) defaultElement0, (Element) baseElement0);
      assertEquals(false, boolean0);
  }
}
