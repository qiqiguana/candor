/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.util.cal;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.util.cal.DayAndPosition;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DayAndPositionEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DayAndPosition dayAndPosition0 = new DayAndPosition();
      DayAndPosition dayAndPosition1 = (DayAndPosition)dayAndPosition0.clone();
      assertEquals("com.liferay.util.cal.DayAndPosition[day=0,position=0]", dayAndPosition1.toString());
      assertNotSame(dayAndPosition1, dayAndPosition0);
  }

  @Test
  public void test1()  throws Throwable  {
      DayAndPosition dayAndPosition0 = new DayAndPosition(6, 6);
      assertNotNull(dayAndPosition0);
      
      String string0 = dayAndPosition0.toString();
      assertEquals("com.liferay.util.cal.DayAndPosition[day=6,position=6]", string0);
      assertNotNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      DayAndPosition dayAndPosition0 = new DayAndPosition();
      DayAndPosition dayAndPosition1 = new DayAndPosition(1, 0);
      assertNotNull(dayAndPosition1);
      
      boolean boolean0 = dayAndPosition0.equals((Object) dayAndPosition1);
      assertFalse(dayAndPosition1.equals(dayAndPosition0));
      assertEquals(1, dayAndPosition1.getDayOfWeek());
      assertEquals(0, dayAndPosition0.getDayPosition());
      assertEquals("com.liferay.util.cal.DayAndPosition[day=1,position=0]", dayAndPosition1.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      DayAndPosition dayAndPosition0 = new DayAndPosition();
      // Undeclared exception!
      try {
        dayAndPosition0.hashCode();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      DayAndPosition dayAndPosition0 = new DayAndPosition();
      dayAndPosition0.setDayOfWeek(0);
      assertEquals("com.liferay.util.cal.DayAndPosition[day=0,position=0]", dayAndPosition0.toString());
      assertEquals(0, dayAndPosition0.getDayPosition());
  }

  @Test
  public void test5()  throws Throwable  {
      DayAndPosition dayAndPosition0 = new DayAndPosition(2, (-1));
      assertNotNull(dayAndPosition0);
      
      // Undeclared exception!
      try {
        dayAndPosition0.setDayPosition((-1457));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      DayAndPosition dayAndPosition0 = new DayAndPosition(3, (-1));
      assertEquals("com.liferay.util.cal.DayAndPosition[day=3,position=-1]", dayAndPosition0.toString());
      assertNotNull(dayAndPosition0);
  }

  @Test
  public void test7()  throws Throwable  {
      boolean boolean0 = DayAndPosition.isValidDayOfWeek(4);
      assertEquals(true, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      DayAndPosition dayAndPosition0 = new DayAndPosition(5, 5);
      assertNotNull(dayAndPosition0);
      
      boolean boolean0 = dayAndPosition0.equals((Object) null);
      assertEquals(false, boolean0);
      assertEquals("com.liferay.util.cal.DayAndPosition[day=5,position=5]", dayAndPosition0.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      boolean boolean0 = DayAndPosition.isValidDayOfWeek(7);
      assertEquals(true, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      DayAndPosition dayAndPosition0 = null;
      try {
        dayAndPosition0 = new DayAndPosition((-53), (-53));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Invalid day of week
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      DayAndPosition dayAndPosition0 = null;
      try {
        dayAndPosition0 = new DayAndPosition(0, 1679);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Invalid day position
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      DayAndPosition dayAndPosition0 = new DayAndPosition();
      boolean boolean0 = dayAndPosition0.equals((Object) "_^M9N m$<");
      assertEquals("com.liferay.util.cal.DayAndPosition[day=0,position=0]", dayAndPosition0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      DayAndPosition dayAndPosition0 = new DayAndPosition();
      DayAndPosition dayAndPosition1 = new DayAndPosition();
      boolean boolean0 = dayAndPosition0.equals((Object) dayAndPosition1);
      assertEquals(true, boolean0);
      assertEquals(0, dayAndPosition0.getDayOfWeek());
      assertEquals(0, dayAndPosition0.getDayPosition());
  }

  @Test
  public void test14()  throws Throwable  {
      DayAndPosition dayAndPosition0 = new DayAndPosition();
      DayAndPosition dayAndPosition1 = new DayAndPosition(0, 10);
      assertNotNull(dayAndPosition1);
      
      boolean boolean0 = dayAndPosition0.equals((Object) dayAndPosition1);
      assertEquals(false, boolean0);
      assertEquals(10, dayAndPosition1.getDayPosition());
      assertEquals("com.liferay.util.cal.DayAndPosition[day=0,position=0]", dayAndPosition0.toString());
      assertEquals(0, dayAndPosition1.getDayOfWeek());
      assertFalse(dayAndPosition1.equals(dayAndPosition0));
  }

  @Test
  public void test15()  throws Throwable  {
      DayAndPosition dayAndPosition0 = new DayAndPosition();
      // Undeclared exception!
      try {
        dayAndPosition0.setDayOfWeek((-1165));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Invalid day of week
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      DayAndPosition dayAndPosition0 = new DayAndPosition();
      assertEquals(0, dayAndPosition0.getDayPosition());
      
      dayAndPosition0.setDayPosition(1);
      assertEquals("com.liferay.util.cal.DayAndPosition[day=0,position=1]", dayAndPosition0.toString());
      assertEquals(1, dayAndPosition0.getDayPosition());
  }
}
