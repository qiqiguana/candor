/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.util.ant;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.util.ant.ManifestHelperTask;
import java.util.Date;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.types.Reference;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.jfree.data.time.FixedMillisecond;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ManifestHelperTaskEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      ManifestHelperTask manifestHelperTask0 = new ManifestHelperTask();
      manifestHelperTask0.setAnalyze(true);
      assertNull(manifestHelperTask0.getDescription());
  }

  @Test
  public void test1()  throws Throwable  {
      ManifestHelperTask manifestHelperTask0 = new ManifestHelperTask();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-825L));
      Date date0 = fixedMillisecond0.getEnd();
      String string0 = manifestHelperTask0.getDateString(date0);
      assertNotNull(string0);
      assertEquals("Thu Jan 1 00:59:59 GMT 1970", string0);
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          ManifestHelperTask manifestHelperTask0 = new ManifestHelperTask();
          try {
            manifestHelperTask0.execute("Thu Jan 1 00:59:59 GMT 1970");
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission <<ALL FILES>> execute)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkExec(SecurityManager.java:782)
             * java.lang.ProcessBuilder.start(ProcessBuilder.java:448)
             * java.lang.Runtime.exec(Runtime.java:593)
             * java.lang.Runtime.exec(Runtime.java:431)
             * java.lang.Runtime.exec(Runtime.java:328)
             * com.liferay.util.ant.ManifestHelperTask.execute(ManifestHelperTask.java:127)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
      ManifestHelperTask manifestHelperTask0 = new ManifestHelperTask();
      try {
        manifestHelperTask0.execute();
        fail("Expecting exception: BuildException");
      } catch(BuildException e) {
        /*
         * java.lang.NullPointerException
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      ManifestHelperTask manifestHelperTask0 = new ManifestHelperTask();
      manifestHelperTask0.setClasspathRef((Reference) null);
      manifestHelperTask0.setClasspathRef((Reference) null);
      assertNull(manifestHelperTask0.getDescription());
  }
}
