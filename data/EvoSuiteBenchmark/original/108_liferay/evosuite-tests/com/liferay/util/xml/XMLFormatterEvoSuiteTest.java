/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.util.xml;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.util.xml.XMLFormatter;
import java.io.IOException;
import org.dom4j.DocumentException;
import org.dom4j.Node;
import org.dom4j.dom.DOMDocumentType;
import org.dom4j.tree.BaseElement;
import org.dom4j.tree.DefaultDocument;
import org.evosuite.testcase.TestCaseExecutor;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class XMLFormatterEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BaseElement baseElement0 = new BaseElement("H\"");
      String string0 = XMLFormatter.toString((Node) baseElement0);
      assertNotNull(string0);
      assertEquals("\n<H\"/>", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      String string0 = XMLFormatter.fromCompactSafe("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'(),-./:?!\"#$%&*;<=>@[]^_`{|} \t\r\n");
      assertEquals("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'(),-./:?!\"#$%&*;<=>@[]^_`{|} \t\r\n", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      XMLFormatter.toString("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'(),-./:?!\"#$%&*;<=>@[]^_`{|} \t\r\n");
  }

  @Test
  public void test3()  throws Throwable  {
      XMLFormatter xMLFormatter0 = new XMLFormatter();
      assertNotNull(xMLFormatter0);
  }

  @Test
  public void test4()  throws Throwable  {
      String string0 = XMLFormatter.toCompactSafe("H\"");
      assertEquals("H\"", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      String string0 = XMLFormatter.fixProlog((String) null);
      assertNull(string0);
  }

  @Test
  public void test6()  throws Throwable  {
      String string0 = XMLFormatter.fixProlog("H\"");
      assertEquals("H\"", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      String string0 = XMLFormatter.fixProlog("\n<>\n<v/>\n</>");
      assertEquals("<>\n<v/>\n</>", string0);
      assertNotNull(string0);
  }

  @Test
  public void test8()  throws Throwable  {
      String string0 = XMLFormatter.stripInvalidChars("");
      assertEquals("", string0);
  }

  @Test
  public void test9()  throws Throwable  {
      String string0 = XMLFormatter.stripInvalidChars("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'(),-./:?!\"#$%&*;<=>@[]^_`{|} \t\r\n");
      assertNotNull(string0);
      assertEquals("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'(),-./:?!\"#$%&*;<=>@[]^_`{|} \t\r\n", string0);
  }

  @Test
  public void test10()  throws Throwable  {
      DefaultDocument defaultDocument0 = new DefaultDocument();
      String string0 = XMLFormatter.toString((Node) defaultDocument0, (String) null);
      assertNotNull(string0);
      assertEquals("<?xml version=\"1.0\"?>", string0);
  }

  @Test
  public void test11()  throws Throwable  {
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType("\n<8tOW*\n\n", "\n<8tOW*\n\n");
      String string0 = XMLFormatter.toString((Node) dOMDocumentType0, "\n<8tOW*\n\n");
      assertNotNull(string0);
      assertEquals("<!DOCTYPE\n<8tOW*\n\n SYSTEM \"\n<8tOW*\n\n\">", string0);
  }
}
