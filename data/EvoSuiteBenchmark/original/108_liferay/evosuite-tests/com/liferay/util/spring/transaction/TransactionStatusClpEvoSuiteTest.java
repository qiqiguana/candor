/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.util.spring.transaction;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.util.spring.transaction.TransactionStatusClp;
import org.junit.BeforeClass;
import org.springframework.transaction.TransactionException;
import org.springframework.transaction.TransactionSystemException;
import org.springframework.transaction.support.DefaultTransactionStatus;
import org.springframework.transaction.support.SimpleTransactionStatus;

@RunWith(EvoSuiteRunner.class)
public class TransactionStatusClpEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Boolean boolean0 = new Boolean("");
      DefaultTransactionStatus defaultTransactionStatus0 = new DefaultTransactionStatus((Object) boolean0, false, (boolean) boolean0, false, (boolean) boolean0, (Object) boolean0);
      TransactionStatusClp transactionStatusClp0 = new TransactionStatusClp((Object) defaultTransactionStatus0);
      boolean boolean1 = transactionStatusClp0.isCompleted();
      assertTrue(boolean0.equals(boolean1));
  }

  @Test
  public void test1()  throws Throwable  {
      SimpleTransactionStatus simpleTransactionStatus0 = new SimpleTransactionStatus();
      TransactionStatusClp transactionStatusClp0 = new TransactionStatusClp((Object) simpleTransactionStatus0);
      boolean boolean0 = transactionStatusClp0.isRollbackOnly();
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      Boolean boolean0 = new Boolean("");
      DefaultTransactionStatus defaultTransactionStatus0 = new DefaultTransactionStatus((Object) boolean0, false, (boolean) boolean0, false, (boolean) boolean0, (Object) boolean0);
      TransactionStatusClp transactionStatusClp0 = new TransactionStatusClp((Object) defaultTransactionStatus0);
      boolean boolean1 = transactionStatusClp0.hasSavepoint();
      assertEquals(false, boolean1);
  }

  @Test
  public void test3()  throws Throwable  {
      TransactionStatusClp transactionStatusClp0 = new TransactionStatusClp((Object) "false");
      String string0 = (String)transactionStatusClp0.getRemoteTransactionStatus();
      transactionStatusClp0.initRemoteMethods((Object) string0);
  }

  @Test
  public void test4()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      TransactionStatusClp transactionStatusClp0 = new TransactionStatusClp((Object) boolean0);
      try {
        transactionStatusClp0.rollbackToSavepoint((Object) null);
        fail("Expecting exception: TransactionSystemException");
      } catch(TransactionSystemException e) {
        /*
         * object is not an instance of declaring class
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      Boolean boolean0 = new Boolean("");
      DefaultTransactionStatus defaultTransactionStatus0 = new DefaultTransactionStatus((Object) boolean0, false, (boolean) boolean0, false, (boolean) boolean0, (Object) boolean0);
      TransactionStatusClp transactionStatusClp0 = new TransactionStatusClp((Object) defaultTransactionStatus0);
      boolean boolean1 = transactionStatusClp0.isNewTransaction();
      assertNotSame(boolean0, boolean1);
  }

  @Test
  public void test6()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      TransactionStatusClp transactionStatusClp0 = new TransactionStatusClp((Object) boolean0);
      try {
        transactionStatusClp0.releaseSavepoint((Object) boolean0);
        fail("Expecting exception: TransactionSystemException");
      } catch(TransactionSystemException e) {
        /*
         * object is not an instance of declaring class
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      SimpleTransactionStatus simpleTransactionStatus0 = new SimpleTransactionStatus();
      TransactionStatusClp transactionStatusClp0 = new TransactionStatusClp((Object) simpleTransactionStatus0);
      transactionStatusClp0.flush();
      assertEquals(false, transactionStatusClp0.isCompleted());
  }

  @Test
  public void test8()  throws Throwable  {
      Object object0 = new Object();
      TransactionStatusClp transactionStatusClp0 = new TransactionStatusClp(object0);
      try {
        transactionStatusClp0.createSavepoint();
        fail("Expecting exception: TransactionSystemException");
      } catch(TransactionSystemException e) {
        /*
         * object is not an instance of declaring class
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      Boolean boolean0 = new Boolean("");
      DefaultTransactionStatus defaultTransactionStatus0 = new DefaultTransactionStatus((Object) boolean0, false, (boolean) boolean0, false, (boolean) boolean0, (Object) boolean0);
      TransactionStatusClp transactionStatusClp0 = new TransactionStatusClp((Object) defaultTransactionStatus0);
      transactionStatusClp0.setRollbackOnly();
      assertEquals(true, defaultTransactionStatus0.isLocalRollbackOnly());
      assertEquals(true, transactionStatusClp0.isRollbackOnly());
  }
}
