/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.util.bridges.wai;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portal.kernel.portlet.Router;
import com.liferay.util.bridges.wai.WAIFriendlyURLMapper;
import java.util.HashMap;
import java.util.Map;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class WAIFriendlyURLMapperEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      WAIFriendlyURLMapper wAIFriendlyURLMapper0 = new WAIFriendlyURLMapper();
      String string0 = wAIFriendlyURLMapper0.getMapping();
      assertEquals("waiapp", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      WAIFriendlyURLMapper wAIFriendlyURLMapper0 = new WAIFriendlyURLMapper();
      Router router0 = wAIFriendlyURLMapper0.getRouter();
      assertNull(router0);
  }

  @Test
  public void test2()  throws Throwable  {
      WAIFriendlyURLMapper wAIFriendlyURLMapper0 = new WAIFriendlyURLMapper();
      String string0 = wAIFriendlyURLMapper0.getPortletId();
      assertNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      WAIFriendlyURLMapper wAIFriendlyURLMapper0 = new WAIFriendlyURLMapper();
      wAIFriendlyURLMapper0.setRouter((Router) null);
      assertNull(wAIFriendlyURLMapper0.getPortletId());
  }

  @Test
  public void test4()  throws Throwable  {
      WAIFriendlyURLMapper wAIFriendlyURLMapper0 = new WAIFriendlyURLMapper();
      boolean boolean0 = wAIFriendlyURLMapper0.isPortletInstanceable();
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      WAIFriendlyURLMapper wAIFriendlyURLMapper0 = new WAIFriendlyURLMapper();
      wAIFriendlyURLMapper0.setPortletId((String) null);
      assertNull(wAIFriendlyURLMapper0.getPortletId());
  }

  @Test
  public void test6()  throws Throwable  {
      WAIFriendlyURLMapper wAIFriendlyURLMapper0 = new WAIFriendlyURLMapper();
      wAIFriendlyURLMapper0.setMapping(" %E$|LGd");
      assertNull(wAIFriendlyURLMapper0.getPortletId());
  }

  @Test
  public void test7()  throws Throwable  {
      WAIFriendlyURLMapper wAIFriendlyURLMapper0 = new WAIFriendlyURLMapper();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try {
        wAIFriendlyURLMapper0.populateParams("waiapp", (Map<String, String[]>) null, (Map<String, Object>) hashMap0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
        /*
         * String index out of range: -8
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      WAIFriendlyURLMapper wAIFriendlyURLMapper0 = new WAIFriendlyURLMapper();
      boolean boolean0 = wAIFriendlyURLMapper0.hasBinaryExtension(" %E$|LGd");
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      WAIFriendlyURLMapper wAIFriendlyURLMapper0 = new WAIFriendlyURLMapper();
      boolean boolean0 = wAIFriendlyURLMapper0.hasBinaryExtension("-%E$|[Fvd.png");
      assertEquals(true, boolean0);
  }
}
