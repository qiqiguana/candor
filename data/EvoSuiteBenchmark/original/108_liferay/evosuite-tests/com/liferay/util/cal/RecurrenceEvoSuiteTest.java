/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.util.cal;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.util.cal.DayAndPosition;
import com.liferay.util.cal.Duration;
import com.liferay.util.cal.Recurrence;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.TimeZone;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class RecurrenceEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance();
      long long0 = Recurrence.getDayNumber((Calendar) gregorianCalendar0);
      assertEquals(1372784508922L, gregorianCalendar0.getTimeInMillis());
      assertEquals(15887L, long0);
  }

  @Test
  public void test1()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance();
      Duration duration0 = new Duration((-1836));
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      int int0 = recurrence0.getWeekStart();
      assertEquals(1372784520226L, gregorianCalendar0.getTimeInMillis());
      assertEquals(2, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance();
      Duration duration0 = new Duration((-1831));
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      recurrence0.getDuration();
      assertEquals("java.util.GregorianCalendar[time=1372784540597,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GB\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=GB,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=2,SECOND=20,MILLISECOND=597,ZONE_OFFSET=0,DST_OFFSET=3600000]", gregorianCalendar0.toString());
      assertEquals(1372784540597L, gregorianCalendar0.getTimeInMillis());
  }

  @Test
  public void test3()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar((-282), (-282), (-1022), (-282), 931, (-1022));
      Duration duration0 = new Duration((-1781), 1461, (-1022));
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0, 931);
      assertNotNull(recurrence0);
      
      int int0 = recurrence0.getOccurrence();
      assertEquals("com.liferay.util.cal.Recurrence[dtStart=java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=310,MONTH=7,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=31,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=13,SECOND=58,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?],duration=com.liferay.util.cal.Duration[weeks=0,days=0,hours=-1781,minutes=1461,seconds=-1022],frequency=931,interval=1,until=null,byDay=null,byMonthDay=null,byYearDay=null,byWeekNo=null,byMonth=null]", recurrence0.toString());
      assertEquals(0, int0);
  }

  @Test
  public void test4()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance();
      Duration duration0 = new Duration(669, (-209), (-209), (-1691));
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0, 0);
      recurrence0.setWeekStart(669);
      assertEquals("java.util.GregorianCalendar[time=1372784583585,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GB\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=GB,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=3,SECOND=3,MILLISECOND=585,ZONE_OFFSET=0,DST_OFFSET=3600000]", gregorianCalendar0.toString());
      assertEquals(1372784583585L, gregorianCalendar0.getTimeInMillis());
  }

  @Test
  public void test5()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance();
      Duration duration0 = new Duration((-1831));
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      GregorianCalendar gregorianCalendar1 = (GregorianCalendar)recurrence0.getDtStart();
      assertEquals("java.util.GregorianCalendar[time=1372784606941,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GB\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=GB,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=3,SECOND=26,MILLISECOND=941,ZONE_OFFSET=0,DST_OFFSET=3600000]", gregorianCalendar0.toString());
      assertEquals(1372788206941L, gregorianCalendar1.getTimeInMillis());
  }

  @Test
  public void test6()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar();
      Duration duration0 = new Duration();
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      recurrence0.setDuration(duration0);
      assertEquals("java.util.GregorianCalendar[time=1372784628651,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GB\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=GB,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=3,SECOND=48,MILLISECOND=651,ZONE_OFFSET=0,DST_OFFSET=3600000]", gregorianCalendar0.toString());
      assertEquals("com.liferay.util.cal.Recurrence[dtStart=java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=3,SECOND=48,MILLISECOND=651,ZONE_OFFSET=?,DST_OFFSET=?],duration=com.liferay.util.cal.Duration[weeks=0,days=0,hours=0,minutes=0,seconds=0],frequency=7,interval=1,until=null,byDay=null,byMonthDay=null,byYearDay=null,byWeekNo=null,byMonth=null]", recurrence0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance();
      Duration duration0 = new Duration((-1836));
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      int int0 = recurrence0.getFrequency();
      assertEquals("java.util.GregorianCalendar[time=1372784648295,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GB\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=GB,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=4,SECOND=8,MILLISECOND=295,ZONE_OFFSET=0,DST_OFFSET=3600000]", gregorianCalendar0.toString());
      assertEquals(7, int0);
  }

  @Test
  public void test8()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(0, (-130), (-130));
      long long0 = Recurrence.getMonthNumber((Calendar) gregorianCalendar0);
      assertEquals((-23475L), long0);
  }

  @Test
  public void test9()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(0, (-130), (-130));
      Duration duration0 = new Duration();
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      assertNotNull(recurrence0);
      
      GregorianCalendar gregorianCalendar1 = (GregorianCalendar)recurrence0.getDtEnd();
      assertEquals("com.liferay.util.cal.Recurrence[dtStart=java.util.GregorianCalendar[time=-62520681600000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=13,MONTH=9,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=21,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?],duration=com.liferay.util.cal.Duration[weeks=0,days=0,hours=0,minutes=0,seconds=0],frequency=7,interval=1,until=null,byDay=null,byMonthDay=null,byYearDay=null,byWeekNo=null,byMonth=null]", recurrence0.toString());
      assertEquals("java.util.GregorianCalendar[time=-62520681600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=13,MONTH=9,WEEK_OF_YEAR=43,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=295,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar1.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance();
      Duration duration0 = new Duration((-1850));
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      recurrence0.setDtEnd((Calendar) gregorianCalendar0);
      assertEquals("java.util.GregorianCalendar[time=1372784695877,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GB\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=GB,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=4,SECOND=55,MILLISECOND=877,ZONE_OFFSET=0,DST_OFFSET=3600000]", gregorianCalendar0.toString());
      assertEquals(1372784695877L, gregorianCalendar0.getTimeInMillis());
  }

  @Test
  public void test11()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance();
      Duration duration0 = new Duration((-1831));
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      recurrence0.setOccurrence(60);
      boolean boolean0 = recurrence0.isInRecurrence((Calendar) gregorianCalendar0);
      assertEquals("java.util.GregorianCalendar[time=1372784721163,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GB\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=GB,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=5,SECOND=21,MILLISECOND=163,ZONE_OFFSET=0,DST_OFFSET=3600000]", gregorianCalendar0.toString());
      assertEquals(true, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance();
      Duration duration0 = new Duration((-1831));
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      int int0 = recurrence0.getInterval();
      assertEquals("java.util.GregorianCalendar[time=1372784765234,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GB\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=GB,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=6,SECOND=5,MILLISECOND=234,ZONE_OFFSET=0,DST_OFFSET=3600000]", gregorianCalendar0.toString());
      assertEquals(1, int0);
  }

  @Test
  public void test13()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(0, (-130), (-130));
      Duration duration0 = new Duration();
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      assertNotNull(recurrence0);
      
      DayAndPosition[] dayAndPositionArray0 = new DayAndPosition[1];
      DayAndPosition dayAndPosition0 = new DayAndPosition();
      dayAndPositionArray0[0] = dayAndPosition0;
      recurrence0.setByDay(dayAndPositionArray0);
      recurrence0.getByDay();
      assertEquals("com.liferay.util.cal.Recurrence[dtStart=java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=13,MONTH=9,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=21,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?],duration=com.liferay.util.cal.Duration[weeks=0,days=0,hours=0,minutes=0,seconds=0],frequency=7,interval=1,until=null,byDay=[com.liferay.util.cal.DayAndPosition[day=0,position=0]],byMonthDay=null,byYearDay=null,byWeekNo=null,byMonth=null]", recurrence0.toString());
  }

  @Test
  public void test14()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(0, (-130), (-130));
      Duration duration0 = new Duration();
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      assertNotNull(recurrence0);
      
      recurrence0.getByDay();
      assertEquals(0, recurrence0.getOccurrence());
      assertEquals("com.liferay.util.cal.Recurrence[dtStart=java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=13,MONTH=9,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=21,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?],duration=com.liferay.util.cal.Duration[weeks=0,days=0,hours=0,minutes=0,seconds=0],frequency=7,interval=1,until=null,byDay=null,byMonthDay=null,byYearDay=null,byWeekNo=null,byMonth=null]", recurrence0.toString());
      assertEquals(2, recurrence0.getWeekStart());
  }

  @Test
  public void test15()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(0, 0, 0, (-1903), 0, (-1903));
      Duration duration0 = new Duration(0, 442, 627);
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      assertNotNull(recurrence0);
      
      recurrence0.getByMonth();
      assertEquals("com.liferay.util.cal.Recurrence[dtStart=java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=2,MONTH=9,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=12,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=4,HOUR_OF_DAY=16,MINUTE=28,SECOND=17,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?],duration=com.liferay.util.cal.Duration[weeks=0,days=0,hours=0,minutes=442,seconds=627],frequency=7,interval=1,until=null,byDay=null,byMonthDay=null,byYearDay=null,byWeekNo=null,byMonth=null]", recurrence0.toString());
      assertEquals(0, recurrence0.getOccurrence());
  }

  @Test
  public void test16()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance();
      Duration duration0 = new Duration((-1850));
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      int[] intArray0 = new int[7];
      recurrence0.setByMonthDay(intArray0);
      recurrence0.getByMonthDay();
      assertEquals("java.util.GregorianCalendar[time=1372784865210,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GB\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=GB,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=7,SECOND=45,MILLISECOND=210,ZONE_OFFSET=0,DST_OFFSET=3600000]", gregorianCalendar0.toString());
      assertEquals(1372784865210L, gregorianCalendar0.getTimeInMillis());
  }

  @Test
  public void test17()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance();
      Duration duration0 = new Duration((-1836));
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      recurrence0.getByMonthDay();
      assertEquals(1372784897274L, gregorianCalendar0.getTimeInMillis());
      assertEquals("java.util.GregorianCalendar[time=1372784897274,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GB\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=GB,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=8,SECOND=17,MILLISECOND=274,ZONE_OFFSET=0,DST_OFFSET=3600000]", gregorianCalendar0.toString());
  }

  @Test
  public void test18()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance();
      Duration duration0 = new Duration((-293));
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      int[] intArray0 = new int[4];
      recurrence0.setByWeekNo(intArray0);
      recurrence0.getByWeekNo();
      assertEquals("java.util.GregorianCalendar[time=1372784917517,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GB\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=GB,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=8,SECOND=37,MILLISECOND=517,ZONE_OFFSET=0,DST_OFFSET=3600000]", gregorianCalendar0.toString());
      assertEquals(1372784917517L, gregorianCalendar0.getTimeInMillis());
  }

  @Test
  public void test19()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar();
      Duration duration0 = new Duration();
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      recurrence0.getByWeekNo();
      assertEquals("java.util.GregorianCalendar[time=1372784948913,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GB\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=GB,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=9,SECOND=8,MILLISECOND=913,ZONE_OFFSET=0,DST_OFFSET=3600000]", gregorianCalendar0.toString());
      assertEquals("com.liferay.util.cal.Recurrence[dtStart=java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=9,SECOND=8,MILLISECOND=913,ZONE_OFFSET=?,DST_OFFSET=?],duration=com.liferay.util.cal.Duration[weeks=0,days=0,hours=0,minutes=0,seconds=0],frequency=7,interval=1,until=null,byDay=null,byMonthDay=null,byYearDay=null,byWeekNo=null,byMonth=null]", recurrence0.toString());
  }

  @Test
  public void test20()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance();
      Duration duration0 = new Duration((-1836));
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      int[] intArray0 = new int[3];
      recurrence0.setByYearDay(intArray0);
      recurrence0.getByYearDay();
      assertEquals(1372784968947L, gregorianCalendar0.getTimeInMillis());
      assertEquals("com.liferay.util.cal.Recurrence[dtStart=java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=9,SECOND=28,MILLISECOND=947,ZONE_OFFSET=?,DST_OFFSET=?],duration=com.liferay.util.cal.Duration[weeks=-1836,days=0,hours=0,minutes=0,seconds=0],frequency=7,interval=1,until=null,byDay=null,byMonthDay=null,byYearDay=[0,0,0],byWeekNo=null,byMonth=null]", recurrence0.toString());
  }

  @Test
  public void test21()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance();
      Duration duration0 = new Duration((-1831));
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      recurrence0.getByYearDay();
      assertEquals("java.util.GregorianCalendar[time=1372785000652,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GB\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=GB,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=10,SECOND=0,MILLISECOND=652,ZONE_OFFSET=0,DST_OFFSET=3600000]", gregorianCalendar0.toString());
      assertEquals(1372785000652L, gregorianCalendar0.getTimeInMillis());
  }

  @Test
  public void test22()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(0, (-130), (-130));
      Duration duration0 = new Duration();
      TimeZone timeZone0 = gregorianCalendar0.getTimeZone();
      GregorianCalendar gregorianCalendar1 = (GregorianCalendar)Calendar.getInstance(timeZone0);
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar1, duration0, 0);
      // Undeclared exception!
      try {
        recurrence0.getCandidateStartTime((Calendar) gregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Current time before DtStart
         */
      }
  }

  @Test
  public void test23()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance();
      Duration duration0 = new Duration((-1850));
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      recurrence0.setFrequency((-2048));
      int[] intArray0 = new int[7];
      recurrence0.setByMonthDay(intArray0);
      // Undeclared exception!
      try {
        recurrence0.isInRecurrence((Calendar) gregorianCalendar0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * bad frequency internally...
         */
      }
  }

  @Test
  public void test24()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance();
      Duration duration0 = new Duration((-293));
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0, 0);
      int[] intArray0 = new int[4];
      recurrence0.setByWeekNo(intArray0);
      recurrence0.isInRecurrence((Calendar) gregorianCalendar0, false);
  }

  @Test
  public void test25()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar((-282), (-282), (-1022), (-282), 931, (-1022));
      Duration duration0 = new Duration((-1781), 1461, (-1022));
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0, 931);
      int[] intArray0 = new int[10];
      recurrence0.setByMonth(intArray0);
      recurrence0.isInRecurrence((Calendar) gregorianCalendar0);
  }

  @Test
  public void test26()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar((-282), (-282), (-1022), (-282), 931, (-1022));
      Duration duration0 = new Duration((-1781), 1461, (-1022));
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0, 931);
      recurrence0.getUntil();
  }

  @Test
  public void test27()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance(locale0);
      Duration duration0 = new Duration((-1898), (-1898), (-1), 0);
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      recurrence0.setUntil((Calendar) gregorianCalendar0);
      recurrence0.getUntil();
  }

  @Test
  public void test28()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance(locale0);
      Duration duration0 = new Duration((-1898), (-1898), (-1), 0);
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      GregorianCalendar gregorianCalendar1 = new GregorianCalendar(0, (-1898), 1450);
      recurrence0.isInRecurrence((Calendar) gregorianCalendar1);
  }

  @Test
  public void test29()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance(locale0);
      Duration duration0 = new Duration((-1898), (-1898), (-1), 0);
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      DayAndPosition[] dayAndPositionArray0 = new DayAndPosition[2];
      DayAndPosition dayAndPosition0 = new DayAndPosition();
      dayAndPositionArray0[0] = dayAndPosition0;
      dayAndPositionArray0[1] = dayAndPosition0;
      recurrence0.setByDay(dayAndPositionArray0);
      recurrence0.isInRecurrence((Calendar) gregorianCalendar0, true);
  }

  @Test
  public void test30()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(0, (-130), (-130));
      Duration duration0 = new Duration();
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      recurrence0.setByDay((DayAndPosition[]) null);
  }

  @Test
  public void test31()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar();
      Duration duration0 = new Duration();
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      recurrence0.setByYearDay((int[]) null);
  }

  @Test
  public void test32()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance();
      Duration duration0 = new Duration((-293));
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      recurrence0.setDtStart((Calendar) gregorianCalendar0);
  }

  @Test
  public void test33()  throws Throwable  {
      Recurrence recurrence0 = null;
      try {
        recurrence0 = new Recurrence();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test34()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar((-282), (-282), (-1022), (-282), 931, (-1022));
      Duration duration0 = new Duration((-1781), 1461, (-1022));
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0, 931);
      // Undeclared exception!
      try {
        recurrence0.setFrequency(1954);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Invalid frequency
         */
      }
  }

  @Test
  public void test35()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar();
      Duration duration0 = new Duration((-282), (-282), 1954);
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      recurrence0.setInterval(1);
  }

  @Test
  public void test36()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar();
      Duration duration0 = new Duration();
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      recurrence0.toString();
  }

  @Test
  public void test37()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar();
      Duration duration0 = new Duration();
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      recurrence0.setUntil((Calendar) gregorianCalendar0);
      recurrence0.toString();
  }

  @Test
  public void test38()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar();
      gregorianCalendar0.setFirstDayOfWeek(3600004);
      Recurrence.getWeekNumber((Calendar) gregorianCalendar0);
  }

  @Test
  public void test39()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar();
      // Undeclared exception!
      try {
        Recurrence.reduce_constant_length_field(1, (Calendar) gregorianCalendar0, (Calendar) gregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Not a constant length field
         */
      }
  }

  @Test
  public void test40()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar((-282), (-282), (-1022), (-282), 931, (-1022));
      Duration duration0 = new Duration((-1781), 1461, (-1022));
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0, 931);
      GregorianCalendar gregorianCalendar1 = new GregorianCalendar();
      int[] intArray0 = new int[10];
      recurrence0.setByMonth(intArray0);
      recurrence0.isInRecurrence((Calendar) gregorianCalendar1);
  }

  @Test
  public void test41()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance();
      Recurrence.reduce_day_of_year((Calendar) gregorianCalendar0, (Calendar) gregorianCalendar0);
  }

  @Test
  public void test42()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(0, 0, 0, (-1912), 0, (-1912));
      GregorianCalendar gregorianCalendar1 = new GregorianCalendar();
      Recurrence.reduce_day_of_year((Calendar) gregorianCalendar1, (Calendar) gregorianCalendar0);
  }

  @Test
  public void test43()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance(locale0);
      Duration duration0 = new Duration((-1898), (-1898), (-1), 0);
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      recurrence0.setUntil((Calendar) gregorianCalendar0);
      recurrence0.isInRecurrence((Calendar) gregorianCalendar0, true);
  }

  @Test
  public void test44()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance();
      Duration duration0 = new Duration(669, (-209), (-209), (-1691));
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      int[] intArray0 = new int[6];
      recurrence0.setByMonthDay(intArray0);
      recurrence0.isInRecurrence((Calendar) gregorianCalendar0);
  }

  @Test
  public void test45()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance();
      Duration duration0 = new Duration((-293));
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0, 4);
      int[] intArray0 = new int[4];
      recurrence0.setByWeekNo(intArray0);
      GregorianCalendar gregorianCalendar1 = new GregorianCalendar((-1482), (-293), 86400000, 93, 1);
      recurrence0.candidateIsInRecurrence((Calendar) gregorianCalendar1, true);
  }

  @Test
  public void test46()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance();
      Duration duration0 = new Duration((-293));
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0, 4);
      recurrence0.isInRecurrence((Calendar) gregorianCalendar0, true);
  }

  @Test
  public void test47()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar((-792), (-1716), (-792), (-1716), (-1716));
      Duration duration0 = new Duration((-1716));
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0, (-792));
      // Undeclared exception!
      try {
        recurrence0.getMinimumInterval();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Internal error: Unknown frequency value
         */
      }
  }

  @Test
  public void test48()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(0, (-130), (-130));
      Duration duration0 = new Duration();
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      int[] intArray0 = new int[6];
      recurrence0.matchesByField(intArray0, 0, (Calendar) gregorianCalendar0, false);
  }

  @Test
  public void test49()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance();
      Duration duration0 = new Duration((-1836));
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      int[] intArray0 = new int[3];
      intArray0[1] = (-1836);
      recurrence0.setByYearDay(intArray0);
      recurrence0.isInRecurrence((Calendar) gregorianCalendar0);
  }

  @Test
  public void test50()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(0, (-130), (-130));
      Duration duration0 = new Duration();
      Recurrence recurrence0 = new Recurrence((Calendar) gregorianCalendar0, duration0);
      int[] intArray0 = new int[6];
      recurrence0.stringizeIntArray(intArray0);
  }
}
