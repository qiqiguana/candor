/*
 * This file was automatically generated by EvoSuite
 */

package com.liferay.util.bridges.mvc;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.liferay.portlet.ActionRequestImpl;
import com.liferay.portlet.RenderRequestImpl;
import com.liferay.portlet.ResourceRequestImpl;
import com.liferay.util.bridges.mvc.MVCPortlet;
import java.io.IOException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.portlet.ActionRequest;
import javax.portlet.ActionResponse;
import javax.portlet.EventRequest;
import javax.portlet.EventResponse;
import javax.portlet.PortletException;
import javax.portlet.RenderRequest;
import javax.portlet.RenderResponse;
import javax.portlet.ResourceRequest;
import javax.portlet.ResourceResponse;
import javax.portlet.filter.ActionRequestWrapper;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MVCPortletEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          MVCPortlet mVCPortlet0 = new MVCPortlet();
          ActionRequestImpl actionRequestImpl0 = new ActionRequestImpl();
          try {
            mVCPortlet0.invokeTaglibDiscussion((ActionRequest) actionRequestImpl0, (ActionResponse) null);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.lang.RuntimePermission getClassLoader.portal)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * com.liferay.portal.kernel.util.PortalClassLoaderUtil.getClassLoader(PortalClassLoaderUtil.java:38)
             * com.liferay.portal.kernel.util.PortalClassInvoker.invoke(PortalClassInvoker.java:69)
             * com.liferay.util.bridges.mvc.MVCPortlet.invokeTaglibDiscussion(MVCPortlet.java:202)
             * sun.reflect.GeneratedMethodAccessor83.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
      MVCPortlet mVCPortlet0 = new MVCPortlet();
      RenderRequestImpl renderRequestImpl0 = new RenderRequestImpl();
      // Undeclared exception!
      try {
        mVCPortlet0.doPreview((RenderRequest) renderRequestImpl0, (RenderResponse) null);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Config is null, please ensure that your init(config) method calls super.init(config)
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      MVCPortlet mVCPortlet0 = new MVCPortlet();
      RenderRequestImpl renderRequestImpl0 = new RenderRequestImpl();
      // Undeclared exception!
      try {
        mVCPortlet0.doConfig((RenderRequest) renderRequestImpl0, (RenderResponse) null);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Config is null, please ensure that your init(config) method calls super.init(config)
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      MVCPortlet mVCPortlet0 = new MVCPortlet();
      RenderRequestImpl renderRequestImpl0 = new RenderRequestImpl();
      // Undeclared exception!
      try {
        mVCPortlet0.doAbout((RenderRequest) renderRequestImpl0, (RenderResponse) null);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Config is null, please ensure that your init(config) method calls super.init(config)
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      MVCPortlet mVCPortlet0 = new MVCPortlet();
      RenderRequestImpl renderRequestImpl0 = new RenderRequestImpl();
      // Undeclared exception!
      try {
        mVCPortlet0.doHelp((RenderRequest) renderRequestImpl0, (RenderResponse) null);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Config is null, please ensure that your init(config) method calls super.init(config)
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      MVCPortlet mVCPortlet0 = new MVCPortlet();
      ResourceRequestImpl resourceRequestImpl0 = new ResourceRequestImpl();
      // Undeclared exception!
      try {
        mVCPortlet0.include((String) null, (ResourceRequest) resourceRequestImpl0, (ResourceResponse) null);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Config is null, please ensure that your init(config) method calls super.init(config)
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      MVCPortlet mVCPortlet0 = new MVCPortlet();
      // Undeclared exception!
      try {
        mVCPortlet0.include("=_7]^_`PK_B", (EventRequest) null, (EventResponse) null);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Config is null, please ensure that your init(config) method calls super.init(config)
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      RenderRequestImpl renderRequestImpl0 = new RenderRequestImpl();
      MVCPortlet mVCPortlet0 = new MVCPortlet();
      // Undeclared exception!
      try {
        mVCPortlet0.doView((RenderRequest) renderRequestImpl0, (RenderResponse) null);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Config is null, please ensure that your init(config) method calls super.init(config)
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      MVCPortlet mVCPortlet0 = new MVCPortlet();
      RenderRequestImpl renderRequestImpl0 = new RenderRequestImpl();
      // Undeclared exception!
      try {
        mVCPortlet0.doPrint((RenderRequest) renderRequestImpl0, (RenderResponse) null);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Config is null, please ensure that your init(config) method calls super.init(config)
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      MVCPortlet mVCPortlet0 = new MVCPortlet();
      ActionRequestImpl actionRequestImpl0 = new ActionRequestImpl();
      ActionRequestWrapper actionRequestWrapper0 = new ActionRequestWrapper((ActionRequest) actionRequestImpl0);
      // Undeclared exception!
      try {
        mVCPortlet0.include("6=8vH#T6]D}", (ActionRequest) actionRequestWrapper0, (ActionResponse) null);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Config is null, please ensure that your init(config) method calls super.init(config)
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      MVCPortlet mVCPortlet0 = new MVCPortlet();
      RenderRequestImpl renderRequestImpl0 = new RenderRequestImpl();
      // Undeclared exception!
      try {
        mVCPortlet0.doEdit((RenderRequest) renderRequestImpl0, (RenderResponse) null);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Config is null, please ensure that your init(config) method calls super.init(config)
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      MVCPortlet mVCPortlet0 = new MVCPortlet();
      RenderRequestImpl renderRequestImpl0 = new RenderRequestImpl();
      // Undeclared exception!
      try {
        mVCPortlet0.doEditDefaults((RenderRequest) renderRequestImpl0, (RenderResponse) null);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Config is null, please ensure that your init(config) method calls super.init(config)
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      MVCPortlet mVCPortlet0 = new MVCPortlet();
      RenderRequestImpl renderRequestImpl0 = new RenderRequestImpl();
      // Undeclared exception!
      try {
        mVCPortlet0.doEditGuest((RenderRequest) renderRequestImpl0, (RenderResponse) null);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Config is null, please ensure that your init(config) method calls super.init(config)
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      MVCPortlet mVCPortlet0 = new MVCPortlet();
      ActionRequestImpl actionRequestImpl0 = new ActionRequestImpl();
      // Undeclared exception!
      try {
        mVCPortlet0.processAction((ActionRequest) actionRequestImpl0, (ActionResponse) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test14()  throws Throwable  {
      MVCPortlet mVCPortlet0 = new MVCPortlet();
      mVCPortlet0.checkPath("");
  }

  @Test
  public void test15()  throws Throwable  {
      MVCPortlet mVCPortlet0 = new MVCPortlet();
      // Undeclared exception!
      try {
        mVCPortlet0.checkPath("q&u<*@");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
