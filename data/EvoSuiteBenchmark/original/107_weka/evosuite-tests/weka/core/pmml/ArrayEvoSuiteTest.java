/*
 * This file was automatically generated by EvoSuite
 */

package weka.core.pmml;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import javax.imageio.metadata.IIOMetadataNode;
import org.junit.BeforeClass;
import org.w3c.dom.Element;
import weka.core.pmml.Array;
import weka.core.pmml.SparseArray;

@RunWith(EvoSuiteRunner.class)
public class ArrayEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("INT-ARRAY");
      try {
        Array.create((Element) iIOMetadataNode0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      Array.ArrayType array_ArrayType0 = Array.ArrayType.STRING;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Array array0 = new Array(array_ArrayType0, (List<Object>) linkedList0);
      assertNotNull(array0);
      
      boolean boolean0 = array0.contains((float) (-1));
      assertEquals(true, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      Array.ArrayType array_ArrayType0 = Array.ArrayType.INT_SPARSE;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Array array0 = new Array(array_ArrayType0, (List<Object>) linkedList0);
      try {
        array0.valueSparseInt(7);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * [Array] index out of range 7
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      Array.ArrayType array_ArrayType0 = Array.ArrayType.REAL;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Array array0 = new Array(array_ArrayType0, (List<Object>) linkedList0);
      Array.ArrayType array_ArrayType1 = array0.getType();
      assertEquals(Array.ArrayType.REAL, array_ArrayType1);
  }

  @Test
  public void test4()  throws Throwable  {
      Array.ArrayType array_ArrayType0 = Array.ArrayType.STRING;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Array array0 = new Array(array_ArrayType0, (List<Object>) linkedList0);
      try {
        array0.valueSparseDouble((-1));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * [Array] index out of range -1
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      Array.ArrayType array_ArrayType0 = Array.ArrayType.INT_SPARSE;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Array array0 = new Array(array_ArrayType0, (List<Object>) linkedList0);
      int int0 = array0.numValues();
      assertEquals(0, int0);
  }

  @Test
  public void test6()  throws Throwable  {
      Array.ArrayType array_ArrayType0 = Array.ArrayType.NUM;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Array array0 = new Array(array_ArrayType0, (List<Object>) linkedList0);
      try {
        array0.valueSparseString(1378);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * [Array] index out of range 1378
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      Array.ArrayType array_ArrayType0 = Array.ArrayType.INT;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Array array0 = new Array(array_ArrayType0, (List<Object>) linkedList0);
      assertNotNull(array0);
      
      int int0 = array0.index((-1460));
      assertEquals((-1460), int0);
  }

  @Test
  public void test8()  throws Throwable  {
      Array.ArrayType array_ArrayType0 = Array.ArrayType.REAL;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Array array0 = new Array(array_ArrayType0, (List<Object>) linkedList0);
      assertNotNull(array0);
      
      boolean boolean0 = array0.contains(0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "0x1.678414p9");
      Array array0 = Array.create((List<Object>) linkedList0, (List<Integer>) null);
      assertNotNull(array0);
      
      boolean boolean0 = array0.isSparse();
      assertEquals(false, boolean0);
      assertEquals(Array.ArrayType.STRING, array0.getType());
      assertEquals("<0x1.678414p9>", array0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      Array.ArrayType array_ArrayType0 = Array.ArrayType.REAL;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Array array0 = new Array(array_ArrayType0, (List<Object>) linkedList0);
      try {
        array0.valueString(0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * [Array] index out of range 0
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Array.ArrayType array_ArrayType0 = Array.ArrayType.INT;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Array array0 = new Array(array_ArrayType0, (List<Object>) linkedList0);
      assertNotNull(array0);
      
      boolean boolean0 = array0.contains((double) (-1460));
      assertEquals(true, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      Array.ArrayType array_ArrayType0 = Array.ArrayType.NUM;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Array array0 = new Array(array_ArrayType0, (List<Object>) linkedList0);
      try {
        array0.valueSparseFloat(1455);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * [Array] index out of range 1455
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Array");
      try {
        Array.create((Element) iIOMetadataNode0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test14()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("NUM-ARRAY");
      try {
        Array.create((Element) iIOMetadataNode0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test15()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("INT-SparseArray");
      SparseArray sparseArray0 = (SparseArray)Array.create((Element) iIOMetadataNode0);
      assertEquals(Array.ArrayType.INT_SPARSE, sparseArray0.getType());
      assertNotNull(sparseArray0);
  }

  @Test
  public void test16()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("REAL-ARRAY");
      boolean boolean0 = Array.isArray((Element) iIOMetadataNode0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("STRING-ARRAY");
      try {
        Array.create((Element) iIOMetadataNode0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test18()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("b,N( 6_oCj");
      try {
        Array.create((Element) iIOMetadataNode0);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * [Array] the supplied element does not contain an array!
         */
      }
  }

  @Test
  public void test19()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("REAL-SparseArray");
      SparseArray sparseArray0 = (SparseArray)Array.create((Element) iIOMetadataNode0);
      assertEquals(Array.ArrayType.REAL_SPARSE, sparseArray0.getType());
      assertNotNull(sparseArray0);
  }

  @Test
  public void test20()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Double double0 = new Double(0.0);
      linkedList0.add((Object) double0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      try {
        Array.create((List<Object>) linkedList0, (List<Integer>) linkedList1);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * [Array] num values is not equal to num indices!!
         */
      }
  }

  @Test
  public void test21()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer(82);
      linkedList0.add((Object) integer0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      try {
        Array.create((List<Object>) linkedList0, (List<Integer>) linkedList1);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * [Array] num values is not equal to num indices!!
         */
      }
  }

  @Test
  public void test22()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Long long0 = new Long((-469L));
      linkedList0.add((Object) long0);
      Array array0 = Array.create((List<Object>) linkedList0, (List<Integer>) null);
      assertNotNull(array0);
      
      try {
        array0.valueInt((-805));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * [Array] index out of range -805
         */
      }
  }

  @Test
  public void test23()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      try {
        Array.create((List<Object>) linkedList0, (List<Integer>) linkedList1);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * [Array] unsupport type!
         */
      }
  }

  @Test
  public void test24()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer(82);
      linkedList0.add((Object) integer0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList1.add(integer0);
      SparseArray sparseArray0 = (SparseArray)Array.create((List<Object>) linkedList0, (List<Integer>) linkedList1);
      assertEquals("<82 82>", sparseArray0.toString());
      assertNotNull(sparseArray0);
      assertEquals(Array.ArrayType.INT_SPARSE, sparseArray0.getType());
  }

  @Test
  public void test25()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-757));
      linkedList1.add(integer0);
      Float float0 = new Float((double) integer0);
      linkedList0.add((Object) float0);
      SparseArray sparseArray0 = (SparseArray)Array.create((List<Object>) linkedList0, (List<Integer>) linkedList1);
      assertNotNull(sparseArray0);
      assertEquals("<-757 -757.0>", sparseArray0.toString());
      assertEquals(Array.ArrayType.REAL_SPARSE, sparseArray0.getType());
  }

  @Test
  public void test26()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.addFirst((Object) "");
      Integer integer0 = new Integer(0);
      linkedList1.add(integer0);
      try {
        Array.create((List<Object>) linkedList0, (List<Integer>) linkedList1);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * [Array] sparse arrays can only be integer, long, float or double!
         */
      }
  }

  @Test
  public void test27()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("N");
      Array array0 = null;
      try {
        array0 = new Array((Element) iIOMetadataNode0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test28()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "0x1.678414p9");
      Array array0 = Array.create((List<Object>) linkedList0, (List<Integer>) null);
      assertNotNull(array0);
      
      String string0 = array0.actualValue(0);
      assertEquals(Array.ArrayType.STRING, array0.getType());
      assertNotNull(string0);
      assertEquals(1, array0.numValues());
  }

  @Test
  public void test29()  throws Throwable  {
      Array.ArrayType array_ArrayType0 = Array.ArrayType.REAL_SPARSE;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Array array0 = new Array(array_ArrayType0, (List<Object>) linkedList0);
      try {
        array0.valueDouble(268);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * [Array] index out of range 268
         */
      }
  }

  @Test
  public void test30()  throws Throwable  {
      Array.ArrayType array_ArrayType0 = Array.ArrayType.STRING;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Array array0 = new Array(array_ArrayType0, (List<Object>) linkedList0);
      try {
        array0.valueDouble(255);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * [Array] Array does not contain numbers!
         */
      }
  }

  @Test
  public void test31()  throws Throwable  {
      Array.ArrayType array_ArrayType0 = Array.ArrayType.INT;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Array array0 = new Array(array_ArrayType0, (List<Object>) linkedList0);
      try {
        array0.valueFloat((-1460));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * [Array] index out of range -1460
         */
      }
  }

  @Test
  public void test32()  throws Throwable  {
      Array.ArrayType array_ArrayType0 = Array.ArrayType.STRING;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Array array0 = new Array(array_ArrayType0, (List<Object>) linkedList0);
      try {
        array0.valueFloat(15);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * [Array] Array does not contain numbers!
         */
      }
  }

  @Test
  public void test33()  throws Throwable  {
      Array.ArrayType array_ArrayType0 = Array.ArrayType.INT_SPARSE;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Array array0 = new Array(array_ArrayType0, (List<Object>) linkedList0);
      try {
        array0.valueInt((-1));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * [Array] index out of range -1
         */
      }
  }

  @Test
  public void test34()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Array.ArrayType array_ArrayType0 = Array.ArrayType.REAL_SPARSE;
      Array array0 = new Array(array_ArrayType0, (List<Object>) linkedList0);
      try {
        array0.valueInt(1801);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * [Array] Array does not contain integers!
         */
      }
  }

  @Test
  public void test35()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Array.ArrayType array_ArrayType0 = Array.ArrayType.INT_SPARSE;
      Object object0 = new Object();
      linkedList0.add(object0);
      linkedList0.add(object0);
      Array array0 = new Array(array_ArrayType0, (List<Object>) linkedList0);
      assertNotNull(array0);
      
      String string0 = array0.toString();
      assertNotNull(string0);
      assertEquals(2, array0.numValues());
  }
}
