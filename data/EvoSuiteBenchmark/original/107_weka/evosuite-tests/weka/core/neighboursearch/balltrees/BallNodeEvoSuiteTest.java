/*
 * This file was automatically generated by EvoSuite
 */

package weka.core.neighboursearch.balltrees;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.ArrayList;
import org.junit.BeforeClass;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.DistanceFunction;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.MinkowskiDistance;
import weka.core.SparseInstance;
import weka.core.neighboursearch.balltrees.BallNode;

@RunWith(EvoSuiteRunner.class)
public class BallNodeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BallNode ballNode0 = new BallNode((-7), (-7), (-7), (Instance) null, (double) (-7));
      MinkowskiDistance minkowskiDistance0 = new MinkowskiDistance();
      try {
        BallNode.calcRadius(ballNode0, ballNode0, (Instance) null, (DistanceFunction) minkowskiDistance0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      BallNode ballNode0 = new BallNode(10, 10, 10);
      DenseInstance denseInstance0 = new DenseInstance(1);
      ballNode0.setPivot((Instance) denseInstance0);
      DenseInstance denseInstance1 = (DenseInstance)BallNode.calcPivot(ballNode0, ballNode0, (Instances) null);
      assertEquals((-1.0), ballNode0.m_SplitVal, 0.01D);
      assertEquals(1, ballNode0.m_NumInstances);
      assertEquals(1, ballNode0.numInstances());
      assertEquals("?", denseInstance1.toString());
      assertEquals(10, ballNode0.m_NodeNumber);
      assertNotNull(denseInstance1);
      assertEquals((-1), ballNode0.m_SplitAttrib);
  }

  @Test
  public void test2()  throws Throwable  {
      BallNode ballNode0 = new BallNode(0);
      ballNode0.setRadius((double) 0);
      assertEquals(0.0, ballNode0.getRadius(), 0.01D);
      assertEquals((-1), ballNode0.m_SplitAttrib);
      assertEquals(0, ballNode0.m_NodeNumber);
      assertEquals((-1.0), ballNode0.m_SplitVal, 0.01D);
  }

  @Test
  public void test3()  throws Throwable  {
      BallNode ballNode0 = new BallNode(10, 10, 10);
      String string0 = ballNode0.getRevision();
      assertEquals((-1), ballNode0.m_SplitAttrib);
      assertEquals(1, ballNode0.numInstances());
      assertEquals((-1.0), ballNode0.m_SplitVal, 0.01D);
      assertEquals("8034", string0);
      assertEquals(10, ballNode0.m_NodeNumber);
      assertEquals(1, ballNode0.m_NumInstances);
      assertNotNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      BallNode ballNode0 = new BallNode(10, 10, 10);
      int int0 = ballNode0.numInstances();
      assertEquals((-1.0), ballNode0.m_SplitVal, 0.01D);
      assertEquals(1, ballNode0.m_NumInstances);
      assertEquals((-1), ballNode0.m_SplitAttrib);
      assertEquals(1, int0);
      assertEquals(10, ballNode0.m_NodeNumber);
  }

  @Test
  public void test5()  throws Throwable  {
      BallNode ballNode0 = new BallNode((-94));
      ballNode0.setStartEndIndices(0, 0);
      assertEquals(1, ballNode0.m_NumInstances);
  }

  @Test
  public void test6()  throws Throwable  {
      BallNode ballNode0 = new BallNode(1174, 1174, 1174);
      boolean boolean0 = ballNode0.isALeaf();
      assertEquals(true, boolean0);
      assertEquals(1, ballNode0.m_NumInstances);
      assertEquals((-1), ballNode0.m_SplitAttrib);
      assertEquals((-1.0), ballNode0.m_SplitVal, 0.01D);
      assertEquals(1174, ballNode0.m_NodeNumber);
      assertEquals(1, ballNode0.numInstances());
  }

  @Test
  public void test7()  throws Throwable  {
      BallNode ballNode0 = new BallNode(1174, 1174, 1174);
      assertEquals(true, ballNode0.isALeaf());
      
      ballNode0.m_Right = (weka.core.neighboursearch.balltrees.BallNode) ballNode0;
      boolean boolean0 = ballNode0.isALeaf();
      assertEquals(false, ballNode0.isALeaf());
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      int[] intArray0 = new int[1];
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("r^sKg8O5fCLM_", arrayList0, 1489);
      SparseInstance sparseInstance0 = new SparseInstance(1489);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      // Undeclared exception!
      try {
        BallNode.calcCentroidPivot(intArray0, instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 0
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      int[] intArray0 = new int[3];
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("r^sKg8O5fCL_", arrayList0, 0);
      SparseInstance sparseInstance0 = new SparseInstance(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      Attribute attribute0 = new Attribute("r^sKg8O5fCL_", instances0);
      arrayList0.add(attribute0);
      instances0.add((Instance) binarySparseInstance0);
      DenseInstance denseInstance0 = (DenseInstance)BallNode.calcCentroidPivot(intArray0, instances0);
      assertNotNull(denseInstance0);
      assertEquals("0", denseInstance0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[3];
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("v7?Jt", arrayList0, 0);
      arrayList0.add((Attribute) null);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((double) 0, intArray0, 0);
      Attribute attribute0 = new Attribute("v7?Jt", instances0);
      arrayList0.add(attribute0);
      instances0.add((Instance) binarySparseInstance0);
      arrayList0.add(attribute0);
      DenseInstance denseInstance0 = (DenseInstance)BallNode.calcCentroidPivot(0, 0, intArray0, instances0);
      assertNotNull(denseInstance0);
      assertEquals("1,1,1", denseInstance0.toString());
  }

  @Test
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[3];
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("r^sKg8O5fCL_", arrayList0, 0);
      SparseInstance sparseInstance0 = new SparseInstance(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      MinkowskiDistance minkowskiDistance0 = new MinkowskiDistance(instances0);
      double double0 = BallNode.calcRadius(intArray0, instances0, (Instance) sparseInstance0, (DistanceFunction) minkowskiDistance0);
      assertEquals(true, minkowskiDistance0.rangesSet());
      assertEquals(Double.NaN, double0, 0.01D);
  }
}
