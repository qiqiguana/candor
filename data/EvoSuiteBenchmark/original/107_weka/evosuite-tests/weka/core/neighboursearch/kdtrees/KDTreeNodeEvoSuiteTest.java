/*
 * This file was automatically generated by EvoSuite
 */

package weka.core.neighboursearch.kdtrees;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import weka.core.neighboursearch.kdtrees.KDTreeNode;

@RunWith(EvoSuiteRunner.class)
public class KDTreeNodeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      KDTreeNode kDTreeNode0 = new KDTreeNode();
      int int0 = kDTreeNode0.getSplitDim();
      assertEquals(0, int0);
      assertEquals(1, kDTreeNode0.numInstances());
  }

  @Test
  public void test1()  throws Throwable  {
      KDTreeNode kDTreeNode0 = new KDTreeNode((-1606), (-1), 0, (double[][]) null);
      assertEquals((-1606), kDTreeNode0.m_NodeNumber);
      assertEquals(2, kDTreeNode0.numInstances());
  }

  @Test
  public void test2()  throws Throwable  {
      KDTreeNode kDTreeNode0 = new KDTreeNode();
      double double0 = kDTreeNode0.getSplitValue();
      assertEquals(1, kDTreeNode0.numInstances());
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test3()  throws Throwable  {
      KDTreeNode kDTreeNode0 = new KDTreeNode();
      int int0 = kDTreeNode0.numInstances();
      assertEquals(1, int0);
  }

  @Test
  public void test4()  throws Throwable  {
      KDTreeNode kDTreeNode0 = new KDTreeNode();
      String string0 = kDTreeNode0.getRevision();
      assertEquals(1, kDTreeNode0.numInstances());
      assertEquals("8034", string0);
      assertNotNull(string0);
  }

  @Test
  public void test5()  throws Throwable  {
      KDTreeNode kDTreeNode0 = new KDTreeNode();
      kDTreeNode0.m_Left = (weka.core.neighboursearch.kdtrees.KDTreeNode) kDTreeNode0;
      boolean boolean0 = kDTreeNode0.isALeaf();
      assertEquals(false, kDTreeNode0.isALeaf());
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      double[][] doubleArray0 = new double[7][6];
      KDTreeNode kDTreeNode0 = new KDTreeNode(0, 0, 0, doubleArray0, doubleArray0);
      boolean boolean0 = kDTreeNode0.isALeaf();
      assertEquals(1, kDTreeNode0.numInstances());
      assertEquals(0, kDTreeNode0.m_NodeNumber);
      assertEquals(true, boolean0);
  }
}
