/*
 * This file was automatically generated by EvoSuite
 */

package weka.core.neighboursearch.balltrees;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Enumeration;
import org.evosuite.testcase.CodeUnderTestException;
import org.junit.BeforeClass;
import weka.core.BinarySparseInstance;
import weka.core.Instance;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.neighboursearch.balltrees.PointsClosestToFurthestChildren;
import weka.core.neighboursearch.balltrees.TopDownConstructor;

@RunWith(EvoSuiteRunner.class)
public class TopDownConstructorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      String string0 = topDownConstructor0.getRevision();
      assertNotNull(string0);
      assertEquals("8034", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      String string0 = topDownConstructor0.ballSplitterTipText();
      assertEquals("The BallSplitter algorithm set that would be used by the TopDown BallTree constructor.", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      try {
        topDownConstructor0.buildTree();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      String string0 = topDownConstructor0.globalInfo();
      assertNotNull(string0);
      assertEquals("The class implementing the TopDown construction method of ball trees. It further uses one of a number of different splitting methods to split a ball while constructing the tree top down.\n\nFor more information see also:\n\nStephen M. Omohundro (1989). Five Balltree Construction Algorithms.", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      Enumeration<Object> enumeration0 = topDownConstructor0.listOptions();
      assertEquals(true, enumeration0.hasMoreElements());
      assertNotNull(enumeration0);
  }

  @Test
  public void test5()  throws Throwable  {
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      PointsClosestToFurthestChildren pointsClosestToFurthestChildren0 = (PointsClosestToFurthestChildren)topDownConstructor0.getBallSplitter();
      assertEquals("Implements the Moore's method to split a node of a ball tree.\n\nFor more information please see section 2 of the 1st and 3.2.3 of the 2nd:\n\nAndrew W. Moore: The Anchors Hierarchy: Using the Triangle Inequality to Survive High Dimensional Data. In: UAI '00: Proceedings of the 16th Conference on Uncertainty in Artificial Intelligence, San Francisco, CA, USA, 397-405, 2000.\n\nAshraf Masood Kibriya (2007). Fast Algorithms for Nearest Neighbour Search. Hamilton, New Zealand.", pointsClosestToFurthestChildren0.globalInfo());
  }

  @Test
  public void test6()  throws Throwable  {
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      String[] stringArray0 = topDownConstructor0.getOptions();
      topDownConstructor0.setOptions(stringArray0);
      assertEquals("8034", topDownConstructor0.getRevision());
  }

  @Test
  public void test7()  throws Throwable  {
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      BallNode ballNode0 = new BallNode((-558), (-558), (-558));
      topDownConstructor0.splitNodes(ballNode0, 1, (double) (-558));
      assertEquals("Whether to contain fully the child balls.", topDownConstructor0.containChildBallsTipText());
  }

  @Test
  public void test8()  throws Throwable  {
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(12);
      BallNode ballNode0 = new BallNode((-847), 12, 12, (Instance) binarySparseInstance0, (double) (-847));
      try {
        topDownConstructor0.splitNodes(ballNode0, 860, (double) (-1));
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * No instances supplied.
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      BallNode ballNode0 = new BallNode((-363), 3, 0);
      topDownConstructor0.splitNodes(ballNode0, (-1), (double) 0);
      assertEquals(0, topDownConstructor0.getNumLeaves());
  }

  @Test
  public void test10()  throws Throwable  {
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      BallNode ballNode0 = new BallNode((-363), 3, 0);
      topDownConstructor0.splitNodes(ballNode0, 367, (double) (-363));
      assertEquals(0, topDownConstructor0.getNumLeaves());
  }

  @Test
  public void test11()  throws Throwable  {
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      BallNode ballNode0 = new BallNode((-3), (-3), (-3));
      try {
        topDownConstructor0.addInstance(ballNode0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      BallNode ballNode0 = new BallNode((-558), (-558), (-558));
      ballNode0.m_Left = (weka.core.neighboursearch.balltrees.BallNode) ballNode0;
      int[] intArray0 = new int[9];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((double) (-1), intArray0, 0);
  }

  @Test
  public void test13()  throws Throwable  {
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      BallNode ballNode0 = new BallNode((-558), (-558), (-558));
      ballNode0.m_Left = (weka.core.neighboursearch.balltrees.BallNode) ballNode0;
      int[] intArray0 = new int[9];
      ballNode0.m_Left.m_Right = (weka.core.neighboursearch.balltrees.BallNode) ballNode0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((double) (-1), intArray0, 0);
  }

  @Test
  public void test14()  throws Throwable  {
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      BallNode ballNode0 = new BallNode((-3), (-3), (-3));
      ballNode0.m_Right = (weka.core.neighboursearch.balltrees.BallNode) ballNode0;
      try {
        topDownConstructor0.addInstance(ballNode0, (Instance) null);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * Error: Only one leaf of the built ball tree is assigned. Please check code.
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      BallNode ballNode0 = new BallNode((-3), (-3), (-3));
      topDownConstructor0.processNodesAfterAddInstance(ballNode0);
      assertEquals((-2), ballNode0.m_End);
      assertEquals(1, ballNode0.numInstances());
  }

  @Test
  public void test16()  throws Throwable  {
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      BallNode ballNode0 = new BallNode((-550), (-550), (-550));
      ballNode0.m_Left = (weka.core.neighboursearch.balltrees.BallNode) ballNode0;
      topDownConstructor0.processNodesAfterAddInstance(ballNode0);
      assertEquals((-549), ballNode0.m_End);
      assertEquals(1, ballNode0.numInstances());
  }

  @Test
  public void test17()  throws Throwable  {
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      BallNode ballNode0 = new BallNode(0, 0, 0);
      ballNode0.m_Left = (weka.core.neighboursearch.balltrees.BallNode) ballNode0;
      ballNode0.m_Right = (weka.core.neighboursearch.balltrees.BallNode) ballNode0;
      // Undeclared exception!
      try {
        topDownConstructor0.processNodesAfterAddInstance(ballNode0);
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }

  @Test
  public void test18()  throws Throwable  {
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      String[] stringArray0 = topDownConstructor0.getOptions();
      stringArray0[2] = "The maximum number of instances allowed in a leaf.";
      topDownConstructor0.setOptions(stringArray0);
      assertEquals("The class implementing the TopDown construction method of ball trees. It further uses one of a number of different splitting methods to split a ball while constructing the tree top down.\n\nFor more information see also:\n\nStephen M. Omohundro (1989). Five Balltree Construction Algorithms.", topDownConstructor0.globalInfo());
  }
}
