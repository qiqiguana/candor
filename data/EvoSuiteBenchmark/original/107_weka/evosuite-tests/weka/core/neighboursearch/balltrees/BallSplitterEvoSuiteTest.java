/*
 * This file was automatically generated by EvoSuite
 */

package weka.core.neighboursearch.balltrees;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.ArrayList;
import java.util.Enumeration;
import org.junit.BeforeClass;
import weka.core.Attribute;
import weka.core.DenseInstance;
import weka.core.EuclideanDistance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.neighboursearch.balltrees.MedianDistanceFromArbitraryPoint;
import weka.core.neighboursearch.balltrees.MedianOfWidestDimension;
import weka.core.neighboursearch.balltrees.PointsClosestToFurthestChildren;

@RunWith(EvoSuiteRunner.class)
public class BallSplitterEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      MedianDistanceFromArbitraryPoint medianDistanceFromArbitraryPoint0 = new MedianDistanceFromArbitraryPoint();
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      medianDistanceFromArbitraryPoint0.setEuclideanDistanceFunction(euclideanDistance0);
      assertEquals("Set attribute selection mode. If false, only selected attributes in the range will be used in the distance calculation; if true, only non-selected attributes will be used for the calculation.", euclideanDistance0.invertSelectionTipText());
  }

  @Test
  public void test1()  throws Throwable  {
      int[] intArray0 = new int[1];
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("`(?O}[Ze", arrayList0, 0);
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      PointsClosestToFurthestChildren pointsClosestToFurthestChildren0 = new PointsClosestToFurthestChildren(intArray0, instances0, euclideanDistance0);
      try {
        pointsClosestToFurthestChildren0.correctlyInitialized();
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * The supplied instance list doesn't seem to match the supplied instances
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      MedianDistanceFromArbitraryPoint medianDistanceFromArbitraryPoint0 = new MedianDistanceFromArbitraryPoint();
      Enumeration<Object> enumeration0 = medianDistanceFromArbitraryPoint0.listOptions();
      assertEquals(true, enumeration0.hasMoreElements());
  }

  @Test
  public void test3()  throws Throwable  {
      MedianDistanceFromArbitraryPoint medianDistanceFromArbitraryPoint0 = new MedianDistanceFromArbitraryPoint();
      String[] stringArray0 = medianDistanceFromArbitraryPoint0.getOptions();
      assertNotNull(stringArray0);
  }

  @Test
  public void test4()  throws Throwable  {
      MedianDistanceFromArbitraryPoint medianDistanceFromArbitraryPoint0 = new MedianDistanceFromArbitraryPoint();
      int[] intArray0 = new int[9];
      medianDistanceFromArbitraryPoint0.setInstanceList(intArray0);
      assertEquals("Class that splits a BallNode of a ball tree using Uhlmann's described method.\n\nFor information see:\n\nJeffrey K. Uhlmann (1991). Satisfying general proximity/similarity queries with metric trees. Information Processing Letters. 40(4):175-179.\n\nAshraf Masood Kibriya (2007). Fast Algorithms for Nearest Neighbour Search. Hamilton, New Zealand.", medianDistanceFromArbitraryPoint0.globalInfo());
  }

  @Test
  public void test5()  throws Throwable  {
      int[] intArray0 = new int[1];
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("a<M::hP:|`^Y", arrayList0, 1694);
      EuclideanDistance euclideanDistance0 = new EuclideanDistance(instances0);
      MedianOfWidestDimension medianOfWidestDimension0 = new MedianOfWidestDimension(intArray0, instances0, euclideanDistance0);
      medianOfWidestDimension0.setInstances(instances0);
      assertEquals("8034", medianOfWidestDimension0.getRevision());
  }

  @Test
  public void test6()  throws Throwable  {
      MedianDistanceFromArbitraryPoint medianDistanceFromArbitraryPoint0 = new MedianDistanceFromArbitraryPoint();
      String[] stringArray0 = new String[1];
      try {
        medianDistanceFromArbitraryPoint0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      MedianOfWidestDimension medianOfWidestDimension0 = new MedianOfWidestDimension();
      try {
        medianOfWidestDimension0.correctlyInitialized();
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * No instances supplied.
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int[] intArray0 = new int[6];
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Cls:", arrayList0, 0);
      PointsClosestToFurthestChildren pointsClosestToFurthestChildren0 = new PointsClosestToFurthestChildren(intArray0, instances0, (EuclideanDistance) null);
      BallNode ballNode0 = new BallNode(0, (-17), 0);
      try {
        pointsClosestToFurthestChildren0.splitNode(ballNode0, (-17));
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * No Euclidean distance function supplied.
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      int[] intArray0 = new int[1];
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("a<M::hP:|`^Y", arrayList0, 1694);
      EuclideanDistance euclideanDistance0 = new EuclideanDistance(instances0);
      MedianDistanceFromArbitraryPoint medianDistanceFromArbitraryPoint0 = new MedianDistanceFromArbitraryPoint(intArray0, instances0, euclideanDistance0);
      BallNode ballNode0 = new BallNode(1694);
      double[] doubleArray0 = new double[1];
      DenseInstance denseInstance0 = new DenseInstance((double) 0, doubleArray0);
      instances0.add((Instance) denseInstance0);
      try {
        medianDistanceFromArbitraryPoint0.splitNode(ballNode0, 1694);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
        /*
         * / by zero
         */
      }
  }
}
