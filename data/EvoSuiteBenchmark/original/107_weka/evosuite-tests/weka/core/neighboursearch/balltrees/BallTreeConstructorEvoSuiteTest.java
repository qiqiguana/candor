/*
 * This file was automatically generated by EvoSuite
 */

package weka.core.neighboursearch.balltrees;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Enumeration;
import org.junit.BeforeClass;
import weka.core.EuclideanDistance;
import weka.core.Instances;
import weka.core.neighboursearch.balltrees.BottomUpConstructor;
import weka.core.neighboursearch.balltrees.MiddleOutConstructor;
import weka.core.neighboursearch.balltrees.TopDownConstructor;

@RunWith(EvoSuiteRunner.class)
public class BallTreeConstructorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BottomUpConstructor bottomUpConstructor0 = new BottomUpConstructor();
      String string0 = bottomUpConstructor0.containChildBallsTipText();
      assertEquals(0.0010, bottomUpConstructor0.getMaxRelativeLeafRadius(), 0.01D);
      assertEquals(40, bottomUpConstructor0.getMaxInstancesInLeaf());
      assertEquals("Whether to contain fully the child balls.", string0);
      assertEquals(false, bottomUpConstructor0.getContainChildBalls());
  }

  @Test
  public void test1()  throws Throwable  {
      MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor();
      int int0 = middleOutConstructor0.getNumNodes();
      assertEquals(false, middleOutConstructor0.getContainChildBalls());
      assertEquals(0, int0);
      assertEquals(40, middleOutConstructor0.getMaxInstancesInLeaf());
      assertEquals(0.0010, middleOutConstructor0.getMaxRelativeLeafRadius(), 0.01D);
  }

  @Test
  public void test2()  throws Throwable  {
      MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor();
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      middleOutConstructor0.setEuclideanDistanceFunction(euclideanDistance0);
      assertEquals(false, middleOutConstructor0.getContainChildBalls());
      assertEquals(40, middleOutConstructor0.getMaxInstancesInLeaf());
      assertEquals(0.0010, middleOutConstructor0.getMaxRelativeLeafRadius(), 0.01D);
  }

  @Test
  public void test3()  throws Throwable  {
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      int int0 = topDownConstructor0.getMaxDepth();
      assertEquals(0, int0);
      assertEquals(40, topDownConstructor0.getMaxInstancesInLeaf());
      assertEquals(0.0010, topDownConstructor0.getMaxRelativeLeafRadius(), 0.01D);
      assertEquals(false, topDownConstructor0.getContainChildBalls());
  }

  @Test
  public void test4()  throws Throwable  {
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      String string0 = topDownConstructor0.maxInstancesInLeafTipText();
      assertEquals(0.0010, topDownConstructor0.getMaxRelativeLeafRadius(), 0.01D);
      assertEquals(40, topDownConstructor0.getMaxInstancesInLeaf());
      assertEquals(false, topDownConstructor0.getContainChildBalls());
      assertEquals("The maximum number of instances allowed in a leaf.", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      BottomUpConstructor bottomUpConstructor0 = new BottomUpConstructor();
      String string0 = bottomUpConstructor0.maxRelativeLeafRadiusTipText();
      assertEquals(40, bottomUpConstructor0.getMaxInstancesInLeaf());
      assertEquals(false, bottomUpConstructor0.getContainChildBalls());
      assertEquals(0.0010, bottomUpConstructor0.getMaxRelativeLeafRadius(), 0.01D);
      assertEquals("The maximum relative radius allowed for a leaf node. Itis relative to the radius of the smallest ball enclosing all the data points (that were used to build the tree). This smallest ball would be the same as the root node's ball, if ContainChildBalls property is set to false (default).", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      double double0 = topDownConstructor0.getMaxRelativeLeafRadius();
      assertEquals(0.0010, double0, 0.01D);
      assertEquals(40, topDownConstructor0.getMaxInstancesInLeaf());
      assertEquals(false, topDownConstructor0.getContainChildBalls());
  }

  @Test
  public void test7()  throws Throwable  {
      BottomUpConstructor bottomUpConstructor0 = new BottomUpConstructor();
      Enumeration<Object> enumeration0 = bottomUpConstructor0.listOptions();
      assertEquals(false, bottomUpConstructor0.getContainChildBalls());
      assertNotNull(enumeration0);
      assertEquals(0.0010, bottomUpConstructor0.getMaxRelativeLeafRadius(), 0.01D);
      assertEquals(40, bottomUpConstructor0.getMaxInstancesInLeaf());
  }

  @Test
  public void test8()  throws Throwable  {
      MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor();
      String[] stringArray0 = middleOutConstructor0.getOptions();
      middleOutConstructor0.setOptions(stringArray0);
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      topDownConstructor0.setOptions(stringArray0);
      assertEquals(false, middleOutConstructor0.isInitialAnchorRandom());
  }

  @Test
  public void test9()  throws Throwable  {
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      int int0 = topDownConstructor0.getNumLeaves();
      assertEquals(false, topDownConstructor0.getContainChildBalls());
      assertEquals(40, topDownConstructor0.getMaxInstancesInLeaf());
      assertEquals(0.0010, topDownConstructor0.getMaxRelativeLeafRadius(), 0.01D);
      assertEquals(0, int0);
  }

  @Test
  public void test10()  throws Throwable  {
      BottomUpConstructor bottomUpConstructor0 = new BottomUpConstructor();
      bottomUpConstructor0.setInstances((Instances) null);
      assertEquals(40, bottomUpConstructor0.getMaxInstancesInLeaf());
      assertEquals(0.0010, bottomUpConstructor0.getMaxRelativeLeafRadius(), 0.01D);
      assertEquals(false, bottomUpConstructor0.getContainChildBalls());
  }

  @Test
  public void test11()  throws Throwable  {
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      int[] intArray0 = new int[1];
      topDownConstructor0.setInstanceList(intArray0);
      assertEquals(40, topDownConstructor0.getMaxInstancesInLeaf());
      assertEquals(false, topDownConstructor0.getContainChildBalls());
      assertEquals(0.0010, topDownConstructor0.getMaxRelativeLeafRadius(), 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      BottomUpConstructor bottomUpConstructor0 = new BottomUpConstructor();
      try {
        bottomUpConstructor0.setMaxInstancesInLeaf((-375));
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * The maximum number of instances in a leaf must be >=1.
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      topDownConstructor0.setMaxRelativeLeafRadius(85.54915821071111);
      assertEquals(85.54915821071111, topDownConstructor0.getMaxRelativeLeafRadius(), 0.01D);
      assertEquals(40, topDownConstructor0.getMaxInstancesInLeaf());
  }

  @Test
  public void test14()  throws Throwable  {
      MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor();
      try {
        middleOutConstructor0.setMaxRelativeLeafRadius((-1743.8315688047387));
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * The radius for the leaves should be >= 0.0
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor();
      String[] stringArray0 = middleOutConstructor0.getOptions();
      middleOutConstructor0.setOptions(stringArray0);
      middleOutConstructor0.getOptions();
      assertEquals(false, middleOutConstructor0.isInitialAnchorRandom());
      assertEquals(40, middleOutConstructor0.getMaxInstancesInLeaf());
  }
}
