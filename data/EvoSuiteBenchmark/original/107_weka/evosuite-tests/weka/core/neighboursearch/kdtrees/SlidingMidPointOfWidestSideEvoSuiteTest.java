/*
 * This file was automatically generated by EvoSuite
 */

package weka.core.neighboursearch.kdtrees;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import weka.core.neighboursearch.kdtrees.SlidingMidPointOfWidestSide;

@RunWith(EvoSuiteRunner.class)
public class SlidingMidPointOfWidestSideEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SlidingMidPointOfWidestSide slidingMidPointOfWidestSide0 = new SlidingMidPointOfWidestSide();
      String string0 = slidingMidPointOfWidestSide0.globalInfo();
      assertEquals("The class that splits a node into two based on the midpoint value of the dimension in which the node's rectangle is widest. If after splitting one side is empty then it is slided towards the non-empty side until there is at least one point on the empty side.\n\nFor more information see also:\n\nDavid M. Mount (2006). ANN Programming Manual. College Park, MD, USA.", string0);
      assertNotNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      SlidingMidPointOfWidestSide slidingMidPointOfWidestSide0 = new SlidingMidPointOfWidestSide();
      String string0 = slidingMidPointOfWidestSide0.getRevision();
      assertNotNull(string0);
      assertEquals("8034", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      SlidingMidPointOfWidestSide slidingMidPointOfWidestSide0 = new SlidingMidPointOfWidestSide();
      int[] intArray0 = new int[8];
      int int0 = slidingMidPointOfWidestSide0.rearrangePoints(intArray0, 0, (-1923), (-1923), (double) 0);
      assertEquals(0, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      SlidingMidPointOfWidestSide slidingMidPointOfWidestSide0 = new SlidingMidPointOfWidestSide();
      int[] intArray0 = new int[4];
      // Undeclared exception!
      try {
        slidingMidPointOfWidestSide0.rearrangePoints(intArray0, 0, 0, 0, (double) 0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
