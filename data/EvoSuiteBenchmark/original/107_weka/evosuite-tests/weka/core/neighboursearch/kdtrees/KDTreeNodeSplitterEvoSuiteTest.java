/*
 * This file was automatically generated by EvoSuite
 */

package weka.core.neighboursearch.kdtrees;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.ArrayList;
import java.util.Enumeration;
import org.junit.BeforeClass;
import weka.core.Attribute;
import weka.core.EuclideanDistance;
import weka.core.Instances;
import weka.core.neighboursearch.kdtrees.KMeansInpiredMethod;
import weka.core.neighboursearch.kdtrees.MidPointOfWidestDimension;
import weka.core.neighboursearch.kdtrees.SlidingMidPointOfWidestSide;

@RunWith(EvoSuiteRunner.class)
public class KDTreeNodeSplitterEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      KMeansInpiredMethod kMeansInpiredMethod0 = new KMeansInpiredMethod();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("v", arrayList0, 3);
      kMeansInpiredMethod0.setInstances(instances0);
      try {
        kMeansInpiredMethod0.correctlyInitialized();
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * No instance list supplied.
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      SlidingMidPointOfWidestSide slidingMidPointOfWidestSide0 = new SlidingMidPointOfWidestSide();
      MidPointOfWidestDimension midPointOfWidestDimension0 = new MidPointOfWidestDimension();
      String[] stringArray0 = slidingMidPointOfWidestSide0.getOptions();
      midPointOfWidestDimension0.setOptions(stringArray0);
      assertEquals("The class that splits a KDTree node based on the midpoint value of a dimension in which the node's points have the widest spread.\n\nFor more information see also:\n\nAndrew Moore (1991). A tutorial on kd-trees.", midPointOfWidestDimension0.globalInfo());
  }

  @Test
  public void test2()  throws Throwable  {
      KMeansInpiredMethod kMeansInpiredMethod0 = new KMeansInpiredMethod();
      int[] intArray0 = new int[1];
      kMeansInpiredMethod0.setInstanceList(intArray0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("SVZK", arrayList0, 843);
      kMeansInpiredMethod0.setInstances(instances0);
      try {
        kMeansInpiredMethod0.correctlyInitialized();
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * No Euclidean distance function supplied.
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      KMeansInpiredMethod kMeansInpiredMethod0 = new KMeansInpiredMethod();
      Enumeration<Object> enumeration0 = kMeansInpiredMethod0.listOptions();
      assertEquals(false, enumeration0.hasMoreElements());
  }

  @Test
  public void test4()  throws Throwable  {
      KMeansInpiredMethod kMeansInpiredMethod0 = new KMeansInpiredMethod();
      try {
        kMeansInpiredMethod0.correctlyInitialized();
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * No instances supplied.
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      KMeansInpiredMethod kMeansInpiredMethod0 = new KMeansInpiredMethod();
      int[] intArray0 = new int[1];
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      kMeansInpiredMethod0.setEuclideanDistanceFunction(euclideanDistance0);
      kMeansInpiredMethod0.setInstanceList(intArray0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("SVZK", arrayList0, 843);
      kMeansInpiredMethod0.setInstances(instances0);
      try {
        kMeansInpiredMethod0.correctlyInitialized();
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * The supplied instance list doesn't seem to match the supplied instances
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      SlidingMidPointOfWidestSide slidingMidPointOfWidestSide0 = new SlidingMidPointOfWidestSide();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("6%j)6<eG~1 d Y@", arrayList0, 1495);
      slidingMidPointOfWidestSide0.setInstances(instances0);
      double[][] doubleArray0 = new double[9][3];
      double[] doubleArray1 = new double[16];
      doubleArray0[0] = doubleArray1;
      doubleArray1[2] = (double) 1495;
      double[][] doubleArray2 = new double[10][4];
      doubleArray2[0] = doubleArray0[0];
      slidingMidPointOfWidestSide0.setNodeWidthNormalization(true);
      int int0 = slidingMidPointOfWidestSide0.widestDim(doubleArray0, doubleArray2);
      assertEquals(0, int0);
  }

  @Test
  public void test7()  throws Throwable  {
      SlidingMidPointOfWidestSide slidingMidPointOfWidestSide0 = new SlidingMidPointOfWidestSide();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("6%j)6<eG~1 d Y@", arrayList0, 1495);
      slidingMidPointOfWidestSide0.setInstances(instances0);
      double[][] doubleArray0 = new double[9][3];
      double[] doubleArray1 = new double[16];
      doubleArray0[0] = doubleArray1;
      doubleArray1[2] = (double) 1495;
      int int0 = slidingMidPointOfWidestSide0.widestDim(doubleArray0, doubleArray0);
      assertEquals(0, int0);
  }
}
