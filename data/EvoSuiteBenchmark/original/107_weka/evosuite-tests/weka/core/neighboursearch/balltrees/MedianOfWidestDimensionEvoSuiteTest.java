/*
 * This file was automatically generated by EvoSuite
 */

package weka.core.neighboursearch.balltrees;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.ArrayList;
import java.util.Enumeration;
import org.junit.BeforeClass;
import weka.core.Attribute;
import weka.core.EuclideanDistance;
import weka.core.Instances;
import weka.core.TechnicalInformation;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.neighboursearch.balltrees.MedianOfWidestDimension;

@RunWith(EvoSuiteRunner.class)
public class MedianOfWidestDimensionEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      MedianOfWidestDimension medianOfWidestDimension0 = new MedianOfWidestDimension();
      assertEquals(true, medianOfWidestDimension0.getNormalizeDimWidths());
      
      medianOfWidestDimension0.setNormalizeDimWidths(false);
      medianOfWidestDimension0.getOptions();
      assertEquals(false, medianOfWidestDimension0.getNormalizeDimWidths());
  }

  @Test
  public void test1()  throws Throwable  {
      MedianOfWidestDimension medianOfWidestDimension0 = new MedianOfWidestDimension();
      String[] stringArray0 = medianOfWidestDimension0.getOptions();
      assertNotNull(stringArray0);
      assertEquals(true, medianOfWidestDimension0.getNormalizeDimWidths());
  }

  @Test
  public void test2()  throws Throwable  {
      int[] intArray0 = new int[10];
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("&@i+T$L6T4L:_7<9!g", arrayList0, 0);
      EuclideanDistance euclideanDistance0 = new EuclideanDistance(instances0);
      MedianOfWidestDimension medianOfWidestDimension0 = new MedianOfWidestDimension(intArray0, instances0, euclideanDistance0);
      String string0 = medianOfWidestDimension0.getRevision();
      assertNotNull(string0);
      assertEquals("8034", string0);
      assertEquals(true, medianOfWidestDimension0.getNormalizeDimWidths());
  }

  @Test
  public void test3()  throws Throwable  {
      MedianOfWidestDimension medianOfWidestDimension0 = new MedianOfWidestDimension();
      String string0 = medianOfWidestDimension0.globalInfo();
      assertEquals(true, medianOfWidestDimension0.getNormalizeDimWidths());
      assertEquals("Class that splits a BallNode of a ball tree based on the median value of the widest dimension of the points in the ball. It essentially implements Omohundro's  KD construction algorithm.", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      MedianOfWidestDimension medianOfWidestDimension0 = new MedianOfWidestDimension();
      String string0 = medianOfWidestDimension0.normalizeDimWidthsTipText();
      assertEquals("Whether to normalize the widths(ranges) of the dimensions (attributes) before selecting the widest one.", string0);
      assertEquals(true, medianOfWidestDimension0.getNormalizeDimWidths());
  }

  @Test
  public void test5()  throws Throwable  {
      MedianOfWidestDimension medianOfWidestDimension0 = new MedianOfWidestDimension();
      BallNode ballNode0 = new BallNode(1277);
      try {
        medianOfWidestDimension0.splitNode(ballNode0, 1277);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * No instances supplied.
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      MedianOfWidestDimension medianOfWidestDimension0 = new MedianOfWidestDimension();
      TechnicalInformation technicalInformation0 = medianOfWidestDimension0.getTechnicalInformation();
      assertEquals(true, medianOfWidestDimension0.getNormalizeDimWidths());
      assertNotNull(technicalInformation0);
      assertEquals("@techreport{Omohundro1989,\n   author = {Stephen M. Omohundro},\n   institution = {International Computer Science Institute},\n   month = {December},\n   number = {TR-89-063},\n   title = {Five Balltree Construction Algorithms},\n   year = {1989}\n}", technicalInformation0.toBibTex());
  }

  @Test
  public void test7()  throws Throwable  {
      MedianOfWidestDimension medianOfWidestDimension0 = new MedianOfWidestDimension();
      Enumeration<Object> enumeration0 = medianOfWidestDimension0.listOptions();
      assertEquals(true, enumeration0.hasMoreElements());
      assertEquals(true, medianOfWidestDimension0.getNormalizeDimWidths());
      assertNotNull(enumeration0);
  }

  @Test
  public void test8()  throws Throwable  {
      MedianOfWidestDimension medianOfWidestDimension0 = new MedianOfWidestDimension();
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try {
        medianOfWidestDimension0.select(1, intArray0, 1, 0, 1);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      MedianOfWidestDimension medianOfWidestDimension0 = new MedianOfWidestDimension();
      int[] intArray0 = new int[3];
      int int0 = medianOfWidestDimension0.select(35, intArray0, 35, 35, 0);
      assertEquals(35, int0);
      assertEquals(true, medianOfWidestDimension0.getNormalizeDimWidths());
  }

  @Test
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[10];
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("&@i+T$L6T4L:_7<9!g", arrayList0, 0);
      EuclideanDistance euclideanDistance0 = new EuclideanDistance(instances0);
      MedianOfWidestDimension medianOfWidestDimension0 = new MedianOfWidestDimension(intArray0, instances0, euclideanDistance0);
      double[][] doubleArray0 = new double[5][10];
      double[] doubleArray1 = new double[4];
      doubleArray1[2] = (double) 1550;
      doubleArray0[0] = doubleArray1;
      int int0 = medianOfWidestDimension0.widestDim(doubleArray0, doubleArray0);
      assertEquals(0, int0);
      assertEquals(true, medianOfWidestDimension0.getNormalizeDimWidths());
  }

  @Test
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[5];
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("k6@", arrayList0, 1550);
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      MedianOfWidestDimension medianOfWidestDimension0 = new MedianOfWidestDimension(intArray0, instances0, euclideanDistance0);
      assertEquals(true, medianOfWidestDimension0.getNormalizeDimWidths());
      
      double[][] doubleArray0 = new double[8][9];
      double[] doubleArray1 = new double[7];
      doubleArray1[2] = (double) 1550;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "k6@";
      medianOfWidestDimension0.setOptions(stringArray0);
      doubleArray0[1] = doubleArray1;
      int int0 = medianOfWidestDimension0.widestDim(doubleArray0, doubleArray0);
      assertEquals(false, medianOfWidestDimension0.getNormalizeDimWidths());
      assertEquals(1, int0);
  }
}
