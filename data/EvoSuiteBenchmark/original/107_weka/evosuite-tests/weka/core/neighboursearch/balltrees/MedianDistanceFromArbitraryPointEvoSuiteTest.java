/*
 * This file was automatically generated by EvoSuite
 */

package weka.core.neighboursearch.balltrees;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Enumeration;
import org.junit.BeforeClass;
import weka.core.EuclideanDistance;
import weka.core.Instances;
import weka.core.neighboursearch.balltrees.MedianDistanceFromArbitraryPoint;

@RunWith(EvoSuiteRunner.class)
public class MedianDistanceFromArbitraryPointEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      MedianDistanceFromArbitraryPoint medianDistanceFromArbitraryPoint0 = new MedianDistanceFromArbitraryPoint();
      String string0 = medianDistanceFromArbitraryPoint0.globalInfo();
      assertEquals("Class that splits a BallNode of a ball tree using Uhlmann's described method.\n\nFor information see:\n\nJeffrey K. Uhlmann (1991). Satisfying general proximity/similarity queries with metric trees. Information Processing Letters. 40(4):175-179.\n\nAshraf Masood Kibriya (2007). Fast Algorithms for Nearest Neighbour Search. Hamilton, New Zealand.", string0);
      assertEquals(17, medianDistanceFromArbitraryPoint0.getRandomSeed());
      assertNotNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      MedianDistanceFromArbitraryPoint medianDistanceFromArbitraryPoint0 = new MedianDistanceFromArbitraryPoint();
      String string0 = medianDistanceFromArbitraryPoint0.randomSeedTipText();
      assertEquals(17, medianDistanceFromArbitraryPoint0.getRandomSeed());
      assertEquals("The seed value for the random number generator.", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      MedianDistanceFromArbitraryPoint medianDistanceFromArbitraryPoint0 = new MedianDistanceFromArbitraryPoint();
      String string0 = medianDistanceFromArbitraryPoint0.getRevision();
      assertEquals(17, medianDistanceFromArbitraryPoint0.getRandomSeed());
      assertNotNull(string0);
      assertEquals("8034", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      MedianDistanceFromArbitraryPoint medianDistanceFromArbitraryPoint0 = new MedianDistanceFromArbitraryPoint();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      medianDistanceFromArbitraryPoint0.setOptions(stringArray0);
      assertEquals(17, medianDistanceFromArbitraryPoint0.getRandomSeed());
  }

  @Test
  public void test4()  throws Throwable  {
      MedianDistanceFromArbitraryPoint medianDistanceFromArbitraryPoint0 = new MedianDistanceFromArbitraryPoint();
      Enumeration<Object> enumeration0 = medianDistanceFromArbitraryPoint0.listOptions();
      assertEquals(true, enumeration0.hasMoreElements());
      assertEquals(17, medianDistanceFromArbitraryPoint0.getRandomSeed());
      assertNotNull(enumeration0);
  }

  @Test
  public void test5()  throws Throwable  {
      MedianDistanceFromArbitraryPoint medianDistanceFromArbitraryPoint0 = new MedianDistanceFromArbitraryPoint();
      String[] stringArray0 = medianDistanceFromArbitraryPoint0.getOptions();
      assertNotNull(stringArray0);
      
      medianDistanceFromArbitraryPoint0.setOptions(stringArray0);
      assertEquals(17, medianDistanceFromArbitraryPoint0.getRandomSeed());
  }

  @Test
  public void test6()  throws Throwable  {
      MedianDistanceFromArbitraryPoint medianDistanceFromArbitraryPoint0 = new MedianDistanceFromArbitraryPoint();
      double[] doubleArray0 = new double[7];
      int[] intArray0 = new int[6];
      int int0 = medianDistanceFromArbitraryPoint0.partition(doubleArray0, intArray0, 0, 1, 1);
      assertEquals(0, int0);
      assertEquals(17, medianDistanceFromArbitraryPoint0.getRandomSeed());
  }

  @Test
  public void test7()  throws Throwable  {
      MedianDistanceFromArbitraryPoint medianDistanceFromArbitraryPoint0 = new MedianDistanceFromArbitraryPoint();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-153.4191195797774);
      int[] intArray0 = new int[6];
      // Undeclared exception!
      try {
        medianDistanceFromArbitraryPoint0.partition(doubleArray0, intArray0, 0, 11, (-1009));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      MedianDistanceFromArbitraryPoint medianDistanceFromArbitraryPoint0 = new MedianDistanceFromArbitraryPoint();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      int[] intArray0 = new int[6];
      int int0 = medianDistanceFromArbitraryPoint0.partition(doubleArray0, intArray0, 0, 1, 1);
      assertEquals(0, int0);
      assertEquals(17, medianDistanceFromArbitraryPoint0.getRandomSeed());
  }

  @Test
  public void test9()  throws Throwable  {
      MedianDistanceFromArbitraryPoint medianDistanceFromArbitraryPoint0 = new MedianDistanceFromArbitraryPoint();
      double[] doubleArray0 = new double[10];
      int[] intArray0 = new int[4];
      // Undeclared exception!
      try {
        medianDistanceFromArbitraryPoint0.select(doubleArray0, intArray0, 1, 0, (-297), 0);
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      MedianDistanceFromArbitraryPoint medianDistanceFromArbitraryPoint0 = new MedianDistanceFromArbitraryPoint();
      double[] doubleArray0 = new double[9];
      int[] intArray0 = new int[1];
      int int0 = medianDistanceFromArbitraryPoint0.select(doubleArray0, intArray0, (-1), (-1), 0, 0);
      assertEquals((-1), int0);
      assertEquals(17, medianDistanceFromArbitraryPoint0.getRandomSeed());
  }

  @Test
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[8];
      double[] doubleArray0 = new double[7];
      EuclideanDistance euclideanDistance0 = new EuclideanDistance((Instances) null);
      MedianDistanceFromArbitraryPoint medianDistanceFromArbitraryPoint0 = new MedianDistanceFromArbitraryPoint(intArray0, (Instances) null, euclideanDistance0);
      // Undeclared exception!
      try {
        medianDistanceFromArbitraryPoint0.select(doubleArray0, intArray0, 6, 0, 622, 1);
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }
}
