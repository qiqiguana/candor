/*
 * This file was automatically generated by EvoSuite
 */

package weka.core.neighboursearch.kdtrees;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import weka.core.neighboursearch.kdtrees.MidPointOfWidestDimension;

@RunWith(EvoSuiteRunner.class)
public class MidPointOfWidestDimensionEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      MidPointOfWidestDimension midPointOfWidestDimension0 = new MidPointOfWidestDimension();
      String string0 = midPointOfWidestDimension0.globalInfo();
      assertEquals("The class that splits a KDTree node based on the midpoint value of a dimension in which the node's points have the widest spread.\n\nFor more information see also:\n\nAndrew Moore (1991). A tutorial on kd-trees.", string0);
      assertNotNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      MidPointOfWidestDimension midPointOfWidestDimension0 = new MidPointOfWidestDimension();
      String string0 = midPointOfWidestDimension0.getRevision();
      assertNotNull(string0);
      assertEquals("8034", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      MidPointOfWidestDimension midPointOfWidestDimension0 = new MidPointOfWidestDimension();
      int[] intArray0 = new int[11];
      int int0 = midPointOfWidestDimension0.rearrangePoints(intArray0, 0, (-1923), (-1923), (double) 0);
      assertEquals(0, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      MidPointOfWidestDimension midPointOfWidestDimension0 = new MidPointOfWidestDimension();
      int[] intArray0 = new int[4];
      // Undeclared exception!
      try {
        midPointOfWidestDimension0.rearrangePoints(intArray0, 0, 0, 0, (double) 0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
