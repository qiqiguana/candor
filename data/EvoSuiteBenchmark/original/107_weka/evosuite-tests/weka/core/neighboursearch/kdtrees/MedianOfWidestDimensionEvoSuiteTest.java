/*
 * This file was automatically generated by EvoSuite
 */

package weka.core.neighboursearch.kdtrees;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import weka.core.neighboursearch.kdtrees.KDTreeNode;
import weka.core.neighboursearch.kdtrees.MedianOfWidestDimension;

@RunWith(EvoSuiteRunner.class)
public class MedianOfWidestDimensionEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      MedianOfWidestDimension medianOfWidestDimension0 = new MedianOfWidestDimension();
      String string0 = medianOfWidestDimension0.getRevision();
      assertNotNull(string0);
      assertEquals("8034", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      MedianOfWidestDimension medianOfWidestDimension0 = new MedianOfWidestDimension();
      String string0 = medianOfWidestDimension0.globalInfo();
      assertEquals("The class that splits a KDTree node based on the median value of a dimension in which the node's points have the widest spread.\n\nFor more information see also:\n\nJerome H. Friedman, Jon Luis Bentley, Raphael Ari Finkel (1977). An Algorithm for Finding Best Matches in Logarithmic Expected Time. ACM Transactions on Mathematics Software. 3(3):209-226.", string0);
      assertNotNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      MedianOfWidestDimension medianOfWidestDimension0 = new MedianOfWidestDimension();
      KDTreeNode kDTreeNode0 = new KDTreeNode();
      try {
        medianOfWidestDimension0.splitNode(kDTreeNode0, 0, (double[][]) null, (double[][]) null);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * No instances supplied.
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      MedianOfWidestDimension medianOfWidestDimension0 = new MedianOfWidestDimension();
      int[] intArray0 = new int[27];
      // Undeclared exception!
      try {
        medianOfWidestDimension0.select((-21), intArray0, 53, (-21), (-21));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      MedianOfWidestDimension medianOfWidestDimension0 = new MedianOfWidestDimension();
      int[] intArray0 = new int[34];
      int int0 = medianOfWidestDimension0.select((-600), intArray0, 0, 0, 0);
      assertEquals(0, int0);
  }
}
