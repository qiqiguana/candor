/*
 * This file was automatically generated by EvoSuite
 */

package weka.core.neighboursearch.balltrees;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.ArrayList;
import org.junit.BeforeClass;
import weka.core.Instance;
import weka.core.TechnicalInformation;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.neighboursearch.balltrees.BottomUpConstructor;

@RunWith(EvoSuiteRunner.class)
public class BottomUpConstructorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BottomUpConstructor bottomUpConstructor0 = new BottomUpConstructor();
      BottomUpConstructor.TempNode bottomUpConstructor_TempNode0 = bottomUpConstructor0.new TempNode();
      String string0 = bottomUpConstructor_TempNode0.getRevision();
      assertNotNull(string0);
      assertEquals("8034", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      BottomUpConstructor bottomUpConstructor0 = new BottomUpConstructor();
      TechnicalInformation technicalInformation0 = bottomUpConstructor0.getTechnicalInformation();
      assertNotNull(technicalInformation0);
      assertEquals("@techreport{Omohundro1989,\n   author = {Stephen M. Omohundro},\n   institution = {International Computer Science Institute},\n   month = {December},\n   number = {TR-89-063},\n   title = {Five Balltree Construction Algorithms},\n   year = {1989}\n}", technicalInformation0.toBibTex());
  }

  @Test
  public void test2()  throws Throwable  {
      BottomUpConstructor bottomUpConstructor0 = new BottomUpConstructor();
      String string0 = bottomUpConstructor0.globalInfo();
      assertEquals("The class that constructs a ball tree bottom up.", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      BottomUpConstructor bottomUpConstructor0 = new BottomUpConstructor();
      BallNode ballNode0 = new BallNode((-1261));
      try {
        bottomUpConstructor0.addInstance(ballNode0, (Instance) null);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * BottomUpConstruction method does not allow addition of new Instances.
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      BottomUpConstructor bottomUpConstructor0 = new BottomUpConstructor();
      try {
        bottomUpConstructor0.calcRadius((BottomUpConstructor.TempNode) null, (BottomUpConstructor.TempNode) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      BottomUpConstructor bottomUpConstructor0 = new BottomUpConstructor();
      String string0 = bottomUpConstructor0.getRevision();
      assertNotNull(string0);
      assertEquals("8034", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      BottomUpConstructor bottomUpConstructor0 = new BottomUpConstructor();
      int[] intArray0 = new int[1];
      bottomUpConstructor0.setInstanceList(intArray0);
      try {
        bottomUpConstructor0.buildTree();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      BottomUpConstructor bottomUpConstructor0 = new BottomUpConstructor();
      ArrayList<BottomUpConstructor.TempNode> arrayList0 = new ArrayList<BottomUpConstructor.TempNode>();
      try {
        bottomUpConstructor0.mergeNodes(arrayList0, 509, 509, (int[]) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 0, Size: 0
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      BottomUpConstructor bottomUpConstructor0 = new BottomUpConstructor();
      ArrayList<BottomUpConstructor.TempNode> arrayList0 = new ArrayList<BottomUpConstructor.TempNode>();
      BottomUpConstructor.TempNode bottomUpConstructor_TempNode0 = bottomUpConstructor0.new TempNode();
      arrayList0.add(bottomUpConstructor_TempNode0);
      arrayList0.add(bottomUpConstructor_TempNode0);
      try {
        bottomUpConstructor0.mergeNodes(arrayList0, 1495, 1495, (int[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      BottomUpConstructor bottomUpConstructor0 = new BottomUpConstructor();
      BottomUpConstructor.TempNode bottomUpConstructor_TempNode0 = bottomUpConstructor0.new TempNode();
      bottomUpConstructor0.setMaxInstancesInLeaf(1);
      int[] intArray0 = new int[3];
      bottomUpConstructor_TempNode0.points = intArray0;
      try {
        bottomUpConstructor0.makeBallTree(bottomUpConstructor_TempNode0, (-1617), (-1617), bottomUpConstructor_TempNode0.points, 0, (double) (-1617));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      BottomUpConstructor bottomUpConstructor0 = new BottomUpConstructor();
      BottomUpConstructor.TempNode bottomUpConstructor_TempNode0 = bottomUpConstructor0.new TempNode();
      int[] intArray0 = new int[30];
      bottomUpConstructor0.setMaxInstancesInLeaf(5);
      bottomUpConstructor_TempNode0.radius = (double) 5;
      bottomUpConstructor_TempNode0.points = intArray0;
      try {
        bottomUpConstructor0.makeBallTree(bottomUpConstructor_TempNode0, 1548, 0, bottomUpConstructor_TempNode0.points, 5, (double) 5);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      BottomUpConstructor bottomUpConstructor0 = new BottomUpConstructor();
      BottomUpConstructor.TempNode bottomUpConstructor_TempNode0 = bottomUpConstructor0.new TempNode();
      int[] intArray0 = new int[30];
      bottomUpConstructor0.setMaxInstancesInLeaf(5);
      bottomUpConstructor_TempNode0.radius = (double) 5;
      bottomUpConstructor_TempNode0.left = (weka.core.neighboursearch.balltrees.BottomUpConstructor.TempNode) bottomUpConstructor_TempNode0;
      bottomUpConstructor_TempNode0.points = intArray0;
      try {
        bottomUpConstructor0.makeBallTree(bottomUpConstructor_TempNode0, 1548, 0, bottomUpConstructor_TempNode0.points, 5, (double) 5);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      BottomUpConstructor bottomUpConstructor0 = new BottomUpConstructor();
      BottomUpConstructor.TempNode bottomUpConstructor_TempNode0 = bottomUpConstructor0.new TempNode();
      int[] intArray0 = new int[30];
      bottomUpConstructor_TempNode0.points = intArray0;
      String string0 = bottomUpConstructor_TempNode0.toString();
      assertNotNull(string0);
      assertEquals("p: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0", string0);
  }
}
