/*
 * This file was automatically generated by EvoSuite
 */

package weka.core.neighboursearch.kdtrees;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.ArrayList;
import org.junit.BeforeClass;
import weka.core.Attribute;
import weka.core.Instances;
import weka.core.neighboursearch.kdtrees.KMeansInpiredMethod;

@RunWith(EvoSuiteRunner.class)
public class KMeansInpiredMethodEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      KMeansInpiredMethod kMeansInpiredMethod0 = new KMeansInpiredMethod();
      String string0 = kMeansInpiredMethod0.getRevision();
      assertNotNull(string0);
      assertEquals("8034", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      KMeansInpiredMethod kMeansInpiredMethod0 = new KMeansInpiredMethod();
      String string0 = kMeansInpiredMethod0.globalInfo();
      assertNotNull(string0);
      assertEquals("The class that splits a node into two such that the overall sum of squared distances of points to their centres on both sides of the (axis-parallel) splitting plane is minimum.\n\nFor more information see also:\n\nAshraf Masood Kibriya (2007). Fast Algorithms for Nearest Neighbour Search. Hamilton, New Zealand.", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("gL(1lU)\"1X]1PM", arrayList0, 17);
      int[] intArray0 = new int[14];
      KMeansInpiredMethod.quickSort(instances0, intArray0, 0, 0, 0);
      assertEquals(0, instances0.numAttributes());
  }

  @Test
  public void test3()  throws Throwable  {
      int[] intArray0 = new int[10];
      // Undeclared exception!
      try {
        KMeansInpiredMethod.quickSort((Instances) null, intArray0, 1408, 36, 1408);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 722
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      KMeansInpiredMethod kMeansInpiredMethod0 = new KMeansInpiredMethod();
      int[] intArray0 = new int[7];
      int int0 = kMeansInpiredMethod0.rearrangePoints(intArray0, 0, (-29), (-29), (double) (-29));
      assertEquals(0, int0);
  }

  @Test
  public void test5()  throws Throwable  {
      KMeansInpiredMethod kMeansInpiredMethod0 = new KMeansInpiredMethod();
      int[] intArray0 = new int[7];
      // Undeclared exception!
      try {
        kMeansInpiredMethod0.rearrangePoints(intArray0, 19, 19, 19, (double) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 19
         */
      }
  }
}
