/*
 * This file was automatically generated by EvoSuite
 */

package weka.experiment;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import weka.core.Attribute;
import weka.core.Instances;
import weka.experiment.AveragingResultProducer;
import weka.experiment.LearningRateResultProducer;
import weka.experiment.RandomSplitResultProducer;
import weka.experiment.ResultListener;
import weka.experiment.ResultProducer;

@RunWith(EvoSuiteRunner.class)
public class LearningRateResultProducerEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer();
          String string0 = learningRateResultProducer0.lowerSizeTipText();
          assertEquals("Set the minmum number of instances in a dataset. Setting zero here will actually use <stepSize> number of instances at the first step (since it makes no sense to use zero instances :-))", string0);
          assertEquals(0, learningRateResultProducer0.getLowerSize());
          assertEquals(10, learningRateResultProducer0.getStepSize());
          assertEquals(-1, learningRateResultProducer0.getUpperSize());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer();
          RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer();
          learningRateResultProducer0.determineColumnConstraints((ResultProducer) randomSplitResultProducer0);
          assertEquals(-1, learningRateResultProducer0.getUpperSize());
          assertEquals(10, learningRateResultProducer0.getStepSize());
          assertEquals(0, learningRateResultProducer0.getLowerSize());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer();
          learningRateResultProducer0.setResultListener((ResultListener) null);
          try {
            learningRateResultProducer0.doRunKeys(234);
            fail("Expecting exception: Exception");
          } catch(Exception e) {
            /*
             * No ResultListener set
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer();
          String string0 = learningRateResultProducer0.upperSizeTipText();
          assertEquals(0, learningRateResultProducer0.getLowerSize());
          assertEquals(10, learningRateResultProducer0.getStepSize());
          assertEquals(-1, learningRateResultProducer0.getUpperSize());
          assertEquals("Set the maximum number of instances in a dataset. Setting -1 sets no upper limit (other than the total number of instances in the full dataset)", string0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer();
          RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer();
          learningRateResultProducer0.postProcess((ResultProducer) randomSplitResultProducer0);
          assertEquals(0, learningRateResultProducer0.getLowerSize());
          assertEquals(10, learningRateResultProducer0.getStepSize());
          assertEquals(-1, learningRateResultProducer0.getUpperSize());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer();
          try {
            learningRateResultProducer0.getKeyTypes();
            fail("Expecting exception: Exception");
          } catch(Exception e) {
            /*
             * No key field called Fold produced by weka.experiment.CrossValidationResultProducer
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer();
          String[] stringArray0 = learningRateResultProducer0.getOptions();
          assertNotNull(stringArray0);
          
          learningRateResultProducer0.setOptions(stringArray0);
          try {
            learningRateResultProducer0.setOptions(stringArray0);
            fail("Expecting exception: Exception");
          } catch(Exception e) {
            /*
             * A ResultProducer must be specified with the -W option.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer();
          String string0 = learningRateResultProducer0.getRevision();
          assertEquals("8034", string0);
          assertEquals(0, learningRateResultProducer0.getLowerSize());
          assertNotNull(string0);
          assertEquals(-1, learningRateResultProducer0.getUpperSize());
          assertEquals(10, learningRateResultProducer0.getStepSize());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test8()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer();
          Object[] objectArray0 = learningRateResultProducer0.getResultTypes();
          assertEquals(-1, learningRateResultProducer0.getUpperSize());
          assertEquals(10, learningRateResultProducer0.getStepSize());
          assertEquals(0, learningRateResultProducer0.getLowerSize());
          assertNotNull(objectArray0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test9()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer();
          String string0 = learningRateResultProducer0.globalInfo();
          assertEquals(0, learningRateResultProducer0.getLowerSize());
          assertEquals(10, learningRateResultProducer0.getStepSize());
          assertEquals("Tells a sub-ResultProducer to reproduce the current run for varying sized subsamples of the dataset. Normally used with an AveragingResultProducer and CrossValidationResultProducer combo to generate learning curve results. For non-numeric result fields, the first value is used.", string0);
          assertEquals(-1, learningRateResultProducer0.getUpperSize());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer();
          String[] stringArray0 = learningRateResultProducer0.getResultNames();
          assertEquals(0, learningRateResultProducer0.getLowerSize());
          assertEquals(-1, learningRateResultProducer0.getUpperSize());
          assertEquals(10, learningRateResultProducer0.getStepSize());
          assertNotNull(stringArray0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer();
          String string0 = learningRateResultProducer0.resultProducerTipText();
          assertEquals("Set the resultProducer for which learning rate results should be generated.", string0);
          assertEquals(-1, learningRateResultProducer0.getUpperSize());
          assertEquals(10, learningRateResultProducer0.getStepSize());
          assertEquals(0, learningRateResultProducer0.getLowerSize());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer();
          ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
          Instances instances0 = new Instances((String) null, arrayList0, 1843);
          learningRateResultProducer0.setInstances(instances0);
          learningRateResultProducer0.doRunKeys((-1));
          assertEquals(-1, learningRateResultProducer0.getUpperSize());
          assertEquals(10, learningRateResultProducer0.getStepSize());
          assertEquals(0, learningRateResultProducer0.getLowerSize());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer();
          String string0 = learningRateResultProducer0.stepSizeTipText();
          assertEquals(0, learningRateResultProducer0.getLowerSize());
          assertEquals(-1, learningRateResultProducer0.getUpperSize());
          assertEquals("Set the number of instances to add at each step.", string0);
          assertEquals(10, learningRateResultProducer0.getStepSize());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test14()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer();
          learningRateResultProducer0.postProcess();
          assertEquals(10, learningRateResultProducer0.getStepSize());
          assertEquals(-1, learningRateResultProducer0.getUpperSize());
          assertEquals(0, learningRateResultProducer0.getLowerSize());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test15()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer();
          try {
            learningRateResultProducer0.doRunKeys((-1));
            fail("Expecting exception: Exception");
          } catch(Exception e) {
            /*
             * No Instances set
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test16()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer();
          learningRateResultProducer0.setLowerSize((-1));
          ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
          Instances instances0 = new Instances((String) null, arrayList0, 1843);
          learningRateResultProducer0.setInstances(instances0);
          try {
            learningRateResultProducer0.doRunKeys((-1));
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test17()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer();
          learningRateResultProducer0.setLowerSize((-1));
          ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
          Instances instances0 = new Instances((String) null, arrayList0, 1843);
          learningRateResultProducer0.setUpperSize(1182);
          learningRateResultProducer0.setInstances(instances0);
          try {
            learningRateResultProducer0.doRunKeys((-1));
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test18()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer();
          learningRateResultProducer0.setUpperSize((-2026));
          ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
          Instances instances0 = new Instances((String) null, arrayList0, 1843);
          learningRateResultProducer0.setInstances(instances0);
          learningRateResultProducer0.setStepSize(0);
          learningRateResultProducer0.doRunKeys((-2026));
          assertEquals(-2026, learningRateResultProducer0.getUpperSize());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test19()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer();
          try {
            learningRateResultProducer0.doRun(15);
            fail("Expecting exception: Exception");
          } catch(Exception e) {
            /*
             * No Instances set
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test20()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer();
          ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
          Instances instances0 = new Instances((String) null, arrayList0, 1838);
          learningRateResultProducer0.setInstances(instances0);
          learningRateResultProducer0.doRun((-1));
          assertEquals(-1, learningRateResultProducer0.getUpperSize());
          assertEquals(0, learningRateResultProducer0.getLowerSize());
          assertEquals(10, learningRateResultProducer0.getStepSize());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test21()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer();
          ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
          learningRateResultProducer0.setLowerSize((-1));
          Instances instances0 = new Instances((String) null, arrayList0, 1838);
          learningRateResultProducer0.setInstances(instances0);
          try {
            learningRateResultProducer0.doRun((-1));
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test22()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer();
          learningRateResultProducer0.setUpperSize(0);
          ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
          learningRateResultProducer0.setLowerSize((-1));
          Instances instances0 = new Instances((String) null, arrayList0, 1838);
          learningRateResultProducer0.setInstances(instances0);
          try {
            learningRateResultProducer0.doRun((-1));
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test23()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer();
          learningRateResultProducer0.preProcess();
          assertEquals(-1, learningRateResultProducer0.getUpperSize());
          assertEquals(10, learningRateResultProducer0.getStepSize());
          assertEquals(0, learningRateResultProducer0.getLowerSize());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test24()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer();
          AveragingResultProducer averagingResultProducer0 = (AveragingResultProducer)learningRateResultProducer0.getResultProducer();
          assertNotNull(averagingResultProducer0);
          
          Object[] objectArray0 = new Object[5];
          // Undeclared exception!
          try {
            learningRateResultProducer0.acceptResult((ResultProducer) averagingResultProducer0, objectArray0, objectArray0);
            fail("Expecting exception: Error");
          } catch(Error e) {
            /*
             * Unrecognized ResultProducer sending results!!
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test25()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer();
          // Undeclared exception!
          try {
            learningRateResultProducer0.acceptResult((ResultProducer) learningRateResultProducer0, (Object[]) null, (Object[]) null);
            fail("Expecting exception: Error");
          } catch(Error e) {
            /*
             * Unrecognized ResultProducer sending results!!
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test26()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer();
          AveragingResultProducer averagingResultProducer0 = new AveragingResultProducer();
          Object[] objectArray0 = new Object[8];
          // Undeclared exception!
          try {
            learningRateResultProducer0.isResultRequired((ResultProducer) averagingResultProducer0, objectArray0);
            fail("Expecting exception: Error");
          } catch(Error e) {
            /*
             * Unrecognized ResultProducer sending results!!
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test27()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer();
          String string0 = learningRateResultProducer0.toString();
          assertEquals(0, learningRateResultProducer0.getLowerSize());
          assertNotNull(string0);
          assertEquals(10, learningRateResultProducer0.getStepSize());
          assertEquals("LearningRateResultProducer: -W weka.experiment.AveragingResultProducer -- -X 10 -W weka.experiment.CrossValidationResultProducer -- -X 10 -W weka.experiment.ClassifierSplitEvaluator --: <null Instances>", string0);
          assertEquals(-1, learningRateResultProducer0.getUpperSize());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test28()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer();
          Enumeration<Object> enumeration0 = learningRateResultProducer0.listOptions();
          assertNotNull(enumeration0);
          assertEquals(10, learningRateResultProducer0.getStepSize());
          assertEquals(-1, learningRateResultProducer0.getUpperSize());
          assertEquals(0, learningRateResultProducer0.getLowerSize());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test29()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer();
          String[] stringArray0 = new String[3];
          learningRateResultProducer0.setAdditionalMeasures(stringArray0);
          assertEquals(0, learningRateResultProducer0.getLowerSize());
          assertEquals(-1, learningRateResultProducer0.getUpperSize());
          assertEquals(10, learningRateResultProducer0.getStepSize());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test30()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer();
          Enumeration<Object> enumeration0 = learningRateResultProducer0.enumerateMeasures();
          assertNotNull(enumeration0);
          assertEquals(10, learningRateResultProducer0.getStepSize());
          assertEquals(0, learningRateResultProducer0.getLowerSize());
          assertEquals(-1, learningRateResultProducer0.getUpperSize());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test31()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer();
          // Undeclared exception!
          try {
            learningRateResultProducer0.getMeasure((String) null);
            fail("Expecting exception: IllegalArgumentException");
          } catch(IllegalArgumentException e) {
            /*
             * ClassifierSplitEvaluator: Can't return value for : null. weka.classifiers.rules.ZeroR is not an AdditionalMeasureProducer
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test32()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer();
          assertEquals("LearningRateResultProducer: -W weka.experiment.AveragingResultProducer -- -X 10 -W weka.experiment.CrossValidationResultProducer -- -X 10 -W weka.experiment.ClassifierSplitEvaluator --: <null Instances>", learningRateResultProducer0.toString());
          
          ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
          Instances instances0 = new Instances((String) null, arrayList0, 1843);
          learningRateResultProducer0.setInstances(instances0);
          // Undeclared exception!
          try {
            learningRateResultProducer0.toString();
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
