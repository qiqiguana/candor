/*
 * This file was automatically generated by EvoSuite
 */

package weka.experiment;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.File;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import weka.experiment.CrossValidationSplitResultProducer;
import weka.experiment.InstanceQuery;
import weka.experiment.InstanceQueryAdapter;

@RunWith(EvoSuiteRunner.class)
public class InstanceQueryEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      InstanceQuery instanceQuery0 = new InstanceQuery();
      String string0 = instanceQuery0.customPropsFileTipText();
      assertEquals("SELECT * from ?", instanceQuery0.getQuery());
      assertEquals("The custom properties that the user can use to override the default ones.", string0);
      assertEquals(false, instanceQuery0.getSparseData());
  }

  @Test
  public void test1()  throws Throwable  {
      InstanceQuery instanceQuery0 = new InstanceQuery();
      try {
        instanceQuery0.retrieveInstances();
        fail("Expecting exception: SQLException");
      } catch(SQLException e) {
        /*
         * No suitable driver found for jdbc:idb=experiments.prp
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          InstanceQuery instanceQuery0 = new InstanceQuery();
          CrossValidationSplitResultProducer crossValidationSplitResultProducer0 = new CrossValidationSplitResultProducer();
          File file0 = crossValidationSplitResultProducer0.getOutputFile();
          instanceQuery0.setCustomPropsFile(file0);
          String[] stringArray0 = instanceQuery0.getOptions();
          assertEquals("SELECT * from ?", instanceQuery0.getQuery());
          assertNotNull(stringArray0);
          assertEquals(false, instanceQuery0.getSparseData());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
      InstanceQuery instanceQuery0 = new InstanceQuery();
      String string0 = instanceQuery0.queryTipText();
      assertEquals("The SQL query to execute against the database.", string0);
      assertEquals("SELECT * from ?", instanceQuery0.getQuery());
      assertEquals(false, instanceQuery0.getSparseData());
  }

  @Test
  public void test4()  throws Throwable  {
      InstanceQuery instanceQuery0 = new InstanceQuery();
      String string0 = instanceQuery0.getRevision();
      assertEquals("SELECT * from ?", instanceQuery0.getQuery());
      assertEquals(false, instanceQuery0.getSparseData());
      assertEquals("9183", string0);
      assertNotNull(string0);
  }

  @Test
  public void test5()  throws Throwable  {
      InstanceQuery instanceQuery0 = new InstanceQuery();
      instanceQuery0.setQuery("\f\"J`");
      assertEquals("\f\"J`", instanceQuery0.getQuery());
  }

  @Test
  public void test6()  throws Throwable  {
      InstanceQuery instanceQuery0 = new InstanceQuery();
      String string0 = instanceQuery0.sparseDataTipText();
      assertEquals("Encode data as sparse instances.", string0);
      assertEquals("SELECT * from ?", instanceQuery0.getQuery());
      assertEquals(false, instanceQuery0.getSparseData());
  }

  @Test
  public void test7()  throws Throwable  {
      InstanceQuery instanceQuery0 = new InstanceQuery();
      instanceQuery0.getCustomPropsFile();
      assertEquals("SELECT * from ?", instanceQuery0.getQuery());
      assertEquals(false, instanceQuery0.getSparseData());
  }

  @Test
  public void test8()  throws Throwable  {
      InstanceQuery instanceQuery0 = new InstanceQuery();
      String[] stringArray0 = instanceQuery0.getOptions();
      assertEquals(false, instanceQuery0.getSparseData());
      assertEquals("SELECT * from ?", instanceQuery0.getQuery());
      assertNotNull(stringArray0);
  }

  @Test
  public void test9()  throws Throwable  {
      InstanceQuery instanceQuery0 = new InstanceQuery();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Dataset";
      stringArray0[1] = "Date_time";
      stringArray0[2] = "Date_time";
      stringArray0[3] = "Date_time";
      instanceQuery0.setOptions(stringArray0);
      assertEquals("SELECT * from ?", instanceQuery0.getQuery());
      assertEquals(false, instanceQuery0.getSparseData());
  }

  @Test
  public void test10()  throws Throwable  {
      InstanceQuery instanceQuery0 = new InstanceQuery();
      Enumeration<Object> enumeration0 = instanceQuery0.listOptions();
      assertEquals(false, instanceQuery0.getSparseData());
      assertEquals("SELECT * from ?", instanceQuery0.getQuery());
      assertNotNull(enumeration0);
  }

  @Test
  public void test11()  throws Throwable  {
      InstanceQuery instanceQuery0 = new InstanceQuery();
      instanceQuery0.setPassword("Dataset");
      String[] stringArray0 = instanceQuery0.getOptions();
      assertEquals("SELECT * from ?", instanceQuery0.getQuery());
      assertNotNull(stringArray0);
      assertEquals(false, instanceQuery0.getSparseData());
  }

  @Test
  public void test12()  throws Throwable  {
      InstanceQuery instanceQuery0 = new InstanceQuery();
      try {
        InstanceQuery.retrieveInstances((InstanceQueryAdapter) instanceQuery0, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
