/*
 * This file was automatically generated by EvoSuite
 */

package weka.experiment;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.ArrayList;
import org.junit.BeforeClass;
import weka.core.Attribute;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.experiment.PairedCorrectedTTester;
import weka.experiment.PairedTTester;
import weka.experiment.ResultMatrix;
import weka.experiment.ResultMatrixCSV;
import weka.experiment.ResultMatrixHTML;
import weka.experiment.ResultMatrixLatex;
import weka.experiment.Tester;

@RunWith(EvoSuiteRunner.class)
public class PairedTTesterEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      PairedTTester pairedTTester0 = new PairedTTester();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 0);
      Attribute attribute0 = new Attribute((String) null, (String) null, 0);
      arrayList0.add(attribute0);
      pairedTTester0.setInstances(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(0);
      instances0.add((Instance) sparseInstance0);
      pairedTTester0.multiResultsetFull(0, 0);
  }

  @Test
  public void test1()  throws Throwable  {
      PairedTTester pairedTTester0 = new PairedTTester();
      double[] doubleArray0 = new double[24];
      SparseInstance sparseInstance0 = new SparseInstance(1732.2531324638392, doubleArray0);
      PairedTTester.Dataset pairedTTester_Dataset0 = pairedTTester0.new Dataset((Instance) sparseInstance0);
      assertNotNull(pairedTTester_Dataset0);
      
      String string0 = pairedTTester_Dataset0.getRevision();
      assertNotNull(string0);
      assertEquals("8034", string0);
      assertEquals(-1, pairedTTester0.getSortColumn());
      assertEquals(-1, pairedTTester0.getFoldColumn());
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01D);
      assertEquals(false, pairedTTester0.getShowStdDevs());
      assertEquals(-1, pairedTTester0.getRunColumn());
  }

  @Test
  public void test2()  throws Throwable  {
      PairedTTester pairedTTester0 = new PairedTTester();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute((String) null, 18);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances((String) null, arrayList0, 0);
      pairedTTester0.setInstances(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(0);
      instances0.add((Instance) sparseInstance0);
      pairedTTester0.multiResultsetFull(0, 0);
      pairedTTester0.resultsetKey();
  }

  @Test
  public void test3()  throws Throwable  {
      PairedTTester pairedTTester0 = new PairedTTester();
      String string0 = pairedTTester0.getRevision();
      assertEquals("8034", string0);
      assertEquals(false, pairedTTester0.getShowStdDevs());
      assertNotNull(string0);
      assertEquals(-1, pairedTTester0.getFoldColumn());
      assertEquals(-1, pairedTTester0.getRunColumn());
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01D);
      assertEquals(-1, pairedTTester0.getSortColumn());
  }

  @Test
  public void test4()  throws Throwable  {
      PairedTTester pairedTTester0 = new PairedTTester();
      pairedTTester0.listOptions();
      assertEquals(false, pairedTTester0.getShowStdDevs());
      assertEquals(-1, pairedTTester0.getRunColumn());
      assertEquals(-1, pairedTTester0.getSortColumn());
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01D);
      assertEquals(-1, pairedTTester0.getFoldColumn());
  }

  @Test
  public void test5()  throws Throwable  {
      PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester();
      assertEquals(false, pairedCorrectedTTester0.getShowStdDevs());
      
      pairedCorrectedTTester0.setShowStdDevs(true);
      pairedCorrectedTTester0.getOptions();
      assertEquals(true, pairedCorrectedTTester0.getShowStdDevs());
      assertEquals(-1, pairedCorrectedTTester0.getRunColumn());
  }

  @Test
  public void test6()  throws Throwable  {
      PairedTTester pairedTTester0 = new PairedTTester();
      String string0 = pairedTTester0.getToolTipText();
      assertEquals(false, pairedTTester0.getShowStdDevs());
      assertEquals(-1, pairedTTester0.getFoldColumn());
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01D);
      assertEquals(-1, pairedTTester0.getRunColumn());
      assertEquals(-1, pairedTTester0.getSortColumn());
      assertEquals("Performs test using t-test statistic", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      PairedTTester pairedTTester0 = new PairedTTester();
      pairedTTester0.assign((Tester) pairedTTester0);
      assertEquals(-1, pairedTTester0.getRunColumn());
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01D);
      assertEquals(-1, pairedTTester0.getFoldColumn());
      assertEquals(false, pairedTTester0.getShowStdDevs());
      assertEquals(-1, pairedTTester0.getSortColumn());
      assertEquals("No instances have been set", pairedTTester0.resultsetKey());
  }

  @Test
  public void test8()  throws Throwable  {
      PairedTTester pairedTTester0 = new PairedTTester();
      String string0 = pairedTTester0.getDisplayName();
      assertEquals(false, pairedTTester0.getShowStdDevs());
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01D);
      assertEquals(-1, pairedTTester0.getFoldColumn());
      assertEquals("Paired T-Tester", string0);
      assertEquals(-1, pairedTTester0.getSortColumn());
      assertEquals(-1, pairedTTester0.getRunColumn());
  }

  @Test
  public void test9()  throws Throwable  {
      PairedTTester pairedTTester0 = new PairedTTester();
      try {
        pairedTTester0.multiResultsetSummary((-145));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 0
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      PairedTTester pairedTTester0 = new PairedTTester();
      SparseInstance sparseInstance0 = new SparseInstance(17);
      PairedTTester.Resultset pairedTTester_Resultset0 = pairedTTester0.new Resultset((Instance) sparseInstance0);
      assertNotNull(pairedTTester_Resultset0);
      
      String string0 = pairedTTester_Resultset0.getRevision();
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01D);
      assertEquals(-1, pairedTTester0.getSortColumn());
      assertEquals(-1, pairedTTester0.getRunColumn());
      assertNotNull(string0);
      assertEquals("8034", string0);
      assertEquals(false, pairedTTester0.getShowStdDevs());
      assertEquals(-1, pairedTTester0.getFoldColumn());
  }

  @Test
  public void test11()  throws Throwable  {
      PairedTTester pairedTTester0 = new PairedTTester();
      PairedTTester.DatasetSpecifiers pairedTTester_DatasetSpecifiers0 = pairedTTester0.new DatasetSpecifiers();
      String string0 = pairedTTester_DatasetSpecifiers0.getRevision();
      assertNotNull(string0);
      assertEquals("8034", string0);
      assertEquals(-1, pairedTTester0.getSortColumn());
      assertEquals(-1, pairedTTester0.getFoldColumn());
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01D);
      assertEquals(-1, pairedTTester0.getRunColumn());
      assertEquals(false, pairedTTester0.getShowStdDevs());
  }

  @Test
  public void test12()  throws Throwable  {
      PairedTTester pairedTTester0 = new PairedTTester();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute((String) null);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances((String) null, arrayList0, 0);
      pairedTTester0.setInstances(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(0);
      instances0.add((Instance) sparseInstance0);
      instances0.add((Instance) sparseInstance0);
      try {
        pairedTTester0.multiResultsetFull(1593, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 1
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      PairedTTester pairedTTester0 = new PairedTTester();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 0);
      Attribute attribute0 = new Attribute((String) null, (String) null, 0);
      arrayList0.add(attribute0);
      pairedTTester0.setInstances(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(125);
      instances0.add((Instance) sparseInstance0);
      pairedTTester0.header(17);
  }

  @Test
  public void test14()  throws Throwable  {
      PairedTTester pairedTTester0 = new PairedTTester();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 0);
      Attribute attribute0 = new Attribute((String) null, (String) null, 0);
      arrayList0.add(attribute0);
      pairedTTester0.setInstances(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(125);
      instances0.add((Instance) sparseInstance0);
      pairedTTester0.setFoldColumn(1956);
      pairedTTester0.setRunColumn(1635);
      String string0 = pairedTTester0.resultsetKey();
      assertEquals(1956, pairedTTester0.getFoldColumn());
      assertEquals("(1) \n\n", string0);
  }

  @Test
  public void test15()  throws Throwable  {
      PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester();
      pairedCorrectedTTester0.getResultsetName(1529);
      assertEquals(-1, pairedCorrectedTTester0.getRunColumn());
      assertEquals(false, pairedCorrectedTTester0.getShowStdDevs());
      assertEquals(-1, pairedCorrectedTTester0.getFoldColumn());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01D);
      assertEquals("No instances have been set", pairedCorrectedTTester0.resultsetKey());
      assertEquals(-1, pairedCorrectedTTester0.getSortColumn());
  }

  @Test
  public void test16()  throws Throwable  {
      PairedTTester pairedTTester0 = new PairedTTester();
      int[] intArray0 = new int[1];
      pairedTTester0.setDisplayedResultsets(intArray0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute((String) null, 18);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances((String) null, arrayList0, 0);
      pairedTTester0.setInstances(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(0);
      instances0.add((Instance) sparseInstance0);
      pairedTTester0.multiResultsetFull(0, 0);
  }

  @Test
  public void test17()  throws Throwable  {
      PairedTTester pairedTTester0 = new PairedTTester();
      int[] intArray0 = new int[1];
      intArray0[0] = 715;
      pairedTTester0.setDisplayedResultsets(intArray0);
      boolean boolean0 = pairedTTester0.displayResultset(0);
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01D);
      assertEquals(-1, pairedTTester0.getRunColumn());
      assertEquals(false, pairedTTester0.getShowStdDevs());
      assertEquals(false, boolean0);
      assertEquals(-1, pairedTTester0.getSortColumn());
      assertEquals(-1, pairedTTester0.getFoldColumn());
  }

  @Test
  public void test18()  throws Throwable  {
      PairedTTester pairedTTester0 = new PairedTTester();
      assertEquals("No instances have been set", pairedTTester0.resultsetKey());
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 0);
      Attribute attribute0 = new Attribute((String) null, (String) null, 0);
      arrayList0.add(attribute0);
      pairedTTester0.setInstances(instances0);
      pairedTTester0.resultsetKey();
      // Undeclared exception!
      try {
        pairedTTester0.header(1635);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 1635, Size: 1
         */
      }
  }

  @Test
  public void test19()  throws Throwable  {
      PairedTTester pairedTTester0 = new PairedTTester();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 0);
      Attribute attribute0 = new Attribute((String) null, (String) null, 0);
      arrayList0.add(attribute0);
      pairedTTester0.setInstances(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(125);
      instances0.add((Instance) sparseInstance0);
      pairedTTester0.setRunColumn(1635);
      String string0 = pairedTTester0.multiResultsetRanking((-1));
      assertEquals(1, pairedTTester0.getNumResultsets());
      assertEquals(">-<   >   < Resultset\n  0   0   0 \n", string0);
  }

  @Test
  public void test20()  throws Throwable  {
      PairedTTester pairedTTester0 = new PairedTTester();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      pairedTTester0.setResultMatrix((ResultMatrix) resultMatrixLatex0);
      String[] stringArray0 = pairedTTester0.getOptions();
      assertNotNull(stringArray0);
      
      pairedTTester0.setOptions(stringArray0);
      assertEquals(-1, pairedTTester0.getSortColumn());
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01D);
      assertEquals("No instances have been set", pairedTTester0.resultsetKey());
      assertEquals(false, pairedTTester0.getShowStdDevs());
      assertEquals(-1, pairedTTester0.getFoldColumn());
      assertEquals(-1, pairedTTester0.getRunColumn());
  }

  @Test
  public void test21()  throws Throwable  {
      PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      pairedCorrectedTTester0.setResultMatrix((ResultMatrix) resultMatrixCSV0);
      String[] stringArray0 = pairedCorrectedTTester0.getOptions();
      assertNotNull(stringArray0);
      
      pairedCorrectedTTester0.setOptions(stringArray0);
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01D);
      assertEquals("No instances have been set", pairedCorrectedTTester0.resultsetKey());
      assertEquals(-1, pairedCorrectedTTester0.getSortColumn());
      assertEquals(false, pairedCorrectedTTester0.getShowStdDevs());
      assertEquals(-1, pairedCorrectedTTester0.getFoldColumn());
      assertEquals(-1, pairedCorrectedTTester0.getRunColumn());
  }

  @Test
  public void test22()  throws Throwable  {
      PairedTTester pairedTTester0 = new PairedTTester();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML((ResultMatrix) resultMatrixCSV0);
      pairedTTester0.setResultMatrix((ResultMatrix) resultMatrixHTML0);
      String[] stringArray0 = pairedTTester0.getOptions();
      assertNotNull(stringArray0);
      
      pairedTTester0.setOptions(stringArray0);
      assertEquals(-1, pairedTTester0.getSortColumn());
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01D);
      assertEquals(-1, pairedTTester0.getFoldColumn());
      assertEquals(false, pairedTTester0.getShowStdDevs());
      assertEquals(-1, pairedTTester0.getRunColumn());
  }

  @Test
  public void test23()  throws Throwable  {
      PairedTTester pairedTTester0 = new PairedTTester();
      Range range0 = new Range("$\bullet$");
      pairedTTester0.setDatasetKeyColumns(range0);
      String[] stringArray0 = pairedTTester0.getOptions();
      assertEquals("No instances have been set", pairedTTester0.resultsetKey());
      assertNotNull(stringArray0);
      
      pairedTTester0.setOptions(stringArray0);
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01D);
      assertEquals(-1, pairedTTester0.getRunColumn());
      assertEquals(-1, pairedTTester0.getFoldColumn());
      assertEquals(-1, pairedTTester0.getSortColumn());
      assertEquals(false, pairedTTester0.getShowStdDevs());
  }

  @Test
  public void test24()  throws Throwable  {
      PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "8034";
      stringArray0[1] = "8034";
      pairedCorrectedTTester0.setOptions(stringArray0);
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01D);
      assertEquals("No instances have been set", pairedCorrectedTTester0.resultsetKey());
      assertEquals(false, pairedCorrectedTTester0.getShowStdDevs());
      assertEquals(-1, pairedCorrectedTTester0.getSortColumn());
      assertEquals(-1, pairedCorrectedTTester0.getRunColumn());
      assertEquals(-1, pairedCorrectedTTester0.getFoldColumn());
  }

  @Test
  public void test25()  throws Throwable  {
      PairedTTester pairedTTester0 = new PairedTTester();
      Range range0 = new Range("$\bullet$");
      pairedTTester0.setResultsetKeyColumns(range0);
      String[] stringArray0 = pairedTTester0.getOptions();
      assertNotNull(stringArray0);
      
      pairedTTester0.setOptions(stringArray0);
      assertEquals(-1, pairedTTester0.getSortColumn());
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01D);
      assertEquals("No instances have been set", pairedTTester0.resultsetKey());
      assertEquals(-1, pairedTTester0.getRunColumn());
      assertEquals(false, pairedTTester0.getShowStdDevs());
      assertEquals(-1, pairedTTester0.getFoldColumn());
  }

  @Test
  public void test26()  throws Throwable  {
      PairedTTester pairedTTester0 = new PairedTTester();
      assertEquals(-1, pairedTTester0.getSortColumn());
      
      pairedTTester0.setSortColumn(0);
      // Undeclared exception!
      try {
        pairedTTester0.getSortColumnName();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test27()  throws Throwable  {
      PairedTTester pairedTTester0 = new PairedTTester();
      String string0 = pairedTTester0.getSortColumnName();
      assertEquals(false, pairedTTester0.getShowStdDevs());
      assertEquals(-1, pairedTTester0.getRunColumn());
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01D);
      assertEquals("-", string0);
      assertNotNull(string0);
      assertEquals(-1, pairedTTester0.getFoldColumn());
  }

  @Test
  public void test28()  throws Throwable  {
      PairedTTester pairedTTester0 = new PairedTTester();
      pairedTTester0.setSortColumn((-1132));
      assertEquals(false, pairedTTester0.getShowStdDevs());
      assertEquals(-1, pairedTTester0.getFoldColumn());
      assertEquals(-1, pairedTTester0.getSortColumn());
      assertEquals(-1, pairedTTester0.getRunColumn());
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01D);
  }
}
