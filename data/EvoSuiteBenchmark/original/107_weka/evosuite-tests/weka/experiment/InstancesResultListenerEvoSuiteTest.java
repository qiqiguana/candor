/*
 * This file was automatically generated by EvoSuite
 */

package weka.experiment;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.File;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import weka.experiment.CrossValidationSplitResultProducer;
import weka.experiment.DatabaseResultProducer;
import weka.experiment.ExplicitTestsetResultProducer;
import weka.experiment.InstancesResultListener;
import weka.experiment.LearningRateResultProducer;
import weka.experiment.ResultProducer;

@RunWith(EvoSuiteRunner.class)
public class InstancesResultListenerEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          InstancesResultListener instancesResultListener0 = new InstancesResultListener();
          assertNotNull(instancesResultListener0);
          
          String string0 = instancesResultListener0.getRevision();
          assertEquals("8034", string0);
          assertNotNull(string0);
          assertEquals("", instancesResultListener0.outputFileName());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          InstancesResultListener instancesResultListener0 = new InstancesResultListener();
          assertNotNull(instancesResultListener0);
          
          String string0 = instancesResultListener0.globalInfo();
          assertEquals("", instancesResultListener0.outputFileName());
          assertEquals("Outputs the received results in arff format to a Writer. All results must be received before the instances can be written out.", string0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          DatabaseResultProducer databaseResultProducer0 = new DatabaseResultProducer();
          InstancesResultListener instancesResultListener0 = new InstancesResultListener();
          assertNotNull(instancesResultListener0);
          
          instancesResultListener0.preProcess((ResultProducer) databaseResultProducer0);
          Object[] objectArray0 = new Object[61];
          instancesResultListener0.acceptResult((ResultProducer) databaseResultProducer0, objectArray0, objectArray0);
          assertEquals("", instancesResultListener0.outputFileName());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          InstancesResultListener instancesResultListener0 = new InstancesResultListener();
          File file0 = new File("File to save to. Use '-' to write to standard out.");
          instancesResultListener0.setOutputFile(file0);
          DatabaseResultProducer databaseResultProducer0 = new DatabaseResultProducer();
          try {
            instancesResultListener0.preProcess((ResultProducer) databaseResultProducer0);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission File to save to. Use '-' to write to standard out. write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:183)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:145)
             * weka.experiment.InstancesResultListener.preProcess(InstancesResultListener.java:116)
             * sun.reflect.GeneratedMethodAccessor64.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          InstancesResultListener instancesResultListener0 = new InstancesResultListener();
          assertNotNull(instancesResultListener0);
          
          CrossValidationSplitResultProducer crossValidationSplitResultProducer0 = new CrossValidationSplitResultProducer();
          instancesResultListener0.preProcess((ResultProducer) crossValidationSplitResultProducer0);
          instancesResultListener0.postProcess((ResultProducer) crossValidationSplitResultProducer0);
          assertEquals("", instancesResultListener0.outputFileName());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          InstancesResultListener instancesResultListener0 = new InstancesResultListener();
          assertNotNull(instancesResultListener0);
          
          ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer();
          // Undeclared exception!
          try {
            instancesResultListener0.postProcess((ResultProducer) explicitTestsetResultProducer0);
            fail("Expecting exception: Error");
          } catch(Error e) {
            /*
             * Unrecognized ResultProducer sending results!!
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer();
          Object[] objectArray0 = new Object[4];
          InstancesResultListener instancesResultListener0 = new InstancesResultListener();
          assertNotNull(instancesResultListener0);
          
          // Undeclared exception!
          try {
            instancesResultListener0.acceptResult((ResultProducer) learningRateResultProducer0, objectArray0, objectArray0);
            fail("Expecting exception: Error");
          } catch(Error e) {
            /*
             * Unrecognized ResultProducer sending results!!
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          DatabaseResultProducer databaseResultProducer0 = new DatabaseResultProducer();
          InstancesResultListener instancesResultListener0 = new InstancesResultListener();
          assertNotNull(instancesResultListener0);
          
          instancesResultListener0.preProcess((ResultProducer) databaseResultProducer0);
          Object[] objectArray0 = new Object[61];
          objectArray0[0] = (Object) "File to save to. Use '-' to write to standard out.";
          try {
            instancesResultListener0.acceptResult((ResultProducer) databaseResultProducer0, objectArray0, objectArray0);
            fail("Expecting exception: ClassCastException");
          } catch(ClassCastException e) {
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
