/*
 * This file was automatically generated by EvoSuite
 */

package weka.experiment;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import weka.experiment.Experiment;
import weka.experiment.RemoteExperimentSubTask;
import weka.experiment.TaskStatusInfo;

@RunWith(EvoSuiteRunner.class)
public class RemoteExperimentSubTaskEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      RemoteExperimentSubTask remoteExperimentSubTask0 = new RemoteExperimentSubTask();
      assertNotNull(remoteExperimentSubTask0);
      
      TaskStatusInfo taskStatusInfo0 = remoteExperimentSubTask0.getTaskStatus();
      assertNotNull(taskStatusInfo0);
      assertEquals(0, taskStatusInfo0.getExecutionStatus());
      assertEquals("Not running.", taskStatusInfo0.getStatusMessage());
  }

  @Test
  public void test1()  throws Throwable  {
      RemoteExperimentSubTask remoteExperimentSubTask0 = new RemoteExperimentSubTask();
      assertNotNull(remoteExperimentSubTask0);
      
      String string0 = remoteExperimentSubTask0.getRevision();
      assertNotNull(string0);
      assertEquals("8034", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      RemoteExperimentSubTask remoteExperimentSubTask0 = new RemoteExperimentSubTask();
      Experiment experiment0 = remoteExperimentSubTask0.getExperiment();
      assertNull(experiment0);
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          RemoteExperimentSubTask remoteExperimentSubTask0 = new RemoteExperimentSubTask();
          Experiment experiment0 = new Experiment();
          experiment0.setRunUpper(1);
          remoteExperimentSubTask0.setExperiment(experiment0);
          remoteExperimentSubTask0.execute();
          assertEquals("8034", remoteExperimentSubTask0.getRevision());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          RemoteExperimentSubTask remoteExperimentSubTask0 = new RemoteExperimentSubTask();
          Experiment experiment0 = new Experiment();
          remoteExperimentSubTask0.setExperiment(experiment0);
          // Undeclared exception!
          try {
            remoteExperimentSubTask0.execute();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
          } catch(ArrayIndexOutOfBoundsException e) {
            /*
             * 0 >= 0
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
