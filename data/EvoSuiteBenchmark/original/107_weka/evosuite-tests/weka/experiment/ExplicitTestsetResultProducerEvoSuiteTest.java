/*
 * This file was automatically generated by EvoSuite
 */

package weka.experiment;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.regex.PatternSyntaxException;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import weka.classifiers.rules.PART;
import weka.core.Capabilities;
import weka.core.Instances;
import weka.core.TestInstances;
import weka.core.WekaException;
import weka.experiment.ExplicitTestsetResultProducer;
import weka.experiment.LearningRateResultProducer;
import weka.experiment.ResultListener;

@RunWith(EvoSuiteRunner.class)
public class ExplicitTestsetResultProducerEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer();
          assertNotNull(explicitTestsetResultProducer0);
          
          String string0 = explicitTestsetResultProducer0.testsetSuffixTipText();
          assertEquals(false, explicitTestsetResultProducer0.getRawOutput());
          assertEquals("The suffix to use for the filename of the test sets - must contain the file extension.", string0);
          assertEquals("ExplicitTestsetResultProducer:  -dir /mnt/fastdata/ac1gf/SF110/dist/107_weka -suffix _test.arff -W weka.experiment.ClassifierSplitEvaluator --: <null Instances>", explicitTestsetResultProducer0.toString());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer();
          assertNotNull(explicitTestsetResultProducer0);
          
          LearningRateResultProducer learningRateResultProducer0 = new LearningRateResultProducer();
          explicitTestsetResultProducer0.setResultListener((ResultListener) learningRateResultProducer0);
          assertEquals(" -dir /mnt/fastdata/ac1gf/SF110/dist/107_weka -suffix _test.arff -W weka.experiment.ClassifierSplitEvaluator --", explicitTestsetResultProducer0.getCompatibilityState());
          assertEquals(false, explicitTestsetResultProducer0.getRawOutput());
          assertEquals(false, explicitTestsetResultProducer0.getRandomizeData());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer();
          assertNotNull(explicitTestsetResultProducer0);
          
          String string0 = explicitTestsetResultProducer0.rawOutputTipText();
          assertEquals("Save raw output (useful for debugging). If set, then output is sent to the destination specified by outputFile", string0);
          assertEquals(false, explicitTestsetResultProducer0.getRawOutput());
          assertEquals(" -dir /mnt/fastdata/ac1gf/SF110/dist/107_weka -suffix _test.arff -W weka.experiment.ClassifierSplitEvaluator --", explicitTestsetResultProducer0.getCompatibilityState());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer();
          assertNotNull(explicitTestsetResultProducer0);
          
          String string0 = explicitTestsetResultProducer0.relationFindTipText();
          assertEquals("The regular expression to use for removing parts of the relation name, ignored if empty.", string0);
          assertEquals(false, explicitTestsetResultProducer0.getRawOutput());
          assertEquals(" -dir /mnt/fastdata/ac1gf/SF110/dist/107_weka -suffix _test.arff -W weka.experiment.ClassifierSplitEvaluator --", explicitTestsetResultProducer0.getCompatibilityState());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer();
          assertNotNull(explicitTestsetResultProducer0);
          
          explicitTestsetResultProducer0.setRelationFind("%z0A~}(*");
          String string0 = explicitTestsetResultProducer0.toString();
          assertNotNull(string0);
          assertEquals("%z0A~}(*", explicitTestsetResultProducer0.getRelationFind());
          assertEquals("ExplicitTestsetResultProducer:  -dir /mnt/fastdata/ac1gf/SF110/dist/107_weka -suffix _test.arff -find %z0A~}(* -W weka.experiment.ClassifierSplitEvaluator --: <null Instances>", string0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer();
          assertNotNull(explicitTestsetResultProducer0);
          
          Object[] objectArray0 = explicitTestsetResultProducer0.getKeyTypes();
          assertEquals(false, explicitTestsetResultProducer0.getRawOutput());
          assertEquals(" -dir /mnt/fastdata/ac1gf/SF110/dist/107_weka -suffix _test.arff -W weka.experiment.ClassifierSplitEvaluator --", explicitTestsetResultProducer0.getCompatibilityState());
          assertNotNull(objectArray0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer();
          assertNotNull(explicitTestsetResultProducer0);
          
          String string0 = explicitTestsetResultProducer0.outputFileTipText();
          assertEquals(false, explicitTestsetResultProducer0.getRawOutput());
          assertEquals("Set the destination for saving raw output. If the rawOutput option is selected, then output from the splitEvaluator for individual train-test splits is saved. If the destination is a directory, then each output is saved to an individual gzip file; if the destination is a file, then each output is saved as an entry in a zip file.", string0);
          assertEquals("ExplicitTestsetResultProducer:  -dir /mnt/fastdata/ac1gf/SF110/dist/107_weka -suffix _test.arff -W weka.experiment.ClassifierSplitEvaluator --: <null Instances>", explicitTestsetResultProducer0.toString());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer();
          assertNotNull(explicitTestsetResultProducer0);
          
          String string0 = explicitTestsetResultProducer0.splitEvaluatorTipText();
          assertEquals("The evaluator to apply to the test data. This may be a classifier, regression scheme etc.", string0);
          assertEquals(" -dir /mnt/fastdata/ac1gf/SF110/dist/107_weka -suffix _test.arff -W weka.experiment.ClassifierSplitEvaluator --", explicitTestsetResultProducer0.getCompatibilityState());
          assertEquals(false, explicitTestsetResultProducer0.getRawOutput());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test8()  throws Throwable  {
      Double double0 = ExplicitTestsetResultProducer.getTimestamp();
      assertEquals(2.01307020236E7, (double)double0, 0.01D);
  }

  @Test
  public void test9()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer();
          assertNotNull(explicitTestsetResultProducer0);
          
          String string0 = explicitTestsetResultProducer0.randomizeDataTipText();
          assertEquals("Do not randomize dataset and do not perform probabilistic rounding if true", string0);
          assertEquals(false, explicitTestsetResultProducer0.getRawOutput());
          assertEquals(" -dir /mnt/fastdata/ac1gf/SF110/dist/107_weka -suffix _test.arff -W weka.experiment.ClassifierSplitEvaluator --", explicitTestsetResultProducer0.getCompatibilityState());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer();
          assertNotNull(explicitTestsetResultProducer0);
          
          String string0 = explicitTestsetResultProducer0.getRevision();
          assertNotNull(string0);
          assertEquals("8034", string0);
          assertEquals(" -dir /mnt/fastdata/ac1gf/SF110/dist/107_weka -suffix _test.arff -W weka.experiment.ClassifierSplitEvaluator --", explicitTestsetResultProducer0.getCompatibilityState());
          assertEquals(false, explicitTestsetResultProducer0.getRawOutput());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer();
          assertNotNull(explicitTestsetResultProducer0);
          
          String string0 = explicitTestsetResultProducer0.relationReplaceTipText();
          assertEquals("The string to replace all matches of the regular expression with.", string0);
          assertEquals(false, explicitTestsetResultProducer0.getRawOutput());
          assertEquals("ExplicitTestsetResultProducer:  -dir /mnt/fastdata/ac1gf/SF110/dist/107_weka -suffix _test.arff -W weka.experiment.ClassifierSplitEvaluator --: <null Instances>", explicitTestsetResultProducer0.toString());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer();
          assertNotNull(explicitTestsetResultProducer0);
          
          explicitTestsetResultProducer0.preProcess();
          assertEquals(false, explicitTestsetResultProducer0.getRawOutput());
          assertEquals(" -dir /mnt/fastdata/ac1gf/SF110/dist/107_weka -suffix _test.arff -W weka.experiment.ClassifierSplitEvaluator --", explicitTestsetResultProducer0.getCompatibilityState());
          assertEquals(false, explicitTestsetResultProducer0.getRandomizeData());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer();
          assertNotNull(explicitTestsetResultProducer0);
          
          String string0 = explicitTestsetResultProducer0.globalInfo();
          assertEquals("Loads the external test set and calls the appropriate SplitEvaluator to generate some results.\nThe filename of the test set is constructed as follows:\n   <dir> + / + <prefix> + <relation-name> + <suffix>\nThe relation-name can be modified by using the regular expression to replace the matching sub-string with a specified replacement string. In order to get rid of the string that the Weka filters add to the end of the relation name, just use '.*-weka' as the regular expression to find.\nThe suffix determines the type of file to load, i.e., one is not restricted to ARFF files. As long as Weka recognizes the extension specified in the suffix, the data will be loaded with one of Weka's converters.", string0);
          assertEquals(" -dir /mnt/fastdata/ac1gf/SF110/dist/107_weka -suffix _test.arff -W weka.experiment.ClassifierSplitEvaluator --", explicitTestsetResultProducer0.getCompatibilityState());
          assertEquals(false, explicitTestsetResultProducer0.getRawOutput());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test14()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer();
          assertNotNull(explicitTestsetResultProducer0);
          
          String string0 = explicitTestsetResultProducer0.testsetDirTipText();
          assertEquals("ExplicitTestsetResultProducer:  -dir /mnt/fastdata/ac1gf/SF110/dist/107_weka -suffix _test.arff -W weka.experiment.ClassifierSplitEvaluator --: <null Instances>", explicitTestsetResultProducer0.toString());
          assertEquals(false, explicitTestsetResultProducer0.getRawOutput());
          assertEquals("The directory containing the test sets.", string0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test15()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer();
          assertNotNull(explicitTestsetResultProducer0);
          
          Object[] objectArray0 = explicitTestsetResultProducer0.getResultTypes();
          assertEquals(" -dir /mnt/fastdata/ac1gf/SF110/dist/107_weka -suffix _test.arff -W weka.experiment.ClassifierSplitEvaluator --", explicitTestsetResultProducer0.getCompatibilityState());
          assertEquals(false, explicitTestsetResultProducer0.getRawOutput());
          assertNotNull(objectArray0);
          assertEquals("ExplicitTestsetResultProducer:  -dir /mnt/fastdata/ac1gf/SF110/dist/107_weka -suffix _test.arff -W weka.experiment.ClassifierSplitEvaluator --: <null Instances>", explicitTestsetResultProducer0.toString());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test16()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer();
          assertNotNull(explicitTestsetResultProducer0);
          
          String string0 = explicitTestsetResultProducer0.testsetPrefixTipText();
          assertEquals(false, explicitTestsetResultProducer0.getRawOutput());
          assertEquals("The prefix to use for the filename of the test sets.", string0);
          assertEquals("ExplicitTestsetResultProducer:  -dir /mnt/fastdata/ac1gf/SF110/dist/107_weka -suffix _test.arff -W weka.experiment.ClassifierSplitEvaluator --: <null Instances>", explicitTestsetResultProducer0.toString());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test17()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer();
          assertNotNull(explicitTestsetResultProducer0);
          
          explicitTestsetResultProducer0.listOptions();
          assertEquals(false, explicitTestsetResultProducer0.getRawOutput());
          assertEquals(" -dir /mnt/fastdata/ac1gf/SF110/dist/107_weka -suffix _test.arff -W weka.experiment.ClassifierSplitEvaluator --", explicitTestsetResultProducer0.getCompatibilityState());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test18()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer();
          assertNotNull(explicitTestsetResultProducer0);
          
          explicitTestsetResultProducer0.setRandomizeData(true);
          String[] stringArray0 = explicitTestsetResultProducer0.getOptions();
          explicitTestsetResultProducer0.setOptions(stringArray0);
          assertEquals(true, explicitTestsetResultProducer0.getRandomizeData());
          assertEquals("ExplicitTestsetResultProducer:  -R -dir /mnt/fastdata/ac1gf/SF110/dist/107_weka -suffix _test.arff -W weka.experiment.ClassifierSplitEvaluator --: <null Instances>", explicitTestsetResultProducer0.toString());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test19()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer();
          assertNotNull(explicitTestsetResultProducer0);
          assertEquals("ExplicitTestsetResultProducer:  -dir /mnt/fastdata/ac1gf/SF110/dist/107_weka -suffix _test.arff -W weka.experiment.ClassifierSplitEvaluator --: <null Instances>", explicitTestsetResultProducer0.toString());
          
          String[] stringArray0 = new String[6];
          stringArray0[0] = "The directory containing the test sets.";
          stringArray0[1] = "The directory containing the test sets.";
          stringArray0[3] = "The directory containing the test sets.";
          stringArray0[5] = "The directory containing the test sets.";
          stringArray0[2] = "The directory containing the test sets.";
          stringArray0[4] = "The directory containing the test sets.";
          try {
            explicitTestsetResultProducer0.setOptions(stringArray0);
            fail("Expecting exception: Exception");
          } catch(Exception e) {
            /*
             * A SplitEvaluator must be specified with the -W option.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test20()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer();
          assertNotNull(explicitTestsetResultProducer0);
          
          explicitTestsetResultProducer0.setTestsetPrefix("%z0A~}(*");
          String[] stringArray0 = explicitTestsetResultProducer0.getOptions();
          assertNotNull(stringArray0);
          
          explicitTestsetResultProducer0.setOptions(stringArray0);
          assertEquals("%z0A~}(*", explicitTestsetResultProducer0.getTestsetPrefix());
          assertEquals(" -dir /mnt/fastdata/ac1gf/SF110/dist/107_weka -prefix %z0A~}(* -suffix _test.arff -W weka.experiment.ClassifierSplitEvaluator --", explicitTestsetResultProducer0.getCompatibilityState());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test21()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer();
          assertNotNull(explicitTestsetResultProducer0);
          
          explicitTestsetResultProducer0.setRelationFind("The directory containing the test sets.");
          String[] stringArray0 = explicitTestsetResultProducer0.getOptions();
          assertNotNull(stringArray0);
          
          explicitTestsetResultProducer0.setOptions(stringArray0);
          assertEquals("The directory containing the test sets.", explicitTestsetResultProducer0.getRelationFind());
          assertEquals("ExplicitTestsetResultProducer:  -dir /mnt/fastdata/ac1gf/SF110/dist/107_weka -suffix _test.arff -find The directory containing the test sets. -W weka.experiment.ClassifierSplitEvaluator --: <null Instances>", explicitTestsetResultProducer0.toString());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test22()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer();
          assertNotNull(explicitTestsetResultProducer0);
          
          explicitTestsetResultProducer0.setRelationReplace("The directory containing the test sets.");
          explicitTestsetResultProducer0.setRelationFind("The directory containing the test sets.");
          String[] stringArray0 = explicitTestsetResultProducer0.getOptions();
          explicitTestsetResultProducer0.setOptions(stringArray0);
          assertEquals("The directory containing the test sets.", explicitTestsetResultProducer0.getRelationReplace());
          assertEquals(" -dir /mnt/fastdata/ac1gf/SF110/dist/107_weka -suffix _test.arff -find The directory containing the test sets. -replace The directory containing the test sets. -W weka.experiment.ClassifierSplitEvaluator --", explicitTestsetResultProducer0.getCompatibilityState());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test23()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer();
          assertNotNull(explicitTestsetResultProducer0);
          assertEquals(false, explicitTestsetResultProducer0.getRawOutput());
          
          explicitTestsetResultProducer0.setRawOutput(true);
          explicitTestsetResultProducer0.getOptions();
          assertEquals(true, explicitTestsetResultProducer0.getRawOutput());
          assertEquals(" -dir /mnt/fastdata/ac1gf/SF110/dist/107_weka -suffix _test.arff -W weka.experiment.ClassifierSplitEvaluator --", explicitTestsetResultProducer0.getCompatibilityState());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test24()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer();
          assertNotNull(explicitTestsetResultProducer0);
          
          String[] stringArray0 = new String[8];
          explicitTestsetResultProducer0.setAdditionalMeasures(stringArray0);
          assertEquals(" -dir /mnt/fastdata/ac1gf/SF110/dist/107_weka -suffix _test.arff -W weka.experiment.ClassifierSplitEvaluator --", explicitTestsetResultProducer0.getCompatibilityState());
          assertEquals(false, explicitTestsetResultProducer0.getRawOutput());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test25()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer();
          assertNotNull(explicitTestsetResultProducer0);
          
          Enumeration<Object> enumeration0 = explicitTestsetResultProducer0.enumerateMeasures();
          assertEquals(false, explicitTestsetResultProducer0.getRawOutput());
          assertNotNull(enumeration0);
          assertEquals(" -dir /mnt/fastdata/ac1gf/SF110/dist/107_weka -suffix _test.arff -W weka.experiment.ClassifierSplitEvaluator --", explicitTestsetResultProducer0.getCompatibilityState());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test26()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer();
          assertNotNull(explicitTestsetResultProducer0);
          
          // Undeclared exception!
          try {
            explicitTestsetResultProducer0.getMeasure("The directory containing the test sets.");
            fail("Expecting exception: IllegalArgumentException");
          } catch(IllegalArgumentException e) {
            /*
             * ClassifierSplitEvaluator: Can't return value for : The directory containing the test sets.. weka.classifiers.rules.ZeroR is not an AdditionalMeasureProducer
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test27()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer();
          assertNotNull(explicitTestsetResultProducer0);
          
          explicitTestsetResultProducer0.postProcess();
          assertEquals(false, explicitTestsetResultProducer0.getRawOutput());
          assertEquals(" -dir /mnt/fastdata/ac1gf/SF110/dist/107_weka -suffix _test.arff -W weka.experiment.ClassifierSplitEvaluator --", explicitTestsetResultProducer0.getCompatibilityState());
          assertEquals("ExplicitTestsetResultProducer:  -dir /mnt/fastdata/ac1gf/SF110/dist/107_weka -suffix _test.arff -W weka.experiment.ClassifierSplitEvaluator --: <null Instances>", explicitTestsetResultProducer0.toString());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test28()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer();
          assertEquals(false, explicitTestsetResultProducer0.getRawOutput());
          assertNotNull(explicitTestsetResultProducer0);
          
          explicitTestsetResultProducer0.setRawOutput(true);
          explicitTestsetResultProducer0.postProcess();
          assertEquals(true, explicitTestsetResultProducer0.getRawOutput());
          assertEquals("ExplicitTestsetResultProducer:  -dir /mnt/fastdata/ac1gf/SF110/dist/107_weka -suffix _test.arff -W weka.experiment.ClassifierSplitEvaluator --: <null Instances>", explicitTestsetResultProducer0.toString());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test29()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer();
          assertNotNull(explicitTestsetResultProducer0);
          
          try {
            explicitTestsetResultProducer0.doRunKeys((-2));
            fail("Expecting exception: Exception");
          } catch(Exception e) {
            /*
             * No Instances set
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test30()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer();
          assertNotNull(explicitTestsetResultProducer0);
          
          PART pART0 = new PART();
          Capabilities capabilities0 = pART0.getCapabilities();
          explicitTestsetResultProducer0.setRelationFind("%z0A~}(*");
          TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
          Instances instances0 = testInstances0.generate();
          explicitTestsetResultProducer0.setInstances(instances0);
          try {
            explicitTestsetResultProducer0.doRun(15);
            fail("Expecting exception: PatternSyntaxException");
          } catch(PatternSyntaxException e) {
            /*
             * Dangling meta character '*' near index 7
             * %z0A~}(*
             *        ^
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test31()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer();
          assertEquals(false, explicitTestsetResultProducer0.getRawOutput());
          assertNotNull(explicitTestsetResultProducer0);
          
          explicitTestsetResultProducer0.setRawOutput(true);
          try {
            explicitTestsetResultProducer0.doRun((-6));
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission /mnt/fastdata/ac1gf/SF110/dist/107_weka/splitEvalutorOut.zip write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:183)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:145)
             * weka.experiment.OutputZipper.<init>(OutputZipper.java:66)
             * weka.experiment.ExplicitTestsetResultProducer.doRun(ExplicitTestsetResultProducer.java:658)
             * sun.reflect.GeneratedMethodAccessor201.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test32()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer();
          assertNotNull(explicitTestsetResultProducer0);
          
          try {
            explicitTestsetResultProducer0.doRun((-80));
            fail("Expecting exception: Exception");
          } catch(Exception e) {
            /*
             * No Instances set
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test33()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer();
          assertNotNull(explicitTestsetResultProducer0);
          
          PART pART0 = new PART();
          explicitTestsetResultProducer0.setRandomizeData(true);
          Capabilities capabilities0 = pART0.getCapabilities();
          TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
          Instances instances0 = testInstances0.generate();
          explicitTestsetResultProducer0.setInstances(instances0);
          try {
            explicitTestsetResultProducer0.doRun(0);
            fail("Expecting exception: WekaException");
          } catch(WekaException e) {
            /*
             * Test set '/mnt/fastdata/ac1gf/SF110/dist/107_weka/Testdata_test.arff' not found!
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test34()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer();
          assertEquals(false, explicitTestsetResultProducer0.getRandomizeData());
          assertNotNull(explicitTestsetResultProducer0);
          
          explicitTestsetResultProducer0.setRandomizeData(true);
          String string0 = explicitTestsetResultProducer0.toString();
          assertEquals(true, explicitTestsetResultProducer0.getRandomizeData());
          assertEquals("ExplicitTestsetResultProducer:  -R -dir /mnt/fastdata/ac1gf/SF110/dist/107_weka -suffix _test.arff -W weka.experiment.ClassifierSplitEvaluator --: <null Instances>", string0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test35()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer();
          assertNotNull(explicitTestsetResultProducer0);
          
          explicitTestsetResultProducer0.setTestsetPrefix("%z0A~}(*");
          String string0 = explicitTestsetResultProducer0.toString();
          assertNotNull(string0);
          assertEquals("%z0A~}(*", explicitTestsetResultProducer0.getTestsetPrefix());
          assertEquals("ExplicitTestsetResultProducer:  -dir /mnt/fastdata/ac1gf/SF110/dist/107_weka -prefix %z0A~}(* -suffix _test.arff -W weka.experiment.ClassifierSplitEvaluator --: <null Instances>", string0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test36()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer();
          assertNotNull(explicitTestsetResultProducer0);
          
          explicitTestsetResultProducer0.setRelationReplace("The directory containing the test sets.");
          explicitTestsetResultProducer0.setRelationFind("The directory containing the test sets.");
          String string0 = explicitTestsetResultProducer0.toString();
          assertEquals("The directory containing the test sets.", explicitTestsetResultProducer0.getRelationFind());
          assertEquals("The directory containing the test sets.", explicitTestsetResultProducer0.getRelationReplace());
          assertEquals("ExplicitTestsetResultProducer:  -dir /mnt/fastdata/ac1gf/SF110/dist/107_weka -suffix _test.arff -find The directory containing the test sets. -replace The directory containing the test sets. -W weka.experiment.ClassifierSplitEvaluator --: <null Instances>", string0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test37()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          ExplicitTestsetResultProducer explicitTestsetResultProducer0 = new ExplicitTestsetResultProducer();
          assertNotNull(explicitTestsetResultProducer0);
          
          PART pART0 = new PART();
          Capabilities capabilities0 = pART0.getCapabilities();
          TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
          Instances instances0 = testInstances0.generate();
          explicitTestsetResultProducer0.setInstances(instances0);
          String string0 = explicitTestsetResultProducer0.toString();
          assertEquals("ExplicitTestsetResultProducer:  -dir /mnt/fastdata/ac1gf/SF110/dist/107_weka -suffix _test.arff -W weka.experiment.ClassifierSplitEvaluator --: Testdata", explicitTestsetResultProducer0.toString());
          assertNotNull(string0);
          assertEquals("ExplicitTestsetResultProducer:  -dir /mnt/fastdata/ac1gf/SF110/dist/107_weka -suffix _test.arff -W weka.experiment.ClassifierSplitEvaluator --: Testdata", string0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
