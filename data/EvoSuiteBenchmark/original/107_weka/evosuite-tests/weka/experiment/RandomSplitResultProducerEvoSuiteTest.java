/*
 * This file was automatically generated by EvoSuite
 */

package weka.experiment;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.TestInstances;
import weka.experiment.RandomSplitResultProducer;
import weka.experiment.ResultListener;

@RunWith(EvoSuiteRunner.class)
public class RandomSplitResultProducerEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer();
          assertNotNull(randomSplitResultProducer0);
          
          String string0 = randomSplitResultProducer0.rawOutputTipText();
          assertEquals(false, randomSplitResultProducer0.getRawOutput());
          assertEquals("-P 66.0 -W weka.experiment.ClassifierSplitEvaluator --", randomSplitResultProducer0.getCompatibilityState());
          assertEquals("Save raw output (useful for debugging). If set, then output is sent to the destination specified by outputFile", string0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer();
          assertNotNull(randomSplitResultProducer0);
          
          String string0 = randomSplitResultProducer0.outputFileTipText();
          assertEquals("Set the destination for saving raw output. If the rawOutput option is selected, then output from the splitEvaluator for individual train-test splits is saved. If the destination is a directory, then each output is saved to an individual gzip file; if the destination is a file, then each output is saved as an entry in a zip file.", string0);
          assertEquals(false, randomSplitResultProducer0.getRawOutput());
          assertEquals("RandomSplitResultProducer: -P 66.0 -W weka.experiment.ClassifierSplitEvaluator --: <null Instances>", randomSplitResultProducer0.toString());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer();
          assertNotNull(randomSplitResultProducer0);
          
          randomSplitResultProducer0.preProcess();
          assertEquals(false, randomSplitResultProducer0.getRawOutput());
          assertEquals("-P 66.0 -W weka.experiment.ClassifierSplitEvaluator --", randomSplitResultProducer0.getCompatibilityState());
          assertEquals(true, randomSplitResultProducer0.getRandomizeData());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer();
          randomSplitResultProducer0.setRandomizeData(false);
          TestInstances testInstances0 = new TestInstances();
          Instances instances0 = testInstances0.generate();
          randomSplitResultProducer0.setInstances(instances0);
          // Undeclared exception!
          try {
            randomSplitResultProducer0.doRun(218);
            fail("Expecting exception: Error");
          } catch(Error e) {
            /*
             * Unrecognized ResultProducer sending results!!
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer();
          assertNotNull(randomSplitResultProducer0);
          
          Object[] objectArray0 = randomSplitResultProducer0.getKeyTypes();
          assertEquals(false, randomSplitResultProducer0.getRawOutput());
          assertEquals("-P 66.0 -W weka.experiment.ClassifierSplitEvaluator --", randomSplitResultProducer0.getCompatibilityState());
          assertNotNull(objectArray0);
          assertEquals("RandomSplitResultProducer: -P 66.0 -W weka.experiment.ClassifierSplitEvaluator --: <null Instances>", randomSplitResultProducer0.toString());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer();
          assertNotNull(randomSplitResultProducer0);
          
          Object[] objectArray0 = randomSplitResultProducer0.getResultTypes();
          assertNotNull(objectArray0);
          assertEquals(false, randomSplitResultProducer0.getRawOutput());
          assertEquals("RandomSplitResultProducer: -P 66.0 -W weka.experiment.ClassifierSplitEvaluator --: <null Instances>", randomSplitResultProducer0.toString());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer();
          assertNotNull(randomSplitResultProducer0);
          
          String string0 = randomSplitResultProducer0.splitEvaluatorTipText();
          assertEquals(false, randomSplitResultProducer0.getRawOutput());
          assertEquals("RandomSplitResultProducer: -P 66.0 -W weka.experiment.ClassifierSplitEvaluator --: <null Instances>", randomSplitResultProducer0.toString());
          assertEquals("The evaluator to apply to the test data. This may be a classifier, regression scheme etc.", string0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer();
          assertNotNull(randomSplitResultProducer0);
          
          String string0 = randomSplitResultProducer0.randomizeDataTipText();
          assertEquals(false, randomSplitResultProducer0.getRawOutput());
          assertEquals("Do not randomize dataset and do not perform probabilistic rounding if false", string0);
          assertEquals("RandomSplitResultProducer: -P 66.0 -W weka.experiment.ClassifierSplitEvaluator --: <null Instances>", randomSplitResultProducer0.toString());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test8()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer();
          assertNotNull(randomSplitResultProducer0);
          
          String string0 = randomSplitResultProducer0.trainPercentTipText();
          assertEquals("RandomSplitResultProducer: -P 66.0 -W weka.experiment.ClassifierSplitEvaluator --: <null Instances>", randomSplitResultProducer0.toString());
          assertEquals(false, randomSplitResultProducer0.getRawOutput());
          assertEquals("Set the percentage of data to use for training.", string0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test9()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer();
          assertNotNull(randomSplitResultProducer0);
          
          String string0 = randomSplitResultProducer0.getRevision();
          assertNotNull(string0);
          assertEquals("8034", string0);
          assertEquals(false, randomSplitResultProducer0.getRawOutput());
          assertEquals("-P 66.0 -W weka.experiment.ClassifierSplitEvaluator --", randomSplitResultProducer0.getCompatibilityState());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer();
          assertNotNull(randomSplitResultProducer0);
          
          randomSplitResultProducer0.setResultListener((ResultListener) null);
          try {
            randomSplitResultProducer0.preProcess();
            fail("Expecting exception: Exception");
          } catch(Exception e) {
            /*
             * No ResultListener set
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer();
          assertNotNull(randomSplitResultProducer0);
          
          String string0 = randomSplitResultProducer0.globalInfo();
          assertEquals("Generates a single train/test split and calls the appropriate SplitEvaluator to generate some results.", string0);
          assertEquals(false, randomSplitResultProducer0.getRawOutput());
          assertEquals("RandomSplitResultProducer: -P 66.0 -W weka.experiment.ClassifierSplitEvaluator --: <null Instances>", randomSplitResultProducer0.toString());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer();
          assertNotNull(randomSplitResultProducer0);
          
          String[] stringArray0 = new String[1];
          randomSplitResultProducer0.setAdditionalMeasures(stringArray0);
          assertEquals(false, randomSplitResultProducer0.getRawOutput());
          assertEquals("-P 66.0 -W weka.experiment.ClassifierSplitEvaluator --", randomSplitResultProducer0.getCompatibilityState());
          assertEquals(66.0, randomSplitResultProducer0.getTrainPercent(), 0.01D);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer();
          assertNotNull(randomSplitResultProducer0);
          
          Enumeration<Object> enumeration0 = randomSplitResultProducer0.enumerateMeasures();
          assertEquals(false, randomSplitResultProducer0.getRawOutput());
          assertNotNull(enumeration0);
          assertEquals("-P 66.0 -W weka.experiment.ClassifierSplitEvaluator --", randomSplitResultProducer0.getCompatibilityState());
          assertEquals("RandomSplitResultProducer: -P 66.0 -W weka.experiment.ClassifierSplitEvaluator --: <null Instances>", randomSplitResultProducer0.toString());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test14()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer();
          assertNotNull(randomSplitResultProducer0);
          
          // Undeclared exception!
          try {
            randomSplitResultProducer0.getMeasure("9igW,?!hR6N.Ela");
            fail("Expecting exception: IllegalArgumentException");
          } catch(IllegalArgumentException e) {
            /*
             * ClassifierSplitEvaluator: Can't return value for : 9igW,?!hR6N.Ela. weka.classifiers.rules.ZeroR is not an AdditionalMeasureProducer
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test15()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer();
          assertNotNull(randomSplitResultProducer0);
          
          randomSplitResultProducer0.postProcess();
          assertEquals(false, randomSplitResultProducer0.getRawOutput());
          assertEquals("RandomSplitResultProducer: -P 66.0 -W weka.experiment.ClassifierSplitEvaluator --: <null Instances>", randomSplitResultProducer0.toString());
          assertEquals("-P 66.0 -W weka.experiment.ClassifierSplitEvaluator --", randomSplitResultProducer0.getCompatibilityState());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test16()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer();
          assertEquals(false, randomSplitResultProducer0.getRawOutput());
          assertNotNull(randomSplitResultProducer0);
          
          randomSplitResultProducer0.setRawOutput(true);
          randomSplitResultProducer0.postProcess();
          assertEquals(true, randomSplitResultProducer0.getRawOutput());
          assertEquals("RandomSplitResultProducer: -P 66.0 -W weka.experiment.ClassifierSplitEvaluator --: <null Instances>", randomSplitResultProducer0.toString());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test17()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer();
          assertNotNull(randomSplitResultProducer0);
          
          TestInstances testInstances0 = new TestInstances();
          Instances instances0 = testInstances0.generate();
          randomSplitResultProducer0.setInstances(instances0);
          // Undeclared exception!
          try {
            randomSplitResultProducer0.doRunKeys(203);
            fail("Expecting exception: Error");
          } catch(Error e) {
            /*
             * Unrecognized ResultProducer sending results!!
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test18()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer();
          assertNotNull(randomSplitResultProducer0);
          
          try {
            randomSplitResultProducer0.doRunKeys(693);
            fail("Expecting exception: Exception");
          } catch(Exception e) {
            /*
             * No Instances set
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test19()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer();
          assertNotNull(randomSplitResultProducer0);
          assertEquals(false, randomSplitResultProducer0.getRawOutput());
          
          randomSplitResultProducer0.setRawOutput(true);
          try {
            randomSplitResultProducer0.doRun(1825);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission /mnt/fastdata/ac1gf/SF110/dist/107_weka/splitEvalutorOut.zip write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:183)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:145)
             * weka.experiment.OutputZipper.<init>(OutputZipper.java:66)
             * weka.experiment.RandomSplitResultProducer.doRun(RandomSplitResultProducer.java:330)
             * sun.reflect.GeneratedMethodAccessor140.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test20()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer();
          assertNotNull(randomSplitResultProducer0);
          
          try {
            randomSplitResultProducer0.doRun((-1434));
            fail("Expecting exception: Exception");
          } catch(Exception e) {
            /*
             * No Instances set
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test21()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer();
          TestInstances testInstances0 = new TestInstances();
          Instances instances0 = testInstances0.generate();
          randomSplitResultProducer0.setInstances(instances0);
          DenseInstance denseInstance0 = new DenseInstance(200029);
          instances0.add((Instance) denseInstance0);
          // Undeclared exception!
          try {
            randomSplitResultProducer0.doRun(7);
            fail("Expecting exception: NoSuchMethodError");
          } catch(NoSuchMethodError e) {
            /*
             * org.evosuite.runtime.Random.nextDouble()D
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test22()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer();
          assertEquals(true, randomSplitResultProducer0.getRandomizeData());
          assertNotNull(randomSplitResultProducer0);
          
          randomSplitResultProducer0.setRandomizeData(false);
          String string0 = randomSplitResultProducer0.toString();
          assertEquals("RandomSplitResultProducer: -P 66.0 -R -W weka.experiment.ClassifierSplitEvaluator --: <null Instances>", string0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test23()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer();
          assertNotNull(randomSplitResultProducer0);
          
          Enumeration<Object> enumeration0 = randomSplitResultProducer0.listOptions();
          assertEquals(false, randomSplitResultProducer0.getRawOutput());
          assertNotNull(enumeration0);
          assertEquals("RandomSplitResultProducer: -P 66.0 -W weka.experiment.ClassifierSplitEvaluator --: <null Instances>", randomSplitResultProducer0.toString());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test24()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer();
          assertNotNull(randomSplitResultProducer0);
          assertEquals(true, randomSplitResultProducer0.getRandomizeData());
          
          randomSplitResultProducer0.setRandomizeData(false);
          String[] stringArray0 = randomSplitResultProducer0.getOptions();
          randomSplitResultProducer0.setOptions(stringArray0);
          assertEquals(false, randomSplitResultProducer0.getRawOutput());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test25()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer();
          assertNotNull(randomSplitResultProducer0);
          
          String[] stringArray0 = randomSplitResultProducer0.getResultNames();
          assertNotNull(stringArray0);
          
          try {
            randomSplitResultProducer0.setOptions(stringArray0);
            fail("Expecting exception: Exception");
          } catch(Exception e) {
            /*
             * A SplitEvaluator must be specified with the -W option.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test26()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer();
          assertNotNull(randomSplitResultProducer0);
          assertEquals(false, randomSplitResultProducer0.getRawOutput());
          
          randomSplitResultProducer0.setRawOutput(true);
          randomSplitResultProducer0.getOptions();
          assertEquals(true, randomSplitResultProducer0.getRawOutput());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test27()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          RandomSplitResultProducer randomSplitResultProducer0 = new RandomSplitResultProducer();
          assertNotNull(randomSplitResultProducer0);
          
          TestInstances testInstances0 = new TestInstances();
          Instances instances0 = testInstances0.generate();
          randomSplitResultProducer0.setInstances(instances0);
          String string0 = randomSplitResultProducer0.toString();
          assertNotNull(string0);
          assertEquals("RandomSplitResultProducer: -P 66.0 -W weka.experiment.ClassifierSplitEvaluator --: Testdata", randomSplitResultProducer0.toString());
          assertEquals("RandomSplitResultProducer: -P 66.0 -W weka.experiment.ClassifierSplitEvaluator --: Testdata", string0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
