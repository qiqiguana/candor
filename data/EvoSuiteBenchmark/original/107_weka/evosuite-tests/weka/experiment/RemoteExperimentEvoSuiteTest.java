/*
 * This file was automatically generated by EvoSuite
 */

package weka.experiment;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.swing.DefaultListModel;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import weka.experiment.Experiment;
import weka.experiment.RemoteExperiment;
import weka.experiment.RemoteExperimentListener;

@RunWith(EvoSuiteRunner.class)
public class RemoteExperimentEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          RemoteExperiment remoteExperiment0 = new RemoteExperiment();
          assertNotNull(remoteExperiment0);
          
          String string0 = remoteExperiment0.getRevision();
          assertNotNull(string0);
          assertEquals("", remoteExperiment0.getNotes());
          assertEquals(1, remoteExperiment0.getRunLower());
          assertEquals(true, remoteExperiment0.getSplitByDataSet());
          assertEquals("8034", string0);
          assertEquals(10, remoteExperiment0.getRunUpper());
          assertEquals(false, remoteExperiment0.getUsePropertyIterator());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          RemoteExperiment remoteExperiment0 = new RemoteExperiment();
          assertNotNull(remoteExperiment0);
          
          // Undeclared exception!
          try {
            remoteExperiment0.incrementFailed((-923));
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          RemoteExperiment remoteExperiment0 = new RemoteExperiment();
          assertNotNull(remoteExperiment0);
          
          DefaultListModel defaultListModel0 = remoteExperiment0.getRemoteHosts();
          assertNotNull(defaultListModel0);
          assertEquals(true, remoteExperiment0.getSplitByDataSet());
          assertEquals(false, remoteExperiment0.getUsePropertyIterator());
          assertEquals(10, remoteExperiment0.getRunUpper());
          assertEquals(1, remoteExperiment0.getRunLower());
          assertEquals("", remoteExperiment0.getNotes());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          RemoteExperiment remoteExperiment0 = new RemoteExperiment();
          assertNotNull(remoteExperiment0);
          
          remoteExperiment0.incrementFinished();
          assertEquals("", remoteExperiment0.getNotes());
          assertEquals(false, remoteExperiment0.getUsePropertyIterator());
          assertEquals(10, remoteExperiment0.getRunUpper());
          assertEquals(1, remoteExperiment0.getRunLower());
          assertEquals(true, remoteExperiment0.getSplitByDataSet());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          RemoteExperiment remoteExperiment0 = new RemoteExperiment();
          assertNotNull(remoteExperiment0);
          
          remoteExperiment0.waitingExperiment(0);
          assertEquals(false, remoteExperiment0.getUsePropertyIterator());
          assertEquals(10, remoteExperiment0.getRunUpper());
          assertEquals("", remoteExperiment0.getNotes());
          assertEquals(true, remoteExperiment0.getSplitByDataSet());
          assertEquals(1, remoteExperiment0.getRunLower());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          RemoteExperiment remoteExperiment0 = new RemoteExperiment();
          assertNotNull(remoteExperiment0);
          
          remoteExperiment0.nextIteration();
          assertEquals(true, remoteExperiment0.getSplitByDataSet());
          assertEquals(10, remoteExperiment0.getRunUpper());
          assertEquals("", remoteExperiment0.getNotes());
          assertEquals(1, remoteExperiment0.getRunLower());
          assertEquals(false, remoteExperiment0.getUsePropertyIterator());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          RemoteExperiment remoteExperiment0 = new RemoteExperiment();
          assertNotNull(remoteExperiment0);
          
          remoteExperiment0.postProcess();
          assertEquals("", remoteExperiment0.getNotes());
          assertEquals(true, remoteExperiment0.getSplitByDataSet());
          assertEquals(10, remoteExperiment0.getRunUpper());
          assertEquals(1, remoteExperiment0.getRunLower());
          assertEquals(false, remoteExperiment0.getUsePropertyIterator());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          RemoteExperiment remoteExperiment0 = new RemoteExperiment();
          assertNotNull(remoteExperiment0);
          
          remoteExperiment0.setSplitByDataSet(false);
          remoteExperiment0.addRemoteHost((String) null);
          remoteExperiment0.initialize();
          remoteExperiment0.runExperiment();
          assertEquals(true, remoteExperiment0.hasMoreIterations());
          assertEquals(1, remoteExperiment0.getCurrentRunNumber());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test8()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          RemoteExperiment remoteExperiment0 = new RemoteExperiment();
          assertNotNull(remoteExperiment0);
          
          remoteExperiment0.addRemoteExperimentListener((RemoteExperimentListener) null);
          // Undeclared exception!
          try {
            remoteExperiment0.availableHost((-1408));
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test9()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          RemoteExperiment remoteExperiment0 = new RemoteExperiment();
          assertNotNull(remoteExperiment0);
          
          remoteExperiment0.advanceCounters();
          assertEquals(1, remoteExperiment0.getRunLower());
          assertEquals(false, remoteExperiment0.getUsePropertyIterator());
          assertEquals(true, remoteExperiment0.getSplitByDataSet());
          assertEquals(10, remoteExperiment0.getRunUpper());
          assertEquals("", remoteExperiment0.getNotes());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          RemoteExperiment remoteExperiment0 = new RemoteExperiment();
          assertNotNull(remoteExperiment0);
          
          Experiment experiment0 = remoteExperiment0.getBaseExperiment();
          assertEquals(10, remoteExperiment0.getRunUpper());
          assertEquals(true, remoteExperiment0.getSplitByDataSet());
          assertEquals(10, experiment0.getRunUpper());
          assertEquals("", experiment0.getNotes());
          assertEquals("", remoteExperiment0.getNotes());
          assertEquals(false, experiment0.getUsePropertyIterator());
          assertEquals(1, remoteExperiment0.getRunLower());
          assertNotNull(experiment0);
          assertEquals(1, experiment0.getRunLower());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          RemoteExperiment remoteExperiment0 = new RemoteExperiment();
          assertNotNull(remoteExperiment0);
          
          DefaultListModel defaultListModel0 = remoteExperiment0.getDatasets();
          remoteExperiment0.setRemoteHosts(defaultListModel0);
          remoteExperiment0.addRemoteHost("");
          remoteExperiment0.initialize();
          assertEquals(true, remoteExperiment0.hasMoreIterations());
          assertEquals(1, remoteExperiment0.getCurrentRunNumber());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          RemoteExperiment remoteExperiment0 = null;
          try {
            remoteExperiment0 = new RemoteExperiment((Experiment) null);
            fail("Expecting exception: Exception");
          } catch(Exception e) {
            /*
             * Base experiment is null!
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          RemoteExperiment remoteExperiment0 = new RemoteExperiment();
          assertNotNull(remoteExperiment0);
          
          try {
            remoteExperiment0.initialize();
            fail("Expecting exception: Exception");
          } catch(Exception e) {
            /*
             * No hosts specified!
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test14()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          RemoteExperiment remoteExperiment0 = new RemoteExperiment();
          assertNotNull(remoteExperiment0);
          
          remoteExperiment0.availableHost((-1408));
          assertEquals(true, remoteExperiment0.getSplitByDataSet());
          assertEquals(1, remoteExperiment0.getRunLower());
          assertEquals("", remoteExperiment0.getNotes());
          assertEquals(false, remoteExperiment0.getUsePropertyIterator());
          assertEquals(10, remoteExperiment0.getRunUpper());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test15()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          RemoteExperiment remoteExperiment0 = new RemoteExperiment();
          assertNotNull(remoteExperiment0);
          
          remoteExperiment0.addRemoteHost((String) null);
          remoteExperiment0.initialize();
          remoteExperiment0.availableHost(0);
          assertEquals(true, remoteExperiment0.hasMoreIterations());
          assertEquals(true, remoteExperiment0.getSplitByDataSet());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test16()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          RemoteExperiment remoteExperiment0 = new RemoteExperiment();
          assertNotNull(remoteExperiment0);
          
          remoteExperiment0.setSplitByDataSet(false);
          remoteExperiment0.addRemoteHost((String) null);
          remoteExperiment0.initialize();
          remoteExperiment0.abortExperiment();
          remoteExperiment0.runExperiment();
          assertEquals(1, remoteExperiment0.getCurrentRunNumber());
          assertEquals(false, remoteExperiment0.getSplitByDataSet());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test17()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          RemoteExperiment remoteExperiment0 = new RemoteExperiment();
          assertNotNull(remoteExperiment0);
          
          remoteExperiment0.setSplitByDataSet(false);
          remoteExperiment0.addRemoteHost((String) null);
          remoteExperiment0.initialize();
          remoteExperiment0.abortExperiment();
          remoteExperiment0.availableHost(0);
          assertEquals(1, remoteExperiment0.getCurrentRunNumber());
          assertEquals(true, remoteExperiment0.hasMoreIterations());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test18()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          RemoteExperiment remoteExperiment0 = new RemoteExperiment();
          assertNotNull(remoteExperiment0);
          
          remoteExperiment0.addRemoteHost((String) null);
          DefaultListModel defaultListModel0 = remoteExperiment0.getDatasets();
          remoteExperiment0.initialize();
          defaultListModel0.addElement((Object) "selection-end-paragraph");
          remoteExperiment0.availableHost((-1408));
          assertEquals(true, remoteExperiment0.hasMoreIterations());
          assertEquals(0, remoteExperiment0.getCurrentPropertyNumber());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test19()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          RemoteExperiment remoteExperiment0 = new RemoteExperiment();
          assertNotNull(remoteExperiment0);
          
          remoteExperiment0.addRemoteHost((String) null);
          String string0 = remoteExperiment0.toString();
          assertNotNull(string0);
          assertEquals(true, remoteExperiment0.getSplitByDataSet());
          assertEquals(1, remoteExperiment0.getRunLower());
          assertEquals(10, remoteExperiment0.getRunUpper());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
