/*
 * This file was automatically generated by EvoSuite
 */

package weka.experiment;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import weka.experiment.PairedStatsCorrected;
import weka.experiment.Stats;

@RunWith(EvoSuiteRunner.class)
public class PairedStatsCorrectedEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      PairedStatsCorrected pairedStatsCorrected0 = new PairedStatsCorrected(372.5518162634123, 372.5518162634123);
      String string0 = pairedStatsCorrected0.getRevision();
      assertEquals("8034", string0);
      assertNotNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      PairedStatsCorrected pairedStatsCorrected0 = new PairedStatsCorrected(0.9189385332046728, (-250.99404866147114));
      Stats stats0 = pairedStatsCorrected0.xStats;
      stats0.add((double) 0, 1.0);
      pairedStatsCorrected0.calculateDerived();
      assertEquals(1.0, pairedStatsCorrected0.differencesProbability, 0.01D);
      assertEquals("Analysis for 0 points:\n                         Column 1         Column 2       Difference\nMinimums                   0              NaN              NaN     \nMaximums                   0              NaN              NaN     \nSums                       0                0                0     \nSumSquares                 0                0                0     \nMeans                      0              NaN              NaN     \nSDs                 Infinity              NaN              NaN     \nProb(differences) 1 (sigflag 0)\nCorrelation       NaN\n", pairedStatsCorrected0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      PairedStatsCorrected pairedStatsCorrected0 = new PairedStatsCorrected(372.5518162634123, 372.5518162634123);
      double[] doubleArray0 = new double[6];
      pairedStatsCorrected0.add(doubleArray0, doubleArray0);
      pairedStatsCorrected0.calculateDerived();
      assertEquals((-1), pairedStatsCorrected0.differencesSignificance);
      assertEquals("Analysis for 6 points:\n                         Column 1         Column 2       Difference\nMinimums                   0                0                0     \nMaximums                   0                0                0     \nSums                       0                0                0     \nSumSquares                 0                0                0     \nMeans                      0                0                0     \nSDs                        0                0                0     \nProb(differences) 1 (sigflag -1)\nCorrelation       NaN\n", pairedStatsCorrected0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      PairedStatsCorrected pairedStatsCorrected0 = new PairedStatsCorrected(0.0, 9.709245791967167);
      pairedStatsCorrected0.add(9.709245791967167, 0.0);
      pairedStatsCorrected0.add(0.0, 0.0);
      pairedStatsCorrected0.calculateDerived();
      assertEquals(1.0, pairedStatsCorrected0.correlation, 0.01D);
      assertEquals("Analysis for 2 points:\n                         Column 1         Column 2       Difference\nMinimums                   0                0                0     \nMaximums                   9.7092           0                9.7092\nSums                       9.7092           0                9.7092\nSumSquares                94.2695           0               94.2695\nMeans                      4.8546           0                4.8546\nSDs                        6.8655           0                6.8655\nProb(differences) 0.8613 (sigflag 0)\nCorrelation       1\n", pairedStatsCorrected0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      PairedStatsCorrected pairedStatsCorrected0 = new PairedStatsCorrected(372.5518162634123, 372.5518162634123);
      pairedStatsCorrected0.subtract(372.5518162634123, 0.0);
      pairedStatsCorrected0.calculateDerived();
      assertEquals(Double.NaN, pairedStatsCorrected0.correlation, 0.01D);
      assertEquals("Analysis for -1 points:\n                         Column 1         Column 2       Difference\nMinimums                 NaN              NaN              NaN     \nMaximums                 NaN              NaN              NaN     \nSums                    -372.5518           0             -372.5518\nSumSquares           -138794.8558           0          -138794.8558\nMeans                    NaN              NaN              NaN     \nSDs                      NaN              NaN              NaN     \nProb(differences) 0 (sigflag -1)\nCorrelation       NaN\n", pairedStatsCorrected0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      PairedStatsCorrected pairedStatsCorrected0 = new PairedStatsCorrected(943.1680979932378, 943.1680979932378);
      pairedStatsCorrected0.add(943.1680979932378, (double) 0);
      pairedStatsCorrected0.calculateDerived();
      assertEquals(Double.NaN, pairedStatsCorrected0.correlation, 0.01D);
      assertEquals("Analysis for 1 points:\n                         Column 1         Column 2       Difference\nMinimums                 943.1681           0              943.1681\nMaximums                 943.1681           0              943.1681\nSums                     943.1681           0              943.1681\nSumSquares            889566.0611           0           889566.0611\nMeans                    943.1681           0              943.1681\nSDs                 Infinity         Infinity         Infinity     \nProb(differences) 1 (sigflag 1)\nCorrelation       NaN\n", pairedStatsCorrected0.toString());
  }
}
