/*
 * This file was automatically generated by EvoSuite
 */

package weka.experiment;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Enumeration;
import org.junit.BeforeClass;
import weka.classifiers.Classifier;
import weka.classifiers.meta.AttributeSelectedClassifier;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.PART;
import weka.core.Capabilities;
import weka.core.Instances;
import weka.core.TestInstances;
import weka.experiment.RegressionSplitEvaluator;

@RunWith(EvoSuiteRunner.class)
public class RegressionSplitEvaluatorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator();
      assertNotNull(regressionSplitEvaluator0);
      
      regressionSplitEvaluator0.setNoSizeDetermination(true);
      regressionSplitEvaluator0.getOptions();
      assertEquals(true, regressionSplitEvaluator0.getNoSizeDetermination());
      assertEquals("RegressionSplitEvaluator: weka.classifiers.rules.ZeroR (version 48055541465867954)", regressionSplitEvaluator0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator();
      assertNotNull(regressionSplitEvaluator0);
      
      try {
        regressionSplitEvaluator0.setClassifierName("2Rt");
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * Can't find Classifier with class name: 2Rt
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator();
      assertNotNull(regressionSplitEvaluator0);
      
      PART pART0 = new PART();
      regressionSplitEvaluator0.setClassifier((Classifier) pART0);
      // Undeclared exception!
      try {
        regressionSplitEvaluator0.getMeasure("dg");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * ClassifierSplitEvaluator: Can't return result for measure, classifier has not been built yet.
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator();
      assertNotNull(regressionSplitEvaluator0);
      
      Object[] objectArray0 = regressionSplitEvaluator0.getKeyTypes();
      assertNotNull(objectArray0);
      assertEquals("RegressionSplitEvaluator: weka.classifiers.rules.ZeroR (version 48055541465867954)", regressionSplitEvaluator0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator();
      assertNotNull(regressionSplitEvaluator0);
      
      String[] stringArray0 = regressionSplitEvaluator0.getKeyNames();
      assertNotNull(stringArray0);
      assertEquals("RegressionSplitEvaluator: weka.classifiers.rules.ZeroR (version 48055541465867954)", regressionSplitEvaluator0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator();
      assertNotNull(regressionSplitEvaluator0);
      
      String string0 = regressionSplitEvaluator0.getRevision();
      assertEquals("8054", string0);
      assertNotNull(string0);
      assertEquals("RegressionSplitEvaluator: weka.classifiers.rules.ZeroR (version 48055541465867954)", regressionSplitEvaluator0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator();
      assertNotNull(regressionSplitEvaluator0);
      
      String string0 = regressionSplitEvaluator0.globalInfo();
      assertEquals("A SplitEvaluator that produces results for a classification scheme on a numeric class attribute.", string0);
      assertEquals("RegressionSplitEvaluator: weka.classifiers.rules.ZeroR (version 48055541465867954)", regressionSplitEvaluator0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator();
      assertNotNull(regressionSplitEvaluator0);
      
      String string0 = regressionSplitEvaluator0.noSizeDeterminationTipText();
      assertEquals("If enabled, the size determination for train/test/classifier is skipped.", string0);
      assertEquals("RegressionSplitEvaluator: weka.classifiers.rules.ZeroR (version 48055541465867954)", regressionSplitEvaluator0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator();
      assertNotNull(regressionSplitEvaluator0);
      
      String string0 = regressionSplitEvaluator0.classifierTipText();
      assertEquals("The classifier to use.", string0);
      assertEquals("RegressionSplitEvaluator: weka.classifiers.rules.ZeroR (version 48055541465867954)", regressionSplitEvaluator0.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator();
      assertNotNull(regressionSplitEvaluator0);
      
      Object[] objectArray0 = regressionSplitEvaluator0.getKey();
      assertEquals("RegressionSplitEvaluator: weka.classifiers.rules.ZeroR (version 48055541465867954)", regressionSplitEvaluator0.toString());
      assertNotNull(objectArray0);
  }

  @Test
  public void test10()  throws Throwable  {
      RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator();
      regressionSplitEvaluator0.setClassifier((Classifier) null);
      Enumeration<Object> enumeration0 = regressionSplitEvaluator0.listOptions();
      assertEquals(true, enumeration0.hasMoreElements());
  }

  @Test
  public void test11()  throws Throwable  {
      RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator();
      assertNotNull(regressionSplitEvaluator0);
      
      Enumeration<Object> enumeration0 = regressionSplitEvaluator0.listOptions();
      assertEquals("RegressionSplitEvaluator: weka.classifiers.rules.ZeroR (version 48055541465867954)", regressionSplitEvaluator0.toString());
      assertNotNull(enumeration0);
  }

  @Test
  public void test12()  throws Throwable  {
      RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator();
      assertNotNull(regressionSplitEvaluator0);
      
      String[] stringArray0 = regressionSplitEvaluator0.getOptions();
      assertNotNull(stringArray0);
      
      regressionSplitEvaluator0.setOptions(stringArray0);
      assertEquals(false, regressionSplitEvaluator0.getNoSizeDetermination());
      assertEquals("RegressionSplitEvaluator: weka.classifiers.rules.ZeroR (version 48055541465867954)", regressionSplitEvaluator0.toString());
  }

  @Test
  public void test13()  throws Throwable  {
      RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator();
      assertEquals("RegressionSplitEvaluator: weka.classifiers.rules.ZeroR (version 48055541465867954)", regressionSplitEvaluator0.toString());
      assertNotNull(regressionSplitEvaluator0);
      
      regressionSplitEvaluator0.setClassifier((Classifier) null);
      String[] stringArray0 = regressionSplitEvaluator0.getOptions();
      try {
        regressionSplitEvaluator0.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * A classifier must be specified with the -W option.
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator();
      assertNotNull(regressionSplitEvaluator0);
      
      String[] stringArray0 = new String[10];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      JRip jRip0 = new JRip();
      regressionSplitEvaluator0.setClassifier((Classifier) jRip0);
      stringArray0[6] = "lnX)KBY[=9V0s(!n|M";
      stringArray0[7] = "lnX)KBY[=9V0s(!n|M";
      stringArray0[8] = "lnX)KBY[=9V0s(!n|M";
      stringArray0[9] = "";
      regressionSplitEvaluator0.setAdditionalMeasures(stringArray0);
      assertEquals("RegressionSplitEvaluator: weka.classifiers.rules.JRip -F 3 -N 2.0 -O 2 -S 1(version -6589312996832147161)", regressionSplitEvaluator0.toString());
  }

  @Test
  public void test15()  throws Throwable  {
      RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator();
      assertNotNull(regressionSplitEvaluator0);
      
      Enumeration<Object> enumeration0 = regressionSplitEvaluator0.enumerateMeasures();
      assertNotNull(enumeration0);
      assertEquals("RegressionSplitEvaluator: weka.classifiers.rules.ZeroR (version 48055541465867954)", regressionSplitEvaluator0.toString());
  }

  @Test
  public void test16()  throws Throwable  {
      RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator();
      assertNotNull(regressionSplitEvaluator0);
      
      PART pART0 = new PART();
      regressionSplitEvaluator0.setClassifier((Classifier) pART0);
      regressionSplitEvaluator0.enumerateMeasures();
      assertEquals("RegressionSplitEvaluator: weka.classifiers.rules.PART -M 2 -C 0.25 -Q 1(version 8121455039782598361)", regressionSplitEvaluator0.toString());
  }

  @Test
  public void test17()  throws Throwable  {
      RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator();
      assertNotNull(regressionSplitEvaluator0);
      
      // Undeclared exception!
      try {
        regressionSplitEvaluator0.getMeasure("The classifier to use.");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * ClassifierSplitEvaluator: Can't return value for : The classifier to use.. weka.classifiers.rules.ZeroR is not an AdditionalMeasureProducer
         */
      }
  }

  @Test
  public void test18()  throws Throwable  {
      RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator();
      assertNotNull(regressionSplitEvaluator0);
      
      Object[] objectArray0 = regressionSplitEvaluator0.getResultTypes();
      assertEquals("RegressionSplitEvaluator: weka.classifiers.rules.ZeroR (version 48055541465867954)", regressionSplitEvaluator0.toString());
      assertNotNull(objectArray0);
  }

  @Test
  public void test19()  throws Throwable  {
      RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator();
      assertNotNull(regressionSplitEvaluator0);
      
      String[] stringArray0 = regressionSplitEvaluator0.getOptions();
      assertNotNull(stringArray0);
      
      regressionSplitEvaluator0.setAdditionalMeasures(stringArray0);
      Object[] objectArray0 = regressionSplitEvaluator0.getResultTypes();
      assertEquals("RegressionSplitEvaluator: weka.classifiers.rules.ZeroR (version 48055541465867954)", regressionSplitEvaluator0.toString());
      assertNotNull(objectArray0);
  }

  @Test
  public void test20()  throws Throwable  {
      RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator();
      assertNotNull(regressionSplitEvaluator0);
      
      String[] stringArray0 = regressionSplitEvaluator0.getResultNames();
      assertNotNull(stringArray0);
      assertEquals("RegressionSplitEvaluator: weka.classifiers.rules.ZeroR (version 48055541465867954)", regressionSplitEvaluator0.toString());
  }

  @Test
  public void test21()  throws Throwable  {
      RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator();
      assertNotNull(regressionSplitEvaluator0);
      
      String[] stringArray0 = new String[1];
      regressionSplitEvaluator0.setAdditionalMeasures(stringArray0);
      String[] stringArray1 = regressionSplitEvaluator0.getResultNames();
      assertNotNull(stringArray1);
      assertEquals("RegressionSplitEvaluator: weka.classifiers.rules.ZeroR (version 48055541465867954)", regressionSplitEvaluator0.toString());
  }

  @Test
  public void test22()  throws Throwable  {
      RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator();
      assertNotNull(regressionSplitEvaluator0);
      
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      Capabilities capabilities0 = attributeSelectedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("[{Ex6\"?/<o^M4NL");
      try {
        regressionSplitEvaluator0.getResult(instances0, instances0);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * Class attribute is not numeric!
         */
      }
  }

  @Test
  public void test23()  throws Throwable  {
      RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator();
      assertNotNull(regressionSplitEvaluator0);
      
      String string0 = regressionSplitEvaluator0.getRawResultOutput();
      assertNotNull(string0);
      assertEquals("<null> classifier", string0);
      assertEquals("RegressionSplitEvaluator: weka.classifiers.rules.ZeroR (version 48055541465867954)", regressionSplitEvaluator0.toString());
  }

  @Test
  public void test24()  throws Throwable  {
      RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator();
      assertNotNull(regressionSplitEvaluator0);
      
      String string0 = regressionSplitEvaluator0.toString();
      assertEquals("RegressionSplitEvaluator: weka.classifiers.rules.ZeroR (version 48055541465867954)", string0);
      assertNotNull(string0);
  }

  @Test
  public void test25()  throws Throwable  {
      RegressionSplitEvaluator regressionSplitEvaluator0 = new RegressionSplitEvaluator();
      assertNotNull(regressionSplitEvaluator0);
      assertEquals("RegressionSplitEvaluator: weka.classifiers.rules.ZeroR (version 48055541465867954)", regressionSplitEvaluator0.toString());
      
      regressionSplitEvaluator0.setClassifier((Classifier) null);
      String string0 = regressionSplitEvaluator0.toString();
      assertEquals("RegressionSplitEvaluator: <null> classifier", regressionSplitEvaluator0.toString());
      assertEquals("RegressionSplitEvaluator: <null> classifier", string0);
  }
}
