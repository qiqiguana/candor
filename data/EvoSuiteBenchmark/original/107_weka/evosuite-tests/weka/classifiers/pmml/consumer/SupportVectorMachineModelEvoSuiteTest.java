/*
 * This file was automatically generated by EvoSuite
 */

package weka.classifiers.pmml.consumer;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import javax.imageio.metadata.IIOMetadataNode;
import org.junit.BeforeClass;
import org.w3c.dom.Element;
import weka.classifiers.pmml.consumer.SupportVectorMachineModel;
import weka.core.Instances;
import weka.core.pmml.MiningSchema;
import weka.core.pmml.VectorDictionary;
import weka.core.pmml.VectorInstance;
import weka.gui.LogPanel;
import weka.gui.Logger;
import weka.gui.SysErrLog;
import weka.gui.WekaTaskMonitor;

@RunWith(EvoSuiteRunner.class)
public class SupportVectorMachineModelEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SupportVectorMachineModel.PolynomialKernel supportVectorMachineModel_PolynomialKernel0 = new SupportVectorMachineModel.PolynomialKernel((Element) iIOMetadataNode0);
      double[] doubleArray0 = new double[9];
      try {
        supportVectorMachineModel_PolynomialKernel0.evaluate((VectorInstance) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SupportVectorMachineModel.PolynomialKernel supportVectorMachineModel_PolynomialKernel0 = new SupportVectorMachineModel.PolynomialKernel((Element) iIOMetadataNode0);
      try {
        supportVectorMachineModel_PolynomialKernel0.evaluate((VectorInstance) null, (VectorInstance) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      WekaTaskMonitor wekaTaskMonitor0 = new WekaTaskMonitor();
      LogPanel logPanel0 = new LogPanel(wekaTaskMonitor0, false);
      SupportVectorMachineModel.PolynomialKernel supportVectorMachineModel_PolynomialKernel0 = new SupportVectorMachineModel.PolynomialKernel((Element) iIOMetadataNode0, (Logger) logPanel0);
      String string0 = supportVectorMachineModel_PolynomialKernel0.toString();
      assertNotNull(string0);
      assertEquals("Polynomial kernel: K(x,y) = (1.0 * <x,y> + 1.0)^1.0", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SupportVectorMachineModel.RadialBasisKernel supportVectorMachineModel_RadialBasisKernel0 = new SupportVectorMachineModel.RadialBasisKernel((Element) iIOMetadataNode0, (Logger) null);
      double[] doubleArray0 = new double[5];
      try {
        supportVectorMachineModel_RadialBasisKernel0.evaluate((VectorInstance) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SupportVectorMachineModel.RadialBasisKernel supportVectorMachineModel_RadialBasisKernel0 = new SupportVectorMachineModel.RadialBasisKernel((Element) iIOMetadataNode0);
      String string0 = supportVectorMachineModel_RadialBasisKernel0.toString();
      assertNotNull(string0);
      assertEquals("Radial kernel: K(x,y) = exp(-1.0 * ||x - y||^2)", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SupportVectorMachineModel.RadialBasisKernel supportVectorMachineModel_RadialBasisKernel0 = new SupportVectorMachineModel.RadialBasisKernel((Element) iIOMetadataNode0);
      try {
        supportVectorMachineModel_RadialBasisKernel0.evaluate((VectorInstance) null, (VectorInstance) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SupportVectorMachineModel.SigmoidKernel supportVectorMachineModel_SigmoidKernel0 = new SupportVectorMachineModel.SigmoidKernel((Element) iIOMetadataNode0, (Logger) null);
      String string0 = supportVectorMachineModel_SigmoidKernel0.toString();
      assertEquals("Sigmoid kernel: K(x,y) = tanh(1.0 * <x,y> + 1.0)", string0);
      assertNotNull(string0);
  }

  @Test
  public void test7()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SupportVectorMachineModel.SigmoidKernel supportVectorMachineModel_SigmoidKernel0 = new SupportVectorMachineModel.SigmoidKernel((Element) iIOMetadataNode0);
      try {
        supportVectorMachineModel_SigmoidKernel0.evaluate((VectorInstance) null, (VectorInstance) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SupportVectorMachineModel.SigmoidKernel supportVectorMachineModel_SigmoidKernel0 = new SupportVectorMachineModel.SigmoidKernel((Element) iIOMetadataNode0);
      double[] doubleArray0 = new double[4];
      try {
        supportVectorMachineModel_SigmoidKernel0.evaluate((VectorInstance) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      SysErrLog sysErrLog0 = new SysErrLog();
      SupportVectorMachineModel.LinearKernel supportVectorMachineModel_LinearKernel0 = new SupportVectorMachineModel.LinearKernel((Logger) sysErrLog0);
      try {
        supportVectorMachineModel_LinearKernel0.evaluate((VectorInstance) null, (VectorInstance) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      SupportVectorMachineModel.LinearKernel supportVectorMachineModel_LinearKernel0 = new SupportVectorMachineModel.LinearKernel();
      String string0 = supportVectorMachineModel_LinearKernel0.toString();
      assertEquals("Linear kernel: K(x,y) = <x,y>", string0);
  }

  @Test
  public void test11()  throws Throwable  {
      SysErrLog sysErrLog0 = new SysErrLog();
      SupportVectorMachineModel.LinearKernel supportVectorMachineModel_LinearKernel0 = new SupportVectorMachineModel.LinearKernel((Logger) sysErrLog0);
      double[] doubleArray0 = new double[3];
      try {
        supportVectorMachineModel_LinearKernel0.evaluate((VectorInstance) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("4.?");
      SupportVectorMachineModel.SVM_representation supportVectorMachineModel_SVM_representation0 = SupportVectorMachineModel.SVM_representation.SUPPORT_VECTORS;
      WekaTaskMonitor wekaTaskMonitor0 = new WekaTaskMonitor();
      LogPanel logPanel0 = new LogPanel(wekaTaskMonitor0, false);
      SupportVectorMachineModel.SupportVectorMachine supportVectorMachineModel_SupportVectorMachine0 = null;
      try {
        supportVectorMachineModel_SupportVectorMachine0 = new SupportVectorMachineModel.SupportVectorMachine((Element) iIOMetadataNode0, (MiningSchema) null, (VectorDictionary) null, supportVectorMachineModel_SVM_representation0, 1430, (Logger) logPanel0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("ZKC]RFTI");
      SupportVectorMachineModel supportVectorMachineModel0 = null;
      try {
        supportVectorMachineModel0 = new SupportVectorMachineModel((Element) iIOMetadataNode0, (Instances) null, (MiningSchema) null);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * [Kernel] Can't find a kernel that I recognize!
         */
      }
  }
}
