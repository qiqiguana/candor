/*
 * This file was automatically generated by EvoSuite
 */

package weka.classifiers.pmml.consumer;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.HashMap;
import javax.imageio.metadata.IIOMetadataNode;
import org.junit.BeforeClass;
import org.w3c.dom.Element;
import weka.classifiers.pmml.consumer.NeuralNetwork;
import weka.core.Instances;
import weka.core.pmml.MiningSchema;
import weka.core.pmml.TransformationDictionary;

@RunWith(EvoSuiteRunner.class)
public class NeuralNetworkEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      NeuralNetwork.Normalization neuralNetwork_Normalization0 = NeuralNetwork.Normalization.SOFTMAX;
      String string0 = neuralNetwork_Normalization0.toString();
      assertEquals("softmax", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      NeuralNetwork.ActivationFunction neuralNetwork_ActivationFunction0 = NeuralNetwork.ActivationFunction.SINE;
      double double0 = neuralNetwork_ActivationFunction0.eval((-1384.1749537319827), (-1384.1749537319827), (-1384.1749537319827), (-1384.1749537319827));
      assertEquals((-0.9543292402175665), double0, 0.01D);
  }

  @Test
  public void test2()  throws Throwable  {
      NeuralNetwork.ActivationFunction neuralNetwork_ActivationFunction0 = NeuralNetwork.ActivationFunction.GAUSS;
      double double0 = neuralNetwork_ActivationFunction0.eval(0.0, 0.0, 0.0, 0.0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test3()  throws Throwable  {
      NeuralNetwork.ActivationFunction neuralNetwork_ActivationFunction0 = NeuralNetwork.ActivationFunction.SQUARE;
      double double0 = neuralNetwork_ActivationFunction0.eval((-33.858398881751654), (-33.858398881751654), (-33.858398881751654), (-33.858398881751654));
      assertEquals(1146.3911748358016, double0, 0.01D);
  }

  @Test
  public void test4()  throws Throwable  {
      NeuralNetwork.ActivationFunction neuralNetwork_ActivationFunction0 = NeuralNetwork.ActivationFunction.RECIPROCAL;
      double double0 = neuralNetwork_ActivationFunction0.eval(0.0, 0.0, 0.0, 1901.2303346303968);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test5()  throws Throwable  {
      NeuralNetwork.ActivationFunction neuralNetwork_ActivationFunction0 = NeuralNetwork.ActivationFunction.EXPONENTIAL;
      double double0 = neuralNetwork_ActivationFunction0.eval(4.977436680714586, 4.977436680714586, 4.977436680714586, 4.977436680714586);
      assertEquals(145.10196188488993, double0, 0.01D);
  }

  @Test
  public void test6()  throws Throwable  {
      NeuralNetwork.ActivationFunction neuralNetwork_ActivationFunction0 = NeuralNetwork.ActivationFunction.LOGISTIC;
      double double0 = neuralNetwork_ActivationFunction0.eval((double) 1953772231, (double) 1953772231, (double) 1953772231, (double) 1953772231);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test7()  throws Throwable  {
      NeuralNetwork.ActivationFunction neuralNetwork_ActivationFunction0 = NeuralNetwork.ActivationFunction.TANH;
      double double0 = neuralNetwork_ActivationFunction0.eval(0.0, 0.0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test8()  throws Throwable  {
      NeuralNetwork.ActivationFunction neuralNetwork_ActivationFunction0 = NeuralNetwork.ActivationFunction.IDENTITY;
      double double0 = neuralNetwork_ActivationFunction0.eval(0.3, 0.3, 0.3, (-529.3290056087261));
      assertEquals(0.3, double0, 0.01D);
  }

  @Test
  public void test9()  throws Throwable  {
      NeuralNetwork.ActivationFunction neuralNetwork_ActivationFunction0 = NeuralNetwork.ActivationFunction.ELLICOT;
      double double0 = neuralNetwork_ActivationFunction0.eval((-93.74545757786719), (-93.74545757786719), (-93.74545757786719), (-93.74545757786719));
      assertEquals((-0.9894454042909852), double0, 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      NeuralNetwork.ActivationFunction neuralNetwork_ActivationFunction0 = NeuralNetwork.ActivationFunction.COSINE;
      double double0 = neuralNetwork_ActivationFunction0.eval((-308.9798486974494), (-308.9798486974494), (-308.9798486974494), (-308.9798486974494));
      assertEquals(0.4502342634966595, double0, 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      NeuralNetwork.ActivationFunction neuralNetwork_ActivationFunction0 = NeuralNetwork.ActivationFunction.COSINE;
      String string0 = neuralNetwork_ActivationFunction0.toString();
      assertEquals("cosine", string0);
  }

  @Test
  public void test12()  throws Throwable  {
      NeuralNetwork.ActivationFunction neuralNetwork_ActivationFunction0 = NeuralNetwork.ActivationFunction.RADIALBASIS;
      double double0 = neuralNetwork_ActivationFunction0.eval((double) 1377883715, (double) 1377883715, (double) 1377883715, (double) 1377883715);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test13()  throws Throwable  {
      NeuralNetwork.ActivationFunction neuralNetwork_ActivationFunction0 = NeuralNetwork.ActivationFunction.ARCTAN;
      double double0 = neuralNetwork_ActivationFunction0.eval(0.0, 0.0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test14()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      NeuralNetwork.Neuron neuralNetwork_Neuron0 = new NeuralNetwork.Neuron((Element) iIOMetadataNode0, (NeuralNetwork.NeuralLayer) null);
      assertNotNull(neuralNetwork_Neuron0);
      
      String string0 = neuralNetwork_Neuron0.getID();
      assertNotNull(string0);
      assertEquals("Nueron () [bias:0.0]\n  con. (ID:weight): ", neuralNetwork_Neuron0.toString());
  }

  @Test
  public void test15()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("n9!<-bPx}Ci{,KJ");
      NeuralNetwork.NeuralInput neuralNetwork_NeuralInput0 = null;
      try {
        neuralNetwork_NeuralInput0 = new NeuralNetwork.NeuralInput((Element) iIOMetadataNode0, (MiningSchema) null);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * [NeuralInput] expecting just one derived field!
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      NeuralNetwork.Neuron neuralNetwork_Neuron0 = new NeuralNetwork.Neuron((Element) iIOMetadataNode0, (NeuralNetwork.NeuralLayer) null);
      assertNotNull(neuralNetwork_Neuron0);
      
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      try {
        neuralNetwork_Neuron0.getValue(hashMap0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test17()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      NeuralNetwork.Neuron neuralNetwork_Neuron0 = new NeuralNetwork.Neuron((Element) iIOMetadataNode0, (NeuralNetwork.NeuralLayer) null);
      assertNotNull(neuralNetwork_Neuron0);
      
      String string0 = neuralNetwork_Neuron0.toString();
      assertNotNull(string0);
      assertEquals("Nueron () [bias:0.0]\n  con. (ID:weight): ", string0);
  }

  @Test
  public void test18()  throws Throwable  {
      NeuralNetwork.ActivationFunction neuralNetwork_ActivationFunction0 = NeuralNetwork.ActivationFunction.THRESHOLD;
      double double0 = neuralNetwork_ActivationFunction0.eval((double) 1293132251, (double) 1293132251, (double) 1293132251, (double) 1293132251);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test19()  throws Throwable  {
      NeuralNetwork.ActivationFunction neuralNetwork_ActivationFunction0 = NeuralNetwork.ActivationFunction.THRESHOLD;
      double double0 = neuralNetwork_ActivationFunction0.eval((double) 1293132251, (-308.9798486974494), (double) 1293132251, (double) 1293132251);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test20()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("aegression");
      MiningSchema miningSchema0 = new MiningSchema((Element) iIOMetadataNode1, (Instances) null, (TransformationDictionary) null);
      NeuralNetwork neuralNetwork0 = null;
      try {
        neuralNetwork0 = new NeuralNetwork((Element) iIOMetadataNode0, (Instances) null, miningSchema0);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * [NeuralNetwork] no activation functon defined
         */
      }
  }
}
