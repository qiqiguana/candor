/*
 * This file was automatically generated by EvoSuite
 */

package weka.classifiers;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Enumeration;
import org.junit.BeforeClass;
import weka.classifiers.meta.CVParameterSelection;
import weka.classifiers.meta.CostSensitiveClassifier;

@RunWith(EvoSuiteRunner.class)
public class RandomizableSingleClassifierEnhancerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "The random number seed to be used.";
      stringArray0[1] = "The random number seed to be used.";
      stringArray0[2] = "If set to true, classifier may output additional info to the console.";
      stringArray0[3] = "If set to true, classifier may output additional info to the console.";
      stringArray0[4] = "The random number seed to be used.";
      stringArray0[5] = "If set to true, classifier may output additional info to the console.";
      costSensitiveClassifier0.setOptions(stringArray0);
      assertEquals(1, costSensitiveClassifier0.getSeed());
  }

  @Test
  public void test1()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      String string0 = costSensitiveClassifier0.seedTipText();
      assertEquals("The random number seed to be used.", string0);
      assertEquals(1, costSensitiveClassifier0.getSeed());
  }

  @Test
  public void test2()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      String[] stringArray0 = costSensitiveClassifier0.getOptions();
      assertNotNull(stringArray0);
      
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      cVParameterSelection0.setOptions(stringArray0);
      assertEquals(1, cVParameterSelection0.getSeed());
  }

  @Test
  public void test3()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Enumeration<Object> enumeration0 = costSensitiveClassifier0.listOptions();
      assertNotNull(enumeration0);
      assertEquals(1, costSensitiveClassifier0.getSeed());
  }
}
