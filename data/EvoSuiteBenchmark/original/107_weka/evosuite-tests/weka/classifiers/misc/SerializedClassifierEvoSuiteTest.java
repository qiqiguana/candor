/*
 * This file was automatically generated by EvoSuite
 */

package weka.classifiers.misc;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Enumeration;
import org.junit.BeforeClass;
import weka.classifiers.Classifier;
import weka.classifiers.functions.SGDText;
import weka.classifiers.misc.SerializedClassifier;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;

@RunWith(EvoSuiteRunner.class)
public class SerializedClassifierEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      String[] stringArray0 = serializedClassifier0.getOptions();
      serializedClassifier0.setOptions(stringArray0);
      assertEquals("No model loaded yet.", serializedClassifier0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      try {
        serializedClassifier0.buildClassifier((Instances) null);
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
        /*
         * /mnt/fastdata/ac1gf/SF110/dist/107_weka (Is a directory)
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      assertNotNull(serializedClassifier0);
      
      SGDText sGDText0 = new SGDText();
      serializedClassifier0.setModel((Classifier) sGDText0);
      Capabilities capabilities0 = serializedClassifier0.getCapabilities();
      assertEquals("Capabilities: [Nominal attributes, Binary attributes, Unary attributes, Empty nominal attributes, Numeric attributes, Date attributes, String attributes, Missing values, Binary class, Missing class values]\nDependencies: [Nominal attributes, Binary attributes, Unary attributes, Empty nominal attributes, Numeric attributes, Date attributes, String attributes, Relational attributes, Missing values, No class, Nominal class, Binary class, Unary class, Empty nominal class, Numeric class, Date class, String class, Relational class, Missing class values, Only multi-Instance data]\nmin # Instance: 0\n", capabilities0.toString());
      assertNotNull(capabilities0);
  }

  @Test
  public void test3()  throws Throwable  {
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      assertNotNull(serializedClassifier0);
      
      String string0 = serializedClassifier0.globalInfo();
      assertEquals("A wrapper around a serialized classifier model. This classifier loads a serialized models and uses it to make predictions.\n\nWarning: since the serialized model doesn't get changed, cross-validation cannot bet used with this classifier.", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      assertNotNull(serializedClassifier0);
      
      String string0 = serializedClassifier0.modelFileTipText();
      assertEquals("The serialized classifier model to use for predictions.", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      double[] doubleArray0 = new double[1];
      DenseInstance denseInstance0 = new DenseInstance(1915.861118554101, doubleArray0);
      try {
        serializedClassifier0.distributionForInstance((Instance) denseInstance0);
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
        /*
         * /mnt/fastdata/ac1gf/SF110/dist/107_weka (Is a directory)
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      assertNotNull(serializedClassifier0);
      
      String string0 = serializedClassifier0.getRevision();
      assertNotNull(string0);
      assertEquals("8034", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Classifier classifier0 = serializedClassifier0.getCurrentModel();
      assertNull(classifier0);
  }

  @Test
  public void test8()  throws Throwable  {
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Enumeration<Object> enumeration0 = serializedClassifier0.listOptions();
      assertEquals(true, enumeration0.hasMoreElements());
  }

  @Test
  public void test9()  throws Throwable  {
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.setDebug(true);
      String[] stringArray0 = serializedClassifier0.getOptions();
      assertNotNull(stringArray0);
  }

  @Test
  public void test10()  throws Throwable  {
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      String[] stringArray0 = new String[26];
      stringArray0[4] = "kaDnTe3";
      stringArray0[6] = "kaDnTe3";
      stringArray0[8] = "kaDnTe3";
      stringArray0[21] = "kaDnTe3";
      stringArray0[1] = "kaDnTe3";
      stringArray0[3] = "kaDnTe3";
      stringArray0[5] = "kaDnTe3";
      stringArray0[7] = "kaDnTe3";
      stringArray0[9] = "kaDnTe3";
      stringArray0[10] = "kaDnTe3";
      stringArray0[11] = "kaDnTe3";
      stringArray0[12] = "kaDnTe3";
      stringArray0[13] = "kaDnTe3";
      stringArray0[14] = "kaDnTe3";
      stringArray0[15] = "kaDnTe3";
      stringArray0[16] = "kaDnTe3";
      stringArray0[17] = "kaDnTe3";
      stringArray0[18] = "kaDnTe3";
      stringArray0[19] = "kaDnTe3";
      stringArray0[20] = "kaDnTe3";
      stringArray0[22] = "kaDnTe3";
      stringArray0[23] = "kaDnTe3";
      stringArray0[24] = "kaDnTe3";
      stringArray0[25] = "kaDnTe3";
      stringArray0[0] = "kaDnTe3";
      stringArray0[2] = "kaDnTe3";
      serializedClassifier0.setOptions(stringArray0);
      assertEquals("8034", serializedClassifier0.getRevision());
  }

  @Test
  public void test11()  throws Throwable  {
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      assertNotNull(serializedClassifier0);
      
      File file0 = new File("If set to true, classifier may output additional info to the console.");
      serializedClassifier0.setModelFile(file0);
      Capabilities capabilities0 = serializedClassifier0.getCapabilities();
      assertEquals("Capabilities: []\nDependencies: [Nominal attributes, Binary attributes, Unary attributes, Empty nominal attributes, Numeric attributes, Date attributes, String attributes, Relational attributes, Missing values, No class, Nominal class, Binary class, Unary class, Empty nominal class, Numeric class, Date class, String class, Relational class, Missing class values, Only multi-Instance data]\nmin # Instance: 1\n", capabilities0.toString());
      assertNotNull(capabilities0);
  }

  @Test
  public void test12()  throws Throwable  {
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      double[] doubleArray0 = new double[1];
      serializedClassifier0.setModel((Classifier) serializedClassifier0);
      DenseInstance denseInstance0 = new DenseInstance(1915.861118554101, doubleArray0);
      // Undeclared exception!
      try {
        serializedClassifier0.distributionForInstance((Instance) denseInstance0);
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      assertNotNull(serializedClassifier0);
      
      Capabilities capabilities0 = serializedClassifier0.getCapabilities();
      assertNotNull(capabilities0);
      assertEquals("Capabilities: []\nDependencies: [Nominal attributes, Binary attributes, Unary attributes, Empty nominal attributes, Numeric attributes, Date attributes, String attributes, Relational attributes, Missing values, No class, Nominal class, Binary class, Unary class, Empty nominal class, Numeric class, Date class, String class, Relational class, Missing class values, Only multi-Instance data]\nmin # Instance: 1\n", capabilities0.toString());
  }

  @Test
  public void test14()  throws Throwable  {
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.setModel((Classifier) serializedClassifier0);
      // Undeclared exception!
      try {
        serializedClassifier0.toString();
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }

  @Test
  public void test15()  throws Throwable  {
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      assertNotNull(serializedClassifier0);
      
      String string0 = serializedClassifier0.toString();
      assertEquals("No model loaded yet.", string0);
      assertNotNull(string0);
  }
}
