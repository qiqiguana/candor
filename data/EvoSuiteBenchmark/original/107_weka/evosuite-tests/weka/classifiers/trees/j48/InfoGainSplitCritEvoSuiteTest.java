/*
 * This file was automatically generated by EvoSuite
 */

package weka.classifiers.trees.j48;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import weka.classifiers.trees.j48.Distribution;
import weka.classifiers.trees.j48.InfoGainSplitCrit;

@RunWith(EvoSuiteRunner.class)
public class InfoGainSplitCritEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      InfoGainSplitCrit infoGainSplitCrit0 = new InfoGainSplitCrit();
      String string0 = infoGainSplitCrit0.getRevision();
      assertEquals("8034", string0);
      assertNotNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      InfoGainSplitCrit infoGainSplitCrit0 = new InfoGainSplitCrit();
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[8];
      doubleArray1[4] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      Distribution distribution0 = new Distribution(doubleArray0);
      double double0 = infoGainSplitCrit0.splitCritValue(distribution0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test2()  throws Throwable  {
      InfoGainSplitCrit infoGainSplitCrit0 = new InfoGainSplitCrit();
      Distribution distribution0 = new Distribution(0, 0);
      double double0 = infoGainSplitCrit0.splitCritValue(distribution0);
      assertEquals(1.7976931348623157E308, double0, 0.01D);
  }

  @Test
  public void test3()  throws Throwable  {
      InfoGainSplitCrit infoGainSplitCrit0 = new InfoGainSplitCrit();
      double[][] doubleArray0 = new double[1][1];
      Distribution distribution0 = new Distribution(doubleArray0);
      double double0 = infoGainSplitCrit0.splitCritValue(distribution0, (double) 0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test4()  throws Throwable  {
      InfoGainSplitCrit infoGainSplitCrit0 = new InfoGainSplitCrit();
      Distribution distribution0 = new Distribution(22, 875);
      double double0 = infoGainSplitCrit0.splitCritValue(distribution0, (double) 875);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test5()  throws Throwable  {
      InfoGainSplitCrit infoGainSplitCrit0 = new InfoGainSplitCrit();
      Distribution distribution0 = new Distribution(0, 0);
      double double0 = infoGainSplitCrit0.splitCritValue(distribution0, (double) 0, (double) 0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test6()  throws Throwable  {
      InfoGainSplitCrit infoGainSplitCrit0 = new InfoGainSplitCrit();
      double[][] doubleArray0 = new double[1][1];
      Distribution distribution0 = new Distribution(doubleArray0);
      double double0 = infoGainSplitCrit0.splitCritValue(distribution0, (-670.9463975844382), 0.0);
      assertEquals(0.0, double0, 0.01D);
  }
}
