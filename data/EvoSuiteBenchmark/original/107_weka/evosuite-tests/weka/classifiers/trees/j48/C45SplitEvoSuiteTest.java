/*
 * This file was automatically generated by EvoSuite
 */

package weka.classifiers.trees.j48;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.ArrayList;
import org.junit.BeforeClass;
import weka.classifiers.trees.j48.C45Split;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.UnassignedClassException;

@RunWith(EvoSuiteRunner.class)
public class C45SplitEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      C45Split c45Split0 = new C45Split(1, 1, (double) 1, true);
      // Undeclared exception!
      try {
        c45Split0.leftSide((Instances) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      C45Split c45Split0 = new C45Split(0, (-3), (double) 0, true);
      double double0 = c45Split0.gainRatio();
      assertEquals(0, c45Split0.attIndex());
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test2()  throws Throwable  {
      C45Split c45Split0 = new C45Split((-473), (-473), (double) (-473), false);
      double double0 = c45Split0.splitPoint();
      assertEquals(0.0, double0, 0.01D);
      assertEquals(-473, c45Split0.attIndex());
  }

  @Test
  public void test3()  throws Throwable  {
      C45Split c45Split0 = new C45Split((-473), (-473), (double) (-473), false);
      double double0 = c45Split0.codingCost();
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      assertEquals(-473, c45Split0.attIndex());
  }

  @Test
  public void test4()  throws Throwable  {
      C45Split c45Split0 = new C45Split((-473), (-473), (double) (-473), false);
      double double0 = c45Split0.infoGain();
      assertEquals(0.0, double0, 0.01D);
      assertEquals(-473, c45Split0.attIndex());
  }

  @Test
  public void test5()  throws Throwable  {
      C45Split c45Split0 = new C45Split(1, 1, (double) 1, true);
      int int0 = c45Split0.attIndex();
      assertEquals(1, int0);
  }

  @Test
  public void test6()  throws Throwable  {
      C45Split c45Split0 = new C45Split(1, 0, (double) 1, false);
      String string0 = c45Split0.getRevision();
      assertEquals("8034", string0);
      assertEquals(1, c45Split0.attIndex());
      assertNotNull(string0);
  }

  @Test
  public void test7()  throws Throwable  {
      C45Split c45Split0 = new C45Split(0, 0, (double) 0, true);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("K");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("K", arrayList0, 0);
      try {
        c45Split0.buildClassifier(instances0);
        fail("Expecting exception: UnassignedClassException");
      } catch(UnassignedClassException e) {
        /*
         * Class index is negative (not set)!
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      C45Split c45Split0 = new C45Split(25, 25, (-1.0), true);
      SparseInstance sparseInstance0 = new SparseInstance(512);
      try {
        c45Split0.classProb(1127, (Instance) sparseInstance0, 1127);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      C45Split c45Split0 = new C45Split(0, 0, (double) 0, true);
      DenseInstance denseInstance0 = new DenseInstance(1315);
      double double0 = c45Split0.classProb(0, (Instance) denseInstance0, (-1718));
      assertEquals(0, c45Split0.attIndex());
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      C45Split c45Split0 = new C45Split(894, 894, (double) 894, false);
      double[] doubleArray0 = new double[23];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1814.8939203706334), doubleArray0);
      try {
        c45Split0.classProb(1127, (Instance) binarySparseInstance0, (-1557));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      C45Split c45Split0 = new C45Split(0, 18, (double) 18, true);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("K");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("K", arrayList0, 1127);
      String string0 = c45Split0.rightSide(1672, instances0);
      assertEquals(" > 0", string0);
      assertNotNull(string0);
  }

  @Test
  public void test12()  throws Throwable  {
      C45Split c45Split0 = new C45Split(0, (-3), (double) 0, true);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("K");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("K", arrayList0, 18);
      String string0 = c45Split0.rightSide(0, instances0);
      assertEquals(" <= 0", string0);
      assertNotNull(string0);
  }

  @Test
  public void test13()  throws Throwable  {
      C45Split c45Split0 = new C45Split((-1957), (-1957), (double) (-1957), false);
      String string0 = c45Split0.sourceExpression((-1957), (Instances) null);
      assertEquals("i[-1957] == null", string0);
      assertNotNull(string0);
  }

  @Test
  public void test14()  throws Throwable  {
      C45Split c45Split0 = new C45Split(0, 18, (double) 18, true);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("K");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("K", arrayList0, 1127);
      String string0 = c45Split0.sourceExpression(334, instances0);
      assertNotNull(string0);
      assertEquals("((Double) i[0]).doubleValue() > 0.0", string0);
  }

  @Test
  public void test15()  throws Throwable  {
      C45Split c45Split0 = new C45Split(0, (-3), (double) 0, true);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("K");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("K", arrayList0, 18);
      String string0 = c45Split0.sourceExpression(0, instances0);
      assertNotNull(string0);
      assertEquals("((Double) i[0]).doubleValue() <= 0.0", string0);
  }

  @Test
  public void test16()  throws Throwable  {
      C45Split c45Split0 = new C45Split(0, 18, (double) 18, true);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("K");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("K", arrayList0, 1127);
      c45Split0.setSplitPoint(instances0);
      assertEquals(0, c45Split0.attIndex());
      assertEquals(0.0, c45Split0.splitPoint(), 0.01D);
  }

  @Test
  public void test17()  throws Throwable  {
      C45Split c45Split0 = new C45Split(0, 18, (double) 18, true);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("K");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("K", arrayList0, 1127);
      double[][] doubleArray0 = new double[10][4];
      arrayList0.add(attribute0);
      double[][] doubleArray1 = c45Split0.minsAndMaxs(instances0, doubleArray0, 0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, c45Split0.attIndex());
  }

  @Test
  public void test18()  throws Throwable  {
      C45Split c45Split0 = new C45Split(0, 0, (double) 0, true);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("K");
      Instances instances0 = new Instances("K", arrayList0, 1127);
      arrayList0.add(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      instances0.add((Instance) binarySparseInstance0);
      try {
        c45Split0.resetDistribution(instances0);
        fail("Expecting exception: UnassignedClassException");
      } catch(UnassignedClassException e) {
        /*
         * Class index is negative (not set)!
         */
      }
  }

  @Test
  public void test19()  throws Throwable  {
      C45Split c45Split0 = new C45Split(25, 25, (double) 25, false);
      SparseInstance sparseInstance0 = new SparseInstance(512);
      try {
        c45Split0.classifyInstance((Instance) sparseInstance0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test20()  throws Throwable  {
      C45Split c45Split0 = new C45Split(0, 18, (double) 18, true);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("", arrayList0, 18);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(18);
      instances0.add((Instance) binarySparseInstance0);
      try {
        c45Split0.resetDistribution(instances0);
        fail("Expecting exception: UnassignedClassException");
      } catch(UnassignedClassException e) {
        /*
         * Class index is negative (not set)!
         */
      }
  }
}
