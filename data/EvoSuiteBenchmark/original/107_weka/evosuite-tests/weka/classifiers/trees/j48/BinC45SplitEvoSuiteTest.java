/*
 * This file was automatically generated by EvoSuite
 */

package weka.classifiers.trees.j48;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.ArrayList;
import org.junit.BeforeClass;
import weka.classifiers.trees.j48.BinC45Split;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.UnassignedClassException;

@RunWith(EvoSuiteRunner.class)
public class BinC45SplitEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BinC45Split binC45Split0 = new BinC45Split(234, (-837), (double) 234, true);
      double double0 = binC45Split0.splitPoint();
      assertEquals(234, binC45Split0.attIndex());
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test1()  throws Throwable  {
      BinC45Split binC45Split0 = new BinC45Split((-13), (-13), (double) (-13), true);
      double double0 = binC45Split0.infoGain();
      assertEquals(0.0, double0, 0.01D);
      assertEquals(-13, binC45Split0.attIndex());
  }

  @Test
  public void test2()  throws Throwable  {
      BinC45Split binC45Split0 = new BinC45Split(1282, 1282, (double) 1282, false);
      double double0 = binC45Split0.gainRatio();
      assertEquals(0.0, double0, 0.01D);
      assertEquals(1282, binC45Split0.attIndex());
  }

  @Test
  public void test3()  throws Throwable  {
      BinC45Split binC45Split0 = new BinC45Split((-13), (-13), (double) (-13), true);
      int int0 = binC45Split0.attIndex();
      assertEquals((-13), int0);
  }

  @Test
  public void test4()  throws Throwable  {
      BinC45Split binC45Split0 = new BinC45Split(19, 19, (double) 19, false);
      String string0 = binC45Split0.getRevision();
      assertNotNull(string0);
      assertEquals("8034", string0);
      assertEquals(19, binC45Split0.attIndex());
  }

  @Test
  public void test5()  throws Throwable  {
      BinC45Split binC45Split0 = new BinC45Split(334, 334, (double) 334, false);
      // Undeclared exception!
      try {
        binC45Split0.leftSide((Instances) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      BinC45Split binC45Split0 = new BinC45Split(234, (-837), (double) 234, true);
      SparseInstance sparseInstance0 = new SparseInstance(1009);
      try {
        binC45Split0.classProb(234, (Instance) sparseInstance0, 234);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      BinC45Split binC45Split0 = new BinC45Split((-13), (-13), (double) (-13), true);
      int[] intArray0 = new int[8];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((double) (-13), intArray0, 0);
      try {
        binC45Split0.classProb((-13), (Instance) binarySparseInstance0, (-13));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      BinC45Split binC45Split0 = new BinC45Split(234, (-837), (double) 234, true);
      SparseInstance sparseInstance0 = new SparseInstance(1009);
      binC45Split0.classProb((-837), (Instance) sparseInstance0, (-837));
  }

  @Test
  public void test9()  throws Throwable  {
      BinC45Split binC45Split0 = new BinC45Split((-947), (-947), (double) (-947), false);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Parameters firsF and/or toCopy out o!raVge", arrayList0, 102);
      // Undeclared exception!
      try {
        binC45Split0.sourceExpression(102, instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      BinC45Split binC45Split0 = new BinC45Split((-1309), (-1309), (double) (-1309), true);
      String string0 = binC45Split0.sourceExpression((-1309), (Instances) null);
      assertNotNull(string0);
      assertEquals("i[-1309] == null", string0);
  }

  @Test
  public void test11()  throws Throwable  {
      BinC45Split binC45Split0 = new BinC45Split(1282, 1282, (double) 1282, false);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("CO>HI:PL(XZ,5`#p g", arrayList0, 1282);
      try {
        binC45Split0.resetDistribution(instances0);
        fail("Expecting exception: UnassignedClassException");
      } catch(UnassignedClassException e) {
        /*
         * Class index is negative (not set)!
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      BinC45Split binC45Split0 = new BinC45Split(1279, 1279, (double) 1279, false);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("CO>HI:PL(XZ,5*#p g", arrayList0, 1279);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1279);
      instances0.add((Instance) binarySparseInstance0);
      try {
        binC45Split0.resetDistribution(instances0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 1279, Size: 0
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      BinC45Split binC45Split0 = new BinC45Split(234, (-837), (double) 234, true);
      SparseInstance sparseInstance0 = new SparseInstance(1009);
      binC45Split0.whichSubset((Instance) sparseInstance0);
  }
}
