/*
 * This file was automatically generated by EvoSuite
 */

package weka.classifiers.trees.j48;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.ArrayList;
import org.junit.BeforeClass;
import weka.classifiers.trees.j48.BinC45Split;
import weka.classifiers.trees.j48.Distribution;
import weka.classifiers.trees.j48.NBTreeNoSplit;
import weka.classifiers.trees.j48.NBTreeSplit;
import weka.classifiers.trees.j48.NoSplit;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;

@RunWith(EvoSuiteRunner.class)
public class ClassifierSplitModelEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      NBTreeSplit nBTreeSplit0 = new NBTreeSplit((-1194), (-1194), (-1194));
      try {
        nBTreeSplit0.resetDistribution((Instances) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      NBTreeNoSplit nBTreeNoSplit0 = new NBTreeNoSplit();
      try {
        nBTreeNoSplit0.sourceClass(717, (Instances) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      NBTreeSplit nBTreeSplit0 = new NBTreeSplit((-1194), (-1194), (-1194));
      NBTreeSplit nBTreeSplit1 = (NBTreeSplit)nBTreeSplit0.clone();
      assertNotSame(nBTreeSplit0, nBTreeSplit1);
  }

  @Test
  public void test3()  throws Throwable  {
      NBTreeSplit nBTreeSplit0 = new NBTreeSplit(1923, 1923, 1923);
      double double0 = nBTreeSplit0.codingCost();
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test4()  throws Throwable  {
      NBTreeNoSplit nBTreeNoSplit0 = new NBTreeNoSplit();
      Distribution distribution0 = nBTreeNoSplit0.distribution();
      assertNull(distribution0);
  }

  @Test
  public void test5()  throws Throwable  {
      NBTreeSplit nBTreeSplit0 = new NBTreeSplit((-1194), (-1194), (-1194));
      boolean boolean0 = nBTreeSplit0.checkModel();
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      NBTreeNoSplit nBTreeNoSplit0 = new NBTreeNoSplit();
      boolean boolean0 = nBTreeNoSplit0.checkModel();
      assertEquals(true, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      BinC45Split binC45Split0 = new BinC45Split(0, 105, (double) 0, false);
      DenseInstance denseInstance0 = new DenseInstance(105);
      try {
        binC45Split0.classifyInstance((Instance) denseInstance0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      NBTreeNoSplit nBTreeNoSplit0 = new NBTreeNoSplit();
      DenseInstance denseInstance0 = new DenseInstance((double) (-1542), doubleArray0);
      try {
        nBTreeNoSplit0.classifyInstance((Instance) denseInstance0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      DenseInstance denseInstance0 = new DenseInstance(85);
      Distribution distribution0 = new Distribution(0, 0);
      NoSplit noSplit0 = new NoSplit(distribution0);
      try {
        noSplit0.classProb(85, (Instance) denseInstance0, 85);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 85
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      DenseInstance denseInstance0 = new DenseInstance(85);
      BinC45Split binC45Split0 = new BinC45Split(0, 0, (double) (-1542), true);
      double double0 = binC45Split0.classProbLaplace(0, (Instance) denseInstance0, (-1542));
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      NBTreeNoSplit nBTreeNoSplit0 = new NBTreeNoSplit();
      double[] doubleArray0 = new double[3];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((double) 0, doubleArray0);
      try {
        nBTreeNoSplit0.classProbLaplace(0, (Instance) binarySparseInstance0, 0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      NBTreeNoSplit nBTreeNoSplit0 = new NBTreeNoSplit();
      double[] doubleArray0 = new double[7];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((double) (-3), doubleArray0);
      try {
        nBTreeNoSplit0.classProbLaplace((-3), (Instance) binarySparseInstance0, (-1542));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      NBTreeSplit nBTreeSplit0 = new NBTreeSplit((-1194), (-1194), (-1194));
      String string0 = nBTreeSplit0.dumpModel((Instances) null);
      assertEquals("", string0);
  }

  @Test
  public void test14()  throws Throwable  {
      NBTreeNoSplit nBTreeNoSplit0 = new NBTreeNoSplit();
      try {
        nBTreeNoSplit0.dumpModel((Instances) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test15()  throws Throwable  {
      NBTreeNoSplit nBTreeNoSplit0 = new NBTreeNoSplit();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("-eE..", arrayList0, 0);
      double[] doubleArray0 = new double[3];
      DenseInstance denseInstance0 = new DenseInstance((double) 0, doubleArray0);
      instances0.add((Instance) denseInstance0);
      Instances[] instancesArray0 = nBTreeNoSplit0.split(instances0);
      assertNotNull(instancesArray0);
  }
}
