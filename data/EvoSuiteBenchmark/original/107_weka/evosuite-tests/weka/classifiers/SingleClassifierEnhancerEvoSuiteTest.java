/*
 * This file was automatically generated by EvoSuite
 */

package weka.classifiers;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Enumeration;
import org.junit.BeforeClass;
import weka.classifiers.Classifier;
import weka.classifiers.meta.CVParameterSelection;
import weka.classifiers.meta.ClassificationViaRegression;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.core.Capabilities;

@RunWith(EvoSuiteRunner.class)
public class SingleClassifierEnhancerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      String string0 = classificationViaRegression0.getClassifierSpec();
      assertNotNull(string0);
      assertEquals("weka.classifiers.trees.M5P -M 4.0", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "n'd3";
      cVParameterSelection0.setOptions(stringArray0);
      assertEquals("weka.classifiers.rules.ZeroR", cVParameterSelection0.defaultClassifierString());
  }

  @Test
  public void test2()  throws Throwable  {
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      String string0 = classificationViaRegression0.classifierTipText();
      assertEquals("The base classifier to be used.", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Enumeration<Object> enumeration0 = cVParameterSelection0.listOptions();
      assertEquals("weka.classifiers.rules.ZeroR", cVParameterSelection0.defaultClassifierString());
      assertNotNull(enumeration0);
  }

  @Test
  public void test4()  throws Throwable  {
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      String[] stringArray0 = classificationViaRegression0.getOptions();
      classificationViaRegression0.setOptions(stringArray0);
      assertEquals("Classification via Regression: No model built yet.", classificationViaRegression0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      String[] stringArray0 = costSensitiveClassifier0.getOptions();
      assertNotNull(stringArray0);
  }

  @Test
  public void test6()  throws Throwable  {
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      regressionByDiscretization0.setClassifier((Classifier) null);
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      assertEquals("Capabilities: [Numeric class, Date class]\nDependencies: [Nominal attributes, Binary attributes, Unary attributes, Empty nominal attributes, Numeric attributes, Date attributes, String attributes, Relational attributes, Missing values, No class, Missing class values, Only multi-Instance data]\nmin # Instance: 2\n", capabilities0.toString());
      assertNotNull(capabilities0);
  }

  @Test
  public void test7()  throws Throwable  {
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      Capabilities capabilities0 = classificationViaRegression0.getCapabilities();
      assertNotNull(capabilities0);
      assertEquals("Capabilities: [Nominal attributes, Binary attributes, Unary attributes, Empty nominal attributes, Numeric attributes, Date attributes, Missing values, Nominal class, Binary class, Missing class values]\nDependencies: [Nominal attributes, Binary attributes, Unary attributes, Empty nominal attributes, Numeric attributes, Date attributes, String attributes, Relational attributes, Missing values, No class, Missing class values, Only multi-Instance data]\nmin # Instance: 1\n", capabilities0.toString());
  }
}
