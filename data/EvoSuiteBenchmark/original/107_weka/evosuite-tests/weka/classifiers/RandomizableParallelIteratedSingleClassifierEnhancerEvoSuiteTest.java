/*
 * This file was automatically generated by EvoSuite
 */

package weka.classifiers;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Enumeration;
import org.junit.BeforeClass;
import weka.classifiers.meta.Bagging;
import weka.classifiers.meta.RandomCommittee;
import weka.classifiers.meta.RandomSubSpace;

@RunWith(EvoSuiteRunner.class)
public class RandomizableParallelIteratedSingleClassifierEnhancerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Bagging bagging0 = new Bagging();
      String string0 = bagging0.seedTipText();
      assertEquals("The random number seed to be used.", string0);
      assertEquals(1, bagging0.getSeed());
  }

  @Test
  public void test1()  throws Throwable  {
      RandomCommittee randomCommittee0 = new RandomCommittee();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "09zBH";
      randomCommittee0.setOptions(stringArray0);
      assertEquals(1, randomCommittee0.getSeed());
  }

  @Test
  public void test2()  throws Throwable  {
      Bagging bagging0 = new Bagging();
      Enumeration<Object> enumeration0 = bagging0.listOptions();
      assertNotNull(enumeration0);
      assertEquals(1, bagging0.getSeed());
  }

  @Test
  public void test3()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      String[] stringArray0 = randomSubSpace0.getOptions();
      assertNotNull(stringArray0);
      
      randomSubSpace0.setOptions(stringArray0);
      assertEquals(1, randomSubSpace0.getSeed());
  }
}
