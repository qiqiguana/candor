/*
 * This file was automatically generated by EvoSuite
 */

package weka.classifiers.bayes.net.search.global;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.ArrayList;
import java.util.Enumeration;
import org.junit.BeforeClass;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.net.search.global.HillClimber;
import weka.core.Attribute;
import weka.core.Instances;

@RunWith(EvoSuiteRunner.class)
public class HillClimberEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      HillClimber hillClimber0 = new HillClimber();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 132);
      HillClimber.Operation hillClimber_Operation0 = hillClimber0.getOptimalOperation((BayesNet) null, instances0);
      assertEquals(false, hillClimber0.getUseArcReversal());
      assertNull(hillClimber_Operation0);
  }

  @Test
  public void test1()  throws Throwable  {
      HillClimber hillClimber0 = new HillClimber();
      HillClimber.Operation hillClimber_Operation0 = hillClimber0.new Operation();
      String string0 = hillClimber_Operation0.getRevision();
      assertEquals(false, hillClimber0.m_bUseArcReversal);
      assertNotNull(string0);
      assertEquals((-1.0E100), hillClimber_Operation0.m_fScore, 0.01D);
      assertEquals("8034", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      HillClimber hillClimber0 = new HillClimber();
      HillClimber.Operation hillClimber_Operation0 = hillClimber0.new Operation(3, 3, 3);
      boolean boolean0 = hillClimber_Operation0.equals((HillClimber.Operation) null);
      assertEquals(3, hillClimber_Operation0.m_nTail);
      assertEquals(false, hillClimber0.m_bUseArcReversal);
      assertEquals(3, hillClimber_Operation0.m_nOperation);
      assertEquals(3, hillClimber_Operation0.m_nHead);
      assertEquals((-1.0E100), hillClimber_Operation0.m_fScore, 0.01D);
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      HillClimber hillClimber0 = new HillClimber();
      String string0 = hillClimber0.globalInfo();
      assertEquals(false, hillClimber0.m_bUseArcReversal);
      assertEquals("This Bayes Network learning algorithm uses a hill climbing algorithm adding, deleting and reversing arcs. The search is not restricted by an order on the variables (unlike K2). The difference with B and B2 is that this hill climber also considers arrows part of the naive Bayes structure for deletion.", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      HillClimber hillClimber0 = new HillClimber();
      String[] stringArray0 = new String[10];
      stringArray0[0] = "\nMatlab-Format\n";
      stringArray0[1] = "\nMatlab-Format\n";
      stringArray0[2] = "\nMatlab-Format\n";
      stringArray0[3] = "\nMatlab-Format\n";
      stringArray0[4] = "\nMatlab-Format\n";
      stringArray0[5] = "\nMatlab-Format\n";
      stringArray0[6] = "\nMatlab-Format\n";
      stringArray0[7] = "\nMatlab-Format\n";
      stringArray0[8] = "\nMatlab-Format\n";
      stringArray0[9] = "\nMatlab-Format\n";
      hillClimber0.setOptions(stringArray0);
      assertEquals(100000, hillClimber0.getMaxNrOfParents());
  }

  @Test
  public void test5()  throws Throwable  {
      HillClimber hillClimber0 = new HillClimber();
      int int0 = hillClimber0.getMaxNrOfParents();
      assertEquals(false, hillClimber0.m_bUseArcReversal);
      assertEquals(1, int0);
  }

  @Test
  public void test6()  throws Throwable  {
      HillClimber hillClimber0 = new HillClimber();
      HillClimber.Operation hillClimber_Operation0 = hillClimber0.new Operation();
      boolean boolean0 = hillClimber0.isNotTabu(hillClimber_Operation0);
      assertEquals((-1.0E100), hillClimber_Operation0.m_fScore, 0.01D);
      assertEquals(true, boolean0);
      assertEquals(false, hillClimber0.m_bUseArcReversal);
  }

  @Test
  public void test7()  throws Throwable  {
      HillClimber hillClimber0 = new HillClimber();
      String string0 = hillClimber0.useArcReversalTipText();
      assertEquals(false, hillClimber0.m_bUseArcReversal);
      assertEquals("When set to true, the arc reversal operation is used in the search.", string0);
  }

  @Test
  public void test8()  throws Throwable  {
      HillClimber hillClimber0 = new HillClimber();
      BayesNet bayesNet0 = new BayesNet();
      // Undeclared exception!
      try {
        hillClimber0.applyArcDeletion(bayesNet0, (-1942), (-1942), (Instances) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      HillClimber hillClimber0 = new HillClimber();
      String string0 = hillClimber0.getRevision();
      assertEquals("8034", string0);
      assertEquals(false, hillClimber0.m_bUseArcReversal);
      assertNotNull(string0);
  }

  @Test
  public void test10()  throws Throwable  {
      HillClimber hillClimber0 = new HillClimber();
      BayesNet bayesNet0 = new BayesNet();
      HillClimber.Operation hillClimber_Operation0 = hillClimber0.new Operation();
      try {
        hillClimber0.performOperation(bayesNet0, (Instances) null, hillClimber_Operation0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      HillClimber hillClimber0 = new HillClimber();
      HillClimber.Operation hillClimber_Operation0 = hillClimber0.new Operation(32, 32, 32);
      boolean boolean0 = hillClimber_Operation0.equals(hillClimber_Operation0);
      assertEquals(true, boolean0);
      assertEquals(32, hillClimber_Operation0.m_nHead);
      assertEquals(32, hillClimber_Operation0.m_nOperation);
      assertEquals(32, hillClimber_Operation0.m_nTail);
      assertEquals(false, hillClimber0.m_bUseArcReversal);
      assertEquals((-1.0E100), hillClimber_Operation0.m_fScore, 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      HillClimber hillClimber0 = new HillClimber();
      HillClimber.Operation hillClimber_Operation0 = hillClimber0.new Operation(32, 32, 32);
      HillClimber.Operation hillClimber_Operation1 = hillClimber0.new Operation();
      boolean boolean0 = hillClimber_Operation0.equals(hillClimber_Operation1);
      assertEquals(false, boolean0);
      assertEquals((-1.0E100), hillClimber_Operation0.m_fScore, 0.01D);
      assertEquals(32, hillClimber_Operation0.m_nTail);
      assertEquals(false, hillClimber0.m_bUseArcReversal);
      assertEquals((-1.0E100), hillClimber_Operation1.m_fScore, 0.01D);
      assertEquals(32, hillClimber_Operation0.m_nOperation);
      assertEquals(32, hillClimber_Operation0.m_nHead);
  }

  @Test
  public void test13()  throws Throwable  {
      HillClimber hillClimber0 = new HillClimber();
      HillClimber.Operation hillClimber_Operation0 = hillClimber0.new Operation(32, 32, 32);
      HillClimber.Operation hillClimber_Operation1 = hillClimber0.new Operation(32, 100, 32);
      boolean boolean0 = hillClimber_Operation0.equals(hillClimber_Operation1);
      assertEquals((-1.0E100), hillClimber_Operation0.m_fScore, 0.01D);
      assertEquals(32, hillClimber_Operation0.m_nHead);
      assertEquals(false, boolean0);
      assertEquals(false, hillClimber0.m_bUseArcReversal);
      assertEquals(32, hillClimber_Operation1.m_nOperation);
      assertEquals(32, hillClimber_Operation1.m_nTail);
  }

  @Test
  public void test14()  throws Throwable  {
      HillClimber hillClimber0 = new HillClimber();
      HillClimber.Operation hillClimber_Operation0 = hillClimber0.new Operation((-1581), 0, 0);
      HillClimber.Operation hillClimber_Operation1 = hillClimber0.new Operation(0, 0, 0);
      boolean boolean0 = hillClimber_Operation0.equals(hillClimber_Operation1);
      assertEquals(0, hillClimber_Operation0.m_nHead);
      assertEquals(false, boolean0);
      assertEquals((-1.0E100), hillClimber_Operation1.m_fScore, 0.01D);
      assertEquals(0, hillClimber_Operation0.m_nOperation);
      assertEquals((-1581), hillClimber_Operation0.m_nTail);
  }

  @Test
  public void test15()  throws Throwable  {
      HillClimber hillClimber0 = new HillClimber();
      assertEquals(false, hillClimber0.m_bUseArcReversal);
      
      hillClimber0.setUseArcReversal(true);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("8>", arrayList0, 122);
      hillClimber0.getOptimalOperation((BayesNet) null, instances0);
      assertEquals(true, hillClimber0.m_bUseArcReversal);
      assertEquals(true, hillClimber0.getUseArcReversal());
  }

  @Test
  public void test16()  throws Throwable  {
      HillClimber hillClimber0 = new HillClimber();
      HillClimber.Operation hillClimber_Operation0 = hillClimber0.new Operation(3, 3, 3);
      BayesNet bayesNet0 = new BayesNet();
      hillClimber0.performOperation(bayesNet0, (Instances) null, hillClimber_Operation0);
      assertEquals(3, hillClimber_Operation0.m_nOperation);
      assertEquals(3, hillClimber_Operation0.m_nHead);
      assertEquals((-1.0E100), hillClimber_Operation0.m_fScore, 0.01D);
      assertEquals(3, hillClimber_Operation0.m_nTail);
      assertEquals(false, hillClimber0.m_bUseArcReversal);
  }

  @Test
  public void test17()  throws Throwable  {
      HillClimber hillClimber0 = new HillClimber();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 132);
      Attribute attribute0 = new Attribute("", "");
      arrayList0.add(attribute0);
      try {
        hillClimber0.findBestArcToReverse((BayesNet) null, instances0, (HillClimber.Operation) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test18()  throws Throwable  {
      HillClimber hillClimber0 = new HillClimber();
      Enumeration<Object> enumeration0 = hillClimber0.listOptions();
      assertEquals(false, hillClimber0.m_bUseArcReversal);
      assertNotNull(enumeration0);
      assertEquals(false, hillClimber0.getUseArcReversal());
  }

  @Test
  public void test19()  throws Throwable  {
      HillClimber hillClimber0 = new HillClimber();
      assertEquals(true, hillClimber0.getInitAsNaiveBayes());
      
      hillClimber0.setInitAsNaiveBayes(false);
      String[] stringArray0 = hillClimber0.getOptions();
      hillClimber0.setOptions(stringArray0);
      assertEquals(false, hillClimber0.getInitAsNaiveBayes());
      assertEquals(1, hillClimber0.getMaxNrOfParents());
  }

  @Test
  public void test20()  throws Throwable  {
      HillClimber hillClimber0 = new HillClimber();
      assertEquals(false, hillClimber0.m_bUseArcReversal);
      
      hillClimber0.setUseArcReversal(true);
      hillClimber0.getOptions();
      assertEquals(true, hillClimber0.m_bUseArcReversal);
      assertEquals(true, hillClimber0.getInitAsNaiveBayes());
  }
}
