/*
 * This file was automatically generated by EvoSuite
 */

package weka.classifiers.bayes.net.search.global;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Enumeration;
import org.junit.BeforeClass;
import weka.classifiers.bayes.net.search.global.K2;

@RunWith(EvoSuiteRunner.class)
public class K2EvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      K2 k2_0 = new K2();
      k2_0.setOptions((String[]) null);
      assertEquals(100000, k2_0.getMaxNrOfParents());
      assertEquals(false, k2_0.getRandomOrder());
  }

  @Test
  public void test1()  throws Throwable  {
      K2 k2_0 = new K2();
      int int0 = k2_0.getMaxNrOfParents();
      assertEquals(false, k2_0.m_bRandomOrder);
      assertEquals(1, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      K2 k2_0 = new K2();
      String string0 = k2_0.globalInfo();
      assertNotNull(string0);
      assertEquals(false, k2_0.m_bRandomOrder);
      assertEquals("This Bayes Network learning algorithm uses a hill climbing algorithm restricted by an order on the variables.\n\nFor more information see:\n\nG.F. Cooper, E. Herskovits (1990). A Bayesian method for constructing Bayesian belief networks from databases.\n\nG. Cooper, E. Herskovits (1992). A Bayesian method for the induction of probabilistic networks from data. Machine Learning. 9(4):309-347.\n\nWorks with nominal variables and no missing values only.", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      K2 k2_0 = new K2();
      String string0 = k2_0.getRevision();
      assertEquals("8034", string0);
      assertEquals(false, k2_0.m_bRandomOrder);
      assertNotNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      K2 k2_0 = new K2();
      String string0 = k2_0.randomOrderTipText();
      assertEquals("When set to true, the order of the nodes in the network is random. Default random order is false and the order of the nodes in the dataset is used. In any case, when the network was initialized as Naive Bayes Network, the class variable is first in the ordering though.", string0);
      assertEquals(false, k2_0.m_bRandomOrder);
  }

  @Test
  public void test5()  throws Throwable  {
      K2 k2_0 = new K2();
      boolean boolean0 = k2_0.getInitAsNaiveBayes();
      assertEquals(true, boolean0);
      assertEquals(false, k2_0.m_bRandomOrder);
  }

  @Test
  public void test6()  throws Throwable  {
      K2 k2_0 = new K2();
      k2_0.setInitAsNaiveBayes(false);
      String[] stringArray0 = k2_0.getOptions();
      k2_0.setOptions(stringArray0);
      assertEquals(false, k2_0.getInitAsNaiveBayes());
  }

  @Test
  public void test7()  throws Throwable  {
      K2 k2_0 = new K2();
      Enumeration<Object> enumeration0 = k2_0.listOptions();
      assertNotNull(enumeration0);
      assertEquals(false, k2_0.m_bRandomOrder);
      assertEquals(false, k2_0.getRandomOrder());
  }

  @Test
  public void test8()  throws Throwable  {
      K2 k2_0 = new K2();
      assertEquals(false, k2_0.m_bRandomOrder);
      
      k2_0.setRandomOrder(true);
      k2_0.getOptions();
      assertEquals(true, k2_0.m_bRandomOrder);
      assertEquals(true, k2_0.getRandomOrder());
  }
}
