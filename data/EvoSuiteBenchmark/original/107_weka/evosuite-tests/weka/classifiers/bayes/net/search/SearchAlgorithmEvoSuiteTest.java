/*
 * This file was automatically generated by EvoSuite
 */

package weka.classifiers.bayes.net.search;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.ArrayList;
import java.util.Enumeration;
import org.junit.BeforeClass;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.net.search.SearchAlgorithm;
import weka.classifiers.bayes.net.search.local.K2;
import weka.core.Attribute;
import weka.core.Instances;

@RunWith(EvoSuiteRunner.class)
public class SearchAlgorithmEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SearchAlgorithm searchAlgorithm0 = new SearchAlgorithm();
      Enumeration<Object> enumeration0 = searchAlgorithm0.listOptions();
      assertEquals(false, searchAlgorithm0.getMarkovBlanketClassifier());
      assertNotNull(enumeration0);
  }

  @Test
  public void test1()  throws Throwable  {
      SearchAlgorithm searchAlgorithm0 = new SearchAlgorithm();
      String string0 = searchAlgorithm0.markovBlanketClassifierTipText();
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", string0);
      assertEquals(false, searchAlgorithm0.getMarkovBlanketClassifier());
  }

  @Test
  public void test2()  throws Throwable  {
      SearchAlgorithm searchAlgorithm0 = new SearchAlgorithm();
      String string0 = searchAlgorithm0.maxNrOfParentsTipText();
      assertEquals(false, searchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      SearchAlgorithm searchAlgorithm0 = new SearchAlgorithm();
      String[] stringArray0 = new String[6];
      searchAlgorithm0.setOptions(stringArray0);
      assertEquals(false, searchAlgorithm0.getMarkovBlanketClassifier());
  }

  @Test
  public void test4()  throws Throwable  {
      SearchAlgorithm searchAlgorithm0 = new SearchAlgorithm();
      assertEquals(false, searchAlgorithm0.getMarkovBlanketClassifier());
      
      searchAlgorithm0.setMarkovBlanketClassifier(true);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("SearchAlgorithm\n", arrayList0, 92);
      try {
        searchAlgorithm0.buildStructure((BayesNet) null, instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      SearchAlgorithm searchAlgorithm0 = new SearchAlgorithm();
      String string0 = searchAlgorithm0.initAsNaiveBayesTipText();
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", string0);
      assertEquals(false, searchAlgorithm0.getMarkovBlanketClassifier());
  }

  @Test
  public void test6()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      K2 k2_0 = (K2)bayesNet0.getSearchAlgorithm();
      k2_0.getOptions();
      assertEquals(false, k2_0.getMarkovBlanketClassifier());
      assertEquals(true, k2_0.getInitAsNaiveBayes());
      assertEquals(1, k2_0.getMaxNrOfParents());
  }

  @Test
  public void test7()  throws Throwable  {
      SearchAlgorithm searchAlgorithm0 = new SearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 15);
      searchAlgorithm0.buildStructure((BayesNet) null, instances0);
      assertEquals(false, searchAlgorithm0.getMarkovBlanketClassifier());
  }

  @Test
  public void test8()  throws Throwable  {
      SearchAlgorithm searchAlgorithm0 = new SearchAlgorithm();
      String string0 = searchAlgorithm0.toString();
      assertEquals(false, searchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("SearchAlgorithm\n", string0);
  }

  @Test
  public void test9()  throws Throwable  {
      SearchAlgorithm searchAlgorithm0 = new SearchAlgorithm();
      String string0 = searchAlgorithm0.getRevision();
      assertEquals(false, searchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("8034", string0);
      assertNotNull(string0);
  }

  @Test
  public void test10()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      K2 k2_0 = (K2)bayesNet0.getSearchAlgorithm();
      // Undeclared exception!
      try {
        k2_0.addArcMakesSense(bayesNet0, (Instances) null, 11, 26);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      SearchAlgorithm searchAlgorithm0 = new SearchAlgorithm();
      BayesNet bayesNet0 = new BayesNet();
      boolean boolean0 = searchAlgorithm0.addArcMakesSense(bayesNet0, (Instances) null, 1541, 1541);
      assertEquals(false, searchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      K2 k2_0 = (K2)bayesNet0.getSearchAlgorithm();
      // Undeclared exception!
      try {
        k2_0.reverseArcMakesSense(bayesNet0, (Instances) null, 501, Integer.MAX_VALUE);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      SearchAlgorithm searchAlgorithm0 = new SearchAlgorithm();
      BayesNet bayesNet0 = new BayesNet();
      boolean boolean0 = searchAlgorithm0.reverseArcMakesSense(bayesNet0, (Instances) null, 1541, 1541);
      assertEquals(false, boolean0);
      assertEquals(false, searchAlgorithm0.getMarkovBlanketClassifier());
  }

  @Test
  public void test14()  throws Throwable  {
      SearchAlgorithm searchAlgorithm0 = new SearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("6", 1057);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("6", arrayList0, 1057);
      try {
        searchAlgorithm0.buildStructure((BayesNet) null, instances0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
