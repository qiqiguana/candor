/*
 * This file was automatically generated by EvoSuite
 */

package weka.classifiers.bayes.net.search.global;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Enumeration;
import org.evosuite.runtime.Random;
import org.junit.BeforeClass;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.net.search.global.GeneticSearch;
import weka.core.Instances;

@RunWith(EvoSuiteRunner.class)
public class GeneticSearchEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      GeneticSearch geneticSearch0 = new GeneticSearch();
      GeneticSearch.BayesNetRepresentation geneticSearch_BayesNetRepresentation0 = geneticSearch0.new BayesNetRepresentation(0);
      String string0 = geneticSearch_BayesNetRepresentation0.getRevision();
      assertEquals(false, geneticSearch0.m_bUseTournamentSelection);
      assertEquals(0, geneticSearch_BayesNetRepresentation0.m_nNodes);
      assertEquals(1, geneticSearch0.m_nSeed);
      assertEquals(true, geneticSearch0.m_bUseMutation);
      assertEquals(10, geneticSearch0.m_nRuns);
      assertEquals(100, geneticSearch0.m_nDescendantPopulationSize);
      assertEquals(10, geneticSearch0.m_nPopulationSize);
      assertNotNull(string0);
      assertEquals("8034", string0);
      assertEquals(0.0, geneticSearch_BayesNetRepresentation0.m_fScore, 0.01D);
      assertEquals(true, geneticSearch0.m_bUseCrossOver);
  }

  @Test
  public void test1()  throws Throwable  {
      GeneticSearch geneticSearch0 = new GeneticSearch();
      BayesNet bayesNet0 = new BayesNet();
      try {
        geneticSearch0.search(bayesNet0, (Instances) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      GeneticSearch geneticSearch0 = new GeneticSearch();
      String string0 = geneticSearch0.runsTipText();
      assertEquals(10, geneticSearch0.m_nRuns);
      assertEquals(10, geneticSearch0.m_nPopulationSize);
      assertEquals(true, geneticSearch0.m_bUseCrossOver);
      assertEquals(false, geneticSearch0.m_bUseTournamentSelection);
      assertEquals("Sets the number of generations of Bayes network structure populations.", string0);
      assertEquals(100, geneticSearch0.m_nDescendantPopulationSize);
      assertEquals(1, geneticSearch0.m_nSeed);
      assertEquals(true, geneticSearch0.m_bUseMutation);
  }

  @Test
  public void test3()  throws Throwable  {
      GeneticSearch geneticSearch0 = new GeneticSearch();
      String string0 = geneticSearch0.descendantPopulationSizeTipText();
      assertEquals("Sets the size of the population of descendants that is created each generation.", string0);
      assertEquals(100, geneticSearch0.m_nDescendantPopulationSize);
      assertEquals(10, geneticSearch0.m_nRuns);
      assertEquals(false, geneticSearch0.m_bUseTournamentSelection);
      assertEquals(true, geneticSearch0.m_bUseMutation);
      assertEquals(10, geneticSearch0.m_nPopulationSize);
      assertEquals(true, geneticSearch0.m_bUseCrossOver);
      assertEquals(1, geneticSearch0.m_nSeed);
  }

  @Test
  public void test4()  throws Throwable  {
      GeneticSearch geneticSearch0 = new GeneticSearch();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "jt`O+NO!rwH";
      stringArray0[2] = "";
      geneticSearch0.setOptions(stringArray0);
      assertEquals(false, geneticSearch0.m_bUseMutation);
      assertEquals(false, geneticSearch0.m_bUseCrossOver);
      assertEquals(10, geneticSearch0.getRuns());
  }

  @Test
  public void test5()  throws Throwable  {
      GeneticSearch geneticSearch0 = new GeneticSearch();
      String string0 = geneticSearch0.useCrossOverTipText();
      assertEquals(1, geneticSearch0.m_nSeed);
      assertEquals(true, geneticSearch0.m_bUseCrossOver);
      assertEquals(10, geneticSearch0.m_nRuns);
      assertEquals(100, geneticSearch0.m_nDescendantPopulationSize);
      assertEquals(false, geneticSearch0.m_bUseTournamentSelection);
      assertEquals("Determines whether cross-over is allowed. Cross over combined the bit representations of network structure by taking a random first k bits of oneand adding the remainder of the other. At least one of mutation or cross-over should be used.", string0);
      assertEquals(true, geneticSearch0.m_bUseMutation);
      assertEquals(10, geneticSearch0.m_nPopulationSize);
  }

  @Test
  public void test6()  throws Throwable  {
      GeneticSearch geneticSearch0 = new GeneticSearch();
      String string0 = geneticSearch0.useTournamentSelectionTipText();
      assertEquals(true, geneticSearch0.m_bUseMutation);
      assertEquals(10, geneticSearch0.m_nPopulationSize);
      assertEquals("Determines the method of selecting a population. When set to true, tournament selection is used (pick two at random and the highest is allowed to continue). When set to false, the top scoring network structures are selected.", string0);
      assertEquals(1, geneticSearch0.m_nSeed);
      assertEquals(true, geneticSearch0.m_bUseCrossOver);
      assertEquals(100, geneticSearch0.m_nDescendantPopulationSize);
      assertEquals(false, geneticSearch0.m_bUseTournamentSelection);
      assertEquals(10, geneticSearch0.m_nRuns);
  }

  @Test
  public void test7()  throws Throwable  {
      GeneticSearch geneticSearch0 = new GeneticSearch();
      String string0 = geneticSearch0.useMutationTipText();
      assertEquals(true, geneticSearch0.m_bUseCrossOver);
      assertEquals(true, geneticSearch0.m_bUseMutation);
      assertEquals(false, geneticSearch0.m_bUseTournamentSelection);
      assertEquals("Determines whether mutation is allowed. Mutation flips a bit in the bit representation of the network structure. At least one of mutation or cross-over should be used.", string0);
      assertEquals(100, geneticSearch0.m_nDescendantPopulationSize);
      assertEquals(10, geneticSearch0.m_nRuns);
      assertEquals(1, geneticSearch0.m_nSeed);
      assertEquals(10, geneticSearch0.m_nPopulationSize);
  }

  @Test
  public void test8()  throws Throwable  {
      GeneticSearch geneticSearch0 = new GeneticSearch();
      String[] stringArray0 = geneticSearch0.getOptions();
      assertNotNull(stringArray0);
      
      geneticSearch0.setOptions(stringArray0);
      assertEquals(10, geneticSearch0.m_nPopulationSize);
      assertEquals(true, geneticSearch0.m_bUseMutation);
      assertEquals(100, geneticSearch0.m_nDescendantPopulationSize);
      assertEquals(false, geneticSearch0.m_bUseTournamentSelection);
      assertEquals(10, geneticSearch0.m_nRuns);
      assertEquals(true, geneticSearch0.m_bUseCrossOver);
      assertEquals(1, geneticSearch0.m_nSeed);
      assertEquals(10, geneticSearch0.getPopulationSize());
  }

  @Test
  public void test9()  throws Throwable  {
      GeneticSearch geneticSearch0 = new GeneticSearch();
      String string0 = geneticSearch0.seedTipText();
      assertEquals(100, geneticSearch0.m_nDescendantPopulationSize);
      assertEquals("Initialization value for random number generator. Setting the seed allows replicability of experiments.", string0);
      assertEquals(true, geneticSearch0.m_bUseCrossOver);
      assertEquals(1, geneticSearch0.m_nSeed);
      assertEquals(false, geneticSearch0.m_bUseTournamentSelection);
      assertEquals(10, geneticSearch0.m_nPopulationSize);
      assertEquals(10, geneticSearch0.m_nRuns);
      assertEquals(true, geneticSearch0.m_bUseMutation);
  }

  @Test
  public void test10()  throws Throwable  {
      GeneticSearch geneticSearch0 = new GeneticSearch();
      GeneticSearch.BayesNetRepresentation geneticSearch_BayesNetRepresentation0 = geneticSearch0.new BayesNetRepresentation(0);
      assertEquals(false, geneticSearch_BayesNetRepresentation0.hasCycles());
      
      geneticSearch_BayesNetRepresentation0.randomInit();
      assertEquals(0, geneticSearch_BayesNetRepresentation0.m_nNodes);
      
      GeneticSearch.BayesNetRepresentation geneticSearch_BayesNetRepresentation1 = geneticSearch_BayesNetRepresentation0.copy();
      assertEquals(0.0, geneticSearch_BayesNetRepresentation1.m_fScore, 0.01D);
      assertEquals(false, geneticSearch0.m_bUseTournamentSelection);
      assertEquals(0, geneticSearch_BayesNetRepresentation1.m_nNodes);
      assertEquals(10, geneticSearch0.m_nRuns);
      assertNotSame(geneticSearch_BayesNetRepresentation0, geneticSearch_BayesNetRepresentation1);
      assertEquals(100, geneticSearch0.m_nDescendantPopulationSize);
      assertEquals(10, geneticSearch0.m_nPopulationSize);
      assertEquals(true, geneticSearch0.m_bUseMutation);
      assertNotNull(geneticSearch_BayesNetRepresentation1);
  }

  @Test
  public void test11()  throws Throwable  {
      Random.setNextRandom(1120);
      GeneticSearch geneticSearch0 = new GeneticSearch();
      GeneticSearch.BayesNetRepresentation geneticSearch_BayesNetRepresentation0 = geneticSearch0.new BayesNetRepresentation(80);
      // Undeclared exception!
      try {
        geneticSearch_BayesNetRepresentation0.randomInit();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      GeneticSearch geneticSearch0 = new GeneticSearch();
      GeneticSearch.BayesNetRepresentation geneticSearch_BayesNetRepresentation0 = geneticSearch0.new BayesNetRepresentation(0);
      assertEquals(false, geneticSearch_BayesNetRepresentation0.hasCycles());
      
      geneticSearch_BayesNetRepresentation0.randomInit();
      assertEquals(0, geneticSearch_BayesNetRepresentation0.m_nNodes);
      
      // Undeclared exception!
      try {
        geneticSearch_BayesNetRepresentation0.crossOver(geneticSearch_BayesNetRepresentation0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      GeneticSearch geneticSearch0 = new GeneticSearch();
      Enumeration<Object> enumeration0 = geneticSearch0.listOptions();
      assertEquals(10, geneticSearch0.m_nRuns);
      assertEquals(10, geneticSearch0.m_nPopulationSize);
      assertEquals(true, geneticSearch0.m_bUseMutation);
      assertEquals(true, geneticSearch0.m_bUseCrossOver);
      assertEquals(false, geneticSearch0.m_bUseTournamentSelection);
      assertEquals(1, geneticSearch0.m_nSeed);
      assertEquals(100, geneticSearch0.m_nDescendantPopulationSize);
      assertNotNull(enumeration0);
      assertEquals(100, geneticSearch0.getDescendantPopulationSize());
  }
}
