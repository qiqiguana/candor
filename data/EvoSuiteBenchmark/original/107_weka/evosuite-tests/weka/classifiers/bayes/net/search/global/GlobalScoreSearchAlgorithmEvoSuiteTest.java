/*
 * This file was automatically generated by EvoSuite
 */

package weka.classifiers.bayes.net.search.global;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Enumeration;
import org.evosuite.testcase.CodeUnderTestException;
import org.junit.BeforeClass;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.net.search.global.GlobalScoreSearchAlgorithm;
import weka.classifiers.meta.Vote;
import weka.core.Instance;
import weka.core.SelectedTag;
import weka.core.SparseInstance;

@RunWith(EvoSuiteRunner.class)
public class GlobalScoreSearchAlgorithmEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      GlobalScoreSearchAlgorithm globalScoreSearchAlgorithm0 = new GlobalScoreSearchAlgorithm();
      SelectedTag selectedTag0 = globalScoreSearchAlgorithm0.getCVType();
      assertNotNull(selectedTag0);
      assertEquals("0", selectedTag0.toString());
      assertEquals(10, globalScoreSearchAlgorithm0.m_nNrOfFolds);
      assertEquals(true, globalScoreSearchAlgorithm0.m_bUseProb);
  }

  @Test
  public void test1()  throws Throwable  {
      GlobalScoreSearchAlgorithm globalScoreSearchAlgorithm0 = new GlobalScoreSearchAlgorithm();
      String string0 = globalScoreSearchAlgorithm0.globalInfo();
      assertEquals(10, globalScoreSearchAlgorithm0.m_nNrOfFolds);
      assertEquals(0, globalScoreSearchAlgorithm0.m_nCVType);
      assertEquals(true, globalScoreSearchAlgorithm0.m_bUseProb);
      assertEquals("This Bayes Network learning algorithm uses cross validation to estimate classification accuracy.", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      GlobalScoreSearchAlgorithm globalScoreSearchAlgorithm0 = new GlobalScoreSearchAlgorithm();
      globalScoreSearchAlgorithm0.setMarkovBlanketClassifier(true);
      globalScoreSearchAlgorithm0.getOptions();
      assertEquals(true, globalScoreSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals(0, globalScoreSearchAlgorithm0.m_nCVType);
  }

  @Test
  public void test3()  throws Throwable  {
      GlobalScoreSearchAlgorithm globalScoreSearchAlgorithm0 = new GlobalScoreSearchAlgorithm();
      String string0 = globalScoreSearchAlgorithm0.getRevision();
      assertEquals(10, globalScoreSearchAlgorithm0.m_nNrOfFolds);
      assertEquals(true, globalScoreSearchAlgorithm0.m_bUseProb);
      assertEquals(0, globalScoreSearchAlgorithm0.m_nCVType);
      assertEquals("8034", string0);
      assertNotNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      GlobalScoreSearchAlgorithm globalScoreSearchAlgorithm0 = new GlobalScoreSearchAlgorithm();
      globalScoreSearchAlgorithm0.markovBlanketClassifierTipText();
      assertEquals(0, globalScoreSearchAlgorithm0.m_nCVType);
      assertEquals(true, globalScoreSearchAlgorithm0.m_bUseProb);
      assertEquals(10, globalScoreSearchAlgorithm0.m_nNrOfFolds);
      assertEquals(true, globalScoreSearchAlgorithm0.getUseProb());
  }

  @Test
  public void test5()  throws Throwable  {
      GlobalScoreSearchAlgorithm globalScoreSearchAlgorithm0 = new GlobalScoreSearchAlgorithm();
      String string0 = globalScoreSearchAlgorithm0.useProbTipText();
      assertEquals(0, globalScoreSearchAlgorithm0.m_nCVType);
      assertEquals("If set to true, the probability of the class if returned in the estimate of the accuracy. If set to false, the accuracy estimate is only increased if the classifier returns exactly the correct class.", string0);
      assertEquals(true, globalScoreSearchAlgorithm0.m_bUseProb);
      assertEquals(10, globalScoreSearchAlgorithm0.m_nNrOfFolds);
  }

  @Test
  public void test6()  throws Throwable  {
      GlobalScoreSearchAlgorithm globalScoreSearchAlgorithm0 = new GlobalScoreSearchAlgorithm();
      String string0 = globalScoreSearchAlgorithm0.CVTypeTipText();
      assertEquals(true, globalScoreSearchAlgorithm0.m_bUseProb);
      assertEquals("Select cross validation strategy to be used in searching for networks.LOO-CV = Leave one out cross validation\nk-Fold-CV = k fold cross validation\nCumulative-CV = cumulative cross validation.", string0);
      assertEquals(10, globalScoreSearchAlgorithm0.m_nNrOfFolds);
      assertEquals(0, globalScoreSearchAlgorithm0.m_nCVType);
  }

  @Test
  public void test7()  throws Throwable  {
      GlobalScoreSearchAlgorithm globalScoreSearchAlgorithm0 = new GlobalScoreSearchAlgorithm();
      try {
        globalScoreSearchAlgorithm0.calcScore((BayesNet) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      GlobalScoreSearchAlgorithm globalScoreSearchAlgorithm0 = new GlobalScoreSearchAlgorithm();
      assertEquals(0, globalScoreSearchAlgorithm0.m_nCVType);
      
      globalScoreSearchAlgorithm0.m_nCVType = 10;
      try {
        globalScoreSearchAlgorithm0.calcScore((BayesNet) null);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * Unrecognized cross validation type encountered: 10
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      GlobalScoreSearchAlgorithm globalScoreSearchAlgorithm0 = new GlobalScoreSearchAlgorithm();
      globalScoreSearchAlgorithm0.m_nCVType = 1;
  }

  @Test
  public void test10()  throws Throwable  {
      GlobalScoreSearchAlgorithm globalScoreSearchAlgorithm0 = new GlobalScoreSearchAlgorithm();
      assertEquals(true, globalScoreSearchAlgorithm0.m_bUseProb);
      
      globalScoreSearchAlgorithm0.setUseProb(false);
      double[] doubleArray0 = new double[3];
      SparseInstance sparseInstance0 = new SparseInstance((double) 10, doubleArray0);
      try {
        globalScoreSearchAlgorithm0.accuracyIncrease((Instance) sparseInstance0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      GlobalScoreSearchAlgorithm globalScoreSearchAlgorithm0 = new GlobalScoreSearchAlgorithm();
      double[] doubleArray0 = new double[9];
      SparseInstance sparseInstance0 = new SparseInstance((double) 10, doubleArray0);
      try {
        globalScoreSearchAlgorithm0.accuracyIncrease((Instance) sparseInstance0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      GlobalScoreSearchAlgorithm globalScoreSearchAlgorithm0 = new GlobalScoreSearchAlgorithm();
      Vote vote0 = new Vote();
      SelectedTag selectedTag0 = vote0.getCombinationRule();
      globalScoreSearchAlgorithm0.setCVType(selectedTag0);
      assertEquals(true, globalScoreSearchAlgorithm0.m_bUseProb);
      assertEquals(10, globalScoreSearchAlgorithm0.m_nNrOfFolds);
      assertEquals(0, globalScoreSearchAlgorithm0.m_nCVType);
  }

  @Test
  public void test13()  throws Throwable  {
      GlobalScoreSearchAlgorithm globalScoreSearchAlgorithm0 = new GlobalScoreSearchAlgorithm();
      Enumeration<Object> enumeration0 = globalScoreSearchAlgorithm0.listOptions();
      assertEquals(0, globalScoreSearchAlgorithm0.m_nCVType);
      assertEquals(true, globalScoreSearchAlgorithm0.m_bUseProb);
      assertNotNull(enumeration0);
      assertEquals(10, globalScoreSearchAlgorithm0.m_nNrOfFolds);
  }

  @Test
  public void test14()  throws Throwable  {
      GlobalScoreSearchAlgorithm globalScoreSearchAlgorithm0 = new GlobalScoreSearchAlgorithm();
      assertEquals(0, globalScoreSearchAlgorithm0.m_nCVType);
      
      globalScoreSearchAlgorithm0.m_nCVType = 1;
      String[] stringArray0 = globalScoreSearchAlgorithm0.getOptions();
      globalScoreSearchAlgorithm0.setOptions(stringArray0);
      assertEquals(1, globalScoreSearchAlgorithm0.m_nCVType);
  }

  @Test
  public void test15()  throws Throwable  {
      GlobalScoreSearchAlgorithm globalScoreSearchAlgorithm0 = new GlobalScoreSearchAlgorithm();
      assertEquals(true, globalScoreSearchAlgorithm0.m_bUseProb);
      
      globalScoreSearchAlgorithm0.setUseProb(false);
      String[] stringArray0 = globalScoreSearchAlgorithm0.getOptions();
      globalScoreSearchAlgorithm0.setOptions(stringArray0);
      assertEquals(false, globalScoreSearchAlgorithm0.m_bUseProb);
      assertEquals(false, globalScoreSearchAlgorithm0.getUseProb());
  }

  @Test
  public void test16()  throws Throwable  {
      GlobalScoreSearchAlgorithm globalScoreSearchAlgorithm0 = new GlobalScoreSearchAlgorithm();
      assertEquals(0, globalScoreSearchAlgorithm0.m_nCVType);
      
      globalScoreSearchAlgorithm0.m_nCVType = 10;
      globalScoreSearchAlgorithm0.getOptions();
      assertEquals(10, globalScoreSearchAlgorithm0.m_nNrOfFolds);
  }
}
