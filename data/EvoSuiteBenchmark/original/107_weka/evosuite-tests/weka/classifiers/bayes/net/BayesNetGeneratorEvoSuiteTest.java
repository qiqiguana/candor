/*
 * This file was automatically generated by EvoSuite
 */

package weka.classifiers.bayes.net;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.evosuite.runtime.Random;
import org.evosuite.testcase.TestCaseExecutor;
import org.junit.BeforeClass;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.bayes.net.BayesNetGenerator;
import weka.classifiers.rules.M5Rules;
import weka.core.OptionHandler;

@RunWith(EvoSuiteRunner.class)
public class BayesNetGeneratorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BayesNetGenerator bayesNetGenerator0 = new BayesNetGenerator();
      String[] stringArray0 = bayesNetGenerator0.getOptions();
      assertNotNull(stringArray0);
      
      bayesNetGenerator0.setOptions(stringArray0);
      assertEquals(10, bayesNetGenerator0.m_nNrOfNodes);
      assertEquals(false, bayesNetGenerator0.m_bGenerateNet);
      assertEquals(1, bayesNetGenerator0.m_nSeed);
      assertEquals(10, bayesNetGenerator0.m_nNrOfArcs);
      assertEquals(10, bayesNetGenerator0.m_nNrOfInstances);
      assertEquals(2, bayesNetGenerator0.m_nCardinality);
  }

  @Test
  public void test1()  throws Throwable  {
      BayesNetGenerator bayesNetGenerator0 = new BayesNetGenerator();
      String string0 = bayesNetGenerator0.getRevision();
      assertNotNull(string0);
      assertEquals(1, bayesNetGenerator0.m_nSeed);
      assertEquals(10, bayesNetGenerator0.m_nNrOfNodes);
      assertEquals(false, bayesNetGenerator0.m_bGenerateNet);
      assertEquals(10, bayesNetGenerator0.m_nNrOfInstances);
      assertEquals(2, bayesNetGenerator0.m_nCardinality);
      assertEquals(10, bayesNetGenerator0.m_nNrOfArcs);
      assertEquals("8034", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      BayesNetGenerator bayesNetGenerator0 = new BayesNetGenerator();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "Bayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf";
      AbstractClassifier.runClassifier((Classifier) bayesNetGenerator0, stringArray0);
      assertEquals(1, bayesNetGenerator0.m_nSeed);
      assertEquals(10, bayesNetGenerator0.m_nNrOfArcs);
      assertEquals(false, bayesNetGenerator0.m_bGenerateNet);
      assertEquals(10, bayesNetGenerator0.m_nNrOfInstances);
      assertEquals(2, bayesNetGenerator0.m_nCardinality);
      assertEquals(10, bayesNetGenerator0.m_nNrOfNodes);
  }

  @Test
  public void test3()  throws Throwable  {
      BayesNetGenerator bayesNetGenerator0 = new BayesNetGenerator();
      bayesNetGenerator0.generateRandomNetworkStructure(0, 0);
      assertEquals(false, bayesNetGenerator0.m_bGenerateNet);
      assertEquals(2, bayesNetGenerator0.m_nCardinality);
      assertEquals(10, bayesNetGenerator0.m_nNrOfInstances);
      assertEquals(10, bayesNetGenerator0.m_nNrOfArcs);
      assertEquals(10, bayesNetGenerator0.m_nNrOfNodes);
  }

  @Test
  public void test4()  throws Throwable  {
      BayesNetGenerator bayesNetGenerator0 = new BayesNetGenerator();
      try {
        bayesNetGenerator0.generateRandomNetworkStructure(0, (-379));
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * Number of arcs should be at least (nNodes - 1) = -1 instead of -379
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      BayesNetGenerator bayesNetGenerator0 = new BayesNetGenerator();
      try {
        bayesNetGenerator0.generateRandomNetworkStructure(1, 1);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * Number of arcs should be at most nNodes * (nNodes - 1) / 2 = 0 instead of 1
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      BayesNetGenerator bayesNetGenerator0 = new BayesNetGenerator();
      try {
        bayesNetGenerator0.generateRandomNetworkStructure(759, 891);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      BayesNetGenerator bayesNetGenerator0 = new BayesNetGenerator();
      Random.setNextRandom(19);
      // Undeclared exception!
      try {
        bayesNetGenerator0.generateTree(10);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      BayesNetGenerator bayesNetGenerator0 = new BayesNetGenerator();
      bayesNetGenerator0.Init(1054, 1054);
      bayesNetGenerator0.generateRandomDistributions(409, 1);
  }

  @Test
  public void test9()  throws Throwable  {
      BayesNetGenerator bayesNetGenerator0 = new BayesNetGenerator();
      bayesNetGenerator0.Init(1054, 1054);
      Random.setNextRandom(10);
      bayesNetGenerator0.generateInstances();
      Random.setNextRandom(2);
      Random.setNextRandom(0);
  }

  @Test
  public void test10()  throws Throwable  {
      BayesNetGenerator bayesNetGenerator0 = new BayesNetGenerator();
      // Undeclared exception!
      try {
        bayesNetGenerator0.toString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      BayesNetGenerator bayesNetGenerator0 = new BayesNetGenerator();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      bayesNetGenerator0.setOptions(stringArray0);
      assertEquals(10, bayesNetGenerator0.m_nNrOfArcs);
      assertEquals(2, bayesNetGenerator0.m_nCardinality);
      assertEquals(1, bayesNetGenerator0.m_nSeed);
      assertEquals(10, bayesNetGenerator0.m_nNrOfNodes);
      assertEquals(10, bayesNetGenerator0.m_nNrOfInstances);
  }

  @Test
  public void test12()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      BayesNetGenerator.printOptions((OptionHandler) m5Rules0);
      assertEquals("Classifier hasn't been built yet!", m5Rules0.toString());
  }
}
