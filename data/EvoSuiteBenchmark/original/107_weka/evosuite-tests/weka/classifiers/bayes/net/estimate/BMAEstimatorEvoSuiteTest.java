/*
 * This file was automatically generated by EvoSuite
 */

package weka.classifiers.bayes.net.estimate;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Enumeration;
import org.junit.BeforeClass;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.net.estimate.BMAEstimator;
import weka.core.Instance;

@RunWith(EvoSuiteRunner.class)
public class BMAEstimatorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BMAEstimator bMAEstimator0 = new BMAEstimator();
      String string0 = bMAEstimator0.getRevision();
      assertEquals(false, bMAEstimator0.isUseK2Prior());
      assertEquals("8034", string0);
      assertNotNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      BMAEstimator bMAEstimator0 = new BMAEstimator();
      String[] stringArray0 = bMAEstimator0.getOptions();
      assertNotNull(stringArray0);
      
      bMAEstimator0.setOptions(stringArray0);
      assertEquals(false, bMAEstimator0.isUseK2Prior());
  }

  @Test
  public void test2()  throws Throwable  {
      BMAEstimator bMAEstimator0 = new BMAEstimator();
      String string0 = bMAEstimator0.globalInfo();
      assertEquals(false, bMAEstimator0.isUseK2Prior());
      assertEquals("BMAEstimator estimates conditional probability tables of a Bayes network using Bayes Model Averaging (BMA).", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      BMAEstimator bMAEstimator0 = new BMAEstimator();
      BayesNet bayesNet0 = new BayesNet();
      try {
        bMAEstimator0.updateClassifier(bayesNet0, (Instance) null);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * updateClassifier does not apply to BMA estimator
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      BMAEstimator bMAEstimator0 = new BMAEstimator();
      Enumeration<Object> enumeration0 = bMAEstimator0.listOptions();
      assertNotNull(enumeration0);
      assertEquals(false, bMAEstimator0.isUseK2Prior());
  }

  @Test
  public void test5()  throws Throwable  {
      BMAEstimator bMAEstimator0 = new BMAEstimator();
      assertEquals(false, bMAEstimator0.isUseK2Prior());
      
      bMAEstimator0.setUseK2Prior(true);
      bMAEstimator0.getOptions();
      assertEquals(true, bMAEstimator0.isUseK2Prior());
  }
}
