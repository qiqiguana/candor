/*
 * This file was automatically generated by EvoSuite
 */

package weka.classifiers.bayes.net.estimate;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Enumeration;
import org.junit.BeforeClass;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.net.estimate.BayesNetEstimator;
import weka.classifiers.bayes.net.estimate.SimpleEstimator;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.SparseInstance;

@RunWith(EvoSuiteRunner.class)
public class BayesNetEstimatorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BayesNetEstimator bayesNetEstimator0 = new BayesNetEstimator();
      BayesNet bayesNet0 = new BayesNet();
      try {
        bayesNetEstimator0.estimateCPTs(bayesNet0);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * Incorrect BayesNetEstimator: use subclass instead.
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      SimpleEstimator simpleEstimator0 = (SimpleEstimator)bayesNet0.getEstimator();
      String string0 = simpleEstimator0.alphaTipText();
      assertEquals("Alpha is used for estimating the probability tables and can be interpreted as the initial count on each value.", string0);
      assertEquals(0.5, simpleEstimator0.getAlpha(), 0.01D);
  }

  @Test
  public void test2()  throws Throwable  {
      BayesNetEstimator bayesNetEstimator0 = new BayesNetEstimator();
      bayesNetEstimator0.setAlpha(1.0E-5);
      assertEquals(1.0E-5, bayesNetEstimator0.getAlpha(), 0.01D);
  }

  @Test
  public void test3()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      BayesNetEstimator bayesNetEstimator0 = new BayesNetEstimator();
      SparseInstance sparseInstance0 = new SparseInstance(44);
      try {
        bayesNetEstimator0.distributionForInstance(bayesNet0, (Instance) sparseInstance0);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * Incorrect BayesNetEstimator: use subclass instead.
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      BayesNetEstimator bayesNetEstimator0 = new BayesNetEstimator();
      String string0 = bayesNetEstimator0.globalInfo();
      assertEquals(0.5, bayesNetEstimator0.getAlpha(), 0.01D);
      assertEquals("BayesNetEstimator is the base class for estimating the conditional probability tables of a Bayes network once the structure has been learned.", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      BayesNetEstimator bayesNetEstimator0 = new BayesNetEstimator();
      Enumeration<Object> enumeration0 = bayesNetEstimator0.listOptions();
      assertEquals(0.5, bayesNetEstimator0.getAlpha(), 0.01D);
      assertEquals(true, enumeration0.hasMoreElements());
      assertNotNull(enumeration0);
  }

  @Test
  public void test6()  throws Throwable  {
      BayesNetEstimator bayesNetEstimator0 = new BayesNetEstimator();
      BayesNet bayesNet0 = new BayesNet();
      try {
        bayesNetEstimator0.initCPTs(bayesNet0);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * Incorrect BayesNetEstimator: use subclass instead.
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      BayesNetEstimator bayesNetEstimator0 = new BayesNetEstimator();
      double double0 = bayesNetEstimator0.getAlpha();
      assertEquals(0.5, double0, 0.01D);
  }

  @Test
  public void test8()  throws Throwable  {
      BayesNetEstimator bayesNetEstimator0 = new BayesNetEstimator();
      BayesNet bayesNet0 = new BayesNet();
      double[] doubleArray0 = new double[5];
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      try {
        bayesNetEstimator0.updateClassifier(bayesNet0, (Instance) denseInstance0);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * Incorrect BayesNetEstimator: use subclass instead.
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      BayesNetEstimator bayesNetEstimator0 = new BayesNetEstimator();
      String string0 = bayesNetEstimator0.getRevision();
      assertEquals("8034", string0);
      assertEquals(0.5, bayesNetEstimator0.getAlpha(), 0.01D);
      assertNotNull(string0);
  }

  @Test
  public void test10()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      SimpleEstimator simpleEstimator0 = (SimpleEstimator)bayesNet0.getEstimator();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "0>}m0fFAq;ZB";
      stringArray0[1] = "kim/&#mCnQN^k6xQPr";
      try {
        simpleEstimator0.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * Illegal options: 0>}m0fFAq;ZB kim/&#mCnQN^k6xQPr 
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      BayesNetEstimator bayesNetEstimator0 = new BayesNetEstimator();
      String[] stringArray0 = bayesNetEstimator0.getOptions();
      assertNotNull(stringArray0);
      
      bayesNetEstimator0.setOptions(stringArray0);
      assertEquals(0.5, bayesNetEstimator0.getAlpha(), 0.01D);
  }
}
