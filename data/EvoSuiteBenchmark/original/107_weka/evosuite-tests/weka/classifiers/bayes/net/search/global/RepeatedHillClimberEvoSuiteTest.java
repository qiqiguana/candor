/*
 * This file was automatically generated by EvoSuite
 */

package weka.classifiers.bayes.net.search.global;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.ArrayList;
import java.util.Enumeration;
import org.evosuite.testcase.CodeUnderTestException;
import org.junit.BeforeClass;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.net.search.global.RepeatedHillClimber;
import weka.core.Attribute;
import weka.core.Instances;

@RunWith(EvoSuiteRunner.class)
public class RepeatedHillClimberEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      RepeatedHillClimber repeatedHillClimber0 = new RepeatedHillClimber();
      String string0 = repeatedHillClimber0.getRevision();
      assertEquals(1, repeatedHillClimber0.m_nSeed);
      assertEquals(10, repeatedHillClimber0.m_nRuns);
      assertNotNull(string0);
      assertEquals("8034", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      RepeatedHillClimber repeatedHillClimber0 = new RepeatedHillClimber();
      String[] stringArray0 = repeatedHillClimber0.getOptions();
      assertNotNull(stringArray0);
      
      repeatedHillClimber0.setOptions(stringArray0);
      assertEquals(1, repeatedHillClimber0.getMaxNrOfParents());
      assertEquals(1, repeatedHillClimber0.m_nSeed);
      assertEquals(10, repeatedHillClimber0.m_nRuns);
      assertEquals(1, repeatedHillClimber0.getSeed());
  }

  @Test
  public void test2()  throws Throwable  {
      RepeatedHillClimber repeatedHillClimber0 = new RepeatedHillClimber();
      String string0 = repeatedHillClimber0.globalInfo();
      assertEquals(10, repeatedHillClimber0.m_nRuns);
      assertEquals("This Bayes Network learning algorithm repeatedly uses hill climbing starting with a randomly generated network structure and return the best structure of the various runs.", string0);
      assertEquals(1, repeatedHillClimber0.m_nSeed);
  }

  @Test
  public void test3()  throws Throwable  {
      RepeatedHillClimber repeatedHillClimber0 = new RepeatedHillClimber();
      String string0 = repeatedHillClimber0.runsTipText();
      assertEquals("Sets the number of times hill climbing is performed.", string0);
      assertEquals(1, repeatedHillClimber0.m_nSeed);
      assertEquals(10, repeatedHillClimber0.m_nRuns);
  }

  @Test
  public void test4()  throws Throwable  {
      RepeatedHillClimber repeatedHillClimber0 = new RepeatedHillClimber();
      String string0 = repeatedHillClimber0.seedTipText();
      assertEquals(10, repeatedHillClimber0.m_nRuns);
      assertEquals("Initialization value for random number generator. Setting the seed allows replicability of experiments.", string0);
      assertEquals(1, repeatedHillClimber0.m_nSeed);
  }

  @Test
  public void test5()  throws Throwable  {
      RepeatedHillClimber repeatedHillClimber0 = new RepeatedHillClimber();
      BayesNet bayesNet0 = new BayesNet();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("H", arrayList0, 10);
      bayesNet0.m_Instances = (weka.core.Instances) instances0;
  }

  @Test
  public void test6()  throws Throwable  {
      RepeatedHillClimber repeatedHillClimber0 = new RepeatedHillClimber();
      Enumeration<Object> enumeration0 = repeatedHillClimber0.listOptions();
      assertNotNull(enumeration0);
      assertEquals(10, repeatedHillClimber0.m_nRuns);
      assertEquals(1, repeatedHillClimber0.m_nSeed);
      assertEquals(10, repeatedHillClimber0.getRuns());
  }

  @Test
  public void test7()  throws Throwable  {
      RepeatedHillClimber repeatedHillClimber0 = new RepeatedHillClimber();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Sets the number of times hill climbing is performed.";
      repeatedHillClimber0.setOptions(stringArray0);
      assertEquals(100000, repeatedHillClimber0.getMaxNrOfParents());
      assertEquals(10, repeatedHillClimber0.getRuns());
  }
}
