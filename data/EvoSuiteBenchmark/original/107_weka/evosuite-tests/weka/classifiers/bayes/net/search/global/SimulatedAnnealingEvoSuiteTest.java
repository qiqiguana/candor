/*
 * This file was automatically generated by EvoSuite
 */

package weka.classifiers.bayes.net.search.global;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Enumeration;
import org.junit.BeforeClass;
import weka.classifiers.bayes.net.search.global.SimulatedAnnealing;

@RunWith(EvoSuiteRunner.class)
public class SimulatedAnnealingEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SimulatedAnnealing simulatedAnnealing0 = new SimulatedAnnealing();
      String string0 = simulatedAnnealing0.getRevision();
      assertEquals(false, simulatedAnnealing0.m_bUseArcReversal);
      assertNotNull(string0);
      assertEquals(1, simulatedAnnealing0.m_nSeed);
      assertEquals(0.999, simulatedAnnealing0.m_fDelta, 0.01D);
      assertEquals(10.0, simulatedAnnealing0.m_fTStart, 0.01D);
      assertEquals("8034", string0);
      assertEquals(10000, simulatedAnnealing0.m_nRuns);
  }

  @Test
  public void test1()  throws Throwable  {
      SimulatedAnnealing simulatedAnnealing0 = new SimulatedAnnealing();
      String string0 = simulatedAnnealing0.TStartTipText();
      assertEquals(1, simulatedAnnealing0.m_nSeed);
      assertEquals("Sets the start temperature of the simulated annealing search. The start temperature determines the probability that a step in the 'wrong' direction in the search space is accepted. The higher the temperature, the higher the probability of acceptance.", string0);
      assertEquals(10.0, simulatedAnnealing0.m_fTStart, 0.01D);
      assertEquals(false, simulatedAnnealing0.m_bUseArcReversal);
      assertEquals(10000, simulatedAnnealing0.m_nRuns);
      assertEquals(0.999, simulatedAnnealing0.m_fDelta, 0.01D);
  }

  @Test
  public void test2()  throws Throwable  {
      SimulatedAnnealing simulatedAnnealing0 = new SimulatedAnnealing();
      String[] stringArray0 = simulatedAnnealing0.getOptions();
      assertNotNull(stringArray0);
      
      simulatedAnnealing0.setOptions(stringArray0);
      assertEquals(10.0, simulatedAnnealing0.m_fTStart, 0.01D);
      assertEquals(0.999, simulatedAnnealing0.m_fDelta, 0.01D);
      assertEquals(1, simulatedAnnealing0.m_nSeed);
      assertEquals(10000, simulatedAnnealing0.m_nRuns);
      assertEquals(10.0, simulatedAnnealing0.getTStart(), 0.01D);
  }

  @Test
  public void test3()  throws Throwable  {
      SimulatedAnnealing simulatedAnnealing0 = new SimulatedAnnealing();
      String string0 = simulatedAnnealing0.globalInfo();
      assertEquals(0.999, simulatedAnnealing0.m_fDelta, 0.01D);
      assertEquals("This Bayes Network learning algorithm uses the general purpose search method of simulated annealing to find a well scoring network structure.\n\nFor more information see:\n\nR.R. Bouckaert (1995). Bayesian Belief Networks: from Construction to Inference. Utrecht, Netherlands.", string0);
      assertEquals(1, simulatedAnnealing0.m_nSeed);
      assertEquals(10000, simulatedAnnealing0.m_nRuns);
      assertNotNull(string0);
      assertEquals(10.0, simulatedAnnealing0.m_fTStart, 0.01D);
      assertEquals(false, simulatedAnnealing0.m_bUseArcReversal);
  }

  @Test
  public void test4()  throws Throwable  {
      SimulatedAnnealing simulatedAnnealing0 = new SimulatedAnnealing();
      String string0 = simulatedAnnealing0.seedTipText();
      assertEquals("Initialization value for random number generator. Setting the seed allows replicability of experiments.", string0);
      assertEquals(1, simulatedAnnealing0.m_nSeed);
      assertEquals(0.999, simulatedAnnealing0.m_fDelta, 0.01D);
      assertEquals(10000, simulatedAnnealing0.m_nRuns);
      assertEquals(false, simulatedAnnealing0.m_bUseArcReversal);
      assertEquals(10.0, simulatedAnnealing0.m_fTStart, 0.01D);
  }

  @Test
  public void test5()  throws Throwable  {
      SimulatedAnnealing simulatedAnnealing0 = new SimulatedAnnealing();
      String string0 = simulatedAnnealing0.deltaTipText();
      assertEquals(false, simulatedAnnealing0.m_bUseArcReversal);
      assertEquals(10.0, simulatedAnnealing0.m_fTStart, 0.01D);
      assertEquals(0.999, simulatedAnnealing0.m_fDelta, 0.01D);
      assertEquals("Sets the factor with which the temperature (and thus the acceptance probability of steps in the wrong direction in the search space) is decreased in each iteration.", string0);
      assertEquals(10000, simulatedAnnealing0.m_nRuns);
      assertEquals(1, simulatedAnnealing0.m_nSeed);
  }

  @Test
  public void test6()  throws Throwable  {
      SimulatedAnnealing simulatedAnnealing0 = new SimulatedAnnealing();
      String string0 = simulatedAnnealing0.runsTipText();
      assertEquals(0.999, simulatedAnnealing0.m_fDelta, 0.01D);
      assertEquals(false, simulatedAnnealing0.m_bUseArcReversal);
      assertEquals("Sets the number of iterations to be performed by the simulated annealing search.", string0);
      assertEquals(10.0, simulatedAnnealing0.m_fTStart, 0.01D);
      assertEquals(1, simulatedAnnealing0.m_nSeed);
      assertEquals(10000, simulatedAnnealing0.m_nRuns);
  }

  @Test
  public void test7()  throws Throwable  {
      SimulatedAnnealing simulatedAnnealing0 = new SimulatedAnnealing();
      Enumeration<Object> enumeration0 = simulatedAnnealing0.listOptions();
      assertNotNull(enumeration0);
      assertEquals(10000, simulatedAnnealing0.m_nRuns);
      assertEquals(10.0, simulatedAnnealing0.m_fTStart, 0.01D);
      assertEquals(1, simulatedAnnealing0.m_nSeed);
      assertEquals(0.999, simulatedAnnealing0.m_fDelta, 0.01D);
      assertEquals(false, simulatedAnnealing0.m_bUseArcReversal);
      assertEquals(10000, simulatedAnnealing0.getRuns());
  }

  @Test
  public void test8()  throws Throwable  {
      SimulatedAnnealing simulatedAnnealing0 = new SimulatedAnnealing();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Sets the factor with which the temperature (and thus the acceptance probability of steps in the wrong direction in the search space) is decreased in each iteration.";
      simulatedAnnealing0.setOptions(stringArray0);
      assertEquals(1, simulatedAnnealing0.m_nSeed);
      assertEquals(10000, simulatedAnnealing0.m_nRuns);
      assertEquals(false, simulatedAnnealing0.m_bUseArcReversal);
      assertEquals(10.0, simulatedAnnealing0.m_fTStart, 0.01D);
      assertEquals(0.999, simulatedAnnealing0.m_fDelta, 0.01D);
      assertEquals(0.999, simulatedAnnealing0.getDelta(), 0.01D);
  }
}
