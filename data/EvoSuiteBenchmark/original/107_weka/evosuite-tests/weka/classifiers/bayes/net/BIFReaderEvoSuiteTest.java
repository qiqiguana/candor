/*
 * This file was automatically generated by EvoSuite
 */

package weka.classifiers.bayes.net;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import javax.imageio.metadata.IIOMetadataNode;
import org.junit.BeforeClass;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import weka.classifiers.bayes.net.BIFReader;

@RunWith(EvoSuiteRunner.class)
public class BIFReaderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BIFReader bIFReader0 = new BIFReader();
      try {
        bIFReader0.processString((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      BIFReader bIFReader0 = new BIFReader();
      try {
        bIFReader0.buildInstances((Document) null, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      BIFReader bIFReader0 = new BIFReader();
      String string0 = bIFReader0.globalInfo();
      assertEquals("Builds a description of a Bayes Net classifier stored in XML BIF 0.3 format.\n\nFor more details on XML BIF see:\n\nFabio Cozman, Marek Druzdzel, Daniel Garcia (1998). XML BIF version 0.3. URL http://www-2.cs.cmu.edu/~fgcozman/Research/InterchangeFormat/.", string0);
      assertNotNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      BIFReader bIFReader0 = new BIFReader();
      String string0 = bIFReader0.getFileName();
      assertNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      BIFReader bIFReader0 = new BIFReader();
      try {
        bIFReader0.selectAllVariables((Document) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      BIFReader bIFReader0 = new BIFReader();
      try {
        bIFReader0.processFile((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      BIFReader bIFReader0 = new BIFReader();
      String string0 = bIFReader0.getRevision();
      assertEquals("8034", string0);
      assertNotNull(string0);
  }

  @Test
  public void test7()  throws Throwable  {
      BIFReader bIFReader0 = new BIFReader();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      try {
        bIFReader0.getTable((Node) iIOMetadataNode0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 0, Size: 0
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      BIFReader bIFReader0 = new BIFReader();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.appendChild((Node) iIOMetadataNode0);
      String string0 = bIFReader0.getContent((Element) iIOMetadataNode0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test
  public void test9()  throws Throwable  {
      BIFReader bIFReader0 = new BIFReader();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = (IIOMetadataNode)iIOMetadataNode0.appendChild((Node) iIOMetadataNode0);
      try {
        bIFReader0.getTable((Node) iIOMetadataNode1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * StringEquals is not supposed to work on a null caller
         */
      }
  }
}
