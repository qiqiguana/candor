/*
 * This file was automatically generated by EvoSuite
 */

package weka.classifiers.bayes;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.File;
import org.junit.BeforeClass;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.TestInstances;
import weka.core.stemmers.SnowballStemmer;
import weka.core.stemmers.Stemmer;

@RunWith(EvoSuiteRunner.class)
public class NaiveBayesMultinomialTextEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertNotNull(naiveBayesMultinomialText0);
      
      String string0 = naiveBayesMultinomialText0.normalizeDocLengthTipText();
      assertEquals(false, naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(false, naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01D);
      assertEquals("If true then document length is normalized according to the settings for norm and lnorm", string0);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01D);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01D);
  }

  @Test
  public void test1()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertNotNull(naiveBayesMultinomialText0);
      
      String string0 = naiveBayesMultinomialText0.lowercaseTokensTipText();
      assertEquals("Whether to convert all tokens to lowercase", string0);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01D);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01D);
      assertEquals(false, naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01D);
      assertEquals(false, naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  @Test
  public void test2()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertNotNull(naiveBayesMultinomialText0);
      
      String string0 = naiveBayesMultinomialText0.tokenizerTipText();
      assertEquals(false, naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01D);
      assertEquals("The tokenizing algorithm to use on the strings.", string0);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01D);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01D);
      assertEquals(false, naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  @Test
  public void test3()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertNotNull(naiveBayesMultinomialText0);
      
      naiveBayesMultinomialText0.listOptions();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01D);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01D);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01D);
      assertEquals(false, naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(false, naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  @Test
  public void test4()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertNotNull(naiveBayesMultinomialText0);
      
      String string0 = naiveBayesMultinomialText0.useStopListTipText();
      assertEquals(false, naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(false, naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01D);
      assertEquals("If true, ignores all words that are on the stoplist.", string0);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01D);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01D);
  }

  @Test
  public void test5()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      String string0 = naiveBayesMultinomialText0.toString();
      assertEquals("The independent probability of a class\n--------------------------------------\nclass1\t21.0\nclass2\t1.0\n\nThe probability of a word given the class\n-----------------------------------------\n\tclass1\tclass2\t\n", naiveBayesMultinomialText0.toString());
      assertEquals("The independent probability of a class\n--------------------------------------\nclass1\t21.0\nclass2\t1.0\n\nThe probability of a word given the class\n-----------------------------------------\n\tclass1\tclass2\t\n", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertNotNull(naiveBayesMultinomialText0);
      
      String string0 = naiveBayesMultinomialText0.minWordFrequencyTipText();
      assertEquals("Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value", string0);
      assertEquals(false, naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(false, naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01D);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01D);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01D);
  }

  @Test
  public void test7()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertNotNull(naiveBayesMultinomialText0);
      
      String string0 = naiveBayesMultinomialText0.periodicPruningTipText();
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(false, naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01D);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01D);
      assertEquals("How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances", string0);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01D);
      assertEquals(false, naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  @Test
  public void test8()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertNotNull(naiveBayesMultinomialText0);
      
      String string0 = naiveBayesMultinomialText0.normTipText();
      assertEquals(false, naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals("The norm of the instances after normalization.", string0);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01D);
      assertEquals(false, naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01D);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01D);
  }

  @Test
  public void test9()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertNotNull(naiveBayesMultinomialText0);
      
      String string0 = naiveBayesMultinomialText0.useWordFrequenciesTipText();
      assertEquals("Use word frequencies rather than binary bag of words representation", string0);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01D);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01D);
      assertEquals(false, naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01D);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(false, naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  @Test
  public void test10()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertNotNull(naiveBayesMultinomialText0);
      
      String string0 = naiveBayesMultinomialText0.stemmerTipText();
      assertEquals(false, naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals("The stemming algorithm to use on the words.", string0);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01D);
      assertEquals(false, naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01D);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertNotNull(naiveBayesMultinomialText0);
      
      String string0 = naiveBayesMultinomialText0.stopwordsTipText();
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01D);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01D);
      assertEquals(false, naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals("The file containing the stopwords (if this is a directory then the default ones are used).", string0);
      assertEquals(false, naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertNotNull(naiveBayesMultinomialText0);
      
      String string0 = naiveBayesMultinomialText0.getRevision();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01D);
      assertEquals(false, naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01D);
      assertEquals("9122", string0);
      assertNotNull(string0);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01D);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(false, naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  @Test
  public void test13()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertNotNull(naiveBayesMultinomialText0);
      
      String string0 = naiveBayesMultinomialText0.LNormTipText();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01D);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01D);
      assertEquals(false, naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals("The LNorm to use for document length normalization.", string0);
      assertEquals(false, naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01D);
  }

  @Test
  public void test14()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertNotNull(naiveBayesMultinomialText0);
      
      String string0 = naiveBayesMultinomialText0.globalInfo();
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(false, naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals("Multinomial naive bayes for text data. Operates directly (and only) on String attributes. Other types of input attributes are accepted but ignored during training and classification", string0);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01D);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01D);
      assertEquals(false, naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01D);
  }

  @Test
  public void test15()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertNotNull(naiveBayesMultinomialText0);
      
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Capabilities capabilities0 = naiveBayesMultinomialUpdateable0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("9122");
      naiveBayesMultinomialText0.buildClassifier(instances0);
      DenseInstance denseInstance0 = (DenseInstance)instances0.lastInstance();
      naiveBayesMultinomialText0.distributionForInstance((Instance) denseInstance0);
      assertEquals("The independent probability of a class\n--------------------------------------\nclass1\t11.0\nclass2\t1.0\nclass3\t11.0\nclass4\t1.0\n\nThe probability of a word given the class\n-----------------------------------------\n\tclass1\tclass2\tclass3\tclass4\t\n", naiveBayesMultinomialText0.toString());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01D);
  }

  @Test
  public void test16()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertNotNull(naiveBayesMultinomialText0);
      
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Capabilities capabilities0 = naiveBayesMultinomialUpdateable0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      Instances instances0 = testInstances0.generate("9122");
      naiveBayesMultinomialText0.buildClassifier(instances0);
      DenseInstance denseInstance0 = (DenseInstance)instances0.lastInstance();
      naiveBayesMultinomialText0.distributionForInstance((Instance) denseInstance0);
      assertEquals(true, naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals("The independent probability of a class\n--------------------------------------\nclass1\t11.0\nclass2\t1.0\nclass3\t11.0\nclass4\t1.0\n\nThe probability of a word given the class\n-----------------------------------------\n\tclass1\tclass2\tclass3\tclass4\t\n", naiveBayesMultinomialText0.toString());
  }

  @Test
  public void test17()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertNotNull(naiveBayesMultinomialText0);
      
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialText0.setUseStopList(true);
      Capabilities capabilities0 = naiveBayesMultinomialUpdateable0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("9122");
      naiveBayesMultinomialText0.buildClassifier(instances0);
      assertEquals(true, naiveBayesMultinomialText0.getUseStopList());
      assertEquals("The independent probability of a class\n--------------------------------------\nclass1\t11.0\nclass2\t1.0\nclass3\t11.0\nclass4\t1.0\n\nThe probability of a word given the class\n-----------------------------------------\n\tclass1\tclass2\tclass3\tclass4\t\n", naiveBayesMultinomialText0.toString());
  }

  @Test
  public void test18()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertNotNull(naiveBayesMultinomialText0);
      
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      File file0 = precomputedKernelMatrixKernel0.getKernelMatrixFile();
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.setUseStopList(true);
      try {
        naiveBayesMultinomialText0.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test19()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertNotNull(naiveBayesMultinomialText0);
      
      naiveBayesMultinomialText0.setPeriodicPruning(45);
      // Undeclared exception!
      try {
        naiveBayesMultinomialText0.pruneDictionary();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test20()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertNotNull(naiveBayesMultinomialText0);
      
      naiveBayesMultinomialText0.reset();
      naiveBayesMultinomialText0.setPeriodicPruning(45);
      naiveBayesMultinomialText0.pruneDictionary();
      assertEquals(45, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  @Test
  public void test21()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertNotNull(naiveBayesMultinomialText0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Use word frequencies rather than binary bag of words representation";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertEquals(false, naiveBayesMultinomialText0.getUseStopList());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01D);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01D);
      assertEquals(false, naiveBayesMultinomialText0.getLowercaseTokens());
      assertEquals(false, naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(false, naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01D);
  }

  @Test
  public void test22()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertNotNull(naiveBayesMultinomialText0);
      
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      File file0 = precomputedKernelMatrixKernel0.getKernelMatrixFile();
      naiveBayesMultinomialText0.setStopwords(file0);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      assertNotNull(stringArray0);
      
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertEquals(false, naiveBayesMultinomialText0.getLowercaseTokens());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01D);
      assertEquals(false, naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(false, naiveBayesMultinomialText0.getUseStopList());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01D);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01D);
      assertEquals(false, naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  @Test
  public void test23()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertNotNull(naiveBayesMultinomialText0);
      
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      naiveBayesMultinomialText0.setStemmer((Stemmer) snowballStemmer0);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      assertNotNull(stringArray0);
      
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01D);
      assertEquals(false, naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(false, naiveBayesMultinomialText0.getLowercaseTokens());
      assertEquals(false, naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01D);
      assertEquals(false, naiveBayesMultinomialText0.getUseStopList());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01D);
  }

  @Test
  public void test24()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertNotNull(naiveBayesMultinomialText0);
      assertEquals(false, naiveBayesMultinomialText0.getUseWordFrequencies());
      
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.getOptions();
      assertEquals(true, naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01D);
  }

  @Test
  public void test25()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertEquals(false, naiveBayesMultinomialText0.getNormalizeDocLength());
      assertNotNull(naiveBayesMultinomialText0);
      
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.getOptions();
      assertEquals(true, naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01D);
  }

  @Test
  public void test26()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertNotNull(naiveBayesMultinomialText0);
      
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.getOptions();
      assertEquals(true, naiveBayesMultinomialText0.getLowercaseTokens());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01D);
  }

  @Test
  public void test27()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertNotNull(naiveBayesMultinomialText0);
      
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.getOptions();
      assertEquals(true, naiveBayesMultinomialText0.getUseStopList());
  }

  @Test
  public void test28()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertNotNull(naiveBayesMultinomialText0);
      
      String string0 = naiveBayesMultinomialText0.toString();
      assertEquals(false, naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01D);
      assertNotNull(string0);
      assertEquals(false, naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals("NaiveBayesMultinomialText: No model built yet.\n", string0);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01D);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01D);
  }
}
