/*
 * This file was automatically generated by EvoSuite
 */

package weka.classifiers.functions.supportVector;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.ArrayList;
import java.util.Enumeration;
import org.junit.BeforeClass;
import weka.classifiers.functions.supportVector.StringKernel;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SelectedTag;
import weka.core.SparseInstance;
import weka.core.Tag;

@RunWith(EvoSuiteRunner.class)
public class StringKernelEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      StringKernel stringKernel0 = null;
      try {
        stringKernel0 = new StringKernel((Instances) null, (-1701), (-1701), (double) (-1701), true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      String[] stringArray0 = stringKernel0.getOptions();
      assertNotNull(stringArray0);
      
      stringKernel0.setOptions(stringArray0);
      assertEquals(0.5, stringKernel0.getLambda(), 0.01D);
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals(false, stringKernel0.getUseNormalization());
      assertEquals(250007, stringKernel0.getCacheSize());
  }

  @Test
  public void test2()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      String string0 = stringKernel0.useNormalizationTipText();
      assertEquals("Whether to use normalization.", string0);
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01D);
      assertEquals(false, stringKernel0.getUseNormalization());
      assertEquals(250007, stringKernel0.getCacheSize());
  }

  @Test
  public void test3()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      String string0 = stringKernel0.maxSubsequenceLengthTipText();
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals("The maximum subsequence length (theta in the paper)", string0);
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals(false, stringKernel0.getUseNormalization());
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01D);
  }

  @Test
  public void test4()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      String string0 = stringKernel0.internalCacheSizeTipText();
      assertEquals(false, stringKernel0.getUseNormalization());
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01D);
      assertEquals("The size of the internal cache (a prime number).", string0);
      assertEquals(200003, stringKernel0.getInternalCacheSize());
  }

  @Test
  public void test5()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      String string0 = stringKernel0.cacheSizeTipText();
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals(false, stringKernel0.getUseNormalization());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals("The size of the cache (a prime number).", string0);
      assertEquals(0.5, stringKernel0.getLambda(), 0.01D);
  }

  @Test
  public void test6()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      int int0 = stringKernel0.numEvals();
      assertEquals(0, int0);
      assertEquals(false, stringKernel0.getUseNormalization());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01D);
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
  }

  @Test
  public void test7()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      String string0 = stringKernel0.globalInfo();
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals(false, stringKernel0.getUseNormalization());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01D);
      assertEquals("Implementation of the subsequence kernel (SSK) as described in [1] and of the subsequence kernel with lambda pruning (SSK-LP) as described in [2].\n\nFor more information, see\n\nHuma Lodhi, Craig Saunders, John Shawe-Taylor, Nello Cristianini, Christopher J. C. H. Watkins (2002). Text Classification using String Kernels. Journal of Machine Learning Research. 2:419-444.\n\nF. Kleedorfer, A. Seewald (2005). Implementation of a String Kernel for WEKA. Wien, Austria.", string0);
      assertNotNull(string0);
  }

  @Test
  public void test8()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      String string0 = stringKernel0.subsequenceLengthTipText();
      assertEquals("The subsequence length.", string0);
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01D);
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals(false, stringKernel0.getUseNormalization());
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
  }

  @Test
  public void test9()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      String string0 = stringKernel0.lambdaTipText();
      assertEquals(0.5, stringKernel0.getLambda(), 0.01D);
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals(false, stringKernel0.getUseNormalization());
      assertEquals("Penalizes non-continuous subsequence matches, from (0,1)", string0);
      assertEquals(250007, stringKernel0.getCacheSize());
  }

  @Test
  public void test10()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      int int0 = stringKernel0.numCacheHits();
      assertEquals(false, stringKernel0.getUseNormalization());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01D);
      assertEquals((-1), int0);
  }

  @Test
  public void test11()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      String string0 = stringKernel0.pruningMethodTipText();
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals("The pruning method.", string0);
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01D);
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals(false, stringKernel0.getUseNormalization());
  }

  @Test
  public void test12()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      SelectedTag selectedTag0 = stringKernel0.getPruningMethod();
      assertEquals("0", selectedTag0.toString());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01D);
      assertEquals(false, stringKernel0.getUseNormalization());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertNotNull(selectedTag0);
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals(250007, stringKernel0.getCacheSize());
  }

  @Test
  public void test13()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Enumeration<Object> enumeration0 = stringKernel0.listOptions();
      assertEquals(0.5, stringKernel0.getLambda(), 0.01D);
      assertNotNull(enumeration0);
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals(false, stringKernel0.getUseNormalization());
      assertEquals(250007, stringKernel0.getCacheSize());
  }

  @Test
  public void test14()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      stringKernel0.setChecksTurnedOff(true);
      String[] stringArray0 = stringKernel0.getOptions();
      assertEquals(0.5, stringKernel0.getLambda(), 0.01D);
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals(false, stringKernel0.getUseNormalization());
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals(250007, stringKernel0.getCacheSize());
      assertNotNull(stringArray0);
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
  }

  @Test
  public void test15()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Tag[] tagArray0 = new Tag[1];
      Tag tag0 = new Tag((int) 'p', "", "");
      tagArray0[0] = tag0;
      SelectedTag selectedTag0 = new SelectedTag("", tagArray0);
      stringKernel0.setPruningMethod(selectedTag0);
      assertEquals(0.5, stringKernel0.getLambda(), 0.01D);
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals(false, stringKernel0.getUseNormalization());
  }

  @Test
  public void test16()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      stringKernel0.setInternalCacheSize((-185));
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01D);
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals(false, stringKernel0.getUseNormalization());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
  }

  @Test
  public void test17()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      assertEquals(false, stringKernel0.getUseNormalization());
      
      stringKernel0.setUseNormalization(true);
      double[] doubleArray0 = new double[5];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((double) 15000, doubleArray0);
      double double0 = stringKernel0.eval(15000, 15000, (Instance) binarySparseInstance0);
      assertEquals(true, stringKernel0.getUseNormalization());
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test18()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      double[] doubleArray0 = new double[5];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((double) 15000, doubleArray0);
      try {
        stringKernel0.eval(15000, 15000, (Instance) binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test19()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      stringKernel0.setDebug(true);
      double[] doubleArray0 = new double[10];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((double) (-1), doubleArray0);
      try {
        stringKernel0.eval((-1), (-1), (Instance) binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test20()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      stringKernel0.setDebug(true);
      double[] doubleArray0 = new double[8];
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      try {
        stringKernel0.eval(0, (-13), (Instance) sparseInstance0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test21()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      stringKernel0.setDebug(true);
      double[] doubleArray0 = new double[8];
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      try {
        stringKernel0.eval(0, 0, (Instance) sparseInstance0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test22()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      char[] charArray0 = new char[4];
      char[] charArray1 = new char[9];
      // Undeclared exception!
      try {
        stringKernel0.unnormalizedKernel(charArray0, charArray1);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test23()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      
      stringKernel0.setInternalCacheSize(0);
      char[] charArray0 = new char[1];
      double double0 = stringKernel0.unnormalizedKernel(charArray0, charArray0);
      assertEquals(0, stringKernel0.getInternalCacheSize());
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test24()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      char[] charArray0 = new char[9];
      stringKernel0.setInternalCacheSize((int) '>');
      // Undeclared exception!
      try {
        stringKernel0.normalizedKernel(charArray0, charArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test25()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("7R<>}]N(nX{efr", arrayList0, 0);
      stringKernel0.initVars(instances0);
      char[] charArray0 = new char[3];
      double double0 = stringKernel0.unnormalizedKernel(charArray0, charArray0);
      assertEquals(0, stringKernel0.numEvals());
      assertEquals(false, stringKernel0.getUseNormalization());
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals(0.015625, double0, 0.01D);
  }

  @Test
  public void test26()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      char[] charArray0 = new char[9];
      charArray0[6] = '>';
      // Undeclared exception!
      try {
        stringKernel0.normalizedKernel(charArray0, charArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test27()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      char[] charArray0 = new char[20];
      double double0 = stringKernel0.kernelHelper2((-6), charArray0, (-6), charArray0, (int) '\u0000');
      assertEquals(0.5, stringKernel0.getLambda(), 0.01D);
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals(0.0, double0, 0.01D);
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals(false, stringKernel0.getUseNormalization());
  }

  @Test
  public void test28()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      char[] charArray0 = new char[2];
      double double0 = stringKernel0.kernelLP(0, charArray0, 0, charArray0, (int) 'v', 0);
      assertEquals(false, stringKernel0.getUseNormalization());
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals(1.0, double0, 0.01D);
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01D);
      assertEquals(200003, stringKernel0.getInternalCacheSize());
  }

  @Test
  public void test29()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      char[] charArray0 = new char[3];
      double double0 = stringKernel0.kernelLP(1350, charArray0, 1350, charArray0, 0, 1350);
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals(0.0, double0, 0.01D);
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals(false, stringKernel0.getUseNormalization());
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01D);
      assertEquals(250007, stringKernel0.getCacheSize());
  }

  @Test
  public void test30()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try {
        stringKernel0.kernelLP(0, charArray0, 0, charArray0, 0, 892);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
      }
  }

  @Test
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[14];
      charArray0[1] = '9';
      StringKernel stringKernel0 = new StringKernel();
      // Undeclared exception!
      try {
        stringKernel0.kernelLP(0, charArray0, 0, charArray0, (int) '9', (-1814));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test32()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      char[] charArray0 = new char[3];
      double double0 = stringKernel0.kernelHelperLP(0, charArray0, (int) 'B', charArray0, (int) '\u0000', (int) 'B');
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals(false, stringKernel0.getUseNormalization());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01D);
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test33()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      char[] charArray0 = new char[26];
      double double0 = stringKernel0.kernelHelperLP((int) '2', charArray0, (int) '2', charArray0, 0, (int) '\u0000');
      assertEquals(0.0, double0, 0.01D);
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals(false, stringKernel0.getUseNormalization());
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01D);
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
  }

  @Test
  public void test34()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      char[] charArray0 = new char[3];
      double double0 = stringKernel0.kernelHelper2LP((-1474), charArray0, (-1726), charArray0, (int) 'J', (-1726));
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals(0.0, double0, 0.01D);
      assertEquals(0.5, stringKernel0.getLambda(), 0.01D);
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals(false, stringKernel0.getUseNormalization());
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
  }

  @Test
  public void test35()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      char[] charArray0 = new char[9];
      double double0 = stringKernel0.kernelHelper2LP(6, charArray0, (int) 'w', charArray0, (int) '\u0000', 6);
      assertEquals(0.5, stringKernel0.getLambda(), 0.01D);
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals(0.0, double0, 0.01D);
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals(false, stringKernel0.getUseNormalization());
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
  }

  @Test
  public void test36()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try {
        stringKernel0.kernelHelper2LP((-1530), charArray0, (int) 'N', charArray0, (int) '\u0000', (int) 'N');
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
        /*
         * / by zero
         */
      }
  }

  @Test
  public void test37()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      char[] charArray0 = new char[9];
      double double0 = stringKernel0.kernelHelper2LP((-1345), charArray0, (int) '\u0000', charArray0, (-1345), (-1345));
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals(0.0, double0, 0.01D);
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals(false, stringKernel0.getUseNormalization());
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01D);
  }

  @Test
  public void test38()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("7R<>}]N(nX{efr", arrayList0, 0);
      Attribute attribute0 = new Attribute("7R<>}]N(nX{efr", 0);
      arrayList0.add(attribute0);
      stringKernel0.initVars(instances0);
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals(false, stringKernel0.getUseNormalization());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01D);
      assertEquals(3, stringKernel0.getSubsequenceLength());
  }
}
