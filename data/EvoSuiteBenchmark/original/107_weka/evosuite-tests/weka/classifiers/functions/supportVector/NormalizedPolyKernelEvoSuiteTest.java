/*
 * This file was automatically generated by EvoSuite
 */

package weka.classifiers.functions.supportVector;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import weka.classifiers.functions.supportVector.NormalizedPolyKernel;
import weka.core.Instances;

@RunWith(EvoSuiteRunner.class)
public class NormalizedPolyKernelEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      String string0 = normalizedPolyKernel0.getRevision();
      assertEquals("8034", string0);
      assertNotNull(string0);
      assertEquals("Normalized Poly Kernel: K(x,y) = <x,y>^2.0/(<x,x>^2.0*<y,y>^2.0)^(1/2)", normalizedPolyKernel0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      String string0 = normalizedPolyKernel0.globalInfo();
      assertEquals("The normalized polynomial kernel.\nK(x,y) = <x,y>/sqrt(<x,x><y,y>) where <x,y> = PolyKernel(x,y)", string0);
      assertEquals("Normalized Poly Kernel: K(x,y) = <x,y>^2.0/(<x,x>^2.0*<y,y>^2.0)^(1/2)", normalizedPolyKernel0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = null;
      try {
        normalizedPolyKernel0 = new NormalizedPolyKernel((Instances) null, 1, (double) 1, false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      String string0 = normalizedPolyKernel0.toString();
      assertEquals("Normalized Poly Kernel: K(x,y) = <x,y>^2.0/(<x,x>^2.0*<y,y>^2.0)^(1/2)", string0);
      assertNotNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      normalizedPolyKernel0.setUseLowerOrder(true);
      String string0 = normalizedPolyKernel0.toString();
      assertEquals("Normalized Poly Kernel with lower order: K(x,y) = (<x,y>+1)^2.0/((<x,x>+1)^2.0*(<y,y>+1)^2.0)^(1/2)", normalizedPolyKernel0.toString());
      assertEquals("Normalized Poly Kernel with lower order: K(x,y) = (<x,y>+1)^2.0/((<x,x>+1)^2.0*(<y,y>+1)^2.0)^(1/2)", string0);
  }
}
