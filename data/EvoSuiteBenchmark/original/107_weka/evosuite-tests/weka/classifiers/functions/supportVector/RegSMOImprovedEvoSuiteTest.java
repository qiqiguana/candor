/*
 * This file was automatically generated by EvoSuite
 */

package weka.classifiers.functions.supportVector;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Enumeration;
import org.junit.BeforeClass;
import weka.classifiers.functions.supportVector.RegSMOImproved;

@RunWith(EvoSuiteRunner.class)
public class RegSMOImprovedEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      RegSMOImproved regSMOImproved0 = new RegSMOImproved();
      String string0 = regSMOImproved0.useVariant1TipText();
      assertEquals("set true to use variant 1 of the paper, otherwise use variant 2.", string0);
      assertEquals(0.0010, regSMOImproved0.m_fTolerance, 0.01D);
      assertEquals(true, regSMOImproved0.m_bUseVariant1);
  }

  @Test
  public void test1()  throws Throwable  {
      RegSMOImproved regSMOImproved0 = new RegSMOImproved();
      String string0 = regSMOImproved0.globalInfo();
      assertNotNull(string0);
      assertEquals(true, regSMOImproved0.m_bUseVariant1);
      assertEquals(0.0010, regSMOImproved0.m_fTolerance, 0.01D);
      assertEquals("Learn SVM for regression using SMO with Shevade, Keerthi, et al. adaption of the stopping criterion.\n\nFor more information see:\n\nS.K. Shevade, S.S. Keerthi, C. Bhattacharyya, K.R.K. Murthy: Improvements to the SMO Algorithm for SVM Regression. In: IEEE Transactions on Neural Networks, 1999.\n\nS.K. Shevade, S.S. Keerthi, C. Bhattacharyya, K.R.K. Murthy (1999). Improvements to the SMO Algorithm for SVM Regression. Control Division, Dept. of Mechanical Engineering.", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      RegSMOImproved regSMOImproved0 = new RegSMOImproved();
      String[] stringArray0 = regSMOImproved0.getOptions();
      assertNotNull(stringArray0);
      
      regSMOImproved0.setOptions(stringArray0);
      assertEquals(true, regSMOImproved0.isUseVariant1());
      assertEquals(0.0010, regSMOImproved0.m_fTolerance, 0.01D);
  }

  @Test
  public void test3()  throws Throwable  {
      RegSMOImproved regSMOImproved0 = new RegSMOImproved();
      String string0 = regSMOImproved0.toleranceTipText();
      assertEquals(0.0010, regSMOImproved0.m_fTolerance, 0.01D);
      assertEquals("tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol", string0);
      assertEquals(true, regSMOImproved0.m_bUseVariant1);
  }

  @Test
  public void test4()  throws Throwable  {
      RegSMOImproved regSMOImproved0 = new RegSMOImproved();
      try {
        regSMOImproved0.wrapUp();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      RegSMOImproved regSMOImproved0 = new RegSMOImproved();
      String string0 = regSMOImproved0.getRevision();
      assertEquals(true, regSMOImproved0.m_bUseVariant1);
      assertNotNull(string0);
      assertEquals("8034", string0);
      assertEquals(0.0010, regSMOImproved0.m_fTolerance, 0.01D);
  }

  @Test
  public void test6()  throws Throwable  {
      RegSMOImproved regSMOImproved0 = new RegSMOImproved();
      boolean boolean0 = regSMOImproved0.isUseVariant1();
      assertEquals(true, boolean0);
      assertEquals(0.0010, regSMOImproved0.m_fTolerance, 0.01D);
  }

  @Test
  public void test7()  throws Throwable  {
      RegSMOImproved regSMOImproved0 = new RegSMOImproved();
      Enumeration<Object> enumeration0 = regSMOImproved0.listOptions();
      assertNotNull(enumeration0);
      assertEquals(true, regSMOImproved0.m_bUseVariant1);
      assertEquals(0.0010, regSMOImproved0.m_fTolerance, 0.01D);
      assertEquals(0.0010, regSMOImproved0.getTolerance(), 0.01D);
  }

  @Test
  public void test8()  throws Throwable  {
      RegSMOImproved regSMOImproved0 = new RegSMOImproved();
      assertEquals(true, regSMOImproved0.m_bUseVariant1);
      
      regSMOImproved0.setOptions((String[]) null);
      regSMOImproved0.getOptions();
      assertEquals(false, regSMOImproved0.m_bUseVariant1);
      assertEquals(0.0010, regSMOImproved0.getTolerance(), 0.01D);
  }

  @Test
  public void test9()  throws Throwable  {
      RegSMOImproved regSMOImproved0 = new RegSMOImproved();
      try {
        regSMOImproved0.takeStep(1, 116, (double) 1, (double) 1, 0.0010);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      RegSMOImproved regSMOImproved0 = new RegSMOImproved();
      int int0 = regSMOImproved0.takeStep((-1082), (-1082), 0.0010, 0.0010, (double) (-1082));
      assertEquals(true, regSMOImproved0.m_bUseVariant1);
      assertEquals(0, int0);
      assertEquals(0.0010, regSMOImproved0.m_fTolerance, 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      RegSMOImproved regSMOImproved0 = new RegSMOImproved();
      double[] doubleArray0 = new double[22];
      doubleArray0[0] = 0.0010;
      regSMOImproved0.m_alpha = doubleArray0;
      try {
        regSMOImproved0.updateIndexSetFor(0, 0.0010);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      RegSMOImproved regSMOImproved0 = new RegSMOImproved();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0010;
      regSMOImproved0.m_alpha = doubleArray0;
      try {
        regSMOImproved0.updateIndexSetFor(0, 5.70001);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      RegSMOImproved regSMOImproved0 = new RegSMOImproved();
      regSMOImproved0.optimize1();
      assertEquals(0.0010, regSMOImproved0.m_fTolerance, 0.01D);
      assertEquals(true, regSMOImproved0.m_bUseVariant1);
      assertEquals(0.0010, regSMOImproved0.getTolerance(), 0.01D);
  }

  @Test
  public void test14()  throws Throwable  {
      RegSMOImproved regSMOImproved0 = new RegSMOImproved();
      regSMOImproved0.optimize2();
      assertEquals(0.0010, regSMOImproved0.m_fTolerance, 0.01D);
      assertEquals(true, regSMOImproved0.m_bUseVariant1);
      assertEquals(0.0010, regSMOImproved0.getTolerance(), 0.01D);
  }
}
