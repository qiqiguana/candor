/*
 * This file was automatically generated by EvoSuite
 */

package weka.classifiers.functions.supportVector;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Enumeration;
import org.junit.BeforeClass;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.functions.supportVector.RegOptimizer;
import weka.classifiers.functions.supportVector.RegSMOImproved;
import weka.core.Instance;
import weka.core.Instances;

@RunWith(EvoSuiteRunner.class)
public class RegOptimizerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      RegSMOImproved regSMOImproved0 = (RegSMOImproved)sMOreg0.getRegOptimizer();
      String string0 = regSMOImproved0.epsilonParameterTipText();
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", string0);
      assertEquals(0.0010, regSMOImproved0.getEpsilonParameter(), 0.01D);
      assertEquals(false, regSMOImproved0.modelBuilt());
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      assertEquals(-1, regSMOImproved0.getCacheHits());
      assertEquals(1, regSMOImproved0.getSeed());
  }

  @Test
  public void test1()  throws Throwable  {
      RegOptimizer regOptimizer0 = new RegOptimizer();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "[";
      regOptimizer0.setOptions(stringArray0);
      assertEquals(-1, regOptimizer0.getCacheHits());
      assertEquals(1, regOptimizer0.getSeed());
      assertEquals(false, regOptimizer0.modelBuilt());
      assertEquals(0, regOptimizer0.getKernelEvaluations());
      assertEquals(0.0010, regOptimizer0.getEpsilonParameter(), 0.01D);
  }

  @Test
  public void test2()  throws Throwable  {
      RegOptimizer regOptimizer0 = new RegOptimizer();
      try {
        regOptimizer0.buildClassifier((Instances) null);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * Don't call this directly, use subclass instead
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      RegOptimizer regOptimizer0 = new RegOptimizer();
      String string0 = regOptimizer0.getRevision();
      assertEquals("8034", string0);
      assertNotNull(string0);
      assertEquals(-1, regOptimizer0.getCacheHits());
      assertEquals(1, regOptimizer0.getSeed());
      assertEquals(0.0010, regOptimizer0.getEpsilonParameter(), 0.01D);
      assertEquals("SMOreg\n\nSupport vectors:\n +       0     \n\n\n\nNumber of kernel evaluations: 0", regOptimizer0.toString());
      assertEquals(false, regOptimizer0.modelBuilt());
  }

  @Test
  public void test4()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      RegSMOImproved regSMOImproved0 = (RegSMOImproved)sMOreg0.getRegOptimizer();
      String[] stringArray0 = regSMOImproved0.getOptions();
      assertNotNull(stringArray0);
      
      regSMOImproved0.setOptions(stringArray0);
      assertEquals("SMOreg: No model built yet.", sMOreg0.toString());
      assertEquals(1, regSMOImproved0.getSeed());
      assertEquals(-1, regSMOImproved0.getCacheHits());
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      assertEquals(0.0010, regSMOImproved0.getEpsilonParameter(), 0.01D);
  }

  @Test
  public void test5()  throws Throwable  {
      RegOptimizer regOptimizer0 = new RegOptimizer();
      Enumeration<Object> enumeration0 = regOptimizer0.listOptions();
      assertEquals(-1, regOptimizer0.getCacheHits());
      assertEquals(false, regOptimizer0.modelBuilt());
      assertEquals(0, regOptimizer0.getKernelEvaluations());
      assertEquals(1, regOptimizer0.getSeed());
      assertNotNull(enumeration0);
      assertEquals(0.0010, regOptimizer0.getEpsilonParameter(), 0.01D);
  }

  @Test
  public void test6()  throws Throwable  {
      RegOptimizer regOptimizer0 = new RegOptimizer();
      String string0 = regOptimizer0.seedTipText();
      assertEquals("SMOreg\n\nSupport vectors:\n +       0     \n\n\n\nNumber of kernel evaluations: 0", regOptimizer0.toString());
      assertEquals("Seed for random number generator.", string0);
      assertEquals(-1, regOptimizer0.getCacheHits());
      assertEquals(1, regOptimizer0.getSeed());
      assertEquals(false, regOptimizer0.modelBuilt());
      assertEquals(0.0010, regOptimizer0.getEpsilonParameter(), 0.01D);
  }

  @Test
  public void test7()  throws Throwable  {
      RegOptimizer regOptimizer0 = new RegOptimizer();
      SMOreg sMOreg0 = new SMOreg();
      regOptimizer0.setSMOReg(sMOreg0);
      try {
        regOptimizer0.init((Instances) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      RegOptimizer regOptimizer0 = new RegOptimizer();
      int int0 = regOptimizer0.getCacheHits();
      assertEquals(false, regOptimizer0.modelBuilt());
      assertEquals("SMOreg\n\nSupport vectors:\n +       0     \n\n\n\nNumber of kernel evaluations: 0", regOptimizer0.toString());
      assertEquals((-1), int0);
      assertEquals(1, regOptimizer0.getSeed());
      assertEquals(0.0010, regOptimizer0.getEpsilonParameter(), 0.01D);
  }

  @Test
  public void test9()  throws Throwable  {
      RegOptimizer regOptimizer0 = new RegOptimizer();
      boolean boolean0 = regOptimizer0.modelBuilt();
      assertEquals(-1, regOptimizer0.getCacheHits());
      assertEquals(0.0010, regOptimizer0.getEpsilonParameter(), 0.01D);
      assertEquals(1, regOptimizer0.getSeed());
      assertEquals(false, boolean0);
      assertEquals("SMOreg\n\nSupport vectors:\n +       0     \n\n\n\nNumber of kernel evaluations: 0", regOptimizer0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      RegOptimizer regOptimizer0 = new RegOptimizer();
      int int0 = regOptimizer0.getKernelEvaluations();
      assertEquals(0, int0);
      assertEquals(-1, regOptimizer0.getCacheHits());
      assertEquals(false, regOptimizer0.modelBuilt());
      assertEquals(0.0010, regOptimizer0.getEpsilonParameter(), 0.01D);
      assertEquals(1, regOptimizer0.getSeed());
  }

  @Test
  public void test11()  throws Throwable  {
      RegOptimizer regOptimizer0 = new RegOptimizer();
      try {
        regOptimizer0.init((Instances) null);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * SVM not initialized in optimizer. Use RegOptimizer.setSVMReg()
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      RegOptimizer regOptimizer0 = new RegOptimizer();
      double double0 = regOptimizer0.getScore();
      assertEquals(0.0010, regOptimizer0.getEpsilonParameter(), 0.01D);
      assertEquals(false, regOptimizer0.modelBuilt());
      assertEquals(-1, regOptimizer0.getCacheHits());
      assertEquals(0.0, double0, 0.01D);
      assertEquals(1, regOptimizer0.getSeed());
      assertEquals("SMOreg\n\nSupport vectors:\n +       0     \n\n\n\nNumber of kernel evaluations: 0", regOptimizer0.toString());
  }

  @Test
  public void test13()  throws Throwable  {
      RegOptimizer regOptimizer0 = new RegOptimizer();
      try {
        regOptimizer0.SVMOutput((Instance) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test14()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      RegSMOImproved regSMOImproved0 = (RegSMOImproved)sMOreg0.getRegOptimizer();
      String string0 = regSMOImproved0.toString();
      assertEquals(-1, regSMOImproved0.getCacheHits());
      assertEquals(1, regSMOImproved0.getSeed());
      assertEquals(0.0010, regSMOImproved0.getEpsilonParameter(), 0.01D);
      assertNotNull(string0);
      assertEquals("SMOreg\n\nSupport vectors:\n +       0     \n\n\n\nNumber of kernel evaluations: 0", string0);
      assertEquals("SMOreg: No model built yet.", sMOreg0.toString());
  }
}
