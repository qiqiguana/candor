/*
 * This file was automatically generated by EvoSuite
 */

package weka.classifiers.functions.supportVector;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Enumeration;
import org.junit.BeforeClass;
import weka.classifiers.functions.supportVector.RBFKernel;
import weka.core.BinarySparseInstance;
import weka.core.Instance;
import weka.core.Instances;

@RunWith(EvoSuiteRunner.class)
public class RBFKernelEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      RBFKernel rBFKernel0 = new RBFKernel();
      String string0 = rBFKernel0.getRevision();
      assertNotNull(string0);
      assertEquals("8034", string0);
      assertEquals(0.01, rBFKernel0.getGamma(), 0.01D);
  }

  @Test
  public void test1()  throws Throwable  {
      RBFKernel rBFKernel0 = new RBFKernel();
      String string0 = rBFKernel0.toString();
      assertEquals("RBF kernel: K(x,y) = e^-(0.01* <x-y,x-y>^2)", string0);
      assertNotNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      RBFKernel rBFKernel0 = null;
      try {
        rBFKernel0 = new RBFKernel((Instances) null, 0, 1.0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      RBFKernel rBFKernel0 = new RBFKernel();
      rBFKernel0.setChecksTurnedOff(true);
      try {
        rBFKernel0.buildKernel((Instances) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      RBFKernel rBFKernel0 = new RBFKernel();
      String string0 = rBFKernel0.gammaTipText();
      assertEquals("The Gamma value.", string0);
      assertEquals(0.01, rBFKernel0.getGamma(), 0.01D);
  }

  @Test
  public void test5()  throws Throwable  {
      RBFKernel rBFKernel0 = new RBFKernel();
      String string0 = rBFKernel0.globalInfo();
      assertEquals("The RBF kernel. K(x, y) = e^-(gamma * <x-y, x-y>^2)", string0);
      assertEquals(0.01, rBFKernel0.getGamma(), 0.01D);
  }

  @Test
  public void test6()  throws Throwable  {
      RBFKernel rBFKernel0 = new RBFKernel();
      Enumeration<Object> enumeration0 = rBFKernel0.listOptions();
      assertEquals("RBF kernel: K(x,y) = e^-(0.01* <x-y,x-y>^2)", rBFKernel0.toString());
      assertNotNull(enumeration0);
      assertEquals(0.01, rBFKernel0.getGamma(), 0.01D);
  }

  @Test
  public void test7()  throws Throwable  {
      RBFKernel rBFKernel0 = new RBFKernel();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "kqoyi";
      stringArray0[1] = "kqoyi";
      stringArray0[2] = "kqoyi";
      stringArray0[3] = "kqoyi";
      stringArray0[4] = "kqoyi";
      stringArray0[5] = "kqoyi";
      try {
        rBFKernel0.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * Illegal options: kqoyi kqoyi kqoyi kqoyi kqoyi kqoyi 
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      RBFKernel rBFKernel0 = new RBFKernel();
      String[] stringArray0 = rBFKernel0.getOptions();
      assertNotNull(stringArray0);
      
      rBFKernel0.setOptions(stringArray0);
      assertEquals(0.01, rBFKernel0.getGamma(), 0.01D);
      assertEquals("RBF kernel: K(x,y) = e^-(0.01* <x-y,x-y>^2)", rBFKernel0.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      RBFKernel rBFKernel0 = new RBFKernel();
      int[] intArray0 = new int[5];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((double) (-1), intArray0, 1110);
      try {
        rBFKernel0.evaluate((-1), 1110, (Instance) binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      RBFKernel rBFKernel0 = new RBFKernel();
      double double0 = rBFKernel0.eval((-585), (-585), (Instance) null);
      assertEquals(1, rBFKernel0.numEvals());
      assertEquals(1.0, double0, 0.01D);
  }
}
