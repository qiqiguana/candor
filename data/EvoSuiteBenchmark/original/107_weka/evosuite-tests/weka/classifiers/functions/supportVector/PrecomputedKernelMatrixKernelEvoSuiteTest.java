/*
 * This file was automatically generated by EvoSuite
 */

package weka.classifiers.functions.supportVector;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Enumeration;
import org.junit.BeforeClass;
import weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.matrix.Matrix;

@RunWith(EvoSuiteRunner.class)
public class PrecomputedKernelMatrixKernelEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      int int0 = precomputedKernelMatrixKernel0.numEvals();
      assertEquals(0, int0);
      assertEquals("Using kernel matrix from file with name: kernelMatrix.matrix", precomputedKernelMatrixKernel0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      String string0 = precomputedKernelMatrixKernel0.kernelMatrixFileTipText();
      assertEquals("Using kernel matrix from file with name: kernelMatrix.matrix", precomputedKernelMatrixKernel0.toString());
      assertEquals("The file holding the kernel matrix.", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      Capabilities capabilities0 = precomputedKernelMatrixKernel0.getCapabilities();
      assertEquals("Capabilities: [Nominal attributes, Binary attributes, Unary attributes, Empty nominal attributes, Nominal class, Binary class, Unary class, Empty nominal class, Numeric class, Date class, String class, Relational class, Missing class values]\nDependencies: []\nmin # Instance: 1\n", capabilities0.toString());
      assertEquals("Using kernel matrix from file with name: kernelMatrix.matrix", precomputedKernelMatrixKernel0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      String string0 = precomputedKernelMatrixKernel0.toString();
      assertEquals("Using kernel matrix from file with name: kernelMatrix.matrix", string0);
      assertNotNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      String string0 = precomputedKernelMatrixKernel0.globalInfo();
      assertEquals("This kernel is based on a static kernel matrix that is read from a file. Instances must have a single nominal attribute (excluding the class). This attribute must be the first attribute in the file and its values are used to reference rows/columns in the kernel matrix. The second attribute must be the class attribute.", string0);
      assertEquals("Using kernel matrix from file with name: kernelMatrix.matrix", precomputedKernelMatrixKernel0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      precomputedKernelMatrixKernel0.setOptions(stringArray0);
      assertEquals("Using kernel matrix from file with name: kernelMatrix.matrix", precomputedKernelMatrixKernel0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      String string0 = precomputedKernelMatrixKernel0.getRevision();
      assertNotNull(string0);
      assertEquals("8034", string0);
      assertEquals("Using kernel matrix from file with name: kernelMatrix.matrix", precomputedKernelMatrixKernel0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      int int0 = precomputedKernelMatrixKernel0.numCacheHits();
      assertEquals(0, int0);
      assertEquals("Using kernel matrix from file with name: kernelMatrix.matrix", precomputedKernelMatrixKernel0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      precomputedKernelMatrixKernel0.clean();
      assertEquals("Using kernel matrix from file with name: kernelMatrix.matrix", precomputedKernelMatrixKernel0.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      Matrix matrix0 = new Matrix(0, 0);
      precomputedKernelMatrixKernel0.setKernelMatrix(matrix0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      try {
        precomputedKernelMatrixKernel0.eval((-1663), 0, (Instance) binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      Enumeration<Object> enumeration0 = precomputedKernelMatrixKernel0.listOptions();
      assertEquals("Using kernel matrix from file with name: kernelMatrix.matrix", precomputedKernelMatrixKernel0.toString());
      assertNotNull(enumeration0);
  }

  @Test
  public void test11()  throws Throwable  {
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      String[] stringArray0 = precomputedKernelMatrixKernel0.getOptions();
      assertNotNull(stringArray0);
      
      precomputedKernelMatrixKernel0.setOptions(stringArray0);
      assertEquals("Using kernel matrix from file with name: kernelMatrix.matrix", precomputedKernelMatrixKernel0.toString());
  }

  @Test
  public void test12()  throws Throwable  {
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      precomputedKernelMatrixKernel0.setDebug(true);
      String[] stringArray0 = precomputedKernelMatrixKernel0.getOptions();
      assertEquals("Using kernel matrix from file with name: kernelMatrix.matrix", precomputedKernelMatrixKernel0.toString());
      assertNotNull(stringArray0);
  }

  @Test
  public void test13()  throws Throwable  {
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      int[] intArray0 = new int[8];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((double) 1202, intArray0, 1202);
      try {
        precomputedKernelMatrixKernel0.eval(1202, 1202, (Instance) binarySparseInstance0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Kernel matrix has not been loaded successfully.
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      Matrix matrix0 = new Matrix(0, 0);
      precomputedKernelMatrixKernel0.setKernelMatrix(matrix0);
      int[] intArray0 = new int[4];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((double) 0, intArray0, 0);
      try {
        precomputedKernelMatrixKernel0.eval(0, 0, (Instance) binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test15()  throws Throwable  {
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      double[][] doubleArray0 = new double[4][5];
      Matrix matrix0 = new Matrix(doubleArray0, 973, 973);
      precomputedKernelMatrixKernel0.setKernelMatrix(matrix0);
      precomputedKernelMatrixKernel0.initVars((Instances) null);
      assertEquals("Using kernel matrix from file with name: kernelMatrix.matrix", precomputedKernelMatrixKernel0.toString());
  }

  @Test
  public void test16()  throws Throwable  {
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      precomputedKernelMatrixKernel0.initVars((Instances) null);
      assertEquals("Using kernel matrix from file with name: kernelMatrix.matrix", precomputedKernelMatrixKernel0.toString());
  }
}
