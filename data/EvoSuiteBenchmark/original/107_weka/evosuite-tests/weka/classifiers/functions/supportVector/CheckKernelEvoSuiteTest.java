/*
 * This file was automatically generated by EvoSuite
 */

package weka.classifiers.functions.supportVector;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Enumeration;
import org.evosuite.runtime.Random;
import org.junit.BeforeClass;
import weka.classifiers.functions.supportVector.CheckKernel;

@RunWith(EvoSuiteRunner.class)
public class CheckKernelEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      CheckKernel checkKernel0 = new CheckKernel();
      String string0 = checkKernel0.getRevision();
      assertNotNull(string0);
      assertEquals("8034", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      CheckKernel checkKernel0 = new CheckKernel();
      // Undeclared exception!
      try {
        checkKernel0.datasetIntegrity(true, true, true, true, true, true, 1677, true, true);
        fail("Expecting exception: Error");
      } catch(Error e) {
        /*
         * Error setting up for tests: Attribute type '1677' unknown!
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      CheckKernel checkKernel0 = new CheckKernel();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "uRbwbTG(L:m|$X";
      stringArray0[2] = "fAa%v(}Ac~X~o.Z";
      stringArray0[3] = "";
      stringArray0[4] = "Y\")x@gHF$uryb/s|#";
      stringArray0[5] = "L_POu>:@M";
      stringArray0[6] = "";
      stringArray0[7] = "";
      checkKernel0.setOptions(stringArray0);
      assertEquals(1, checkKernel0.getNumDate());
  }

  @Test
  public void test3()  throws Throwable  {
      CheckKernel checkKernel0 = new CheckKernel();
      Enumeration<Object> enumeration0 = checkKernel0.listOptions();
      assertEquals(true, enumeration0.hasMoreElements());
  }

  @Test
  public void test4()  throws Throwable  {
      CheckKernel checkKernel0 = new CheckKernel();
      String[] stringArray0 = checkKernel0.getOptions();
      assertNotNull(stringArray0);
  }

  @Test
  public void test5()  throws Throwable  {
      CheckKernel checkKernel0 = new CheckKernel();
      checkKernel0.testsPerClassType(0, false, true);
      assertEquals("The,quick,brown,fox,jumps,over,the,lazy,dog", checkKernel0.getWords());
  }

  @Test
  public void test6()  throws Throwable  {
      CheckKernel checkKernel0 = new CheckKernel();
      checkKernel0.testsPerClassType(0, true, false);
      assertEquals("8034", checkKernel0.getRevision());
  }

  @Test
  public void test7()  throws Throwable  {
      CheckKernel checkKernel0 = new CheckKernel();
      Random.setNextRandom(92);
      checkKernel0.doTests();
      assertEquals("The,quick,brown,fox,jumps,over,the,lazy,dog", checkKernel0.getWords());
  }

  @Test
  public void test8()  throws Throwable  {
      CheckKernel checkKernel0 = new CheckKernel();
      checkKernel0.setDebug(true);
      checkKernel0.doTests();
      assertEquals(10, checkKernel0.getNumInstancesRelational());
  }

  @Test
  public void test9()  throws Throwable  {
      CheckKernel checkKernel0 = new CheckKernel();
      boolean[] booleanArray0 = checkKernel0.correctBuildInitialisation(true, true, true, false, true, true, 0);
      assertNotNull(booleanArray0);
  }

  @Test
  public void test10()  throws Throwable  {
      CheckKernel checkKernel0 = new CheckKernel();
      boolean[] booleanArray0 = checkKernel0.correctBuildInitialisation(false, false, false, true, false, true, 0);
      assertNotNull(booleanArray0);
  }

  @Test
  public void test11()  throws Throwable  {
      CheckKernel checkKernel0 = new CheckKernel();
      checkKernel0.setNumRelational(0);
      checkKernel0.setDebug(true);
      checkKernel0.testsPerClassType(0, true, false);
      assertEquals(10, checkKernel0.getNumInstancesRelational());
  }

  @Test
  public void test12()  throws Throwable  {
      CheckKernel checkKernel0 = new CheckKernel();
      boolean[] booleanArray0 = checkKernel0.canHandleMissing(false, true, true, true, true, true, 0, true, true, 0);
      assertNotNull(booleanArray0);
  }

  @Test
  public void test13()  throws Throwable  {
      CheckKernel checkKernel0 = new CheckKernel();
      // Undeclared exception!
      try {
        checkKernel0.instanceWeights(true, false, true, true, false, true, 0);
        fail("Expecting exception: Error");
      } catch(Error e) {
        /*
         * Error setting up for tests: weka.classifiers.functions.supportVector.RBFKernel: Cannot handle binary attributes!
         */
      }
  }
}
