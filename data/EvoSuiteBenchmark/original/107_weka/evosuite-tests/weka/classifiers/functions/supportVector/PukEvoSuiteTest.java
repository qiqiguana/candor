/*
 * This file was automatically generated by EvoSuite
 */

package weka.classifiers.functions.supportVector;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Enumeration;
import org.junit.BeforeClass;
import weka.classifiers.functions.supportVector.Puk;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;

@RunWith(EvoSuiteRunner.class)
public class PukEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Puk puk0 = new Puk();
      String[] stringArray0 = puk0.getOptions();
      assertNotNull(stringArray0);
      
      puk0.setOptions(stringArray0);
      assertEquals(1.0, puk0.getSigma(), 0.01D);
      assertEquals(1.0, puk0.getOmega(), 0.01D);
  }

  @Test
  public void test1()  throws Throwable  {
      Puk puk0 = new Puk();
      String string0 = puk0.sigmaTipText();
      assertEquals(1.0, puk0.getSigma(), 0.01D);
      assertEquals(1.0, puk0.getOmega(), 0.01D);
      assertEquals("The Sigma value.", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      Puk puk0 = null;
      try {
        puk0 = new Puk((Instances) null, 1307, (double) 1307, (double) 1307);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      Puk puk0 = new Puk();
      // Undeclared exception!
      try {
        puk0.initVars((Instances) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      Puk puk0 = new Puk();
      String string0 = puk0.toString();
      assertEquals("Puk kernel", string0);
      assertEquals(1.0, puk0.getSigma(), 0.01D);
      assertEquals(1.0, puk0.getOmega(), 0.01D);
  }

  @Test
  public void test5()  throws Throwable  {
      Puk puk0 = new Puk();
      String string0 = puk0.globalInfo();
      assertEquals(1.0, puk0.getOmega(), 0.01D);
      assertEquals(1.0, puk0.getSigma(), 0.01D);
      assertNotNull(string0);
      assertEquals("The Pearson VII function-based universal kernel.\n\nFor more information see:\n\nB. Uestuen, W.J. Melssen, L.M.C. Buydens (2006). Facilitating the application of Support Vector Regression by using a universal Pearson VII function based kernel. Chemometrics and Intelligent Laboratory Systems. 81:29-40.", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      Puk puk0 = new Puk();
      String string0 = puk0.omegaTipText();
      assertEquals(1.0, puk0.getSigma(), 0.01D);
      assertEquals(1.0, puk0.getOmega(), 0.01D);
      assertEquals("The Omega value.", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      Puk puk0 = new Puk();
      String string0 = puk0.getRevision();
      assertEquals(1.0, puk0.getSigma(), 0.01D);
      assertEquals("8034", string0);
      assertNotNull(string0);
      assertEquals(1.0, puk0.getOmega(), 0.01D);
  }

  @Test
  public void test8()  throws Throwable  {
      Puk puk0 = new Puk();
      Enumeration<Object> enumeration0 = puk0.listOptions();
      assertEquals(1.0, puk0.getSigma(), 0.01D);
      assertEquals(1.0, puk0.getOmega(), 0.01D);
      assertNotNull(enumeration0);
  }

  @Test
  public void test9()  throws Throwable  {
      Puk puk0 = new Puk();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      puk0.setOptions(stringArray0);
      assertEquals(1.0, puk0.getOmega(), 0.01D);
      assertEquals(1.0, puk0.getSigma(), 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      Puk puk0 = new Puk();
      DenseInstance denseInstance0 = new DenseInstance(258);
      try {
        puk0.evaluate((-2), 258, (Instance) denseInstance0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Puk puk0 = new Puk();
      double[] doubleArray0 = new double[5];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((double) (-1014), doubleArray0);
      double double0 = puk0.eval((-1014), (-1014), (Instance) binarySparseInstance0);
      assertEquals(1, puk0.numEvals());
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      Puk puk0 = new Puk();
      double[] doubleArray0 = new double[1];
      int[] intArray0 = new int[7];
      SparseInstance sparseInstance0 = new SparseInstance((double) 17, doubleArray0, intArray0, 0);
      try {
        puk0.evaluate((-1), 17, (Instance) sparseInstance0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
