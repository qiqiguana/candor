/*
 * This file was automatically generated by EvoSuite
 */

package weka.classifiers.functions.supportVector;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Enumeration;
import org.junit.BeforeClass;
import weka.classifiers.functions.supportVector.NormalizedPolyKernel;
import weka.classifiers.functions.supportVector.PolyKernel;
import weka.core.BinarySparseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;

@RunWith(EvoSuiteRunner.class)
public class PolyKernelEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      PolyKernel polyKernel0 = new PolyKernel();
      String[] stringArray0 = polyKernel0.getOptions();
      assertNotNull(stringArray0);
      
      polyKernel0.setOptions(stringArray0);
      assertEquals("Linear Kernel: K(x,y) = <x,y>", polyKernel0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = null;
      try {
        normalizedPolyKernel0 = new NormalizedPolyKernel((Instances) null, 258, (double) 765, true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      PolyKernel polyKernel0 = new PolyKernel();
      String string0 = polyKernel0.useLowerOrderTipText();
      assertEquals("Whether to use lower-order terms.", string0);
      assertEquals("Linear Kernel: K(x,y) = <x,y>", polyKernel0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      PolyKernel polyKernel0 = new PolyKernel();
      String string0 = polyKernel0.exponentTipText();
      assertEquals("Linear Kernel: K(x,y) = <x,y>", polyKernel0.toString());
      assertEquals("The exponent value.", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      PolyKernel polyKernel0 = new PolyKernel();
      String string0 = polyKernel0.getRevision();
      assertEquals("8034", string0);
      assertEquals("Linear Kernel: K(x,y) = <x,y>", polyKernel0.toString());
      assertNotNull(string0);
  }

  @Test
  public void test5()  throws Throwable  {
      PolyKernel polyKernel0 = new PolyKernel();
      String string0 = polyKernel0.globalInfo();
      assertEquals("Linear Kernel: K(x,y) = <x,y>", polyKernel0.toString());
      assertEquals("The polynomial kernel : K(x, y) = <x, y>^p or K(x, y) = (<x, y>+1)^p", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      normalizedPolyKernel0.setCacheSize(40);
      assertEquals("Normalized Poly Kernel: K(x,y) = <x,y>^2.0/(<x,x>^2.0*<y,y>^2.0)^(1/2)", normalizedPolyKernel0.toString());
      assertEquals(2.0, normalizedPolyKernel0.getExponent(), 0.01D);
  }

  @Test
  public void test7()  throws Throwable  {
      PolyKernel polyKernel0 = new PolyKernel();
      Enumeration<Object> enumeration0 = polyKernel0.listOptions();
      assertNotNull(enumeration0);
      assertEquals("Linear Kernel: K(x,y) = <x,y>", polyKernel0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      PolyKernel polyKernel0 = new PolyKernel();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Linear Kernel: K(x,y) = <x,y>";
      stringArray0[1] = "Linear Kernel: K(x,y) = <x,y>";
      stringArray0[2] = "Linear Kernel: K(x,y) = <x,y>";
      try {
        polyKernel0.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * Illegal options: Linear Kernel: K(x,y) = <x,y> Linear Kernel: K(x,y) = <x,y> Linear Kernel: K(x,y) = <x,y> 
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      PolyKernel polyKernel0 = new PolyKernel();
      assertEquals(false, polyKernel0.getUseLowerOrder());
      
      polyKernel0.setUseLowerOrder(true);
      polyKernel0.getOptions();
      assertEquals("Linear Kernel with lower order: K(x,y) = <x,y> + 1", polyKernel0.toString());
      assertEquals(true, polyKernel0.getUseLowerOrder());
  }

  @Test
  public void test10()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      SparseInstance sparseInstance0 = new SparseInstance(13);
      try {
        normalizedPolyKernel0.evaluate(13, 0, (Instance) sparseInstance0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      int[] intArray0 = new int[11];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((double) (-1522), intArray0, 0);
      try {
        normalizedPolyKernel0.eval((-1522), (-1522), (Instance) binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      PolyKernel polyKernel0 = new PolyKernel();
      polyKernel0.setExponent(464.47431712381893);
      String string0 = polyKernel0.toString();
      assertEquals("Poly Kernel: K(x,y) = <x,y>^464.47431712381893", polyKernel0.toString());
      assertEquals("Poly Kernel: K(x,y) = <x,y>^464.47431712381893", string0);
  }

  @Test
  public void test13()  throws Throwable  {
      PolyKernel polyKernel0 = new PolyKernel();
      String string0 = polyKernel0.toString();
      assertEquals("Linear Kernel: K(x,y) = <x,y>", string0);
  }

  @Test
  public void test14()  throws Throwable  {
      PolyKernel polyKernel0 = new PolyKernel();
      assertEquals(false, polyKernel0.getUseLowerOrder());
      
      polyKernel0.setUseLowerOrder(true);
      String string0 = polyKernel0.toString();
      assertEquals(true, polyKernel0.getUseLowerOrder());
      assertEquals("Linear Kernel with lower order: K(x,y) = <x,y> + 1", string0);
  }

  @Test
  public void test15()  throws Throwable  {
      PolyKernel polyKernel0 = new PolyKernel();
      polyKernel0.setExponent(464.47431712381893);
      polyKernel0.setUseLowerOrder(true);
      String string0 = polyKernel0.toString();
      assertEquals(464.47431712381893, polyKernel0.getExponent(), 0.01D);
      assertEquals("Poly Kernel with lower order: K(x,y) = (<x,y> + 1)^464.47431712381893", string0);
  }
}
