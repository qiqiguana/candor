/*
 * This file was automatically generated by EvoSuite
 */

package weka.classifiers.functions.supportVector;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Enumeration;
import org.junit.BeforeClass;
import weka.classifiers.functions.supportVector.Kernel;
import weka.classifiers.functions.supportVector.NormalizedPolyKernel;
import weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel;
import weka.classifiers.functions.supportVector.Puk;
import weka.classifiers.functions.supportVector.RBFKernel;
import weka.classifiers.functions.supportVector.StringKernel;
import weka.core.Instances;

@RunWith(EvoSuiteRunner.class)
public class KernelEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Puk puk0 = new Puk();
      String[] stringArray0 = puk0.getOptions();
      assertNotNull(stringArray0);
      
      puk0.setOptions(stringArray0);
      assertEquals(false, puk0.getDebug());
      assertEquals(false, puk0.getChecksTurnedOff());
  }

  @Test
  public void test1()  throws Throwable  {
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel1 = (PrecomputedKernelMatrixKernel)Kernel.makeCopy((Kernel) precomputedKernelMatrixKernel0);
      assertEquals(false, precomputedKernelMatrixKernel1.getChecksTurnedOff());
      assertNotNull(precomputedKernelMatrixKernel1);
      assertEquals(false, precomputedKernelMatrixKernel1.getDebug());
  }

  @Test
  public void test2()  throws Throwable  {
      StringKernel stringKernel0 = null;
      try {
        stringKernel0 = new StringKernel((Instances) null, 0, 0, (double) 0, false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      String[] stringArray0 = stringKernel0.getOptions();
      assertNotNull(stringArray0);
      
      try {
        Kernel.forName("Turns time-consuming checks off - use with caution.", stringArray0);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * Can't find class called: Turns time-consuming checks off - use with caution.
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      RBFKernel rBFKernel0 = new RBFKernel();
      Enumeration<Object> enumeration0 = rBFKernel0.listOptions();
      assertEquals(false, rBFKernel0.getChecksTurnedOff());
      assertEquals(false, rBFKernel0.getDebug());
      assertNotNull(enumeration0);
  }

  @Test
  public void test5()  throws Throwable  {
      RBFKernel rBFKernel0 = new RBFKernel();
      String string0 = rBFKernel0.debugTipText();
      assertEquals(false, rBFKernel0.getDebug());
      assertEquals(false, rBFKernel0.getChecksTurnedOff());
      assertEquals("Turns on the output of debugging information.", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      String string0 = stringKernel0.checksTurnedOffTipText();
      assertEquals(false, stringKernel0.getDebug());
      assertEquals("Turns time-consuming checks off - use with caution.", string0);
      assertEquals(false, stringKernel0.getChecksTurnedOff());
  }

  @Test
  public void test7()  throws Throwable  {
      Puk puk0 = new Puk();
      // Undeclared exception!
      try {
        puk0.initVars((Instances) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      Puk puk0 = new Puk();
      assertEquals(false, puk0.getDebug());
      
      puk0.setDebug(true);
      puk0.getOptions();
      assertEquals(true, puk0.getDebug());
      assertEquals(false, puk0.getChecksTurnedOff());
  }

  @Test
  public void test9()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      assertEquals(false, normalizedPolyKernel0.getChecksTurnedOff());
      
      normalizedPolyKernel0.setChecksTurnedOff(true);
      normalizedPolyKernel0.getOptions();
      assertEquals(true, normalizedPolyKernel0.getChecksTurnedOff());
  }

  @Test
  public void test10()  throws Throwable  {
      RBFKernel rBFKernel0 = new RBFKernel();
      Kernel[] kernelArray0 = Kernel.makeCopies((Kernel) rBFKernel0, 17);
      assertEquals(false, rBFKernel0.getDebug());
      assertEquals(false, rBFKernel0.getChecksTurnedOff());
      assertNotNull(kernelArray0);
  }

  @Test
  public void test11()  throws Throwable  {
      try {
        Kernel.makeCopies((Kernel) null, (-18));
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * No model kernel set
         */
      }
  }
}
