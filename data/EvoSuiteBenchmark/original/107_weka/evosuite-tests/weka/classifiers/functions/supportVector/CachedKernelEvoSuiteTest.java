/*
 * This file was automatically generated by EvoSuite
 */

package weka.classifiers.functions.supportVector;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Enumeration;
import org.junit.BeforeClass;
import weka.classifiers.functions.supportVector.NormalizedPolyKernel;
import weka.classifiers.functions.supportVector.PolyKernel;
import weka.classifiers.functions.supportVector.Puk;
import weka.classifiers.functions.supportVector.RBFKernel;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;

@RunWith(EvoSuiteRunner.class)
public class CachedKernelEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Puk puk0 = new Puk();
      String[] stringArray0 = puk0.getOptions();
      assertNotNull(stringArray0);
      
      puk0.setOptions(stringArray0);
      assertEquals(250007, puk0.getCacheSize());
  }

  @Test
  public void test1()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      String string0 = normalizedPolyKernel0.cacheSizeTipText();
      assertEquals("The size of the cache (a prime number), 0 for full cache and -1 to turn it off.", string0);
      assertEquals(250007, normalizedPolyKernel0.getCacheSize());
  }

  @Test
  public void test2()  throws Throwable  {
      PolyKernel polyKernel0 = new PolyKernel();
      int int0 = polyKernel0.numEvals();
      assertEquals(0, int0);
      assertEquals(250007, polyKernel0.getCacheSize());
  }

  @Test
  public void test3()  throws Throwable  {
      RBFKernel rBFKernel0 = new RBFKernel();
      int int0 = rBFKernel0.numCacheHits();
      assertEquals(0, int0);
      assertEquals(250007, rBFKernel0.getCacheSize());
  }

  @Test
  public void test4()  throws Throwable  {
      RBFKernel rBFKernel0 = new RBFKernel();
      Enumeration<Object> enumeration0 = rBFKernel0.listOptions();
      assertEquals(250007, rBFKernel0.getCacheSize());
      assertNotNull(enumeration0);
  }

  @Test
  public void test5()  throws Throwable  {
      RBFKernel rBFKernel0 = new RBFKernel();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "The size of the cache (a prime number), 0 for full cache and -1 to turn it off.";
      stringArray0[1] = "The size of the cache (a prime number), 0 for full cache and -1 to turn it off.";
      stringArray0[2] = "The size of the cache (a prime number), 0 for full cache and -1 to turn it off.";
      stringArray0[3] = "The size of the cache (a prime number), 0 for full cache and -1 to turn it off.";
      stringArray0[4] = "The size of the cache (a prime number), 0 for full cache and -1 to turn it off.";
      try {
        rBFKernel0.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * Illegal options: The size of the cache (a prime number), 0 for full cache and -1 to turn it off. The size of the cache (a prime number), 0 for full cache and -1 to turn it off. The size of the cache (a prime number), 0 for full cache and -1 to turn it off. The size of the cache (a prime number), 0 for full cache and -1 to turn it off. The size of the cache (a prime number), 0 for full cache and -1 to turn it off. 
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      RBFKernel rBFKernel0 = new RBFKernel();
      rBFKernel0.setDebug(true);
      String[] stringArray0 = rBFKernel0.getOptions();
      assertEquals(250007, rBFKernel0.getCacheSize());
      assertNotNull(stringArray0);
  }

  @Test
  public void test7()  throws Throwable  {
      Puk puk0 = new Puk();
      DenseInstance denseInstance0 = new DenseInstance(0);
      puk0.eval((-21), (-21), (Instance) denseInstance0);
      assertEquals(1, puk0.numEvals());
      assertEquals(250007, puk0.getCacheSize());
  }

  @Test
  public void test8()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      try {
        normalizedPolyKernel0.eval(975, 975, (Instance) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      Puk puk0 = new Puk();
      assertEquals(250007, puk0.getCacheSize());
      
      puk0.setCacheSize(0);
      SparseInstance sparseInstance0 = new SparseInstance(0);
      try {
        puk0.eval(0, 0, (Instance) sparseInstance0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      PolyKernel polyKernel0 = new PolyKernel();
      double[] doubleArray0 = new double[8];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((double) (-189), doubleArray0);
      try {
        polyKernel0.eval(1123, (-189), (Instance) binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = null;
      try {
        normalizedPolyKernel0 = new NormalizedPolyKernel((Instances) null, 0, (double) 0, false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
