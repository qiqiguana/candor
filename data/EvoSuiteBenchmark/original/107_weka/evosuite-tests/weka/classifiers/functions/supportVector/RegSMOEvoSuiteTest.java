/*
 * This file was automatically generated by EvoSuite
 */

package weka.classifiers.functions.supportVector;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Enumeration;
import org.junit.BeforeClass;
import weka.classifiers.functions.supportVector.RegSMO;
import weka.core.Instances;

@RunWith(EvoSuiteRunner.class)
public class RegSMOEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      String string0 = regSMO0.getRevision();
      assertNotNull(string0);
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01D);
      assertEquals("8034", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      try {
        regSMO0.wrapUp();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      String string0 = regSMO0.epsilonTipText();
      assertEquals("The epsilon for round-off error (shouldn't be changed).", string0);
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01D);
  }

  @Test
  public void test3()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      regSMO0.setOptions(stringArray0);
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01D);
  }

  @Test
  public void test4()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      String[] stringArray0 = regSMO0.getOptions();
      assertNotNull(stringArray0);
      
      regSMO0.setOptions(stringArray0);
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01D);
  }

  @Test
  public void test5()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      String string0 = regSMO0.globalInfo();
      assertEquals("Implementation of SMO for support vector regression as described in :\n\nA.J. Smola, B. Schoelkopf (1998). A tutorial on support vector regression.", string0);
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01D);
      assertNotNull(string0);
  }

  @Test
  public void test6()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      try {
        regSMO0.buildClassifier((Instances) null);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * SVM not initialized in optimizer. Use RegOptimizer.setSVMReg()
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      Enumeration<Object> enumeration0 = regSMO0.listOptions();
      assertNotNull(enumeration0);
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01D);
  }

  @Test
  public void test8()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      // Undeclared exception!
      try {
        regSMO0.findOptimalPointOnLine((-1), 965.4849771054746, 0.0010, 0.0010, (-1), (double) (-1), 965.4849771054746, 965.4849771054746, (double) (-1), 0.0010, 965.4849771054746);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      boolean boolean0 = regSMO0.findOptimalPointOnLine(7, 7, 7, 7, (-18), 7, 7, 7, 7, (-18), 7);
      assertEquals(false, boolean0);
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      // Undeclared exception!
      try {
        regSMO0.findOptimalPointOnLine(1007, (double) 1007, (double) 1007, (double) 1007, 104, 1788.8536163819542, (double) 1007, (double) 1007, (double) 104, (double) 104, (double) 104);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      // Undeclared exception!
      try {
        regSMO0.findOptimalPointOnLine((-91), (double) 0, (double) (-91), (double) (-91), 0, (double) 0, (double) 0, (double) 0, 257.7691602553819, 257.7691602553819, (double) (-91));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      // Undeclared exception!
      try {
        regSMO0.findOptimalPointOnLine(7, 0, 0, 7, (-18), 7, 0, 0, 7, 7, 0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      // Undeclared exception!
      try {
        regSMO0.findOptimalPointOnLine(807, (double) (-1258), 2.707718714761782, 2.707718714761782, (-1258), 2.707718714761782, (double) (-1258), (double) 807, 0.0, 2.707718714761782, (double) 807);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test14()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      // Undeclared exception!
      try {
        regSMO0.findOptimalPointOnLine(1, (double) 1, (double) 1, 0.0, 1, 0.0, 0.0, (double) 1, (double) 1, (double) 1, (double) 1);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test15()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      // Undeclared exception!
      try {
        regSMO0.findOptimalPointOnLine(7, (double) 7, 0.693147181, 0.693147181, 7, 0.693147181, (double) 7, 0.693147181, (double) 7, (double) 7, (double) 7);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test16()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      // Undeclared exception!
      try {
        regSMO0.findOptimalPointOnLine(953, (double) 953, (double) 0, (double) 953, 953, 6.0, 0.2, 0.2, 6.0, (double) 953, 0.2);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test17()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      // Undeclared exception!
      try {
        regSMO0.findOptimalPointOnLine(3, 0.0010, 0.0010, 0.0010, 3, (double) 3, 0.0010, 0.0010, 0.0010, 0.0010, (double) 3);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test18()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      // Undeclared exception!
      try {
        regSMO0.findOptimalPointOnLine(1, 0.0010, 1795.0223640518377, 1795.0223640518377, 1, (double) 1, 0.0010, 0.0010, 0.0010, 0.0010, (double) 1);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test19()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      // Undeclared exception!
      try {
        regSMO0.findOptimalPointOnLine(15, (double) 15, (double) 15, (-20.282703507797155), 15, (-20.282703507797155), (-20.282703507797155), (-20.282703507797155), (double) 15, (double) 15, (double) 15);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test20()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      regSMO0.setEpsilonParameter((double) 1);
      // Undeclared exception!
      try {
        regSMO0.findOptimalPointOnLine(1, (double) 1, (double) 1, 0.0, 1, 0.0, 0.0, (double) 1, (double) 1, (double) 1, (double) 1);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test21()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      // Undeclared exception!
      try {
        regSMO0.findOptimalPointOnLine(786, (double) (-1564), 17.884981750827073, 17.884981750827073, (-1564), 17.884981750827073, (double) (-1564), (double) 786, 17.884981750827073, 17.884981750827073, (double) 786);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test22()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      try {
        regSMO0.takeStep((-694), 4, 4, 4, (-694));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test23()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      int int0 = regSMO0.takeStep((-8), (-8), 1.0E-12, (double) (-8), (double) (-8));
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01D);
      assertEquals(0, int0);
  }

  @Test
  public void test24()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      // Undeclared exception!
      try {
        regSMO0.secondChoiceHeuristic(0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test25()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      // Undeclared exception!
      try {
        regSMO0.secondChoiceHeuristic(785);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test26()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      try {
        regSMO0.optimize();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
