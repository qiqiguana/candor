/*
 * This file was automatically generated by EvoSuite
 */

package weka.classifiers.functions.supportVector;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import weka.classifiers.functions.supportVector.Kernel;
import weka.classifiers.functions.supportVector.KernelEvaluation;
import weka.classifiers.functions.supportVector.NormalizedPolyKernel;
import weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel;
import weka.classifiers.functions.supportVector.RBFKernel;
import weka.core.Capabilities;
import weka.core.Instances;
import weka.core.TestInstances;

@RunWith(EvoSuiteRunner.class)
public class KernelEvaluationEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      KernelEvaluation kernelEvaluation0 = new KernelEvaluation();
      RBFKernel rBFKernel0 = new RBFKernel();
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = normalizedPolyKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("8034");
      String string0 = kernelEvaluation0.evaluate((Kernel) rBFKernel0, instances0);
      assertEquals(210, rBFKernel0.numEvals());
      assertEquals("\n=== Model ===\n\nRBF kernel: K(x,y) = e^-(0.01* <x-y,x-y>^2)\n\n=== Evaluation ===\n\nCache size   : 250007\n# Evaluations: 210\n# Cache hits : 210\nElapsed time : 0.0s\n", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[10];
      try {
        KernelEvaluation.evaluate("\n== Model ===\n\n", stringArray0);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * Can't find class with name 
         * == Model ===
         * 
         * .
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      KernelEvaluation kernelEvaluation0 = new KernelEvaluation();
      String string0 = kernelEvaluation0.toString();
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      KernelEvaluation kernelEvaluation0 = new KernelEvaluation();
      String string0 = kernelEvaluation0.getRevision();
      assertNotNull(string0);
      assertEquals("8034", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      String string0 = KernelEvaluation.makeOptionString((Kernel) null);
      assertEquals("\nGeneral options:\n\n-t <training file>\n\tThe name of the training file.\n-c <class index>\n\tSets index of class attribute (default: last).\n", string0);
      assertNotNull(string0);
  }

  @Test
  public void test5()  throws Throwable  {
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ",U*_p/";
      try {
        KernelEvaluation.evaluate((Kernel) precomputedKernelMatrixKernel0, stringArray0);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * 
         * Weka exception: No training file given!
         * 
         * General options:
         * 
         * -t <training file>
         * \tThe name of the training file.
         * -c <class index>
         * \tSets index of class attribute (default: last).
         * 
         * Options specific to PrecomputedKernelMatrixKernel:
         * 
         * -D
         * \tEnables debugging output (if available) to be printed.
         * \t(default: off)
         * -no-checks
         * \tTurns off all checks - use with caution!
         * \t(default: checks on)
         * -M <file name>
         * \tThe file name of the file that holds the kernel matrix.
         * \t(default: kernelMatrix.matrix)
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      KernelEvaluation kernelEvaluation0 = new KernelEvaluation();
      RBFKernel rBFKernel0 = new RBFKernel();
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = normalizedPolyKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("8034");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "8034";
      stringArray0[1] = "\n=== Model ===\n\nRBF kernel: K(x,y) = e^-(0.01* <x-y,x-y>^2)\n\n=== Evaluation ===\n\nCache size   : 250007\n# Evaluations: 210\n# Cache hits : 210\nElapsed time : 0.0s\n";
      stringArray0[2] = "\n=== Model ===\n\nRBF kernel: K(x,y) = e^-(0.01* <x-y,x-y>^2)\n\n=== Evaluation ===\n\nCache size   : 250007\n# Evaluations: 210\n# Cache hits : 210\nElapsed time : 0.0s\n";
      stringArray0[3] = "8034";
      stringArray0[4] = "\n=== Model ===\n\nRBF kernel: K(x,y) = e^-(0.01* <x-y,x-y>^2)\n\n=== Evaluation ===\n\nCache size   : 250007\n# Evaluations: 210\n# Cache hits : 210\nElapsed time : 0.0s\n";
      stringArray0[5] = "8034";
      kernelEvaluation0.setUserOptions(stringArray0);
      String string0 = kernelEvaluation0.evaluate((Kernel) rBFKernel0, instances0);
      assertEquals(210, rBFKernel0.numEvals());
      assertEquals("\n=== Model ===\n\nOptions: 8034 \"\\n=== Model ===\\n\\nRBF kernel: K(x,y) = e^-(0.01* <x-y,x-y>^2)\\n\\n=== Evaluation ===\\n\\nCache size   : 250007\\n# Evaluations: 210\\n# Cache hits : 210\\nElapsed time : 0.0s\\n\" \"\\n=== Model ===\\n\\nRBF kernel: K(x,y) = e^-(0.01* <x-y,x-y>^2)\\n\\n=== Evaluation ===\\n\\nCache size   : 250007\\n# Evaluations: 210\\n# Cache hits : 210\\nElapsed time : 0.0s\\n\" 8034 \"\\n=== Model ===\\n\\nRBF kernel: K(x,y) = e^-(0.01* <x-y,x-y>^2)\\n\\n=== Evaluation ===\\n\\nCache size   : 250007\\n# Evaluations: 210\\n# Cache hits : 210\\nElapsed time : 0.0s\\n\" 8034\n\nRBF kernel: K(x,y) = e^-(0.01* <x-y,x-y>^2)\n\n=== Evaluation ===\n\nCache size   : 250007\n# Evaluations: 210\n# Cache hits : 210\nElapsed time : 0.0s\n", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      KernelEvaluation kernelEvaluation0 = new KernelEvaluation();
      boolean boolean0 = kernelEvaluation0.equals((Object) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      KernelEvaluation kernelEvaluation0 = new KernelEvaluation();
      boolean boolean0 = kernelEvaluation0.equals((Object) "8034");
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      KernelEvaluation kernelEvaluation0 = new KernelEvaluation();
      boolean boolean0 = kernelEvaluation0.equals((Object) kernelEvaluation0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      KernelEvaluation kernelEvaluation0 = new KernelEvaluation();
      String string0 = kernelEvaluation0.toSummaryString("EUzZ&wb7{GH9V 32");
      assertNotNull(string0);
      assertEquals("", kernelEvaluation0.toSummaryString());
      assertEquals("EUzZ&wb7{GH9V 32\n", string0);
  }
}
