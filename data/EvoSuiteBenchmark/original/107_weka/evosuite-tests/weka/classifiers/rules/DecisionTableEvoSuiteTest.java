/*
 * This file was automatically generated by EvoSuite
 */

package weka.classifiers.rules;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Enumeration;
import org.evosuite.runtime.Random;
import org.junit.BeforeClass;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.rules.DecisionTable;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SelectedTag;
import weka.core.TestInstances;

@RunWith(EvoSuiteRunner.class)
public class DecisionTableEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      int int0 = decisionTable0.getCrossVal();
      assertEquals(1, int0);
      assertEquals(false, decisionTable0.getUseIBk());
      assertEquals(false, decisionTable0.getDisplayRules());
  }

  @Test
  public void test1()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      String string0 = decisionTable0.useIBkTipText();
      assertEquals(false, decisionTable0.getDisplayRules());
      assertEquals("Sets whether IBk should be used instead of the majority class.", string0);
      assertEquals(false, decisionTable0.getUseIBk());
      assertEquals(1, decisionTable0.getCrossVal());
  }

  @Test
  public void test2()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      String string0 = decisionTable0.getRevision();
      assertEquals(1, decisionTable0.getCrossVal());
      assertEquals("8034", string0);
      assertNotNull(string0);
      assertEquals(false, decisionTable0.getUseIBk());
      assertEquals(false, decisionTable0.getDisplayRules());
  }

  @Test
  public void test3()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      Enumeration<Object> enumeration0 = decisionTable0.enumerateMeasures();
      assertEquals(false, decisionTable0.getDisplayRules());
      assertEquals(true, enumeration0.hasMoreElements());
      assertEquals(false, decisionTable0.getUseIBk());
      assertNotNull(enumeration0);
      assertEquals(1, decisionTable0.getCrossVal());
  }

  @Test
  public void test4()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      // Undeclared exception!
      try {
        decisionTable0.measureNumRules();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      String string0 = decisionTable0.globalInfo();
      assertNotNull(string0);
      assertEquals("Class for building and using a simple decision table majority classifier.\n\nFor more information see: \n\nRon Kohavi: The Power of Decision Tables. In: 8th European Conference on Machine Learning, 174-189, 1995.", string0);
      assertEquals(false, decisionTable0.getDisplayRules());
      assertEquals(1, decisionTable0.getCrossVal());
      assertEquals(false, decisionTable0.getUseIBk());
  }

  @Test
  public void test6()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      SelectedTag selectedTag0 = decisionTable0.getEvaluationMeasure();
      assertNotNull(selectedTag0);
      
      decisionTable0.setEvaluationMeasure(selectedTag0);
      assertEquals(1, decisionTable0.getCrossVal());
      assertEquals("1", selectedTag0.toString());
      assertEquals(false, decisionTable0.getUseIBk());
      assertEquals(false, decisionTable0.getDisplayRules());
  }

  @Test
  public void test7()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      String string0 = decisionTable0.displayRulesTipText();
      assertEquals(1, decisionTable0.getCrossVal());
      assertEquals(false, decisionTable0.getDisplayRules());
      assertEquals(false, decisionTable0.getUseIBk());
      assertEquals("Sets whether rules are to be printed.", string0);
  }

  @Test
  public void test8()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      String string0 = decisionTable0.searchTipText();
      assertEquals(false, decisionTable0.getUseIBk());
      assertEquals(1, decisionTable0.getCrossVal());
      assertEquals(false, decisionTable0.getDisplayRules());
      assertEquals("The search method used to find good attribute combinations for the decision table.", string0);
  }

  @Test
  public void test9()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      boolean boolean0 = decisionTable0.getDisplayRules();
      assertEquals(false, decisionTable0.getUseIBk());
      assertEquals(1, decisionTable0.getCrossVal());
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      String string0 = decisionTable0.crossValTipText();
      assertEquals(1, decisionTable0.getCrossVal());
      assertEquals(false, decisionTable0.getUseIBk());
      assertEquals(false, decisionTable0.getDisplayRules());
      assertEquals("Sets the number of folds for cross validation (1 = leave one out).", string0);
  }

  @Test
  public void test11()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      assertEquals(false, decisionTable0.getDisplayRules());
      assertEquals(false, decisionTable0.getUseIBk());
      
      String[] stringArray0 = new String[10];
      stringArray0[0] = "Sets the number of folds for cross validation (1 = leave one out).";
      stringArray0[1] = "Sets the number of folds for cross validation (1 = leave one out).";
      stringArray0[2] = "Sets the number of folds for cross validation (1 = leave one out).";
      stringArray0[3] = "Sets the number of folds for cross validation (1 = leave one out).";
      stringArray0[4] = "Sets the number of folds for cross validation (1 = leave one out).";
      stringArray0[5] = "Sets the number of folds for cross validation (1 = leave one out).";
      stringArray0[6] = "Sets the number of folds for cross validation (1 = leave one out).";
      stringArray0[7] = "Sets the number of folds for cross validation (1 = leave one out).";
      stringArray0[8] = "Sets the number of folds for cross validation (1 = leave one out).";
      stringArray0[9] = "Sets the number of folds for cross validation (1 = leave one out).";
      decisionTable0.setOptions(stringArray0);
      assertEquals(1, decisionTable0.getCrossVal());
  }

  @Test
  public void test12()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      Capabilities capabilities0 = decisionTable0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("g");
      decisionTable0.buildClassifier(instances0);
      double[] doubleArray0 = new double[1];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((double) (-904), doubleArray0);
      double[] doubleArray1 = new double[1];
      // Undeclared exception!
      try {
        decisionTable0.evaluateInstanceLeaveOneOut((Instance) binarySparseInstance0, doubleArray1);
        fail("Expecting exception: Error");
      } catch(Error e) {
        /*
         * This should never happen!
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      boolean boolean0 = decisionTable0.getUseIBk();
      assertEquals(false, decisionTable0.getDisplayRules());
      assertEquals(false, boolean0);
      assertEquals(1, decisionTable0.getCrossVal());
  }

  @Test
  public void test14()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      String string0 = decisionTable0.evaluationMeasureTipText();
      assertEquals(false, decisionTable0.getDisplayRules());
      assertEquals(1, decisionTable0.getCrossVal());
      assertEquals(false, decisionTable0.getUseIBk());
      assertEquals("The measure used to evaluate the performance of attribute combinations used in the decision table.", string0);
  }

  @Test
  public void test15()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      Capabilities capabilities0 = decisionTable0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setClassType(0);
      Instances instances0 = testInstances0.generate("{c'KxZ7");
      decisionTable0.buildClassifier(instances0);
      double[] doubleArray0 = new double[1];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((double) (-904), doubleArray0);
      double[] doubleArray1 = new double[1];
      // Undeclared exception!
      try {
        decisionTable0.evaluateInstanceLeaveOneOut((Instance) binarySparseInstance0, doubleArray1);
        fail("Expecting exception: Error");
      } catch(Error e) {
        /*
         * This should never happen!
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Capabilities capabilities0 = naiveBayesMultinomialUpdateable0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Random.setNextRandom(2147483641);
      Instances instances0 = testInstances0.generate();
      decisionTable0.buildClassifier(instances0);
      DenseInstance denseInstance0 = new DenseInstance(2511);
      decisionTable0.distributionForInstance((Instance) denseInstance0);
      assertEquals("Decision Table:\n\nNumber of training instances: 20\nNumber of Rules : 4\nNon matches covered by Majority class.\n\tBest first.\n\tStart set: no attributes\n\tSearch direction: forward\n\tStale search after 5 node expansions\n\tTotal number of subsets evaluated: 1\n\tMerit of best subset found:   85    \nEvaluation (for feature selection): CV (leave one out) \nFeature set: 1,2", decisionTable0.toString());
  }

  @Test
  public void test17()  throws Throwable  {
      Random.setNextRandom((-57));
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.setCrossVal(5);
      Capabilities capabilities0 = decisionTable0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("fEq(29XDL3K9VGrx");
      decisionTable0.buildClassifier(instances0);
      assertEquals(5, decisionTable0.getCrossVal());
      assertEquals(1.0, decisionTable0.measureNumRules(), 0.01D);
  }

  @Test
  public void test18()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      Enumeration<Object> enumeration0 = decisionTable0.listOptions();
      assertEquals(false, decisionTable0.getUseIBk());
      assertNotNull(enumeration0);
      assertEquals(1, decisionTable0.getCrossVal());
      assertEquals(false, decisionTable0.getDisplayRules());
  }

  @Test
  public void test19()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      SelectedTag selectedTag0 = gaussianProcesses0.getFilterType();
      decisionTable0.setEvaluationMeasure(selectedTag0);
      assertEquals(1, decisionTable0.getCrossVal());
      assertEquals(false, decisionTable0.getUseIBk());
      assertEquals(false, decisionTable0.getDisplayRules());
  }

  @Test
  public void test20()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      String[] stringArray0 = decisionTable0.getOptions();
      assertNotNull(stringArray0);
      
      decisionTable0.setOptions(stringArray0);
      assertEquals("weka.attributeSelection.BestFirst -D 1 -N 5", decisionTable0.getSearchSpec());
      assertEquals(1, decisionTable0.getCrossVal());
      assertEquals(false, decisionTable0.getDisplayRules());
      assertEquals(false, decisionTable0.getUseIBk());
  }

  @Test
  public void test21()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      assertEquals(false, decisionTable0.getUseIBk());
      
      decisionTable0.setUseIBk(true);
      decisionTable0.getOptions();
      assertEquals(true, decisionTable0.getUseIBk());
      assertEquals(1, decisionTable0.getCrossVal());
  }

  @Test
  public void test22()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      assertEquals(false, decisionTable0.getDisplayRules());
      
      decisionTable0.setDisplayRules(true);
      decisionTable0.getOptions();
      assertEquals(true, decisionTable0.getDisplayRules());
  }

  @Test
  public void test23()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Capabilities capabilities0 = naiveBayesMultinomialUpdateable0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      decisionTable0.setUseIBk(true);
      Instances instances0 = testInstances0.generate();
      decisionTable0.buildClassifier(instances0);
      String string0 = decisionTable0.toString();
      assertEquals("Decision Table:\n\nNumber of training instances: 20\nNumber of Rules : 1\nNon matches covered by IB1.\n\tBest first.\n\tStart set: no attributes\n\tSearch direction: forward\n\tStale search after 5 node expansions\n\tTotal number of subsets evaluated: 1\n\tMerit of best subset found:    0    \nEvaluation (for feature selection): CV (leave one out) \nFeature set: 2", decisionTable0.toString());
      assertEquals("Decision Table:\n\nNumber of training instances: 20\nNumber of Rules : 1\nNon matches covered by IB1.\n\tBest first.\n\tStart set: no attributes\n\tSearch direction: forward\n\tStale search after 5 node expansions\n\tTotal number of subsets evaluated: 1\n\tMerit of best subset found:    0    \nEvaluation (for feature selection): CV (leave one out) \nFeature set: 2", string0);
  }

  @Test
  public void test24()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Capabilities capabilities0 = naiveBayesMultinomialUpdateable0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      decisionTable0.buildClassifier(instances0);
      DenseInstance denseInstance0 = new DenseInstance(2519);
      decisionTable0.distributionForInstance((Instance) denseInstance0);
      assertEquals("Decision Table:\n\nNumber of training instances: 20\nNumber of Rules : 1\nNon matches covered by Majority class.\n\tBest first.\n\tStart set: no attributes\n\tSearch direction: forward\n\tStale search after 5 node expansions\n\tTotal number of subsets evaluated: 1\n\tMerit of best subset found:    0    \nEvaluation (for feature selection): CV (leave one out) \nFeature set: 2", decisionTable0.toString());
  }

  @Test
  public void test25()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      // Undeclared exception!
      try {
        decisionTable0.getMeasure("NL!j&um&Vdk");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * NL!j&um&Vdk not supported (DecisionTable)
         */
      }
  }

  @Test
  public void test26()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      String string0 = decisionTable0.toString();
      assertEquals(false, decisionTable0.getUseIBk());
      assertEquals(false, decisionTable0.getDisplayRules());
      assertEquals("Decision Table: No model built yet.", string0);
      assertEquals(1, decisionTable0.getCrossVal());
      assertNotNull(string0);
  }

  @Test
  public void test27()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Capabilities capabilities0 = naiveBayesMultinomialUpdateable0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      decisionTable0.buildClassifier(instances0);
      decisionTable0.setCrossVal(2511);
      String string0 = decisionTable0.toString();
      assertEquals(2511, decisionTable0.getCrossVal());
      assertEquals("Decision Table:\n\nNumber of training instances: 20\nNumber of Rules : 1\nNon matches covered by Majority class.\n\tBest first.\n\tStart set: no attributes\n\tSearch direction: forward\n\tStale search after 5 node expansions\n\tTotal number of subsets evaluated: 1\n\tMerit of best subset found:    0    \nEvaluation (for feature selection): CV (2511 fold) \nFeature set: 2", string0);
  }

  @Test
  public void test28()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.setDisplayRules(true);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Capabilities capabilities0 = naiveBayesMultinomialUpdateable0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Random.setNextRandom(2147483641);
      Instances instances0 = testInstances0.generate();
      decisionTable0.buildClassifier(instances0);
      String string0 = decisionTable0.toString();
      assertEquals("Decision Table:\n\nNumber of training instances: 20\nNumber of Rules : 4\nNon matches covered by Majority class.\n\tBest first.\n\tStart set: no attributes\n\tSearch direction: forward\n\tStale search after 5 node expansions\n\tTotal number of subsets evaluated: 1\n\tMerit of best subset found:   85    \nEvaluation (for feature selection): CV (leave one out) \nFeature set: 1,2\n\nRules:\n========================================\nNumeric1               Class  \n========================================\n'(-inf--2147483640.5]' class2\n'(-2147483640.5-7.5]'  class4\n'(2147483655.5-inf)'   class1\n'(7.5-2147483655.5]'   class2\n========================================\n\n", decisionTable0.toString());
      assertEquals("Decision Table:\n\nNumber of training instances: 20\nNumber of Rules : 4\nNon matches covered by Majority class.\n\tBest first.\n\tStart set: no attributes\n\tSearch direction: forward\n\tStale search after 5 node expansions\n\tTotal number of subsets evaluated: 1\n\tMerit of best subset found:   85    \nEvaluation (for feature selection): CV (leave one out) \nFeature set: 1,2\n\nRules:\n========================================\nNumeric1               Class  \n========================================\n'(-inf--2147483640.5]' class2\n'(-2147483640.5-7.5]'  class4\n'(2147483655.5-inf)'   class1\n'(7.5-2147483655.5]'   class2\n========================================\n\n", string0);
  }
}
