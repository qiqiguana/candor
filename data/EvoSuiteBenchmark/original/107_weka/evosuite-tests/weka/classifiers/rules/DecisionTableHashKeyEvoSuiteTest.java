/*
 * This file was automatically generated by EvoSuite
 */

package weka.classifiers.rules;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.ArrayList;
import org.junit.BeforeClass;
import weka.classifiers.rules.DecisionTableHashKey;
import weka.core.Attribute;
import weka.core.Instances;

@RunWith(EvoSuiteRunner.class)
public class DecisionTableHashKeyEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      DecisionTableHashKey decisionTableHashKey0 = new DecisionTableHashKey(doubleArray0);
      assertNotNull(decisionTableHashKey0);
      
      String string0 = decisionTableHashKey0.getRevision();
      assertEquals("8034", string0);
      assertNotNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      DecisionTableHashKey decisionTableHashKey0 = new DecisionTableHashKey(doubleArray0);
      decisionTableHashKey0.print_hash_code();
      decisionTableHashKey0.print_hash_code();
      assertEquals("8034", decisionTableHashKey0.getRevision());
  }

  @Test
  public void test2()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      DecisionTableHashKey decisionTableHashKey0 = new DecisionTableHashKey(doubleArray0);
      assertNotNull(decisionTableHashKey0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("8034", "8034");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("8034", arrayList0, 0);
      String string0 = decisionTableHashKey0.toString(instances0, 0);
      assertEquals(" ", string0);
      assertNotNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      DecisionTableHashKey decisionTableHashKey0 = new DecisionTableHashKey(doubleArray0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("AW0V)", arrayList0, 52);
      // Undeclared exception!
      try {
        decisionTableHashKey0.toString(instances0, 52);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 1, Size: 0
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      DecisionTableHashKey decisionTableHashKey0 = new DecisionTableHashKey(doubleArray0);
      decisionTableHashKey0.print_hash_code();
      assertEquals("8034", decisionTableHashKey0.getRevision());
  }

  @Test
  public void test5()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      DecisionTableHashKey decisionTableHashKey0 = new DecisionTableHashKey(doubleArray0);
      assertNotNull(decisionTableHashKey0);
      
      boolean boolean0 = decisionTableHashKey0.equals((Object) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      DecisionTableHashKey decisionTableHashKey0 = new DecisionTableHashKey(doubleArray0);
      assertNotNull(decisionTableHashKey0);
      
      boolean boolean0 = decisionTableHashKey0.equals((Object) "date");
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      DecisionTableHashKey decisionTableHashKey0 = new DecisionTableHashKey(doubleArray0);
      assertNotNull(decisionTableHashKey0);
      
      boolean boolean0 = decisionTableHashKey0.equals((Object) decisionTableHashKey0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      DecisionTableHashKey decisionTableHashKey0 = new DecisionTableHashKey(doubleArray0);
      assertNotNull(decisionTableHashKey0);
      
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      DecisionTableHashKey decisionTableHashKey1 = new DecisionTableHashKey(doubleArray1);
      assertNotNull(decisionTableHashKey1);
      
      boolean boolean0 = decisionTableHashKey0.equals((Object) decisionTableHashKey1);
      assertFalse(decisionTableHashKey1.equals(decisionTableHashKey0));
      assertEquals(false, boolean0);
  }
}
