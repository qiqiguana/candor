/*
 * This file was automatically generated by EvoSuite
 */

package weka.classifiers.meta;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Enumeration;
import org.junit.BeforeClass;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SelectedTag;

@RunWith(EvoSuiteRunner.class)
public class RegressionByDiscretizationEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try {
        regressionByDiscretization0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try {
        regressionByDiscretization0.predictIntervals((Instance) null, (double) 1499);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "The density estimator to use.";
      stringArray0[1] = "The density estimator to use.";
      stringArray0[2] = "The density estimator to use.";
      regressionByDiscretization0.setOptions(stringArray0);
      assertEquals(false, regressionByDiscretization0.getMinimizeAbsoluteError());
      assertEquals(false, regressionByDiscretization0.getUseEqualFrequency());
      assertEquals(10, regressionByDiscretization0.getNumBins());
      assertEquals(false, regressionByDiscretization0.getDeleteEmptyBins());
      assertEquals("weka.classifiers.trees.J48", regressionByDiscretization0.defaultClassifierString());
  }

  @Test
  public void test3()  throws Throwable  {
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      String string0 = regressionByDiscretization0.globalInfo();
      assertEquals(false, regressionByDiscretization0.getMinimizeAbsoluteError());
      assertEquals(false, regressionByDiscretization0.getUseEqualFrequency());
      assertEquals("A regression scheme that employs any classifier on a copy of the data that has the class attribute discretized. The predicted value is the expected value of the mean class value for each discretized interval (based on the predicted probabilities for each interval). This class now also supports conditional density estimation by building a univariate density estimator from the target values in the training data, weighted by the class probabilities. \n\nFor more information on this process, see\n\nEibe Frank, Remco R. Bouckaert: Conditional Density Estimation with Class Probability Estimators. In: First Asian Conference on Machine Learning, Berlin, 65-81, 2009.", string0);
      assertEquals(10, regressionByDiscretization0.getNumBins());
      assertNotNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      String string0 = regressionByDiscretization0.getRevision();
      assertEquals(false, regressionByDiscretization0.getUseEqualFrequency());
      assertNotNull(string0);
      assertEquals("8034", string0);
      assertEquals(10, regressionByDiscretization0.getNumBins());
      assertEquals(false, regressionByDiscretization0.getMinimizeAbsoluteError());
  }

  @Test
  public void test5()  throws Throwable  {
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      SelectedTag selectedTag0 = regressionByDiscretization0.getEstimatorType();
      assertEquals(false, regressionByDiscretization0.getMinimizeAbsoluteError());
      assertEquals("0", selectedTag0.toString());
      assertNotNull(selectedTag0);
      assertEquals(false, regressionByDiscretization0.getUseEqualFrequency());
      assertEquals(10, regressionByDiscretization0.getNumBins());
  }

  @Test
  public void test6()  throws Throwable  {
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      String string0 = regressionByDiscretization0.useEqualFrequencyTipText();
      assertEquals(false, regressionByDiscretization0.getMinimizeAbsoluteError());
      assertEquals(10, regressionByDiscretization0.getNumBins());
      assertEquals(false, regressionByDiscretization0.getUseEqualFrequency());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      String string0 = regressionByDiscretization0.numBinsTipText();
      assertEquals(false, regressionByDiscretization0.getMinimizeAbsoluteError());
      assertEquals("Number of bins for discretization.", string0);
      assertEquals(false, regressionByDiscretization0.getUseEqualFrequency());
      assertEquals(10, regressionByDiscretization0.getNumBins());
  }

  @Test
  public void test8()  throws Throwable  {
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      String string0 = regressionByDiscretization0.deleteEmptyBinsTipText();
      assertEquals("Whether to delete empty bins after discretization.", string0);
      assertEquals(false, regressionByDiscretization0.getMinimizeAbsoluteError());
      assertEquals(10, regressionByDiscretization0.getNumBins());
      assertEquals(false, regressionByDiscretization0.getUseEqualFrequency());
  }

  @Test
  public void test9()  throws Throwable  {
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      String string0 = regressionByDiscretization0.minimizeAbsoluteErrorTipText();
      assertEquals("Whether to minimize absolute error.", string0);
      assertEquals(false, regressionByDiscretization0.getMinimizeAbsoluteError());
      assertEquals(10, regressionByDiscretization0.getNumBins());
      assertEquals(false, regressionByDiscretization0.getUseEqualFrequency());
  }

  @Test
  public void test10()  throws Throwable  {
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      String string0 = regressionByDiscretization0.estimatorTypeTipText();
      assertEquals(false, regressionByDiscretization0.getMinimizeAbsoluteError());
      assertEquals(10, regressionByDiscretization0.getNumBins());
      assertEquals(false, regressionByDiscretization0.getUseEqualFrequency());
      assertEquals("The density estimator to use.", string0);
  }

  @Test
  public void test11()  throws Throwable  {
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Enumeration<Object> enumeration0 = regressionByDiscretization0.listOptions();
      assertEquals(false, regressionByDiscretization0.getUseEqualFrequency());
      assertEquals(10, regressionByDiscretization0.getNumBins());
      assertEquals(false, regressionByDiscretization0.getMinimizeAbsoluteError());
      assertEquals("weka.classifiers.trees.J48", regressionByDiscretization0.defaultClassifierString());
      assertNotNull(enumeration0);
  }

  @Test
  public void test12()  throws Throwable  {
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      String[] stringArray0 = regressionByDiscretization0.getOptions();
      assertNotNull(stringArray0);
      
      regressionByDiscretization0.setOptions(stringArray0);
      assertEquals(false, regressionByDiscretization0.getMinimizeAbsoluteError());
      assertEquals(10, regressionByDiscretization0.getNumBins());
      assertEquals(false, regressionByDiscretization0.getDeleteEmptyBins());
      assertEquals(false, regressionByDiscretization0.getUseEqualFrequency());
  }

  @Test
  public void test13()  throws Throwable  {
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      regressionByDiscretization0.setDeleteEmptyBins(true);
      regressionByDiscretization0.getOptions();
      assertEquals(true, regressionByDiscretization0.getDeleteEmptyBins());
  }

  @Test
  public void test14()  throws Throwable  {
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      assertEquals(false, regressionByDiscretization0.getUseEqualFrequency());
      
      regressionByDiscretization0.setUseEqualFrequency(true);
      regressionByDiscretization0.getOptions();
      assertEquals(true, regressionByDiscretization0.getUseEqualFrequency());
      assertEquals(10, regressionByDiscretization0.getNumBins());
  }

  @Test
  public void test15()  throws Throwable  {
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      assertEquals(false, regressionByDiscretization0.getMinimizeAbsoluteError());
      
      regressionByDiscretization0.setMinimizeAbsoluteError(true);
      regressionByDiscretization0.getOptions();
      assertEquals(true, regressionByDiscretization0.getMinimizeAbsoluteError());
      assertEquals(10, regressionByDiscretization0.getNumBins());
  }

  @Test
  public void test16()  throws Throwable  {
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      String string0 = regressionByDiscretization0.toString();
      assertEquals(false, regressionByDiscretization0.getMinimizeAbsoluteError());
      assertEquals(10, regressionByDiscretization0.getNumBins());
      assertNotNull(string0);
      assertEquals(false, regressionByDiscretization0.getUseEqualFrequency());
      assertEquals("Regression by discretization: No model built yet.", string0);
  }
}
