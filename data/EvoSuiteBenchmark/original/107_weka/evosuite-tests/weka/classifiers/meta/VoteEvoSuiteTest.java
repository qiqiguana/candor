/*
 * This file was automatically generated by EvoSuite
 */

package weka.classifiers.meta;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.File;
import java.util.Enumeration;
import org.evosuite.runtime.Random;
import org.junit.BeforeClass;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.functions.SGDText;
import weka.classifiers.meta.CVParameterSelection;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.MultiClassClassifierUpdateable;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Stacking;
import weka.classifiers.meta.Vote;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.trees.REPTree;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Environment;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SelectedTag;
import weka.core.TestInstances;

@RunWith(EvoSuiteRunner.class)
public class VoteEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Vote vote0 = new Vote();
      String string0 = vote0.globalInfo();
      assertEquals("Class for combining classifiers. Different combinations of probability estimates for classification are available.\n\nFor more information see:\n\nLudmila I. Kuncheva (2004). Combining Pattern Classifiers: Methods and Algorithms. John Wiley and Sons, Inc..\n\nJ. Kittler, M. Hatef, Robert P.W. Duin, J. Matas (1998). On combining classifiers. IEEE Transactions on Pattern Analysis and Machine Intelligence. 20(3):226-239.", string0);
      assertNotNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      Vote vote0 = new Vote();
      String string0 = vote0.getRevision();
      assertEquals("9092", string0);
      assertNotNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      Vote vote0 = new Vote();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      vote0.removePreBuiltClassifier((Classifier) regressionByDiscretization0);
      assertEquals("The base classifiers to be used.", vote0.classifiersTipText());
  }

  @Test
  public void test3()  throws Throwable  {
      Vote vote0 = new Vote();
      Environment environment0 = new Environment();
      vote0.setEnvironment(environment0);
      assertEquals("9092", vote0.getRevision());
  }

  @Test
  public void test4()  throws Throwable  {
      Vote vote0 = new Vote();
      String string0 = vote0.combinationRuleTipText();
      assertEquals("The combination rule used.", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      Vote vote0 = new Vote();
      String string0 = vote0.preBuiltClassifiersTipText();
      assertEquals("The pre-built serialized classifiers to include. Multiple serialized classifiers can be included alongside those that are built from scratch when this classifier runs. Note that it does not make sense to include pre-built classifiers in a cross-validation since they are static and their models do not change from fold to fold.", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      Vote vote0 = new Vote();
      Enumeration<Object> enumeration0 = vote0.listOptions();
      assertEquals(true, enumeration0.hasMoreElements());
  }

  @Test
  public void test7()  throws Throwable  {
      Vote vote0 = new Vote();
      File[] fileArray0 = new File[8];
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      File file0 = naiveBayesMultinomialText0.getStopwords();
      fileArray0[0] = file0;
      fileArray0[1] = file0;
      fileArray0[2] = file0;
      fileArray0[3] = fileArray0[2];
      fileArray0[4] = fileArray0[0];
      fileArray0[5] = fileArray0[1];
      fileArray0[6] = file0;
      fileArray0[7] = file0;
      vote0.setPreBuiltClassifiers(fileArray0);
      String[] stringArray0 = vote0.getOptions();
      assertNotNull(stringArray0);
      
      vote0.setOptions(stringArray0);
      assertEquals("Vote combines the probability distributions of these base learners:\n\tweka.classifiers.rules.ZeroR \nusing the 'Average of Probabilities' combination rule \n", vote0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      Vote vote0 = new Vote();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      vote0.setOptions(stringArray0);
      assertEquals("Vote combines the probability distributions of these base learners:\n\tweka.classifiers.rules.ZeroR \nusing the 'Average of Probabilities' combination rule \n", vote0.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      Vote vote0 = new Vote();
      LogitBoost logitBoost0 = new LogitBoost();
      vote0.addPreBuiltClassifier((Classifier) logitBoost0);
      Stacking stacking0 = new Stacking();
      vote0.addPreBuiltClassifier((Classifier) stacking0);
      Capabilities capabilities0 = vote0.getCapabilities();
      assertEquals("Vote combines the probability distributions of these base learners:\n\tweka.classifiers.rules.ZeroR \n\tweka.classifiers.meta.LogitBoost-P 100 -F 0 -R 1 -L -1.7976931348623157E308 -H 1.0 -S 1 -I 10 -W weka.classifiers.trees.DecisionStump\n\tweka.classifiers.meta.Stacking-X 10 -M \"weka.classifiers.rules.ZeroR \" -S 1 -num-slots 1 -B \"weka.classifiers.rules.ZeroR \"\nusing the 'Average of Probabilities' combination rule \n", vote0.toString());
      assertEquals("Capabilities: [Nominal attributes, Binary attributes, Unary attributes, Empty nominal attributes, Numeric attributes, Date attributes, String attributes, Relational attributes, Missing values, Nominal class, Binary class, Numeric class, Date class, Missing class values]\nDependencies: [Nominal attributes, Binary attributes, Unary attributes, Empty nominal attributes, Numeric attributes, Date attributes, String attributes, Relational attributes, Missing values, No class, Nominal class, Binary class, Unary class, Empty nominal class, Numeric class, Date class, String class, Relational class, Missing class values, Only multi-Instance data]\nmin # Instance: 10\n", capabilities0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      Vote vote0 = new Vote();
      BayesNet bayesNet0 = new BayesNet();
      Capabilities capabilities0 = bayesNet0.getCapabilities();
      File[] fileArray0 = new File[1];
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      File file0 = serializedClassifier0.getModelFile();
      fileArray0[0] = file0;
      vote0.setPreBuiltClassifiers(fileArray0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      try {
        vote0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * \"/mnt/fastdata/ac1gf/SF110/dist/107_weka\" does not seem to be a valid file!
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Vote vote0 = new Vote();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("The pre-built serialized classifiers to include. Multiple serialized classifiers can be included alongside those that are built from scratch when this classifier runs. Note that it does not make sense to include pre-built classifiers in a cross-validation since they are static and their models do not change from fold to fold.");
      DenseInstance denseInstance0 = (DenseInstance)instances0.lastInstance();
      double double0 = vote0.classifyInstanceMedian((Instance) denseInstance0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      Vote vote0 = new Vote();
      Vote vote1 = (Vote)AbstractClassifier.makeCopy((Classifier) vote0);
      vote0.addPreBuiltClassifier((Classifier) vote1);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("The pre-built serialized classifiers to include. Multiple serialized classifiers can be included alongside those that are built from scratch when this classifier runs. Note that it does not make sense to include pre-built classifiers in a cross-validation since they are static and their models do not change from fold to fold.");
      DenseInstance denseInstance0 = (DenseInstance)instances0.lastInstance();
      double double0 = vote0.classifyInstanceMedian((Instance) denseInstance0);
      assertEquals("Vote combines the probability distributions of these base learners:\n\tweka.classifiers.rules.ZeroR \n\tweka.classifiers.meta.Vote-S 1 -B \"weka.classifiers.rules.ZeroR \" -R AVG\nusing the 'Average of Probabilities' combination rule \n", vote0.toString());
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test13()  throws Throwable  {
      Vote vote0 = new Vote();
      Vote vote1 = new Vote();
      Classifier[] classifierArray0 = new Classifier[2];
      classifierArray0[0] = (Classifier) vote1;
      classifierArray0[1] = (Classifier) vote1;
      vote0.setClassifiers(classifierArray0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("The pre-built serialized classifiers to include. Multiple serialized classifiers can be included alongside those that are built from scratch when this classifier runs. Note that it does not make sense to include pre-built classifiers in a cross-validation since they are static and their models do not change from fold to fold.");
      DenseInstance denseInstance0 = (DenseInstance)instances0.firstInstance();
      vote0.buildClassifier(instances0);
      double[] doubleArray0 = vote0.distributionForInstanceMajorityVoting((Instance) denseInstance0);
      assertNotNull(doubleArray0);
  }

  @Test
  public void test14()  throws Throwable  {
      Vote vote0 = new Vote();
      Vote vote1 = (Vote)AbstractClassifier.makeCopy((Classifier) vote0);
      vote0.addPreBuiltClassifier((Classifier) vote1);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("The pre-built serialized classifiers to include. Multiple serialized classifiers can be included alongside those that are built from scratch when this classifier runs. Note that it does not make sense to include pre-built classifiers in a cross-validation since they are static and their models do not change from fold to fold.");
      DenseInstance denseInstance0 = (DenseInstance)instances0.lastInstance();
      double double0 = vote0.classifyInstance((Instance) denseInstance0);
      assertEquals("Vote combines the probability distributions of these base learners:\n\tweka.classifiers.rules.ZeroR \n\tweka.classifiers.meta.Vote-S 1 -B \"weka.classifiers.rules.ZeroR \" -R AVG\nusing the 'Average of Probabilities' combination rule \n", vote0.toString());
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test15()  throws Throwable  {
      Vote vote0 = new Vote();
      Vote vote1 = new Vote();
      Classifier[] classifierArray0 = new Classifier[2];
      classifierArray0[0] = (Classifier) vote1;
      classifierArray0[1] = (Classifier) vote1;
      vote0.setClassifiers(classifierArray0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("The pre-built serialized classifiers to include. Multiple serialized classifiers can be included alongside those that are built from scratch when this classifier runs. Note that it does not make sense to include pre-built classifiers in a cross-validation since they are static and their models do not change from fold to fold.");
      DenseInstance denseInstance0 = (DenseInstance)instances0.firstInstance();
      double[] doubleArray0 = vote0.distributionForInstanceProduct((Instance) denseInstance0);
      assertNotNull(doubleArray0);
  }

  @Test
  public void test16()  throws Throwable  {
      Vote vote0 = new Vote();
      Vote vote1 = new Vote();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("The pre-built serialized classifiers to include. Multiple serialized classifiers can be included alongside those that are built from scratch when this classifier runs. Note that it does not make sense to include pre-built classifiers in a cross-validation since they are static and their models do not change from fold to fold.");
      DenseInstance denseInstance0 = (DenseInstance)instances0.firstInstance();
      vote0.addPreBuiltClassifier((Classifier) vote1);
      double[] doubleArray0 = vote0.distributionForInstanceProduct((Instance) denseInstance0);
      assertEquals("Vote combines the probability distributions of these base learners:\n\tweka.classifiers.rules.ZeroR \n\tweka.classifiers.meta.Vote-S 1 -B \"weka.classifiers.rules.ZeroR \" -R AVG\nusing the 'Average of Probabilities' combination rule \n", vote0.toString());
      assertNotNull(doubleArray0);
  }

  @Test
  public void test17()  throws Throwable  {
      Random.setNextRandom(125);
      Vote vote0 = new Vote();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("The pre-built serialized classifiers to include. Multiple serialized classifiers can be included alongside those that are built from scratch when this classifier runs. Note that it does not make sense to include pre-built classifiers in a cross-validation since they are static and their models do not change from fold to fold.");
      DenseInstance denseInstance0 = (DenseInstance)instances0.firstInstance();
      vote0.buildClassifier(instances0);
      double[] doubleArray0 = vote0.distributionForInstanceMajorityVoting((Instance) denseInstance0);
      assertNotNull(doubleArray0);
  }

  @Test
  public void test18()  throws Throwable  {
      Vote vote0 = new Vote();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      vote0.addPreBuiltClassifier((Classifier) cVParameterSelection0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("The pre-built serialized classifiers to include. Multiple serialized classifiers can be included alongside those that are built from scratch when this classifier runs. Note that it does not make sense to include pre-built classifiers in a cross-validation since they are static and their models do not change from fold to fold.");
      DenseInstance denseInstance0 = (DenseInstance)instances0.firstInstance();
      double[] doubleArray0 = vote0.distributionForInstanceMajorityVoting((Instance) denseInstance0);
      assertNotNull(doubleArray0);
  }

  @Test
  public void test19()  throws Throwable  {
      Vote vote0 = new Vote();
      Random.setNextRandom(29);
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      vote0.addPreBuiltClassifier((Classifier) cVParameterSelection0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("The pre-built serialized classifiers to include. Multiple serialized classifiers can be included alongside those that are built from scratch when this classifier runs. Note that it does not make sense to include pre-built classifiers in a cross-validation since they are static and their models do not change from fold to fold.");
      DenseInstance denseInstance0 = (DenseInstance)instances0.firstInstance();
      cVParameterSelection0.buildClassifier(instances0);
      double[] doubleArray0 = vote0.distributionForInstanceMajorityVoting((Instance) denseInstance0);
      assertNotNull(doubleArray0);
  }

  @Test
  public void test20()  throws Throwable  {
      Vote vote0 = new Vote();
      Vote vote1 = new Vote();
      Classifier[] classifierArray0 = new Classifier[2];
      classifierArray0[0] = (Classifier) vote1;
      classifierArray0[1] = (Classifier) vote1;
      vote0.setClassifiers(classifierArray0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("The pre-built serialized classifiers to include. Multiple serialized classifiers can be included alongside those that are built from scratch when this classifier runs. Note that it does not make sense to include pre-built classifiers in a cross-validation since they are static and their models do not change from fold to fold.");
      DenseInstance denseInstance0 = (DenseInstance)instances0.firstInstance();
      double[] doubleArray0 = vote0.distributionForInstanceMax((Instance) denseInstance0);
      assertNotNull(doubleArray0);
  }

  @Test
  public void test21()  throws Throwable  {
      Vote vote0 = new Vote();
      Vote vote1 = new Vote();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("The pre-built serialized classifiers to include. Multiple serialized classifiers can be included alongside those that are built from scratch when this classifier runs. Note that it does not make sense to include pre-built classifiers in a cross-validation since they are static and their models do not change from fold to fold.");
      DenseInstance denseInstance0 = (DenseInstance)instances0.firstInstance();
      vote0.addPreBuiltClassifier((Classifier) vote1);
      double[] doubleArray0 = vote0.distributionForInstanceMax((Instance) denseInstance0);
      assertEquals("Vote combines the probability distributions of these base learners:\n\tweka.classifiers.rules.ZeroR \n\tweka.classifiers.meta.Vote-S 1 -B \"weka.classifiers.rules.ZeroR \" -R AVG\nusing the 'Average of Probabilities' combination rule \n", vote0.toString());
      assertNotNull(doubleArray0);
  }

  @Test
  public void test22()  throws Throwable  {
      Vote vote0 = new Vote();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      vote0.addPreBuiltClassifier((Classifier) cVParameterSelection0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("The pre-built serialized classifiers to include. Multiple serialized classifiers can be included alongside those that are built from scratch when this classifier runs. Note that it does not make sense to include pre-built classifiers in a cross-validation since they are static and their models do not change from fold to fold.");
      DenseInstance denseInstance0 = (DenseInstance)instances0.firstInstance();
      cVParameterSelection0.buildClassifier(instances0);
      try {
        vote0.distributionForInstanceMax((Instance) denseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test23()  throws Throwable  {
      Vote vote0 = new Vote();
      vote0.addPreBuiltClassifier((Classifier) vote0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("The pre-built serialized classifiers to include. Multiple serialized classifiers can be included alongside those that are built from scratch when this classifier runs. Note that it does not make sense to include pre-built classifiers in a cross-validation since they are static and their models do not change from fold to fold.");
      DenseInstance denseInstance0 = (DenseInstance)instances0.lastInstance();
      // Undeclared exception!
      try {
        vote0.distributionForInstanceMin((Instance) denseInstance0);
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }

  @Test
  public void test24()  throws Throwable  {
      Vote vote0 = new Vote();
      Vote vote1 = (Vote)AbstractClassifier.makeCopy((Classifier) vote0);
      vote0.addPreBuiltClassifier((Classifier) vote1);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("The pre-built serialized classifiers to include. Multiple serialized classifiers can be included alongside those that are built from scratch when this classifier runs. Note that it does not make sense to include pre-built classifiers in a cross-validation since they are static and their models do not change from fold to fold.");
      DenseInstance denseInstance0 = (DenseInstance)instances0.lastInstance();
      double[] doubleArray0 = vote0.distributionForInstanceMin((Instance) denseInstance0);
      assertEquals("Vote combines the probability distributions of these base learners:\n\tweka.classifiers.rules.ZeroR \n\tweka.classifiers.meta.Vote-S 1 -B \"weka.classifiers.rules.ZeroR \" -R AVG\nusing the 'Average of Probabilities' combination rule \n", vote0.toString());
      assertNotNull(doubleArray0);
  }

  @Test
  public void test25()  throws Throwable  {
      Vote vote0 = new Vote();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      SelectedTag selectedTag0 = multiClassClassifierUpdateable0.getMethod();
      vote0.setCombinationRule(selectedTag0);
      assertEquals("8034", selectedTag0.getRevision());
  }

  @Test
  public void test26()  throws Throwable  {
      Vote vote0 = new Vote();
      File[] fileArray0 = vote0.getPreBuiltClassifiers();
      vote0.setPreBuiltClassifiers(fileArray0);
      assertEquals("9092", vote0.getRevision());
  }

  @Test
  public void test27()  throws Throwable  {
      Vote vote0 = new Vote();
      File[] fileArray0 = new File[10];
      SGDText sGDText0 = new SGDText();
      File file0 = sGDText0.getStopwords();
      fileArray0[0] = file0;
      fileArray0[1] = file0;
      fileArray0[2] = file0;
      fileArray0[3] = fileArray0[0];
      fileArray0[4] = file0;
      fileArray0[5] = file0;
      fileArray0[6] = file0;
      fileArray0[7] = fileArray0[2];
      fileArray0[8] = fileArray0[5];
      fileArray0[9] = fileArray0[2];
      vote0.setPreBuiltClassifiers(fileArray0);
      File[] fileArray1 = vote0.getPreBuiltClassifiers();
      assertNotSame(fileArray1, fileArray0);
  }

  @Test
  public void test28()  throws Throwable  {
      Vote vote0 = new Vote();
      REPTree rEPTree0 = new REPTree();
      vote0.addPreBuiltClassifier((Classifier) rEPTree0);
      String string0 = vote0.toString();
      assertNotNull(string0);
      assertEquals("Vote combines the probability distributions of these base learners:\n\tweka.classifiers.rules.ZeroR \n\tweka.classifiers.trees.REPTree-M 2 -V 0.0010 -N 3 -S 1 -L -1 -I 0.0\nusing the 'Average of Probabilities' combination rule \n", vote0.toString());
      assertEquals("Vote combines the probability distributions of these base learners:\n\tweka.classifiers.rules.ZeroR \n\tweka.classifiers.trees.REPTree-M 2 -V 0.0010 -N 3 -S 1 -L -1 -I 0.0\nusing the 'Average of Probabilities' combination rule \n", string0);
  }
}
