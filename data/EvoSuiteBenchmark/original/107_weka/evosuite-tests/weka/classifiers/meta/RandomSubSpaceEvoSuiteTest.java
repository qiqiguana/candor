/*
 * This file was automatically generated by EvoSuite
 */

package weka.classifiers.meta;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Enumeration;
import java.util.Random;
import org.junit.BeforeClass;
import weka.classifiers.meta.RandomSubSpace;
import weka.core.BinarySparseInstance;
import weka.core.Instance;
import weka.core.UnassignedDatasetException;

@RunWith(EvoSuiteRunner.class)
public class RandomSubSpaceEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      String string0 = randomSubSpace0.globalInfo();
      assertNotNull(string0);
      assertEquals(0.5, randomSubSpace0.getSubSpaceSize(), 0.01D);
      assertEquals("This method constructs a decision tree based classifier that maintains highest accuracy on training data and improves on generalization accuracy as it grows in complexity. The classifier consists of multiple trees constructed systematically by pseudorandomly selecting subsets of components of the feature vector, that is, trees constructed in randomly chosen subspaces.\n\nFor more information, see\n\nTin Kam Ho (1998). The Random Subspace Method for Constructing Decision Forests. IEEE Transactions on Pattern Analysis and Machine Intelligence. 20(8):832-844. URL http://citeseer.ist.psu.edu/ho98random.html.", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      randomSubSpace0.getTrainingSet(17);
      assertEquals(0.5, randomSubSpace0.getSubSpaceSize(), 0.01D);
  }

  @Test
  public void test2()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      String[] stringArray0 = randomSubSpace0.getOptions();
      assertNotNull(stringArray0);
      
      randomSubSpace0.setOptions(stringArray0);
      assertEquals(0.5, randomSubSpace0.getSubSpaceSize(), 0.01D);
  }

  @Test
  public void test3()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      String string0 = randomSubSpace0.getRevision();
      assertEquals("8034", string0);
      assertEquals(0.5, randomSubSpace0.getSubSpaceSize(), 0.01D);
      assertNotNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      Enumeration<Object> enumeration0 = randomSubSpace0.listOptions();
      assertEquals(0.5, randomSubSpace0.getSubSpaceSize(), 0.01D);
      assertEquals("weka.classifiers.trees.REPTree", randomSubSpace0.defaultClassifierString());
      assertNotNull(enumeration0);
  }

  @Test
  public void test5()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      String string0 = randomSubSpace0.subSpaceSizeTipText();
      assertEquals(0.5, randomSubSpace0.getSubSpaceSize(), 0.01D);
      assertEquals("Size of each subSpace: if less than 1 as a percentage of the number of attributes, otherwise the absolute number of attributes.", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ">3U^";
      randomSubSpace0.setOptions(stringArray0);
      assertEquals("weka.classifiers.trees.REPTree", randomSubSpace0.defaultClassifierString());
      assertEquals(0.5, randomSubSpace0.getSubSpaceSize(), 0.01D);
  }

  @Test
  public void test7()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      int int0 = randomSubSpace0.numberOfAttributes(1, 1);
      assertEquals(0.5, randomSubSpace0.getSubSpaceSize(), 0.01D);
      assertEquals(1, int0);
  }

  @Test
  public void test8()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      int int0 = randomSubSpace0.numberOfAttributes((-14), (-14));
      assertEquals(1, int0);
      assertEquals(0.5, randomSubSpace0.getSubSpaceSize(), 0.01D);
  }

  @Test
  public void test9()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      Integer[] integerArray0 = new Integer[33];
      Random random0 = new Random();
      String string0 = randomSubSpace0.randomSubSpace(integerArray0, 1, 1, random0);
      assertEquals(0.38114965F, random0.nextFloat(), 0.01F);
      assertEquals("null,1", string0);
  }

  @Test
  public void test10()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      randomSubSpace0.setDebug(true);
      Integer[] integerArray0 = new Integer[33];
      Random random0 = new Random();
      String string0 = randomSubSpace0.randomSubSpace(integerArray0, 1, 1, random0);
      assertEquals(0.2825253F, random0.nextFloat(), 0.01F);
      assertEquals("null,1", string0);
  }

  @Test
  public void test11()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      double[] doubleArray0 = new double[3];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1575.704853639345), doubleArray0);
      try {
        randomSubSpace0.classifyInstance((Instance) binarySparseInstance0);
        fail("Expecting exception: UnassignedDatasetException");
      } catch(UnassignedDatasetException e) {
        /*
         * DenseInstance doesn't have access to a dataset!
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      String string0 = randomSubSpace0.toString();
      assertNotNull(string0);
      assertEquals(0.5, randomSubSpace0.getSubSpaceSize(), 0.01D);
      assertEquals("RandomSubSpace: No model built yet.", string0);
  }
}
