/*
 * This file was automatically generated by EvoSuite
 */

package weka.filters.supervised.instance;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import weka.core.BinarySparseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.filters.Filter;
import weka.filters.supervised.instance.SpreadSubsample;

@RunWith(EvoSuiteRunner.class)
public class SpreadSubsampleEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      try {
        spreadSubsample0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      String string0 = spreadSubsample0.randomSeedTipText();
      assertEquals(false, spreadSubsample0.getAdjustWeights());
      assertEquals(1, spreadSubsample0.getRandomSeed());
      assertEquals("Sets the random number seed for subsampling.", string0);
      assertEquals(0.0, spreadSubsample0.getDistributionSpread(), 0.01D);
  }

  @Test
  public void test2()  throws Throwable  {
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      String string0 = spreadSubsample0.getRevision();
      assertEquals(1, spreadSubsample0.getRandomSeed());
      assertEquals(false, spreadSubsample0.getAdjustWeights());
      assertNotNull(string0);
      assertEquals(0.0, spreadSubsample0.getDistributionSpread(), 0.01D);
      assertEquals("8034", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "V#y(On?eP3,SNaIf) T";
      stringArray0[1] = "V#y(On?eP3,SNaIf) T";
      stringArray0[2] = "V#y(On?eP3,SNaIf) T";
      stringArray0[3] = "";
      stringArray0[4] = "V#y(On?eP3,SNaIf) T";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "V#y(On?eP3,SNaIf) T";
      Filter.runFilter((Filter) spreadSubsample0, stringArray0);
      assertEquals(false, spreadSubsample0.getAdjustWeights());
      assertEquals(0.0, spreadSubsample0.getDistributionSpread(), 0.01D);
      assertEquals(0.0, spreadSubsample0.getMaxCount(), 0.01D);
      assertEquals(1, spreadSubsample0.getRandomSeed());
  }

  @Test
  public void test4()  throws Throwable  {
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      String[] stringArray0 = spreadSubsample0.getOptions();
      assertNotNull(stringArray0);
      
      spreadSubsample0.setOptions(stringArray0);
      assertEquals(0.0, spreadSubsample0.getMaxCount(), 0.01D);
      assertEquals(1, spreadSubsample0.getRandomSeed());
      assertEquals(0.0, spreadSubsample0.getDistributionSpread(), 0.01D);
      assertEquals(false, spreadSubsample0.getAdjustWeights());
  }

  @Test
  public void test5()  throws Throwable  {
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      String string0 = spreadSubsample0.globalInfo();
      assertEquals("Produces a random subsample of a dataset. The original dataset must fit entirely in memory. This filter allows you to specify the maximum \"spread\" between the rarest and most common class. For example, you may specify that there be at most a 2:1 difference in class frequencies. When used in batch mode, subsequent batches are NOT resampled.", string0);
      assertEquals(false, spreadSubsample0.getAdjustWeights());
      assertEquals(0.0, spreadSubsample0.getDistributionSpread(), 0.01D);
      assertEquals(1, spreadSubsample0.getRandomSeed());
  }

  @Test
  public void test6()  throws Throwable  {
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      String string0 = spreadSubsample0.maxCountTipText();
      assertEquals(false, spreadSubsample0.getAdjustWeights());
      assertEquals(1, spreadSubsample0.getRandomSeed());
      assertEquals(0.0, spreadSubsample0.getDistributionSpread(), 0.01D);
      assertEquals("The maximum count for any class value (0 = unlimited).", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      String string0 = spreadSubsample0.distributionSpreadTipText();
      assertEquals(false, spreadSubsample0.getAdjustWeights());
      assertEquals(0.0, spreadSubsample0.getDistributionSpread(), 0.01D);
      assertEquals("The maximum class distribution spread. (0 = no maximum spread, 1 = uniform distribution, 10 = allow at most a 10:1 ratio between the classes).", string0);
      assertEquals(1, spreadSubsample0.getRandomSeed());
  }

  @Test
  public void test8()  throws Throwable  {
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      String string0 = spreadSubsample0.adjustWeightsTipText();
      assertEquals(false, spreadSubsample0.getAdjustWeights());
      assertEquals("Wether instance weights will be adjusted to maintain total weight per class.", string0);
      assertEquals(1, spreadSubsample0.getRandomSeed());
      assertEquals(0.0, spreadSubsample0.getDistributionSpread(), 0.01D);
  }

  @Test
  public void test9()  throws Throwable  {
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      assertEquals(false, spreadSubsample0.getAdjustWeights());
      
      spreadSubsample0.setAdjustWeights(true);
      spreadSubsample0.getOptions();
      assertEquals(true, spreadSubsample0.getAdjustWeights());
  }

  @Test
  public void test10()  throws Throwable  {
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      double[] doubleArray0 = new double[9];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3.0, doubleArray0);
      // Undeclared exception!
      try {
        spreadSubsample0.input((Instance) binarySparseInstance0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * No input instance format defined
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      // Undeclared exception!
      try {
        spreadSubsample0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * No input instance format defined
         */
      }
  }
}
