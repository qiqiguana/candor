/*
 * This file was automatically generated by EvoSuite
 */

package weka.filters.supervised.instance;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import weka.core.Instance;
import weka.core.Instances;
import weka.filters.Filter;
import weka.filters.supervised.instance.StratifiedRemoveFolds;

@RunWith(EvoSuiteRunner.class)
public class StratifiedRemoveFoldsEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds();
      try {
        stratifiedRemoveFolds0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds();
      String string0 = stratifiedRemoveFolds0.invertSelectionTipText();
      assertEquals(1, stratifiedRemoveFolds0.getFold());
      assertEquals("Whether to invert the selection.", string0);
      assertEquals(0L, stratifiedRemoveFolds0.getSeed());
      assertEquals(10, stratifiedRemoveFolds0.getNumFolds());
      assertEquals(false, stratifiedRemoveFolds0.getInvertSelection());
  }

  @Test
  public void test2()  throws Throwable  {
      StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds();
      String[] stringArray0 = stratifiedRemoveFolds0.getOptions();
      assertNotNull(stringArray0);
      
      stratifiedRemoveFolds0.setOptions(stringArray0);
      assertEquals(1, stratifiedRemoveFolds0.getFold());
      assertEquals(0L, stratifiedRemoveFolds0.getSeed());
      assertEquals(10, stratifiedRemoveFolds0.getNumFolds());
      assertEquals(false, stratifiedRemoveFolds0.getInvertSelection());
  }

  @Test
  public void test3()  throws Throwable  {
      StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds();
      String string0 = stratifiedRemoveFolds0.getRevision();
      assertEquals(1, stratifiedRemoveFolds0.getFold());
      assertNotNull(string0);
      assertEquals(false, stratifiedRemoveFolds0.getInvertSelection());
      assertEquals(0L, stratifiedRemoveFolds0.getSeed());
      assertEquals(10, stratifiedRemoveFolds0.getNumFolds());
      assertEquals("8034", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "F";
      Filter.runFilter((Filter) stratifiedRemoveFolds0, stringArray0);
      assertEquals(false, stratifiedRemoveFolds0.getInvertSelection());
      assertEquals(1, stratifiedRemoveFolds0.getFold());
      assertEquals(0L, stratifiedRemoveFolds0.getSeed());
      assertEquals(10, stratifiedRemoveFolds0.getNumFolds());
  }

  @Test
  public void test5()  throws Throwable  {
      StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds();
      String string0 = stratifiedRemoveFolds0.foldTipText();
      assertEquals(10, stratifiedRemoveFolds0.getNumFolds());
      assertEquals("The fold which is selected.", string0);
      assertEquals(1, stratifiedRemoveFolds0.getFold());
      assertEquals(false, stratifiedRemoveFolds0.getInvertSelection());
      assertEquals(0L, stratifiedRemoveFolds0.getSeed());
  }

  @Test
  public void test6()  throws Throwable  {
      StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds();
      String string0 = stratifiedRemoveFolds0.globalInfo();
      assertEquals(0L, stratifiedRemoveFolds0.getSeed());
      assertEquals(10, stratifiedRemoveFolds0.getNumFolds());
      assertEquals(1, stratifiedRemoveFolds0.getFold());
      assertEquals(false, stratifiedRemoveFolds0.getInvertSelection());
      assertEquals("This filter takes a dataset and outputs a specified fold for cross validation. If you do not want the folds to be stratified use the unsupervised version.", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds();
      String string0 = stratifiedRemoveFolds0.numFoldsTipText();
      assertEquals(1, stratifiedRemoveFolds0.getFold());
      assertEquals(0L, stratifiedRemoveFolds0.getSeed());
      assertEquals("The number of folds to split the dataset into.", string0);
      assertEquals(10, stratifiedRemoveFolds0.getNumFolds());
      assertEquals(false, stratifiedRemoveFolds0.getInvertSelection());
  }

  @Test
  public void test8()  throws Throwable  {
      StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds();
      String string0 = stratifiedRemoveFolds0.seedTipText();
      assertEquals(1, stratifiedRemoveFolds0.getFold());
      assertEquals(0L, stratifiedRemoveFolds0.getSeed());
      assertEquals(10, stratifiedRemoveFolds0.getNumFolds());
      assertEquals(false, stratifiedRemoveFolds0.getInvertSelection());
      assertEquals("the random number seed for shuffling the dataset. If seed is negative, shuffling will not be performed.", string0);
  }

  @Test
  public void test9()  throws Throwable  {
      StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds();
      assertEquals(false, stratifiedRemoveFolds0.getInvertSelection());
      
      stratifiedRemoveFolds0.setInvertSelection(true);
      stratifiedRemoveFolds0.getOptions();
      assertEquals(true, stratifiedRemoveFolds0.getInvertSelection());
      assertEquals(10, stratifiedRemoveFolds0.getNumFolds());
  }

  @Test
  public void test10()  throws Throwable  {
      StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds();
      // Undeclared exception!
      try {
        stratifiedRemoveFolds0.setNumFolds((-561));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Number of folds has to be positive or zero.
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds();
      // Undeclared exception!
      try {
        stratifiedRemoveFolds0.setFold((-382));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Fold's index has to be greater than 0.
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds();
      stratifiedRemoveFolds0.setFold(1027);
      try {
        stratifiedRemoveFolds0.setInputFormat((Instances) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Fold has to be smaller or equal to number of folds.
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds();
      // Undeclared exception!
      try {
        stratifiedRemoveFolds0.input((Instance) null);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * No input instance format defined
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds();
      // Undeclared exception!
      try {
        stratifiedRemoveFolds0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * No input instance format defined
         */
      }
  }
}
