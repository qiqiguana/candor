/*
 * This file was automatically generated by EvoSuite
 */

package weka.filters.supervised.instance;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Enumeration;
import java.util.Random;
import org.junit.BeforeClass;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.filters.supervised.instance.Resample;

@RunWith(EvoSuiteRunner.class)
public class ResampleEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Resample resample0 = new Resample();
      String string0 = resample0.getRevision();
      assertNotNull(string0);
      assertEquals(false, resample0.getNoReplacement());
      assertEquals(100.0, resample0.getSampleSizePercent(), 0.01D);
      assertEquals(1, resample0.getRandomSeed());
      assertEquals(0.0, resample0.getBiasToUniformClass(), 0.01D);
      assertEquals(false, resample0.getInvertSelection());
      assertEquals("8034", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      Resample resample0 = new Resample();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "/{hGFC";
      stringArray0[1] = "";
      stringArray0[2] = "";
      resample0.setOptions(stringArray0);
      assertEquals(false, resample0.getInvertSelection());
      assertEquals(false, resample0.getNoReplacement());
      assertEquals(100.0, resample0.getSampleSizePercent(), 0.01D);
      assertEquals(1, resample0.getRandomSeed());
      assertEquals(0.0, resample0.getBiasToUniformClass(), 0.01D);
  }

  @Test
  public void test2()  throws Throwable  {
      Resample resample0 = new Resample();
      Enumeration<Object> enumeration0 = resample0.listOptions();
      assertEquals(false, resample0.getInvertSelection());
      assertEquals(1, resample0.getRandomSeed());
      assertEquals(false, resample0.getNoReplacement());
      assertEquals(0.0, resample0.getBiasToUniformClass(), 0.01D);
      assertNotNull(enumeration0);
      assertEquals(100.0, resample0.getSampleSizePercent(), 0.01D);
  }

  @Test
  public void test3()  throws Throwable  {
      Resample resample0 = new Resample();
      Random random0 = new Random((-1810L));
      int[] intArray0 = new int[10];
      resample0.createSubsampleWithoutReplacement(random0, 0, 0, 0, intArray0);
      assertEquals(false, resample0.getInvertSelection());
      assertEquals(100.0, resample0.getSampleSizePercent(), 0.01D);
      assertEquals(0.0, resample0.getBiasToUniformClass(), 0.01D);
      assertEquals(1, resample0.getRandomSeed());
  }

  @Test
  public void test4()  throws Throwable  {
      Resample resample0 = new Resample();
      String string0 = resample0.randomSeedTipText();
      assertEquals(1, resample0.getRandomSeed());
      assertEquals(false, resample0.getInvertSelection());
      assertEquals("Sets the random number seed for subsampling.", string0);
      assertEquals(100.0, resample0.getSampleSizePercent(), 0.01D);
      assertEquals(0.0, resample0.getBiasToUniformClass(), 0.01D);
      assertEquals(false, resample0.getNoReplacement());
  }

  @Test
  public void test5()  throws Throwable  {
      Resample resample0 = new Resample();
      String string0 = resample0.sampleSizePercentTipText();
      assertEquals(0.0, resample0.getBiasToUniformClass(), 0.01D);
      assertEquals(false, resample0.getNoReplacement());
      assertEquals(1, resample0.getRandomSeed());
      assertEquals("The subsample size as a percentage of the original set.", string0);
      assertEquals(false, resample0.getInvertSelection());
      assertEquals(100.0, resample0.getSampleSizePercent(), 0.01D);
  }

  @Test
  public void test6()  throws Throwable  {
      Resample resample0 = new Resample();
      String string0 = resample0.invertSelectionTipText();
      assertEquals(0.0, resample0.getBiasToUniformClass(), 0.01D);
      assertEquals(1, resample0.getRandomSeed());
      assertEquals(false, resample0.getNoReplacement());
      assertEquals(false, resample0.getInvertSelection());
      assertEquals(100.0, resample0.getSampleSizePercent(), 0.01D);
      assertEquals("Inverts the selection (only if instances are drawn WITHOUT replacement).", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      Resample resample0 = new Resample();
      String string0 = resample0.biasToUniformClassTipText();
      assertEquals("Whether to use bias towards a uniform class. A value of 0 leaves the class distribution as-is, a value of 1 ensures the class distribution is uniform in the output data.", string0);
      assertEquals(false, resample0.getInvertSelection());
      assertEquals(false, resample0.getNoReplacement());
      assertEquals(1, resample0.getRandomSeed());
      assertEquals(100.0, resample0.getSampleSizePercent(), 0.01D);
      assertEquals(0.0, resample0.getBiasToUniformClass(), 0.01D);
  }

  @Test
  public void test8()  throws Throwable  {
      Resample resample0 = new Resample();
      String[] stringArray0 = resample0.getOptions();
      assertNotNull(stringArray0);
      
      resample0.setOptions(stringArray0);
      assertEquals(false, resample0.getInvertSelection());
      assertEquals(false, resample0.getNoReplacement());
      assertEquals(0.0, resample0.getBiasToUniformClass(), 0.01D);
      assertEquals(1, resample0.getRandomSeed());
      assertEquals(100.0, resample0.getSampleSizePercent(), 0.01D);
  }

  @Test
  public void test9()  throws Throwable  {
      Resample resample0 = new Resample();
      try {
        resample0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      Resample resample0 = new Resample();
      String string0 = resample0.globalInfo();
      assertEquals("Produces a random subsample of a dataset using either sampling with replacement or without replacement.\nThe original dataset must fit entirely in memory. The number of instances in the generated dataset may be specified. The dataset must have a nominal class attribute. If not, use the unsupervised version. The filter can be made to maintain the class distribution in the subsample, or to bias the class distribution toward a uniform distribution. When used in batch mode (i.e. in the FilteredClassifier), subsequent batches are NOT resampled.", string0);
      assertEquals(100.0, resample0.getSampleSizePercent(), 0.01D);
      assertEquals(1, resample0.getRandomSeed());
      assertEquals(false, resample0.getInvertSelection());
      assertEquals(0.0, resample0.getBiasToUniformClass(), 0.01D);
      assertEquals(false, resample0.getNoReplacement());
  }

  @Test
  public void test11()  throws Throwable  {
      Resample resample0 = new Resample();
      String string0 = resample0.noReplacementTipText();
      assertEquals(100.0, resample0.getSampleSizePercent(), 0.01D);
      assertEquals(false, resample0.getInvertSelection());
      assertEquals(1, resample0.getRandomSeed());
      assertEquals(false, resample0.getNoReplacement());
      assertEquals("Disables the replacement of instances.", string0);
      assertEquals(0.0, resample0.getBiasToUniformClass(), 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      Resample resample0 = new Resample();
      DenseInstance denseInstance0 = new DenseInstance(123);
      // Undeclared exception!
      try {
        resample0.input((Instance) denseInstance0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * No input instance format defined
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      Resample resample0 = new Resample();
      // Undeclared exception!
      try {
        resample0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * No input instance format defined
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      Resample resample0 = new Resample();
      Random random0 = new Random();
      int[] intArray0 = new int[10];
      resample0.createSubsampleWithReplacement(random0, 0, 0, 784, intArray0);
      assertEquals(302939489, random0.nextInt());
      assertEquals(0.6702388F, random0.nextFloat(), 0.01F);
  }

  @Test
  public void test15()  throws Throwable  {
      Resample resample0 = new Resample();
      Random random0 = new Random();
      int[] intArray0 = new int[8];
      // Undeclared exception!
      try {
        resample0.createSubsampleWithReplacement(random0, 1, 1, 1, intArray0);
        fail("Expecting exception: NoSuchMethodError");
      } catch(NoSuchMethodError e) {
        /*
         * org.evosuite.runtime.Random.nextDouble()D
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      Resample resample0 = new Resample();
      Random random0 = new Random();
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try {
        resample0.createSubsampleWithoutReplacement(random0, 93, 1705, 882, intArray0);
        fail("Expecting exception: NoSuchMethodError");
      } catch(NoSuchMethodError e) {
        /*
         * org.evosuite.runtime.Random.nextDouble()D
         */
      }
  }

  @Test
  public void test17()  throws Throwable  {
      Resample resample0 = new Resample();
      int[] intArray0 = new int[22];
      intArray0[1] = 4;
      // Undeclared exception!
      try {
        resample0.createSubsampleWithoutReplacement((Random) null, 4, 713, 13, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Illegal Capacity: -4
         */
      }
  }

  @Test
  public void test18()  throws Throwable  {
      Resample resample0 = new Resample();
      Random random0 = new Random((-1810L));
      resample0.setInvertSelection(true);
      int[] intArray0 = new int[10];
      resample0.createSubsampleWithoutReplacement(random0, 0, 0, 0, intArray0);
      assertEquals(true, resample0.getInvertSelection());
      assertEquals(false, resample0.getNoReplacement());
  }
}
