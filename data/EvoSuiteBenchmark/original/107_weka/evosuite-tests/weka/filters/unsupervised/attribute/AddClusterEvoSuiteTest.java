/*
 * This file was automatically generated by EvoSuite
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.File;
import org.junit.BeforeClass;
import weka.clusterers.SimpleKMeans;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.AddCluster;

@RunWith(EvoSuiteRunner.class)
public class AddClusterEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      AddCluster addCluster0 = new AddCluster();
      File file0 = addCluster0.getSerializedClustererFile();
      addCluster0.setSerializedClustererFile(file0);
      assertEquals("", addCluster0.getIgnoredAttributeIndices());
  }

  @Test
  public void test1()  throws Throwable  {
      AddCluster addCluster0 = new AddCluster();
      assertNotNull(addCluster0);
      
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      Capabilities capabilities0 = simpleKMeans0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate((String) null);
      boolean boolean0 = addCluster0.setInputFormat(instances0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      AddCluster addCluster0 = new AddCluster();
      assertNotNull(addCluster0);
      
      String string0 = addCluster0.clustererTipText();
      assertEquals("The clusterer to assign clusters with.", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      AddCluster addCluster0 = new AddCluster();
      assertNotNull(addCluster0);
      
      String string0 = addCluster0.globalInfo();
      assertEquals("A filter that adds a new nominal attribute representing the cluster assigned to each instance by the specified clustering algorithm.\nEither the clustering algorithm gets built with the first batch of data or one specifies are serialized clusterer model file to use instead.", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      AddCluster addCluster0 = new AddCluster();
      assertNotNull(addCluster0);
      
      String string0 = addCluster0.serializedClustererFileTipText();
      assertEquals("A file containing the serialized model of a built clusterer.", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      AddCluster addCluster0 = new AddCluster();
      assertNotNull(addCluster0);
      
      String string0 = addCluster0.ignoredAttributeIndicesTipText();
      assertEquals("The range of attributes to be ignored by the clusterer. eg: first-3,5,9-last", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      AddCluster addCluster0 = new AddCluster();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "The clusterer to assign clusters with.";
      stringArray0[1] = "A file containing the serialized model of a built clusterer.";
      stringArray0[2] = "The range of attributes to be ignored by the clusterer. eg: first-3,5,9-last";
      stringArray0[3] = "The clusterer to assign clusters with.";
      stringArray0[4] = "A file containing the serialized model of a built clusterer.";
      stringArray0[5] = "The range of attributes to be ignored by the clusterer. eg: first-3,5,9-last";
      try {
        Filter.filterFile((Filter) addCluster0, stringArray0);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * 
         * Illegal options: The clusterer to assign clusters with. A file containing the serialized model of a built clusterer. The range of attributes to be ignored by the clusterer. eg: first-3,5,9-last The clusterer to assign clusters with. A file containing the serialized model of a built clusterer. The range of attributes to be ignored by the clusterer. eg: first-3,5,9-last 
         * Filter options:
         * 
         * -W <clusterer specification>
         * \tFull class name of clusterer to use, followed
         * \tby scheme options. eg:
         * \t\t\"weka.clusterers.SimpleKMeans -N 3\"
         * \t(default: weka.clusterers.SimpleKMeans)
         * -serialized <file>
         * \tInstead of building a clusterer on the data, one can also provide
         * \ta serialized model and use that for adding the clusters.
         * -I <att1,att2-att4,...>
         * \tThe range of attributes the clusterer should ignore.
         * 
         * 
         * General options:
         * 
         * -h
         * \tGet help on available options.
         * \t(use -b -h for help on batch mode.)
         * -i <file>
         * \tThe name of the file containing input instances.
         * \tIf not supplied then instances will be read from stdin.
         * -o <file>
         * \tThe name of the file output instances will be written to.
         * \tIf not supplied then instances will be written to stdout.
         * -c <class index>
         * \tThe number of the attribute to use as the class.
         * \t\"first\" and \"last\" are also valid entries.
         * \tIf not supplied then no class is assigned.
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      AddCluster addCluster0 = new AddCluster();
      assertNotNull(addCluster0);
      
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      addCluster0.setInputFormat(instances0);
      Filter.useFilter(instances0, (Filter) addCluster0);
      assertEquals(true, addCluster0.isOutputFormatDefined());
      
      addCluster0.batchFinished();
      assertEquals("weka.clusterers.SimpleKMeans -N 2 -A \"weka.core.EuclideanDistance -R first-last\" -I 500 -S 10", addCluster0.getClustererSpec());
  }

  @Test
  public void test8()  throws Throwable  {
      AddCluster addCluster0 = new AddCluster();
      assertNotNull(addCluster0);
      
      String string0 = addCluster0.getRevision();
      assertNotNull(string0);
      assertEquals("8034", string0);
  }

  @Test
  public void test9()  throws Throwable  {
      AddCluster addCluster0 = new AddCluster();
      assertNotNull(addCluster0);
      
      addCluster0.setIgnoredAttributeIndices("- modelled after SimpleKMeans, might be a useful initializer 4or it");
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      Capabilities capabilities0 = simpleKMeans0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("- modelled after SimpleKMeans, might be a useful initializer 4or it");
      try {
        addCluster0.setInputFormat(instances0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Invalid range list at - modelled after SimpleKMeans
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      AddCluster addCluster0 = new AddCluster();
      try {
        addCluster0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * No input instance format defined
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      AddCluster addCluster0 = new AddCluster();
      assertNotNull(addCluster0);
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(559);
      try {
        addCluster0.input((Instance) binarySparseInstance0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * No input instance format defined
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      AddCluster addCluster0 = new AddCluster();
      assertNotNull(addCluster0);
      
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      addCluster0.setInputFormat(instances0);
      Filter.useFilter(instances0, (Filter) addCluster0);
      assertEquals(true, addCluster0.isOutputFormatDefined());
      
      try {
        addCluster0.input((Instance) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      AddCluster addCluster0 = new AddCluster();
      assertNotNull(addCluster0);
      
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      addCluster0.setInputFormat(instances0);
      Filter.useFilter(instances0, (Filter) addCluster0);
      assertEquals(true, addCluster0.isFirstBatchDone());
      assertEquals(true, addCluster0.isOutputFormatDefined());
  }

  @Test
  public void test14()  throws Throwable  {
      AddCluster addCluster0 = new AddCluster();
      assertNotNull(addCluster0);
      
      String[] stringArray0 = addCluster0.getOptions();
      assertNotNull(stringArray0);
      
      addCluster0.setOptions(stringArray0);
      assertEquals("weka.clusterers.SimpleKMeans -N 2 -A \"weka.core.EuclideanDistance -R first-last\" -I 500 -S 10", addCluster0.getClustererSpec());
  }

  @Test
  public void test15()  throws Throwable  {
      AddCluster addCluster0 = new AddCluster();
      assertNotNull(addCluster0);
      
      addCluster0.setIgnoredAttributeIndices("- modelled after SimpleKMeans, might be a useful initializer 4or it");
      addCluster0.getOptions();
      assertEquals("- modelled after SimpleKMeans,might be a useful initializer 4or it", addCluster0.getIgnoredAttributeIndices());
  }

  @Test
  public void test16()  throws Throwable  {
      AddCluster addCluster0 = new AddCluster();
      addCluster0.setIgnoredAttributeIndices((String) null);
      assertEquals(false, addCluster0.isFirstBatchDone());
  }

  @Test
  public void test17()  throws Throwable  {
      AddCluster addCluster0 = new AddCluster();
      File file0 = new File("a`gZ0Zp&e\"FoHAi", "a`gZ0Zp&e\"FoHAi");
      addCluster0.setSerializedClustererFile(file0);
      assertEquals("a`gZ0Zp&e\"FoHAi/a`gZ0Zp&e\"FoHAi", file0.getPath());
  }
}
