/*
 * This file was automatically generated by EvoSuite
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import weka.core.BinarySparseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.Range;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.MakeIndicator;

@RunWith(EvoSuiteRunner.class)
public class MakeIndicatorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      MakeIndicator makeIndicator0 = new MakeIndicator();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "`w$i";
      try {
        Filter.filterFile((Filter) makeIndicator0, stringArray0);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * 
         * Illegal options: `w$i 
         * Filter options:
         * 
         * -C <col>
         * \tSets the attribute index.
         * -V <index1,index2-index4,...>
         * \tSpecify the list of values to indicate. First and last are
         * \tvalid indexes (default last)
         * -N <index>
         * \tSet if new boolean attribute nominal.
         * 
         * General options:
         * 
         * -h
         * \tGet help on available options.
         * \t(use -b -h for help on batch mode.)
         * -i <file>
         * \tThe name of the file containing input instances.
         * \tIf not supplied then instances will be read from stdin.
         * -o <file>
         * \tThe name of the file output instances will be written to.
         * \tIf not supplied then instances will be written to stdout.
         * -c <class index>
         * \tThe number of the attribute to use as the class.
         * \t\"first\" and \"last\" are also valid entries.
         * \tIf not supplied then no class is assigned.
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      MakeIndicator makeIndicator0 = new MakeIndicator();
      String[] stringArray0 = makeIndicator0.getOptions();
      assertNotNull(stringArray0);
      assertEquals("last", makeIndicator0.getValueIndices());
      assertEquals(true, makeIndicator0.getNumeric());
      assertEquals("last", makeIndicator0.getAttributeIndex());
  }

  @Test
  public void test2()  throws Throwable  {
      MakeIndicator makeIndicator0 = new MakeIndicator();
      try {
        makeIndicator0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      MakeIndicator makeIndicator0 = new MakeIndicator();
      makeIndicator0.setValueIndex(0);
      assertEquals("1", makeIndicator0.getValueIndices());
      assertEquals("last", makeIndicator0.getAttributeIndex());
  }

  @Test
  public void test4()  throws Throwable  {
      MakeIndicator makeIndicator0 = new MakeIndicator();
      String string0 = makeIndicator0.globalInfo();
      assertEquals("A filter that creates a new dataset with a boolean attribute replacing a nominal attribute.  In the new dataset, a value of 1 is assigned to an instance that exhibits a particular range of attribute values, a 0 to an instance that doesn't. The boolean attribute is coded as numeric by default.", string0);
      assertEquals("last", makeIndicator0.getAttributeIndex());
      assertEquals("last", makeIndicator0.getValueIndices());
      assertEquals(true, makeIndicator0.getNumeric());
  }

  @Test
  public void test5()  throws Throwable  {
      MakeIndicator makeIndicator0 = new MakeIndicator();
      String string0 = makeIndicator0.attributeIndexTipText();
      assertEquals("last", makeIndicator0.getValueIndices());
      assertEquals("last", makeIndicator0.getAttributeIndex());
      assertEquals("Sets which attribute should be replaced by the indicator. This attribute must be nominal.", string0);
      assertEquals(true, makeIndicator0.getNumeric());
  }

  @Test
  public void test6()  throws Throwable  {
      MakeIndicator makeIndicator0 = new MakeIndicator();
      String string0 = makeIndicator0.numericTipText();
      assertEquals("last", makeIndicator0.getAttributeIndex());
      assertEquals(true, makeIndicator0.getNumeric());
      assertEquals("last", makeIndicator0.getValueIndices());
      assertEquals("Determines whether the output indicator attribute is numeric. If this is set to false, the output attribute will be nominal.", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      MakeIndicator makeIndicator0 = new MakeIndicator();
      int[] intArray0 = new int[3];
      makeIndicator0.setValueIndicesArray(intArray0);
      assertEquals("1,1,1", makeIndicator0.getValueIndices());
  }

  @Test
  public void test8()  throws Throwable  {
      MakeIndicator makeIndicator0 = new MakeIndicator();
      String string0 = makeIndicator0.getRevision();
      assertEquals(true, makeIndicator0.getNumeric());
      assertEquals("last", makeIndicator0.getAttributeIndex());
      assertEquals("8034", string0);
      assertEquals("last", makeIndicator0.getValueIndices());
      assertNotNull(string0);
  }

  @Test
  public void test9()  throws Throwable  {
      MakeIndicator makeIndicator0 = new MakeIndicator();
      String string0 = makeIndicator0.valueIndicesTipText();
      assertEquals("last", makeIndicator0.getValueIndices());
      assertEquals(true, makeIndicator0.getNumeric());
      assertEquals("last", makeIndicator0.getAttributeIndex());
      assertEquals("Specify range of nominal values to act on. This is a comma separated list of attribute indices (numbered from 1), with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string0);
  }

  @Test
  public void test10()  throws Throwable  {
      MakeIndicator makeIndicator0 = new MakeIndicator();
      Range range0 = makeIndicator0.getValueRange();
      assertEquals(true, makeIndicator0.getNumeric());
      assertNotNull(range0);
      assertEquals("last", makeIndicator0.getAttributeIndex());
      assertEquals("last", range0.getRanges());
  }

  @Test
  public void test11()  throws Throwable  {
      MakeIndicator makeIndicator0 = new MakeIndicator();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      // Undeclared exception!
      try {
        makeIndicator0.input((Instance) binarySparseInstance0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * No input instance format defined
         */
      }
  }
}
