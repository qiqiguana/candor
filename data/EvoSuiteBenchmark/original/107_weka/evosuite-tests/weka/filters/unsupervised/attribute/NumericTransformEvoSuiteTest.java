/*
 * This file was automatically generated by EvoSuite
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Enumeration;
import org.junit.BeforeClass;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.filters.unsupervised.attribute.NumericTransform;

@RunWith(EvoSuiteRunner.class)
public class NumericTransformEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      NumericTransform numericTransform0 = new NumericTransform();
      String string0 = numericTransform0.getRevision();
      assertEquals("8034", string0);
      assertNotNull(string0);
      assertEquals("abs", numericTransform0.getMethodName());
      assertEquals("java.lang.Math", numericTransform0.getClassName());
  }

  @Test
  public void test1()  throws Throwable  {
      NumericTransform numericTransform0 = new NumericTransform();
      String string0 = numericTransform0.attributeIndicesTipText();
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string0);
      assertEquals("abs", numericTransform0.getMethodName());
      assertEquals("java.lang.Math", numericTransform0.getClassName());
  }

  @Test
  public void test2()  throws Throwable  {
      NumericTransform numericTransform0 = new NumericTransform();
      try {
        numericTransform0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      NumericTransform numericTransform0 = new NumericTransform();
      String string0 = numericTransform0.classNameTipText();
      assertEquals("abs", numericTransform0.getMethodName());
      assertEquals("Name of the class containing the method used for the transformation.", string0);
      assertEquals("java.lang.Math", numericTransform0.getClassName());
  }

  @Test
  public void test4()  throws Throwable  {
      NumericTransform numericTransform0 = new NumericTransform();
      String string0 = numericTransform0.methodNameTipText();
      assertEquals("Name of the method used for the transformation.", string0);
      assertEquals("java.lang.Math", numericTransform0.getClassName());
      assertEquals("abs", numericTransform0.getMethodName());
  }

  @Test
  public void test5()  throws Throwable  {
      NumericTransform numericTransform0 = new NumericTransform();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "7p?>7qK7D!Rzg^";
      stringArray0[1] = "]),,qy`F";
      stringArray0[2] = "]),,qy`F";
      stringArray0[3] = "X9$";
      stringArray0[4] = "z(u^2#+xts6282\"q+>=";
      stringArray0[5] = "";
      stringArray0[6] = "Ror]X7Zsd)JL";
      stringArray0[7] = "";
      numericTransform0.setOptions(stringArray0);
      assertEquals(false, numericTransform0.getInvertSelection());
      assertEquals("java.lang.Math", numericTransform0.getClassName());
      assertEquals("abs", numericTransform0.getMethodName());
  }

  @Test
  public void test6()  throws Throwable  {
      NumericTransform numericTransform0 = new NumericTransform();
      Enumeration<Object> enumeration0 = numericTransform0.listOptions();
      assertEquals("abs", numericTransform0.getMethodName());
      assertEquals("java.lang.Math", numericTransform0.getClassName());
      assertNotNull(enumeration0);
  }

  @Test
  public void test7()  throws Throwable  {
      NumericTransform numericTransform0 = new NumericTransform();
      String[] stringArray0 = numericTransform0.getOptions();
      assertNotNull(stringArray0);
      
      numericTransform0.setOptions(stringArray0);
      assertEquals(false, numericTransform0.getInvertSelection());
      assertEquals("abs", numericTransform0.getMethodName());
      assertEquals("java.lang.Math", numericTransform0.getClassName());
  }

  @Test
  public void test8()  throws Throwable  {
      NumericTransform numericTransform0 = new NumericTransform();
      int[] intArray0 = new int[6];
      numericTransform0.setAttributeIndicesArray(intArray0);
      String[] stringArray0 = numericTransform0.getOptions();
      assertNotNull(stringArray0);
      assertEquals("1,1,1,1,1,1", numericTransform0.getAttributeIndices());
  }

  @Test
  public void test9()  throws Throwable  {
      NumericTransform numericTransform0 = new NumericTransform();
      String string0 = numericTransform0.invertSelectionTipText();
      assertEquals("abs", numericTransform0.getMethodName());
      assertEquals("java.lang.Math", numericTransform0.getClassName());
      assertEquals("Whether to process the inverse of the given attribute ranges.", string0);
  }

  @Test
  public void test10()  throws Throwable  {
      NumericTransform numericTransform0 = new NumericTransform();
      String string0 = numericTransform0.globalInfo();
      assertEquals("java.lang.Math", numericTransform0.getClassName());
      assertEquals("abs", numericTransform0.getMethodName());
      assertEquals("Transforms numeric attributes using a given transformation method.", string0);
  }

  @Test
  public void test11()  throws Throwable  {
      NumericTransform numericTransform0 = new NumericTransform();
      double[] doubleArray0 = new double[2];
      SparseInstance sparseInstance0 = new SparseInstance((-6.07470595155483), doubleArray0);
      try {
        numericTransform0.input((Instance) sparseInstance0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * No input instance format defined
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      NumericTransform numericTransform0 = new NumericTransform();
      numericTransform0.setInvertSelection(true);
      String[] stringArray0 = numericTransform0.getOptions();
      assertNotNull(stringArray0);
      assertEquals(true, numericTransform0.getInvertSelection());
  }
}
