/*
 * This file was automatically generated by EvoSuite
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.ArrayList;
import org.junit.BeforeClass;
import weka.core.Attribute;
import weka.core.Capabilities;
import weka.core.Instances;
import weka.core.TestInstances;
import weka.core.UnsupportedAttributeTypeException;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.KernelFilter;

@RunWith(EvoSuiteRunner.class)
public class KernelFilterEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      KernelFilter kernelFilter0 = new KernelFilter();
      assertNotNull(kernelFilter0);
      
      String[] stringArray0 = kernelFilter0.getOptions();
      assertEquals("1", kernelFilter0.getKernelFactorExpression());
      assertNotNull(stringArray0);
      
      kernelFilter0.setOptions(stringArray0);
      try {
        kernelFilter0.process((Instances) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      KernelFilter kernelFilter0 = new KernelFilter();
      assertNotNull(kernelFilter0);
      
      String string0 = kernelFilter0.globalInfo();
      assertEquals("Converts the given set of predictor variables into a kernel matrix. The class value remains unchangedm, as long as the preprocessing filter doesn't change it.\nBy default, the data is preprocessed with the Center filter, but the user can choose any filter (NB: one must be careful that the filter does not alter the class attribute unintentionally). With weka.filters.AllFilter the preprocessing gets disabled.\n\nFor more information regarding preprocessing the data, see:\n\nK.P. Bennett, M.J. Embrechts: An Optimization Perspective on Kernel Partial Least Squares Regression. In: Advances in Learning Theory: Methods, Models and Applications, 227-249, 2003.", string0);
      assertNotNull(string0);
      assertEquals("last", kernelFilter0.getInitFileClassIndex());
      assertEquals("1", kernelFilter0.getKernelFactorExpression());
  }

  @Test
  public void test2()  throws Throwable  {
      KernelFilter kernelFilter0 = new KernelFilter();
      assertNotNull(kernelFilter0);
      
      String string0 = kernelFilter0.initFileTipText();
      assertEquals("last", kernelFilter0.getInitFileClassIndex());
      assertEquals("1", kernelFilter0.getKernelFactorExpression());
      assertEquals("The dataset to initialize the filter with.", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      KernelFilter kernelFilter0 = new KernelFilter();
      assertNotNull(kernelFilter0);
      
      String string0 = kernelFilter0.kernelTipText();
      assertEquals("1", kernelFilter0.getKernelFactorExpression());
      assertEquals("The kernel to use.", string0);
      assertEquals("last", kernelFilter0.getInitFileClassIndex());
  }

  @Test
  public void test4()  throws Throwable  {
      KernelFilter kernelFilter0 = new KernelFilter();
      assertNotNull(kernelFilter0);
      
      String string0 = kernelFilter0.kernelFactorExpressionTipText();
      assertEquals("1", kernelFilter0.getKernelFactorExpression());
      assertEquals("The factor for the kernel, with A = # of attributes and N = # of instances.", string0);
      assertEquals("last", kernelFilter0.getInitFileClassIndex());
  }

  @Test
  public void test5()  throws Throwable  {
      KernelFilter kernelFilter0 = new KernelFilter();
      assertNotNull(kernelFilter0);
      
      String string0 = kernelFilter0.checksTurnedOffTipText();
      assertEquals("1", kernelFilter0.getKernelFactorExpression());
      assertEquals("Turns time-consuming checks off - use with caution.", string0);
      assertEquals("last", kernelFilter0.getInitFileClassIndex());
  }

  @Test
  public void test6()  throws Throwable  {
      KernelFilter kernelFilter0 = new KernelFilter();
      assertNotNull(kernelFilter0);
      
      String string0 = kernelFilter0.initFileClassIndexTipText();
      assertEquals("last", kernelFilter0.getInitFileClassIndex());
      assertEquals("1", kernelFilter0.getKernelFactorExpression());
      assertEquals("The class index of the dataset to initialize the filter with (first and last are valid).", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      KernelFilter kernelFilter0 = new KernelFilter();
      assertNotNull(kernelFilter0);
      
      String string0 = kernelFilter0.preprocessingTipText();
      assertEquals("1", kernelFilter0.getKernelFactorExpression());
      assertEquals("Sets the filter to use for preprocessing (use the AllFilter for no preprocessing).", string0);
      assertEquals("last", kernelFilter0.getInitFileClassIndex());
  }

  @Test
  public void test8()  throws Throwable  {
      KernelFilter kernelFilter0 = new KernelFilter();
      assertNotNull(kernelFilter0);
      
      String string0 = kernelFilter0.getInitFileClassIndex();
      assertEquals("1", kernelFilter0.getKernelFactorExpression());
      assertEquals("last", string0);
      assertNotNull(string0);
  }

  @Test
  public void test9()  throws Throwable  {
      KernelFilter kernelFilter0 = new KernelFilter();
      assertNotNull(kernelFilter0);
      
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      kernelFilter0.determineOutputFormat(instances0);
      assertEquals("last", kernelFilter0.getInitFileClassIndex());
      assertEquals("1", kernelFilter0.getKernelFactorExpression());
  }

  @Test
  public void test10()  throws Throwable  {
      KernelFilter kernelFilter0 = new KernelFilter();
      assertNotNull(kernelFilter0);
      
      String string0 = kernelFilter0.getRevision();
      assertEquals("8034", string0);
      assertNotNull(string0);
      assertEquals("1", kernelFilter0.getKernelFactorExpression());
      assertEquals("last", kernelFilter0.getInitFileClassIndex());
  }

  @Test
  public void test11()  throws Throwable  {
      KernelFilter kernelFilter0 = new KernelFilter();
      assertEquals("1", kernelFilter0.getKernelFactorExpression());
      assertNotNull(kernelFilter0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "9s{&";
      stringArray0[3] = "9s{&";
      stringArray0[4] = "9s{&";
      stringArray0[5] = "9s{&";
      Filter.runFilter((Filter) kernelFilter0, stringArray0);
      String[] stringArray1 = kernelFilter0.getOptions();
      assertEquals("last", kernelFilter0.getInitFileClassIndex());
      assertEquals(false, kernelFilter0.getChecksTurnedOff());
      assertNotNull(stringArray1);
  }

  @Test
  public void test12()  throws Throwable  {
      KernelFilter kernelFilter0 = new KernelFilter();
      assertNotNull(kernelFilter0);
      
      kernelFilter0.setDebug(true);
      String[] stringArray0 = kernelFilter0.getOptions();
      assertNotNull(stringArray0);
      assertEquals("1", kernelFilter0.getKernelFactorExpression());
      assertEquals("last", kernelFilter0.getInitFileClassIndex());
  }

  @Test
  public void test13()  throws Throwable  {
      KernelFilter kernelFilter0 = new KernelFilter();
      assertNotNull(kernelFilter0);
      
      kernelFilter0.setChecksTurnedOff(true);
      kernelFilter0.getOptions();
      assertEquals(true, kernelFilter0.getChecksTurnedOff());
  }

  @Test
  public void test14()  throws Throwable  {
      KernelFilter kernelFilter0 = new KernelFilter();
      assertNotNull(kernelFilter0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 1620);
      Attribute attribute0 = new Attribute("", "");
      arrayList0.add(attribute0);
      try {
        kernelFilter0.initFilter(instances0);
        fail("Expecting exception: UnsupportedAttributeTypeException");
      } catch(UnsupportedAttributeTypeException e) {
        /*
         * weka.classifiers.functions.supportVector.PolyKernel: Cannot handle date attributes!
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      KernelFilter kernelFilter0 = new KernelFilter();
      assertNotNull(kernelFilter0);
      
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      kernelFilter0.process(instances0);
      assertEquals(true, kernelFilter0.isOutputFormatDefined());
      
      kernelFilter0.process(instances0);
      assertEquals(2, instances0.numAttributes());
  }

  @Test
  public void test16()  throws Throwable  {
      KernelFilter kernelFilter0 = new KernelFilter();
      assertNotNull(kernelFilter0);
      
      Capabilities capabilities0 = kernelFilter0.getCapabilities();
      assertNotNull(capabilities0);
      assertEquals("1", kernelFilter0.getKernelFactorExpression());
      assertEquals("Capabilities: [Numeric attributes, Nominal class, Binary class, Unary class, Empty nominal class, Numeric class, Date class, String class, Relational class, Missing class values]\nDependencies: []\nmin # Instance: 0\n", capabilities0.toString());
      assertEquals("last", kernelFilter0.getInitFileClassIndex());
  }
}
