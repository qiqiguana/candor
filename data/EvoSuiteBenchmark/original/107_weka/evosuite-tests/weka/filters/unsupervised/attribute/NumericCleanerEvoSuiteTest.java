/*
 * This file was automatically generated by EvoSuite
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.UnassignedDatasetException;
import weka.filters.unsupervised.attribute.NumericCleaner;

@RunWith(EvoSuiteRunner.class)
public class NumericCleanerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      NumericCleaner numericCleaner0 = new NumericCleaner();
      String string0 = numericCleaner0.minDefaultTipText();
      assertEquals(1.0E-6, numericCleaner0.getCloseToTolerance(), 0.01D);
      assertEquals(0.0, numericCleaner0.getCloseTo(), 0.01D);
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxThreshold(), 0.01D);
      assertEquals(0.0, numericCleaner0.getCloseToDefault(), 0.01D);
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxDefault(), 0.01D);
      assertEquals(-1, numericCleaner0.getDecimals());
      assertEquals(false, numericCleaner0.getIncludeClass());
      assertEquals("The default value to replace values that are below the minimum threshold.", string0);
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinDefault(), 0.01D);
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinThreshold(), 0.01D);
      assertEquals("first-last", numericCleaner0.getAttributeIndices());
  }

  @Test
  public void test1()  throws Throwable  {
      NumericCleaner numericCleaner0 = new NumericCleaner();
      double double0 = numericCleaner0.getMaxDefault();
      assertEquals(0.0, numericCleaner0.getCloseTo(), 0.01D);
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxThreshold(), 0.01D);
      assertEquals(false, numericCleaner0.getIncludeClass());
      assertEquals("first-last", numericCleaner0.getAttributeIndices());
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinThreshold(), 0.01D);
      assertEquals(-1, numericCleaner0.getDecimals());
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinDefault(), 0.01D);
      assertEquals(1.0E-6, numericCleaner0.getCloseToTolerance(), 0.01D);
      assertEquals(0.0, numericCleaner0.getCloseToDefault(), 0.01D);
      assertEquals(1.7976931348623157E308, double0, 0.01D);
  }

  @Test
  public void test2()  throws Throwable  {
      NumericCleaner numericCleaner0 = new NumericCleaner();
      assertEquals("first-last", numericCleaner0.getAttributeIndices());
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "A filter that 'cleanses' the numeric data from values that are too small, too big or very close to a certain value (e.g., 0) and sets these values to a pre-defined default.";
      stringArray0[1] = "A filter that 'cleanses' the numeric data from values that are too small, too big or very close to a certain value (e.g., 0) and sets these values to a pre-defined default.";
      stringArray0[2] = "A filter that 'cleanses' the numeric data from values that are too small, too big or very close to a certain value (e.g., 0) and sets these values to a pre-defined default.";
      stringArray0[3] = "A filter that 'cleanses' the numeric data from values that are too small, too big or very close to a certain value (e.g., 0) and sets these values to a pre-defined default.";
      stringArray0[4] = "A filter that 'cleanses' the numeric data from values that are too small, too big or very close to a certain value (e.g., 0) and sets these values to a pre-defined default.";
      stringArray0[5] = "A filter that 'cleanses' the numeric data from values that are too small, too big or very close to a certain value (e.g., 0) and sets these values to a pre-defined default.";
      stringArray0[6] = "A filter that 'cleanses' the numeric data from values that are too small, too big or very close to a certain value (e.g., 0) and sets these values to a pre-defined default.";
      numericCleaner0.setOptions(stringArray0);
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinDefault(), 0.01D);
      assertEquals(-1, numericCleaner0.getDecimals());
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinThreshold(), 0.01D);
      assertEquals(1.0E-6, numericCleaner0.getCloseToTolerance(), 0.01D);
      assertEquals(0.0, numericCleaner0.getCloseToDefault(), 0.01D);
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxThreshold(), 0.01D);
      assertEquals(0.0, numericCleaner0.getCloseTo(), 0.01D);
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxDefault(), 0.01D);
      assertEquals(false, numericCleaner0.getIncludeClass());
      assertEquals(false, numericCleaner0.getInvertSelection());
  }

  @Test
  public void test3()  throws Throwable  {
      NumericCleaner numericCleaner0 = new NumericCleaner();
      String string0 = numericCleaner0.invertSelectionTipText();
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinThreshold(), 0.01D);
      assertEquals(0.0, numericCleaner0.getCloseToDefault(), 0.01D);
      assertEquals(0.0, numericCleaner0.getCloseTo(), 0.01D);
      assertEquals("If enabled the selection of the columns is inverted.", string0);
      assertEquals(-1, numericCleaner0.getDecimals());
      assertEquals("first-last", numericCleaner0.getAttributeIndices());
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxThreshold(), 0.01D);
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinDefault(), 0.01D);
      assertEquals(1.0E-6, numericCleaner0.getCloseToTolerance(), 0.01D);
      assertEquals(false, numericCleaner0.getIncludeClass());
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxDefault(), 0.01D);
  }

  @Test
  public void test4()  throws Throwable  {
      NumericCleaner numericCleaner0 = new NumericCleaner();
      boolean boolean0 = numericCleaner0.getIncludeClass();
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinDefault(), 0.01D);
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinThreshold(), 0.01D);
      assertEquals(1.0E-6, numericCleaner0.getCloseToTolerance(), 0.01D);
      assertEquals(false, boolean0);
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxDefault(), 0.01D);
      assertEquals(-1, numericCleaner0.getDecimals());
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxThreshold(), 0.01D);
      assertEquals(0.0, numericCleaner0.getCloseTo(), 0.01D);
      assertEquals("first-last", numericCleaner0.getAttributeIndices());
      assertEquals(0.0, numericCleaner0.getCloseToDefault(), 0.01D);
  }

  @Test
  public void test5()  throws Throwable  {
      NumericCleaner numericCleaner0 = new NumericCleaner();
      Capabilities capabilities0 = numericCleaner0.getCapabilities();
      assertEquals(1.0E-6, numericCleaner0.getCloseToTolerance(), 0.01D);
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinThreshold(), 0.01D);
      assertEquals("first-last", numericCleaner0.getAttributeIndices());
      assertEquals(0.0, numericCleaner0.getCloseToDefault(), 0.01D);
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxThreshold(), 0.01D);
      assertEquals(false, numericCleaner0.getIncludeClass());
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinDefault(), 0.01D);
      assertEquals(0.0, numericCleaner0.getCloseTo(), 0.01D);
      assertEquals("Capabilities: [Nominal attributes, Binary attributes, Unary attributes, Empty nominal attributes, Numeric attributes, Date attributes, String attributes, Relational attributes, Missing values, No class, Nominal class, Binary class, Unary class, Empty nominal class, Numeric class, Date class, String class, Relational class, Missing class values]\nDependencies: []\nmin # Instance: 0\n", capabilities0.toString());
      assertEquals(-1, numericCleaner0.getDecimals());
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxDefault(), 0.01D);
  }

  @Test
  public void test6()  throws Throwable  {
      NumericCleaner numericCleaner0 = new NumericCleaner();
      String string0 = numericCleaner0.decimalsTipText();
      assertEquals(0.0, numericCleaner0.getCloseToDefault(), 0.01D);
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinThreshold(), 0.01D);
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxDefault(), 0.01D);
      assertEquals("The number of decimals to round to, -1 means no rounding at all.", string0);
      assertEquals(0.0, numericCleaner0.getCloseTo(), 0.01D);
      assertEquals(false, numericCleaner0.getIncludeClass());
      assertEquals(-1, numericCleaner0.getDecimals());
      assertEquals("first-last", numericCleaner0.getAttributeIndices());
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinDefault(), 0.01D);
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxThreshold(), 0.01D);
      assertEquals(1.0E-6, numericCleaner0.getCloseToTolerance(), 0.01D);
  }

  @Test
  public void test7()  throws Throwable  {
      NumericCleaner numericCleaner0 = new NumericCleaner();
      try {
        numericCleaner0.determineOutputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      NumericCleaner numericCleaner0 = new NumericCleaner();
      String string0 = numericCleaner0.includeClassTipText();
      assertEquals(0.0, numericCleaner0.getCloseTo(), 0.01D);
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinDefault(), 0.01D);
      assertEquals(-1, numericCleaner0.getDecimals());
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinThreshold(), 0.01D);
      assertEquals("first-last", numericCleaner0.getAttributeIndices());
      assertEquals(0.0, numericCleaner0.getCloseToDefault(), 0.01D);
      assertEquals(1.0E-6, numericCleaner0.getCloseToTolerance(), 0.01D);
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxThreshold(), 0.01D);
      assertEquals(false, numericCleaner0.getIncludeClass());
      assertEquals("If disabled, the class attribute will be always left out of the cleaning process.", string0);
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxDefault(), 0.01D);
  }

  @Test
  public void test9()  throws Throwable  {
      NumericCleaner numericCleaner0 = new NumericCleaner();
      String string0 = numericCleaner0.closeToToleranceTipText();
      assertEquals("The value below which values are considered close to.", string0);
      assertEquals(false, numericCleaner0.getIncludeClass());
      assertEquals("first-last", numericCleaner0.getAttributeIndices());
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinThreshold(), 0.01D);
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxThreshold(), 0.01D);
      assertEquals(-1, numericCleaner0.getDecimals());
      assertEquals(1.0E-6, numericCleaner0.getCloseToTolerance(), 0.01D);
      assertEquals(0.0, numericCleaner0.getCloseToDefault(), 0.01D);
      assertEquals(0.0, numericCleaner0.getCloseTo(), 0.01D);
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxDefault(), 0.01D);
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinDefault(), 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      NumericCleaner numericCleaner0 = new NumericCleaner();
      String string0 = numericCleaner0.getAttributeIndices();
      assertEquals(0.0, numericCleaner0.getCloseToDefault(), 0.01D);
      assertEquals(-1, numericCleaner0.getDecimals());
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinThreshold(), 0.01D);
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinDefault(), 0.01D);
      assertNotNull(string0);
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxThreshold(), 0.01D);
      assertEquals("first-last", string0);
      assertEquals(0.0, numericCleaner0.getCloseTo(), 0.01D);
      assertEquals(false, numericCleaner0.getIncludeClass());
      assertEquals(1.0E-6, numericCleaner0.getCloseToTolerance(), 0.01D);
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxDefault(), 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      NumericCleaner numericCleaner0 = new NumericCleaner();
      String string0 = numericCleaner0.getRevision();
      assertEquals(false, numericCleaner0.getIncludeClass());
      assertEquals(1.0E-6, numericCleaner0.getCloseToTolerance(), 0.01D);
      assertNotNull(string0);
      assertEquals(-1, numericCleaner0.getDecimals());
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxThreshold(), 0.01D);
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinThreshold(), 0.01D);
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxDefault(), 0.01D);
      assertEquals("first-last", numericCleaner0.getAttributeIndices());
      assertEquals(0.0, numericCleaner0.getCloseTo(), 0.01D);
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinDefault(), 0.01D);
      assertEquals(0.0, numericCleaner0.getCloseToDefault(), 0.01D);
      assertEquals("8280", string0);
  }

  @Test
  public void test12()  throws Throwable  {
      NumericCleaner numericCleaner0 = new NumericCleaner();
      String string0 = numericCleaner0.attributeIndicesTipText();
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxDefault(), 0.01D);
      assertEquals(1.0E-6, numericCleaner0.getCloseToTolerance(), 0.01D);
      assertEquals(false, numericCleaner0.getIncludeClass());
      assertEquals("first-last", numericCleaner0.getAttributeIndices());
      assertEquals("The selection of columns to use in the cleansing processs, first and last are valid indices.", string0);
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinDefault(), 0.01D);
      assertEquals(0.0, numericCleaner0.getCloseToDefault(), 0.01D);
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinThreshold(), 0.01D);
      assertEquals(0.0, numericCleaner0.getCloseTo(), 0.01D);
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxThreshold(), 0.01D);
      assertEquals(-1, numericCleaner0.getDecimals());
  }

  @Test
  public void test13()  throws Throwable  {
      NumericCleaner numericCleaner0 = new NumericCleaner();
      String string0 = numericCleaner0.closeToDefaultTipText();
      assertEquals(-1, numericCleaner0.getDecimals());
      assertEquals("first-last", numericCleaner0.getAttributeIndices());
      assertEquals(0.0, numericCleaner0.getCloseToDefault(), 0.01D);
      assertEquals(0.0, numericCleaner0.getCloseTo(), 0.01D);
      assertEquals("The default value to replace values with that are too close.", string0);
      assertEquals(1.0E-6, numericCleaner0.getCloseToTolerance(), 0.01D);
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxThreshold(), 0.01D);
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinDefault(), 0.01D);
      assertEquals(false, numericCleaner0.getIncludeClass());
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinThreshold(), 0.01D);
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxDefault(), 0.01D);
  }

  @Test
  public void test14()  throws Throwable  {
      NumericCleaner numericCleaner0 = new NumericCleaner();
      double double0 = numericCleaner0.getCloseTo();
      assertEquals(false, numericCleaner0.getIncludeClass());
      assertEquals(0.0, numericCleaner0.getCloseToDefault(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxDefault(), 0.01D);
      assertEquals(-1, numericCleaner0.getDecimals());
      assertEquals(1.0E-6, numericCleaner0.getCloseToTolerance(), 0.01D);
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinDefault(), 0.01D);
      assertEquals("first-last", numericCleaner0.getAttributeIndices());
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxThreshold(), 0.01D);
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinThreshold(), 0.01D);
  }

  @Test
  public void test15()  throws Throwable  {
      NumericCleaner numericCleaner0 = new NumericCleaner();
      double double0 = numericCleaner0.getCloseToTolerance();
      assertEquals(false, numericCleaner0.getIncludeClass());
      assertEquals("first-last", numericCleaner0.getAttributeIndices());
      assertEquals(0.0, numericCleaner0.getCloseTo(), 0.01D);
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinThreshold(), 0.01D);
      assertEquals(-1, numericCleaner0.getDecimals());
      assertEquals(1.0E-6, double0, 0.01D);
      assertEquals(0.0, numericCleaner0.getCloseToDefault(), 0.01D);
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxThreshold(), 0.01D);
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxDefault(), 0.01D);
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinDefault(), 0.01D);
  }

  @Test
  public void test16()  throws Throwable  {
      NumericCleaner numericCleaner0 = new NumericCleaner();
      double double0 = numericCleaner0.getMinThreshold();
      assertEquals(0.0, numericCleaner0.getCloseToDefault(), 0.01D);
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxThreshold(), 0.01D);
      assertEquals((-1.7976931348623157E308), double0, 0.01D);
      assertEquals(0.0, numericCleaner0.getCloseTo(), 0.01D);
      assertEquals(-1, numericCleaner0.getDecimals());
      assertEquals(false, numericCleaner0.getIncludeClass());
      assertEquals("first-last", numericCleaner0.getAttributeIndices());
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinDefault(), 0.01D);
      assertEquals(1.0E-6, numericCleaner0.getCloseToTolerance(), 0.01D);
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxDefault(), 0.01D);
  }

  @Test
  public void test17()  throws Throwable  {
      NumericCleaner numericCleaner0 = new NumericCleaner();
      String string0 = numericCleaner0.maxDefaultTipText();
      assertEquals(-1, numericCleaner0.getDecimals());
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinThreshold(), 0.01D);
      assertEquals(0.0, numericCleaner0.getCloseTo(), 0.01D);
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinDefault(), 0.01D);
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxThreshold(), 0.01D);
      assertEquals(1.0E-6, numericCleaner0.getCloseToTolerance(), 0.01D);
      assertEquals("The default value to replace values that are above the maximum threshold.", string0);
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxDefault(), 0.01D);
      assertEquals(false, numericCleaner0.getIncludeClass());
      assertEquals("first-last", numericCleaner0.getAttributeIndices());
      assertEquals(0.0, numericCleaner0.getCloseToDefault(), 0.01D);
  }

  @Test
  public void test18()  throws Throwable  {
      NumericCleaner numericCleaner0 = new NumericCleaner();
      String string0 = numericCleaner0.closeToTipText();
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinThreshold(), 0.01D);
      assertEquals("The number values are checked for whether they are too close to and get replaced by a default.", string0);
      assertEquals(0.0, numericCleaner0.getCloseTo(), 0.01D);
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinDefault(), 0.01D);
      assertEquals(0.0, numericCleaner0.getCloseToDefault(), 0.01D);
      assertEquals(-1, numericCleaner0.getDecimals());
      assertEquals(1.0E-6, numericCleaner0.getCloseToTolerance(), 0.01D);
      assertEquals("first-last", numericCleaner0.getAttributeIndices());
      assertEquals(false, numericCleaner0.getIncludeClass());
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxThreshold(), 0.01D);
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxDefault(), 0.01D);
  }

  @Test
  public void test19()  throws Throwable  {
      NumericCleaner numericCleaner0 = new NumericCleaner();
      numericCleaner0.getInvertSelection();
      assertEquals(0.0, numericCleaner0.getCloseTo(), 0.01D);
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxThreshold(), 0.01D);
      assertEquals(false, numericCleaner0.getIncludeClass());
      assertEquals(-1, numericCleaner0.getDecimals());
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinThreshold(), 0.01D);
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxDefault(), 0.01D);
      assertEquals("first-last", numericCleaner0.getAttributeIndices());
      assertEquals(0.0, numericCleaner0.getCloseToDefault(), 0.01D);
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinDefault(), 0.01D);
      assertEquals(1.0E-6, numericCleaner0.getCloseToTolerance(), 0.01D);
  }

  @Test
  public void test20()  throws Throwable  {
      NumericCleaner numericCleaner0 = new NumericCleaner();
      String string0 = numericCleaner0.minThresholdTipText();
      assertEquals(false, numericCleaner0.getIncludeClass());
      assertEquals(-1, numericCleaner0.getDecimals());
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinDefault(), 0.01D);
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinThreshold(), 0.01D);
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxDefault(), 0.01D);
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxThreshold(), 0.01D);
      assertEquals("The minimum threshold below values are replaced by a default.", string0);
      assertEquals(0.0, numericCleaner0.getCloseToDefault(), 0.01D);
      assertEquals(1.0E-6, numericCleaner0.getCloseToTolerance(), 0.01D);
      assertEquals(0.0, numericCleaner0.getCloseTo(), 0.01D);
      assertEquals("first-last", numericCleaner0.getAttributeIndices());
  }

  @Test
  public void test21()  throws Throwable  {
      NumericCleaner numericCleaner0 = new NumericCleaner();
      double double0 = numericCleaner0.getCloseToDefault();
      assertEquals(0.0, numericCleaner0.getCloseTo(), 0.01D);
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxThreshold(), 0.01D);
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxDefault(), 0.01D);
      assertEquals(1.0E-6, numericCleaner0.getCloseToTolerance(), 0.01D);
      assertEquals(-1, numericCleaner0.getDecimals());
      assertEquals("first-last", numericCleaner0.getAttributeIndices());
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinDefault(), 0.01D);
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinThreshold(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(false, numericCleaner0.getIncludeClass());
  }

  @Test
  public void test22()  throws Throwable  {
      NumericCleaner numericCleaner0 = new NumericCleaner();
      String string0 = numericCleaner0.globalInfo();
      assertEquals(0.0, numericCleaner0.getCloseTo(), 0.01D);
      assertEquals(0.0, numericCleaner0.getCloseToDefault(), 0.01D);
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinDefault(), 0.01D);
      assertEquals("first-last", numericCleaner0.getAttributeIndices());
      assertEquals(-1, numericCleaner0.getDecimals());
      assertEquals("A filter that 'cleanses' the numeric data from values that are too small, too big or very close to a certain value (e.g., 0) and sets these values to a pre-defined default.", string0);
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxThreshold(), 0.01D);
      assertEquals(false, numericCleaner0.getIncludeClass());
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxDefault(), 0.01D);
      assertEquals(1.0E-6, numericCleaner0.getCloseToTolerance(), 0.01D);
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinThreshold(), 0.01D);
  }

  @Test
  public void test23()  throws Throwable  {
      NumericCleaner numericCleaner0 = new NumericCleaner();
      double double0 = numericCleaner0.getMinDefault();
      assertEquals(0.0, numericCleaner0.getCloseToDefault(), 0.01D);
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxDefault(), 0.01D);
      assertEquals(1.0E-6, numericCleaner0.getCloseToTolerance(), 0.01D);
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxThreshold(), 0.01D);
      assertEquals((-1.7976931348623157E308), double0, 0.01D);
      assertEquals(false, numericCleaner0.getIncludeClass());
      assertEquals(-1, numericCleaner0.getDecimals());
      assertEquals("first-last", numericCleaner0.getAttributeIndices());
      assertEquals(0.0, numericCleaner0.getCloseTo(), 0.01D);
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinThreshold(), 0.01D);
  }

  @Test
  public void test24()  throws Throwable  {
      NumericCleaner numericCleaner0 = new NumericCleaner();
      String string0 = numericCleaner0.maxThresholdTipText();
      assertEquals(-1, numericCleaner0.getDecimals());
      assertEquals(0.0, numericCleaner0.getCloseToDefault(), 0.01D);
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinThreshold(), 0.01D);
      assertEquals(false, numericCleaner0.getIncludeClass());
      assertEquals(1.0E-6, numericCleaner0.getCloseToTolerance(), 0.01D);
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxDefault(), 0.01D);
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinDefault(), 0.01D);
      assertEquals(0.0, numericCleaner0.getCloseTo(), 0.01D);
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxThreshold(), 0.01D);
      assertEquals("first-last", numericCleaner0.getAttributeIndices());
      assertEquals("The maximum threshold above values are replaced by a default.", string0);
  }

  @Test
  public void test25()  throws Throwable  {
      NumericCleaner numericCleaner0 = new NumericCleaner();
      double double0 = numericCleaner0.getMaxThreshold();
      assertEquals(0.0, numericCleaner0.getCloseTo(), 0.01D);
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinThreshold(), 0.01D);
      assertEquals(1.0E-6, numericCleaner0.getCloseToTolerance(), 0.01D);
      assertEquals("first-last", numericCleaner0.getAttributeIndices());
      assertEquals(false, numericCleaner0.getIncludeClass());
      assertEquals(1.7976931348623157E308, double0, 0.01D);
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxDefault(), 0.01D);
      assertEquals(0.0, numericCleaner0.getCloseToDefault(), 0.01D);
      assertEquals(-1, numericCleaner0.getDecimals());
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinDefault(), 0.01D);
  }

  @Test
  public void test26()  throws Throwable  {
      NumericCleaner numericCleaner0 = new NumericCleaner();
      numericCleaner0.listOptions();
      assertEquals(false, numericCleaner0.getIncludeClass());
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxThreshold(), 0.01D);
      assertEquals(-1, numericCleaner0.getDecimals());
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinThreshold(), 0.01D);
      assertEquals(0.0, numericCleaner0.getCloseTo(), 0.01D);
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxDefault(), 0.01D);
      assertEquals("first-last", numericCleaner0.getAttributeIndices());
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinDefault(), 0.01D);
      assertEquals(0.0, numericCleaner0.getCloseToDefault(), 0.01D);
      assertEquals(1.0E-6, numericCleaner0.getCloseToTolerance(), 0.01D);
  }

  @Test
  public void test27()  throws Throwable  {
      NumericCleaner numericCleaner0 = new NumericCleaner();
      numericCleaner0.setDebug(true);
      String[] stringArray0 = numericCleaner0.getOptions();
      assertEquals(0.0, numericCleaner0.getCloseToDefault(), 0.01D);
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxThreshold(), 0.01D);
      assertEquals("first-last", numericCleaner0.getAttributeIndices());
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinDefault(), 0.01D);
      assertEquals(-1, numericCleaner0.getDecimals());
      assertEquals(1.0E-6, numericCleaner0.getCloseToTolerance(), 0.01D);
      assertEquals(0.0, numericCleaner0.getCloseTo(), 0.01D);
      assertNotNull(stringArray0);
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinThreshold(), 0.01D);
      assertEquals(false, numericCleaner0.getIncludeClass());
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxDefault(), 0.01D);
  }

  @Test
  public void test28()  throws Throwable  {
      NumericCleaner numericCleaner0 = new NumericCleaner();
      numericCleaner0.setInvertSelection(true);
      numericCleaner0.getOptions();
      assertEquals(true, numericCleaner0.getInvertSelection());
      assertEquals(-1, numericCleaner0.getDecimals());
  }

  @Test
  public void test29()  throws Throwable  {
      NumericCleaner numericCleaner0 = new NumericCleaner();
      assertEquals(false, numericCleaner0.getIncludeClass());
      
      numericCleaner0.setIncludeClass(true);
      numericCleaner0.getOptions();
      assertEquals(true, numericCleaner0.getIncludeClass());
      assertEquals(-1, numericCleaner0.getDecimals());
  }

  @Test
  public void test30()  throws Throwable  {
      NumericCleaner numericCleaner0 = new NumericCleaner();
      String[] stringArray0 = numericCleaner0.getOptions();
      assertNotNull(stringArray0);
      assertEquals("first-last", numericCleaner0.getAttributeIndices());
      
      numericCleaner0.setOptions(stringArray0);
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinDefault(), 0.01D);
      assertEquals(0.0, numericCleaner0.getCloseToDefault(), 0.01D);
      assertEquals(false, numericCleaner0.getInvertSelection());
      assertEquals(false, numericCleaner0.getIncludeClass());
      assertEquals(0.0, numericCleaner0.getCloseTo(), 0.01D);
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxDefault(), 0.01D);
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxThreshold(), 0.01D);
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinThreshold(), 0.01D);
      assertEquals(1.0E-6, numericCleaner0.getCloseToTolerance(), 0.01D);
      assertEquals(-1, numericCleaner0.getDecimals());
  }

  @Test
  public void test31()  throws Throwable  {
      NumericCleaner numericCleaner0 = new NumericCleaner();
      double[] doubleArray0 = new double[5];
      int[] intArray0 = new int[18];
      SparseInstance sparseInstance0 = new SparseInstance(1.0, doubleArray0, intArray0, (-105));
      SparseInstance sparseInstance1 = (SparseInstance)numericCleaner0.process((Instance) sparseInstance0);
      assertEquals(0.0, numericCleaner0.getCloseTo(), 0.01D);
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinDefault(), 0.01D);
      assertEquals("first-last", numericCleaner0.getAttributeIndices());
      assertNotNull(sparseInstance1);
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxThreshold(), 0.01D);
      assertEquals((-1.7976931348623157E308), numericCleaner0.getMinThreshold(), 0.01D);
      assertEquals(-1, numericCleaner0.getDecimals());
      assertEquals(1.0E-6, numericCleaner0.getCloseToTolerance(), 0.01D);
      assertEquals(false, numericCleaner0.getIncludeClass());
      assertEquals(1.7976931348623157E308, numericCleaner0.getMaxDefault(), 0.01D);
      assertEquals(0.0, numericCleaner0.getCloseToDefault(), 0.01D);
  }

  @Test
  public void test32()  throws Throwable  {
      NumericCleaner numericCleaner0 = new NumericCleaner();
      numericCleaner0.setDecimals(1605);
      double[] doubleArray0 = new double[4];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((double) 1605, doubleArray0);
      try {
        numericCleaner0.process((Instance) binarySparseInstance0);
        fail("Expecting exception: UnassignedDatasetException");
      } catch(UnassignedDatasetException e) {
        /*
         * DenseInstance doesn't have access to a dataset!
         */
      }
  }
}
