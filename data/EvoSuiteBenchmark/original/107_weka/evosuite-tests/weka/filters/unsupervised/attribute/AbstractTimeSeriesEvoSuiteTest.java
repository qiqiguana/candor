/*
 * This file was automatically generated by EvoSuite
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.TimeSeriesDelta;

@RunWith(EvoSuiteRunner.class)
public class AbstractTimeSeriesEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      TimeSeriesDelta timeSeriesDelta0 = new TimeSeriesDelta();
      int[] intArray0 = new int[5];
      timeSeriesDelta0.setAttributeIndicesArray(intArray0);
      assertEquals("1,1,1,1,1", timeSeriesDelta0.getAttributeIndices());
  }

  @Test
  public void test1()  throws Throwable  {
      TimeSeriesDelta timeSeriesDelta0 = new TimeSeriesDelta();
      String string0 = timeSeriesDelta0.fillWithMissingTipText();
      assertEquals("For instances at the beginning or end of the dataset where the translated values are not known, use missing values (default is to remove those instances)", string0);
      assertEquals(-1, timeSeriesDelta0.getInstanceRange());
      assertEquals(true, timeSeriesDelta0.getFillWithMissing());
  }

  @Test
  public void test2()  throws Throwable  {
      TimeSeriesDelta timeSeriesDelta0 = new TimeSeriesDelta();
      timeSeriesDelta0.setInvertSelection(true);
      String[] stringArray0 = timeSeriesDelta0.getOptions();
      assertNotNull(stringArray0);
      assertEquals(true, timeSeriesDelta0.getInvertSelection());
      assertEquals(-1, timeSeriesDelta0.getInstanceRange());
  }

  @Test
  public void test3()  throws Throwable  {
      TimeSeriesDelta timeSeriesDelta0 = new TimeSeriesDelta();
      assertEquals(true, timeSeriesDelta0.getFillWithMissing());
      
      timeSeriesDelta0.setFillWithMissing(false);
      timeSeriesDelta0.getOptions();
      assertEquals(false, timeSeriesDelta0.getFillWithMissing());
  }

  @Test
  public void test4()  throws Throwable  {
      TimeSeriesDelta timeSeriesDelta0 = new TimeSeriesDelta();
      String string0 = timeSeriesDelta0.instanceRangeTipText();
      assertEquals(true, timeSeriesDelta0.getFillWithMissing());
      assertEquals(-1, timeSeriesDelta0.getInstanceRange());
      assertEquals("The number of instances forward/backward to merge values between. A negative number indicates taking values from a past instance.", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      TimeSeriesDelta timeSeriesDelta0 = new TimeSeriesDelta();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Invert matching sense. ie calculate for all non-specified columns.";
      stringArray0[1] = "Invert matching sense. ie calculate for all non-specified columns.";
      Filter.runFilter((Filter) timeSeriesDelta0, stringArray0);
      assertEquals(false, timeSeriesDelta0.getInvertSelection());
      assertEquals(-1, timeSeriesDelta0.getInstanceRange());
      assertEquals(true, timeSeriesDelta0.getFillWithMissing());
  }

  @Test
  public void test6()  throws Throwable  {
      TimeSeriesDelta timeSeriesDelta0 = new TimeSeriesDelta();
      String string0 = timeSeriesDelta0.attributeIndicesTipText();
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string0);
      assertEquals(-1, timeSeriesDelta0.getInstanceRange());
      assertEquals(true, timeSeriesDelta0.getFillWithMissing());
  }

  @Test
  public void test7()  throws Throwable  {
      TimeSeriesDelta timeSeriesDelta0 = new TimeSeriesDelta();
      String string0 = timeSeriesDelta0.invertSelectionTipText();
      assertEquals(-1, timeSeriesDelta0.getInstanceRange());
      assertEquals("Invert matching sense. ie calculate for all non-specified columns.", string0);
      assertEquals(true, timeSeriesDelta0.getFillWithMissing());
  }

  @Test
  public void test8()  throws Throwable  {
      TimeSeriesDelta timeSeriesDelta0 = new TimeSeriesDelta();
      timeSeriesDelta0.setAttributeIndices("Invert matching sense. ie calculate for all non-specified columns.");
      String[] stringArray0 = timeSeriesDelta0.getOptions();
      assertNotNull(stringArray0);
      
      timeSeriesDelta0.setOptions(stringArray0);
      assertEquals("Invert matching sense. ie calculate for all non-specified columns.", timeSeriesDelta0.getAttributeIndices());
  }

  @Test
  public void test9()  throws Throwable  {
      TimeSeriesDelta timeSeriesDelta0 = new TimeSeriesDelta();
      try {
        timeSeriesDelta0.input((Instance) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * No input instance format defined
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      TimeSeriesDelta timeSeriesDelta0 = new TimeSeriesDelta();
      // Undeclared exception!
      try {
        timeSeriesDelta0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * No input instance format defined
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      TimeSeriesDelta timeSeriesDelta0 = new TimeSeriesDelta();
      timeSeriesDelta0.resetHistory();
      timeSeriesDelta0.resetHistory();
      assertEquals(-1, timeSeriesDelta0.getInstanceRange());
      assertEquals(true, timeSeriesDelta0.getFillWithMissing());
  }

  @Test
  public void test12()  throws Throwable  {
      TimeSeriesDelta timeSeriesDelta0 = new TimeSeriesDelta();
      timeSeriesDelta0.resetHistory();
      double[] doubleArray0 = new double[5];
      DenseInstance denseInstance0 = new DenseInstance((-293.62398266213404), doubleArray0);
      // Undeclared exception!
      try {
        timeSeriesDelta0.historyInput((Instance) denseInstance0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      TimeSeriesDelta timeSeriesDelta0 = new TimeSeriesDelta();
      timeSeriesDelta0.resetHistory();
      double[] doubleArray0 = new double[5];
      DenseInstance denseInstance0 = new DenseInstance((-293.62398266213404), doubleArray0);
      timeSeriesDelta0.setInstanceRange(1784);
      timeSeriesDelta0.historyInput((Instance) denseInstance0);
      assertEquals(1784, timeSeriesDelta0.getInstanceRange());
      assertEquals(true, timeSeriesDelta0.getFillWithMissing());
  }
}
