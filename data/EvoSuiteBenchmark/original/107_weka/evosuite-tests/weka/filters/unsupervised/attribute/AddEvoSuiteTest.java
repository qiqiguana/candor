/*
 * This file was automatically generated by EvoSuite
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import weka.core.BinarySparseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SelectedTag;
import weka.core.Tag;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Add;

@RunWith(EvoSuiteRunner.class)
public class AddEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Add add0 = new Add();
      add0.setDateFormat("The list of value labels (nominal attribute creation only).  The list must be comma-separated, eg: \"red,green,blue\". If this is empty, the created attribute will be numeric.");
      assertEquals("unnamed", add0.getAttributeName());
      assertEquals("last", add0.getAttributeIndex());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss", add0.getDateFormat());
  }

  @Test
  public void test1()  throws Throwable  {
      Add add0 = new Add();
      String string0 = add0.attributeTypeTipText();
      assertEquals("unnamed", add0.getAttributeName());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss", add0.getDateFormat());
      assertEquals("Defines the type of the attribute to generate.", string0);
      assertEquals("last", add0.getAttributeIndex());
  }

  @Test
  public void test2()  throws Throwable  {
      Add add0 = new Add();
      String string0 = add0.attributeNameTipText();
      assertEquals("unnamed", add0.getAttributeName());
      assertEquals("Set the new attribute's name.", string0);
      assertEquals("last", add0.getAttributeIndex());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss", add0.getDateFormat());
  }

  @Test
  public void test3()  throws Throwable  {
      Add add0 = new Add();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "r13h";
      stringArray0[1] = "r13h";
      stringArray0[2] = "r13h";
      stringArray0[3] = "r13h";
      stringArray0[4] = "r13h";
      stringArray0[5] = "r13h";
      Filter.runFilter((Filter) add0, stringArray0);
      assertEquals("unnamed", add0.getAttributeName());
      assertEquals("last", add0.getAttributeIndex());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss", add0.getDateFormat());
  }

  @Test
  public void test4()  throws Throwable  {
      Add add0 = new Add();
      add0.setNominalLabels("The list of value labels (nominal attribute creation only).  The list must be comma-separated, eg: \"red,green,blue\". If this is empty, the created attribute will be numeric.");
      String[] stringArray0 = add0.getOptions();
      assertNotNull(stringArray0);
      
      add0.setOptions(stringArray0);
      assertEquals("The list of value labels (nominal attribute creation only).  The list must be comma-separated,eg: \"red,green,blue\". If this is empty,the created attribute will be numeric.", add0.getNominalLabels());
  }

  @Test
  public void test5()  throws Throwable  {
      Add add0 = new Add();
      String string0 = add0.dateFormatTipText();
      assertEquals("The format of the date values (see ISO-8601).", string0);
      assertEquals("yyyy-MM-dd'T'HH:mm:ss", add0.getDateFormat());
      assertEquals("unnamed", add0.getAttributeName());
      assertEquals("last", add0.getAttributeIndex());
  }

  @Test
  public void test6()  throws Throwable  {
      Add add0 = new Add();
      String string0 = add0.attributeIndexTipText();
      assertEquals("last", add0.getAttributeIndex());
      assertEquals("The position (starting from 1) where the attribute will be inserted (first and last are valid indices).", string0);
      assertEquals("unnamed", add0.getAttributeName());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss", add0.getDateFormat());
  }

  @Test
  public void test7()  throws Throwable  {
      Add add0 = new Add();
      String string0 = add0.getRevision();
      assertEquals("unnamed", add0.getAttributeName());
      assertNotNull(string0);
      assertEquals("8034", string0);
      assertEquals("yyyy-MM-dd'T'HH:mm:ss", add0.getDateFormat());
      assertEquals("last", add0.getAttributeIndex());
  }

  @Test
  public void test8()  throws Throwable  {
      Add add0 = new Add();
      String string0 = add0.nominalLabelsTipText();
      assertEquals("The list of value labels (nominal attribute creation only).  The list must be comma-separated, eg: \"red,green,blue\". If this is empty, the created attribute will be numeric.", string0);
      assertEquals("yyyy-MM-dd'T'HH:mm:ss", add0.getDateFormat());
      assertEquals("last", add0.getAttributeIndex());
      assertEquals("unnamed", add0.getAttributeName());
  }

  @Test
  public void test9()  throws Throwable  {
      Add add0 = new Add();
      String string0 = add0.globalInfo();
      assertEquals("unnamed", add0.getAttributeName());
      assertEquals("An instance filter that adds a new attribute to the dataset. The new attribute will contain all missing values.", string0);
      assertEquals("last", add0.getAttributeIndex());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss", add0.getDateFormat());
  }

  @Test
  public void test10()  throws Throwable  {
      Add add0 = new Add();
      try {
        add0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Add add0 = new Add();
      String string0 = add0.getDateFormat();
      assertEquals("unnamed", add0.getAttributeName());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss", string0);
      assertNotNull(string0);
      assertEquals("last", add0.getAttributeIndex());
  }

  @Test
  public void test12()  throws Throwable  {
      Add add0 = new Add();
      String[] stringArray0 = add0.getOptions();
      assertNotNull(stringArray0);
      assertEquals("unnamed", add0.getAttributeName());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss", add0.getDateFormat());
      assertEquals("last", add0.getAttributeIndex());
  }

  @Test
  public void test13()  throws Throwable  {
      Add add0 = new Add();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(82);
      // Undeclared exception!
      try {
        add0.input((Instance) binarySparseInstance0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * No input instance format defined
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      Add add0 = new Add();
      add0.setNominalLabels("");
      assertEquals("unnamed", add0.getAttributeName());
      assertEquals("last", add0.getAttributeIndex());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss", add0.getDateFormat());
  }

  @Test
  public void test15()  throws Throwable  {
      Add add0 = new Add();
      Tag[] tagArray0 = new Tag[3];
      Tag tag0 = new Tag((-648), "N$J\u0000\nQ`zWY%A", "", false);
      tagArray0[0] = tag0;
      Tag tag1 = new Tag();
      tagArray0[1] = tag1;
      Tag tag2 = new Tag((-1), "", "", false);
      tagArray0[2] = tag2;
      SelectedTag selectedTag0 = new SelectedTag((-648), tagArray0);
      add0.setAttributeType(selectedTag0);
      assertEquals("unnamed", add0.getAttributeName());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss", add0.getDateFormat());
      assertEquals("last", add0.getAttributeIndex());
  }
}
