/*
 * This file was automatically generated by EvoSuite
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import weka.core.BinarySparseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.InterquartileRange;

@RunWith(EvoSuiteRunner.class)
public class InterquartileRangeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      String string0 = interquartileRange0.outputOffsetMultiplierTipText();
      assertEquals("first-last", interquartileRange0.getAttributeIndices());
      assertEquals(false, interquartileRange0.getDetectionPerAttribute());
      assertEquals(false, interquartileRange0.getOutputOffsetMultiplier());
      assertEquals(false, interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01D);
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      int[] intArray0 = new int[7];
      interquartileRange0.setAttributeIndicesArray(intArray0);
      assertEquals("1,1,1,1,1,1,1", interquartileRange0.getAttributeIndices());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01D);
  }

  @Test
  public void test2()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "The factor for determining the thresholds for extreme values.";
      stringArray0[1] = "@<: ";
      stringArray0[2] = "The factor for determining the thresholds for extreme values.";
      try {
        Filter.filterFile((Filter) interquartileRange0, stringArray0);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * 
         * Illegal options: The factor for determining the thresholds for extreme values. @<:  The factor for determining the thresholds for extreme values. 
         * Filter options:
         * 
         * -D
         * \tTurns on output of debugging information.
         * -R <col1,col2-col4,...>
         * \tSpecifies list of columns to base outlier/extreme value detection
         * \ton. If an instance is considered in at least one of those
         * \tattributes an outlier/extreme value, it is tagged accordingly.
         *  'first' and 'last' are valid indexes.
         * \t(default none)
         * -O <num>
         * \tThe factor for outlier detection.
         * \t(default: 3)
         * -E <num>
         * \tThe factor for extreme values detection.
         * \t(default: 2*Outlier Factor)
         * -E-as-O
         * \tTags extreme values also as outliers.
         * \t(default: off)
         * -P
         * \tGenerates Outlier/ExtremeValue pair for each numeric attribute in
         * \tthe range, not just a single indicator pair for all the attributes.
         * \t(default: off)
         * -M
         * \tGenerates an additional attribute 'Offset' per Outlier/ExtremeValue
         * \tpair that contains the multiplier that the value is off the median.
         * \t   value = median + 'multiplier' * IQR
         * Note: implicitely sets '-P'.\t(default: off)
         * 
         * General options:
         * 
         * -h
         * \tGet help on available options.
         * \t(use -b -h for help on batch mode.)
         * -i <file>
         * \tThe name of the file containing input instances.
         * \tIf not supplied then instances will be read from stdin.
         * -o <file>
         * \tThe name of the file output instances will be written to.
         * \tIf not supplied then instances will be written to stdout.
         * -c <class index>
         * \tThe number of the attribute to use as the class.
         * \t\"first\" and \"last\" are also valid entries.
         * \tIf not supplied then no class is assigned.
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      String string0 = interquartileRange0.detectionPerAttributeTipText();
      assertEquals(false, interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", string0);
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01D);
      assertEquals(false, interquartileRange0.getDetectionPerAttribute());
      assertEquals("first-last", interquartileRange0.getAttributeIndices());
      assertEquals(false, interquartileRange0.getExtremeValuesAsOutliers());
  }

  @Test
  public void test4()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      String string0 = interquartileRange0.getRevision();
      assertEquals(false, interquartileRange0.getOutputOffsetMultiplier());
      assertEquals(false, interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("8040", string0);
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01D);
      assertEquals(false, interquartileRange0.getDetectionPerAttribute());
      assertNotNull(string0);
      assertEquals("first-last", interquartileRange0.getAttributeIndices());
  }

  @Test
  public void test5()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      String string0 = interquartileRange0.globalInfo();
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01D);
      assertEquals(false, interquartileRange0.getDetectionPerAttribute());
      assertEquals("first-last", interquartileRange0.getAttributeIndices());
      assertEquals(false, interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", string0);
      assertEquals(false, interquartileRange0.getOutputOffsetMultiplier());
  }

  @Test
  public void test6()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      int[] intArray0 = new int[4];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, 0);
      // Undeclared exception!
      try {
        interquartileRange0.calculateMultiplier((Instance) binarySparseInstance0, 1871);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      String string0 = interquartileRange0.attributeIndicesTipText();
      assertEquals(false, interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01D);
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", string0);
      assertEquals("first-last", interquartileRange0.getAttributeIndices());
      assertEquals(false, interquartileRange0.getOutputOffsetMultiplier());
      assertEquals(false, interquartileRange0.getDetectionPerAttribute());
  }

  @Test
  public void test8()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      String string0 = interquartileRange0.extremeValuesFactorTipText();
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01D);
      assertEquals(false, interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("The factor for determining the thresholds for extreme values.", string0);
      assertEquals("first-last", interquartileRange0.getAttributeIndices());
      assertEquals(false, interquartileRange0.getDetectionPerAttribute());
      assertEquals(false, interquartileRange0.getExtremeValuesAsOutliers());
  }

  @Test
  public void test9()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      String string0 = interquartileRange0.extremeValuesAsOutliersTipText();
      assertEquals(false, interquartileRange0.getOutputOffsetMultiplier());
      assertEquals(false, interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals(false, interquartileRange0.getDetectionPerAttribute());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01D);
      assertEquals("first-last", interquartileRange0.getAttributeIndices());
      assertEquals("Whether to tag extreme values also as outliers.", string0);
  }

  @Test
  public void test10()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      // Undeclared exception!
      try {
        interquartileRange0.getCapabilities((Instances) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      String string0 = interquartileRange0.outlierFactorTipText();
      assertEquals("first-last", interquartileRange0.getAttributeIndices());
      assertEquals(false, interquartileRange0.getDetectionPerAttribute());
      assertEquals("The factor for determining the thresholds for outliers.", string0);
      assertEquals(false, interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals(false, interquartileRange0.getOutputOffsetMultiplier());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      String[] stringArray0 = interquartileRange0.getOptions();
      assertEquals("first-last", interquartileRange0.getAttributeIndices());
      assertNotNull(stringArray0);
      
      interquartileRange0.setOptions(stringArray0);
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01D);
      assertEquals(false, interquartileRange0.getDetectionPerAttribute());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01D);
      assertEquals(false, interquartileRange0.getExtremeValuesAsOutliers());
  }

  @Test
  public void test13()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      interquartileRange0.setDebug(true);
      String[] stringArray0 = interquartileRange0.getOptions();
      assertEquals("first-last", interquartileRange0.getAttributeIndices());
      assertNotNull(stringArray0);
      assertEquals(false, interquartileRange0.getDetectionPerAttribute());
      assertEquals(false, interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals(false, interquartileRange0.getOutputOffsetMultiplier());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01D);
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01D);
  }

  @Test
  public void test14()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals("first-last", interquartileRange0.getAttributeIndices());
      
      interquartileRange0.setAttributeIndices("");
      String[] stringArray0 = interquartileRange0.getOptions();
      assertEquals("", interquartileRange0.getAttributeIndices());
      assertNotNull(stringArray0);
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01D);
  }

  @Test
  public void test15()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals(false, interquartileRange0.getExtremeValuesAsOutliers());
      
      interquartileRange0.setExtremeValuesAsOutliers(true);
      interquartileRange0.getOptions();
      assertEquals(true, interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01D);
  }

  @Test
  public void test16()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals(false, interquartileRange0.getDetectionPerAttribute());
      
      interquartileRange0.setDetectionPerAttribute(true);
      interquartileRange0.getOptions();
      assertEquals(true, interquartileRange0.getDetectionPerAttribute());
      assertEquals(false, interquartileRange0.getOutputOffsetMultiplier());
  }

  @Test
  public void test17()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      interquartileRange0.setOutlierFactor(914.447365462259);
      assertEquals(false, interquartileRange0.getDetectionPerAttribute());
      assertEquals("first-last", interquartileRange0.getAttributeIndices());
      assertEquals(false, interquartileRange0.getOutputOffsetMultiplier());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01D);
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01D);
      assertEquals(false, interquartileRange0.getExtremeValuesAsOutliers());
  }

  @Test
  public void test18()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      interquartileRange0.setExtremeValuesFactor(0.0);
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01D);
      assertEquals(false, interquartileRange0.getDetectionPerAttribute());
      assertEquals(false, interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals(false, interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("first-last", interquartileRange0.getAttributeIndices());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01D);
  }

  @Test
  public void test19()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      interquartileRange0.setOutputOffsetMultiplier(true);
      assertEquals(true, interquartileRange0.getDetectionPerAttribute());
      assertEquals(true, interquartileRange0.getOutputOffsetMultiplier());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01D);
  }

  @Test
  public void test20()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      InterquartileRange.ValueType interquartileRange_ValueType0 = InterquartileRange.ValueType.UPPER_EXTREME_VALUES;
      interquartileRange0.getValues(interquartileRange_ValueType0);
      assertEquals(false, interquartileRange0.getDetectionPerAttribute());
      assertEquals(false, interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("first-last", interquartileRange0.getAttributeIndices());
      assertEquals(false, interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01D);
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01D);
  }

  @Test
  public void test21()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      InterquartileRange.ValueType interquartileRange_ValueType0 = InterquartileRange.ValueType.IQR;
      interquartileRange0.getValues(interquartileRange_ValueType0);
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01D);
      assertEquals(false, interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("first-last", interquartileRange0.getAttributeIndices());
      assertEquals(false, interquartileRange0.getOutputOffsetMultiplier());
      assertEquals(false, interquartileRange0.getDetectionPerAttribute());
  }

  @Test
  public void test22()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      InterquartileRange.ValueType interquartileRange_ValueType0 = InterquartileRange.ValueType.UPPER_OUTLIER_VALUES;
      interquartileRange0.getValues(interquartileRange_ValueType0);
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01D);
      assertEquals(false, interquartileRange0.getOutputOffsetMultiplier());
      assertEquals(false, interquartileRange0.getDetectionPerAttribute());
      assertEquals("first-last", interquartileRange0.getAttributeIndices());
      assertEquals(false, interquartileRange0.getExtremeValuesAsOutliers());
  }

  @Test
  public void test23()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      InterquartileRange.ValueType interquartileRange_ValueType0 = InterquartileRange.ValueType.LOWER_OUTLIER_VALUES;
      interquartileRange0.getValues(interquartileRange_ValueType0);
      assertEquals(false, interquartileRange0.getDetectionPerAttribute());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01D);
      assertEquals(false, interquartileRange0.getOutputOffsetMultiplier());
      assertEquals(false, interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("first-last", interquartileRange0.getAttributeIndices());
  }

  @Test
  public void test24()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      InterquartileRange.ValueType interquartileRange_ValueType0 = InterquartileRange.ValueType.LOWER_EXTREME_VALUES;
      interquartileRange0.getValues(interquartileRange_ValueType0);
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01D);
      assertEquals(false, interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("first-last", interquartileRange0.getAttributeIndices());
      assertEquals(false, interquartileRange0.getDetectionPerAttribute());
      assertEquals(false, interquartileRange0.getExtremeValuesAsOutliers());
  }

  @Test
  public void test25()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      InterquartileRange.ValueType interquartileRange_ValueType0 = InterquartileRange.ValueType.MEDIAN;
      interquartileRange0.getValues(interquartileRange_ValueType0);
      assertEquals(false, interquartileRange0.getDetectionPerAttribute());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01D);
      assertEquals(false, interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("first-last", interquartileRange0.getAttributeIndices());
      assertEquals(false, interquartileRange0.getExtremeValuesAsOutliers());
  }

  @Test
  public void test26()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      try {
        interquartileRange0.process((Instances) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
