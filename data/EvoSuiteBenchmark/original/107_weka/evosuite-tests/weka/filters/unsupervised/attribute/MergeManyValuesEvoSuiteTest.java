/*
 * This file was automatically generated by EvoSuite
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.MergeManyValues;

@RunWith(EvoSuiteRunner.class)
public class MergeManyValuesEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      MergeManyValues mergeManyValues0 = new MergeManyValues();
      try {
        mergeManyValues0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      MergeManyValues mergeManyValues0 = new MergeManyValues();
      String[] stringArray0 = mergeManyValues0.getOptions();
      assertNotNull(stringArray0);
      assertEquals("1,2", mergeManyValues0.getMergeValueRange());
      
      mergeManyValues0.setOptions(stringArray0);
      assertEquals("merged", mergeManyValues0.getLabel());
      assertEquals("last", mergeManyValues0.getAttributeIndex());
  }

  @Test
  public void test2()  throws Throwable  {
      MergeManyValues mergeManyValues0 = new MergeManyValues();
      String string0 = mergeManyValues0.mergeValueRangeTipText();
      assertEquals("The range of values to merge.", string0);
      assertEquals("1,2", mergeManyValues0.getMergeValueRange());
      assertEquals("merged", mergeManyValues0.getLabel());
      assertEquals("last", mergeManyValues0.getAttributeIndex());
  }

  @Test
  public void test3()  throws Throwable  {
      MergeManyValues mergeManyValues0 = new MergeManyValues();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "The new label for the merged values.";
      stringArray0[1] = "The new label for the merged values.";
      stringArray0[2] = "The new label for the merged values.";
      Filter.runFilter((Filter) mergeManyValues0, stringArray0);
      assertEquals("merged", mergeManyValues0.getLabel());
      assertEquals("last", mergeManyValues0.getAttributeIndex());
      assertEquals("1,2", mergeManyValues0.getMergeValueRange());
  }

  @Test
  public void test4()  throws Throwable  {
      MergeManyValues mergeManyValues0 = new MergeManyValues();
      String string0 = mergeManyValues0.labelTipText();
      assertEquals("The new label for the merged values.", string0);
      assertEquals("last", mergeManyValues0.getAttributeIndex());
      assertEquals("1,2", mergeManyValues0.getMergeValueRange());
      assertEquals("merged", mergeManyValues0.getLabel());
  }

  @Test
  public void test5()  throws Throwable  {
      MergeManyValues mergeManyValues0 = new MergeManyValues();
      String string0 = mergeManyValues0.attributeIndexTipText();
      assertEquals("merged", mergeManyValues0.getLabel());
      assertEquals("last", mergeManyValues0.getAttributeIndex());
      assertEquals("Sets which attribute to process. This attribute must be nominal (\"first\" and \"last\" are valid values)", string0);
      assertEquals("1,2", mergeManyValues0.getMergeValueRange());
  }

  @Test
  public void test6()  throws Throwable  {
      MergeManyValues mergeManyValues0 = new MergeManyValues();
      String string0 = mergeManyValues0.globalInfo();
      assertEquals("1,2", mergeManyValues0.getMergeValueRange());
      assertEquals("merged", mergeManyValues0.getLabel());
      assertEquals("Merges many values of a nominal attribute into one value.", string0);
      assertEquals("last", mergeManyValues0.getAttributeIndex());
  }

  @Test
  public void test7()  throws Throwable  {
      MergeManyValues mergeManyValues0 = new MergeManyValues();
      String string0 = mergeManyValues0.getRevision();
      assertEquals("merged", mergeManyValues0.getLabel());
      assertEquals("1,2", mergeManyValues0.getMergeValueRange());
      assertEquals("last", mergeManyValues0.getAttributeIndex());
      assertEquals("$Revision: 8286 $", string0);
  }

  @Test
  public void test8()  throws Throwable  {
      MergeManyValues mergeManyValues0 = new MergeManyValues();
      double[] doubleArray0 = new double[16];
      SparseInstance sparseInstance0 = new SparseInstance((-1.555241160023137), doubleArray0);
      DenseInstance denseInstance0 = new DenseInstance((Instance) sparseInstance0);
      // Undeclared exception!
      try {
        mergeManyValues0.input((Instance) denseInstance0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * No input instance format defined
         */
      }
  }
}
