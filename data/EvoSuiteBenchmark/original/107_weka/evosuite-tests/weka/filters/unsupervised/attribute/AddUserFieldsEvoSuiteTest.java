/*
 * This file was automatically generated by EvoSuite
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Date;
import java.util.List;
import org.junit.BeforeClass;
import weka.core.Environment;
import weka.core.Instance;
import weka.core.Instances;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.AddUserFields;

@RunWith(EvoSuiteRunner.class)
public class AddUserFieldsEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      AddUserFields.AttributeSpec addUserFields_AttributeSpec0 = new AddUserFields.AttributeSpec();
      String string0 = addUserFields_AttributeSpec0.getName();
      assertEquals("", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      AddUserFields addUserFields0 = new AddUserFields();
      addUserFields0.addAttributeSpec("@@k# ]`$tQ5.Brz8s");
      assertEquals("A filter that adds new attributes with user specified type and constant value. Numeric, nominal, string and date attributes can be created. Attribute name, and value can be set with environment variables. Date attributes can also specify a formatting string by which to parse the supplied date value. Alternatively, a current time stamp can be specified by supplying the special string \"now\" as the value for a date attribute.", addUserFields0.globalInfo());
  }

  @Test
  public void test2()  throws Throwable  {
      AddUserFields.AttributeSpec addUserFields_AttributeSpec0 = new AddUserFields.AttributeSpec();
      addUserFields_AttributeSpec0.setValue((String) null);
      assertEquals("Name:  Type:  Value: null", addUserFields_AttributeSpec0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      AddUserFields.AttributeSpec addUserFields_AttributeSpec0 = new AddUserFields.AttributeSpec();
      String string0 = addUserFields_AttributeSpec0.getValue();
      assertEquals("", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      AddUserFields.AttributeSpec addUserFields_AttributeSpec0 = new AddUserFields.AttributeSpec();
      String string0 = addUserFields_AttributeSpec0.getResolvedValue();
      assertNull(string0);
  }

  @Test
  public void test5()  throws Throwable  {
      AddUserFields.AttributeSpec addUserFields_AttributeSpec0 = new AddUserFields.AttributeSpec();
      addUserFields_AttributeSpec0.setType("Name:  Type:  Value: ");
      assertNull(addUserFields_AttributeSpec0.getResolvedValue());
  }

  @Test
  public void test6()  throws Throwable  {
      AddUserFields.AttributeSpec addUserFields_AttributeSpec0 = new AddUserFields.AttributeSpec("");
      assertNotNull(addUserFields_AttributeSpec0);
      
      addUserFields_AttributeSpec0.getResolvedName();
      assertEquals("@@", addUserFields_AttributeSpec0.toStringInternal());
      assertEquals("Name:  Type:  Value: ", addUserFields_AttributeSpec0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      AddUserFields.AttributeSpec addUserFields_AttributeSpec0 = new AddUserFields.AttributeSpec("");
      addUserFields_AttributeSpec0.setName("");
      assertEquals("@@", addUserFields_AttributeSpec0.toStringInternal());
  }

  @Test
  public void test8()  throws Throwable  {
      AddUserFields addUserFields0 = new AddUserFields();
      addUserFields0.addAttributeSpec("dWJ6*8C1'&9&lWn<f+");
      String[] stringArray0 = addUserFields0.getOptions();
      assertNotNull(stringArray0);
  }

  @Test
  public void test9()  throws Throwable  {
      AddUserFields.AttributeSpec addUserFields_AttributeSpec0 = new AddUserFields.AttributeSpec();
      String string0 = addUserFields_AttributeSpec0.getType();
      assertEquals("", string0);
  }

  @Test
  public void test10()  throws Throwable  {
      AddUserFields addUserFields0 = new AddUserFields();
      Environment environment0 = Environment.getSystemWide();
      addUserFields0.setEnvironment(environment0);
      // Undeclared exception!
      try {
        addUserFields0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      AddUserFields addUserFields0 = new AddUserFields();
      List<AddUserFields.AttributeSpec> list0 = addUserFields0.getAttributeSpecs();
      assertEquals(0, list0.size());
  }

  @Test
  public void test12()  throws Throwable  {
      AddUserFields addUserFields0 = new AddUserFields();
      String string0 = addUserFields0.attributeSpecsTipText();
      assertEquals("Specifications of the new attributes to create", string0);
  }

  @Test
  public void test13()  throws Throwable  {
      AddUserFields addUserFields0 = new AddUserFields();
      try {
        addUserFields0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test14()  throws Throwable  {
      AddUserFields addUserFields0 = new AddUserFields();
      String string0 = addUserFields0.globalInfo();
      assertEquals("A filter that adds new attributes with user specified type and constant value. Numeric, nominal, string and date attributes can be created. Attribute name, and value can be set with environment variables. Date attributes can also specify a formatting string by which to parse the supplied date value. Alternatively, a current time stamp can be specified by supplying the special string \"now\" as the value for a date attribute.", string0);
  }

  @Test
  public void test15()  throws Throwable  {
      AddUserFields.AttributeSpec addUserFields_AttributeSpec0 = new AddUserFields.AttributeSpec();
      String string0 = addUserFields_AttributeSpec0.getDateFormat();
      assertNull(string0);
  }

  @Test
  public void test16()  throws Throwable  {
      AddUserFields.AttributeSpec addUserFields_AttributeSpec0 = new AddUserFields.AttributeSpec();
      Environment environment0 = Environment.getSystemWide();
      addUserFields_AttributeSpec0.init(environment0);
      Date date0 = addUserFields_AttributeSpec0.getDateValue();
      assertNull(date0);
  }

  @Test
  public void test17()  throws Throwable  {
      AddUserFields.AttributeSpec addUserFields_AttributeSpec0 = new AddUserFields.AttributeSpec();
      Environment environment0 = Environment.getSystemWide();
      addUserFields_AttributeSpec0.init(environment0);
      double double0 = addUserFields_AttributeSpec0.getNumericValue();
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test18()  throws Throwable  {
      AddUserFields.AttributeSpec addUserFields_AttributeSpec0 = new AddUserFields.AttributeSpec();
      Environment environment0 = Environment.getSystemWide();
      addUserFields_AttributeSpec0.init(environment0);
      String string0 = addUserFields_AttributeSpec0.getNominalOrStringValue();
      assertNull(string0);
  }

  @Test
  public void test19()  throws Throwable  {
      AddUserFields.AttributeSpec addUserFields_AttributeSpec0 = new AddUserFields.AttributeSpec("@@");
      assertNotNull(addUserFields_AttributeSpec0);
      assertEquals("Name:  Type:  Value: ", addUserFields_AttributeSpec0.toString());
  }

  @Test
  public void test20()  throws Throwable  {
      AddUserFields.AttributeSpec addUserFields_AttributeSpec0 = new AddUserFields.AttributeSpec();
      String string0 = addUserFields_AttributeSpec0.toString();
      assertNotNull(string0);
      assertEquals("Name:  Type:  Value: ", string0);
  }

  @Test
  public void test21()  throws Throwable  {
      AddUserFields addUserFields0 = new AddUserFields();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Name:  Type:  Value: ";
      stringArray0[1] = "Name:  Type:  Value: ";
      stringArray0[2] = "Name:  Type:  Value: ";
      stringArray0[3] = "Name:  Type:  Value: ";
      try {
        Filter.filterFile((Filter) addUserFields0, stringArray0);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * 
         * Illegal options: Name:  Type:  Value:  Name:  Type:  Value:  Name:  Type:  Value:  Name:  Type:  Value:  
         * Filter options:
         * 
         * -A <name:type:value>
         * \tNew field specification (name@type@value).
         * \t Environment variables may be used for any/all parts of the
         * \tspecification. Type can be one of (numeric, nominal, string or date).
         * \tThe value for date be a specific date string or the special string
         * \t\"now\" to indicate the current date-time. A specific date format
         * \tstring for parsing specific date values can be specified by suffixing
         * \tthe type specification - e.g. \"myTime@date:MM-dd-yyyy@08-23-2009\".This option may be specified multiple times
         * 
         * General options:
         * 
         * -h
         * \tGet help on available options.
         * \t(use -b -h for help on batch mode.)
         * -i <file>
         * \tThe name of the file containing input instances.
         * \tIf not supplied then instances will be read from stdin.
         * -o <file>
         * \tThe name of the file output instances will be written to.
         * \tIf not supplied then instances will be written to stdout.
         * -c <class index>
         * \tThe number of the attribute to use as the class.
         * \t\"first\" and \"last\" are also valid entries.
         * \tIf not supplied then no class is assigned.
         */
      }
  }

  @Test
  public void test22()  throws Throwable  {
      AddUserFields addUserFields0 = new AddUserFields();
      String[] stringArray0 = new String[3];
      addUserFields0.setAttributeSpecs((List<AddUserFields.AttributeSpec>) null);
      try {
        addUserFields0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test23()  throws Throwable  {
      AddUserFields addUserFields0 = new AddUserFields();
      String[] stringArray0 = addUserFields0.getOptions();
      assertNotNull(stringArray0);
  }

  @Test
  public void test24()  throws Throwable  {
      AddUserFields addUserFields0 = new AddUserFields();
      // Undeclared exception!
      try {
        addUserFields0.input((Instance) null);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * No input instance format defined
         */
      }
  }

  @Test
  public void test25()  throws Throwable  {
      AddUserFields addUserFields0 = new AddUserFields();
      // Undeclared exception!
      try {
        addUserFields0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
