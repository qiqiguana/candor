/*
 * This file was automatically generated by EvoSuite
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.ArrayList;
import java.util.Enumeration;
import org.junit.BeforeClass;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.UnassignedDatasetException;
import weka.filters.Filter;
import weka.filters.Sourcable;
import weka.filters.unsupervised.attribute.Normalize;

@RunWith(EvoSuiteRunner.class)
public class NormalizeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Normalize normalize0 = new Normalize();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "I_BMWjBz!CZSR c@,";
      stringArray0[1] = "I_BMWjBz!CZSR c@,";
      stringArray0[2] = "I_BMWjBz!CZSR c@,";
      stringArray0[3] = "I_BMWjBz!CZSR c@,";
      stringArray0[4] = "I_BMWjBz!CZSR c@,";
      stringArray0[5] = "I_BMWjBz!CZSR c@,";
      stringArray0[6] = "I_BMWjBz!CZSR c@,";
      stringArray0[7] = "I_BMWjBz!CZSR c@,";
      normalize0.setOptions(stringArray0);
      assertEquals(0.0, normalize0.getTranslation(), 0.01D);
      assertEquals(1.0, normalize0.getScale(), 0.01D);
  }

  @Test
  public void test1()  throws Throwable  {
      Normalize normalize0 = new Normalize();
      normalize0.getMinArray();
      assertEquals(0.0, normalize0.getTranslation(), 0.01D);
      assertEquals(1.0, normalize0.getScale(), 0.01D);
  }

  @Test
  public void test2()  throws Throwable  {
      Normalize normalize0 = new Normalize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("I_BMWjBz!CZSR c@,", arrayList0, 1764);
      try {
        Filter.wekaStaticWrapper((Sourcable) normalize0, "I_BMWjBz!CZSR c@,", instances0, instances0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      Normalize normalize0 = new Normalize();
      String string0 = normalize0.scaleTipText();
      assertEquals("The factor for scaling the output range (default: 1).", string0);
      assertEquals(0.0, normalize0.getTranslation(), 0.01D);
      assertEquals(1.0, normalize0.getScale(), 0.01D);
  }

  @Test
  public void test4()  throws Throwable  {
      Normalize normalize0 = new Normalize();
      String[] stringArray0 = normalize0.getOptions();
      assertNotNull(stringArray0);
      
      normalize0.setOptions(stringArray0);
      assertEquals(1.0, normalize0.getScale(), 0.01D);
      assertEquals(0.0, normalize0.getTranslation(), 0.01D);
  }

  @Test
  public void test5()  throws Throwable  {
      Normalize normalize0 = new Normalize();
      String string0 = normalize0.translationTipText();
      assertEquals(0.0, normalize0.getTranslation(), 0.01D);
      assertEquals(1.0, normalize0.getScale(), 0.01D);
      assertEquals("The translation of the output range (default: 0).", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      Normalize normalize0 = new Normalize();
      normalize0.getMaxArray();
      assertEquals(0.0, normalize0.getTranslation(), 0.01D);
      assertEquals(1.0, normalize0.getScale(), 0.01D);
  }

  @Test
  public void test7()  throws Throwable  {
      Normalize normalize0 = new Normalize();
      try {
        normalize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      Normalize normalize0 = new Normalize();
      String string0 = normalize0.getRevision();
      assertEquals(0.0, normalize0.getTranslation(), 0.01D);
      assertNotNull(string0);
      assertEquals("8034", string0);
      assertEquals(1.0, normalize0.getScale(), 0.01D);
  }

  @Test
  public void test9()  throws Throwable  {
      Normalize normalize0 = new Normalize();
      String string0 = normalize0.globalInfo();
      assertEquals("Normalizes all numeric values in the given dataset (apart from the class attribute, if set). The resulting values are by default in [0,1] for the data used to compute the normalization intervals. But with the scale and translation parameters one can change that, e.g., with scale = 2.0 and translation = -1.0 you get values in the range [-1,+1].", string0);
      assertEquals(0.0, normalize0.getTranslation(), 0.01D);
      assertEquals(1.0, normalize0.getScale(), 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      Normalize normalize0 = new Normalize();
      Enumeration<Object> enumeration0 = normalize0.listOptions();
      assertNotNull(enumeration0);
      assertEquals(0.0, normalize0.getTranslation(), 0.01D);
      assertEquals(1.0, normalize0.getScale(), 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      Normalize normalize0 = new Normalize();
      SparseInstance sparseInstance0 = new SparseInstance(1824);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      try {
        normalize0.input((Instance) binarySparseInstance0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * No input instance format defined
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      Normalize normalize0 = new Normalize();
      try {
        normalize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * No input instance format defined
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      Normalize normalize0 = new Normalize();
      try {
        normalize0.convertInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test14()  throws Throwable  {
      Normalize normalize0 = new Normalize();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(95);
      try {
        normalize0.convertInstance((Instance) binarySparseInstance0);
        fail("Expecting exception: UnassignedDatasetException");
      } catch(UnassignedDatasetException e) {
        /*
         * DenseInstance doesn't have access to a dataset!
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      Normalize normalize0 = new Normalize();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      try {
        normalize0.convertInstance((Instance) sparseInstance0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
