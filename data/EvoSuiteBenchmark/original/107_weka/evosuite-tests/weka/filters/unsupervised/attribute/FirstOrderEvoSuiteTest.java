/*
 * This file was automatically generated by EvoSuite
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import weka.core.BinarySparseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.FirstOrder;

@RunWith(EvoSuiteRunner.class)
public class FirstOrderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      FirstOrder firstOrder0 = new FirstOrder();
      String[] stringArray0 = firstOrder0.getOptions();
      assertNotNull(stringArray0);
  }

  @Test
  public void test1()  throws Throwable  {
      FirstOrder firstOrder0 = new FirstOrder();
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".+Z*_K@Yu";
      stringArray0[1] = ".+Z*_K@Yu";
      Filter.runFilter((Filter) firstOrder0, stringArray0);
      assertEquals("8034", firstOrder0.getRevision());
  }

  @Test
  public void test2()  throws Throwable  {
      FirstOrder firstOrder0 = new FirstOrder();
      String string0 = firstOrder0.getRevision();
      assertEquals("8034", string0);
      assertNotNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      FirstOrder firstOrder0 = new FirstOrder();
      int[] intArray0 = new int[4];
      firstOrder0.setAttributeIndicesArray(intArray0);
      String[] stringArray0 = firstOrder0.getOptions();
      assertEquals("1,1,1,1", firstOrder0.getAttributeIndices());
      assertNotNull(stringArray0);
  }

  @Test
  public void test4()  throws Throwable  {
      FirstOrder firstOrder0 = new FirstOrder();
      String string0 = firstOrder0.globalInfo();
      assertEquals("This instance filter takes a range of N numeric attributes and replaces them with N-1 numeric attributes, the values of which are the difference between consecutive attribute values from the original instance. eg: \n\nOriginal attribute values\n\n   0.1, 0.2, 0.3, 0.1, 0.3\n\nNew attribute values\n\n   0.1, 0.1, -0.2, 0.2\n\nThe range of attributes used is taken in numeric order. That is, a range spec of 7-11,3-5 will use the attribute ordering 3,4,5,7,8,9,10,11 for the differences, NOT 7,8,9,10,11,3,4,5.", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      FirstOrder firstOrder0 = new FirstOrder();
      String string0 = firstOrder0.attributeIndicesTipText();
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      FirstOrder firstOrder0 = new FirstOrder();
      try {
        firstOrder0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      FirstOrder firstOrder0 = new FirstOrder();
      int[] intArray0 = new int[4];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, 0);
      // Undeclared exception!
      try {
        firstOrder0.input((Instance) binarySparseInstance0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * No input instance format defined
         */
      }
  }
}
