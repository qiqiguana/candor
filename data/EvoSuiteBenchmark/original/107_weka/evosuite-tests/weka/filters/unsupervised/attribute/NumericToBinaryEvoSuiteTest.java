/*
 * This file was automatically generated by EvoSuite
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.filters.unsupervised.attribute.NumericToBinary;

@RunWith(EvoSuiteRunner.class)
public class NumericToBinaryEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      NumericToBinary numericToBinary0 = new NumericToBinary();
      String string0 = numericToBinary0.globalInfo();
      assertEquals("Converts all numeric attributes into binary attributes (apart from the class attribute, if set): if the value of the numeric attribute is exactly zero, the value of the new attribute will be zero. If the value of the numeric attribute is missing, the value of the new attribute will be missing. Otherwise, the value of the new attribute will be one. The new attributes will be nominal.", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      NumericToBinary numericToBinary0 = new NumericToBinary();
      try {
        numericToBinary0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      NumericToBinary numericToBinary0 = new NumericToBinary();
      String string0 = numericToBinary0.getRevision();
      assertEquals("8034", string0);
      assertNotNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      NumericToBinary numericToBinary0 = new NumericToBinary();
      double[] doubleArray0 = new double[2];
      int[] intArray0 = new int[4];
      SparseInstance sparseInstance0 = new SparseInstance(897.3585585588153, doubleArray0, intArray0, 0);
      // Undeclared exception!
      try {
        numericToBinary0.input((Instance) sparseInstance0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * No input instance format defined
         */
      }
  }
}
