/*
 * This file was automatically generated by EvoSuite
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.ArrayList;
import org.junit.BeforeClass;
import weka.core.Attribute;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.UnsupportedAttributeTypeException;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.MergeTwoValues;

@RunWith(EvoSuiteRunner.class)
public class MergeTwoValuesEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      MergeTwoValues mergeTwoValues0 = new MergeTwoValues();
      String string0 = mergeTwoValues0.getRevision();
      assertNotNull(string0);
      assertEquals("8288", string0);
      assertEquals("first", mergeTwoValues0.getFirstValueIndex());
      assertEquals("last", mergeTwoValues0.getAttributeIndex());
      assertEquals("last", mergeTwoValues0.getSecondValueIndex());
  }

  @Test
  public void test1()  throws Throwable  {
      MergeTwoValues mergeTwoValues0 = new MergeTwoValues();
      String[] stringArray0 = new String[10];
      stringArray0[0] = "Sets the first value to be merged. (\"first\" and \"last\" are valid values)";
      stringArray0[1] = "Sets the first value to be merged. (\"first\" and \"last\" are valid values)";
      stringArray0[2] = "Sets the first value to be merged. (\"first\" and \"last\" are valid values)";
      stringArray0[3] = "Sets the first value to be merged. (\"first\" and \"last\" are valid values)";
      stringArray0[4] = "Sets the first value to be merged. (\"first\" and \"last\" are valid values)";
      stringArray0[5] = "Sets the first value to be merged. (\"first\" and \"last\" are valid values)";
      stringArray0[6] = "Sets the first value to be merged. (\"first\" and \"last\" are valid values)";
      stringArray0[7] = "Sets the first value to be merged. (\"first\" and \"last\" are valid values)";
      stringArray0[8] = "Sets the first value to be merged. (\"first\" and \"last\" are valid values)";
      stringArray0[9] = "Sets the first value to be merged. (\"first\" and \"last\" are valid values)";
      Filter.runFilter((Filter) mergeTwoValues0, stringArray0);
      assertEquals("last", mergeTwoValues0.getAttributeIndex());
      assertEquals("first", mergeTwoValues0.getFirstValueIndex());
      assertEquals("last", mergeTwoValues0.getSecondValueIndex());
  }

  @Test
  public void test2()  throws Throwable  {
      MergeTwoValues mergeTwoValues0 = new MergeTwoValues();
      String string0 = mergeTwoValues0.attributeIndexTipText();
      assertEquals("last", mergeTwoValues0.getAttributeIndex());
      assertEquals("first", mergeTwoValues0.getFirstValueIndex());
      assertEquals("Sets which attribute to process. This attribute must be nominal (\"first\" and \"last\" are valid values)", string0);
      assertEquals("last", mergeTwoValues0.getSecondValueIndex());
  }

  @Test
  public void test3()  throws Throwable  {
      MergeTwoValues mergeTwoValues0 = new MergeTwoValues();
      String string0 = mergeTwoValues0.secondValueIndexTipText();
      assertEquals("first", mergeTwoValues0.getFirstValueIndex());
      assertEquals("last", mergeTwoValues0.getAttributeIndex());
      assertEquals("Sets the second value to be merged. (\"first\" and \"last\" are valid values)", string0);
      assertEquals("last", mergeTwoValues0.getSecondValueIndex());
  }

  @Test
  public void test4()  throws Throwable  {
      MergeTwoValues mergeTwoValues0 = new MergeTwoValues();
      String string0 = mergeTwoValues0.firstValueIndexTipText();
      assertEquals("first", mergeTwoValues0.getFirstValueIndex());
      assertEquals("last", mergeTwoValues0.getSecondValueIndex());
      assertEquals("Sets the first value to be merged. (\"first\" and \"last\" are valid values)", string0);
      assertEquals("last", mergeTwoValues0.getAttributeIndex());
  }

  @Test
  public void test5()  throws Throwable  {
      MergeTwoValues mergeTwoValues0 = new MergeTwoValues();
      String string0 = mergeTwoValues0.globalInfo();
      assertEquals("Merges two values of a nominal attribute into one value.", string0);
      assertEquals("first", mergeTwoValues0.getFirstValueIndex());
      assertEquals("last", mergeTwoValues0.getAttributeIndex());
      assertEquals("last", mergeTwoValues0.getSecondValueIndex());
  }

  @Test
  public void test6()  throws Throwable  {
      MergeTwoValues mergeTwoValues0 = new MergeTwoValues();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("k~(5[>fDr&aPn", arrayList0, 1);
      Attribute attribute0 = new Attribute("k~(5[>fDr&aPn", 1);
      arrayList0.add(attribute0);
      try {
        mergeTwoValues0.setInputFormat(instances0);
        fail("Expecting exception: UnsupportedAttributeTypeException");
      } catch(UnsupportedAttributeTypeException e) {
        /*
         * Chosen attribute not nominal.
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      MergeTwoValues mergeTwoValues0 = new MergeTwoValues();
      DenseInstance denseInstance0 = new DenseInstance(15000);
      // Undeclared exception!
      try {
        mergeTwoValues0.input((Instance) denseInstance0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * No input instance format defined
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      MergeTwoValues mergeTwoValues0 = new MergeTwoValues();
      String[] stringArray0 = mergeTwoValues0.getOptions();
      assertNotNull(stringArray0);
      
      mergeTwoValues0.setOptions(stringArray0);
      assertEquals("first", mergeTwoValues0.getFirstValueIndex());
      assertEquals("last", mergeTwoValues0.getSecondValueIndex());
      assertEquals("last", mergeTwoValues0.getAttributeIndex());
  }
}
