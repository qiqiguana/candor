/*
 * This file was automatically generated by EvoSuite
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Enumeration;
import org.junit.BeforeClass;
import weka.core.BinarySparseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.filters.unsupervised.attribute.NominalToString;

@RunWith(EvoSuiteRunner.class)
public class NominalToStringEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      NominalToString nominalToString0 = new NominalToString();
      String[] stringArray0 = nominalToString0.getOptions();
      assertNotNull(stringArray0);
      
      nominalToString0.setOptions(stringArray0);
      assertEquals("last", nominalToString0.getAttributeIndexes());
  }

  @Test
  public void test1()  throws Throwable  {
      NominalToString nominalToString0 = new NominalToString();
      String string0 = nominalToString0.getRevision();
      assertNotNull(string0);
      assertEquals("8572", string0);
      assertEquals("last", nominalToString0.getAttributeIndexes());
  }

  @Test
  public void test2()  throws Throwable  {
      NominalToString nominalToString0 = new NominalToString();
      String string0 = nominalToString0.attributeIndexesTipText();
      assertEquals("last", nominalToString0.getAttributeIndexes());
      assertEquals("Sets a range attributes to process. Any non-nominal attributes in the range are left untouched (\"first\" and \"last\" are valid values)", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      NominalToString nominalToString0 = new NominalToString();
      try {
        nominalToString0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      NominalToString nominalToString0 = new NominalToString();
      String string0 = nominalToString0.globalInfo();
      assertEquals("Converts a nominal attribute (that is, a set number of values) to string (that is, an unspecified number of values).", string0);
      assertEquals("last", nominalToString0.getAttributeIndexes());
  }

  @Test
  public void test5()  throws Throwable  {
      NominalToString nominalToString0 = new NominalToString();
      Enumeration<Object> enumeration0 = nominalToString0.listOptions();
      assertEquals("last", nominalToString0.getAttributeIndexes());
      assertEquals(true, enumeration0.hasMoreElements());
      assertNotNull(enumeration0);
  }

  @Test
  public void test6()  throws Throwable  {
      NominalToString nominalToString0 = new NominalToString();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      // Undeclared exception!
      try {
        nominalToString0.input((Instance) binarySparseInstance0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * No input instance format defined
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      NominalToString nominalToString0 = new NominalToString();
      // Undeclared exception!
      try {
        nominalToString0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * No input instance format defined
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      NominalToString nominalToString0 = new NominalToString();
      String[] stringArray0 = new String[10];
      stringArray0[0] = "8572";
      stringArray0[1] = "8572";
      stringArray0[2] = "8572";
      stringArray0[3] = "8572";
      stringArray0[4] = "8572";
      stringArray0[5] = "8572";
      stringArray0[6] = "8572";
      stringArray0[7] = "8572";
      stringArray0[8] = "8572";
      stringArray0[9] = "8572";
      nominalToString0.setOptions(stringArray0);
      assertEquals("last", nominalToString0.getAttributeIndexes());
  }
}
