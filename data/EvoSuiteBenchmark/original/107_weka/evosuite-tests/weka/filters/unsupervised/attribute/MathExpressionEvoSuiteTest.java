/*
 * This file was automatically generated by EvoSuite
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.HashMap;
import org.junit.BeforeClass;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.MathExpression;

@RunWith(EvoSuiteRunner.class)
public class MathExpressionEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      MathExpression mathExpression0 = new MathExpression();
      assertNotNull(mathExpression0);
      
      String string0 = mathExpression0.globalInfo();
      assertEquals(false, mathExpression0.getInvertSelection());
      assertEquals("Modify numeric attributes according to a given expression ", string0);
      assertEquals("(A-MIN)/(MAX-MIN)", mathExpression0.getExpression());
  }

  @Test
  public void test1()  throws Throwable  {
      MathExpression mathExpression0 = new MathExpression();
      assertNotNull(mathExpression0);
      
      String string0 = mathExpression0.ignoreRangeTipText();
      assertEquals(false, mathExpression0.getInvertSelection());
      assertEquals("(A-MIN)/(MAX-MIN)", mathExpression0.getExpression());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      MathExpression mathExpression0 = new MathExpression();
      assertNotNull(mathExpression0);
      
      String string0 = mathExpression0.invertSelectionTipText();
      assertEquals("(A-MIN)/(MAX-MIN)", mathExpression0.getExpression());
      assertEquals("Determines whether action is to select or unselect. If set to true, only the specified attributes will be modified; If set to false, specified attributes will not be modified.", string0);
      assertEquals(false, mathExpression0.getInvertSelection());
  }

  @Test
  public void test3()  throws Throwable  {
      MathExpression mathExpression0 = new MathExpression();
      assertNotNull(mathExpression0);
      
      try {
        mathExpression0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      MathExpression mathExpression0 = new MathExpression();
      assertNotNull(mathExpression0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "    for (i = 0 ;  < obj.length; i++) {\n";
      stringArray0[1] = "    for (i = 0 ;  < obj.length; i++) {\n";
      stringArray0[2] = "    for (i = 0 ;  < obj.length; i++) {\n";
      stringArray0[3] = "    for (i = 0 ;  < obj.length; i++) {\n";
      stringArray0[4] = "    for (i = 0 ;  < obj.length; i++) {\n";
      stringArray0[5] = "    for (i = 0 ;  < obj.length; i++) {\n";
      stringArray0[6] = "    for (i = 0 ;  < obj.length; i++) {\n";
      stringArray0[7] = "    for (i = 0 ;  < obj.length; i++) {\n";
      stringArray0[8] = "    for (i = 0 ;  < obj.length; i++) {\n";
      Filter.runFilter((Filter) mathExpression0, stringArray0);
      assertEquals("(A-MIN)/(MAX-MIN)", mathExpression0.getExpression());
      assertEquals(false, mathExpression0.getInvertSelection());
  }

  @Test
  public void test5()  throws Throwable  {
      MathExpression mathExpression0 = new MathExpression();
      assertNotNull(mathExpression0);
      
      HashMap<Integer, SparseInstance> hashMap0 = new HashMap<Integer, SparseInstance>();
      double double0 = mathExpression0.eval(hashMap0);
      assertEquals(false, mathExpression0.getInvertSelection());
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals("(A-MIN)/(MAX-MIN)", mathExpression0.getExpression());
  }

  @Test
  public void test6()  throws Throwable  {
      MathExpression mathExpression0 = new MathExpression();
      assertNotNull(mathExpression0);
      
      mathExpression0.setIgnoreRange("MqP,zUQe!` 5%{#1H");
      String[] stringArray0 = mathExpression0.getOptions();
      assertNotNull(stringArray0);
      
      mathExpression0.setOptions(stringArray0);
      assertEquals("MqP,zUQe!` 5%{#1H", mathExpression0.getIgnoreRange());
  }

  @Test
  public void test7()  throws Throwable  {
      MathExpression mathExpression0 = new MathExpression();
      assertNotNull(mathExpression0);
      
      String string0 = mathExpression0.expressionTipText();
      assertEquals(false, mathExpression0.getInvertSelection());
      assertEquals("Specify the expression to apply. The 'A' letterrefers to the value of the attribute being processed. MIN,MAX,MEAN,SDrefer respectively to minimum, maximum, mean andstandard deviation of the attribute being processed. Other attribute values (numeric only) can be accessed through the variables A1, A2, A3, ...\n\tSupported operators are +, -, *, /, pow, log,abs, cos, exp, sqrt, tan, sin, ceil, floor, rint, (, ),A,MEAN, MAX, MIN, SD, COUNT, SUM, SUMSQUARED, ifelse\n\tEg. pow(A,6)/(MEAN+MAX)*ifelse(A<0,0,sqrt(A))+ifelse(![A>9 && A<15])", string0);
      assertEquals("(A-MIN)/(MAX-MIN)", mathExpression0.getExpression());
  }

  @Test
  public void test8()  throws Throwable  {
      MathExpression mathExpression0 = new MathExpression();
      assertNotNull(mathExpression0);
      
      String string0 = mathExpression0.getRevision();
      assertNotNull(string0);
      assertEquals("8034", string0);
      assertEquals("(A-MIN)/(MAX-MIN)", mathExpression0.getExpression());
      assertEquals(false, mathExpression0.getInvertSelection());
  }

  @Test
  public void test9()  throws Throwable  {
      MathExpression mathExpression0 = new MathExpression();
      assertNotNull(mathExpression0);
      
      Capabilities capabilities0 = mathExpression0.getCapabilities();
      assertEquals("Capabilities: [Nominal attributes, Binary attributes, Unary attributes, Empty nominal attributes, Numeric attributes, Date attributes, String attributes, Relational attributes, Missing values, No class, Nominal class, Binary class, Unary class, Empty nominal class, Numeric class, Date class, String class, Relational class, Missing class values]\nDependencies: []\nmin # Instance: 0\n", capabilities0.toString());
      assertEquals("(A-MIN)/(MAX-MIN)", mathExpression0.getExpression());
      assertEquals(false, mathExpression0.getInvertSelection());
  }

  @Test
  public void test10()  throws Throwable  {
      MathExpression mathExpression0 = new MathExpression();
      assertNotNull(mathExpression0);
      
      double[] doubleArray0 = new double[7];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2.897403245502769, doubleArray0);
      try {
        mathExpression0.input((Instance) binarySparseInstance0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * No input instance format defined
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      MathExpression mathExpression0 = new MathExpression();
      assertNotNull(mathExpression0);
      
      try {
        mathExpression0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * No input instance format defined
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      MathExpression mathExpression0 = new MathExpression();
      assertNotNull(mathExpression0);
      
      String[] stringArray0 = mathExpression0.getOptions();
      assertEquals("(A-MIN)/(MAX-MIN)", mathExpression0.getExpression());
      assertNotNull(stringArray0);
      
      mathExpression0.setOptions(stringArray0);
      assertEquals(false, mathExpression0.getInvertSelection());
  }

  @Test
  public void test13()  throws Throwable  {
      MathExpression mathExpression0 = new MathExpression();
      assertNotNull(mathExpression0);
      
      mathExpression0.setIgnoreClass(true);
      String[] stringArray0 = mathExpression0.getOptions();
      assertEquals(false, mathExpression0.getInvertSelection());
      assertEquals("(A-MIN)/(MAX-MIN)", mathExpression0.getExpression());
      assertNotNull(stringArray0);
  }

  @Test
  public void test14()  throws Throwable  {
      MathExpression mathExpression0 = new MathExpression();
      assertNotNull(mathExpression0);
      assertEquals(false, mathExpression0.getInvertSelection());
      
      mathExpression0.setInvertSelection(true);
      String[] stringArray0 = mathExpression0.getOptions();
      assertNotNull(stringArray0);
      assertEquals(true, mathExpression0.getInvertSelection());
      assertEquals("(A-MIN)/(MAX-MIN)", mathExpression0.getExpression());
  }
}
