/*
 * This file was automatically generated by EvoSuite
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.ArrayList;
import org.junit.BeforeClass;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.AddNoise;

@RunWith(EvoSuiteRunner.class)
public class AddNoiseEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      AddNoise addNoise0 = new AddNoise();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "8034";
      stringArray0[1] = "8034";
      stringArray0[2] = "hY1:su-skJ}K1P@";
      stringArray0[3] = "8034";
      stringArray0[4] = "8034";
      stringArray0[5] = "8034";
      stringArray0[6] = "8034";
      Filter.runFilter((Filter) addNoise0, stringArray0);
      assertEquals("last", addNoise0.getAttributeIndex());
      assertEquals(10, addNoise0.getPercent());
      assertEquals(1, addNoise0.getRandomSeed());
      assertEquals(false, addNoise0.getUseMissing());
  }

  @Test
  public void test1()  throws Throwable  {
      AddNoise addNoise0 = new AddNoise();
      String string0 = addNoise0.globalInfo();
      assertEquals("An instance filter that changes a percentage of a given attributes values. The attribute must be nominal. Missing value can be treated as value itself.", string0);
      assertEquals("last", addNoise0.getAttributeIndex());
      assertEquals(false, addNoise0.getUseMissing());
      assertEquals(10, addNoise0.getPercent());
      assertEquals(1, addNoise0.getRandomSeed());
  }

  @Test
  public void test2()  throws Throwable  {
      AddNoise addNoise0 = new AddNoise();
      try {
        addNoise0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      AddNoise addNoise0 = new AddNoise();
      assertEquals(false, addNoise0.getUseMissing());
      
      addNoise0.setUseMissing(true);
      addNoise0.getOptions();
      assertEquals(true, addNoise0.getUseMissing());
      assertEquals(10, addNoise0.getPercent());
  }

  @Test
  public void test4()  throws Throwable  {
      AddNoise addNoise0 = new AddNoise();
      String string0 = addNoise0.percentTipText();
      assertEquals(false, addNoise0.getUseMissing());
      assertEquals(1, addNoise0.getRandomSeed());
      assertEquals("Percentage of introduced noise to data.", string0);
      assertEquals("last", addNoise0.getAttributeIndex());
      assertEquals(10, addNoise0.getPercent());
  }

  @Test
  public void test5()  throws Throwable  {
      AddNoise addNoise0 = new AddNoise();
      String string0 = addNoise0.randomSeedTipText();
      assertEquals(1, addNoise0.getRandomSeed());
      assertEquals("last", addNoise0.getAttributeIndex());
      assertEquals(10, addNoise0.getPercent());
      assertEquals(false, addNoise0.getUseMissing());
      assertEquals("Random number seed.", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      AddNoise addNoise0 = new AddNoise();
      String string0 = addNoise0.getRevision();
      assertEquals(1, addNoise0.getRandomSeed());
      assertEquals("8034", string0);
      assertEquals("last", addNoise0.getAttributeIndex());
      assertEquals(10, addNoise0.getPercent());
      assertNotNull(string0);
      assertEquals(false, addNoise0.getUseMissing());
  }

  @Test
  public void test7()  throws Throwable  {
      AddNoise addNoise0 = new AddNoise();
      String string0 = addNoise0.attributeIndexTipText();
      assertEquals(10, addNoise0.getPercent());
      assertEquals("last", addNoise0.getAttributeIndex());
      assertEquals(false, addNoise0.getUseMissing());
      assertEquals("Index of the attribute that is to changed.", string0);
      assertEquals(1, addNoise0.getRandomSeed());
  }

  @Test
  public void test8()  throws Throwable  {
      AddNoise addNoise0 = new AddNoise();
      String string0 = addNoise0.useMissingTipText();
      assertEquals("Flag to set if missing values are used.", string0);
      assertEquals("last", addNoise0.getAttributeIndex());
      assertEquals(10, addNoise0.getPercent());
      assertEquals(1, addNoise0.getRandomSeed());
      assertEquals(false, addNoise0.getUseMissing());
  }

  @Test
  public void test9()  throws Throwable  {
      AddNoise addNoise0 = new AddNoise();
      String[] stringArray0 = addNoise0.getOptions();
      assertNotNull(stringArray0);
      
      addNoise0.setOptions(stringArray0);
      assertEquals(false, addNoise0.getUseMissing());
      assertEquals("last", addNoise0.getAttributeIndex());
      assertEquals(1, addNoise0.getRandomSeed());
      assertEquals(10, addNoise0.getPercent());
  }

  @Test
  public void test10()  throws Throwable  {
      AddNoise addNoise0 = new AddNoise();
      double[] doubleArray0 = new double[10];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(17.807539572162806, doubleArray0);
      try {
        addNoise0.input((Instance) binarySparseInstance0);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * No input instance format defined
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      AddNoise addNoise0 = new AddNoise();
      try {
        addNoise0.batchFinished();
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * No input instance format defined
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      AddNoise addNoise0 = new AddNoise();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("7CeD2ZFUvHs?D@w 1", arrayList0, 415);
      // Undeclared exception!
      try {
        addNoise0.addNoise(instances0, 415, 415, 415, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 415, Size: 0
         */
      }
  }
}
