/*
 * This file was automatically generated by EvoSuite
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import weka.clusterers.EM;
import weka.core.Capabilities;
import weka.core.FindWithCapabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.TestInstances;
import weka.core.WekaException;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.ClusterMembership;

@RunWith(EvoSuiteRunner.class)
public class ClusterMembershipEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ClusterMembership clusterMembership0 = new ClusterMembership();
      String string0 = clusterMembership0.getRevision();
      assertEquals("8034", string0);
      assertNotNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      ClusterMembership clusterMembership0 = new ClusterMembership();
      EM eM0 = new EM();
      Capabilities capabilities0 = eM0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("YpioH@1");
      clusterMembership0.testInputFormat(instances0);
      assertEquals("", clusterMembership0.getIgnoredAttributeIndices());
  }

  @Test
  public void test2()  throws Throwable  {
      ClusterMembership clusterMembership0 = new ClusterMembership();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "7`82?";
      Filter.runFilter((Filter) clusterMembership0, stringArray0);
      assertEquals("The clusterer that will generate membership values for the instances.", clusterMembership0.densityBasedClustererTipText());
  }

  @Test
  public void test3()  throws Throwable  {
      ClusterMembership clusterMembership0 = new ClusterMembership();
      String string0 = clusterMembership0.densityBasedClustererTipText();
      assertEquals("The clusterer that will generate membership values for the instances.", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      ClusterMembership clusterMembership0 = new ClusterMembership();
      String string0 = clusterMembership0.globalInfo();
      assertEquals("A filter that uses a density-based clusterer to generate cluster membership values; filtered instances are composed of these values plus the class attribute (if set in the input data). If a (nominal) class attribute is set, the clusterer is run separately for each class. The class attribute (if set) and any user-specified attributes are ignored during the clustering operation", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      ClusterMembership clusterMembership0 = new ClusterMembership();
      String string0 = clusterMembership0.ignoredAttributeIndicesTipText();
      assertEquals("The range of attributes to be ignored by the clusterer. eg: first-3,5,9-last", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      ClusterMembership clusterMembership0 = new ClusterMembership();
      String[] stringArray0 = clusterMembership0.getOptions();
      assertNotNull(stringArray0);
      
      clusterMembership0.setOptions(stringArray0);
      assertEquals("", clusterMembership0.getIgnoredAttributeIndices());
  }

  @Test
  public void test7()  throws Throwable  {
      ClusterMembership clusterMembership0 = new ClusterMembership();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      try {
        clusterMembership0.setInputFormat(instances0);
        fail("Expecting exception: WekaException");
      } catch(WekaException e) {
        /*
         * weka.clusterers.EM: No attributes!
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      ClusterMembership clusterMembership0 = new ClusterMembership();
      clusterMembership0.setIgnoredAttributeIndices("{0v_HyyvXE");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("The range of attributes to be ignored by the clusterer. eg: first-3,5,9-last");
      try {
        clusterMembership0.removeIgnored(instances0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Invalid range list at {0v_HyyvXE
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      ClusterMembership clusterMembership0 = new ClusterMembership();
      try {
        clusterMembership0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * No input instance format defined
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      ClusterMembership clusterMembership0 = new ClusterMembership();
      try {
        clusterMembership0.input((Instance) null);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * No input instance format defined
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      ClusterMembership clusterMembership0 = new ClusterMembership();
      clusterMembership0.setIgnoredAttributeIndices("{0v_HyyvXE");
      clusterMembership0.getOptions();
      assertEquals("{0v_HyyvXE", clusterMembership0.getIgnoredAttributeIndices());
  }

  @Test
  public void test12()  throws Throwable  {
      ClusterMembership clusterMembership0 = new ClusterMembership();
      clusterMembership0.setIgnoredAttributeIndices((String) null);
      assertEquals(true, clusterMembership0.isNewBatch());
  }
}
