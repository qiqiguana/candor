/*
 * This file was automatically generated by EvoSuite
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import weka.core.Instance;
import weka.core.Instances;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoSuiteRunner.class)
public class DiscretizeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertNotNull(discretize0);
      
      String string0 = discretize0.attributeIndicesTipText();
      assertEquals(false, discretize0.getFindNumBins());
      assertEquals(false, discretize0.getUseEqualFrequency());
      assertEquals("first-last", discretize0.getAttributeIndices());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01D);
      assertEquals(false, discretize0.getMakeBinary());
      assertEquals(10, discretize0.getBins());
      assertEquals(false, discretize0.getUseBinNumbers());
  }

  @Test
  public void test1()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertNotNull(discretize0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "ZLX6&ivA 4wU# [:A*";
      stringArray0[1] = "ZLX6&ivA 4wU# [:A*";
      stringArray0[2] = "ZLX6&ivA 4wU# [:A*";
      stringArray0[3] = "ZLX6&ivA 4wU# [:A*";
      stringArray0[4] = "";
      stringArray0[5] = "ZLX6&ivA 4wU# [:A*";
      discretize0.setOptions(stringArray0);
      assertEquals("first-last", discretize0.getAttributeIndices());
      assertEquals(false, discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertEquals(false, discretize0.getInvertSelection());
      assertEquals(false, discretize0.getMakeBinary());
      assertEquals(false, discretize0.getUseBinNumbers());
      assertEquals(false, discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01D);
  }

  @Test
  public void test2()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertNotNull(discretize0);
      
      int[] intArray0 = new int[7];
      discretize0.setAttributeIndicesArray(intArray0);
      assertEquals("1,1,1,1,1,1,1", discretize0.getAttributeIndices());
      assertEquals(false, discretize0.getMakeBinary());
  }

  @Test
  public void test3()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertNotNull(discretize0);
      
      String string0 = discretize0.getRevision();
      assertNotNull(string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01D);
      assertEquals(false, discretize0.getUseEqualFrequency());
      assertEquals(false, discretize0.getMakeBinary());
      assertEquals("first-last", discretize0.getAttributeIndices());
      assertEquals("8964", string0);
      assertEquals(false, discretize0.getUseBinNumbers());
      assertEquals(false, discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
  }

  @Test
  public void test4()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertNotNull(discretize0);
      
      String string0 = discretize0.invertSelectionTipText();
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
      assertEquals("first-last", discretize0.getAttributeIndices());
      assertEquals(false, discretize0.getMakeBinary());
      assertEquals(false, discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01D);
      assertEquals(false, discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertEquals(false, discretize0.getFindNumBins());
  }

  @Test
  public void test5()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertNotNull(discretize0);
      
      String string0 = discretize0.useBinNumbersTipText();
      assertEquals(10, discretize0.getBins());
      assertEquals(false, discretize0.getMakeBinary());
      assertEquals(false, discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01D);
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string0);
      assertEquals("first-last", discretize0.getAttributeIndices());
      assertEquals(false, discretize0.getUseEqualFrequency());
      assertEquals(false, discretize0.getUseBinNumbers());
  }

  @Test
  public void test6()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertNotNull(discretize0);
      
      String string0 = discretize0.globalInfo();
      assertEquals(false, discretize0.getFindNumBins());
      assertEquals(false, discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals(false, discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01D);
      assertEquals("first-last", discretize0.getAttributeIndices());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string0);
      assertEquals(false, discretize0.getUseEqualFrequency());
  }

  @Test
  public void test7()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertNotNull(discretize0);
      
      String string0 = discretize0.findNumBinsTipText();
      assertEquals(false, discretize0.getUseEqualFrequency());
      assertEquals(false, discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01D);
      assertEquals("first-last", discretize0.getAttributeIndices());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string0);
      assertEquals(10, discretize0.getBins());
      assertEquals(false, discretize0.getMakeBinary());
      assertEquals(false, discretize0.getUseBinNumbers());
  }

  @Test
  public void test8()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertNotNull(discretize0);
      
      String string0 = discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertEquals("first-last", discretize0.getAttributeIndices());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string0);
      assertEquals(false, discretize0.getUseBinNumbers());
      assertEquals(false, discretize0.getMakeBinary());
      assertEquals(false, discretize0.getUseEqualFrequency());
      assertEquals(false, discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01D);
      assertEquals(10, discretize0.getBins());
  }

  @Test
  public void test9()  throws Throwable  {
      Discretize discretize0 = new Discretize("O5*DDh");
      assertNotNull(discretize0);
      
      String string0 = discretize0.binsTipText();
      assertEquals("O5*DDh", discretize0.getAttributeIndices());
      assertEquals(false, discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertEquals("Number of bins.", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01D);
      assertEquals(false, discretize0.getUseEqualFrequency());
      assertEquals(false, discretize0.getUseBinNumbers());
      assertEquals(false, discretize0.getMakeBinary());
  }

  @Test
  public void test10()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertNotNull(discretize0);
      
      String string0 = discretize0.makeBinaryTipText();
      assertEquals("first-last", discretize0.getAttributeIndices());
      assertEquals(false, discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertEquals(false, discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01D);
      assertEquals("Make resulting attributes binary.", string0);
      assertEquals(false, discretize0.getMakeBinary());
      assertEquals(false, discretize0.getUseEqualFrequency());
  }

  @Test
  public void test11()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertNotNull(discretize0);
      
      String string0 = discretize0.useEqualFrequencyTipText();
      assertEquals("first-last", discretize0.getAttributeIndices());
      assertEquals(10, discretize0.getBins());
      assertEquals(false, discretize0.getFindNumBins());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string0);
      assertEquals(false, discretize0.getUseEqualFrequency());
      assertEquals(false, discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01D);
      assertEquals(false, discretize0.getMakeBinary());
  }

  @Test
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertNotNull(discretize0);
      
      discretize0.listOptions();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01D);
      assertEquals(10, discretize0.getBins());
      assertEquals(false, discretize0.getMakeBinary());
      assertEquals(false, discretize0.getFindNumBins());
      assertEquals(false, discretize0.getUseEqualFrequency());
      assertEquals(false, discretize0.getUseBinNumbers());
      assertEquals("first-last", discretize0.getAttributeIndices());
  }

  @Test
  public void test13()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertNotNull(discretize0);
      
      String[] stringArray0 = discretize0.getOptions();
      assertNotNull(stringArray0);
      
      discretize0.setOptions(stringArray0);
      assertEquals(false, discretize0.getUseEqualFrequency());
      assertEquals(false, discretize0.getMakeBinary());
      assertEquals("first-last", discretize0.getAttributeIndices());
      assertEquals(false, discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01D);
      assertEquals(10, discretize0.getBins());
      assertEquals(false, discretize0.getInvertSelection());
      assertEquals(false, discretize0.getUseBinNumbers());
  }

  @Test
  public void test14()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertNotNull(discretize0);
      assertEquals(false, discretize0.getMakeBinary());
      
      discretize0.setMakeBinary(true);
      discretize0.getOptions();
      assertEquals(true, discretize0.getMakeBinary());
      assertEquals("first-last", discretize0.getAttributeIndices());
  }

  @Test
  public void test15()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertNotNull(discretize0);
      assertEquals(false, discretize0.getUseBinNumbers());
      
      discretize0.setUseBinNumbers(true);
      discretize0.getOptions();
      assertEquals(true, discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
  }

  @Test
  public void test16()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals(false, discretize0.getUseEqualFrequency());
      assertNotNull(discretize0);
      
      discretize0.setUseEqualFrequency(true);
      discretize0.getOptions();
      assertEquals(true, discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01D);
  }

  @Test
  public void test17()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals(false, discretize0.getFindNumBins());
      assertNotNull(discretize0);
      
      discretize0.setFindNumBins(true);
      discretize0.getOptions();
      assertEquals(true, discretize0.getFindNumBins());
  }

  @Test
  public void test18()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertNotNull(discretize0);
      
      discretize0.setInvertSelection(true);
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(true, discretize0.getInvertSelection());
      assertNotNull(stringArray0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01D);
  }

  @Test
  public void test19()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      assertNotNull(discretize0);
      
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(false, discretize0.getFindNumBins());
      assertEquals(false, discretize0.getUseEqualFrequency());
      assertNotNull(stringArray0);
      assertEquals(10, discretize0.getBins());
      assertEquals(false, discretize0.getUseBinNumbers());
      assertEquals(false, discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01D);
  }

  @Test
  public void test20()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertNotNull(discretize0);
      assertEquals(false, discretize0.getMakeBinary());
      
      discretize0.setMakeBinary(true);
      try {
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test21()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertNotNull(discretize0);
      
      try {
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test22()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals(false, discretize0.getMakeBinary());
      assertNotNull(discretize0);
      
      discretize0.setMakeBinary(true);
      discretize0.setIgnoreClass(true);
      try {
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Can't ignore class when changing the number of attributes!
         */
      }
  }

  @Test
  public void test23()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertNotNull(discretize0);
      
      // Undeclared exception!
      try {
        discretize0.input((Instance) null);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * No input instance format defined
         */
      }
  }

  @Test
  public void test24()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertNotNull(discretize0);
      
      // Undeclared exception!
      try {
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * No input instance format defined
         */
      }
  }

  @Test
  public void test25()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertNotNull(discretize0);
      
      discretize0.getCutPoints(1);
      assertEquals(false, discretize0.getUseBinNumbers());
      assertEquals("first-last", discretize0.getAttributeIndices());
      assertEquals(10, discretize0.getBins());
      assertEquals(false, discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01D);
      assertEquals(false, discretize0.getMakeBinary());
      assertEquals(false, discretize0.getUseEqualFrequency());
  }

  @Test
  public void test26()  throws Throwable  {
      Discretize discretize0 = new Discretize("O5*DDh");
      assertNotNull(discretize0);
      
      discretize0.getBinRangesString(44);
      assertEquals(false, discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01D);
      assertEquals(false, discretize0.getFindNumBins());
      assertEquals("O5*DDh", discretize0.getAttributeIndices());
      assertEquals(false, discretize0.getUseEqualFrequency());
      assertEquals(false, discretize0.getMakeBinary());
  }

  @Test
  public void test27()  throws Throwable  {
      Discretize discretize0 = new Discretize("O5*DDh");
      assertNotNull(discretize0);
      
      discretize0.setOutputFormat();
      assertEquals(10, discretize0.getBins());
      assertEquals("O5*DDh", discretize0.getAttributeIndices());
      assertEquals(false, discretize0.getUseBinNumbers());
      assertEquals(false, discretize0.getMakeBinary());
      assertEquals(false, discretize0.getFindNumBins());
      assertEquals(false, discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01D);
  }
}
