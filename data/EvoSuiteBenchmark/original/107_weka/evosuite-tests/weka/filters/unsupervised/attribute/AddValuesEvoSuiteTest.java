/*
 * This file was automatically generated by EvoSuite
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Enumeration;
import org.junit.BeforeClass;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.filters.unsupervised.attribute.AddValues;

@RunWith(EvoSuiteRunner.class)
public class AddValuesEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      AddValues addValues0 = new AddValues();
      Enumeration<Object> enumeration0 = addValues0.listOptions();
      assertNotNull(enumeration0);
      assertEquals("last", addValues0.getAttributeIndex());
      assertEquals(false, addValues0.getSort());
  }

  @Test
  public void test1()  throws Throwable  {
      AddValues addValues0 = new AddValues();
      try {
        addValues0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      AddValues addValues0 = new AddValues();
      String string0 = addValues0.getRevision();
      assertEquals("8034", string0);
      assertEquals("last", addValues0.getAttributeIndex());
      assertNotNull(string0);
      assertEquals(false, addValues0.getSort());
  }

  @Test
  public void test3()  throws Throwable  {
      AddValues addValues0 = new AddValues();
      String string0 = addValues0.sortTipText();
      assertEquals("Whether to sort the labels alphabetically.", string0);
      assertEquals(false, addValues0.getSort());
      assertEquals("last", addValues0.getAttributeIndex());
  }

  @Test
  public void test4()  throws Throwable  {
      AddValues addValues0 = new AddValues();
      String string0 = addValues0.labelsTipText();
      assertEquals("last", addValues0.getAttributeIndex());
      assertEquals(false, addValues0.getSort());
      assertEquals("Comma-separated list of lables to add.", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      AddValues addValues0 = new AddValues();
      String string0 = addValues0.globalInfo();
      assertEquals(false, addValues0.getSort());
      assertEquals("last", addValues0.getAttributeIndex());
      assertEquals("Adds the labels from the given list to an attribute if they are missing. The labels can also be sorted in an ascending manner. If no labels are provided then only the (optional) sorting applies.", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      AddValues addValues0 = new AddValues();
      String string0 = addValues0.attributeIndexTipText();
      assertEquals(false, addValues0.getSort());
      assertEquals("Sets which attribute to process. This attribute must be nominal (\"first\" and \"last\" are valid values)", string0);
      assertEquals("last", addValues0.getAttributeIndex());
  }

  @Test
  public void test7()  throws Throwable  {
      AddValues addValues0 = new AddValues();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Expected end of range string, found: ";
      stringArray0[1] = "Expected end of range string, found: ";
      addValues0.setOptions(stringArray0);
      assertEquals(false, addValues0.getSort());
      assertEquals("last", addValues0.getAttributeIndex());
  }

  @Test
  public void test8()  throws Throwable  {
      AddValues addValues0 = new AddValues();
      String[] stringArray0 = addValues0.getOptions();
      assertNotNull(stringArray0);
      
      addValues0.setOptions(stringArray0);
      assertEquals(false, addValues0.getSort());
      assertEquals("", addValues0.getLabels());
      assertEquals("last", addValues0.getAttributeIndex());
  }

  @Test
  public void test9()  throws Throwable  {
      AddValues addValues0 = new AddValues();
      addValues0.setLabels("tngUaC{HxBft;ld-g");
      String[] stringArray0 = addValues0.getOptions();
      assertNotNull(stringArray0);
      
      addValues0.setOptions(stringArray0);
      assertEquals("'\\'tngUaC{HxBft;ld-g\\''", addValues0.getLabels());
      assertEquals(false, addValues0.getSort());
  }

  @Test
  public void test10()  throws Throwable  {
      AddValues addValues0 = new AddValues();
      assertEquals(false, addValues0.getSort());
      
      addValues0.setSort(true);
      addValues0.getOptions();
      assertEquals(true, addValues0.getSort());
  }

  @Test
  public void test11()  throws Throwable  {
      AddValues addValues0 = new AddValues();
      double[] doubleArray0 = new double[4];
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      // Undeclared exception!
      try {
        addValues0.input((Instance) denseInstance0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * No input instance format defined
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      AddValues addValues0 = new AddValues();
      addValues0.setLabels("Expected end of range string, found: ");
      String[] stringArray0 = addValues0.getOptions();
      assertEquals("'Expected end of range string',' found: '", addValues0.getLabels());
      assertNotNull(stringArray0);
  }

  @Test
  public void test13()  throws Throwable  {
      AddValues addValues0 = new AddValues();
      addValues0.setLabels("M[(\",yU\"r\"~");
      assertEquals("'M[(,yU',r~", addValues0.getLabels());
  }

  @Test
  public void test14()  throws Throwable  {
      AddValues addValues0 = new AddValues();
      addValues0.setLabels(",4[<U0j8Pq|Q}");
      assertEquals("'4[<U0j8Pq|Q}'", addValues0.getLabels());
  }
}
