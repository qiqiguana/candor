/*
 * This file was automatically generated by EvoSuite
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.AddExpression;

@RunWith(EvoSuiteRunner.class)
public class AddExpressionEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      AddExpression addExpression0 = new AddExpression();
      String[] stringArray0 = addExpression0.getOptions();
      assertNotNull(stringArray0);
      
      addExpression0.setOptions(stringArray0);
      assertEquals(false, addExpression0.getDebug());
      assertEquals("expression", addExpression0.getName());
      assertEquals("a1^2", addExpression0.getExpression());
  }

  @Test
  public void test1()  throws Throwable  {
      AddExpression addExpression0 = new AddExpression();
      String string0 = addExpression0.globalInfo();
      assertEquals("expression", addExpression0.getName());
      assertEquals("a1^2", addExpression0.getExpression());
      assertEquals(false, addExpression0.getDebug());
      assertEquals("An instance filter that creates a new attribute by applying a mathematical expression to existing attributes. The expression can contain attribute references and numeric constants. Supported operators are :\n+, -, *, /, ^, log, abs, cos, exp, sqrt, floor, ceil, rint, tan, sin, (, )\nAttributes are specified by prefixing with 'a', eg. a7 is attribute number 7 (starting from 1).\nExample expression : a1^2*a5/log(a7*4.0).", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      AddExpression addExpression0 = new AddExpression();
      String string0 = addExpression0.nameTipText();
      assertEquals("a1^2", addExpression0.getExpression());
      assertEquals("expression", addExpression0.getName());
      assertEquals(false, addExpression0.getDebug());
      assertEquals("Set the name of the new attribute.", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      AddExpression addExpression0 = new AddExpression();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",3[1^bSQrB";
      stringArray0[1] = ",3[1^bSQrB";
      stringArray0[2] = ",3[1^bSQrB";
      stringArray0[3] = ",3[1^bSQrB";
      stringArray0[4] = ",3[1^bSQrB";
      Filter.runFilter((Filter) addExpression0, stringArray0);
      assertEquals(false, addExpression0.getDebug());
      assertEquals("expression", addExpression0.getName());
      assertEquals("a1^2", addExpression0.getExpression());
  }

  @Test
  public void test4()  throws Throwable  {
      AddExpression addExpression0 = new AddExpression();
      String string0 = addExpression0.debugTipText();
      assertEquals(false, addExpression0.getDebug());
      assertEquals("Set debug mode. If true then the new attribute will be named with the postfix parse of the supplied expression.", string0);
      assertEquals("a1^2", addExpression0.getExpression());
      assertEquals("expression", addExpression0.getName());
  }

  @Test
  public void test5()  throws Throwable  {
      AddExpression addExpression0 = new AddExpression();
      String string0 = addExpression0.getRevision();
      assertEquals("a1^2", addExpression0.getExpression());
      assertNotNull(string0);
      assertEquals("8034", string0);
      assertEquals(false, addExpression0.getDebug());
      assertEquals("expression", addExpression0.getName());
  }

  @Test
  public void test6()  throws Throwable  {
      AddExpression addExpression0 = new AddExpression();
      try {
        addExpression0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      AddExpression addExpression0 = new AddExpression();
      String string0 = addExpression0.expressionTipText();
      assertEquals(false, addExpression0.getDebug());
      assertEquals("a1^2", addExpression0.getExpression());
      assertEquals("Set the math expression to apply. Eg. a1^2*a5/log(a7*4.0)", string0);
      assertEquals("expression", addExpression0.getName());
  }

  @Test
  public void test8()  throws Throwable  {
      AddExpression addExpression0 = new AddExpression();
      assertEquals(false, addExpression0.getDebug());
      
      addExpression0.setDebug(true);
      addExpression0.getOptions();
      assertEquals(true, addExpression0.getDebug());
  }

  @Test
  public void test9()  throws Throwable  {
      AddExpression addExpression0 = new AddExpression();
      double[] doubleArray0 = new double[6];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-886.2839422931809), doubleArray0);
      DenseInstance denseInstance0 = new DenseInstance((Instance) binarySparseInstance0);
      try {
        addExpression0.input((Instance) denseInstance0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * No input instance format defined
         */
      }
  }
}
