/*
 * This file was automatically generated by EvoSuite
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Enumeration;
import org.junit.BeforeClass;
import weka.core.BinarySparseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.filters.unsupervised.attribute.NominalToBinary;

@RunWith(EvoSuiteRunner.class)
public class NominalToBinaryEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      NominalToBinary nominalToBinary0 = new NominalToBinary();
      assertNotNull(nominalToBinary0);
      
      try {
        nominalToBinary0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      NominalToBinary nominalToBinary0 = new NominalToBinary();
      assertNotNull(nominalToBinary0);
      
      String string0 = nominalToBinary0.attributeIndicesTipText();
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string0);
      assertEquals("first-last", nominalToBinary0.getAttributeIndices());
      assertEquals(false, nominalToBinary0.getTransformAllValues());
      assertEquals(false, nominalToBinary0.getBinaryAttributesNominal());
  }

  @Test
  public void test2()  throws Throwable  {
      NominalToBinary nominalToBinary0 = new NominalToBinary();
      assertNotNull(nominalToBinary0);
      
      String[] stringArray0 = nominalToBinary0.getOptions();
      assertNotNull(stringArray0);
      
      nominalToBinary0.setOptions(stringArray0);
      assertEquals(false, nominalToBinary0.getInvertSelection());
      assertEquals(false, nominalToBinary0.getBinaryAttributesNominal());
      assertEquals(false, nominalToBinary0.getTransformAllValues());
      assertEquals("first-last", nominalToBinary0.getAttributeIndices());
  }

  @Test
  public void test3()  throws Throwable  {
      NominalToBinary nominalToBinary0 = new NominalToBinary();
      assertNotNull(nominalToBinary0);
      
      String string0 = nominalToBinary0.globalInfo();
      assertEquals(false, nominalToBinary0.getBinaryAttributesNominal());
      assertEquals("first-last", nominalToBinary0.getAttributeIndices());
      assertEquals(false, nominalToBinary0.getTransformAllValues());
      assertEquals("Converts all nominal attributes into binary numeric attributes. An attribute with k values is transformed into k binary attributes if the class is nominal (using the one-attribute-per-value approach). Binary attributes are left binary, if option '-A' is not given.If the class is numeric, you might want to use the supervised version of this filter.", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      NominalToBinary nominalToBinary0 = new NominalToBinary();
      assertNotNull(nominalToBinary0);
      
      String string0 = nominalToBinary0.getRevision();
      assertEquals("8096", string0);
      assertEquals(false, nominalToBinary0.getTransformAllValues());
      assertNotNull(string0);
      assertEquals("first-last", nominalToBinary0.getAttributeIndices());
      assertEquals(false, nominalToBinary0.getBinaryAttributesNominal());
  }

  @Test
  public void test5()  throws Throwable  {
      NominalToBinary nominalToBinary0 = new NominalToBinary();
      assertEquals(false, nominalToBinary0.getTransformAllValues());
      assertNotNull(nominalToBinary0);
      
      nominalToBinary0.setTransformAllValues(true);
      nominalToBinary0.getOptions();
      assertEquals(true, nominalToBinary0.getTransformAllValues());
  }

  @Test
  public void test6()  throws Throwable  {
      NominalToBinary nominalToBinary0 = new NominalToBinary();
      assertNotNull(nominalToBinary0);
      
      String string0 = nominalToBinary0.transformAllValuesTipText();
      assertEquals("Whether all nominal values are turned into new attributes, not only if there are more than 2.", string0);
      assertEquals(false, nominalToBinary0.getTransformAllValues());
      assertEquals(false, nominalToBinary0.getBinaryAttributesNominal());
      assertEquals("first-last", nominalToBinary0.getAttributeIndices());
  }

  @Test
  public void test7()  throws Throwable  {
      NominalToBinary nominalToBinary0 = new NominalToBinary();
      assertNotNull(nominalToBinary0);
      
      String string0 = nominalToBinary0.invertSelectionTipText();
      assertEquals(false, nominalToBinary0.getTransformAllValues());
      assertEquals("first-last", nominalToBinary0.getAttributeIndices());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
      assertEquals(false, nominalToBinary0.getBinaryAttributesNominal());
  }

  @Test
  public void test8()  throws Throwable  {
      NominalToBinary nominalToBinary0 = new NominalToBinary();
      assertNotNull(nominalToBinary0);
      
      Enumeration<Object> enumeration0 = nominalToBinary0.listOptions();
      assertNotNull(enumeration0);
      assertEquals(false, nominalToBinary0.getTransformAllValues());
      assertEquals("first-last", nominalToBinary0.getAttributeIndices());
      assertEquals(false, nominalToBinary0.getBinaryAttributesNominal());
  }

  @Test
  public void test9()  throws Throwable  {
      NominalToBinary nominalToBinary0 = new NominalToBinary();
      assertNotNull(nominalToBinary0);
      
      String string0 = nominalToBinary0.binaryAttributesNominalTipText();
      assertEquals("Whether resulting binary attributes will be nominal.", string0);
      assertEquals("first-last", nominalToBinary0.getAttributeIndices());
      assertEquals(false, nominalToBinary0.getTransformAllValues());
      assertEquals(false, nominalToBinary0.getBinaryAttributesNominal());
  }

  @Test
  public void test10()  throws Throwable  {
      NominalToBinary nominalToBinary0 = new NominalToBinary();
      assertNotNull(nominalToBinary0);
      
      nominalToBinary0.setInvertSelection(true);
      String[] stringArray0 = nominalToBinary0.getOptions();
      assertNotNull(stringArray0);
      assertEquals(true, nominalToBinary0.getInvertSelection());
      assertEquals("first-last", nominalToBinary0.getAttributeIndices());
  }

  @Test
  public void test11()  throws Throwable  {
      NominalToBinary nominalToBinary0 = new NominalToBinary();
      assertNotNull(nominalToBinary0);
      
      int[] intArray0 = new int[5];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1120.1294293278875), intArray0, (-724));
      // Undeclared exception!
      try {
        nominalToBinary0.input((Instance) binarySparseInstance0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * No input instance format defined
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      NominalToBinary nominalToBinary0 = new NominalToBinary();
      assertNotNull(nominalToBinary0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.";
      stringArray0[1] = "Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.";
      stringArray0[2] = "Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.";
      stringArray0[3] = "Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.";
      nominalToBinary0.setOptions(stringArray0);
      assertEquals(false, nominalToBinary0.getTransformAllValues());
      assertEquals("first-last", nominalToBinary0.getAttributeIndices());
      assertEquals(false, nominalToBinary0.getInvertSelection());
      assertEquals(false, nominalToBinary0.getBinaryAttributesNominal());
  }

  @Test
  public void test13()  throws Throwable  {
      NominalToBinary nominalToBinary0 = new NominalToBinary();
      assertNotNull(nominalToBinary0);
      assertEquals(false, nominalToBinary0.getBinaryAttributesNominal());
      
      nominalToBinary0.setBinaryAttributesNominal(true);
      nominalToBinary0.getOptions();
      assertEquals(true, nominalToBinary0.getBinaryAttributesNominal());
  }
}
