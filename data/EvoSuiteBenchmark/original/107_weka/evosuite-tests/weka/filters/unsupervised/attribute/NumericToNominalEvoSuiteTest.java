/*
 * This file was automatically generated by EvoSuite
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.ArrayList;
import java.util.Enumeration;
import org.junit.BeforeClass;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.filters.unsupervised.attribute.NumericToNominal;

@RunWith(EvoSuiteRunner.class)
public class NumericToNominalEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      NumericToNominal numericToNominal0 = new NumericToNominal();
      String[] stringArray0 = numericToNominal0.getOptions();
      assertEquals("first-last", numericToNominal0.getAttributeIndices());
      assertNotNull(stringArray0);
      
      numericToNominal0.setOptions(stringArray0);
      assertEquals(false, numericToNominal0.getInvertSelection());
  }

  @Test
  public void test1()  throws Throwable  {
      NumericToNominal numericToNominal0 = new NumericToNominal();
      Enumeration<Object> enumeration0 = numericToNominal0.listOptions();
      assertNotNull(enumeration0);
      assertEquals("first-last", numericToNominal0.getAttributeIndices());
  }

  @Test
  public void test2()  throws Throwable  {
      NumericToNominal numericToNominal0 = new NumericToNominal();
      String string0 = numericToNominal0.invertSelectionTipText();
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be 'nominalized'; if true, only non-selected attributes will be 'nominalized'.", string0);
      assertEquals("first-last", numericToNominal0.getAttributeIndices());
  }

  @Test
  public void test3()  throws Throwable  {
      NumericToNominal numericToNominal0 = new NumericToNominal();
      Capabilities capabilities0 = numericToNominal0.getCapabilities();
      assertEquals("Capabilities: [Nominal attributes, Binary attributes, Unary attributes, Empty nominal attributes, Numeric attributes, Date attributes, String attributes, Relational attributes, Missing values, No class, Nominal class, Binary class, Unary class, Empty nominal class, Numeric class, Date class, String class, Relational class, Missing class values]\nDependencies: []\nmin # Instance: 0\n", capabilities0.toString());
      assertEquals("first-last", numericToNominal0.getAttributeIndices());
  }

  @Test
  public void test4()  throws Throwable  {
      NumericToNominal numericToNominal0 = new NumericToNominal();
      String string0 = numericToNominal0.attributeIndicesTipText();
      assertEquals("first-last", numericToNominal0.getAttributeIndices());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      NumericToNominal numericToNominal0 = new NumericToNominal();
      int[] intArray0 = new int[1];
      numericToNominal0.setAttributeIndicesArray(intArray0);
      assertEquals("1", numericToNominal0.getAttributeIndices());
  }

  @Test
  public void test6()  throws Throwable  {
      NumericToNominal numericToNominal0 = new NumericToNominal();
      String string0 = numericToNominal0.getRevision();
      assertEquals("first-last", numericToNominal0.getAttributeIndices());
      assertNotNull(string0);
      assertEquals("8575", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      NumericToNominal numericToNominal0 = new NumericToNominal();
      String string0 = numericToNominal0.globalInfo();
      assertEquals("first-last", numericToNominal0.getAttributeIndices());
      assertEquals("A filter for turning numeric attributes into nominal ones. Unlike discretization, it just takes all numeric values and adds them to the list of nominal values of that attribute. Useful after CSV imports, to enforce certain attributes to become nominal, e.g., the class attribute, containing values from 1 to 5.", string0);
  }

  @Test
  public void test8()  throws Throwable  {
      NumericToNominal numericToNominal0 = new NumericToNominal();
      numericToNominal0.setAttributeIndices("");
      String[] stringArray0 = numericToNominal0.getOptions();
      assertNotNull(stringArray0);
      assertEquals("", numericToNominal0.getAttributeIndices());
      
      numericToNominal0.setOptions(stringArray0);
      assertEquals("first-last", numericToNominal0.getAttributeIndices());
  }

  @Test
  public void test9()  throws Throwable  {
      NumericToNominal numericToNominal0 = new NumericToNominal();
      numericToNominal0.setDebug(true);
      String[] stringArray0 = numericToNominal0.getOptions();
      assertEquals("first-last", numericToNominal0.getAttributeIndices());
      assertNotNull(stringArray0);
  }

  @Test
  public void test10()  throws Throwable  {
      NumericToNominal numericToNominal0 = new NumericToNominal();
      numericToNominal0.setInvertSelection(true);
      String[] stringArray0 = numericToNominal0.getOptions();
      assertNotNull(stringArray0);
      assertEquals(true, numericToNominal0.getInvertSelection());
  }

  @Test
  public void test11()  throws Throwable  {
      NumericToNominal numericToNominal0 = new NumericToNominal();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute(")P");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances(")P", arrayList0, 521);
      DenseInstance denseInstance0 = new DenseInstance(521);
      instances0.add((Instance) denseInstance0);
      Instances instances1 = numericToNominal0.determineOutputFormat(instances0);
      assertEquals("@relation )P\n\n@attribute )P {}\n\n@data\n", instances1.toString());
      assertNotNull(instances1);
  }

  @Test
  public void test12()  throws Throwable  {
      NumericToNominal numericToNominal0 = new NumericToNominal();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute(")P");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances(")P", arrayList0, 521);
      double[] doubleArray0 = new double[9];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((double) 521, doubleArray0);
      instances0.add((Instance) binarySparseInstance0);
      Instances instances1 = numericToNominal0.determineOutputFormat(instances0);
      assertNotNull(instances1);
      assertEquals("@relation )P\n\n@attribute )P {0}\n\n@data\n", instances1.toString());
  }

  @Test
  public void test13()  throws Throwable  {
      NumericToNominal numericToNominal0 = new NumericToNominal();
      try {
        numericToNominal0.process((Instances) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
