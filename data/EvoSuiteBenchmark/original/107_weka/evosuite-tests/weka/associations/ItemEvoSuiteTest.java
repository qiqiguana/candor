/*
 * This file was automatically generated by EvoSuite
 */

package weka.associations;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import weka.associations.Item;
import weka.associations.NumericItem;
import weka.core.Attribute;

@RunWith(EvoSuiteRunner.class)
public class ItemEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Attribute attribute0 = new Attribute("#", "#");
      NumericItem.Comparison numericItem_Comparison0 = NumericItem.Comparison.NONE;
      NumericItem numericItem0 = new NumericItem(attribute0, (-28.500046998486614), numericItem_Comparison0);
      int int0 = numericItem0.compareTo((Item) numericItem0);
      assertEquals(0, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      Attribute attribute0 = new Attribute("} expected at end of enumeration", 124);
      NumericItem.Comparison numericItem_Comparison0 = NumericItem.Comparison.EQUAL;
      NumericItem numericItem0 = new NumericItem(attribute0, (double) 124, numericItem_Comparison0);
      numericItem0.decreaseFrequency(124);
      assertEquals(-124, numericItem0.getFrequency());
  }

  @Test
  public void test2()  throws Throwable  {
      Attribute attribute0 = new Attribute("#", "#");
      NumericItem.Comparison numericItem_Comparison0 = NumericItem.Comparison.NONE;
      NumericItem numericItem0 = new NumericItem(attribute0, (-28.500046998486614), numericItem_Comparison0);
      int int0 = numericItem0.hashCode();
      assertEquals(0, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      Attribute attribute0 = new Attribute("} expected at end of enumeration", 124);
      NumericItem.Comparison numericItem_Comparison0 = NumericItem.Comparison.EQUAL;
      NumericItem numericItem0 = new NumericItem(attribute0, (double) 124, numericItem_Comparison0);
      String string0 = numericItem0.toString();
      assertNotNull(string0);
      assertEquals("} expected at end of enumeration = 124", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      Attribute attribute0 = new Attribute("} expected at end of enumeration", 124);
      NumericItem.Comparison numericItem_Comparison0 = NumericItem.Comparison.EQUAL;
      NumericItem numericItem0 = new NumericItem(attribute0, (double) 124, numericItem_Comparison0);
      numericItem0.decreaseFrequency();
      assertEquals(-1, numericItem0.getFrequency());
  }

  @Test
  public void test5()  throws Throwable  {
      Attribute attribute0 = new Attribute("#", "#");
      NumericItem.Comparison numericItem_Comparison0 = NumericItem.Comparison.NONE;
      NumericItem numericItem0 = new NumericItem(attribute0, (-28.500046998486614), numericItem_Comparison0);
      numericItem0.increaseFrequency();
      NumericItem numericItem1 = new NumericItem(attribute0, (-28.500046998486614), numericItem_Comparison0);
      int int0 = numericItem1.compareTo((Item) numericItem0);
      assertEquals(1, numericItem0.getFrequency());
      assertEquals(1, int0);
  }

  @Test
  public void test6()  throws Throwable  {
      Attribute attribute0 = new Attribute("} expected at end of enumeration", 124);
      NumericItem.Comparison numericItem_Comparison0 = NumericItem.Comparison.EQUAL;
      NumericItem numericItem0 = new NumericItem(attribute0, (double) 124, numericItem_Comparison0);
      numericItem0.increaseFrequency(124);
      assertEquals(124, numericItem0.getFrequency());
  }

  @Test
  public void test7()  throws Throwable  {
      Attribute attribute0 = new Attribute("#", "#");
      NumericItem.Comparison numericItem_Comparison0 = NumericItem.Comparison.NONE;
      NumericItem numericItem0 = new NumericItem(attribute0, (-28.500046998486614), numericItem_Comparison0);
      numericItem0.increaseFrequency();
      NumericItem numericItem1 = new NumericItem(attribute0, (-28.500046998486614), numericItem_Comparison0);
      int int0 = numericItem0.compareTo((Item) numericItem1);
      assertEquals(1, numericItem0.getFrequency());
      assertEquals((-1), int0);
  }
}
