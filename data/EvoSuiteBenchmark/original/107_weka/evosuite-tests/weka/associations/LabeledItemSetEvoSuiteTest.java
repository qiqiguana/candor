/*
 * This file was automatically generated by EvoSuite
 */

package weka.associations;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.ArrayList;
import org.junit.BeforeClass;
import weka.associations.LabeledItemSet;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.FastVector;
import weka.core.Instance;
import weka.core.Instances;

@RunWith(EvoSuiteRunner.class)
public class LabeledItemSetEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LabeledItemSet labeledItemSet0 = new LabeledItemSet(1, 1);
      int[] intArray0 = new int[8];
      labeledItemSet0.setItem(intArray0);
      boolean boolean0 = labeledItemSet0.equals((Object) labeledItemSet0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      LabeledItemSet labeledItemSet0 = new LabeledItemSet((-329), (-329));
      String string0 = labeledItemSet0.getRevision();
      assertNotNull(string0);
      assertEquals("8034", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      LabeledItemSet labeledItemSet0 = new LabeledItemSet(12, 12);
      int int0 = labeledItemSet0.support();
      assertEquals(0, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      LabeledItemSet labeledItemSet0 = new LabeledItemSet(834, 834);
      boolean boolean0 = labeledItemSet0.equals((Object) "");
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      LabeledItemSet labeledItemSet0 = new LabeledItemSet(834, 834);
      boolean boolean0 = labeledItemSet0.equalCondset((Object) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 1915);
      try {
        LabeledItemSet.divide(instances0, false);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * For class association rule mining a class attribute has to be specified.
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      LabeledItemSet labeledItemSet0 = new LabeledItemSet((-329), (-329));
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      int[] intArray0 = new int[4];
      labeledItemSet0.setItem(intArray0);
      DenseInstance denseInstance0 = new DenseInstance(834);
      labeledItemSet0.upDateCounter((Instance) denseInstance0, (Instance) binarySparseInstance0);
      assertEquals(0, labeledItemSet0.counter());
  }

  @Test
  public void test7()  throws Throwable  {
      LabeledItemSet labeledItemSet0 = new LabeledItemSet(0, 0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      labeledItemSet0.upDateCounter((Instance) binarySparseInstance0, (Instance) binarySparseInstance0);
      assertEquals(1, labeledItemSet0.support());
      assertEquals(1, labeledItemSet0.counter());
  }

  @Test
  public void test8()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("v", arrayList0, 1);
      LabeledItemSet.upDateCounters((FastVector) null, instances0, instances0);
      assertEquals(true, instances0.isEmpty());
  }

  @Test
  public void test9()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 2062);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2062);
      instances0.add((Instance) binarySparseInstance0);
      // Undeclared exception!
      try {
        LabeledItemSet.upDateCounters((FastVector) null, instances0, instances0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      LabeledItemSet labeledItemSet0 = new LabeledItemSet((-329), (-329));
      int[] intArray0 = new int[4];
      labeledItemSet0.setItem(intArray0);
      FastVector<Object>[] fastVectorArray0 = labeledItemSet0.generateRules((double) 0, true);
      assertNotNull(fastVectorArray0);
  }

  @Test
  public void test11()  throws Throwable  {
      LabeledItemSet labeledItemSet0 = new LabeledItemSet(834, 834);
      int[] intArray0 = new int[8];
      labeledItemSet0.setItem(intArray0);
      FastVector<Object>[] fastVectorArray0 = labeledItemSet0.generateRules((double) 834, false);
      assertNotNull(fastVectorArray0);
  }
}
