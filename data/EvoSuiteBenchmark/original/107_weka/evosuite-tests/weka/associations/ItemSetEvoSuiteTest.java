/*
 * This file was automatically generated by EvoSuite
 */

package weka.associations;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.ArrayList;
import org.junit.BeforeClass;
import weka.associations.ItemSet;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.FastVector;
import weka.core.Instance;
import weka.core.Instances;

@RunWith(EvoSuiteRunner.class)
public class ItemSetEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      int[] intArray0 = new int[12];
      ItemSet itemSet0 = new ItemSet((-1688), intArray0);
      int int0 = itemSet0.counter();
      assertEquals(false, itemSet0.getTreatZeroAsMissing());
      assertEquals(1, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      ItemSet itemSet0 = new ItemSet((-303));
      String string0 = itemSet0.getRevision();
      assertEquals(false, itemSet0.getTreatZeroAsMissing());
      assertNotNull(string0);
      assertEquals("8034", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      int[] intArray0 = new int[12];
      ItemSet itemSet0 = new ItemSet((-1688), intArray0);
      itemSet0.setTreatZeroAsMissing(true);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      boolean boolean0 = itemSet0.containedBy((Instance) binarySparseInstance0);
      assertEquals(true, itemSet0.getTreatZeroAsMissing());
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      int[] intArray0 = new int[7];
      ItemSet itemSet0 = new ItemSet((-1688), intArray0);
      itemSet0.setItem(intArray0);
      assertEquals(1, itemSet0.support());
      assertEquals(false, itemSet0.getTreatZeroAsMissing());
  }

  @Test
  public void test4()  throws Throwable  {
      int[] intArray0 = new int[15];
      ItemSet itemSet0 = new ItemSet(intArray0);
      boolean boolean0 = itemSet0.equals((Object) itemSet0);
      assertEquals(false, itemSet0.getTreatZeroAsMissing());
      assertEquals(true, boolean0);
      assertEquals(0, itemSet0.counter());
  }

  @Test
  public void test5()  throws Throwable  {
      int[] intArray0 = new int[12];
      ItemSet itemSet0 = new ItemSet((-1688), intArray0);
      int[] intArray1 = itemSet0.items();
      assertEquals(false, itemSet0.getTreatZeroAsMissing());
      assertNotNull(intArray1);
      assertEquals(1, itemSet0.support());
      assertEquals(1, itemSet0.counter());
  }

  @Test
  public void test6()  throws Throwable  {
      ItemSet itemSet0 = new ItemSet(46);
      itemSet0.setCounter(46);
      assertEquals(46, itemSet0.support());
      assertEquals(false, itemSet0.getTreatZeroAsMissing());
  }

  @Test
  public void test7()  throws Throwable  {
      int[] intArray0 = new int[12];
      ItemSet itemSet0 = new ItemSet((-1688), intArray0);
      int int0 = itemSet0.support();
      assertEquals(false, itemSet0.getTreatZeroAsMissing());
      assertEquals(1, int0);
  }

  @Test
  public void test8()  throws Throwable  {
      int[] intArray0 = new int[7];
      ItemSet itemSet0 = new ItemSet((-1688), intArray0);
      boolean boolean0 = itemSet0.getTreatZeroAsMissing();
      assertEquals(false, boolean0);
      assertEquals(1, itemSet0.support());
  }

  @Test
  public void test9()  throws Throwable  {
      int[] intArray0 = new int[2];
      ItemSet itemSet0 = new ItemSet(intArray0);
      itemSet0.itemAt(0);
      assertEquals(0, itemSet0.counter());
      assertEquals(false, itemSet0.getTreatZeroAsMissing());
      assertEquals(0, itemSet0.support());
  }

  @Test
  public void test10()  throws Throwable  {
      ItemSet itemSet0 = new ItemSet(46);
      // Undeclared exception!
      try {
        itemSet0.setItemAt(46, 46);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[18];
      ItemSet itemSet0 = new ItemSet(1596, intArray0);
      DenseInstance denseInstance0 = new DenseInstance(1596);
      itemSet0.upDateCounter((Instance) denseInstance0);
      assertEquals(false, itemSet0.getTreatZeroAsMissing());
      assertEquals(1, itemSet0.support());
  }

  @Test
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-1688);
      intArray0[1] = (-1688);
      intArray0[3] = (-1688);
      intArray0[4] = (-1688);
      intArray0[5] = (-1688);
      intArray0[6] = (-1688);
      intArray0[2] = (-1688);
      ItemSet itemSet0 = new ItemSet((-1688), intArray0);
      itemSet0.setTreatZeroAsMissing(true);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      itemSet0.upDateCounter((Instance) binarySparseInstance0);
      assertEquals(2, itemSet0.support());
      assertEquals(2, itemSet0.counter());
  }

  @Test
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[7];
      ItemSet itemSet0 = new ItemSet((-1688), intArray0);
      assertEquals(false, itemSet0.getTreatZeroAsMissing());
      
      itemSet0.setTreatZeroAsMissing(true);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      intArray0[0] = 1;
      itemSet0.upDateCounter((Instance) binarySparseInstance0);
      assertEquals(true, itemSet0.getTreatZeroAsMissing());
      assertEquals(1, itemSet0.counter());
  }

  @Test
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[12];
      ItemSet itemSet0 = new ItemSet((-1688), intArray0);
      intArray0[0] = (-1688);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      itemSet0.upDateCounter((Instance) binarySparseInstance0);
      assertEquals(2, itemSet0.support());
      assertEquals(2, itemSet0.counter());
  }

  @Test
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[7];
      ItemSet itemSet0 = new ItemSet((-1688), intArray0);
      assertEquals(false, itemSet0.getTreatZeroAsMissing());
      
      itemSet0.setTreatZeroAsMissing(true);
      double[] doubleArray0 = new double[4];
      DenseInstance denseInstance0 = new DenseInstance((double) (-1688), doubleArray0);
      itemSet0.upDateCounter((Instance) denseInstance0);
      assertEquals(true, itemSet0.getTreatZeroAsMissing());
  }

  @Test
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[7];
      ItemSet itemSet0 = new ItemSet((-1688), intArray0);
      assertEquals(false, itemSet0.getTreatZeroAsMissing());
      
      itemSet0.setTreatZeroAsMissing(true);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1688);
      DenseInstance denseInstance0 = new DenseInstance((double) (-1688), doubleArray0);
      itemSet0.upDateCounter((Instance) denseInstance0);
      assertEquals(true, itemSet0.getTreatZeroAsMissing());
      assertEquals(1, itemSet0.support());
  }

  @Test
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[3] = (-303);
      ItemSet itemSet0 = new ItemSet(intArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((double) (-303), intArray0, 33);
      // Undeclared exception!
      try {
        itemSet0.containedBy((Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 4
         */
      }
  }

  @Test
  public void test18()  throws Throwable  {
      ItemSet itemSet0 = new ItemSet(46);
      boolean boolean0 = itemSet0.equals((Object) null);
      assertEquals(false, itemSet0.getTreatZeroAsMissing());
      assertEquals(false, boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      ItemSet itemSet0 = new ItemSet((-611));
      boolean boolean0 = itemSet0.equals((Object) "");
      assertEquals(false, boolean0);
      assertEquals(false, itemSet0.getTreatZeroAsMissing());
  }

  @Test
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[12];
      ItemSet itemSet0 = new ItemSet((-1688), intArray0);
      int int0 = itemSet0.hashCode();
      assertEquals(false, itemSet0.getTreatZeroAsMissing());
      assertEquals(1, itemSet0.counter());
      assertEquals(0, int0);
  }

  @Test
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[7];
      ItemSet itemSet0 = new ItemSet(intArray0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("~t0b?G${q$Dw", arrayList0, 2);
      Attribute attribute0 = new Attribute("~t0b?G${q$Dw");
      arrayList0.add(attribute0);
      intArray0[2] = (-1);
      arrayList0.add(attribute0);
      arrayList0.add(attribute0);
      String string0 = itemSet0.toString(instances0);
      assertEquals("~t0b?G${q$Dw= ~t0b?G${q$Dw= 0", string0);
      assertNotNull(string0);
      assertEquals(false, itemSet0.getTreatZeroAsMissing());
  }

  @Test
  public void test22()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("A\"UMD", arrayList0, 637);
      ItemSet.upDateCounters((FastVector) null, instances0);
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
  }
}
