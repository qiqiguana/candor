/*
 * This file was automatically generated by EvoSuite
 */

package weka.associations;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Enumeration;
import org.junit.BeforeClass;
import weka.associations.CheckAssociator;

@RunWith(EvoSuiteRunner.class)
public class CheckAssociatorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      CheckAssociator checkAssociator0 = new CheckAssociator();
      String string0 = checkAssociator0.getRevision();
      assertNotNull(string0);
      assertEquals("8034", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      CheckAssociator checkAssociator0 = new CheckAssociator();
      String[] stringArray0 = new String[6];
      stringArray0[1] = ":7";
      stringArray0[3] = ":7";
      stringArray0[4] = ":7";
      stringArray0[5] = ":7";
      stringArray0[0] = ":7";
      stringArray0[2] = ":7";
      checkAssociator0.setOptions(stringArray0);
      assertEquals(2, checkAssociator0.getNumNominal());
  }

  @Test
  public void test2()  throws Throwable  {
      CheckAssociator checkAssociator0 = new CheckAssociator();
      Enumeration<Object> enumeration0 = checkAssociator0.listOptions();
      assertEquals(true, enumeration0.hasMoreElements());
  }

  @Test
  public void test3()  throws Throwable  {
      CheckAssociator checkAssociator0 = new CheckAssociator();
      String[] stringArray0 = checkAssociator0.getOptions();
      assertNotNull(stringArray0);
  }

  @Test
  public void test4()  throws Throwable  {
      CheckAssociator checkAssociator0 = new CheckAssociator();
      checkAssociator0.doTests();
      assertEquals(false, checkAssociator0.getDebug());
  }

  @Test
  public void test5()  throws Throwable  {
      CheckAssociator checkAssociator0 = new CheckAssociator();
      checkAssociator0.testsPerClassType((-1), true, true);
      assertEquals(false, checkAssociator0.getDebug());
  }

  @Test
  public void test6()  throws Throwable  {
      CheckAssociator checkAssociator0 = new CheckAssociator();
      checkAssociator0.testsPerClassType(1, true, false);
      assertEquals(false, checkAssociator0.getSilent());
  }

  @Test
  public void test7()  throws Throwable  {
      CheckAssociator checkAssociator0 = new CheckAssociator();
      checkAssociator0.testsWithoutClass(true, true);
      assertEquals(false, checkAssociator0.getSilent());
  }

  @Test
  public void test8()  throws Throwable  {
      CheckAssociator checkAssociator0 = new CheckAssociator();
      boolean[] booleanArray0 = checkAssociator0.canHandleClassAsNthAttribute(true, true, true, true, true, true, (-1), (-1));
      assertNotNull(booleanArray0);
  }

  @Test
  public void test9()  throws Throwable  {
      CheckAssociator checkAssociator0 = new CheckAssociator();
      boolean[] booleanArray0 = checkAssociator0.correctBuildInitialisation(false, false, false, false, false, false, (-1));
      assertNotNull(booleanArray0);
  }

  @Test
  public void test10()  throws Throwable  {
      CheckAssociator checkAssociator0 = new CheckAssociator();
      boolean[] booleanArray0 = checkAssociator0.correctBuildInitialisation(true, true, true, true, true, true, (-1));
      assertNotNull(booleanArray0);
  }

  @Test
  public void test11()  throws Throwable  {
      CheckAssociator checkAssociator0 = new CheckAssociator();
      checkAssociator0.setNumString(0);
      checkAssociator0.setDebug(true);
      checkAssociator0.doTests();
      assertEquals("The,quick,brown,fox,jumps,over,the,lazy,dog", checkAssociator0.getWords());
  }

  @Test
  public void test12()  throws Throwable  {
      CheckAssociator checkAssociator0 = new CheckAssociator();
      checkAssociator0.setDebug(true);
      boolean[] booleanArray0 = checkAssociator0.correctBuildInitialisation(true, true, true, true, true, true, (-1));
      assertNotNull(booleanArray0);
  }

  @Test
  public void test13()  throws Throwable  {
      CheckAssociator checkAssociator0 = new CheckAssociator();
      boolean[] booleanArray0 = checkAssociator0.canHandleMissing(false, false, true, false, true, true, 2, true, true, (-828));
      assertNotNull(booleanArray0);
  }

  @Test
  public void test14()  throws Throwable  {
      CheckAssociator checkAssociator0 = new CheckAssociator();
      // Undeclared exception!
      try {
        checkAssociator0.instanceWeights(false, true, true, true, true, true, 0);
        fail("Expecting exception: Error");
      } catch(Error e) {
        /*
         * Error setting up for tests: weka.associations.Apriori: Cannot handle relational attributes!
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      CheckAssociator checkAssociator0 = new CheckAssociator();
      checkAssociator0.setDebug(true);
      checkAssociator0.testsWithoutClass(true, false);
      assertEquals(1, checkAssociator0.getNumRelational());
  }

  @Test
  public void test16()  throws Throwable  {
      CheckAssociator checkAssociator0 = new CheckAssociator();
      boolean[] booleanArray0 = checkAssociator0.datasetIntegrity(true, true, true, true, true, true, (-1), true, true);
      assertNotNull(booleanArray0);
  }

  @Test
  public void test17()  throws Throwable  {
      CheckAssociator checkAssociator0 = new CheckAssociator();
      checkAssociator0.setDebug(true);
      boolean[] booleanArray0 = checkAssociator0.datasetIntegrity(false, false, true, false, false, true, 1, false, true);
      assertNotNull(booleanArray0);
  }

  @Test
  public void test18()  throws Throwable  {
      CheckAssociator checkAssociator0 = new CheckAssociator();
      // Undeclared exception!
      try {
        checkAssociator0.testsPerClassType(330, true, true);
        fail("Expecting exception: Error");
      } catch(Error e) {
        /*
         * Error setting up for tests: Attribute type '330' unknown!
         */
      }
  }
}
