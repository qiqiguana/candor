/*
 * This file was automatically generated by EvoSuite
 */

package weka.associations;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.ArrayList;
import java.util.List;
import org.junit.BeforeClass;
import weka.associations.BinaryItem;
import weka.associations.NominalItem;
import weka.core.Attribute;
import weka.core.Instances;

@RunWith(EvoSuiteRunner.class)
public class NominalItemEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 108);
      Attribute attribute0 = new Attribute("", instances0, 108);
      NominalItem nominalItem0 = new NominalItem(attribute0, 108);
      assertNotNull(nominalItem0);
      
      BinaryItem binaryItem0 = new BinaryItem(attribute0, 108);
      boolean boolean0 = nominalItem0.equals((Object) binaryItem0);
      assertEquals(108, nominalItem0.getValueIndex());
      assertEquals(true, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 125);
      Attribute attribute0 = new Attribute("", instances0, 125);
      BinaryItem binaryItem0 = new BinaryItem(attribute0, 125);
      assertNotNull(binaryItem0);
      
      String string0 = binaryItem0.getItemValueAsString();
      assertEquals(125, binaryItem0.getValueIndex());
      assertNotNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      Attribute attribute0 = new Attribute("r~D|$~}Eln", (List<String>) null);
      BinaryItem binaryItem0 = new BinaryItem(attribute0, 0);
      assertNotNull(binaryItem0);
      
      String string0 = binaryItem0.getComparisonAsString();
      assertEquals("=", string0);
      assertEquals(0, binaryItem0.getValueIndex());
  }

  @Test
  public void test3()  throws Throwable  {
      Attribute attribute0 = new Attribute("\"k~");
      NominalItem nominalItem0 = null;
      try {
        nominalItem0 = new NominalItem(attribute0, 598);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * NominalItem must be constructed using a nominal attribute
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      Attribute attribute0 = new Attribute("r~D|$~}Eln", (List<String>) null);
      BinaryItem binaryItem0 = new BinaryItem(attribute0, 0);
      assertNotNull(binaryItem0);
      
      String string0 = binaryItem0.toString();
      assertNotNull(string0);
      assertEquals("r~D|$~}Eln=", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      Attribute attribute0 = new Attribute("r~D|$~}Eln", (List<String>) null);
      NominalItem nominalItem0 = new NominalItem(attribute0, 0);
      assertNotNull(nominalItem0);
      
      String string0 = nominalItem0.toString(true);
      assertEquals("r~D|$~}Eln=", nominalItem0.toString());
      assertEquals("r~D|$~}Eln=:0", string0);
      assertNotNull(string0);
  }

  @Test
  public void test6()  throws Throwable  {
      Attribute attribute0 = new Attribute("", (List<String>) null);
      NominalItem nominalItem0 = new NominalItem(attribute0, (-4));
      assertNotNull(nominalItem0);
      
      boolean boolean0 = nominalItem0.equals((Object) "");
      assertEquals(false, boolean0);
      assertEquals(0, nominalItem0.getValueIndex());
  }

  @Test
  public void test7()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 125);
      Attribute attribute0 = new Attribute("", instances0, 125);
      BinaryItem binaryItem0 = new BinaryItem(attribute0, 125);
      assertNotNull(binaryItem0);
      
      NominalItem nominalItem0 = new NominalItem(attribute0, (-1926));
      boolean boolean0 = nominalItem0.equals((Object) binaryItem0);
      assertEquals(false, boolean0);
      assertEquals(-1926, nominalItem0.getValueIndex());
  }
}
