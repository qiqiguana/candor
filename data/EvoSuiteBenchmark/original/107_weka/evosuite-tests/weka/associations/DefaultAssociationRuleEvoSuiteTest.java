/*
 * This file was automatically generated by EvoSuite
 */

package weka.associations;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import org.junit.BeforeClass;
import weka.associations.DefaultAssociationRule;
import weka.associations.Item;

@RunWith(EvoSuiteRunner.class)
public class DefaultAssociationRuleEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DefaultAssociationRule.METRIC_TYPE defaultAssociationRule_METRIC_TYPE0 = DefaultAssociationRule.METRIC_TYPE.CONVICTION;
      LinkedList<Item> linkedList0 = new LinkedList<Item>();
      DefaultAssociationRule defaultAssociationRule0 = new DefaultAssociationRule((Collection<Item>) linkedList0, (Collection<Item>) linkedList0, defaultAssociationRule_METRIC_TYPE0, (-1294), (-1294), (-1294), (-1294));
      String string0 = defaultAssociationRule0.toString();
      assertNotNull(string0);
      assertEquals(0.0, defaultAssociationRule0.getPrimaryMetricValue(), 0.01D);
      assertEquals("[]: -1294 ==> []: -1294   conf:(1) lift:(1) lev:(0) <conv:(0)> ", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      DefaultAssociationRule.METRIC_TYPE defaultAssociationRule_METRIC_TYPE0 = DefaultAssociationRule.METRIC_TYPE.CONVICTION;
      String string0 = defaultAssociationRule_METRIC_TYPE0.toXML(10, 10, 10, 10);
      assertEquals("<CRITERE name=\"conv\" value=\" 0\"/>", string0);
      assertNotNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      DefaultAssociationRule.METRIC_TYPE defaultAssociationRule_METRIC_TYPE0 = DefaultAssociationRule.METRIC_TYPE.LEVERAGE;
      String string0 = defaultAssociationRule_METRIC_TYPE0.toString();
      assertEquals("lev", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      DefaultAssociationRule.METRIC_TYPE defaultAssociationRule_METRIC_TYPE0 = DefaultAssociationRule.METRIC_TYPE.CONVICTION;
      DefaultAssociationRule defaultAssociationRule0 = new DefaultAssociationRule((Collection<Item>) null, (Collection<Item>) null, defaultAssociationRule_METRIC_TYPE0, 10, 10, 10, 10);
      int int0 = defaultAssociationRule0.getTotalSupport();
      assertEquals(10, int0);
      assertEquals(0.0, defaultAssociationRule0.getPrimaryMetricValue(), 0.01D);
      assertEquals(10, defaultAssociationRule0.getPremiseSupport());
  }

  @Test
  public void test4()  throws Throwable  {
      DefaultAssociationRule.METRIC_TYPE defaultAssociationRule_METRIC_TYPE0 = DefaultAssociationRule.METRIC_TYPE.LIFT;
      DefaultAssociationRule defaultAssociationRule0 = new DefaultAssociationRule((Collection<Item>) null, (Collection<Item>) null, defaultAssociationRule_METRIC_TYPE0, 1534, 1534, 1534, 1534);
      defaultAssociationRule0.getConsequence();
      assertEquals(1.0, defaultAssociationRule0.getPrimaryMetricValue(), 0.01D);
      assertEquals(1534, defaultAssociationRule0.getTotalSupport());
  }

  @Test
  public void test5()  throws Throwable  {
      DefaultAssociationRule.METRIC_TYPE defaultAssociationRule_METRIC_TYPE0 = DefaultAssociationRule.METRIC_TYPE.LIFT;
      ArrayList<Item> arrayList0 = new ArrayList<Item>();
      DefaultAssociationRule defaultAssociationRule0 = new DefaultAssociationRule((Collection<Item>) arrayList0, (Collection<Item>) arrayList0, defaultAssociationRule_METRIC_TYPE0, 513, 513, 513, 513);
      String string0 = defaultAssociationRule0.getPrimaryMetricName();
      assertNotNull(string0);
      assertEquals("Lift", string0);
      assertEquals(1.0, defaultAssociationRule0.getPrimaryMetricValue(), 0.01D);
  }

  @Test
  public void test6()  throws Throwable  {
      DefaultAssociationRule.METRIC_TYPE defaultAssociationRule_METRIC_TYPE0 = DefaultAssociationRule.METRIC_TYPE.LIFT;
      ArrayList<Item> arrayList0 = new ArrayList<Item>();
      DefaultAssociationRule defaultAssociationRule0 = new DefaultAssociationRule((Collection<Item>) arrayList0, (Collection<Item>) arrayList0, defaultAssociationRule_METRIC_TYPE0, 513, 513, 513, 513);
      int int0 = defaultAssociationRule0.getTotalTransactions();
      assertEquals("[]: 513 ==> []: 513   conf:(1) <lift:(1)> lev:(0) conv:(0) ", defaultAssociationRule0.toString());
      assertEquals(513, int0);
  }

  @Test
  public void test7()  throws Throwable  {
      DefaultAssociationRule.METRIC_TYPE defaultAssociationRule_METRIC_TYPE0 = DefaultAssociationRule.METRIC_TYPE.LEVERAGE;
      DefaultAssociationRule defaultAssociationRule0 = new DefaultAssociationRule((Collection<Item>) null, (Collection<Item>) null, defaultAssociationRule_METRIC_TYPE0, (-14), (-14), (-14), (-14));
      double double0 = defaultAssociationRule0.getPrimaryMetricValue();
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test8()  throws Throwable  {
      DefaultAssociationRule.METRIC_TYPE defaultAssociationRule_METRIC_TYPE0 = DefaultAssociationRule.METRIC_TYPE.LIFT;
      ArrayList<Item> arrayList0 = new ArrayList<Item>();
      DefaultAssociationRule defaultAssociationRule0 = new DefaultAssociationRule((Collection<Item>) arrayList0, (Collection<Item>) arrayList0, defaultAssociationRule_METRIC_TYPE0, 513, 513, 513, 513);
      Collection<Item> collection0 = defaultAssociationRule0.getPremise();
      assertEquals("[]: 513 ==> []: 513   conf:(1) <lift:(1)> lev:(0) conv:(0) ", defaultAssociationRule0.toString());
      assertNotNull(collection0);
      assertEquals(1.0, defaultAssociationRule0.getPrimaryMetricValue(), 0.01D);
  }

  @Test
  public void test9()  throws Throwable  {
      DefaultAssociationRule.METRIC_TYPE defaultAssociationRule_METRIC_TYPE0 = DefaultAssociationRule.METRIC_TYPE.LIFT;
      ArrayList<Item> arrayList0 = new ArrayList<Item>();
      DefaultAssociationRule defaultAssociationRule0 = new DefaultAssociationRule((Collection<Item>) arrayList0, (Collection<Item>) arrayList0, defaultAssociationRule_METRIC_TYPE0, 513, 513, 513, 513);
      int int0 = defaultAssociationRule0.getConsequenceSupport();
      assertEquals("[]: 513 ==> []: 513   conf:(1) <lift:(1)> lev:(0) conv:(0) ", defaultAssociationRule0.toString());
      assertEquals(513, int0);
  }

  @Test
  public void test10()  throws Throwable  {
      DefaultAssociationRule.METRIC_TYPE defaultAssociationRule_METRIC_TYPE0 = DefaultAssociationRule.METRIC_TYPE.LIFT;
      DefaultAssociationRule defaultAssociationRule0 = new DefaultAssociationRule((Collection<Item>) null, (Collection<Item>) null, defaultAssociationRule_METRIC_TYPE0, 1534, 1534, 1534, 1534);
      int int0 = defaultAssociationRule0.getPremiseSupport();
      assertEquals(1534, int0);
      assertEquals(1.0, defaultAssociationRule0.getPrimaryMetricValue(), 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      DefaultAssociationRule.METRIC_TYPE defaultAssociationRule_METRIC_TYPE0 = DefaultAssociationRule.METRIC_TYPE.LEVERAGE;
      DefaultAssociationRule defaultAssociationRule0 = new DefaultAssociationRule((Collection<Item>) null, (Collection<Item>) null, defaultAssociationRule_METRIC_TYPE0, (-14), (-14), (-14), (-14));
      defaultAssociationRule0.getNumberOfMetricsForRule();
      assertEquals(0.0, defaultAssociationRule0.getPrimaryMetricValue(), 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      DefaultAssociationRule.METRIC_TYPE defaultAssociationRule_METRIC_TYPE0 = DefaultAssociationRule.METRIC_TYPE.CONVICTION;
      LinkedList<Item> linkedList0 = new LinkedList<Item>();
      DefaultAssociationRule defaultAssociationRule0 = new DefaultAssociationRule((Collection<Item>) linkedList0, (Collection<Item>) linkedList0, defaultAssociationRule_METRIC_TYPE0, (-1294), (-1294), (-1294), (-1294));
      double[] doubleArray0 = defaultAssociationRule0.getMetricValuesForRule();
      assertEquals(0.0, defaultAssociationRule0.getPrimaryMetricValue(), 0.01D);
      assertNotNull(doubleArray0);
      assertEquals("[]: -1294 ==> []: -1294   conf:(1) lift:(1) lev:(0) <conv:(0)> ", defaultAssociationRule0.toString());
  }

  @Test
  public void test13()  throws Throwable  {
      DefaultAssociationRule.METRIC_TYPE defaultAssociationRule_METRIC_TYPE0 = DefaultAssociationRule.METRIC_TYPE.LEVERAGE;
      DefaultAssociationRule defaultAssociationRule0 = new DefaultAssociationRule((Collection<Item>) null, (Collection<Item>) null, defaultAssociationRule_METRIC_TYPE0, (-14), (-14), (-14), (-14));
      try {
        defaultAssociationRule0.getNamedMetricValue("lev");
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * [AssociationRule] Unknown metric: lev
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      DefaultAssociationRule.METRIC_TYPE defaultAssociationRule_METRIC_TYPE0 = DefaultAssociationRule.METRIC_TYPE.CONVICTION;
      LinkedList<Item> linkedList0 = new LinkedList<Item>();
      DefaultAssociationRule defaultAssociationRule0 = new DefaultAssociationRule((Collection<Item>) linkedList0, (Collection<Item>) linkedList0, defaultAssociationRule_METRIC_TYPE0, (-1294), (-1294), (-1294), (-1294));
      String[] stringArray0 = defaultAssociationRule0.getMetricNamesForRule();
      assertNotNull(stringArray0);
      assertEquals("[]: -1294 ==> []: -1294   conf:(1) lift:(1) lev:(0) <conv:(0)> ", defaultAssociationRule0.toString());
      assertEquals(-1294, defaultAssociationRule0.getTotalSupport());
  }
}
