/*
 * This file was automatically generated by EvoSuite
 */

package weka.associations;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.ArrayList;
import java.util.Enumeration;
import org.junit.BeforeClass;
import weka.associations.Associator;
import weka.associations.FilteredAssociationRules;
import weka.associations.FilteredAssociator;
import weka.core.Attribute;
import weka.core.Capabilities;
import weka.core.FindWithCapabilities;
import weka.core.Instances;
import weka.core.TestInstances;
import weka.core.UnassignedClassException;
import weka.filters.AllFilter;
import weka.filters.Filter;

@RunWith(EvoSuiteRunner.class)
public class FilteredAssociatorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      assertNotNull(filteredAssociator0);
      
      String[] stringArray0 = filteredAssociator0.getOptions();
      assertNotNull(stringArray0);
      
      filteredAssociator0.setOptions(stringArray0);
      assertEquals(-1, filteredAssociator0.getClassIndex());
      assertEquals("weka.filters.MultiFilter -F \"weka.filters.unsupervised.attribute.ReplaceMissingValues \"", filteredAssociator0.getFilterSpec());
  }

  @Test
  public void test1()  throws Throwable  {
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      assertNotNull(filteredAssociator0);
      
      String string0 = filteredAssociator0.globalInfo();
      assertEquals("weka.filters.MultiFilter -F \"weka.filters.unsupervised.attribute.ReplaceMissingValues \"", filteredAssociator0.getFilterSpec());
      assertEquals("Class for running an arbitrary associator on data that has been passed through an arbitrary filter. Like the associator, the structure of the filter is based exclusively on the training data and test instances will be processed by the filter without changing their structure.", string0);
      assertEquals(-1, filteredAssociator0.getClassIndex());
  }

  @Test
  public void test2()  throws Throwable  {
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      assertNotNull(filteredAssociator0);
      
      String string0 = filteredAssociator0.filterTipText();
      assertEquals("The filter to be used.", string0);
      assertEquals(-1, filteredAssociator0.getClassIndex());
      assertEquals("weka.filters.MultiFilter -F \"weka.filters.unsupervised.attribute.ReplaceMissingValues \"", filteredAssociator0.getFilterSpec());
  }

  @Test
  public void test3()  throws Throwable  {
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      assertNotNull(filteredAssociator0);
      
      String string0 = filteredAssociator0.classIndexTipText();
      assertEquals(-1, filteredAssociator0.getClassIndex());
      assertEquals("Index of the class attribute. If set to -1, the last attribute is taken as class attribute.", string0);
      assertEquals("weka.filters.MultiFilter -F \"weka.filters.unsupervised.attribute.ReplaceMissingValues \"", filteredAssociator0.getFilterSpec());
  }

  @Test
  public void test4()  throws Throwable  {
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      assertNotNull(filteredAssociator0);
      
      String string0 = filteredAssociator0.getRevision();
      assertEquals("8034", string0);
      assertEquals("weka.filters.MultiFilter -F \"weka.filters.unsupervised.attribute.ReplaceMissingValues \"", filteredAssociator0.getFilterSpec());
      assertNotNull(string0);
      assertEquals(-1, filteredAssociator0.getClassIndex());
  }

  @Test
  public void test5()  throws Throwable  {
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      assertNotNull(filteredAssociator0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "120";
      stringArray0[1] = "120";
      stringArray0[2] = "120";
      stringArray0[3] = "120";
      stringArray0[4] = "120";
      filteredAssociator0.setOptions(stringArray0);
      assertEquals("weka.filters.supervised.attribute.Discretize -R first-last", filteredAssociator0.getFilterSpec());
      assertEquals(-1, filteredAssociator0.getClassIndex());
  }

  @Test
  public void test6()  throws Throwable  {
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      assertNotNull(filteredAssociator0);
      
      Enumeration<Object> enumeration0 = filteredAssociator0.listOptions();
      assertEquals(-1, filteredAssociator0.getClassIndex());
      assertEquals("weka.filters.MultiFilter -F \"weka.filters.unsupervised.attribute.ReplaceMissingValues \"", filteredAssociator0.getFilterSpec());
      assertNotNull(enumeration0);
  }

  @Test
  public void test7()  throws Throwable  {
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      assertNotNull(filteredAssociator0);
      assertEquals("weka.filters.MultiFilter -F \"weka.filters.unsupervised.attribute.ReplaceMissingValues \"", filteredAssociator0.getFilterSpec());
      
      AllFilter allFilter0 = new AllFilter();
      filteredAssociator0.setFilter((Filter) allFilter0);
      String[] stringArray0 = filteredAssociator0.getOptions();
      assertNotNull(stringArray0);
      assertEquals(-1, filteredAssociator0.getClassIndex());
  }

  @Test
  public void test8()  throws Throwable  {
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      assertNotNull(filteredAssociator0);
      
      Capabilities capabilities0 = filteredAssociator0.getCapabilities();
      assertEquals("Capabilities: [Nominal attributes, Binary attributes, Unary attributes, Empty nominal attributes, Numeric attributes, Date attributes, String attributes, Relational attributes, Missing values, No class, Nominal class, Binary class, Unary class, Empty nominal class, Numeric class, Date class, String class, Relational class, Missing class values]\nDependencies: [Nominal attributes, Binary attributes, Unary attributes, Empty nominal attributes, Numeric attributes, Date attributes, String attributes, Relational attributes, Missing values, No class, Nominal class, Binary class, Unary class, Empty nominal class, Numeric class, Date class, String class, Relational class, Missing class values, Only multi-Instance data]\nmin # Instance: 0\n", capabilities0.toString());
      assertEquals(-1, filteredAssociator0.getClassIndex());
      assertEquals("weka.filters.MultiFilter -F \"weka.filters.unsupervised.attribute.ReplaceMissingValues \"", filteredAssociator0.getFilterSpec());
      assertNotNull(capabilities0);
  }

  @Test
  public void test9()  throws Throwable  {
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      assertNotNull(filteredAssociator0);
      
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("Class implementing an Apriori-type algorithm. Iteratively reduces the minimum support until it finds the required number of rules with the given minimum confidence.\nThe algorithm has an option to mine class association rules. It is adapted as explained in the second reference.\n\nFor more information see:\n\n");
      filteredAssociator0.buildAssociations(instances0);
      String string0 = filteredAssociator0.toString();
      assertEquals("FilteredAssociator using weka.associations.Apriori -N 10 -T 0 -C 0.9 -D 0.05 -U 1.0 -M 0.1 -S -1.0 -c -1 on data filtered through weka.filters.MultiFilter -F \"weka.filters.unsupervised.attribute.ReplaceMissingValues \"\n\nFiltered Header\n@relation Testdata-weka.filters.unsupervised.attribute.ReplaceMissingValues-weka.filters.MultiFilter-Fweka.filters.unsupervised.attribute.ReplaceMissingValues\n\n@attribute 'Class implementing an Apriori-type algorithm. Iteratively reduces the minimum support until it finds the required number of rules with the given minimum confidence.\\nThe algorithm has an option to mine class association rules. It is adapted as explained in the second reference.\\n\\nFor more information see:\\n\\nClass' {class1,class2}\n\n@data\n\n\nAssociator Model\n\nNo large itemsets and rules found!\n", filteredAssociator0.toString());
      assertEquals("FilteredAssociator using weka.associations.Apriori -N 10 -T 0 -C 0.9 -D 0.05 -U 1.0 -M 0.1 -S -1.0 -c -1 on data filtered through weka.filters.MultiFilter -F \"weka.filters.unsupervised.attribute.ReplaceMissingValues \"\n\nFiltered Header\n@relation Testdata-weka.filters.unsupervised.attribute.ReplaceMissingValues-weka.filters.MultiFilter-Fweka.filters.unsupervised.attribute.ReplaceMissingValues\n\n@attribute 'Class implementing an Apriori-type algorithm. Iteratively reduces the minimum support until it finds the required number of rules with the given minimum confidence.\\nThe algorithm has an option to mine class association rules. It is adapted as explained in the second reference.\\n\\nFor more information see:\\n\\nClass' {class1,class2}\n\n@data\n\n\nAssociator Model\n\nNo large itemsets and rules found!\n", string0);
  }

  @Test
  public void test10()  throws Throwable  {
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      assertNotNull(filteredAssociator0);
      
      TestInstances testInstances0 = new TestInstances();
      filteredAssociator0.setAssociator((Associator) null);
      Instances instances0 = testInstances0.generate("Class for running an arbitrary associator on data that has been passed through an arbitrary filter. Like the associator, the structure of the filter is based exclusively on the training data and test instances will be processed by the filter without changing their structure.");
      try {
        filteredAssociator0.buildAssociations(instances0);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * No base associator has been set!
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      assertNotNull(filteredAssociator0);
      assertEquals(-1, filteredAssociator0.getClassIndex());
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      filteredAssociator0.setClassIndex(0);
      Instances instances0 = new Instances("v(-xQlf7^KFj", arrayList0, 0);
      try {
        filteredAssociator0.buildAssociations(instances0);
        fail("Expecting exception: UnassignedClassException");
      } catch(UnassignedClassException e) {
        /*
         * Class index is negative (not set)!
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      assertNotNull(filteredAssociator0);
      
      filteredAssociator0.setAssociator((Associator) null);
      filteredAssociator0.getAssociationRules();
      assertEquals(-1, filteredAssociator0.getClassIndex());
      assertEquals("weka.filters.MultiFilter -F \"weka.filters.unsupervised.attribute.ReplaceMissingValues \"", filteredAssociator0.getFilterSpec());
  }

  @Test
  public void test13()  throws Throwable  {
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      assertNotNull(filteredAssociator0);
      
      FilteredAssociationRules filteredAssociationRules0 = (FilteredAssociationRules)filteredAssociator0.getAssociationRules();
      assertEquals("FilteredAssociator -F \"weka.filters.MultiFilter -F \\\"weka.filters.unsupervised.attribute.ReplaceMissingValues \\\"\" -c -1 -W weka.associations.Apriori -- -N 10 -T 0 -C 0.9 -D 0.05 -U 1.0 -M 0.1 -S -1.0 -c -1", filteredAssociationRules0.getProducer());
      assertNotNull(filteredAssociationRules0);
  }

  @Test
  public void test14()  throws Throwable  {
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      assertNotNull(filteredAssociator0);
      
      filteredAssociator0.setAssociator((Associator) null);
      String[] stringArray0 = filteredAssociator0.getRuleMetricNames();
      assertNotNull(stringArray0);
      assertEquals("weka.filters.MultiFilter -F \"weka.filters.unsupervised.attribute.ReplaceMissingValues \"", filteredAssociator0.getFilterSpec());
      assertEquals(-1, filteredAssociator0.getClassIndex());
  }

  @Test
  public void test15()  throws Throwable  {
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      assertNotNull(filteredAssociator0);
      
      String[] stringArray0 = filteredAssociator0.getRuleMetricNames();
      assertNotNull(stringArray0);
      assertEquals(-1, filteredAssociator0.getClassIndex());
      assertEquals("weka.filters.MultiFilter -F \"weka.filters.unsupervised.attribute.ReplaceMissingValues \"", filteredAssociator0.getFilterSpec());
  }

  @Test
  public void test16()  throws Throwable  {
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      assertEquals(true, filteredAssociator0.canProduceRules());
      assertNotNull(filteredAssociator0);
      
      filteredAssociator0.setAssociator((Associator) null);
      boolean boolean0 = filteredAssociator0.canProduceRules();
      assertEquals(false, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      assertNotNull(filteredAssociator0);
      
      boolean boolean0 = filteredAssociator0.canProduceRules();
      assertEquals(true, boolean0);
      assertEquals("weka.filters.MultiFilter -F \"weka.filters.unsupervised.attribute.ReplaceMissingValues \"", filteredAssociator0.getFilterSpec());
      assertEquals(-1, filteredAssociator0.getClassIndex());
  }

  @Test
  public void test18()  throws Throwable  {
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      assertNotNull(filteredAssociator0);
      
      String string0 = filteredAssociator0.toString();
      assertEquals(-1, filteredAssociator0.getClassIndex());
      assertEquals("FilteredAssociator: No model built yet.", string0);
      assertEquals("weka.filters.MultiFilter -F \"weka.filters.unsupervised.attribute.ReplaceMissingValues \"", filteredAssociator0.getFilterSpec());
      assertNotNull(string0);
  }
}
