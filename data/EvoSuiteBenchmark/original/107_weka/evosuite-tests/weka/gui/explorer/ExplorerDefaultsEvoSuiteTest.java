/*
 * This file was automatically generated by EvoSuite
 */

package weka.gui.explorer;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Properties;
import org.junit.BeforeClass;
import weka.associations.Apriori;
import weka.attributeSelection.BestFirst;
import weka.attributeSelection.CfsSubsetEval;
import weka.classifiers.rules.ZeroR;
import weka.clusterers.EM;
import weka.gui.explorer.ClassifierErrorsPlotInstances;
import weka.gui.explorer.ClustererAssignmentsPlotInstances;
import weka.gui.explorer.ExplorerDefaults;

@RunWith(EvoSuiteRunner.class)
public class ExplorerDefaultsEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ClassifierErrorsPlotInstances classifierErrorsPlotInstances0 = ExplorerDefaults.getClassifierErrorsPlotInstances();
      assertEquals(-1, classifierErrorsPlotInstances0.getClassIndex());
  }

  @Test
  public void test1()  throws Throwable  {
      ExplorerDefaults explorerDefaults0 = new ExplorerDefaults();
      assertEquals(0, explorerDefaults0.getASTestMode());
  }

  @Test
  public void test2()  throws Throwable  {
      String string0 = ExplorerDefaults.getClassifierSourceCodeClass();
      assertNotNull(string0);
      assertEquals("WekaClassifier", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = ExplorerDefaults.getClassifierRandomSeed();
      assertEquals(1, int0);
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = ExplorerDefaults.getClassifierPercentageSplit();
      assertEquals(66, int0);
  }

  @Test
  public void test5()  throws Throwable  {
      boolean boolean0 = ExplorerDefaults.getClustererStoreClustersForVis();
      assertEquals(true, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      Object object0 = ExplorerDefaults.getObject("WekaClassifier", "WekaClassifier");
      assertNull(object0);
  }

  @Test
  public void test7()  throws Throwable  {
      String[] stringArray0 = ExplorerDefaults.getTabs();
      assertNotNull(stringArray0);
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = ExplorerDefaults.getClassifierTestMode();
      assertEquals(1, int0);
  }

  @Test
  public void test9()  throws Throwable  {
      Object object0 = ExplorerDefaults.getFilter();
      assertNull(object0);
  }

  @Test
  public void test10()  throws Throwable  {
      boolean boolean0 = ExplorerDefaults.getClassifierOutputEntropyEvalMeasures();
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      boolean boolean0 = ExplorerDefaults.getClassifierStorePredictionsForVis();
      assertEquals(true, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = ExplorerDefaults.getASRandomSeed();
      assertEquals(1, int0);
  }

  @Test
  public void test13()  throws Throwable  {
      ClustererAssignmentsPlotInstances clustererAssignmentsPlotInstances0 = ExplorerDefaults.getClustererAssignmentsPlotInstances();
      assertNotNull(clustererAssignmentsPlotInstances0);
  }

  @Test
  public void test14()  throws Throwable  {
      boolean boolean0 = ExplorerDefaults.getClassifierOutputPredictions();
      assertEquals(false, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      boolean boolean0 = ExplorerDefaults.getClassifierCostSensitiveEval();
      assertEquals(false, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      boolean boolean0 = ExplorerDefaults.getClassifierOutputModel();
      assertEquals(true, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      boolean boolean0 = ExplorerDefaults.getClassifierOutputConfusionMatrix();
      assertEquals(true, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      Properties properties0 = ExplorerDefaults.getProperties();
      assertEquals(0, properties0.size());
  }

  @Test
  public void test19()  throws Throwable  {
      boolean boolean0 = ExplorerDefaults.getClassifierPreserveOrder();
      assertEquals(false, boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      ExplorerDefaults.set("i", "i");
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = ExplorerDefaults.getClustererTestMode();
      assertEquals(3, int0);
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = ExplorerDefaults.getInitialDirectory();
      assertNotNull(string0);
      assertEquals("%", string0);
  }

  @Test
  public void test23()  throws Throwable  {
      int int0 = ExplorerDefaults.getClassifierCrossvalidationFolds();
      assertEquals(10, int0);
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = ExplorerDefaults.getASCrossvalidationFolds();
      assertEquals(10, int0);
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = ExplorerDefaults.getASTestMode();
      assertEquals(0, int0);
  }

  @Test
  public void test26()  throws Throwable  {
      boolean boolean0 = ExplorerDefaults.getInitGenericObjectEditorFilter();
      assertEquals(true, boolean0);
  }

  @Test
  public void test27()  throws Throwable  {
      boolean boolean0 = ExplorerDefaults.getClassifierOutputSourceCode();
      assertEquals(false, boolean0);
  }

  @Test
  public void test28()  throws Throwable  {
      boolean boolean0 = ExplorerDefaults.getClassifierOutputPerClassStats();
      assertEquals(true, boolean0);
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = ExplorerDefaults.getClassifierOutputAdditionalAttributes();
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test30()  throws Throwable  {
      ZeroR zeroR0 = (ZeroR)ExplorerDefaults.getClassifier();
      assertEquals(false, zeroR0.getDebug());
  }

  @Test
  public void test31()  throws Throwable  {
      EM eM0 = (EM)ExplorerDefaults.getClusterer();
      assertEquals(1.0E-6, eM0.getMinStdDev(), 0.01D);
  }

  @Test
  public void test32()  throws Throwable  {
      Apriori apriori0 = (Apriori)ExplorerDefaults.getAssociator();
      assertEquals("Minimum metric score. Consider only rules with scores higher than this value.", apriori0.minMetricTipText());
  }

  @Test
  public void test33()  throws Throwable  {
      CfsSubsetEval cfsSubsetEval0 = (CfsSubsetEval)ExplorerDefaults.getASEvaluator();
      assertEquals(true, cfsSubsetEval0.getLocallyPredictive());
  }

  @Test
  public void test34()  throws Throwable  {
      BestFirst bestFirst0 = (BestFirst)ExplorerDefaults.getASSearch();
      assertEquals("8034", bestFirst0.getRevision());
  }
}
