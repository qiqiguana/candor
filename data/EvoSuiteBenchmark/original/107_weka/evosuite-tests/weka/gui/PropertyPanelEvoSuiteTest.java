/*
 * This file was automatically generated by EvoSuite
 */

package weka.gui;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.awt.Graphics;
import java.awt.IllegalComponentStateException;
import java.beans.PropertyEditor;
import java.beans.PropertyEditorSupport;
import org.junit.BeforeClass;
import weka.gui.PropertyPanel;

@RunWith(EvoSuiteRunner.class)
public class PropertyPanelEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      PropertyEditorSupport propertyEditorSupport0 = new PropertyEditorSupport();
      PropertyPanel propertyPanel0 = new PropertyPanel((PropertyEditor) propertyEditorSupport0);
      assertNotNull(propertyPanel0);
      
      boolean boolean0 = propertyPanel0.addToHistory();
      assertEquals(false, boolean0);
      assertEquals("Left-click to edit properties for this object, right-click/Alt+Shift+left-click for menu", propertyPanel0.getToolTipText());
      assertEquals(true, propertyPanel0.isOpaque());
      assertEquals(true, propertyPanel0.isPreferredSizeSet());
  }

  @Test
  public void test1()  throws Throwable  {
      PropertyEditorSupport propertyEditorSupport0 = new PropertyEditorSupport();
      PropertyPanel propertyPanel0 = new PropertyPanel((PropertyEditor) propertyEditorSupport0);
      propertyEditorSupport0.firePropertyChange();
      assertEquals(false, propertyEditorSupport0.supportsCustomEditor());
  }

  @Test
  public void test2()  throws Throwable  {
      PropertyEditorSupport propertyEditorSupport0 = new PropertyEditorSupport((Object) "application/x-java-remote-object");
      PropertyPanel propertyPanel0 = new PropertyPanel((PropertyEditor) propertyEditorSupport0, true);
      assertEquals(true, propertyPanel0.isOpaque());
      assertNotNull(propertyPanel0);
      assertEquals("Left-click to edit properties for this object, right-click/Alt+Shift+left-click for menu", propertyPanel0.getToolTipText());
      assertEquals(true, propertyPanel0.isPreferredSizeSet());
  }

  @Test
  public void test3()  throws Throwable  {
      PropertyEditorSupport propertyEditorSupport0 = new PropertyEditorSupport((Object) "application/x-java-remote-object");
      PropertyPanel propertyPanel0 = new PropertyPanel((PropertyEditor) propertyEditorSupport0);
      assertNotNull(propertyPanel0);
      
      propertyPanel0.showPropertyDialog();
      assertEquals("Left-click to edit properties for this object, right-click/Alt+Shift+left-click for menu", propertyPanel0.getToolTipText());
      assertEquals(true, propertyPanel0.isPreferredSizeSet());
      assertEquals(true, propertyPanel0.isOpaque());
  }

  @Test
  public void test4()  throws Throwable  {
      PropertyEditorSupport propertyEditorSupport0 = new PropertyEditorSupport();
      propertyEditorSupport0.setValue((Object) "ShortDescription");
      PropertyPanel propertyPanel0 = new PropertyPanel((PropertyEditor) propertyEditorSupport0);
      assertNotNull(propertyPanel0);
      
      // Undeclared exception!
      try {
        propertyPanel0.showPropertyDialog();
        fail("Expecting exception: IllegalComponentStateException");
      } catch(IllegalComponentStateException e) {
        /*
         * component must be showing on the screen to determine its location
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      PropertyEditorSupport propertyEditorSupport0 = new PropertyEditorSupport((Object) "selection-begin-paragraph");
      PropertyPanel propertyPanel0 = new PropertyPanel((PropertyEditor) propertyEditorSupport0);
      assertNotNull(propertyPanel0);
      
      propertyPanel0.removeNotify();
      assertEquals(true, propertyPanel0.isOpaque());
      assertEquals(true, propertyPanel0.isPreferredSizeSet());
      assertEquals("Left-click to edit properties for this object, right-click/Alt+Shift+left-click for menu", propertyPanel0.getToolTipText());
  }

  @Test
  public void test6()  throws Throwable  {
      PropertyEditorSupport propertyEditorSupport0 = new PropertyEditorSupport();
      PropertyPanel propertyPanel0 = new PropertyPanel((PropertyEditor) propertyEditorSupport0);
      assertNotNull(propertyPanel0);
      
      propertyPanel0.setEnabled(true);
      assertEquals(true, propertyPanel0.isEnabled());
      assertEquals(true, propertyPanel0.isPreferredSizeSet());
      assertEquals("Left-click to edit properties for this object, right-click/Alt+Shift+left-click for menu", propertyPanel0.getToolTipText());
      assertEquals(true, propertyPanel0.isOpaque());
  }

  @Test
  public void test7()  throws Throwable  {
      PropertyEditorSupport propertyEditorSupport0 = new PropertyEditorSupport();
      PropertyPanel propertyPanel0 = new PropertyPanel((PropertyEditor) propertyEditorSupport0);
      assertNotNull(propertyPanel0);
      
      // Undeclared exception!
      try {
        propertyPanel0.paintComponent((Graphics) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
