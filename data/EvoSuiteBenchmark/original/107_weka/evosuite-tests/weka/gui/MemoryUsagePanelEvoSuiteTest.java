/*
 * This file was automatically generated by EvoSuite
 */

package weka.gui;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.awt.Point;
import org.junit.BeforeClass;
import weka.gui.MemoryUsagePanel;

@RunWith(EvoSuiteRunner.class)
public class MemoryUsagePanelEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      MemoryUsagePanel memoryUsagePanel0 = new MemoryUsagePanel();
      assertEquals(true, memoryUsagePanel0.isMonitoring());
      assertNotNull(memoryUsagePanel0);
      
      memoryUsagePanel0.stopMonitoring();
      assertEquals(false, memoryUsagePanel0.isMonitoring());
  }

  @Test
  public void test1()  throws Throwable  {
      MemoryUsagePanel memoryUsagePanel0 = new MemoryUsagePanel();
      assertEquals(false, memoryUsagePanel0.isMonitoring());
      assertNotNull(memoryUsagePanel0);
      
      boolean boolean0 = memoryUsagePanel0.isMonitoring();
      assertEquals(true, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      MemoryUsagePanel memoryUsagePanel0 = new MemoryUsagePanel();
      Point point0 = memoryUsagePanel0.getFrameLocation();
      assertEquals((-1.0), point0.getX(), 0.01D);
  }

  @Test
  public void test3()  throws Throwable  {
      MemoryUsagePanel memoryUsagePanel0 = new MemoryUsagePanel();
      assertNotNull(memoryUsagePanel0);
      
      MemoryUsagePanel.MemoryMonitor memoryUsagePanel_MemoryMonitor0 = memoryUsagePanel0.new MemoryMonitor();
      int int0 = memoryUsagePanel_MemoryMonitor0.getInterval();
      assertEquals(6873L, memoryUsagePanel_MemoryMonitor0.getId());
      assertEquals(1000, int0);
  }

  @Test
  public void test4()  throws Throwable  {
      MemoryUsagePanel memoryUsagePanel0 = new MemoryUsagePanel();
      assertNotNull(memoryUsagePanel0);
      
      MemoryUsagePanel.MemoryMonitor memoryUsagePanel_MemoryMonitor0 = memoryUsagePanel0.new MemoryMonitor();
      memoryUsagePanel_MemoryMonitor0.update();
      assertEquals("Thread-6667", memoryUsagePanel_MemoryMonitor0.getName());
      assertEquals("29.0% used", memoryUsagePanel0.getToolTipText());
  }
}
