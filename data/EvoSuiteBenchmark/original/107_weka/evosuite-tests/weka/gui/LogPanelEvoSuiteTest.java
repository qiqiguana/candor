/*
 * This file was automatically generated by EvoSuite
 */

package weka.gui;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.awt.HeadlessException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import weka.gui.LogPanel;
import weka.gui.WekaTaskMonitor;

@RunWith(EvoSuiteRunner.class)
public class LogPanelEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      LogPanel logPanel0 = new LogPanel((WekaTaskMonitor) null, false);
      assertNotNull(logPanel0);
      
      logPanel0.statusMessage("dg`");
      assertEquals("04:19:32:", logPanel0.getTimestamp());
  }

  @Test
  public void test1()  throws Throwable  {
      LogPanel logPanel0 = new LogPanel();
      assertNotNull(logPanel0);
      
      logPanel0.taskFinished();
      assertEquals("04:19:33:", logPanel0.getTimestamp());
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          WekaTaskMonitor wekaTaskMonitor0 = new WekaTaskMonitor();
          LogPanel logPanel0 = new LogPanel(wekaTaskMonitor0, false, true, false);
          assertNotNull(logPanel0);
          
          logPanel0.logMessage((String) null);
          logPanel0.logMessage((String) null);
          assertEquals("04:19:34:", logPanel0.getTimestamp());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
      WekaTaskMonitor wekaTaskMonitor0 = new WekaTaskMonitor();
      LogPanel logPanel0 = null;
      try {
        logPanel0 = new LogPanel(wekaTaskMonitor0);
        fail("Expecting exception: HeadlessException");
      } catch(HeadlessException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      LogPanel logPanel0 = new LogPanel((WekaTaskMonitor) null, false, true, true);
      assertEquals("04:19:37:", logPanel0.getTimestamp());
      assertNotNull(logPanel0);
  }

  @Test
  public void test5()  throws Throwable  {
      WekaTaskMonitor wekaTaskMonitor0 = new WekaTaskMonitor();
      LogPanel logPanel0 = new LogPanel(wekaTaskMonitor0, false);
      assertNotNull(logPanel0);
      
      logPanel0.taskFinished();
      assertEquals("04:19:38:", logPanel0.getTimestamp());
  }

  @Test
  public void test6()  throws Throwable  {
      LogPanel logPanel0 = new LogPanel((WekaTaskMonitor) null, false);
      assertNotNull(logPanel0);
      
      logPanel0.taskStarted();
      assertEquals("04:19:39:", logPanel0.getTimestamp());
  }

  @Test
  public void test7()  throws Throwable  {
      WekaTaskMonitor wekaTaskMonitor0 = new WekaTaskMonitor();
      LogPanel logPanel0 = new LogPanel(wekaTaskMonitor0, false, false, false);
      assertNotNull(logPanel0);
      
      logPanel0.taskStarted();
      assertEquals("04:19:40:", logPanel0.getTimestamp());
  }
}
