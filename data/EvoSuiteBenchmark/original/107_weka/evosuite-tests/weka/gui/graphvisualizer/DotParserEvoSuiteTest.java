/*
 * This file was automatically generated by EvoSuite
 */

package weka.gui.graphvisualizer;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.CharArrayReader;
import java.io.LineNumberReader;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import org.junit.BeforeClass;
import weka.core.FastVector;
import weka.gui.graphvisualizer.DotParser;
import weka.gui.graphvisualizer.GraphEdge;

@RunWith(EvoSuiteRunner.class)
public class DotParserEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      char[] charArray0 = new char[5];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 0, (int) 'Y');
      DotParser dotParser0 = new DotParser((Reader) charArrayReader0, (FastVector) null, (FastVector) null);
      // Undeclared exception!
      try {
        dotParser0.parse();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      StringReader stringReader0 = new StringReader("digraph");
      DotParser dotParser0 = new DotParser((Reader) stringReader0, (FastVector) null, (FastVector) null);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) stringReader0);
      dotParser0.graph(streamTokenizer0);
  }

  @Test
  public void test2()  throws Throwable  {
      StringReader stringReader0 = new StringReader("g=O");
      DotParser dotParser0 = new DotParser((Reader) stringReader0, (FastVector) null, (FastVector) null);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) stringReader0);
      // Undeclared exception!
      try {
        dotParser0.graph(streamTokenizer0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      StringReader stringReader0 = new StringReader("l");
      DotParser dotParser0 = new DotParser((Reader) stringReader0, (FastVector) null, (FastVector) null);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) stringReader0);
      dotParser0.stmtList(streamTokenizer0);
      assertEquals((-1), streamTokenizer0.ttype);
  }

  @Test
  public void test4()  throws Throwable  {
      StringReader stringReader0 = new StringReader("l");
      DotParser dotParser0 = new DotParser((Reader) stringReader0, (FastVector) null, (FastVector) null);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) stringReader0);
      try {
        dotParser0.nodeID(streamTokenizer0);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      StringReader stringReader0 = new StringReader("l");
      DotParser dotParser0 = new DotParser((Reader) stringReader0, (FastVector) null, (FastVector) null);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) stringReader0);
      streamTokenizer0.ttype = (int) 'G';
      dotParser0.nodeID(streamTokenizer0);
  }

  @Test
  public void test6()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '^';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      DotParser dotParser0 = new DotParser((Reader) charArrayReader0, (FastVector) null, (FastVector) null);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) charArrayReader0);
      dotParser0.edgeStmt(streamTokenizer0, (int) '-');
      try {
        dotParser0.nodeID(streamTokenizer0);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '-';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      DotParser dotParser0 = new DotParser((Reader) charArrayReader0, (FastVector) null, (FastVector) null);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) charArrayReader0);
      dotParser0.edgeStmt(streamTokenizer0, (int) '-');
      assertEquals(1, streamTokenizer0.lineno());
  }

  @Test
  public void test8()  throws Throwable  {
      StringReader stringReader0 = new StringReader("l");
      DotParser dotParser0 = new DotParser((Reader) stringReader0, (FastVector) null, (FastVector) null);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) stringReader0);
      dotParser0.edgeStmt(streamTokenizer0, (-3));
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=O");
      DotParser dotParser0 = new DotParser((Reader) stringReader0, (FastVector) null, (FastVector) null);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) stringReader0);
      GraphEdge graphEdge0 = new GraphEdge((-4), (-4), (-1369));
      dotParser0.edgeAttrib(streamTokenizer0, graphEdge0);
      assertEquals((-1), streamTokenizer0.ttype);
  }

  @Test
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("label");
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) stringReader0);
      DotParser dotParser0 = new DotParser((Reader) lineNumberReader0, (FastVector) null, (FastVector) null);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) lineNumberReader0);
      GraphEdge graphEdge0 = new GraphEdge(1, (-4), (-1), (String) null, "label");
      dotParser0.edgeAttrib(streamTokenizer0, graphEdge0);
      assertEquals("(1,-4,-1)", graphEdge0.toString());
  }
}
