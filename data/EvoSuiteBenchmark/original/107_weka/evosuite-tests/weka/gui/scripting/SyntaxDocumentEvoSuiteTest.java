/*
 * This file was automatically generated by EvoSuite
 */

package weka.gui.scripting;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.awt.Color;
import java.util.Properties;
import javax.swing.JTextPane;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.MutableAttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleContext;
import org.junit.BeforeClass;
import weka.gui.scripting.SyntaxDocument;

@RunWith(EvoSuiteRunner.class)
public class SyntaxDocumentEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Properties properties0 = new Properties();
      SyntaxDocument syntaxDocument0 = new SyntaxDocument(properties0);
      assertNotNull(syntaxDocument0);
      
      String string0 = syntaxDocument0.getDelimiters();
      assertEquals(";:{}()[]+-/%<=>!&|^~*", string0);
      assertEquals("{", syntaxDocument0.getBlockStart());
      assertEquals(true, syntaxDocument0.getAddMatchingEndBlocks());
      assertEquals("\"'", syntaxDocument0.getQuoteDelimiters());
      assertEquals("monospaced", syntaxDocument0.getFontName());
      assertEquals(2, syntaxDocument0.getIndentationSize());
      assertEquals("\\", syntaxDocument0.getQuoteEscape());
      assertNotNull(string0);
      assertEquals(true, syntaxDocument0.getMultiLineComment());
      assertEquals("/*", syntaxDocument0.getMultiLineCommentStart());
      assertEquals("}", syntaxDocument0.getBlockEnd());
      assertEquals("*/", syntaxDocument0.getMultiLineCommentEnd());
      assertEquals("//", syntaxDocument0.getSingleLineCommentStart());
  }

  @Test
  public void test1()  throws Throwable  {
      Properties properties0 = new Properties();
      SyntaxDocument syntaxDocument0 = new SyntaxDocument(properties0);
      assertNotNull(syntaxDocument0);
      
      String string0 = syntaxDocument0.getQuoteEscape();
      assertEquals(12, syntaxDocument0.getFontSize());
      assertEquals(true, syntaxDocument0.getCaseSensitive());
      assertEquals(true, syntaxDocument0.getMultiLineComment());
      assertEquals("}", syntaxDocument0.getBlockEnd());
      assertEquals("\"'", syntaxDocument0.getQuoteDelimiters());
      assertEquals(2, syntaxDocument0.getIndentationSize());
      assertNotNull(string0);
      assertEquals("\\", string0);
      assertEquals("*/", syntaxDocument0.getMultiLineCommentEnd());
      assertEquals(true, syntaxDocument0.getUseBlanks());
      assertEquals("//", syntaxDocument0.getSingleLineCommentStart());
      assertEquals("monospaced", syntaxDocument0.getFontName());
      assertEquals("/*", syntaxDocument0.getMultiLineCommentStart());
      assertEquals(";:{}()[]+-/%<=>!&|^~*", syntaxDocument0.getDelimiters());
      assertEquals(true, syntaxDocument0.getAddMatchingEndBlocks());
  }

  @Test
  public void test2()  throws Throwable  {
      Properties properties0 = new Properties();
      SyntaxDocument syntaxDocument0 = new SyntaxDocument(properties0);
      assertNotNull(syntaxDocument0);
      
      int int0 = syntaxDocument0.indexOf("//", "//", (-1));
      assertEquals("\"'", syntaxDocument0.getQuoteDelimiters());
      assertEquals(true, syntaxDocument0.getMultiLineComment());
      assertEquals("\\", syntaxDocument0.getQuoteEscape());
      assertEquals("monospaced", syntaxDocument0.getFontName());
      assertEquals((-1), int0);
      assertEquals("/*", syntaxDocument0.getMultiLineCommentStart());
      assertEquals("{", syntaxDocument0.getBlockStart());
      assertEquals(2, syntaxDocument0.getIndentationSize());
      assertEquals("//", syntaxDocument0.getSingleLineCommentStart());
      assertEquals(true, syntaxDocument0.getAddMatchingEndBlocks());
      assertEquals("}", syntaxDocument0.getBlockEnd());
      assertEquals(12, syntaxDocument0.getFontSize());
      assertEquals(";:{}()[]+-/%<=>!&|^~*", syntaxDocument0.getDelimiters());
      assertEquals(true, syntaxDocument0.getCaseSensitive());
      assertEquals("*/", syntaxDocument0.getMultiLineCommentEnd());
  }

  @Test
  public void test3()  throws Throwable  {
      Properties properties0 = new Properties();
      SyntaxDocument syntaxDocument0 = new SyntaxDocument(properties0);
      assertNotNull(syntaxDocument0);
      
      int int0 = syntaxDocument0.getIndentationSize();
      assertEquals("monospaced", syntaxDocument0.getFontName());
      assertEquals(true, syntaxDocument0.getUseBlanks());
      assertEquals(2, int0);
      assertEquals("//", syntaxDocument0.getSingleLineCommentStart());
      assertEquals(12, syntaxDocument0.getFontSize());
      assertEquals("/*", syntaxDocument0.getMultiLineCommentStart());
      assertEquals(true, syntaxDocument0.getAddMatchingEndBlocks());
      assertEquals("{", syntaxDocument0.getBlockStart());
      assertEquals("*/", syntaxDocument0.getMultiLineCommentEnd());
      assertEquals(";:{}()[]+-/%<=>!&|^~*", syntaxDocument0.getDelimiters());
      assertEquals("\\", syntaxDocument0.getQuoteEscape());
      assertEquals("}", syntaxDocument0.getBlockEnd());
      assertEquals(true, syntaxDocument0.getCaseSensitive());
      assertEquals(true, syntaxDocument0.getMultiLineComment());
      assertEquals("\"'", syntaxDocument0.getQuoteDelimiters());
  }

  @Test
  public void test4()  throws Throwable  {
      Properties properties0 = new Properties();
      SyntaxDocument syntaxDocument0 = new SyntaxDocument(properties0);
      assertNotNull(syntaxDocument0);
      
      String string0 = syntaxDocument0.getBlockStart();
      assertEquals(2, syntaxDocument0.getIndentationSize());
      assertEquals("/*", syntaxDocument0.getMultiLineCommentStart());
      assertEquals(";:{}()[]+-/%<=>!&|^~*", syntaxDocument0.getDelimiters());
      assertEquals("\"'", syntaxDocument0.getQuoteDelimiters());
      assertEquals("{", string0);
      assertEquals("\\", syntaxDocument0.getQuoteEscape());
      assertEquals("}", syntaxDocument0.getBlockEnd());
      assertEquals("//", syntaxDocument0.getSingleLineCommentStart());
      assertEquals(true, syntaxDocument0.getAddMatchingEndBlocks());
      assertEquals(true, syntaxDocument0.getMultiLineComment());
      assertEquals(12, syntaxDocument0.getFontSize());
      assertNotNull(string0);
      assertEquals("monospaced", syntaxDocument0.getFontName());
  }

  @Test
  public void test5()  throws Throwable  {
      Properties properties0 = new Properties();
      SyntaxDocument syntaxDocument0 = new SyntaxDocument(properties0);
      assertNotNull(syntaxDocument0);
      
      String string0 = syntaxDocument0.getQuoteDelimiters();
      assertEquals(12, syntaxDocument0.getFontSize());
      assertEquals("\"'", string0);
      assertEquals("/*", syntaxDocument0.getMultiLineCommentStart());
      assertEquals(";:{}()[]+-/%<=>!&|^~*", syntaxDocument0.getDelimiters());
      assertEquals("{", syntaxDocument0.getBlockStart());
      assertEquals(true, syntaxDocument0.getUseBlanks());
      assertEquals(true, syntaxDocument0.getAddMatchingEndBlocks());
      assertEquals("}", syntaxDocument0.getBlockEnd());
      assertEquals("//", syntaxDocument0.getSingleLineCommentStart());
      assertEquals("*/", syntaxDocument0.getMultiLineCommentEnd());
      assertEquals(2, syntaxDocument0.getIndentationSize());
      assertEquals("\\", syntaxDocument0.getQuoteEscape());
      assertNotNull(string0);
      assertEquals(true, syntaxDocument0.getMultiLineComment());
  }

  @Test
  public void test6()  throws Throwable  {
      Properties properties0 = new Properties();
      SyntaxDocument syntaxDocument0 = new SyntaxDocument(properties0);
      assertNotNull(syntaxDocument0);
      
      boolean boolean0 = syntaxDocument0.getUseBlanks();
      assertEquals("\\", syntaxDocument0.getQuoteEscape());
      assertEquals("monospaced", syntaxDocument0.getFontName());
      assertEquals("*/", syntaxDocument0.getMultiLineCommentEnd());
      assertEquals(2, syntaxDocument0.getIndentationSize());
      assertEquals("{", syntaxDocument0.getBlockStart());
      assertEquals(12, syntaxDocument0.getFontSize());
      assertEquals("//", syntaxDocument0.getSingleLineCommentStart());
      assertEquals("/*", syntaxDocument0.getMultiLineCommentStart());
      assertEquals(true, boolean0);
      assertEquals(true, syntaxDocument0.getAddMatchingEndBlocks());
      assertEquals("\"'", syntaxDocument0.getQuoteDelimiters());
      assertEquals(";:{}()[]+-/%<=>!&|^~*", syntaxDocument0.getDelimiters());
      assertEquals("}", syntaxDocument0.getBlockEnd());
  }

  @Test
  public void test7()  throws Throwable  {
      Properties properties0 = new Properties();
      SyntaxDocument syntaxDocument0 = new SyntaxDocument(properties0);
      assertNotNull(syntaxDocument0);
      
      boolean boolean0 = syntaxDocument0.getAddMatchingEndBlocks();
      assertEquals(true, boolean0);
      assertEquals("\"'", syntaxDocument0.getQuoteDelimiters());
      assertEquals("\\", syntaxDocument0.getQuoteEscape());
      assertEquals(true, syntaxDocument0.getUseBlanks());
      assertEquals("/*", syntaxDocument0.getMultiLineCommentStart());
      assertEquals("{", syntaxDocument0.getBlockStart());
      assertEquals(";:{}()[]+-/%<=>!&|^~*", syntaxDocument0.getDelimiters());
      assertEquals(true, syntaxDocument0.getCaseSensitive());
      assertEquals(true, syntaxDocument0.getMultiLineComment());
      assertEquals("monospaced", syntaxDocument0.getFontName());
      assertEquals("*/", syntaxDocument0.getMultiLineCommentEnd());
      assertEquals("}", syntaxDocument0.getBlockEnd());
      assertEquals(2, syntaxDocument0.getIndentationSize());
      assertEquals("//", syntaxDocument0.getSingleLineCommentStart());
  }

  @Test
  public void test8()  throws Throwable  {
      Properties properties0 = new Properties();
      SyntaxDocument syntaxDocument0 = new SyntaxDocument(properties0);
      assertNotNull(syntaxDocument0);
      
      boolean boolean0 = syntaxDocument0.getCaseSensitive();
      assertEquals("/*", syntaxDocument0.getMultiLineCommentStart());
      assertEquals(true, boolean0);
      assertEquals("{", syntaxDocument0.getBlockStart());
      assertEquals("}", syntaxDocument0.getBlockEnd());
      assertEquals("//", syntaxDocument0.getSingleLineCommentStart());
      assertEquals(true, syntaxDocument0.getUseBlanks());
      assertEquals(2, syntaxDocument0.getIndentationSize());
      assertEquals("\\", syntaxDocument0.getQuoteEscape());
      assertEquals("\"'", syntaxDocument0.getQuoteDelimiters());
      assertEquals(12, syntaxDocument0.getFontSize());
      assertEquals("*/", syntaxDocument0.getMultiLineCommentEnd());
      assertEquals(true, syntaxDocument0.getMultiLineComment());
      assertEquals("monospaced", syntaxDocument0.getFontName());
      assertEquals(true, syntaxDocument0.getAddMatchingEndBlocks());
  }

  @Test
  public void test9()  throws Throwable  {
      Properties properties0 = new Properties();
      SyntaxDocument syntaxDocument0 = new SyntaxDocument(properties0);
      assertNotNull(syntaxDocument0);
      
      String string0 = syntaxDocument0.getFontName();
      assertEquals("\"'", syntaxDocument0.getQuoteDelimiters());
      assertEquals("\\", syntaxDocument0.getQuoteEscape());
      assertEquals("*/", syntaxDocument0.getMultiLineCommentEnd());
      assertEquals(true, syntaxDocument0.getUseBlanks());
      assertEquals(12, syntaxDocument0.getFontSize());
      assertEquals(2, syntaxDocument0.getIndentationSize());
      assertEquals("monospaced", string0);
      assertEquals("/*", syntaxDocument0.getMultiLineCommentStart());
      assertEquals(true, syntaxDocument0.getCaseSensitive());
      assertEquals("{", syntaxDocument0.getBlockStart());
      assertEquals(";:{}()[]+-/%<=>!&|^~*", syntaxDocument0.getDelimiters());
      assertEquals("}", syntaxDocument0.getBlockEnd());
      assertEquals(true, syntaxDocument0.getMultiLineComment());
      assertEquals("//", syntaxDocument0.getSingleLineCommentStart());
  }

  @Test
  public void test10()  throws Throwable  {
      Properties properties0 = new Properties();
      SyntaxDocument syntaxDocument0 = new SyntaxDocument(properties0);
      assertNotNull(syntaxDocument0);
      
      SyntaxDocument.ATTR_TYPE syntaxDocument_ATTR_TYPE0 = SyntaxDocument.ATTR_TYPE.Comment;
      syntaxDocument0.setAttributeFont(syntaxDocument_ATTR_TYPE0, 0);
      assertEquals("*/", syntaxDocument0.getMultiLineCommentEnd());
      assertEquals("\\", syntaxDocument0.getQuoteEscape());
      assertEquals(";:{}()[]+-/%<=>!&|^~*", syntaxDocument0.getDelimiters());
      assertEquals("\"'", syntaxDocument0.getQuoteDelimiters());
      assertEquals("{", syntaxDocument0.getBlockStart());
      assertEquals("}", syntaxDocument0.getBlockEnd());
      assertEquals("monospaced", syntaxDocument0.getFontName());
      assertEquals(2, syntaxDocument0.getIndentationSize());
      assertEquals(true, syntaxDocument0.getAddMatchingEndBlocks());
      assertEquals(12, syntaxDocument0.getFontSize());
      assertEquals("//", syntaxDocument0.getSingleLineCommentStart());
  }

  @Test
  public void test11()  throws Throwable  {
      Properties properties0 = new Properties();
      SyntaxDocument syntaxDocument0 = new SyntaxDocument(properties0);
      assertNotNull(syntaxDocument0);
      
      int int0 = syntaxDocument0.getQuoteToken("LOWER_LEADING_CORNER", 0, 12);
      assertEquals(true, syntaxDocument0.getUseBlanks());
      assertEquals(2, syntaxDocument0.getIndentationSize());
      assertEquals("}", syntaxDocument0.getBlockEnd());
      assertEquals(12, syntaxDocument0.getFontSize());
      assertEquals("*/", syntaxDocument0.getMultiLineCommentEnd());
      assertEquals("{", syntaxDocument0.getBlockStart());
      assertEquals("//", syntaxDocument0.getSingleLineCommentStart());
      assertEquals("monospaced", syntaxDocument0.getFontName());
      assertEquals(7, int0);
      assertEquals(";:{}()[]+-/%<=>!&|^~*", syntaxDocument0.getDelimiters());
      assertEquals(true, syntaxDocument0.getAddMatchingEndBlocks());
      assertEquals("\"'", syntaxDocument0.getQuoteDelimiters());
      assertEquals("\\", syntaxDocument0.getQuoteEscape());
      assertEquals(true, syntaxDocument0.getMultiLineComment());
  }

  @Test
  public void test12()  throws Throwable  {
      Properties properties0 = new Properties();
      SyntaxDocument syntaxDocument0 = new SyntaxDocument(properties0);
      assertNotNull(syntaxDocument0);
      
      String string0 = syntaxDocument0.getBlockEnd();
      assertEquals(true, syntaxDocument0.getUseBlanks());
      assertEquals("*/", syntaxDocument0.getMultiLineCommentEnd());
      assertEquals("{", syntaxDocument0.getBlockStart());
      assertEquals("/*", syntaxDocument0.getMultiLineCommentStart());
      assertEquals(true, syntaxDocument0.getAddMatchingEndBlocks());
      assertEquals(";:{}()[]+-/%<=>!&|^~*", syntaxDocument0.getDelimiters());
      assertEquals("}", string0);
      assertEquals("\\", syntaxDocument0.getQuoteEscape());
      assertEquals("//", syntaxDocument0.getSingleLineCommentStart());
      assertEquals(true, syntaxDocument0.getMultiLineComment());
      assertEquals("monospaced", syntaxDocument0.getFontName());
      assertEquals(2, syntaxDocument0.getIndentationSize());
  }

  @Test
  public void test13()  throws Throwable  {
      Properties properties0 = new Properties();
      SyntaxDocument syntaxDocument0 = new SyntaxDocument(properties0);
      assertNotNull(syntaxDocument0);
      
      int int0 = syntaxDocument0.getFontSize();
      assertEquals("//", syntaxDocument0.getSingleLineCommentStart());
      assertEquals("}", syntaxDocument0.getBlockEnd());
      assertEquals(2, syntaxDocument0.getIndentationSize());
      assertEquals("\"'", syntaxDocument0.getQuoteDelimiters());
      assertEquals(";:{}()[]+-/%<=>!&|^~*", syntaxDocument0.getDelimiters());
      assertEquals("*/", syntaxDocument0.getMultiLineCommentEnd());
      assertEquals(true, syntaxDocument0.getCaseSensitive());
      assertEquals(true, syntaxDocument0.getUseBlanks());
      assertEquals("monospaced", syntaxDocument0.getFontName());
      assertEquals(12, int0);
      assertEquals("{", syntaxDocument0.getBlockStart());
      assertEquals("\\", syntaxDocument0.getQuoteEscape());
      assertEquals("/*", syntaxDocument0.getMultiLineCommentStart());
  }

  @Test
  public void test14()  throws Throwable  {
      Properties properties0 = new Properties();
      SyntaxDocument syntaxDocument0 = new SyntaxDocument(properties0);
      assertNotNull(syntaxDocument0);
      
      syntaxDocument0.getBackgroundColor();
      assertEquals(";:{}()[]+-/%<=>!&|^~*", syntaxDocument0.getDelimiters());
      assertEquals("*/", syntaxDocument0.getMultiLineCommentEnd());
      assertEquals("monospaced", syntaxDocument0.getFontName());
      assertEquals("//", syntaxDocument0.getSingleLineCommentStart());
      assertEquals(true, syntaxDocument0.getCaseSensitive());
      assertEquals(true, syntaxDocument0.getMultiLineComment());
      assertEquals(2, syntaxDocument0.getIndentationSize());
      assertEquals("\\", syntaxDocument0.getQuoteEscape());
      assertEquals(true, syntaxDocument0.getAddMatchingEndBlocks());
      assertEquals("\"'", syntaxDocument0.getQuoteDelimiters());
      assertEquals("/*", syntaxDocument0.getMultiLineCommentStart());
      assertEquals("}", syntaxDocument0.getBlockEnd());
  }

  @Test
  public void test15()  throws Throwable  {
      Properties properties0 = new Properties();
      SyntaxDocument syntaxDocument0 = new SyntaxDocument(properties0);
      assertNotNull(syntaxDocument0);
      
      SyntaxDocument.ATTR_TYPE syntaxDocument_ATTR_TYPE0 = SyntaxDocument.ATTR_TYPE.Quote;
      syntaxDocument0.setAttributeFont(syntaxDocument_ATTR_TYPE0, 9994);
      assertEquals(true, syntaxDocument0.getMultiLineComment());
      assertEquals("}", syntaxDocument0.getBlockEnd());
      assertEquals(true, syntaxDocument0.getCaseSensitive());
      assertEquals("{", syntaxDocument0.getBlockStart());
      assertEquals(2, syntaxDocument0.getIndentationSize());
      assertEquals(true, syntaxDocument0.getAddMatchingEndBlocks());
      assertEquals("/*", syntaxDocument0.getMultiLineCommentStart());
      assertEquals("monospaced", syntaxDocument0.getFontName());
      assertEquals("*/", syntaxDocument0.getMultiLineCommentEnd());
      assertEquals("\"'", syntaxDocument0.getQuoteDelimiters());
      assertEquals(";:{}()[]+-/%<=>!&|^~*", syntaxDocument0.getDelimiters());
      assertEquals(12, syntaxDocument0.getFontSize());
      assertEquals("\\", syntaxDocument0.getQuoteEscape());
      assertEquals("//", syntaxDocument0.getSingleLineCommentStart());
  }

  @Test
  public void test16()  throws Throwable  {
      Properties properties0 = new Properties();
      SyntaxDocument syntaxDocument0 = new SyntaxDocument(properties0);
      assertNotNull(syntaxDocument0);
      
      SyntaxDocument.ATTR_TYPE syntaxDocument_ATTR_TYPE0 = SyntaxDocument.ATTR_TYPE.Normal;
      syntaxDocument0.setAttributeFont(syntaxDocument_ATTR_TYPE0, 0);
      assertEquals(";:{}()[]+-/%<=>!&|^~*", syntaxDocument0.getDelimiters());
      assertEquals("{", syntaxDocument0.getBlockStart());
      assertEquals("*/", syntaxDocument0.getMultiLineCommentEnd());
      assertEquals(true, syntaxDocument0.getCaseSensitive());
      assertEquals("\\", syntaxDocument0.getQuoteEscape());
      assertEquals("//", syntaxDocument0.getSingleLineCommentStart());
      assertEquals("\"'", syntaxDocument0.getQuoteDelimiters());
      assertEquals(2, syntaxDocument0.getIndentationSize());
      assertEquals("monospaced", syntaxDocument0.getFontName());
      assertEquals("/*", syntaxDocument0.getMultiLineCommentStart());
      assertEquals("}", syntaxDocument0.getBlockEnd());
  }

  @Test
  public void test17()  throws Throwable  {
      Properties properties0 = new Properties();
      SyntaxDocument syntaxDocument0 = new SyntaxDocument(properties0);
      assertNotNull(syntaxDocument0);
      
      SimpleAttributeSet simpleAttributeSet0 = SyntaxDocument.DEFAULT_STRING;
      Color color0 = syntaxDocument0.getBackground((AttributeSet) simpleAttributeSet0);
      SyntaxDocument.ATTR_TYPE syntaxDocument_ATTR_TYPE0 = SyntaxDocument.ATTR_TYPE.Quote;
      syntaxDocument0.setAttributeColor(syntaxDocument_ATTR_TYPE0, color0);
      assertEquals("size=12 TabSet=[ tab @14.0 - tab @28.0 - tab @42.0 - tab @56.0 - tab @70.0 - tab @84.0 - tab @98.0 - tab @112.0 - tab @126.0 - tab @140.0 - tab @154.0 - tab @168.0 - tab @182.0 - tab @196.0 - tab @210.0 - tab @224.0 - tab @238.0 - tab @252.0 - tab @266.0 - tab @280.0 - tab @294.0 - tab @308.0 - tab @322.0 - tab @336.0 - tab @350.0 - tab @364.0 - tab @378.0 - tab @392.0 - tab @406.0 - tab @420.0 - tab @434.0 - tab @448.0 - tab @462.0 - tab @476.0 - tab @490.0 ] bold=false family=monospaced foreground=java.awt.Color[r=0,g=0,b=0] italic=false ", simpleAttributeSet0.toString());
      assertEquals("monospaced", syntaxDocument0.getFontName());
  }

  @Test
  public void test18()  throws Throwable  {
      Properties properties0 = new Properties();
      SyntaxDocument syntaxDocument0 = new SyntaxDocument(properties0);
      assertNotNull(syntaxDocument0);
      
      Color color0 = Color.orange;
      SyntaxDocument.ATTR_TYPE syntaxDocument_ATTR_TYPE0 = SyntaxDocument.ATTR_TYPE.Comment;
      syntaxDocument0.setAttributeColor(syntaxDocument_ATTR_TYPE0, color0);
      assertEquals(2, syntaxDocument0.getIndentationSize());
      assertEquals(true, syntaxDocument0.getAddMatchingEndBlocks());
      assertEquals("//", syntaxDocument0.getSingleLineCommentStart());
      assertEquals("monospaced", syntaxDocument0.getFontName());
      assertEquals("{", syntaxDocument0.getBlockStart());
      assertEquals("/*", syntaxDocument0.getMultiLineCommentStart());
      assertEquals(12, syntaxDocument0.getFontSize());
      assertEquals(true, syntaxDocument0.getUseBlanks());
      assertEquals("\"'", syntaxDocument0.getQuoteDelimiters());
      assertEquals("\\", syntaxDocument0.getQuoteEscape());
      assertEquals("*/", syntaxDocument0.getMultiLineCommentEnd());
      assertEquals("}", syntaxDocument0.getBlockEnd());
      assertEquals(";:{}()[]+-/%<=>!&|^~*", syntaxDocument0.getDelimiters());
      assertEquals(true, syntaxDocument0.getCaseSensitive());
  }

  @Test
  public void test19()  throws Throwable  {
      Properties properties0 = new Properties();
      SyntaxDocument syntaxDocument0 = new SyntaxDocument(properties0);
      assertNotNull(syntaxDocument0);
      
      SyntaxDocument.ATTR_TYPE syntaxDocument_ATTR_TYPE0 = SyntaxDocument.ATTR_TYPE.Normal;
      Color color0 = Color.orange;
      syntaxDocument0.setAttributeColor(syntaxDocument_ATTR_TYPE0, color0);
      assertEquals("/*", syntaxDocument0.getMultiLineCommentStart());
      assertEquals(2, syntaxDocument0.getIndentationSize());
      assertEquals("//", syntaxDocument0.getSingleLineCommentStart());
      assertEquals("\"'", syntaxDocument0.getQuoteDelimiters());
      assertEquals("{", syntaxDocument0.getBlockStart());
      assertEquals("*/", syntaxDocument0.getMultiLineCommentEnd());
      assertEquals(";:{}()[]+-/%<=>!&|^~*", syntaxDocument0.getDelimiters());
      assertEquals("monospaced", syntaxDocument0.getFontName());
      assertEquals(12, syntaxDocument0.getFontSize());
      assertEquals("}", syntaxDocument0.getBlockEnd());
      assertEquals(true, syntaxDocument0.getCaseSensitive());
      assertEquals("\\", syntaxDocument0.getQuoteEscape());
  }

  @Test
  public void test20()  throws Throwable  {
      Properties properties0 = new Properties();
      SyntaxDocument syntaxDocument0 = new SyntaxDocument(properties0);
      assertEquals(true, syntaxDocument0.getCaseSensitive());
      assertNotNull(syntaxDocument0);
      
      syntaxDocument0.setCaseSensitive(false);
      syntaxDocument0.getKeywordFormatting("3");
      assertEquals(true, syntaxDocument0.getAddMatchingEndBlocks());
  }

  @Test
  public void test21()  throws Throwable  {
      Properties properties0 = new Properties();
      SyntaxDocument syntaxDocument0 = new SyntaxDocument(properties0);
      assertNotNull(syntaxDocument0);
      
      JTextPane jTextPane0 = new JTextPane();
      MutableAttributeSet mutableAttributeSet0 = jTextPane0.getInputAttributes();
      syntaxDocument0.insertString(0, "Median (ints): ", (AttributeSet) mutableAttributeSet0);
      assertEquals(15, syntaxDocument0.getLength());
      assertEquals("*/", syntaxDocument0.getMultiLineCommentEnd());
  }

  @Test
  public void test22()  throws Throwable  {
      Properties properties0 = new Properties();
      SyntaxDocument syntaxDocument0 = new SyntaxDocument(properties0);
      assertEquals(true, syntaxDocument0.getCaseSensitive());
      assertNotNull(syntaxDocument0);
      
      syntaxDocument0.setCaseSensitive(false);
      syntaxDocument0.removeKeyword("bK78[N");
      assertEquals("//", syntaxDocument0.getSingleLineCommentStart());
  }

  @Test
  public void test23()  throws Throwable  {
      Properties properties0 = new Properties();
      SyntaxDocument syntaxDocument0 = new SyntaxDocument(properties0);
      assertNotNull(syntaxDocument0);
      
      syntaxDocument0.removeKeyword("{}");
      assertEquals("//", syntaxDocument0.getSingleLineCommentStart());
      assertEquals(";:{}()[]+-/%<=>!&|^~*", syntaxDocument0.getDelimiters());
      assertEquals("/*", syntaxDocument0.getMultiLineCommentStart());
      assertEquals(true, syntaxDocument0.getCaseSensitive());
      assertEquals(true, syntaxDocument0.getAddMatchingEndBlocks());
      assertEquals(true, syntaxDocument0.getMultiLineComment());
      assertEquals(2, syntaxDocument0.getIndentationSize());
      assertEquals("{", syntaxDocument0.getBlockStart());
      assertEquals("*/", syntaxDocument0.getMultiLineCommentEnd());
      assertEquals("monospaced", syntaxDocument0.getFontName());
      assertEquals("\\", syntaxDocument0.getQuoteEscape());
  }

  @Test
  public void test24()  throws Throwable  {
      Properties properties0 = new Properties();
      SyntaxDocument syntaxDocument0 = new SyntaxDocument(properties0);
      assertEquals(true, syntaxDocument0.getAddMatchingEndBlocks());
      assertNotNull(syntaxDocument0);
      
      syntaxDocument0.setAddMatchingEndBlocks(false);
      try {
        syntaxDocument0.insertString((-309), "$", (AttributeSet) null);
        fail("Expecting exception: BadLocationException");
      } catch(BadLocationException e) {
        /*
         * Invalid insert
         */
      }
  }

  @Test
  public void test25()  throws Throwable  {
      Properties properties0 = new Properties();
      SyntaxDocument syntaxDocument0 = new SyntaxDocument(properties0);
      assertNotNull(syntaxDocument0);
      
      JTextPane jTextPane0 = new JTextPane();
      MutableAttributeSet mutableAttributeSet0 = jTextPane0.getInputAttributes();
      syntaxDocument0.setBlockStart("{\n  \n}");
      syntaxDocument0.insertString(0, "{\n  \n}", (AttributeSet) mutableAttributeSet0);
      assertEquals(11, syntaxDocument0.getLength());
      assertEquals(true, syntaxDocument0.getAddMatchingEndBlocks());
  }

  @Test
  public void test26()  throws Throwable  {
      Properties properties0 = new Properties();
      SyntaxDocument syntaxDocument0 = new SyntaxDocument(properties0);
      assertNotNull(syntaxDocument0);
      
      syntaxDocument0.setUseBlanks(false);
      JTextPane jTextPane0 = new JTextPane();
      StyleContext.NamedStyle styleContext_NamedStyle0 = (StyleContext.NamedStyle)jTextPane0.getLogicalStyle();
      syntaxDocument0.insertString(0, "'AZ", (AttributeSet) styleContext_NamedStyle0);
      assertEquals(3, syntaxDocument0.getLength());
  }

  @Test
  public void test27()  throws Throwable  {
      Properties properties0 = new Properties();
      SyntaxDocument syntaxDocument0 = new SyntaxDocument(properties0);
      assertNotNull(syntaxDocument0);
      assertEquals(true, syntaxDocument0.getMultiLineComment());
      
      syntaxDocument0.setMultiLineComment(false);
      syntaxDocument0.remove(1, (-1451));
      assertEquals("//", syntaxDocument0.getSingleLineCommentStart());
  }

  @Test
  public void test28()  throws Throwable  {
      Properties properties0 = new Properties();
      SyntaxDocument syntaxDocument0 = new SyntaxDocument(properties0);
      assertEquals(true, syntaxDocument0.getMultiLineComment());
      assertNotNull(syntaxDocument0);
      
      syntaxDocument0.setMultiLineComment(false);
      boolean boolean0 = syntaxDocument0.commentLinesBefore(";:{}()[]+-/%<=>!&|^~*", 0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test29()  throws Throwable  {
      Properties properties0 = new Properties();
      SyntaxDocument syntaxDocument0 = new SyntaxDocument(properties0);
      assertNotNull(syntaxDocument0);
      
      syntaxDocument0.commentLinesAfter("d(YMQ28&u6s]Q9", 0);
      assertEquals(true, syntaxDocument0.getAddMatchingEndBlocks());
      assertEquals("{", syntaxDocument0.getBlockStart());
      assertEquals("//", syntaxDocument0.getSingleLineCommentStart());
      assertEquals(true, syntaxDocument0.getCaseSensitive());
      assertEquals("\\", syntaxDocument0.getQuoteEscape());
      assertEquals(2, syntaxDocument0.getIndentationSize());
      assertEquals(12, syntaxDocument0.getFontSize());
      assertEquals(true, syntaxDocument0.getMultiLineComment());
      assertEquals("*/", syntaxDocument0.getMultiLineCommentEnd());
      assertEquals("\"'", syntaxDocument0.getQuoteDelimiters());
      assertEquals("}", syntaxDocument0.getBlockEnd());
      assertEquals("monospaced", syntaxDocument0.getFontName());
      assertEquals(true, syntaxDocument0.getUseBlanks());
  }

  @Test
  public void test30()  throws Throwable  {
      Properties properties0 = new Properties();
      SyntaxDocument syntaxDocument0 = new SyntaxDocument(properties0);
      assertNotNull(syntaxDocument0);
      
      syntaxDocument0.setMultiLineCommentEnd("");
      syntaxDocument0.commentLinesAfter("aV`pB4c\"'vLUe`]", 0);
      assertEquals("", syntaxDocument0.getMultiLineCommentEnd());
      assertEquals(true, syntaxDocument0.getMultiLineComment());
  }

  @Test
  public void test31()  throws Throwable  {
      Properties properties0 = new Properties();
      SyntaxDocument syntaxDocument0 = new SyntaxDocument(properties0);
      assertNotNull(syntaxDocument0);
      
      syntaxDocument0.setMultiLineCommentEnd("");
      syntaxDocument0.setMultiLineCommentStart("");
      syntaxDocument0.commentLinesAfter("aV`pB4c\"'vLUe`]", 0);
      assertEquals("", syntaxDocument0.getMultiLineCommentEnd());
      assertEquals("//", syntaxDocument0.getSingleLineCommentStart());
  }

  @Test
  public void test32()  throws Throwable  {
      Properties properties0 = new Properties();
      SyntaxDocument syntaxDocument0 = new SyntaxDocument(properties0);
      assertNotNull(syntaxDocument0);
      assertEquals("/*", syntaxDocument0.getMultiLineCommentStart());
      
      syntaxDocument0.setMultiLineCommentStart("");
      syntaxDocument0.processChangedLines((-659), 0);
      assertEquals("}", syntaxDocument0.getBlockEnd());
  }

  @Test
  public void test33()  throws Throwable  {
      Properties properties0 = new Properties();
      SyntaxDocument syntaxDocument0 = new SyntaxDocument(properties0);
      assertNotNull(syntaxDocument0);
      
      syntaxDocument0.setMultiLineCommentEnd("");
      syntaxDocument0.processChangedLines((-659), 0);
      assertEquals("", syntaxDocument0.getMultiLineCommentEnd());
      assertEquals(false, syntaxDocument0.isMultiLineComment());
  }

  @Test
  public void test34()  throws Throwable  {
      Properties properties0 = new Properties();
      SyntaxDocument syntaxDocument0 = new SyntaxDocument(properties0);
      assertNotNull(syntaxDocument0);
      
      JTextPane jTextPane0 = new JTextPane();
      MutableAttributeSet mutableAttributeSet0 = jTextPane0.getInputAttributes();
      syntaxDocument0.insertString(0, "{\n  \n}", (AttributeSet) mutableAttributeSet0);
      syntaxDocument0.insertString(0, "{\n  \n}", (AttributeSet) mutableAttributeSet0);
      assertEquals(";:{}()[]+-/%<=>!&|^~*", syntaxDocument0.getDelimiters());
      assertEquals(12, syntaxDocument0.getFontSize());
      assertEquals(true, syntaxDocument0.getAddMatchingEndBlocks());
      assertEquals("*/", syntaxDocument0.getMultiLineCommentEnd());
      assertEquals("/*", syntaxDocument0.getMultiLineCommentStart());
      assertEquals("}", syntaxDocument0.getBlockEnd());
      assertEquals(false, syntaxDocument0.isMultiLineComment());
      assertEquals("\"'", syntaxDocument0.getQuoteDelimiters());
      assertEquals("monospaced", syntaxDocument0.getFontName());
      assertEquals("{", syntaxDocument0.getBlockStart());
  }

  @Test
  public void test35()  throws Throwable  {
      Properties properties0 = new Properties();
      SyntaxDocument syntaxDocument0 = new SyntaxDocument(properties0);
      assertEquals("*/", syntaxDocument0.getMultiLineCommentEnd());
      assertNotNull(syntaxDocument0);
      
      syntaxDocument0.setMultiLineCommentEnd("");
      syntaxDocument0.applyHighlighting("{\n  \n}", 0);
      assertEquals(true, syntaxDocument0.getAddMatchingEndBlocks());
  }

  @Test
  public void test36()  throws Throwable  {
      Properties properties0 = new Properties();
      SyntaxDocument syntaxDocument0 = new SyntaxDocument(properties0);
      assertNotNull(syntaxDocument0);
      
      syntaxDocument0.applyHighlighting("//", 0);
      assertEquals("{", syntaxDocument0.getBlockStart());
      assertEquals(false, syntaxDocument0.isMultiLineComment());
      assertEquals("//", syntaxDocument0.getSingleLineCommentStart());
      assertEquals("\"'", syntaxDocument0.getQuoteDelimiters());
      assertEquals("monospaced", syntaxDocument0.getFontName());
      assertEquals("/*", syntaxDocument0.getMultiLineCommentStart());
      assertEquals(true, syntaxDocument0.getCaseSensitive());
      assertEquals(true, syntaxDocument0.getMultiLineComment());
      assertEquals("*/", syntaxDocument0.getMultiLineCommentEnd());
      assertEquals(2, syntaxDocument0.getIndentationSize());
      assertEquals(";:{}()[]+-/%<=>!&|^~*", syntaxDocument0.getDelimiters());
      assertEquals("\\", syntaxDocument0.getQuoteEscape());
  }

  @Test
  public void test37()  throws Throwable  {
      Properties properties0 = new Properties();
      SyntaxDocument syntaxDocument0 = new SyntaxDocument(properties0);
      assertEquals(true, syntaxDocument0.getMultiLineComment());
      assertNotNull(syntaxDocument0);
      
      syntaxDocument0.setMultiLineComment(false);
      syntaxDocument0.startingMultiLineComment(";:{}()[]+-/%<=>!&|^~*", 12, 12);
      assertEquals("\\", syntaxDocument0.getQuoteEscape());
  }

  @Test
  public void test38()  throws Throwable  {
      Properties properties0 = new Properties();
      SyntaxDocument syntaxDocument0 = new SyntaxDocument(properties0);
      assertNotNull(syntaxDocument0);
      assertEquals(true, syntaxDocument0.getMultiLineComment());
      
      syntaxDocument0.setMultiLineComment(false);
      syntaxDocument0.endingMultiLineComment("LOWER_LEADING_CORNER", (-519), 0);
      assertEquals("//", syntaxDocument0.getSingleLineCommentStart());
  }

  @Test
  public void test39()  throws Throwable  {
      Properties properties0 = new Properties();
      SyntaxDocument syntaxDocument0 = new SyntaxDocument(properties0);
      assertNotNull(syntaxDocument0);
      
      int int0 = syntaxDocument0.getQuoteToken("Y~Ot\"9b$]Y)\"w", 0, (-1));
      assertEquals(2, syntaxDocument0.getIndentationSize());
      assertEquals(";:{}()[]+-/%<=>!&|^~*", syntaxDocument0.getDelimiters());
      assertEquals("*/", syntaxDocument0.getMultiLineCommentEnd());
      assertEquals(12, syntaxDocument0.getFontSize());
      assertEquals(true, syntaxDocument0.getAddMatchingEndBlocks());
      assertEquals("\\", syntaxDocument0.getQuoteEscape());
      assertEquals("{", syntaxDocument0.getBlockStart());
      assertEquals("monospaced", syntaxDocument0.getFontName());
      assertEquals(0, int0);
      assertEquals("/*", syntaxDocument0.getMultiLineCommentStart());
      assertEquals("//", syntaxDocument0.getSingleLineCommentStart());
  }

  @Test
  public void test40()  throws Throwable  {
      Properties properties0 = new Properties();
      SyntaxDocument syntaxDocument0 = new SyntaxDocument(properties0);
      assertNotNull(syntaxDocument0);
      
      int int0 = syntaxDocument0.lastIndexOf("'AZ", "'AZ", (int) (byte)69);
      assertEquals("\"'", syntaxDocument0.getQuoteDelimiters());
      assertEquals("*/", syntaxDocument0.getMultiLineCommentEnd());
      assertEquals(";:{}()[]+-/%<=>!&|^~*", syntaxDocument0.getDelimiters());
      assertEquals((-1), int0);
      assertEquals("/*", syntaxDocument0.getMultiLineCommentStart());
      assertEquals("\\", syntaxDocument0.getQuoteEscape());
      assertEquals(12, syntaxDocument0.getFontSize());
      assertEquals("}", syntaxDocument0.getBlockEnd());
      assertEquals(true, syntaxDocument0.getMultiLineComment());
      assertEquals("{", syntaxDocument0.getBlockStart());
      assertEquals(2, syntaxDocument0.getIndentationSize());
  }
}
