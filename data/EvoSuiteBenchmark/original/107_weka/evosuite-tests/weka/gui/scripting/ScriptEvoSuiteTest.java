/*
 * This file was automatically generated by EvoSuite
 */

package weka.gui.scripting;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.File;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.swing.text.AbstractDocument;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Document;
import javax.swing.text.GapContent;
import javax.swing.text.PlainDocument;
import javax.swing.text.StringContent;
import javax.swing.text.StyleContext;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import weka.core.WekaException;
import weka.gui.scripting.GroovyScript;
import weka.gui.scripting.JythonScript;
import weka.gui.scripting.Script;
import weka.gui.scripting.event.ScriptExecutionEvent;
import weka.gui.scripting.event.ScriptExecutionListener;

@RunWith(EvoSuiteRunner.class)
public class ScriptEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      GroovyScript groovyScript0 = new GroovyScript((Document) defaultStyledDocument0);
      groovyScript0.setContent("_wy,I%S(4v.!~xase");
      assertEquals(18, defaultStyledDocument0.getLength());
      
      groovyScript0.empty();
      assertEquals("", groovyScript0.getContent());
  }

  @Test
  public void test1()  throws Throwable  {
      GroovyScript groovyScript0 = new GroovyScript();
      assertNotNull(groovyScript0);
      
      String[] stringArray0 = new String[8];
      groovyScript0.setOptions(stringArray0);
      assertEquals(false, groovyScript0.isModified());
  }

  @Test
  public void test2()  throws Throwable  {
      GroovyScript groovyScript0 = new GroovyScript();
      assertNotNull(groovyScript0);
      
      boolean boolean0 = groovyScript0.isModified();
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      GroovyScript groovyScript0 = new GroovyScript();
      assertNotNull(groovyScript0);
      
      String[] stringArray0 = new String[2];
      groovyScript0.execute(stringArray0);
      assertEquals(true, groovyScript0.isRunning());
      
      groovyScript0.stop();
      assertEquals(false, groovyScript0.isModified());
  }

  @Test
  public void test4()  throws Throwable  {
      StringContent stringContent0 = new StringContent();
      PlainDocument plainDocument0 = new PlainDocument((AbstractDocument.Content) stringContent0);
      JythonScript jythonScript0 = new JythonScript((Document) plainDocument0);
      assertNotNull(jythonScript0);
      
      jythonScript0.removeScriptFinishedListener((ScriptExecutionListener) null);
      assertEquals(false, jythonScript0.isModified());
  }

  @Test
  public void test5()  throws Throwable  {
      JythonScript jythonScript0 = new JythonScript();
      assertNotNull(jythonScript0);
      
      jythonScript0.addScriptFinishedListener((ScriptExecutionListener) null);
      // Undeclared exception!
      try {
        jythonScript0.notifyScriptFinishedListeners((ScriptExecutionEvent) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      GroovyScript groovyScript0 = new GroovyScript();
      assertNotNull(groovyScript0);
      
      String string0 = Script.makeOptionString((Script) groovyScript0);
      assertEquals(false, groovyScript0.isModified());
      assertNotNull(string0);
      assertEquals("\nHelp requested:\n\n-h or -help\n\tDisplays this help screen.\n-s <file>\n\tThe script to execute.\n\nAny additional options are passed on to the script as\ncommand-line parameters.\n\n", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      StringContent stringContent0 = new StringContent();
      PlainDocument plainDocument0 = new PlainDocument((AbstractDocument.Content) stringContent0);
      JythonScript jythonScript0 = new JythonScript((Document) plainDocument0);
      assertNotNull(jythonScript0);
      
      String string0 = jythonScript0.getNewLine();
      assertEquals("\n", string0);
      assertNotNull(string0);
      assertEquals(false, jythonScript0.isModified());
  }

  @Test
  public void test8()  throws Throwable  {
      GroovyScript groovyScript0 = new GroovyScript();
      assertNotNull(groovyScript0);
      
      groovyScript0.getOptions();
      assertEquals(false, groovyScript0.isModified());
  }

  @Test
  public void test9()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          GapContent gapContent0 = new GapContent();
          PlainDocument plainDocument0 = new PlainDocument((AbstractDocument.Content) gapContent0);
          JythonScript jythonScript0 = new JythonScript((Document) plainDocument0);
          assertNotNull(jythonScript0);
          
          String[] stringArray0 = new String[1];
          File file0 = new File("q;it8;Xb");
          jythonScript0.saveAs(file0);
          stringArray0[0] = "q;it8;Xb";
          JythonScript.JythonThread jythonScript_JythonThread0 = (JythonScript.JythonThread)jythonScript0.newThread(stringArray0);
          // Undeclared exception!
          try {
            jythonScript_JythonThread0.run();
            fail("Expecting exception: NoClassDefFoundError");
          } catch(NoClassDefFoundError e) {
            /*
             * weka/gui/scripting/event/ScriptExecutionEvent$Type
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test10()  throws Throwable  {
      GapContent gapContent0 = new GapContent();
      PlainDocument plainDocument0 = new PlainDocument((AbstractDocument.Content) gapContent0);
      JythonScript jythonScript0 = new JythonScript((Document) plainDocument0);
      assertNotNull(jythonScript0);
      
      String[] stringArray0 = new String[1];
      JythonScript.JythonThread jythonScript_JythonThread0 = (JythonScript.JythonThread)jythonScript0.newThread(stringArray0);
      jythonScript_JythonThread0.stopScript();
      assertEquals("Thread[Thread-5726,5,Test Execution]", jythonScript_JythonThread0.toString());
      assertEquals("Thread-5726", jythonScript_JythonThread0.getName());
  }

  @Test
  public void test11()  throws Throwable  {
      File file0 = new File("", "\nHelp requested:\n\n-h or -help\n\tDisplays this help screen.\n-s <file>\n\tThe script to execute.\n\nAny additional options are passed on to the script as\ncommand-line parameters.\n\n");
      JythonScript jythonScript0 = new JythonScript((Document) null, file0);
      assertNotNull(jythonScript0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      try {
        Script.runScript((Script) jythonScript0, stringArray0);
        fail("Expecting exception: WekaException");
      } catch(WekaException e) {
        /*
         * No script supplied!
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      assertEquals("{name=line.separator,resolver=AttributeSet,}\n{resolver=AttributeSet,}\n{name=tt[f&_aIz@,resolver=AttributeSet,}\n{resolver=AttributeSet,}\n{name=|t/f6N,}\n{name=tt[f&_aIz@,resolver=AttributeSet,}\n{name=.groovy,resolver=AttributeSet,}\n{name=Neithe66'run' nor 'main' method found!.py.groovy,resolver=AttributeSet,}\n{name=|<NcM;#+/=*$,resolver=AttributeSet,}\n{name=line.separator,}\n{foreground=sun.swing.PrintColorUIResource[r=51,g=51,b=51],family=Dialog,size=12,FONT_ATTRIBUTE_KEY=javax.swing.plaf.FontUIResource[family=Dialog,name=Dialog,style=plain,size=12],bold=false,name=default,italic=false,}\n{name=Script execution failed,}\n{name=|<NcM;#+/=*$,}\n{name=.groovy,}\n{name=or..XI$.groovy,resolver=AttributeSet,}\n{name=Neithe66'run' nor 'main; method found!.pyDgroovy.groovy,}\n{name=U&,}\n{bidiLevel=0,}\n{name=SmallIcon,resolver=AttributeSet,}\n", styleContext0.toString());
      
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      File file0 = new File("Neithe66'run' nor 'main' method found!.py.groovy");
      GroovyScript groovyScript0 = new GroovyScript((Document) defaultStyledDocument0, file0);
      String string0 = groovyScript0.getContent();
      assertEquals("", string0);
  }

  @Test
  public void test13()  throws Throwable  {
      GroovyScript groovyScript0 = new GroovyScript();
      assertNotNull(groovyScript0);
      
      String string0 = groovyScript0.getContent();
      assertNotNull(string0);
      assertEquals(false, groovyScript0.isModified());
  }

  @Test
  public void test14()  throws Throwable  {
      GroovyScript groovyScript0 = new GroovyScript();
      assertNotNull(groovyScript0);
      
      groovyScript0.setContent("\nHelp requested:\n\n-h or -help\n\tDisplays this help screen.\n-s <file>\n\tThe script to execute.\n\nAny additional options are passed on to the script as\ncommand-line parameters.\n\n");
      assertEquals(false, groovyScript0.isModified());
  }

  @Test
  public void test15()  throws Throwable  {
      GroovyScript groovyScript0 = new GroovyScript();
      assertNotNull(groovyScript0);
      
      groovyScript0.empty();
      assertEquals(false, groovyScript0.isModified());
  }

  @Test
  public void test16()  throws Throwable  {
      PlainDocument plainDocument0 = new PlainDocument();
      File file0 = new File("K:Pp[`zj)g=zY,'", "K:Pp[`zj)g=zY,'");
      JythonScript jythonScript0 = new JythonScript((Document) plainDocument0, file0);
      assertEquals(false, jythonScript0.isModified());
      assertNotNull(jythonScript0);
  }

  @Test
  public void test17()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          GapContent gapContent0 = new GapContent();
          PlainDocument plainDocument0 = new PlainDocument((AbstractDocument.Content) gapContent0);
          JythonScript jythonScript0 = new JythonScript((Document) plainDocument0);
          assertNotNull(jythonScript0);
          
          File file0 = new File(".py");
          boolean boolean0 = jythonScript0.saveAs(file0);
          assertEquals(false, boolean0);
          
          boolean boolean1 = jythonScript0.save();
          assertEquals(false, jythonScript0.isModified());
          assertTrue(boolean1 == boolean0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test18()  throws Throwable  {
      GroovyScript groovyScript0 = new GroovyScript();
      assertNotNull(groovyScript0);
      
      boolean boolean0 = groovyScript0.save();
      assertEquals(false, groovyScript0.isModified());
      assertEquals(false, boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      File file0 = new File("K:Pp[`zj)g=zY,'", "K:Pp[`zj)g=zY,'");
      GroovyScript groovyScript0 = new GroovyScript();
      assertNotNull(groovyScript0);
      
      boolean boolean0 = groovyScript0.saveAs(file0);
      assertEquals(true, boolean0);
      assertEquals(false, groovyScript0.isModified());
  }

  @Test
  public void test20()  throws Throwable  {
      GroovyScript groovyScript0 = new GroovyScript();
      assertNotNull(groovyScript0);
      
      File file0 = new File((File) null, "A");
      String[] stringArray0 = new String[9];
      groovyScript0.run(file0, stringArray0);
      assertEquals(false, groovyScript0.isModified());
      assertEquals(false, groovyScript0.save());
  }

  @Test
  public void test21()  throws Throwable  {
      StringContent stringContent0 = new StringContent();
      PlainDocument plainDocument0 = new PlainDocument((AbstractDocument.Content) stringContent0);
      JythonScript jythonScript0 = new JythonScript((Document) plainDocument0);
      assertNotNull(jythonScript0);
      
      try {
        jythonScript0.start((String[]) null);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * The Script contains no content?
         */
      }
  }

  @Test
  public void test22()  throws Throwable  {
      JythonScript jythonScript0 = new JythonScript();
      assertNotNull(jythonScript0);
      
      jythonScript0.stop();
      assertEquals(false, jythonScript0.isModified());
      assertEquals(false, jythonScript0.isRunning());
  }

  @Test
  public void test23()  throws Throwable  {
      PlainDocument plainDocument0 = new PlainDocument();
      JythonScript jythonScript0 = new JythonScript((Document) plainDocument0);
      assertNotNull(jythonScript0);
      
      String string0 = jythonScript0.toString();
      assertEquals("", string0);
      assertEquals(false, jythonScript0.isModified());
      assertNotNull(string0);
  }

  @Test
  public void test24()  throws Throwable  {
      GroovyScript groovyScript0 = new GroovyScript();
      assertNotNull(groovyScript0);
      
      String string0 = groovyScript0.toString();
      assertEquals("", string0);
      assertEquals(false, groovyScript0.isModified());
      assertNotNull(string0);
  }
}
