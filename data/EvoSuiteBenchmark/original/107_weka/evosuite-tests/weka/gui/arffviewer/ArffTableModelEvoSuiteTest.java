/*
 * This file was automatically generated by EvoSuite
 */

package weka.gui.arffviewer;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.awt.HeadlessException;
import java.util.ArrayList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.swing.JTable;
import javax.swing.event.TableModelListener;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import weka.core.Attribute;
import weka.core.Instances;
import weka.core.converters.AbstractFileLoader;
import weka.core.converters.SerializedInstancesLoader;
import weka.gui.arffviewer.ArffTableModel;

@RunWith(EvoSuiteRunner.class)
public class ArffTableModelEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = false; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  //Test case number: 0
  /*
   * 6 covered goals:
   * 1 weka.gui.arffviewer.ArffTableModel.isReadOnly()Z: root-Branch
   * 2 weka.gui.arffviewer.ArffTableModel.<init>(Ljava/lang/String;[Lweka/core/converters/AbstractFileLoader;)V: I7 Branch 1 IFNULL L120 - false
   * 3 weka.gui.arffviewer.ArffTableModel.<init>(Ljava/lang/String;[Lweka/core/converters/AbstractFileLoader;)V: I11 Branch 2 IFGT L120 - true
   * 4 weka.gui.arffviewer.ArffTableModel.getRowCount()I: I4 Branch 55 IFNONNULL L602 - false
   * 5 weka.gui.arffviewer.ArffTableModel.isCellEditable(II)Z: I3 Branch 84 IFLE L730 - false
   * 6 weka.gui.arffviewer.ArffTableModel.isCellEditable(II)Z: I6 Branch 85 IFNE L730 - false
   */
  @Test
  public void test0()  throws Throwable  {
      AbstractFileLoader[] abstractFileLoaderArray0 = new AbstractFileLoader[10];
      ArffTableModel arffTableModel0 = new ArffTableModel("", abstractFileLoaderArray0);
      assertNotNull(arffTableModel0);
      
      boolean boolean0 = arffTableModel0.isCellEditable((-1), 1607);
      assertEquals(true, arffTableModel0.isNotificationEnabled());
      assertEquals(false, arffTableModel0.getShowAttributeIndex());
      assertEquals(0, arffTableModel0.getRowCount());
      assertEquals(true, arffTableModel0.isUndoEnabled());
      assertEquals(true, boolean0);
  }

  //Test case number: 1
  /*
   * 13 covered goals:
   * 1 weka.gui.arffviewer.ArffTableModel.isUndoEnabled()Z: root-Branch
   * 2 weka.gui.arffviewer.ArffTableModel.<init>(Lweka/core/Instances;)V: root-Branch
   * 3 weka.gui.arffviewer.ArffTableModel.isNotificationEnabled()Z: root-Branch
   * 4 weka.gui.arffviewer.ArffTableModel.getInstances()Lweka/core/Instances;: root-Branch
   * 5 weka.gui.arffviewer.ArffTableModel.deleteInstanceAt(IZ)V: I3 Branch 25 IFLT L408 - false
   * 6 weka.gui.arffviewer.ArffTableModel.deleteInstanceAt(IZ)V: I7 Branch 26 IF_ICMPGE L408 - true
   * 7 weka.gui.arffviewer.ArffTableModel.deleteInstances([I)V: I22 Branch 29 IFLT L433 - true
   * 8 weka.gui.arffviewer.ArffTableModel.deleteInstances([I)V: I22 Branch 29 IFLT L433 - false
   * 9 weka.gui.arffviewer.ArffTableModel.getRowCount()I: I4 Branch 55 IFNONNULL L602 - true
   * 10 weka.gui.arffviewer.ArffTableModel.notifyListener(Ljavax/swing/event/TableModelEvent;)V: I4 Branch 97 IFNE L857 - true
   * 11 weka.gui.arffviewer.ArffTableModel.notifyListener(Ljavax/swing/event/TableModelEvent;)V: I18 Branch 98 IFEQ L861 - true
   * 12 weka.gui.arffviewer.ArffTableModel.addUndoPoint()V: I4 Branch 101 IFNE L926 - true
   * 13 weka.gui.arffviewer.ArffTableModel.addUndoPoint()V: I12 Branch 102 IFNULL L929 - false
   */
  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
          Instances instances0 = new Instances("Vf", arrayList0, 945);
          ArffTableModel arffTableModel0 = new ArffTableModel(instances0);
          assertNotNull(arffTableModel0);
          
          int[] intArray0 = new int[1];
          arffTableModel0.deleteInstances(intArray0);
          assertEquals(false, arffTableModel0.isReadOnly());
          assertEquals(false, arffTableModel0.getShowAttributeIndex());
          assertEquals(true, arffTableModel0.isNotificationEnabled());
          assertEquals(true, arffTableModel0.isUndoEnabled());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  //Test case number: 2
  /*
   * 4 covered goals:
   * 1 weka.gui.arffviewer.ArffTableModel.deleteAttributeAt(I)V: root-Branch
   * 2 weka.gui.arffviewer.ArffTableModel.deleteAttributeAt(IZ)V: I3 Branch 12 IFLE L301 - false
   * 3 weka.gui.arffviewer.ArffTableModel.deleteAttributeAt(IZ)V: I7 Branch 13 IF_ICMPGE L301 - true
   * 4 weka.gui.arffviewer.ArffTableModel.getColumnCount()I: I8 Branch 38 IFNULL L511 - false
   */
  @Test
  public void test2()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Vf", arrayList0, 945);
      ArffTableModel arffTableModel0 = new ArffTableModel(instances0);
      assertNotNull(arffTableModel0);
      
      arffTableModel0.deleteAttributeAt(10);
      assertEquals(false, arffTableModel0.getShowAttributeIndex());
      assertEquals(1, arffTableModel0.getColumnCount());
      assertEquals(true, arffTableModel0.isUndoEnabled());
      assertEquals(true, arffTableModel0.isNotificationEnabled());
      assertEquals(false, arffTableModel0.isReadOnly());
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * 1 weka.gui.arffviewer.ArffTableModel.deleteInstanceAt(I)V: root-Branch
   * 2 weka.gui.arffviewer.ArffTableModel.deleteInstanceAt(IZ)V: I3 Branch 25 IFLT L408 - true
   */
  @Test
  public void test3()  throws Throwable  {
      AbstractFileLoader[] abstractFileLoaderArray0 = new AbstractFileLoader[6];
      ArffTableModel arffTableModel0 = new ArffTableModel("", abstractFileLoaderArray0);
      assertNotNull(arffTableModel0);
      
      arffTableModel0.deleteInstanceAt((-499));
      assertEquals(true, arffTableModel0.isUndoEnabled());
      assertEquals(0, arffTableModel0.getRowCount());
      assertEquals(false, arffTableModel0.getShowAttributeIndex());
      assertEquals(true, arffTableModel0.isNotificationEnabled());
      assertEquals(false, arffTableModel0.isReadOnly());
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 weka.gui.arffviewer.ArffTableModel.removeTableModelListener(Ljavax/swing/event/TableModelListener;)V: root-Branch
   */
  @Test
  public void test4()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Vf", arrayList0, 945);
      ArffTableModel arffTableModel0 = new ArffTableModel(instances0);
      assertNotNull(arffTableModel0);
      
      JTable jTable0 = new JTable(945, 945);
      arffTableModel0.removeTableModelListener((TableModelListener) jTable0);
      assertEquals(false, arffTableModel0.getShowAttributeIndex());
      assertEquals(true, arffTableModel0.isUndoEnabled());
      assertEquals(true, arffTableModel0.isNotificationEnabled());
      assertEquals(false, arffTableModel0.isReadOnly());
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 weka.gui.arffviewer.ArffTableModel.getShowAttributeIndex()Z: root-Branch
   */
  @Test
  public void test5()  throws Throwable  {
      ArffTableModel arffTableModel0 = new ArffTableModel((Instances) null);
      assertNotNull(arffTableModel0);
      
      boolean boolean0 = arffTableModel0.getShowAttributeIndex();
      assertEquals(true, arffTableModel0.isNotificationEnabled());
      assertEquals(true, arffTableModel0.isUndoEnabled());
      assertEquals(0, arffTableModel0.getRowCount());
      assertEquals(false, arffTableModel0.isReadOnly());
      assertEquals(false, boolean0);
  }

  //Test case number: 6
  /*
   * 5 covered goals:
   * 1 weka.gui.arffviewer.ArffTableModel.setValueAt(Ljava/lang/Object;II)V: root-Branch
   * 2 weka.gui.arffviewer.ArffTableModel.getType(II)I: I7 Branch 8 IFLT L278 - true
   * 3 weka.gui.arffviewer.ArffTableModel.getValueAt(II)Ljava/lang/Object;: I20 Branch 64 IFLT L663 - true
   * 4 weka.gui.arffviewer.ArffTableModel.setValueAt(Ljava/lang/Object;IIZ)V: I4 Branch 86 IFNE L762 - false
   * 5 weka.gui.arffviewer.ArffTableModel.addUndoPoint()V: I12 Branch 102 IFNULL L929 - true
   */
  @Test
  public void test6()  throws Throwable  {
      ArffTableModel arffTableModel0 = new ArffTableModel((Instances) null);
      assertNotNull(arffTableModel0);
      
      // Undeclared exception!
      try {
        arffTableModel0.setValueAt((Object) "18381725548823169263", (-13), 1789);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  //Test case number: 7
  /*
   * 7 covered goals:
   * 1 weka.gui.arffviewer.ArffTableModel.renameAttributeAt(ILjava/lang/String;)V: I3 Branch 17 IFLE L337 - false
   * 2 weka.gui.arffviewer.ArffTableModel.renameAttributeAt(ILjava/lang/String;)V: I7 Branch 18 IF_ICMPGE L337 - true
   * 3 weka.gui.arffviewer.ArffTableModel.getColumnCount()I: I8 Branch 38 IFNULL L511 - true
   * 4 weka.gui.arffviewer.ArffTableModel.<init>(Ljava/lang/String;[Lweka/core/converters/AbstractFileLoader;)V: I11 Branch 2 IFGT L120 - false
   * 5 weka.gui.arffviewer.ArffTableModel.loadFile(Ljava/lang/String;[Lweka/core/converters/AbstractFileLoader;)V: I3 Branch 3 IFNULL L198 - false
   * 6 weka.gui.arffviewer.ArffTableModel.loadFile(Ljava/lang/String;[Lweka/core/converters/AbstractFileLoader;)V: I6 Branch 4 IFNE L198 - true
   * 7 weka.gui.arffviewer.ArffTableModel.loadFile(Ljava/lang/String;[Lweka/core/converters/AbstractFileLoader;)V: I23 Branch 5 IFNULL L204 - true
   */
  @Test
  public void test7()  throws Throwable  {
      AbstractFileLoader[] abstractFileLoaderArray0 = new AbstractFileLoader[9];
      ArffTableModel arffTableModel0 = new ArffTableModel("Vf", abstractFileLoaderArray0);
      assertNotNull(arffTableModel0);
      
      arffTableModel0.renameAttributeAt(1, "Vf");
      assertEquals(true, arffTableModel0.isUndoEnabled());
      assertEquals(true, arffTableModel0.isNotificationEnabled());
      assertEquals(false, arffTableModel0.getShowAttributeIndex());
      assertEquals(1, arffTableModel0.getColumnCount());
      assertEquals(0, arffTableModel0.getRowCount());
      assertEquals(false, arffTableModel0.isReadOnly());
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 weka.gui.arffviewer.ArffTableModel.loadFile(Ljava/lang/String;[Lweka/core/converters/AbstractFileLoader;)V: I23 Branch 5 IFNULL L204 - false
   */
  @Test
  public void test8()  throws Throwable  {
      AbstractFileLoader[] abstractFileLoaderArray0 = new AbstractFileLoader[9];
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      abstractFileLoaderArray0[0] = (AbstractFileLoader) serializedInstancesLoader0;
      ArffTableModel arffTableModel0 = null;
      try {
        arffTableModel0 = new ArffTableModel("   * @param obj\tthe Object array to turn into an Instance\n", abstractFileLoaderArray0);
        fail("Expecting exception: HeadlessException");
      } catch(HeadlessException e) {
      }
  }

  //Test case number: 9
  /*
   * 3 covered goals:
   * 1 weka.gui.arffviewer.ArffTableModel.getAttributeAt(I)Lweka/core/Attribute;: I3 Branch 6 IFLE L250 - false
   * 2 weka.gui.arffviewer.ArffTableModel.getAttributeAt(I)Lweka/core/Attribute;: I7 Branch 7 IF_ICMPGE L250 - true
   * 3 weka.gui.arffviewer.ArffTableModel.getColumnCount()I: I8 Branch 38 IFNULL L511 - true
   */
  @Test
  public void test9()  throws Throwable  {
      AbstractFileLoader[] abstractFileLoaderArray0 = new AbstractFileLoader[10];
      ArffTableModel arffTableModel0 = new ArffTableModel("", abstractFileLoaderArray0);
      assertNotNull(arffTableModel0);
      
      arffTableModel0.getAttributeAt(1505);
      assertEquals(false, arffTableModel0.isReadOnly());
      assertEquals(1, arffTableModel0.getColumnCount());
      assertEquals(false, arffTableModel0.getShowAttributeIndex());
      assertEquals(true, arffTableModel0.isUndoEnabled());
      assertEquals(true, arffTableModel0.isNotificationEnabled());
      assertEquals(0, arffTableModel0.getRowCount());
  }

  //Test case number: 10
  /*
   * 2 covered goals:
   * 1 weka.gui.arffviewer.ArffTableModel.getType(II)I: I7 Branch 8 IFLT L278 - false
   * 2 weka.gui.arffviewer.ArffTableModel.getType(II)I: I11 Branch 9 IF_ICMPGE L278 - true
   */
  @Test
  public void test10()  throws Throwable  {
      AbstractFileLoader[] abstractFileLoaderArray0 = new AbstractFileLoader[6];
      ArffTableModel arffTableModel0 = new ArffTableModel("", abstractFileLoaderArray0);
      assertNotNull(arffTableModel0);
      
      int int0 = arffTableModel0.getType(83, 0);
      assertEquals(true, arffTableModel0.isNotificationEnabled());
      assertEquals(0, arffTableModel0.getRowCount());
      assertEquals(true, arffTableModel0.isUndoEnabled());
      assertEquals(false, arffTableModel0.isReadOnly());
      assertEquals(false, arffTableModel0.getShowAttributeIndex());
      assertEquals(2, int0);
  }

  //Test case number: 11
  /*
   * 10 covered goals:
   * 1 weka.gui.arffviewer.ArffTableModel.deleteAttributeAt(IZ)V: I3 Branch 12 IFLE L301 - true
   * 2 weka.gui.arffviewer.ArffTableModel.deleteAttributes([I)V: I22 Branch 16 IFLT L323 - true
   * 3 weka.gui.arffviewer.ArffTableModel.deleteAttributes([I)V: I22 Branch 16 IFLT L323 - false
   * 4 weka.gui.arffviewer.ArffTableModel.isUndoEnabled()Z: root-Branch
   * 5 weka.gui.arffviewer.ArffTableModel.isNotificationEnabled()Z: root-Branch
   * 6 weka.gui.arffviewer.ArffTableModel.getInstances()Lweka/core/Instances;: root-Branch
   * 7 weka.gui.arffviewer.ArffTableModel.notifyListener(Ljavax/swing/event/TableModelEvent;)V: I4 Branch 97 IFNE L857 - true
   * 8 weka.gui.arffviewer.ArffTableModel.notifyListener(Ljavax/swing/event/TableModelEvent;)V: I18 Branch 98 IFEQ L861 - true
   * 9 weka.gui.arffviewer.ArffTableModel.addUndoPoint()V: I4 Branch 101 IFNE L926 - true
   * 10 weka.gui.arffviewer.ArffTableModel.addUndoPoint()V: I12 Branch 102 IFNULL L929 - true
   */
  @Test
  public void test11()  throws Throwable  {
      ArffTableModel arffTableModel0 = new ArffTableModel((Instances) null);
      assertNotNull(arffTableModel0);
      
      int[] intArray0 = new int[9];
      arffTableModel0.deleteAttributes(intArray0);
      assertEquals(true, arffTableModel0.isUndoEnabled());
      assertEquals(false, arffTableModel0.getShowAttributeIndex());
      assertEquals(0, arffTableModel0.getRowCount());
      assertEquals(true, arffTableModel0.isNotificationEnabled());
      assertEquals(false, arffTableModel0.isReadOnly());
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 weka.gui.arffviewer.ArffTableModel.renameAttributeAt(ILjava/lang/String;)V: I3 Branch 17 IFLE L337 - true
   */
  @Test
  public void test12()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Vf", arrayList0, 945);
      ArffTableModel arffTableModel0 = new ArffTableModel(instances0);
      assertNotNull(arffTableModel0);
      
      arffTableModel0.renameAttributeAt(0, "Vf");
      assertEquals(true, arffTableModel0.isUndoEnabled());
      assertEquals(false, arffTableModel0.isReadOnly());
      assertEquals(false, arffTableModel0.getShowAttributeIndex());
      assertEquals(true, arffTableModel0.isNotificationEnabled());
  }

  //Test case number: 13
  /*
   * 2 covered goals:
   * 1 weka.gui.arffviewer.ArffTableModel.attributeAsClassAt(I)V: I3 Branch 19 IFLE L355 - false
   * 2 weka.gui.arffviewer.ArffTableModel.attributeAsClassAt(I)V: I7 Branch 20 IF_ICMPGE L355 - true
   */
  @Test
  public void test13()  throws Throwable  {
      AbstractFileLoader[] abstractFileLoaderArray0 = new AbstractFileLoader[3];
      ArffTableModel arffTableModel0 = new ArffTableModel("", abstractFileLoaderArray0);
      assertNotNull(arffTableModel0);
      
      arffTableModel0.attributeAsClassAt(68);
      assertEquals(1, arffTableModel0.getColumnCount());
      assertEquals(true, arffTableModel0.isUndoEnabled());
      assertEquals(false, arffTableModel0.getShowAttributeIndex());
      assertEquals(false, arffTableModel0.isReadOnly());
      assertEquals(0, arffTableModel0.getRowCount());
      assertEquals(true, arffTableModel0.isNotificationEnabled());
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 weka.gui.arffviewer.ArffTableModel.sortInstances(I)V: I3 Branch 30 IFLE L449 - true
   */
  @Test
  public void test14()  throws Throwable  {
      ArffTableModel arffTableModel0 = new ArffTableModel((Instances) null);
      assertNotNull(arffTableModel0);
      
      arffTableModel0.sortInstances((-182));
      assertEquals(0, arffTableModel0.getRowCount());
      assertEquals(true, arffTableModel0.isUndoEnabled());
      assertEquals(true, arffTableModel0.isNotificationEnabled());
      assertEquals(false, arffTableModel0.isReadOnly());
      assertEquals(false, arffTableModel0.getShowAttributeIndex());
  }

  //Test case number: 15
  /*
   * 3 covered goals:
   * 1 weka.gui.arffviewer.ArffTableModel.getColumnClass(I)Ljava/lang/Class;: I7 Branch 34 IFLT L490 - false
   * 2 weka.gui.arffviewer.ArffTableModel.getColumnClass(I)Ljava/lang/Class;: I11 Branch 35 IF_ICMPGE L490 - false
   * 3 weka.gui.arffviewer.ArffTableModel.getColumnClass(I)Ljava/lang/Class;: I15 Branch 36 IFNE L491 - false
   */
  @Test
  public void test15()  throws Throwable  {
      ArffTableModel arffTableModel0 = new ArffTableModel((Instances) null);
      assertNotNull(arffTableModel0);
      
      Class<Object> class0 = arffTableModel0.getColumnClass(0);
      assertEquals(1, arffTableModel0.getColumnCount());
      assertEquals(0, arffTableModel0.getRowCount());
      assertEquals(false, arffTableModel0.isReadOnly());
      assertEquals(false, arffTableModel0.getShowAttributeIndex());
      assertEquals("class java.lang.Integer", class0.toString());
      assertEquals(true, arffTableModel0.isUndoEnabled());
      assertNotNull(class0);
      assertEquals(true, arffTableModel0.isNotificationEnabled());
  }

  //Test case number: 16
  /*
   * 5 covered goals:
   * 1 weka.gui.arffviewer.ArffTableModel.getColumnName(I)Ljava/lang/String;: I7 Branch 42 IFLT L545 - false
   * 2 weka.gui.arffviewer.ArffTableModel.getColumnName(I)Ljava/lang/String;: I11 Branch 43 IF_ICMPGE L545 - false
   * 3 weka.gui.arffviewer.ArffTableModel.getColumnName(I)Ljava/lang/String;: I15 Branch 44 IFNE L546 - false
   * 4 weka.gui.arffviewer.ArffTableModel.getColumnCount()I: I8 Branch 38 IFNULL L511 - true
   * 5 weka.gui.arffviewer.ArffTableModel.<init>(Ljava/lang/String;[Lweka/core/converters/AbstractFileLoader;)V: I11 Branch 2 IFGT L120 - true
   */
  @Test
  public void test16()  throws Throwable  {
      AbstractFileLoader[] abstractFileLoaderArray0 = new AbstractFileLoader[10];
      ArffTableModel arffTableModel0 = new ArffTableModel("", abstractFileLoaderArray0);
      assertNotNull(arffTableModel0);
      
      int int0 = arffTableModel0.findColumn("");
      assertEquals(true, arffTableModel0.isUndoEnabled());
      assertEquals(0, arffTableModel0.getRowCount());
      assertEquals(true, arffTableModel0.isNotificationEnabled());
      assertEquals((-1), int0);
      assertEquals(false, arffTableModel0.isReadOnly());
      assertEquals(false, arffTableModel0.getShowAttributeIndex());
      assertEquals(1, arffTableModel0.getColumnCount());
  }

  //Test case number: 17
  /*
   * 2 covered goals:
   * 1 weka.gui.arffviewer.ArffTableModel.getInstancesValueAt(II)D: I7 Branch 60 IFLT L640 - false
   * 2 weka.gui.arffviewer.ArffTableModel.getInstancesValueAt(II)D: I11 Branch 61 IF_ICMPGE L640 - true
   */
  @Test
  public void test17()  throws Throwable  {
      ArffTableModel arffTableModel0 = new ArffTableModel((Instances) null);
      assertNotNull(arffTableModel0);
      
      double double0 = arffTableModel0.getInstancesValueAt(0, 0);
      assertEquals(true, arffTableModel0.isNotificationEnabled());
      assertEquals(true, arffTableModel0.isUndoEnabled());
      assertEquals(false, arffTableModel0.isReadOnly());
      assertEquals((-1.0), double0, 0.01D);
      assertEquals(0, arffTableModel0.getRowCount());
      assertEquals(false, arffTableModel0.getShowAttributeIndex());
  }

  //Test case number: 18
  /*
   * 3 covered goals:
   * 1 weka.gui.arffviewer.ArffTableModel.getValueAt(II)Ljava/lang/Object;: I20 Branch 64 IFLT L663 - false
   * 2 weka.gui.arffviewer.ArffTableModel.getValueAt(II)Ljava/lang/Object;: I24 Branch 65 IF_ICMPGE L663 - true
   * 3 weka.gui.arffviewer.ArffTableModel.<init>(Lweka/core/Instances;)V: root-Branch
   */
  @Test
  public void test18()  throws Throwable  {
      ArffTableModel arffTableModel0 = new ArffTableModel((Instances) null);
      assertNotNull(arffTableModel0);
      
      arffTableModel0.getValueAt(47, 1770);
      assertEquals(true, arffTableModel0.isUndoEnabled());
      assertEquals(false, arffTableModel0.getShowAttributeIndex());
      assertEquals(true, arffTableModel0.isNotificationEnabled());
      assertEquals(0, arffTableModel0.getRowCount());
      assertEquals(false, arffTableModel0.isReadOnly());
  }

  //Test case number: 19
  /*
   * 8 covered goals:
   * 1 weka.gui.arffviewer.ArffTableModel.canUndo()Z: I5 Branch 99 IFNE L881 - true
   * 2 weka.gui.arffviewer.ArffTableModel.undo()V: I4 Branch 100 IFEQ L892 - true
   * 3 weka.gui.arffviewer.ArffTableModel.<init>(Ljava/lang/String;[Lweka/core/converters/AbstractFileLoader;)V: I7 Branch 1 IFNULL L120 - false
   * 4 weka.gui.arffviewer.ArffTableModel.<init>(Ljava/lang/String;[Lweka/core/converters/AbstractFileLoader;)V: I11 Branch 2 IFGT L120 - false
   * 5 weka.gui.arffviewer.ArffTableModel.loadFile(Ljava/lang/String;[Lweka/core/converters/AbstractFileLoader;)V: I3 Branch 3 IFNULL L198 - false
   * 6 weka.gui.arffviewer.ArffTableModel.loadFile(Ljava/lang/String;[Lweka/core/converters/AbstractFileLoader;)V: I6 Branch 4 IFNE L198 - true
   * 7 weka.gui.arffviewer.ArffTableModel.loadFile(Ljava/lang/String;[Lweka/core/converters/AbstractFileLoader;)V: I23 Branch 5 IFNULL L204 - true
   * 8 weka.gui.arffviewer.ArffTableModel.getRowCount()I: I4 Branch 55 IFNONNULL L602 - false
   */
  @Test
  public void test19()  throws Throwable  {
      AbstractFileLoader[] abstractFileLoaderArray0 = new AbstractFileLoader[9];
      ArffTableModel arffTableModel0 = new ArffTableModel("Vf", abstractFileLoaderArray0);
      assertNotNull(arffTableModel0);
      
      arffTableModel0.undo();
      assertEquals(0, arffTableModel0.getRowCount());
      assertEquals(true, arffTableModel0.isUndoEnabled());
      assertEquals(true, arffTableModel0.isNotificationEnabled());
      assertEquals(false, arffTableModel0.canUndo());
      assertEquals(false, arffTableModel0.isReadOnly());
      assertEquals(false, arffTableModel0.getShowAttributeIndex());
  }
}
