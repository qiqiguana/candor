/*
 * This file was automatically generated by EvoSuite
 */

package weka.gui.sql;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.sql.ResultSet;
import org.junit.BeforeClass;
import weka.gui.sql.ResultSetHelper;

@RunWith(EvoSuiteRunner.class)
public class ResultSetHelperEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ResultSetHelper resultSetHelper0 = new ResultSetHelper((ResultSet) null);
      resultSetHelper0.getColumnNames();
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertEquals(0, resultSetHelper0.getColumnCount());
      assertEquals(0, resultSetHelper0.getRowCount());
  }

  @Test
  public void test1()  throws Throwable  {
      ResultSetHelper resultSetHelper0 = new ResultSetHelper((ResultSet) null);
      int int0 = resultSetHelper0.getMaxRows();
      assertEquals(0, resultSetHelper0.getRowCount());
      assertEquals(0, resultSetHelper0.getColumnCount());
      assertEquals(0, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      ResultSetHelper resultSetHelper0 = new ResultSetHelper((ResultSet) null);
      resultSetHelper0.getResultSet();
      assertEquals(0, resultSetHelper0.getColumnCount());
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertEquals(0, resultSetHelper0.getRowCount());
  }

  @Test
  public void test3()  throws Throwable  {
      ResultSetHelper resultSetHelper0 = new ResultSetHelper((ResultSet) null, 8);
      resultSetHelper0.getCells();
      assertEquals(0, resultSetHelper0.getColumnCount());
      assertEquals(8, resultSetHelper0.getMaxRows());
      assertEquals(0, resultSetHelper0.getRowCount());
  }

  @Test
  public void test4()  throws Throwable  {
      ResultSetHelper resultSetHelper0 = new ResultSetHelper((ResultSet) null, (-5));
      resultSetHelper0.getNumericColumns();
      assertEquals(-5, resultSetHelper0.getMaxRows());
      assertEquals(0, resultSetHelper0.getRowCount());
      assertEquals(0, resultSetHelper0.getColumnCount());
  }

  @Test
  public void test5()  throws Throwable  {
      ResultSetHelper resultSetHelper0 = new ResultSetHelper((ResultSet) null);
      resultSetHelper0.getColumnClasses();
      assertEquals(0, resultSetHelper0.getRowCount());
      assertEquals(0, resultSetHelper0.getColumnCount());
      assertEquals(0, resultSetHelper0.getMaxRows());
  }

  @Test
  public void test6()  throws Throwable  {
      ResultSetHelper resultSetHelper0 = new ResultSetHelper((ResultSet) null);
      boolean boolean0 = resultSetHelper0.hasMaxRows();
      assertEquals(0, resultSetHelper0.getRowCount());
      assertEquals(0, resultSetHelper0.getColumnCount());
      assertEquals(false, boolean0);
      assertEquals(0, resultSetHelper0.getMaxRows());
  }

  @Test
  public void test7()  throws Throwable  {
      ResultSetHelper resultSetHelper0 = new ResultSetHelper((ResultSet) null, 1985);
      boolean boolean0 = resultSetHelper0.hasMaxRows();
      assertEquals(0, resultSetHelper0.getRowCount());
      assertEquals(0, resultSetHelper0.getColumnCount());
      assertEquals(1985, resultSetHelper0.getMaxRows());
      assertEquals(true, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      Class<Object> class0 = ResultSetHelper.typeToClass((-7));
      assertNotNull(class0);
      assertEquals("java.lang.Boolean", class0.getCanonicalName());
  }

  @Test
  public void test9()  throws Throwable  {
      Class<Object> class0 = ResultSetHelper.typeToClass(6);
      assertEquals("java.lang.Float", class0.getName());
  }

  @Test
  public void test10()  throws Throwable  {
      Class<Object> class0 = ResultSetHelper.typeToClass((-6));
      assertEquals("Short", class0.getSimpleName());
  }

  @Test
  public void test11()  throws Throwable  {
      Class<Object> class0 = ResultSetHelper.typeToClass((-5));
      assertEquals("java.lang.Long", class0.getCanonicalName());
  }

  @Test
  public void test12()  throws Throwable  {
      Class<Object> class0 = ResultSetHelper.typeToClass((-4));
      assertEquals("java.lang.String", class0.getName());
  }

  @Test
  public void test13()  throws Throwable  {
      Class<Object> class0 = ResultSetHelper.typeToClass((-3));
      assertEquals("String", class0.getSimpleName());
  }

  @Test
  public void test14()  throws Throwable  {
      Class<Object> class0 = ResultSetHelper.typeToClass((-2));
      assertEquals("class java.lang.String", class0.toString());
  }

  @Test
  public void test15()  throws Throwable  {
      Class<Object> class0 = ResultSetHelper.typeToClass((-1));
      assertEquals("java.lang.String", class0.getName());
  }

  @Test
  public void test16()  throws Throwable  {
      Class<Object> class0 = ResultSetHelper.typeToClass(0);
      assertEquals("java.lang.String", class0.getCanonicalName());
  }

  @Test
  public void test17()  throws Throwable  {
      Class<Object> class0 = ResultSetHelper.typeToClass(1);
      assertEquals("java.lang.Character", class0.getName());
  }

  @Test
  public void test18()  throws Throwable  {
      Class<Object> class0 = ResultSetHelper.typeToClass(2);
      assertEquals("java.lang.Double", class0.getCanonicalName());
  }

  @Test
  public void test19()  throws Throwable  {
      Class<Object> class0 = ResultSetHelper.typeToClass(3);
      assertEquals("java.lang.Double", class0.getName());
  }

  @Test
  public void test20()  throws Throwable  {
      Class<Object> class0 = ResultSetHelper.typeToClass(4);
      assertEquals("java.lang.Integer", class0.getCanonicalName());
  }

  @Test
  public void test21()  throws Throwable  {
      Class<Object> class0 = ResultSetHelper.typeToClass(5);
      assertEquals("class java.lang.Short", class0.toString());
  }

  @Test
  public void test22()  throws Throwable  {
      Class<Object> class0 = ResultSetHelper.typeToClass(7);
      assertEquals("class java.lang.Double", class0.toString());
  }

  @Test
  public void test23()  throws Throwable  {
      Class<Object> class0 = ResultSetHelper.typeToClass(8);
      assertEquals(false, class0.isAnnotation());
  }

  @Test
  public void test24()  throws Throwable  {
      Class<Object> class0 = ResultSetHelper.typeToClass(12);
      assertEquals(false, class0.isInterface());
  }

  @Test
  public void test25()  throws Throwable  {
      Class<Object> class0 = ResultSetHelper.typeToClass(91);
      assertNotNull(class0);
      assertEquals("java.sql.Date", class0.getCanonicalName());
  }

  @Test
  public void test26()  throws Throwable  {
      Class<Object> class0 = ResultSetHelper.typeToClass(92);
      assertNotNull(class0);
      assertEquals("java.sql.Time", class0.getCanonicalName());
  }

  @Test
  public void test27()  throws Throwable  {
      Class<Object> class0 = ResultSetHelper.typeToClass(93);
      assertEquals("java.sql.Timestamp", class0.getName());
      assertNotNull(class0);
  }

  @Test
  public void test28()  throws Throwable  {
      Class<Object> class0 = ResultSetHelper.typeToClass(1111);
      assertEquals(false, class0.isAnonymousClass());
  }

  @Test
  public void test29()  throws Throwable  {
      Class<Object> class0 = ResultSetHelper.typeToClass((-1934));
      assertNull(class0);
  }

  @Test
  public void test30()  throws Throwable  {
      boolean boolean0 = ResultSetHelper.typeIsNumeric((-7));
      assertEquals(false, boolean0);
  }

  @Test
  public void test31()  throws Throwable  {
      boolean boolean0 = ResultSetHelper.typeIsNumeric(6);
      assertEquals(true, boolean0);
  }

  @Test
  public void test32()  throws Throwable  {
      boolean boolean0 = ResultSetHelper.typeIsNumeric((-6));
      assertEquals(true, boolean0);
  }

  @Test
  public void test33()  throws Throwable  {
      boolean boolean0 = ResultSetHelper.typeIsNumeric((-5));
      assertEquals(true, boolean0);
  }

  @Test
  public void test34()  throws Throwable  {
      boolean boolean0 = ResultSetHelper.typeIsNumeric((-4));
      assertEquals(false, boolean0);
  }

  @Test
  public void test35()  throws Throwable  {
      boolean boolean0 = ResultSetHelper.typeIsNumeric((-3));
      assertEquals(false, boolean0);
  }

  @Test
  public void test36()  throws Throwable  {
      boolean boolean0 = ResultSetHelper.typeIsNumeric((-2));
      assertEquals(false, boolean0);
  }

  @Test
  public void test37()  throws Throwable  {
      boolean boolean0 = ResultSetHelper.typeIsNumeric((-1));
      assertEquals(false, boolean0);
  }

  @Test
  public void test38()  throws Throwable  {
      boolean boolean0 = ResultSetHelper.typeIsNumeric(0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test39()  throws Throwable  {
      boolean boolean0 = ResultSetHelper.typeIsNumeric(1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test40()  throws Throwable  {
      boolean boolean0 = ResultSetHelper.typeIsNumeric(2);
      assertEquals(true, boolean0);
  }

  @Test
  public void test41()  throws Throwable  {
      boolean boolean0 = ResultSetHelper.typeIsNumeric(3);
      assertEquals(true, boolean0);
  }

  @Test
  public void test42()  throws Throwable  {
      boolean boolean0 = ResultSetHelper.typeIsNumeric(4);
      assertEquals(true, boolean0);
  }

  @Test
  public void test43()  throws Throwable  {
      boolean boolean0 = ResultSetHelper.typeIsNumeric(5);
      assertEquals(true, boolean0);
  }

  @Test
  public void test44()  throws Throwable  {
      boolean boolean0 = ResultSetHelper.typeIsNumeric(7);
      assertEquals(true, boolean0);
  }

  @Test
  public void test45()  throws Throwable  {
      boolean boolean0 = ResultSetHelper.typeIsNumeric(8);
      assertEquals(true, boolean0);
  }

  @Test
  public void test46()  throws Throwable  {
      boolean boolean0 = ResultSetHelper.typeIsNumeric(12);
      assertEquals(false, boolean0);
  }

  @Test
  public void test47()  throws Throwable  {
      boolean boolean0 = ResultSetHelper.typeIsNumeric(91);
      assertEquals(false, boolean0);
  }

  @Test
  public void test48()  throws Throwable  {
      boolean boolean0 = ResultSetHelper.typeIsNumeric(92);
      assertEquals(false, boolean0);
  }

  @Test
  public void test49()  throws Throwable  {
      boolean boolean0 = ResultSetHelper.typeIsNumeric(93);
      assertEquals(true, boolean0);
  }

  @Test
  public void test50()  throws Throwable  {
      boolean boolean0 = ResultSetHelper.typeIsNumeric(1111);
      assertEquals(false, boolean0);
  }

  @Test
  public void test51()  throws Throwable  {
      boolean boolean0 = ResultSetHelper.typeIsNumeric((-1449));
      assertEquals(false, boolean0);
  }
}
