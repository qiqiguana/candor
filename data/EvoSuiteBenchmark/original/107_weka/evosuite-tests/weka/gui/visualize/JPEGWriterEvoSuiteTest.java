/*
 * This file was automatically generated by EvoSuite
 */

package weka.gui.visualize;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.awt.Color;
import java.io.File;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JComponent;
import javax.swing.JProgressBar;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import weka.gui.visualize.JComponentWriter;
import weka.gui.visualize.JPEGWriter;

@RunWith(EvoSuiteRunner.class)
public class JPEGWriterEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      JProgressBar jProgressBar0 = new JProgressBar();
      JPEGWriter jPEGWriter0 = new JPEGWriter((JComponent) jProgressBar0, (File) null);
      assertEquals(1.0F, jPEGWriter0.getQuality(), 0.01F);
      assertEquals(false, jPEGWriter0.getScalingEnabled());
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer();
          JPEGWriter jPEGWriter0 = new JPEGWriter((JComponent) defaultListCellRenderer0);
          File file0 = new File("}IXtT", "}IXtT");
          try {
            JComponentWriter.toOutput((JComponentWriter) jPEGWriter0, (JComponent) defaultListCellRenderer0, file0, 1043, 1043);
            fail("Expecting exception: IllegalStateException");
          } catch(IllegalStateException e) {
            /*
             * Output has not been set!
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
      JPEGWriter jPEGWriter0 = new JPEGWriter();
      Color color0 = Color.magenta;
      jPEGWriter0.setBackground(color0);
      assertEquals(1.0F, jPEGWriter0.getQuality(), 0.01F);
      assertEquals(false, jPEGWriter0.getScalingEnabled());
  }

  @Test
  public void test3()  throws Throwable  {
      JPEGWriter jPEGWriter0 = new JPEGWriter();
      String string0 = jPEGWriter0.getDescription();
      assertEquals(false, jPEGWriter0.getScalingEnabled());
      assertEquals(1.0F, jPEGWriter0.getQuality(), 0.01F);
      assertEquals("JPEG-Image", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      JPEGWriter jPEGWriter0 = new JPEGWriter();
      jPEGWriter0.setQuality(1809.5177F);
      assertEquals(1809.5177F, jPEGWriter0.getQuality(), 0.01F);
      assertEquals(false, jPEGWriter0.getScalingEnabled());
  }
}
