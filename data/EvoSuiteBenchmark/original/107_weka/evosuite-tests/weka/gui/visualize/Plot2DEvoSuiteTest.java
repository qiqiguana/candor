/*
 * This file was automatically generated by EvoSuite
 */

package weka.gui.visualize;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.awt.Color;
import java.awt.Graphics;
import org.junit.BeforeClass;
import weka.core.FastVector;
import weka.core.Instances;
import weka.gui.visualize.Plot2D;
import weka.gui.visualize.Plot2DCompanion;

@RunWith(EvoSuiteRunner.class)
public class Plot2DEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Plot2D plot2D0 = new Plot2D();
      assertNotNull(plot2D0);
      
      plot2D0.getMinX();
      assertEquals(true, plot2D0.isBackgroundSet());
  }

  @Test
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try {
        Plot2D.drawDataPoint(6.7, 6.7, (-2001.9365747683846), (-659.9356861864703), 15, 15, (Graphics) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      Plot2D plot2D0 = new Plot2D();
      assertNotNull(plot2D0);
      
      plot2D0.setPlotCompanion((Plot2DCompanion) null);
      assertEquals(true, plot2D0.isBackgroundSet());
  }

  @Test
  public void test3()  throws Throwable  {
      Plot2D plot2D0 = new Plot2D();
      assertNotNull(plot2D0);
      
      plot2D0.removeAllPlots();
      assertEquals(true, plot2D0.isBackgroundSet());
  }

  @Test
  public void test4()  throws Throwable  {
      Plot2D plot2D0 = new Plot2D();
      assertNotNull(plot2D0);
      
      double double0 = plot2D0.getMinY();
      assertEquals(0.0, double0, 0.01D);
      assertEquals(true, plot2D0.isBackgroundSet());
  }

  @Test
  public void test5()  throws Throwable  {
      Plot2D plot2D0 = new Plot2D();
      assertNotNull(plot2D0);
      
      plot2D0.setColours((FastVector) null);
      assertEquals(true, plot2D0.isBackgroundSet());
  }

  @Test
  public void test6()  throws Throwable  {
      Plot2D plot2D0 = new Plot2D();
      assertNotNull(plot2D0);
      
      try {
        plot2D0.setInstances((Instances) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      Plot2D plot2D0 = new Plot2D();
      assertNotNull(plot2D0);
      
      plot2D0.getMaxY();
      assertEquals(true, plot2D0.isBackgroundSet());
  }

  @Test
  public void test8()  throws Throwable  {
      Plot2D plot2D0 = new Plot2D();
      assertNotNull(plot2D0);
      
      double double0 = plot2D0.convertToAttribY((-286.3312813075096));
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test9()  throws Throwable  {
      Plot2D plot2D0 = new Plot2D();
      assertNotNull(plot2D0);
      
      plot2D0.getMasterPlot();
      assertEquals(true, plot2D0.isBackgroundSet());
  }

  @Test
  public void test10()  throws Throwable  {
      Plot2D plot2D0 = new Plot2D();
      double double0 = plot2D0.getMaxC();
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      Plot2D plot2D0 = new Plot2D();
      assertNotNull(plot2D0);
      
      double double0 = plot2D0.convertToPanelY((double) (-1349.9557F));
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      Plot2D plot2D0 = new Plot2D();
      assertNotNull(plot2D0);
      
      double double0 = plot2D0.getMaxX();
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test13()  throws Throwable  {
      Plot2D plot2D0 = new Plot2D();
      assertNotNull(plot2D0);
      
      double double0 = plot2D0.convertToAttribX((double) (-1349.9557F));
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test14()  throws Throwable  {
      Plot2D plot2D0 = new Plot2D();
      assertNotNull(plot2D0);
      
      plot2D0.convertToPanelX(Double.NaN);
      assertEquals(true, plot2D0.isBackgroundSet());
  }

  @Test
  public void test15()  throws Throwable  {
      Plot2D plot2D0 = new Plot2D();
      assertNotNull(plot2D0);
      
      double double0 = plot2D0.getMinC();
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test16()  throws Throwable  {
      Plot2D plot2D0 = new Plot2D();
      // Undeclared exception!
      try {
        plot2D0.setXindex(744);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 0, Size: 0
         */
      }
  }

  @Test
  public void test17()  throws Throwable  {
      Plot2D plot2D0 = new Plot2D();
      // Undeclared exception!
      try {
        plot2D0.setYindex((-13));
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 0, Size: 0
         */
      }
  }

  @Test
  public void test18()  throws Throwable  {
      Plot2D plot2D0 = new Plot2D();
      // Undeclared exception!
      try {
        plot2D0.setCindex((-19));
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 0, Size: 0
         */
      }
  }

  @Test
  public void test19()  throws Throwable  {
      Plot2D plot2D0 = new Plot2D();
      assertNotNull(plot2D0);
      
      int int0 = plot2D0.pturbX(0.0, 0.0);
      assertEquals(0, int0);
  }

  @Test
  public void test20()  throws Throwable  {
      Plot2D plot2D0 = new Plot2D();
      assertNotNull(plot2D0);
      
      int int0 = plot2D0.pturbY(0.0, 0.0);
      assertEquals(0, int0);
      assertEquals(true, plot2D0.isBackgroundSet());
  }

  @Test
  public void test21()  throws Throwable  {
      Color color0 = new Color((-1844), true);
      Color color1 = Plot2D.checkAgainstBackground(color0, color0);
      assertEquals(-8356762, color1.getRGB());
      assertNotNull(color1);
  }

  @Test
  public void test22()  throws Throwable  {
      Color color0 = Plot2D.checkAgainstBackground((Color) null, (Color) null);
      assertNull(color0);
  }

  @Test
  public void test23()  throws Throwable  {
      Color color0 = Color.yellow;
      Color color1 = Color.darkGray;
      Color color2 = Plot2D.checkAgainstBackground(color0, color1);
      assertEquals("java.awt.Color[r=255,g=255,b=0]", color2.toString());
  }

  @Test
  public void test24()  throws Throwable  {
      Color color0 = new Color(1, true);
      // Undeclared exception!
      try {
        Plot2D.checkAgainstBackground(color0, color0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Color parameter outside of expected range: Blue
         */
      }
  }
}
