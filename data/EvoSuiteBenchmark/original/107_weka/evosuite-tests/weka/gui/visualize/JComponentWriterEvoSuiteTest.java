/*
 * This file was automatically generated by EvoSuite
 */

package weka.gui.visualize;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.File;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.swing.JComponent;
import javax.swing.JPasswordField;
import javax.swing.JTextArea;
import javax.swing.JToolTip;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import weka.gui.visualize.JComponentWriter;
import weka.gui.visualize.JPEGWriter;
import weka.gui.visualize.PostscriptWriter;

@RunWith(EvoSuiteRunner.class)
public class JComponentWriterEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      JPEGWriter jPEGWriter0 = new JPEGWriter();
      jPEGWriter0.setScale((double) 0, (double) 0);
      assertEquals(-1, jPEGWriter0.getCustomWidth());
      assertEquals(false, jPEGWriter0.getUseCustomDimensions());
      assertEquals(1.0, jPEGWriter0.getYScale(), 0.01D);
      assertEquals(-1, jPEGWriter0.getCustomHeight());
      assertEquals(1.0, jPEGWriter0.getXScale(), 0.01D);
  }

  @Test
  public void test1()  throws Throwable  {
      PostscriptWriter postscriptWriter0 = new PostscriptWriter();
      double double0 = postscriptWriter0.getXScale();
      assertEquals(-1, postscriptWriter0.getCustomWidth());
      assertEquals(-1, postscriptWriter0.getCustomHeight());
      assertEquals(true, postscriptWriter0.getScalingEnabled());
      assertEquals(false, postscriptWriter0.getUseCustomDimensions());
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          JTextArea jTextArea0 = new JTextArea(1, 0);
          PostscriptWriter postscriptWriter0 = new PostscriptWriter((JComponent) jTextArea0);
          File file0 = new File("eL");
          JComponentWriter.toOutput((JComponentWriter) postscriptWriter0, (JComponent) jTextArea0, file0, 1, 0);
          assertEquals(1, postscriptWriter0.getCustomWidth());
          assertEquals(true, postscriptWriter0.getUseCustomDimensions());
          assertEquals(0, jTextArea0.getWidth());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
      JTextArea jTextArea0 = new JTextArea(1, 0);
      PostscriptWriter postscriptWriter0 = new PostscriptWriter((JComponent) jTextArea0);
      double double0 = postscriptWriter0.getYScale();
      assertEquals(true, postscriptWriter0.getScalingEnabled());
      assertEquals(-1, postscriptWriter0.getCustomWidth());
      assertEquals(false, postscriptWriter0.getUseCustomDimensions());
      assertEquals(-1, postscriptWriter0.getCustomHeight());
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test4()  throws Throwable  {
      PostscriptWriter postscriptWriter0 = new PostscriptWriter();
      postscriptWriter0.setScale(1.0, 1.0);
      assertEquals(true, postscriptWriter0.getScalingEnabled());
      assertEquals(-1, postscriptWriter0.getCustomWidth());
      assertEquals(false, postscriptWriter0.getUseCustomDimensions());
      assertEquals(1.0, postscriptWriter0.getXScale(), 0.01D);
      assertEquals(-1, postscriptWriter0.getCustomHeight());
  }

  @Test
  public void test5()  throws Throwable  {
      JPEGWriter jPEGWriter0 = new JPEGWriter();
      File file0 = new File("}G).]`lCjI#_");
      try {
        JComponentWriter.toOutput((JComponentWriter) jPEGWriter0, (JComponent) null, file0);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * The component is not set!
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          JPasswordField jPasswordField0 = new JPasswordField();
          JToolTip jToolTip0 = jPasswordField0.createToolTip();
          PostscriptWriter postscriptWriter0 = new PostscriptWriter((JComponent) jToolTip0);
          File file0 = new File((String) null, ".'W");
          JComponentWriter.toOutput((JComponentWriter) postscriptWriter0, (JComponent) jToolTip0, file0);
          assertEquals(true, postscriptWriter0.getScalingEnabled());
          assertEquals(-1, postscriptWriter0.getCustomWidth());
          assertEquals(0, jToolTip0.getHeight());
          assertEquals(-1, postscriptWriter0.getCustomHeight());
          assertEquals(1.0, postscriptWriter0.getYScale(), 0.01D);
          assertEquals(false, postscriptWriter0.getUseCustomDimensions());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField();
      PostscriptWriter postscriptWriter0 = new PostscriptWriter((JComponent) jPasswordField0);
      try {
        JComponentWriter.toOutput((JComponentWriter) postscriptWriter0, (JComponent) jPasswordField0, (File) null, 0, (-1));
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * The file is not set!
         */
      }
  }
}
