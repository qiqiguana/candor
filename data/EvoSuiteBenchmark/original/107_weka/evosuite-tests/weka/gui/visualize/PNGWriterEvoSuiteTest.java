/*
 * This file was automatically generated by EvoSuite
 */

package weka.gui.visualize;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.awt.Color;
import java.io.File;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JFormattedTextField;
import javax.swing.JMenu;
import javax.swing.text.DefaultEditorKit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import weka.gui.visualize.JComponentWriter;
import weka.gui.visualize.PNGWriter;

@RunWith(EvoSuiteRunner.class)
public class PNGWriterEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          PNGWriter pNGWriter0 = new PNGWriter();
          DefaultEditorKit.InsertContentAction defaultEditorKit_InsertContentAction0 = new DefaultEditorKit.InsertContentAction();
          JMenu jMenu0 = new JMenu((Action) defaultEditorKit_InsertContentAction0);
          File file0 = new File("PNG-Image");
          try {
            JComponentWriter.toOutput((JComponentWriter) pNGWriter0, (JComponent) jMenu0, file0, 16, 16);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission PNG-Image delete)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkDelete(SecurityManager.java:990)
             * java.io.File.delete(File.java:902)
             * javax.imageio.ImageIO.write(ImageIO.java:1513)
             * weka.gui.visualize.PNGWriter.generateOutput(PNGWriter.java:135)
             * weka.gui.visualize.JComponentWriter.toOutput(JComponentWriter.java:312)
             * weka.gui.visualize.JComponentWriter.toOutput(JComponentWriter.java:354)
             * sun.reflect.GeneratedMethodAccessor231.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
      PNGWriter pNGWriter0 = new PNGWriter();
      String string0 = pNGWriter0.getExtension();
      assertEquals(".png", string0);
      assertEquals(false, pNGWriter0.getScalingEnabled());
  }

  @Test
  public void test2()  throws Throwable  {
      JFormattedTextField jFormattedTextField0 = new JFormattedTextField();
      PNGWriter pNGWriter0 = new PNGWriter((JComponent) jFormattedTextField0, (File) null);
      assertEquals(false, pNGWriter0.getScalingEnabled());
  }

  @Test
  public void test3()  throws Throwable  {
      PNGWriter pNGWriter0 = new PNGWriter();
      String string0 = pNGWriter0.getDescription();
      assertEquals("PNG-Image", string0);
      assertEquals(false, pNGWriter0.getScalingEnabled());
  }

  @Test
  public void test4()  throws Throwable  {
      PNGWriter pNGWriter0 = new PNGWriter((JComponent) null);
      Color color0 = Color.BLUE;
      pNGWriter0.setBackground(color0);
      assertEquals(false, pNGWriter0.getScalingEnabled());
  }
}
