/*
 * This file was automatically generated by EvoSuite
 */

package weka.gui.visualize;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.awt.AlphaComposite;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Composite;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Paint;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.font.GlyphVector;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.awt.image.BufferedImageOp;
import java.awt.image.CropImageFilter;
import java.awt.image.FilteredImageSource;
import java.awt.image.ImageFilter;
import java.awt.image.ImageObserver;
import java.awt.image.ImageProducer;
import java.awt.image.MemoryImageSource;
import java.awt.image.RenderedImage;
import java.awt.image.RescaleOp;
import java.awt.image.renderable.RenderableImage;
import java.io.ByteArrayOutputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.text.AttributedCharacterIterator;
import java.util.Hashtable;
import java.util.Map;
import java.util.Properties;
import javax.swing.DebugGraphics;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.JToolTip;
import javax.swing.JViewport;
import javax.swing.plaf.FontUIResource;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import org.junit.BeforeClass;
import weka.gui.visualize.PostscriptGraphics;

@RunWith(EvoSuiteRunner.class)
public class PostscriptGraphicsEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics((-12), (-12), (OutputStream) byteArrayOutputStream0);
      DefaultTableCellRenderer defaultTableCellRenderer0 = new DefaultTableCellRenderer();
      int[] intArray0 = new int[9];
      Hashtable<DefaultTableModel, Integer> hashtable0 = new Hashtable<DefaultTableModel, Integer>();
      MemoryImageSource memoryImageSource0 = new MemoryImageSource((-1), 11, intArray0, 11, 11, (Hashtable<?, ?>) hashtable0);
      CropImageFilter cropImageFilter0 = new CropImageFilter(0, 11, 0, 22);
      FilteredImageSource filteredImageSource0 = new FilteredImageSource((ImageProducer) memoryImageSource0, (ImageFilter) cropImageFilter0);
      Image image0 = defaultTableCellRenderer0.createImage((ImageProducer) filteredImageSource0);
      boolean boolean0 = postscriptGraphics0.drawImage(image0, 41, (-1850), 6, 104, (Color) null, (ImageObserver) defaultTableCellRenderer0);
      assertEquals(4610, byteArrayOutputStream0.size());
      assertEquals(true, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics(41, 0, (OutputStream) byteArrayOutputStream0);
      postscriptGraphics0.create(0, 0, 0, 0);
      assertEquals("%!PS-Adobe-3.0 EPSF-3.0\n%%BoundingBox: 0 0 0 41\n%%CreationDate: Tue Jul 02 05:13:53 BST 2013\n/Oval { % x y w h filled\ngsave\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nx w 2 div add y h 2 div sub translate\n1 h w div scale\nfilled {0 0 moveto} if\n0 0 w 2 div 0 360 arc\nfilled {closepath fill} {stroke} ifelse grestore} bind def\n/Rect { % x y w h filled\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nnewpath \nx y moveto\nw 0 rlineto\n0 h neg rlineto\nw neg 0 rlineto\nclosepath\nfilled {fill} {stroke} ifelse} bind def\n%%BeginProlog\n%%EndProlog\n%%Page 1 1\n/(Monospaced.plain) findfont\n11 scalefont setfont\n0.0 0.0 0.0 setrgbcolor\n", byteArrayOutputStream0.toString());
      assertEquals(662, byteArrayOutputStream0.size());
  }

  @Test
  public void test2()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1213);
      PrintStream printStream0 = new PrintStream((OutputStream) byteArrayOutputStream0, true);
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics(0, 1213, (OutputStream) printStream0);
      postscriptGraphics0.drawRenderedImage((RenderedImage) null, (AffineTransform) null);
      assertEquals("%!PS-Adobe-3.0 EPSF-3.0\n%%BoundingBox: 0 0 1213 0\n%%CreationDate: Tue Jul 02 05:13:54 BST 2013\n/Oval { % x y w h filled\ngsave\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nx w 2 div add y h 2 div sub translate\n1 h w div scale\nfilled {0 0 moveto} if\n0 0 w 2 div 0 360 arc\nfilled {closepath fill} {stroke} ifelse grestore} bind def\n/Rect { % x y w h filled\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nnewpath \nx y moveto\nw 0 rlineto\n0 h neg rlineto\nw neg 0 rlineto\nclosepath\nfilled {fill} {stroke} ifelse} bind def\n%%BeginProlog\n%%EndProlog\n%%Page 1 1\n/(Monospaced.plain) findfont\n11 scalefont setfont\n0.0 0.0 0.0 setrgbcolor\n", byteArrayOutputStream0.toString());
      assertEquals(664, byteArrayOutputStream0.size());
  }

  @Test
  public void test3()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics((-1), (-1), (OutputStream) byteArrayOutputStream0);
      int[] intArray0 = new int[9];
      postscriptGraphics0.fillPolygon(intArray0, intArray0, 0);
      assertEquals(663, byteArrayOutputStream0.size());
      assertEquals("%!PS-Adobe-3.0 EPSF-3.0\n%%BoundingBox: 0 0 -1 -1\n%%CreationDate: Tue Jul 02 05:13:55 BST 2013\n/Oval { % x y w h filled\ngsave\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nx w 2 div add y h 2 div sub translate\n1 h w div scale\nfilled {0 0 moveto} if\n0 0 w 2 div 0 360 arc\nfilled {closepath fill} {stroke} ifelse grestore} bind def\n/Rect { % x y w h filled\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nnewpath \nx y moveto\nw 0 rlineto\n0 h neg rlineto\nw neg 0 rlineto\nclosepath\nfilled {fill} {stroke} ifelse} bind def\n%%BeginProlog\n%%EndProlog\n%%Page 1 1\n/(Monospaced.plain) findfont\n11 scalefont setfont\n0.0 0.0 0.0 setrgbcolor\n", byteArrayOutputStream0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      PrintStream printStream0 = DebugGraphics.logStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics(41, 41, (OutputStream) printStream0);
      assertNotNull(postscriptGraphics0);
      
      postscriptGraphics0.setTransform((AffineTransform) null);
      assertEquals("weka.gui.visualize.PostscriptGraphics[font=java.awt.Font[family=Monospaced,name=Courier,style=plain,size=11],color=java.awt.Color[r=0,g=0,b=0]]", postscriptGraphics0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics(41, 0, (OutputStream) byteArrayOutputStream0);
      int[] intArray0 = new int[8];
      postscriptGraphics0.drawPolyline(intArray0, intArray0, 1);
      assertEquals(662, byteArrayOutputStream0.size());
      assertEquals("%!PS-Adobe-3.0 EPSF-3.0\n%%BoundingBox: 0 0 0 41\n%%CreationDate: Tue Jul 02 05:13:56 BST 2013\n/Oval { % x y w h filled\ngsave\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nx w 2 div add y h 2 div sub translate\n1 h w div scale\nfilled {0 0 moveto} if\n0 0 w 2 div 0 360 arc\nfilled {closepath fill} {stroke} ifelse grestore} bind def\n/Rect { % x y w h filled\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nnewpath \nx y moveto\nw 0 rlineto\n0 h neg rlineto\nw neg 0 rlineto\nclosepath\nfilled {fill} {stroke} ifelse} bind def\n%%BeginProlog\n%%EndProlog\n%%Page 1 1\n/(Monospaced.plain) findfont\n11 scalefont setfont\n0.0 0.0 0.0 setrgbcolor\n", byteArrayOutputStream0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      PrintStream printStream0 = DebugGraphics.logStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics(41, 41, (OutputStream) printStream0);
      assertNotNull(postscriptGraphics0);
      
      postscriptGraphics0.drawGlyphVector((GlyphVector) null, (float) 41, (float) 41);
      assertEquals("weka.gui.visualize.PostscriptGraphics[font=java.awt.Font[family=Monospaced,name=Courier,style=plain,size=11],color=java.awt.Color[r=0,g=0,b=0]]", postscriptGraphics0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics((-1), (-1), (OutputStream) byteArrayOutputStream0);
      postscriptGraphics0.translate((double) (-1), (double) (-1));
      assertEquals(663, byteArrayOutputStream0.size());
      assertEquals("%!PS-Adobe-3.0 EPSF-3.0\n%%BoundingBox: 0 0 -1 -1\n%%CreationDate: Tue Jul 02 05:13:58 BST 2013\n/Oval { % x y w h filled\ngsave\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nx w 2 div add y h 2 div sub translate\n1 h w div scale\nfilled {0 0 moveto} if\n0 0 w 2 div 0 360 arc\nfilled {closepath fill} {stroke} ifelse grestore} bind def\n/Rect { % x y w h filled\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nnewpath \nx y moveto\nw 0 rlineto\n0 h neg rlineto\nw neg 0 rlineto\nclosepath\nfilled {fill} {stroke} ifelse} bind def\n%%BeginProlog\n%%EndProlog\n%%Page 1 1\n/(Monospaced.plain) findfont\n11 scalefont setfont\n0.0 0.0 0.0 setrgbcolor\n", byteArrayOutputStream0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics(0, 0, (OutputStream) objectOutputStream0);
      assertNotNull(postscriptGraphics0);
      
      postscriptGraphics0.draw((Shape) null);
      assertEquals("weka.gui.visualize.PostscriptGraphics[font=java.awt.Font[family=Monospaced,name=Courier,style=plain,size=11],color=java.awt.Color[r=0,g=0,b=0]]", postscriptGraphics0.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) byteArrayOutputStream0);
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics((-1072), (-1093), (OutputStream) filterOutputStream0);
      AlphaComposite alphaComposite0 = AlphaComposite.Clear;
      postscriptGraphics0.setComposite((Composite) alphaComposite0);
      assertEquals(669, byteArrayOutputStream0.size());
      assertEquals("%!PS-Adobe-3.0 EPSF-3.0\n%%BoundingBox: 0 0 -1093 -1072\n%%CreationDate: Tue Jul 02 05:13:59 BST 2013\n/Oval { % x y w h filled\ngsave\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nx w 2 div add y h 2 div sub translate\n1 h w div scale\nfilled {0 0 moveto} if\n0 0 w 2 div 0 360 arc\nfilled {closepath fill} {stroke} ifelse grestore} bind def\n/Rect { % x y w h filled\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nnewpath \nx y moveto\nw 0 rlineto\n0 h neg rlineto\nw neg 0 rlineto\nclosepath\nfilled {fill} {stroke} ifelse} bind def\n%%BeginProlog\n%%EndProlog\n%%Page 1 1\n/(Monospaced.plain) findfont\n11 scalefont setfont\n0.0 0.0 0.0 setrgbcolor\n", byteArrayOutputStream0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      PrintStream printStream0 = DebugGraphics.logStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics(0, 0, (OutputStream) printStream0);
      assertNotNull(postscriptGraphics0);
      
      // Undeclared exception!
      try {
        postscriptGraphics0.getDeviceConfiguration();
        fail("Expecting exception: HeadlessException");
      } catch(HeadlessException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics(41, 0, (OutputStream) byteArrayOutputStream0);
      postscriptGraphics0.setBackground((Color) null);
      assertEquals("%!PS-Adobe-3.0 EPSF-3.0\n%%BoundingBox: 0 0 0 41\n%%CreationDate: Tue Jul 02 05:14:01 BST 2013\n/Oval { % x y w h filled\ngsave\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nx w 2 div add y h 2 div sub translate\n1 h w div scale\nfilled {0 0 moveto} if\n0 0 w 2 div 0 360 arc\nfilled {closepath fill} {stroke} ifelse grestore} bind def\n/Rect { % x y w h filled\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nnewpath \nx y moveto\nw 0 rlineto\n0 h neg rlineto\nw neg 0 rlineto\nclosepath\nfilled {fill} {stroke} ifelse} bind def\n%%BeginProlog\n%%EndProlog\n%%Page 1 1\n/(Monospaced.plain) findfont\n11 scalefont setfont\n0.0 0.0 0.0 setrgbcolor\n", byteArrayOutputStream0.toString());
      assertEquals(662, byteArrayOutputStream0.size());
  }

  @Test
  public void test12()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics((-1), (-942), (OutputStream) pipedOutputStream0);
      postscriptGraphics0.setPaint((Paint) null);
  }

  @Test
  public void test13()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics((-2), (-1750), (OutputStream) byteArrayOutputStream0);
      postscriptGraphics0.fillOval((-1750), 0, 1846, 1347);
      assertEquals("%!PS-Adobe-3.0 EPSF-3.0\n%%BoundingBox: 0 0 -1750 -2\n%%CreationDate: Tue Jul 02 05:14:08 BST 2013\n/Oval { % x y w h filled\ngsave\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nx w 2 div add y h 2 div sub translate\n1 h w div scale\nfilled {0 0 moveto} if\n0 0 w 2 div 0 360 arc\nfilled {closepath fill} {stroke} ifelse grestore} bind def\n/Rect { % x y w h filled\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nnewpath \nx y moveto\nw 0 rlineto\n0 h neg rlineto\nw neg 0 rlineto\nclosepath\nfilled {fill} {stroke} ifelse} bind def\n%%BeginProlog\n%%EndProlog\n%%Page 1 1\n/(Monospaced.plain) findfont\n11 scalefont setfont\n0.0 0.0 0.0 setrgbcolor\n-1750 -2 1846 1347 true Oval\n", byteArrayOutputStream0.toString());
      assertEquals(695, byteArrayOutputStream0.size());
  }

  @Test
  public void test14()  throws Throwable  {
      PrintStream printStream0 = DebugGraphics.logStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics((-1819), (-1), (OutputStream) printStream0);
      assertNotNull(postscriptGraphics0);
      
      Properties properties0 = new Properties();
      postscriptGraphics0.setRenderingHints((Map) properties0);
      assertEquals("weka.gui.visualize.PostscriptGraphics[font=java.awt.Font[family=Monospaced,name=Courier,style=plain,size=11],color=java.awt.Color[r=0,g=0,b=0]]", postscriptGraphics0.toString());
  }

  @Test
  public void test15()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) byteArrayOutputStream0);
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics((-1072), (-1093), (OutputStream) filterOutputStream0);
      postscriptGraphics0.drawArc((-1093), (-1093), (-1093), (-1072), 1, (-12));
      assertEquals("%!PS-Adobe-3.0 EPSF-3.0\n%%BoundingBox: 0 0 -1093 -1072\n%%CreationDate: Tue Jul 02 05:14:10 BST 2013\n/Oval { % x y w h filled\ngsave\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nx w 2 div add y h 2 div sub translate\n1 h w div scale\nfilled {0 0 moveto} if\n0 0 w 2 div 0 360 arc\nfilled {closepath fill} {stroke} ifelse grestore} bind def\n/Rect { % x y w h filled\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nnewpath \nx y moveto\nw 0 rlineto\n0 h neg rlineto\nw neg 0 rlineto\nclosepath\nfilled {fill} {stroke} ifelse} bind def\n%%BeginProlog\n%%EndProlog\n%%Page 1 1\n/(Monospaced.plain) findfont\n11 scalefont setfont\n0.0 0.0 0.0 setrgbcolor\n", byteArrayOutputStream0.toString());
      assertEquals(669, byteArrayOutputStream0.size());
  }

  @Test
  public void test16()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics(1454, 1454, (OutputStream) pipedOutputStream0);
      assertNotNull(postscriptGraphics0);
      
      AffineTransform affineTransform0 = AffineTransform.getTranslateInstance((double) (-1786), (double) 1);
      JTableHeader jTableHeader0 = new JTableHeader();
      postscriptGraphics0.drawImage((Image) null, affineTransform0, (ImageObserver) jTableHeader0);
      assertEquals("weka.gui.visualize.PostscriptGraphics[font=java.awt.Font[family=Monospaced,name=Courier,style=plain,size=11],color=java.awt.Color[r=0,g=0,b=0]]", postscriptGraphics0.toString());
  }

  @Test
  public void test17()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics((-1), (-942), (OutputStream) pipedOutputStream0);
      postscriptGraphics0.copyArea((-942), 0, 0, 1295, (int) 'R', 975);
  }

  @Test
  public void test18()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) byteArrayOutputStream0);
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics((-1072), (-1093), (OutputStream) filterOutputStream0);
      postscriptGraphics0.getComposite();
      assertEquals(669, byteArrayOutputStream0.size());
      assertEquals("%!PS-Adobe-3.0 EPSF-3.0\n%%BoundingBox: 0 0 -1093 -1072\n%%CreationDate: Tue Jul 02 05:14:20 BST 2013\n/Oval { % x y w h filled\ngsave\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nx w 2 div add y h 2 div sub translate\n1 h w div scale\nfilled {0 0 moveto} if\n0 0 w 2 div 0 360 arc\nfilled {closepath fill} {stroke} ifelse grestore} bind def\n/Rect { % x y w h filled\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nnewpath \nx y moveto\nw 0 rlineto\n0 h neg rlineto\nw neg 0 rlineto\nclosepath\nfilled {fill} {stroke} ifelse} bind def\n%%BeginProlog\n%%EndProlog\n%%Page 1 1\n/(Monospaced.plain) findfont\n11 scalefont setfont\n0.0 0.0 0.0 setrgbcolor\n", byteArrayOutputStream0.toString());
  }

  @Test
  public void test19()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics(1454, 1454, (OutputStream) pipedOutputStream0);
      assertNotNull(postscriptGraphics0);
      
      postscriptGraphics0.setPaintMode();
      assertEquals("weka.gui.visualize.PostscriptGraphics[font=java.awt.Font[family=Monospaced,name=Courier,style=plain,size=11],color=java.awt.Color[r=0,g=0,b=0]]", postscriptGraphics0.toString());
  }

  @Test
  public void test20()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics(1454, 1454, (OutputStream) pipedOutputStream0);
      assertNotNull(postscriptGraphics0);
      
      JTableHeader jTableHeader0 = new JTableHeader();
      boolean boolean0 = postscriptGraphics0.drawImage((Image) null, (int) 'I', (int) 'I', (-1786), 1025, (-1786), 41, (int) 'I', (-1082), (ImageObserver) jTableHeader0);
      assertEquals("weka.gui.visualize.PostscriptGraphics[font=java.awt.Font[family=Monospaced,name=Courier,style=plain,size=11],color=java.awt.Color[r=0,g=0,b=0]]", postscriptGraphics0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics((-12), (-12), (OutputStream) byteArrayOutputStream0);
      postscriptGraphics0.drawRoundRect(1, 820, (-12), (-12), 1, 0);
      assertEquals(665, byteArrayOutputStream0.size());
      assertEquals("%!PS-Adobe-3.0 EPSF-3.0\n%%BoundingBox: 0 0 -12 -12\n%%CreationDate: Tue Jul 02 05:14:23 BST 2013\n/Oval { % x y w h filled\ngsave\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nx w 2 div add y h 2 div sub translate\n1 h w div scale\nfilled {0 0 moveto} if\n0 0 w 2 div 0 360 arc\nfilled {closepath fill} {stroke} ifelse grestore} bind def\n/Rect { % x y w h filled\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nnewpath \nx y moveto\nw 0 rlineto\n0 h neg rlineto\nw neg 0 rlineto\nclosepath\nfilled {fill} {stroke} ifelse} bind def\n%%BeginProlog\n%%EndProlog\n%%Page 1 1\n/(Monospaced.plain) findfont\n11 scalefont setfont\n0.0 0.0 0.0 setrgbcolor\n", byteArrayOutputStream0.toString());
  }

  @Test
  public void test22()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) byteArrayOutputStream0);
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics((-1072), (-1093), (OutputStream) filterOutputStream0);
      postscriptGraphics0.getClipRect();
      assertEquals("%!PS-Adobe-3.0 EPSF-3.0\n%%BoundingBox: 0 0 -1093 -1072\n%%CreationDate: Tue Jul 02 05:14:24 BST 2013\n/Oval { % x y w h filled\ngsave\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nx w 2 div add y h 2 div sub translate\n1 h w div scale\nfilled {0 0 moveto} if\n0 0 w 2 div 0 360 arc\nfilled {closepath fill} {stroke} ifelse grestore} bind def\n/Rect { % x y w h filled\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nnewpath \nx y moveto\nw 0 rlineto\n0 h neg rlineto\nw neg 0 rlineto\nclosepath\nfilled {fill} {stroke} ifelse} bind def\n%%BeginProlog\n%%EndProlog\n%%Page 1 1\n/(Monospaced.plain) findfont\n11 scalefont setfont\n0.0 0.0 0.0 setrgbcolor\n", byteArrayOutputStream0.toString());
      assertEquals(669, byteArrayOutputStream0.size());
  }

  @Test
  public void test23()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics((-1), (-1), (OutputStream) byteArrayOutputStream0);
      postscriptGraphics0.drawString("%!PS-Adobe-3.0 EPSF-3.0\n%%BoundingBox: 0 0 -1 -1\n%%CreationDate: Tue Jul 02 05:13:30 BST 2013\n/Oval { % x y w h filled\ngsave\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nx w 2 div add y h 2 div sub translate\n1 h w div scale\nfilled {0 0 moveto} if\n0 0 w 2 div 0 360 arc\nfilled {closepath fill} {stroke} ifelse grestore} bind def\n/Rect { % x y w h filled\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nnewpath \nx y moveto\nw 0 rlineto\n0 h neg rlineto\nw neg 0 rlineto\nclosepath\nfilled {fill} {stroke} ifelse} bind def\n%%BeginProlog\n%%EndProlog\n%%Page 1 1\n/(Monospaced.plain) findfont\n11 scalefont setfont\n0.0 0.0 0.0 setrgbcolor\n", 0, (-1));
      assertEquals(1354, byteArrayOutputStream0.size());
      assertEquals("%!PS-Adobe-3.0 EPSF-3.0\n%%BoundingBox: 0 0 -1 -1\n%%CreationDate: Tue Jul 02 05:14:25 BST 2013\n/Oval { % x y w h filled\ngsave\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nx w 2 div add y h 2 div sub translate\n1 h w div scale\nfilled {0 0 moveto} if\n0 0 w 2 div 0 360 arc\nfilled {closepath fill} {stroke} ifelse grestore} bind def\n/Rect { % x y w h filled\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nnewpath \nx y moveto\nw 0 rlineto\n0 h neg rlineto\nw neg 0 rlineto\nclosepath\nfilled {fill} {stroke} ifelse} bind def\n%%BeginProlog\n%%EndProlog\n%%Page 1 1\n/(Monospaced.plain) findfont\n11 scalefont setfont\n0.0 0.0 0.0 setrgbcolor\n0 0 moveto (%!PS-Adobe-3.0 EPSF-3.0\n%%BoundingBox: 0 0 -1 -1\n%%CreationDate: Tue Jul 02 05:13:30 BST 2013\n/Oval { % x y w h filled\ngsave\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nx w 2 div add y h 2 div sub translate\n1 h w div scale\nfilled {0 0 moveto} if\n0 0 w 2 div 0 360 arc\nfilled {closepath fill} {stroke} ifelse grestore} bind def\n/Rect { % x y w h filled\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nnewpath \nx y moveto\nw 0 rlineto\n0 h neg rlineto\nw neg 0 rlineto\nclosepath\nfilled {fill} {stroke} ifelse} bind def\n%%BeginProlog\n%%EndProlog\n%%Page 1 1\n/\\(Monospaced.plain\\) findfont\n11 scalefont setfont\n0.0 0.0 0.0 setrgbcolor\n) show stroke\n", byteArrayOutputStream0.toString());
  }

  @Test
  public void test24()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics((-1), (-1), (OutputStream) byteArrayOutputStream0);
      postscriptGraphics0.shear((double) (-1), (-1892.41802215974));
      assertEquals("%!PS-Adobe-3.0 EPSF-3.0\n%%BoundingBox: 0 0 -1 -1\n%%CreationDate: Tue Jul 02 05:14:27 BST 2013\n/Oval { % x y w h filled\ngsave\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nx w 2 div add y h 2 div sub translate\n1 h w div scale\nfilled {0 0 moveto} if\n0 0 w 2 div 0 360 arc\nfilled {closepath fill} {stroke} ifelse grestore} bind def\n/Rect { % x y w h filled\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nnewpath \nx y moveto\nw 0 rlineto\n0 h neg rlineto\nw neg 0 rlineto\nclosepath\nfilled {fill} {stroke} ifelse} bind def\n%%BeginProlog\n%%EndProlog\n%%Page 1 1\n/(Monospaced.plain) findfont\n11 scalefont setfont\n0.0 0.0 0.0 setrgbcolor\n", byteArrayOutputStream0.toString());
      assertEquals(663, byteArrayOutputStream0.size());
  }

  @Test
  public void test25()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) byteArrayOutputStream0);
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics((-1072), (-1093), (OutputStream) filterOutputStream0);
      postscriptGraphics0.drawString((AttributedCharacterIterator) null, (-1), 178);
      assertEquals(669, byteArrayOutputStream0.size());
      assertEquals("%!PS-Adobe-3.0 EPSF-3.0\n%%BoundingBox: 0 0 -1093 -1072\n%%CreationDate: Tue Jul 02 05:14:28 BST 2013\n/Oval { % x y w h filled\ngsave\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nx w 2 div add y h 2 div sub translate\n1 h w div scale\nfilled {0 0 moveto} if\n0 0 w 2 div 0 360 arc\nfilled {closepath fill} {stroke} ifelse grestore} bind def\n/Rect { % x y w h filled\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nnewpath \nx y moveto\nw 0 rlineto\n0 h neg rlineto\nw neg 0 rlineto\nclosepath\nfilled {fill} {stroke} ifelse} bind def\n%%BeginProlog\n%%EndProlog\n%%Page 1 1\n/(Monospaced.plain) findfont\n11 scalefont setfont\n0.0 0.0 0.0 setrgbcolor\n", byteArrayOutputStream0.toString());
  }

  @Test
  public void test26()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics((-1), (-942), (OutputStream) pipedOutputStream0);
      AffineTransform affineTransform0 = postscriptGraphics0.getTransform();
      postscriptGraphics0.transform(affineTransform0);
  }

  @Test
  public void test27()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics(41, 0, (OutputStream) byteArrayOutputStream0);
      int[] intArray0 = new int[4];
      postscriptGraphics0.drawPolygon(intArray0, intArray0, (-481));
      assertEquals("%!PS-Adobe-3.0 EPSF-3.0\n%%BoundingBox: 0 0 0 41\n%%CreationDate: Tue Jul 02 05:14:36 BST 2013\n/Oval { % x y w h filled\ngsave\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nx w 2 div add y h 2 div sub translate\n1 h w div scale\nfilled {0 0 moveto} if\n0 0 w 2 div 0 360 arc\nfilled {closepath fill} {stroke} ifelse grestore} bind def\n/Rect { % x y w h filled\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nnewpath \nx y moveto\nw 0 rlineto\n0 h neg rlineto\nw neg 0 rlineto\nclosepath\nfilled {fill} {stroke} ifelse} bind def\n%%BeginProlog\n%%EndProlog\n%%Page 1 1\n/(Monospaced.plain) findfont\n11 scalefont setfont\n0.0 0.0 0.0 setrgbcolor\n", byteArrayOutputStream0.toString());
      assertEquals("weka.gui.visualize.PostscriptGraphics[font=java.awt.Font[family=Monospaced,name=Courier,style=plain,size=11],color=java.awt.Color[r=0,g=0,b=0]]", postscriptGraphics0.toString());
  }

  @Test
  public void test28()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics(1454, 1454, (OutputStream) pipedOutputStream0);
      assertNotNull(postscriptGraphics0);
      
      FontMetrics fontMetrics0 = postscriptGraphics0.getFontMetrics();
      assertEquals("weka.gui.visualize.PostscriptGraphics[font=java.awt.Font[family=Monospaced,name=Courier,style=plain,size=11],color=java.awt.Color[r=0,g=0,b=0]]", postscriptGraphics0.toString());
      assertNotNull(fontMetrics0);
  }

  @Test
  public void test29()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics(41, 0, (OutputStream) byteArrayOutputStream0);
      postscriptGraphics0.getFontRenderContext();
      assertEquals("%!PS-Adobe-3.0 EPSF-3.0\n%%BoundingBox: 0 0 0 41\n%%CreationDate: Tue Jul 02 05:14:37 BST 2013\n/Oval { % x y w h filled\ngsave\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nx w 2 div add y h 2 div sub translate\n1 h w div scale\nfilled {0 0 moveto} if\n0 0 w 2 div 0 360 arc\nfilled {closepath fill} {stroke} ifelse grestore} bind def\n/Rect { % x y w h filled\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nnewpath \nx y moveto\nw 0 rlineto\n0 h neg rlineto\nw neg 0 rlineto\nclosepath\nfilled {fill} {stroke} ifelse} bind def\n%%BeginProlog\n%%EndProlog\n%%Page 1 1\n/(Monospaced.plain) findfont\n11 scalefont setfont\n0.0 0.0 0.0 setrgbcolor\n", byteArrayOutputStream0.toString());
      assertEquals(662, byteArrayOutputStream0.size());
  }

  @Test
  public void test30()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics(1454, 1454, (OutputStream) pipedOutputStream0);
      assertNotNull(postscriptGraphics0);
      
      Polygon polygon0 = new Polygon();
      postscriptGraphics0.fillPolygon(polygon0);
      assertEquals("weka.gui.visualize.PostscriptGraphics[font=java.awt.Font[family=Monospaced,name=Courier,style=plain,size=11],color=java.awt.Color[r=0,g=0,b=0]]", postscriptGraphics0.toString());
  }

  @Test
  public void test31()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics((-1), (-1), (OutputStream) byteArrayOutputStream0);
      postscriptGraphics0.draw3DRect(0, 0, (-1), 394, false);
      assertEquals(686, byteArrayOutputStream0.size());
      assertEquals("%!PS-Adobe-3.0 EPSF-3.0\n%%BoundingBox: 0 0 -1 -1\n%%CreationDate: Tue Jul 02 05:14:39 BST 2013\n/Oval { % x y w h filled\ngsave\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nx w 2 div add y h 2 div sub translate\n1 h w div scale\nfilled {0 0 moveto} if\n0 0 w 2 div 0 360 arc\nfilled {closepath fill} {stroke} ifelse grestore} bind def\n/Rect { % x y w h filled\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nnewpath \nx y moveto\nw 0 rlineto\n0 h neg rlineto\nw neg 0 rlineto\nclosepath\nfilled {fill} {stroke} ifelse} bind def\n%%BeginProlog\n%%EndProlog\n%%Page 1 1\n/(Monospaced.plain) findfont\n11 scalefont setfont\n0.0 0.0 0.0 setrgbcolor\n0 -1 -1 394 false Rect\n", byteArrayOutputStream0.toString());
  }

  @Test
  public void test32()  throws Throwable  {
      PrintStream printStream0 = DebugGraphics.logStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics(0, 0, (OutputStream) printStream0);
      assertNotNull(postscriptGraphics0);
      
      JViewport jViewport0 = new JViewport();
      Rectangle rectangle0 = jViewport0.getVisibleRect();
      postscriptGraphics0.fill((Shape) rectangle0);
      assertEquals("weka.gui.visualize.PostscriptGraphics[font=java.awt.Font[family=Monospaced,name=Courier,style=plain,size=11],color=java.awt.Color[r=0,g=0,b=0]]", postscriptGraphics0.toString());
  }

  @Test
  public void test33()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics((-2), (-1750), (OutputStream) byteArrayOutputStream0);
      postscriptGraphics0.fillArc((-332), (-1750), 0, 6, 960, 6);
      assertEquals(666, byteArrayOutputStream0.size());
      assertEquals("%!PS-Adobe-3.0 EPSF-3.0\n%%BoundingBox: 0 0 -1750 -2\n%%CreationDate: Tue Jul 02 05:14:42 BST 2013\n/Oval { % x y w h filled\ngsave\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nx w 2 div add y h 2 div sub translate\n1 h w div scale\nfilled {0 0 moveto} if\n0 0 w 2 div 0 360 arc\nfilled {closepath fill} {stroke} ifelse grestore} bind def\n/Rect { % x y w h filled\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nnewpath \nx y moveto\nw 0 rlineto\n0 h neg rlineto\nw neg 0 rlineto\nclosepath\nfilled {fill} {stroke} ifelse} bind def\n%%BeginProlog\n%%EndProlog\n%%Page 1 1\n/(Monospaced.plain) findfont\n11 scalefont setfont\n0.0 0.0 0.0 setrgbcolor\n", byteArrayOutputStream0.toString());
  }

  @Test
  public void test34()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics(1454, 1454, (OutputStream) pipedOutputStream0);
      assertNotNull(postscriptGraphics0);
      
      postscriptGraphics0.rotate(0.0, (-1540.0658533323835), (double) (-1786));
      assertEquals("weka.gui.visualize.PostscriptGraphics[font=java.awt.Font[family=Monospaced,name=Courier,style=plain,size=11],color=java.awt.Color[r=0,g=0,b=0]]", postscriptGraphics0.toString());
  }

  @Test
  public void test35()  throws Throwable  {
      PrintStream printStream0 = DebugGraphics.logStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics(6, 0, (OutputStream) printStream0);
      assertNotNull(postscriptGraphics0);
      
      JButton jButton0 = new JButton("");
      JToolTip jToolTip0 = jButton0.createToolTip();
      Rectangle rectangle0 = jToolTip0.getVisibleRect();
      postscriptGraphics0.getClipBounds(rectangle0);
      assertEquals(6, rectangle0.height);
      assertEquals("weka.gui.visualize.PostscriptGraphics[font=java.awt.Font[family=Monospaced,name=Courier,style=plain,size=11],color=java.awt.Color[r=0,g=0,b=0]]", postscriptGraphics0.toString());
  }

  @Test
  public void test36()  throws Throwable  {
      PrintStream printStream0 = DebugGraphics.logStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics(41, 41, (OutputStream) printStream0);
      assertNotNull(postscriptGraphics0);
      
      postscriptGraphics0.fill3DRect(41, (-446), 41, 957, true);
      assertEquals("weka.gui.visualize.PostscriptGraphics[font=java.awt.Font[family=Monospaced,name=Courier,style=plain,size=11],color=java.awt.Color[r=0,g=0,b=0]]", postscriptGraphics0.toString());
  }

  @Test
  public void test37()  throws Throwable  {
      PrintStream printStream0 = DebugGraphics.logStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics(41, 41, (OutputStream) printStream0);
      assertNotNull(postscriptGraphics0);
      
      postscriptGraphics0.dispose();
      assertEquals("weka.gui.visualize.PostscriptGraphics[font=java.awt.Font[family=Monospaced,name=Courier,style=plain,size=11],color=java.awt.Color[r=0,g=0,b=0]]", postscriptGraphics0.toString());
  }

  @Test
  public void test38()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics(0, 0, (OutputStream) objectOutputStream0);
      assertNotNull(postscriptGraphics0);
      
      postscriptGraphics0.fillRect(0, 0, 0, 0);
      assertEquals("weka.gui.visualize.PostscriptGraphics[font=java.awt.Font[family=Monospaced,name=Courier,style=plain,size=11],color=java.awt.Color[r=0,g=0,b=0]]", postscriptGraphics0.toString());
  }

  @Test
  public void test39()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics(1454, 1454, (OutputStream) pipedOutputStream0);
      assertNotNull(postscriptGraphics0);
      
      Color color0 = (Color)postscriptGraphics0.getPaint();
      assertNotNull(color0);
      assertEquals("weka.gui.visualize.PostscriptGraphics[font=java.awt.Font[family=Monospaced,name=Courier,style=plain,size=11],color=java.awt.Color[r=0,g=0,b=0]]", postscriptGraphics0.toString());
  }

  @Test
  public void test40()  throws Throwable  {
      PrintStream printStream0 = DebugGraphics.logStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics(41, 41, (OutputStream) printStream0);
      assertNotNull(postscriptGraphics0);
      
      postscriptGraphics0.drawRenderableImage((RenderableImage) null, (AffineTransform) null);
      assertEquals("weka.gui.visualize.PostscriptGraphics[font=java.awt.Font[family=Monospaced,name=Courier,style=plain,size=11],color=java.awt.Color[r=0,g=0,b=0]]", postscriptGraphics0.toString());
  }

  @Test
  public void test41()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics(1454, 1454, (OutputStream) pipedOutputStream0);
      assertNotNull(postscriptGraphics0);
      
      Polygon polygon0 = new Polygon();
      postscriptGraphics0.setClip((Shape) polygon0);
      assertEquals("weka.gui.visualize.PostscriptGraphics[font=java.awt.Font[family=Monospaced,name=Courier,style=plain,size=11],color=java.awt.Color[r=0,g=0,b=0]]", postscriptGraphics0.toString());
  }

  @Test
  public void test42()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics((-12), (-12), (OutputStream) byteArrayOutputStream0);
      JRadioButton jRadioButton0 = new JRadioButton();
      Rectangle rectangle0 = jRadioButton0.getVisibleRect();
      postscriptGraphics0.clip((Shape) rectangle0);
      assertEquals("%!PS-Adobe-3.0 EPSF-3.0\n%%BoundingBox: 0 0 -12 -12\n%%CreationDate: Tue Jul 02 05:14:48 BST 2013\n/Oval { % x y w h filled\ngsave\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nx w 2 div add y h 2 div sub translate\n1 h w div scale\nfilled {0 0 moveto} if\n0 0 w 2 div 0 360 arc\nfilled {closepath fill} {stroke} ifelse grestore} bind def\n/Rect { % x y w h filled\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nnewpath \nx y moveto\nw 0 rlineto\n0 h neg rlineto\nw neg 0 rlineto\nclosepath\nfilled {fill} {stroke} ifelse} bind def\n%%BeginProlog\n%%EndProlog\n%%Page 1 1\n/(Monospaced.plain) findfont\n11 scalefont setfont\n0.0 0.0 0.0 setrgbcolor\n", byteArrayOutputStream0.toString());
      assertEquals(665, byteArrayOutputStream0.size());
  }

  @Test
  public void test43()  throws Throwable  {
      PrintStream printStream0 = DebugGraphics.logStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics(41, 41, (OutputStream) printStream0);
      assertNotNull(postscriptGraphics0);
      
      postscriptGraphics0.fillRoundRect(0, 0, 1680, 0, (-1625), 17);
      assertEquals("weka.gui.visualize.PostscriptGraphics[font=java.awt.Font[family=Monospaced,name=Courier,style=plain,size=11],color=java.awt.Color[r=0,g=0,b=0]]", postscriptGraphics0.toString());
  }

  @Test
  public void test44()  throws Throwable  {
      PrintStream printStream0 = DebugGraphics.logStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics(41, 41, (OutputStream) printStream0);
      assertNotNull(postscriptGraphics0);
      
      RenderingHints.Key renderingHints_Key0 = RenderingHints.KEY_STROKE_CONTROL;
      postscriptGraphics0.setRenderingHint(renderingHints_Key0, (Object) "Courier");
      assertEquals("weka.gui.visualize.PostscriptGraphics[font=java.awt.Font[family=Monospaced,name=Courier,style=plain,size=11],color=java.awt.Color[r=0,g=0,b=0]]", postscriptGraphics0.toString());
  }

  @Test
  public void test45()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) byteArrayOutputStream0);
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics((-1072), (-1093), (OutputStream) filterOutputStream0);
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try {
        postscriptGraphics0.drawBytes(byteArray0, 854, 519, (int) (byte) (-35), 14);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
        /*
         * String index out of range: 1373
         */
      }
  }

  @Test
  public void test46()  throws Throwable  {
      PrintStream printStream0 = DebugGraphics.logStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics((-1819), (-1), (OutputStream) printStream0);
      assertNotNull(postscriptGraphics0);
      
      Color color0 = postscriptGraphics0.getBackground();
      assertEquals("weka.gui.visualize.PostscriptGraphics[font=java.awt.Font[family=Monospaced,name=Courier,style=plain,size=11],color=java.awt.Color[r=0,g=0,b=0]]", postscriptGraphics0.toString());
      assertNotNull(color0);
  }

  @Test
  public void test47()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics((-12), (-12), (OutputStream) byteArrayOutputStream0);
      postscriptGraphics0.setXORMode((Color) null);
      assertEquals(665, byteArrayOutputStream0.size());
      assertEquals("%!PS-Adobe-3.0 EPSF-3.0\n%%BoundingBox: 0 0 -12 -12\n%%CreationDate: Tue Jul 02 05:14:52 BST 2013\n/Oval { % x y w h filled\ngsave\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nx w 2 div add y h 2 div sub translate\n1 h w div scale\nfilled {0 0 moveto} if\n0 0 w 2 div 0 360 arc\nfilled {closepath fill} {stroke} ifelse grestore} bind def\n/Rect { % x y w h filled\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nnewpath \nx y moveto\nw 0 rlineto\n0 h neg rlineto\nw neg 0 rlineto\nclosepath\nfilled {fill} {stroke} ifelse} bind def\n%%BeginProlog\n%%EndProlog\n%%Page 1 1\n/(Monospaced.plain) findfont\n11 scalefont setfont\n0.0 0.0 0.0 setrgbcolor\n", byteArrayOutputStream0.toString());
  }

  @Test
  public void test48()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics(0, 0, (OutputStream) objectOutputStream0);
      assertNotNull(postscriptGraphics0);
      
      postscriptGraphics0.finalize();
      assertEquals("weka.gui.visualize.PostscriptGraphics[font=java.awt.Font[family=Monospaced,name=Courier,style=plain,size=11],color=java.awt.Color[r=0,g=0,b=0]]", postscriptGraphics0.toString());
  }

  @Test
  public void test49()  throws Throwable  {
      PrintStream printStream0 = DebugGraphics.logStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics((-1819), (-1), (OutputStream) printStream0);
      assertNotNull(postscriptGraphics0);
      
      Properties properties0 = new Properties();
      postscriptGraphics0.addRenderingHints((Map) properties0);
      assertEquals("weka.gui.visualize.PostscriptGraphics[font=java.awt.Font[family=Monospaced,name=Courier,style=plain,size=11],color=java.awt.Color[r=0,g=0,b=0]]", postscriptGraphics0.toString());
  }

  @Test
  public void test50()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics(0, 0, (OutputStream) objectOutputStream0);
      assertNotNull(postscriptGraphics0);
      
      postscriptGraphics0.getClip();
      assertEquals("weka.gui.visualize.PostscriptGraphics[font=java.awt.Font[family=Monospaced,name=Courier,style=plain,size=11],color=java.awt.Color[r=0,g=0,b=0]]", postscriptGraphics0.toString());
  }

  @Test
  public void test51()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics((-1), (-942), (OutputStream) pipedOutputStream0);
      postscriptGraphics0.finished();
  }

  @Test
  public void test52()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics((-2), (-1750), (OutputStream) byteArrayOutputStream0);
      postscriptGraphics0.setClip((-1071), 1846, (-2), 0);
      assertEquals(666, byteArrayOutputStream0.size());
      assertEquals("%!PS-Adobe-3.0 EPSF-3.0\n%%BoundingBox: 0 0 -1750 -2\n%%CreationDate: Tue Jul 02 05:15:01 BST 2013\n/Oval { % x y w h filled\ngsave\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nx w 2 div add y h 2 div sub translate\n1 h w div scale\nfilled {0 0 moveto} if\n0 0 w 2 div 0 360 arc\nfilled {closepath fill} {stroke} ifelse grestore} bind def\n/Rect { % x y w h filled\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nnewpath \nx y moveto\nw 0 rlineto\n0 h neg rlineto\nw neg 0 rlineto\nclosepath\nfilled {fill} {stroke} ifelse} bind def\n%%BeginProlog\n%%EndProlog\n%%Page 1 1\n/(Monospaced.plain) findfont\n11 scalefont setfont\n0.0 0.0 0.0 setrgbcolor\n", byteArrayOutputStream0.toString());
  }

  @Test
  public void test53()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics((-1), (-942), (OutputStream) pipedOutputStream0);
      char[] charArray0 = new char[10];
      // Undeclared exception!
      try {
        postscriptGraphics0.drawChars(charArray0, (int) 'v', (-351), 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
        /*
         * String index out of range: -351
         */
      }
  }

  @Test
  public void test54()  throws Throwable  {
      PrintStream printStream0 = DebugGraphics.logStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics((-1819), (-1), (OutputStream) printStream0);
      assertNotNull(postscriptGraphics0);
      
      postscriptGraphics0.drawString("XB|0m.Rf*aSS;Fbx", 0.0F, 1812.9133F);
      assertEquals("weka.gui.visualize.PostscriptGraphics[font=java.awt.Font[family=Monospaced,name=Courier,style=plain,size=11],color=java.awt.Color[r=0,g=0,b=0]]", postscriptGraphics0.toString());
  }

  @Test
  public void test55()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) byteArrayOutputStream0);
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics((-1072), (-1093), (OutputStream) filterOutputStream0);
      postscriptGraphics0.rotate((double) (-1072));
      assertEquals(669, byteArrayOutputStream0.size());
      assertEquals("%!PS-Adobe-3.0 EPSF-3.0\n%%BoundingBox: 0 0 -1093 -1072\n%%CreationDate: Tue Jul 02 05:15:10 BST 2013\n/Oval { % x y w h filled\ngsave\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nx w 2 div add y h 2 div sub translate\n1 h w div scale\nfilled {0 0 moveto} if\n0 0 w 2 div 0 360 arc\nfilled {closepath fill} {stroke} ifelse grestore} bind def\n/Rect { % x y w h filled\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nnewpath \nx y moveto\nw 0 rlineto\n0 h neg rlineto\nw neg 0 rlineto\nclosepath\nfilled {fill} {stroke} ifelse} bind def\n%%BeginProlog\n%%EndProlog\n%%Page 1 1\n/(Monospaced.plain) findfont\n11 scalefont setfont\n0.0 0.0 0.0 setrgbcolor\n", byteArrayOutputStream0.toString());
  }

  @Test
  public void test56()  throws Throwable  {
      PrintStream printStream0 = DebugGraphics.logStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics(41, 41, (OutputStream) printStream0);
      assertNotNull(postscriptGraphics0);
      
      Rectangle rectangle0 = postscriptGraphics0.getClipBounds();
      assertNotNull(rectangle0);
      assertEquals("weka.gui.visualize.PostscriptGraphics[font=java.awt.Font[family=Monospaced,name=Courier,style=plain,size=11],color=java.awt.Color[r=0,g=0,b=0]]", postscriptGraphics0.toString());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=41,height=41]", rectangle0.toString());
  }

  @Test
  public void test57()  throws Throwable  {
      PrintStream printStream0 = DebugGraphics.logStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics(41, 41, (OutputStream) printStream0);
      assertNotNull(postscriptGraphics0);
      
      postscriptGraphics0.drawLine(41, 41, 8, (-593));
      assertEquals("weka.gui.visualize.PostscriptGraphics[font=java.awt.Font[family=Monospaced,name=Courier,style=plain,size=11],color=java.awt.Color[r=0,g=0,b=0]]", postscriptGraphics0.toString());
  }

  @Test
  public void test58()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics((-2), (-1750), (OutputStream) byteArrayOutputStream0);
      boolean boolean0 = postscriptGraphics0.hit((Rectangle) null, (Shape) null, true);
      assertEquals(666, byteArrayOutputStream0.size());
      assertEquals(false, boolean0);
  }

  @Test
  public void test59()  throws Throwable  {
      PostscriptGraphics.addPSFontReplacement("wds)A64\">v''VjLui", "59!Cx)f`yzPA[rX8na");
  }

  @Test
  public void test60()  throws Throwable  {
      PrintStream printStream0 = DebugGraphics.logStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics(0, 0, (OutputStream) printStream0);
      assertNotNull(postscriptGraphics0);
      
      RenderingHints renderingHints0 = postscriptGraphics0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp((float) (-656), (float) 0, renderingHints0);
      postscriptGraphics0.drawImage((BufferedImage) null, (BufferedImageOp) rescaleOp0, 1726, (-1));
      assertEquals("weka.gui.visualize.PostscriptGraphics[font=java.awt.Font[family=Monospaced,name=Courier,style=plain,size=11],color=java.awt.Color[r=0,g=0,b=0]]", postscriptGraphics0.toString());
  }

  @Test
  public void test61()  throws Throwable  {
      PrintStream printStream0 = DebugGraphics.logStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics((-1819), (-1), (OutputStream) printStream0);
      assertNotNull(postscriptGraphics0);
      
      RenderingHints.Key renderingHints_Key0 = RenderingHints.KEY_FRACTIONALMETRICS;
      postscriptGraphics0.getRenderingHint(renderingHints_Key0);
      assertEquals("weka.gui.visualize.PostscriptGraphics[font=java.awt.Font[family=Monospaced,name=Courier,style=plain,size=11],color=java.awt.Color[r=0,g=0,b=0]]", postscriptGraphics0.toString());
  }

  @Test
  public void test62()  throws Throwable  {
      PrintStream printStream0 = DebugGraphics.logStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics(41, 41, (OutputStream) printStream0);
      assertNotNull(postscriptGraphics0);
      
      postscriptGraphics0.fill3DRect(0, 41, 0, 955, false);
      assertEquals("weka.gui.visualize.PostscriptGraphics[font=java.awt.Font[family=Monospaced,name=Courier,style=plain,size=11],color=java.awt.Color[r=0,g=0,b=0]]", postscriptGraphics0.toString());
  }

  @Test
  public void test63()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics((-12), (-12), (OutputStream) byteArrayOutputStream0);
      JOptionPane jOptionPane0 = new JOptionPane((Object) null, 0);
      FontUIResource fontUIResource0 = (FontUIResource)jOptionPane0.getFont();
      postscriptGraphics0.setFont((Font) fontUIResource0);
      assertEquals("%!PS-Adobe-3.0 EPSF-3.0\n%%BoundingBox: 0 0 -12 -12\n%%CreationDate: Tue Jul 02 05:15:15 BST 2013\n/Oval { % x y w h filled\ngsave\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nx w 2 div add y h 2 div sub translate\n1 h w div scale\nfilled {0 0 moveto} if\n0 0 w 2 div 0 360 arc\nfilled {closepath fill} {stroke} ifelse grestore} bind def\n/Rect { % x y w h filled\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nnewpath \nx y moveto\nw 0 rlineto\n0 h neg rlineto\nw neg 0 rlineto\nclosepath\nfilled {fill} {stroke} ifelse} bind def\n%%BeginProlog\n%%EndProlog\n%%Page 1 1\n/(Monospaced.plain) findfont\n11 scalefont setfont\n0.0 0.0 0.0 setrgbcolor\n/(Helvetica.plain) findfont\n12 scalefont setfont\n", byteArrayOutputStream0.toString());
      assertEquals(714, byteArrayOutputStream0.size());
  }

  @Test
  public void test64()  throws Throwable  {
      PrintStream printStream0 = DebugGraphics.logStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics(41, 41, (OutputStream) printStream0);
      assertNotNull(postscriptGraphics0);
      
      postscriptGraphics0.scale(1988.7640981011846, (double) 41);
      postscriptGraphics0.drawOval((-1), 359, 0, 6);
      assertEquals("weka.gui.visualize.PostscriptGraphics[font=java.awt.Font[family=Monospaced,name=Courier,style=plain,size=11],color=java.awt.Color[r=0,g=0,b=0]]", postscriptGraphics0.toString());
  }

  @Test
  public void test65()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics(41, 0, (OutputStream) byteArrayOutputStream0);
      BasicStroke basicStroke0 = new BasicStroke((float) 563, 0, 0);
      postscriptGraphics0.setStroke((Stroke) basicStroke0);
      assertEquals(662, byteArrayOutputStream0.size());
      assertEquals("%!PS-Adobe-3.0 EPSF-3.0\n%%BoundingBox: 0 0 0 41\n%%CreationDate: Tue Jul 02 05:15:17 BST 2013\n/Oval { % x y w h filled\ngsave\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nx w 2 div add y h 2 div sub translate\n1 h w div scale\nfilled {0 0 moveto} if\n0 0 w 2 div 0 360 arc\nfilled {closepath fill} {stroke} ifelse grestore} bind def\n/Rect { % x y w h filled\n/filled exch def /h exch def /w exch def /y exch def /x exch def\nnewpath \nx y moveto\nw 0 rlineto\n0 h neg rlineto\nw neg 0 rlineto\nclosepath\nfilled {fill} {stroke} ifelse} bind def\n%%BeginProlog\n%%EndProlog\n%%Page 1 1\n/(Monospaced.plain) findfont\n11 scalefont setfont\n0.0 0.0 0.0 setrgbcolor\n", byteArrayOutputStream0.toString());
  }
}
