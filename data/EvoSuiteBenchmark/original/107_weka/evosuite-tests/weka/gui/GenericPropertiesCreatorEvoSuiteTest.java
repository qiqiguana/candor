/*
 * This file was automatically generated by EvoSuite
 */

package weka.gui;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Properties;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import weka.gui.GenericPropertiesCreator;

@RunWith(EvoSuiteRunner.class)
public class GenericPropertiesCreatorEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      GenericPropertiesCreator genericPropertiesCreator0 = new GenericPropertiesCreator("'");
      genericPropertiesCreator0.setInputFilename("'");
      assertEquals("weka/gui/GenericObjectEditor.props", genericPropertiesCreator0.getOutputFilename());
      assertEquals(true, genericPropertiesCreator0.getExplicitPropsFile());
      assertEquals(true, genericPropertiesCreator0.useDynamic());
      assertEquals("'", genericPropertiesCreator0.getInputFilename());
  }

  @Test
  public void test1()  throws Throwable  {
      Properties properties0 = GenericPropertiesCreator.getGlobalOutputProperties();
      assertEquals(41, properties0.size());
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          GenericPropertiesCreator genericPropertiesCreator0 = new GenericPropertiesCreator();
          try {
            genericPropertiesCreator0.execute();
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission weka/gui/GenericObjectEditor.props write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:183)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:84)
             * weka.gui.GenericPropertiesCreator.storeOutputProperties(GenericPropertiesCreator.java:560)
             * weka.gui.GenericPropertiesCreator.execute(GenericPropertiesCreator.java:610)
             * weka.gui.GenericPropertiesCreator.execute(GenericPropertiesCreator.java:572)
             * sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
      GenericPropertiesCreator.regenerateGlobalOutputProperties();
  }

  @Test
  public void test4()  throws Throwable  {
      GenericPropertiesCreator genericPropertiesCreator0 = new GenericPropertiesCreator("'");
      assertEquals("weka/gui/GenericObjectEditor.props", genericPropertiesCreator0.getOutputFilename());
      
      genericPropertiesCreator0.setOutputFilename("'");
      assertEquals("'", genericPropertiesCreator0.getInputFilename());
  }

  @Test
  public void test5()  throws Throwable  {
      GenericPropertiesCreator genericPropertiesCreator0 = new GenericPropertiesCreator();
      genericPropertiesCreator0.execute(false);
      assertEquals("weka/gui/GenericObjectEditor.props", genericPropertiesCreator0.getOutputFilename());
      assertEquals(false, genericPropertiesCreator0.getExplicitPropsFile());
      assertEquals("weka/gui/GenericPropertiesCreator.props", genericPropertiesCreator0.getInputFilename());
  }

  @Test
  public void test6()  throws Throwable  {
      Properties properties0 = GenericPropertiesCreator.getGlobalInputProperties();
      assertEquals(0, properties0.size());
  }

  @Test
  public void test7()  throws Throwable  {
      GenericPropertiesCreator genericPropertiesCreator0 = new GenericPropertiesCreator("'");
      genericPropertiesCreator0.loadInputProperties();
      boolean boolean0 = genericPropertiesCreator0.useDynamic();
      assertEquals(true, boolean0);
      assertEquals("'", genericPropertiesCreator0.getInputFilename());
      assertEquals("weka/gui/GenericObjectEditor.props", genericPropertiesCreator0.getOutputFilename());
      assertEquals(true, genericPropertiesCreator0.getExplicitPropsFile());
  }

  @Test
  public void test8()  throws Throwable  {
      GenericPropertiesCreator genericPropertiesCreator0 = new GenericPropertiesCreator();
      boolean boolean0 = genericPropertiesCreator0.isValidClassname("*(Uyn-KZX!S$YwYJaZV");
      assertEquals(false, genericPropertiesCreator0.getExplicitPropsFile());
      assertEquals("weka/gui/GenericObjectEditor.props", genericPropertiesCreator0.getOutputFilename());
      assertEquals("weka/gui/GenericPropertiesCreator.props", genericPropertiesCreator0.getInputFilename());
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      GenericPropertiesCreator genericPropertiesCreator0 = new GenericPropertiesCreator();
      boolean boolean0 = genericPropertiesCreator0.isValidClassname("%1rZ0LSExSk%");
      assertEquals("weka/gui/GenericObjectEditor.props", genericPropertiesCreator0.getOutputFilename());
      assertEquals("weka/gui/GenericPropertiesCreator.props", genericPropertiesCreator0.getInputFilename());
      assertEquals(true, boolean0);
      assertEquals(false, genericPropertiesCreator0.getExplicitPropsFile());
  }

  @Test
  public void test10()  throws Throwable  {
      GenericPropertiesCreator genericPropertiesCreator0 = new GenericPropertiesCreator("'");
      boolean boolean0 = genericPropertiesCreator0.isValidClassname("'", "'");
      assertEquals("weka/gui/GenericObjectEditor.props", genericPropertiesCreator0.getOutputFilename());
      assertEquals("'", genericPropertiesCreator0.getInputFilename());
      assertEquals(true, boolean0);
      assertEquals(true, genericPropertiesCreator0.getExplicitPropsFile());
  }

  @Test
  public void test11()  throws Throwable  {
      GenericPropertiesCreator genericPropertiesCreator0 = new GenericPropertiesCreator("weka.experiment.ResultListener");
      boolean boolean0 = genericPropertiesCreator0.useDynamic();
      boolean boolean1 = genericPropertiesCreator0.isValidClassname("weka.experiment.ResultListener", "weka.experiment.ResultListener");
      assertEquals(true, genericPropertiesCreator0.getExplicitPropsFile());
      assertEquals("weka.experiment.ResultListener", genericPropertiesCreator0.getInputFilename());
      assertEquals("weka/gui/GenericObjectEditor.props", genericPropertiesCreator0.getOutputFilename());
      assertTrue(boolean1 == boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      GenericPropertiesCreator genericPropertiesCreator0 = new GenericPropertiesCreator("weka.classifiers.bayes.net.search.SearchAlgorithm");
      boolean boolean0 = genericPropertiesCreator0.useDynamic();
      boolean boolean1 = genericPropertiesCreator0.isValidClassname("weka.classifiers.bayes.net.search.SearchAlgorithm", (String) null);
      assertTrue(boolean1 == boolean0);
      assertEquals(true, genericPropertiesCreator0.getExplicitPropsFile());
      assertEquals("weka.classifiers.bayes.net.search.SearchAlgorithm", genericPropertiesCreator0.getInputFilename());
      assertEquals("weka/gui/GenericObjectEditor.props", genericPropertiesCreator0.getOutputFilename());
  }

  @Test
  public void test13()  throws Throwable  {
      GenericPropertiesCreator genericPropertiesCreator0 = new GenericPropertiesCreator("weka.classifiers.bayes.net.search.SearchAlgorithm");
      boolean boolean0 = genericPropertiesCreator0.useDynamic();
      boolean boolean1 = genericPropertiesCreator0.isValidClassname("weka.classifiers.bayes.net.search.SearchAlgorithm", "weka.classifiers.bayes.net.search.SearchAlgorithm");
      assertEquals("weka.classifiers.bayes.net.search.SearchAlgorithm", genericPropertiesCreator0.getInputFilename());
      assertEquals(true, genericPropertiesCreator0.getExplicitPropsFile());
      assertEquals("weka/gui/GenericObjectEditor.props", genericPropertiesCreator0.getOutputFilename());
      assertTrue(boolean1 == boolean0);
  }
}
