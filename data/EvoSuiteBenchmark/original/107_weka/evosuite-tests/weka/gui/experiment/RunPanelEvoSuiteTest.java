/*
 * This file was automatically generated by EvoSuite
 */

package weka.gui.experiment;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import weka.experiment.Experiment;
import weka.experiment.RemoteExperiment;
import weka.gui.experiment.RunPanel;

@RunWith(EvoSuiteRunner.class)
public class RunPanelEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          RunPanel runPanel0 = new RunPanel();
          assertNotNull(runPanel0);
          
          RemoteExperiment remoteExperiment0 = new RemoteExperiment();
          RunPanel.ExperimentRunner runPanel_ExperimentRunner0 = runPanel0.new ExperimentRunner((Experiment) remoteExperiment0);
          assertNotNull(runPanel_ExperimentRunner0);
          
          runPanel_ExperimentRunner0.run();
          assertEquals("Thread[Thread-2694,5,Test Execution]", runPanel_ExperimentRunner0.toString());
          assertEquals(7475L, runPanel_ExperimentRunner0.getId());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          RemoteExperiment remoteExperiment0 = new RemoteExperiment();
          RunPanel runPanel0 = new RunPanel((Experiment) remoteExperiment0);
          assertEquals(false, runPanel0.isLightweight());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
      RunPanel runPanel0 = new RunPanel();
      assertNotNull(runPanel0);
      
      RunPanel.ExperimentRunner runPanel_ExperimentRunner0 = runPanel0.new ExperimentRunner((Experiment) null);
      assertNotNull(runPanel_ExperimentRunner0);
      
      runPanel_ExperimentRunner0.abortExperiment();
      assertEquals(7551L, runPanel_ExperimentRunner0.getId());
      assertEquals("Thread[Thread-2770,5,Test Execution]", runPanel_ExperimentRunner0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          RunPanel runPanel0 = new RunPanel();
          assertNotNull(runPanel0);
          
          RemoteExperiment remoteExperiment0 = new RemoteExperiment();
          RunPanel.ExperimentRunner runPanel_ExperimentRunner0 = runPanel0.new ExperimentRunner((Experiment) remoteExperiment0);
          assertNotNull(runPanel_ExperimentRunner0);
          
          runPanel_ExperimentRunner0.abortExperiment();
          assertEquals("Thread-2811", runPanel_ExperimentRunner0.getName());
          assertEquals("Thread[Thread-2811,5,Test Execution]", runPanel_ExperimentRunner0.toString());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          RunPanel runPanel0 = new RunPanel();
          assertNotNull(runPanel0);
          
          RunPanel.ExperimentRunner runPanel_ExperimentRunner0 = runPanel0.new ExperimentRunner((Experiment) null);
          assertNotNull(runPanel_ExperimentRunner0);
          
          runPanel_ExperimentRunner0.run();
          assertEquals("Thread[Thread-2863,5,Test Execution]", runPanel_ExperimentRunner0.toString());
          assertEquals("Thread-2863", runPanel_ExperimentRunner0.getName());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
