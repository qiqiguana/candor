/*
 * This file was automatically generated by EvoSuite
 */

package weka.gui.experiment;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.awt.Component;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import weka.experiment.Experiment;
import weka.gui.experiment.RunNumberPanel;

@RunWith(EvoSuiteRunner.class)
public class RunNumberPanelEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      RunNumberPanel runNumberPanel0 = new RunNumberPanel();
      assertNotNull(runNumberPanel0);
      
      int int0 = runNumberPanel0.getUpper();
      assertEquals(10, int0);
      assertEquals(Component.BaselineResizeBehavior.CONSTANT_ASCENT, runNumberPanel0.getBaselineResizeBehavior());
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          Experiment experiment0 = new Experiment();
          RunNumberPanel runNumberPanel0 = new RunNumberPanel(experiment0);
          assertNotNull(runNumberPanel0);
          
          int int0 = runNumberPanel0.getLower();
          assertEquals(10, runNumberPanel0.getUpper());
          assertEquals(Component.BaselineResizeBehavior.CONSTANT_ASCENT, runNumberPanel0.getBaselineResizeBehavior());
          assertEquals(1, int0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
