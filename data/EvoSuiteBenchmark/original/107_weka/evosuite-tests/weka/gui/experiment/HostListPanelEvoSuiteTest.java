/*
 * This file was automatically generated by EvoSuite
 */

package weka.gui.experiment;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import weka.experiment.RemoteExperiment;
import weka.gui.experiment.HostListPanel;

@RunWith(EvoSuiteRunner.class)
public class HostListPanelEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          RemoteExperiment remoteExperiment0 = new RemoteExperiment();
          HostListPanel hostListPanel0 = new HostListPanel(remoteExperiment0);
          assertEquals(Component.BaselineResizeBehavior.CONSTANT_ASCENT, hostListPanel0.getBaselineResizeBehavior());
          assertNotNull(hostListPanel0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          RemoteExperiment remoteExperiment0 = new RemoteExperiment();
          remoteExperiment0.addRemoteHost("Can do efficient internal cross-validation to determine ");
          HostListPanel hostListPanel0 = new HostListPanel(remoteExperiment0);
          assertEquals(Component.BaselineResizeBehavior.CONSTANT_ASCENT, hostListPanel0.getBaselineResizeBehavior());
          assertNotNull(hostListPanel0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
      HostListPanel hostListPanel0 = new HostListPanel();
      assertNotNull(hostListPanel0);
      
      ActionEvent actionEvent0 = new ActionEvent((Object) "ToolTipText", (-1695), "ToolTipText", (-1695));
      hostListPanel0.actionPerformed(actionEvent0);
      assertEquals(Component.BaselineResizeBehavior.CONSTANT_ASCENT, hostListPanel0.getBaselineResizeBehavior());
  }
}
