/*
 * This file was automatically generated by EvoSuite
 */

package weka.gui.beans;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.beans.EventSetDescriptor;
import java.io.IOException;
import java.util.Enumeration;
import org.junit.BeforeClass;
import weka.associations.Apriori;
import weka.associations.FPGrowth;
import weka.core.Environment;
import weka.core.Instances;
import weka.core.converters.TextDirectoryLoader;
import weka.gui.LogPanel;
import weka.gui.Logger;
import weka.gui.beans.Associator;
import weka.gui.beans.BatchAssociationRulesListener;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.ConfigurationListener;
import weka.gui.beans.GraphListener;
import weka.gui.beans.GraphViewer;
import weka.gui.beans.MetaBean;
import weka.gui.beans.TextListener;
import weka.gui.beans.TextViewer;
import weka.gui.beans.TrainingSetEvent;

@RunWith(EvoSuiteRunner.class)
public class AssociatorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Associator associator0 = new Associator();
      assertNotNull(associator0);
      
      String string0 = associator0.globalInfo();
      assertEquals("weka.gui.beans.Associator[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", associator0.toString());
      assertNotNull(string0);
      assertEquals("<html><font color=blue>Class implementing an Apriori-type algorithm</font><br><br> Iteratively reduces the minimum support until it finds the required number of rules with the given minimum confidence.<br>The algorithm has an option to mine class association rules.<br>It is adapted as explained in the second reference.<br><br>For more information see:<br><br>R.<br>Agrawal, R.<br>Srikant: Fast Algorithms for Mining Association Rules in Large Databases.<br>In: 20th International Conference on Very Large Data Bases, 478-499, 1994.<br><br>Bing Liu, Wynne Hsu, Yiming Ma: Integrating Classification and Association Rule Mining.<br>In: Fourth International Conference on Knowledge Discovery and Data Mining, 80-86, 1998.<br></html>", string0);
      assertEquals(1, associator0.getComponentCount());
      assertEquals("Apriori", associator0.getCustomName());
  }

  @Test
  public void test1()  throws Throwable  {
      Associator associator0 = new Associator();
      assertNotNull(associator0);
      assertEquals("Apriori", associator0.getCustomName());
      
      associator0.setCustomName("tree-map");
      assertEquals("tree-map", associator0.getCustomName());
      assertEquals("weka.gui.beans.Associator[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", associator0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      Associator associator0 = new Associator();
      assertNotNull(associator0);
      
      LogPanel logPanel0 = new LogPanel();
      associator0.setLog((Logger) logPanel0);
      assertEquals(1, associator0.countComponents());
      assertEquals("weka.gui.beans.Associator[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", associator0.toString());
      assertEquals("Apriori", associator0.getCustomName());
  }

  @Test
  public void test3()  throws Throwable  {
      Associator associator0 = new Associator();
      assertNotNull(associator0);
      
      Environment environment0 = Environment.getSystemWide();
      associator0.setEnvironment(environment0);
      assertEquals("Apriori", associator0.getCustomName());
      assertEquals(1, associator0.countComponents());
      assertEquals("weka.gui.beans.Associator[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", associator0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      Associator associator0 = new Associator();
      assertNotNull(associator0);
      
      Apriori apriori0 = (Apriori)associator0.getWrappedAlgorithm();
      assertNotNull(apriori0);
      assertEquals(1, associator0.getComponentCount());
      assertEquals("Apriori", associator0.getCustomName());
      assertEquals("weka.gui.beans.Associator[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", associator0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      Associator associator0 = new Associator();
      assertNotNull(associator0);
      
      BeanVisual beanVisual0 = associator0.getVisual();
      assertEquals("weka/gui/beans/icons/DefaultAssociator_animated.gif", beanVisual0.getAnimatedIconPath());
      assertEquals("weka.gui.beans.Associator[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", associator0.toString());
      assertEquals("weka/gui/beans/icons/DefaultAssociator.gif", beanVisual0.getIconPath());
      assertNotNull(beanVisual0);
      assertEquals(1, associator0.getComponentCount());
      assertEquals("Apriori", associator0.getCustomName());
  }

  @Test
  public void test6()  throws Throwable  {
      Associator associator0 = new Associator();
      assertNotNull(associator0);
      
      GraphViewer graphViewer0 = new GraphViewer();
      associator0.removeGraphListener((GraphListener) graphViewer0);
      assertEquals("weka.gui.beans.Associator[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", associator0.toString());
      assertEquals("Apriori", associator0.getCustomName());
      assertEquals(1, associator0.countComponents());
  }

  @Test
  public void test7()  throws Throwable  {
      Associator associator0 = new Associator();
      assertNotNull(associator0);
      
      associator0.addConfigurationListener((ConfigurationListener) null);
      assertEquals("weka.gui.beans.Associator[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", associator0.toString());
      assertEquals(1, associator0.countComponents());
      assertEquals("Apriori", associator0.getCustomName());
  }

  @Test
  public void test8()  throws Throwable  {
      Associator associator0 = new Associator();
      assertNotNull(associator0);
      
      TextViewer textViewer0 = new TextViewer();
      associator0.addTextListener((TextListener) textViewer0);
      assertEquals("Apriori", associator0.getCustomName());
      assertEquals("weka.gui.beans.Associator[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", associator0.toString());
      assertEquals(1, associator0.countComponents());
  }

  @Test
  public void test9()  throws Throwable  {
      Associator associator0 = new Associator();
      assertNotNull(associator0);
      
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent((Object) "disabledSelectedIcon", (Instances) null, 107, 0);
      associator0.acceptTrainingSet(trainingSetEvent0);
      assertEquals(false, associator0.isBusy());
      assertEquals("weka.gui.beans.Associator[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", associator0.toString());
      assertEquals("Apriori", associator0.getCustomName());
      assertEquals(1, associator0.getComponentCount());
  }

  @Test
  public void test10()  throws Throwable  {
      Associator associator0 = new Associator();
      assertNotNull(associator0);
      
      // Undeclared exception!
      try {
        associator0.connectionAllowed((EventSetDescriptor) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Associator associator0 = new Associator();
      assertNotNull(associator0);
      assertEquals("Apriori", associator0.getCustomName());
      
      MetaBean metaBean0 = new MetaBean();
      BeanVisual beanVisual0 = metaBean0.getVisual();
      associator0.setVisual(beanVisual0);
      assertEquals(1, associator0.getComponentCount());
  }

  @Test
  public void test12()  throws Throwable  {
      Associator associator0 = new Associator();
      assertNotNull(associator0);
      
      // Undeclared exception!
      try {
        associator0.eventGeneratable((EventSetDescriptor) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      Associator associator0 = new Associator();
      assertNotNull(associator0);
      
      String string0 = associator0.getCustomName();
      assertNotNull(string0);
      assertEquals("Apriori", string0);
      assertEquals(1, associator0.getComponentCount());
      assertEquals("weka.gui.beans.Associator[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", associator0.toString());
  }

  @Test
  public void test14()  throws Throwable  {
      Associator associator0 = new Associator();
      assertNotNull(associator0);
      
      associator0.removeConfigurationListener((ConfigurationListener) null);
      assertEquals("weka.gui.beans.Associator[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", associator0.toString());
      assertEquals("Apriori", associator0.getCustomName());
      assertEquals(1, associator0.countComponents());
  }

  @Test
  public void test15()  throws Throwable  {
      Associator associator0 = new Associator();
      assertNotNull(associator0);
      
      associator0.removeBatchAssociationRulesListener((BatchAssociationRulesListener) null);
      assertEquals("weka.gui.beans.Associator[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", associator0.toString());
      assertEquals("Apriori", associator0.getCustomName());
      assertEquals(1, associator0.getComponentCount());
  }

  @Test
  public void test16()  throws Throwable  {
      Associator associator0 = new Associator();
      assertNotNull(associator0);
      
      associator0.disconnectionNotification("fI]URxd7(mRS>\"f1-", "mnemonic");
      assertEquals("Apriori", associator0.getCustomName());
      assertEquals("weka.gui.beans.Associator[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", associator0.toString());
      assertEquals(1, associator0.countComponents());
  }

  @Test
  public void test17()  throws Throwable  {
      Associator associator0 = new Associator();
      assertNotNull(associator0);
      
      TextViewer textViewer0 = new TextViewer();
      associator0.removeTextListener((TextListener) textViewer0);
      assertEquals("Apriori", associator0.getCustomName());
      assertEquals("weka.gui.beans.Associator[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", associator0.toString());
      assertEquals(1, associator0.countComponents());
      assertEquals(1, associator0.getComponentCount());
  }

  @Test
  public void test18()  throws Throwable  {
      Associator associator0 = new Associator();
      assertNotNull(associator0);
      
      GraphViewer graphViewer0 = new GraphViewer();
      associator0.addGraphListener((GraphListener) graphViewer0);
      assertEquals(1, associator0.countComponents());
      assertEquals("Apriori", associator0.getCustomName());
      assertEquals("weka.gui.beans.Associator[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", associator0.toString());
  }

  @Test
  public void test19()  throws Throwable  {
      Associator associator0 = new Associator();
      assertNotNull(associator0);
      
      FPGrowth fPGrowth0 = new FPGrowth();
      associator0.setAssociator((weka.associations.Associator) fPGrowth0);
      assertEquals("FPGrowth", associator0.getCustomName());
      assertEquals("<html><font color=blue>Class implementing the FP-growth algorithm for finding large item sets without candidate generation</font><br><br> Iteratively reduces the minimum support until it finds the required number of rules with the given minimum metric.<br>For more information see:<br><br>J.<br>Han, J.Pei, Y.<br>Yin: Mining frequent patterns without candidate generation.<br>In: Proceedings of the 2000 ACM-SIGMID International Conference on Management of Data, 1-12, 2000.<br></html>", associator0.globalInfo());
  }

  @Test
  public void test20()  throws Throwable  {
      Associator associator0 = new Associator();
      assertNotNull(associator0);
      
      // Undeclared exception!
      try {
        associator0.setWrappedAlgorithm((Object) "8034");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * class java.lang.String : incorrect type of algorithm (Associator)
         */
      }
  }

  @Test
  public void test21()  throws Throwable  {
      Associator associator0 = new Associator();
      assertNotNull(associator0);
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent((Object) "stream", instances0, 1, 1);
      associator0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("Apriori", associator0.getCustomName());
      assertEquals("weka.gui.beans.Associator[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", associator0.toString());
      assertEquals(1, associator0.getComponentCount());
  }

  @Test
  public void test22()  throws Throwable  {
      Associator associator0 = new Associator();
      assertNotNull(associator0);
      
      associator0.connectionNotification("|/JJ", "ipp-attribute-fidelity");
      associator0.stop();
      assertEquals(1, associator0.countComponents());
      assertEquals("weka.gui.beans.Associator[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", associator0.toString());
      assertEquals("Apriori", associator0.getCustomName());
  }

  @Test
  public void test23()  throws Throwable  {
      Associator associator0 = new Associator();
      assertNotNull(associator0);
      
      associator0.connectionNotification("tree-map", "Apriori");
      associator0.connectionNotification("tree-map", (Object) null);
      assertEquals("weka.gui.beans.Associator[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", associator0.toString());
      assertEquals(1, associator0.getComponentCount());
      assertEquals("Apriori", associator0.getCustomName());
  }

  @Test
  public void test24()  throws Throwable  {
      Associator associator0 = new Associator();
      assertNotNull(associator0);
      
      boolean boolean0 = associator0.isBusy();
      assertEquals(false, boolean0);
      assertEquals("Apriori", associator0.getCustomName());
      assertEquals("weka.gui.beans.Associator[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", associator0.toString());
      assertEquals(1, associator0.countComponents());
  }

  @Test
  public void test25()  throws Throwable  {
      Associator associator0 = new Associator();
      assertNotNull(associator0);
      
      associator0.stop();
      assertEquals("weka.gui.beans.Associator[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", associator0.toString());
      assertEquals(1, associator0.countComponents());
      assertEquals("Apriori", associator0.getCustomName());
      assertEquals(1, associator0.getComponentCount());
  }

  @Test
  public void test26()  throws Throwable  {
      Associator associator0 = new Associator();
      assertNotNull(associator0);
      
      Enumeration<Object> enumeration0 = associator0.enumerateRequests();
      assertEquals("weka.gui.beans.Associator[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", associator0.toString());
      assertEquals(1, associator0.countComponents());
      assertNotNull(enumeration0);
      assertEquals(false, enumeration0.hasMoreElements());
      assertEquals("Apriori", associator0.getCustomName());
  }

  @Test
  public void test27()  throws Throwable  {
      Associator associator0 = new Associator();
      assertNotNull(associator0);
      
      // Undeclared exception!
      try {
        associator0.performRequest("P`xt");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * P`xt not supported (Associator)
         */
      }
  }

  @Test
  public void test28()  throws Throwable  {
      Associator associator0 = new Associator();
      assertNotNull(associator0);
      
      Instances instances0 = associator0.getStructure("5-H/Cxc6}{nXQ");
      assertEquals("weka.gui.beans.Associator[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", associator0.toString());
      assertEquals("Apriori", associator0.getCustomName());
      assertNull(instances0);
      assertEquals(1, associator0.countComponents());
  }

  @Test
  public void test29()  throws Throwable  {
      Associator associator0 = new Associator();
      assertNotNull(associator0);
      
      Instances instances0 = associator0.getStructure("text");
      assertEquals("Apriori", associator0.getCustomName());
      assertNotNull(instances0);
      assertEquals("@relation TextEvent\n\n@attribute Title string\n@attribute Text string\n\n@data\n", instances0.toString());
      assertEquals("weka.gui.beans.Associator[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", associator0.toString());
      assertEquals(1, associator0.countComponents());
  }

  @Test
  public void test30()  throws Throwable  {
      Associator associator0 = new Associator();
      assertNotNull(associator0);
      
      boolean boolean0 = associator0.eventGeneratable("weka.classifiers.trees.RandomTree");
      assertEquals("Apriori", associator0.getCustomName());
      assertEquals(1, associator0.getComponentCount());
      assertEquals(true, boolean0);
      assertEquals("weka.gui.beans.Associator[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", associator0.toString());
  }
}
