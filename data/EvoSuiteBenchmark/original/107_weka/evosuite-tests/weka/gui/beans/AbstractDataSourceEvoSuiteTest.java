/*
 * This file was automatically generated by EvoSuite
 */

package weka.gui.beans;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.awt.Component;
import java.beans.PropertyChangeListener;
import java.beans.VetoableChangeListener;
import java.beans.beancontext.BeanContext;
import java.beans.beancontext.BeanContextServicesSupport;
import javax.swing.plaf.basic.BasicLabelUI;
import org.junit.BeforeClass;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.DataSourceListener;
import weka.gui.beans.Filter;
import weka.gui.beans.FlowByExpression;
import weka.gui.beans.InstanceListener;
import weka.gui.beans.Loader;
import weka.gui.beans.SubstringLabeler;
import weka.gui.beans.TextViewer;

@RunWith(EvoSuiteRunner.class)
public class AbstractDataSourceEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Loader loader0 = new Loader();
      loader0.addDataSourceListener((DataSourceListener) null);
      assertEquals(Component.BaselineResizeBehavior.OTHER, loader0.getBaselineResizeBehavior());
  }

  @Test
  public void test1()  throws Throwable  {
      Loader loader0 = new Loader();
      assertNotNull(loader0);
      
      BeanVisual beanVisual0 = loader0.getVisual();
      assertEquals("weka/gui/beans/icons/DefaultDataSource.gif", beanVisual0.getIconPath());
      assertNotNull(beanVisual0);
      assertEquals("weka/gui/beans/icons/DefaultDataSource_animated.gif", beanVisual0.getAnimatedIconPath());
      assertEquals("weka.gui.beans.BeanVisual[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=java.awt.Dimension[width=67,height=68],minimumSize=java.awt.Dimension[width=67,height=68],preferredSize=java.awt.Dimension[width=67,height=68]]", beanVisual0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      Loader loader0 = new Loader();
      BeanContextServicesSupport beanContextServicesSupport0 = new BeanContextServicesSupport();
      loader0.setBeanContext((BeanContext) beanContextServicesSupport0);
      assertEquals(true, loader0.isOpaque());
  }

  @Test
  public void test3()  throws Throwable  {
      Loader loader0 = new Loader();
      BeanContextServicesSupport beanContextServicesSupport0 = new BeanContextServicesSupport();
      loader0.removeVetoableChangeListener("or", (VetoableChangeListener) beanContextServicesSupport0);
      assertEquals(false, beanContextServicesSupport0.needsGui());
  }

  @Test
  public void test4()  throws Throwable  {
      Loader loader0 = new Loader();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      loader0.removeInstanceListener((InstanceListener) substringLabeler0);
      assertEquals(true, substringLabeler0.isFontSet());
  }

  @Test
  public void test5()  throws Throwable  {
      Loader loader0 = new Loader();
      BeanContext beanContext0 = loader0.getBeanContext();
      assertNull(beanContext0);
  }

  @Test
  public void test6()  throws Throwable  {
      Loader loader0 = new Loader();
      BeanContextServicesSupport beanContextServicesSupport0 = new BeanContextServicesSupport();
      loader0.removePropertyChangeListener("55!d3cxp+838]=t&FW1", (PropertyChangeListener) beanContextServicesSupport0);
      assertEquals(0, loader0.getDebugGraphicsOptions());
  }

  @Test
  public void test7()  throws Throwable  {
      Loader loader0 = new Loader();
      TextViewer textViewer0 = new TextViewer();
      loader0.removeDataSourceListener((DataSourceListener) textViewer0);
      assertEquals(false, textViewer0.isShowing());
  }

  @Test
  public void test8()  throws Throwable  {
      Loader loader0 = new Loader();
      Filter filter0 = new Filter();
      loader0.addInstanceListener((InstanceListener) filter0);
      assertEquals(false, loader0.isFocusTraversalPolicySet());
  }

  @Test
  public void test9()  throws Throwable  {
      Loader loader0 = new Loader();
      BasicLabelUI basicLabelUI0 = new BasicLabelUI();
      loader0.addPropertyChangeListener("", (PropertyChangeListener) basicLabelUI0);
      assertEquals(false, loader0.getInheritsPopupMenu());
  }

  @Test
  public void test10()  throws Throwable  {
      Loader loader0 = new Loader();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      BeanVisual beanVisual0 = flowByExpression0.getVisual();
      loader0.setVisual(beanVisual0);
      assertEquals(false, loader0.isPaintingTile());
  }

  @Test
  public void test11()  throws Throwable  {
      Loader loader0 = new Loader();
      loader0.addVetoableChangeListener(">'g*)WQvtSO`-|,34O|", (VetoableChangeListener) null);
      assertEquals(true, loader0.isDoubleBuffered());
  }
}
