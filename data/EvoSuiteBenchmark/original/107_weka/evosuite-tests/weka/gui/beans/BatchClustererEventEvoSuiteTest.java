/*
 * This file was automatically generated by EvoSuite
 */

package weka.gui.beans;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import weka.clusterers.Clusterer;
import weka.clusterers.FilteredClusterer;
import weka.clusterers.MakeDensityBasedClusterer;
import weka.core.Instances;
import weka.gui.beans.BatchClustererEvent;
import weka.gui.beans.DataSetEvent;

@RunWith(EvoSuiteRunner.class)
public class BatchClustererEventEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      BatchClustererEvent batchClustererEvent0 = new BatchClustererEvent((Object) "/mnt/fastdata/ac1gf/SF110/dist/107_weka/Class for running an arbitrary clusterer on data that has been passed through an arbitrary filter. Like the clusterer, the structure of the filter is based exclusively on the training data and test instances will be processed by the filter without changing their structure.", (Clusterer) filteredClusterer0, (DataSetEvent) null, (-29), (-29), 0);
      int int0 = batchClustererEvent0.getSetNumber();
      assertEquals(-29, batchClustererEvent0.getMaxSetNumber());
      assertEquals(0, batchClustererEvent0.getTestOrTrain());
      assertEquals((-29), int0);
  }

  @Test
  public void test1()  throws Throwable  {
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      BatchClustererEvent batchClustererEvent0 = new BatchClustererEvent((Object) "/mnt/fastdata/ac1gf/SF110/dist/107_weka/Class for running an arbitrary clusterer on data that has been passed through an arbitrary filter. Like the clusterer, the structure of the filter is based exclusively on the training data and test instances will be processed by the filter without changing their structure.", (Clusterer) filteredClusterer0, (DataSetEvent) null, (-29), (-29), 0);
      int int0 = batchClustererEvent0.getTestOrTrain();
      assertEquals(-29, batchClustererEvent0.getMaxSetNumber());
      assertEquals(0, int0);
      assertEquals(-29, batchClustererEvent0.getSetNumber());
  }

  @Test
  public void test2()  throws Throwable  {
      MakeDensityBasedClusterer makeDensityBasedClusterer0 = new MakeDensityBasedClusterer();
      BatchClustererEvent batchClustererEvent0 = new BatchClustererEvent((Object) "[]", (Clusterer) makeDensityBasedClusterer0, (DataSetEvent) null, 9, 0, 0);
      batchClustererEvent0.getTestSet();
      assertEquals(0, batchClustererEvent0.getMaxSetNumber());
      assertEquals(0, batchClustererEvent0.getTestOrTrain());
      assertEquals(9, batchClustererEvent0.getSetNumber());
  }

  @Test
  public void test3()  throws Throwable  {
      MakeDensityBasedClusterer makeDensityBasedClusterer0 = new MakeDensityBasedClusterer();
      BatchClustererEvent batchClustererEvent0 = new BatchClustererEvent((Object) "[]", (Clusterer) makeDensityBasedClusterer0, (DataSetEvent) null, 9, 0, 0);
      int int0 = batchClustererEvent0.getMaxSetNumber();
      assertEquals(0, batchClustererEvent0.getTestOrTrain());
      assertEquals(9, batchClustererEvent0.getSetNumber());
      assertEquals(0, int0);
  }

  @Test
  public void test4()  throws Throwable  {
      MakeDensityBasedClusterer makeDensityBasedClusterer0 = new MakeDensityBasedClusterer();
      DataSetEvent dataSetEvent0 = new DataSetEvent((Object) "8034", (Instances) null);
      BatchClustererEvent batchClustererEvent0 = new BatchClustererEvent((Object) "0.0", (Clusterer) makeDensityBasedClusterer0, dataSetEvent0, (-1), 500, 500);
      MakeDensityBasedClusterer makeDensityBasedClusterer1 = (MakeDensityBasedClusterer)batchClustererEvent0.getClusterer();
      assertEquals(-1, batchClustererEvent0.getSetNumber());
      assertNotNull(makeDensityBasedClusterer1);
      assertEquals(500, batchClustererEvent0.getMaxSetNumber());
      assertEquals(1, batchClustererEvent0.getTestOrTrain());
  }
}
