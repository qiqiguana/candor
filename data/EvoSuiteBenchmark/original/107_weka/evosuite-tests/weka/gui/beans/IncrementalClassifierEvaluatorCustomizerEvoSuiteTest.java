/*
 * This file was automatically generated by EvoSuite
 */

package weka.gui.beans;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.awt.Window;
import java.beans.PropertyChangeListener;
import org.junit.BeforeClass;
import weka.gui.beans.BeanCustomizer;
import weka.gui.beans.IncrementalClassifierEvaluatorCustomizer;

@RunWith(EvoSuiteRunner.class)
public class IncrementalClassifierEvaluatorCustomizerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      IncrementalClassifierEvaluatorCustomizer incrementalClassifierEvaluatorCustomizer0 = new IncrementalClassifierEvaluatorCustomizer();
      assertNotNull(incrementalClassifierEvaluatorCustomizer0);
      
      incrementalClassifierEvaluatorCustomizer0.addPropertyChangeListener((PropertyChangeListener) null);
      assertEquals(3, incrementalClassifierEvaluatorCustomizer0.getComponentCount());
      assertEquals(3, incrementalClassifierEvaluatorCustomizer0.countComponents());
  }

  @Test
  public void test1()  throws Throwable  {
      IncrementalClassifierEvaluatorCustomizer incrementalClassifierEvaluatorCustomizer0 = new IncrementalClassifierEvaluatorCustomizer();
      assertNotNull(incrementalClassifierEvaluatorCustomizer0);
      
      incrementalClassifierEvaluatorCustomizer0.setParentWindow((Window) null);
      assertEquals(3, incrementalClassifierEvaluatorCustomizer0.countComponents());
      assertEquals(3, incrementalClassifierEvaluatorCustomizer0.getComponentCount());
  }

  @Test
  public void test2()  throws Throwable  {
      IncrementalClassifierEvaluatorCustomizer incrementalClassifierEvaluatorCustomizer0 = new IncrementalClassifierEvaluatorCustomizer();
      assertNotNull(incrementalClassifierEvaluatorCustomizer0);
      
      // Undeclared exception!
      try {
        incrementalClassifierEvaluatorCustomizer0.customizerClosing();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      IncrementalClassifierEvaluatorCustomizer incrementalClassifierEvaluatorCustomizer0 = new IncrementalClassifierEvaluatorCustomizer();
      assertNotNull(incrementalClassifierEvaluatorCustomizer0);
      
      incrementalClassifierEvaluatorCustomizer0.setModifiedListener((BeanCustomizer.ModifyListener) null);
      assertEquals(3, incrementalClassifierEvaluatorCustomizer0.countComponents());
      assertEquals(3, incrementalClassifierEvaluatorCustomizer0.getComponentCount());
  }

  @Test
  public void test4()  throws Throwable  {
      IncrementalClassifierEvaluatorCustomizer incrementalClassifierEvaluatorCustomizer0 = new IncrementalClassifierEvaluatorCustomizer();
      assertNotNull(incrementalClassifierEvaluatorCustomizer0);
      
      incrementalClassifierEvaluatorCustomizer0.removePropertyChangeListener((PropertyChangeListener) null);
      assertEquals(3, incrementalClassifierEvaluatorCustomizer0.countComponents());
      assertEquals(3, incrementalClassifierEvaluatorCustomizer0.getComponentCount());
  }

  @Test
  public void test5()  throws Throwable  {
      IncrementalClassifierEvaluatorCustomizer incrementalClassifierEvaluatorCustomizer0 = new IncrementalClassifierEvaluatorCustomizer();
      assertNotNull(incrementalClassifierEvaluatorCustomizer0);
      
      // Undeclared exception!
      try {
        incrementalClassifierEvaluatorCustomizer0.setObject((Object) "Whether if the widths of the KDTree node should be normalized by the width of the universe or not. Where, width of the node is the range of the split attribute based on the instances in that node, and width of the universe is the range of the split attribute based on all the instances (default: false).");
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * java.lang.String cannot be cast to weka.gui.beans.IncrementalClassifierEvaluator
         */
      }
  }
}
