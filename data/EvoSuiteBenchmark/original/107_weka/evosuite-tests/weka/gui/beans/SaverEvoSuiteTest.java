/*
 * This file was automatically generated by EvoSuite
 */

package weka.gui.beans;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import weka.core.Instances;
import weka.core.converters.ArffSaver;
import weka.core.converters.C45Saver;
import weka.core.converters.MatlabSaver;
import weka.core.converters.TextDirectoryLoader;
import weka.gui.beans.InstanceEvent;
import weka.gui.beans.Saver;
import weka.gui.beans.TestSetEvent;
import weka.gui.beans.TrainingSetEvent;

@RunWith(EvoSuiteRunner.class)
public class SaverEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      Saver saver0 = new Saver();
      assertNotNull(saver0);
      
      boolean boolean0 = saver0.getRelationNameForFilename();
      assertEquals(true, boolean0);
      assertEquals("ArffSaver", saver0.getCustomName());
  }

  @Test
  public void test1()  throws Throwable  {
      Saver saver0 = new Saver();
      assertNotNull(saver0);
      
      String string0 = saver0.getCustomName();
      assertEquals(true, saver0.getRelationNameForFilename());
      assertEquals("ArffSaver", string0);
      assertNotNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          Saver saver0 = new Saver();
          assertNotNull(saver0);
          
          TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
          Instances instances0 = textDirectoryLoader0.getDataSet();
          TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent((Object) ",U1TE", instances0, (-1808), (-1133), (-1133), 1752);
          saver0.acceptTrainingSet(trainingSetEvent0);
          assertEquals("ArffSaver", saver0.getCustomName());
          assertEquals(false, saver0.isBusy());
          assertEquals(true, saver0.getRelationNameForFilename());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
      Saver saver0 = new Saver();
      assertNotNull(saver0);
      
      ArffSaver arffSaver0 = (ArffSaver)saver0.getWrappedAlgorithm();
      assertNotNull(arffSaver0);
      assertEquals(true, saver0.getRelationNameForFilename());
      assertEquals("ArffSaver", saver0.getCustomName());
  }

  @Test
  public void test4()  throws Throwable  {
      Saver saver0 = new Saver();
      assertEquals("ArffSaver", saver0.getCustomName());
      assertNotNull(saver0);
      
      saver0.setCustomName("C45Saver");
      assertEquals("C45Saver", saver0.getCustomName());
  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          Saver saver0 = new Saver();
          assertNotNull(saver0);
          
          saver0.setRelationNameForFilename(false);
          TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
          Instances instances0 = textDirectoryLoader0.getDataSet();
          TestSetEvent testSetEvent0 = new TestSetEvent((Object) "Sets the class index (\"first\" and \"last\" are valid values)", instances0);
          saver0.acceptTestSet(testSetEvent0);
          assertEquals(false, saver0.getRelationNameForFilename());
          assertEquals("ArffSaver", saver0.getCustomName());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test6()  throws Throwable  {
      Saver saver0 = new Saver();
      assertNotNull(saver0);
      
      String string0 = saver0.globalInfo();
      assertEquals(true, saver0.getRelationNameForFilename());
      assertEquals("<html><font color=blue>Writes to a destination that is in arff (attribute relation file format) format</font><br><br> The data can be compressed with gzip in order to save space.<br></html>", string0);
      assertEquals("ArffSaver", saver0.getCustomName());
      assertNotNull(string0);
  }

  @Test
  public void test7()  throws Throwable  {
      Saver saver0 = new Saver();
      assertNotNull(saver0);
      
      boolean boolean0 = saver0.isBusy();
      assertEquals("ArffSaver", saver0.getCustomName());
      assertEquals(false, boolean0);
      assertEquals(true, saver0.getRelationNameForFilename());
  }

  @Test
  public void test8()  throws Throwable  {
      Saver saver0 = new Saver();
      assertNotNull(saver0);
      
      C45Saver c45Saver0 = new C45Saver();
      saver0.setSaverTemplate((weka.core.converters.Saver) c45Saver0);
      assertEquals("<html><font color=blue>Writes to a destination that is in the format used by the C4</font><br><br>5 algorithm.<br>Therefore it outputs a names and a data file.<br></html>", saver0.globalInfo());
      assertEquals("C45Saver", saver0.getCustomName());
  }

  @Test
  public void test9()  throws Throwable  {
      Saver saver0 = new Saver();
      assertNotNull(saver0);
      
      InstanceEvent instanceEvent0 = new InstanceEvent((Object) "PanelUI", (Instances) null);
      instanceEvent0.setStatus((-1827));
      saver0.acceptInstance(instanceEvent0);
      assertEquals(true, saver0.getRelationNameForFilename());
      assertEquals("ArffSaver", saver0.getCustomName());
  }

  @Test
  public void test10()  throws Throwable  {
      Saver saver0 = new Saver();
      assertNotNull(saver0);
      
      InstanceEvent instanceEvent0 = new InstanceEvent((Object) "Hierarchical clustering class.\nImplements a number of classic agglomorative (i.e. bottom up) hierarchical clustering methodsbased on .");
      // Undeclared exception!
      try {
        saver0.acceptInstance(instanceEvent0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Saver saver0 = new Saver();
      assertNotNull(saver0);
      
      MatlabSaver matlabSaver0 = new MatlabSaver();
      saver0.setWrappedAlgorithm((Object) matlabSaver0);
      assertEquals("MatlabSaver", saver0.getCustomName());
      assertEquals("<html><font color=blue>Writes Matlab ASCII files, in single or double precision format</font><br></html>", saver0.globalInfo());
  }

  @Test
  public void test12()  throws Throwable  {
      Saver saver0 = new Saver();
      assertNotNull(saver0);
      
      // Undeclared exception!
      try {
        saver0.setWrappedAlgorithm((Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      Saver saver0 = new Saver();
      assertNotNull(saver0);
      
      saver0.stop();
      assertEquals("ArffSaver", saver0.getCustomName());
      assertEquals(true, saver0.getRelationNameForFilename());
  }
}
