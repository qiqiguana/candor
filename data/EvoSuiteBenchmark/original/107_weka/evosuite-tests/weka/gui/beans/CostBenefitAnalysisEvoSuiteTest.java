/*
 * This file was automatically generated by EvoSuite
 */

package weka.gui.beans;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.beans.EventSetDescriptor;
import java.beans.PropertyVetoException;
import java.beans.VetoableChangeListener;
import java.beans.beancontext.BeanContext;
import java.beans.beancontext.BeanContextServicesSupport;
import java.beans.beancontext.BeanContextSupport;
import java.util.Enumeration;
import java.util.EventObject;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import weka.core.Attribute;
import weka.gui.Logger;
import weka.gui.SysErrLog;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.CostBenefitAnalysis;
import weka.gui.beans.ThresholdDataEvent;
import weka.gui.visualize.PlotData2D;

@RunWith(EvoSuiteRunner.class)
public class CostBenefitAnalysisEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      assertNotNull(costBenefitAnalysis0);
      
      costBenefitAnalysis0.appearanceDesign();
      assertEquals(1, costBenefitAnalysis0.countComponents());
      assertEquals("weka.gui.beans.CostBenefitAnalysis[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", costBenefitAnalysis0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      assertNotNull(costBenefitAnalysis0);
      
      BeanVisual beanVisual0 = costBenefitAnalysis0.getVisual();
      assertNotNull(beanVisual0);
      
      costBenefitAnalysis0.setVisual(beanVisual0);
      assertEquals("CostBenefitAnalysis", beanVisual0.getText());
      assertEquals("weka/gui/beans/icons/ModelPerformanceChart_animated.gif", beanVisual0.getAnimatedIconPath());
      assertEquals("weka/gui/beans/icons/ModelPerformanceChart.gif", beanVisual0.getIconPath());
      assertEquals("CostBenefitAnalysis", costBenefitAnalysis0.getCustomName());
  }

  @Test
  public void test2()  throws Throwable  {
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      assertNotNull(costBenefitAnalysis0);
      
      costBenefitAnalysis0.setCustomName("f4L?nIwi]1`xi");
      assertEquals("f4L?nIwi]1`xi", costBenefitAnalysis0.getCustomName());
  }

  @Test
  public void test3()  throws Throwable  {
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      assertNotNull(costBenefitAnalysis0);
      
      BeanContextSupport beanContextSupport0 = new BeanContextSupport();
      costBenefitAnalysis0.removeVetoableChangeListener("-4.58: ", (VetoableChangeListener) beanContextSupport0);
      assertEquals("CostBenefitAnalysis", costBenefitAnalysis0.getCustomName());
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
          assertNotNull(costBenefitAnalysis0);
          
          // Undeclared exception!
          try {
            costBenefitAnalysis0.appearanceFinal();
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission /home/ac1gf write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.canWrite(File.java:711)
             * sun.awt.shell.ShellFolder.canWrite(ShellFolder.java:284)
             * sun.swing.FilePane.canWrite(FilePane.java:1817)
             * sun.swing.FilePane.doDirectoryChanged(FilePane.java:1470)
             * sun.swing.FilePane.propertyChange(FilePane.java:1516)
             * java.beans.PropertyChangeSupport.firePropertyChange(PropertyChangeSupport.java:339)
             * java.beans.PropertyChangeSupport.firePropertyChange(PropertyChangeSupport.java:276)
             * java.awt.Component.firePropertyChange(Component.java:8154)
             * javax.swing.JFileChooser.setCurrentDirectory(JFileChooser.java:568)
             * javax.swing.JFileChooser.<init>(JFileChooser.java:334)
             * javax.swing.JFileChooser.<init>(JFileChooser.java:286)
             * weka.gui.visualize.PrintableComponent.initFileChooser(PrintableComponent.java:267)
             * weka.gui.visualize.PrintableComponent.<init>(PrintableComponent.java:150)
             * weka.gui.visualize.PrintablePanel.<init>(PrintablePanel.java:54)
             * weka.gui.visualize.VisualizePanel.<init>(VisualizePanel.java:1856)
             * weka.gui.beans.CostBenefitAnalysis$AnalysisPanel.<init>(CostBenefitAnalysis.java:132)
             * weka.gui.beans.CostBenefitAnalysis.setUpFinal(CostBenefitAnalysis.java:1097)
             * weka.gui.beans.CostBenefitAnalysis.appearanceFinal(CostBenefitAnalysis.java:1092)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      assertNotNull(costBenefitAnalysis0);
      
      // Undeclared exception!
      try {
        costBenefitAnalysis0.connectionAllowed((EventSetDescriptor) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      assertNotNull(costBenefitAnalysis0);
      
      SysErrLog sysErrLog0 = new SysErrLog();
      costBenefitAnalysis0.setLog((Logger) sysErrLog0);
      assertEquals("CostBenefitAnalysis", costBenefitAnalysis0.getCustomName());
  }

  @Test
  public void test7()  throws Throwable  {
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      assertNotNull(costBenefitAnalysis0);
      
      costBenefitAnalysis0.getBeanContext();
      assertEquals("CostBenefitAnalysis", costBenefitAnalysis0.getCustomName());
  }

  @Test
  public void test8()  throws Throwable  {
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      assertNotNull(costBenefitAnalysis0);
      
      String string0 = costBenefitAnalysis0.getCustomName();
      assertNotNull(string0);
      assertEquals("CostBenefitAnalysis", string0);
  }

  @Test
  public void test9()  throws Throwable  {
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      assertNotNull(costBenefitAnalysis0);
      
      costBenefitAnalysis0.stop();
      assertEquals("CostBenefitAnalysis", costBenefitAnalysis0.getCustomName());
  }

  @Test
  public void test10()  throws Throwable  {
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      assertNotNull(costBenefitAnalysis0);
      
      BeanContextServicesSupport beanContextServicesSupport0 = new BeanContextServicesSupport();
      costBenefitAnalysis0.addVetoableChangeListener("ae63{", (VetoableChangeListener) beanContextServicesSupport0);
      assertEquals("CostBenefitAnalysis", costBenefitAnalysis0.getCustomName());
  }

  @Test
  public void test11()  throws Throwable  {
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      assertNotNull(costBenefitAnalysis0);
      
      List<EventObject> list0 = costBenefitAnalysis0.retrieveHeadlessEvents();
      assertEquals("CostBenefitAnalysis", costBenefitAnalysis0.getCustomName());
      assertNotNull(list0);
  }

  @Test
  public void test12()  throws Throwable  {
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      assertNotNull(costBenefitAnalysis0);
      
      String string0 = costBenefitAnalysis0.globalInfo();
      assertEquals("Visualize performance charts (such as ROC).", string0);
      assertEquals("CostBenefitAnalysis", costBenefitAnalysis0.getCustomName());
  }

  @Test
  public void test13()  throws Throwable  {
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      assertNotNull(costBenefitAnalysis0);
      
      boolean boolean0 = costBenefitAnalysis0.isBusy();
      assertEquals(false, boolean0);
      assertEquals("CostBenefitAnalysis", costBenefitAnalysis0.getCustomName());
  }

  @Test
  public void test14()  throws Throwable  {
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      assertNotNull(costBenefitAnalysis0);
      
      costBenefitAnalysis0.acceptDataSet((ThresholdDataEvent) null);
      assertEquals("CostBenefitAnalysis", costBenefitAnalysis0.getCustomName());
  }

  @Test
  public void test15()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
          assertNotNull(costBenefitAnalysis0);
          
          try {
            costBenefitAnalysis0.setCurveData((PlotData2D) null, (Attribute) null);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission /home/ac1gf write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.canWrite(File.java:711)
             * sun.awt.shell.ShellFolder.canWrite(ShellFolder.java:284)
             * sun.swing.FilePane.canWrite(FilePane.java:1817)
             * sun.swing.FilePane.doDirectoryChanged(FilePane.java:1470)
             * sun.swing.FilePane.propertyChange(FilePane.java:1516)
             * java.beans.PropertyChangeSupport.firePropertyChange(PropertyChangeSupport.java:339)
             * java.beans.PropertyChangeSupport.firePropertyChange(PropertyChangeSupport.java:276)
             * java.awt.Component.firePropertyChange(Component.java:8154)
             * javax.swing.JFileChooser.setCurrentDirectory(JFileChooser.java:568)
             * javax.swing.JFileChooser.<init>(JFileChooser.java:334)
             * javax.swing.JFileChooser.<init>(JFileChooser.java:286)
             * weka.gui.visualize.PrintableComponent.initFileChooser(PrintableComponent.java:267)
             * weka.gui.visualize.PrintableComponent.<init>(PrintableComponent.java:150)
             * weka.gui.visualize.PrintablePanel.<init>(PrintablePanel.java:54)
             * weka.gui.visualize.VisualizePanel.<init>(VisualizePanel.java:1856)
             * weka.gui.beans.CostBenefitAnalysis$AnalysisPanel.<init>(CostBenefitAnalysis.java:132)
             * weka.gui.beans.CostBenefitAnalysis.setCurveData(CostBenefitAnalysis.java:1015)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test16()  throws Throwable  {
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      assertNotNull(costBenefitAnalysis0);
      
      Enumeration<Object> enumeration0 = costBenefitAnalysis0.enumerateRequests();
      assertEquals("CostBenefitAnalysis", costBenefitAnalysis0.getCustomName());
      assertNotNull(enumeration0);
  }

  @Test
  public void test17()  throws Throwable  {
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      assertNotNull(costBenefitAnalysis0);
      
      // Undeclared exception!
      try {
        costBenefitAnalysis0.performRequest("");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         *  not supported (Cost/Benefit Analysis
         */
      }
  }

  @Test
  public void test18()  throws Throwable  {
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      assertNotNull(costBenefitAnalysis0);
      
      BeanContextSupport beanContextSupport0 = new BeanContextSupport();
      costBenefitAnalysis0.setBeanContext((BeanContext) beanContextSupport0);
      assertEquals("CostBenefitAnalysis", costBenefitAnalysis0.getCustomName());
      assertEquals("weka.gui.beans.CostBenefitAnalysis[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", costBenefitAnalysis0.toString());
      assertEquals(0, costBenefitAnalysis0.getComponentCount());
  }

  @Test
  public void test19()  throws Throwable  {
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      assertNotNull(costBenefitAnalysis0);
      
      costBenefitAnalysis0.connectionNotification("", "caret-backward");
      costBenefitAnalysis0.connectionNotification((String) null, "contentAreaFilled");
      assertEquals("CostBenefitAnalysis", costBenefitAnalysis0.getCustomName());
  }

  @Test
  public void test20()  throws Throwable  {
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      assertNotNull(costBenefitAnalysis0);
      
      costBenefitAnalysis0.disconnectionNotification("", "DOWN");
      assertEquals("CostBenefitAnalysis", costBenefitAnalysis0.getCustomName());
  }

  @Test
  public void test21()  throws Throwable  {
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      assertNotNull(costBenefitAnalysis0);
      
      costBenefitAnalysis0.disconnectionNotification("9U5", (Object) null);
      assertEquals("CostBenefitAnalysis", costBenefitAnalysis0.getCustomName());
  }

  @Test
  public void test22()  throws Throwable  {
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      assertNotNull(costBenefitAnalysis0);
      
      costBenefitAnalysis0.processHeadlessEvents((List<EventObject>) null);
      assertEquals("CostBenefitAnalysis", costBenefitAnalysis0.getCustomName());
  }
}
