/*
 * This file was automatically generated by EvoSuite
 */

package weka.gui.beans;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.ArrayList;
import org.junit.BeforeClass;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.gui.beans.TestSetEvent;

@RunWith(EvoSuiteRunner.class)
public class TestSetEventEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      TestSetEvent testSetEvent0 = new TestSetEvent((Object) "relational", (Instances) null);
      assertNotNull(testSetEvent0);
      
      int int0 = testSetEvent0.getSetNumber();
      assertEquals(0, int0);
      assertEquals(1, testSetEvent0.getRunNumber());
      assertEquals(1, testSetEvent0.getMaxRunNumber());
  }

  @Test
  public void test1()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("[]", arrayList0, 1705);
      TestSetEvent testSetEvent0 = new TestSetEvent((Object) "[]", instances0, 1705, 1705, 1705, 1705);
      assertNotNull(testSetEvent0);
      
      boolean boolean0 = testSetEvent0.isStructureOnly();
      assertEquals(1705, testSetEvent0.getMaxSetNumber());
      assertEquals(1705, testSetEvent0.getSetNumber());
      assertEquals(1705, testSetEvent0.getRunNumber());
      assertEquals(1705, testSetEvent0.getMaxRunNumber());
      assertEquals(true, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      TestSetEvent testSetEvent0 = new TestSetEvent((Object) "relational", (Instances) null);
      assertNotNull(testSetEvent0);
      
      int int0 = testSetEvent0.getMaxRunNumber();
      assertEquals(1, testSetEvent0.getRunNumber());
      assertEquals(1, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      TestSetEvent testSetEvent0 = new TestSetEvent((Object) "/", (Instances) null, 0, 0);
      assertNotNull(testSetEvent0);
      
      testSetEvent0.getTestSet();
      assertEquals(0, testSetEvent0.getMaxSetNumber());
      assertEquals(1, testSetEvent0.getMaxRunNumber());
      assertEquals(1, testSetEvent0.getRunNumber());
      assertEquals(0, testSetEvent0.getSetNumber());
  }

  @Test
  public void test4()  throws Throwable  {
      TestSetEvent testSetEvent0 = new TestSetEvent((Object) "relational", (Instances) null);
      assertNotNull(testSetEvent0);
      
      int int0 = testSetEvent0.getMaxSetNumber();
      assertEquals(0, int0);
      assertEquals(1, testSetEvent0.getRunNumber());
      assertEquals(1, testSetEvent0.getMaxRunNumber());
  }

  @Test
  public void test5()  throws Throwable  {
      TestSetEvent testSetEvent0 = new TestSetEvent((Object) "/", (Instances) null, 0, 0);
      assertNotNull(testSetEvent0);
      
      int int0 = testSetEvent0.getRunNumber();
      assertEquals(1, int0);
      assertEquals(0, testSetEvent0.getMaxSetNumber());
      assertEquals(1, testSetEvent0.getMaxRunNumber());
      assertEquals(0, testSetEvent0.getSetNumber());
  }

  @Test
  public void test6()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("[]", arrayList0, 1705);
      double[] doubleArray0 = new double[6];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((double) 1705, doubleArray0);
      instances0.add((Instance) binarySparseInstance0);
      TestSetEvent testSetEvent0 = new TestSetEvent((Object) "[]", instances0, 1705, 1705);
      assertNotNull(testSetEvent0);
      assertEquals(1705, testSetEvent0.getMaxSetNumber());
      assertEquals(1, testSetEvent0.getMaxRunNumber());
      assertEquals(1, testSetEvent0.getRunNumber());
      assertEquals(false, testSetEvent0.isStructureOnly());
      assertEquals(1705, testSetEvent0.getSetNumber());
  }
}
