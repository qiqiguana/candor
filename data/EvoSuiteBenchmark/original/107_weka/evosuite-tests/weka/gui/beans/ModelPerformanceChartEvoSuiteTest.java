/*
 * This file was automatically generated by EvoSuite
 */

package weka.gui.beans;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.beans.PropertyChangeListener;
import java.beans.VetoableChangeListener;
import java.beans.beancontext.BeanContext;
import java.beans.beancontext.BeanContextServicesSupport;
import java.util.Enumeration;
import java.util.EventObject;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import weka.core.Environment;
import weka.gui.Logger;
import weka.gui.SysErrLog;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.Clusterer;
import weka.gui.beans.ImageListener;
import weka.gui.beans.ImageSaver;
import weka.gui.beans.ModelPerformanceChart;
import weka.gui.beans.ThresholdDataEvent;
import weka.gui.beans.VisualizableErrorEvent;
import weka.gui.visualize.PlotData2D;

@RunWith(EvoSuiteRunner.class)
public class ModelPerformanceChartEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      assertNotNull(modelPerformanceChart0);
      
      boolean boolean0 = modelPerformanceChart0.isBusy();
      assertEquals("400", modelPerformanceChart0.getOffscreenHeight());
      assertEquals("Weka Chart Renderer", modelPerformanceChart0.getOffscreenRendererName());
      assertEquals("ModelPerformanceChart", modelPerformanceChart0.getCustomName());
      assertEquals("500", modelPerformanceChart0.getOffscreenWidth());
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      assertNotNull(modelPerformanceChart0);
      
      BeanContextServicesSupport beanContextServicesSupport0 = new BeanContextServicesSupport();
      modelPerformanceChart0.addPropertyChangeListener("WNNOOda|G<nQR5sRL", (PropertyChangeListener) beanContextServicesSupport0);
      assertEquals("ModelPerformanceChart", modelPerformanceChart0.getCustomName());
      assertEquals("500", modelPerformanceChart0.getOffscreenWidth());
      assertEquals("400", modelPerformanceChart0.getOffscreenHeight());
      assertEquals("Weka Chart Renderer", modelPerformanceChart0.getOffscreenRendererName());
  }

  @Test
  public void test2()  throws Throwable  {
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      assertNotNull(modelPerformanceChart0);
      
      modelPerformanceChart0.getBeanContext();
      assertEquals("400", modelPerformanceChart0.getOffscreenHeight());
      assertEquals("500", modelPerformanceChart0.getOffscreenWidth());
      assertEquals("ModelPerformanceChart", modelPerformanceChart0.getCustomName());
      assertEquals("Weka Chart Renderer", modelPerformanceChart0.getOffscreenRendererName());
  }

  @Test
  public void test3()  throws Throwable  {
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      assertNotNull(modelPerformanceChart0);
      
      modelPerformanceChart0.setOffscreenYAxis("S(Lj09`");
      assertEquals("S(Lj09`", modelPerformanceChart0.getOffscreenYAxis());
      assertEquals("ModelPerformanceChart", modelPerformanceChart0.getCustomName());
  }

  @Test
  public void test4()  throws Throwable  {
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      assertNotNull(modelPerformanceChart0);
      
      ImageSaver imageSaver0 = new ImageSaver();
      modelPerformanceChart0.removeImageListener((ImageListener) imageSaver0);
      assertEquals("400", modelPerformanceChart0.getOffscreenHeight());
      assertEquals("500", modelPerformanceChart0.getOffscreenWidth());
      assertEquals("ModelPerformanceChart", modelPerformanceChart0.getCustomName());
      assertEquals("Weka Chart Renderer", modelPerformanceChart0.getOffscreenRendererName());
  }

  @Test
  public void test5()  throws Throwable  {
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      assertNotNull(modelPerformanceChart0);
      
      modelPerformanceChart0.removeVetoableChangeListener(")dY% 4[_u@fcCQp}0z8", (VetoableChangeListener) null);
      assertEquals("Weka Chart Renderer", modelPerformanceChart0.getOffscreenRendererName());
      assertEquals("ModelPerformanceChart", modelPerformanceChart0.getCustomName());
      assertEquals("500", modelPerformanceChart0.getOffscreenWidth());
      assertEquals("400", modelPerformanceChart0.getOffscreenHeight());
  }

  @Test
  public void test6()  throws Throwable  {
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      assertNotNull(modelPerformanceChart0);
      
      String string0 = modelPerformanceChart0.getOffscreenWidth();
      assertEquals("400", modelPerformanceChart0.getOffscreenHeight());
      assertNotNull(string0);
      assertEquals("Weka Chart Renderer", modelPerformanceChart0.getOffscreenRendererName());
      assertEquals("500", string0);
      assertEquals("ModelPerformanceChart", modelPerformanceChart0.getCustomName());
  }

  @Test
  public void test7()  throws Throwable  {
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      assertNotNull(modelPerformanceChart0);
      
      List<EventObject> list0 = modelPerformanceChart0.retrieveHeadlessEvents();
      assertNotNull(list0);
      
      modelPerformanceChart0.processHeadlessEvents(list0);
      assertEquals("ModelPerformanceChart", modelPerformanceChart0.getCustomName());
      assertEquals("Weka Chart Renderer", modelPerformanceChart0.getOffscreenRendererName());
      assertEquals("500", modelPerformanceChart0.getOffscreenWidth());
      assertEquals("400", modelPerformanceChart0.getOffscreenHeight());
  }

  @Test
  public void test8()  throws Throwable  {
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      assertNotNull(modelPerformanceChart0);
      
      SysErrLog sysErrLog0 = new SysErrLog();
      modelPerformanceChart0.setLog((Logger) sysErrLog0);
      assertEquals("ModelPerformanceChart", modelPerformanceChart0.getCustomName());
      assertEquals("400", modelPerformanceChart0.getOffscreenHeight());
      assertEquals("Weka Chart Renderer", modelPerformanceChart0.getOffscreenRendererName());
      assertEquals("500", modelPerformanceChart0.getOffscreenWidth());
  }

  @Test
  public void test9()  throws Throwable  {
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      assertNotNull(modelPerformanceChart0);
      
      BeanVisual beanVisual0 = modelPerformanceChart0.getVisual();
      assertNotNull(beanVisual0);
      assertEquals("400", modelPerformanceChart0.getOffscreenHeight());
      assertEquals("weka/gui/beans/icons/ModelPerformanceChart_animated.gif", beanVisual0.getAnimatedIconPath());
      assertEquals("ModelPerformanceChart", modelPerformanceChart0.getCustomName());
      assertEquals("Weka Chart Renderer", modelPerformanceChart0.getOffscreenRendererName());
      assertEquals("500", modelPerformanceChart0.getOffscreenWidth());
      assertEquals("weka/gui/beans/icons/ModelPerformanceChart.gif", beanVisual0.getIconPath());
      assertEquals("weka.gui.beans.BeanVisual[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=java.awt.Dimension[width=67,height=68],minimumSize=java.awt.Dimension[width=67,height=68],preferredSize=java.awt.Dimension[width=67,height=68]]", beanVisual0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      assertNotNull(modelPerformanceChart0);
      
      modelPerformanceChart0.setOffscreenAdditionalOpts("h`GpG$Cy7aC[G");
      assertEquals("h`GpG$Cy7aC[G", modelPerformanceChart0.getOffscreenAdditionalOpts());
      assertEquals("ModelPerformanceChart", modelPerformanceChart0.getCustomName());
  }

  @Test
  public void test11()  throws Throwable  {
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      assertNotNull(modelPerformanceChart0);
      
      String string0 = modelPerformanceChart0.getOffscreenXAxis();
      assertEquals("", string0);
      assertEquals("500", modelPerformanceChart0.getOffscreenWidth());
      assertEquals("400", modelPerformanceChart0.getOffscreenHeight());
      assertEquals("Weka Chart Renderer", modelPerformanceChart0.getOffscreenRendererName());
      assertNotNull(string0);
      assertEquals("ModelPerformanceChart", modelPerformanceChart0.getCustomName());
  }

  @Test
  public void test12()  throws Throwable  {
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      assertNotNull(modelPerformanceChart0);
      
      modelPerformanceChart0.disconnectionNotification("java.awt.Canvas[canvas584,0,0,0x0,invalid]", "Implementing Euclidean distance (or similarity) function.\n\nOne object defines not one distance but the data model in which the distances between objects of that data model can be computed.\n\nAttention: For efficiency reasons the use of consistency checks (like are the data models of the two instances exactly the same), is low.\n\nFor more information, see:\n\nWikipedia. Euclidean distance. URL http://en.wikipedia.org/wiki/Euclidean_distance.");
      assertEquals("ModelPerformanceChart", modelPerformanceChart0.getCustomName());
      assertEquals("400", modelPerformanceChart0.getOffscreenHeight());
      assertEquals("Weka Chart Renderer", modelPerformanceChart0.getOffscreenRendererName());
      assertEquals("500", modelPerformanceChart0.getOffscreenWidth());
  }

  @Test
  public void test13()  throws Throwable  {
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      assertNotNull(modelPerformanceChart0);
      
      modelPerformanceChart0.addImageListener((ImageListener) null);
      assertEquals("ModelPerformanceChart", modelPerformanceChart0.getCustomName());
      assertEquals("400", modelPerformanceChart0.getOffscreenHeight());
      assertEquals("500", modelPerformanceChart0.getOffscreenWidth());
      assertEquals("Weka Chart Renderer", modelPerformanceChart0.getOffscreenRendererName());
  }

  @Test
  public void test14()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
          assertNotNull(modelPerformanceChart0);
          
          // Undeclared exception!
          try {
            modelPerformanceChart0.appearanceFinal();
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission /home/ac1gf write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.canWrite(File.java:711)
             * sun.awt.shell.ShellFolder.canWrite(ShellFolder.java:284)
             * sun.swing.FilePane.canWrite(FilePane.java:1817)
             * sun.swing.FilePane.doDirectoryChanged(FilePane.java:1470)
             * sun.swing.FilePane.propertyChange(FilePane.java:1516)
             * java.beans.PropertyChangeSupport.firePropertyChange(PropertyChangeSupport.java:339)
             * java.beans.PropertyChangeSupport.firePropertyChange(PropertyChangeSupport.java:276)
             * java.awt.Component.firePropertyChange(Component.java:8154)
             * javax.swing.JFileChooser.setCurrentDirectory(JFileChooser.java:568)
             * javax.swing.JFileChooser.<init>(JFileChooser.java:334)
             * javax.swing.JFileChooser.<init>(JFileChooser.java:286)
             * weka.gui.visualize.PrintableComponent.initFileChooser(PrintableComponent.java:267)
             * weka.gui.visualize.PrintableComponent.<init>(PrintableComponent.java:150)
             * weka.gui.visualize.PrintablePanel.<init>(PrintablePanel.java:54)
             * weka.gui.visualize.VisualizePanel.<init>(VisualizePanel.java:1856)
             * weka.gui.beans.ModelPerformanceChart.setUpFinal(ModelPerformanceChart.java:187)
             * weka.gui.beans.ModelPerformanceChart.appearanceFinal(ModelPerformanceChart.java:182)
             * sun.reflect.GeneratedMethodAccessor450.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test15()  throws Throwable  {
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      assertNotNull(modelPerformanceChart0);
      
      String string0 = modelPerformanceChart0.getCustomName();
      assertEquals("Weka Chart Renderer", modelPerformanceChart0.getOffscreenRendererName());
      assertEquals("400", modelPerformanceChart0.getOffscreenHeight());
      assertEquals("ModelPerformanceChart", string0);
      assertEquals("500", modelPerformanceChart0.getOffscreenWidth());
      assertNotNull(string0);
  }

  @Test
  public void test16()  throws Throwable  {
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      assertEquals("ModelPerformanceChart", modelPerformanceChart0.getCustomName());
      assertNotNull(modelPerformanceChart0);
      
      modelPerformanceChart0.setCustomName("");
      assertEquals("", modelPerformanceChart0.getCustomName());
  }

  @Test
  public void test17()  throws Throwable  {
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      assertNotNull(modelPerformanceChart0);
      
      String string0 = modelPerformanceChart0.globalInfo();
      assertEquals("400", modelPerformanceChart0.getOffscreenHeight());
      assertEquals("ModelPerformanceChart", modelPerformanceChart0.getCustomName());
      assertEquals("Weka Chart Renderer", modelPerformanceChart0.getOffscreenRendererName());
      assertEquals("500", modelPerformanceChart0.getOffscreenWidth());
      assertEquals("Visualize performance charts (such as ROC).", string0);
  }

  @Test
  public void test18()  throws Throwable  {
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      assertNotNull(modelPerformanceChart0);
      assertEquals("ModelPerformanceChart", modelPerformanceChart0.getCustomName());
      
      Clusterer clusterer0 = new Clusterer();
      BeanVisual beanVisual0 = clusterer0.getVisual();
      modelPerformanceChart0.setVisual(beanVisual0);
      assertEquals("500", modelPerformanceChart0.getOffscreenWidth());
  }

  @Test
  public void test19()  throws Throwable  {
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      assertNotNull(modelPerformanceChart0);
      
      String string0 = modelPerformanceChart0.getOffscreenYAxis();
      assertEquals("ModelPerformanceChart", modelPerformanceChart0.getCustomName());
      assertEquals("500", modelPerformanceChart0.getOffscreenWidth());
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("Weka Chart Renderer", modelPerformanceChart0.getOffscreenRendererName());
      assertEquals("400", modelPerformanceChart0.getOffscreenHeight());
  }

  @Test
  public void test20()  throws Throwable  {
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      assertNotNull(modelPerformanceChart0);
      
      String string0 = modelPerformanceChart0.getOffscreenAdditionalOpts();
      assertNotNull(string0);
      assertEquals("Weka Chart Renderer", modelPerformanceChart0.getOffscreenRendererName());
      assertEquals("400", modelPerformanceChart0.getOffscreenHeight());
      assertEquals("", string0);
      assertEquals("500", modelPerformanceChart0.getOffscreenWidth());
      assertEquals("ModelPerformanceChart", modelPerformanceChart0.getCustomName());
  }

  @Test
  public void test21()  throws Throwable  {
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      assertNotNull(modelPerformanceChart0);
      
      String string0 = modelPerformanceChart0.getOffscreenRendererName();
      assertEquals("ModelPerformanceChart", modelPerformanceChart0.getCustomName());
      assertEquals("Weka Chart Renderer", string0);
      assertEquals("400", modelPerformanceChart0.getOffscreenHeight());
      assertEquals("500", modelPerformanceChart0.getOffscreenWidth());
      assertNotNull(string0);
  }

  @Test
  public void test22()  throws Throwable  {
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      assertNotNull(modelPerformanceChart0);
      
      modelPerformanceChart0.appearanceDesign();
      assertEquals("weka.gui.beans.ModelPerformanceChart[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", modelPerformanceChart0.toString());
      assertEquals(1, modelPerformanceChart0.getComponentCount());
  }

  @Test
  public void test23()  throws Throwable  {
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      assertNotNull(modelPerformanceChart0);
      
      modelPerformanceChart0.removePropertyChangeListener("|9", (PropertyChangeListener) null);
      assertEquals("Weka Chart Renderer", modelPerformanceChart0.getOffscreenRendererName());
      assertEquals("500", modelPerformanceChart0.getOffscreenWidth());
      assertEquals("400", modelPerformanceChart0.getOffscreenHeight());
      assertEquals("ModelPerformanceChart", modelPerformanceChart0.getCustomName());
  }

  @Test
  public void test24()  throws Throwable  {
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      assertNotNull(modelPerformanceChart0);
      
      modelPerformanceChart0.setOffscreenWidth("h`GpG$Cy7aC[G");
      assertEquals("h`GpG$Cy7aC[G", modelPerformanceChart0.getOffscreenWidth());
      assertEquals("Weka Chart Renderer", modelPerformanceChart0.getOffscreenRendererName());
  }

  @Test
  public void test25()  throws Throwable  {
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      assertNotNull(modelPerformanceChart0);
      
      modelPerformanceChart0.stop();
      assertEquals("Weka Chart Renderer", modelPerformanceChart0.getOffscreenRendererName());
      assertEquals("ModelPerformanceChart", modelPerformanceChart0.getCustomName());
      assertEquals("500", modelPerformanceChart0.getOffscreenWidth());
      assertEquals("400", modelPerformanceChart0.getOffscreenHeight());
  }

  @Test
  public void test26()  throws Throwable  {
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      assertNotNull(modelPerformanceChart0);
      
      modelPerformanceChart0.setOffscreenHeight("P= _bUksx-Hat$XO");
      assertEquals("P= _bUksx-Hat$XO", modelPerformanceChart0.getOffscreenHeight());
  }

  @Test
  public void test27()  throws Throwable  {
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      assertNotNull(modelPerformanceChart0);
      
      String string0 = modelPerformanceChart0.getOffscreenHeight();
      assertEquals("ModelPerformanceChart", modelPerformanceChart0.getCustomName());
      assertNotNull(string0);
      assertEquals("500", modelPerformanceChart0.getOffscreenWidth());
      assertEquals("Weka Chart Renderer", modelPerformanceChart0.getOffscreenRendererName());
      assertEquals("400", string0);
  }

  @Test
  public void test28()  throws Throwable  {
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      assertNotNull(modelPerformanceChart0);
      
      Environment environment0 = new Environment();
      modelPerformanceChart0.setEnvironment(environment0);
      assertEquals("ModelPerformanceChart", modelPerformanceChart0.getCustomName());
      assertEquals("Weka Chart Renderer", modelPerformanceChart0.getOffscreenRendererName());
      assertEquals("400", modelPerformanceChart0.getOffscreenHeight());
      assertEquals("500", modelPerformanceChart0.getOffscreenWidth());
  }

  @Test
  public void test29()  throws Throwable  {
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      assertNotNull(modelPerformanceChart0);
      
      modelPerformanceChart0.setOffscreenXAxis("n@>NG$BS-pDu=R[`WL");
      assertEquals("n@>NG$BS-pDu=R[`WL", modelPerformanceChart0.getOffscreenXAxis());
      assertEquals("500", modelPerformanceChart0.getOffscreenWidth());
  }

  @Test
  public void test30()  throws Throwable  {
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      assertNotNull(modelPerformanceChart0);
      
      BeanContextServicesSupport beanContextServicesSupport0 = new BeanContextServicesSupport();
      modelPerformanceChart0.addVetoableChangeListener((String) null, (VetoableChangeListener) beanContextServicesSupport0);
      assertEquals("500", modelPerformanceChart0.getOffscreenWidth());
      assertEquals("Weka Chart Renderer", modelPerformanceChart0.getOffscreenRendererName());
      assertEquals("ModelPerformanceChart", modelPerformanceChart0.getCustomName());
      assertEquals("400", modelPerformanceChart0.getOffscreenHeight());
  }

  @Test
  public void test31()  throws Throwable  {
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      assertNotNull(modelPerformanceChart0);
      
      modelPerformanceChart0.setupOffscreenRenderer();
      assertEquals("Weka Chart Renderer", modelPerformanceChart0.getOffscreenRendererName());
      assertEquals("ModelPerformanceChart", modelPerformanceChart0.getCustomName());
      assertEquals("400", modelPerformanceChart0.getOffscreenHeight());
      assertEquals("500", modelPerformanceChart0.getOffscreenWidth());
  }

  @Test
  public void test32()  throws Throwable  {
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      assertNotNull(modelPerformanceChart0);
      
      modelPerformanceChart0.setOffscreenRendererName("S(Lj09`");
      modelPerformanceChart0.setupOffscreenRenderer();
      assertEquals("S(Lj09`", modelPerformanceChart0.getOffscreenRendererName());
      assertEquals("400", modelPerformanceChart0.getOffscreenHeight());
  }

  @Test
  public void test33()  throws Throwable  {
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      assertNotNull(modelPerformanceChart0);
      
      modelPerformanceChart0.acceptDataSet((ThresholdDataEvent) null);
      modelPerformanceChart0.acceptDataSet((ThresholdDataEvent) null);
      assertEquals("ModelPerformanceChart", modelPerformanceChart0.getCustomName());
      assertEquals("400", modelPerformanceChart0.getOffscreenHeight());
      assertEquals("500", modelPerformanceChart0.getOffscreenWidth());
      assertEquals("Weka Chart Renderer", modelPerformanceChart0.getOffscreenRendererName());
  }

  @Test
  public void test34()  throws Throwable  {
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      assertNotNull(modelPerformanceChart0);
      
      VisualizableErrorEvent visualizableErrorEvent0 = new VisualizableErrorEvent((Object) "java.awt.Canvas[canvas583,0,0,0x0,invalid]", (PlotData2D) null);
      modelPerformanceChart0.acceptDataSet(visualizableErrorEvent0);
      assertEquals("Weka Chart Renderer", modelPerformanceChart0.getOffscreenRendererName());
      assertEquals("400", modelPerformanceChart0.getOffscreenHeight());
      assertEquals("500", modelPerformanceChart0.getOffscreenWidth());
      assertEquals("ModelPerformanceChart", modelPerformanceChart0.getCustomName());
  }

  @Test
  public void test35()  throws Throwable  {
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      assertNotNull(modelPerformanceChart0);
      
      Enumeration<Object> enumeration0 = modelPerformanceChart0.enumerateRequests();
      assertEquals("500", modelPerformanceChart0.getOffscreenWidth());
      assertNotNull(enumeration0);
      assertEquals("Weka Chart Renderer", modelPerformanceChart0.getOffscreenRendererName());
      assertEquals("400", modelPerformanceChart0.getOffscreenHeight());
      assertEquals(false, enumeration0.hasMoreElements());
      assertEquals("ModelPerformanceChart", modelPerformanceChart0.getCustomName());
  }

  @Test
  public void test36()  throws Throwable  {
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      assertNotNull(modelPerformanceChart0);
      
      BeanContextServicesSupport beanContextServicesSupport0 = new BeanContextServicesSupport();
      modelPerformanceChart0.setBeanContext((BeanContext) beanContextServicesSupport0);
      assertEquals("500", modelPerformanceChart0.getOffscreenWidth());
      assertEquals("Weka Chart Renderer", modelPerformanceChart0.getOffscreenRendererName());
      assertEquals("400", modelPerformanceChart0.getOffscreenHeight());
      assertEquals("ModelPerformanceChart", modelPerformanceChart0.getCustomName());
      assertEquals("weka.gui.beans.ModelPerformanceChart[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", modelPerformanceChart0.toString());
  }

  @Test
  public void test37()  throws Throwable  {
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      assertNotNull(modelPerformanceChart0);
      
      // Undeclared exception!
      try {
        modelPerformanceChart0.performRequest("Clear all plots");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test38()  throws Throwable  {
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      assertNotNull(modelPerformanceChart0);
      
      // Undeclared exception!
      try {
        modelPerformanceChart0.performRequest("M");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * M not supported (Model Performance Chart)
         */
      }
  }

  @Test
  public void test39()  throws Throwable  {
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      assertNotNull(modelPerformanceChart0);
      
      modelPerformanceChart0.connectionNotification("", "SwingDisplayedMnemonicIndexKey");
      assertEquals("500", modelPerformanceChart0.getOffscreenWidth());
      assertEquals("Weka Chart Renderer", modelPerformanceChart0.getOffscreenRendererName());
      assertEquals("400", modelPerformanceChart0.getOffscreenHeight());
      assertEquals("ModelPerformanceChart", modelPerformanceChart0.getCustomName());
  }

  @Test
  public void test40()  throws Throwable  {
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      assertNotNull(modelPerformanceChart0);
      
      boolean boolean0 = modelPerformanceChart0.eventGeneratable("");
      assertEquals("400", modelPerformanceChart0.getOffscreenHeight());
      assertEquals("Weka Chart Renderer", modelPerformanceChart0.getOffscreenRendererName());
      assertEquals("ModelPerformanceChart", modelPerformanceChart0.getCustomName());
      assertEquals(false, boolean0);
      assertEquals("500", modelPerformanceChart0.getOffscreenWidth());
  }
}
