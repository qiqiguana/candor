/*
 * This file was automatically generated by EvoSuite
 */

package weka.gui.beans;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.awt.Color;
import java.awt.Graphics;
import java.beans.PropertyChangeListener;
import java.io.OutputStream;
import java.io.PrintStream;
import javax.swing.DebugGraphics;
import javax.swing.ImageIcon;
import javax.swing.JSeparator;
import javax.swing.plaf.ColorUIResource;
import javax.swing.plaf.metal.MetalRootPaneUI;
import org.junit.BeforeClass;
import weka.gui.beans.BeanVisual;
import weka.gui.visualize.PostscriptGraphics;

@RunWith(EvoSuiteRunner.class)
public class BeanVisualEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BeanVisual beanVisual0 = new BeanVisual("", "", "");
      assertNotNull(beanVisual0);
      
      String string0 = beanVisual0.getText();
      assertNotNull(string0);
      assertEquals("weka.gui.beans.BeanVisual[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=java.awt.Dimension[width=10,height=10],minimumSize=java.awt.Dimension[width=10,height=10],preferredSize=java.awt.Dimension[width=10,height=10]]", beanVisual0.toString());
      assertEquals(1, beanVisual0.countComponents());
      assertEquals("", string0);
      assertEquals("", beanVisual0.getAnimatedIconPath());
      assertEquals("", beanVisual0.getIconPath());
  }

  @Test
  public void test1()  throws Throwable  {
      BeanVisual beanVisual0 = new BeanVisual("_h5|qgTdM", "_h5|qgTdM", "_h5|qgTdM");
      assertNotNull(beanVisual0);
      
      beanVisual0.setText("_h5|qgTdM");
      assertEquals("_h5|qgTdM", beanVisual0.getAnimatedIconPath());
      assertEquals("weka.gui.beans.BeanVisual[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=java.awt.Dimension[width=10,height=10],minimumSize=java.awt.Dimension[width=10,height=10],preferredSize=java.awt.Dimension[width=10,height=10]]", beanVisual0.toString());
      assertEquals(1, beanVisual0.countComponents());
      assertEquals("_h5|qgTdM", beanVisual0.getIconPath());
      assertEquals("_h5|qgTdM", beanVisual0.getText());
  }

  @Test
  public void test2()  throws Throwable  {
      BeanVisual beanVisual0 = new BeanVisual("", "", "");
      assertNotNull(beanVisual0);
      
      MetalRootPaneUI metalRootPaneUI0 = new MetalRootPaneUI();
      beanVisual0.removePropertyChangeListener((PropertyChangeListener) metalRootPaneUI0);
      assertEquals("", beanVisual0.getAnimatedIconPath());
      assertEquals("", beanVisual0.getIconPath());
      assertEquals("", beanVisual0.getText());
      assertEquals("weka.gui.beans.BeanVisual[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=java.awt.Dimension[width=10,height=10],minimumSize=java.awt.Dimension[width=10,height=10],preferredSize=java.awt.Dimension[width=10,height=10]]", beanVisual0.toString());
      assertEquals(1, beanVisual0.getComponentCount());
  }

  @Test
  public void test3()  throws Throwable  {
      BeanVisual beanVisual0 = new BeanVisual("", "", "");
      assertNotNull(beanVisual0);
      
      String string0 = beanVisual0.getIconPath();
      assertEquals("", beanVisual0.getText());
      assertEquals("", beanVisual0.getAnimatedIconPath());
      assertEquals("weka.gui.beans.BeanVisual[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=java.awt.Dimension[width=10,height=10],minimumSize=java.awt.Dimension[width=10,height=10],preferredSize=java.awt.Dimension[width=10,height=10]]", beanVisual0.toString());
      assertEquals("", string0);
      assertEquals(1, beanVisual0.countComponents());
      assertNotNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      BeanVisual beanVisual0 = new BeanVisual("y7WQgRqp-L(<", "y7WQgRqp-L(<", "y7WQgRqp-L(<");
      assertNotNull(beanVisual0);
      
      String string0 = beanVisual0.getAnimatedIconPath();
      assertEquals("y7WQgRqp-L(<", beanVisual0.getIconPath());
      assertEquals("y7WQgRqp-L(<", string0);
      assertEquals(1, beanVisual0.getComponentCount());
      assertEquals("weka.gui.beans.BeanVisual[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=java.awt.Dimension[width=10,height=10],minimumSize=java.awt.Dimension[width=10,height=10],preferredSize=java.awt.Dimension[width=10,height=10]]", beanVisual0.toString());
      assertNotNull(string0);
      assertEquals("y7WQgRqp-L(<", beanVisual0.getText());
  }

  @Test
  public void test5()  throws Throwable  {
      BeanVisual beanVisual0 = new BeanVisual("grestore", "grestore", "grestore");
      assertNotNull(beanVisual0);
      
      ImageIcon imageIcon0 = beanVisual0.getAnimatedIcon();
      assertEquals("grestore", beanVisual0.getIconPath());
      assertEquals("grestore", beanVisual0.getAnimatedIconPath());
      assertEquals("grestore", beanVisual0.getText());
      assertNull(imageIcon0);
      assertEquals(1, beanVisual0.countComponents());
      assertEquals("weka.gui.beans.BeanVisual[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=java.awt.Dimension[width=10,height=10],minimumSize=java.awt.Dimension[width=10,height=10],preferredSize=java.awt.Dimension[width=10,height=10]]", beanVisual0.toString());
      assertEquals(true, beanVisual0.isMinimumSizeSet());
  }

  @Test
  public void test6()  throws Throwable  {
      BeanVisual beanVisual0 = new BeanVisual("", "", "");
      assertNotNull(beanVisual0);
      
      beanVisual0.getStaticIcon();
      assertEquals("", beanVisual0.getAnimatedIconPath());
      assertEquals("", beanVisual0.getText());
      assertEquals("weka.gui.beans.BeanVisual[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=java.awt.Dimension[width=10,height=10],minimumSize=java.awt.Dimension[width=10,height=10],preferredSize=java.awt.Dimension[width=10,height=10]]", beanVisual0.toString());
      assertEquals(1, beanVisual0.countComponents());
      assertEquals("", beanVisual0.getIconPath());
  }

  @Test
  public void test7()  throws Throwable  {
      BeanVisual beanVisual0 = new BeanVisual("E@Y*/n~$0-^|p6", "E@Y*/n~$0-^|p6", "E@Y*/n~$0-^|p6");
      assertNotNull(beanVisual0);
      
      beanVisual0.setAnimated();
      assertEquals("E@Y*/n~$0-^|p6", beanVisual0.getText());
      assertEquals("weka.gui.beans.BeanVisual[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=java.awt.Dimension[width=10,height=10],minimumSize=java.awt.Dimension[width=10,height=10],preferredSize=java.awt.Dimension[width=10,height=10]]", beanVisual0.toString());
      assertEquals("E@Y*/n~$0-^|p6", beanVisual0.getAnimatedIconPath());
      assertEquals(1, beanVisual0.countComponents());
      assertEquals("E@Y*/n~$0-^|p6", beanVisual0.getIconPath());
  }

  @Test
  public void test8()  throws Throwable  {
      BeanVisual beanVisual0 = new BeanVisual(",#*t?n0?gi", ",#*t?n0?gi", ",#*t?n0?gi");
      assertNotNull(beanVisual0);
      
      beanVisual0.setStatic();
      assertEquals("weka.gui.beans.BeanVisual[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=java.awt.Dimension[width=10,height=10],minimumSize=java.awt.Dimension[width=10,height=10],preferredSize=java.awt.Dimension[width=10,height=10]]", beanVisual0.toString());
      assertEquals(",#*t?n0?gi", beanVisual0.getText());
      assertEquals(",#*t?n0?gi", beanVisual0.getAnimatedIconPath());
      assertEquals(",#*t?n0?gi", beanVisual0.getIconPath());
      assertEquals(1, beanVisual0.getComponentCount());
  }

  @Test
  public void test9()  throws Throwable  {
      BeanVisual beanVisual0 = new BeanVisual(".+t", ".+t", ".+t");
      assertNotNull(beanVisual0);
      
      JSeparator jSeparator0 = new JSeparator();
      ColorUIResource colorUIResource0 = (ColorUIResource)jSeparator0.getForeground();
      beanVisual0.setDisplayConnectors(true, (Color) colorUIResource0);
      assertEquals(".+t", beanVisual0.getIconPath());
      assertEquals(".+t", beanVisual0.getAnimatedIconPath());
      assertEquals("weka.gui.beans.BeanVisual[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=java.awt.Dimension[width=10,height=10],minimumSize=java.awt.Dimension[width=10,height=10],preferredSize=java.awt.Dimension[width=10,height=10]]", beanVisual0.toString());
      assertEquals(".+t", beanVisual0.getText());
      assertEquals(1, beanVisual0.getComponentCount());
  }

  @Test
  public void test10()  throws Throwable  {
      BeanVisual beanVisual0 = new BeanVisual("", "", "");
      assertNotNull(beanVisual0);
      
      beanVisual0.addPropertyChangeListener((PropertyChangeListener) null);
      assertEquals("", beanVisual0.getText());
      assertEquals("weka.gui.beans.BeanVisual[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=java.awt.Dimension[width=10,height=10],minimumSize=java.awt.Dimension[width=10,height=10],preferredSize=java.awt.Dimension[width=10,height=10]]", beanVisual0.toString());
      assertEquals("", beanVisual0.getIconPath());
      assertEquals(1, beanVisual0.getComponentCount());
      assertEquals("", beanVisual0.getAnimatedIconPath());
  }

  @Test
  public void test11()  throws Throwable  {
      BeanVisual beanVisual0 = new BeanVisual("", "", "");
      assertNotNull(beanVisual0);
      
      beanVisual0.scale((-1157));
      assertEquals("", beanVisual0.getAnimatedIconPath());
      assertEquals("weka.gui.beans.BeanVisual[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=java.awt.Dimension[width=10,height=10],minimumSize=java.awt.Dimension[width=10,height=10],preferredSize=java.awt.Dimension[width=10,height=10]]", beanVisual0.toString());
      assertEquals("", beanVisual0.getIconPath());
      assertEquals("", beanVisual0.getText());
      assertEquals(1, beanVisual0.countComponents());
  }

  @Test
  public void test12()  throws Throwable  {
      BeanVisual beanVisual0 = new BeanVisual("E@Y*/n~$0-^|p6", "E@Y*/n~$0-^|p6", "E@Y*/n~$0-^|p6");
      assertNotNull(beanVisual0);
      
      beanVisual0.scale(0.0);
      assertEquals("E@Y*/n~$0-^|p6", beanVisual0.getAnimatedIconPath());
      assertEquals("E@Y*/n~$0-^|p6", beanVisual0.getIconPath());
      assertEquals("weka.gui.beans.BeanVisual[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=java.awt.Dimension[width=10,height=10],minimumSize=java.awt.Dimension[width=10,height=10],preferredSize=java.awt.Dimension[width=10,height=10]]", beanVisual0.toString());
      assertEquals("E@Y*/n~$0-^|p6", beanVisual0.getText());
      assertEquals(1, beanVisual0.countComponents());
  }

  @Test
  public void test13()  throws Throwable  {
      BeanVisual beanVisual0 = new BeanVisual("weka/gui/beans/icons/", "weka/gui/beans/icons/", "weka/gui/beans/icons/");
      assertNotNull(beanVisual0);
      
      boolean boolean0 = beanVisual0.loadIcons("weka/gui/beans/icons/", "weka/gui/beans/icons/");
      assertEquals("weka/gui/beans/icons/", beanVisual0.getIconPath());
      assertEquals("weka/gui/beans/icons/", beanVisual0.getText());
      assertEquals("weka/gui/beans/icons/", beanVisual0.getAnimatedIconPath());
      assertEquals(true, boolean0);
      assertEquals(1, beanVisual0.countComponents());
      assertEquals("weka.gui.beans.BeanVisual[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=java.awt.Dimension[width=9,height=9],minimumSize=java.awt.Dimension[width=9,height=9],preferredSize=java.awt.Dimension[width=9,height=9]]", beanVisual0.toString());
  }

  @Test
  public void test14()  throws Throwable  {
      BeanVisual beanVisual0 = new BeanVisual("y7WQgRqp-L(<", "y7WQgRqp-L(<", "y7WQgRqp-L(<");
      assertNotNull(beanVisual0);
      
      PrintStream printStream0 = DebugGraphics.logStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics(10, 10, (OutputStream) printStream0);
      beanVisual0.paintComponent((Graphics) postscriptGraphics0);
      assertEquals("weka.gui.visualize.PostscriptGraphics[font=java.awt.Font[family=Monospaced,name=Courier,style=plain,size=11],color=java.awt.Color[r=0,g=0,b=0]]", postscriptGraphics0.toString());
      assertEquals(1, beanVisual0.countComponents());
      assertEquals("y7WQgRqp-L(<", beanVisual0.getText());
      assertEquals("weka.gui.beans.BeanVisual[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=java.awt.Dimension[width=10,height=10],minimumSize=java.awt.Dimension[width=10,height=10],preferredSize=java.awt.Dimension[width=10,height=10]]", beanVisual0.toString());
      assertEquals("y7WQgRqp-L(<", beanVisual0.getIconPath());
      assertEquals("y7WQgRqp-L(<", beanVisual0.getAnimatedIconPath());
  }

  @Test
  public void test15()  throws Throwable  {
      BeanVisual beanVisual0 = new BeanVisual("(\"0U>|?9J?yJi{%,", "(\"0U>|?9J?yJi{%,", "(\"0U>|?9J?yJi{%,");
      assertNotNull(beanVisual0);
      
      PrintStream printStream0 = DebugGraphics.logStream();
      PostscriptGraphics postscriptGraphics0 = new PostscriptGraphics(10, 10, (OutputStream) printStream0);
      beanVisual0.setDisplayConnectors(true);
      beanVisual0.paintComponent((Graphics) postscriptGraphics0);
      assertEquals("weka.gui.visualize.PostscriptGraphics[font=java.awt.Font[family=Monospaced,name=Courier,style=plain,size=11],color=java.awt.Color[r=0,g=0,b=255]]", postscriptGraphics0.toString());
      assertEquals("weka.gui.beans.BeanVisual[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=java.awt.Dimension[width=10,height=10],minimumSize=java.awt.Dimension[width=10,height=10],preferredSize=java.awt.Dimension[width=10,height=10]]", beanVisual0.toString());
  }
}
