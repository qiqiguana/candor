/*
 * This file was automatically generated by EvoSuite
 */

package weka.gui.beans;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import weka.classifiers.Classifier;
import weka.classifiers.bayes.NaiveBayesMultinomial;
import weka.classifiers.meta.AttributeSelectedClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.trees.DecisionStump;
import weka.core.Instances;
import weka.core.converters.TextDirectoryLoader;
import weka.gui.LogPanel;
import weka.gui.Logger;
import weka.gui.beans.BatchClassifierEvent;
import weka.gui.beans.ClassifierPerformanceEvaluator;
import weka.gui.beans.CostBenefitAnalysis;
import weka.gui.beans.DataSetEvent;
import weka.gui.beans.ModelPerformanceChart;
import weka.gui.beans.Saver;
import weka.gui.beans.TextListener;
import weka.gui.beans.TextViewer;
import weka.gui.beans.ThresholdDataListener;
import weka.gui.beans.VisualizableErrorListener;

@RunWith(EvoSuiteRunner.class)
public class ClassifierPerformanceEvaluatorEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      assertNotNull(classifierPerformanceEvaluator0);
      
      ClassifierPerformanceEvaluator.EvaluationTask classifierPerformanceEvaluator_EvaluationTask0 = classifierPerformanceEvaluator0.new EvaluationTask((Classifier) null, (Instances) null, (Instances) null, 10, 8);
      classifierPerformanceEvaluator_EvaluationTask0.getTaskStatus();
      assertEquals("ClassifierPerformanceEvaluator", classifierPerformanceEvaluator0.getCustomName());
      assertEquals(2, classifierPerformanceEvaluator0.getExecutionSlots());
  }

  @Test
  public void test1()  throws Throwable  {
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      assertNotNull(classifierPerformanceEvaluator0);
      
      DecisionStump decisionStump0 = new DecisionStump();
      ClassifierPerformanceEvaluator.EvaluationTask classifierPerformanceEvaluator_EvaluationTask0 = classifierPerformanceEvaluator0.new EvaluationTask((Classifier) decisionStump0, (Instances) null, (Instances) null, (-1), (-1));
      classifierPerformanceEvaluator_EvaluationTask0.setStopped();
      classifierPerformanceEvaluator_EvaluationTask0.execute();
      assertEquals(2, classifierPerformanceEvaluator0.getExecutionSlots());
      assertEquals("ClassifierPerformanceEvaluator", classifierPerformanceEvaluator0.getCustomName());
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
          assertNotNull(classifierPerformanceEvaluator0);
          
          LogPanel logPanel0 = new LogPanel();
          classifierPerformanceEvaluator0.setLog((Logger) logPanel0);
          AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
          ClassifierPerformanceEvaluator.EvaluationTask classifierPerformanceEvaluator_EvaluationTask0 = classifierPerformanceEvaluator0.new EvaluationTask((Classifier) attributeSelectedClassifier0, (Instances) null, (Instances) null, 1020, 1020);
          classifierPerformanceEvaluator_EvaluationTask0.run();
          assertEquals(2, classifierPerformanceEvaluator0.getExecutionSlots());
          assertEquals("ClassifierPerformanceEvaluator", classifierPerformanceEvaluator0.getCustomName());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      assertNotNull(classifierPerformanceEvaluator0);
      
      String string0 = classifierPerformanceEvaluator0.globalInfo();
      assertEquals("Evaluate the performance of batch trained classifiers.", string0);
      assertEquals("ClassifierPerformanceEvaluator", classifierPerformanceEvaluator0.getCustomName());
      assertEquals(2, classifierPerformanceEvaluator0.getExecutionSlots());
  }

  @Test
  public void test4()  throws Throwable  {
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      assertNotNull(classifierPerformanceEvaluator0);
      
      int int0 = classifierPerformanceEvaluator0.getExecutionSlots();
      assertEquals("ClassifierPerformanceEvaluator", classifierPerformanceEvaluator0.getCustomName());
      assertEquals(2, int0);
  }

  @Test
  public void test5()  throws Throwable  {
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      assertNotNull(classifierPerformanceEvaluator0);
      
      String string0 = classifierPerformanceEvaluator0.executionSlotsTipText();
      assertEquals("Set the number of evaluation tasks to run in parallel.", string0);
      assertEquals(2, classifierPerformanceEvaluator0.getExecutionSlots());
      assertEquals("ClassifierPerformanceEvaluator", classifierPerformanceEvaluator0.getCustomName());
  }

  @Test
  public void test6()  throws Throwable  {
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      assertNotNull(classifierPerformanceEvaluator0);
      
      classifierPerformanceEvaluator0.setCustomName("SwingDisplayedMnemonicIndexKey");
      assertEquals("SwingDisplayedMnemonicIndexKey", classifierPerformanceEvaluator0.getCustomName());
      assertEquals(2, classifierPerformanceEvaluator0.getExecutionSlots());
  }

  @Test
  public void test7()  throws Throwable  {
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      assertNotNull(classifierPerformanceEvaluator0);
      
      Saver saver0 = new Saver();
      classifierPerformanceEvaluator0.removeThresholdDataListener((ThresholdDataListener) saver0);
      assertEquals("ClassifierPerformanceEvaluator", classifierPerformanceEvaluator0.getCustomName());
      assertEquals(2, classifierPerformanceEvaluator0.getExecutionSlots());
  }

  @Test
  public void test8()  throws Throwable  {
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      assertNotNull(classifierPerformanceEvaluator0);
      
      TextViewer textViewer0 = new TextViewer();
      classifierPerformanceEvaluator0.addTextListener((TextListener) textViewer0);
      assertEquals("ClassifierPerformanceEvaluator", classifierPerformanceEvaluator0.getCustomName());
      assertEquals(2, classifierPerformanceEvaluator0.getExecutionSlots());
  }

  @Test
  public void test9()  throws Throwable  {
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      assertNotNull(classifierPerformanceEvaluator0);
      
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      classifierPerformanceEvaluator0.addThresholdDataListener((ThresholdDataListener) costBenefitAnalysis0);
      assertEquals(2, classifierPerformanceEvaluator0.getExecutionSlots());
      assertEquals("ClassifierPerformanceEvaluator", classifierPerformanceEvaluator0.getCustomName());
  }

  @Test
  public void test10()  throws Throwable  {
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      assertNotNull(classifierPerformanceEvaluator0);
      
      classifierPerformanceEvaluator0.addVisualizableErrorListener((VisualizableErrorListener) null);
      assertEquals(2, classifierPerformanceEvaluator0.getExecutionSlots());
      assertEquals("ClassifierPerformanceEvaluator", classifierPerformanceEvaluator0.getCustomName());
  }

  @Test
  public void test11()  throws Throwable  {
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      assertNotNull(classifierPerformanceEvaluator0);
      
      classifierPerformanceEvaluator0.setExecutionSlots((-1486));
      assertEquals(-1486, classifierPerformanceEvaluator0.getExecutionSlots());
  }

  @Test
  public void test12()  throws Throwable  {
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      assertNotNull(classifierPerformanceEvaluator0);
      
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      classifierPerformanceEvaluator0.removeVisualizableErrorListener((VisualizableErrorListener) modelPerformanceChart0);
      assertEquals("ClassifierPerformanceEvaluator", classifierPerformanceEvaluator0.getCustomName());
      assertEquals(2, classifierPerformanceEvaluator0.getExecutionSlots());
  }

  @Test
  public void test13()  throws Throwable  {
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      assertNotNull(classifierPerformanceEvaluator0);
      
      TextViewer textViewer0 = new TextViewer();
      classifierPerformanceEvaluator0.removeTextListener((TextListener) textViewer0);
      assertEquals("ClassifierPerformanceEvaluator", classifierPerformanceEvaluator0.getCustomName());
      assertEquals(2, classifierPerformanceEvaluator0.getExecutionSlots());
  }

  @Test
  public void test14()  throws Throwable  {
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      assertNotNull(classifierPerformanceEvaluator0);
      
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      ClassifierPerformanceEvaluator.EvaluationTask classifierPerformanceEvaluator_EvaluationTask0 = classifierPerformanceEvaluator0.new EvaluationTask((Classifier) naiveBayesMultinomial0, instances0, instances0, (-1848), (-1848));
      classifierPerformanceEvaluator_EvaluationTask0.run();
      assertEquals("ClassifierPerformanceEvaluator", classifierPerformanceEvaluator0.getCustomName());
      assertEquals(2, classifierPerformanceEvaluator0.getExecutionSlots());
  }

  @Test
  public void test15()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      assertNotNull(classifierPerformanceEvaluator0);
      
      BatchClassifierEvent batchClassifierEvent0 = new BatchClassifierEvent((Object) "Whether if the normalization of attributes should be turned off for distance calculation (Default: false i.e. attribute values are normalized). ", (Classifier) logitBoost0, (DataSetEvent) null, (DataSetEvent) null, 0, 775, 0, 775);
      classifierPerformanceEvaluator0.acceptClassifier(batchClassifierEvent0);
      assertEquals(2, classifierPerformanceEvaluator0.getExecutionSlots());
      assertEquals("ClassifierPerformanceEvaluator", classifierPerformanceEvaluator0.getCustomName());
  }

  @Test
  public void test16()  throws Throwable  {
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      assertNotNull(classifierPerformanceEvaluator0);
      
      LogitBoost logitBoost0 = new LogitBoost();
      DataSetEvent dataSetEvent0 = new DataSetEvent((Object) classifierPerformanceEvaluator0, (Instances) null);
      BatchClassifierEvent batchClassifierEvent0 = new BatchClassifierEvent((Object) classifierPerformanceEvaluator0, (Classifier) logitBoost0, dataSetEvent0, dataSetEvent0, 1541, 1541);
      classifierPerformanceEvaluator0.acceptClassifier(batchClassifierEvent0);
      assertEquals(2, classifierPerformanceEvaluator0.getExecutionSlots());
      assertEquals("ClassifierPerformanceEvaluator", classifierPerformanceEvaluator0.getCustomName());
  }

  @Test
  public void test17()  throws Throwable  {
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      assertNotNull(classifierPerformanceEvaluator0);
      
      boolean boolean0 = classifierPerformanceEvaluator0.isBusy();
      assertEquals(false, boolean0);
      assertEquals("ClassifierPerformanceEvaluator", classifierPerformanceEvaluator0.getCustomName());
      assertEquals(2, classifierPerformanceEvaluator0.getExecutionSlots());
  }

  @Test
  public void test18()  throws Throwable  {
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      assertNotNull(classifierPerformanceEvaluator0);
      
      Enumeration<Object> enumeration0 = classifierPerformanceEvaluator0.enumerateRequests();
      assertEquals("ClassifierPerformanceEvaluator", classifierPerformanceEvaluator0.getCustomName());
      assertEquals(2, classifierPerformanceEvaluator0.getExecutionSlots());
      assertNotNull(enumeration0);
  }

  @Test
  public void test19()  throws Throwable  {
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      assertNotNull(classifierPerformanceEvaluator0);
      
      // Undeclared exception!
      try {
        classifierPerformanceEvaluator0.performRequest("Evaluate the performance of batch trained classifiers.");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Evaluate the performance of batch trained classifiers. not supported (ClassifierPerformanceEvaluator)
         */
      }
  }

  @Test
  public void test20()  throws Throwable  {
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      assertNotNull(classifierPerformanceEvaluator0);
      
      classifierPerformanceEvaluator0.connectionNotification("XML serialized model file (*.komlmodel)", (Object) classifierPerformanceEvaluator0);
      // Undeclared exception!
      try {
        classifierPerformanceEvaluator0.eventGeneratable("XML serialized model file (*.komlmodel)");
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }

  @Test
  public void test21()  throws Throwable  {
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      assertNotNull(classifierPerformanceEvaluator0);
      
      boolean boolean0 = classifierPerformanceEvaluator0.eventGeneratable(")\"U(&*F]>/G6gL");
      assertEquals(false, boolean0);
      assertEquals("ClassifierPerformanceEvaluator", classifierPerformanceEvaluator0.getCustomName());
      assertEquals(2, classifierPerformanceEvaluator0.getExecutionSlots());
  }
}
