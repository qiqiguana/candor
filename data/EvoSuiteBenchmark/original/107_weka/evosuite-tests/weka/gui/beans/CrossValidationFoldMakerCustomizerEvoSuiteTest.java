/*
 * This file was automatically generated by EvoSuite
 */

package weka.gui.beans;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.awt.Window;
import java.beans.PropertyChangeListener;
import java.beans.beancontext.BeanContextServicesSupport;
import javax.swing.plaf.metal.MetalRootPaneUI;
import org.junit.BeforeClass;
import weka.gui.beans.BeanCustomizer;
import weka.gui.beans.CrossValidationFoldMakerCustomizer;

@RunWith(EvoSuiteRunner.class)
public class CrossValidationFoldMakerCustomizerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      CrossValidationFoldMakerCustomizer crossValidationFoldMakerCustomizer0 = new CrossValidationFoldMakerCustomizer();
      assertNotNull(crossValidationFoldMakerCustomizer0);
      
      BeanContextServicesSupport beanContextServicesSupport0 = new BeanContextServicesSupport();
      crossValidationFoldMakerCustomizer0.removePropertyChangeListener((PropertyChangeListener) beanContextServicesSupport0);
      assertEquals(3, crossValidationFoldMakerCustomizer0.countComponents());
      assertEquals(3, crossValidationFoldMakerCustomizer0.getComponentCount());
  }

  @Test
  public void test1()  throws Throwable  {
      CrossValidationFoldMakerCustomizer crossValidationFoldMakerCustomizer0 = new CrossValidationFoldMakerCustomizer();
      assertNotNull(crossValidationFoldMakerCustomizer0);
      
      // Undeclared exception!
      try {
        crossValidationFoldMakerCustomizer0.setObject((Object) "Fit a logistic regression to the output of SVM for producing probability estimates");
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * java.lang.String cannot be cast to weka.gui.beans.CrossValidationFoldMaker
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      CrossValidationFoldMakerCustomizer crossValidationFoldMakerCustomizer0 = new CrossValidationFoldMakerCustomizer();
      assertNotNull(crossValidationFoldMakerCustomizer0);
      
      crossValidationFoldMakerCustomizer0.setParentWindow((Window) null);
      assertEquals(3, crossValidationFoldMakerCustomizer0.countComponents());
      assertEquals(3, crossValidationFoldMakerCustomizer0.getComponentCount());
  }

  @Test
  public void test3()  throws Throwable  {
      CrossValidationFoldMakerCustomizer crossValidationFoldMakerCustomizer0 = new CrossValidationFoldMakerCustomizer();
      assertNotNull(crossValidationFoldMakerCustomizer0);
      
      // Undeclared exception!
      try {
        crossValidationFoldMakerCustomizer0.customizerClosing();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      CrossValidationFoldMakerCustomizer crossValidationFoldMakerCustomizer0 = new CrossValidationFoldMakerCustomizer();
      assertNotNull(crossValidationFoldMakerCustomizer0);
      
      MetalRootPaneUI metalRootPaneUI0 = new MetalRootPaneUI();
      crossValidationFoldMakerCustomizer0.addPropertyChangeListener((PropertyChangeListener) metalRootPaneUI0);
      assertEquals(3, crossValidationFoldMakerCustomizer0.countComponents());
      assertEquals(3, crossValidationFoldMakerCustomizer0.getComponentCount());
  }

  @Test
  public void test5()  throws Throwable  {
      CrossValidationFoldMakerCustomizer crossValidationFoldMakerCustomizer0 = new CrossValidationFoldMakerCustomizer();
      assertNotNull(crossValidationFoldMakerCustomizer0);
      
      crossValidationFoldMakerCustomizer0.setModifiedListener((BeanCustomizer.ModifyListener) null);
      assertEquals(3, crossValidationFoldMakerCustomizer0.countComponents());
      assertEquals(3, crossValidationFoldMakerCustomizer0.getComponentCount());
  }
}
