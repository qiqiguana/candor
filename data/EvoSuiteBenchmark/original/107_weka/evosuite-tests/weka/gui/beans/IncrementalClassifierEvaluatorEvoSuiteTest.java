/*
 * This file was automatically generated by EvoSuite
 */

package weka.gui.beans;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import weka.classifiers.Classifier;
import weka.classifiers.functions.SGDText;
import weka.core.Instances;
import weka.gui.beans.ChartListener;
import weka.gui.beans.IncrementalClassifierEvaluator;
import weka.gui.beans.IncrementalClassifierEvent;
import weka.gui.beans.TextListener;
import weka.gui.beans.TextViewer;

@RunWith(EvoSuiteRunner.class)
public class IncrementalClassifierEvaluatorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator();
      assertNotNull(incrementalClassifierEvaluator0);
      
      incrementalClassifierEvaluator0.removeChartListener((ChartListener) null);
      assertEquals(0, incrementalClassifierEvaluator0.getChartingEvalWindowSize());
      assertEquals("IncrementalClassifierEvaluator", incrementalClassifierEvaluator0.getCustomName());
      assertEquals(false, incrementalClassifierEvaluator0.getOutputPerClassInfoRetrievalStats());
      assertEquals(100, incrementalClassifierEvaluator0.getStatusFrequency());
  }

  @Test
  public void test1()  throws Throwable  {
      IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator();
      assertEquals(false, incrementalClassifierEvaluator0.getOutputPerClassInfoRetrievalStats());
      assertNotNull(incrementalClassifierEvaluator0);
      
      incrementalClassifierEvaluator0.setOutputPerClassInfoRetrievalStats(true);
      assertEquals(true, incrementalClassifierEvaluator0.getOutputPerClassInfoRetrievalStats());
      assertEquals(100, incrementalClassifierEvaluator0.getStatusFrequency());
  }

  @Test
  public void test2()  throws Throwable  {
      IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator();
      assertNotNull(incrementalClassifierEvaluator0);
      
      int int0 = incrementalClassifierEvaluator0.getChartingEvalWindowSize();
      assertEquals("IncrementalClassifierEvaluator", incrementalClassifierEvaluator0.getCustomName());
      assertEquals(0, int0);
      assertEquals(100, incrementalClassifierEvaluator0.getStatusFrequency());
      assertEquals(false, incrementalClassifierEvaluator0.getOutputPerClassInfoRetrievalStats());
  }

  @Test
  public void test3()  throws Throwable  {
      IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator();
      assertNotNull(incrementalClassifierEvaluator0);
      
      TextViewer textViewer0 = new TextViewer();
      incrementalClassifierEvaluator0.removeTextListener((TextListener) textViewer0);
      assertEquals("IncrementalClassifierEvaluator", incrementalClassifierEvaluator0.getCustomName());
      assertEquals(false, incrementalClassifierEvaluator0.getOutputPerClassInfoRetrievalStats());
      assertEquals(100, incrementalClassifierEvaluator0.getStatusFrequency());
      assertEquals(0, incrementalClassifierEvaluator0.getChartingEvalWindowSize());
  }

  @Test
  public void test4()  throws Throwable  {
      IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator();
      assertNotNull(incrementalClassifierEvaluator0);
      
      boolean boolean0 = incrementalClassifierEvaluator0.getOutputPerClassInfoRetrievalStats();
      assertEquals("IncrementalClassifierEvaluator", incrementalClassifierEvaluator0.getCustomName());
      assertEquals(false, boolean0);
      assertEquals(100, incrementalClassifierEvaluator0.getStatusFrequency());
      assertEquals(0, incrementalClassifierEvaluator0.getChartingEvalWindowSize());
  }

  @Test
  public void test5()  throws Throwable  {
      IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator();
      assertNotNull(incrementalClassifierEvaluator0);
      
      String string0 = incrementalClassifierEvaluator0.statusFrequencyTipText();
      assertEquals(100, incrementalClassifierEvaluator0.getStatusFrequency());
      assertEquals("How often to report progress to the status bar.", string0);
      assertEquals("IncrementalClassifierEvaluator", incrementalClassifierEvaluator0.getCustomName());
      assertEquals(0, incrementalClassifierEvaluator0.getChartingEvalWindowSize());
      assertEquals(false, incrementalClassifierEvaluator0.getOutputPerClassInfoRetrievalStats());
  }

  @Test
  public void test6()  throws Throwable  {
      IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator();
      assertNotNull(incrementalClassifierEvaluator0);
      
      incrementalClassifierEvaluator0.addChartListener((ChartListener) null);
      assertEquals(0, incrementalClassifierEvaluator0.getChartingEvalWindowSize());
      assertEquals(false, incrementalClassifierEvaluator0.getOutputPerClassInfoRetrievalStats());
      assertEquals("IncrementalClassifierEvaluator", incrementalClassifierEvaluator0.getCustomName());
      assertEquals(100, incrementalClassifierEvaluator0.getStatusFrequency());
  }

  @Test
  public void test7()  throws Throwable  {
      IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator();
      assertNotNull(incrementalClassifierEvaluator0);
      
      String string0 = incrementalClassifierEvaluator0.chartingEvalWindowSizeTipText();
      assertEquals(0, incrementalClassifierEvaluator0.getChartingEvalWindowSize());
      assertEquals("IncrementalClassifierEvaluator", incrementalClassifierEvaluator0.getCustomName());
      assertEquals("For charting only, specify a sliding window size over which to compute performance stats. <= 0 means eval on whole stream", string0);
      assertEquals(100, incrementalClassifierEvaluator0.getStatusFrequency());
      assertEquals(false, incrementalClassifierEvaluator0.getOutputPerClassInfoRetrievalStats());
  }

  @Test
  public void test8()  throws Throwable  {
      IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator();
      assertNotNull(incrementalClassifierEvaluator0);
      
      incrementalClassifierEvaluator0.setStatusFrequency((-4));
      assertEquals(-4, incrementalClassifierEvaluator0.getStatusFrequency());
      assertEquals(0, incrementalClassifierEvaluator0.getChartingEvalWindowSize());
  }

  @Test
  public void test9()  throws Throwable  {
      IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator();
      assertNotNull(incrementalClassifierEvaluator0);
      
      boolean boolean0 = incrementalClassifierEvaluator0.isBusy();
      assertEquals(false, incrementalClassifierEvaluator0.getOutputPerClassInfoRetrievalStats());
      assertEquals(false, boolean0);
      assertEquals(100, incrementalClassifierEvaluator0.getStatusFrequency());
      assertEquals("IncrementalClassifierEvaluator", incrementalClassifierEvaluator0.getCustomName());
      assertEquals(0, incrementalClassifierEvaluator0.getChartingEvalWindowSize());
  }

  @Test
  public void test10()  throws Throwable  {
      IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator();
      assertNotNull(incrementalClassifierEvaluator0);
      
      String string0 = incrementalClassifierEvaluator0.globalInfo();
      assertEquals("IncrementalClassifierEvaluator", incrementalClassifierEvaluator0.getCustomName());
      assertEquals("Evaluate the performance of incrementally trained classifiers.", string0);
      assertEquals(100, incrementalClassifierEvaluator0.getStatusFrequency());
      assertEquals(0, incrementalClassifierEvaluator0.getChartingEvalWindowSize());
      assertEquals(false, incrementalClassifierEvaluator0.getOutputPerClassInfoRetrievalStats());
  }

  @Test
  public void test11()  throws Throwable  {
      IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator();
      assertNotNull(incrementalClassifierEvaluator0);
      
      String string0 = incrementalClassifierEvaluator0.getCustomName();
      assertEquals("IncrementalClassifierEvaluator", string0);
      assertEquals(false, incrementalClassifierEvaluator0.getOutputPerClassInfoRetrievalStats());
      assertEquals(0, incrementalClassifierEvaluator0.getChartingEvalWindowSize());
      assertNotNull(string0);
      assertEquals(100, incrementalClassifierEvaluator0.getStatusFrequency());
  }

  @Test
  public void test12()  throws Throwable  {
      IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator();
      assertNotNull(incrementalClassifierEvaluator0);
      
      int int0 = incrementalClassifierEvaluator0.getStatusFrequency();
      assertEquals(false, incrementalClassifierEvaluator0.getOutputPerClassInfoRetrievalStats());
      assertEquals(100, int0);
      assertEquals("IncrementalClassifierEvaluator", incrementalClassifierEvaluator0.getCustomName());
      assertEquals(0, incrementalClassifierEvaluator0.getChartingEvalWindowSize());
  }

  @Test
  public void test13()  throws Throwable  {
      IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator();
      assertNotNull(incrementalClassifierEvaluator0);
      
      TextViewer textViewer0 = new TextViewer();
      incrementalClassifierEvaluator0.addTextListener((TextListener) textViewer0);
      assertEquals(0, incrementalClassifierEvaluator0.getChartingEvalWindowSize());
      assertEquals("IncrementalClassifierEvaluator", incrementalClassifierEvaluator0.getCustomName());
      assertEquals(100, incrementalClassifierEvaluator0.getStatusFrequency());
      assertEquals(false, incrementalClassifierEvaluator0.getOutputPerClassInfoRetrievalStats());
  }

  @Test
  public void test14()  throws Throwable  {
      IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator();
      assertNotNull(incrementalClassifierEvaluator0);
      assertEquals("IncrementalClassifierEvaluator", incrementalClassifierEvaluator0.getCustomName());
      
      incrementalClassifierEvaluator0.setCustomName("");
      assertEquals("", incrementalClassifierEvaluator0.getCustomName());
      assertEquals(100, incrementalClassifierEvaluator0.getStatusFrequency());
  }

  @Test
  public void test15()  throws Throwable  {
      IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator();
      assertNotNull(incrementalClassifierEvaluator0);
      
      String string0 = incrementalClassifierEvaluator0.outputPerClassInfoRetrievalStatsTipText();
      assertEquals(0, incrementalClassifierEvaluator0.getChartingEvalWindowSize());
      assertEquals(false, incrementalClassifierEvaluator0.getOutputPerClassInfoRetrievalStats());
      assertEquals("IncrementalClassifierEvaluator", incrementalClassifierEvaluator0.getCustomName());
      assertEquals("Output per-class info retrieval stats. If set to true, predictions get stored so that stats such as AUC can be computed. Note: this consumes some memory.", string0);
      assertEquals(100, incrementalClassifierEvaluator0.getStatusFrequency());
  }

  @Test
  public void test16()  throws Throwable  {
      IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator();
      assertNotNull(incrementalClassifierEvaluator0);
      
      incrementalClassifierEvaluator0.setChartingEvalWindowSize(104);
      assertEquals(104, incrementalClassifierEvaluator0.getChartingEvalWindowSize());
  }

  @Test
  public void test17()  throws Throwable  {
      IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator();
      assertNotNull(incrementalClassifierEvaluator0);
      
      SGDText sGDText0 = new SGDText();
      IncrementalClassifierEvent incrementalClassifierEvent0 = new IncrementalClassifierEvent((Object) "The stemming algorithm to use on the words.", (Classifier) sGDText0, (Instances) null);
      incrementalClassifierEvent0.setStatus((-557));
      incrementalClassifierEvaluator0.acceptClassifier(incrementalClassifierEvent0);
      assertEquals(100, incrementalClassifierEvaluator0.getStatusFrequency());
      assertEquals(false, incrementalClassifierEvaluator0.getOutputPerClassInfoRetrievalStats());
      assertEquals(0, incrementalClassifierEvaluator0.getChartingEvalWindowSize());
      assertEquals("IncrementalClassifierEvaluator", incrementalClassifierEvaluator0.getCustomName());
  }

  @Test
  public void test18()  throws Throwable  {
      IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator();
      assertNotNull(incrementalClassifierEvaluator0);
      
      SGDText sGDText0 = new SGDText();
      IncrementalClassifierEvent incrementalClassifierEvent0 = new IncrementalClassifierEvent((Object) "The stemming algorithm to use on the words.", (Classifier) sGDText0, (Instances) null);
      incrementalClassifierEvaluator0.acceptClassifier(incrementalClassifierEvent0);
      assertEquals(0, incrementalClassifierEvaluator0.getChartingEvalWindowSize());
      assertEquals(false, incrementalClassifierEvaluator0.getOutputPerClassInfoRetrievalStats());
      assertEquals(100, incrementalClassifierEvaluator0.getStatusFrequency());
      assertEquals("IncrementalClassifierEvaluator", incrementalClassifierEvaluator0.getCustomName());
  }

  @Test
  public void test19()  throws Throwable  {
      IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator();
      assertNotNull(incrementalClassifierEvaluator0);
      
      boolean boolean0 = incrementalClassifierEvaluator0.eventGeneratable("");
      assertEquals(false, boolean0);
      assertEquals(100, incrementalClassifierEvaluator0.getStatusFrequency());
      assertEquals("IncrementalClassifierEvaluator", incrementalClassifierEvaluator0.getCustomName());
      assertEquals(false, incrementalClassifierEvaluator0.getOutputPerClassInfoRetrievalStats());
      assertEquals(0, incrementalClassifierEvaluator0.getChartingEvalWindowSize());
  }
}
