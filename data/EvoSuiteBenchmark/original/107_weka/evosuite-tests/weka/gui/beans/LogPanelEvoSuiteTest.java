/*
 * This file was automatically generated by EvoSuite
 */

package weka.gui.beans;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.swing.JTable;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import weka.gui.beans.LogPanel;

@RunWith(EvoSuiteRunner.class)
public class LogPanelEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      LogPanel logPanel0 = new LogPanel();
      logPanel0.statusMessage("");
      logPanel0.clearStatus();
      assertEquals(true, logPanel0.isOptimizedDrawingEnabled());
  }

  @Test
  public void test1()  throws Throwable  {
      LogPanel logPanel0 = new LogPanel();
      logPanel0.statusMessage("INTERRUPTEDstpped.");
      logPanel0.statusMessage("INTERRUPTEDstpped.");
      assertEquals(true, logPanel0.isDoubleBuffered());
  }

  @Test
  public void test2()  throws Throwable  {
      LogPanel logPanel0 = new LogPanel();
      assertNotNull(logPanel0);
      
      JTable jTable0 = logPanel0.getStatusTable();
      assertNotNull(jTable0);
      
      // Undeclared exception!
      try {
        jTable0.getColumnClass(888);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 888 >= 4
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          LogPanel logPanel0 = new LogPanel();
          logPanel0.logMessage("kemve");
          assertEquals(true, logPanel0.isRequestFocusEnabled());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
      LogPanel logPanel0 = new LogPanel();
      logPanel0.clearStatus();
      assertEquals(false, logPanel0.requestDefaultFocus());
  }

  @Test
  public void test5()  throws Throwable  {
      LogPanel logPanel0 = new LogPanel();
      logPanel0.statusMessage("Step 1|Some options here|finished");
      logPanel0.statusMessage("Step 1|Some options here|finished");
      assertEquals(false, logPanel0.isLightweight());
  }

  @Test
  public void test6()  throws Throwable  {
      LogPanel logPanel0 = new LogPanel();
      logPanel0.statusMessage("V>$vZv|Y");
      logPanel0.statusMessage("V>$vZv|Y");
      assertEquals(true, logPanel0.isOptimizedDrawingEnabled());
  }

  @Test
  public void test7()  throws Throwable  {
      LogPanel logPanel0 = new LogPanel();
      logPanel0.statusMessage("stopped.");
      logPanel0.statusMessage("stopped.");
      assertEquals(true, logPanel0.isEnabled());
  }

  @Test
  public void test8()  throws Throwable  {
      LogPanel logPanel0 = new LogPanel();
      logPanel0.statusMessage("remove.");
      assertEquals(false, logPanel0.isCursorSet());
  }
}
