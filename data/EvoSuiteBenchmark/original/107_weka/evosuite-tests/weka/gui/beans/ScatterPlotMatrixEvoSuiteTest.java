/*
 * This file was automatically generated by EvoSuite
 */

package weka.gui.beans;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import org.junit.BeforeClass;
import weka.core.Attribute;
import weka.core.Instances;
import weka.gui.beans.KnowledgeFlowApp;
import weka.gui.beans.ScatterPlotMatrix;

@RunWith(EvoSuiteRunner.class)
public class ScatterPlotMatrixEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      scatterPlotMatrix0.setLoaded(false);
      assertEquals(0, scatterPlotMatrix0.countComponents());
      assertEquals(0, scatterPlotMatrix0.getComponentCount());
  }

  @Test
  public void test1()  throws Throwable  {
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      scatterPlotMatrix0.setMainKFPerspective((KnowledgeFlowApp.MainKFPerspective) null);
      assertEquals(0, scatterPlotMatrix0.getComponentCount());
      assertEquals("weka.gui.beans.ScatterPlotMatrix[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", scatterPlotMatrix0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      scatterPlotMatrix0.appearanceDesign();
      assertEquals("ScatterPlotMatrix", scatterPlotMatrix0.getCustomName());
  }

  @Test
  public void test3()  throws Throwable  {
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      boolean boolean0 = scatterPlotMatrix0.acceptsInstances();
      assertEquals(0, scatterPlotMatrix0.getComponentCount());
      assertEquals(true, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      String string0 = scatterPlotMatrix0.globalInfo();
      assertEquals("Visualize incoming data/training/test sets in a scatter plot matrix.", string0);
      assertEquals("weka.gui.beans.ScatterPlotMatrix[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", scatterPlotMatrix0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      assertEquals("weka.gui.beans.ScatterPlotMatrix[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", scatterPlotMatrix0.toString());
      
      scatterPlotMatrix0.appearanceFinal();
      scatterPlotMatrix0.setUpFinal();
      assertEquals("weka.gui.beans.ScatterPlotMatrix[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", scatterPlotMatrix0.toString());
      assertEquals(1, scatterPlotMatrix0.getComponentCount());
  }

  @Test
  public void test6()  throws Throwable  {
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      String string0 = scatterPlotMatrix0.getPerspectiveTitle();
      assertEquals("Scatter plot matrix", string0);
      assertEquals(0, scatterPlotMatrix0.getComponentCount());
  }

  @Test
  public void test7()  throws Throwable  {
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      String string0 = scatterPlotMatrix0.getPerspectiveTipText();
      assertEquals("Scatter plot matrix", string0);
      assertEquals(0, scatterPlotMatrix0.countComponents());
  }

  @Test
  public void test8()  throws Throwable  {
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      scatterPlotMatrix0.setActive(false);
      assertEquals(0, scatterPlotMatrix0.getComponentCount());
      assertEquals("weka.gui.beans.ScatterPlotMatrix[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", scatterPlotMatrix0.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("4", arrayList0, 6);
      try {
        scatterPlotMatrix0.setInstances(instances0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      ImageIcon imageIcon0 = (ImageIcon)scatterPlotMatrix0.getPerspectiveIcon();
      assertEquals(0, scatterPlotMatrix0.getComponentCount());
      assertNotNull(imageIcon0);
      assertEquals("weka.gui.beans.ScatterPlotMatrix[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", scatterPlotMatrix0.toString());
  }

  @Test
  public void test11()  throws Throwable  {
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      // Undeclared exception!
      try {
        scatterPlotMatrix0.performRequest("R{z$3J-8HA");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * R{z$3J-8HA not supported (ScatterPlotMatrix)
         */
      }
  }
}
