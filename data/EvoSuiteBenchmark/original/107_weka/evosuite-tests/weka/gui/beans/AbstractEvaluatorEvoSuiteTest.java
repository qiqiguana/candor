/*
 * This file was automatically generated by EvoSuite
 */

package weka.gui.beans;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.beans.EventSetDescriptor;
import org.junit.BeforeClass;
import weka.gui.LogPanel;
import weka.gui.Logger;
import weka.gui.WekaTaskMonitor;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.ClassifierPerformanceEvaluator;
import weka.gui.beans.ClustererPerformanceEvaluator;
import weka.gui.beans.IncrementalClassifierEvaluator;

@RunWith(EvoSuiteRunner.class)
public class AbstractEvaluatorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator();
      assertNotNull(incrementalClassifierEvaluator0);
      
      LogPanel logPanel0 = new LogPanel((WekaTaskMonitor) null, false);
      incrementalClassifierEvaluator0.setLog((Logger) logPanel0);
      assertEquals("weka.gui.beans.IncrementalClassifierEvaluator[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", incrementalClassifierEvaluator0.toString());
      assertEquals(1, incrementalClassifierEvaluator0.getComponentCount());
      assertEquals(1, incrementalClassifierEvaluator0.countComponents());
  }

  @Test
  public void test1()  throws Throwable  {
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      assertNotNull(classifierPerformanceEvaluator0);
      
      ClustererPerformanceEvaluator clustererPerformanceEvaluator0 = new ClustererPerformanceEvaluator();
      BeanVisual beanVisual0 = classifierPerformanceEvaluator0.getVisual();
      assertNotNull(beanVisual0);
      
      clustererPerformanceEvaluator0.setVisual(beanVisual0);
      assertEquals("weka.gui.beans.BeanVisual[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=java.awt.Dimension[width=67,height=68],minimumSize=java.awt.Dimension[width=67,height=68],preferredSize=java.awt.Dimension[width=67,height=68]]", beanVisual0.toString());
      assertEquals(1, classifierPerformanceEvaluator0.countComponents());
      assertEquals("weka.gui.beans.ClassifierPerformanceEvaluator[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", classifierPerformanceEvaluator0.toString());
      assertEquals(1, clustererPerformanceEvaluator0.countComponents());
  }

  @Test
  public void test2()  throws Throwable  {
      IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator();
      assertNotNull(incrementalClassifierEvaluator0);
      
      incrementalClassifierEvaluator0.useDefaultVisual();
      assertEquals(1, incrementalClassifierEvaluator0.countComponents());
      assertEquals("weka.gui.beans.IncrementalClassifierEvaluator[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", incrementalClassifierEvaluator0.toString());
      assertEquals(1, incrementalClassifierEvaluator0.getComponentCount());
  }

  @Test
  public void test3()  throws Throwable  {
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      assertNotNull(classifierPerformanceEvaluator0);
      
      // Undeclared exception!
      try {
        classifierPerformanceEvaluator0.connectionAllowed((EventSetDescriptor) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator();
      assertNotNull(incrementalClassifierEvaluator0);
      
      incrementalClassifierEvaluator0.connectionNotification("OE", "OE");
      incrementalClassifierEvaluator0.connectionNotification("OE", "Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value");
      assertEquals(1, incrementalClassifierEvaluator0.getComponentCount());
      assertEquals("weka.gui.beans.IncrementalClassifierEvaluator[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", incrementalClassifierEvaluator0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator();
      assertNotNull(incrementalClassifierEvaluator0);
      
      incrementalClassifierEvaluator0.disconnectionNotification("`_Wl6<u&IsLCh", "Number of bins for discretization.");
      assertEquals("weka.gui.beans.IncrementalClassifierEvaluator[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", incrementalClassifierEvaluator0.toString());
      assertEquals(1, incrementalClassifierEvaluator0.countComponents());
  }

  @Test
  public void test6()  throws Throwable  {
      IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator();
      assertNotNull(incrementalClassifierEvaluator0);
      
      incrementalClassifierEvaluator0.disconnectionNotification("`_Wl6<u&IsLCh", (Object) null);
      assertEquals("weka.gui.beans.IncrementalClassifierEvaluator[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", incrementalClassifierEvaluator0.toString());
      assertEquals(1, incrementalClassifierEvaluator0.countComponents());
      assertEquals(1, incrementalClassifierEvaluator0.getComponentCount());
  }
}
