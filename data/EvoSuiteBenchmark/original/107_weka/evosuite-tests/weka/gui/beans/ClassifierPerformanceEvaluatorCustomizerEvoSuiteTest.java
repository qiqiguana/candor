/*
 * This file was automatically generated by EvoSuite
 */

package weka.gui.beans;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.awt.Window;
import java.beans.PropertyChangeListener;
import java.beans.beancontext.BeanContextSupport;
import javax.swing.plaf.metal.MetalRootPaneUI;
import org.junit.BeforeClass;
import weka.gui.beans.BeanCustomizer;
import weka.gui.beans.ClassifierPerformanceEvaluatorCustomizer;

@RunWith(EvoSuiteRunner.class)
public class ClassifierPerformanceEvaluatorCustomizerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ClassifierPerformanceEvaluatorCustomizer classifierPerformanceEvaluatorCustomizer0 = new ClassifierPerformanceEvaluatorCustomizer();
      assertNotNull(classifierPerformanceEvaluatorCustomizer0);
      
      classifierPerformanceEvaluatorCustomizer0.setModifiedListener((BeanCustomizer.ModifyListener) null);
      assertEquals(3, classifierPerformanceEvaluatorCustomizer0.countComponents());
      assertEquals(3, classifierPerformanceEvaluatorCustomizer0.getComponentCount());
  }

  @Test
  public void test1()  throws Throwable  {
      ClassifierPerformanceEvaluatorCustomizer classifierPerformanceEvaluatorCustomizer0 = new ClassifierPerformanceEvaluatorCustomizer();
      assertNotNull(classifierPerformanceEvaluatorCustomizer0);
      
      BeanContextSupport beanContextSupport0 = new BeanContextSupport();
      classifierPerformanceEvaluatorCustomizer0.removePropertyChangeListener((PropertyChangeListener) beanContextSupport0);
      assertEquals(3, classifierPerformanceEvaluatorCustomizer0.countComponents());
      assertEquals(3, classifierPerformanceEvaluatorCustomizer0.getComponentCount());
  }

  @Test
  public void test2()  throws Throwable  {
      ClassifierPerformanceEvaluatorCustomizer classifierPerformanceEvaluatorCustomizer0 = new ClassifierPerformanceEvaluatorCustomizer();
      assertNotNull(classifierPerformanceEvaluatorCustomizer0);
      
      // Undeclared exception!
      try {
        classifierPerformanceEvaluatorCustomizer0.setObject((Object) "BestFirst:\n\nSearches the space of attribute subsets by greedy hillclimbing augmented with a backtracking facility. Setting the number of consecutive non-improving nodes allowed controls the level of backtracking done. Best first may start with the empty set of attributes and search forward, or start with the full set of attributes and search backward, or start at any point and search in both directions (by considering all possible single attribute additions and deletions at a given point).\n");
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * java.lang.String cannot be cast to weka.gui.beans.ClassifierPerformanceEvaluator
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      ClassifierPerformanceEvaluatorCustomizer classifierPerformanceEvaluatorCustomizer0 = new ClassifierPerformanceEvaluatorCustomizer();
      assertNotNull(classifierPerformanceEvaluatorCustomizer0);
      
      classifierPerformanceEvaluatorCustomizer0.setParentWindow((Window) null);
      assertEquals(3, classifierPerformanceEvaluatorCustomizer0.countComponents());
      assertEquals(3, classifierPerformanceEvaluatorCustomizer0.getComponentCount());
  }

  @Test
  public void test4()  throws Throwable  {
      ClassifierPerformanceEvaluatorCustomizer classifierPerformanceEvaluatorCustomizer0 = new ClassifierPerformanceEvaluatorCustomizer();
      assertNotNull(classifierPerformanceEvaluatorCustomizer0);
      
      // Undeclared exception!
      try {
        classifierPerformanceEvaluatorCustomizer0.customizerClosing();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      ClassifierPerformanceEvaluatorCustomizer classifierPerformanceEvaluatorCustomizer0 = new ClassifierPerformanceEvaluatorCustomizer();
      assertNotNull(classifierPerformanceEvaluatorCustomizer0);
      
      MetalRootPaneUI metalRootPaneUI0 = new MetalRootPaneUI();
      classifierPerformanceEvaluatorCustomizer0.addPropertyChangeListener((PropertyChangeListener) metalRootPaneUI0);
      assertEquals(3, classifierPerformanceEvaluatorCustomizer0.getComponentCount());
      assertEquals(3, classifierPerformanceEvaluatorCustomizer0.countComponents());
  }
}
