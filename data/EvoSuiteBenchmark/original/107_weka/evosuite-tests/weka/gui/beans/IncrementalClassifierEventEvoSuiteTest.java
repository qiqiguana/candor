/*
 * This file was automatically generated by EvoSuite
 */

package weka.gui.beans;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import weka.classifiers.Classifier;
import weka.classifiers.meta.ClassificationViaRegression;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.gui.beans.IncrementalClassifierEvent;

@RunWith(EvoSuiteRunner.class)
public class IncrementalClassifierEventEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      IncrementalClassifierEvent incrementalClassifierEvent0 = new IncrementalClassifierEvent((Object) "The base for the expansion constant.", (Classifier) null, (Instances) null);
      incrementalClassifierEvent0.setStructure((Instances) null);
      assertEquals(0, incrementalClassifierEvent0.getStatus());
  }

  @Test
  public void test1()  throws Throwable  {
      IncrementalClassifierEvent incrementalClassifierEvent0 = new IncrementalClassifierEvent((Object) "");
      Instance instance0 = incrementalClassifierEvent0.getCurrentInstance();
      assertNull(instance0);
  }

  @Test
  public void test2()  throws Throwable  {
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      IncrementalClassifierEvent incrementalClassifierEvent0 = new IncrementalClassifierEvent((Object) "Class for doing classification using regression methods. Class is binarized and one regression model is built for each class value. For more information, see, for example\n\nE. Frank, Y. Wang, S. Inglis, G. Holmes, I.H. Witten (1998). Using model trees for classification. Machine Learning. 32(1):63-76.", (Classifier) classificationViaRegression0, (Instance) null, 10);
      assertEquals(10, incrementalClassifierEvent0.getStatus());
  }

  @Test
  public void test3()  throws Throwable  {
      IncrementalClassifierEvent incrementalClassifierEvent0 = new IncrementalClassifierEvent((Object) "The base for the expansion constant.", (Classifier) null, (Instances) null);
      incrementalClassifierEvent0.setClassifier((Classifier) null);
      assertEquals(0, incrementalClassifierEvent0.getStatus());
  }

  @Test
  public void test4()  throws Throwable  {
      IncrementalClassifierEvent incrementalClassifierEvent0 = new IncrementalClassifierEvent((Object) "The number of optimization runs.");
      Classifier classifier0 = incrementalClassifierEvent0.getClassifier();
      assertNull(classifier0);
  }

  @Test
  public void test5()  throws Throwable  {
      IncrementalClassifierEvent incrementalClassifierEvent0 = new IncrementalClassifierEvent((Object) "The number of optimization runs.");
      incrementalClassifierEvent0.setStatus((-1));
      assertEquals(-1, incrementalClassifierEvent0.getStatus());
  }

  @Test
  public void test6()  throws Throwable  {
      IncrementalClassifierEvent incrementalClassifierEvent0 = new IncrementalClassifierEvent((Object) "Implementation of the voted perceptron algorithm by Freund and Schapire. Globally replaces all missing values, and transforms nominal attributes into binary ones.\n\nFor more information, see:\n\nY. Freund, R. E. Schapire: Large margin classification using the perceptron algorithm. In: 11th Annual Conference on Computational Learning Theory, New York, NY, 209-217, 1998.");
      int int0 = incrementalClassifierEvent0.getStatus();
      assertEquals(0, int0);
  }

  @Test
  public void test7()  throws Throwable  {
      IncrementalClassifierEvent incrementalClassifierEvent0 = new IncrementalClassifierEvent((Object) "The number of optimization runs.");
      Instances instances0 = incrementalClassifierEvent0.getStructure();
      assertNull(instances0);
  }

  @Test
  public void test8()  throws Throwable  {
      IncrementalClassifierEvent incrementalClassifierEvent0 = new IncrementalClassifierEvent((Object) "");
      double[] doubleArray0 = new double[8];
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      incrementalClassifierEvent0.setCurrentInstance((Instance) denseInstance0);
      assertEquals("weka.gui.beans.IncrementalClassifierEvent[source=]", incrementalClassifierEvent0.toString());
  }
}
