/*
 * This file was automatically generated by EvoSuite
 */

package weka.gui.beans;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.awt.HeadlessException;
import java.beans.EventSetDescriptor;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import weka.clusterers.EM;
import weka.clusterers.FarthestFirst;
import weka.clusterers.FilteredClusterer;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.gui.Logger;
import weka.gui.beans.BatchClustererListener;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.ClassAssigner;
import weka.gui.beans.Clusterer;
import weka.gui.beans.ConfigurationListener;
import weka.gui.beans.GraphListener;
import weka.gui.beans.GraphViewer;
import weka.gui.beans.SerializedModelSaver;
import weka.gui.beans.TestSetEvent;
import weka.gui.beans.TextListener;
import weka.gui.beans.TextViewer;
import weka.gui.beans.TrainingSetEvent;

@RunWith(EvoSuiteRunner.class)
public class ClustererEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      Clusterer clusterer0 = new Clusterer();
      assertNotNull(clusterer0);
      
      // Undeclared exception!
      try {
        clusterer0.connectionAllowed((EventSetDescriptor) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      Clusterer clusterer0 = new Clusterer();
      assertNotNull(clusterer0);
      
      EM eM0 = (EM)clusterer0.getWrappedAlgorithm();
      assertEquals("EM", clusterer0.getCustomName());
      assertNotNull(eM0);
      assertEquals("weka.gui.beans.Clusterer[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", clusterer0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      Clusterer clusterer0 = new Clusterer();
      assertNotNull(clusterer0);
      
      clusterer0.disconnectionNotification("dIxgPm1R[>\"a", "job-state-reason");
      assertEquals("EM", clusterer0.getCustomName());
      assertEquals("weka.gui.beans.Clusterer[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", clusterer0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      Clusterer clusterer0 = new Clusterer();
      assertEquals("EM", clusterer0.getCustomName());
      assertNotNull(clusterer0);
      
      clusterer0.setCustomName("^");
      assertEquals("^", clusterer0.getCustomName());
  }

  @Test
  public void test4()  throws Throwable  {
      Clusterer clusterer0 = new Clusterer();
      assertNotNull(clusterer0);
      
      GraphViewer graphViewer0 = new GraphViewer();
      clusterer0.addGraphListener((GraphListener) graphViewer0);
      assertEquals("weka.gui.beans.Clusterer[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", clusterer0.toString());
      assertEquals("EM", clusterer0.getCustomName());
  }

  @Test
  public void test5()  throws Throwable  {
      Clusterer clusterer0 = new Clusterer();
      assertNotNull(clusterer0);
      
      clusterer0.removeTextListener((TextListener) null);
      assertEquals("EM", clusterer0.getCustomName());
      assertEquals("weka.gui.beans.Clusterer[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", clusterer0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      Clusterer clusterer0 = new Clusterer();
      assertNotNull(clusterer0);
      
      // Undeclared exception!
      try {
        clusterer0.eventGeneratable((EventSetDescriptor) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      Clusterer clusterer0 = new Clusterer();
      assertNotNull(clusterer0);
      
      GraphViewer graphViewer0 = new GraphViewer();
      clusterer0.removeGraphListener((GraphListener) graphViewer0);
      assertEquals("EM", clusterer0.getCustomName());
      assertEquals("weka.gui.beans.Clusterer[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", clusterer0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      Clusterer clusterer0 = new Clusterer();
      assertNotNull(clusterer0);
      
      String string0 = clusterer0.globalInfo();
      assertEquals("<html><font color=blue>Simple EM (expectation maximisation) class.\n\nEM assigns a probability distribution to each instance which indicates the probability of it belonging to each of the clusters</font><br><br> EM can decide how many clusters to create by cross validation, or you may specify apriori how many clusters to generate.<br><br>The cross validation performed to determine the number of clusters is done in the following steps:<br>1. the number of clusters is set to 1<br>2. the training set is split randomly into 10 folds.<br>3. EM is performed 10 times using the 10 folds the usual CV way.<br>4. the loglikelihood is averaged over all 10 results.<br>5.<br>if loglikelihood has increased the number of clusters is increased by 1 and the program continues at step 2.<br><br><br>The number of folds is fixed to 10, as long as the number of instances in the training set is not smaller 10.<br>If this is the case the number of folds is set equal to the number of instances.<br></html>", string0);
      assertEquals("EM", clusterer0.getCustomName());
      assertEquals("weka.gui.beans.Clusterer[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", clusterer0.toString());
      assertNotNull(string0);
  }

  @Test
  public void test9()  throws Throwable  {
      Clusterer clusterer0 = new Clusterer();
      assertNotNull(clusterer0);
      
      TextViewer textViewer0 = new TextViewer();
      clusterer0.addTextListener((TextListener) textViewer0);
      assertEquals("weka.gui.beans.Clusterer[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", clusterer0.toString());
      assertEquals("EM", clusterer0.getCustomName());
  }

  @Test
  public void test10()  throws Throwable  {
      Clusterer clusterer0 = new Clusterer();
      assertNotNull(clusterer0);
      
      clusterer0.setLog((Logger) null);
      assertEquals("EM", clusterer0.getCustomName());
      assertEquals("weka.gui.beans.Clusterer[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", clusterer0.toString());
  }

  @Test
  public void test11()  throws Throwable  {
      Clusterer clusterer0 = new Clusterer();
      assertNotNull(clusterer0);
      
      BeanVisual beanVisual0 = clusterer0.getVisual();
      assertNotNull(beanVisual0);
      assertEquals("weka.gui.beans.Clusterer[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", clusterer0.toString());
      assertEquals("weka/gui/beans/icons/EM_animated.gif", beanVisual0.getAnimatedIconPath());
      assertEquals("weka.gui.beans.BeanVisual[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=java.awt.Dimension[width=67,height=68],minimumSize=java.awt.Dimension[width=67,height=68],preferredSize=java.awt.Dimension[width=67,height=68]]", beanVisual0.toString());
      assertEquals("EM", clusterer0.getCustomName());
  }

  @Test
  public void test12()  throws Throwable  {
      Clusterer clusterer0 = new Clusterer();
      assertNotNull(clusterer0);
      
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      clusterer0.addBatchClustererListener((BatchClustererListener) serializedModelSaver0);
      assertEquals("weka.gui.beans.Clusterer[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", clusterer0.toString());
      assertEquals("EM", clusterer0.getCustomName());
  }

  @Test
  public void test13()  throws Throwable  {
      Clusterer clusterer0 = new Clusterer();
      assertNotNull(clusterer0);
      
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      clusterer0.setClusterer((weka.clusterers.Clusterer) filteredClusterer0);
      assertEquals("<html><font color=blue>Class for running an arbitrary clusterer on data that has been passed through an arbitrary filter</font><br><br> Like the clusterer, the structure of the filter is based exclusively on the training data and test instances will be processed by the filter without changing their structure.<br></html>", clusterer0.globalInfo());
      assertEquals("FilteredClusterer", clusterer0.getCustomName());
  }

  @Test
  public void test14()  throws Throwable  {
      Clusterer clusterer0 = new Clusterer();
      assertNotNull(clusterer0);
      
      String string0 = clusterer0.getCustomName();
      assertEquals("weka.gui.beans.Clusterer[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", clusterer0.toString());
      assertEquals("EM", string0);
      assertNotNull(string0);
  }

  @Test
  public void test15()  throws Throwable  {
      Clusterer clusterer0 = new Clusterer();
      assertNotNull(clusterer0);
      assertEquals("EM", clusterer0.getCustomName());
      
      ClassAssigner classAssigner0 = new ClassAssigner();
      BeanVisual beanVisual0 = classAssigner0.getVisual();
      clusterer0.setVisual(beanVisual0);
      assertEquals("weka.gui.beans.Clusterer[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", clusterer0.toString());
  }

  @Test
  public void test16()  throws Throwable  {
      Clusterer clusterer0 = new Clusterer();
      assertNotNull(clusterer0);
      
      clusterer0.removeConfigurationListener((ConfigurationListener) null);
      assertEquals("EM", clusterer0.getCustomName());
      assertEquals("weka.gui.beans.Clusterer[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", clusterer0.toString());
  }

  @Test
  public void test17()  throws Throwable  {
      Clusterer clusterer0 = new Clusterer();
      assertNotNull(clusterer0);
      
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      clusterer0.removeBatchClustererListener((BatchClustererListener) serializedModelSaver0);
      assertEquals("EM", clusterer0.getCustomName());
      assertEquals("weka.gui.beans.Clusterer[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", clusterer0.toString());
  }

  @Test
  public void test18()  throws Throwable  {
      Clusterer clusterer0 = new Clusterer();
      assertNotNull(clusterer0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("4+Qu;ouA.", arrayList0, 0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(436);
      instances0.add((Instance) binarySparseInstance0);
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent((Object) instances0, instances0, 0, (-1574));
      clusterer0.acceptTrainingSet(trainingSetEvent0);
      assertEquals(false, clusterer0.isBusy());
      assertEquals("EM", clusterer0.getCustomName());
      assertEquals("weka.gui.beans.Clusterer[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", clusterer0.toString());
  }

  @Test
  public void test19()  throws Throwable  {
      Clusterer clusterer0 = new Clusterer();
      assertNotNull(clusterer0);
      
      FarthestFirst farthestFirst0 = new FarthestFirst();
      clusterer0.setClusterer((weka.clusterers.Clusterer) farthestFirst0);
      assertEquals("<html><font color=blue>Cluster data using the FarthestFirst algorithm.\n\nFor more information see:\n\nHochbaum, Shmoys (1985)</font><br><br> A best possible heuristic for the k-center problem.<br>Mathematics of Operations Research.<br>10(2):180-184.<br><br>Sanjoy Dasgupta: Performance Guarantees for Hierarchical Clustering.<br>In: 15th Annual Conference on Computational Learning Theory, 351-363, 2002.<br><br>Notes:<br>- works as a fast simple approximate clusterer<br>- modelled after SimpleKMeans, might be a useful initializer for it<br></html>", clusterer0.globalInfo());
      assertEquals("FarthestFirst", clusterer0.getCustomName());
  }

  @Test
  public void test20()  throws Throwable  {
      Clusterer clusterer0 = new Clusterer();
      assertNotNull(clusterer0);
      
      boolean boolean0 = clusterer0.hasIncomingBatchInstances();
      assertEquals("weka.gui.beans.Clusterer[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", clusterer0.toString());
      assertEquals(false, boolean0);
      assertEquals("EM", clusterer0.getCustomName());
  }

  @Test
  public void test21()  throws Throwable  {
      Clusterer clusterer0 = new Clusterer();
      assertNotNull(clusterer0);
      
      // Undeclared exception!
      try {
        clusterer0.setWrappedAlgorithm((Object) "");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * class java.lang.String : incorrect type of algorithm (Clusterer)
         */
      }
  }

  @Test
  public void test22()  throws Throwable  {
      Clusterer clusterer0 = new Clusterer();
      assertNotNull(clusterer0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 0);
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent((Object) instances0, instances0, 0, (-1574));
      clusterer0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("EM", clusterer0.getCustomName());
      assertEquals("weka.gui.beans.Clusterer[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", clusterer0.toString());
  }

  @Test
  public void test23()  throws Throwable  {
      Clusterer clusterer0 = new Clusterer();
      assertNotNull(clusterer0);
      
      TestSetEvent testSetEvent0 = new TestSetEvent((Object) "Set the number of evaluation tasks to run in parallel.", (Instances) null, (-1), 1615, (-853), (-853));
      clusterer0.acceptTestSet(testSetEvent0);
      assertEquals("EM", clusterer0.getCustomName());
      assertEquals("weka.gui.beans.Clusterer[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", clusterer0.toString());
  }

  @Test
  public void test24()  throws Throwable  {
      Clusterer clusterer0 = new Clusterer();
      assertNotNull(clusterer0);
      
      // Undeclared exception!
      try {
        clusterer0.connectionNotification("-", (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test25()  throws Throwable  {
      Clusterer clusterer0 = new Clusterer();
      assertNotNull(clusterer0);
      
      boolean boolean0 = clusterer0.isBusy();
      assertEquals("weka.gui.beans.Clusterer[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", clusterer0.toString());
      assertEquals("EM", clusterer0.getCustomName());
      assertEquals(false, boolean0);
  }

  @Test
  public void test26()  throws Throwable  {
      Clusterer clusterer0 = new Clusterer();
      assertNotNull(clusterer0);
      
      clusterer0.stop();
      assertEquals("weka.gui.beans.Clusterer[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", clusterer0.toString());
      assertEquals("EM", clusterer0.getCustomName());
  }

  @Test
  public void test27()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          Clusterer clusterer0 = new Clusterer();
          assertNotNull(clusterer0);
          
          // Undeclared exception!
          try {
            clusterer0.saveModel();
            fail("Expecting exception: HeadlessException");
          } catch(HeadlessException e) {
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test28()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          Clusterer clusterer0 = new Clusterer();
          assertNotNull(clusterer0);
          
          // Undeclared exception!
          try {
            clusterer0.loadModel();
            fail("Expecting exception: HeadlessException");
          } catch(HeadlessException e) {
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test29()  throws Throwable  {
      Clusterer clusterer0 = new Clusterer();
      assertNotNull(clusterer0);
      
      Enumeration<Object> enumeration0 = clusterer0.enumerateRequests();
      assertNotNull(enumeration0);
      assertEquals("EM", clusterer0.getCustomName());
      assertEquals("weka.gui.beans.Clusterer[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", clusterer0.toString());
  }

  @Test
  public void test30()  throws Throwable  {
      Clusterer clusterer0 = new Clusterer();
      assertNotNull(clusterer0);
      
      // Undeclared exception!
      try {
        clusterer0.performRequest("Cg9XQL W(g");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Cg9XQL W(g not supported (Clusterer)
         */
      }
  }

  @Test
  public void test31()  throws Throwable  {
      Clusterer clusterer0 = new Clusterer();
      assertNotNull(clusterer0);
      
      boolean boolean0 = clusterer0.eventGeneratable("k_K~r{Y(~#N?QA/");
      assertEquals("weka.gui.beans.Clusterer[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", clusterer0.toString());
      assertEquals(true, boolean0);
      assertEquals("EM", clusterer0.getCustomName());
  }
}
