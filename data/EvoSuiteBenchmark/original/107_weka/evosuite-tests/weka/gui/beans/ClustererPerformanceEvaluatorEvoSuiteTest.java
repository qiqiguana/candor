/*
 * This file was automatically generated by EvoSuite
 */

package weka.gui.beans;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Enumeration;
import org.junit.BeforeClass;
import weka.gui.beans.ClustererPerformanceEvaluator;
import weka.gui.beans.TextListener;
import weka.gui.beans.TextViewer;

@RunWith(EvoSuiteRunner.class)
public class ClustererPerformanceEvaluatorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ClustererPerformanceEvaluator clustererPerformanceEvaluator0 = new ClustererPerformanceEvaluator();
      assertNotNull(clustererPerformanceEvaluator0);
      
      TextViewer textViewer0 = new TextViewer();
      clustererPerformanceEvaluator0.removeTextListener((TextListener) textViewer0);
      assertEquals("ClustererPerformanceEvaluator", clustererPerformanceEvaluator0.getCustomName());
  }

  @Test
  public void test1()  throws Throwable  {
      ClustererPerformanceEvaluator clustererPerformanceEvaluator0 = new ClustererPerformanceEvaluator();
      assertNotNull(clustererPerformanceEvaluator0);
      
      TextViewer textViewer0 = new TextViewer();
      clustererPerformanceEvaluator0.addTextListener((TextListener) textViewer0);
      assertEquals("ClustererPerformanceEvaluator", clustererPerformanceEvaluator0.getCustomName());
  }

  @Test
  public void test2()  throws Throwable  {
      ClustererPerformanceEvaluator clustererPerformanceEvaluator0 = new ClustererPerformanceEvaluator();
      assertNotNull(clustererPerformanceEvaluator0);
      
      String string0 = clustererPerformanceEvaluator0.globalInfo();
      assertEquals("Evaluate the performance of batch trained clusterers.", string0);
      assertEquals("ClustererPerformanceEvaluator", clustererPerformanceEvaluator0.getCustomName());
  }

  @Test
  public void test3()  throws Throwable  {
      ClustererPerformanceEvaluator clustererPerformanceEvaluator0 = new ClustererPerformanceEvaluator();
      clustererPerformanceEvaluator0.setCustomName((String) null);
      assertEquals(true, clustererPerformanceEvaluator0.isBackgroundSet());
  }

  @Test
  public void test4()  throws Throwable  {
      ClustererPerformanceEvaluator clustererPerformanceEvaluator0 = new ClustererPerformanceEvaluator();
      assertNotNull(clustererPerformanceEvaluator0);
      
      String string0 = clustererPerformanceEvaluator0.getCustomName();
      assertEquals("ClustererPerformanceEvaluator", string0);
      assertNotNull(string0);
  }

  @Test
  public void test5()  throws Throwable  {
      ClustererPerformanceEvaluator clustererPerformanceEvaluator0 = new ClustererPerformanceEvaluator();
      assertNotNull(clustererPerformanceEvaluator0);
      
      boolean boolean0 = clustererPerformanceEvaluator0.isBusy();
      assertEquals("ClustererPerformanceEvaluator", clustererPerformanceEvaluator0.getCustomName());
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      ClustererPerformanceEvaluator clustererPerformanceEvaluator0 = new ClustererPerformanceEvaluator();
      assertNotNull(clustererPerformanceEvaluator0);
      
      clustererPerformanceEvaluator0.stop();
      assertEquals("ClustererPerformanceEvaluator", clustererPerformanceEvaluator0.getCustomName());
  }

  @Test
  public void test7()  throws Throwable  {
      ClustererPerformanceEvaluator clustererPerformanceEvaluator0 = new ClustererPerformanceEvaluator();
      assertNotNull(clustererPerformanceEvaluator0);
      
      Enumeration<Object> enumeration0 = clustererPerformanceEvaluator0.enumerateRequests();
      assertEquals(false, enumeration0.hasMoreElements());
      assertNotNull(enumeration0);
      assertEquals("ClustererPerformanceEvaluator", clustererPerformanceEvaluator0.getCustomName());
  }

  @Test
  public void test8()  throws Throwable  {
      ClustererPerformanceEvaluator clustererPerformanceEvaluator0 = new ClustererPerformanceEvaluator();
      assertNotNull(clustererPerformanceEvaluator0);
      
      // Undeclared exception!
      try {
        clustererPerformanceEvaluator0.performRequest("The given property is not inhierachy structure with seperators!");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * The given property is not inhierachy structure with seperators! not supported (ClustererPerformanceEvaluator)
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      ClustererPerformanceEvaluator clustererPerformanceEvaluator0 = new ClustererPerformanceEvaluator();
      assertNotNull(clustererPerformanceEvaluator0);
      
      clustererPerformanceEvaluator0.connectionNotification((String) null, "pressedIcon");
      boolean boolean0 = clustererPerformanceEvaluator0.eventGeneratable("pressedIcon");
      assertEquals(true, boolean0);
      assertEquals("ClustererPerformanceEvaluator", clustererPerformanceEvaluator0.getCustomName());
  }

  @Test
  public void test10()  throws Throwable  {
      ClustererPerformanceEvaluator clustererPerformanceEvaluator0 = new ClustererPerformanceEvaluator();
      assertNotNull(clustererPerformanceEvaluator0);
      
      boolean boolean0 = clustererPerformanceEvaluator0.eventGeneratable((String) null);
      assertEquals("ClustererPerformanceEvaluator", clustererPerformanceEvaluator0.getCustomName());
      assertEquals(false, boolean0);
  }
}
