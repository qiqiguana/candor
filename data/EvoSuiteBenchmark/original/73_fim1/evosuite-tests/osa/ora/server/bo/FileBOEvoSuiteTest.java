/*
 * This file was automatically generated by EvoSuite
 */

package osa.ora.server.bo;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Hashtable;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import osa.ora.server.ModernChatServer;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.User;
import osa.ora.server.bo.FileBO;

@RunWith(EvoSuiteRunner.class)
public class FileBOEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          FileBO fileBO0 = new FileBO("hYUt$zgJm{Xl(`\" &|q^", (ModernChatServer) null);
          assertNotNull(fileBO0);
          
          boolean boolean0 = fileBO0.updatePassword(0, "hYUt$zgJm{Xl(`\" &|q^", "hYUt$zgJm{Xl(`\" &|q^");
          assertEquals(false, boolean0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
      FileBO fileBO0 = new FileBO("</jobTitle>", (ModernChatServer) null);
      // Undeclared exception!
      try {
        fileBO0.delUser((User) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      FileBO fileBO0 = new FileBO("6MJLld}V]~", (ModernChatServer) null);
      Room room0 = new Room();
      // Undeclared exception!
      try {
        fileBO0.createRoom(room0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      FileBO fileBO0 = new FileBO("</jobTitle>", (ModernChatServer) null);
      User user0 = fileBO0.getAdminUser();
      assertNull(user0);
  }

  @Test
  public void test4()  throws Throwable  {
      FileBO fileBO0 = new FileBO("'#>p|T^(oI^jtKUtQ", (ModernChatServer) null);
      User user0 = new User();
      // Undeclared exception!
      try {
        fileBO0.updateUser(user0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      FileBO fileBO0 = new FileBO((String) null, (ModernChatServer) null);
      Hashtable<Integer, String> hashtable0 = fileBO0.getPasswords();
      assertEquals("{}", hashtable0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      FileBO fileBO0 = new FileBO("", (ModernChatServer) null);
      User user0 = new User();
      // Undeclared exception!
      try {
        fileBO0.updateUserGroup(user0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      FileBO fileBO0 = new FileBO("hYUt$zgJm{Xl(`\" &|q^", (ModernChatServer) null);
      // Undeclared exception!
      try {
        fileBO0.updateGroup((Group) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      FileBO fileBO0 = new FileBO((String) null, (ModernChatServer) null);
      User user0 = new User();
      // Undeclared exception!
      try {
        fileBO0.resetUserPass(user0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      FileBO fileBO0 = new FileBO("Yrq@;8:m? |00Qc4##Z", (ModernChatServer) null);
      // Undeclared exception!
      try {
        fileBO0.updateRoom((Room) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      FileBO fileBO0 = new FileBO("K_3}T{", (ModernChatServer) null);
      Group group0 = new Group();
      // Undeclared exception!
      try {
        fileBO0.createGroup(group0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      FileBO fileBO0 = new FileBO("[ServerSettingBean] Error loading property file\n", (ModernChatServer) null);
      Room room0 = new Room();
      // Undeclared exception!
      try {
        fileBO0.delRoom(room0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      FileBO fileBO0 = new FileBO("hYUt$zgJm{Xl(`\" &|q^", (ModernChatServer) null);
      // Undeclared exception!
      try {
        fileBO0.createUser((User) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      FileBO fileBO0 = new FileBO("</jobTitle>", (ModernChatServer) null);
      assertNotNull(fileBO0);
      
      Vector<Group> vector0 = fileBO0.loadGroupsAndUsers();
      assertEquals(0, vector0.capacity());
      assertNotNull(vector0);
  }

  @Test
  public void test14()  throws Throwable  {
      FileBO fileBO0 = new FileBO("", (ModernChatServer) null);
      Vector<Room> vector0 = fileBO0.loadRooms();
      assertEquals(true, vector0.isEmpty());
  }
}
