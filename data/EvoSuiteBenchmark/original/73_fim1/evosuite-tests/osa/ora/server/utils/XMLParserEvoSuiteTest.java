/*
 * This file was automatically generated by EvoSuite
 */

package osa.ora.server.utils;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.File;
import java.util.Hashtable;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.w3c.dom.CharacterData;
import osa.ora.server.utils.XMLParser;

@RunWith(EvoSuiteRunner.class)
public class XMLParserEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      File file0 = new File("", "");
      XMLParser xMLParser0 = null;
      try {
        xMLParser0 = new XMLParser(file0);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * Not A Valid Format!
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          XMLParser xMLParser0 = new XMLParser("");
          File file0 = new File("", "");
          xMLParser0.file = file0;
          try {
            xMLParser0.store();
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission / write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:183)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:84)
             * com.sun.org.apache.xalan.internal.xsltc.trax.TransformerImpl.getOutputHandler(TransformerImpl.java:462)
             * com.sun.org.apache.xalan.internal.xsltc.trax.TransformerImpl.transform(TransformerImpl.java:298)
             * osa.ora.server.utils.XMLParser.store(XMLParser.java:264)
             * sun.reflect.GeneratedMethodAccessor97.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
      String string0 = XMLParser.returnSpecial("F");
      assertEquals("F", string0);
      assertNotNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      XMLParser xMLParser0 = new XMLParser("F");
      Hashtable<String, CharacterData> hashtable0 = new Hashtable<String, CharacterData>();
      xMLParser0.setProperty("F", "F", (Hashtable) hashtable0);
      xMLParser0.setProperty("F", "F", (Hashtable) hashtable0);
      assertEquals(0, hashtable0.size());
  }

  @Test
  public void test4()  throws Throwable  {
      XMLParser xMLParser0 = new XMLParser("F");
      assertNotNull(xMLParser0);
      
      Hashtable<String, CharacterData> hashtable0 = new Hashtable<String, CharacterData>();
      xMLParser0.addProperty("F", "NlQhy/J@zLE>=", (Hashtable) hashtable0);
      xMLParser0.setProperty("F", "F", (Hashtable) hashtable0);
      Vector<Object> vector0 = xMLParser0.getProperty("F");
      assertEquals("[{id=NlQhy/J@zLE>=}, {id=F}]", vector0.toString());
      assertNotNull(vector0);
  }

  @Test
  public void test5()  throws Throwable  {
      XMLParser xMLParser0 = new XMLParser("F");
      Vector<Object> vector0 = xMLParser0.getProperty("NlQhy/J@zLE>=");
      assertEquals(0, vector0.size());
  }

  @Test
  public void test6()  throws Throwable  {
      XMLParser xMLParser0 = new XMLParser("F");
      assertNotNull(xMLParser0);
      
      Hashtable<String, CharacterData> hashtable0 = new Hashtable<String, CharacterData>();
      xMLParser0.addProperty("F", "NlQhy/J@zLE>=", (Hashtable) hashtable0);
      Vector<Object> vector0 = xMLParser0.getProperty("F");
      assertEquals("[{id=NlQhy/J@zLE>=}]", vector0.toString());
      assertNotNull(vector0);
  }

  @Test
  public void test7()  throws Throwable  {
      XMLParser xMLParser0 = new XMLParser("F");
      String string0 = xMLParser0.getSingleProperty("NlQhy/J@zLE>=");
      assertEquals("", string0);
  }

  @Test
  public void test8()  throws Throwable  {
      XMLParser xMLParser0 = new XMLParser("F");
      Hashtable<String, CharacterData> hashtable0 = new Hashtable<String, CharacterData>();
      xMLParser0.addProperty("F", "NlQhy/J@zLE>=", (Hashtable) hashtable0);
      xMLParser0.setProperty("F", "F", (Hashtable) hashtable0);
      String string0 = xMLParser0.getSingleProperty("F");
      assertEquals("", string0);
  }

  @Test
  public void test9()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          XMLParser xMLParser0 = new XMLParser("z");
          try {
            xMLParser0.store();
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission z write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.createNewFile(File.java:882)
             * osa.ora.server.utils.XMLParser.store(XMLParser.java:255)
             * sun.reflect.GeneratedMethodAccessor97.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
