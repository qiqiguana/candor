/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SystemUsersPanel.java
 *
 * Created on Nov 30, 2009, 12:18:26 PM
 */
package osa.ora.server.admin.ui;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.util.Vector;
import javax.swing.ImageIcon;
import osa.ora.server.admin.AdminApp;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.User;
import java.awt.Image;
import java.awt.event.ActionListener;
import java.rmi.RemoteException;
import javax.swing.AbstractCellEditor;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import osa.ora.server.beans.IConstant;

/**
 *
 * @author ooransa
 */
public class SystemUsersPanel extends javax.swing.JPanel {

    Object[][] dataModel;
    AdminApp adminApp;
    ControlPanel controlPanel;
    private ImageIcon online = new ImageIcon(java.awt.Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/online.png")).getScaledInstance(14, 14, Image.SCALE_SMOOTH));
    private ImageIcon offline = new ImageIcon(java.awt.Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/offline.png")).getScaledInstance(14, 14, Image.SCALE_SMOOTH));
    private ImageIcon busy = new ImageIcon(java.awt.Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/busy.png")).getScaledInstance(14, 14, Image.SCALE_SMOOTH));
    private ImageIcon away = new ImageIcon(java.awt.Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/away.png")).getScaledInstance(14, 14, Image.SCALE_SMOOTH));
    int currentUser;

    /** Creates new form SystemUsersPanel */
    public SystemUsersPanel(AdminApp adminApp, ControlPanel controlPanel) {
        this.adminApp = adminApp;
        this.controlPanel = controlPanel;
        initComponents();
    }

    public void updateModel() {
        Vector<Group> groups = adminApp.getGroups();
        int count = 0;
        for (int i = 0; i < groups.size(); i++) {
            count += groups.get(i).getUsers().size();
        }
        dataModel = new Object[count][7];
        if(count>0){
            count = 0;
            for (int i = 0; i < groups.size(); i++) {
                Vector<User> tempVector = groups.get(i).getUsers();
                for (int n = 0; n < tempVector.size(); n++) {
                    dataModel[count][0] = tempVector.get(n).getId();
                    dataModel[count][1] = tempVector.get(n).getName();
                    dataModel[count][2] = tempVector.get(n).getEmail();
                    dataModel[count][3] = adminApp.getConnectedClientsIPs().get(tempVector.get(n).getId());
                    if (dataModel[count][3] == null) {
                        dataModel[count][3] = "N/A";
                    }
                    dataModel[count][4] = groups.get(i).getName();
                    if (tempVector.get(n).getStatus_id() == IConstant.ONLINE) {
                        dataModel[count][5] = online;
                    } else if (tempVector.get(n).getStatus_id() == IConstant.BUSY) {
                        dataModel[count][5] = busy;
                    } else if (tempVector.get(n).getStatus_id() == IConstant.AWAY) {
                        dataModel[count][5] = away;
                    } else {
                        dataModel[count][5] = offline;
                    }
                    dataModel[count][6] = ""+tempVector.get(n).getId();
                    count++;
                }
            }
            TableModel model = new MyModel(dataModel, new String[]{
                        "Id","Username", "User Email", "IP Address", "Group","Status", "Action"
                    });
            jTable1.setModel(model);
            ButtonColumn buttonColumn = new ButtonColumn(jTable1, 6,adminApp);
            jTable1.setDefaultRenderer(ImageIcon.class, new MyRenderer());
            jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS);
            System.gc();
        }else{
            jTable1.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                    {"No Current Users!"}
                },
                new String [] {
                    "Users"
                }
            ));
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setLayout(null);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable1.setCellSelectionEnabled(true);
        jScrollPane1.setViewportView(jTable1);

        add(jScrollPane1);
        jScrollPane1.setBounds(10, 20, 560, 170);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/close.jpg"))); // NOI18N
        jButton1.setText("Cancel");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1);
        jButton1.setBounds(290, 200, 110, 30);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/submit.png"))); // NOI18N
        jButton2.setText("Refresh");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        add(jButton2);
        jButton2.setBounds(160, 200, 120, 30);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            adminApp.loadGroups();
        } catch (RemoteException ex) {
            JOptionPane.showMessageDialog(this, "Error Happen " + ex.getMessage(), "Can't Re-Load Users", JOptionPane.ERROR_MESSAGE, adminApp.getErrorIcon());
        }
        try {
            adminApp.returnOnlineIPs();
        } catch (RemoteException ex) {
            JOptionPane.showMessageDialog(this, "Error Happen " + ex.getMessage(), "Can't retrieve User Online Status", JOptionPane.ERROR_MESSAGE, adminApp.getErrorIcon());
        }
        updateModel();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        controlPanel.getParentDialog().setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
    class MyModel extends AbstractTableModel {

        public MyModel(Object[][] cells, String[] columnNames) {
            super();
            this.cells = cells;
            this.columnNames = columnNames;
        }
        private Object[][] cells;
        //data may be get from database
        private String[] columnNames;

        public String getColumnName(int c) {
            return columnNames[c];
        }

        public Class getColumnClass(int c) {
            return cells[0][c].getClass();
        }

        public int getColumnCount() {
            if(cells.length>0){
                return cells[0].length;
            }
            return 0;
        }

        public int getRowCount() {
            return cells.length;
        }

        public Object getValueAt(int r, int c) {
            return cells[r][c];
        }

        public void setValueAt(Object data, int r, int c) {
            cells[r][c] = data;
            fireTableCellUpdated(r, c);
        }

        public boolean isCellEditable(int r, int c) {
            return c==6;
        }
    }//end class model
}

class MyRenderer implements TableCellRenderer {

    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        JPanel panel = new JPanel();
        if (value instanceof ImageIcon) {
            //System.out.println("in ="+row+" = "+value);
            JLabel temp = new JLabel((Icon) value);
            panel.add(temp);
        }
        return panel;
    }
}
class ButtonColumn extends AbstractCellEditor
        implements TableCellRenderer, TableCellEditor, ActionListener
    {
        JTable table;
        JButton renderButton;
        JButton editButton;
        AdminApp adminApp;

        public ButtonColumn(JTable table, int column,AdminApp adminApp)
        {
            super();
            this.table = table;
            this.adminApp=adminApp;
            renderButton = new JButton();

            editButton = new JButton();
            editButton.setFocusPainted( false );
            editButton.addActionListener( this );

            TableColumnModel columnModel = table.getColumnModel();
            columnModel.getColumn(column).setCellRenderer( this );
            columnModel.getColumn(column).setCellEditor( this );
        }

        public Component getTableCellRendererComponent(
            JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column){
            if (hasFocus){
                renderButton.setForeground(table.getForeground());
                renderButton.setBackground(UIManager.getColor("Button.background"));
            }else if (isSelected){
                renderButton.setForeground(table.getSelectionForeground());
                renderButton.setBackground(table.getSelectionBackground());
            }else{
                renderButton.setForeground(table.getForeground());
                renderButton.setBackground(UIManager.getColor("Button.background"));
            }
            renderButton.setText("Kick Off");
            return renderButton;
        }

        public Component getTableCellEditorComponent(
            JTable table, Object value, boolean isSelected, int row, int column){
            editButton.setText( "Kick Off" );
            return editButton;
        }

        public Object getCellEditorValue(){
            return "Kick Off";
        }

        public void actionPerformed(ActionEvent e){
            System.out.println(table.getModel().getValueAt(table.getSelectedRow(), 0));
            try {
                adminApp.kickOffUser((Integer) table.getModel().getValueAt(table.getSelectedRow(), 0));
                JOptionPane.showMessageDialog(table,"User Kicked Off, press Refresh to reload data!");
            } catch (RemoteException ex) {
                JOptionPane.showMessageDialog(table, "Error Happen " + ex.getMessage(), "Can't Kick Off User", JOptionPane.ERROR_MESSAGE, adminApp.getErrorIcon());
            }
        }
    }
