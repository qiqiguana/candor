/*
 * ContactsPanel.java
 *
 * Created on October 29, 2009, 1:43 PM
 */
package osa.ora.server.client.ui;

import java.awt.Desktop;
import java.awt.event.MouseEvent;
import java.io.File;
import java.awt.Image;
import java.net.URI;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.DefaultTreeSelectionModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.*;
import osa.ora.server.client.ui.utils.ContactRenderer;
import osa.ora.server.client.ui.utils.FileTransferHandler;
import osa.ora.server.client.ui.utils.TreeModelGenerator;

/**
 *
 * @author  ooransa
 */
public class ContactsPanel extends ParentPanel {

    /** Creates new form ContactsPanel */
    ChatClientApp chatApp;
    JDialog infoFrame;
    InfoPanel infoPanel;
    /** Creates new form LoginPanel */
    public ContactsPanel(ChatClientApp chatApp) {
        this.chatApp = chatApp;
        initComponents();
        infoFrame = new JDialog(chatApp.getChatClientFrame(), "User Info", true);
        infoPanel = new InfoPanel(infoFrame);
        infoFrame.setSize(320, 190);
        infoFrame.setAlwaysOnTop(true);
        infoFrame.setResizable(false);
        infoFrame.setLocationRelativeTo(this);
        infoFrame.getContentPane().add(infoPanel);
}

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        setLayout(new java.awt.BorderLayout());

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setViewportView(jTree1);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
        DefaultTreeSelectionModel selectionModel = new DefaultTreeSelectionModel();
        jTree1.setCellRenderer(new ContactRenderer());
        jTree1.setRootVisible(true);
        jTree1.setTransferHandler(new FileTransferHandler(this));
        selectionModel.setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        jTree1.setSelectionModel(selectionModel);
        jTree1.putClientProperty("JTree.lineStyle", "Angled");
        treePopupMenu = getJPopupMenu();
        updateExpandMyGroup();
        jTree1.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent e) {
                jTree1.setSelectionPath(jTree1.getClosestPathForLocation(e.getX(), e.getY()));
                if (jTree1.getLastSelectedPathComponent() != null) {
                    final DefaultMutableTreeNode selectedNode = ((DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent());
                    if (e.getButton() == MouseEvent.BUTTON3) {
                        Object obj = selectedNode.getUserObject();
                        if (obj instanceof Group) {
                            if (selectedNode.getChildCount() > 0) {
                                if (chatApp.getUser().getGroup_id() == ((Group) obj).getId()) {
                                    sendAnnMenuOption.setEnabled(true);
                                    sendFileMenuOption.setEnabled(true);
                                    chatMenuItem.setEnabled(true);
                                    sendEmailMenuItem.setEnabled(true);
                                    showPhoneMenuOption.setEnabled(false);
                                    treePopupMenu.show(jTree1, e.getX(), e.getY());
                                } else {
                                    sendAnnMenuOption.setEnabled(false);
                                    sendFileMenuOption.setEnabled(false);
                                    chatMenuItem.setEnabled(false);
                                    sendEmailMenuItem.setEnabled(true);
                                    showPhoneMenuOption.setEnabled(false);
                                    treePopupMenu.show(jTree1, e.getX(), e.getY());
                                }
                            }else{
                                    sendAnnMenuOption.setEnabled(false);
                                    sendFileMenuOption.setEnabled(false);
                                    chatMenuItem.setEnabled(false);
                                    sendEmailMenuItem.setEnabled(false);
                                    showPhoneMenuOption.setEnabled(false);
                                    treePopupMenu.show(jTree1, e.getX(), e.getY());
                            }
                        } else if (obj instanceof User) {
                            if (!((User) obj).isOnlyStartChat()) {
                                sendAnnMenuOption.setEnabled(true);
                                sendFileMenuOption.setEnabled(true);
                                chatMenuItem.setEnabled(true);
                                sendEmailMenuItem.setEnabled(true);
                                showPhoneMenuOption.setEnabled(true);
                                treePopupMenu.show(jTree1, e.getX(), e.getY());
                            } else {
                                sendAnnMenuOption.setEnabled(false);
                                sendFileMenuOption.setEnabled(false);
                                chatMenuItem.setEnabled(false);
                                sendEmailMenuItem.setEnabled(true);
                                showPhoneMenuOption.setEnabled(true);
                                treePopupMenu.show(jTree1, e.getX(), e.getY());
                            }
                        } else if (obj instanceof Room) {
                            sendFileMenuOption.setEnabled(false);
                            sendEmailMenuItem.setEnabled(false);
                            sendAnnMenuOption.setEnabled(true);
                            chatMenuItem.setEnabled(true);
                            showPhoneMenuOption.setEnabled(false);
                            treePopupMenu.show(jTree1, e.getX(), e.getY());
                        }else{
                            sendFileMenuOption.setEnabled(false);
                            sendEmailMenuItem.setEnabled(false);
                            sendAnnMenuOption.setEnabled(false);
                            chatMenuItem.setEnabled(false);
                            showPhoneMenuOption.setEnabled(false);
                            treePopupMenu.show(jTree1, e.getX(), e.getY());
                        }
                    } else {
                        if (e.getClickCount() == 2) {
                            openChatWithSelectedNode(selectedNode);
                        }
                    }
                }
            }
        });
        jTree1.revalidate();

    }// </editor-fold>
    private JPopupMenu treePopupMenu;
    private JMenuItem chatMenuItem;
    private JMenuItem sendEmailMenuItem;
    private JMenuItem sendFileMenuOption;
    private JMenuItem sendAnnMenuOption;
    private JMenuItem showPhoneMenuOption;
    private JMenuItem expandAllMenuOption;
    private JMenuItem collapseAllMenuOption;
    private JMenuItem refreshMenuOption;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables

    private javax.swing.JPopupMenu getJPopupMenu() {
        if (treePopupMenu == null) {
            treePopupMenu = new javax.swing.JPopupMenu();
            treePopupMenu.add(getJMenuItem());
            treePopupMenu.add(getJMenuItem3());
            treePopupMenu.add(getJMenuItem1());
            treePopupMenu.add(getJMenuItem2());
            treePopupMenu.add(getJMenuItem4());
            treePopupMenu.addSeparator();
            treePopupMenu.add(getRefreshMenuOption());
            treePopupMenu.add(getJMenuItem5());
            treePopupMenu.add(getJMenuItem6());
        }
        return treePopupMenu;
    }
    /**
     * This method initializes chatMenuItem
     *
     *
     * @return javax.swing.JMenuItem
     */
    private javax.swing.JMenuItem getJMenuItem() {
        if (chatMenuItem == null) {
            chatMenuItem = new JMenuItem("Open Chat", new ImageIcon(java.awt.Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/chat.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH)));
            chatMenuItem.addActionListener(new java.awt.event.ActionListener() {

                public void actionPerformed(java.awt.event.ActionEvent e) {
                    DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
                    if (selectedNode != null) {
                        openChatWithSelectedNode(selectedNode);

                    }
                }
            });
        }
        return chatMenuItem;
    }
    private javax.swing.JMenuItem getRefreshMenuOption() {
        if (refreshMenuOption == null) {
            refreshMenuOption = new JMenuItem("Refresh Contact List", new ImageIcon(java.awt.Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/submit.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH)));
            refreshMenuOption.addActionListener(new java.awt.event.ActionListener() {

                public void actionPerformed(java.awt.event.ActionEvent e) {
                    updateExpandMyGroup();
                }
            });
        }
        return refreshMenuOption;
    }
    private void openChatWithSelectedNode(DefaultMutableTreeNode selectedNode) {
        Object selectedObject = selectedNode.getUserObject();
        if (selectedObject instanceof Group) {
            if (chatApp.getUser().getGroup_id() == ((Group) selectedObject).getId()) {
                if (selectedNode.getChildCount() > 0) {
                    chatApp.openChat((Group) selectedObject, false, null);
                }
            }
        } else if (selectedObject instanceof User) {
            if(!((User) selectedObject).isOnlyStartChat()){
                chatApp.openChat((User) selectedObject, false, null);
            }
        } else if (selectedObject instanceof Room) {
            chatApp.openChat((Room) selectedObject, false, null);
        }
    }

    public void sendFileInit(File temp) {
        System.out.println("sending file=" + temp.getPath());
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
        if (selectedNode != null) {
            Object selectedObject = selectedNode.getUserObject();
            if (selectedObject instanceof Group) {
                if (chatApp.getUser().getGroup_id() == ((Group) selectedObject).getId()) {
                    if (selectedNode.getChildCount() > 0) {
                        System.out.println("Group-->Users:" + selectedNode.getChildCount());
                        for (int i = 0; i < selectedNode.getChildCount(); i++) {
                            DefaultMutableTreeNode selectedNode2 = (DefaultMutableTreeNode) selectedNode.getChildAt(i);
                            User childUser = (User) selectedNode2.getUserObject();
                            System.out.println("To User:" + childUser.getId());
                            chatApp.openChat((User) childUser, true, temp);
                        }
                    }
                }
            } else if (selectedObject instanceof User) {
                chatApp.openChat((User) selectedObject, true, temp);
            }
        }
    }

    /**
     * This method initializes sendFileMenuOption
     *
     *
     * @return javax.swing.JMenuItem
     */
    private javax.swing.JMenuItem getJMenuItem1() {
        if (sendFileMenuOption == null) {
            sendFileMenuOption = new javax.swing.JMenuItem("Send File", new ImageIcon(java.awt.Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/send.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH)));
            sendFileMenuOption.addActionListener(new java.awt.event.ActionListener() {

                public void actionPerformed(java.awt.event.ActionEvent e) {
                    DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
                    if (selectedNode != null) {
                        Object selectedObject = selectedNode.getUserObject();
                        if (selectedObject instanceof Group) {
                            chatApp.openChat((Group) selectedObject, true, null);
                        } else if (selectedObject instanceof User) {
                            chatApp.openChat((User) selectedObject, true, null);
                        }
                    }
                }
            });
        }
        return sendFileMenuOption;
    }

    private javax.swing.JMenuItem getJMenuItem2() {
        if (sendAnnMenuOption == null) {
            sendAnnMenuOption = new javax.swing.JMenuItem("Send Announcement", new ImageIcon(java.awt.Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/note.gif")).getScaledInstance(20, 20, Image.SCALE_SMOOTH)));
            sendAnnMenuOption.addActionListener(new java.awt.event.ActionListener() {

                public void actionPerformed(java.awt.event.ActionEvent e) {
                    DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
                    if (selectedNode != null) {
                        String value = JOptionPane.showInputDialog(chatApp.getChatClientFrame(), "Enter Announcement To Send:", "Send Announcement", JOptionPane.QUESTION_MESSAGE);
                        if (value != null && !value.equals("")) {
                            Object selectedObject = selectedNode.getUserObject();
                            TextMessage textMessage = new TextMessage();
                            textMessage.setMessage(value);
                            if (selectedObject instanceof Group) {
                                textMessage.setToUserId(((Group) selectedObject).getId());
                                textMessage.setTargetType(IConstant.GROUP_CHAT);
                                chatApp.sendAnnouncement(textMessage);
                            } else if (selectedObject instanceof User) {
                                textMessage.setToUserId(((User) selectedObject).getId());
                                textMessage.setTargetType(IConstant.USER_CHAT);
                                chatApp.sendAnnouncement(textMessage);
                            } else if (selectedObject instanceof Room) {
                                textMessage.setToUserId(((Room) selectedObject).getId());
                                textMessage.setTargetType(IConstant.ROOM_CHAT);
                                chatApp.sendAnnouncement(textMessage);
                            }
                        }
                    }
                }
            });
        }
        return sendAnnMenuOption;
    }

    private javax.swing.JMenuItem getJMenuItem3() {
        if (sendEmailMenuItem == null) {
            sendEmailMenuItem = new javax.swing.JMenuItem("Send E-Mail", new ImageIcon(java.awt.Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/email.gif")).getScaledInstance(20, 20, Image.SCALE_SMOOTH)));
            sendEmailMenuItem.addActionListener(new java.awt.event.ActionListener() {

                public void actionPerformed(java.awt.event.ActionEvent e) {
                    DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
                    if (selectedNode != null) {
                        Object selectedObject = selectedNode.getUserObject();
                        if (selectedObject instanceof Group) {
                            Group tempGroup = (Group) selectedObject;
                            String emails = "";
                            if (tempGroup.getUsers() != null) {
                                for (int i = 0; i < tempGroup.getUsers().size(); i++) {
                                    if (tempGroup.getUsers().get(i).getId() != chatApp.getUser().getId()) {
                                        emails += tempGroup.getUsers().get(i).getEmail() + ",";
                                    }
                                }
                                sendEmail(emails);
                            }
                        } else if (selectedObject instanceof User) {
                            sendEmail(((User) selectedObject).getEmail());
                        }
                    }
                }
            });
        }
        return sendEmailMenuItem;
    }

    private javax.swing.JMenuItem getJMenuItem4() {
        if (showPhoneMenuOption == null) {
            showPhoneMenuOption = new JMenuItem("Show User Info", new ImageIcon(java.awt.Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/chat.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH)));
            showPhoneMenuOption.addActionListener(new java.awt.event.ActionListener() {

                public void actionPerformed(java.awt.event.ActionEvent e) {
                    DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
                    if (selectedNode != null) {
                        Object selectedObject = selectedNode.getUserObject();
                        if (selectedObject instanceof User) {
                            infoPanel.updateModel((User)selectedObject);
                            infoFrame.setVisible(true);
                        }

                    }
                }
            });
        }
        return showPhoneMenuOption;
    }
    private javax.swing.JMenuItem getJMenuItem5() {
        if (expandAllMenuOption == null) {
            expandAllMenuOption = new JMenuItem("Expand All Groups", new ImageIcon(java.awt.Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/groups.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH)));
            expandAllMenuOption.addActionListener(new java.awt.event.ActionListener() {

                public void actionPerformed(java.awt.event.ActionEvent e) {
                    expandTree();

                }
            });
        }
        return expandAllMenuOption;
    }
    private javax.swing.JMenuItem getJMenuItem6() {
        if (collapseAllMenuOption == null) {
            collapseAllMenuOption = new JMenuItem("Collapse All Groups", new ImageIcon(java.awt.Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/groups.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH)));
            collapseAllMenuOption.addActionListener(new java.awt.event.ActionListener() {

                public void actionPerformed(java.awt.event.ActionEvent e) {
                    collapseTree();
                }
            });
        }
        return collapseAllMenuOption;
    }
    public void updateExpandMyGroup() {
        boolean showOnlineOnly=false;
        boolean showUsersOnly=false;
        if("1".equals(chatApp.getClientSettingBean().getOnlineOnly())){
            showOnlineOnly=true;
        }
        if("1".equals(chatApp.getClientSettingBean().getUsersOnly())){
            showUsersOnly=true;
        }
        jTree1.setModel(TreeModelGenerator.getModel(chatApp.getRootNode(),chatApp.getGroups(), chatApp.getRooms(), chatApp.getUser(),showOnlineOnly,showUsersOnly));
        expandMyGroup();
    }
    public void updateExpandContactList() {
        boolean showOnlineOnly=false;
        boolean showUsersOnly=false;
        if("1".equals(chatApp.getClientSettingBean().getOnlineOnly())){
            showOnlineOnly=true;
        }
        if("1".equals(chatApp.getClientSettingBean().getUsersOnly())){
            showUsersOnly=true;
        }
        jTree1.setModel(TreeModelGenerator.getModel(chatApp.getRootNode(),chatApp.getGroups(), chatApp.getRooms(), chatApp.getUser(),showOnlineOnly,showUsersOnly));
        expandTree();
    }

    public void updateContactList() {
        boolean[] n = new boolean[jTree1.getRowCount()];
        for (int i = 0; i < jTree1.getRowCount(); i++) {
            n[i] = jTree1.isExpanded(i);
        }
        boolean showOnlineOnly=false;
        boolean showUsersOnly=false;
        if("1".equals(chatApp.getClientSettingBean().getOnlineOnly())){
            showOnlineOnly=true;
        }
        if("1".equals(chatApp.getClientSettingBean().getUsersOnly())){
            showUsersOnly=true;
        }
        jTree1.setModel(TreeModelGenerator.getModel(chatApp.getRootNode(),chatApp.getGroups(), chatApp.getRooms(), chatApp.getUser(),showOnlineOnly,showUsersOnly));
        for (int i = 0; i < jTree1.getRowCount(); i++) {
            if (n[i]) {
                jTree1.expandRow(i);
            }
        }
        System.gc();
    }

    public void updateContactList(Object[] obj, User updatedUser, Group group) {
        jTree1.getModel().valueForPathChanged(new TreePath(obj), updatedUser);
        /*DefaultTreeModel temp = (DefaultTreeModel) jTree1.getModel();
        temp.reload();
        jTree1.repaint();
        jTree1.validate();
        jTree1.setVisible(false);
        jTree1.setVisible(true);*/
        TreePath path=jTree1.getSelectionPath();
        jTree1.setSelectionPath(new TreePath(obj));
        TreeNode node=(DefaultMutableTreeNode)jTree1.getLastSelectedPathComponent();
        //jTree1.setSelectionPath(path);
        /*DefaultMutableTreeNode treeNode = (DefaultMutableTreeNode)
                       jTree1.getSeLastSelectedPathComponent();*/
        ((DefaultTreeModel)jTree1.getModel()).nodeChanged(node);
        jTree1.setSelectionPath(path);
    }

    private void expandMyGroup() {
        for (int i = 0; i < chatApp.getGroups().size(); i++) {
            if(chatApp.getGroups().get(i).getId()==chatApp.getUser().getGroup_id()){
                //Object[] obj=new Object[1];
                //obj[0]=(Object)chatApp.getGroups().get(i).getName();
                jTree1.expandRow(i+1);
                break;
            }
        }
        jTree1.validate();
        jScrollPane1.validate();
    }
    private void expandTree() {
        for (int i = 0; i < jTree1.getRowCount(); i++) {
            jTree1.expandRow(i);
        }
        jTree1.validate();
        jScrollPane1.validate();
    }
    private void collapseTree() {
        for (int i = 1; i < jTree1.getRowCount(); i++) {
            jTree1.collapseRow(i);
        }
        jTree1.validate();
        jScrollPane1.validate();
    }

    private void sendEmail(String emails) {
        String temp = "mailto:" + emails;
        Desktop desktop = null;
        if (Desktop.isDesktopSupported()) {
            try {
                desktop = Desktop.getDesktop();
                desktop.mail(new URI(temp));
            } catch (Exception ex) {
                System.out.println("Mail Error!=" + temp);
            }
        }
    }
}
