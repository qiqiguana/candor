/*
 * ProcessarEntidadesTree.java
 *
 * Created on 20 de Fevereiro de 2008, 14:43
 */
package jaw.gui;

import java.util.List;
import java.util.Vector;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import jaw.metamodelo.Atributo;
import jaw.metamodelo.Entidade;

/**
 *
 * @author  flavio
 */
public class ProcessarEntidadesTree extends ProcessarEntidades{

    private Icon customOpenIcon = new ImageIcon(getClass().getResource("/images/development/Bean16.gif"));
    private Icon customClosedIcon = new ImageIcon(getClass().getResource("/images/development/Jar16.gif"));
    private Icon customLeafIcon = new ImageIcon(getClass().getResource("/images/development/Jar16.gif"));
    private List<Entidade> entidades = new Vector();

    public ProcessarEntidadesTree(List<Entidade> entidades) {
        this.entidades = entidades;
        initComponents();
        construirArvore();
    }

    public ProcessarEntidadesTree(){
        
    }

    public void construirArvore() {
        DefaultMutableTreeNode root = popularArvore(entidades);
        jTree1 = new JTree(root);
        jTree1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {

            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                tabelaSelecionada(evt);
            }
        });
        DefaultTreeCellRenderer renderer3 = new DefaultTreeCellRenderer();
        renderer3.setOpenIcon(customOpenIcon);
        renderer3.setClosedIcon(customClosedIcon);
        renderer3.setLeafIcon(customLeafIcon);
        jTree1.setCellRenderer(renderer3);
        jScrollPane1.setViewportView(jTree1);
    }

    private DefaultMutableTreeNode popularArvore(List<Entidade> entidades) {
        DefaultMutableTreeNode node = new DefaultMutableTreeNode("");
        DefaultMutableTreeNode entidade;
        DefaultMutableTreeNode atributo;
        for (int i = 0; i < entidades.size(); i++) {
            entidade = new DefaultMutableTreeNode(entidades.get(i).getNome());
            for (int j = 0; j < entidades.get(i).getAtributos().size(); j++) {
                atributo = new DefaultMutableTreeNode(entidades.get(i).getAtributos().get(j).getNome());
                entidade.add(atributo);
            }
            node.add(entidade);
        }
        return (node);
    }

    private void tabelaSelecionada(javax.swing.event.TreeSelectionEvent evt) {
        jTextField1.setText(jTree1.getLastSelectedPathComponent().toString());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();

        jScrollPane1.setViewportView(jTree1);

        jLabel1.setText("pacote");

        jLabel2.setText("nome");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Atributos"));
        jPanel2.setAutoscrolls(true);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 204, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables
    public List<Entidade> selecionarEntidades() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void removerEntidades() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void carregarEntidades(List<Entidade> vetor) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void atualizarEntidades() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void listarAtributos() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void resetAtributos() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public List<Entidade> getEntidades() {
        return new Vector();
    }

    public void setEntidades(List<Entidade> entidades) {
        this.entidades = entidades;
        initComponents();
        construirArvore();
    }

    public int getEntidadeSelecionada() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void setEntidadeSelecionada(int entidadeSelecionada) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public int getAtributoSelecionado() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void setAtributoSelecionado(int atributoSelecionado) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public String getNomeArquivoSalvo() {
       return "Novo";
    }

    public void setNomeArquivoSalvo(String nomeArquivoSalvo) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public Atributo getAtributo() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void setAtributo(Atributo atributo) {
        throw new UnsupportedOperationException("Not supported yet.");
    }
}
