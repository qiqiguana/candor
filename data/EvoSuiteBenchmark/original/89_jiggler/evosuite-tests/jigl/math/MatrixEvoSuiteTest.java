/*
 * This file was automatically generated by EvoSuite
 */

package jigl.math;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import jigl.math.Matrix;
import jigl.math.Vector;
import org.evosuite.testcase.TestCaseExecutor;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MatrixEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Matrix matrix0 = new Matrix(1, 1);
      assertNotNull(matrix0);
      
      Matrix matrix1 = (Matrix)matrix0.clone();
      assertEquals("{\n\t{ 0.0 }\n}", matrix1.toString());
      assertEquals(1, matrix1.nRows());
      assertNotNull(matrix1);
  }

  @Test
  public void test1()  throws Throwable  {
      double[][] doubleArray0 = new double[10][5];
      Matrix matrix0 = new Matrix(doubleArray0);
      assertNotNull(matrix0);
      
      matrix0.eigsrt(doubleArray0[2]);
      assertEquals(10, matrix0.nRows());
      assertEquals("{\n\t{ 0.0, 0.0, 0.0, 0.0, 0.0 },\n\t{ 0.0, 0.0, 0.0, 0.0, 0.0 },\n\t{ 0.0, 0.0, 0.0, 0.0, 0.0 },\n\t{ 0.0, 0.0, 0.0, 0.0, 0.0 },\n\t{ 0.0, 0.0, 0.0, 0.0, 0.0 },\n\t{ 0.0, 0.0, 0.0, 0.0, 0.0 },\n\t{ 0.0, 0.0, 0.0, 0.0, 0.0 },\n\t{ 0.0, 0.0, 0.0, 0.0, 0.0 },\n\t{ 0.0, 0.0, 0.0, 0.0, 0.0 },\n\t{ 0.0, 0.0, 0.0, 0.0, 0.0 }\n}", matrix0.toString());
      assertEquals(5, matrix0.nColumns());
  }

  @Test
  public void test2()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      assertEquals(0, matrix0.nRows());
  }

  @Test
  public void test3()  throws Throwable  {
      Matrix matrix0 = new Matrix(0, 0);
      assertNotNull(matrix0);
      
      Vector vector0 = matrix0.getColumn(0);
      assertNotNull(vector0);
      assertEquals(0, matrix0.nRows());
  }

  @Test
  public void test4()  throws Throwable  {
      double[][] doubleArray0 = new double[4][4];
      Matrix matrix0 = new Matrix(1317, 0);
      assertNotNull(matrix0);
      
      Matrix matrix1 = matrix0.assign(doubleArray0);
      // Undeclared exception!
      try {
        matrix1.add(matrix1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      Matrix matrix0 = new Matrix(41, 41);
      assertNotNull(matrix0);
      
      // Undeclared exception!
      try {
        matrix0.sub(matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      Matrix matrix0 = new Matrix(1, 1);
      assertNotNull(matrix0);
      
      Matrix matrix1 = matrix0.mult(matrix0);
      assertNotNull(matrix1);
      assertEquals("{\n\t{ 0.0 }\n}", matrix1.toString());
      assertEquals("{\n\t{ 0.0 }\n}", matrix0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      Matrix matrix0 = new Matrix(880, 0);
      assertNotNull(matrix0);
      
      Matrix matrix1 = matrix0.mult(1343.8414126178895);
      assertEquals(880, matrix1.nRows());
      assertNotNull(matrix1);
      assertNotSame(matrix0, matrix1);
      assertEquals(0, matrix0.nColumns());
      assertEquals("{\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  },\n\t{  }\n}", matrix1.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      double[][] doubleArray0 = new double[4][4];
      Matrix matrix0 = new Matrix(1317, 0);
      assertNotNull(matrix0);
      
      matrix0.assign(doubleArray0);
      Matrix matrix1 = matrix0.t();
      assertEquals(4, matrix0.nRows());
      assertEquals(4, matrix1.nRows());
  }

  @Test
  public void test9()  throws Throwable  {
      Matrix matrix0 = new Matrix(1, 1);
      assertNotNull(matrix0);
      
      try {
        matrix0.gaussj(matrix0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
        /*
         * gaussj: Singular matrix-2
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      Matrix matrix0 = new Matrix(880, 0);
      assertNotNull(matrix0);
      
      try {
        matrix0.gaussj(matrix0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
        /*
         * Matrix is not a square matrix
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Matrix matrix0 = new Matrix(1, 1);
      assertNotNull(matrix0);
      
      double[] doubleArray0 = new double[7];
      matrix0.svdcmp(matrix0, doubleArray0, matrix0);
      assertEquals(1, matrix0.nRows());
      
      matrix0.gaussj(matrix0);
      assertEquals("{\n\t{ 1.0 }\n}", matrix0.toString());
  }

  @Test
  public void test12()  throws Throwable  {
      double[][] doubleArray0 = new double[10][5];
      double[] doubleArray1 = new double[6];
      doubleArray1[2] = (-179.32424478834594);
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[1];
      Matrix matrix0 = new Matrix(doubleArray0);
      assertNotNull(matrix0);
      
      // Undeclared exception!
      try {
        matrix0.eigsrt(doubleArray0[2]);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      Matrix matrix0 = new Matrix(1176, 1176);
      double[][] doubleArray0 = new double[1][4];
      matrix0.jacobi(doubleArray0[0], matrix0);
  }

  @Test
  public void test14()  throws Throwable  {
      Matrix matrix0 = new Matrix(1176, 1176);
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      matrix0.assign(doubleArray0);
      matrix0.jacobi(doubleArray0[0], matrix0);
  }

  @Test
  public void test15()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[3] = (-1947.4421960823781);
      doubleArray0[0] = doubleArray1;
      Matrix matrix0 = new Matrix(doubleArray0);
      assertNotNull(matrix0);
      
      // Undeclared exception!
      try {
        matrix0.svdcmp((Matrix) null, doubleArray0[0], (Matrix) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test16()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 2.0;
      doubleArray0[0] = doubleArray1;
      Matrix matrix0 = new Matrix(doubleArray0);
      assertNotNull(matrix0);
      
      // Undeclared exception!
      try {
        matrix0.svdcmp((Matrix) null, doubleArray0[0], (Matrix) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test17()  throws Throwable  {
      Matrix matrix0 = new Matrix(1, 1);
      assertNotNull(matrix0);
      
      double[] doubleArray0 = new double[1];
      Vector vector0 = new Vector();
      try {
        Matrix.svbksb(matrix0, doubleArray0, matrix0, vector0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
        /*
         * Arrays, matrrices, or vectors of incompatible dimensions
         */
      }
  }

  @Test
  public void test18()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 2.0;
      doubleArray1[3] = (-1947.4421960823781);
      doubleArray0[0] = doubleArray1;
      Matrix matrix0 = new Matrix(doubleArray0);
      assertNotNull(matrix0);
      
      // Undeclared exception!
      try {
        matrix0.svdcmp((Matrix) null, doubleArray0[0], (Matrix) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test19()  throws Throwable  {
      Matrix matrix0 = new Matrix(1, 1);
      assertNotNull(matrix0);
      
      String string0 = matrix0.toString();
      assertNotNull(string0);
      assertEquals("{\n\t{ 0.0 }\n}", string0);
  }
}
