/*
 * This file was automatically generated by EvoSuite
 */

package jigl.signal.ops.morph;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import jigl.signal.DiscreteSignal;
import jigl.signal.InvalidKernelException;
import jigl.signal.ROI;
import jigl.signal.RealSignal;
import jigl.signal.Signal;
import jigl.signal.SignalKernel;
import jigl.signal.SignalNotSupportedException;
import jigl.signal.ops.morph.GErode;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class GErodeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      float[] floatArray0 = new float[1];
      SignalKernel signalKernel0 = new SignalKernel(floatArray0);
      GErode gErode0 = new GErode(signalKernel0, 1);
      short[] shortArray0 = new short[4];
      DiscreteSignal discreteSignal0 = new DiscreteSignal(shortArray0);
      DiscreteSignal discreteSignal1 = (DiscreteSignal)gErode0.apply(discreteSignal0);
      assertEquals(0, discreteSignal1.min());
      assertNotNull(discreteSignal1);
  }

  @Test
  public void test1()  throws Throwable  {
      SignalKernel signalKernel0 = new SignalKernel(1);
      GErode gErode0 = new GErode(signalKernel0, 0);
      ROI rOI0 = new ROI();
      short[] shortArray0 = new short[1];
      DiscreteSignal discreteSignal0 = new DiscreteSignal(shortArray0);
      DiscreteSignal discreteSignal1 = (DiscreteSignal)gErode0.apply(discreteSignal0, rOI0);
      assertNotNull(discreteSignal1);
      assertEquals(-1, discreteSignal1.min());
  }

  @Test
  public void test2()  throws Throwable  {
      SignalKernel signalKernel0 = new SignalKernel(1);
      GErode gErode0 = new GErode(signalKernel0, (-1));
      RealSignal realSignal0 = (RealSignal)gErode0.apply((Signal) signalKernel0);
      assertNotNull(realSignal0);
      assertEquals("2\n-1.0 0.0 \n", realSignal0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      SignalKernel signalKernel0 = new SignalKernel(0.0F, 1137);
      GErode gErode0 = new GErode(signalKernel0, 1137);
      ROI rOI0 = new ROI(1137, 1137);
      // Undeclared exception!
      try {
        gErode0.apply((Signal) signalKernel0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 1137
         */
      }
  }
}
