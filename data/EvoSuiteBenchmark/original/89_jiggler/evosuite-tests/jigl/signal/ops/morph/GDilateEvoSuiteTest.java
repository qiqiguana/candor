/*
 * This file was automatically generated by EvoSuite
 */

package jigl.signal.ops.morph;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import jigl.signal.DiscreteSignal;
import jigl.signal.InvalidKernelException;
import jigl.signal.ROI;
import jigl.signal.RealSignal;
import jigl.signal.Signal;
import jigl.signal.SignalKernel;
import jigl.signal.SignalNotSupportedException;
import jigl.signal.ops.morph.GDilate;
import org.evosuite.testcase.TestCaseExecutor;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class GDilateEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SignalKernel signalKernel0 = new SignalKernel((float) 559, 559);
      GDilate gDilate0 = new GDilate(signalKernel0, 559);
      gDilate0.apply((Signal) signalKernel0);
  }

  @Test
  public void test1()  throws Throwable  {
      SignalKernel signalKernel0 = new SignalKernel(612.8893F, 1792);
      GDilate gDilate0 = new GDilate(signalKernel0, 1792);
      short[] shortArray0 = new short[4];
      DiscreteSignal discreteSignal0 = new DiscreteSignal(shortArray0);
      gDilate0.apply(discreteSignal0);
  }

  @Test
  public void test2()  throws Throwable  {
      float[] floatArray0 = new float[1];
      SignalKernel signalKernel0 = new SignalKernel(floatArray0);
      GDilate gDilate0 = new GDilate(signalKernel0, 0);
      short[] shortArray0 = new short[6];
      DiscreteSignal discreteSignal0 = new DiscreteSignal(shortArray0);
      ROI rOI0 = new ROI((-1557), 0);
      // Undeclared exception!
      try {
        gDilate0.apply(discreteSignal0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * -1557
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      SignalKernel signalKernel0 = new SignalKernel(0);
      GDilate gDilate0 = new GDilate(signalKernel0, 0);
      ROI rOI0 = new ROI();
      RealSignal realSignal0 = (RealSignal)gDilate0.apply((RealSignal) signalKernel0, rOI0);
      assertNotNull(realSignal0);
      assertEquals(2.0F, realSignal0.max(), 0.01F);
  }
}
