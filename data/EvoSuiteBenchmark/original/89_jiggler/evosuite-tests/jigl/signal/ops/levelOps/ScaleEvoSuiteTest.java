/*
 * This file was automatically generated by EvoSuite
 */

package jigl.signal.ops.levelOps;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import jigl.signal.DiscreteSignal;
import jigl.signal.PowerSignal;
import jigl.signal.ROI;
import jigl.signal.Signal;
import jigl.signal.SignalKernel;
import jigl.signal.SignalNotSupportedException;
import jigl.signal.ops.levelOps.Scale;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ScaleEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Scale scale0 = new Scale(0.0F, 0.0F);
      short[] shortArray0 = new short[10];
      DiscreteSignal discreteSignal0 = new DiscreteSignal(shortArray0);
      DiscreteSignal discreteSignal1 = (DiscreteSignal)scale0.apply(discreteSignal0);
      assertEquals("10\n0 0 0 0 0 0 0 0 0 0 \n", discreteSignal1.toString());
      assertNotNull(discreteSignal1);
  }

  @Test
  public void test1()  throws Throwable  {
      Scale scale0 = new Scale((-646), 683);
      DiscreteSignal discreteSignal0 = new DiscreteSignal();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try {
        scale0.apply(discreteSignal0, rOI0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      Scale scale0 = new Scale(0, 1);
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1691);
      DiscreteSignal discreteSignal0 = new DiscreteSignal(shortArray0);
      ROI rOI0 = new ROI();
      scale0.apply(discreteSignal0, rOI0);
      assertEquals("4\n0 0 0 0 \n", discreteSignal0.toString());
      assertEquals(0, discreteSignal0.min());
  }

  @Test
  public void test3()  throws Throwable  {
      Scale scale0 = new Scale((-1.0F), (-1.0F));
      PowerSignal powerSignal0 = new PowerSignal(0);
      // Undeclared exception!
      try {
        scale0.apply((Signal) powerSignal0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * -1
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      Scale scale0 = new Scale(1432, 1432);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1432;
      SignalKernel signalKernel0 = new SignalKernel(floatArray0);
      SignalKernel signalKernel1 = (SignalKernel)scale0.apply((Signal) signalKernel0);
      assertNotNull(signalKernel1);
      assertEquals("6\n1432.0 0.0 0.0 0.0 0.0 0.0 \n", signalKernel1.toString());
  }
}
