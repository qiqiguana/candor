/*
 * This file was automatically generated by EvoSuite
 */

package jigl.signal.ops.levelOps;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import jigl.signal.DiscreteSignal;
import jigl.signal.PowerSignal;
import jigl.signal.ROI;
import jigl.signal.RealSignal;
import jigl.signal.ops.levelOps.Window;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class WindowEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Window window0 = new Window(0, 0);
      short[] shortArray0 = new short[10];
      DiscreteSignal discreteSignal0 = new DiscreteSignal(shortArray0);
      window0.apply(discreteSignal0);
      assertEquals(255, discreteSignal0.max());
      assertEquals("10\n255 255 255 255 255 255 255 255 255 255 \n", discreteSignal0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      Window window0 = new Window(1, 834);
      short[] shortArray0 = new short[10];
      DiscreteSignal discreteSignal0 = new DiscreteSignal(shortArray0);
      ROI rOI0 = new ROI();
      DiscreteSignal discreteSignal1 = (DiscreteSignal)window0.apply(discreteSignal0, rOI0);
      assertNotNull(discreteSignal1);
      assertEquals("10\n0 0 0 0 0 0 0 0 0 0 \n", discreteSignal1.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      Window window0 = new Window(1, 834);
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short)255;
      DiscreteSignal discreteSignal0 = new DiscreteSignal(shortArray0);
      ROI rOI0 = new ROI();
      DiscreteSignal discreteSignal1 = (DiscreteSignal)window0.apply(discreteSignal0, rOI0);
      assertEquals("10\n77 0 0 0 0 0 0 0 0 0 \n", discreteSignal0.toString());
      assertEquals("10\n77 0 0 0 0 0 0 0 0 0 \n", discreteSignal1.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      Window window0 = new Window(32767, 32767);
      PowerSignal powerSignal0 = new PowerSignal(0);
      // Undeclared exception!
      try {
        window0.apply((RealSignal) powerSignal0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * -1
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      Window window0 = new Window((-379.99493F), 914.8673F);
      float[] floatArray0 = new float[4];
      floatArray0[3] = 914.8673F;
      RealSignal realSignal0 = new RealSignal(floatArray0);
      RealSignal realSignal1 = (RealSignal)window0.apply(realSignal0);
      assertEquals(74.83321F, realSignal0.min(), 0.01F);
      assertEquals(255.0F, realSignal1.max(), 0.01F);
  }

  @Test
  public void test5()  throws Throwable  {
      Window window0 = new Window((-379.99493F), 914.8673F);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-379.99493F);
      RealSignal realSignal0 = new RealSignal(floatArray0);
      RealSignal realSignal1 = (RealSignal)window0.apply(realSignal0);
      assertEquals(0.0F, realSignal0.min(), 0.01F);
      assertEquals(74.83321F, realSignal1.max(), 0.01F);
  }
}
