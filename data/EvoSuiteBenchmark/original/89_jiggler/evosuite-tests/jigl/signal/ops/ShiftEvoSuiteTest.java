/*
 * This file was automatically generated by EvoSuite
 */

package jigl.signal.ops;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import jigl.signal.DiscreteSignal;
import jigl.signal.MagnitudeSignal;
import jigl.signal.RealSignal;
import jigl.signal.Signal;
import jigl.signal.SignalKernel;
import jigl.signal.SignalNotSupportedException;
import jigl.signal.ops.Shift;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ShiftEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Shift shift0 = new Shift((-2008), (-172));
      short[] shortArray0 = new short[10];
      DiscreteSignal discreteSignal0 = new DiscreteSignal(shortArray0);
      DiscreteSignal discreteSignal1 = (DiscreteSignal)shift0.apply(discreteSignal0);
      assertNotNull(discreteSignal1);
      assertEquals(10, discreteSignal1.length());
  }

  @Test
  public void test1()  throws Throwable  {
      Shift shift0 = new Shift(1, 1);
      DiscreteSignal discreteSignal0 = new DiscreteSignal(603);
      DiscreteSignal discreteSignal1 = (DiscreteSignal)shift0.apply(discreteSignal0);
      assertEquals("603\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n", discreteSignal1.toString());
      assertNotNull(discreteSignal1);
  }

  @Test
  public void test2()  throws Throwable  {
      Shift shift0 = new Shift((-1760), 1);
      short[] shortArray0 = new short[9];
      DiscreteSignal discreteSignal0 = new DiscreteSignal(shortArray0);
      // Undeclared exception!
      try {
        shift0.apply(discreteSignal0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      Shift shift0 = new Shift(0, 0);
      DiscreteSignal discreteSignal0 = new DiscreteSignal(948);
      DiscreteSignal discreteSignal1 = (DiscreteSignal)shift0.apply(discreteSignal0);
      assertEquals(948, discreteSignal1.length());
      assertNotNull(discreteSignal1);
  }

  @Test
  public void test4()  throws Throwable  {
      Shift shift0 = new Shift(155, 155);
      short[] shortArray0 = new short[4];
      DiscreteSignal discreteSignal0 = new DiscreteSignal(shortArray0);
      DiscreteSignal discreteSignal1 = (DiscreteSignal)shift0.apply(discreteSignal0);
      assertNotNull(discreteSignal1);
      assertEquals(4, discreteSignal1.length());
  }

  @Test
  public void test5()  throws Throwable  {
      Shift shift0 = new Shift((-2008), (-172));
      float[] floatArray0 = new float[1];
      SignalKernel signalKernel0 = new SignalKernel(floatArray0);
      RealSignal realSignal0 = (RealSignal)shift0.apply((Signal) signalKernel0);
      assertNotNull(realSignal0);
      assertEquals(1, realSignal0.length());
  }

  @Test
  public void test6()  throws Throwable  {
      Shift shift0 = new Shift((-1760), 1);
      MagnitudeSignal magnitudeSignal0 = new MagnitudeSignal(1);
      RealSignal realSignal0 = (RealSignal)shift0.apply((RealSignal) magnitudeSignal0);
      assertNotNull(realSignal0);
      assertEquals(1, realSignal0.length());
  }

  @Test
  public void test7()  throws Throwable  {
      MagnitudeSignal magnitudeSignal0 = new MagnitudeSignal(1);
      Shift shift0 = new Shift(1, 1);
      RealSignal realSignal0 = (RealSignal)shift0.apply((RealSignal) magnitudeSignal0);
      assertEquals(0.0F, realSignal0.max(), 0.01F);
      assertNotNull(realSignal0);
  }

  @Test
  public void test8()  throws Throwable  {
      Shift shift0 = new Shift(0, 0);
      SignalKernel signalKernel0 = new SignalKernel((float) 0, 339);
      RealSignal realSignal0 = (RealSignal)shift0.apply((RealSignal) signalKernel0);
      assertNotNull(realSignal0);
      assertEquals(339, realSignal0.length());
  }

  @Test
  public void test9()  throws Throwable  {
      Shift shift0 = new Shift(155, 155);
      float[] floatArray0 = new float[5];
      SignalKernel signalKernel0 = new SignalKernel(floatArray0);
      RealSignal realSignal0 = (RealSignal)shift0.apply((RealSignal) signalKernel0);
      assertNotNull(realSignal0);
      assertEquals(5, realSignal0.length());
  }
}
