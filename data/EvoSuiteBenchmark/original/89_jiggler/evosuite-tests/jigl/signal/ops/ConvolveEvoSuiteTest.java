/*
 * This file was automatically generated by EvoSuite
 */

package jigl.signal.ops;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import jigl.signal.DiscreteSignal;
import jigl.signal.InvalidKernelException;
import jigl.signal.PowerSignal;
import jigl.signal.ROI;
import jigl.signal.RealSignal;
import jigl.signal.SignalKernel;
import jigl.signal.ops.Convolve;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ConvolveEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SignalKernel signalKernel0 = new SignalKernel(0);
      Convolve convolve0 = new Convolve(signalKernel0);
      RealSignal realSignal0 = (RealSignal)convolve0.apply((RealSignal) signalKernel0);
      assertEquals("2\n1.0 2.0 \n", realSignal0.toString());
      assertNotNull(realSignal0);
  }

  @Test
  public void test1()  throws Throwable  {
      SignalKernel signalKernel0 = new SignalKernel(0);
      Convolve convolve0 = new Convolve(signalKernel0);
      short[] shortArray0 = new short[6];
      DiscreteSignal discreteSignal0 = new DiscreteSignal(shortArray0);
      DiscreteSignal discreteSignal1 = (DiscreteSignal)convolve0.apply(discreteSignal0);
      assertNotNull(discreteSignal1);
      assertEquals(0, discreteSignal1.max());
  }

  @Test
  public void test2()  throws Throwable  {
      PowerSignal powerSignal0 = new PowerSignal();
      SignalKernel signalKernel0 = new SignalKernel((RealSignal) powerSignal0);
      Convolve convolve0 = new Convolve(signalKernel0);
      short[] shortArray0 = new short[8];
      DiscreteSignal discreteSignal0 = new DiscreteSignal(shortArray0);
      ROI rOI0 = new ROI(1862, 1154);
      // Undeclared exception!
      try {
        convolve0.apply(discreteSignal0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      float[] floatArray0 = new float[12];
      SignalKernel signalKernel0 = new SignalKernel(floatArray0);
      Convolve convolve0 = new Convolve(signalKernel0);
      DiscreteSignal discreteSignal0 = new DiscreteSignal(42);
      ROI rOI0 = new ROI();
      DiscreteSignal discreteSignal1 = (DiscreteSignal)convolve0.apply(discreteSignal0, rOI0);
      assertEquals(0, discreteSignal1.max());
      assertNotNull(discreteSignal1);
  }

  @Test
  public void test4()  throws Throwable  {
      float[] floatArray0 = new float[4];
      SignalKernel signalKernel0 = new SignalKernel(floatArray0);
      Convolve convolve0 = new Convolve(signalKernel0);
      ROI rOI0 = new ROI(596, 684);
      // Undeclared exception!
      try {
        convolve0.apply((RealSignal) signalKernel0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      float[] floatArray0 = new float[5];
      SignalKernel signalKernel0 = new SignalKernel(floatArray0);
      Convolve convolve0 = new Convolve(signalKernel0);
      ROI rOI0 = new ROI();
      RealSignal realSignal0 = (RealSignal)convolve0.apply((RealSignal) signalKernel0, rOI0);
      assertEquals("5\n0.0 0.0 0.0 0.0 0.0 \n", realSignal0.toString());
      assertNotNull(realSignal0);
  }

  @Test
  public void test6()  throws Throwable  {
      SignalKernel signalKernel0 = new SignalKernel(0);
      Convolve convolve0 = new Convolve(signalKernel0);
      RealSignal realSignal0 = convolve0.apply_long((RealSignal) signalKernel0);
      assertNotNull(realSignal0);
      assertEquals("3\n1.0 2.0 1.0 \n", realSignal0.toString());
  }
}
