/*
 * This file was automatically generated by EvoSuite
 */

package jigl.signal.ops.morph;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import jigl.signal.DiscreteSignal;
import jigl.signal.PowerSignal;
import jigl.signal.ROI;
import jigl.signal.RealSignal;
import jigl.signal.Signal;
import jigl.signal.SignalKernel;
import jigl.signal.SignalNotSupportedException;
import jigl.signal.ops.morph.GClose;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class GCloseEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      GClose gClose0 = new GClose((SignalKernel) null, 1660);
      short[] shortArray0 = new short[4];
      DiscreteSignal discreteSignal0 = new DiscreteSignal(shortArray0);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try {
        gClose0.apply(discreteSignal0, rOI0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      PowerSignal powerSignal0 = new PowerSignal(0);
      SignalKernel signalKernel0 = new SignalKernel((RealSignal) powerSignal0);
      GClose gClose0 = new GClose(signalKernel0, 0);
      short[] shortArray0 = new short[5];
      DiscreteSignal discreteSignal0 = new DiscreteSignal(shortArray0);
      DiscreteSignal discreteSignal1 = (DiscreteSignal)gClose0.apply(discreteSignal0);
      assertEquals(255, discreteSignal1.min());
      assertNotNull(discreteSignal1);
  }

  @Test
  public void test2()  throws Throwable  {
      float[] floatArray0 = new float[1];
      SignalKernel signalKernel0 = new SignalKernel(floatArray0);
      GClose gClose0 = new GClose(signalKernel0, 675);
      RealSignal realSignal0 = (RealSignal)gClose0.apply((Signal) signalKernel0, (ROI) null);
      assertEquals(1, realSignal0.length());
  }

  @Test
  public void test3()  throws Throwable  {
      float[] floatArray0 = new float[1];
      SignalKernel signalKernel0 = new SignalKernel(floatArray0);
      GClose gClose0 = new GClose(signalKernel0, 675);
      ROI rOI0 = new ROI();
      RealSignal realSignal0 = (RealSignal)gClose0.apply((Signal) signalKernel0, rOI0);
      assertEquals(0.0F, realSignal0.min(), 0.01F);
  }
}
