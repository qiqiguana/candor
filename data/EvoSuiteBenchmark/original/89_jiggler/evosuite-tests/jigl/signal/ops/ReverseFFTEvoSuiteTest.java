/*
 * This file was automatically generated by EvoSuite
 */

package jigl.signal.ops;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import jigl.signal.ComplexSignal;
import jigl.signal.DiscreteSignal;
import jigl.signal.InvalidKernelException;
import jigl.signal.Signal;
import jigl.signal.SignalKernel;
import jigl.signal.SignalNotSupportedException;
import jigl.signal.ops.ReverseFFT;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ReverseFFTEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ReverseFFT reverseFFT0 = new ReverseFFT();
      ComplexSignal complexSignal0 = new ComplexSignal(0);
      // Undeclared exception!
      try {
        reverseFFT0.apply(complexSignal0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * The length of this signal is not a power of 2. You can pad zeros to change its length and apply FFT again.
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      ReverseFFT reverseFFT0 = new ReverseFFT();
      SignalKernel signalKernel0 = new SignalKernel(0);
      ComplexSignal complexSignal0 = (ComplexSignal)reverseFFT0.apply((Signal) signalKernel0);
      assertEquals("2\n1.0 0.0 \n2\n0.0 0.0 \n", complexSignal0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      ReverseFFT reverseFFT0 = new ReverseFFT();
      // Undeclared exception!
      try {
        reverseFFT0.apply((DiscreteSignal) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
