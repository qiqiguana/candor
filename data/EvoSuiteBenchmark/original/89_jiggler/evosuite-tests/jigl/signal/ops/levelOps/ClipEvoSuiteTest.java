/*
 * This file was automatically generated by EvoSuite
 */

package jigl.signal.ops.levelOps;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import jigl.signal.DiscreteSignal;
import jigl.signal.PhaseSignal;
import jigl.signal.PowerSignal;
import jigl.signal.ROI;
import jigl.signal.RealSignal;
import jigl.signal.Signal;
import jigl.signal.SignalNotSupportedException;
import jigl.signal.ops.levelOps.Clip;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ClipEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Clip clip0 = new Clip(0.0F, 0.0F);
      PhaseSignal phaseSignal0 = new PhaseSignal(1);
      PhaseSignal phaseSignal1 = (PhaseSignal)clip0.apply((RealSignal) phaseSignal0);
      assertEquals(0.0F, phaseSignal0.max(), 0.01F);
      assertNotNull(phaseSignal1);
      assertEquals(0.0F, phaseSignal1.min(), 0.01F);
  }

  @Test
  public void test1()  throws Throwable  {
      Clip clip0 = new Clip((-1766), 0);
      // Undeclared exception!
      try {
        clip0.apply((DiscreteSignal) null, (ROI) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      Clip clip0 = new Clip(0.0F, 0.0F);
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short)1920;
      DiscreteSignal discreteSignal0 = new DiscreteSignal(shortArray0);
      clip0.apply(discreteSignal0);
      assertEquals("10\n0 0 0 0 0 0 0 0 0 0 \n", discreteSignal0.toString());
      assertEquals(0, discreteSignal0.max());
  }

  @Test
  public void test3()  throws Throwable  {
      Clip clip0 = new Clip(0, 1);
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1691);
      DiscreteSignal discreteSignal0 = new DiscreteSignal(shortArray0);
      ROI rOI0 = new ROI();
      DiscreteSignal discreteSignal1 = (DiscreteSignal)clip0.apply(discreteSignal0, rOI0);
      assertEquals(0, discreteSignal0.min());
      assertEquals(0, discreteSignal1.max());
  }

  @Test
  public void test4()  throws Throwable  {
      Clip clip0 = new Clip((-1.0F), (-1.0F));
      PowerSignal powerSignal0 = new PowerSignal(0);
      // Undeclared exception!
      try {
        clip0.apply((Signal) powerSignal0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * -1
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      Clip clip0 = new Clip(0.0F, (-1.0F));
      PhaseSignal phaseSignal0 = new PhaseSignal(1);
      ROI rOI0 = new ROI();
      PhaseSignal phaseSignal1 = (PhaseSignal)clip0.apply((RealSignal) phaseSignal0, rOI0);
      assertNotNull(phaseSignal1);
      assertEquals("1\n0.0 \n", phaseSignal0.toString());
      assertEquals(0.0F, phaseSignal1.min(), 0.01F);
  }
}
