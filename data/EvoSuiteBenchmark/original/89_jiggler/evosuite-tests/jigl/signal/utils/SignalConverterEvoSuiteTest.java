/*
 * This file was automatically generated by EvoSuite
 */

package jigl.signal.utils;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import jigl.signal.ComplexSignal;
import jigl.signal.DiscreteSignal;
import jigl.signal.InvalidKernelException;
import jigl.signal.MagnitudeSignal;
import jigl.signal.RealSignal;
import jigl.signal.Signal;
import jigl.signal.SignalKernel;
import jigl.signal.utils.SignalConverter;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SignalConverterEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SignalConverter signalConverter0 = new SignalConverter();
      assertNotNull(signalConverter0);
  }

  @Test
  public void test1()  throws Throwable  {
      ComplexSignal complexSignal0 = new ComplexSignal(1466);
      SignalConverter.toDiscrete((Signal) complexSignal0);
  }

  @Test
  public void test2()  throws Throwable  {
      DiscreteSignal discreteSignal0 = new DiscreteSignal(2003);
      DiscreteSignal discreteSignal1 = SignalConverter.toDiscrete((Signal) discreteSignal0);
      assertEquals(2003, discreteSignal1.length());
      assertNotSame(discreteSignal0, discreteSignal1);
      assertNotNull(discreteSignal1);
  }

  @Test
  public void test3()  throws Throwable  {
      MagnitudeSignal magnitudeSignal0 = new MagnitudeSignal();
      DiscreteSignal discreteSignal0 = SignalConverter.toDiscrete((Signal) magnitudeSignal0);
      assertEquals("0\n\n", discreteSignal0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      DiscreteSignal discreteSignal0 = new DiscreteSignal();
      ComplexSignal complexSignal0 = SignalConverter.toComplex((Signal) discreteSignal0);
      RealSignal realSignal0 = SignalConverter.toReal((Signal) complexSignal0);
      assertEquals((-32768.0F), realSignal0.max(), 0.01F);
  }

  @Test
  public void test5()  throws Throwable  {
      RealSignal realSignal0 = new RealSignal(29);
      DiscreteSignal discreteSignal0 = SignalConverter.toDiscrete(realSignal0);
      assertNotNull(discreteSignal0);
      
      RealSignal realSignal1 = SignalConverter.toReal((Signal) discreteSignal0);
      assertNotNull(realSignal1);
      assertEquals("29\n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n", realSignal1.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      MagnitudeSignal magnitudeSignal0 = new MagnitudeSignal();
      RealSignal realSignal0 = SignalConverter.toReal((Signal) magnitudeSignal0);
      assertEquals((-32768.0F), realSignal0.max(), 0.01F);
  }

  @Test
  public void test7()  throws Throwable  {
      ComplexSignal complexSignal0 = new ComplexSignal(1466);
      SignalConverter.toComplex((Signal) complexSignal0);
  }

  @Test
  public void test8()  throws Throwable  {
      SignalKernel signalKernel0 = new SignalKernel(0);
      ComplexSignal complexSignal0 = SignalConverter.toComplex((Signal) signalKernel0);
      assertNotNull(complexSignal0);
      
      DiscreteSignal discreteSignal0 = SignalConverter.toDiscrete(complexSignal0);
      assertNotNull(discreteSignal0);
      
      ComplexSignal complexSignal1 = SignalConverter.toComplex(discreteSignal0);
      assertNotNull(complexSignal1);
      assertEquals("2\n1.0 1.0 \n2\n0.0 0.0 \n", complexSignal0.toString());
      assertEquals("2\n1.0 1.0 \n2\n0.0 0.0 \n", complexSignal1.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      SignalKernel signalKernel0 = new SignalKernel(0);
      RealSignal realSignal0 = SignalConverter.toReal((RealSignal) signalKernel0);
      assertEquals("2\n1.0 1.0 \n", realSignal0.toString());
      assertNotNull(realSignal0);
  }

  @Test
  public void test10()  throws Throwable  {
      ComplexSignal complexSignal0 = new ComplexSignal(2003);
      SignalConverter.toReal(complexSignal0);
  }
}
