/*
 * This file was automatically generated by EvoSuite
 */

package jigl.signal;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import jigl.signal.InvalidKernelException;
import jigl.signal.RealSignal;
import jigl.signal.SignalKernel;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SignalKernelEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      float[] floatArray0 = new float[1];
      SignalKernel signalKernel0 = new SignalKernel(floatArray0);
      signalKernel0.normalize();
      assertEquals(0.0F, signalKernel0.max(), 0.01F);
      assertEquals("1\n0.0 \n", signalKernel0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      SignalKernel signalKernel0 = new SignalKernel(0);
      assertNotNull(signalKernel0);
      
      SignalKernel signalKernel1 = new SignalKernel((RealSignal) signalKernel0);
      assertEquals("2\n1.0 1.0 \n", signalKernel0.toString());
      assertNotNull(signalKernel1);
      assertEquals(1.0F, signalKernel1.min(), 0.01F);
  }

  @Test
  public void test2()  throws Throwable  {
      SignalKernel signalKernel0 = null;
      try {
        signalKernel0 = new SignalKernel((-1609));
        fail("Expecting exception: InvalidKernelException");
      } catch(InvalidKernelException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      SignalKernel signalKernel0 = new SignalKernel(1);
      assertEquals("2\n1.0 -1.0 \n", signalKernel0.toString());
      assertNotNull(signalKernel0);
  }

  @Test
  public void test4()  throws Throwable  {
      SignalKernel signalKernel0 = new SignalKernel(0.0F, 959);
      assertNotNull(signalKernel0);
      assertEquals(0.0F, signalKernel0.max(), 0.01F);
  }

  @Test
  public void test5()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 443.94016F;
      SignalKernel signalKernel0 = new SignalKernel(floatArray0);
      signalKernel0.normalize();
      assertEquals(1.0F, signalKernel0.min(), 0.01F);
      assertEquals("1\n1.0 \n", signalKernel0.toString());
  }
}
