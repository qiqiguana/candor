/*
 * This file was automatically generated by EvoSuite
 */

package jigl.signal;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import jigl.signal.DiscreteSignal;
import jigl.signal.ROI;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DiscreteSignalEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DiscreteSignal discreteSignal0 = new DiscreteSignal(1);
      assertNotNull(discreteSignal0);
      
      DiscreteSignal discreteSignal1 = discreteSignal0.diff(discreteSignal0);
      assertNotNull(discreteSignal1);
      assertEquals("1\n0 \n", discreteSignal1.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      short[] shortArray0 = new short[1];
      DiscreteSignal discreteSignal0 = new DiscreteSignal(shortArray0);
      ROI rOI0 = new ROI();
      discreteSignal0.subtract((int) (short)0, 1762, rOI0);
      assertEquals(-1762, discreteSignal0.max());
      assertEquals(-1762, discreteSignal0.min());
  }

  @Test
  public void test2()  throws Throwable  {
      short[] shortArray0 = new short[5];
      DiscreteSignal discreteSignal0 = new DiscreteSignal(shortArray0);
      discreteSignal0.add(0, (-1000));
      assertEquals("5\n-1000 0 0 0 0 \n", discreteSignal0.toString());
      assertEquals(-1000, discreteSignal0.min());
  }

  @Test
  public void test3()  throws Throwable  {
      DiscreteSignal discreteSignal0 = new DiscreteSignal(944);
      assertNotNull(discreteSignal0);
      
      ROI rOI0 = new ROI();
      discreteSignal0.multiply(0, (-1), rOI0);
      assertEquals("944\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n", discreteSignal0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      DiscreteSignal discreteSignal0 = new DiscreteSignal(1);
      assertNotNull(discreteSignal0);
      
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try {
        discreteSignal0.divide(1, 1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 1
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      DiscreteSignal discreteSignal0 = new DiscreteSignal(944);
      assertNotNull(discreteSignal0);
      
      // Undeclared exception!
      try {
        discreteSignal0.divide((-528), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * -528
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      DiscreteSignal discreteSignal0 = new DiscreteSignal(1);
      assertNotNull(discreteSignal0);
      
      discreteSignal0.convolve(discreteSignal0);
      assertEquals(1, discreteSignal0.length());
  }

  @Test
  public void test7()  throws Throwable  {
      short[] shortArray0 = new short[5];
      DiscreteSignal discreteSignal0 = new DiscreteSignal(shortArray0);
      // Undeclared exception!
      try {
        discreteSignal0.subtract((int) (short)139, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 139
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      short[] shortArray0 = new short[5];
      DiscreteSignal discreteSignal0 = new DiscreteSignal(shortArray0);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try {
        discreteSignal0.get((int) (short)32767, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 32767
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      DiscreteSignal discreteSignal0 = new DiscreteSignal(0);
      assertNotNull(discreteSignal0);
      
      DiscreteSignal discreteSignal1 = (DiscreteSignal)discreteSignal0.copy();
      assertNotSame(discreteSignal1, discreteSignal0);
      assertNotNull(discreteSignal1);
      assertEquals(0, discreteSignal1.length());
  }

  @Test
  public void test10()  throws Throwable  {
      short[] shortArray0 = new short[1];
      DiscreteSignal discreteSignal0 = new DiscreteSignal(shortArray0);
      // Undeclared exception!
      try {
        discreteSignal0.set((int) (short) (-1), 724);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * -1
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      DiscreteSignal discreteSignal0 = new DiscreteSignal(1);
      assertNotNull(discreteSignal0);
      
      ROI rOI0 = new ROI();
      discreteSignal0.set(0, (-1613), rOI0);
      discreteSignal0.convolve(discreteSignal0, rOI0);
      assertEquals("1\n-1613 \n", discreteSignal0.toString());
      assertEquals(-1613, discreteSignal0.min());
  }

  @Test
  public void test12()  throws Throwable  {
      DiscreteSignal discreteSignal0 = new DiscreteSignal();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try {
        discreteSignal0.add((int) (short)1106, 1419, rOI0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      short[] shortArray0 = new short[1];
      DiscreteSignal discreteSignal0 = new DiscreteSignal(shortArray0);
      ROI rOI0 = new ROI();
      DiscreteSignal discreteSignal1 = (DiscreteSignal)discreteSignal0.copy(rOI0);
      assertNotNull(discreteSignal1);
      assertEquals("1\n0 \n", discreteSignal1.toString());
      assertNotSame(discreteSignal0, discreteSignal1);
  }

  @Test
  public void test14()  throws Throwable  {
      short[] shortArray0 = new short[27];
      DiscreteSignal discreteSignal0 = new DiscreteSignal(shortArray0);
      DiscreteSignal discreteSignal1 = new DiscreteSignal(discreteSignal0);
      assertNotNull(discreteSignal1);
      assertEquals(27, discreteSignal1.length());
      assertEquals(0, discreteSignal1.max());
  }

  @Test
  public void test15()  throws Throwable  {
      short[] shortArray0 = new short[5];
      DiscreteSignal discreteSignal0 = new DiscreteSignal(shortArray0);
      // Undeclared exception!
      try {
        discreteSignal0.multiply((-1121), (-1017));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * -1121
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      DiscreteSignal discreteSignal0 = new DiscreteSignal(944);
      assertNotNull(discreteSignal0);
      
      short[] shortArray0 = discreteSignal0.getData();
      assertNotNull(shortArray0);
      assertEquals("944\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n", discreteSignal0.toString());
      assertEquals(944, discreteSignal0.length());
  }

  @Test
  public void test17()  throws Throwable  {
      DiscreteSignal discreteSignal0 = new DiscreteSignal(0);
      assertNotNull(discreteSignal0);
      
      DiscreteSignal discreteSignal1 = discreteSignal0.addbuffer(1, (-32768));
      assertNotNull(discreteSignal1);
      
      DiscreteSignal discreteSignal2 = discreteSignal1.clear();
      discreteSignal2.subtract((-32768));
      ROI rOI0 = new ROI();
      discreteSignal2.byteSize(rOI0);
      assertEquals(0, discreteSignal1.max());
      assertEquals("1\n0 \n", discreteSignal1.toString());
  }

  @Test
  public void test18()  throws Throwable  {
      DiscreteSignal discreteSignal0 = new DiscreteSignal(944);
      assertNotNull(discreteSignal0);
      
      discreteSignal0.byteSize();
      assertEquals(944, discreteSignal0.length());
      assertEquals(0, discreteSignal0.max());
  }

  @Test
  public void test19()  throws Throwable  {
      DiscreteSignal discreteSignal0 = new DiscreteSignal(1064);
      DiscreteSignal discreteSignal1 = discreteSignal0.add(1064);
      discreteSignal0.convolve(discreteSignal1);
  }

  @Test
  public void test20()  throws Throwable  {
      DiscreteSignal discreteSignal0 = new DiscreteSignal(0);
      assertNotNull(discreteSignal0);
      
      DiscreteSignal discreteSignal1 = discreteSignal0.subtract((-32768));
      assertNotNull(discreteSignal1);
      assertEquals("0\n\n", discreteSignal1.toString());
  }

  @Test
  public void test21()  throws Throwable  {
      DiscreteSignal discreteSignal0 = new DiscreteSignal(0);
      assertNotNull(discreteSignal0);
      
      DiscreteSignal discreteSignal1 = discreteSignal0.addbuffer(1, (-32768));
      assertNotNull(discreteSignal1);
      
      DiscreteSignal discreteSignal2 = discreteSignal1.multiply(895);
      assertNotNull(discreteSignal2);
      assertEquals("1\n-32768 \n", discreteSignal1.toString());
      assertEquals("1\n-32768 \n", discreteSignal2.toString());
  }

  @Test
  public void test22()  throws Throwable  {
      DiscreteSignal discreteSignal0 = new DiscreteSignal(1);
      assertNotNull(discreteSignal0);
      
      DiscreteSignal discreteSignal1 = discreteSignal0.divide((-787));
      assertEquals("1\n0 \n", discreteSignal1.toString());
      assertNotNull(discreteSignal1);
  }

  @Test
  public void test23()  throws Throwable  {
      short[] shortArray0 = new short[10];
      DiscreteSignal discreteSignal0 = new DiscreteSignal(shortArray0);
      DiscreteSignal discreteSignal1 = discreteSignal0.add(discreteSignal0);
      assertEquals(0, discreteSignal1.max());
  }

  @Test
  public void test24()  throws Throwable  {
      short[] shortArray0 = new short[27];
      DiscreteSignal discreteSignal0 = new DiscreteSignal(shortArray0);
      DiscreteSignal discreteSignal1 = discreteSignal0.addbuffer((int) (short)1, (int) (short)32767);
      assertNotNull(discreteSignal1);
      assertEquals("1\n0 \n", discreteSignal1.toString());
  }

  @Test
  public void test25()  throws Throwable  {
      short[] shortArray0 = new short[8];
      DiscreteSignal discreteSignal0 = new DiscreteSignal(shortArray0);
      DiscreteSignal discreteSignal1 = discreteSignal0.subtract(discreteSignal0);
      assertSame(discreteSignal0, discreteSignal1);
  }

  @Test
  public void test26()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)237;
      DiscreteSignal discreteSignal0 = new DiscreteSignal(shortArray0);
      DiscreteSignal discreteSignal1 = new DiscreteSignal((int) (short)237);
      assertNotNull(discreteSignal1);
      
      // Undeclared exception!
      try {
        discreteSignal1.diff(discreteSignal0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test27()  throws Throwable  {
      DiscreteSignal discreteSignal0 = new DiscreteSignal(1);
      assertNotNull(discreteSignal0);
      
      DiscreteSignal discreteSignal1 = discreteSignal0.multiply(discreteSignal0);
      assertEquals("1\n0 \n", discreteSignal0.toString());
      assertNotNull(discreteSignal1);
      assertEquals("1\n0 \n", discreteSignal1.toString());
  }

  @Test
  public void test28()  throws Throwable  {
      DiscreteSignal discreteSignal0 = new DiscreteSignal(944);
      assertNotNull(discreteSignal0);
      
      DiscreteSignal discreteSignal1 = discreteSignal0.add(944);
      assertNotNull(discreteSignal1);
      
      discreteSignal0.divide(discreteSignal1);
      assertEquals(1, discreteSignal0.min());
      assertEquals("944\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 \n", discreteSignal1.toString());
  }

  @Test
  public void test29()  throws Throwable  {
      DiscreteSignal discreteSignal0 = new DiscreteSignal(1064);
      assertNotNull(discreteSignal0);
      
      String string0 = discreteSignal0.toString();
      assertNotNull(string0);
      assertEquals("1064\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n", discreteSignal0.toString());
      assertEquals("1064\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n", string0);
  }

  @Test
  public void test30()  throws Throwable  {
      short[] shortArray0 = new short[27];
      DiscreteSignal discreteSignal0 = new DiscreteSignal(shortArray0);
      discreteSignal0.clip(0, (int) (short) (-1611));
      assertEquals(0, discreteSignal0.max());
      assertEquals("27\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n", discreteSignal0.toString());
  }

  @Test
  public void test31()  throws Throwable  {
      DiscreteSignal discreteSignal0 = new DiscreteSignal(1);
      assertNotNull(discreteSignal0);
      
      ROI rOI0 = new ROI();
      discreteSignal0.clip(1, 1, rOI0);
      discreteSignal0.clip(1, 1);
      assertEquals("1\n1 \n", discreteSignal0.toString());
      assertEquals(1, discreteSignal0.max());
  }

  @Test
  public void test32()  throws Throwable  {
      DiscreteSignal discreteSignal0 = new DiscreteSignal(1);
      assertNotNull(discreteSignal0);
      
      ROI rOI0 = new ROI();
      discreteSignal0.median(1, rOI0);
      assertEquals(0, discreteSignal0.min());
      assertEquals(1, discreteSignal0.length());
  }

  @Test
  public void test33()  throws Throwable  {
      short[] shortArray0 = new short[10];
      shortArray0[2] = (short) (-314);
      DiscreteSignal discreteSignal0 = new DiscreteSignal(shortArray0);
      discreteSignal0.median(1815);
      assertEquals("10\n0 0 0 0 0 0 0 0 0 0 \n", discreteSignal0.toString());
      assertEquals(0, discreteSignal0.min());
  }

  @Test
  public void test34()  throws Throwable  {
      short[] shortArray0 = new short[8];
      DiscreteSignal discreteSignal0 = new DiscreteSignal(shortArray0);
      // Undeclared exception!
      try {
        discreteSignal0.median((int) (short) (-32768));
        fail("Expecting exception: NegativeArraySizeException");
      } catch(NegativeArraySizeException e) {
      }
  }

  @Test
  public void test35()  throws Throwable  {
      DiscreteSignal discreteSignal0 = new DiscreteSignal(1);
      assertNotNull(discreteSignal0);
      
      ROI rOI0 = new ROI();
      DiscreteSignal discreteSignal1 = discreteSignal0.clear(rOI0);
      assertNotNull(discreteSignal1);
      assertEquals("1\n0 \n", discreteSignal0.toString());
      assertEquals(0, discreteSignal1.max());
  }

  @Test
  public void test36()  throws Throwable  {
      short[] shortArray0 = new short[1];
      DiscreteSignal discreteSignal0 = new DiscreteSignal(shortArray0);
      ROI rOI0 = new ROI();
      DiscreteSignal discreteSignal1 = discreteSignal0.clear((-708), rOI0);
      assertNotNull(discreteSignal1);
      assertEquals(-708, discreteSignal0.min());
      assertEquals("1\n-708 \n", discreteSignal0.toString());
  }

  @Test
  public void test37()  throws Throwable  {
      DiscreteSignal discreteSignal0 = new DiscreteSignal(0);
      assertNotNull(discreteSignal0);
      
      DiscreteSignal discreteSignal1 = discreteSignal0.addbuffer(1, (-32768));
      assertNotNull(discreteSignal1);
      assertEquals(-32768, discreteSignal1.min());
      
      DiscreteSignal discreteSignal2 = discreteSignal1.clear();
      ROI rOI0 = new ROI();
      discreteSignal2.byteSize(rOI0);
      assertEquals("1\n0 \n", discreteSignal1.toString());
      assertEquals(0, discreteSignal1.min());
  }

  @Test
  public void test38()  throws Throwable  {
      DiscreteSignal discreteSignal0 = new DiscreteSignal(1);
      assertNotNull(discreteSignal0);
      
      ROI rOI0 = new ROI();
      DiscreteSignal discreteSignal1 = discreteSignal0.add(1, rOI0);
      assertNotNull(discreteSignal1);
      assertEquals(1, discreteSignal0.min());
      assertEquals("1\n1 \n", discreteSignal1.toString());
  }

  @Test
  public void test39()  throws Throwable  {
      short[] shortArray0 = new short[1];
      DiscreteSignal discreteSignal0 = new DiscreteSignal(shortArray0);
      ROI rOI0 = new ROI();
      DiscreteSignal discreteSignal1 = discreteSignal0.subtract((int) (short)0, rOI0);
      assertNotNull(discreteSignal1);
      assertEquals(0, discreteSignal1.min());
  }

  @Test
  public void test40()  throws Throwable  {
      DiscreteSignal discreteSignal0 = new DiscreteSignal(1);
      assertNotNull(discreteSignal0);
      
      ROI rOI0 = new ROI();
      DiscreteSignal discreteSignal1 = discreteSignal0.multiply(1, rOI0);
      assertNotNull(discreteSignal1);
      assertEquals("1\n0 \n", discreteSignal0.toString());
      assertEquals("1\n0 \n", discreteSignal1.toString());
  }

  @Test
  public void test41()  throws Throwable  {
      short[] shortArray0 = new short[10];
      DiscreteSignal discreteSignal0 = new DiscreteSignal(shortArray0);
      ROI rOI0 = new ROI();
      DiscreteSignal discreteSignal1 = discreteSignal0.divide((int) (short)564, rOI0);
      assertNotNull(discreteSignal1);
      assertEquals("10\n0 0 0 0 0 0 0 0 0 0 \n", discreteSignal1.toString());
  }

  @Test
  public void test42()  throws Throwable  {
      short[] shortArray0 = new short[5];
      DiscreteSignal discreteSignal0 = new DiscreteSignal(shortArray0);
      ROI rOI0 = new ROI();
      DiscreteSignal discreteSignal1 = discreteSignal0.subtract(discreteSignal0, rOI0, rOI0);
      assertEquals(0, discreteSignal1.max());
  }

  @Test
  public void test43()  throws Throwable  {
      short[] shortArray0 = new short[1];
      DiscreteSignal discreteSignal0 = new DiscreteSignal(shortArray0);
      ROI rOI0 = new ROI();
      DiscreteSignal discreteSignal1 = discreteSignal0.multiply(discreteSignal0, rOI0, rOI0);
      assertEquals(1, discreteSignal1.length());
  }

  @Test
  public void test44()  throws Throwable  {
      short[] shortArray0 = new short[10];
      DiscreteSignal discreteSignal0 = new DiscreteSignal(shortArray0);
      ROI rOI0 = new ROI();
      DiscreteSignal discreteSignal1 = discreteSignal0.divide(discreteSignal0, rOI0, rOI0);
      assertEquals(0, discreteSignal1.max());
  }

  @Test
  public void test45()  throws Throwable  {
      short[] shortArray0 = new short[10];
      DiscreteSignal discreteSignal0 = new DiscreteSignal(shortArray0);
      ROI rOI0 = new ROI();
      DiscreteSignal discreteSignal1 = discreteSignal0.add(discreteSignal0, rOI0, rOI0);
      assertEquals(0, discreteSignal1.min());
  }

  @Test
  public void test46()  throws Throwable  {
      DiscreteSignal discreteSignal0 = new DiscreteSignal(1);
      assertNotNull(discreteSignal0);
      
      ROI rOI0 = new ROI();
      String string0 = discreteSignal0.toString(rOI0);
      assertNotNull(string0);
      assertEquals("1\n0 \n", string0);
  }

  @Test
  public void test47()  throws Throwable  {
      short[] shortArray0 = new short[1];
      DiscreteSignal discreteSignal0 = new DiscreteSignal(shortArray0);
      ROI rOI0 = new ROI();
      discreteSignal0.clip((int) (short)0, (-1), rOI0);
      assertEquals(0, discreteSignal0.max());
      assertEquals("1\n0 \n", discreteSignal0.toString());
  }

  @Test
  public void test48()  throws Throwable  {
      DiscreteSignal discreteSignal0 = new DiscreteSignal(1);
      assertNotNull(discreteSignal0);
      
      ROI rOI0 = new ROI();
      discreteSignal0.clip((-1), 584, rOI0);
      assertEquals("1\n0 \n", discreteSignal0.toString());
      assertEquals(0, discreteSignal0.min());
  }

  @Test
  public void test49()  throws Throwable  {
      DiscreteSignal discreteSignal0 = new DiscreteSignal(1);
      ROI rOI0 = new ROI();
      discreteSignal0.convolve(discreteSignal0, rOI0);
  }

  @Test
  public void test50()  throws Throwable  {
      DiscreteSignal discreteSignal0 = new DiscreteSignal(1);
      ROI rOI0 = new ROI();
      discreteSignal0.median(1797, rOI0);
  }
}
