/*
 * This file was automatically generated by EvoSuite
 */

package jigl.signal;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import jigl.signal.BinarySignal;
import jigl.signal.DiscreteSignal;
import jigl.signal.ROI;
import jigl.signal.RealSignal;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BinarySignalEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BinarySignal binarySignal0 = new BinarySignal(32767);
      assertNotNull(binarySignal0);
      
      BinarySignal binarySignal1 = new BinarySignal(binarySignal0);
      assertEquals(32767, binarySignal1.length());
      assertEquals(32767, binarySignal0.length());
  }

  @Test
  public void test1()  throws Throwable  {
      BinarySignal binarySignal0 = new BinarySignal();
      assertEquals(0, binarySignal0.length());
  }

  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      BinarySignal binarySignal0 = new BinarySignal(1, byteArray0);
      assertEquals(0, binarySignal0.count());
      assertNotNull(binarySignal0);
      assertEquals(1, binarySignal0.length());
  }

  @Test
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte)85;
      BinarySignal binarySignal0 = null;
      try {
        binarySignal0 = new BinarySignal(1612, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 7
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      RealSignal realSignal0 = new RealSignal(1874);
      ROI rOI0 = new ROI();
      RealSignal realSignal1 = realSignal0.clear((float) 1874, rOI0);
      BinarySignal binarySignal0 = new BinarySignal(realSignal1);
      binarySignal0.count();
  }

  @Test
  public void test5()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[1] = (float) 568;
      RealSignal realSignal0 = new RealSignal(floatArray0);
      BinarySignal binarySignal0 = new BinarySignal(realSignal0);
      assertNotNull(binarySignal0);
      
      BinarySignal binarySignal1 = new BinarySignal(568);
      assertNotNull(binarySignal1);
      
      BinarySignal binarySignal2 = binarySignal0.union(binarySignal1);
      assertEquals(568, binarySignal1.length());
      assertNotNull(binarySignal2);
      assertEquals(1, binarySignal0.count());
      assertEquals(1, binarySignal2.count());
  }

  @Test
  public void test6()  throws Throwable  {
      BinarySignal binarySignal0 = new BinarySignal(937);
      assertNotNull(binarySignal0);
      
      BinarySignal binarySignal1 = binarySignal0.intersection(binarySignal0);
      assertEquals(937, binarySignal1.length());
      assertNotNull(binarySignal1);
  }

  @Test
  public void test7()  throws Throwable  {
      BinarySignal binarySignal0 = new BinarySignal(937);
      assertNotNull(binarySignal0);
      
      DiscreteSignal discreteSignal0 = new DiscreteSignal(937);
      DiscreteSignal discreteSignal1 = discreteSignal0.add(937);
      BinarySignal binarySignal1 = new BinarySignal(discreteSignal1);
      assertNotNull(binarySignal1);
      
      BinarySignal binarySignal2 = binarySignal0.intersection(binarySignal1);
      assertNotNull(binarySignal2);
      assertEquals(937, binarySignal2.length());
      assertEquals(0, binarySignal2.count());
      assertEquals(937, binarySignal1.count());
  }

  @Test
  public void test8()  throws Throwable  {
      BinarySignal binarySignal0 = new BinarySignal(32767);
      assertNotNull(binarySignal0);
      
      BinarySignal binarySignal1 = binarySignal0.compliment();
      assertNotNull(binarySignal1);
      assertEquals(32767, binarySignal0.count());
      
      binarySignal0.compliment();
      assertEquals(0, binarySignal0.count());
  }

  @Test
  public void test9()  throws Throwable  {
      RealSignal realSignal0 = new RealSignal(1874);
      ROI rOI0 = new ROI();
      RealSignal realSignal1 = realSignal0.clear((float) 1874, rOI0);
      BinarySignal binarySignal0 = new BinarySignal(realSignal1);
      binarySignal0.difference(binarySignal0);
  }

  @Test
  public void test10()  throws Throwable  {
      RealSignal realSignal0 = new RealSignal(1874);
      ROI rOI0 = new ROI();
      RealSignal realSignal1 = realSignal0.clear((float) 1874, rOI0);
      BinarySignal binarySignal0 = new BinarySignal(realSignal1);
      BinarySignal binarySignal1 = new BinarySignal(1);
      // Undeclared exception!
      try {
        binarySignal0.difference(binarySignal1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[1] = (float) 568;
      RealSignal realSignal0 = new RealSignal(floatArray0);
      BinarySignal binarySignal0 = new BinarySignal(realSignal0);
      assertNotNull(binarySignal0);
      
      BinarySignal binarySignal1 = new BinarySignal(568);
      assertNotNull(binarySignal1);
      
      // Undeclared exception!
      try {
        binarySignal1.difference(binarySignal0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      BinarySignal binarySignal0 = new BinarySignal(32767);
      assertNotNull(binarySignal0);
      
      BinarySignal binarySignal1 = binarySignal0.shift((int) (byte)0);
      assertEquals(0, binarySignal1.count());
      assertNotNull(binarySignal1);
      assertEquals(32767, binarySignal1.length());
  }

  @Test
  public void test13()  throws Throwable  {
      BinarySignal binarySignal0 = new BinarySignal(32767);
      assertNotNull(binarySignal0);
      
      BinarySignal binarySignal1 = binarySignal0.shift(32767);
      assertEquals(32767, binarySignal1.length());
      assertEquals(0, binarySignal1.count());
      assertNotNull(binarySignal1);
  }

  @Test
  public void test14()  throws Throwable  {
      short[] shortArray0 = new short[5];
      DiscreteSignal discreteSignal0 = new DiscreteSignal(shortArray0);
      BinarySignal binarySignal0 = new BinarySignal(discreteSignal0);
      assertNotNull(binarySignal0);
      
      BinarySignal binarySignal1 = binarySignal0.shift((int) (short) (-362));
      assertNotNull(binarySignal1);
      assertEquals(0, binarySignal0.count());
      assertEquals(5, binarySignal1.length());
  }
}
