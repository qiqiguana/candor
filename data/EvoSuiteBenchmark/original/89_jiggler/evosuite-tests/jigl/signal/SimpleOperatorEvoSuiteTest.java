/*
 * This file was automatically generated by EvoSuite
 */

package jigl.signal;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import jigl.signal.BinarySignal;
import jigl.signal.ComplexSignal;
import jigl.signal.DiscreteSignal;
import jigl.signal.ROI;
import jigl.signal.Signal;
import jigl.signal.SignalKernel;
import jigl.signal.SignalNotSupportedException;
import jigl.signal.SimpleOperator;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SimpleOperatorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SimpleOperator simpleOperator0 = new SimpleOperator();
      SignalKernel signalKernel0 = new SignalKernel(32767.0F, 32767);
      ROI rOI0 = new ROI();
      try {
        simpleOperator0.apply((Signal) signalKernel0, rOI0);
        fail("Expecting exception: SignalNotSupportedException");
      } catch(SignalNotSupportedException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      SimpleOperator simpleOperator0 = new SimpleOperator();
      BinarySignal binarySignal0 = new BinarySignal();
      ROI rOI0 = new ROI(166, 166);
      try {
        simpleOperator0.apply((Signal) binarySignal0, rOI0);
        fail("Expecting exception: SignalNotSupportedException");
      } catch(SignalNotSupportedException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      SimpleOperator simpleOperator0 = new SimpleOperator();
      BinarySignal binarySignal0 = new BinarySignal(0);
      try {
        simpleOperator0.apply((Signal) binarySignal0);
        fail("Expecting exception: SignalNotSupportedException");
      } catch(SignalNotSupportedException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      SimpleOperator simpleOperator0 = new SimpleOperator();
      DiscreteSignal discreteSignal0 = new DiscreteSignal();
      ROI rOI0 = new ROI();
      try {
        simpleOperator0.apply((Signal) discreteSignal0, rOI0);
        fail("Expecting exception: SignalNotSupportedException");
      } catch(SignalNotSupportedException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      SimpleOperator simpleOperator0 = new SimpleOperator();
      DiscreteSignal discreteSignal0 = new DiscreteSignal();
      try {
        simpleOperator0.apply((Signal) discreteSignal0);
        fail("Expecting exception: SignalNotSupportedException");
      } catch(SignalNotSupportedException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      SimpleOperator simpleOperator0 = new SimpleOperator();
      ComplexSignal complexSignal0 = new ComplexSignal();
      try {
        simpleOperator0.apply((Signal) complexSignal0);
        fail("Expecting exception: SignalNotSupportedException");
      } catch(SignalNotSupportedException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      SimpleOperator simpleOperator0 = new SimpleOperator();
      ComplexSignal complexSignal0 = new ComplexSignal();
      ROI rOI0 = new ROI();
      try {
        simpleOperator0.apply((Signal) complexSignal0, rOI0);
        fail("Expecting exception: SignalNotSupportedException");
      } catch(SignalNotSupportedException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      SimpleOperator simpleOperator0 = new SimpleOperator();
      SignalKernel signalKernel0 = new SignalKernel(0.0F, 0);
      try {
        simpleOperator0.apply((Signal) signalKernel0, (ROI) null);
        fail("Expecting exception: SignalNotSupportedException");
      } catch(SignalNotSupportedException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      SimpleOperator simpleOperator0 = new SimpleOperator();
      try {
        simpleOperator0.apply((Signal) null);
        fail("Expecting exception: SignalNotSupportedException");
      } catch(SignalNotSupportedException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      SimpleOperator simpleOperator0 = new SimpleOperator();
      ROI rOI0 = new ROI((-16), (-16));
      try {
        simpleOperator0.apply((Signal) null, rOI0);
        fail("Expecting exception: SignalNotSupportedException");
      } catch(SignalNotSupportedException e) {
      }
  }
}
