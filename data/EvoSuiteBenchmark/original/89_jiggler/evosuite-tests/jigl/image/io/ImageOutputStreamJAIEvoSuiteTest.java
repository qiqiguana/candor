/*
 * This file was automatically generated by EvoSuite
 */

package jigl.image.io;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import jigl.image.Image;
import jigl.image.exceptions.ImageNotSupportedException;
import jigl.image.exceptions.InvalidKernelException;
import jigl.image.io.ImageOutputStreamJAI;
import jigl.image.types.ImageKernel;
import jigl.image.types.KernelType;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ImageOutputStreamJAIEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      ImageOutputStreamJAI imageOutputStreamJAI0 = new ImageOutputStreamJAI();
      imageOutputStreamJAI0.writeJPEG((Image) null);
      assertEquals(false, imageOutputStreamJAI0.isGray);
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          ImageOutputStreamJAI imageOutputStreamJAI0 = new ImageOutputStreamJAI();
          // Undeclared exception!
          try {
            imageOutputStreamJAI0.open("bmp");
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission bmp write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:183)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:84)
             * jigl.image.io.ImageOutputStreamJAI.open(ImageOutputStreamJAI.java:114)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
      ImageOutputStreamJAI imageOutputStreamJAI0 = new ImageOutputStreamJAI();
      KernelType kernelType0 = KernelType.SOBEL_X;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      imageOutputStreamJAI0.writePPM((Image) imageKernel0);
      assertEquals(false, imageOutputStreamJAI0.isGray);
  }

  @Test
  public void test3()  throws Throwable  {
      ImageOutputStreamJAI imageOutputStreamJAI0 = new ImageOutputStreamJAI();
      ImageOutputStreamJAI imageOutputStreamJAI1 = new ImageOutputStreamJAI(imageOutputStreamJAI0);
      assertEquals(0, imageOutputStreamJAI1.X());
      assertEquals(false, imageOutputStreamJAI0.isGray);
      assertEquals(false, imageOutputStreamJAI1.isGray);
      assertEquals(0, imageOutputStreamJAI1.Y());
  }

  @Test
  public void test4()  throws Throwable  {
      ImageOutputStreamJAI imageOutputStreamJAI0 = new ImageOutputStreamJAI();
      int int0 = imageOutputStreamJAI0.X();
      assertEquals(false, imageOutputStreamJAI0.isGray);
      assertEquals(0, int0);
  }

  @Test
  public void test5()  throws Throwable  {
      ImageOutputStreamJAI imageOutputStreamJAI0 = new ImageOutputStreamJAI();
      int int0 = imageOutputStreamJAI0.Y();
      assertEquals(0, int0);
      assertEquals(false, imageOutputStreamJAI0.isGray);
  }

  @Test
  public void test6()  throws Throwable  {
      ImageOutputStreamJAI imageOutputStreamJAI0 = new ImageOutputStreamJAI();
      KernelType kernelType0 = KernelType.LAPLACIAN;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      imageOutputStreamJAI0.writeJPEG((Image) imageKernel0, 1142.3772F);
      assertEquals(false, imageOutputStreamJAI0.isGray);
  }

  @Test
  public void test7()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          ImageOutputStreamJAI imageOutputStreamJAI0 = null;
          try {
            imageOutputStreamJAI0 = new ImageOutputStreamJAI("");
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission  write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:183)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:84)
             * jigl.image.io.ImageOutputStreamJAI.<init>(ImageOutputStreamJAI.java:84)
             * sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             * sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)
             * sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)
             * java.lang.reflect.Constructor.newInstance(Constructor.java:513)
             * org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test8()  throws Throwable  {
      ImageOutputStreamJAI imageOutputStreamJAI0 = new ImageOutputStreamJAI();
      KernelType kernelType0 = KernelType.LAPLACIAN;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      imageOutputStreamJAI0.writePGM((Image) imageKernel0);
      assertEquals(false, imageOutputStreamJAI0.isGray);
  }

  @Test
  public void test9()  throws Throwable  {
      ImageOutputStreamJAI imageOutputStreamJAI0 = new ImageOutputStreamJAI();
      KernelType kernelType0 = KernelType.SOBEL_X;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      imageOutputStreamJAI0.writeTIFF((Image) imageKernel0);
      assertEquals(false, imageOutputStreamJAI0.isGray);
  }

  @Test
  public void test10()  throws Throwable  {
      ImageOutputStreamJAI imageOutputStreamJAI0 = new ImageOutputStreamJAI();
      KernelType kernelType0 = KernelType.SOBEL_X;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      imageOutputStreamJAI0.writeBMP((Image) imageKernel0);
      assertEquals(false, imageOutputStreamJAI0.isGray);
  }

  @Test
  public void test11()  throws Throwable  {
      ImageOutputStreamJAI imageOutputStreamJAI0 = new ImageOutputStreamJAI();
      KernelType kernelType0 = KernelType.SOBEL_X;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      imageOutputStreamJAI0.writePNG((Image) imageKernel0);
      assertEquals(false, imageOutputStreamJAI0.isGray);
  }
}
