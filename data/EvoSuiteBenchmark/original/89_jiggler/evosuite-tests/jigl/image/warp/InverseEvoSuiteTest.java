/*
 * This file was automatically generated by EvoSuite
 */

package jigl.image.warp;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import jigl.image.warp.Composite;
import jigl.image.warp.Inverse;
import jigl.image.warp.PerspectiveTransform;
import jigl.image.warp.PointMapper;
import jigl.image.warp.RotateAboutTransform;
import jigl.math.Matrix;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class InverseEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      RotateAboutTransform rotateAboutTransform0 = new RotateAboutTransform((-1297.0126F), 1.0F, 1.0F);
      Composite composite0 = new Composite((PointMapper) rotateAboutTransform0, (PointMapper) rotateAboutTransform0);
      Inverse inverse0 = new Inverse((PointMapper) composite0);
      float[] floatArray0 = new float[4];
      // Undeclared exception!
      try {
        inverse0.inverseTransform(floatArray0, floatArray0, (-930), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * -930
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      PerspectiveTransform perspectiveTransform0 = new PerspectiveTransform((Matrix) null);
      Inverse inverse0 = new Inverse((PointMapper) perspectiveTransform0);
      float[] floatArray0 = new float[3];
      // Undeclared exception!
      try {
        inverse0.inverseTransform(floatArray0, floatArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      RotateAboutTransform rotateAboutTransform0 = new RotateAboutTransform((-1297.0126F), 1.0F, 1.0F);
      Composite composite0 = new Composite((PointMapper) rotateAboutTransform0, (PointMapper) rotateAboutTransform0);
      Inverse inverse0 = new Inverse((PointMapper) composite0);
      float[] floatArray0 = new float[4];
      inverse0.transform(floatArray0, floatArray0);
  }

  @Test
  public void test3()  throws Throwable  {
      RotateAboutTransform rotateAboutTransform0 = new RotateAboutTransform((-1297.0126F), 1.0F, 1.0F);
      Composite composite0 = new Composite((PointMapper) rotateAboutTransform0, (PointMapper) rotateAboutTransform0);
      Inverse inverse0 = new Inverse((PointMapper) composite0);
      float[] floatArray0 = new float[4];
      inverse0.transform(floatArray0, floatArray0, 1, 1);
  }
}
