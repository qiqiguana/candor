/*
 * This file was automatically generated by EvoSuite
 */

package jigl.image.warp;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import jigl.image.Image;
import jigl.image.InterpolationMethod;
import jigl.image.exceptions.ImageNotSupportedException;
import jigl.image.exceptions.InvalidKernelException;
import jigl.image.types.ColorImage;
import jigl.image.types.GrayImage;
import jigl.image.types.ImageKernel;
import jigl.image.types.InterpolatedColorImage;
import jigl.image.types.InterpolatedGrayImage;
import jigl.image.types.InterpolatedRealColorImage;
import jigl.image.types.KernelType;
import jigl.image.types.RealColorImage;
import jigl.image.types.RealGrayImage;
import jigl.image.warp.AffineTransform;
import jigl.image.warp.Mapper;
import jigl.image.warp.PointMapper;
import jigl.image.warp.RotateAboutTransform;
import jigl.image.warp.ScaleTransform;
import jigl.math.Matrix;
import org.evosuite.testcase.TestCaseExecutor;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MapperEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      InterpolationMethod interpolationMethod0 = InterpolationMethod.NEIGHBOR;
      Mapper mapper0 = new Mapper((PointMapper) null, interpolationMethod0);
      float[] floatArray0 = new float[1];
      mapper0.setDefaultColor(floatArray0);
  }

  @Test
  public void test1()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      AffineTransform affineTransform0 = new AffineTransform(matrix0);
      InterpolationMethod interpolationMethod0 = InterpolationMethod.NEIGHBOR;
      Mapper mapper0 = new Mapper((PointMapper) affineTransform0, interpolationMethod0);
      float[] floatArray0 = new float[8];
      mapper0.setDefaultColor(floatArray0);
  }

  @Test
  public void test2()  throws Throwable  {
      RotateAboutTransform rotateAboutTransform0 = new RotateAboutTransform(950.22754F, 950.22754F, 950.22754F);
      InterpolationMethod interpolationMethod0 = InterpolationMethod.LINEAR;
      Mapper mapper0 = new Mapper((PointMapper) rotateAboutTransform0, interpolationMethod0);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(635, 1246);
      mapper0.apply((GrayImage) interpolatedGrayImage0);
  }

  @Test
  public void test3()  throws Throwable  {
      RotateAboutTransform rotateAboutTransform0 = new RotateAboutTransform(255.0F, 1629.7079F, 1629.7079F);
      InterpolationMethod interpolationMethod0 = InterpolationMethod.LINEAR;
      Mapper mapper0 = new Mapper((PointMapper) rotateAboutTransform0, interpolationMethod0);
      assertNotNull(mapper0);
      
      KernelType kernelType0 = KernelType.UNSHARP;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      Image<Object> image0 = mapper0.apply((RealGrayImage) imageKernel0);
      assertNotNull(image0);
      assertEquals("3:3\n0.0 0.0 0.0 \n0.0 0.0 0.0 \n0.0 0.0 0.0 \n", image0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      ScaleTransform scaleTransform0 = new ScaleTransform((-4.674377F));
      InterpolationMethod interpolationMethod0 = InterpolationMethod.CUBIC;
      Mapper mapper0 = new Mapper((PointMapper) scaleTransform0, interpolationMethod0);
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(539, 539);
      mapper0.apply((ColorImage) interpolatedColorImage0);
  }

  @Test
  public void test5()  throws Throwable  {
      RotateAboutTransform rotateAboutTransform0 = new RotateAboutTransform(950.22754F, 950.22754F, 950.22754F);
      InterpolationMethod interpolationMethod0 = InterpolationMethod.LINEAR;
      Mapper mapper0 = new Mapper((PointMapper) rotateAboutTransform0, interpolationMethod0);
      InterpolatedRealColorImage interpolatedRealColorImage0 = new InterpolatedRealColorImage(1555, 0);
      Image<Object> image0 = mapper0.apply((RealColorImage) interpolatedRealColorImage0);
      assertEquals(0, image0.Y());
  }

  @Test
  public void test6()  throws Throwable  {
      double[][] doubleArray0 = new double[9][6];
      AffineTransform affineTransform0 = new AffineTransform(doubleArray0);
      InterpolationMethod interpolationMethod0 = InterpolationMethod.LINEAR;
      Mapper mapper0 = new Mapper((PointMapper) affineTransform0, interpolationMethod0);
      InterpolatedRealColorImage interpolatedRealColorImage0 = new InterpolatedRealColorImage(50, 61);
      // Undeclared exception!
      try {
        mapper0.apply((RealColorImage) interpolatedRealColorImage0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
        /*
         * Matrix is not a square matrix
         */
      }
  }
}
