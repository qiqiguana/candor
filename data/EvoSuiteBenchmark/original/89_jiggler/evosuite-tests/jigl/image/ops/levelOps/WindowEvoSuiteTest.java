/*
 * This file was automatically generated by EvoSuite
 */

package jigl.image.ops.levelOps;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import jigl.image.Image;
import jigl.image.ROI;
import jigl.image.exceptions.ImageNotSupportedException;
import jigl.image.exceptions.InvalidKernelException;
import jigl.image.ops.levelOps.Window;
import jigl.image.types.ColorImage;
import jigl.image.types.GrayImage;
import jigl.image.types.ImageKernel;
import jigl.image.types.InterpolatedColorImage;
import jigl.image.types.InterpolatedGrayImage;
import jigl.image.types.InterpolatedRealColorImage;
import jigl.image.types.KernelType;
import jigl.image.types.RealColorImage;
import jigl.image.types.RealGrayImage;
import org.evosuite.testcase.TestCaseExecutor;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class WindowEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Window window0 = new Window((-1102), 1950);
      KernelType kernelType0 = KernelType.D_YY;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      window0.apply((RealGrayImage) imageKernel0);
      assertEquals(828.66644F, imageKernel0.addSum(), 0.01F);
      assertEquals(76298.80078125, imageKernel0.sqrSum(), 0.01D);
  }

  @Test
  public void test1()  throws Throwable  {
      Window window0 = new Window(0, (-1));
      GrayImage grayImage0 = new GrayImage(0, 0);
      ROI rOI0 = new ROI((-1), (-1), (-1), 0);
      // Undeclared exception!
      try {
        window0.apply(grayImage0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      Window window0 = new Window((-1102), 1950);
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(881, 209);
      interpolatedColorImage0.clear();
      InterpolatedGrayImage interpolatedGrayImage0 = (InterpolatedGrayImage)interpolatedColorImage0.plane(0);
      window0.apply((GrayImage) interpolatedGrayImage0);
  }

  @Test
  public void test3()  throws Throwable  {
      Window window0 = new Window((-840.1558F), (-840.1558F));
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      GrayImage grayImage0 = interpolatedGrayImage0.addbuffer(136, 11, 0);
      ROI rOI0 = new ROI();
      Image<Object> image0 = window0.apply(grayImage0, rOI0);
      assertEquals(65025L, grayImage0.sqrSum());
      assertEquals("136:11\n255 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 \n", image0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      Window window0 = new Window(8, 8);
      int[][] intArray0 = new int[1][4];
      GrayImage grayImage0 = new GrayImage(intArray0);
      // Undeclared exception!
      try {
        window0.apply(grayImage0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      Window window0 = new Window((-1.0F), (-1.0F));
      KernelType kernelType0 = KernelType.UNIFORM;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      ROI rOI0 = new ROI(0, 0, 0, 0);
      window0.apply((Image) imageKernel0, rOI0);
      assertEquals("3:3\n255.0 1.0 1.0 \n1.0 1.0 1.0 \n1.0 1.0 1.0 \n", imageKernel0.toString());
      assertEquals(65033.0, imageKernel0.sqrSum(), 0.01D);
  }

  @Test
  public void test6()  throws Throwable  {
      Window window0 = new Window(0.0F, 812.9572F);
      ImageKernel imageKernel0 = new ImageKernel(16.571148F, 22);
      ROI rOI0 = new ROI();
      window0.apply((Image) imageKernel0, rOI0);
      assertEquals(8009.0845F, imageKernel0.absSum(), 0.01F);
      assertEquals(132660.23579788208, imageKernel0.sqrSum(), 0.01D);
  }

  @Test
  public void test7()  throws Throwable  {
      Window window0 = new Window(0.0F, 812.9572F);
      ImageKernel imageKernel0 = new ImageKernel(16.571148F, 22);
      ImageKernel imageKernel1 = (ImageKernel)imageKernel0.clear();
      window0.apply((RealGrayImage) imageKernel1);
      assertEquals("22:22\n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n", imageKernel0.toString());
      assertEquals(0.0F, imageKernel1.absSum(), 0.01F);
  }

  @Test
  public void test8()  throws Throwable  {
      Window window0 = new Window((-1102), 1950);
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(881, 209);
      InterpolatedColorImage interpolatedColorImage1 = (InterpolatedColorImage)interpolatedColorImage0.clear();
      ROI rOI0 = new ROI();
      window0.apply((ColorImage) interpolatedColorImage1, rOI0);
  }

  @Test
  public void test9()  throws Throwable  {
      Window window0 = new Window(0.0F, 812.9572F);
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(22, 22);
      interpolatedColorImage0.clear();
      Image<Object> image0 = window0.apply((Image) interpolatedColorImage0);
      assertNotNull(image0);
      assertEquals("22:22\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n22:22\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n22:22\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n", image0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      Window window0 = new Window(0.0F, 812.9572F);
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(22, 22);
      InterpolatedColorImage interpolatedColorImage1 = (InterpolatedColorImage)interpolatedColorImage0.clear();
      int[] intArray0 = new int[9];
      intArray0[0] = 22;
      ROI rOI0 = new ROI();
      interpolatedColorImage1.add(intArray0);
      Image<Object> image0 = window0.apply((Image) interpolatedColorImage0, rOI0);
      assertEquals("22:22\n6 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 \n22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 \n22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 \n22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 \n22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 \n22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 \n22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 \n22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 \n22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 \n22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 \n22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 \n22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 \n22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 \n22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 \n22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 \n22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 \n22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 \n22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 \n22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 \n22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 \n22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 \n22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 \n22:22\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n22:22\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n", image0.toString());
      assertNotNull(image0);
  }

  @Test
  public void test11()  throws Throwable  {
      Window window0 = new Window((float) 320, (float) 342);
      InterpolatedRealColorImage interpolatedRealColorImage0 = new InterpolatedRealColorImage();
      InterpolatedRealColorImage interpolatedRealColorImage1 = (InterpolatedRealColorImage)interpolatedRealColorImage0.copy();
      float[] floatArray0 = new float[7];
      RealColorImage realColorImage0 = interpolatedRealColorImage1.addbuffer(380, 1, 342, 0, floatArray0);
      Image<Object> image0 = window0.apply(realColorImage0);
      assertNotNull(image0);
      assertEquals("380:1\n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n380:1\n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n380:1\n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n", image0.toString());
  }

  @Test
  public void test12()  throws Throwable  {
      Window window0 = new Window((float) 335, (float) 335);
      InterpolatedRealColorImage interpolatedRealColorImage0 = new InterpolatedRealColorImage();
      InterpolatedRealColorImage interpolatedRealColorImage1 = (InterpolatedRealColorImage)interpolatedRealColorImage0.copy();
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 335;
      RealColorImage realColorImage0 = interpolatedRealColorImage1.addbuffer(335, 1, 380, 335, floatArray0);
      Image<Object> image0 = window0.apply(realColorImage0);
      assertEquals("335:1\n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n335:1\n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n335:1\n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n0.0 \n", image0.toString());
      assertNotNull(image0);
  }
}
