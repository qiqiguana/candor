/*
 * This file was automatically generated by EvoSuite
 */

package jigl.image.ops.morph;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import jigl.image.Image;
import jigl.image.ROI;
import jigl.image.exceptions.ImageNotSupportedException;
import jigl.image.exceptions.InvalidKernelException;
import jigl.image.ops.morph.GOpen;
import jigl.image.types.ColorImage;
import jigl.image.types.GrayImage;
import jigl.image.types.ImageKernel;
import jigl.image.types.InterpolatedColorImage;
import jigl.image.types.InterpolatedRealColorImage;
import jigl.image.types.KernelType;
import jigl.image.types.RealColorImage;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class GOpenEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ImageKernel imageKernel0 = new ImageKernel((-1.0F), 16);
      GOpen gOpen0 = new GOpen(imageKernel0, 14, 14);
      Image<Object> image0 = gOpen0.apply((Image) imageKernel0);
      assertNotNull(image0);
      assertEquals("16:16\n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n", image0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      ImageKernel imageKernel0 = new ImageKernel((-1469.2048F), 0);
      GOpen gOpen0 = new GOpen(imageKernel0, 0, 0);
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      // Undeclared exception!
      try {
        gOpen0.apply((ColorImage) interpolatedColorImage0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * -1
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      KernelType kernelType0 = KernelType.D_XX;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      GOpen gOpen0 = new GOpen(imageKernel0, 30, 30);
      InterpolatedRealColorImage interpolatedRealColorImage0 = new InterpolatedRealColorImage(0, 645);
      // Undeclared exception!
      try {
        gOpen0.apply((RealColorImage) interpolatedRealColorImage0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      KernelType kernelType0 = KernelType.PREWITT_Y;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      GOpen gOpen0 = new GOpen(imageKernel0, (-1869), (-343));
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try {
        gOpen0.apply((RealColorImage) null, rOI0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      ROI rOI0 = new ROI();
      KernelType kernelType0 = KernelType.D_YY;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      GOpen gOpen0 = new GOpen(imageKernel0, (-32768), (-32768));
      // Undeclared exception!
      try {
        gOpen0.apply((ColorImage) null, rOI0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      KernelType kernelType0 = KernelType.SOBEL_X;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      GOpen gOpen0 = new GOpen(imageKernel0, (-16777216), 0);
      // Undeclared exception!
      try {
        gOpen0.apply((GrayImage) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
