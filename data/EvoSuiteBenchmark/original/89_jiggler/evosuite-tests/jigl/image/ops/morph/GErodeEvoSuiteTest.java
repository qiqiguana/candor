/*
 * This file was automatically generated by EvoSuite
 */

package jigl.image.ops.morph;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import jigl.image.Image;
import jigl.image.ROI;
import jigl.image.exceptions.ImageNotSupportedException;
import jigl.image.exceptions.InvalidKernelException;
import jigl.image.ops.morph.GErode;
import jigl.image.types.ColorImage;
import jigl.image.types.GrayImage;
import jigl.image.types.ImageKernel;
import jigl.image.types.InterpolatedColorImage;
import jigl.image.types.InterpolatedGrayImage;
import jigl.image.types.InterpolatedRealColorImage;
import jigl.image.types.KernelType;
import jigl.image.types.RealColorImage;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class GErodeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      KernelType kernelType0 = KernelType.UNIFORM;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      GErode gErode0 = new GErode(imageKernel0, 1657, 1657);
      RealColorImage realColorImage0 = new RealColorImage(1657, 1657);
      // Undeclared exception!
      try {
        gErode0.apply(realColorImage0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      ImageKernel imageKernel0 = new ImageKernel((-1469.2048F), 0);
      GErode gErode0 = new GErode(imageKernel0, 0, 0);
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      // Undeclared exception!
      try {
        gErode0.apply((ColorImage) interpolatedColorImage0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      ImageKernel imageKernel0 = new ImageKernel((-1.0F), 15);
      GErode gErode0 = new GErode(imageKernel0, 15, 15);
      Image<Object> image0 = gErode0.apply((Image) imageKernel0);
      assertEquals("15:15\n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 \n1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 \n", image0.toString());
      assertNotNull(image0);
  }

  @Test
  public void test3()  throws Throwable  {
      KernelType kernelType0 = KernelType.D_XX;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      GErode gErode0 = new GErode(imageKernel0, 0, (-1889));
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(1742, 0);
      ROI rOI0 = new ROI((-309), (-1), 1, 0);
      // Undeclared exception!
      try {
        gErode0.apply((ColorImage) interpolatedColorImage0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      ImageKernel imageKernel0 = new ImageKernel((-1.0F), 15);
      GErode gErode0 = new GErode(imageKernel0, 15, 15);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(15, 15);
      interpolatedGrayImage0.clear((Integer) 15);
      Image<Object> image0 = gErode0.apply((GrayImage) interpolatedGrayImage0);
      assertNotNull(image0);
      assertEquals("15:15\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 \n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 \n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 \n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 \n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 \n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 \n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 \n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 \n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 \n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 \n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 \n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 \n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 \n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 \n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 \n", image0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      KernelType kernelType0 = KernelType.D_XX;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      GErode gErode0 = new GErode(imageKernel0, 6, 0);
      short[] shortArray0 = new short[10];
      GrayImage grayImage0 = new GrayImage(667, 0, shortArray0);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try {
        gErode0.apply(grayImage0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      KernelType kernelType0 = KernelType.LAPLACIAN_8;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      GErode gErode0 = new GErode(imageKernel0, (-740), 0);
      InterpolatedRealColorImage interpolatedRealColorImage0 = new InterpolatedRealColorImage(0, 854);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try {
        gErode0.apply((RealColorImage) interpolatedRealColorImage0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      KernelType kernelType0 = KernelType.D_XX;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      GErode gErode0 = new GErode(imageKernel0, 6, 0);
      Image<Object> image0 = gErode0.apply((Image) imageKernel0);
      assertNotNull(image0);
      assertEquals("3:3\n-1.0 -1.0 -1.0 \n-1.0 -1.0 -1.0 \n-1.0 -1.0 -1.0 \n", image0.toString());
  }
}
