/*
 * This file was automatically generated by EvoSuite
 */

package jigl.image.utils;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import jigl.image.Image;
import jigl.image.types.BinaryImage;
import jigl.image.types.ComplexImage;
import jigl.image.types.InterpolatedGrayImage;
import jigl.image.utils.FFT;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class FFTEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      // Undeclared exception!
      try {
        FFT.forward((Image<?>) complexImage0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * The width and height of the image should be power of 2 in order to apply FFT.
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(1, 1651);
      // Undeclared exception!
      try {
        FFT.reverse((Image<?>) interpolatedGrayImage0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * The width and height of the image must be same in order to apply FFT.
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(4, 4);
      interpolatedGrayImage0.clear((Integer) 4);
      ComplexImage complexImage0 = FFT.forward((Image<?>) interpolatedGrayImage0);
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = FFT.forward((Image<?>) complexImage0);
      assertEquals("4:4\n64.0 64.0 64.0 64.0 \n64.0 64.0 64.0 64.0 \n64.0 64.0 64.0 64.0 \n64.0 64.0 64.0 64.0 \n4:4\n0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 \n", complexImage1.toString());
      assertEquals("4:4\n64.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 \n4:4\n0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 \n", complexImage0.toString());
      assertNotNull(complexImage1);
  }

  @Test
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      BinaryImage binaryImage0 = new BinaryImage(1, 1, byteArray0);
      // Undeclared exception!
      try {
        FFT.forward((Image<?>) binaryImage0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Don't know how to handle this image type
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(4, 4);
      Image<Integer> image0 = interpolatedGrayImage0.clear((Integer) 4);
      ComplexImage complexImage0 = FFT.reverse(image0);
      assertEquals("4:4\n64.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 \n4:4\n0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 \n", complexImage0.toString());
      assertNotNull(complexImage0);
  }
}
