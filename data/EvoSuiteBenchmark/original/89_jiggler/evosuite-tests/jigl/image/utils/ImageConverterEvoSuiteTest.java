/*
 * This file was automatically generated by EvoSuite
 */

package jigl.image.utils;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import jigl.image.Image;
import jigl.image.exceptions.ColorModelNotSupportedException;
import jigl.image.exceptions.ColorModelUnknownException;
import jigl.image.exceptions.InvalidKernelException;
import jigl.image.types.BinaryImage;
import jigl.image.types.ColorImage;
import jigl.image.types.ComplexImage;
import jigl.image.types.GrayImage;
import jigl.image.types.ImageKernel;
import jigl.image.types.InterpolatedColorImage;
import jigl.image.types.InterpolatedGrayImage;
import jigl.image.types.InterpolatedRealColorImage;
import jigl.image.types.KernelType;
import jigl.image.types.PhaseImage;
import jigl.image.types.RealColorImage;
import jigl.image.types.RealGrayImage;
import jigl.image.utils.ImageConverter;
import org.evosuite.testcase.TestCaseExecutor;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ImageConverterEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      GrayImage grayImage0 = ImageConverter.toGray((Image) interpolatedColorImage0);
      assertNotNull(grayImage0);
      assertEquals("0:0\n", grayImage0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 1);
      GrayImage grayImage0 = ImageConverter.toGray((Image) interpolatedGrayImage0);
      assertEquals("0:1\n", grayImage0.toString());
      assertNotNull(grayImage0);
  }

  @Test
  public void test2()  throws Throwable  {
      KernelType kernelType0 = KernelType.SOBEL_X;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      GrayImage grayImage0 = ImageConverter.toGray((Image) imageKernel0);
      assertNotNull(grayImage0);
      
      ColorImage colorImage0 = ImageConverter.toColor(grayImage0);
      assertNotNull(colorImage0);
      
      ColorImage colorImage1 = ImageConverter.toColor((Image) colorImage0);
      assertEquals("3:3\n0 0 0 \n0 0 0 \n1 2 1 \n3:3\n0 0 0 \n0 0 0 \n1 2 1 \n3:3\n0 0 0 \n0 0 0 \n1 2 1 \n", colorImage1.toString());
      assertNotNull(colorImage1);
  }

  @Test
  public void test3()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      ComplexImage complexImage0 = ImageConverter.toComplex((ColorImage) interpolatedColorImage0);
      assertNotNull(complexImage0);
      
      GrayImage grayImage0 = ImageConverter.toGray((Image) complexImage0);
      assertEquals("0:0\n", grayImage0.toString());
      assertNotNull(grayImage0);
  }

  @Test
  public void test4()  throws Throwable  {
      InterpolatedRealColorImage interpolatedRealColorImage0 = new InterpolatedRealColorImage(0, 0);
      GrayImage grayImage0 = ImageConverter.toGray((Image) interpolatedRealColorImage0);
      assertNotNull(grayImage0);
      assertEquals("0:0\n", grayImage0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      InterpolatedRealColorImage interpolatedRealColorImage0 = new InterpolatedRealColorImage(0, 0);
      RealGrayImage realGrayImage0 = ImageConverter.toRealGray((Image) interpolatedRealColorImage0);
      assertNotNull(realGrayImage0);
      
      GrayImage grayImage0 = ImageConverter.toGray(realGrayImage0);
      assertNotNull(grayImage0);
      
      // Undeclared exception!
      try {
        ImageConverter.toColor((Image) grayImage0);
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      KernelType kernelType0 = KernelType.SOBEL_X;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      RealGrayImage realGrayImage0 = ImageConverter.toRealGray((Image) imageKernel0);
      assertNotNull(realGrayImage0);
      assertEquals("3:3\n-1.0 -2.0 -1.0 \n0.0 0.0 0.0 \n1.0 2.0 1.0 \n", realGrayImage0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      KernelType kernelType0 = KernelType.SOBEL_X;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      ComplexImage complexImage0 = ImageConverter.toComplex((Image) imageKernel0);
      assertNotNull(complexImage0);
      
      ColorImage colorImage0 = ImageConverter.toColor(complexImage0);
      assertNotNull(colorImage0);
      
      RealGrayImage realGrayImage0 = ImageConverter.toRealGray((Image) colorImage0);
      assertNotNull(realGrayImage0);
      assertEquals("3:3\n0.0 0.0 0.0 \n0.0 0.0 0.0 \n1.0 2.0 1.0 \n", realGrayImage0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      // Undeclared exception!
      try {
        ImageConverter.toRealGray((Image) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ColorImage colorImage0 = ImageConverter.toColor((Image) complexImage0);
      assertNotNull(colorImage0);
      
      RealColorImage realColorImage0 = ImageConverter.toRealColor(colorImage0);
      assertNotNull(realColorImage0);
      assertEquals("0:0\n0:0\n0:0\n", realColorImage0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      RealGrayImage realGrayImage0 = ImageConverter.toRealGray((Image) interpolatedColorImage0);
      assertNotNull(realGrayImage0);
      
      ColorImage colorImage0 = ImageConverter.toColor((Image) realGrayImage0);
      assertNotNull(colorImage0);
      assertEquals("0:0\n0:0\n0:0\n", colorImage0.toString());
  }

  @Test
  public void test11()  throws Throwable  {
      InterpolatedRealColorImage interpolatedRealColorImage0 = new InterpolatedRealColorImage(0, 0);
      ColorImage colorImage0 = ImageConverter.toColor((Image) interpolatedRealColorImage0);
      assertNotNull(colorImage0);
      assertEquals("0:0\n0:0\n0:0\n", colorImage0.toString());
  }

  @Test
  public void test12()  throws Throwable  {
      short[] shortArray0 = new short[4];
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      // Undeclared exception!
      try {
        ImageConverter.toRealColor((Image) grayImage0);
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      InterpolatedRealColorImage interpolatedRealColorImage0 = new InterpolatedRealColorImage();
      RealColorImage realColorImage0 = ImageConverter.toRealColor((Image) interpolatedRealColorImage0);
      assertEquals("0:0\n0:0\n0:0\n", realColorImage0.toString());
      assertNotNull(realColorImage0);
  }

  @Test
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try {
        ImageConverter.toRealColor((Image) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test15()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      // Undeclared exception!
      try {
        ImageConverter.toComplex((Image) interpolatedGrayImage0);
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }

  @Test
  public void test16()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(881, 881);
      // Undeclared exception!
      try {
        ImageConverter.toComplex((Image) interpolatedColorImage0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test17()  throws Throwable  {
      InterpolatedRealColorImage interpolatedRealColorImage0 = new InterpolatedRealColorImage(0, 0);
      ComplexImage complexImage0 = ImageConverter.toComplex((Image) interpolatedRealColorImage0);
      assertEquals("0:0\n0:0\n", complexImage0.toString());
      assertNotNull(complexImage0);
  }

  @Test
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try {
        ImageConverter.toComplex((Image) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test19()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(2, 2);
      // Undeclared exception!
      try {
        ImageConverter.toGray((Image) interpolatedGrayImage0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test20()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(15, 15);
      GrayImage grayImage0 = ImageConverter.toGray(binaryImage0);
      assertEquals("15:15\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n", grayImage0.toString());
      assertNotNull(grayImage0);
  }

  @Test
  public void test21()  throws Throwable  {
      int[][] intArray0 = new int[1][3];
      int[] intArray1 = new int[1];
      intArray1[0] = 1;
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      BinaryImage binaryImage0 = new BinaryImage(grayImage0);
      GrayImage grayImage1 = ImageConverter.toGray(binaryImage0);
      assertEquals("1:1\n255 \n", grayImage1.toString());
      assertNotNull(grayImage1);
  }

  @Test
  public void test22()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      InterpolatedColorImage interpolatedColorImage1 = (InterpolatedColorImage)interpolatedColorImage0.copy();
      int[] intArray0 = new int[8];
      ColorImage colorImage0 = interpolatedColorImage1.addbuffer(260, 260, 260, 260, intArray0);
      ImageConverter.toGray(colorImage0);
  }

  @Test
  public void test23()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(1, 385);
      // Undeclared exception!
      try {
        ImageConverter.toGray(realColorImage0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test24()  throws Throwable  {
      KernelType kernelType0 = KernelType.SOBEL_X;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      ComplexImage complexImage0 = ImageConverter.toComplex((Image) imageKernel0);
      assertNotNull(complexImage0);
      
      GrayImage grayImage0 = ImageConverter.toGray(complexImage0);
      assertEquals("3:3\n-1.0 -2.0 -1.0 \n0.0 0.0 0.0 \n1.0 2.0 1.0 \n3:3\n0.0 0.0 0.0 \n0.0 0.0 0.0 \n0.0 0.0 0.0 \n", complexImage0.toString());
      assertEquals("3:3\n0 0 0 \n0 0 0 \n1 2 1 \n", grayImage0.toString());
      assertNotNull(grayImage0);
  }

  @Test
  public void test25()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(2, 2);
      InterpolatedGrayImage interpolatedGrayImage1 = (InterpolatedGrayImage)interpolatedGrayImage0.clear((Integer) 2);
      RealGrayImage realGrayImage0 = ImageConverter.toRealGray((GrayImage) interpolatedGrayImage1);
      assertEquals("2:2\n2.0 2.0 \n2.0 2.0 \n", realGrayImage0.toString());
      assertNotNull(realGrayImage0);
  }

  @Test
  public void test26()  throws Throwable  {
      InterpolatedRealColorImage interpolatedRealColorImage0 = new InterpolatedRealColorImage(1002, 8);
      InterpolatedRealColorImage interpolatedRealColorImage1 = (InterpolatedRealColorImage)interpolatedRealColorImage0.copy();
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1002;
      floatArray0[1] = (float) 1002;
      floatArray0[2] = (float) 1002;
      floatArray0[3] = (float) 8;
      floatArray0[4] = (float) 1002;
      RealColorImage realColorImage0 = interpolatedRealColorImage1.addbuffer(1002, 1530, 8, 1530, floatArray0);
      ImageConverter.toRealGray(realColorImage0);
  }

  @Test
  public void test27()  throws Throwable  {
      KernelType kernelType0 = KernelType.SOBEL_X;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      ComplexImage complexImage0 = ImageConverter.toComplex((Image) imageKernel0);
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = ImageConverter.toRealGray(complexImage0);
      assertNotNull(realGrayImage0);
      assertEquals("3:3\n-1.0 -2.0 -1.0 \n0.0 0.0 0.0 \n1.0 2.0 1.0 \n3:3\n0.0 0.0 0.0 \n0.0 0.0 0.0 \n0.0 0.0 0.0 \n", complexImage0.toString());
      assertEquals("3:3\n-1.0 -2.0 -1.0 \n0.0 0.0 0.0 \n1.0 2.0 1.0 \n", realGrayImage0.toString());
  }

  @Test
  public void test28()  throws Throwable  {
      ImageKernel imageKernel0 = new ImageKernel(4.0F, 0);
      RealGrayImage realGrayImage0 = imageKernel0.addbuffer(14, 14, 0);
      ColorImage colorImage0 = ImageConverter.toColor(realGrayImage0);
      assertNotNull(colorImage0);
      
      RealColorImage realColorImage0 = ImageConverter.toRealColor(colorImage0);
      assertEquals("14:14\n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n14:14\n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n14:14\n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n", realColorImage0.toString());
      assertNotNull(realColorImage0);
  }

  @Test
  public void test29()  throws Throwable  {
      KernelType kernelType0 = KernelType.SOBEL_X;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      ComplexImage complexImage0 = ImageConverter.toComplex((Image) imageKernel0);
      assertNotNull(complexImage0);
      
      RealColorImage realColorImage0 = ImageConverter.toRealColor(complexImage0);
      assertNotNull(realColorImage0);
      
      ColorImage colorImage0 = ImageConverter.toColor(realColorImage0);
      assertNotNull(colorImage0);
      
      ComplexImage complexImage1 = ImageConverter.toComplex(colorImage0);
      assertNotNull(complexImage1);
      assertEquals("3:3\n0.0 0.0 0.0 \n0.0 0.0 0.0 \n1.0 2.0 1.0 \n3:3\n0.0 0.0 0.0 \n0.0 0.0 0.0 \n0.0 0.0 0.0 \n", complexImage1.toString());
  }

  @Test
  public void test30()  throws Throwable  {
      KernelType kernelType0 = KernelType.SOBEL_X;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      GrayImage grayImage0 = ImageConverter.toGray((Image) imageKernel0);
      assertNotNull(grayImage0);
      
      RealColorImage realColorImage0 = ImageConverter.toRealColor(grayImage0);
      assertNotNull(realColorImage0);
      assertEquals("3:3\n0.0 0.0 0.0 \n0.0 0.0 0.0 \n1.0 2.0 1.0 \n3:3\n0.0 0.0 0.0 \n0.0 0.0 0.0 \n1.0 2.0 1.0 \n3:3\n0.0 0.0 0.0 \n0.0 0.0 0.0 \n1.0 2.0 1.0 \n", realColorImage0.toString());
  }

  @Test
  public void test31()  throws Throwable  {
      ImageKernel imageKernel0 = new ImageKernel(4.0F, 0);
      ComplexImage complexImage0 = ImageConverter.toComplex((RealGrayImage) imageKernel0);
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.addbuffer(0, 11, 255, 11, 255, 14);
      PhaseImage phaseImage0 = new PhaseImage(complexImage1);
      RealColorImage realColorImage0 = ImageConverter.toRealColor((Image) phaseImage0);
      assertEquals("0:0\n0:0\n", complexImage0.toString());
      assertEquals("0:11\n0:11\n0:11\n", realColorImage0.toString());
      assertNotNull(realColorImage0);
  }

  @Test
  public void test32()  throws Throwable  {
      KernelType kernelType0 = KernelType.UNSHARP;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      RealColorImage realColorImage0 = ImageConverter.toRealColor((RealGrayImage) imageKernel0);
      assertEquals("3:3\n0.0 -1.0 0.0 \n-1.0 5.0 -1.0 \n0.0 -1.0 0.0 \n3:3\n0.0 -1.0 0.0 \n-1.0 5.0 -1.0 \n0.0 -1.0 0.0 \n3:3\n0.0 -1.0 0.0 \n-1.0 5.0 -1.0 \n0.0 -1.0 0.0 \n", realColorImage0.toString());
      assertNotNull(realColorImage0);
  }

  @Test
  public void test33()  throws Throwable  {
      InterpolatedRealColorImage interpolatedRealColorImage0 = new InterpolatedRealColorImage(2, 2);
      RealColorImage realColorImage0 = ImageConverter.toRealColor((RealColorImage) interpolatedRealColorImage0);
      assertNotNull(realColorImage0);
      assertEquals("2:2\nnull null \nnull null \n2:2\nnull null \nnull null \n2:2\nnull null \nnull null \n", realColorImage0.toString());
  }

  @Test
  public void test34()  throws Throwable  {
      KernelType kernelType0 = KernelType.SOBEL_X;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      GrayImage grayImage0 = ImageConverter.toGray((Image) imageKernel0);
      assertNotNull(grayImage0);
      
      ComplexImage complexImage0 = ImageConverter.toComplex(grayImage0);
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = ImageConverter.toComplex(complexImage0);
      assertEquals("3:3\n0.0 0.0 0.0 \n0.0 0.0 0.0 \n1.0 2.0 1.0 \n3:3\n0.0 0.0 0.0 \n0.0 0.0 0.0 \n0.0 0.0 0.0 \n", complexImage1.toString());
      assertNotSame(complexImage0, complexImage1);
      assertNotNull(complexImage1);
  }

  @Test
  public void test35()  throws Throwable  {
      KernelType kernelType0 = KernelType.SOBEL_X;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      ComplexImage complexImage0 = ImageConverter.toComplex((Image) imageKernel0);
      RealColorImage realColorImage0 = ImageConverter.toRealColor(complexImage0);
      ImageConverter.toComplex(realColorImage0);
  }
}
