/*
 * This file was automatically generated by EvoSuite
 */

package jigl.image.types;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import jigl.image.Image;
import jigl.image.ROI;
import jigl.image.exceptions.InvalidKernelException;
import jigl.image.types.BinaryImage;
import jigl.image.types.GrayImage;
import jigl.image.types.ImageKernel;
import jigl.image.types.InterpolatedGrayImage;
import jigl.image.types.KernelType;
import jigl.image.types.RealGrayImage;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BinaryImageEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      BinaryImage binaryImage0 = new BinaryImage(1175, 0, byteArray0);
      assertNotNull(binaryImage0);
      
      // Undeclared exception!
      try {
        binaryImage0.clear((Byte) (byte) (-89));
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      // Undeclared exception!
      try {
        binaryImage0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
  }

  @Test
  public void test3()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(1, 1);
      GrayImage grayImage0 = interpolatedGrayImage0.addbuffer(1, 1, 1, 1, 0);
      BinaryImage binaryImage0 = new BinaryImage(grayImage0);
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = binaryImage0.intersection(binaryImage0);
      assertNotNull(binaryImage1);
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals(1, binaryImage1.Y());
  }

  @Test
  public void test4()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      Byte byte0 = binaryImage0.min();
      assertEquals((byte)0, (byte)byte0);
      
      // Undeclared exception!
      try {
        binaryImage0.set(0, (int) byte0, byte0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(1, 1);
      assertNotNull(binaryImage0);
      
      Byte byte0 = new Byte((byte) (-45));
      ROI rOI0 = new ROI((int) (byte) (-45), (int) byte0, (int) (byte) (-45), 0);
      // Undeclared exception!
      try {
        binaryImage0.set(0, 1, byte0, rOI0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(1, 1);
      assertNotNull(binaryImage0);
      
      // Undeclared exception!
      try {
        binaryImage0.getJavaImage();
        fail("Expecting exception: NoClassDefFoundError");
      } catch(NoClassDefFoundError e) {
        /*
         * Could not initialize class java.awt.image.ColorModel
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      BinaryImage binaryImage0 = new BinaryImage((int) (byte)0, 804, byteArray0);
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = binaryImage0.union(binaryImage0);
      assertNotNull(binaryImage1);
      assertEquals(804, binaryImage0.Y());
      assertEquals(804, binaryImage1.Y());
  }

  @Test
  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)6;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(292, 1338, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][2];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = binaryImage0.union(binaryImage0);
      assertNotNull(binaryImage1);
      assertEquals(2, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
  }

  @Test
  public void test10()  throws Throwable  {
      byte[][] byteArray0 = new byte[8][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertNotNull(binaryImage0);
      assertEquals(4, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
  }

  @Test
  public void test11()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][2];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)74;
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals(1, binaryImage0.count());
      assertEquals(5, binaryImage0.X());
      assertNotNull(binaryImage0);
  }

  @Test
  public void test12()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(17, 17);
      GrayImage grayImage0 = interpolatedGrayImage0.addbuffer(17, 17, 17, 17, 1);
      BinaryImage binaryImage0 = new BinaryImage(grayImage0);
      assertEquals(289, binaryImage0.count());
      assertNotNull(binaryImage0);
      
      binaryImage0.shift(17, 1);
      assertEquals(0, binaryImage0.count());
  }

  @Test
  public void test13()  throws Throwable  {
      KernelType kernelType0 = KernelType.D_XX;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      BinaryImage binaryImage0 = new BinaryImage((RealGrayImage) imageKernel0);
      assertEquals(6, binaryImage0.count());
      assertNotNull(binaryImage0);
  }

  @Test
  public void test14()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      Byte[][] byteArray0 = binaryImage0.getData();
      assertEquals(0, binaryImage0.X());
      assertNotNull(byteArray0);
      assertEquals(0, binaryImage0.Y());
  }

  @Test
  public void test15()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(1, 1);
      assertNotNull(binaryImage0);
      
      // Undeclared exception!
      try {
        binaryImage0.getData();
        fail("Expecting exception: ArrayStoreException");
      } catch(ArrayStoreException e) {
      }
  }

  @Test
  public void test16()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(1, 1);
      GrayImage grayImage0 = interpolatedGrayImage0.addbuffer(1, 1, 1, 1, 0);
      BinaryImage binaryImage0 = new BinaryImage(grayImage0);
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = binaryImage0.shift(1, 0);
      assertEquals(0, binaryImage1.count());
      assertNotNull(binaryImage1);
      assertEquals(1, binaryImage1.Y());
  }

  @Test
  public void test17()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(1, 1);
      assertNotNull(binaryImage0);
      
      ROI rOI0 = new ROI();
      Image<Object> image0 = binaryImage0.copy(rOI0);
      assertNotNull(image0);
      assertEquals(1, image0.X());
      assertNotSame(binaryImage0, image0);
      assertEquals(1, binaryImage0.Y());
  }

  @Test
  public void test18()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      Byte byte0 = binaryImage0.max();
      assertEquals((byte)1, (byte)byte0);
      
      // Undeclared exception!
      try {
        binaryImage0.set(323, 0, byte0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test19()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage((int) (byte)74, (int) (byte)0);
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = binaryImage0.union(binaryImage0);
      assertEquals(0, binaryImage1.Y());
      assertEquals(74, binaryImage1.X());
      assertNotNull(binaryImage1);
  }

  @Test
  public void test20()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][2];
      BinaryImage binaryImage0 = new BinaryImage((int) (byte)74, (int) (byte)0);
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = new BinaryImage(byteArray0);
      assertNotNull(binaryImage1);
      
      // Undeclared exception!
      try {
        binaryImage1.union(binaryImage0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test21()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][2];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertNotNull(binaryImage0);
      
      binaryImage0.compliment();
      assertEquals(2, binaryImage0.count());
      
      BinaryImage binaryImage1 = new BinaryImage(byteArray0);
      BinaryImage binaryImage2 = binaryImage0.intersection(binaryImage1);
      assertEquals(0, binaryImage2.count());
  }

  @Test
  public void test22()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(1, 1);
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertNotNull(binaryImage1);
      assertEquals(1, binaryImage0.count());
      
      BinaryImage binaryImage2 = binaryImage0.compliment();
      assertEquals(0, binaryImage2.count());
  }

  @Test
  public void test23()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(1, 1);
      assertNotNull(binaryImage0);
      
      int int0 = binaryImage0.count();
      assertEquals(0, int0);
      assertEquals(1, binaryImage0.X());
      assertEquals(1, binaryImage0.Y());
  }

  @Test
  public void test24()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(1, 1);
      assertEquals(0, binaryImage0.count());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertNotNull(binaryImage1);
      
      int int0 = binaryImage0.count();
      assertEquals(1, binaryImage0.count());
      assertEquals(1, int0);
  }

  @Test
  public void test25()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(1, 1);
      GrayImage grayImage0 = interpolatedGrayImage0.addbuffer(1, 1, 1, 1, 0);
      BinaryImage binaryImage0 = new BinaryImage(grayImage0);
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = binaryImage0.difference(binaryImage0);
      assertNotNull(binaryImage1);
      assertEquals(1, binaryImage0.Y());
      assertEquals(1, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage1.Y());
  }

  @Test
  public void test26()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(1, 1);
      GrayImage grayImage0 = interpolatedGrayImage0.addbuffer(1, 1, 1, 1, 0);
      BinaryImage binaryImage0 = new BinaryImage(grayImage0);
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertEquals(1, binaryImage0.count());
      
      binaryImage1.difference(binaryImage0);
      assertEquals(0, binaryImage1.count());
  }

  @Test
  public void test27()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(1, 1);
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = binaryImage0.shift(1441, (-1350));
      assertEquals(1, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertNotNull(binaryImage1);
      assertEquals(1, binaryImage1.Y());
  }

  @Test
  public void test28()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(921, (int) (byte)60);
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = binaryImage0.shift((int) (byte)0, (int) (byte)0);
      assertNotNull(binaryImage1);
      assertEquals(921, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(60, binaryImage0.Y());
      assertEquals(60, binaryImage1.Y());
  }
}
