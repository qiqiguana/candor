/*
 * This file was automatically generated by EvoSuite
 */

package jigl.image.types;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.awt.image.MemoryImageSource;
import jigl.image.ROI;
import jigl.image.exceptions.InvalidKernelException;
import jigl.image.types.ComplexImage;
import jigl.image.types.ImageKernel;
import jigl.image.types.InterpolatedRealGrayImage;
import jigl.image.types.KernelType;
import jigl.image.types.MagnitudeImage;
import jigl.image.types.PowerImage;
import jigl.image.types.RealGrayImage;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class RealGrayImageEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      PowerImage powerImage0 = new PowerImage(0, 1466);
      RealGrayImage realGrayImage0 = (RealGrayImage)powerImage0.copy();
      assertNotNull(realGrayImage0);
      assertEquals("0:1466\n", realGrayImage0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      MagnitudeImage magnitudeImage0 = new MagnitudeImage(complexImage0);
      RealGrayImage realGrayImage0 = magnitudeImage0.addbuffer(0, 10, 0);
      assertNotNull(realGrayImage0);
      
      float float0 = realGrayImage0.addSum();
      assertEquals("0:10\n", realGrayImage0.toString());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test2()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      MagnitudeImage magnitudeImage0 = new MagnitudeImage(complexImage0);
      RealGrayImage realGrayImage0 = magnitudeImage0.addbuffer(10, 0, 1327, 10, 0);
      assertNotNull(realGrayImage0);
      assertEquals("10:0\n\n\n\n\n\n\n\n\n\n\n", realGrayImage0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      KernelType kernelType0 = KernelType.LAPLACIAN;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      assertNotNull(imageKernel0);
      
      MemoryImageSource memoryImageSource0 = (MemoryImageSource)imageKernel0.getJavaImage();
      assertNotNull(memoryImageSource0);
      assertEquals(20.0, imageKernel0.sqrSum(), 0.01D);
      assertEquals("3:3\n0.0 1.0 0.0 \n1.0 -4.0 1.0 \n0.0 1.0 0.0 \n", imageKernel0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      MagnitudeImage magnitudeImage0 = new MagnitudeImage(complexImage0);
      float float0 = magnitudeImage0.addSum();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test5()  throws Throwable  {
      KernelType kernelType0 = KernelType.PREWITT_X;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      assertNotNull(imageKernel0);
      
      ImageKernel imageKernel1 = (ImageKernel)imageKernel0.add(1147.7031F);
      assertEquals("3:3\n1146.7031 1146.7031 1146.7031 \n1147.7031 1147.7031 1147.7031 \n1148.7031 1148.7031 1148.7031 \n", imageKernel0.toString());
      assertEquals(10329.328F, imageKernel1.absSum(), 0.01F);
  }

  @Test
  public void test6()  throws Throwable  {
      KernelType kernelType0 = KernelType.PREWITT_X;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      assertNotNull(imageKernel0);
      
      imageKernel0.multiply(0.0F);
      assertEquals("3:3\n-0.0 -0.0 -0.0 \n0.0 0.0 0.0 \n0.0 0.0 0.0 \n", imageKernel0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      KernelType kernelType0 = KernelType.PREWITT_Y;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      assertNotNull(imageKernel0);
      
      ImageKernel imageKernel1 = (ImageKernel)imageKernel0.divide(0.0F);
      ROI rOI0 = new ROI();
      float float0 = imageKernel1.max(rOI0);
      assertEquals("3:3\n-Infinity NaN Infinity \n-Infinity NaN Infinity \n-Infinity NaN Infinity \n", imageKernel0.toString());
      assertEquals((-32768.0F), float0, 0.01F);
  }

  @Test
  public void test8()  throws Throwable  {
      KernelType kernelType0 = KernelType.LAPLACIAN;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      assertNotNull(imageKernel0);
      
      ROI rOI0 = new ROI();
      RealGrayImage realGrayImage0 = (RealGrayImage)imageKernel0.copy(rOI0);
      assertNotNull(realGrayImage0);
      
      InterpolatedRealGrayImage interpolatedRealGrayImage0 = new InterpolatedRealGrayImage(realGrayImage0);
      assertNotNull(interpolatedRealGrayImage0);
      
      ImageKernel imageKernel1 = (ImageKernel)imageKernel0.add((RealGrayImage) interpolatedRealGrayImage0);
      assertEquals(1, interpolatedRealGrayImage0.X());
      assertNotNull(imageKernel1);
      assertEquals("3:3\n0.0 1.0 0.0 \n1.0 -4.0 1.0 \n0.0 1.0 0.0 \n", imageKernel1.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      PowerImage powerImage0 = new PowerImage(0, 1466);
      PowerImage powerImage1 = (PowerImage)powerImage0.multiply((RealGrayImage) powerImage0);
      assertEquals("0:1466\n", powerImage1.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      KernelType kernelType0 = KernelType.LAPLACIAN;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      assertNotNull(imageKernel0);
      
      String string0 = imageKernel0.toString();
      assertNotNull(string0);
      assertEquals("3:3\n0.0 1.0 0.0 \n1.0 -4.0 1.0 \n0.0 1.0 0.0 \n", string0);
  }

  @Test
  public void test11()  throws Throwable  {
      KernelType kernelType0 = KernelType.LAPLACIAN;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      assertNotNull(imageKernel0);
      
      ROI rOI0 = new ROI();
      RealGrayImage realGrayImage0 = (RealGrayImage)imageKernel0.copy(rOI0);
      assertNotNull(realGrayImage0);
      
      MemoryImageSource memoryImageSource0 = (MemoryImageSource)realGrayImage0.getJavaImage();
      assertEquals("3:3\n0.0 1.0 0.0 \n1.0 -4.0 1.0 \n0.0 1.0 0.0 \n", imageKernel0.toString());
      assertNotNull(memoryImageSource0);
      assertEquals(0.0F, imageKernel0.addSum(), 0.01F);
  }

  @Test
  public void test12()  throws Throwable  {
      KernelType kernelType0 = KernelType.PREWITT_X;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      assertNotNull(imageKernel0);
      
      imageKernel0.clip(0, 0);
      assertEquals("3:3\n0.0 0.0 0.0 \n0.0 0.0 0.0 \n0.0 0.0 0.0 \n", imageKernel0.toString());
      assertEquals(0.0F, imageKernel0.addSum(), 0.01F);
  }

  @Test
  public void test13()  throws Throwable  {
      KernelType kernelType0 = KernelType.LAPLACIAN;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      assertNotNull(imageKernel0);
      
      ROI rOI0 = new ROI();
      imageKernel0.median(1007, rOI0);
      assertEquals("3:3\n0.0 1.0 0.0 \n1.0 -4.0 1.0 \n0.0 1.0 0.0 \n", imageKernel0.toString());
      assertEquals(20.0, imageKernel0.sqrSum(), 0.01D);
  }

  @Test
  public void test14()  throws Throwable  {
      KernelType kernelType0 = KernelType.PREWITT_Y;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      assertNotNull(imageKernel0);
      
      ROI rOI0 = new ROI();
      float float0 = imageKernel0.max(rOI0);
      assertEquals("3:3\n-1.0 0.0 1.0 \n-1.0 0.0 1.0 \n-1.0 0.0 1.0 \n", imageKernel0.toString());
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test
  public void test15()  throws Throwable  {
      InterpolatedRealGrayImage interpolatedRealGrayImage0 = new InterpolatedRealGrayImage(9, 9);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try {
        interpolatedRealGrayImage0.subtract((RealGrayImage) interpolatedRealGrayImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test16()  throws Throwable  {
      KernelType kernelType0 = KernelType.UNIFORM;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      assertNotNull(imageKernel0);
      
      ROI rOI0 = new ROI();
      String string0 = imageKernel0.toString(rOI0);
      assertEquals("3:3\n1.0 \n", string0);
      assertEquals("3:3\n1.0 1.0 1.0 \n1.0 1.0 1.0 \n1.0 1.0 1.0 \n", imageKernel0.toString());
      assertNotNull(string0);
  }
}
