/*
 * This file was automatically generated by EvoSuite
 */

package jigl.image.types;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import jigl.image.exceptions.InvalidKernelException;
import jigl.image.types.ImageKernel;
import jigl.image.types.KernelType;
import jigl.image.types.RealGrayImage;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ImageKernelEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      KernelType kernelType0 = KernelType.LAPLACIAN_8;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      assertNotNull(imageKernel0);
      
      ImageKernel imageKernel1 = new ImageKernel((RealGrayImage) imageKernel0);
      assertEquals(0.0F, imageKernel1.addSum(), 0.01F);
  }

  @Test
  public void test1()  throws Throwable  {
      KernelType kernelType0 = KernelType.UNIFORM;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      assertNotNull(imageKernel0);
      assertEquals(9.0F, imageKernel0.addSum(), 0.01F);
  }

  @Test
  public void test2()  throws Throwable  {
      KernelType kernelType0 = KernelType.SOBEL_X;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      assertEquals("3:3\n-1.0 -2.0 -1.0 \n0.0 0.0 0.0 \n1.0 2.0 1.0 \n", imageKernel0.toString());
      assertNotNull(imageKernel0);
  }

  @Test
  public void test3()  throws Throwable  {
      KernelType kernelType0 = KernelType.SOBEL_Y;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      assertNotNull(imageKernel0);
      assertEquals(12.0, imageKernel0.sqrSum(), 0.01D);
  }

  @Test
  public void test4()  throws Throwable  {
      KernelType kernelType0 = KernelType.PREWITT_X;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      assertNotNull(imageKernel0);
      assertEquals(6.0, imageKernel0.sqrSum(), 0.01D);
  }

  @Test
  public void test5()  throws Throwable  {
      KernelType kernelType0 = KernelType.PREWITT_Y;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      assertNotNull(imageKernel0);
      assertEquals("3:3\n-1.0 0.0 1.0 \n-1.0 0.0 1.0 \n-1.0 0.0 1.0 \n", imageKernel0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      KernelType kernelType0 = KernelType.LAPLACIAN;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      assertNotNull(imageKernel0);
      assertEquals(0.0F, imageKernel0.addSum(), 0.01F);
  }

  @Test
  public void test7()  throws Throwable  {
      KernelType kernelType0 = KernelType.UNSHARP;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      assertNotNull(imageKernel0);
      
      imageKernel0.normalize255();
      assertEquals(4.459823467186652E-4, imageKernel0.sqrSum(), 0.01D);
      assertEquals("3:3\n0.0 -0.003921569 0.0 \n-0.003921569 0.019607844 -0.003921569 \n0.0 -0.003921569 0.0 \n", imageKernel0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      KernelType kernelType0 = KernelType.UNSHARP_8;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      assertNotNull(imageKernel0);
      assertEquals(89.0, imageKernel0.sqrSum(), 0.01D);
  }

  @Test
  public void test9()  throws Throwable  {
      KernelType kernelType0 = KernelType.D_XX;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      assertNotNull(imageKernel0);
      
      imageKernel0.normalize();
      assertEquals("3:3\n1.0 1.0 1.0 \n-2.0 -2.0 -2.0 \n1.0 1.0 1.0 \n", imageKernel0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      KernelType kernelType0 = KernelType.D_YY;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      assertNotNull(imageKernel0);
      assertEquals(0.0F, imageKernel0.addSum(), 0.01F);
  }

  @Test
  public void test11()  throws Throwable  {
      KernelType kernelType0 = KernelType.D_XY;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      assertNotNull(imageKernel0);
      assertEquals(4.0F, imageKernel0.absSum(), 0.01F);
  }

  @Test
  public void test12()  throws Throwable  {
      ImageKernel imageKernel0 = new ImageKernel(352.5869F, 84);
  }

  @Test
  public void test13()  throws Throwable  {
      KernelType kernelType0 = KernelType.D_XX;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      assertNotNull(imageKernel0);
      
      imageKernel0.add(32767.0F);
      imageKernel0.normalize();
      assertEquals("3:3\n0.1111145 0.1111145 0.1111145 \n0.11110433 0.11110433 0.11110433 \n0.1111145 0.1111145 0.1111145 \n", imageKernel0.toString());
      assertEquals(1.0F, imageKernel0.absSum(), 0.01F);
  }
}
