/*
 * This file was automatically generated by EvoSuite
 */

package jigl.image.types;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.awt.image.ImageProducer;
import java.awt.image.MemoryImageSource;
import java.util.Hashtable;
import javax.swing.JFormattedTextField;
import jigl.image.Image;
import jigl.image.InterpolationMethod;
import jigl.image.ROI;
import jigl.image.types.GrayImage;
import jigl.image.types.InterpolatedColorImage;
import jigl.image.types.InterpolatedGrayImage;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class GrayImageEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      GrayImage grayImage0 = interpolatedGrayImage0.addbuffer(10, 10, 0);
      assertNotNull(grayImage0);
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(grayImage0);
      assertNotNull(interpolatedGrayImage1);
      
      GrayImage grayImage1 = grayImage0.add((Image<Integer>) interpolatedGrayImage1);
      assertNotNull(grayImage1);
      assertEquals("10:10\n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n", interpolatedGrayImage1.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      int[] intArray0 = new int[6];
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      // Undeclared exception!
      try {
        grayImage0.subtract(0, 0, (-909));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 0
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(694, 930);
      // Undeclared exception!
      try {
        interpolatedGrayImage0.byteSize();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      JFormattedTextField jFormattedTextField0 = new JFormattedTextField((Object) "rolloverEnabled");
      int[] intArray0 = new int[3];
      Hashtable<String, Integer> hashtable0 = new Hashtable<String, Integer>();
      MemoryImageSource memoryImageSource0 = new MemoryImageSource(8, 8, intArray0, 8, 0, (Hashtable<?, ?>) hashtable0);
      java.awt.Image image0 = jFormattedTextField0.createImage((ImageProducer) memoryImageSource0);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(image0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals("8:8\nnull null null null null null null null \nnull null null null null null null null \nnull null null null null null null null \nnull null null null null null null null \nnull null null null null null null null \nnull null null null null null null null \nnull null null null null null null null \nnull null null null null null null null \n", interpolatedGrayImage0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      short[] shortArray0 = new short[18];
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      assertEquals(0, grayImage0.addSum());
  }

  @Test
  public void test5()  throws Throwable  {
      JFormattedTextField jFormattedTextField0 = new JFormattedTextField((Object) "rolloverEnabled");
      int[] intArray0 = new int[17];
      Hashtable<String, Integer> hashtable0 = new Hashtable<String, Integer>();
      MemoryImageSource memoryImageSource0 = new MemoryImageSource(8, 8, intArray0, 8, 0, (Hashtable<?, ?>) hashtable0);
      java.awt.Image image0 = jFormattedTextField0.createImage((ImageProducer) memoryImageSource0);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(image0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals("8:8\n0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 \n", interpolatedGrayImage0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      InterpolatedGrayImage interpolatedGrayImage1 = (InterpolatedGrayImage)interpolatedGrayImage0.add((-228));
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
  }

  @Test
  public void test7()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      GrayImage grayImage0 = interpolatedGrayImage0.addbuffer(10, 10, 0);
      assertNotNull(grayImage0);
      
      GrayImage grayImage1 = grayImage0.subtract((-228));
      assertEquals("10:10\n228 228 228 228 228 228 228 228 228 228 \n228 228 228 228 228 228 228 228 228 228 \n228 228 228 228 228 228 228 228 228 228 \n228 228 228 228 228 228 228 228 228 228 \n228 228 228 228 228 228 228 228 228 228 \n228 228 228 228 228 228 228 228 228 228 \n228 228 228 228 228 228 228 228 228 228 \n228 228 228 228 228 228 228 228 228 228 \n228 228 228 228 228 228 228 228 228 228 \n228 228 228 228 228 228 228 228 228 228 \n", grayImage0.toString());
      assertEquals(22800, grayImage1.absSum());
  }

  @Test
  public void test8()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      InterpolatedGrayImage interpolatedGrayImage1 = (InterpolatedGrayImage)interpolatedGrayImage0.multiply(0);
      assertEquals(0, interpolatedGrayImage1.addSum());
  }

  @Test
  public void test9()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      GrayImage grayImage0 = interpolatedGrayImage0.addbuffer(10, 10, 0);
      assertNotNull(grayImage0);
      
      GrayImage grayImage1 = grayImage0.divide((-228));
      assertEquals("10:10\n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n", grayImage0.toString());
      assertNotNull(grayImage1);
  }

  @Test
  public void test10()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      int int0 = interpolatedGrayImage0.addSum();
      assertEquals(0, int0);
  }

  @Test
  public void test11()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(657, 1);
      InterpolatedGrayImage interpolatedGrayImage1 = (InterpolatedGrayImage)interpolatedGrayImage0.clear();
      int int0 = interpolatedGrayImage1.absSum();
      assertEquals("657:1\n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n0 \n", interpolatedGrayImage0.toString());
      assertEquals(0, int0);
  }

  @Test
  public void test12()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(657, 1);
      // Undeclared exception!
      try {
        interpolatedGrayImage0.subtract((Image<Integer>) interpolatedGrayImage0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 977);
      InterpolatedGrayImage interpolatedGrayImage1 = (InterpolatedGrayImage)interpolatedGrayImage0.diff((Image<Integer>) interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
  }

  @Test
  public void test14()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      GrayImage grayImage0 = interpolatedGrayImage0.addbuffer(10, 10, 0);
      assertNotNull(grayImage0);
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(grayImage0);
      assertNotNull(interpolatedGrayImage1);
      
      InterpolatedGrayImage interpolatedGrayImage2 = (InterpolatedGrayImage)interpolatedGrayImage1.multiply((Image<Integer>) interpolatedGrayImage0);
      assertEquals("10:10\n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n", interpolatedGrayImage1.toString());
      assertEquals("10:10\n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n", interpolatedGrayImage2.toString());
  }

  @Test
  public void test15()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(657, 1);
      String string0 = interpolatedGrayImage0.toString();
      assertNotNull(string0);
      assertEquals("657:1\nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \nnull \n", string0);
  }

  @Test
  public void test16()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(657, 1);
      ROI rOI0 = new ROI(657, 1, 1, 0);
      // Undeclared exception!
      try {
        interpolatedGrayImage0.median(1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test17()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      GrayImage grayImage0 = interpolatedGrayImage0.addbuffer(10, 10, 0);
      assertNotNull(grayImage0);
      
      ROI rOI0 = new ROI();
      grayImage0.byteSize(rOI0);
      assertEquals("10:10\n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n", grayImage0.toString());
  }

  @Test
  public void test18()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      InterpolatedColorImage interpolatedColorImage1 = (InterpolatedColorImage)interpolatedColorImage0.copy();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try {
        interpolatedColorImage1.add(0, 8, 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 0
         */
      }
  }

  @Test
  public void test19()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      GrayImage grayImage0 = interpolatedGrayImage0.addbuffer(10, 10, 0);
      assertNotNull(grayImage0);
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(grayImage0);
      assertNotNull(interpolatedGrayImage1);
      
      ROI rOI0 = new ROI();
      InterpolatedGrayImage interpolatedGrayImage2 = (InterpolatedGrayImage)interpolatedGrayImage1.multiply(10, rOI0);
      assertNotNull(interpolatedGrayImage2);
      assertEquals("10:10\n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n", interpolatedGrayImage1.toString());
  }

  @Test
  public void test20()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try {
        interpolatedGrayImage0.divide(0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 0
         */
      }
  }

  @Test
  public void test21()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 977);
      ROI rOI0 = new ROI(1241, 1071, (-1), 0);
      // Undeclared exception!
      try {
        interpolatedGrayImage0.add((Image<Integer>) interpolatedGrayImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * -1
         */
      }
  }

  @Test
  public void test22()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 977);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try {
        interpolatedGrayImage0.subtract((Image<Integer>) interpolatedGrayImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 0
         */
      }
  }

  @Test
  public void test23()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      GrayImage grayImage0 = interpolatedGrayImage0.addbuffer(10, 10, 0);
      assertNotNull(grayImage0);
      
      ROI rOI0 = new ROI();
      String string0 = grayImage0.toString(rOI0);
      assertNotNull(string0);
      assertEquals("10:10\n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n", grayImage0.toString());
      assertEquals("10:10\n0 \n", string0);
  }
}
