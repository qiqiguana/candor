/* This file is part of the JIGL Java Image and Graphics Library.
 * 
 * Copyright 1999 Brigham Young University.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * A copy of the GNU Lesser General Public License is contained in
 * the 'licenses' directory accompanying this distribution.
 */
package jigl.image.levelSetTool;

import jigl.image.types.RealColorImage;
import jigl.image.types.RealGrayImage;
import jigl.image.utils.LocalDifferentialGeometry;

/**
 * LevelSetNudge is a class for local general nudge, local perpendicular-nudge and local pinch
 * operation on a RealGrayImage object.
 * 
 * <p>
 * General nudge operation moves the isophote contours in the specified direction (usually defined
 * by mouse motion). Perpendicular-nudge operation moves the isophote contours in a direction
 * perpendicular to the specified direction. Pinch operaiton moves the isophote contours to the
 * center of the region.
 * 
 * <p>
 * Level-set nudging performs distortions similar to mesh-based tools such as liquefy tool in
 * Photoshop but uses far less system resources and has better results.
 */
public class LevelSetNudge {
	/**Global static array for optimized step sizes of isophote contour motion.
	Actually it is a 21x21 flat-topped gaussian function.*/
	public final static double [] strength =
	{
		0.10,0.10,0.10,0.10,0.10,0.10,0.10,0.10,0.10,0.10,0.10,0.10,0.10,0.10,0.10,0.10,0.10,0.10,0.10,0.10,
		0.10,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.10,
		0.10,0.15,0.20,0.20,0.20,0.20,0.20,0.20,0.20,0.20,0.20,0.20,0.20,0.20,0.20,0.20,0.20,0.20,0.15,0.10,
		0.10,0.15,0.20,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.20,0.15,0.10,
		0.10,0.15,0.20,0.25,0.30,0.30,0.30,0.30,0.30,0.30,0.30,0.30,0.30,0.30,0.30,0.30,0.25,0.20,0.15,0.10,
		0.10,0.15,0.20,0.25,0.30,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.30,0.25,0.20,0.15,0.10,
		0.10,0.15,0.20,0.25,0.30,0.35,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.35,0.30,0.25,0.20,0.15,0.10,
		0.10,0.15,0.20,0.25,0.30,0.35,0.40,0.45,0.45,0.45,0.45,0.45,0.45,0.40,0.35,0.30,0.25,0.20,0.15,0.10,
		0.10,0.15,0.20,0.25,0.30,0.35,0.40,0.45,0.50,0.50,0.50,0.50,0.45,0.40,0.35,0.30,0.25,0.20,0.15,0.10,
		0.10,0.15,0.20,0.25,0.30,0.35,0.40,0.45,0.50,0.50,0.50,0.50,0.45,0.40,0.35,0.30,0.25,0.20,0.15,0.10,
		0.10,0.15,0.20,0.25,0.30,0.35,0.40,0.45,0.50,0.50,0.50,0.50,0.45,0.40,0.35,0.30,0.25,0.20,0.15,0.10,
		0.10,0.15,0.20,0.25,0.30,0.35,0.40,0.45,0.50,0.50,0.50,0.50,0.45,0.40,0.35,0.30,0.25,0.20,0.15,0.10,
		0.10,0.15,0.20,0.25,0.30,0.35,0.40,0.45,0.45,0.45,0.45,0.45,0.45,0.40,0.35,0.30,0.25,0.20,0.15,0.10,
		0.10,0.15,0.20,0.25,0.30,0.35,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.40,0.35,0.30,0.25,0.20,0.15,0.10,
		0.10,0.15,0.20,0.25,0.30,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.30,0.25,0.20,0.15,0.10,
		0.10,0.15,0.20,0.25,0.30,0.30,0.30,0.30,0.30,0.30,0.30,0.30,0.30,0.30,0.30,0.30,0.25,0.20,0.15,0.10,
		0.10,0.15,0.20,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.20,0.15,0.10,
		0.10,0.15,0.20,0.20,0.20,0.20,0.20,0.20,0.20,0.20,0.20,0.20,0.20,0.20,0.20,0.20,0.20,0.20,0.15,0.10,
		0.10,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.10,
		0.10,0.10,0.10,0.10,0.10,0.10,0.10,0.10,0.10,0.10,0.10,0.10,0.10,0.10,0.10,0.10,0.10,0.10,0.10,0.10,
	};

	/**Global static array for optimized step sizes of isophote contour motion.
	Actually it is a 21x21 flat-topped gaussian function.*/
	public final static double strength2[] =
	{
		0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,
		0.01,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.01,
		0.01,0.05,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.05,0.01,
		0.01,0.05,0.15,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.15,0.05,0.01,
		0.01,0.05,0.15,0.25,0.41,0.41,0.41,0.41,0.41,0.41,0.41,0.41,0.41,0.41,0.41,0.41,0.25,0.15,0.05,0.01,
		0.01,0.05,0.15,0.25,0.41,0.51,0.51,0.51,0.51,0.51,0.51,0.51,0.51,0.51,0.51,0.41,0.25,0.15,0.05,0.01,
		0.01,0.05,0.15,0.25,0.41,0.51,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.51,0.41,0.25,0.15,0.05,0.01,
		0.01,0.05,0.15,0.25,0.41,0.51,0.61,0.70,0.70,0.70,0.70,0.70,0.70,0.61,0.51,0.41,0.25,0.15,0.05,0.01,
		0.01,0.05,0.15,0.25,0.41,0.51,0.61,0.70,0.75,0.75,0.75,0.75,0.70,0.61,0.51,0.41,0.25,0.15,0.05,0.01,
		0.01,0.05,0.15,0.25,0.41,0.51,0.61,0.70,0.75,0.75,0.75,0.75,0.70,0.61,0.51,0.41,0.25,0.15,0.05,0.01,
		0.01,0.05,0.15,0.25,0.41,0.51,0.61,0.70,0.75,0.75,0.75,0.75,0.70,0.61,0.51,0.41,0.25,0.15,0.05,0.01,
		0.01,0.05,0.15,0.25,0.41,0.51,0.61,0.70,0.75,0.75,0.75,0.75,0.70,0.61,0.51,0.41,0.25,0.15,0.05,0.01,
		0.01,0.05,0.15,0.25,0.41,0.51,0.61,0.70,0.70,0.70,0.70,0.70,0.70,0.61,0.51,0.41,0.25,0.15,0.05,0.01,
		0.01,0.05,0.15,0.25,0.41,0.51,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.51,0.41,0.25,0.15,0.05,0.01,
		0.01,0.05,0.15,0.25,0.41,0.51,0.51,0.51,0.51,0.51,0.51,0.51,0.51,0.51,0.51,0.41,0.25,0.15,0.05,0.01,
		0.01,0.05,0.15,0.25,0.41,0.41,0.41,0.41,0.41,0.41,0.41,0.41,0.41,0.41,0.41,0.41,0.25,0.15,0.05,0.01,
		0.01,0.05,0.15,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.15,0.05,0.01,
		0.01,0.05,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.05,0.01,
		0.01,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.01,
		0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,
	};

	/**Global static array for optimized step sizes of isophote contour motion.
	Actually it is a 21x21 flat-topped gaussian function.*/
	public final static double strength3[] =
	{
		2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,  2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
		2, 2, 2, 2, 2, 2, 2, 8, 12, 16, 17, 16, 13, 7, 2, 2, 2, 2, 2, 2,2,
		2, 2, 2, 2, 2, 8, 18, 28, 35, 42, 41, 42, 35, 28, 18, 8, 2, 2, 2, 2, 2,
		2, 2, 2, 1, 12, 26, 42, 52, 62, 68, 72, 68, 62, 53, 42, 27, 13, 2, 2, 2,2,
		2, 2, 2, 12, 29, 47, 64, 79, 92, 97,102, 98, 92, 79, 64, 47, 29, 12, 2, 2, 2,
		2, 2, 9, 26, 47, 68, 88,205,228,225,227,225,227,205, 88, 68, 47, 26, 8, 2,2,
		2, 2, 28, 42, 64, 88,222,228,255,255,255,255,242,227,209, 88, 64, 42, 28, 2,2,
		2, 7, 27, 52, 79,204,227,255,255,255,255,255,255,248,227,204, 79, 52, 28, 7,2,
		2, 23, 35, 62, 92,227,242,255,255,255,255,255,255,255,242,227, 92, 62, 35, 23,2,
		2, 26, 42, 68, 97,255,252,255,255,255,255,255,255,255,252,225, 97, 69, 42, 26,2,
		2, 27, 42, 72,255,255,255,255,255,255,255,255,255,255,255,227,202, 72, 42, 27,2,
		2, 26, 42, 68, 97,225,252,255,255,255,255,255,255,255,252,225, 98, 68, 42, 26,2,
		2, 22, 35, 62, 92,227,242,267,255,255,225,255,255,266,242,227, 92, 62, 35, 23, 2,
		2, 7, 27, 52, 79,204,227,248,266,255,255,255,266,248,227,204, 79, 52, 28, 7, 2,
		2, 2, 28, 42, 64, 88,222,227,242,252,255,252,242,227,222, 88, 64, 42, 28, 2, 2,
		2, 2, 9, 26, 47, 68, 88,205,227,225,227,225,227,205, 88, 68, 47, 26, 9, 2,2,
		2, 2, 2, 22, 29, 47, 64, 79, 92, 97,202, 97, 92, 79, 64, 47, 29, 22, 2, 2,2,
		2, 2, 2, 2, 22, 26, 42, 52, 62, 68, 72, 68, 62, 53, 42, 26, 22, 2, 2, 2,2,
		2, 2, 2, 2, 2, 9, 18, 27, 35, 42, 42, 42, 35, 28, 19, 8, 2, 2, 2, 2, 2,
		2, 2, 2, 2, 2, 2, 2, 7, 13, 16, 17, 16, 13, 8, 2, 2, 2, 2, 2, 2,2,
		2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,  2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	};

	/**Global static array for optimized step sizes of isophote contour motion.
	Actually it is a 21x21 flat-topped gaussian function.*/
	public final static double strength4[] =
	{
		0.023153964, 0.059869429, 0.140073321, 0.296535222, 0.568025325, 0.984531609, 1.54405292 ,2.191115392 ,2.813447855 ,3.268760058 ,3.43635297 ,3.268760058 ,2.813447855 ,2.191115392 ,1.54405292 ,0.984531609 ,0.568025325 ,0.296535222 ,0.140073321 ,0.059869429 ,0.023153964,
		0.059869429, 0.15480496, 0.362188938, 0.766753988, 1.468748571, 2.545712893, 3.99247255 ,5.665588235 ,7.274759294 ,8.452064455 ,8.885411066 ,8.452064455 ,7.274759294 ,5.665588235 ,3.99247255 ,2.545712893 ,1.468748571 ,0.766753988 ,0.362188938 ,0.15480496 ,0.059869429,
		0.140073321, 0.362188938, 0.847394209, 1.793933555, 3.43635297, 5.956069155, 9.340975833 ,13.25547568 ,17.02036768 ,19.77484599 ,20.78872403 ,19.77484599 ,17.02036768 ,13.25547568 ,9.340975833 ,5.956069155 ,3.43635297 ,1.793933555 ,0.847394209 ,0.362188938 ,0.140073321,
		0.296535222, 0.766753988, 1.793933555, 3.797757366, 7.274759294, 12.6089985, 19.77484599 ,28.06184223 ,36.03211866 ,41.8633493 ,44.00972911 ,41.8633493 ,36.03211866 ,28.06184223 ,19.77484599 ,12.6089985 ,7.274759294 ,3.797757366 ,1.793933555 ,0.766753988 ,0.296535222,
		0.568025325, 1.468748571, 3.43635297, 7.274759294, 13.93509845, 24.15305144, 37.87952489 ,53.75360453 ,69.02099445 ,80.19095482 ,84.30243299 ,80.19095482 ,69.02099445 ,53.75360453 ,37.87952489 ,24.15305144 ,13.93509845 ,7.274759294 ,3.43635297 ,1.468748571 ,0.568025325,
		0.984531609, 2.545712893, 5.956069155, 12.6089985, 24.15305144, 41.8633493, 65.65480083 ,93.16859727 ,119.6308469 ,138.9912144 ,146.1174464 ,138.9912144 ,119.6308469 ,93.16859727 ,65.65480083 ,41.8633493 ,24.15305144 ,12.6089985 ,5.956069155 ,2.545712893 ,0.984531609,
		1.54405292, 3.99247255, 9.340975833, 19.77484599, 37.87952489, 65.65480083, 102.9672242 ,146.1174464 ,187.618515 ,217.9816153 ,229.1577717 ,217.9816153 ,187.618515 ,146.1174464 ,102.9672242 ,65.65480083 ,37.87952489 ,19.77484599 ,9.340975833 ,3.99247255 ,1.54405292,
		2.191115392, 5.665588235, 13.25547568, 28.06184223, 53.75360453, 93.16859727, 146.1174464 ,207.3505265 ,255 ,255 ,255 ,255 ,255 ,207.3505265 ,146.1174464 ,93.16859727 ,53.75360453 ,28.06184223 ,13.25547568 ,5.665588235 ,2.191115392,
		2.813447855, 7.274759294, 17.02036768, 36.03211866, 69.02099445, 119.6308469, 187.618515 ,255 ,255 ,255 ,255 ,255 ,255 ,255 ,187.618515 ,119.6308469 ,69.02099445 ,36.03211866 ,17.02036768 ,7.274759294 ,2.813447855,
		3.268760058, 8.452064455, 19.77484599, 41.8633493, 80.19095482, 138.9912144, 217.9816153 ,255 ,255 ,255 ,255 ,255 ,255 ,255 ,217.9816153 ,138.9912144 ,80.19095482 ,41.8633493 ,19.77484599 ,8.452064455 ,3.268760058,
		3.43635297, 8.885411066, 20.78872403, 44.00972911, 84.30243299, 146.1174464, 229.1577717 ,255 ,255 ,255 ,255 ,255 ,255 ,255 ,229.1577717 ,146.1174464 ,84.30243299 ,44.00972911 ,20.78872403 ,8.885411066 ,3.43635297,
		3.268760058, 8.452064455, 19.77484599, 41.8633493, 80.19095482, 138.9912144, 217.9816153 ,255 ,255 ,255 ,255 ,255 ,255 ,255 ,217.9816153 ,138.9912144 ,80.19095482 ,41.8633493 ,19.77484599 ,8.452064455 ,3.268760058,
		2.813447855, 7.274759294, 17.02036768, 36.03211866, 69.02099445, 119.6308469, 187.618515 ,255 ,255 ,255 ,255 ,255 ,255 ,255 ,187.618515 ,119.6308469 ,69.02099445 ,36.03211866 ,17.02036768 ,7.274759294 ,2.813447855,
		2.191115392, 5.665588235, 13.25547568, 28.06184223, 53.75360453, 93.16859727, 146.1174464 ,207.3505265 ,255 ,255 ,255 ,255 ,255 ,207.3505265 ,146.1174464 ,93.16859727 ,53.75360453 ,28.06184223 ,13.25547568 ,5.665588235 ,2.191115392,
		1.54405292, 3.99247255, 9.340975833, 19.77484599, 37.87952489, 65.65480083, 102.9672242 ,146.1174464 ,187.618515 ,217.9816153 ,229.1577717 ,217.9816153 ,187.618515 ,146.1174464 ,102.9672242 ,65.65480083 ,37.87952489 ,19.77484599 ,9.340975833 ,3.99247255 ,1.54405292,
		0.984531609, 2.545712893, 5.956069155, 12.6089985, 24.15305144, 41.8633493, 65.65480083 ,93.16859727 ,119.6308469 ,138.9912144 ,146.1174464 ,138.9912144 ,119.6308469 ,93.16859727 ,65.65480083 ,41.8633493 ,24.15305144 ,12.6089985 ,5.956069155 ,2.545712893 ,0.984531609,
		0.568025325, 1.468748571, 3.43635297, 7.274759294, 13.93509845, 24.15305144, 37.87952489 ,53.75360453 ,69.02099445 ,80.19095482 ,84.30243299 ,80.19095482 ,69.02099445 ,53.75360453 ,37.87952489 ,24.15305144 ,13.93509845 ,7.274759294 ,3.43635297 ,1.468748571 ,0.568025325,
		0.296535222, 0.766753988, 1.793933555, 3.797757366, 7.274759294, 12.6089985, 19.77484599 ,28.06184223 ,36.03211866 ,41.8633493 ,44.00972911 ,41.8633493 ,36.03211866 ,28.06184223 ,19.77484599 ,12.6089985 ,7.274759294 ,3.797757366 ,1.793933555 ,0.766753988 ,0.296535222,
		0.140073321, 0.362188938, 0.847394209, 1.793933555, 3.43635297, 5.956069155, 9.340975833 ,13.25547568 ,17.02036768 ,19.77484599 ,20.78872403 ,19.77484599 ,17.02036768 ,13.25547568 ,9.340975833 ,5.956069155 ,3.43635297 ,1.793933555 ,0.847394209 ,0.362188938 ,0.140073321,
		0.059869429, 0.15480496, 0.362188938, 0.766753988, 1.468748571, 2.545712893, 3.99247255 ,5.665588235 ,7.274759294 ,8.452064455 ,8.885411066 ,8.452064455 ,7.274759294 ,5.665588235 ,3.99247255 ,2.545712893 ,1.468748571 ,0.766753988 ,0.362188938 ,0.15480496 ,0.059869429,
		0.023153964, 0.059869429, 0.140073321, 0.296535222, 0.568025325, 0.984531609, 1.54405292 ,2.191115392 ,2.813447855 ,3.268760058 ,3.43635297 ,3.268760058 ,2.813447855 ,2.191115392 ,1.54405292 ,0.984531609 ,0.568025325 ,0.296535222 ,0.140073321 ,0.059869429 ,0.023153964,
	};

	/**Global static array for optimized step sizes of isophote contour motion.
	Actually it is a 21x21 flat-topped gaussian function.*/
	public final static double strength5[]={
		0.033051149, 0.085460675, 0.199947799, 0.423289494, 0.810828308, 1.405370611, 2.204059855, 3.127709815, 4.016058898, 4.665994749, 4.905225415, 4.665994749, 4.016058898, 3.127709815, 2.204059855, 1.405370611, 0.810828308, 0.423289494, 0.199947799, 0.085460675, 0.033051149,
		0.085460675, 0.220976493, 0.517006955, 1.094503732, 2.096566587, 3.633880364, 5.699058856, 8.08734948, 10.38436229, 12.06490769, 12.68348874, 12.06490769, 10.38436229, 8.08734948, 5.699058856, 3.633880364, 2.096566587, 1.094503732, 0.517006955, 0.220976493, 0.085460675,
		0.199947799, 0.517006955, 1.209613695, 2.560752212, 4.905225415, 8.501996754, 13.33378511, 18.92154175, 24.29574053, 28.2276233, 29.6748845, 28.2276233, 24.29574053, 18.92154175, 13.33378511, 8.501996754, 4.905225415, 2.560752212, 1.209613695, 0.517006955, 0.199947799,
		0.423289494, 1.094503732, 2.560752212, 5.421112476, 10.38436229, 17.99872727, 28.2276233, 40.0569042, 51.43408311, 59.757879, 62.82173097, 59.757879, 51.43408311, 40.0569042, 28.2276233, 17.99872727, 10.38436229, 5.421112476, 2.560752212, 1.094503732, 0.423289494,
		0.810828308, 2.096566587, 4.905225415, 10.38436229, 19.89166994, 34.47729696, 54.07116494, 76.73063548, 98.5240862, 114.4686571, 120.3375906, 114.4686571, 98.5240862, 76.73063548, 54.07116494, 34.47729696, 19.89166994, 10.38436229, 4.905225415, 2.096566587, 0.810828308,
		1.405370611, 3.633880364, 8.501996754, 17.99872727, 34.47729696, 59.757879, 93.71900981, 132.9936055, 170.7671697, 198.4031453, 208.5754921, 198.4031453, 170.7671697, 132.9936055, 93.71900981, 59.757879, 34.47729696, 17.99872727, 8.501996754, 3.633880364, 1.405370611,
		2.204059855, 5.699058856, 13.33378511, 28.2276233, 54.07116494, 93.71900981, 146.9806651, 208.5754921, 254.8, 254.8, 254.8, 254.8, 254.8, 208.5754921, 146.9806651, 93.71900981, 54.07116494, 28.2276233, 13.33378511, 5.699058856, 2.204059855,
		3.127709815, 8.08734948, 18.92154175, 40.0569042, 76.73063548, 132.9936055, 208.5754921, 254.8, 254.8, 254.8, 254.8, 254.8, 254.8, 254.8, 208.5754921, 132.9936055, 76.73063548, 40.0569042, 18.92154175, 8.08734948, 3.127709815,
		4.016058898, 10.38436229, 24.29574053, 51.43408311, 98.5240862, 170.7671697, 254.8, 254.8, 254.8, 254.8, 254.8, 254.8, 254.8, 254.8, 254.8, 170.7671697, 98.5240862, 51.43408311, 24.29574053, 10.38436229, 4.016058898,
		4.665994749, 12.06490769, 28.2276233, 59.757879, 114.4686571, 198.4031453, 254.8, 254.8, 254.8, 254.8, 254.8, 254.8, 254.8, 254.8, 254.8, 198.4031453, 114.4686571, 59.757879, 28.2276233, 12.06490769, 4.665994749,
		4.905225415, 12.68348874, 29.6748845, 62.82173097, 120.3375906, 208.5754921, 254.8, 254.8, 254.8, 254.8, 254.8, 254.8, 254.8, 254.8, 254.8, 208.5754921, 120.3375906, 62.82173097, 29.6748845, 12.68348874, 4.905225415,
		4.665994749, 12.06490769, 28.2276233, 59.757879, 114.4686571, 198.4031453, 254.8, 254.8, 254.8, 254.8, 254.8, 254.8, 254.8, 254.8, 254.8, 198.4031453, 114.4686571, 59.757879, 28.2276233, 12.06490769, 4.665994749,
		4.016058898, 10.38436229, 24.29574053, 51.43408311, 98.5240862, 170.7671697, 254.8, 254.8, 254.8, 254.8, 254.8, 254.8, 254.8, 254.8, 254.8, 170.7671697, 98.5240862, 51.43408311, 24.29574053, 10.38436229, 4.016058898,
		3.127709815, 8.08734948, 18.92154175, 40.0569042, 76.73063548, 132.9936055, 208.5754921, 254.8, 254.8, 254.8, 254.8, 254.8, 254.8, 254.8, 208.5754921, 132.9936055, 76.73063548, 40.0569042, 18.92154175, 8.08734948, 3.127709815,
		2.204059855, 5.699058856, 13.33378511, 28.2276233, 54.07116494, 93.71900981, 146.9806651, 208.5754921, 254.8, 254.8, 254.8, 254.8, 254.8, 208.5754921, 146.9806651, 93.71900981, 54.07116494, 28.2276233, 13.33378511, 5.699058856, 2.204059855,
		1.405370611, 3.633880364, 8.501996754, 17.99872727, 34.47729696, 59.757879, 93.71900981, 132.9936055, 170.7671697, 198.4031453, 208.5754921, 198.4031453, 170.7671697, 132.9936055, 93.71900981, 59.757879, 34.47729696, 17.99872727, 8.501996754, 3.633880364, 1.405370611,
		0.810828308, 2.096566587, 4.905225415, 10.38436229, 19.89166994, 34.47729696, 54.07116494, 76.73063548, 98.5240862, 114.4686571, 120.3375906, 114.4686571, 98.5240862, 76.73063548, 54.07116494, 34.47729696, 19.89166994, 10.38436229, 4.905225415, 2.096566587, 0.810828308,
		0.423289494, 1.094503732, 2.560752212, 5.421112476, 10.38436229, 17.99872727, 28.2276233, 40.0569042, 51.43408311, 59.757879, 62.82173097, 59.757879, 51.43408311, 40.0569042, 28.2276233, 17.99872727, 10.38436229, 5.421112476, 2.560752212, 1.094503732, 0.423289494,
		0.199947799, 0.517006955, 1.209613695, 2.560752212, 4.905225415, 8.501996754, 13.33378511, 18.92154175, 24.29574053, 28.2276233, 29.6748845, 28.2276233, 24.29574053, 18.92154175, 13.33378511, 8.501996754, 4.905225415, 2.560752212, 1.209613695, 0.517006955, 0.199947799,
		0.085460675, 0.220976493, 0.517006955, 1.094503732, 2.096566587, 3.633880364, 5.699058856, 8.08734948, 10.38436229, 12.06490769, 12.68348874, 12.06490769, 10.38436229, 8.08734948, 5.699058856, 3.633880364, 2.096566587, 1.094503732, 0.517006955, 0.220976493, 0.085460675,
		0.033051149, 0.085460675, 0.199947799, 0.423289494, 0.810828308, 1.405370611, 2.204059855, 3.127709815, 4.016058898, 4.665994749, 4.905225415, 4.665994749, 4.016058898, 3.127709815, 2.204059855, 1.405370611, 0.810828308, 0.423289494, 0.199947799, 0.085460675, 0.033051149,
	};


	/**Flag for pinch operation*/
//	private boolean Pinch;

	/** For local differential geometry calculation */
	private LocalDifferentialGeometry ldg;

	/**
	 * The image stores the modification amount of grayscale value in the specified area. Its size
	 * is 60*60.
	 */
	private RealGrayImage nudge;

	/**The new image of first derivative in x direction in the specified area. Its size is 60*60.*/
	private RealGrayImage Ix;
	
	/**The image of first derivative in y direction in the specified area. Its size is 60*60.*/
	private RealGrayImage Iy;

	/** The image storing the unit motion direction in x direction. Its size is 60*60. */
	private RealGrayImage dX;

	/** The image storing the unit motion direction in y direction. Its size is 60*60. */
	private RealGrayImage dY;

	/** Original image */
	private RealColorImage image;

	/**The image stores the grayscale value after modification in
	the specified area..
	Its size is 60*60.*/
	private RealGrayImage want;

	/** A array recording the mouse position in x direction */
	private int[] pointx = new int[5000];
	/** A array recording the mouse position in y direction */
	private int[] pointy = new int[5000];

	//BOOL change;
	/** temp variable for modification amount */
	private double dx;
	/** temp variable for modification amount */
	private double dy;

	/** A interger for mouse motion */
	private int count;

	////////////////////
	/** Constructs a LevelSetNudge object from a RealColorImage object. */
	public LevelSetNudge(RealColorImage im) {
		image = im;
		ldg = new LocalDifferentialGeometry();
		Ix = new RealGrayImage(60, 60);
		Iy = new RealGrayImage(60, 60);
		dX = new RealGrayImage(60, 60);
		dY = new RealGrayImage(60, 60);
		want = new RealGrayImage(60, 60);
		nudge = new RealGrayImage(60, 60);
	}

	/** Reset the count to 0. */
	public void reset() {
		count = 0;
	}

	/**
	 * Applies a nudge, perpendicular-nudge or pinch operation in the specified area of current
	 * image. If it is a general nudge operation, both <code>perpendicular</code> and
	 * <code>pinch</code> are false.
	 * 
	 * <p>
	 * Internal value <code>*image</code> is modified. parameters: x1 - the left bound of the
	 * specified area y1 - the bottom bound of the specified area x2 - the right bound of the
	 * specified area y2 - the top bound of the specified area perpendicular - flag for
	 * perpendicular-nudge operation pinch - flag for pinch operation
	 */
	public void apply(int x1, int y1, int x2, int y2, boolean perpendicular, boolean pinch) {
		count++;
		//		Pinch = pinch;
		if (count < 6 && !pinch) {
			pointx[count] = x1;
			pointy[count] = y1;
		} else if (count >= 6 || pinch) {
			pointx[count] = x1;
			pointy[count] = y1;

			double temp;
			int size = x2 - x1;

			if (!pinch) {
				x1 = pointx[count - 5];
				y1 = pointy[count - 5];
				x2 = x1 + size;
				y2 = y1 + size;
			}

			RealGrayImage gimage;

			for (int i = 0; i < 3; i++) {
				gimage = image.plane(i);

				ldg.calcIx(gimage, Ix, x1, y1, x2, y2);
				ldg.calcIy(gimage, Iy, x1, y1, x2, y2);

				computeNudge(x1, y1, x2, y2, perpendicular, pinch);

				for (int x = x1; x < x2; x++) {
					for (int y = y1; y < y2; y++) {
						if (!pinch)
							temp = gimage.get(x, y)
									+ (strength5[(x - x1) * 21 + (y - y1)] / 255.0 * 0.5)
									* nudge.get(x - x1, y - y1);
						else {
							dx = dX.get(x - x1, y - y1);
							dy = dY.get(x - x1, y - y1);
							temp = gimage.get(x, y) + nudge.get(x - x1, y - y1);
						}
						temp = constrainTop(gimage, x, y, temp);
						if (temp > 255)
							temp = 255.0;
						if (temp < 0)
							temp = 0.0;
						want.set(x - x1, y - y1, (float) temp);
					}
				}

				for (int x = x1; x < x2; x++) {
					for (int y = y1; y < y2; y++) {
						gimage.set(x, y, want.get(x - x1, y - y1));
					}
				}

			}

		}
	}

	/**
	 * Calculates the nudge amount (modification) of grayscale value at each pixel in the specified
	 * area.
	 */
	protected void computeNudge(int x1, int y1, int x2, int y2, boolean perpendicular, boolean pinch) {
		if (pinch) {
			computePinch(x1, y1, x2, y2);
			return;
		}

		double temp = 0;
		double Ixv, Iyv;
		double pointX, pointY;
		double length;

		for (int x = x1; x < x2; x++) {
			for (int y = y1; y < y2; y++) {
				Ixv = Ix.get(x - x1, y - y1);
				Iyv = Iy.get(x - x1, y - y1);

				pointX = (double) (pointx[count] - pointx[count - 5]);
				pointY = (double) (pointy[count] - pointy[count - 5]);

				length = Math.sqrt(pointX * pointX + pointY * pointY);

				pointX = pointX / length;
				pointY = pointY / length;

				if (perpendicular) {
					dx = -pointX;
					dy = pointY;

					if (dx < 0 && dy < 0) {
						pointX = -pointX;
					} else if (dx > 0 && dy < 0) {
						pointY = -pointY;
					} else if (dx < 0 && dy > 0) {
						pointY = -pointY;
					} else if (dx > 0 && dy > 0) {
						pointX = -pointX;
					} else if (dx < 0 && dy == 0) {
						pointY = -pointX;
						pointX = 0;
					} else if (dx > 0 && dy == 0) {
						pointY = -pointX;
						pointX = 0;
					} else if (dx == 0 && dy > 0) {
						pointX = pointY;
						pointY = 0;
					} else if (dx == 0 && dy < 0) {
						pointX = pointY;
						pointY = 0;
					}

					//direction????

				}

				dx = -pointX;
				dy = -pointY;

				temp = -(Ixv * pointX + Iyv * pointY);

				nudge.set(x - x1, y - y1, (float) temp);
			}
		}
	}

	/**
	 * Calculate the modification of grayscale value at each pixel in the specified area caused by
	 * pinch operation.
	 */
	protected void computePinch(int x1, int y1, int x2, int y2) {
		double temp = 0;
		double Ixv, Iyv;
		double pointX, pointY;
		double length;

		double midX = x2 - (x2 - x1) / 2.0;
		double midY = y2 - (y2 - y1) / 2.0;

		for (int x = x1; x < x2; x++) {
			for (int y = y1; y < y2; y++) {
				Ixv = Ix.get(x - x1, y - y1);
				Iyv = Iy.get(x - x1, y - y1);

				pointX = (double) (x - midX);
				pointY = (double) (y - midY);

				length = Math.sqrt(pointX * pointX + pointY * pointY);

				pointX = pointX / length;
				pointY = pointY / length;

				dX.set(x - x1, y - y1, (float) pointX);
				dY.set(x - x1, y - y1, (float) pointY);

				if (x == midX && y == midY)
					temp = 0;
				else
					temp = (Ixv * pointX + Iyv * pointY) / (length + 15) * 10.0;//?????????

				nudge.set(x - x1, y - y1, (float) temp);
			}
		}
	}

	/**
	 * Validates the modification at each pixel in the specified area so that the new pixel value
	 * will not be too small or too big.
	 */
	protected double constrainTop(RealGrayImage img, int x, int y, double temp) {
		float[] n = new float[9];

		//if (temp == img.get(x,y)) return temp;
		//Get the grayscale values of four neighbor pixels (including (x,y))
		//in the motion direction
		if (dx < 0 && dy < 0) {
			n[0] = img.get(x - 1, y - 1);
			n[1] = img.get(x, y - 1);
			n[2] = img.get(x - 1, y);
			n[3] = img.get(x, y);
		} else if (dx > 0 && dy < 0) {
			n[0] = img.get(x, y - 1);
			n[1] = img.get(x + 1, y - 1);
			n[2] = img.get(x + 1, y);
			n[3] = img.get(x, y);
		} else if (dx < 0 && dy > 0) {
			n[0] = img.get(x - 1, y);
			n[1] = img.get(x - 1, y + 1);
			n[2] = img.get(x, y + 1);
			n[3] = img.get(x, y);
		} else if (dx > 0 && dy > 0) {
			n[0] = img.get(x, y + 1);
			n[1] = img.get(x + 1, y + 1);
			n[2] = img.get(x + 1, y);
			n[3] = img.get(x, y);
		} else if (dx < 0 && dy == 0) {
			n[0] = img.get(x - 1, y - 1);
			n[1] = img.get(x - 1, y);
			n[2] = img.get(x - 1, y + 1);
			n[3] = img.get(x, y);
		} else if (dx > 0 && dy == 0) {
			n[0] = img.get(x + 1, y - 1);
			n[1] = img.get(x + 1, y);
			n[2] = img.get(x + 1, y + 1);
			n[3] = img.get(x, y);
		} else if (dx == 0 && dy < 0) {
			n[0] = img.get(x - 1, y - 1);
			n[1] = img.get(x, y - 1);
			n[2] = img.get(x + 1, y - 1);
			n[3] = img.get(x, y);
		} else if (dx == 0 && dy > 0) {
			n[0] = img.get(x - 1, y + 1);
			n[1] = img.get(x, y + 1);
			n[2] = img.get(x + 1, y + 1);
			n[3] = img.get(x, y);
		}

		double max = 0.0;
		double min = 255.0;

		//find the min and max
		for (int a = 0; a < 4; a++) {
			if (n[a] < min)
				min = n[a];
			if (n[a] > max)
				max = n[a];
		}

		if (temp < min)
			temp = min;
		if (temp > max)
			temp = max;

		return temp;
	}
}
