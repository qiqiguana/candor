/*
 * This file was automatically generated by EvoSuite
 */

package com.allenstudio.ir.ui.calendar;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.allenstudio.ir.event.DateChooserListener;
import com.allenstudio.ir.ui.calendar.DateChooser;
import java.awt.Dimension;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.TimeZone;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DateChooserEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DateChooser dateChooser0 = new DateChooser();
      dateChooser0.addDateChooserListener((DateChooserListener) null);
      assertEquals(0, dateChooser0.getDebugGraphicsOptions());
  }

  @Test
  public void test1()  throws Throwable  {
      DateChooser dateChooser0 = new DateChooser();
      DateChooserListener dateChooserListener0 = dateChooser0.getDateChooserListener();
      assertNull(dateChooserListener0);
  }

  @Test
  public void test2()  throws Throwable  {
      DateChooser dateChooser0 = new DateChooser();
      dateChooser0.removeDateChooserListener();
      assertEquals(2, dateChooser0.getComponentCount());
  }

  @Test
  public void test3()  throws Throwable  {
      DateChooser dateChooser0 = new DateChooser();
      dateChooser0.monthChanged();
      assertEquals(false, dateChooser0.isMinimumSizeSet());
  }

  @Test
  public void test4()  throws Throwable  {
      DateChooser dateChooser0 = new DateChooser();
      assertNotNull(dateChooser0);
      
      Dimension dimension0 = dateChooser0.getSize();
      SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat();
      TimeZone timeZone0 = simpleDateFormat0.getTimeZone();
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(timeZone0);
      dateChooser0.fireDateChanged((Object) dimension0, (Calendar) gregorianCalendar0, (Calendar) gregorianCalendar0);
      assertEquals(1372790450975L, gregorianCalendar0.getTimeInMillis());
      assertEquals("java.util.GregorianCalendar[time=1372790450975,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Belfast\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/Belfast,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=40,SECOND=50,MILLISECOND=975,ZONE_OFFSET=0,DST_OFFSET=3600000]", gregorianCalendar0.toString());
  }
}
