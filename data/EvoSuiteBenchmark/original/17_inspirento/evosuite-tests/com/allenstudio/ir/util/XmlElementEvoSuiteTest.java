/*
 * This file was automatically generated by EvoSuite
 */

package com.allenstudio.ir.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.allenstudio.ir.util.XmlElement;
import java.util.Enumeration;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class XmlElementEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      // Undeclared exception!
      try {
        xmlElement0.removeElement(107);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * Array index out of range: 107
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      xmlElement0.getAttribute("%Qd|D/k", "%Qd|D/k");
      XmlElement.printNode(xmlElement0, (String) null);
      assertEquals(0, xmlElement0.countObservers());
  }

  @Test
  public void test2()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("tXsWjfcpuj&K", "tXsWjfcpuj&K");
      assertNotNull(xmlElement0);
      
      xmlElement0.append(xmlElement0);
      assertEquals(1, xmlElement0.count());
  }

  @Test
  public void test3()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      assertNotNull(xmlElement0);
      
      xmlElement0.addSubElement("8+OBSPxq.z@B*", (String) null);
      xmlElement0.addSubElement("8+OBSPxq.z@B*");
      assertEquals(2, xmlElement0.count());
  }

  @Test
  public void test4()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      assertNotNull(xmlElement0);
      
      XmlElement xmlElement1 = xmlElement0.addSubElement(xmlElement0);
      assertEquals(1, xmlElement0.count());
      
      xmlElement0.removeElement(xmlElement1);
      assertEquals(0, xmlElement1.count());
  }

  @Test
  public void test5()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("tXsWjfcpuj&K", "tXsWjfcpuj&K");
      // Undeclared exception!
      try {
        xmlElement0.getElement(12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * Array index out of range: 12
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      int int0 = xmlElement0.count();
      assertEquals(0, int0);
  }

  @Test
  public void test7()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      XmlElement xmlElement1 = xmlElement0.getParent();
      assertNull(xmlElement1);
  }

  @Test
  public void test8()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      // Undeclared exception!
      try {
        xmlElement0.insertElement(xmlElement0, 49115844);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 49115844 > 0
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      Enumeration<Object> enumeration0 = xmlElement0.getAttributeNames();
      assertEquals(false, enumeration0.hasMoreElements());
  }

  @Test
  public void test10()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      xmlElement0.setName((String) null);
      assertEquals(0, xmlElement0.countObservers());
  }

  @Test
  public void test11()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      xmlElement0.notifyObservers();
      assertEquals(false, xmlElement0.hasChanged());
  }

  @Test
  public void test12()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      assertNotNull(xmlElement0);
      
      XmlElement xmlElement1 = new XmlElement((String) null, xmlElement0.attributes);
      assertTrue(xmlElement0.equals(xmlElement1));
  }

  @Test
  public void test13()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      xmlElement0.removeAllElements();
      assertEquals(0, xmlElement0.countObservers());
  }

  @Test
  public void test14()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      Object object0 = xmlElement0.addAttribute((String) null, (String) null);
      assertNull(object0);
  }

  @Test
  public void test15()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      Object object0 = xmlElement0.addAttribute((String) null, "nHC:u%");
      assertNull(object0);
  }

  @Test
  public void test16()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      assertNotNull(xmlElement0);
      
      String string0 = xmlElement0.getAttribute("", "");
      assertNotNull(string0);
      
      String string1 = xmlElement0.getAttribute("", "");
      assertSame(string1, string0);
  }

  @Test
  public void test17()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      assertNotNull(xmlElement0);
      
      XmlElement xmlElement1 = xmlElement0.getElement("Iv?u}c 1BnYYaYBYd");
      xmlElement0.addElement(xmlElement0);
      xmlElement0.removeElement(xmlElement1);
      assertEquals(1, xmlElement0.count());
  }

  @Test
  public void test18()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      assertNotNull(xmlElement0);
      
      xmlElement0.addElement(xmlElement0);
      assertEquals(1, xmlElement0.count());
      
      // Undeclared exception!
      try {
        xmlElement0.insertElement(xmlElement0, 49115844);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 49115844 > 0
         */
      }
  }

  @Test
  public void test19()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      XmlElement xmlElement1 = xmlElement0.getElement(".&Gm\"~W<C");
      assertNull(xmlElement1);
  }

  @Test
  public void test20()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      assertNotNull(xmlElement0);
      
      XmlElement xmlElement1 = xmlElement0.addSubElement("#4I", "#4I");
      XmlElement xmlElement2 = xmlElement1.parent;
      xmlElement2.getElement("#4I");
      assertEquals(1, xmlElement0.count());
      assertEquals("#4I", xmlElement1.getData());
  }

  @Test
  public void test21()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      assertNotNull(xmlElement0);
      
      xmlElement0.addSubElement("8+OBSPxq.z@B*");
      XmlElement.printNode(xmlElement0, "8+OBSPxq.z@B*");
      assertEquals(1, xmlElement0.count());
  }

  @Test
  public void test22()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      assertNotNull(xmlElement0);
      
      xmlElement0.addSubElement("8+OBSPxq.z@B*", "8+OBSPxq.z@B*");
      XmlElement.printNode(xmlElement0, "8+OBSPxq.z@B*");
      assertEquals(1, xmlElement0.count());
  }

  @Test
  public void test23()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      assertNotNull(xmlElement0);
      
      XmlElement xmlElement1 = (XmlElement)xmlElement0.clone();
      assertNotNull(xmlElement1);
      
      boolean boolean0 = xmlElement0.equals((Object) xmlElement1);
      assertEquals(true, boolean0);
      assertNotSame(xmlElement1, xmlElement0);
  }

  @Test
  public void test24()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      assertNotNull(xmlElement0);
      
      XmlElement xmlElement1 = xmlElement0.addSubElement(" v  ", " v  ");
      boolean boolean0 = xmlElement0.equals((Object) xmlElement1);
      assertEquals(1, xmlElement0.count());
      assertEquals(false, boolean0);
  }

  @Test
  public void test25()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      assertNotNull(xmlElement0);
      
      boolean boolean0 = xmlElement0.equals((Object) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test26()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("tXsWjfcpuj&K", "tXsWjfcpuj&K");
      assertNotNull(xmlElement0);
      
      boolean boolean0 = xmlElement0.equals((Object) "{}");
      assertEquals(false, boolean0);
  }

  @Test
  public void test27()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      assertNotNull(xmlElement0);
      
      XmlElement xmlElement1 = (XmlElement)xmlElement0.clone();
      xmlElement0.addSubElement("");
      boolean boolean0 = xmlElement0.equals((Object) xmlElement1);
      assertEquals(1, xmlElement0.count());
      assertEquals(false, boolean0);
  }

  @Test
  public void test28()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      assertNotNull(xmlElement0);
      
      int int0 = xmlElement0.hashCode();
      assertEquals(80, int0);
  }

  @Test
  public void test29()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      assertNotNull(xmlElement0);
      
      XmlElement xmlElement1 = xmlElement0.addSubElement(" v  ", " v  ");
      assertEquals(1, xmlElement0.count());
      
      int int0 = xmlElement1.hashCode();
      assertEquals(49115844, int0);
  }
}
