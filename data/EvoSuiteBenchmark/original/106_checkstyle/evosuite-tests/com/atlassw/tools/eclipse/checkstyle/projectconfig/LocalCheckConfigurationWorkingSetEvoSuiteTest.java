/*
 * This file was automatically generated by EvoSuite
 */

package com.atlassw.tools.eclipse.checkstyle.projectconfig;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.atlassw.tools.eclipse.checkstyle.config.CheckConfigurationWorkingCopy;
import com.atlassw.tools.eclipse.checkstyle.config.ICheckConfiguration;
import com.atlassw.tools.eclipse.checkstyle.config.ICheckConfigurationWorkingSet;
import com.atlassw.tools.eclipse.checkstyle.config.configtypes.BuiltInConfigurationType;
import com.atlassw.tools.eclipse.checkstyle.config.configtypes.IConfigurationType;
import com.atlassw.tools.eclipse.checkstyle.config.configtypes.RemoteConfigurationType;
import com.atlassw.tools.eclipse.checkstyle.projectconfig.IProjectConfiguration;
import com.atlassw.tools.eclipse.checkstyle.projectconfig.LocalCheckConfigurationWorkingSet;
import com.atlassw.tools.eclipse.checkstyle.util.CheckstylePluginException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class LocalCheckConfigurationWorkingSetEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ArrayList<ICheckConfiguration> arrayList0 = new ArrayList<ICheckConfiguration>();
      LocalCheckConfigurationWorkingSet localCheckConfigurationWorkingSet0 = new LocalCheckConfigurationWorkingSet((IProjectConfiguration) null, (List) arrayList0);
      assertNotNull(localCheckConfigurationWorkingSet0);
      
      RemoteConfigurationType remoteConfigurationType0 = new RemoteConfigurationType();
      CheckConfigurationWorkingCopy checkConfigurationWorkingCopy0 = localCheckConfigurationWorkingSet0.newWorkingCopy((IConfigurationType) remoteConfigurationType0);
      CheckConfigurationWorkingCopy checkConfigurationWorkingCopy1 = localCheckConfigurationWorkingSet0.newWorkingCopy((ICheckConfiguration) checkConfigurationWorkingCopy0);
      assertEquals(false, checkConfigurationWorkingCopy1.isGlobal());
  }

  @Test
  public void test1()  throws Throwable  {
      ArrayList<ICheckConfiguration> arrayList0 = new ArrayList<ICheckConfiguration>();
      LocalCheckConfigurationWorkingSet localCheckConfigurationWorkingSet0 = new LocalCheckConfigurationWorkingSet((IProjectConfiguration) null, (List) arrayList0);
      // Undeclared exception!
      try {
        localCheckConfigurationWorkingSet0.getProject();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      LinkedList<CheckConfigurationWorkingCopy> linkedList0 = new LinkedList<CheckConfigurationWorkingCopy>();
      LocalCheckConfigurationWorkingSet localCheckConfigurationWorkingSet0 = new LocalCheckConfigurationWorkingSet((IProjectConfiguration) null, (List) linkedList0);
      assertNotNull(localCheckConfigurationWorkingSet0);
      
      BuiltInConfigurationType builtInConfigurationType0 = new BuiltInConfigurationType();
      CheckConfigurationWorkingCopy checkConfigurationWorkingCopy0 = localCheckConfigurationWorkingSet0.newWorkingCopy((IConfigurationType) builtInConfigurationType0);
      localCheckConfigurationWorkingSet0.addCheckConfiguration(checkConfigurationWorkingCopy0);
      assertEquals(false, checkConfigurationWorkingCopy0.isGlobal());
      
      boolean boolean0 = localCheckConfigurationWorkingSet0.isDirty();
      assertEquals(false, localCheckConfigurationWorkingSet0.isDirty());
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      ArrayList<ICheckConfiguration> arrayList0 = new ArrayList<ICheckConfiguration>();
      LocalCheckConfigurationWorkingSet localCheckConfigurationWorkingSet0 = new LocalCheckConfigurationWorkingSet((IProjectConfiguration) null, (List) arrayList0);
      localCheckConfigurationWorkingSet0.store();
      assertEquals(false, localCheckConfigurationWorkingSet0.isDirty());
  }

  @Test
  public void test4()  throws Throwable  {
      LinkedList<CheckConfigurationWorkingCopy> linkedList0 = new LinkedList<CheckConfigurationWorkingCopy>();
      LocalCheckConfigurationWorkingSet localCheckConfigurationWorkingSet0 = new LocalCheckConfigurationWorkingSet((IProjectConfiguration) null, (List) linkedList0);
      assertNotNull(localCheckConfigurationWorkingSet0);
      
      BuiltInConfigurationType builtInConfigurationType0 = new BuiltInConfigurationType();
      CheckConfigurationWorkingCopy checkConfigurationWorkingCopy0 = localCheckConfigurationWorkingSet0.newWorkingCopy((IConfigurationType) builtInConfigurationType0);
      linkedList0.add(checkConfigurationWorkingCopy0);
      LocalCheckConfigurationWorkingSet localCheckConfigurationWorkingSet1 = new LocalCheckConfigurationWorkingSet((IProjectConfiguration) null, (List) linkedList0);
      checkConfigurationWorkingCopy0.setName(": sLartinu...");
      assertEquals(true, checkConfigurationWorkingCopy0.isDirty());
      
      boolean boolean0 = localCheckConfigurationWorkingSet1.isNameCollision(checkConfigurationWorkingCopy0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      LinkedList<CheckConfigurationWorkingCopy> linkedList0 = new LinkedList<CheckConfigurationWorkingCopy>();
      LocalCheckConfigurationWorkingSet localCheckConfigurationWorkingSet0 = new LocalCheckConfigurationWorkingSet((IProjectConfiguration) null, (List) linkedList0);
      assertNotNull(localCheckConfigurationWorkingSet0);
      
      boolean boolean0 = localCheckConfigurationWorkingSet0.isDirty();
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      LinkedList<CheckConfigurationWorkingCopy> linkedList0 = new LinkedList<CheckConfigurationWorkingCopy>();
      LocalCheckConfigurationWorkingSet localCheckConfigurationWorkingSet0 = new LocalCheckConfigurationWorkingSet((IProjectConfiguration) null, (List) linkedList0);
      assertNotNull(localCheckConfigurationWorkingSet0);
      
      BuiltInConfigurationType builtInConfigurationType0 = new BuiltInConfigurationType();
      CheckConfigurationWorkingCopy checkConfigurationWorkingCopy0 = localCheckConfigurationWorkingSet0.newWorkingCopy((IConfigurationType) builtInConfigurationType0);
      localCheckConfigurationWorkingSet0.addCheckConfiguration(checkConfigurationWorkingCopy0);
      checkConfigurationWorkingCopy0.setName(": sLartinu...");
      assertEquals(true, checkConfigurationWorkingCopy0.isDirty());
      
      boolean boolean0 = localCheckConfigurationWorkingSet0.isDirty();
      assertEquals(true, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      LinkedList<CheckConfigurationWorkingCopy> linkedList0 = new LinkedList<CheckConfigurationWorkingCopy>();
      LocalCheckConfigurationWorkingSet localCheckConfigurationWorkingSet0 = new LocalCheckConfigurationWorkingSet((IProjectConfiguration) null, (List) linkedList0);
      assertNotNull(localCheckConfigurationWorkingSet0);
      
      BuiltInConfigurationType builtInConfigurationType0 = new BuiltInConfigurationType();
      CheckConfigurationWorkingCopy checkConfigurationWorkingCopy0 = localCheckConfigurationWorkingSet0.newWorkingCopy((IConfigurationType) builtInConfigurationType0);
      localCheckConfigurationWorkingSet0.addCheckConfiguration(checkConfigurationWorkingCopy0);
      checkConfigurationWorkingCopy0.setName(": sLartinu...");
      RemoteConfigurationType remoteConfigurationType0 = new RemoteConfigurationType();
      CheckConfigurationWorkingCopy checkConfigurationWorkingCopy1 = new CheckConfigurationWorkingCopy((IConfigurationType) remoteConfigurationType0, (ICheckConfigurationWorkingSet) localCheckConfigurationWorkingSet0, false);
      boolean boolean0 = localCheckConfigurationWorkingSet0.isNameCollision(checkConfigurationWorkingCopy1);
      assertEquals(true, localCheckConfigurationWorkingSet0.isDirty());
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      LinkedList<CheckConfigurationWorkingCopy> linkedList0 = new LinkedList<CheckConfigurationWorkingCopy>();
      LocalCheckConfigurationWorkingSet localCheckConfigurationWorkingSet0 = new LocalCheckConfigurationWorkingSet((IProjectConfiguration) null, (List) linkedList0);
      BuiltInConfigurationType builtInConfigurationType0 = new BuiltInConfigurationType();
      CheckConfigurationWorkingCopy checkConfigurationWorkingCopy0 = new CheckConfigurationWorkingCopy((IConfigurationType) builtInConfigurationType0, (ICheckConfigurationWorkingSet) localCheckConfigurationWorkingSet0, true);
      localCheckConfigurationWorkingSet0.addCheckConfiguration(checkConfigurationWorkingCopy0);
      Collection<Object> collection0 = localCheckConfigurationWorkingSet0.getAffectedProjects();
      assertEquals(true, collection0.isEmpty());
  }
}
