/*
 * This file was automatically generated by EvoSuite
 */

package com.atlassw.tools.eclipse.checkstyle.projectconfig.filters;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.atlassw.tools.eclipse.checkstyle.projectconfig.filters.AbstractFilter;
import com.atlassw.tools.eclipse.checkstyle.projectconfig.filters.FileTypesFilter;
import com.atlassw.tools.eclipse.checkstyle.projectconfig.filters.FilesInSyncFilter;
import com.atlassw.tools.eclipse.checkstyle.projectconfig.filters.FilesInSyncFilter2;
import com.atlassw.tools.eclipse.checkstyle.projectconfig.filters.NonSrcDirsFilter;
import com.atlassw.tools.eclipse.checkstyle.projectconfig.filters.PackageFilter;
import com.atlassw.tools.eclipse.checkstyle.projectconfig.filters.WriteProtectedFilter;
import java.util.List;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class AbstractFilterEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      FilesInSyncFilter2 filesInSyncFilter2_0 = new FilesInSyncFilter2();
      String string0 = filesInSyncFilter2_0.getName();
      assertNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      FilesInSyncFilter filesInSyncFilter0 = new FilesInSyncFilter();
      Class<Object> class0 = filesInSyncFilter0.getEditorClass();
      WriteProtectedFilter writeProtectedFilter0 = new WriteProtectedFilter();
      writeProtectedFilter0.initialize((String) null, "pG$Cy7a", (String) null, (Class) class0, true);
      assertEquals(true, writeProtectedFilter0.isReadonly());
  }

  @Test
  public void test2()  throws Throwable  {
      FilesInSyncFilter2 filesInSyncFilter2_0 = new FilesInSyncFilter2();
      filesInSyncFilter2_0.setFilterData((List) null);
      assertEquals(false, filesInSyncFilter2_0.isReadonly());
  }

  @Test
  public void test3()  throws Throwable  {
      NonSrcDirsFilter nonSrcDirsFilter0 = new NonSrcDirsFilter();
      NonSrcDirsFilter nonSrcDirsFilter1 = (NonSrcDirsFilter)nonSrcDirsFilter0.clone();
      assertNull(nonSrcDirsFilter1.getPresentableFilterData());
  }

  @Test
  public void test4()  throws Throwable  {
      PackageFilter packageFilter0 = new PackageFilter();
      String string0 = packageFilter0.getDescription();
      assertNull(string0);
  }

  @Test
  public void test5()  throws Throwable  {
      PackageFilter packageFilter0 = new PackageFilter();
      String string0 = packageFilter0.toString();
      assertNotNull(string0);
  }

  @Test
  public void test6()  throws Throwable  {
      NonSrcDirsFilter nonSrcDirsFilter0 = new NonSrcDirsFilter();
      boolean boolean0 = nonSrcDirsFilter0.isEnabled();
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      NonSrcDirsFilter nonSrcDirsFilter0 = new NonSrcDirsFilter();
      String string0 = nonSrcDirsFilter0.getPresentableFilterData();
      assertNull(string0);
  }

  @Test
  public void test8()  throws Throwable  {
      FilesInSyncFilter2 filesInSyncFilter2_0 = new FilesInSyncFilter2();
      List<Object> list0 = filesInSyncFilter2_0.getFilterData();
      assertNull(list0);
  }

  @Test
  public void test9()  throws Throwable  {
      FileTypesFilter fileTypesFilter0 = new FileTypesFilter();
      String string0 = fileTypesFilter0.getInternalName();
      assertNull(string0);
  }

  @Test
  public void test10()  throws Throwable  {
      PackageFilter packageFilter0 = new PackageFilter();
      packageFilter0.setEnabled(false);
      assertEquals(false, packageFilter0.isEnabled());
  }

  @Test
  public void test11()  throws Throwable  {
      NonSrcDirsFilter nonSrcDirsFilter0 = new NonSrcDirsFilter();
      boolean boolean0 = nonSrcDirsFilter0.isReadonly();
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      NonSrcDirsFilter nonSrcDirsFilter0 = new NonSrcDirsFilter();
      boolean boolean0 = nonSrcDirsFilter0.isEditable();
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      FilesInSyncFilter2 filesInSyncFilter2_0 = new FilesInSyncFilter2();
      Class<?> class0 = AbstractFilter.class;
      filesInSyncFilter2_0.initialize("", "", "", (Class) class0, true);
      boolean boolean0 = filesInSyncFilter2_0.isEditable();
      assertEquals(true, filesInSyncFilter2_0.isEditable());
      assertEquals(true, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      FilesInSyncFilter filesInSyncFilter0 = new FilesInSyncFilter();
      boolean boolean0 = filesInSyncFilter0.equals((Object) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      FilesInSyncFilter2 filesInSyncFilter2_0 = new FilesInSyncFilter2();
      WriteProtectedFilter writeProtectedFilter0 = new WriteProtectedFilter();
      boolean boolean0 = filesInSyncFilter2_0.equals((Object) writeProtectedFilter0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      WriteProtectedFilter writeProtectedFilter0 = new WriteProtectedFilter();
      boolean boolean0 = writeProtectedFilter0.equals((Object) "com.atlassw.tools.eclipse.checkstyle.projectconfig.filters.PackageFilter@7b2fc059[\n  mData=[]\n  mFilterName=<null>\n  mInternalName=<null>\n  mFilterDescription=<null>\n  mFilterEditor=<null>\n  mSelected=false\n  mReadonly=false\n]");
      assertEquals(false, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      FilesInSyncFilter2 filesInSyncFilter2_0 = new FilesInSyncFilter2();
      Class<?> class0 = AbstractFilter.class;
      filesInSyncFilter2_0.initialize("", "", "", (Class) class0, true);
      WriteProtectedFilter writeProtectedFilter0 = new WriteProtectedFilter();
      boolean boolean0 = filesInSyncFilter2_0.equals((Object) writeProtectedFilter0);
      assertEquals(true, filesInSyncFilter2_0.isReadonly());
      assertEquals(false, boolean0);
  }
}
