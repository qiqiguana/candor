/*
 * This file was automatically generated by EvoSuite
 */

package com.atlassw.tools.eclipse.checkstyle.quickfixes;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.atlassw.tools.eclipse.checkstyle.quickfixes.coding.EmptyStatementQuickfix;
import com.atlassw.tools.eclipse.checkstyle.quickfixes.coding.StringLiteralEqualityQuickfix;
import com.atlassw.tools.eclipse.checkstyle.quickfixes.misc.ArrayTypeStyleQuickfix;
import com.atlassw.tools.eclipse.checkstyle.quickfixes.misc.UncommentedMainQuickfix;
import com.atlassw.tools.eclipse.checkstyle.quickfixes.modifier.RedundantModifierQuickfix;
import java.util.Map;
import org.eclipse.core.resources.IMarker;
import org.eclipse.jdt.core.dom.AST;
import org.eclipse.jdt.core.dom.ASTNode;
import org.eclipse.jdt.core.dom.CompilationUnit;
import org.eclipse.jdt.core.dom.ForStatement;
import org.eclipse.jdt.internal.core.JavaModelManager;
import org.eclipse.jface.text.IRegion;
import org.eclipse.jface.text.Region;
import org.eclipse.text.edits.InsertEdit;
import org.eclipse.text.edits.MultiTextEdit;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class AbstractASTResolutionEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      EmptyStatementQuickfix emptyStatementQuickfix0 = new EmptyStatementQuickfix();
      boolean boolean0 = emptyStatementQuickfix0.canFix((IMarker) null);
      assertEquals(true, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      StringLiteralEqualityQuickfix stringLiteralEqualityQuickfix0 = new StringLiteralEqualityQuickfix();
      stringLiteralEqualityQuickfix0.setAutoCommitChanges(true);
      assertEquals("Modify the String comparison to use equals()", stringLiteralEqualityQuickfix0.getDescription());
  }

  @Test
  public void test2()  throws Throwable  {
      StringLiteralEqualityQuickfix stringLiteralEqualityQuickfix0 = new StringLiteralEqualityQuickfix();
      char[] charArray0 = new char[1];
      CompilationUnit compilationUnit0 = AST.parseCompilationUnit(charArray0);
      boolean boolean0 = stringLiteralEqualityQuickfix0.containsPosition((ASTNode) compilationUnit0, (-1455));
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      ArrayTypeStyleQuickfix arrayTypeStyleQuickfix0 = new ArrayTypeStyleQuickfix();
      JavaModelManager javaModelManager0 = JavaModelManager.getJavaModelManager();
      AST aST0 = new AST((Map) javaModelManager0.previousSessionVariables);
      ForStatement forStatement0 = aST0.newForStatement();
      boolean boolean0 = arrayTypeStyleQuickfix0.containsPosition((ASTNode) forStatement0, 468);
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      RedundantModifierQuickfix redundantModifierQuickfix0 = new RedundantModifierQuickfix();
      InsertEdit insertEdit0 = new InsertEdit(468, "strike");
      Region region0 = (Region)insertEdit0.getRegion();
      boolean boolean0 = redundantModifierQuickfix0.containsPosition((IRegion) region0, (-1930));
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      MultiTextEdit multiTextEdit0 = new MultiTextEdit();
      Region region0 = (Region)multiTextEdit0.getRegion();
      RedundantModifierQuickfix redundantModifierQuickfix0 = new RedundantModifierQuickfix();
      boolean boolean0 = redundantModifierQuickfix0.containsPosition((IRegion) region0, 0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      MultiTextEdit multiTextEdit0 = new MultiTextEdit();
      Region region0 = (Region)multiTextEdit0.getRegion();
      UncommentedMainQuickfix uncommentedMainQuickfix0 = new UncommentedMainQuickfix();
      boolean boolean0 = uncommentedMainQuickfix0.containsPosition((IRegion) region0, 1609);
      assertEquals(false, boolean0);
  }
}
