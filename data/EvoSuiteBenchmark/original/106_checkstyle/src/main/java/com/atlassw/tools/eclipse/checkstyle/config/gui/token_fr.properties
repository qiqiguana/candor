EOF = Fin de fichier
MODIFIERS = Liste des modificateurs
OBJBLOCK = Bloc objet
SLIST = Liste d'instruction
CTOR_DEF = Déclaration de constructeur
METHOD_DEF = Déclaration de méthode
VARIABLE_DEF = Déclaration de variable
INSTANCE_INIT = Initialisateur d'instance
STATIC_INIT = Initialisateur statique
TYPE = Un type
CLASS_DEF = Déclaration de classe
INTERFACE_DEF = Déclaration d'interface
PACKAGE_DEF = Déclaration de package
ARRAY_DECLARATOR = Déclaration de tableau
EXTENDS_CLAUSE = Clause "extends"
IMPLEMENTS_CLAUSE = Clause "implements"
PARAMETERS = Liste de paramètres
PARAMETER_DEF = Déclaration de paramètres
LABELED_STAT = Instruction labélisée
TYPECAST = Transtypage (cast)
INDEX_OP = Opérateur d'index de tableau
POST_INC = "++" - Post-opérateur incrémental
POST_DEC = "--" - Post-opérateur décrémental
METHOD_CALL = Appel de méthode
EXPR = Expression
ARRAY_INIT = Initialisation de tableau
IMPORT = Déclaration d'imports
UNARY_MINUS = "-" - Opérateur moins
UNARY_PLUS = "+" - Opérateur plus
CASE_GROUP = Groupe de clauses "case"
ELIST = Liste d'expression
FOR_INIT = Initialisateur de boucle "for"
FOR_CONDITION = Condition de boucle "for"
FOR_ITERATOR = Itérateur de boucle "for"
EMPTY_STAT = Instruction vide
FINAL = Mot clé "final"
ABSTRACT = Mot clé "abstract"
STRICTFP = Mot clé "strictfp"
SUPER_CTOR_CALL = Appel au super-constructeur
CTOR_CALL = Appel au constructeur
SEMI = Point-virgule
RBRACK = "]" - Le crochet droit
LITERAL_VOID = Mot clé "void"
LITERAL_BOOLEAN = Mot clé "boolean"
LITERAL_BYTE = Mot clé "byte"
LITERAL_CHAR = Mot clé "char"
LITERAL_SHORT = Mot clé "short"
LITERAL_INT = Mot clé "int"
LITERAL_FLOAT = Mot clé "float"
LITERAL_LONG = Mot clé "long"
LITERAL_DOUBLE = Mot clé "double"
IDENT = Un identificateur
DOT = "." - Opérateur point
STAR = "*" - Opérateur de multiplication
LITERAL_PRIVATE = Mot clé "private"
LITERAL_PUBLIC = Mot clé "public"
LITERAL_PROTECTED = Mot clé "protected"
LITERAL_STATIC = Mot clé "static"
LITERAL_TRANSIENT = Mot clé "transient"
LITERAL_NATIVE = Mot clé "native"
LITERAL_SYNCHRONIZED = Mot clé "synchronized"
LITERAL_VOLATILE = Mot clé "volatile"
LITERAL_CLASS = Mot clé "class"
LITERAL_INTERFACE = Mot clé "interface"
LCURLY = "{" - Accolade gauche
RCURLY = "}" - Accolade droite
COMMA = "," - Opérateur virgule
LPAREN = "(" - Parenthése gauche
RPAREN = ")" - Parenthèse droite
LITERAL_THIS = Mot clé "this"
LITERAL_SUPER = Mot clé "super"
ASSIGN = "=" - Opérateur d'affectation
LITERAL_THROWS = Mot clé "throws"
COLON = ":" - Opérateur double-point
LITERAL_IF = Mot clé "if"
LITERAL_FOR = Mot clé "for"
LITERAL_WHILE = Mot clé "while"
LITERAL_DO = Mot clé "do"
DO_WHILE = Mot clé "while" dans une boucle "do-while"
LITERAL_BREAK = Mot clé "break"
LITERAL_CONTINUE = Mot clé "continue"
LITERAL_RETURN = Mot clé "return"
LITERAL_SWITCH = Mot clé "switch"
LITERAL_THROW = Mot clé "throw"
LITERAL_ELSE = Mot clé "else"
LITERAL_CASE = Mot clé "case"
LITERAL_DEFAULT = Mot clé "default"
LITERAL_TRY = Mot clé "try"
LITERAL_CATCH = Mot clé "catch"
LITERAL_FINALLY = Mot clé "finally"
PLUS_ASSIGN = "+=" - Opérateur d'affection-addition
MINUS_ASSIGN = "-=" - Opérateur d'affection-soustraction
STAR_ASSIGN = "*=" - Opérateur d'affection-multiplication
DIV_ASSIGN = "/=" - Opérateur d'affection-division
MOD_ASSIGN = "%=" - Opérateur d'affection-modulo
SR_ASSIGN = ">>=" - Opérateur d'affection-décalage à droite signé
BSR_ASSIGN = ">>>=" - Opérateur d'affection-décalage à droite non-signé
SL_ASSIGN = "<<=" - Opérateur d'affection-décalage à gauche signé
BAND_ASSIGN = "&=" - Opérateur d'affection-binaire ET
BXOR_ASSIGN = "^=" - Opérateur d'affection-binaire OU EXCLUSIF
BOR_ASSIGN = "|=" - Opérateur d'affection-binaire OU
QUESTION = "?" - Opérateur conditionnel
LOR = "||" - Opérateur logique OU
LAND = "&&" - Opérateur logique ET
BOR = "|" - Opérateur binaire OU
BXOR = "^" - Opérateur binaire OU EXCLUSIF
BAND = "&" - Opérateur binaire ET
NOT_EQUAL = "!=" - Opérateur différent
EQUAL = "==" - Opérateur égal
LT = "<" - Opérateur inférieur
GT = ">" - Opérateur supérieur
LE = "<=" - Opérateur inférieur ou égal
GE = ">=" - Opérateur supérieur ou égal
LITERAL_INSTANCEOF = Opérateur "instanceof"
SL = "<<" - Opérateur de décalage à gauche
SR = ">>" - Opérateur de décalage à droite
BSR = ">>>" - Opérateur de décalage à droite non-signé
PLUS = "+" - Opérateur  d'addition
MINUS = "-" - Opérateur de soustraction
DIV = "/" - Opérateur de division
MOD = "%" - Opérateur modulo
INC = "++" - Pré-opérateur incrémental
DEC = "--" - Pré-opérateur décrémental
BNOT = "~" - Opérateur binaire de complément
LNOT = "!" - Opérateur logique de complément
LITERAL_TRUE = Mot clé "true"
LITERAL_FALSE = Mot clé "false"
LITERAL_NULL = Mot clé "null"
LITERAL_NEW = Mot clé "new"
NUM_INT = Littéral Integer
CHAR_LITERAL = Littéral Character
STRING_LITERAL = Littéral String
NUM_FLOAT = Littéral Float
NUM_LONG = Littéral Long
NUM_DOUBLE = Littéral Double
LITERAL_ASSERT = Mot clé "assert"
STATIC_IMPORT = Déclaration d'import statique
ENUM_DEF = Déclaration d'énumération
ENUM = Mot clé "enum"
ENUM_CONSTANT_DEF = Déclaration d'énumération
FOR_EACH_CLAUSE = Clause "For-each"
ANNOTATION_DEF = Déclaration d'annotations
ANNOTATION_FIELD_DEF = Déclaration de champ d'annotation
ANNOTATIONS = Liste d'annotation
ANNOTATION = Une annotation
ANNOTATION_MEMBER_VALUE_PAIR = Paire membre-valeur d'annotation
ANNOTATION_ARRAY_INIT = Initialisation de membre tableau d'annotation
TYPE_PARAMETERS = Liste de paramètre type
TYPE_PARAMETER = Un paramètre type
TYPE_ARGUMENTS = Liste d'arguments type
TYPE_ARGUMENT = Un argument type
WILDCARD_TYPE = Type qui référence tous les autres types
TYPE_UPPER_BOUNDS = Argument de type valeur maximale
TYPE_LOWER_BOUNDS = Argument de type valeur minimale
AT = "@" - Symbole arobase
ELLIPSIS = "..." - Trois petits points
TYPE_EXTENSION_AND = "&" - Symbole AND (contrainte pour les génériques)
GENERIC_START = "<" - Début des arguments pour un générique
GENERIC_END = ">" - Fin des arguments pour un générique








































