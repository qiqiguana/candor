/*
 * This file was automatically generated by EvoSuite
 */

package oasis.names.tc.ciq.xsdschema.xal._2;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.List;
import java.util.Map;
import javax.xml.namespace.QName;
import oasis.names.tc.ciq.xsdschema.xal._2.AddressLine;
import oasis.names.tc.ciq.xsdschema.xal._2.DependentLocalityType;
import oasis.names.tc.ciq.xsdschema.xal._2.LargeMailUserType;
import oasis.names.tc.ciq.xsdschema.xal._2.PostBox;
import oasis.names.tc.ciq.xsdschema.xal._2.PostOffice;
import oasis.names.tc.ciq.xsdschema.xal._2.PostalCode;
import oasis.names.tc.ciq.xsdschema.xal._2.PostalRouteType;
import oasis.names.tc.ciq.xsdschema.xal._2.Premise;
import oasis.names.tc.ciq.xsdschema.xal._2.Thoroughfare;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DependentLocalityTypeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DependentLocalityType.DependentLocalityName dependentLocalityType_DependentLocalityName0 = new DependentLocalityType.DependentLocalityName();
      String string0 = dependentLocalityType_DependentLocalityName0.getContent();
      assertNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      DependentLocalityType.DependentLocalityName dependentLocalityType_DependentLocalityName0 = new DependentLocalityType.DependentLocalityName();
      dependentLocalityType_DependentLocalityName0.setContent((String) null);
      assertNull(dependentLocalityType_DependentLocalityName0.getContent());
  }

  @Test
  public void test2()  throws Throwable  {
      DependentLocalityType.DependentLocalityName dependentLocalityType_DependentLocalityName0 = new DependentLocalityType.DependentLocalityName();
      dependentLocalityType_DependentLocalityName0.setCode((String) null);
      assertNull(dependentLocalityType_DependentLocalityName0.getType());
  }

  @Test
  public void test3()  throws Throwable  {
      DependentLocalityType.DependentLocalityName dependentLocalityType_DependentLocalityName0 = new DependentLocalityType.DependentLocalityName();
      String string0 = dependentLocalityType_DependentLocalityName0.getType();
      assertNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      DependentLocalityType.DependentLocalityName dependentLocalityType_DependentLocalityName0 = new DependentLocalityType.DependentLocalityName();
      Map<QName, String> map0 = dependentLocalityType_DependentLocalityName0.getOtherAttributes();
      assertEquals(true, map0.isEmpty());
  }

  @Test
  public void test5()  throws Throwable  {
      DependentLocalityType.DependentLocalityName dependentLocalityType_DependentLocalityName0 = new DependentLocalityType.DependentLocalityName();
      dependentLocalityType_DependentLocalityName0.setType((String) null);
      assertNull(dependentLocalityType_DependentLocalityName0.getCode());
  }

  @Test
  public void test6()  throws Throwable  {
      DependentLocalityType.DependentLocalityName dependentLocalityType_DependentLocalityName0 = new DependentLocalityType.DependentLocalityName();
      String string0 = dependentLocalityType_DependentLocalityName0.getCode();
      assertNull(string0);
  }

  @Test
  public void test7()  throws Throwable  {
      DependentLocalityType.DependentLocalityNumber dependentLocalityType_DependentLocalityNumber0 = new DependentLocalityType.DependentLocalityNumber();
      String string0 = dependentLocalityType_DependentLocalityNumber0.getNameNumberOccurrence();
      assertNull(string0);
  }

  @Test
  public void test8()  throws Throwable  {
      DependentLocalityType.DependentLocalityNumber dependentLocalityType_DependentLocalityNumber0 = new DependentLocalityType.DependentLocalityNumber();
      Map<QName, String> map0 = dependentLocalityType_DependentLocalityNumber0.getOtherAttributes();
      assertEquals(true, map0.isEmpty());
  }

  @Test
  public void test9()  throws Throwable  {
      DependentLocalityType.DependentLocalityNumber dependentLocalityType_DependentLocalityNumber0 = new DependentLocalityType.DependentLocalityNumber();
      dependentLocalityType_DependentLocalityNumber0.setNameNumberOccurrence((String) null);
      assertNull(dependentLocalityType_DependentLocalityNumber0.getNameNumberOccurrence());
  }

  @Test
  public void test10()  throws Throwable  {
      DependentLocalityType.DependentLocalityNumber dependentLocalityType_DependentLocalityNumber0 = new DependentLocalityType.DependentLocalityNumber();
      dependentLocalityType_DependentLocalityNumber0.setContent((String) null);
      assertNull(dependentLocalityType_DependentLocalityNumber0.getNameNumberOccurrence());
  }

  @Test
  public void test11()  throws Throwable  {
      DependentLocalityType.DependentLocalityNumber dependentLocalityType_DependentLocalityNumber0 = new DependentLocalityType.DependentLocalityNumber();
      String string0 = dependentLocalityType_DependentLocalityNumber0.getCode();
      assertNull(string0);
  }

  @Test
  public void test12()  throws Throwable  {
      DependentLocalityType.DependentLocalityNumber dependentLocalityType_DependentLocalityNumber0 = new DependentLocalityType.DependentLocalityNumber();
      String string0 = dependentLocalityType_DependentLocalityNumber0.getContent();
      assertNull(string0);
  }

  @Test
  public void test13()  throws Throwable  {
      DependentLocalityType.DependentLocalityNumber dependentLocalityType_DependentLocalityNumber0 = new DependentLocalityType.DependentLocalityNumber();
      dependentLocalityType_DependentLocalityNumber0.setCode((String) null);
      assertNull(dependentLocalityType_DependentLocalityNumber0.getNameNumberOccurrence());
  }

  @Test
  public void test14()  throws Throwable  {
      DependentLocalityType dependentLocalityType0 = new DependentLocalityType();
      Thoroughfare thoroughfare0 = dependentLocalityType0.getThoroughfare();
      assertNull(thoroughfare0);
  }

  @Test
  public void test15()  throws Throwable  {
      DependentLocalityType dependentLocalityType0 = new DependentLocalityType();
      PostalRouteType postalRouteType0 = dependentLocalityType0.getPostalRoute();
      assertNull(postalRouteType0);
  }

  @Test
  public void test16()  throws Throwable  {
      DependentLocalityType dependentLocalityType0 = new DependentLocalityType();
      Premise premise0 = dependentLocalityType0.getPremise();
      assertNull(premise0);
  }

  @Test
  public void test17()  throws Throwable  {
      DependentLocalityType dependentLocalityType0 = new DependentLocalityType();
      dependentLocalityType0.setType((String) null);
      assertNull(dependentLocalityType0.getIndicator());
  }

  @Test
  public void test18()  throws Throwable  {
      DependentLocalityType dependentLocalityType0 = new DependentLocalityType();
      dependentLocalityType0.setPostalRoute((PostalRouteType) null);
      assertNull(dependentLocalityType0.getUsageType());
  }

  @Test
  public void test19()  throws Throwable  {
      DependentLocalityType dependentLocalityType0 = new DependentLocalityType();
      PostalCode postalCode0 = new PostalCode();
      dependentLocalityType0.setPostalCode(postalCode0);
      assertNull(dependentLocalityType0.getConnector());
  }

  @Test
  public void test20()  throws Throwable  {
      DependentLocalityType dependentLocalityType0 = new DependentLocalityType();
      PostOffice postOffice0 = new PostOffice();
      dependentLocalityType0.setPostOffice(postOffice0);
      assertNull(postOffice0.getIndicator());
  }

  @Test
  public void test21()  throws Throwable  {
      DependentLocalityType dependentLocalityType0 = new DependentLocalityType();
      String string0 = dependentLocalityType0.getIndicator();
      assertNull(string0);
  }

  @Test
  public void test22()  throws Throwable  {
      DependentLocalityType dependentLocalityType0 = new DependentLocalityType();
      PostalCode postalCode0 = dependentLocalityType0.getPostalCode();
      assertNull(postalCode0);
  }

  @Test
  public void test23()  throws Throwable  {
      DependentLocalityType dependentLocalityType0 = new DependentLocalityType();
      DependentLocalityType.DependentLocalityNumber dependentLocalityType_DependentLocalityNumber0 = dependentLocalityType0.getDependentLocalityNumber();
      dependentLocalityType0.setDependentLocalityNumber(dependentLocalityType_DependentLocalityNumber0);
      assertNull(dependentLocalityType0.getUsageType());
  }

  @Test
  public void test24()  throws Throwable  {
      DependentLocalityType dependentLocalityType0 = new DependentLocalityType();
      dependentLocalityType0.setConnector((String) null);
      assertNull(dependentLocalityType0.getType());
  }

  @Test
  public void test25()  throws Throwable  {
      DependentLocalityType dependentLocalityType0 = new DependentLocalityType();
      LargeMailUserType largeMailUserType0 = new LargeMailUserType();
      dependentLocalityType0.setLargeMailUser(largeMailUserType0);
      assertNull(largeMailUserType0.getType());
  }

  @Test
  public void test26()  throws Throwable  {
      DependentLocalityType dependentLocalityType0 = new DependentLocalityType();
      dependentLocalityType0.setDependentLocality(dependentLocalityType0);
      assertNull(dependentLocalityType0.getType());
  }

  @Test
  public void test27()  throws Throwable  {
      DependentLocalityType dependentLocalityType0 = new DependentLocalityType();
      dependentLocalityType0.setPostBox((PostBox) null);
      assertNull(dependentLocalityType0.getConnector());
  }

  @Test
  public void test28()  throws Throwable  {
      DependentLocalityType dependentLocalityType0 = new DependentLocalityType();
      DependentLocalityType dependentLocalityType1 = dependentLocalityType0.getDependentLocality();
      assertNull(dependentLocalityType1);
  }

  @Test
  public void test29()  throws Throwable  {
      DependentLocalityType dependentLocalityType0 = new DependentLocalityType();
      Map<QName, String> map0 = dependentLocalityType0.getOtherAttributes();
      assertEquals(true, map0.isEmpty());
  }

  @Test
  public void test30()  throws Throwable  {
      DependentLocalityType dependentLocalityType0 = new DependentLocalityType();
      dependentLocalityType0.setUsageType("0pB");
      assertNull(dependentLocalityType0.getConnector());
  }

  @Test
  public void test31()  throws Throwable  {
      DependentLocalityType dependentLocalityType0 = new DependentLocalityType();
      LargeMailUserType largeMailUserType0 = dependentLocalityType0.getLargeMailUser();
      assertNull(largeMailUserType0);
  }

  @Test
  public void test32()  throws Throwable  {
      DependentLocalityType dependentLocalityType0 = new DependentLocalityType();
      PostBox postBox0 = dependentLocalityType0.getPostBox();
      assertNull(postBox0);
  }

  @Test
  public void test33()  throws Throwable  {
      DependentLocalityType dependentLocalityType0 = new DependentLocalityType();
      dependentLocalityType0.setPremise((Premise) null);
      assertNull(dependentLocalityType0.getUsageType());
  }

  @Test
  public void test34()  throws Throwable  {
      DependentLocalityType dependentLocalityType0 = new DependentLocalityType();
      PostOffice postOffice0 = dependentLocalityType0.getPostOffice();
      assertNull(postOffice0);
  }

  @Test
  public void test35()  throws Throwable  {
      DependentLocalityType dependentLocalityType0 = new DependentLocalityType();
      String string0 = dependentLocalityType0.getType();
      assertNull(string0);
  }

  @Test
  public void test36()  throws Throwable  {
      DependentLocalityType dependentLocalityType0 = new DependentLocalityType();
      dependentLocalityType0.setIndicator("0pB");
      assertNull(dependentLocalityType0.getType());
  }

  @Test
  public void test37()  throws Throwable  {
      DependentLocalityType dependentLocalityType0 = new DependentLocalityType();
      String string0 = dependentLocalityType0.getUsageType();
      assertNull(string0);
  }

  @Test
  public void test38()  throws Throwable  {
      DependentLocalityType dependentLocalityType0 = new DependentLocalityType();
      Thoroughfare thoroughfare0 = new Thoroughfare();
      dependentLocalityType0.setThoroughfare(thoroughfare0);
      assertNull(dependentLocalityType0.getUsageType());
  }

  @Test
  public void test39()  throws Throwable  {
      DependentLocalityType dependentLocalityType0 = new DependentLocalityType();
      String string0 = dependentLocalityType0.getConnector();
      assertNull(string0);
  }

  @Test
  public void test40()  throws Throwable  {
      DependentLocalityType dependentLocalityType0 = new DependentLocalityType();
      List<AddressLine> list0 = dependentLocalityType0.getAddressLine();
      List<AddressLine> list1 = dependentLocalityType0.getAddressLine();
      assertNotNull(list1);
      assertSame(list1, list0);
  }

  @Test
  public void test41()  throws Throwable  {
      DependentLocalityType dependentLocalityType0 = new DependentLocalityType();
      List<DependentLocalityType.DependentLocalityName> list0 = dependentLocalityType0.getDependentLocalityName();
      List<DependentLocalityType.DependentLocalityName> list1 = dependentLocalityType0.getDependentLocalityName();
      assertSame(list1, list0);
      assertNotNull(list1);
  }

  @Test
  public void test42()  throws Throwable  {
      DependentLocalityType dependentLocalityType0 = new DependentLocalityType();
      List<Object> list0 = dependentLocalityType0.getAny();
      List<Object> list1 = dependentLocalityType0.getAny();
      assertSame(list1, list0);
      assertNotNull(list1);
  }
}
