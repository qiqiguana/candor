/*
 * This file was automatically generated by EvoSuite
 */

package oasis.names.tc.ciq.xsdschema.xal._2;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.List;
import java.util.Map;
import javax.xml.namespace.QName;
import oasis.names.tc.ciq.xsdschema.xal._2.AddressLine;
import oasis.names.tc.ciq.xsdschema.xal._2.DependentLocalityType;
import oasis.names.tc.ciq.xsdschema.xal._2.FirmType;
import oasis.names.tc.ciq.xsdschema.xal._2.PostalCode;
import oasis.names.tc.ciq.xsdschema.xal._2.Premise;
import oasis.names.tc.ciq.xsdschema.xal._2.Thoroughfare;
import oasis.names.tc.ciq.xsdschema.xal._2.ThoroughfareLeadingTypeType;
import oasis.names.tc.ciq.xsdschema.xal._2.ThoroughfareNameType;
import oasis.names.tc.ciq.xsdschema.xal._2.ThoroughfareNumberPrefix;
import oasis.names.tc.ciq.xsdschema.xal._2.ThoroughfareNumberSuffix;
import oasis.names.tc.ciq.xsdschema.xal._2.ThoroughfarePostDirectionType;
import oasis.names.tc.ciq.xsdschema.xal._2.ThoroughfarePreDirectionType;
import oasis.names.tc.ciq.xsdschema.xal._2.ThoroughfareTrailingTypeType;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ThoroughfareEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Thoroughfare.ThoroughfareNumberRange.ThoroughfareNumberFrom thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberFrom0 = new Thoroughfare.ThoroughfareNumberRange.ThoroughfareNumberFrom();
      Map<QName, String> map0 = thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberFrom0.getOtherAttributes();
      assertEquals(true, map0.isEmpty());
  }

  @Test
  public void test1()  throws Throwable  {
      Thoroughfare.ThoroughfareNumberRange.ThoroughfareNumberFrom thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberFrom0 = new Thoroughfare.ThoroughfareNumberRange.ThoroughfareNumberFrom();
      thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberFrom0.setCode("");
      assertEquals("", thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberFrom0.getCode());
  }

  @Test
  public void test2()  throws Throwable  {
      Thoroughfare.ThoroughfareNumberRange.ThoroughfareNumberFrom thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberFrom0 = new Thoroughfare.ThoroughfareNumberRange.ThoroughfareNumberFrom();
      String string0 = thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberFrom0.getCode();
      assertNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      Thoroughfare thoroughfare0 = new Thoroughfare();
      Map<QName, String> map0 = thoroughfare0.getOtherAttributes();
      assertEquals(true, map0.isEmpty());
  }

  @Test
  public void test4()  throws Throwable  {
      Thoroughfare thoroughfare0 = new Thoroughfare();
      thoroughfare0.setType("");
      assertNull(thoroughfare0.getDependentThoroughfaresIndicator());
  }

  @Test
  public void test5()  throws Throwable  {
      Thoroughfare thoroughfare0 = new Thoroughfare();
      thoroughfare0.setFirm((FirmType) null);
      assertNull(thoroughfare0.getDependentThoroughfaresIndicator());
  }

  @Test
  public void test6()  throws Throwable  {
      Thoroughfare thoroughfare0 = new Thoroughfare();
      String string0 = thoroughfare0.getDependentThoroughfares();
      assertNull(string0);
  }

  @Test
  public void test7()  throws Throwable  {
      Thoroughfare thoroughfare0 = new Thoroughfare();
      thoroughfare0.setDependentThoroughfaresType("%");
      assertNull(thoroughfare0.getDependentThoroughfaresConnector());
  }

  @Test
  public void test8()  throws Throwable  {
      Thoroughfare thoroughfare0 = new Thoroughfare();
      DependentLocalityType dependentLocalityType0 = thoroughfare0.getDependentLocality();
      assertNull(dependentLocalityType0);
  }

  @Test
  public void test9()  throws Throwable  {
      Thoroughfare thoroughfare0 = new Thoroughfare();
      Thoroughfare.DependentThoroughfare thoroughfare_DependentThoroughfare0 = thoroughfare0.getDependentThoroughfare();
      assertNull(thoroughfare_DependentThoroughfare0);
  }

  @Test
  public void test10()  throws Throwable  {
      Thoroughfare thoroughfare0 = new Thoroughfare();
      thoroughfare0.setThoroughfareTrailingType((ThoroughfareTrailingTypeType) null);
      assertNull(thoroughfare0.getDependentThoroughfaresIndicator());
  }

  @Test
  public void test11()  throws Throwable  {
      Thoroughfare thoroughfare0 = new Thoroughfare();
      ThoroughfareTrailingTypeType thoroughfareTrailingTypeType0 = thoroughfare0.getThoroughfareTrailingType();
      assertNull(thoroughfareTrailingTypeType0);
  }

  @Test
  public void test12()  throws Throwable  {
      Thoroughfare thoroughfare0 = new Thoroughfare();
      ThoroughfareLeadingTypeType thoroughfareLeadingTypeType0 = thoroughfare0.getThoroughfareLeadingType();
      assertNull(thoroughfareLeadingTypeType0);
  }

  @Test
  public void test13()  throws Throwable  {
      Thoroughfare thoroughfare0 = new Thoroughfare();
      ThoroughfarePostDirectionType thoroughfarePostDirectionType0 = thoroughfare0.getThoroughfarePostDirection();
      assertNull(thoroughfarePostDirectionType0);
  }

  @Test
  public void test14()  throws Throwable  {
      Thoroughfare thoroughfare0 = new Thoroughfare();
      thoroughfare0.setThoroughfarePostDirection((ThoroughfarePostDirectionType) null);
      assertNull(thoroughfare0.getDependentThoroughfaresIndicator());
  }

  @Test
  public void test15()  throws Throwable  {
      Thoroughfare thoroughfare0 = new Thoroughfare();
      thoroughfare0.setThoroughfarePreDirection((ThoroughfarePreDirectionType) null);
      assertNull(thoroughfare0.getDependentThoroughfares());
  }

  @Test
  public void test16()  throws Throwable  {
      Thoroughfare thoroughfare0 = new Thoroughfare();
      String string0 = thoroughfare0.getDependentThoroughfaresConnector();
      assertNull(string0);
  }

  @Test
  public void test17()  throws Throwable  {
      Thoroughfare thoroughfare0 = new Thoroughfare();
      String string0 = thoroughfare0.getDependentThoroughfaresType();
      assertNull(string0);
  }

  @Test
  public void test18()  throws Throwable  {
      Thoroughfare thoroughfare0 = new Thoroughfare();
      thoroughfare0.setThoroughfareLeadingType((ThoroughfareLeadingTypeType) null);
      assertNull(thoroughfare0.getDependentThoroughfaresIndicator());
  }

  @Test
  public void test19()  throws Throwable  {
      Thoroughfare thoroughfare0 = new Thoroughfare();
      thoroughfare0.setDependentThoroughfare((Thoroughfare.DependentThoroughfare) null);
      assertNull(thoroughfare0.getType());
  }

  @Test
  public void test20()  throws Throwable  {
      Thoroughfare thoroughfare0 = new Thoroughfare();
      Premise premise0 = thoroughfare0.getPremise();
      assertNull(premise0);
  }

  @Test
  public void test21()  throws Throwable  {
      Thoroughfare thoroughfare0 = new Thoroughfare();
      thoroughfare0.setDependentThoroughfaresConnector((String) null);
      assertNull(thoroughfare0.getDependentThoroughfares());
  }

  @Test
  public void test22()  throws Throwable  {
      Thoroughfare thoroughfare0 = new Thoroughfare();
      Premise premise0 = new Premise();
      thoroughfare0.setPremise(premise0);
      assertNull(premise0.getPremiseDependency());
  }

  @Test
  public void test23()  throws Throwable  {
      Thoroughfare thoroughfare0 = new Thoroughfare();
      ThoroughfarePreDirectionType thoroughfarePreDirectionType0 = thoroughfare0.getThoroughfarePreDirection();
      assertNull(thoroughfarePreDirectionType0);
  }

  @Test
  public void test24()  throws Throwable  {
      Thoroughfare thoroughfare0 = new Thoroughfare();
      thoroughfare0.setDependentThoroughfares("^BAY");
      assertNull(thoroughfare0.getDependentThoroughfaresType());
  }

  @Test
  public void test25()  throws Throwable  {
      Thoroughfare thoroughfare0 = new Thoroughfare();
      thoroughfare0.setDependentThoroughfaresIndicator("");
      assertNull(thoroughfare0.getType());
  }

  @Test
  public void test26()  throws Throwable  {
      Thoroughfare thoroughfare0 = new Thoroughfare();
      String string0 = thoroughfare0.getType();
      assertNull(string0);
  }

  @Test
  public void test27()  throws Throwable  {
      Thoroughfare thoroughfare0 = new Thoroughfare();
      String string0 = thoroughfare0.getDependentThoroughfaresIndicator();
      assertNull(string0);
  }

  @Test
  public void test28()  throws Throwable  {
      Thoroughfare thoroughfare0 = new Thoroughfare();
      PostalCode postalCode0 = thoroughfare0.getPostalCode();
      assertNull(postalCode0);
  }

  @Test
  public void test29()  throws Throwable  {
      Thoroughfare thoroughfare0 = new Thoroughfare();
      thoroughfare0.setDependentLocality((DependentLocalityType) null);
      assertNull(thoroughfare0.getType());
  }

  @Test
  public void test30()  throws Throwable  {
      Thoroughfare thoroughfare0 = new Thoroughfare();
      FirmType firmType0 = thoroughfare0.getFirm();
      assertNull(firmType0);
  }

  @Test
  public void test31()  throws Throwable  {
      Thoroughfare thoroughfare0 = new Thoroughfare();
      thoroughfare0.setPostalCode((PostalCode) null);
      assertNull(thoroughfare0.getDependentThoroughfaresIndicator());
  }

  @Test
  public void test32()  throws Throwable  {
      Thoroughfare.DependentThoroughfare thoroughfare_DependentThoroughfare0 = new Thoroughfare.DependentThoroughfare();
      thoroughfare_DependentThoroughfare0.setThoroughfareLeadingType((ThoroughfareLeadingTypeType) null);
      assertNull(thoroughfare_DependentThoroughfare0.getType());
  }

  @Test
  public void test33()  throws Throwable  {
      Thoroughfare.DependentThoroughfare thoroughfare_DependentThoroughfare0 = new Thoroughfare.DependentThoroughfare();
      thoroughfare_DependentThoroughfare0.setType("");
      assertEquals("", thoroughfare_DependentThoroughfare0.getType());
  }

  @Test
  public void test34()  throws Throwable  {
      Thoroughfare.DependentThoroughfare thoroughfare_DependentThoroughfare0 = new Thoroughfare.DependentThoroughfare();
      ThoroughfarePostDirectionType thoroughfarePostDirectionType0 = thoroughfare_DependentThoroughfare0.getThoroughfarePostDirection();
      thoroughfare_DependentThoroughfare0.setThoroughfarePostDirection(thoroughfarePostDirectionType0);
      assertNull(thoroughfare_DependentThoroughfare0.getType());
  }

  @Test
  public void test35()  throws Throwable  {
      Thoroughfare.DependentThoroughfare thoroughfare_DependentThoroughfare0 = new Thoroughfare.DependentThoroughfare();
      thoroughfare_DependentThoroughfare0.setThoroughfareTrailingType((ThoroughfareTrailingTypeType) null);
      assertNull(thoroughfare_DependentThoroughfare0.getType());
  }

  @Test
  public void test36()  throws Throwable  {
      Thoroughfare.DependentThoroughfare thoroughfare_DependentThoroughfare0 = new Thoroughfare.DependentThoroughfare();
      Map<QName, String> map0 = thoroughfare_DependentThoroughfare0.getOtherAttributes();
      assertEquals(0, map0.size());
  }

  @Test
  public void test37()  throws Throwable  {
      Thoroughfare.DependentThoroughfare thoroughfare_DependentThoroughfare0 = new Thoroughfare.DependentThoroughfare();
      ThoroughfareTrailingTypeType thoroughfareTrailingTypeType0 = thoroughfare_DependentThoroughfare0.getThoroughfareTrailingType();
      assertNull(thoroughfareTrailingTypeType0);
  }

  @Test
  public void test38()  throws Throwable  {
      Thoroughfare.DependentThoroughfare thoroughfare_DependentThoroughfare0 = new Thoroughfare.DependentThoroughfare();
      String string0 = thoroughfare_DependentThoroughfare0.getType();
      assertNull(string0);
  }

  @Test
  public void test39()  throws Throwable  {
      Thoroughfare.DependentThoroughfare thoroughfare_DependentThoroughfare0 = new Thoroughfare.DependentThoroughfare();
      ThoroughfareLeadingTypeType thoroughfareLeadingTypeType0 = thoroughfare_DependentThoroughfare0.getThoroughfareLeadingType();
      assertNull(thoroughfareLeadingTypeType0);
  }

  @Test
  public void test40()  throws Throwable  {
      Thoroughfare.DependentThoroughfare thoroughfare_DependentThoroughfare0 = new Thoroughfare.DependentThoroughfare();
      thoroughfare_DependentThoroughfare0.setThoroughfarePreDirection((ThoroughfarePreDirectionType) null);
      assertNull(thoroughfare_DependentThoroughfare0.getType());
  }

  @Test
  public void test41()  throws Throwable  {
      Thoroughfare.DependentThoroughfare thoroughfare_DependentThoroughfare0 = new Thoroughfare.DependentThoroughfare();
      ThoroughfarePreDirectionType thoroughfarePreDirectionType0 = thoroughfare_DependentThoroughfare0.getThoroughfarePreDirection();
      assertNull(thoroughfarePreDirectionType0);
  }

  @Test
  public void test42()  throws Throwable  {
      Thoroughfare.ThoroughfareNumberRange.ThoroughfareNumberTo thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberTo0 = new Thoroughfare.ThoroughfareNumberRange.ThoroughfareNumberTo();
      thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberTo0.setCode((String) null);
      assertNull(thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberTo0.getCode());
  }

  @Test
  public void test43()  throws Throwable  {
      Thoroughfare.ThoroughfareNumberRange.ThoroughfareNumberTo thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberTo0 = new Thoroughfare.ThoroughfareNumberRange.ThoroughfareNumberTo();
      Map<QName, String> map0 = thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberTo0.getOtherAttributes();
      assertEquals(0, map0.size());
  }

  @Test
  public void test44()  throws Throwable  {
      Thoroughfare.ThoroughfareNumberRange.ThoroughfareNumberTo thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberTo0 = new Thoroughfare.ThoroughfareNumberRange.ThoroughfareNumberTo();
      String string0 = thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberTo0.getCode();
      assertNull(string0);
  }

  @Test
  public void test45()  throws Throwable  {
      Thoroughfare.ThoroughfareNumberRange thoroughfare_ThoroughfareNumberRange0 = new Thoroughfare.ThoroughfareNumberRange();
      thoroughfare_ThoroughfareNumberRange0.setIndicator("");
      assertNull(thoroughfare_ThoroughfareNumberRange0.getCode());
  }

  @Test
  public void test46()  throws Throwable  {
      Thoroughfare.ThoroughfareNumberRange thoroughfare_ThoroughfareNumberRange0 = new Thoroughfare.ThoroughfareNumberRange();
      thoroughfare_ThoroughfareNumberRange0.setRangeType("ZRC");
      assertNull(thoroughfare_ThoroughfareNumberRange0.getCode());
  }

  @Test
  public void test47()  throws Throwable  {
      Thoroughfare.ThoroughfareNumberRange thoroughfare_ThoroughfareNumberRange0 = new Thoroughfare.ThoroughfareNumberRange();
      String string0 = thoroughfare_ThoroughfareNumberRange0.getRangeType();
      assertNull(string0);
  }

  @Test
  public void test48()  throws Throwable  {
      Thoroughfare.ThoroughfareNumberRange thoroughfare_ThoroughfareNumberRange0 = new Thoroughfare.ThoroughfareNumberRange();
      Map<QName, String> map0 = thoroughfare_ThoroughfareNumberRange0.getOtherAttributes();
      assertEquals(true, map0.isEmpty());
  }

  @Test
  public void test49()  throws Throwable  {
      Thoroughfare.ThoroughfareNumberRange thoroughfare_ThoroughfareNumberRange0 = new Thoroughfare.ThoroughfareNumberRange();
      thoroughfare_ThoroughfareNumberRange0.setCode((String) null);
      assertNull(thoroughfare_ThoroughfareNumberRange0.getCode());
  }

  @Test
  public void test50()  throws Throwable  {
      Thoroughfare.ThoroughfareNumberRange thoroughfare_ThoroughfareNumberRange0 = new Thoroughfare.ThoroughfareNumberRange();
      String string0 = thoroughfare_ThoroughfareNumberRange0.getCode();
      assertNull(string0);
  }

  @Test
  public void test51()  throws Throwable  {
      Thoroughfare.ThoroughfareNumberRange thoroughfare_ThoroughfareNumberRange0 = new Thoroughfare.ThoroughfareNumberRange();
      Thoroughfare.ThoroughfareNumberRange.ThoroughfareNumberTo thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberTo0 = thoroughfare_ThoroughfareNumberRange0.getThoroughfareNumberTo();
      assertNull(thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberTo0);
  }

  @Test
  public void test52()  throws Throwable  {
      Thoroughfare.ThoroughfareNumberRange thoroughfare_ThoroughfareNumberRange0 = new Thoroughfare.ThoroughfareNumberRange();
      String string0 = thoroughfare_ThoroughfareNumberRange0.getType();
      assertNull(string0);
  }

  @Test
  public void test53()  throws Throwable  {
      Thoroughfare.ThoroughfareNumberRange thoroughfare_ThoroughfareNumberRange0 = new Thoroughfare.ThoroughfareNumberRange();
      thoroughfare_ThoroughfareNumberRange0.setNumberRangeOccurrence("");
      assertNull(thoroughfare_ThoroughfareNumberRange0.getSeparator());
  }

  @Test
  public void test54()  throws Throwable  {
      Thoroughfare.ThoroughfareNumberRange thoroughfare_ThoroughfareNumberRange0 = new Thoroughfare.ThoroughfareNumberRange();
      Thoroughfare.ThoroughfareNumberRange.ThoroughfareNumberFrom thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberFrom0 = thoroughfare_ThoroughfareNumberRange0.getThoroughfareNumberFrom();
      assertNull(thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberFrom0);
  }

  @Test
  public void test55()  throws Throwable  {
      Thoroughfare.ThoroughfareNumberRange thoroughfare_ThoroughfareNumberRange0 = new Thoroughfare.ThoroughfareNumberRange();
      Thoroughfare.ThoroughfareNumberRange.ThoroughfareNumberTo thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberTo0 = new Thoroughfare.ThoroughfareNumberRange.ThoroughfareNumberTo();
      thoroughfare_ThoroughfareNumberRange0.setThoroughfareNumberTo(thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberTo0);
      assertNull(thoroughfare_ThoroughfareNumberRange0.getRangeType());
  }

  @Test
  public void test56()  throws Throwable  {
      Thoroughfare.ThoroughfareNumberRange thoroughfare_ThoroughfareNumberRange0 = new Thoroughfare.ThoroughfareNumberRange();
      thoroughfare_ThoroughfareNumberRange0.setIndicatorOccurrence((String) null);
      assertNull(thoroughfare_ThoroughfareNumberRange0.getSeparator());
  }

  @Test
  public void test57()  throws Throwable  {
      Thoroughfare.ThoroughfareNumberRange thoroughfare_ThoroughfareNumberRange0 = new Thoroughfare.ThoroughfareNumberRange();
      String string0 = thoroughfare_ThoroughfareNumberRange0.getNumberRangeOccurrence();
      assertNull(string0);
  }

  @Test
  public void test58()  throws Throwable  {
      Thoroughfare.ThoroughfareNumberRange thoroughfare_ThoroughfareNumberRange0 = new Thoroughfare.ThoroughfareNumberRange();
      thoroughfare_ThoroughfareNumberRange0.setType("");
      assertNull(thoroughfare_ThoroughfareNumberRange0.getNumberRangeOccurrence());
  }

  @Test
  public void test59()  throws Throwable  {
      Thoroughfare.ThoroughfareNumberRange thoroughfare_ThoroughfareNumberRange0 = new Thoroughfare.ThoroughfareNumberRange();
      thoroughfare_ThoroughfareNumberRange0.setSeparator("");
      assertNull(thoroughfare_ThoroughfareNumberRange0.getIndicatorOccurrence());
  }

  @Test
  public void test60()  throws Throwable  {
      Thoroughfare.ThoroughfareNumberRange thoroughfare_ThoroughfareNumberRange0 = new Thoroughfare.ThoroughfareNumberRange();
      String string0 = thoroughfare_ThoroughfareNumberRange0.getIndicatorOccurrence();
      assertNull(string0);
  }

  @Test
  public void test61()  throws Throwable  {
      Thoroughfare.ThoroughfareNumberRange thoroughfare_ThoroughfareNumberRange0 = new Thoroughfare.ThoroughfareNumberRange();
      String string0 = thoroughfare_ThoroughfareNumberRange0.getSeparator();
      assertNull(string0);
  }

  @Test
  public void test62()  throws Throwable  {
      Thoroughfare.ThoroughfareNumberRange thoroughfare_ThoroughfareNumberRange0 = new Thoroughfare.ThoroughfareNumberRange();
      String string0 = thoroughfare_ThoroughfareNumberRange0.getIndicator();
      assertNull(string0);
  }

  @Test
  public void test63()  throws Throwable  {
      Thoroughfare.ThoroughfareNumberRange thoroughfare_ThoroughfareNumberRange0 = new Thoroughfare.ThoroughfareNumberRange();
      thoroughfare_ThoroughfareNumberRange0.setThoroughfareNumberFrom((Thoroughfare.ThoroughfareNumberRange.ThoroughfareNumberFrom) null);
      assertNull(thoroughfare_ThoroughfareNumberRange0.getIndicator());
  }

  @Test
  public void test64()  throws Throwable  {
      Thoroughfare thoroughfare0 = new Thoroughfare();
      List<AddressLine> list0 = thoroughfare0.getAddressLine();
      List<AddressLine> list1 = thoroughfare0.getAddressLine();
      assertSame(list1, list0);
      assertNotNull(list1);
  }

  @Test
  public void test65()  throws Throwable  {
      Thoroughfare thoroughfare0 = new Thoroughfare();
      List<Object> list0 = thoroughfare0.getThoroughfareNumberOrThoroughfareNumberRange();
      List<Object> list1 = thoroughfare0.getThoroughfareNumberOrThoroughfareNumberRange();
      assertNotNull(list1);
      assertSame(list1, list0);
  }

  @Test
  public void test66()  throws Throwable  {
      Thoroughfare thoroughfare0 = new Thoroughfare();
      List<ThoroughfareNumberPrefix> list0 = thoroughfare0.getThoroughfareNumberPrefix();
      List<ThoroughfareNumberPrefix> list1 = thoroughfare0.getThoroughfareNumberPrefix();
      assertNotNull(list1);
      assertSame(list1, list0);
  }

  @Test
  public void test67()  throws Throwable  {
      Thoroughfare thoroughfare0 = new Thoroughfare();
      List<ThoroughfareNumberSuffix> list0 = thoroughfare0.getThoroughfareNumberSuffix();
      List<ThoroughfareNumberSuffix> list1 = thoroughfare0.getThoroughfareNumberSuffix();
      assertSame(list1, list0);
      assertNotNull(list1);
  }

  @Test
  public void test68()  throws Throwable  {
      Thoroughfare thoroughfare0 = new Thoroughfare();
      List<ThoroughfareNameType> list0 = thoroughfare0.getThoroughfareName();
      List<ThoroughfareNameType> list1 = thoroughfare0.getThoroughfareName();
      assertNotNull(list1);
      assertSame(list1, list0);
  }

  @Test
  public void test69()  throws Throwable  {
      Thoroughfare thoroughfare0 = new Thoroughfare();
      List<Object> list0 = thoroughfare0.getAny();
      List<Object> list1 = thoroughfare0.getAny();
      assertNotNull(list1);
      assertSame(list1, list0);
  }

  @Test
  public void test70()  throws Throwable  {
      Thoroughfare.DependentThoroughfare thoroughfare_DependentThoroughfare0 = new Thoroughfare.DependentThoroughfare();
      List<AddressLine> list0 = thoroughfare_DependentThoroughfare0.getAddressLine();
      List<AddressLine> list1 = thoroughfare_DependentThoroughfare0.getAddressLine();
      assertSame(list1, list0);
      assertNotNull(list1);
  }

  @Test
  public void test71()  throws Throwable  {
      Thoroughfare.DependentThoroughfare thoroughfare_DependentThoroughfare0 = new Thoroughfare.DependentThoroughfare();
      List<ThoroughfareNameType> list0 = thoroughfare_DependentThoroughfare0.getThoroughfareName();
      List<ThoroughfareNameType> list1 = thoroughfare_DependentThoroughfare0.getThoroughfareName();
      assertNotNull(list1);
      assertSame(list1, list0);
  }

  @Test
  public void test72()  throws Throwable  {
      Thoroughfare.DependentThoroughfare thoroughfare_DependentThoroughfare0 = new Thoroughfare.DependentThoroughfare();
      List<Object> list0 = thoroughfare_DependentThoroughfare0.getAny();
      List<Object> list1 = thoroughfare_DependentThoroughfare0.getAny();
      assertSame(list1, list0);
      assertNotNull(list1);
  }

  @Test
  public void test73()  throws Throwable  {
      Thoroughfare.ThoroughfareNumberRange thoroughfare_ThoroughfareNumberRange0 = new Thoroughfare.ThoroughfareNumberRange();
      List<AddressLine> list0 = thoroughfare_ThoroughfareNumberRange0.getAddressLine();
      List<AddressLine> list1 = thoroughfare_ThoroughfareNumberRange0.getAddressLine();
      assertSame(list1, list0);
      assertNotNull(list1);
  }

  @Test
  public void test74()  throws Throwable  {
      Thoroughfare.ThoroughfareNumberRange.ThoroughfareNumberFrom thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberFrom0 = new Thoroughfare.ThoroughfareNumberRange.ThoroughfareNumberFrom();
      List<Object> list0 = thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberFrom0.getContent();
      List<Object> list1 = thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberFrom0.getContent();
      assertSame(list1, list0);
      assertNotNull(list1);
  }

  @Test
  public void test75()  throws Throwable  {
      Thoroughfare.ThoroughfareNumberRange.ThoroughfareNumberTo thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberTo0 = new Thoroughfare.ThoroughfareNumberRange.ThoroughfareNumberTo();
      List<Object> list0 = thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberTo0.getContent();
      List<Object> list1 = thoroughfare_ThoroughfareNumberRange_ThoroughfareNumberTo0.getContent();
      assertSame(list1, list0);
      assertNotNull(list1);
  }
}
