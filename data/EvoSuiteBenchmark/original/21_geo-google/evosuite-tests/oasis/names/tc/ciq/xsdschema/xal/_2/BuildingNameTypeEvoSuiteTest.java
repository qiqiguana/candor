/*
 * This file was automatically generated by EvoSuite
 */

package oasis.names.tc.ciq.xsdschema.xal._2;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Map;
import javax.xml.namespace.QName;
import oasis.names.tc.ciq.xsdschema.xal._2.BuildingNameType;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BuildingNameTypeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BuildingNameType buildingNameType0 = new BuildingNameType();
      String string0 = buildingNameType0.getType();
      assertNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      BuildingNameType buildingNameType0 = new BuildingNameType();
      buildingNameType0.setType("");
      assertNull(buildingNameType0.getContent());
  }

  @Test
  public void test2()  throws Throwable  {
      BuildingNameType buildingNameType0 = new BuildingNameType();
      String string0 = buildingNameType0.getContent();
      assertNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      BuildingNameType buildingNameType0 = new BuildingNameType();
      String string0 = buildingNameType0.getCode();
      assertNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      BuildingNameType buildingNameType0 = new BuildingNameType();
      buildingNameType0.setCode("");
      assertNull(buildingNameType0.getTypeOccurrence());
  }

  @Test
  public void test5()  throws Throwable  {
      BuildingNameType buildingNameType0 = new BuildingNameType();
      String string0 = buildingNameType0.getTypeOccurrence();
      assertNull(string0);
  }

  @Test
  public void test6()  throws Throwable  {
      BuildingNameType buildingNameType0 = new BuildingNameType();
      Map<QName, String> map0 = buildingNameType0.getOtherAttributes();
      assertEquals(true, map0.isEmpty());
  }

  @Test
  public void test7()  throws Throwable  {
      BuildingNameType buildingNameType0 = new BuildingNameType();
      buildingNameType0.setTypeOccurrence("");
      assertEquals("", buildingNameType0.getTypeOccurrence());
  }

  @Test
  public void test8()  throws Throwable  {
      BuildingNameType buildingNameType0 = new BuildingNameType();
      buildingNameType0.setContent("");
      assertNull(buildingNameType0.getTypeOccurrence());
  }
}
