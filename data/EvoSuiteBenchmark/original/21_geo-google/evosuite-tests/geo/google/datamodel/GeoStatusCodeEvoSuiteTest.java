/*
 * This file was automatically generated by EvoSuite
 */

package geo.google.datamodel;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import geo.google.datamodel.GeoStatusCode;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class GeoStatusCodeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      GeoStatusCode geoStatusCode0 = GeoStatusCode.G_GEO_BAD_REQUEST;
      int int0 = geoStatusCode0.getCode();
      assertEquals(400, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      GeoStatusCode geoStatusCode0 = GeoStatusCode.G_GEO_MISSING_QUERY;
      String string0 = geoStatusCode0.getCodeName();
      assertEquals("G_GEO_MISSING_QUERY", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      GeoStatusCode geoStatusCode0 = GeoStatusCode.G_GEO_MISSING_QUERY;
      String string0 = geoStatusCode0.getDescription();
      assertEquals("The HTTP q parameter was either missing or had no value. For geocoding requests, this means that an empty address was specified as input. For directions requests, this means that no query was specified in the input. (Since 2.81)", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      GeoStatusCode geoStatusCode0 = GeoStatusCode.getStatusCode(200);
      assertEquals(GeoStatusCode.G_GEO_SUCCESS, geoStatusCode0);
  }

  @Test
  public void test4()  throws Throwable  {
      GeoStatusCode geoStatusCode0 = GeoStatusCode.getStatusCode(400);
      assertEquals(GeoStatusCode.G_GEO_BAD_REQUEST, geoStatusCode0);
  }

  @Test
  public void test5()  throws Throwable  {
      GeoStatusCode geoStatusCode0 = GeoStatusCode.getStatusCode(500);
      assertEquals(GeoStatusCode.G_GEO_SERVER_ERROR, geoStatusCode0);
  }

  @Test
  public void test6()  throws Throwable  {
      GeoStatusCode geoStatusCode0 = GeoStatusCode.getStatusCode(601);
      assertEquals(GeoStatusCode.G_GEO_MISSING_QUERY, geoStatusCode0);
  }

  @Test
  public void test7()  throws Throwable  {
      GeoStatusCode geoStatusCode0 = GeoStatusCode.getStatusCode(602);
      assertEquals(GeoStatusCode.G_GEO_UNKNOWN_ADDRESS, geoStatusCode0);
  }

  @Test
  public void test8()  throws Throwable  {
      GeoStatusCode geoStatusCode0 = GeoStatusCode.getStatusCode(603);
      assertEquals(GeoStatusCode.G_GEO_UNAVAILABLE_ADDRESS, geoStatusCode0);
  }

  @Test
  public void test9()  throws Throwable  {
      GeoStatusCode geoStatusCode0 = GeoStatusCode.getStatusCode(604);
      assertEquals(GeoStatusCode.G_GEO_UNKNOWN_DIRECTIONS, geoStatusCode0);
  }

  @Test
  public void test10()  throws Throwable  {
      GeoStatusCode geoStatusCode0 = GeoStatusCode.getStatusCode(610);
      assertEquals(GeoStatusCode.G_GEO_BAD_KEY, geoStatusCode0);
  }

  @Test
  public void test11()  throws Throwable  {
      GeoStatusCode geoStatusCode0 = GeoStatusCode.getStatusCode(620);
      assertEquals(GeoStatusCode.G_GEO_TOO_MANY_QUERIES, geoStatusCode0);
  }

  @Test
  public void test12()  throws Throwable  {
      GeoStatusCode geoStatusCode0 = GeoStatusCode.getStatusCode(1494);
      assertEquals(GeoStatusCode.G_GEO_UNKOWN_STATUS, geoStatusCode0);
  }
}
