/*
 * This file was automatically generated by EvoSuite
 */

package org.mozilla.javascript;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.CharArrayReader;
import java.io.FileDescriptor;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import org.evosuite.testcase.CodeUnderTestException;
import org.junit.BeforeClass;
import org.mozilla.javascript.CompilerEnvirons;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.ErrorReporter;
import org.mozilla.javascript.EvaluatorException;
import org.mozilla.javascript.Parser;
import org.mozilla.javascript.ScriptOrFnNode;
import org.mozilla.javascript.TokenStream;
import org.mozilla.javascript.tools.ToolErrorReporter;

@RunWith(EvoSuiteRunner.class)
public class TokenStreamEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      TokenStream tokenStream0 = new TokenStream((Parser) null, (Reader) null, "kgt", 1199);
      assertNotNull(tokenStream0);
      
      boolean boolean0 = tokenStream0.eof();
      assertEquals(3, tokenStream0.getOffset());
      assertEquals(true, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Parser parser0 = new Parser(compilerEnvirons0, (ErrorReporter) toolErrorReporter0);
      TokenStream tokenStream0 = new TokenStream(parser0, (Reader) null, "throw", (int) '?');
      assertNotNull(tokenStream0);
      
      tokenStream0.tokenToString(1);
      assertEquals(5, tokenStream0.getOffset());
      assertEquals(63, tokenStream0.getLineno());
  }

  @Test
  public void test2()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      ErrorReporter errorReporter0 = compilerEnvirons0.getErrorReporter();
      Parser parser0 = new Parser(compilerEnvirons0, errorReporter0);
      // Undeclared exception!
      try {
        parser0.parse("T-6#iiR.eh)1Y?!B", "T-6#iiR.eh)1Y?!B", 0);
        fail("Expecting exception: EvaluatorException");
      } catch(EvaluatorException e) {
        /*
         * illegal character
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      ErrorReporter errorReporter0 = compilerEnvirons0.getErrorReporter();
      Parser parser0 = new Parser((CompilerEnvirons) null, errorReporter0);
      TokenStream tokenStream0 = new TokenStream(parser0, (Reader) null, "YYKz%5]O='yx>", 1399);
      assertNotNull(tokenStream0);
      
      boolean boolean0 = tokenStream0.isXMLAttribute();
      assertEquals(true, tokenStream0.isXMLAttribute());
      assertEquals(true, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      FileDescriptor fileDescriptor0 = FileDescriptor.out;
      FileReader fileReader0 = new FileReader(fileDescriptor0);
      TokenStream tokenStream0 = null;
      try {
        tokenStream0 = new TokenStream((Parser) null, (Reader) fileReader0, "h", 181);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * FAILED ASSERTION
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      TokenStream tokenStream0 = null;
      try {
        tokenStream0 = new TokenStream((Parser) null, (Reader) null, (String) null, 667);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * FAILED ASSERTION
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      boolean boolean0 = TokenStream.isKeyword("native");
      assertEquals(true, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Parser parser0 = new Parser(compilerEnvirons0, (ErrorReporter) toolErrorReporter0);
      TokenStream tokenStream0 = new TokenStream(parser0, (Reader) null, "thr:ow", (int) '?');
      assertNotNull(tokenStream0);
      
      int int0 = tokenStream0.getToken();
      assertEquals(6, tokenStream0.getOffset());
      assertEquals(0, int0);
  }

  @Test
  public void test8()  throws Throwable  {
      boolean boolean0 = TokenStream.isKeyword("js: ");
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      ErrorReporter errorReporter0 = compilerEnvirons0.getErrorReporter();
      Parser parser0 = new Parser(compilerEnvirons0, errorReporter0);
      // Undeclared exception!
      try {
        parser0.parse("wBNlv%O `dB(A%r]kk", "wBNlv%O `dB(A%r]kk", 0);
        fail("Expecting exception: EvaluatorException");
      } catch(EvaluatorException e) {
        /*
         * illegal character
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      boolean boolean0 = TokenStream.isKeyword("Ja>0:_:");
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      boolean boolean0 = TokenStream.isKeyword("getMonth");
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      boolean boolean0 = TokenStream.isKeyword("J!Ca>=:_:");
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      boolean boolean0 = TokenStream.isKeyword("%{9N//(5V ");
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      boolean boolean0 = TokenStream.isKeyword("msg.no.paren");
      assertEquals(false, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      ErrorReporter errorReporter0 = compilerEnvirons0.getErrorReporter();
      Parser parser0 = new Parser(compilerEnvirons0, errorReporter0);
      ScriptOrFnNode scriptOrFnNode0 = parser0.parse("msg.no.paren", "msg.no.paren", (int) 'U');
      assertNotNull(scriptOrFnNode0);
      assertEquals("\u0087'\u0003msgk'\u0002nok'\u0005parenQ\u0001", parser0.getEncodedSource());
      assertEquals(85, scriptOrFnNode0.getEndLineno());
  }

  @Test
  public void test16()  throws Throwable  {
      TokenStream tokenStream0 = new TokenStream((Parser) null, (Reader) null, "for ", 184);
      assertNotNull(tokenStream0);
      
      int int0 = tokenStream0.getToken();
      assertEquals(4, tokenStream0.getOffset());
      assertEquals(0, int0);
  }

  @Test
  public void test17()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Parser parser0 = new Parser(compilerEnvirons0, (ErrorReporter) toolErrorReporter0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'g';
      charArray0[3] = '?';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      TokenStream tokenStream0 = new TokenStream(parser0, (Reader) charArrayReader0, (String) null, (int) '?');
      int int0 = tokenStream0.getToken();
      assertEquals(-1, charArrayReader0.read());
      assertEquals(0, int0);
  }

  @Test
  public void test18()  throws Throwable  {
      boolean boolean0 = TokenStream.isKeyword("kgt");
      assertEquals(false, boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      boolean boolean0 = TokenStream.isKeyword("y9j");
      assertEquals(false, boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      boolean boolean0 = TokenStream.isKeyword("for ");
      assertEquals(false, boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      Parser parser0 = new Parser(compilerEnvirons0, (ErrorReporter) toolErrorReporter0);
      // Undeclared exception!
      try {
        parser0.parse("*.3:E[gqKU:r&J}R[2", "*.3:E[gqKU:r&J}R[2", 0);
        fail("Expecting exception: EvaluatorException");
      } catch(EvaluatorException e) {
        /*
         * Compilation produced 1 syntax errors.
         */
      }
  }

  @Test
  public void test22()  throws Throwable  {
      boolean boolean0 = TokenStream.isKeyword("lIkg");
      assertEquals(false, boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      boolean boolean0 = TokenStream.isKeyword("main");
      assertEquals(false, boolean0);
  }

  @Test
  public void test24()  throws Throwable  {
      boolean boolean0 = TokenStream.isKeyword("ok>c");
      assertEquals(false, boolean0);
  }

  @Test
  public void test25()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      ErrorReporter errorReporter0 = compilerEnvirons0.getErrorReporter();
      Parser parser0 = new Parser(compilerEnvirons0, errorReporter0);
      ScriptOrFnNode scriptOrFnNode0 = parser0.parse("v6Gv", "v6Gv", 41);
      assertNotNull(scriptOrFnNode0);
      assertEquals("\u0087'\u0004v6GvQ\u0001", parser0.getEncodedSource());
      assertEquals(41, scriptOrFnNode0.getEndLineno());
  }

  @Test
  public void test26()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      ErrorReporter errorReporter0 = compilerEnvirons0.getErrorReporter();
      Parser parser0 = new Parser(compilerEnvirons0, errorReporter0);
      char[] charArray0 = new char[7];
      charArray0[5] = '|';
      charArray0[0] = '!';
      charArray0[1] = 'a';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      // Undeclared exception!
      try {
        parser0.parse((Reader) charArrayReader0, (String) null, (int) 'D');
        fail("Expecting exception: EvaluatorException");
      } catch(EvaluatorException e) {
        /*
         * illegal character
         */
      }
  }

  @Test
  public void test27()  throws Throwable  {
      boolean boolean0 = TokenStream.isKeyword("*'cvT");
      assertEquals(false, boolean0);
  }

  @Test
  public void test28()  throws Throwable  {
      boolean boolean0 = TokenStream.isKeyword("gMnth");
      assertEquals(false, boolean0);
  }

  @Test
  public void test29()  throws Throwable  {
      boolean boolean0 = TokenStream.isKeyword("fAor ");
      assertEquals(false, boolean0);
  }

  @Test
  public void test30()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Parser parser0 = new Parser(compilerEnvirons0, (ErrorReporter) toolErrorReporter0);
      // Undeclared exception!
      try {
        parser0.parse("(3FitzK%Ig#oxK321", "(3FitzK%Ig#oxK321", (-1));
        fail("Expecting exception: EvaluatorException");
      } catch(EvaluatorException e) {
        /*
         * Compilation produced 2 syntax errors.
         */
      }
  }

  @Test
  public void test31()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Parser parser0 = new Parser(compilerEnvirons0, (ErrorReporter) toolErrorReporter0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      TokenStream tokenStream0 = new TokenStream(parser0, (Reader) charArrayReader0, (String) null, (int) 'V');
      int int0 = tokenStream0.getToken();
      assertEquals(-1, charArrayReader0.read());
      assertEquals(0, int0);
  }

  @Test
  public void test32()  throws Throwable  {
      boolean boolean0 = TokenStream.isKeyword("Rmwtu=");
      assertEquals(false, boolean0);
  }

  @Test
  public void test33()  throws Throwable  {
      boolean boolean0 = TokenStream.isKeyword("KqFCib");
      assertEquals(false, boolean0);
  }

  @Test
  public void test34()  throws Throwable  {
      boolean boolean0 = TokenStream.isKeyword("Q6+DEaW");
      assertEquals(false, boolean0);
  }

  @Test
  public void test35()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Parser parser0 = new Parser(compilerEnvirons0, (ErrorReporter) toolErrorReporter0);
      // Undeclared exception!
      try {
        parser0.parse("@Rhiv~m)J_]X", "@Rhiv~m)J_]X", (-192));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * -192
         */
      }
  }

  @Test
  public void test36()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      // Undeclared exception!
      try {
        Context.getContext();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * No Context associated with current Thread
         */
      }
  }

  @Test
  public void test37()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Parser parser0 = new Parser(compilerEnvirons0, (ErrorReporter) toolErrorReporter0);
      StringReader stringReader0 = new StringReader("Ja>0:_:");
      // Undeclared exception!
      try {
        parser0.parse((Reader) stringReader0, "+xgfSwT{", (-1598));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * -1598
         */
      }
  }

  @Test
  public void test38()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      ErrorReporter errorReporter0 = compilerEnvirons0.getErrorReporter();
      Parser parser0 = new Parser(compilerEnvirons0, errorReporter0);
      TokenStream tokenStream0 = new TokenStream(parser0, (Reader) null, "/", 0);
      assertNotNull(tokenStream0);
      
      int int0 = tokenStream0.getToken();
      assertEquals(1, tokenStream0.getOffset());
      assertEquals(0, int0);
  }

  @Test
  public void test39()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      Parser parser0 = new Parser(compilerEnvirons0, (ErrorReporter) toolErrorReporter0);
      // Undeclared exception!
      try {
        parser0.parse("<{++ ]", "<{++ ]", 0);
        fail("Expecting exception: EvaluatorException");
      } catch(EvaluatorException e) {
        /*
         * Compilation produced 2 syntax errors.
         */
      }
  }

  @Test
  public void test40()  throws Throwable  {
      TokenStream tokenStream0 = new TokenStream((Parser) null, (Reader) null, "^v%`ioc)|le'q2-jCD", 1199);
      assertNotNull(tokenStream0);
      
      int int0 = tokenStream0.getToken();
      assertEquals(18, tokenStream0.getOffset());
      assertEquals(0, int0);
  }

  @Test
  public void test41()  throws Throwable  {
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      Parser parser0 = new Parser((CompilerEnvirons) null, (ErrorReporter) toolErrorReporter0);
      TokenStream tokenStream0 = new TokenStream(parser0, (Reader) null, "(Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;Lorg/mozilla/javascript/Scriptable;[Ljava/lang/Object;)Ljava/lang/Object;", 0);
      assertNotNull(tokenStream0);
      
      // Undeclared exception!
      try {
        tokenStream0.readRegExp(99);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test42()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      ErrorReporter errorReporter0 = compilerEnvirons0.getErrorReporter();
      Parser parser0 = new Parser(compilerEnvirons0, errorReporter0);
      char[] charArray0 = new char[21];
      charArray0[0] = '\u0081';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      // Undeclared exception!
      try {
        parser0.parse((Reader) charArrayReader0, (String) null, (int) 'D');
        fail("Expecting exception: EvaluatorException");
      } catch(EvaluatorException e) {
        /*
         * illegal character
         */
      }
  }

  @Test
  public void test43()  throws Throwable  {
      boolean boolean0 = TokenStream.isJSSpace(11);
      assertEquals(true, boolean0);
  }

  @Test
  public void test44()  throws Throwable  {
      TokenStream tokenStream0 = new TokenStream((Parser) null, (Reader) null, "catch", 8232);
      assertNotNull(tokenStream0);
      
      // Undeclared exception!
      try {
        tokenStream0.readRegExp(8232);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * FAILED ASSERTION
         */
      }
  }

  @Test
  public void test45()  throws Throwable  {
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      Parser parser0 = new Parser((CompilerEnvirons) null, (ErrorReporter) toolErrorReporter0);
      TokenStream tokenStream0 = new TokenStream(parser0, (Reader) null, "xVO>Euo", 0);
      assertNotNull(tokenStream0);
      
      // Undeclared exception!
      try {
        tokenStream0.readRegExp(99);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test46()  throws Throwable  {
      TokenStream tokenStream0 = new TokenStream((Parser) null, (Reader) null, "for ", 184);
      assertNotNull(tokenStream0);
      
      // Undeclared exception!
      try {
        tokenStream0.getFirstXMLToken();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test47()  throws Throwable  {
      TokenStream tokenStream0 = new TokenStream((Parser) null, (Reader) null, "YYEz%5]O='yx>oz", 0);
      assertNotNull(tokenStream0);
      
      // Undeclared exception!
      try {
        tokenStream0.getFirstXMLToken();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test48()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Parser parser0 = new Parser(compilerEnvirons0, (ErrorReporter) toolErrorReporter0);
      TokenStream tokenStream0 = new TokenStream(parser0, (Reader) null, "zOt>G&C#,88Pd", (-192));
      assertNotNull(tokenStream0);
      
      // Undeclared exception!
      try {
        tokenStream0.getFirstXMLToken();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test49()  throws Throwable  {
      TokenStream tokenStream0 = new TokenStream((Parser) null, (Reader) null, "%{9N//(5V ", 667);
      assertNotNull(tokenStream0);
      
      tokenStream0.getNextXMLToken();
      assertEquals(2, tokenStream0.getOffset());
      assertEquals(84, tokenStream0.getToken());
  }

  @Test
  public void test50()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      ErrorReporter errorReporter0 = compilerEnvirons0.getErrorReporter();
      Parser parser0 = new Parser(compilerEnvirons0, errorReporter0);
      char[] charArray0 = new char[7];
      charArray0[0] = '!';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      TokenStream tokenStream0 = new TokenStream(parser0, (Reader) charArrayReader0, (String) null, (-24));
      // Undeclared exception!
      try {
        tokenStream0.getFirstXMLToken();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test51()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      Context.getCurrentContext();
  }

  @Test
  public void test52()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      ErrorReporter errorReporter0 = compilerEnvirons0.getErrorReporter();
      Parser parser0 = new Parser(compilerEnvirons0, errorReporter0);
      char[] charArray0 = new char[21];
      charArray0[1] = '\u0081';
      charArray0[0] = '!';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      // Undeclared exception!
      try {
        parser0.parse((Reader) charArrayReader0, (String) null, (int) 'D');
        fail("Expecting exception: EvaluatorException");
      } catch(EvaluatorException e) {
        /*
         * illegal character
         */
      }
  }
}
