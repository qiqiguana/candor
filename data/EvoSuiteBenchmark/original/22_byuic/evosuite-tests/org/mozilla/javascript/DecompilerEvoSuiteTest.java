/*
 * This file was automatically generated by EvoSuite
 */

package org.mozilla.javascript;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import org.mozilla.javascript.Decompiler;
import org.mozilla.javascript.UintMap;

@RunWith(EvoSuiteRunner.class)
public class DecompilerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Decompiler decompiler0 = new Decompiler();
      assertNotNull(decompiler0);
      
      decompiler0.addString("");
      assertEquals(2, decompiler0.getCurrentOffset());
      assertEquals(")\u0000", decompiler0.getEncodedSource());
  }

  @Test
  public void test1()  throws Throwable  {
      Decompiler decompiler0 = new Decompiler();
      assertNotNull(decompiler0);
      
      int int0 = decompiler0.markFunctionStart(29);
      assertEquals("l\u001D", decompiler0.getEncodedSource());
      assertEquals(0, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      UintMap uintMap0 = new UintMap();
      String string0 = Decompiler.decompile("h\u0001'\u0001ph\u0017\u0001", 129, uintMap0);
      assertNotNull(string0);
      assertEquals("p &&  * \n", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      Decompiler decompiler0 = new Decompiler();
      assertNotNull(decompiler0);
      
      String string0 = decompiler0.getEncodedSource();
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      Decompiler decompiler0 = new Decompiler();
      assertNotNull(decompiler0);
      
      // Undeclared exception!
      try {
        decompiler0.addToken((-2));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      Decompiler decompiler0 = new Decompiler();
      assertNotNull(decompiler0);
      
      // Undeclared exception!
      try {
        decompiler0.addToken(168);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      Decompiler decompiler0 = new Decompiler();
      assertNotNull(decompiler0);
      
      // Undeclared exception!
      try {
        decompiler0.addEOL((-845));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      Decompiler decompiler0 = new Decompiler();
      assertNotNull(decompiler0);
      
      decompiler0.addEOL(7);
      assertEquals(2, decompiler0.getCurrentOffset());
      assertEquals("\u0007\u0001", decompiler0.getEncodedSource());
  }

  @Test
  public void test8()  throws Throwable  {
      Decompiler decompiler0 = new Decompiler();
      assertNotNull(decompiler0);
      
      // Undeclared exception!
      try {
        decompiler0.addEOL(196);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      Decompiler decompiler0 = new Decompiler();
      assertNotNull(decompiler0);
      
      // Undeclared exception!
      try {
        decompiler0.addNumber((-1.0));
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * FAILED ASSERTION
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      Decompiler decompiler0 = new Decompiler();
      assertNotNull(decompiler0);
      
      decompiler0.addNumber(1059.5218483225392);
      assertEquals("(D\u4090\u8E16\u5F68\u1B1D", decompiler0.getEncodedSource());
      assertEquals(6, decompiler0.getCurrentOffset());
  }

  @Test
  public void test11()  throws Throwable  {
      Decompiler decompiler0 = new Decompiler();
      assertNotNull(decompiler0);
      
      decompiler0.addNumber((double) 43);
      assertEquals(3, decompiler0.getCurrentOffset());
      assertEquals("(S+", decompiler0.getEncodedSource());
  }

  @Test
  public void test12()  throws Throwable  {
      Decompiler decompiler0 = new Decompiler();
      assertNotNull(decompiler0);
      
      decompiler0.addNumber(1.000000000000002E16);
      assertEquals(6, decompiler0.getCurrentOffset());
      assertEquals("(J#\u86F2\u6FC1\u0014", decompiler0.getEncodedSource());
  }

  @Test
  public void test13()  throws Throwable  {
      Decompiler decompiler0 = new Decompiler();
      decompiler0.addRegexp("", "");
      decompiler0.addRegexp("(Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;ILjava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", "(Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;ILjava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
      int int0 = decompiler0.markFunctionEnd(1787);
      assertEquals(257, decompiler0.getCurrentOffset());
      assertEquals(256, int0);
  }

  @Test
  public void test14()  throws Throwable  {
      Decompiler decompiler0 = new Decompiler();
      decompiler0.addName("");
      decompiler0.addRegexp("", "");
      decompiler0.addRegexp("(Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;ILjava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", "(Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;ILjava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
      assertEquals("'\u00000\u0002//0\u00FA/(Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;ILjava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;/(Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;ILjava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", decompiler0.getEncodedSource());
      assertEquals(258, decompiler0.getCurrentOffset());
  }

  @Test
  public void test15()  throws Throwable  {
      UintMap uintMap0 = new UintMap();
      String string0 = Decompiler.decompile("", 1229, uintMap0);
      assertEquals("", string0);
  }

  @Test
  public void test16()  throws Throwable  {
      UintMap uintMap0 = new UintMap(11);
      // Undeclared exception!
      try {
        Decompiler.decompile(" D#", 11, uintMap0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Token: 68
         */
      }
  }

  @Test
  public void test17()  throws Throwable  {
      UintMap uintMap0 = new UintMap();
      uintMap0.put(1, 1);
      // Undeclared exception!
      try {
        Decompiler.decompile("gj({Z^?G#.>*eVRE;", 1, uintMap0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
      }
  }

  @Test
  public void test18()  throws Throwable  {
      UintMap uintMap0 = new UintMap(1426);
      String string0 = Decompiler.decompile("\tat ", 1287, uintMap0);
      assertNotNull(string0);
      assertEquals(" |  -= while typeof ", string0);
  }

  @Test
  public void test19()  throws Throwable  {
      UintMap uintMap0 = new UintMap();
      // Undeclared exception!
      try {
        Decompiler.decompile("\n /=  -= default ? typeof \n", 0, uintMap0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Token: 61
         */
      }
  }

  @Test
  public void test20()  throws Throwable  {
      UintMap uintMap0 = new UintMap();
      String string0 = Decompiler.decompile("(D\u409B\u2E42\u7068\uE403h\u0001'\u0001p\u0011\u0001\u00A0", 141, uintMap0);
      assertEquals("p >= \n", string0);
      assertNotNull(string0);
  }

  @Test
  public void test21()  throws Throwable  {
      UintMap uintMap0 = new UintMap(27);
      String string0 = Decompiler.decompile("l\u0458(J#\u86F2\u6FC1\u0014'\u0011N6D]{Yulrh&F9.FT2l\u0000\u001B\u0001(S\u001B0$/N6D]{Yulrh&F9.FT2/N6D]{Yulrh&F9.FT2", 0, uintMap0);
      assertEquals("\nfunction 10000000000000020N6D]{Yulrh&F9.FT2function ~\n27/N6D]{Yulrh&F9.FT2/N6D]{Yulrh&F9.FT2\n", string0);
      assertNotNull(string0);
  }

  @Test
  public void test22()  throws Throwable  {
      UintMap uintMap0 = new UintMap();
      // Undeclared exception!
      try {
        Decompiler.decompile("(D)LjaWa/la!g/Doublj;", (-3), uintMap0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Token: 33
         */
      }
  }

  @Test
  public void test23()  throws Throwable  {
      UintMap uintMap0 = new UintMap();
      // Undeclared exception!
      try {
        Decompiler.decompile("`S\"AQ:", 0, uintMap0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Token: 34
         */
      }
  }

  @Test
  public void test24()  throws Throwable  {
      UintMap uintMap0 = new UintMap(16);
      // Undeclared exception!
      try {
        Decompiler.decompile("Ux#-$2PpUQ{BO~o", 16, uintMap0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Token: 35
         */
      }
  }

  @Test
  public void test25()  throws Throwable  {
      UintMap uintMap0 = new UintMap();
      // Undeclared exception!
      try {
        Decompiler.decompile("2$wU6", (-26), uintMap0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Token: 36
         */
      }
  }

  @Test
  public void test26()  throws Throwable  {
      UintMap uintMap0 = new UintMap(1);
      // Undeclared exception!
      try {
        Decompiler.decompile("vU% ijU", 1, uintMap0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Token: 37
         */
      }
  }

  @Test
  public void test27()  throws Throwable  {
      UintMap uintMap0 = new UintMap(1256);
      // Undeclared exception!
      try {
        Decompiler.decompile("\n && \n && \n\",:r%U-`-wdj\"\n", 141, uintMap0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Token: 38
         */
      }
  }

  @Test
  public void test28()  throws Throwable  {
      UintMap uintMap0 = new UintMap();
      String string0 = Decompiler.decompile(")\u000B,:r%U-`-wdj(STT\u0001)\u000B,:r%U-`-wdj\u00A0", 168, uintMap0);
      assertNotNull(string0);
      assertEquals("\n\",:r%U-`-wdj\"84{\n    \",:r%U-`-wdj\"\n", string0);
  }

  @Test
  public void test29()  throws Throwable  {
      UintMap uintMap0 = new UintMap(0);
      String string0 = Decompiler.decompile("yP*^.x", 0, uintMap0);
      assertNotNull(string0);
      assertEquals("\nvar try null >>=  === continue\n", string0);
  }

  @Test
  public void test30()  throws Throwable  {
      UintMap uintMap0 = new UintMap(38);
      // Undeclared exception!
      try {
        Decompiler.decompile("Hz+?k*Z2jLBfw?S_T", 768, uintMap0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Token: 63
         */
      }
  }

  @Test
  public void test31()  throws Throwable  {
      UintMap uintMap0 = new UintMap(0);
      // Undeclared exception!
      try {
        Decompiler.decompile("*xa,vGOmh=>UDRIS", 921, uintMap0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Token: 71
         */
      }
  }

  @Test
  public void test32()  throws Throwable  {
      UintMap uintMap0 = new UintMap();
      // Undeclared exception!
      try {
        Decompiler.decompile("[-`&?D0H/n", (-16), uintMap0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Token: 127
         */
      }
  }

  @Test
  public void test33()  throws Throwable  {
      UintMap uintMap0 = new UintMap(0);
      // Undeclared exception!
      try {
        Decompiler.decompile("}eSc1aaU\\", 0, uintMap0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Token: 49
         */
      }
  }

  @Test
  public void test34()  throws Throwable  {
      UintMap uintMap0 = new UintMap();
      // Undeclared exception!
      try {
        Decompiler.decompile("4.X /|\u0003(~RI", (-1887), uintMap0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Token: 3
         */
      }
  }

  @Test
  public void test35()  throws Throwable  {
      UintMap uintMap0 = new UintMap(0);
      String string0 = Decompiler.decompile(" r5*", 0, uintMap0);
      assertNotNull(string0);
      assertEquals("\ntypeof case  instanceof null\n", string0);
  }

  @Test
  public void test36()  throws Throwable  {
      UintMap uintMap0 = new UintMap();
      // Undeclared exception!
      try {
        Decompiler.decompile("6N {{E&LsjN{C17m^9-", 0, uintMap0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Token: 54
         */
      }
  }

  @Test
  public void test37()  throws Throwable  {
      UintMap uintMap0 = new UintMap(1105);
      // Undeclared exception!
      try {
        Decompiler.decompile("qlGf7[<NCars3Erj6", 0, uintMap0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Token: 55
         */
      }
  }

  @Test
  public void test38()  throws Throwable  {
      UintMap uintMap0 = new UintMap();
      // Undeclared exception!
      try {
        Decompiler.decompile("B8BNM", 1095, uintMap0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Token: 56
         */
      }
  }

  @Test
  public void test39()  throws Throwable  {
      UintMap uintMap0 = new UintMap(146);
      // Undeclared exception!
      try {
        Decompiler.decompile("Qk*9;N", 146, uintMap0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Token: 57
         */
      }
  }

  @Test
  public void test40()  throws Throwable  {
      UintMap uintMap0 = new UintMap();
      // Undeclared exception!
      try {
        Decompiler.decompile(":%", 1654, uintMap0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Token: 58
         */
      }
  }

  @Test
  public void test41()  throws Throwable  {
      UintMap uintMap0 = new UintMap(18);
      // Undeclared exception!
      try {
        Decompiler.decompile("ei[U}YU>S!L", (-1804), uintMap0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Token: 62
         */
      }
  }

  @Test
  public void test42()  throws Throwable  {
      UintMap uintMap0 = new UintMap(0);
      // Undeclared exception!
      try {
        Decompiler.decompile("@%}V%gNv|b;8F9", 1789, uintMap0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Token: 64
         */
      }
  }

  @Test
  public void test43()  throws Throwable  {
      UintMap uintMap0 = new UintMap();
      // Undeclared exception!
      try {
        Decompiler.decompile(".refCall() returned null", (-352), uintMap0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Token: 67
         */
      }
  }

  @Test
  public void test44()  throws Throwable  {
      UintMap uintMap0 = new UintMap();
      // Undeclared exception!
      try {
        Decompiler.decompile("wrapRegExp", 1000, uintMap0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Token: 69
         */
      }
  }

  @Test
  public void test45()  throws Throwable  {
      String string0 = "pRkU\\uXFr";
      int int0 = 114;
      UintMap uintMap0 = new UintMap();
      // Undeclared exception!
      try {
        Decompiler.decompile(string0, int0, uintMap0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Token: 70
         */
      }
  }

  @Test
  public void test46()  throws Throwable  {
      UintMap uintMap0 = new UintMap();
      // Undeclared exception!
      try {
        Decompiler.decompile("frI?7qij-nF(a:r%q3e", (-129), uintMap0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Token: 73
         */
      }
  }

  @Test
  public void test47()  throws Throwable  {
      UintMap uintMap0 = new UintMap();
      // Undeclared exception!
      try {
        Decompiler.decompile("*VUsRJ", 1786, uintMap0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Token: 74
         */
      }
  }

  @Test
  public void test48()  throws Throwable  {
      UintMap uintMap0 = new UintMap();
      // Undeclared exception!
      try {
        Decompiler.decompile("g{+KP xO", (-1527), uintMap0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Token: 75
         */
      }
  }

  @Test
  public void test49()  throws Throwable  {
      UintMap uintMap0 = new UintMap();
      // Undeclared exception!
      try {
        Decompiler.decompile("LvcjW*Kx}[o", 0, uintMap0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Token: 76
         */
      }
  }

  @Test
  public void test50()  throws Throwable  {
      UintMap uintMap0 = new UintMap();
      // Undeclared exception!
      try {
        Decompiler.decompile("^Z2jw{M", 15, uintMap0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Token: 77
         */
      }
  }

  @Test
  public void test51()  throws Throwable  {
      UintMap uintMap0 = new UintMap(27);
      // Undeclared exception!
      try {
        Decompiler.decompile("N6D]{Yulrh&F9.FT2", 72, uintMap0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Token: 78
         */
      }
  }

  @Test
  public void test52()  throws Throwable  {
      UintMap uintMap0 = new UintMap(167);
      // Undeclared exception!
      try {
        Decompiler.decompile("Oe", 407, uintMap0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Token: 79
         */
      }
  }

  @Test
  public void test53()  throws Throwable  {
      UintMap uintMap0 = new UintMap(0);
      // Undeclared exception!
      try {
        Decompiler.decompile("_Bp^]VWTyd(/+Q2>", 0, uintMap0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
      }
  }

  @Test
  public void test54()  throws Throwable  {
      UintMap uintMap0 = new UintMap(1);
      String string0 = Decompiler.decompile("vUSbU ijU", 1, uintMap0);
      assertEquals("\nfor }] *= }typeof ++--}", string0);
      assertNotNull(string0);
  }

  @Test
  public void test55()  throws Throwable  {
      UintMap uintMap0 = new UintMap();
      // Undeclared exception!
      try {
        Decompiler.decompile("org.mozilla.javascript.optimizer.Codegen", 1789, uintMap0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Token: 109
         */
      }
  }

  @Test
  public void test56()  throws Throwable  {
      UintMap uintMap0 = new UintMap();
      // Undeclared exception!
      try {
        Decompiler.decompile("(D)Ljava/lang/Double;", 0, uintMap0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Token: 110
         */
      }
  }

  @Test
  public void test57()  throws Throwable  {
      UintMap uintMap0 = new UintMap();
      // Undeclared exception!
      try {
        Decompiler.decompile("T~'z%AC<>e*+&c(z", (-7), uintMap0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Token: 126
         */
      }
  }

  @Test
  public void test58()  throws Throwable  {
      UintMap uintMap0 = new UintMap(1256);
      String string0 = Decompiler.decompile("h\u0001h\u0001)\u000B,:r%U-`-wdj\u00A0", 135, uintMap0);
      assertEquals(" &&  && \",:r%U-`-wdj\"", string0);
      assertNotNull(string0);
  }
}
