/*
 * GNU GENERAL PUBLIC LICENSE
 * Version 3, 29 June 2007
 * 
 * Copyright (C) 2010, vlad
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * RequestParamsFrame.java
 *
 * Created on 22.03.2010, 12:53:49
 */
package httpanalyzer;

import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.http.NameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.protocol.HTTP;

/**
 *
 * @author vlad
 */
public class RequestParamsDialog extends javax.swing.JDialog {

    private static boolean dataChanged;
    private static String paramsString;
    private static HashMap<String, String> letterMap;

    /** Creates new form RequestParamsFrame */
    public RequestParamsDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        initLetterMap();
    }

    private void initLetterMap() {
        letterMap = new HashMap<String, String>();
        letterMap.put("<", "%3C");
        letterMap.put(">", "%3E");
        letterMap.put("~", "%7E");
        letterMap.put(".", "%2E");
        letterMap.put("\"", "%22");
        letterMap.put("{", "%7B");
        letterMap.put("}", "%7D");
        letterMap.put("|", "%7C");
        letterMap.put("\\", "%5C");
        letterMap.put("-", "%2D");
        letterMap.put("`", "%60");
        letterMap.put("_", "%5F");
        letterMap.put("^", "%5E");
        letterMap.put("!", "%21");
        letterMap.put("*", "%2A");
        letterMap.put("'", "%27");
        letterMap.put("(", "%28");
        letterMap.put(")", "%29");
        letterMap.put(";", "%3B");
        letterMap.put(":", "%3A");
        letterMap.put("@", "%40");
        letterMap.put("&", "%26");
        letterMap.put("=", "%3D");
        letterMap.put("+", "%2B");
        letterMap.put("$", "%24");
        letterMap.put(",", "%2C");
        letterMap.put("/", "%2F");
        letterMap.put("?", "%3F");
        letterMap.put("%", "%25");
        letterMap.put("#", "%23");
        letterMap.put("[", "%5B");
        letterMap.put("]", "%5D");
        letterMap.put(" ", "%20");
    }

    private String encodingString(String baseLine) {
        StringBuffer resString = new StringBuffer();
        for (int i = 0; i < baseLine.length(); i++) {
            String aLetter = baseLine.substring(i, i + 1);
            //System.out.println("roman letter ="+letterMap.get(aLetter));
            String str = letterMap.get(aLetter);
            if (str == null) {
                str = aLetter;
            }
            resString.append(str);
        }
        return resString.toString();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        paramsScrollPane = new javax.swing.JScrollPane();
        paramsTextArea = new javax.swing.JTextArea();
        encodeLabel = new javax.swing.JLabel();
        decodeLabel = new javax.swing.JLabel();
        applyButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        encodeTextField = new javax.swing.JTextField();
        decodeTextField = new javax.swing.JTextField();
        rawCheckBox = new javax.swing.JCheckBox();

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(httpanalyzer.HttpAnalyzerApp.class).getContext().getResourceMap(RequestParamsDialog.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setIconImage(null);
        setLocationByPlatform(true);
        setName("Form"); // NOI18N

        paramsScrollPane.setName("paramsScrollPane"); // NOI18N

        paramsTextArea.setColumns(20);
        paramsTextArea.setFont(resourceMap.getFont("paramsTextArea.font")); // NOI18N
        paramsTextArea.setRows(5);
        paramsTextArea.setTabSize(0);
        paramsTextArea.setText(resourceMap.getString("paramsTextArea.text")); // NOI18N
        paramsTextArea.setFocusCycleRoot(true);
        paramsTextArea.setName("paramsTextArea"); // NOI18N
        paramsScrollPane.setViewportView(paramsTextArea);

        encodeLabel.setFont(resourceMap.getFont("encodeLabel.font")); // NOI18N
        encodeLabel.setText(resourceMap.getString("encodeLabel.text")); // NOI18N
        encodeLabel.setName("encodeLabel"); // NOI18N

        decodeLabel.setFont(resourceMap.getFont("decodeLabel.font")); // NOI18N
        decodeLabel.setText(resourceMap.getString("decodeLabel.text")); // NOI18N
        decodeLabel.setName("decodeLabel"); // NOI18N

        applyButton.setFont(resourceMap.getFont("applyButton.font")); // NOI18N
        applyButton.setIcon(resourceMap.getIcon("applyButton.icon")); // NOI18N
        applyButton.setMnemonic('A');
        applyButton.setText(resourceMap.getString("applyButton.text")); // NOI18N
        applyButton.setToolTipText(resourceMap.getString("applyButton.toolTipText")); // NOI18N
        applyButton.setName("applyButton"); // NOI18N
        applyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyButtonActionPerformed(evt);
            }
        });

        cancelButton.setFont(resourceMap.getFont("cancelButton.font")); // NOI18N
        cancelButton.setIcon(resourceMap.getIcon("cancelButton.icon")); // NOI18N
        cancelButton.setMnemonic('n');
        cancelButton.setText(resourceMap.getString("cancelButton.text")); // NOI18N
        cancelButton.setToolTipText(resourceMap.getString("cancelButton.toolTipText")); // NOI18N
        cancelButton.setName("cancelButton"); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        encodeTextField.setText(resourceMap.getString("encodeTextField.text")); // NOI18N
        encodeTextField.setName("encodeTextField"); // NOI18N
        encodeTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                encodeTextFieldKeyReleased(evt);
            }
        });

        decodeTextField.setText(resourceMap.getString("decodeTextField.text")); // NOI18N
        decodeTextField.setName("decodeTextField"); // NOI18N

        rawCheckBox.setFont(resourceMap.getFont("rawCheckBox.font")); // NOI18N
        rawCheckBox.setText(resourceMap.getString("rawCheckBox.text")); // NOI18N
        rawCheckBox.setToolTipText(resourceMap.getString("rawCheckBox.toolTipText")); // NOI18N
        rawCheckBox.setFocusable(false);
        rawCheckBox.setName("rawCheckBox"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rawCheckBox)
                    .addComponent(paramsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(applyButton)
                        .addGap(18, 18, 18)
                        .addComponent(cancelButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(encodeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(encodeTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(decodeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(decodeTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rawCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paramsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(encodeLabel)
                    .addComponent(encodeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(decodeLabel)
                    .addComponent(decodeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(applyButton)
                    .addComponent(cancelButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-361)/2, (screenSize.height-360)/2, 361, 360);
    }// </editor-fold>//GEN-END:initComponents

    private void applyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyButtonActionPerformed
        // TODO Set Settings();
        //
        dataChanged = true;
        String preString = paramsTextArea.getText().replace("\n", "&");
        if (rawCheckBox.isSelected()) {
            paramsString = preString;
        } else {
            InputStream inStream = null;
            try {
                List<NameValuePair> qparams = null;
                qparams = new ParamsUrlTools().getPairParams(preString);
                UrlEncodedFormEntity postEntityParams = null;
                try {
                    postEntityParams = new UrlEncodedFormEntity(qparams, HTTP.UTF_8);
                } catch (UnsupportedEncodingException ex) {
                    Logger.getLogger(RequestParamsDialog.class.getName()).log(Level.SEVERE, null, ex);
                }
                inStream = postEntityParams.getContent();
                // Read and display response.
                int c = 0;
                StringBuffer strBuf = new StringBuffer();
                while ((c = inStream.read()) != -1) {
                    strBuf.append((char) c);
                }
                //qparams = RequestParamsDialog.getRequestParams();
                paramsString = strBuf.toString();
            } catch (IOException ex) {
                Logger.getLogger(RequestParamsDialog.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    inStream.close();
                } catch (IOException ex) {
                    Logger.getLogger(RequestParamsDialog.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        setVisible(false);
    }//GEN-LAST:event_applyButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        dataChanged = false;
        setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void encodeTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_encodeTextFieldKeyReleased
        decodeTextField.setText(encodingString(encodeTextField.getText()));
    }//GEN-LAST:event_encodeTextFieldKeyReleased

    public static String getRequestParams() {
        return "&" + paramsString;
    }

    public static boolean isDataChanged() {
        return dataChanged;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                RequestParamsDialog dialog = new RequestParamsDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton applyButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel decodeLabel;
    private javax.swing.JTextField decodeTextField;
    private javax.swing.JLabel encodeLabel;
    private javax.swing.JTextField encodeTextField;
    private javax.swing.JScrollPane paramsScrollPane;
    private javax.swing.JTextArea paramsTextArea;
    private javax.swing.JCheckBox rawCheckBox;
    // End of variables declaration//GEN-END:variables
}
