package org.heal.module.notice;

import org.heal.module.user.UserBean;
import org.heal.module.user.UserRegistryBean;

import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.Properties;
import java.util.Vector;

/**
 * 
 *
 * @author Seth Wright
 * @version 0.1
 * @modify Jason Varghese
 */

public class NotificationServicesBean implements Serializable {
    //The subject header for all outgoing messages generated by the system
    private static final String MAILER = "Health Education Assets Library Notification System";
    //the address to use when sending messages
    private InternetAddress healAddress = null;  
    //array containing one element - the above healAddress;
    private InternetAddress[] healAddressArray = new InternetAddress[1];  
    //the address of the smtp host, if null, localhost is used
    private String mailhost = null; 
    //the username to use when attempting to log into the smtp server to send
    private String mailuser = null;
    //the password to use when attempting to log into the smtp server to send
    private String mailpassword = null;
    //The session to use for generating all of our outgoing messages
    private Session session = null;
    //The java bean/module used for getting the user information
    UserRegistryBean userRegistry = null;


    /**
     * Sets the mailhost setting and also gets a new Session object.
     * The mailhost setting is used to determine what server to connect to
     * in order to send our mail.
     */
    public void setMailhost(String newMailhost) {
        mailhost = newMailhost;
        Properties props = System.getProperties();

        // XXX - could use Session.getTransport() and Transport.connect()
        // XXX - assume we're using SMTP
        if (mailhost != null) {
            props.put("mail.smtp.host", mailhost);
        }
        session =  Session.getDefaultInstance(props, null);
        session.setDebug(false);
    }

    /**
     * Sets the mail user name of the account used to send emails from the
     * heal notification system.
     */
    public void setMailUser(String newUserName) {
        mailuser = newUserName;
    }

    /**
     * Sets the mail password of the account used to send emails from the
     * heal notification system.
     */
    public void setMailPassword(String newMailPassword) {
        mailpassword = newMailPassword;
    }

    /**
     * Sets the module used by the notification services to get user
     * information such as the list of admin users and the list of 
     * subscribers for receiving HEAL notices.
     */
    public void setUserRegistry(UserRegistryBean newRegistry) {
        userRegistry = newRegistry;
    }

    /**
     * Returns the mailhost setting
     */
    public String getMailhost() {
        return mailhost;
    }

    /**
     * Sets the address used as the "From" header for all outgoing messages.
     */
    public void setHealAddress(InternetAddress address) {
        healAddress = address;
        healAddressArray[0] = healAddress;
    }
    
    /**
     * Returns the address used as the from header for outgoing messages.
     */
    public InternetAddress getHealAddress() {
        return healAddress;
    }

    /**
     * Given an array of user <B>names</B>, sends the given message text to
     * each user's email address if one is found in the user database.
     * Returns true if no errors occur (even if none of the users have email
     * addresses in the database).
     */
    public boolean sendEmailToUsers(String[] userNames, String messageBody) throws MessagingException {
        boolean result = false;
        if (userNames == null || messageBody == null) {
            return false;
        }
        StringBuffer addressBuffer = null;
        String currAddress;
        ArrayList emailAddresses = userRegistry.getEmailAddresses(userNames);
        if (emailAddresses != null) {
            Iterator emailIterator = emailAddresses.iterator();
            while (emailIterator.hasNext()) {
                currAddress = (String)emailIterator.next();
                if (addressBuffer != null) {
                    addressBuffer.append(","+currAddress);
                } else {
                addressBuffer = new StringBuffer(currAddress);
                }
            }
        }
        if (addressBuffer != null) {
            result = sendUserNotice(addressBuffer.toString(),messageBody);
        }
        return result;
    }

    /**
     * Given a comma-delimited list of <B>addresses</B> and a message body,
     * sends the given message to all users specified in the list.
     * If the message is successfully sent true is returned.  If an 
     * error occurs, false is returned.
     */
    public boolean sendUserNotice(String userAddresses, String messageBody) throws MessagingException {
        boolean result = false;
        if (userAddresses == null || messageBody == null) {
            return false;
        }
        try {
            InternetAddress[] addrs = InternetAddress.parse(userAddresses,false);
            if (addrs != null) {
                result = sendEmail(addrs,messageBody, MAILER);
            }
        } 
        catch (AddressException adex) {
            adex.printStackTrace();
            result = false;
        } 
        return result;
    }

    /**
     * Looks up the list of all admin users in the database (via the 
     * user registry bean) and then sends a message with the given
     * body to all of them.
     */
    public boolean sendAdminNotice(String messageBody) throws MessagingException {
        if (messageBody == null || userRegistry == null) {
            return false;
        }
        ArrayList addressList = userRegistry.getAdminEmailAddresses();
        return sendToList(addressList, messageBody);
    }

    /**
     * Looks up the list of all subscribed users in the database (via the 
     * user registry bean) and then sends a message with the given
     * body to all of them.
     */
    public boolean sendToList(String messageBody) throws MessagingException {
        if (messageBody == null || userRegistry == null) {
            return false;
        }
        ArrayList addressList = userRegistry.getSubscriberEmailAddresses();
        return sendToList(addressList, messageBody);
    }

    /**
     * Given an ArrayList of Strings containing email addresses, this
     * method sends an email with the given body to each address in 
     * the list.  If an error occurs, this returns false, otherwise
     * it returns true.
     */
    public boolean sendToList(ArrayList addressList, String messageBody) throws MessagingException{
        boolean result = false;
        try {
            if (addressList == null || addressList.size() == 0) {
                /* Well, we didn't need to send it to anyone, 
                * so we succeeded - sort of.
                */
                result = true;
            } else {
                Iterator addressIterator = addressList.iterator();
                StringBuffer addressBuffer = new StringBuffer();
                String addressString = (String)addressIterator.next();
                addressBuffer.append(addressString);
                while (addressIterator.hasNext()) {
                    addressString = (String) addressIterator.next();
                    addressBuffer.append(","+addressString);
                }
                addressString = addressBuffer.toString();
                InternetAddress[] toAddrs=InternetAddress.parse(addressString,
								false);
                result = sendEmail(toAddrs,messageBody, MAILER);
            }
        } 
        catch (AddressException adex) {
            adex.printStackTrace();
        }
        return result;
    }
    
    public Vector sendPasswordReminder(UserBean user, String baseURL) throws MessagingException
    {
        String username=null;
        String password=null;
        String message = null;
        Vector errorMessage = new Vector();
        if(user.isLoginModified())
            username = user.getEmail();
		else
            username = user.getUserName();
        password = user.getPassword();
        message = "The following is the registration information you requested." + "\n";
        message = message + "username: "+username+'\n'+"password: "+password+"\n";
        message = message + "Logon at: "+baseURL+"/user/login.jsp" +"\n\n";
        String emailValidationPath = "";
        emailValidationPath = baseURL+"/healapp/emailValidation?emailId="+user.getUserId()+"&email="+user.getEmail();
        if(user.isLoginModified()&&!user.isEmailValidated())
            message = message + "Your registration has not been completed yet.  Please confirm your account by clicking on this link \n"+emailValidationPath+"\n";      
            try{
                InternetAddress[] address = new InternetAddress[1];
                address[0] = new InternetAddress(user.getEmail());
                sendEmail(address,message,"Password Reminder from www.healcentral.org");
            }
            catch (AddressException adex)
            {
                errorMessage.addElement("Invalid Email Address");
            }
      
        return errorMessage;
      
    }
		
    public Vector sendUsernameValidationEmail(UserBean user,String URL) throws MessagingException
    {
        String username=null;
        String password=null;
        String message = null;
        Vector errorMessage = new Vector();
        username = user.getUserName();
        password = user.getPassword();
        message = "We require one final step to confirm your registration with www.healcentral.org." + "\n";
        message = message + "To activate your registration click the following link:\n"+URL+"\n\n\n";
        message = message +"Please note: It is important that you follow through with this final step of confirming your registration.  ";
        message = message +"By not doing so, your status will remain pending and registration with healcentral.org will not be activated.  ";
        message = message +"If you experience problems with the provided link, simply copy the listed link and paste it into the address field within your browser.  ";
        message = message +"For all other questions or concerns please email: info@healcentral.org";
        try{
            InternetAddress[] address = new InternetAddress[1];
            address[0] = new InternetAddress(user.getEmail());
            sendEmail(address,message,"Confirm your account at www.healcentral.org");
        }
        catch (AddressException adex)
        {
            errorMessage.addElement("Invalid Email Address");
        }
        return errorMessage;
      
    }		
		
    
    public Vector sendWelcomeMessage(String email, String URL) throws MessagingException
    {
        String message = null;
        Vector errorMessage = new Vector();
        message = "Your registration is complete.  Welcome to the Health Education Assets Library.  " + "\n";
        message = message + "To join the HEAL mailing list, please access the following URL:\n"+URL+"\n\n";
        message = message +"If you have any questions or concerns please email: info@healcentral.org";
        try{
            InternetAddress[] address = new InternetAddress[1];
            address[0] = new InternetAddress(email);
            sendEmail(address,message,"Welcome to the Health Education Assets Library");
        }
        catch (AddressException adex)
        {
            errorMessage.addElement("Invalid Email Address");
        }
        return errorMessage;
    }   

    /**
     * Given an array of  email addresses and the message
     * body, sends an email containing that body to the specified recipients.
     * The sender is assumed to be the HEAL account specified during
     * initialization (healAddress)
     * Note:
     * If he have no addresses, we generate an error and return false.  
     * If we only have one address, then we simply set that as the TO address.
     * If we have multiple addresses, then we want to hide the
     * addresses from everyone else.  The easiest way to do this
     * is to do a blind carbon copy.  In this case, though we need
     * an initial TO Address still, so we send a copy to ourselves.
     * If this behavior is not desireable, then simply call this 
     * method multiple times with only one address as the parameter.
     */
    public boolean sendEmail(InternetAddress[] toAddresses, String text, String subject) throws MessagingException{
        try {
            if (session == null) {
            throw new MessagingException("No session to use to send a "+
					     "message (session was null)");
            }
            Message msg = new MimeMessage(session);
            /* See method note above. */
            if (toAddresses != null) {
            if (toAddresses.length > 1) {
                msg.setRecipients(Message.RecipientType.TO, 
                        healAddressArray);
                msg.setRecipients(Message.RecipientType.BCC, toAddresses);
            } else {
                msg.setRecipients(Message.RecipientType.TO, toAddresses);
            }
            } else {
                throw new MessagingException("No \"To\" address specified");
            }
	    
            //msg.setSubject(MAILSUBJECT);
            msg.setSubject(subject);      
            msg.setFrom(healAddress);
            msg.setSentDate(new Date());
            msg.setHeader("X-Mailer", MAILER);
            if (text != null) {
                msg.setText(text);
            } else {
                throw new MessagingException("No message text specified");
            }
            msg.saveChanges(); // implicit with send()
            Transport transport = session.getTransport("smtp");
            transport.connect(mailhost, mailuser, mailpassword);
            transport.sendMessage(msg, msg.getAllRecipients());
            transport.close();
        }
        catch (MessagingException ex) {
            ex.printStackTrace();
            throw new MessagingException(ex.toString());
            //return false;
        }
        return true;
    }

    /**
     * Adds the user to the HEAL mailing list.  If an error occurs, this method
     * returns false.  If the user was successfully added, true is returned.
     */
    public boolean addUserToList(String userName) {
    	if (userRegistry == null) {
            return false;
        } else {
            return userRegistry.addUserToSubscribers(userName);
        }
    }

    /**
     * Removes the user from the HEAL mailing list.  If an error occurs, 
     * this method returns false.  If the user was successfully removed, 
     * true is returned.
     */
    public boolean removeUserFromList(String userName) {
        if (userRegistry == null) {
            return false;
        } else {
            return userRegistry.removeUserFromSubscribers(userName);
        }
    }
}
