/*
 * This file was automatically generated by EvoSuite
 */

package org.heal.module.metadata;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.heal.module.metadata.MetadataBean;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MetadataBeanEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      metadataBean0.setTitle("true");
      assertNull(metadataBean0.getContributeDate());
  }

  @Test
  public void test1()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      metadataBean0.setRadiographType("");
      assertNull(metadataBean0.getFileExtension());
  }

  @Test
  public void test2()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      metadataBean0.setDuration("T8;V;7{`Rjk-bVq6Q^");
      assertNull(metadataBean0.getSourceCollection());
  }

  @Test
  public void test3()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      String string0 = metadataBean0.getFileName();
      assertNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      metadataBean0.setPrivate(true);
      assertEquals(true, metadataBean0.isPrivate());
      assertEquals(true, metadataBean0.isHidden());
  }

  @Test
  public void test5()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      metadataBean0.setContributeDate((String) null);
      assertEquals(false, metadataBean0.isCataloged());
  }

  @Test
  public void test6()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      String string0 = metadataBean0.getClinicalHistory();
      assertNull(string0);
  }

  @Test
  public void test7()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      String string0 = metadataBean0.getCatalogDate();
      assertNull(string0);
  }

  @Test
  public void test8()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      metadataBean0.setFileName((String) null);
      assertNull(metadataBean0.getFileExtension());
  }

  @Test
  public void test9()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      String string0 = metadataBean0.getOrientation();
      assertNull(string0);
  }

  @Test
  public void test10()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      String string0 = metadataBean0.getFileWidth();
      assertNull(string0);
  }

  @Test
  public void test11()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      String string0 = metadataBean0.getInappropriate();
      assertNull(string0);
  }

  @Test
  public void test12()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      String string0 = metadataBean0.getMagnification();
      assertNull(string0);
  }

  @Test
  public void test13()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      metadataBean0.setApproveDate("");
      assertEquals(false, metadataBean0.isPrivate());
  }

  @Test
  public void test14()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      metadataBean0.setGlobalId((String) null);
      assertNull(metadataBean0.getAnnotated());
  }

  @Test
  public void test15()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      metadataBean0.setCataloged("");
      assertNull(metadataBean0.getMriType());
  }

  @Test
  public void test16()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      metadataBean0.setArchived(true);
      assertEquals("Metadata: MetadataId:null globalId:null fileName:null fileExtension:null fileSize:null title:null location:null sourceCollection:null contributeUserId:null annotated:false inappropriate:false approved:false cataloged:false archived:true rejected:false hidden:false description:null specimenType:null radiographType:null mriType:null orientation:null magnification:null diseaseProcess:null clinicalHistory:null fileWidth:null fileHeight:null duration:null targetUserGroup:null approveDate:null catalogDate:null rejectDate:null", metadataBean0.toString());
      assertEquals(true, metadataBean0.isArchived());
  }

  @Test
  public void test17()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      String string0 = metadataBean0.getMetadataId();
      assertNull(string0);
  }

  @Test
  public void test18()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      String string0 = metadataBean0.getTitle();
      assertNull(string0);
  }

  @Test
  public void test19()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      metadataBean0.setCataloged(false);
      assertEquals("Metadata: MetadataId:null globalId:null fileName:null fileExtension:null fileSize:null title:null location:null sourceCollection:null contributeUserId:null annotated:false inappropriate:false approved:false cataloged:false archived:false rejected:false hidden:false description:null specimenType:null radiographType:null mriType:null orientation:null magnification:null diseaseProcess:null clinicalHistory:null fileWidth:null fileHeight:null duration:null targetUserGroup:null approveDate:null catalogDate:null rejectDate:null", metadataBean0.toString());
      assertEquals("false", metadataBean0.getCataloged());
  }

  @Test
  public void test20()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      metadataBean0.setApproved(true);
      assertEquals(true, metadataBean0.isApproved());
      assertEquals("Metadata: MetadataId:null globalId:null fileName:null fileExtension:null fileSize:null title:null location:null sourceCollection:null contributeUserId:null annotated:false inappropriate:false approved:true cataloged:false archived:false rejected:false hidden:false description:null specimenType:null radiographType:null mriType:null orientation:null magnification:null diseaseProcess:null clinicalHistory:null fileWidth:null fileHeight:null duration:null targetUserGroup:null approveDate:null catalogDate:null rejectDate:null", metadataBean0.toString());
  }

  @Test
  public void test21()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      String string0 = metadataBean0.getRadiographType();
      assertNull(string0);
  }

  @Test
  public void test22()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      metadataBean0.setRejectDate((String) null);
      assertEquals(false, metadataBean0.isCataloged());
  }

  @Test
  public void test23()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      metadataBean0.setContributeUserId("Metadata: MetadataId:null globalId:null fileName:null fileExtension:null fileSize:null title:null location:null sourceCollection:null contributeUserId:null annotated:false inappropriate:false approved:false cataloged:false archived:false rejected:false hidden:false description:null specimenType:null radiographType:null mriType:null orientation:null magnification:null diseaseProcess:null clinicalHistory:null fileWidth:null fileHeight:null duration:null targetUserGroup:null approveDate:null catalogDate:null rejectDate:null");
      assertNull(metadataBean0.getTargetUserGroup());
  }

  @Test
  public void test24()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      metadataBean0.setLocation((String) null);
      assertNull(metadataBean0.getFileExtension());
  }

  @Test
  public void test25()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      String string0 = metadataBean0.getFileHeight();
      assertNull(string0);
  }

  @Test
  public void test26()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      String string0 = metadataBean0.getAnnotated();
      assertNull(string0);
  }

  @Test
  public void test27()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      String string0 = metadataBean0.getFileSize();
      assertNull(string0);
  }

  @Test
  public void test28()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      String string0 = metadataBean0.getFileExtension();
      assertNull(string0);
  }

  @Test
  public void test29()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      metadataBean0.setSourceCollection("Metadata: MetadataId:null globalId:null fileName:null fileExtension:null fileSize:null title:null location:null sourceCollection:null contributeUserId:null annotated:false inappropriate:false approved:false cataloged:false archived:false rejected:false hidden:false description:null specimenType:null radiographType:null mriType:null orientation:null magnification:null diseaseProcess:null clinicalHistory:null fileWidth:null fileHeight:null duration:null targetUserGroup:null approveDate:null catalogDate:null rejectDate:null");
      assertNull(metadataBean0.getSpecimenType());
  }

  @Test
  public void test30()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      String string0 = metadataBean0.getDuration();
      assertNull(string0);
  }

  @Test
  public void test31()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      metadataBean0.setFileHeight((String) null);
      assertNull(metadataBean0.getLocation());
  }

  @Test
  public void test32()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      String string0 = metadataBean0.getRejected();
      assertNull(string0);
  }

  @Test
  public void test33()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      String string0 = metadataBean0.getPrivate();
      assertNull(string0);
  }

  @Test
  public void test34()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      metadataBean0.setApproved((String) null);
      assertNull(metadataBean0.getLocation());
  }

  @Test
  public void test35()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      String string0 = metadataBean0.getApproveDate();
      assertNull(string0);
  }

  @Test
  public void test36()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      metadataBean0.setOrientation("");
      assertNull(metadataBean0.getContributeUserId());
  }

  @Test
  public void test37()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      String string0 = metadataBean0.getSpecimenType();
      assertNull(string0);
  }

  @Test
  public void test38()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      String string0 = metadataBean0.getApproved();
      assertNull(string0);
  }

  @Test
  public void test39()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      String string0 = metadataBean0.getLocation();
      assertNull(string0);
  }

  @Test
  public void test40()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      metadataBean0.setSpecimenType("KLyn9h<5p");
      assertNull(metadataBean0.getDuration());
  }

  @Test
  public void test41()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      String string0 = metadataBean0.getContributeUserId();
      assertNull(string0);
  }

  @Test
  public void test42()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      metadataBean0.setFileSize((String) null);
      assertNull(metadataBean0.getInappropriate());
  }

  @Test
  public void test43()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      metadataBean0.setAnnotated("");
      assertNull(metadataBean0.getMetadataId());
  }

  @Test
  public void test44()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      metadataBean0.setDiseaseProcess("WPS");
      assertNull(metadataBean0.getCataloged());
  }

  @Test
  public void test45()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      String string0 = metadataBean0.getMriType();
      assertNull(string0);
  }

  @Test
  public void test46()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      String string0 = metadataBean0.getSourceCollection();
      assertNull(string0);
  }

  @Test
  public void test47()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      metadataBean0.setPrivate("");
      String string0 = metadataBean0.toString();
      assertEquals("Metadata: MetadataId:null globalId:null fileName:null fileExtension:null fileSize:null title:null location:null sourceCollection:null contributeUserId:null annotated:false inappropriate:false approved:false cataloged:false archived:false rejected:false hidden:false description:null specimenType:null radiographType:null mriType:null orientation:null magnification:null diseaseProcess:null clinicalHistory:null fileWidth:null fileHeight:null duration:null targetUserGroup:null approveDate:null catalogDate:null rejectDate:null", string0);
      assertNotNull(string0);
  }

  @Test
  public void test48()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      metadataBean0.setFileExtension((String) null);
      assertNull(metadataBean0.getApproveDate());
  }

  @Test
  public void test49()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      String string0 = metadataBean0.getDiseaseProcess();
      assertNull(string0);
  }

  @Test
  public void test50()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      String string0 = metadataBean0.getArchived();
      assertNull(string0);
  }

  @Test
  public void test51()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      String string0 = metadataBean0.getContributeDate();
      assertNull(string0);
  }

  @Test
  public void test52()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      metadataBean0.setArchived("");
      assertNull(metadataBean0.getApproveDate());
  }

  @Test
  public void test53()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      metadataBean0.setClinicalHistory("");
      assertEquals(false, metadataBean0.isAnnotated());
  }

  @Test
  public void test54()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      metadataBean0.setDescription((String) null);
      assertEquals(false, metadataBean0.isCataloged());
  }

  @Test
  public void test55()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      metadataBean0.setMetadataId("Metadata: MetadataId:null globalId:null fileName:null fileExtension:null fileSize:null title:null location:null sourceCollection:null contributeUserId:null annotated:false inappropriate:false approved:false cataloged:false archived:false rejected:false hidden:false description:null specimenType:null radiographType:null mriType:null orientation:null magnification:null diseaseProcess:null clinicalHistory:null fileWidth:null fileHeight:null duration:null targetUserGroup:null approveDate:null catalogDate:null rejectDate:null");
      assertNull(metadataBean0.getSpecimenType());
  }

  @Test
  public void test56()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      metadataBean0.setFileWidth((String) null);
      assertNull(metadataBean0.getRejected());
  }

  @Test
  public void test57()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      metadataBean0.setCatalogDate((String) null);
      assertEquals("Metadata: MetadataId:null globalId:null fileName:null fileExtension:null fileSize:null title:null location:null sourceCollection:null contributeUserId:null annotated:false inappropriate:false approved:false cataloged:false archived:false rejected:false hidden:false description:null specimenType:null radiographType:null mriType:null orientation:null magnification:null diseaseProcess:null clinicalHistory:null fileWidth:null fileHeight:null duration:null targetUserGroup:null approveDate:null catalogDate:null rejectDate:null", metadataBean0.toString());
  }

  @Test
  public void test58()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      String string0 = metadataBean0.getCataloged();
      assertNull(string0);
  }

  @Test
  public void test59()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      metadataBean0.setMriType("'7id'Z'4xN\"v6");
      assertNull(metadataBean0.getCataloged());
  }

  @Test
  public void test60()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      String string0 = metadataBean0.getGlobalId();
      assertNull(string0);
  }

  @Test
  public void test61()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      String string0 = metadataBean0.getRejectDate();
      assertNull(string0);
  }

  @Test
  public void test62()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      metadataBean0.setTargetUserGroup((String) null);
      assertEquals(false, metadataBean0.isCataloged());
  }

  @Test
  public void test63()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      metadataBean0.setInappropriate(false);
      assertEquals("Metadata: MetadataId:null globalId:null fileName:null fileExtension:null fileSize:null title:null location:null sourceCollection:null contributeUserId:null annotated:false inappropriate:false approved:false cataloged:false archived:false rejected:false hidden:false description:null specimenType:null radiographType:null mriType:null orientation:null magnification:null diseaseProcess:null clinicalHistory:null fileWidth:null fileHeight:null duration:null targetUserGroup:null approveDate:null catalogDate:null rejectDate:null", metadataBean0.toString());
      assertEquals("false", metadataBean0.getInappropriate());
  }

  @Test
  public void test64()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      String string0 = metadataBean0.getTargetUserGroup();
      assertNull(string0);
  }

  @Test
  public void test65()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      metadataBean0.setMagnification("");
      assertEquals("Metadata: MetadataId:null globalId:null fileName:null fileExtension:null fileSize:null title:null location:null sourceCollection:null contributeUserId:null annotated:false inappropriate:false approved:false cataloged:false archived:false rejected:false hidden:false description:null specimenType:null radiographType:null mriType:null orientation:null magnification: diseaseProcess:null clinicalHistory:null fileWidth:null fileHeight:null duration:null targetUserGroup:null approveDate:null catalogDate:null rejectDate:null", metadataBean0.toString());
  }

  @Test
  public void test66()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      String string0 = metadataBean0.getDescription();
      assertNull(string0);
  }

  @Test
  public void test67()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      metadataBean0.setAnnotated(true);
      assertEquals("Metadata: MetadataId:null globalId:null fileName:null fileExtension:null fileSize:null title:null location:null sourceCollection:null contributeUserId:null annotated:true inappropriate:false approved:false cataloged:false archived:false rejected:false hidden:false description:null specimenType:null radiographType:null mriType:null orientation:null magnification:null diseaseProcess:null clinicalHistory:null fileWidth:null fileHeight:null duration:null targetUserGroup:null approveDate:null catalogDate:null rejectDate:null", metadataBean0.toString());
      assertEquals(true, metadataBean0.isAnnotated());
  }

  @Test
  public void test68()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      metadataBean0.setRejected(false);
      assertEquals("false", metadataBean0.getRejected());
      assertEquals("Metadata: MetadataId:null globalId:null fileName:null fileExtension:null fileSize:null title:null location:null sourceCollection:null contributeUserId:null annotated:false inappropriate:false approved:false cataloged:false archived:false rejected:false hidden:false description:null specimenType:null radiographType:null mriType:null orientation:null magnification:null diseaseProcess:null clinicalHistory:null fileWidth:null fileHeight:null duration:null targetUserGroup:null approveDate:null catalogDate:null rejectDate:null", metadataBean0.toString());
  }

  @Test
  public void test69()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      metadataBean0.setHidden("true");
      boolean boolean0 = metadataBean0.isPrivate();
      assertEquals(true, metadataBean0.isHidden());
      assertEquals(true, boolean0);
  }

  @Test
  public void test70()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      metadataBean0.setInappropriate("1");
      String string0 = metadataBean0.toString();
      assertEquals(true, metadataBean0.isInappropriate());
      assertEquals("Metadata: MetadataId:null globalId:null fileName:null fileExtension:null fileSize:null title:null location:null sourceCollection:null contributeUserId:null annotated:false inappropriate:true approved:false cataloged:false archived:false rejected:false hidden:false description:null specimenType:null radiographType:null mriType:null orientation:null magnification:null diseaseProcess:null clinicalHistory:null fileWidth:null fileHeight:null duration:null targetUserGroup:null approveDate:null catalogDate:null rejectDate:null", string0);
  }

  @Test
  public void test71()  throws Throwable  {
      MetadataBean metadataBean0 = new MetadataBean();
      metadataBean0.setRejected("yes");
      boolean boolean0 = metadataBean0.isRejected();
      assertEquals(true, metadataBean0.isRejected());
      assertEquals(true, boolean0);
  }
}
