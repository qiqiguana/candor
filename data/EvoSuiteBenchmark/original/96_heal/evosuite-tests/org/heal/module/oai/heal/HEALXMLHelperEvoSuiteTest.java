/*
 * This file was automatically generated by EvoSuite
 */

package org.heal.module.oai.heal;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sun.org.apache.xerces.internal.dom.DeferredDocumentImpl;
import javax.xml.namespace.QName;
import org.apache.axis.deployment.wsdd.WSDDConstants;
import org.apache.axis.message.Detail;
import org.apache.axis.message.RPCElement;
import org.apache.axis.message.RPCParam;
import org.apache.axis.message.SOAPDocumentImpl;
import org.apache.axis.message.SOAPFaultElement;
import org.heal.module.oai.heal.HEALXMLHelper;
import org.junit.BeforeClass;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

@RunWith(EvoSuiteRunner.class)
public class HEALXMLHelperEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      HEALXMLHelper hEALXMLHelper0 = new HEALXMLHelper();
      assertNotNull(hEALXMLHelper0);
  }

  @Test
  public void test1()  throws Throwable  {
      String string0 = HEALXMLHelper.getFullNameFromVCard((String) null);
      assertNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      String string0 = HEALXMLHelper.getFullNameFromVCard("Ka~Ky[rtr");
      assertNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      Detail detail0 = new Detail();
      QName qName0 = WSDDConstants.QNAME_SERVICE;
      RPCParam rPCParam0 = new RPCParam(qName0, (Object) "locked");
      DeferredDocumentImpl deferredDocumentImpl0 = (DeferredDocumentImpl)rPCParam0.getAsDocument();
      // Undeclared exception!
      try {
        HEALXMLHelper.appendTextElemWithLangstring("Zc", "Zc", "Zc", "Zc", (Element) detail0, (Document) deferredDocumentImpl0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * com.sun.org.apache.xerces.internal.dom.ElementImpl cannot be cast to org.apache.axis.message.NodeImpl
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      RPCElement rPCElement0 = new RPCElement((String) null, (String) null, objectArray0);
      SOAPFaultElement sOAPFaultElement0 = new SOAPFaultElement();
      SOAPDocumentImpl sOAPDocumentImpl0 = (SOAPDocumentImpl)sOAPFaultElement0.getOwnerDocument();
      HEALXMLHelper.appendTextElemWithLangstring((String) null, (String) null, (String) null, (String) null, (Element) rPCElement0, (Document) sOAPDocumentImpl0);
      assertEquals(false, sOAPDocumentImpl0.hasChildNodes());
  }

  @Test
  public void test5()  throws Throwable  {
      HEALXMLHelper.appendTextElemWithLangstring("", "", "", "", (Element) null, (Document) null);
  }

  @Test
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try {
        HEALXMLHelper.appendTextElemWithDescriptor("org.apache.axis.types.Day", "org.apache.axis.types.Day", "org.apache.axis.types.Day", (Element) null, (Document) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      SOAPFaultElement sOAPFaultElement0 = new SOAPFaultElement();
      SOAPDocumentImpl sOAPDocumentImpl0 = (SOAPDocumentImpl)sOAPFaultElement0.getOwnerDocument();
      HEALXMLHelper.appendTextElemWithDescriptor((String) null, (String) null, (String) null, (Element) sOAPFaultElement0, (Document) sOAPDocumentImpl0);
      assertEquals(false, sOAPFaultElement0.hasAttributes());
  }

  @Test
  public void test8()  throws Throwable  {
      HEALXMLHelper.appendTextElem("org.apache.axis.types.Day", (String) null, (Element) null, (Document) null);
  }

  @Test
  public void test9()  throws Throwable  {
      HEALXMLHelper.appendTextElem("", "", (Element) null, (Document) null);
  }
}
