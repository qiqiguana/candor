/*
 * This file was automatically generated by EvoSuite
 */

package org.heal.module.oai.provider.basic;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Date;
import org.heal.module.oai.provider.OAIGranularity;
import org.heal.module.oai.provider.basic.BasicResumptionToken;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BasicResumptionTokenEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BasicResumptionToken basicResumptionToken0 = BasicResumptionToken.generateQueryCompleteToken();
      basicResumptionToken0.getNextID();
      assertEquals(true, basicResumptionToken0.queryCompleted());
      assertEquals("-1|null|null|null|null|null|0|null", basicResumptionToken0.getContent());
      assertEquals((-1L), basicResumptionToken0.getCursor());
  }

  @Test
  public void test1()  throws Throwable  {
      BasicResumptionToken basicResumptionToken0 = BasicResumptionToken.generateQueryCompleteToken();
      basicResumptionToken0.getUntil();
      assertEquals("-1|null|null|null|null|null|0|null", basicResumptionToken0.getContent());
      assertEquals(true, basicResumptionToken0.queryCompleted());
  }

  @Test
  public void test2()  throws Throwable  {
      BasicResumptionToken basicResumptionToken0 = BasicResumptionToken.generateQueryCompleteToken();
      basicResumptionToken0.getSet();
      assertEquals(true, basicResumptionToken0.queryCompleted());
      assertEquals("-1|null|null|null|null|null|0|null", basicResumptionToken0.getContent());
      assertEquals((-1L), basicResumptionToken0.getCursor());
  }

  @Test
  public void test3()  throws Throwable  {
      BasicResumptionToken basicResumptionToken0 = BasicResumptionToken.generateQueryCompleteToken();
      basicResumptionToken0.getMetadataPrefix();
      assertEquals("-1|null|null|null|null|null|0|null", basicResumptionToken0.getContent());
      assertEquals(true, basicResumptionToken0.queryCompleted());
  }

  @Test
  public void test4()  throws Throwable  {
      BasicResumptionToken basicResumptionToken0 = BasicResumptionToken.generateQueryCompleteToken();
      long long0 = basicResumptionToken0.getCompleteListSize();
      assertEquals(true, basicResumptionToken0.queryCompleted());
      assertEquals("-1|null|null|null|null|null|0|null", basicResumptionToken0.getContent());
      assertEquals(0L, long0);
  }

  @Test
  public void test5()  throws Throwable  {
      BasicResumptionToken basicResumptionToken0 = BasicResumptionToken.generateQueryCompleteToken();
      basicResumptionToken0.setCursor((-1029L));
      assertEquals((-1029L), basicResumptionToken0.getCursor());
      assertEquals(0L, basicResumptionToken0.getCompleteListSize());
  }

  @Test
  public void test6()  throws Throwable  {
      BasicResumptionToken basicResumptionToken0 = BasicResumptionToken.generateQueryCompleteToken();
      basicResumptionToken0.getExpirationDate();
      assertEquals(true, basicResumptionToken0.queryCompleted());
      assertEquals("-1|null|null|null|null|null|0|null", basicResumptionToken0.getContent());
      assertEquals((-1L), basicResumptionToken0.getCursor());
  }

  @Test
  public void test7()  throws Throwable  {
      BasicResumptionToken basicResumptionToken0 = BasicResumptionToken.generateQueryCompleteToken();
      Date date0 = basicResumptionToken0.getFrom();
      OAIGranularity oAIGranularity0 = OAIGranularity.yearMonthDayHourMinuteSecond;
      BasicResumptionToken basicResumptionToken1 = BasicResumptionToken.generateResumptionToken("rJ", date0, date0, "rJ", "rJ", date0, 1876L, 1876L, oAIGranularity0);
      assertEquals("-1|null|null|null|null|null|0|null", basicResumptionToken0.getContent());
      assertEquals("1876|null|null|rJ|rJ|null|1876|rJ", basicResumptionToken1.getContent());
      assertEquals(true, basicResumptionToken0.queryCompleted());
  }

  @Test
  public void test8()  throws Throwable  {
      BasicResumptionToken basicResumptionToken0 = BasicResumptionToken.generateQueryCompleteToken();
      long long0 = basicResumptionToken0.getCursor();
      assertEquals(true, basicResumptionToken0.queryCompleted());
      assertEquals(0L, basicResumptionToken0.getCompleteListSize());
      assertEquals((-1L), long0);
  }

  @Test
  public void test9()  throws Throwable  {
      BasicResumptionToken.setDelimiter("u8[T)Z~2&2 h2W?");
  }

  @Test
  public void test10()  throws Throwable  {
      BasicResumptionToken basicResumptionToken0 = BasicResumptionToken.generateQueryCompleteToken();
      basicResumptionToken0.setExpirationDate((Date) null);
      assertEquals(true, basicResumptionToken0.queryCompleted());
      assertEquals("-1u8[T)Z~2&2 h2W?nullu8[T)Z~2&2 h2W?nullu8[T)Z~2&2 h2W?nullu8[T)Z~2&2 h2W?nullu8[T)Z~2&2 h2W?nullu8[T)Z~2&2 h2W?0u8[T)Z~2&2 h2W?null", basicResumptionToken0.getContent());
  }

  @Test
  public void test11()  throws Throwable  {
      Date date0 = new Date();
      OAIGranularity oAIGranularity0 = OAIGranularity.yearMonthDayHourMinuteSecond;
      BasicResumptionToken basicResumptionToken0 = BasicResumptionToken.generateResumptionToken("UTC", date0, date0, "UTC", "UTC", oAIGranularity0);
      String string0 = basicResumptionToken0.toString();
      assertEquals(1372731401724L, date0.getTime());
      assertEquals("[metadataPrefix=UTC] [from=2013-07-02T02:16:41Z] [until=2013-07-02T02:16:41Z] [set=UTC] [nextID=UTC] [content=-1u8[T)Z~2&2 h2W?2013-07-02T02:16:41Zu8[T)Z~2&2 h2W?2013-07-02T02:16:41Zu8[T)Z~2&2 h2W?UTCu8[T)Z~2&2 h2W?UTCu8[T)Z~2&2 h2W?nullu8[T)Z~2&2 h2W?0u8[T)Z~2&2 h2W?UTC] [expirationDate=null] [listSize=0] [cursor=-1]", string0);
  }

  @Test
  public void test12()  throws Throwable  {
      BasicResumptionToken basicResumptionToken0 = BasicResumptionToken.generateQueryCompleteToken();
      boolean boolean0 = basicResumptionToken0.queryCompleted();
      assertEquals(true, boolean0);
      assertEquals("-1u8[T)Z~2&2 h2W?nullu8[T)Z~2&2 h2W?nullu8[T)Z~2&2 h2W?nullu8[T)Z~2&2 h2W?nullu8[T)Z~2&2 h2W?nullu8[T)Z~2&2 h2W?0u8[T)Z~2&2 h2W?null", basicResumptionToken0.getContent());
  }

  @Test
  public void test13()  throws Throwable  {
      BasicResumptionToken basicResumptionToken0 = BasicResumptionToken.parseResumptionToken("", (OAIGranularity) null);
      assertNull(basicResumptionToken0);
  }

  @Test
  public void test14()  throws Throwable  {
      BasicResumptionToken basicResumptionToken0 = BasicResumptionToken.parseResumptionToken((String) null, (OAIGranularity) null);
      assertNull(basicResumptionToken0);
  }

  @Test
  public void test15()  throws Throwable  {
      OAIGranularity oAIGranularity0 = OAIGranularity.yearMonthDayHourMinuteSecond;
      BasicResumptionToken basicResumptionToken0 = BasicResumptionToken.parseResumptionToken("1876u8[T)Z~2&2 h2W?1970-01-01T00:00:01Zu8[T)Z~2&2 h2W?1970-01-01T00:00:01Zu8[T)Z~2&2 h2W?rJu8[T)Z~2&2 h2W?rJu8[T)Z~2&2 h2W?1970-01-01T00:00:01Zu8[T)Z~2&2 h2W?1876u8[T)Z~2&2 h2W?rJ", oAIGranularity0);
      assertNull(basicResumptionToken0);
  }

  @Test
  public void test16()  throws Throwable  {
      BasicResumptionToken basicResumptionToken0 = BasicResumptionToken.parseResumptionToken("0", (OAIGranularity) null);
      assertNull(basicResumptionToken0);
  }

  @Test
  public void test17()  throws Throwable  {
      BasicResumptionToken basicResumptionToken0 = BasicResumptionToken.generateQueryCompleteToken();
      String string0 = basicResumptionToken0.getContent();
      String string1 = basicResumptionToken0.getContent();
      assertEquals(true, basicResumptionToken0.queryCompleted());
      assertSame(string1, string0);
      assertEquals("-1u8[T)Z~2&2 h2W?nullu8[T)Z~2&2 h2W?nullu8[T)Z~2&2 h2W?nullu8[T)Z~2&2 h2W?nullu8[T)Z~2&2 h2W?nullu8[T)Z~2&2 h2W?0u8[T)Z~2&2 h2W?null", string1);
      assertNotNull(string1);
  }

  @Test
  public void test18()  throws Throwable  {
      OAIGranularity oAIGranularity0 = OAIGranularity.yearMonthDayHourMinuteSecond;
      Date date0 = new Date(1876L);
      BasicResumptionToken basicResumptionToken0 = BasicResumptionToken.generateResumptionToken("rJ", date0, date0, "rJ", "rJ", date0, 1876L, 1876L, oAIGranularity0);
      basicResumptionToken0.getContent();
      String string0 = basicResumptionToken0.toString();
      assertEquals("[metadataPrefix=rJ] [from=1970-01-01T00:00:01Z] [until=1970-01-01T00:00:01Z] [set=rJ] [nextID=rJ] [content=1876u8[T)Z~2&2 h2W?1970-01-01T00:00:01Zu8[T)Z~2&2 h2W?1970-01-01T00:00:01Zu8[T)Z~2&2 h2W?rJu8[T)Z~2&2 h2W?rJu8[T)Z~2&2 h2W?1970-01-01T00:00:01Zu8[T)Z~2&2 h2W?1876u8[T)Z~2&2 h2W?rJ] [expirationDate=1970-01-01T00:00:01Z] [listSize=1876] [cursor=1876]", basicResumptionToken0.toString());
      assertNotNull(string0);
      assertEquals("[metadataPrefix=rJ] [from=1970-01-01T00:00:01Z] [until=1970-01-01T00:00:01Z] [set=rJ] [nextID=rJ] [content=1876u8[T)Z~2&2 h2W?1970-01-01T00:00:01Zu8[T)Z~2&2 h2W?1970-01-01T00:00:01Zu8[T)Z~2&2 h2W?rJu8[T)Z~2&2 h2W?rJu8[T)Z~2&2 h2W?1970-01-01T00:00:01Zu8[T)Z~2&2 h2W?1876u8[T)Z~2&2 h2W?rJ] [expirationDate=1970-01-01T00:00:01Z] [listSize=1876] [cursor=1876]", string0);
  }
}
