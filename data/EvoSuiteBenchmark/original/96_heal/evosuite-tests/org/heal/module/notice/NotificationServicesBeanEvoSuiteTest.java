/*
 * This file was automatically generated by EvoSuite
 */

package org.heal.module.notice;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.microsoft.jdbcx.base.BaseXADataSource;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.mail.internet.InternetAddress;
import javax.sql.DataSource;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.heal.module.notice.NotificationServicesBean;
import org.heal.module.user.UserRegistryBean;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class NotificationServicesBeanEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      NotificationServicesBean notificationServicesBean0 = new NotificationServicesBean();
      InternetAddress internetAddress0 = notificationServicesBean0.getHealAddress();
      assertNull(internetAddress0);
  }

  @Test
  public void test1()  throws Throwable  {
      NotificationServicesBean notificationServicesBean0 = new NotificationServicesBean();
      notificationServicesBean0.setHealAddress((InternetAddress) null);
      assertNull(notificationServicesBean0.getMailhost());
  }

  @Test
  public void test2()  throws Throwable  {
      NotificationServicesBean notificationServicesBean0 = new NotificationServicesBean();
      notificationServicesBean0.setMailPassword("o+6qghv%~0");
      assertNull(notificationServicesBean0.getMailhost());
  }

  @Test
  public void test3()  throws Throwable  {
      NotificationServicesBean notificationServicesBean0 = new NotificationServicesBean();
      String string0 = notificationServicesBean0.getMailhost();
      assertNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      NotificationServicesBean notificationServicesBean0 = new NotificationServicesBean();
      notificationServicesBean0.setMailUser("e|#o=)6}d#");
      assertNull(notificationServicesBean0.getMailhost());
  }

  @Test
  public void test5()  throws Throwable  {
      NotificationServicesBean notificationServicesBean0 = new NotificationServicesBean();
      notificationServicesBean0.setMailhost((String) null);
      InternetAddress[] internetAddressArray0 = new InternetAddress[4];
      // Undeclared exception!
      try {
        notificationServicesBean0.sendEmail(internetAddressArray0, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      NotificationServicesBean notificationServicesBean0 = new NotificationServicesBean();
      String[] stringArray0 = new String[4];
      boolean boolean0 = notificationServicesBean0.sendEmailToUsers(stringArray0, (String) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      NotificationServicesBean notificationServicesBean0 = new NotificationServicesBean();
      UserRegistryBean userRegistryBean0 = new UserRegistryBean();
      notificationServicesBean0.setUserRegistry(userRegistryBean0);
      BaseXADataSource baseXADataSource0 = new BaseXADataSource();
      userRegistryBean0.setDataSource((DataSource) baseXADataSource0);
      String[] stringArray0 = new String[8];
      boolean boolean0 = notificationServicesBean0.sendEmailToUsers(stringArray0, "e|#o=)6}d#");
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      NotificationServicesBean notificationServicesBean0 = new NotificationServicesBean();
      boolean boolean0 = notificationServicesBean0.sendUserNotice((String) null, (String) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      NotificationServicesBean notificationServicesBean0 = new NotificationServicesBean();
      boolean boolean0 = notificationServicesBean0.sendUserNotice("spylt'rybtes", (String) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      NotificationServicesBean notificationServicesBean0 = new NotificationServicesBean();
      boolean boolean0 = notificationServicesBean0.sendUserNotice("", "");
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      NotificationServicesBean notificationServicesBean0 = new NotificationServicesBean();
      boolean boolean0 = notificationServicesBean0.sendAdminNotice((String) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      NotificationServicesBean notificationServicesBean0 = new NotificationServicesBean();
      boolean boolean0 = notificationServicesBean0.sendAdminNotice("I Error rading temp file: {0}");
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      NotificationServicesBean notificationServicesBean0 = new NotificationServicesBean();
      UserRegistryBean userRegistryBean0 = new UserRegistryBean();
      notificationServicesBean0.userRegistry = (org.heal.module.user.UserRegistryBean) userRegistryBean0;
      // Undeclared exception!
      try {
        notificationServicesBean0.sendAdminNotice("I Error rading temp file: {0}");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test14()  throws Throwable  {
      NotificationServicesBean notificationServicesBean0 = new NotificationServicesBean();
      boolean boolean0 = notificationServicesBean0.sendToList((String) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      NotificationServicesBean notificationServicesBean0 = new NotificationServicesBean();
      boolean boolean0 = notificationServicesBean0.sendToList("e|#o=)6}d#");
      assertEquals(false, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      NotificationServicesBean notificationServicesBean0 = new NotificationServicesBean();
      UserRegistryBean userRegistryBean0 = new UserRegistryBean();
      notificationServicesBean0.setUserRegistry(userRegistryBean0);
      BaseXADataSource baseXADataSource0 = new BaseXADataSource();
      userRegistryBean0.setDataSource((DataSource) baseXADataSource0);
      boolean boolean0 = notificationServicesBean0.sendToList("e|#o=)6}d#");
      assertEquals(true, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      NotificationServicesBean notificationServicesBean0 = new NotificationServicesBean();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      boolean boolean0 = notificationServicesBean0.sendToList((ArrayList) arrayList0, "X(");
      assertEquals(true, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      NotificationServicesBean notificationServicesBean0 = new NotificationServicesBean();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add(";q");
      arrayList0.add(";q");
      boolean boolean0 = notificationServicesBean0.sendToList((ArrayList) arrayList0, ";q");
      assertEquals(false, boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      NotificationServicesBean notificationServicesBean0 = new NotificationServicesBean();
      InternetAddress[] internetAddressArray0 = new InternetAddress[1];
      InternetAddress internetAddress0 = new InternetAddress("MmNe6x", "MmNe6x");
      internetAddressArray0[0] = internetAddress0;
      notificationServicesBean0.setMailhost("MmNe6x");
      boolean boolean0 = notificationServicesBean0.sendEmail(internetAddressArray0, (String) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          NotificationServicesBean notificationServicesBean0 = new NotificationServicesBean();
          notificationServicesBean0.setMailhost("*#");
          // Undeclared exception!
          try {
            notificationServicesBean0.sendUserNotice("*#", "*#");
            fail("Expecting exception: IllegalArgumentException");
          } catch(IllegalArgumentException e) {
            /*
             * invalid host wildcard specification
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test21()  throws Throwable  {
      NotificationServicesBean notificationServicesBean0 = new NotificationServicesBean();
      UserRegistryBean userRegistryBean0 = new UserRegistryBean();
      notificationServicesBean0.setUserRegistry(userRegistryBean0);
      // Undeclared exception!
      try {
        notificationServicesBean0.addUserToList("");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test22()  throws Throwable  {
      NotificationServicesBean notificationServicesBean0 = new NotificationServicesBean();
      boolean boolean0 = notificationServicesBean0.addUserToList((String) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      NotificationServicesBean notificationServicesBean0 = new NotificationServicesBean();
      UserRegistryBean userRegistryBean0 = new UserRegistryBean();
      notificationServicesBean0.setUserRegistry(userRegistryBean0);
      // Undeclared exception!
      try {
        notificationServicesBean0.removeUserFromList("o+6qghv%~0");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test24()  throws Throwable  {
      NotificationServicesBean notificationServicesBean0 = new NotificationServicesBean();
      boolean boolean0 = notificationServicesBean0.removeUserFromList((String) null);
      assertEquals(false, boolean0);
  }
}
