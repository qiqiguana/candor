/*
 * This file was automatically generated by EvoSuite
 */

package org.heal.module.user;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.heal.module.user.UserPermissionsBean;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class UserPermissionsBeanEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      UserPermissionsBean userPermissionsBean0 = new UserPermissionsBean();
      assertEquals(false, userPermissionsBean0.isMinor());
      
      userPermissionsBean0.setMinor(true);
      assertEquals(true, userPermissionsBean0.isMinor());
  }

  @Test
  public void test1()  throws Throwable  {
      UserPermissionsBean userPermissionsBean0 = new UserPermissionsBean();
      boolean boolean0 = userPermissionsBean0.isMinor();
      assertEquals(false, userPermissionsBean0.isAdministrator());
      assertEquals(false, userPermissionsBean0.isCataloger());
      assertEquals(false, userPermissionsBean0.isApprover());
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      UserPermissionsBean userPermissionsBean0 = new UserPermissionsBean();
      userPermissionsBean0.setAdministrator(false);
      assertEquals(false, userPermissionsBean0.isCataloger());
      assertEquals(false, userPermissionsBean0.isMinor());
      assertEquals(false, userPermissionsBean0.isAdministrator());
      assertEquals(false, userPermissionsBean0.isApprover());
  }

  @Test
  public void test3()  throws Throwable  {
      UserPermissionsBean userPermissionsBean0 = new UserPermissionsBean();
      boolean boolean0 = userPermissionsBean0.isApprover();
      assertEquals(false, userPermissionsBean0.isMinor());
      assertEquals(false, userPermissionsBean0.isAdministrator());
      assertEquals(false, boolean0);
      assertEquals(false, userPermissionsBean0.isCataloger());
  }

  @Test
  public void test4()  throws Throwable  {
      UserPermissionsBean userPermissionsBean0 = new UserPermissionsBean();
      boolean boolean0 = userPermissionsBean0.isAdministrator();
      assertEquals(false, boolean0);
      assertEquals(false, userPermissionsBean0.isMinor());
      assertEquals(false, userPermissionsBean0.isCataloger());
      assertEquals(false, userPermissionsBean0.isApprover());
  }

  @Test
  public void test5()  throws Throwable  {
      UserPermissionsBean userPermissionsBean0 = new UserPermissionsBean();
      userPermissionsBean0.setApprover(false);
      assertEquals(false, userPermissionsBean0.isCataloger());
      assertEquals(false, userPermissionsBean0.isAdministrator());
      assertEquals(false, userPermissionsBean0.isMinor());
      assertEquals(false, userPermissionsBean0.isApprover());
  }

  @Test
  public void test6()  throws Throwable  {
      UserPermissionsBean userPermissionsBean0 = new UserPermissionsBean();
      userPermissionsBean0.setCataloger(false);
      assertEquals(false, userPermissionsBean0.isCataloger());
      assertEquals(false, userPermissionsBean0.isAdministrator());
      assertEquals(false, userPermissionsBean0.isMinor());
      assertEquals(false, userPermissionsBean0.isApprover());
  }

  @Test
  public void test7()  throws Throwable  {
      UserPermissionsBean userPermissionsBean0 = new UserPermissionsBean();
      boolean boolean0 = userPermissionsBean0.isCataloger();
      assertEquals(false, userPermissionsBean0.isAdministrator());
      assertEquals(false, userPermissionsBean0.isMinor());
      assertEquals(false, userPermissionsBean0.isApprover());
      assertEquals(false, boolean0);
  }
}
