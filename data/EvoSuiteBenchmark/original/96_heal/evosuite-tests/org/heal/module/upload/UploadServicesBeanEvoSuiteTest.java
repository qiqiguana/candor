/*
 * This file was automatically generated by EvoSuite
 */

package org.heal.module.upload;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.media.jai.PlanarImage;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.heal.module.metadata.CompleteMetadataBean;
import org.heal.module.metadata.MetadataBean;
import org.heal.module.metadata.ThumbnailBean;
import org.heal.module.upload.UploadServicesBean;
import org.heal.util.FileLocator;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class UploadServicesBeanEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      UploadServicesBean uploadServicesBean0 = new UploadServicesBean();
      FileLocator fileLocator0 = uploadServicesBean0.getFileLocator();
      assertNull(fileLocator0);
  }

  @Test
  public void test1()  throws Throwable  {
      UploadServicesBean uploadServicesBean0 = new UploadServicesBean();
      FileLocator fileLocator0 = new FileLocator();
      uploadServicesBean0.setFileLocator(fileLocator0);
      String string0 = uploadServicesBean0.getUploadPath();
      assertNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      UploadServicesBean uploadServicesBean0 = new UploadServicesBean();
      ThumbnailBean thumbnailBean0 = uploadServicesBean0.generateThumbnail((String) null, (String) null, (PlanarImage) null);
      assertNull(thumbnailBean0);
  }

  @Test
  public void test3()  throws Throwable  {
      UploadServicesBean uploadServicesBean0 = new UploadServicesBean();
      FileLocator fileLocator0 = new FileLocator();
      uploadServicesBean0.setFileLocator(fileLocator0);
      // Undeclared exception!
      try {
        uploadServicesBean0.generateThumbnail("Wind=ows ^3.1", "Wind=ows ^3.1", (PlanarImage) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          UploadServicesBean uploadServicesBean0 = new UploadServicesBean();
          FileLocator fileLocator0 = new FileLocator();
          uploadServicesBean0.setFileLocator(fileLocator0);
          // Undeclared exception!
          try {
            uploadServicesBean0.generateThumbnail("qkhS|YI{MYz/()b7", "qkhS|YI{MYz/()b7", (PlanarImage) null);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission /mnt/fastdata/ac1gf/SF110/dist/96_heal/qkhS|YI{MYz write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.mkdir(File.java:1155)
             * java.io.File.mkdirs(File.java:1184)
             * org.heal.module.upload.UploadServicesBean.generateThumbnail(Unknown Source)
             * sun.reflect.GeneratedMethodAccessor58.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
      UploadServicesBean uploadServicesBean0 = new UploadServicesBean();
      boolean boolean0 = uploadServicesBean0.processVideo((CompleteMetadataBean) null, "KU+m\"|h}b=RQa");
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      UploadServicesBean uploadServicesBean0 = new UploadServicesBean();
      CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean();
      boolean boolean0 = uploadServicesBean0.processVideo(completeMetadataBean0, (String) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      UploadServicesBean uploadServicesBean0 = new UploadServicesBean();
      CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean();
      MetadataBean metadataBean0 = new MetadataBean();
      completeMetadataBean0.setMetadata(metadataBean0);
      boolean boolean0 = uploadServicesBean0.processVideo(completeMetadataBean0, (String) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      UploadServicesBean uploadServicesBean0 = new UploadServicesBean();
      CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean();
      MetadataBean metadataBean0 = new MetadataBean();
      completeMetadataBean0.setMetadata(metadataBean0);
      boolean boolean0 = uploadServicesBean0.processVideo(completeMetadataBean0, "3V&bQ`_J^#Wz]PPU>n<");
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      UploadServicesBean uploadServicesBean0 = new UploadServicesBean();
      String string0 = uploadServicesBean0.getUploadPath();
      assertNull(string0);
  }

  @Test
  public void test10()  throws Throwable  {
      UploadServicesBean uploadServicesBean0 = new UploadServicesBean();
      boolean boolean0 = uploadServicesBean0.processAudio((CompleteMetadataBean) null, "!zj]$}$_");
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      UploadServicesBean uploadServicesBean0 = new UploadServicesBean();
      CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean();
      boolean boolean0 = uploadServicesBean0.processAudio(completeMetadataBean0, (String) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      UploadServicesBean uploadServicesBean0 = new UploadServicesBean();
      CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean();
      MetadataBean metadataBean0 = new MetadataBean();
      completeMetadataBean0.setMetadata(metadataBean0);
      boolean boolean0 = uploadServicesBean0.processAudio(completeMetadataBean0, (String) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      UploadServicesBean uploadServicesBean0 = new UploadServicesBean();
      CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean();
      MetadataBean metadataBean0 = new MetadataBean();
      completeMetadataBean0.setMetadata(metadataBean0);
      boolean boolean0 = uploadServicesBean0.processAudio(completeMetadataBean0, "3V&bQ`_J^#Wz]PPU>n<");
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      UploadServicesBean uploadServicesBean0 = new UploadServicesBean();
      boolean boolean0 = uploadServicesBean0.processImage((CompleteMetadataBean) null, (String) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      UploadServicesBean uploadServicesBean0 = new UploadServicesBean();
      CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean();
      boolean boolean0 = uploadServicesBean0.processImage(completeMetadataBean0, (String) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      UploadServicesBean uploadServicesBean0 = new UploadServicesBean();
      CompleteMetadataBean completeMetadataBean0 = new CompleteMetadataBean();
      MetadataBean metadataBean0 = new MetadataBean();
      completeMetadataBean0.setMetadata(metadataBean0);
      boolean boolean0 = uploadServicesBean0.processImage(completeMetadataBean0, (String) null);
      assertEquals(false, boolean0);
  }
}
