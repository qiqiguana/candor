/*
 * This file was automatically generated by EvoSuite
 */

package fr.unice.gfarce.identity;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.TimeZone;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class CandidatEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      Identite.TypeIdentite identite_TypeIdentite0 = Identite.TypeIdentite.CANDIDAT;
      Formation formation0 = new Formation(869);
      Candidat candidat0 = new Candidat("|Z.y#*)Aj", "|Z.y#*)Aj", "|Z.y#*)Aj", "|Z.y#*)Aj", identite_TypeIdentite0, (Calendar) null, "|Z.y#*)Aj", "|Z.y#*)Aj", "|Z.y#*)Aj", 869, 869, formation0);
      assertNotNull(candidat0);
      
      candidat0.setBource(869);
      assertEquals(869, candidat0.getAcceptation());
      assertEquals(869, candidat0.getBource());
  }

  @Test
  public void test1()  throws Throwable  {
      Candidat candidat0 = new Candidat();
      Calendar calendar0 = candidat0.getDateNaissance();
      assertNull(calendar0);
  }

  @Test
  public void test2()  throws Throwable  {
      Candidat candidat0 = new Candidat();
      String string0 = candidat0.getDiplome();
      assertNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      Candidat candidat0 = new Candidat();
      Formation formation0 = candidat0.getFormation();
      assertNull(formation0);
  }

  @Test
  public void test4()  throws Throwable  {
      Identite.TypeIdentite identite_TypeIdentite0 = Identite.TypeIdentite.CANDIDAT;
      Formation formation0 = new Formation(869);
      Candidat candidat0 = new Candidat("|Z.y#*)Aj", "|Z.y#*)Aj", "|Z.y#*)Aj", "|Z.y#*)Aj", identite_TypeIdentite0, (Calendar) null, "|Z.y#*)Aj", "|Z.y#*)Aj", "|Z.y#*)Aj", 869, 869, formation0);
      assertNotNull(candidat0);
      
      candidat0.setAcceptation(869);
      assertEquals(869, candidat0.getBource());
      assertEquals(869, candidat0.getAcceptation());
  }

  @Test
  public void test5()  throws Throwable  {
      Candidat candidat0 = new Candidat();
      candidat0.setDiplome((String) null);
      assertEquals(0, candidat0.getBource());
  }

  @Test
  public void test6()  throws Throwable  {
      Candidat candidat0 = new Candidat();
      try {
        candidat0.setPhoto(".");
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
        /*
         * . (Is a directory)
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      Candidat candidat0 = new Candidat();
      int int0 = candidat0.getAcceptation();
      assertEquals(0, int0);
  }

  @Test
  public void test8()  throws Throwable  {
      Candidat candidat0 = new Candidat();
      candidat0.setNationalite("KnA");
      assertNull(candidat0.getType());
  }

  @Test
  public void test9()  throws Throwable  {
      Candidat candidat0 = new Candidat();
      candidat0.setFormation((Formation) null);
      assertEquals(0, candidat0.getAcceptation());
  }

  @Test
  public void test10()  throws Throwable  {
      Candidat candidat0 = new Candidat();
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(timeZone0);
      candidat0.setDate_naissance((Calendar) gregorianCalendar0);
      assertNull(candidat0.getDiplome());
  }

  @Test
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(timeZone0);
      Formation formation0 = new Formation(0);
      Candidat candidat0 = new Candidat("KnA", "KnA", "KnA", "", (Calendar) gregorianCalendar0, "KnA", "", "KnA", 0, 0, formation0);
      assertEquals("java.util.GregorianCalendar[time=1372731063631,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=2,HOUR_OF_DAY=2,MINUTE=11,SECOND=3,MILLISECOND=631,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(1372731063631L, gregorianCalendar0.getTimeInMillis());
  }

  @Test
  public void test12()  throws Throwable  {
      Candidat candidat0 = new Candidat();
      byte[] byteArray0 = candidat0.getPhoto();
      assertNull(byteArray0);
  }

  @Test
  public void test13()  throws Throwable  {
      Candidat candidat0 = new Candidat();
      candidat0.afficherPhoto();
      assertEquals(0, candidat0.getId());
  }

  @Test
  public void test14()  throws Throwable  {
      Candidat candidat0 = new Candidat();
      int int0 = candidat0.getBource();
      assertEquals(0, int0);
  }

  @Test
  public void test15()  throws Throwable  {
      Candidat candidat0 = new Candidat();
      String string0 = candidat0.getNationalite();
      assertNull(string0);
  }

  @Test
  public void test16()  throws Throwable  {
      Candidat candidat0 = new Candidat();
      candidat0.savePhoto();
      assertNull(candidat0.getNationalite());
  }

  @Test
  public void test17()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          Candidat candidat0 = new Candidat();
          byte[] byteArray0 = new byte[7];
          candidat0.photo = byteArray0;
          // Undeclared exception!
          try {
            candidat0.savePhoto();
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission img/null-0.gif write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.RandomAccessFile.<init>(RandomAccessFile.java:208)
             * javax.imageio.stream.FileImageOutputStream.<init>(FileImageOutputStream.java:53)
             * fr.unice.gfarce.identity.Candidat.savePhoto(Candidat.java:94)
             * sun.reflect.GeneratedMethodAccessor69.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
