/*
 * This file was automatically generated by EvoSuite
 */

package fr.unice.gfarce.identity;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import java.io.IOException;
import java.util.Calendar;
import java.util.Collection;
import java.util.GregorianCalendar;
import java.util.LinkedList;
import java.util.TimeZone;
import org.evosuite.testcase.CodeUnderTestException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class FormationEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Formation formation0 = new Formation();
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance(timeZone0);
      Candidat candidat0 = new Candidat("", ";|", ";|", ";|", (Calendar) gregorianCalendar0, ";|", ";|", ";|", 1463, 1517, formation0);
      formation0.ajouterCandidat(candidat0);
      formation0.supprimerCandidat(candidat0);
      assertEquals(1372731175653L, gregorianCalendar0.getTimeInMillis());
      assertEquals("java.util.GregorianCalendar[time=1372731175653,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=2,HOUR_OF_DAY=2,MINUTE=12,SECOND=55,MILLISECOND=653,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      Formation formation0 = new Formation();
      int int0 = formation0.getId();
      assertEquals(0, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      Formation formation0 = new Formation();
      Calendar calendar0 = formation0.getDate_limite_candidature();
      assertNull(calendar0);
  }

  @Test
  public void test3()  throws Throwable  {
      Formation formation0 = new Formation(2010);
      formation0.getTitre_formation();
      assertEquals(2010, formation0.id);
      assertEquals(2010, formation0.getId());
  }

  @Test
  public void test4()  throws Throwable  {
      Formation formation0 = new Formation(2010);
      formation0.setMontant_inscription(2010);
      assertEquals(2010, formation0.montant_inscription);
      assertEquals(2010, formation0.getMontant_inscription());
  }

  @Test
  public void test5()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar((-12), (-12), (-12), (-12), (-12), (-12));
      RespFormation respFormation0 = new RespFormation();
      Formation formation0 = new Formation("img", (Calendar) gregorianCalendar0, (-12), respFormation0);
  }

  @Test
  public void test6()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar((-12), (-12), (-12), (-12), (-12), (-12));
      RespFormation respFormation0 = new RespFormation();
      Formation formation0 = new Formation("img", (Calendar) gregorianCalendar0, (-12), respFormation0);
      RespFormation respFormation1 = formation0.getResponsable();
      assertNotNull(respFormation1);
      assertEquals((-12), formation0.montant_inscription);
      assertEquals(-12, formation0.getMontant_inscription());
  }

  @Test
  public void test7()  throws Throwable  {
      Formation formation0 = new Formation();
      formation0.setTitre_formation(";|");
      assertEquals(0, formation0.getId());
  }

  @Test
  public void test8()  throws Throwable  {
      Formation formation0 = new Formation();
      formation0.setDate_limite_candidature((Calendar) null);
      assertEquals(0, formation0.getMontant_inscription());
  }

  @Test
  public void test9()  throws Throwable  {
      Formation formation0 = new Formation();
      Collection<Candidat> collection0 = formation0.getCandidat();
      assertEquals(true, collection0.isEmpty());
  }

  @Test
  public void test10()  throws Throwable  {
      Formation formation0 = new Formation();
      LinkedList<Candidat> linkedList0 = new LinkedList<Candidat>();
      formation0.setCandidat((Collection<Candidat>) linkedList0);
      assertEquals(0, formation0.getId());
  }

  @Test
  public void test11()  throws Throwable  {
      Formation formation0 = new Formation();
      int int0 = formation0.getMontant_inscription();
      assertEquals(0, int0);
  }

  @Test
  public void test12()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar((-12), (-12), (-12), (-12), (-12), (-12));
      RespFormation respFormation0 = new RespFormation();
      Formation formation0 = new Formation("img", (Calendar) gregorianCalendar0, (-12), respFormation0);
      Candidat candidat0 = new Candidat();
      formation0.supprimerCandidat(candidat0);
      assertEquals((-12), formation0.montant_inscription);
      assertEquals(-12, formation0.getMontant_inscription());
  }

  @Test
  public void test13()  throws Throwable  {
      Formation formation0 = new Formation();
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance(timeZone0);
      Candidat candidat0 = new Candidat("", ";|", ";|", ";|", (Calendar) gregorianCalendar0, ";|", ";|", ";|", 1463, 1517, formation0);
      formation0.ajouterCandidat(candidat0);
      formation0.modifierCandidat(candidat0);
      assertEquals(1372731184578L, gregorianCalendar0.getTimeInMillis());
      assertEquals("java.util.GregorianCalendar[time=1372731184578,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=2,HOUR_OF_DAY=2,MINUTE=13,SECOND=4,MILLISECOND=578,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
  }

  @Test
  public void test14()  throws Throwable  {
      Formation formation0 = new Formation();
      Identite.TypeIdentite identite_TypeIdentite0 = Identite.TypeIdentite.CANDIDAT;
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)Calendar.getInstance(timeZone0);
      Candidat candidat0 = new Candidat("", ";|", ";|", ";|", (Calendar) gregorianCalendar0, ";|", ";|", ";|", 1463, 1517, formation0);
      GregorianCalendar gregorianCalendar1 = new GregorianCalendar(0, 0, (-1), 0, 1, 0);
      Candidat candidat1 = new Candidat(";|", "", ";|", ";|", identite_TypeIdentite0, (Calendar) gregorianCalendar1, "", ";|", ";|", 0, 1, formation0);
      formation0.ajouterCandidat(candidat1);
      formation0.modifierCandidat(candidat0);
      assertEquals("java.util.GregorianCalendar[time=1372731190570,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=2,HOUR_OF_DAY=2,MINUTE=13,SECOND=10,MILLISECOND=570,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(1372731190570L, gregorianCalendar0.getTimeInMillis());
  }

  @Test
  public void test15()  throws Throwable  {
      Formation formation0 = new Formation();
      Identite.TypeIdentite identite_TypeIdentite0 = Identite.TypeIdentite.CANDIDAT;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(0, 0, (-1), 0, 1, 0);
      Candidat candidat0 = new Candidat(";|", "", ";|", ";|", identite_TypeIdentite0, (Calendar) gregorianCalendar0, "", ";|", ";|", 0, 1, formation0);
      formation0.ajouterCandidat(candidat0);
      Candidat candidat1 = new Candidat(";|", ";|", ";|", ";|", (Calendar) gregorianCalendar0, ";|", ";|", ";|", 0, 530, formation0);
      formation0.modifierCandidat(candidat1);
      assertEquals(0, candidat1.getBource());
  }
}
