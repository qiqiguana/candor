/*
 * This file was automatically generated by EvoSuite
 */

package org.dom4j.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.dom4j.Attribute;
import org.dom4j.Branch;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.Document;
import org.dom4j.DocumentType;
import org.dom4j.Element;
import org.dom4j.Entity;
import org.dom4j.Namespace;
import org.dom4j.Node;
import org.dom4j.ProcessingInstruction;
import org.dom4j.QName;
import org.dom4j.bean.BeanElement;
import org.dom4j.dom.DOMDocument;
import org.dom4j.dom.DOMDocumentType;
import org.dom4j.dom.DOMElement;
import org.dom4j.dom.DOMEntityReference;
import org.dom4j.dom.DOMText;
import org.dom4j.tree.DefaultAttribute;
import org.dom4j.tree.DefaultDocument;
import org.dom4j.tree.DefaultDocumentType;
import org.dom4j.tree.DefaultElement;
import org.dom4j.tree.DefaultEntity;
import org.dom4j.tree.DefaultProcessingInstruction;
import org.dom4j.tree.FlyweightAttribute;
import org.dom4j.tree.FlyweightProcessingInstruction;
import org.dom4j.util.IndexedElement;
import org.dom4j.util.NodeComparator;
import org.dom4j.util.NonLazyElement;
import org.dom4j.util.UserDataElement;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class NodeComparatorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      NodeComparator nodeComparator0 = new NodeComparator();
      DefaultDocument defaultDocument0 = new DefaultDocument();
      defaultDocument0.addComment((String) null);
      int int0 = nodeComparator0.compare((Document) defaultDocument0, (Document) defaultDocument0);
      assertEquals(0, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      NodeComparator nodeComparator0 = new NodeComparator();
      DefaultDocument defaultDocument0 = new DefaultDocument("'_SGGC 2K q@#}V");
      DefaultDocument defaultDocument1 = (DefaultDocument)defaultDocument0.addProcessingInstruction("'_SGGC 2K q@#}V", "'_SGGC 2K q@#}V");
      DOMElement dOMElement0 = new DOMElement("'_SGGC 2K q@#}V", (Namespace) null);
      DefaultDocument defaultDocument2 = new DefaultDocument((Element) dOMElement0);
      int int0 = nodeComparator0.compareContent((Branch) defaultDocument1, (Branch) defaultDocument2);
      assertEquals(6, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      NodeComparator nodeComparator0 = new NodeComparator();
      DefaultAttribute defaultAttribute0 = new DefaultAttribute("", "");
      int int0 = nodeComparator0.compare((Node) defaultAttribute0, (Node) defaultAttribute0);
      assertEquals(0, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      NodeComparator nodeComparator0 = new NodeComparator();
      DOMText dOMText0 = new DOMText("e &E]zh,&-");
      int int0 = nodeComparator0.compare((Node) dOMText0, (Node) dOMText0);
      assertEquals(0, int0);
  }

  @Test
  public void test4()  throws Throwable  {
      NodeComparator nodeComparator0 = new NodeComparator();
      Namespace namespace0 = Namespace.get("ssL)y&", "ssL)y&");
      FlyweightAttribute flyweightAttribute0 = new FlyweightAttribute("ssL)y&", "ssL)y&", namespace0);
      QName qName0 = flyweightAttribute0.getQName();
      IndexedElement indexedElement0 = new IndexedElement(qName0, (-136));
      IndexedElement indexedElement1 = (IndexedElement)indexedElement0.addCDATA("ssL)y&");
      int int0 = nodeComparator0.compare((Element) indexedElement1, (Element) indexedElement0);
      assertEquals(0, int0);
  }

  @Test
  public void test5()  throws Throwable  {
      NodeComparator nodeComparator0 = new NodeComparator();
      DOMElement dOMElement0 = new DOMElement("Zz&vC]7W3oIuVy`uIg");
      DOMElement dOMElement1 = (DOMElement)dOMElement0.addEntity("Zz&vC]7W3oIuVy`uIg", "Zz&vC]7W3oIuVy`uIg");
      int int0 = nodeComparator0.compare((Element) dOMElement1, (Element) dOMElement1);
      assertEquals(0, int0);
  }

  @Test
  public void test6()  throws Throwable  {
      NodeComparator nodeComparator0 = new NodeComparator();
      DefaultDocument defaultDocument0 = new DefaultDocument();
      defaultDocument0.addProcessingInstruction("org.dom4j.dom.DOMProcessingInstruction@ed8c8dd [ProcessingInstruction: &WtMw;>IRdJY;]", "org.dom4j.dom.DOMProcessingInstruction@ed8c8dd [ProcessingInstruction: &WtMw;>IRdJY;]");
      int int0 = nodeComparator0.compare((Node) defaultDocument0, (Node) defaultDocument0);
      assertEquals(0, int0);
  }

  @Test
  public void test7()  throws Throwable  {
      NodeComparator nodeComparator0 = new NodeComparator();
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType("'_SGGC 2K q@#}V", "'_SGGC 2K q@#}V", "'_SGGC 2K q@#}V");
      int int0 = nodeComparator0.compare((Node) dOMDocumentType0, (Node) dOMDocumentType0);
      assertEquals(0, int0);
  }

  @Test
  public void test8()  throws Throwable  {
      NodeComparator nodeComparator0 = new NodeComparator();
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      int int0 = nodeComparator0.compare((Node) namespace0, (Node) namespace0);
      assertEquals(0, int0);
  }

  @Test
  public void test9()  throws Throwable  {
      NodeComparator nodeComparator0 = new NodeComparator();
      DOMDocument dOMDocument0 = new DOMDocument();
      DOMDocument dOMDocument1 = (DOMDocument)dOMDocument0.clone();
      DOMDocument dOMDocument2 = (DOMDocument)dOMDocument1.addDocType("F'N]'YC+oWJs'~", "F'N]'YC+oWJs'~", "F'N]'YC+oWJs'~");
      int int0 = nodeComparator0.compare((Document) dOMDocument2, (Document) dOMDocument0);
      assertEquals(1, int0);
  }

  @Test
  public void test10()  throws Throwable  {
      NodeComparator nodeComparator0 = new NodeComparator();
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      QName qName0 = QName.get("", namespace0, "");
      UserDataElement userDataElement0 = new UserDataElement(qName0);
      QName qName1 = new QName("", namespace0, "");
      DefaultElement defaultElement0 = (DefaultElement)userDataElement0.addElement(qName1);
      int int0 = nodeComparator0.compare((Element) defaultElement0, (Element) userDataElement0);
      assertEquals((-1), int0);
  }

  @Test
  public void test11()  throws Throwable  {
      NodeComparator nodeComparator0 = new NodeComparator();
      DOMElement dOMElement0 = new DOMElement("");
      Namespace namespace0 = dOMElement0.getNamespaceForPrefix("");
      NonLazyElement nonLazyElement0 = new NonLazyElement("", namespace0);
      QName qName0 = nonLazyElement0.getQName();
      DOMElement dOMElement1 = (DOMElement)dOMElement0.addAttribute(qName0, "");
      int int0 = nodeComparator0.compare((Element) dOMElement1, (Element) nonLazyElement0);
      assertEquals(1, int0);
  }

  @Test
  public void test12()  throws Throwable  {
      NodeComparator nodeComparator0 = new NodeComparator();
      UserDataElement userDataElement0 = new UserDataElement("IH");
      QName qName0 = new QName("IH", (Namespace) null);
      UserDataElement userDataElement1 = (UserDataElement)userDataElement0.addAttribute(qName0, "IH");
      DefaultDocument defaultDocument0 = new DefaultDocument((Element) userDataElement1);
      int int0 = nodeComparator0.compare((Document) defaultDocument0, (Document) defaultDocument0);
      assertEquals(0, int0);
  }

  @Test
  public void test13()  throws Throwable  {
      NodeComparator nodeComparator0 = new NodeComparator();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      QName qName0 = defaultDocumentFactory0.createQName("F'N]'YC+oWJs'~", "F'N]'YC+oWJs'~", "F'N]'YC+oWJs'~");
      DefaultAttribute defaultAttribute0 = new DefaultAttribute(qName0);
      NonLazyElement nonLazyElement0 = new NonLazyElement(qName0);
      DefaultAttribute defaultAttribute1 = (DefaultAttribute)defaultDocumentFactory0.createAttribute((Element) nonLazyElement0, "F'N]'YC+oWJs'~", "F'N]'YC+oWJs'~");
      int int0 = nodeComparator0.compare((Attribute) defaultAttribute0, (Attribute) defaultAttribute1);
      assertEquals(14, int0);
  }

  @Test
  public void test14()  throws Throwable  {
      NodeComparator nodeComparator0 = new NodeComparator();
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      QName qName0 = QName.get((String) null, namespace0, (String) null);
      BeanElement beanElement0 = new BeanElement(qName0);
      Namespace namespace1 = beanElement0.getNamespaceForURI((String) null);
      int int0 = nodeComparator0.compare(namespace1, namespace0);
      assertEquals((-36), int0);
  }

  @Test
  public void test15()  throws Throwable  {
      NodeComparator nodeComparator0 = new NodeComparator();
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType("'_SGGC 2K q@#}V", "'_SGGC 2K q@#}V", "'_SGGC 2K q@#}V");
      int int0 = nodeComparator0.compare((DocumentType) null, (DocumentType) dOMDocumentType0);
      assertEquals((-1), int0);
  }

  @Test
  public void test16()  throws Throwable  {
      NodeComparator nodeComparator0 = new NodeComparator();
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType("", "", "");
      DefaultDocumentType defaultDocumentType0 = new DefaultDocumentType("", "org.dom4j.dom.DOMCDATA@251a775e [CDATA: \"\"]");
      int int0 = nodeComparator0.compare((DocumentType) dOMDocumentType0, (DocumentType) defaultDocumentType0);
      assertEquals(1, int0);
  }

  @Test
  public void test17()  throws Throwable  {
      NodeComparator nodeComparator0 = new NodeComparator();
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType("e &E]zh,&-", "e &E]zh,&-", "e &E]zh,&-");
      DOMDocumentType dOMDocumentType1 = new DOMDocumentType("e &E]zh,&-", "e &E]zh,&-", "e &E]zh,&-");
      int int0 = nodeComparator0.compare((DocumentType) dOMDocumentType1, (DocumentType) dOMDocumentType0);
      assertEquals(0, int0);
  }

  @Test
  public void test18()  throws Throwable  {
      NodeComparator nodeComparator0 = new NodeComparator();
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType((String) null, (String) null);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentType defaultDocumentType0 = (DefaultDocumentType)defaultDocumentFactory0.createDocType((String) null, (String) null, "");
      int int0 = nodeComparator0.compare((DocumentType) dOMDocumentType0, (DocumentType) defaultDocumentType0);
      assertEquals((-1), int0);
  }

  @Test
  public void test19()  throws Throwable  {
      NodeComparator nodeComparator0 = new NodeComparator();
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      QName qName0 = QName.get("", namespace0, "");
      UserDataElement userDataElement0 = new UserDataElement(qName0);
      DefaultEntity defaultEntity0 = new DefaultEntity((String) null, "");
      DOMEntityReference dOMEntityReference0 = new DOMEntityReference((Element) userDataElement0, "", (String) null);
      int int0 = nodeComparator0.compare((Entity) defaultEntity0, (Entity) dOMEntityReference0);
      assertEquals((-1), int0);
  }

  @Test
  public void test20()  throws Throwable  {
      NodeComparator nodeComparator0 = new NodeComparator();
      FlyweightProcessingInstruction flyweightProcessingInstruction0 = new FlyweightProcessingInstruction();
      DefaultProcessingInstruction defaultProcessingInstruction0 = new DefaultProcessingInstruction((Element) null, "e &E]zh,&-", "e &E]zh,&-");
      int int0 = nodeComparator0.compare((ProcessingInstruction) flyweightProcessingInstruction0, (ProcessingInstruction) defaultProcessingInstruction0);
      assertEquals((-1), int0);
  }

  @Test
  public void test21()  throws Throwable  {
      NodeComparator nodeComparator0 = new NodeComparator();
      NonLazyElement nonLazyElement0 = new NonLazyElement("");
      DefaultElement defaultElement0 = (DefaultElement)nonLazyElement0.addElement("");
      int int0 = nodeComparator0.compareContent((Branch) defaultElement0, (Branch) nonLazyElement0);
      assertEquals((-1), int0);
  }
}
