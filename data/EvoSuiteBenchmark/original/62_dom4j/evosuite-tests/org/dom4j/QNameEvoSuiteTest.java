/*
 * This file was automatically generated by EvoSuite
 */

package org.dom4j;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.bean.BeanElement;
import org.dom4j.tree.DefaultElement;
import org.dom4j.tree.QNameCache;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class QNameEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      QName qName0 = defaultDocumentFactory0.createQName("5,@_o4^F]5O", "5,@_o4^F]5O", "5,@_o4^F]5O");
      String string0 = qName0.toString();
      assertEquals("5,@_o4^F]5O:5,@_o4^F]5O", qName0.getQualifiedName());
      assertNotNull(string0);
      assertEquals("5,@_o4^F]5O", qName0.getName());
  }

  @Test
  public void test1()  throws Throwable  {
      QName qName0 = QName.get("~i", (Namespace) null, "~i");
      assertNotNull(qName0);
      assertEquals("~i", qName0.getName());
  }

  @Test
  public void test2()  throws Throwable  {
      Namespace namespace0 = Namespace.get("t");
      QName qName0 = QName.get("t", namespace0);
      assertEquals("t", qName0.getName());
  }

  @Test
  public void test3()  throws Throwable  {
      QName qName0 = new QName("");
      DefaultElement defaultElement0 = new DefaultElement(qName0);
      QName qName1 = defaultElement0.getQName("");
      assertNotNull(qName1);
      
      boolean boolean0 = qName0.equals((Object) qName1);
      assertEquals(true, boolean0);
      assertEquals("/", defaultElement0.getUniquePath());
  }

  @Test
  public void test4()  throws Throwable  {
      QName qName0 = QName.get("'", "'", (String) null);
      assertNotNull(qName0);
      assertEquals("'", qName0.getName());
  }

  @Test
  public void test5()  throws Throwable  {
      QName qName0 = new QName((String) null);
      assertEquals("", qName0.getQualifiedName());
  }

  @Test
  public void test6()  throws Throwable  {
      QName qName0 = new QName("H{aoj1RUm?^eMP", (Namespace) null);
      assertEquals("H{aoj1RUm?^eMP", qName0.getName());
  }

  @Test
  public void test7()  throws Throwable  {
      QName qName0 = new QName((String) null, (Namespace) null, (String) null);
      assertEquals("", qName0.getName());
  }

  @Test
  public void test8()  throws Throwable  {
      QNameCache qNameCache0 = new QNameCache();
      QName qName0 = new QName("'", (Namespace) null, "'");
      QName qName1 = qNameCache0.intern(qName0);
      assertEquals("'", qName0.getName());
      assertEquals("'", qName1.getName());
  }

  @Test
  public void test9()  throws Throwable  {
      QName qName0 = QName.get((String) null, (String) null, "c`3f]X&z-~~x=W@o");
      assertEquals("c`3f]X&z-~~x=W@o", qName0.getNamespaceURI());
      assertEquals("", qName0.getQualifiedName());
      assertNotNull(qName0);
  }

  @Test
  public void test10()  throws Throwable  {
      QName qName0 = QName.get("", "", "");
      assertEquals("", qName0.getNamespaceURI());
  }

  @Test
  public void test11()  throws Throwable  {
      QName qName0 = QName.get((String) null, (String) null, (String) null);
      assertEquals("", qName0.getNamespacePrefix());
  }

  @Test
  public void test12()  throws Throwable  {
      QName qName0 = QName.get("'", "'", "'");
      assertNotNull(qName0);
      assertEquals("'", qName0.getNamespacePrefix());
  }

  @Test
  public void test13()  throws Throwable  {
      QName qName0 = QName.get("org.dom4j.QName@babe [name: 5,@_o4^F]5O namespace: \"org.dom4j.Namespace@babe [Namespace: prefix 5,@_o4^F]5O mapped to URI \"5,@_o4^F]5O\"]\"]", "5,@_o4^F]5O");
      assertEquals("5,@_o4^F]5O", qName0.getNamespaceURI());
      assertNotNull(qName0);
  }

  @Test
  public void test14()  throws Throwable  {
      QName qName0 = QName.get("F", (String) null);
      assertEquals("F", qName0.getName());
      assertNotNull(qName0);
  }

  @Test
  public void test15()  throws Throwable  {
      QNameCache qNameCache0 = new QNameCache();
      QName qName0 = new QName("F");
      QName qName1 = qNameCache0.intern(qName0);
      assertEquals("F", qName1.getName());
  }

  @Test
  public void test16()  throws Throwable  {
      QName qName0 = new QName("F");
      String string0 = qName0.toString();
      assertNotNull(string0);
      assertEquals("F", qName0.getQualifiedName());
      assertEquals("F", qName0.getName());
  }

  @Test
  public void test17()  throws Throwable  {
      Namespace namespace0 = Namespace.get("H{aoj1RUm?^eMP", "H{aoj1RUm?^eMP");
      BeanElement beanElement0 = new BeanElement("H{aoj1RUm?^eMP", namespace0, (Object) "namespace::H{aoj1RUm?^eMP");
      QName qName0 = beanElement0.getQName("namespace::H{aoj1RUm?^eMP");
      assertNotNull(qName0);
      
      boolean boolean0 = qName0.equals((Object) "H{aoj1RUm?^eMP:namespace::H{aoj1RUm?^eMP");
      assertEquals(false, boolean0);
      assertEquals("/H{aoj1RUm?^eMP:H{aoj1RUm?^eMP", beanElement0.getUniquePath());
  }

  @Test
  public void test18()  throws Throwable  {
      QName qName0 = new QName("");
      DefaultElement defaultElement0 = new DefaultElement(qName0);
      QName qName1 = defaultElement0.getQName("XPath expression uses unbound namespace prefix ");
      assertNotNull(qName1);
      
      boolean boolean0 = qName0.equals((Object) qName1);
      assertEquals(false, boolean0);
  }
}
