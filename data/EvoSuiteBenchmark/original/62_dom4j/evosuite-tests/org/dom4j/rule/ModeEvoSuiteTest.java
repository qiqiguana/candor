/*
 * This file was automatically generated by EvoSuite
 */

package org.dom4j.rule;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.HashMap;
import java.util.Map;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.Document;
import org.dom4j.Element;
import org.dom4j.Namespace;
import org.dom4j.Node;
import org.dom4j.NodeFilter;
import org.dom4j.NodeType;
import org.dom4j.QName;
import org.dom4j.dom.DOMDocument;
import org.dom4j.dom.DOMDocumentType;
import org.dom4j.dom.DOMElement;
import org.dom4j.rule.Action;
import org.dom4j.rule.Mode;
import org.dom4j.rule.NullAction;
import org.dom4j.rule.Pattern;
import org.dom4j.rule.Rule;
import org.dom4j.rule.RuleSet;
import org.dom4j.rule.pattern.DefaultPattern;
import org.dom4j.util.IndexedElement;
import org.dom4j.util.NonLazyElement;
import org.dom4j.util.UserDataAttribute;
import org.dom4j.util.UserDataElement;
import org.dom4j.xpath.XPathPattern;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ModeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Mode mode0 = new Mode();
      mode0.fireRule((Node) null);
  }

  @Test
  public void test1()  throws Throwable  {
      Mode mode0 = new Mode();
      DOMElement dOMElement0 = new DOMElement((QName) null);
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType("Propert8 file otSfound!", "Propert8 file otSfound!", "Propert8 file otSfound!");
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0, dOMDocumentType0);
      mode0.applyTemplates((Document) dOMDocument0);
      assertEquals(false, dOMDocument0.isReadOnly());
  }

  @Test
  public void test2()  throws Throwable  {
      Mode mode0 = new Mode();
      UserDataElement userDataElement0 = new UserDataElement("COMME0T_NODE");
      QName qName0 = userDataElement0.getQName("COMME0T_NODE");
      UserDataAttribute userDataAttribute0 = new UserDataAttribute(qName0);
      Namespace namespace0 = userDataAttribute0.getNamespace();
      XPathPattern xPathPattern0 = (XPathPattern)namespace0.createPattern("COMME0T_NODE");
      NullAction nullAction0 = NullAction.SINGLETON;
      Rule rule0 = new Rule((Pattern) xPathPattern0, (Action) nullAction0);
      mode0.addRule(rule0);
      mode0.fireRule((Node) userDataElement0);
      assertEquals(NodeType.ELEMENT_NODE, userDataElement0.getNodeTypeEnum());
  }

  @Test
  public void test3()  throws Throwable  {
      Mode mode0 = new Mode();
      IndexedElement indexedElement0 = new IndexedElement("4HEp{X$tEdY/zI");
      NonLazyElement nonLazyElement0 = new NonLazyElement("4HEp{X$tEdY/zI");
      QName qName0 = nonLazyElement0.getQName("4HEp{X$tEdY/zI");
      indexedElement0.addAttribute(qName0, "4HEp{X$tEdY/zI");
      mode0.applyTemplates((Element) indexedElement0);
      assertEquals(true, indexedElement0.supportsParent());
  }

  @Test
  public void test4()  throws Throwable  {
      Mode mode0 = new Mode();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      QName qName0 = defaultDocumentFactory0.createQName("!)qw4(wm;wDi#c2U_", "!)qw4(wm;wDi#c2U_", "!)qw4(wm;wDi#c2U_");
      IndexedElement indexedElement0 = new IndexedElement(qName0, 55296);
      indexedElement0.addProcessingInstruction("!)qw4(wm;wDi#c2U_", "!)qw4(wm;wDi#c2U_");
      mode0.applyTemplates((Element) indexedElement0);
      assertEquals("!)qw4(wm;wDi#c2U_:!)qw4(wm;wDi#c2U_", indexedElement0.getXPathNameStep());
  }

  @Test
  public void test5()  throws Throwable  {
      Mode mode0 = new Mode();
      DefaultPattern defaultPattern0 = new DefaultPattern((NodeFilter) null);
      NullAction nullAction0 = NullAction.SINGLETON;
      Rule rule0 = new Rule((Pattern) defaultPattern0, (Action) nullAction0);
      mode0.removeRule(rule0);
      mode0.addRule(rule0);
      assertEquals(0, rule0.getAppearenceCount());
  }

  @Test
  public void test6()  throws Throwable  {
      Mode mode0 = new Mode();
      UserDataElement userDataElement0 = new UserDataElement("COMME0T_NODE");
      QName qName0 = userDataElement0.getQName("COMME0T_NODE");
      UserDataAttribute userDataAttribute0 = new UserDataAttribute(qName0);
      Namespace namespace0 = userDataAttribute0.getNamespace();
      XPathPattern xPathPattern0 = (XPathPattern)namespace0.createPattern("COMME0T_NODE");
      NullAction nullAction0 = NullAction.SINGLETON;
      Rule rule0 = new Rule((Pattern) xPathPattern0, (Action) nullAction0);
      mode0.removeRule(rule0);
      assertNull(rule0.getMatchesNodeName());
  }

  @Test
  public void test7()  throws Throwable  {
      Mode mode0 = new Mode();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      QName qName0 = defaultDocumentFactory0.createQName("!)qw4(wm;wDi#c2U_", "!)qw4(wm;wDi#c2U_", "!)qw4(wm;wDi#c2U_");
      IndexedElement indexedElement0 = new IndexedElement(qName0, 55296);
      NodeType nodeType0 = NodeType.PROCESSING_INSTRUCTION_NODE;
      mode0.getRuleSet(nodeType0);
      indexedElement0.addProcessingInstruction("!)qw4(wm;wDi#c2U_", "!)qw4(wm;wDi#c2U_");
      mode0.applyTemplates((Element) indexedElement0);
      assertEquals(false, indexedElement0.isTextOnly());
  }

  @Test
  public void test8()  throws Throwable  {
      Mode mode0 = new Mode();
      HashMap<String, RuleSet> hashMap0 = new HashMap<String, RuleSet>();
      Map<String, RuleSet> map0 = mode0.addToNameMap((Map<String, RuleSet>) hashMap0, "IGNO/:E", (Rule) null);
      Map<String, RuleSet> map1 = mode0.addToNameMap(map0, "IGNO/:E", (Rule) null);
      assertEquals(false, hashMap0.isEmpty());
      assertSame(map0, map1);
  }

  @Test
  public void test9()  throws Throwable  {
      Mode mode0 = new Mode();
      UserDataElement userDataElement0 = new UserDataElement("COMME0T_NODE");
      QName qName0 = userDataElement0.getQName("COMME0T_NODE");
      UserDataAttribute userDataAttribute0 = new UserDataAttribute(qName0);
      Namespace namespace0 = userDataAttribute0.getNamespace();
      XPathPattern xPathPattern0 = (XPathPattern)namespace0.createPattern("COMME0T_NODE");
      NullAction nullAction0 = NullAction.SINGLETON;
      Rule rule0 = new Rule((Pattern) xPathPattern0, (Action) nullAction0);
      Map<String, RuleSet> map0 = mode0.addToNameMap((Map<String, RuleSet>) null, "COMME0T_NODE", rule0);
      assertNotNull(map0);
      assertEquals(false, map0.isEmpty());
  }

  @Test
  public void test10()  throws Throwable  {
      Mode mode0 = new Mode();
      DefaultPattern defaultPattern0 = new DefaultPattern((NodeFilter) null);
      NullAction nullAction0 = NullAction.SINGLETON;
      Rule rule0 = new Rule((Pattern) defaultPattern0, (Action) nullAction0);
      mode0.removeFromNameMap((Map<String, RuleSet>) null, "", rule0);
      assertEquals(0.5, rule0.getPriority(), 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      Mode mode0 = new Mode();
      HashMap<String, RuleSet> hashMap0 = new HashMap<String, RuleSet>();
      Rule rule0 = new Rule();
      mode0.removeFromNameMap((Map<String, RuleSet>) hashMap0, "rAdj.|vw{_H", rule0);
      assertEquals(0.5, rule0.getPriority(), 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      Mode mode0 = new Mode();
      HashMap<String, RuleSet> hashMap0 = new HashMap<String, RuleSet>();
      mode0.addToNameMap((Map<String, RuleSet>) hashMap0, "IGNO/:E", (Rule) null);
      mode0.removeFromNameMap((Map<String, RuleSet>) hashMap0, "IGNO/:E", (Rule) null);
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
  }
}
