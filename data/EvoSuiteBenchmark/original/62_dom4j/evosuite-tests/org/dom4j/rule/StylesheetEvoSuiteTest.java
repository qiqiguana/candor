/*
 * This file was automatically generated by EvoSuite
 */

package org.dom4j.rule;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.List;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.InvalidXPathException;
import org.dom4j.Namespace;
import org.dom4j.Node;
import org.dom4j.QName;
import org.dom4j.XPath;
import org.dom4j.dom.DOMCDATA;
import org.dom4j.dom.DOMDocument;
import org.dom4j.dom.DOMDocumentType;
import org.dom4j.dom.DOMElement;
import org.dom4j.rule.Action;
import org.dom4j.rule.Rule;
import org.dom4j.rule.Stylesheet;
import org.dom4j.tree.DefaultEntity;
import org.dom4j.util.NonLazyElement;
import org.dom4j.util.UserDataAttribute;
import org.dom4j.xpath.DefaultXPath;
import org.jaxen.expr.DefaultExpr;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class StylesheetEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Stylesheet stylesheet0 = new Stylesheet();
      // Undeclared exception!
      try {
        stylesheet0.removeRule((Rule) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      Stylesheet stylesheet0 = new Stylesheet();
      List<Object> list0 = DefaultExpr.convertToList((Object) "*");
      stylesheet0.run(list0);
      assertEquals(false, list0.isEmpty());
  }

  @Test
  public void test2()  throws Throwable  {
      Stylesheet stylesheet0 = new Stylesheet();
      stylesheet0.setValueOfAction((Action) null);
      assertNull(stylesheet0.getModeName());
  }

  @Test
  public void test3()  throws Throwable  {
      Stylesheet stylesheet0 = new Stylesheet();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultEntity defaultEntity0 = (DefaultEntity)defaultDocumentFactory0.createEntity("", "");
      stylesheet0.run((Node) defaultEntity0);
      assertEquals("&;", defaultEntity0.asXML());
  }

  @Test
  public void test4()  throws Throwable  {
      Stylesheet stylesheet0 = new Stylesheet();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      QName qName0 = defaultDocumentFactory0.createQName("@[h^{^so1");
      UserDataAttribute userDataAttribute0 = new UserDataAttribute(qName0);
      List<Object> list0 = DefaultExpr.convertToList((Object) userDataAttribute0);
      stylesheet0.applyTemplates((Object) list0);
      assertEquals(1, list0.size());
  }

  @Test
  public void test5()  throws Throwable  {
      Stylesheet stylesheet0 = new Stylesheet();
      stylesheet0.clear();
      assertNull(stylesheet0.getModeName());
  }

  @Test
  public void test6()  throws Throwable  {
      Stylesheet stylesheet0 = new Stylesheet();
      DOMCDATA dOMCDATA0 = new DOMCDATA("#e");
      DefaultXPath defaultXPath0 = (DefaultXPath)dOMCDATA0.createXPath("Document");
      stylesheet0.applyTemplates((Object) "Document", (XPath) defaultXPath0);
      assertNull(stylesheet0.getModeName());
  }

  @Test
  public void test7()  throws Throwable  {
      Stylesheet stylesheet0 = new Stylesheet();
      DOMCDATA dOMCDATA0 = new DOMCDATA("#e");
      stylesheet0.run((Object) dOMCDATA0);
      assertNull(dOMCDATA0.getPrefix());
  }

  @Test
  public void test8()  throws Throwable  {
      Stylesheet stylesheet0 = new Stylesheet();
      stylesheet0.setModeName("#e");
      assertEquals("#e", stylesheet0.getModeName());
  }

  @Test
  public void test9()  throws Throwable  {
      Stylesheet stylesheet0 = new Stylesheet();
      Action action0 = stylesheet0.getValueOfAction();
      assertNull(action0);
  }

  @Test
  public void test10()  throws Throwable  {
      Stylesheet stylesheet0 = new Stylesheet();
      Rule rule0 = new Rule();
      // Undeclared exception!
      try {
        stylesheet0.addRule(rule0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Stylesheet stylesheet0 = new Stylesheet();
      String string0 = stylesheet0.getModeName();
      assertNull(string0);
  }

  @Test
  public void test12()  throws Throwable  {
      Stylesheet stylesheet0 = new Stylesheet();
      DOMElement dOMElement0 = new DOMElement("");
      List<Namespace> list0 = dOMElement0.additionalNamespaces("");
      stylesheet0.run((Object) list0);
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test13()  throws Throwable  {
      Stylesheet stylesheet0 = new Stylesheet();
      stylesheet0.run((Object) "", "");
      assertNull(stylesheet0.getModeName());
  }

  @Test
  public void test14()  throws Throwable  {
      Stylesheet stylesheet0 = new Stylesheet();
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      QName qName0 = QName.get("]uZfhu5<S;ko", namespace0);
      DOMElement dOMElement0 = new DOMElement(qName0, 0);
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType("]uZfhu5<S;ko", "]uZfhu5<S;ko");
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0, dOMDocumentType0);
      List<Node> list0 = dOMDocument0.content();
      stylesheet0.run((List) list0, "]uZfhu5<S;ko");
      assertNull(stylesheet0.getModeName());
  }

  @Test
  public void test15()  throws Throwable  {
      Stylesheet stylesheet0 = new Stylesheet();
      NonLazyElement nonLazyElement0 = new NonLazyElement("13.494121526985463");
      DefaultXPath defaultXPath0 = (DefaultXPath)nonLazyElement0.createXPath("13.494121526985463");
      try {
        stylesheet0.applyTemplates((Object) "13.494121526985463", (XPath) defaultXPath0, "13.494121526985463");
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * java.lang.Double cannot be cast to org.dom4j.Node
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      Stylesheet stylesheet0 = new Stylesheet();
      QName qName0 = QName.get("", "");
      DOMElement dOMElement0 = new DOMElement(qName0, (-284));
      dOMElement0.addComment("");
      stylesheet0.applyTemplates((Object) dOMElement0);
      assertEquals("", dOMElement0.getNodeName());
  }

  @Test
  public void test17()  throws Throwable  {
      Stylesheet stylesheet0 = new Stylesheet();
      DOMElement dOMElement0 = new DOMElement("");
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0);
      stylesheet0.applyTemplates((Object) dOMDocument0, "processing-instruction()");
      assertEquals(true, dOMDocument0.hasChildNodes());
  }

  @Test
  public void test18()  throws Throwable  {
      Stylesheet stylesheet0 = new Stylesheet();
      stylesheet0.applyTemplates((Object) "", "");
      assertNull(stylesheet0.getModeName());
  }
}
