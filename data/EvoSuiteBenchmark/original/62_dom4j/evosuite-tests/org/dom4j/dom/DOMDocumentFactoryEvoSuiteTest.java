/*
 * This file was automatically generated by EvoSuite
 */

package org.dom4j.dom;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Map;
import org.dom4j.Element;
import org.dom4j.NodeType;
import org.dom4j.QName;
import org.dom4j.dom.DOMAttribute;
import org.dom4j.dom.DOMCDATA;
import org.dom4j.dom.DOMComment;
import org.dom4j.dom.DOMDocument;
import org.dom4j.dom.DOMDocumentFactory;
import org.dom4j.dom.DOMDocumentType;
import org.dom4j.dom.DOMElement;
import org.dom4j.dom.DOMEntityReference;
import org.dom4j.dom.DOMNamespace;
import org.dom4j.dom.DOMProcessingInstruction;
import org.dom4j.dom.DOMText;
import org.junit.BeforeClass;
import org.w3c.dom.DOMException;
import org.w3c.dom.DocumentType;

@RunWith(EvoSuiteRunner.class)
public class DOMDocumentFactoryEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DOMDocumentFactory dOMDocumentFactory0 = new DOMDocumentFactory();
      // Undeclared exception!
      try {
        dOMDocumentFactory0.createProcessingInstruction("|U7=>_y", (Map) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      DOMDocumentFactory dOMDocumentFactory0 = new DOMDocumentFactory();
      DOMDocumentType dOMDocumentType0 = (DOMDocumentType)dOMDocumentFactory0.createDocumentType("0", "0", "0");
      DOMDocument dOMDocument0 = (DOMDocument)dOMDocumentFactory0.createDocument("0", "0", (DocumentType) dOMDocumentType0);
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE 0 PUBLIC \"0\" \"0\"><0 xmlns=\"0\"/>", dOMDocument0.asXML());
  }

  @Test
  public void test2()  throws Throwable  {
      DOMDocumentFactory dOMDocumentFactory0 = new DOMDocumentFactory();
      DOMAttribute dOMAttribute0 = (DOMAttribute)dOMDocumentFactory0.createAttribute((Element) null, "", "");
      assertEquals(NodeType.ATTRIBUTE_NODE, dOMAttribute0.getNodeTypeEnum());
  }

  @Test
  public void test3()  throws Throwable  {
      DOMDocumentFactory dOMDocumentFactory0 = new DOMDocumentFactory();
      DOMComment dOMComment0 = (DOMComment)dOMDocumentFactory0.createComment("p.^^g}oxu1l~/i");
      assertNull(dOMComment0.getPrefix());
  }

  @Test
  public void test4()  throws Throwable  {
      DOMDocumentFactory dOMDocumentFactory0 = new DOMDocumentFactory();
      DOMElement dOMElement0 = (DOMElement)dOMDocumentFactory0.createElement("p.^^g}oxu1l~/i");
      assertNull(dOMElement0.getNodeValue());
  }

  @Test
  public void test5()  throws Throwable  {
      DOMDocumentFactory dOMDocumentFactory0 = new DOMDocumentFactory();
      QName qName0 = QName.get("N&", "N&", "N&");
      DOMElement dOMElement0 = (DOMElement)dOMDocumentFactory0.createElement(qName0, (-1727));
      assertEquals(false, dOMElement0.hasContent());
  }

  @Test
  public void test6()  throws Throwable  {
      DOMDocumentFactory dOMDocumentFactory0 = new DOMDocumentFactory();
      // Undeclared exception!
      try {
        dOMDocumentFactory0.getFeature("core", "core");
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Not supported yet.
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      DOMDocumentFactory dOMDocumentFactory0 = new DOMDocumentFactory();
      DOMText dOMText0 = (DOMText)dOMDocumentFactory0.createText("");
      assertEquals("#text", dOMText0.getNodeName());
  }

  @Test
  public void test8()  throws Throwable  {
      DOMDocumentFactory dOMDocumentFactory0 = new DOMDocumentFactory();
      DOMCDATA dOMCDATA0 = (DOMCDATA)dOMDocumentFactory0.createCDATA("wO_JFBFg");
      assertEquals("<![CDATA[wO_JFBFg]]>", dOMCDATA0.asXML());
  }

  @Test
  public void test9()  throws Throwable  {
      DOMDocumentFactory dOMDocumentFactory0 = (DOMDocumentFactory)DOMDocumentFactory.getInstance();
      assertNotNull(dOMDocumentFactory0);
  }

  @Test
  public void test10()  throws Throwable  {
      DOMDocumentFactory dOMDocumentFactory0 = new DOMDocumentFactory();
      DOMDocument dOMDocument0 = (DOMDocument)dOMDocumentFactory0.createDocument("n.");
      assertEquals(9, dOMDocument0.getNodeType());
  }

  @Test
  public void test11()  throws Throwable  {
      DOMDocumentFactory dOMDocumentFactory0 = new DOMDocumentFactory();
      DOMNamespace dOMNamespace0 = (DOMNamespace)dOMDocumentFactory0.createNamespace("(i,,%C/_H[", "(i,,%C/_H[");
      assertEquals("namespace::(i,,%C/_H[", dOMNamespace0.getXPathNameStep());
  }

  @Test
  public void test12()  throws Throwable  {
      DOMDocumentFactory dOMDocumentFactory0 = new DOMDocumentFactory();
      DOMEntityReference dOMEntityReference0 = (DOMEntityReference)dOMDocumentFactory0.createEntity("n.");
      assertEquals("&n.;", dOMEntityReference0.getStringValue());
  }

  @Test
  public void test13()  throws Throwable  {
      DOMDocumentFactory dOMDocumentFactory0 = new DOMDocumentFactory();
      DOMProcessingInstruction dOMProcessingInstruction0 = (DOMProcessingInstruction)dOMDocumentFactory0.createProcessingInstruction("n.", "n.");
      assertEquals(NodeType.PROCESSING_INSTRUCTION_NODE, dOMProcessingInstruction0.getNodeTypeEnum());
  }

  @Test
  public void test14()  throws Throwable  {
      DOMDocumentFactory dOMDocumentFactory0 = new DOMDocumentFactory();
      DOMDocumentType dOMDocumentType0 = (DOMDocumentType)dOMDocumentFactory0.createDocType("xml", "xml", "xml");
      assertEquals("xml", dOMDocumentType0.getSystemID());
  }

  @Test
  public void test15()  throws Throwable  {
      DOMDocumentFactory dOMDocumentFactory0 = new DOMDocumentFactory();
      DOMEntityReference dOMEntityReference0 = (DOMEntityReference)dOMDocumentFactory0.createEntity("core", "core");
      assertEquals("&core;", dOMEntityReference0.getStringValue());
  }

  @Test
  public void test16()  throws Throwable  {
      DOMDocumentFactory dOMDocumentFactory0 = new DOMDocumentFactory();
      boolean boolean0 = dOMDocumentFactory0.hasFeature("xml", (String) null);
      assertEquals(true, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      DOMDocumentFactory dOMDocumentFactory0 = new DOMDocumentFactory();
      boolean boolean0 = dOMDocumentFactory0.hasFeature("", "core");
      assertEquals(false, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      DOMDocumentFactory dOMDocumentFactory0 = new DOMDocumentFactory();
      boolean boolean0 = dOMDocumentFactory0.hasFeature("core", "");
      assertEquals(true, boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      DOMDocumentFactory dOMDocumentFactory0 = new DOMDocumentFactory();
      boolean boolean0 = dOMDocumentFactory0.hasFeature("core", "core");
      assertEquals(false, boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      DOMDocumentFactory dOMDocumentFactory0 = new DOMDocumentFactory();
      DOMDocument dOMDocument0 = (DOMDocument)dOMDocumentFactory0.createDocument("(i,,%C/_H[", "(i,,%C/_H[", (DocumentType) null);
      assertNotNull(dOMDocument0);
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<(i,,%C/_H[ xmlns=\"(i,,%C/_H[\"/>", dOMDocument0.asXML());
  }

  @Test
  public void test21()  throws Throwable  {
      DOMDocumentFactory dOMDocumentFactory0 = new DOMDocumentFactory();
      // Undeclared exception!
      try {
        dOMDocumentFactory0.asDocumentType((DocumentType) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
