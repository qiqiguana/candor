/*
 * This file was automatically generated by EvoSuite
 */

package org.dom4j.dom;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.List;
import org.apache.xalan.processor.ProcessorExsltFunction;
import org.apache.xalan.templates.ElemMessage;
import org.dom4j.Attribute;
import org.dom4j.Branch;
import org.dom4j.CharacterData;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.Document;
import org.dom4j.DocumentType;
import org.dom4j.Element;
import org.dom4j.IllegalAddException;
import org.dom4j.Namespace;
import org.dom4j.Node;
import org.dom4j.NodeType;
import org.dom4j.ProcessingInstruction;
import org.dom4j.QName;
import org.dom4j.bean.BeanElement;
import org.dom4j.bean.BeanMetaData;
import org.dom4j.dom.DOMAttribute;
import org.dom4j.dom.DOMCDATA;
import org.dom4j.dom.DOMComment;
import org.dom4j.dom.DOMDocument;
import org.dom4j.dom.DOMDocumentType;
import org.dom4j.dom.DOMElement;
import org.dom4j.dom.DOMEntityReference;
import org.dom4j.dom.DOMNamespace;
import org.dom4j.dom.DOMNodeHelper;
import org.dom4j.dom.DOMText;
import org.dom4j.tree.DefaultAttribute;
import org.dom4j.tree.DefaultCDATA;
import org.dom4j.tree.DefaultComment;
import org.dom4j.tree.DefaultDocument;
import org.dom4j.tree.DefaultDocumentType;
import org.dom4j.tree.DefaultElement;
import org.dom4j.tree.DefaultText;
import org.dom4j.tree.FlyweightCDATA;
import org.dom4j.tree.FlyweightComment;
import org.dom4j.util.IndexedElement;
import org.dom4j.util.NonLazyElement;
import org.dom4j.util.UserDataElement;
import org.junit.BeforeClass;
import org.w3c.dom.Attr;
import org.w3c.dom.DOMException;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.NodeList;
import org.w3c.dom.Text;

@RunWith(EvoSuiteRunner.class)
public class DOMNodeHelperEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      FlyweightComment flyweightComment0 = new FlyweightComment("EZF8F`x]q");
      boolean boolean0 = DOMNodeHelper.supports((Node) flyweightComment0, "EZF8F`x]q", "EZF8F`x]q");
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      org.w3c.dom.Node node0 = DOMNodeHelper.getLastChild((Node) null);
      assertNull(node0);
  }

  @Test
  public void test2()  throws Throwable  {
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType();
      org.w3c.dom.Node node0 = DOMNodeHelper.getFirstChild((Node) dOMDocumentType0);
      assertNull(node0);
  }

  @Test
  public void test3()  throws Throwable  {
      UserDataElement userDataElement0 = new UserDataElement("found system property, value=");
      try {
        DOMNodeHelper.setPrefix((Node) userDataElement0, "found system property, value=");
        fail("Expecting exception: DOMException");
      } catch(DOMException e) {
        /*
         * Not supported yet
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      DefaultComment defaultComment0 = new DefaultComment((Element) null, "");
      String string0 = DOMNodeHelper.getData((CharacterData) defaultComment0);
      assertEquals("", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      boolean boolean0 = DOMNodeHelper.isSupported((Node) null, "]FDB}t+e!SXe8i6X", "]FDB}t+e!SXe8i6X");
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      IndexedElement indexedElement0 = new IndexedElement("4^pkz");
      // Undeclared exception!
      try {
        DOMNodeHelper.cloneNode((Node) indexedElement0, false);
        fail("Expecting exception: DOMException");
      } catch(DOMException e) {
        /*
         * Not supported yet
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      BeanElement beanElement0 = new BeanElement((QName) null);
      DOMNodeHelper.setNodeValue((Node) beanElement0, "");
      assertEquals(true, beanElement0.hasContent());
      assertEquals(1, beanElement0.nodeCount());
  }

  @Test
  public void test8()  throws Throwable  {
      DOMDocument dOMDocument0 = new DOMDocument("CjzH51x`9u_l");
      boolean boolean0 = DOMNodeHelper.isNodeEquals((org.w3c.dom.Node) dOMDocument0, (org.w3c.dom.Node) dOMDocument0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      // Undeclared exception!
      try {
        DOMNodeHelper.normalize((Node) null);
        fail("Expecting exception: DOMException");
      } catch(DOMException e) {
        /*
         * Not supported yet
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      NodeList nodeList0 = DOMNodeHelper.createNodeList((List) null);
      assertNotNull(nodeList0);
  }

  @Test
  public void test11()  throws Throwable  {
      UserDataElement userDataElement0 = new UserDataElement("found system property, value=");
      String string0 = DOMNodeHelper.getNodeValue((Node) userDataElement0);
      assertEquals("", string0);
  }

  @Test
  public void test12()  throws Throwable  {
      DOMCDATA dOMCDATA0 = new DOMCDATA("");
      DOMNodeHelper.setData((CharacterData) dOMCDATA0, "");
      assertEquals("", dOMCDATA0.getData());
  }

  @Test
  public void test13()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("znQlJ:cAw(");
      boolean boolean0 = DOMNodeHelper.hasChildNodes((Node) dOMElement0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      FlyweightCDATA flyweightCDATA0 = new FlyweightCDATA("");
      NamedNodeMap namedNodeMap0 = DOMNodeHelper.getAttributes((Node) flyweightCDATA0);
      assertNull(namedNodeMap0);
  }

  @Test
  public void test15()  throws Throwable  {
      DOMNodeHelper dOMNodeHelper0 = new DOMNodeHelper();
      assertNotNull(dOMNodeHelper0);
  }

  @Test
  public void test16()  throws Throwable  {
      DOMNodeHelper.EmptyNodeList dOMNodeHelper_EmptyNodeList0 = (DOMNodeHelper.EmptyNodeList)DOMNodeHelper.getChildNodes((Node) null);
      assertEquals(0, dOMNodeHelper_EmptyNodeList0.getLength());
  }

  @Test
  public void test17()  throws Throwable  {
      DOMNodeHelper.EmptyNodeList dOMNodeHelper_EmptyNodeList0 = new DOMNodeHelper.EmptyNodeList();
      int int0 = dOMNodeHelper_EmptyNodeList0.getLength();
      assertEquals(0, int0);
  }

  @Test
  public void test18()  throws Throwable  {
      DOMNodeHelper.EmptyNodeList dOMNodeHelper_EmptyNodeList0 = new DOMNodeHelper.EmptyNodeList();
      org.w3c.dom.Node node0 = dOMNodeHelper_EmptyNodeList0.item(3635);
      assertNull(node0);
  }

  @Test
  public void test19()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("znQlJ:cAw(");
      org.w3c.dom.Node node0 = DOMNodeHelper.getPreviousSibling((Node) dOMElement0);
      assertNull(node0);
  }

  @Test
  public void test20()  throws Throwable  {
      IndexedElement indexedElement0 = new IndexedElement("qX&&E0')h=7XTN('%");
      DefaultElement defaultElement0 = (DefaultElement)indexedElement0.addElement("qX&&E0')h=7XTN('%");
      org.w3c.dom.Node node0 = DOMNodeHelper.getPreviousSibling((Node) defaultElement0);
      assertNull(node0);
  }

  @Test
  public void test21()  throws Throwable  {
      NonLazyElement nonLazyElement0 = new NonLazyElement("");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      QName qName0 = defaultDocumentFactory0.createQName("");
      nonLazyElement0.addElement(qName0);
      DefaultElement defaultElement0 = (DefaultElement)nonLazyElement0.addElement("", "", "");
      // Undeclared exception!
      try {
        DOMNodeHelper.getPreviousSibling((Node) defaultElement0);
        fail("Expecting exception: DOMException");
      } catch(DOMException e) {
        /*
         * Not supported yet
         */
      }
  }

  @Test
  public void test22()  throws Throwable  {
      IndexedElement indexedElement0 = new IndexedElement("qX&&E0')h=7XTN('%");
      org.w3c.dom.Node node0 = DOMNodeHelper.getNextSibling((Node) indexedElement0);
      assertNull(node0);
  }

  @Test
  public void test23()  throws Throwable  {
      UserDataElement userDataElement0 = new UserDataElement("found system property, value=");
      DOMComment dOMComment0 = new DOMComment((Element) userDataElement0, "found system property, value=");
      DOMComment dOMComment1 = (DOMComment)dOMComment0.asXPathResult((Element) userDataElement0);
      org.w3c.dom.Node node0 = DOMNodeHelper.getNextSibling((Node) dOMComment1);
      assertNull(node0);
  }

  @Test
  public void test24()  throws Throwable  {
      NonLazyElement nonLazyElement0 = new NonLazyElement("");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      QName qName0 = defaultDocumentFactory0.createQName("");
      DefaultElement defaultElement0 = (DefaultElement)nonLazyElement0.addElement(qName0);
      org.w3c.dom.Node node0 = DOMNodeHelper.getNextSibling((Node) defaultElement0);
      assertNull(node0);
  }

  @Test
  public void test25()  throws Throwable  {
      try {
        DOMNodeHelper.insertBefore((Node) null, (org.w3c.dom.Node) null, (org.w3c.dom.Node) null);
        fail("Expecting exception: DOMException");
      } catch(DOMException e) {
        /*
         * Children not allowed for this node: null
         */
      }
  }

  @Test
  public void test26()  throws Throwable  {
      NonLazyElement nonLazyElement0 = new NonLazyElement("");
      QName qName0 = nonLazyElement0.getQName("");
      DOMElement dOMElement0 = new DOMElement(qName0, (-1));
      DOMNodeHelper.insertBefore((Node) dOMElement0, (org.w3c.dom.Node) dOMElement0, (org.w3c.dom.Node) dOMElement0);
      assertEquals(true, dOMElement0.hasContent());
      assertEquals(false, dOMElement0.isTextOnly());
  }

  @Test
  public void test27()  throws Throwable  {
      ElemMessage elemMessage0 = new ElemMessage();
      DOMElement dOMElement0 = new DOMElement("R");
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType();
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0, dOMDocumentType0);
      try {
        DOMNodeHelper.replaceChild((Node) dOMDocumentType0, (org.w3c.dom.Node) dOMDocument0, (org.w3c.dom.Node) elemMessage0);
        fail("Expecting exception: DOMException");
      } catch(DOMException e) {
        /*
         * Children not allowed for this node: org.dom4j.dom.DOMDocumentType@ea6d585 [DocumentType: <!DOCTYPE null>]
         */
      }
  }

  @Test
  public void test28()  throws Throwable  {
      DOMEntityReference dOMEntityReference0 = new DOMEntityReference((String) null);
      DOMElement dOMElement0 = new DOMElement((String) null);
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0, (DOMDocumentType) null);
      try {
        DOMNodeHelper.replaceChild((Node) dOMDocument0, (org.w3c.dom.Node) dOMEntityReference0, (org.w3c.dom.Node) dOMDocument0);
        fail("Expecting exception: DOMException");
      } catch(DOMException e) {
        /*
         * Tried to replace a non existing child for node: org.dom4j.dom.DOMDocument@1005802f [Document: name null]
         */
      }
  }

  @Test
  public void test29()  throws Throwable  {
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      DOMElement dOMElement0 = new DOMElement("found system property, value=", namespace0);
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0);
      DOMElement dOMElement1 = (DOMElement)DOMNodeHelper.replaceChild((Node) dOMDocument0, (org.w3c.dom.Node) dOMDocument0, (org.w3c.dom.Node) dOMElement0);
      assertEquals("found system property, value=", dOMElement1.getLocalName());
  }

  @Test
  public void test30()  throws Throwable  {
      DOMCDATA dOMCDATA0 = new DOMCDATA("");
      try {
        DOMNodeHelper.removeChild((Node) null, (org.w3c.dom.Node) dOMCDATA0);
        fail("Expecting exception: DOMException");
      } catch(DOMException e) {
        /*
         * Children not allowed for this node: null
         */
      }
  }

  @Test
  public void test31()  throws Throwable  {
      UserDataElement userDataElement0 = new UserDataElement("found system property, value=");
      DOMComment dOMComment0 = new DOMComment((Element) userDataElement0, "found system property, value=");
      DOMComment dOMComment1 = (DOMComment)DOMNodeHelper.removeChild((Node) userDataElement0, (org.w3c.dom.Node) dOMComment0);
      assertEquals(NodeType.COMMENT_NODE, dOMComment1.getNodeTypeEnum());
  }

  @Test
  public void test32()  throws Throwable  {
      ProcessorExsltFunction processorExsltFunction0 = new ProcessorExsltFunction();
      try {
        DOMNodeHelper.appendChild((Node) null, (org.w3c.dom.Node) processorExsltFunction0);
        fail("Expecting exception: DOMException");
      } catch(DOMException e) {
        /*
         * Children not allowed for this node: null
         */
      }
  }

  @Test
  public void test33()  throws Throwable  {
      NonLazyElement nonLazyElement0 = new NonLazyElement(" { ", (Namespace) null);
      DOMDocument dOMDocument0 = new DOMDocument();
      // Undeclared exception!
      try {
        DOMNodeHelper.appendChild((Node) nonLazyElement0, (org.w3c.dom.Node) dOMDocument0);
        fail("Expecting exception: IllegalAddException");
      } catch(IllegalAddException e) {
        /*
         * Invalid node type. Cannot add node: org.dom4j.dom.DOMDocument@453d2bc [Document: name null] to this branch: org.dom4j.util.NonLazyElement@1b3036dc [Element: < {  attributes: []/>]
         */
      }
  }

  @Test
  public void test34()  throws Throwable  {
      boolean boolean0 = DOMNodeHelper.hasAttributes((Node) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test35()  throws Throwable  {
      DOMNamespace dOMNamespace0 = new DOMNamespace((Element) null, (String) null, (String) null);
      boolean boolean0 = DOMNodeHelper.hasAttributes((Node) dOMNamespace0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test36()  throws Throwable  {
      IndexedElement indexedElement0 = new IndexedElement("4^pkz");
      boolean boolean0 = DOMNodeHelper.hasAttributes((Node) indexedElement0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test37()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("2joRT:=EA(==/h8tO", (Namespace) null);
      assertEquals(false, dOMElement0.hasAttributes());
      
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      QName qName0 = defaultDocumentFactory0.createQName("2joRT:=EA(==/h8tO", "2joRT:=EA(==/h8tO");
      DOMElement dOMElement1 = (DOMElement)dOMElement0.addAttribute(qName0, "2joRT:=EA(==/h8tO");
      boolean boolean0 = DOMNodeHelper.hasAttributes((Node) dOMElement1);
      assertEquals(true, dOMElement0.hasAttributes());
      assertEquals(true, boolean0);
  }

  @Test
  public void test38()  throws Throwable  {
      FlyweightComment flyweightComment0 = new FlyweightComment((String) null);
      int int0 = DOMNodeHelper.getLength((CharacterData) flyweightComment0);
      assertEquals(0, int0);
  }

  @Test
  public void test39()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultCDATA defaultCDATA0 = (DefaultCDATA)defaultDocumentFactory0.createCDATA("");
      int int0 = DOMNodeHelper.getLength((CharacterData) defaultCDATA0);
      assertEquals(0, int0);
  }

  @Test
  public void test40()  throws Throwable  {
      DOMComment dOMComment0 = new DOMComment("DOCUMENT_TYPE_NODE");
      try {
        DOMNodeHelper.substringData((CharacterData) dOMComment0, (-1), (-719));
        fail("Expecting exception: DOMException");
      } catch(DOMException e) {
        /*
         * Illegal value for count: -719
         */
      }
  }

  @Test
  public void test41()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultCDATA defaultCDATA0 = (DefaultCDATA)defaultDocumentFactory0.createCDATA((String) null);
      try {
        DOMNodeHelper.substringData((CharacterData) defaultCDATA0, 0, 0);
        fail("Expecting exception: DOMException");
      } catch(DOMException e) {
        /*
         * No text at offset: 0
         */
      }
  }

  @Test
  public void test42()  throws Throwable  {
      DefaultComment defaultComment0 = new DefaultComment((Element) null, "");
      try {
        DOMNodeHelper.substringData((CharacterData) defaultComment0, (-388), 105);
        fail("Expecting exception: DOMException");
      } catch(DOMException e) {
        /*
         * No text at offset: -388
         */
      }
  }

  @Test
  public void test43()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultCDATA defaultCDATA0 = (DefaultCDATA)defaultDocumentFactory0.createCDATA(">z");
      DOMNodeHelper.insertData((CharacterData) defaultCDATA0, 0, ">z");
      String string0 = DOMNodeHelper.substringData((CharacterData) defaultCDATA0, 3, 3);
      assertEquals(">z>z", defaultCDATA0.getText());
      assertEquals("z", string0);
  }

  @Test
  public void test44()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultCDATA defaultCDATA0 = (DefaultCDATA)defaultDocumentFactory0.createCDATA("q>z.");
      String string0 = DOMNodeHelper.substringData((CharacterData) defaultCDATA0, 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test45()  throws Throwable  {
      DefaultText defaultText0 = new DefaultText((Element) null, (String) null);
      DOMNodeHelper.appendData((CharacterData) defaultText0, (String) null);
      assertEquals("text()", defaultText0.getPath());
  }

  @Test
  public void test46()  throws Throwable  {
      FlyweightCDATA flyweightCDATA0 = new FlyweightCDATA("");
      try {
        DOMNodeHelper.appendData((CharacterData) flyweightCDATA0, (String) null);
        fail("Expecting exception: DOMException");
      } catch(DOMException e) {
        /*
         * CharacterData node is read only: org.dom4j.tree.FlyweightCDATA@5697e25c [CDATA: \"\"]
         */
      }
  }

  @Test
  public void test47()  throws Throwable  {
      DOMText dOMText0 = new DOMText("ReseFrvedPITarget");
      DOMNodeHelper.appendData((CharacterData) dOMText0, "ReseFrvedPITarget");
      assertEquals("ReseFrvedPITargetReseFrvedPITarget", dOMText0.getData());
      assertEquals("ReseFrvedPITargetReseFrvedPITarget", dOMText0.getStringValue());
  }

  @Test
  public void test48()  throws Throwable  {
      FlyweightCDATA flyweightCDATA0 = new FlyweightCDATA("");
      try {
        DOMNodeHelper.insertData((CharacterData) flyweightCDATA0, 0, "");
        fail("Expecting exception: DOMException");
      } catch(DOMException e) {
        /*
         * CharacterData node is read only: org.dom4j.tree.FlyweightCDATA@7daf0942 [CDATA: \"\"]
         */
      }
  }

  @Test
  public void test49()  throws Throwable  {
      DOMText dOMText0 = new DOMText((String) null);
      DOMNodeHelper.insertData((CharacterData) dOMText0, (-1946), (String) null);
      assertEquals("Text", dOMText0.getNodeTypeName());
  }

  @Test
  public void test50()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultComment defaultComment0 = (DefaultComment)defaultDocumentFactory0.createComment("\"C5?/?N5~zxJ=6,UKj");
      try {
        DOMNodeHelper.insertData((CharacterData) defaultComment0, (-855), "\"C5?/?N5~zxJ=6,UKj");
        fail("Expecting exception: DOMException");
      } catch(DOMException e) {
        /*
         * No text at offset: -855
         */
      }
  }

  @Test
  public void test51()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("");
      DefaultCDATA defaultCDATA0 = new DefaultCDATA((Element) dOMElement0, "");
      try {
        DOMNodeHelper.insertData((CharacterData) defaultCDATA0, 2980, (String) null);
        fail("Expecting exception: DOMException");
      } catch(DOMException e) {
        /*
         * No text at offset: 2980
         */
      }
  }

  @Test
  public void test52()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultText defaultText0 = (DefaultText)defaultDocumentFactory0.createText("0");
      try {
        DOMNodeHelper.deleteData((CharacterData) defaultText0, (-1), 0);
        fail("Expecting exception: DOMException");
      } catch(DOMException e) {
        /*
         * No text at offset: -1
         */
      }
  }

  @Test
  public void test53()  throws Throwable  {
      FlyweightComment flyweightComment0 = new FlyweightComment("EZF8F`x]q");
      try {
        DOMNodeHelper.deleteData((CharacterData) flyweightComment0, 1242, 4541);
        fail("Expecting exception: DOMException");
      } catch(DOMException e) {
        /*
         * CharacterData node is read only: org.dom4j.tree.FlyweightComment@2b4be0a6 [Comment: \"EZF8F`x]q\"]
         */
      }
  }

  @Test
  public void test54()  throws Throwable  {
      DOMComment dOMComment0 = new DOMComment((Element) null, "|qe:e=pzvMH");
      try {
        DOMNodeHelper.deleteData((CharacterData) dOMComment0, 2750, (-1939));
        fail("Expecting exception: DOMException");
      } catch(DOMException e) {
        /*
         * Illegal value for count: -1939
         */
      }
  }

  @Test
  public void test55()  throws Throwable  {
      DefaultComment defaultComment0 = new DefaultComment((Element) null, (String) null);
      DOMNodeHelper.deleteData((CharacterData) defaultComment0, 0, 3635);
      assertEquals("comment()", defaultComment0.getUniquePath());
  }

  @Test
  public void test56()  throws Throwable  {
      DefaultText defaultText0 = new DefaultText("");
      try {
        DOMNodeHelper.deleteData((CharacterData) defaultText0, 1363, 1363);
        fail("Expecting exception: DOMException");
      } catch(DOMException e) {
        /*
         * No text at offset: 1363
         */
      }
  }

  @Test
  public void test57()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("2joRT:=EA(==/h8tO", (Namespace) null);
      DefaultCDATA defaultCDATA0 = new DefaultCDATA((Element) dOMElement0, "2joRT:=EA(==/h8tO");
      DOMNodeHelper.deleteData((CharacterData) defaultCDATA0, 0, 292);
      assertEquals("<![CDATA[]]>", defaultCDATA0.asXML());
      assertEquals("", defaultCDATA0.getStringValue());
  }

  @Test
  public void test58()  throws Throwable  {
      DOMCDATA dOMCDATA0 = new DOMCDATA((Element) null, "]FDB}t+e!SXe8i6X");
      try {
        DOMNodeHelper.replaceData((CharacterData) dOMCDATA0, 302, 302, "]FDB}t+e!SXe8i6X");
        fail("Expecting exception: DOMException");
      } catch(DOMException e) {
        /*
         * No text at offset: 302
         */
      }
  }

  @Test
  public void test59()  throws Throwable  {
      FlyweightComment flyweightComment0 = new FlyweightComment("cvc-maxExclusive-valid");
      try {
        DOMNodeHelper.replaceData((CharacterData) flyweightComment0, 734, 734, "cvc-maxExclusive-valid");
        fail("Expecting exception: DOMException");
      } catch(DOMException e) {
        /*
         * CharacterData node is read only: org.dom4j.tree.FlyweightComment@7f92d838 [Comment: \"cvc-maxExclusive-valid\"]
         */
      }
  }

  @Test
  public void test60()  throws Throwable  {
      DOMComment dOMComment0 = new DOMComment((String) null);
      try {
        DOMNodeHelper.replaceData((CharacterData) dOMComment0, 0, (-227), "HFpRH`");
        fail("Expecting exception: DOMException");
      } catch(DOMException e) {
        /*
         * Illegal value for count: -227
         */
      }
  }

  @Test
  public void test61()  throws Throwable  {
      DefaultText defaultText0 = new DefaultText((String) null);
      DOMNodeHelper.replaceData((CharacterData) defaultText0, 8013, 8013, (String) null);
      assertEquals(true, defaultText0.supportsParent());
  }

  @Test
  public void test62()  throws Throwable  {
      DefaultText defaultText0 = new DefaultText("foVP/F7n5It5_");
      try {
        DOMNodeHelper.replaceData((CharacterData) defaultText0, (-417), 3158, "foVP/F7n5It5_");
        fail("Expecting exception: DOMException");
      } catch(DOMException e) {
        /*
         * No text at offset: -417
         */
      }
  }

  @Test
  public void test63()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultText defaultText0 = (DefaultText)defaultDocumentFactory0.createText("0");
      DOMNodeHelper.replaceData((CharacterData) defaultText0, 0, 0, "0");
      assertEquals("00", defaultText0.asXML());
      assertEquals("00", defaultText0.getStringValue());
  }

  @Test
  public void test64()  throws Throwable  {
      DefaultAttribute defaultAttribute0 = new DefaultAttribute("J]aWHR-(Q", "J]aWHR-(Q");
      QName qName0 = defaultAttribute0.getQName();
      IndexedElement indexedElement0 = new IndexedElement(qName0);
      List<Attribute> list0 = indexedElement0.attributes();
      DOMElement dOMElement0 = new DOMElement(qName0);
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0);
      DOMNodeHelper.appendElementsByTagName((List) list0, (Branch) dOMDocument0, "J]aWHR-(Q");
      assertEquals("/J]aWHR-(Q/J]aWHR-(Q", dOMElement0.getPath());
      assertEquals(1, list0.size());
  }

  @Test
  public void test65()  throws Throwable  {
      UserDataElement userDataElement0 = new UserDataElement(" { ");
      NonLazyElement nonLazyElement0 = new NonLazyElement(" { ", (Namespace) null);
      List<Element> list0 = nonLazyElement0.elements(" { ");
      UserDataElement userDataElement1 = (UserDataElement)userDataElement0.addProcessingInstruction(" { ", " { ");
      DOMNodeHelper.appendElementsByTagName((List) list0, (Branch) userDataElement1, " { ");
      assertEquals(true, userDataElement1.hasContent());
  }

  @Test
  public void test66()  throws Throwable  {
      IndexedElement indexedElement0 = new IndexedElement("qX&&E0')h=7XTN('%");
      indexedElement0.addElement("qX&&E0')h=7XTN('%");
      List<ProcessingInstruction> list0 = indexedElement0.processingInstructions("");
      DOMNodeHelper.appendElementsByTagName((List) list0, (Branch) indexedElement0, "");
      assertEquals("", indexedElement0.getStringValue());
  }

  @Test
  public void test67()  throws Throwable  {
      IndexedElement indexedElement0 = new IndexedElement("qX&&E0')h=7XTN('%");
      indexedElement0.addElement("qX&&E0')h=7XTN('%");
      List<ProcessingInstruction> list0 = indexedElement0.processingInstructions("");
      DOMNodeHelper.appendElementsByTagNameNS((List) list0, (Branch) indexedElement0, "", "Uyn-KZX!S$aZ");
      assertEquals("", indexedElement0.getStringValue());
  }

  @Test
  public void test68()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("R");
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType();
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0, dOMDocumentType0);
      DOMDocument dOMDocument1 = (DOMDocument)dOMDocument0.addProcessingInstruction("R", "R");
      DOMNodeHelper.appendElementsByTagNameNS((List) null, (Branch) dOMDocument1, "R", "R");
      assertEquals("", dOMDocument1.getTextTrim());
  }

  @Test
  public void test69()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("#|]#@dNHU");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      QName qName0 = defaultDocumentFactory0.createQName("#|]#@dNHU", "", "#|]#@dNHU");
      dOMElement0.addElement(qName0);
      UserDataElement userDataElement0 = new UserDataElement(qName0);
      List<Namespace> list0 = userDataElement0.getNamespacesForURI("");
      // Undeclared exception!
      try {
        DOMNodeHelper.appendElementsByTagNameNS((List) list0, (Branch) dOMElement0, "#|]#@dNHU", "#|]#@dNHU");
        fail("Expecting exception: IllegalAddException");
      } catch(IllegalAddException e) {
        /*
         * The node \"org.dom4j.tree.DefaultElement@34925e54 [Element: <#|]#@dNHU uri: #|]#@dNHU attributes: []/>]\" could not be added to the element \"#|]#@dNHU\" because: The Node already has an existing parent of \"#|]#@dNHU\"
         */
      }
  }

  @Test
  public void test70()  throws Throwable  {
      DOMDocument dOMDocument0 = new DOMDocument("CjzH51x`9u_l");
      DOMDocument dOMDocument1 = (DOMDocument)DOMNodeHelper.asDOMNode((Node) dOMDocument0);
      assertSame(dOMDocument1, dOMDocument0);
  }

  @Test
  public void test71()  throws Throwable  {
      DOMDocument dOMDocument0 = new DOMDocument("CjzH51x`9u_l");
      DOMDocument dOMDocument1 = (DOMDocument)DOMNodeHelper.asDOMDocument((Document) dOMDocument0);
      assertSame(dOMDocument0, dOMDocument1);
  }

  @Test
  public void test72()  throws Throwable  {
      org.w3c.dom.Document document0 = DOMNodeHelper.asDOMDocument((Document) null);
      assertNull(document0);
  }

  @Test
  public void test73()  throws Throwable  {
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType();
      DefaultDocument defaultDocument0 = new DefaultDocument((DocumentType) dOMDocumentType0);
      // Undeclared exception!
      try {
        DOMNodeHelper.getOwnerDocument((Node) defaultDocument0);
        fail("Expecting exception: DOMException");
      } catch(DOMException e) {
        /*
         * Not supported yet
         */
      }
  }

  @Test
  public void test74()  throws Throwable  {
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType("<5)G?U", "<5)G?U");
      DOMDocumentType dOMDocumentType1 = (DOMDocumentType)DOMNodeHelper.asDOMDocumentType((DocumentType) dOMDocumentType0);
      assertEquals(false, dOMDocumentType1.hasContent());
  }

  @Test
  public void test75()  throws Throwable  {
      org.w3c.dom.DocumentType documentType0 = DOMNodeHelper.asDOMDocumentType((DocumentType) null);
      assertNull(documentType0);
  }

  @Test
  public void test76()  throws Throwable  {
      DefaultDocumentType defaultDocumentType0 = new DefaultDocumentType("R", "R");
      // Undeclared exception!
      try {
        DOMNodeHelper.asDOMDocumentType((DocumentType) defaultDocumentType0);
        fail("Expecting exception: DOMException");
      } catch(DOMException e) {
        /*
         * Not supported yet
         */
      }
  }

  @Test
  public void test77()  throws Throwable  {
      DOMCDATA dOMCDATA0 = new DOMCDATA("");
      DOMCDATA dOMCDATA1 = (DOMCDATA)DOMNodeHelper.asDOMText((CharacterData) dOMCDATA0);
      assertSame(dOMCDATA0, dOMCDATA1);
  }

  @Test
  public void test78()  throws Throwable  {
      Text text0 = DOMNodeHelper.asDOMText((CharacterData) null);
      assertNull(text0);
  }

  @Test
  public void test79()  throws Throwable  {
      IndexedElement indexedElement0 = new IndexedElement("x!yF");
      DOMComment dOMComment0 = new DOMComment((Element) indexedElement0, "x!yF");
      // Undeclared exception!
      try {
        DOMNodeHelper.asDOMText((CharacterData) dOMComment0);
        fail("Expecting exception: DOMException");
      } catch(DOMException e) {
        /*
         * Not supported yet
         */
      }
  }

  @Test
  public void test80()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("unparsed-entity-uri");
      DOMElement dOMElement1 = (DOMElement)DOMNodeHelper.asDOMElement((Node) dOMElement0);
      assertEquals("unparsed-entity-uri", dOMElement1.getTagName());
  }

  @Test
  public void test81()  throws Throwable  {
      org.w3c.dom.Element element0 = DOMNodeHelper.asDOMElement((Node) null);
      assertNull(element0);
  }

  @Test
  public void test82()  throws Throwable  {
      DefaultComment defaultComment0 = new DefaultComment((Element) null, (String) null);
      // Undeclared exception!
      try {
        DOMNodeHelper.asDOMElement((Node) defaultComment0);
        fail("Expecting exception: DOMException");
      } catch(DOMException e) {
        /*
         * Not supported yet
         */
      }
  }

  @Test
  public void test83()  throws Throwable  {
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType();
      // Undeclared exception!
      try {
        DOMNodeHelper.asDOMAttr((Node) dOMDocumentType0);
        fail("Expecting exception: DOMException");
      } catch(DOMException e) {
        /*
         * Not supported yet
         */
      }
  }

  @Test
  public void test84()  throws Throwable  {
      Attr attr0 = DOMNodeHelper.asDOMAttr((Node) null);
      assertNull(attr0);
  }

  @Test
  public void test85()  throws Throwable  {
      Class<?> class0 = DOMNodeHelper.class;
      BeanMetaData beanMetaData0 = BeanMetaData.get(class0);
      QName qName0 = beanMetaData0.getQName(0);
      DOMAttribute dOMAttribute0 = new DOMAttribute(qName0, "Unable to resolve prefix with null prefix resolver.");
      DOMAttribute dOMAttribute1 = (DOMAttribute)DOMNodeHelper.asDOMAttr((Node) dOMAttribute0);
      assertEquals("Unable to resolve prefix with null prefix resolver.", dOMAttribute1.getText());
  }

  @Test
  public void test86()  throws Throwable  {
      ProcessorExsltFunction processorExsltFunction0 = new ProcessorExsltFunction();
      boolean boolean0 = DOMNodeHelper.isNodeEquals((org.w3c.dom.Node) null, (org.w3c.dom.Node) processorExsltFunction0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test87()  throws Throwable  {
      boolean boolean0 = DOMNodeHelper.isNodeEquals((org.w3c.dom.Node) null, (org.w3c.dom.Node) null);
      assertEquals(true, boolean0);
  }

  @Test
  public void test88()  throws Throwable  {
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType();
      boolean boolean0 = DOMNodeHelper.isNodeEquals((org.w3c.dom.Node) dOMDocumentType0, (org.w3c.dom.Node) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test89()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("");
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType();
      DOMDocument dOMDocument0 = new DOMDocument("", dOMElement0, dOMDocumentType0);
      boolean boolean0 = dOMElement0.isEqualNode((org.w3c.dom.Node) dOMDocument0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test90()  throws Throwable  {
      DOMCDATA dOMCDATA0 = new DOMCDATA("y");
      boolean boolean0 = DOMNodeHelper.isNodeSame((org.w3c.dom.Node) dOMCDATA0, (org.w3c.dom.Node) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test91()  throws Throwable  {
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType();
      boolean boolean0 = DOMNodeHelper.isNodeSame((org.w3c.dom.Node) dOMDocumentType0, (org.w3c.dom.Node) dOMDocumentType0);
      assertEquals(true, boolean0);
  }
}
