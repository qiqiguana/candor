/*
 * This file was automatically generated by EvoSuite
 */

package org.dom4j.swing;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Enumeration;
import java.util.List;
import javax.swing.tree.TreeNode;
import org.dom4j.Branch;
import org.dom4j.Element;
import org.dom4j.Namespace;
import org.dom4j.dom.DOMElement;
import org.dom4j.dom.DOMNamespace;
import org.dom4j.swing.BranchTreeNode;
import org.dom4j.tree.DefaultDocument;
import org.dom4j.util.IndexedElement;
import org.dom4j.util.NonLazyElement;
import org.dom4j.util.UserDataElement;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BranchTreeNodeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BranchTreeNode branchTreeNode0 = new BranchTreeNode();
      Enumeration<Object> enumeration0 = branchTreeNode0.children();
      assertNotNull(enumeration0);
  }

  @Test
  public void test1()  throws Throwable  {
      IndexedElement indexedElement0 = new IndexedElement("");
      BranchTreeNode branchTreeNode0 = new BranchTreeNode((Branch) indexedElement0);
      String string0 = branchTreeNode0.toString();
      assertEquals("", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      IndexedElement indexedElement0 = new IndexedElement("");
      BranchTreeNode branchTreeNode0 = new BranchTreeNode((Branch) indexedElement0);
      branchTreeNode0.getChildCount();
      int int0 = branchTreeNode0.getIndex((TreeNode) branchTreeNode0);
      assertEquals((-1), int0);
  }

  @Test
  public void test3()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      NonLazyElement nonLazyElement0 = new NonLazyElement("", namespace0);
      BranchTreeNode branchTreeNode0 = new BranchTreeNode((Branch) nonLazyElement0);
      boolean boolean0 = branchTreeNode0.getAllowsChildren();
      assertEquals(true, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      NonLazyElement nonLazyElement0 = new NonLazyElement("", namespace0);
      DefaultDocument defaultDocument0 = new DefaultDocument((Element) nonLazyElement0);
      BranchTreeNode branchTreeNode0 = new BranchTreeNode((Branch) defaultDocument0);
      int int0 = branchTreeNode0.getChildCount();
      assertEquals(1, int0);
  }

  @Test
  public void test5()  throws Throwable  {
      UserDataElement userDataElement0 = new UserDataElement("X4~`");
      UserDataElement userDataElement1 = (UserDataElement)userDataElement0.addCDATA("X4~`");
      BranchTreeNode branchTreeNode0 = new BranchTreeNode((Branch) userDataElement1);
      boolean boolean0 = branchTreeNode0.isLeaf();
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("", (Namespace) null);
      BranchTreeNode branchTreeNode0 = new BranchTreeNode((Branch) dOMElement0);
      boolean boolean0 = branchTreeNode0.isLeaf();
      assertEquals(true, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      DOMNamespace dOMNamespace0 = new DOMNamespace((String) null, (String) null);
      DOMElement dOMElement0 = new DOMElement((String) null, (Namespace) dOMNamespace0);
      DOMElement dOMElement1 = (DOMElement)dOMElement0.addCDATA((String) null);
      BranchTreeNode branchTreeNode0 = new BranchTreeNode((Branch) dOMElement1);
      // Undeclared exception!
      try {
        branchTreeNode0.getChildAt((-855));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      IndexedElement indexedElement0 = new IndexedElement("");
      IndexedElement indexedElement1 = (IndexedElement)indexedElement0.addComment("");
      BranchTreeNode branchTreeNode0 = new BranchTreeNode((Branch) indexedElement1);
      int int0 = branchTreeNode0.getChildCount();
      assertEquals(0, int0);
  }

  @Test
  public void test9()  throws Throwable  {
      UserDataElement userDataElement0 = new UserDataElement("X4~`");
      UserDataElement userDataElement1 = (UserDataElement)userDataElement0.addCDATA("X4~`");
      BranchTreeNode branchTreeNode0 = new BranchTreeNode((Branch) userDataElement1);
      List<Object> list0 = branchTreeNode0.getChildList();
      assertEquals(1, list0.size());
  }
}
