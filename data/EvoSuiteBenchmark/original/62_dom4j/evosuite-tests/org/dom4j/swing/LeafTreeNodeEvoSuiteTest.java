/*
 * This file was automatically generated by EvoSuite
 */

package org.dom4j.swing;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Enumeration;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeNode;
import org.dom4j.Node;
import org.dom4j.swing.LeafTreeNode;
import org.dom4j.tree.FlyweightProcessingInstruction;
import org.dom4j.util.UserDataElement;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class LeafTreeNodeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LeafTreeNode leafTreeNode0 = new LeafTreeNode();
      Node node0 = leafTreeNode0.getXmlNode();
      assertNull(node0);
  }

  @Test
  public void test1()  throws Throwable  {
      LeafTreeNode leafTreeNode0 = new LeafTreeNode();
      boolean boolean0 = leafTreeNode0.getAllowsChildren();
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      LeafTreeNode leafTreeNode0 = new LeafTreeNode();
      Enumeration<Object> enumeration0 = leafTreeNode0.children();
      assertEquals(false, enumeration0.hasMoreElements());
  }

  @Test
  public void test3()  throws Throwable  {
      FlyweightProcessingInstruction flyweightProcessingInstruction0 = new FlyweightProcessingInstruction();
      LeafTreeNode leafTreeNode0 = new LeafTreeNode((Node) flyweightProcessingInstruction0);
      DefaultMutableTreeNode defaultMutableTreeNode0 = new DefaultMutableTreeNode();
      int int0 = leafTreeNode0.getIndex((TreeNode) defaultMutableTreeNode0);
      assertEquals((-1), int0);
  }

  @Test
  public void test4()  throws Throwable  {
      LeafTreeNode leafTreeNode0 = new LeafTreeNode();
      TreeNode treeNode0 = leafTreeNode0.getParent();
      assertNull(treeNode0);
  }

  @Test
  public void test5()  throws Throwable  {
      LeafTreeNode leafTreeNode0 = new LeafTreeNode();
      int int0 = leafTreeNode0.getChildCount();
      assertEquals(0, int0);
  }

  @Test
  public void test6()  throws Throwable  {
      LeafTreeNode leafTreeNode0 = new LeafTreeNode();
      TreeNode treeNode0 = leafTreeNode0.getChildAt(12559);
      assertNull(treeNode0);
  }

  @Test
  public void test7()  throws Throwable  {
      LeafTreeNode leafTreeNode0 = new LeafTreeNode();
      leafTreeNode0.setParent(leafTreeNode0);
      assertEquals(false, leafTreeNode0.getAllowsChildren());
  }

  @Test
  public void test8()  throws Throwable  {
      LeafTreeNode leafTreeNode0 = new LeafTreeNode();
      boolean boolean0 = leafTreeNode0.isLeaf();
      assertEquals(true, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      FlyweightProcessingInstruction flyweightProcessingInstruction0 = new FlyweightProcessingInstruction();
      LeafTreeNode leafTreeNode0 = new LeafTreeNode((Node) flyweightProcessingInstruction0);
      UserDataElement userDataElement0 = new UserDataElement("");
      LeafTreeNode leafTreeNode1 = new LeafTreeNode((TreeNode) leafTreeNode0, (Node) userDataElement0);
      String string0 = leafTreeNode1.toString();
      assertEquals("", string0);
  }

  @Test
  public void test10()  throws Throwable  {
      FlyweightProcessingInstruction flyweightProcessingInstruction0 = new FlyweightProcessingInstruction();
      LeafTreeNode leafTreeNode0 = new LeafTreeNode((Node) flyweightProcessingInstruction0);
      String string0 = leafTreeNode0.toString();
      assertEquals("", string0);
  }
}
