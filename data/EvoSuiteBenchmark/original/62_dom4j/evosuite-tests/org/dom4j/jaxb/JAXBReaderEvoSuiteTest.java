/*
 * This file was automatically generated by EvoSuite
 */

package org.dom4j.jaxb;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.File;
import java.io.InputStream;
import java.io.Reader;
import java.io.StringReader;
import java.net.URL;
import java.nio.charset.Charset;
import org.dom4j.DocumentException;
import org.dom4j.ElementHandler;
import org.dom4j.jaxb.JAXBObjectHandler;
import org.dom4j.jaxb.JAXBReader;
import org.junit.BeforeClass;
import org.xml.sax.InputSource;

@RunWith(EvoSuiteRunner.class)
public class JAXBReaderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JAXBReader jAXBReader0 = new JAXBReader("&qD9wO:", classLoader0);
      StringReader stringReader0 = new StringReader("&qD9wO:");
      try {
        jAXBReader0.read((Reader) stringReader0);
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * Error on line 1 of document  : Reference is not allowed in prolog. Nested exception: Reference is not allowed in prolog.
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      JAXBReader jAXBReader0 = new JAXBReader("Q");
      jAXBReader0.addHandler("Q", (ElementHandler) null);
      assertEquals(false, jAXBReader0.isPruneElements());
  }

  @Test
  public void test2()  throws Throwable  {
      JAXBReader jAXBReader0 = new JAXBReader("E");
      File file0 = new File("E");
      try {
        jAXBReader0.read(file0);
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * E (No such file or directory) Nested exception: E (No such file or directory)
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      JAXBReader jAXBReader0 = new JAXBReader("MSG_SPACE_REQUIbED_BEFORE_ENTITY_NAME_IN_ENTITYDE L");
      jAXBReader0.removeHandler("MSG_SPACE_REQUIbED_BEFORE_ENTITY_NAME_IN_ENTITYDE L");
      assertEquals(false, jAXBReader0.isPruneElements());
  }

  @Test
  public void test4()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JAXBReader jAXBReader0 = new JAXBReader("", classLoader0);
      try {
        jAXBReader0.read("");
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * Error on line 1 of document file:///mnt/fastdata/ac1gf/SF110/dist/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      JAXBReader jAXBReader0 = new JAXBReader("Q");
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      try {
        jAXBReader0.read((Reader) charArrayReader0, "Q");
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      JAXBReader jAXBReader0 = new JAXBReader("%Mi91V");
      File file0 = new File("%Mi91V", "%Mi91V");
      try {
        jAXBReader0.read(file0, (Charset) null);
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * %Mi91V/%Mi91V (No such file or directory) Nested exception: %Mi91V/%Mi91V (No such file or directory)
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      JAXBReader jAXBReader0 = new JAXBReader("MSG_SPACE_REQUIbED_BEFORE_ENTITY_NAME_IN_ENTITYDE L");
      InputSource inputSource0 = new InputSource();
      try {
        jAXBReader0.read(inputSource0);
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * null Nested exception: null
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      JAXBReader jAXBReader0 = new JAXBReader("|=J}]XE{B$xr<RPudzbj");
      try {
        jAXBReader0.read((InputStream) null);
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * null Nested exception: null
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      JAXBReader jAXBReader0 = new JAXBReader("");
      // Undeclared exception!
      try {
        jAXBReader0.read((URL) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      JAXBReader jAXBReader0 = new JAXBReader("");
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) (byte) (-64), (int) (byte)0);
      try {
        jAXBReader0.read((InputStream) byteArrayInputStream0, "n#kh.74QNYhY");
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      JAXBReader jAXBReader0 = new JAXBReader("8y.KDfZ", (ClassLoader) null);
      jAXBReader0.addObjectHandler("8y.KDfZ", (JAXBObjectHandler) null);
      assertEquals(false, jAXBReader0.isPruneElements());
  }

  @Test
  public void test12()  throws Throwable  {
      JAXBReader jAXBReader0 = new JAXBReader("MSG_SPACE_REQUIbED_BEFORE_ENTITY_NAME_IN_ENTITYDE L");
      jAXBReader0.removeObjectHandler("MSG_SPACE_REQUIbED_BEFORE_ENTITY_NAME_IN_ENTITYDE L");
      assertEquals(false, jAXBReader0.isPruneElements());
  }

  @Test
  public void test13()  throws Throwable  {
      JAXBReader jAXBReader0 = new JAXBReader("");
      boolean boolean0 = jAXBReader0.isPruneElements();
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      JAXBReader jAXBReader0 = new JAXBReader("E");
      jAXBReader0.setPruneElements(true);
      jAXBReader0.resetHandlers();
      assertEquals(true, jAXBReader0.isPruneElements());
  }

  @Test
  public void test15()  throws Throwable  {
      JAXBReader jAXBReader0 = new JAXBReader("8y.KDfZ", (ClassLoader) null);
      jAXBReader0.setPruneElements(false);
      assertEquals(false, jAXBReader0.isPruneElements());
  }
}
