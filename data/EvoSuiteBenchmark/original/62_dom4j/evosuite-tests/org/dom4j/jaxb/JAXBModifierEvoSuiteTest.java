/*
 * This file was automatically generated by EvoSuite
 */

package org.dom4j.jaxb;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.BufferedReader;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.Reader;
import java.io.Writer;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.dom4j.DocumentException;
import org.dom4j.io.OutputFormat;
import org.dom4j.jaxb.JAXBModifier;
import org.dom4j.jaxb.JAXBObjectModifier;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.xml.sax.InputSource;

@RunWith(EvoSuiteRunner.class)
public class JAXBModifierEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Null lexical handler", true);
      JAXBModifier jAXBModifier0 = new JAXBModifier("Null lexical handler", outputFormat0);
      jAXBModifier0.addObjectModifier("Null lexical handler", (JAXBObjectModifier) null);
      // Undeclared exception!
      try {
        jAXBModifier0.modify((URL) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      JAXBModifier jAXBModifier0 = new JAXBModifier("1rSeQj'", (ClassLoader) null);
      File file0 = new File("1rSeQj'", "1rSeQj'");
      try {
        jAXBModifier0.modify(file0);
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * 1rSeQj'/1rSeQj' (No such file or directory) Nested exception: 1rSeQj'/1rSeQj' (No such file or directory)
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      JAXBModifier jAXBModifier0 = new JAXBModifier("&QXjlW;");
      jAXBModifier0.setPruneElements(true);
      assertEquals(true, jAXBModifier0.isPruneElements());
  }

  @Test
  public void test3()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      JAXBModifier jAXBModifier0 = new JAXBModifier("D", outputFormat0);
      try {
        jAXBModifier0.modify((InputStream) null, "D");
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * null Nested exception: null
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          JAXBModifier jAXBModifier0 = new JAXBModifier("j");
          PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
          jAXBModifier0.setOutput((OutputStream) pipedOutputStream0);
          File file0 = new File("");
          // Undeclared exception!
          try {
            jAXBModifier0.setOutput(file0);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission  write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:183)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:145)
             * org.dom4j.jaxb.JAXBModifier.setOutput(JAXBModifier.java:281)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("=By]", false, "=By]");
      JAXBModifier jAXBModifier0 = new JAXBModifier("=By]", outputFormat0);
      InputSource inputSource0 = new InputSource();
      try {
        jAXBModifier0.modify(inputSource0);
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * null Nested exception: null
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("file:");
      JAXBModifier jAXBModifier0 = new JAXBModifier("file:", outputFormat0);
      try {
        jAXBModifier0.modify((InputStream) null);
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * null Nested exception: null
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JAXBModifier jAXBModifier0 = new JAXBModifier("", classLoader0);
      char[] charArray0 = new char[7];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader((Reader) charArrayReader0);
      try {
        jAXBModifier0.modify((Reader) bufferedReader0);
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      JAXBModifier jAXBModifier0 = new JAXBModifier("swi6vqp");
      char[] charArray0 = new char[6];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      try {
        jAXBModifier0.modify((Reader) charArrayReader0, "swi6vqp");
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      JAXBModifier jAXBModifier0 = new JAXBModifier(")'/P");
      try {
        jAXBModifier0.modify(")'/P");
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * /mnt/fastdata/ac1gf/SF110/dist/62_dom4j/)'/P (No such file or directory) Nested exception: /mnt/fastdata/ac1gf/SF110/dist/62_dom4j/)'/P (No such file or directory)
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      JAXBModifier jAXBModifier0 = new JAXBModifier(")'/P");
      jAXBModifier0.removeObjectModifier(")'/P");
      assertEquals(false, jAXBModifier0.isPruneElements());
  }

  @Test
  public void test11()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      OutputFormat outputFormat0 = new OutputFormat("vWwju6-4lx`O~", false);
      JAXBModifier jAXBModifier0 = new JAXBModifier("vWwju6-4lx`O~", classLoader0, outputFormat0);
      File file0 = new File("vWwju6-4lx`O~", "vWwju6-4lx`O~");
      try {
        jAXBModifier0.modify(file0, (Charset) null);
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * vWwju6-4lx`O~/vWwju6-4lx`O~ (No such file or directory) Nested exception: vWwju6-4lx`O~/vWwju6-4lx`O~ (No such file or directory)
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      JAXBModifier jAXBModifier0 = new JAXBModifier(")'/P");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1424);
      jAXBModifier0.setOutput((Writer) charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
  }

  @Test
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          JAXBModifier jAXBModifier0 = new JAXBModifier("j");
          File file0 = new File("");
          // Undeclared exception!
          try {
            jAXBModifier0.setOutput(file0);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission  write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:183)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:145)
             * org.dom4j.jaxb.JAXBModifier.setOutput(JAXBModifier.java:281)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test14()  throws Throwable  {
      JAXBModifier jAXBModifier0 = new JAXBModifier(")'/P");
      jAXBModifier0.resetObjectModifiers();
      assertEquals(false, jAXBModifier0.isPruneElements());
  }
}
