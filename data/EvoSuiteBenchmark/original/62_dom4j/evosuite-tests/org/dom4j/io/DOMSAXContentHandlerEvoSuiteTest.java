/*
 * This file was automatically generated by EvoSuite
 */

package org.dom4j.io;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.dom4j.Namespace;
import org.dom4j.dom.DOMDocumentFactory;
import org.dom4j.dom.DOMNamespace;
import org.dom4j.io.DOMSAXContentHandler;
import org.dom4j.io.ElementStack;
import org.junit.BeforeClass;
import org.xml.sax.Attributes;
import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.Locator;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;
import org.xml.sax.ext.Attributes2Impl;
import org.xml.sax.ext.Locator2Impl;
import org.xml.sax.helpers.AttributesImpl;

@RunWith(EvoSuiteRunner.class)
public class DOMSAXContentHandlerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DOMSAXContentHandler dOMSAXContentHandler0 = new DOMSAXContentHandler();
      dOMSAXContentHandler0.startDTD("This Entity is read-only. It cannot be modified", "This Entity is read-only. It cannot be modified", "This Entity is read-only. It cannot be modified");
      assertEquals(false, dOMSAXContentHandler0.isIgnoreComments());
      assertEquals(false, dOMSAXContentHandler0.isStripWhitespaceText());
      assertEquals(false, dOMSAXContentHandler0.isMergeAdjacentText());
  }

  @Test
  public void test1()  throws Throwable  {
      DOMDocumentFactory dOMDocumentFactory0 = new DOMDocumentFactory();
      DOMSAXContentHandler dOMSAXContentHandler0 = new DOMSAXContentHandler(dOMDocumentFactory0);
      dOMSAXContentHandler0.endDocument();
      assertEquals(false, dOMSAXContentHandler0.isStripWhitespaceText());
      assertEquals(false, dOMSAXContentHandler0.isIgnoreComments());
      assertEquals(false, dOMSAXContentHandler0.isMergeAdjacentText());
  }

  @Test
  public void test2()  throws Throwable  {
      DOMDocumentFactory dOMDocumentFactory0 = new DOMDocumentFactory();
      DOMSAXContentHandler dOMSAXContentHandler0 = new DOMSAXContentHandler(dOMDocumentFactory0);
      dOMSAXContentHandler0.endDTD();
      assertEquals(false, dOMSAXContentHandler0.isMergeAdjacentText());
      assertEquals(false, dOMSAXContentHandler0.isIgnoreComments());
      assertEquals(false, dOMSAXContentHandler0.isStripWhitespaceText());
  }

  @Test
  public void test3()  throws Throwable  {
      DOMSAXContentHandler dOMSAXContentHandler0 = new DOMSAXContentHandler();
      dOMSAXContentHandler0.getEntityResolver();
      assertEquals(false, dOMSAXContentHandler0.isMergeAdjacentText());
      assertEquals(false, dOMSAXContentHandler0.isIgnoreComments());
      assertEquals(false, dOMSAXContentHandler0.isStripWhitespaceText());
  }

  @Test
  public void test4()  throws Throwable  {
      DOMSAXContentHandler dOMSAXContentHandler0 = new DOMSAXContentHandler();
      assertEquals(false, dOMSAXContentHandler0.isIgnoreComments());
      
      dOMSAXContentHandler0.setIgnoreComments(true);
      char[] charArray0 = new char[8];
      dOMSAXContentHandler0.comment(charArray0, (int) ' ', (int) '\u0000');
      assertEquals(true, dOMSAXContentHandler0.isIgnoreComments());
  }

  @Test
  public void test5()  throws Throwable  {
      DOMSAXContentHandler dOMSAXContentHandler0 = new DOMSAXContentHandler();
      dOMSAXContentHandler0.setElementStack((ElementStack) null);
      assertEquals(false, dOMSAXContentHandler0.isIgnoreComments());
      assertEquals(false, dOMSAXContentHandler0.isStripWhitespaceText());
      assertEquals(false, dOMSAXContentHandler0.isMergeAdjacentText());
  }

  @Test
  public void test6()  throws Throwable  {
      DOMSAXContentHandler dOMSAXContentHandler0 = new DOMSAXContentHandler();
      assertEquals(false, dOMSAXContentHandler0.isStripWhitespaceText());
      
      dOMSAXContentHandler0.setStripWhitespaceText(true);
      // Undeclared exception!
      try {
        dOMSAXContentHandler0.completeCurrentTextNode();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      DOMSAXContentHandler dOMSAXContentHandler0 = new DOMSAXContentHandler();
      // Undeclared exception!
      try {
        dOMSAXContentHandler0.fatalError((SAXParseException) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      DOMSAXContentHandler dOMSAXContentHandler0 = new DOMSAXContentHandler();
      dOMSAXContentHandler0.startEntity((String) null);
      assertEquals(false, dOMSAXContentHandler0.isStripWhitespaceText());
      assertEquals(false, dOMSAXContentHandler0.isMergeAdjacentText());
      assertEquals(false, dOMSAXContentHandler0.isIgnoreComments());
  }

  @Test
  public void test9()  throws Throwable  {
      DOMSAXContentHandler dOMSAXContentHandler0 = new DOMSAXContentHandler();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      dOMSAXContentHandler0.setDocumentLocator((Locator) locator2Impl0);
      AttributesImpl attributesImpl0 = new AttributesImpl();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl((Attributes) attributesImpl0);
      dOMSAXContentHandler0.startElement("This Entity is read-only. It cannot be modified", "This Entity is read-only. It cannot be modified", "This Entity is read-only. It cannot be modified", (Attributes) attributes2Impl0);
      assertEquals(false, dOMSAXContentHandler0.isMergeAdjacentText());
      assertEquals(false, dOMSAXContentHandler0.isIgnoreComments());
      assertEquals(false, dOMSAXContentHandler0.isStripWhitespaceText());
  }

  @Test
  public void test10()  throws Throwable  {
      DOMSAXContentHandler dOMSAXContentHandler0 = new DOMSAXContentHandler();
      dOMSAXContentHandler0.setEntityResolver((EntityResolver) dOMSAXContentHandler0);
      assertEquals(false, dOMSAXContentHandler0.isStripWhitespaceText());
      assertEquals(false, dOMSAXContentHandler0.isIgnoreComments());
      assertEquals(false, dOMSAXContentHandler0.isMergeAdjacentText());
  }

  @Test
  public void test11()  throws Throwable  {
      DOMSAXContentHandler dOMSAXContentHandler0 = new DOMSAXContentHandler();
      // Undeclared exception!
      try {
        dOMSAXContentHandler0.error((SAXParseException) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      DOMSAXContentHandler dOMSAXContentHandler0 = new DOMSAXContentHandler();
      boolean boolean0 = dOMSAXContentHandler0.isMergeAdjacentText();
      assertEquals(false, dOMSAXContentHandler0.isStripWhitespaceText());
      assertEquals(false, boolean0);
      assertEquals(false, dOMSAXContentHandler0.isIgnoreComments());
  }

  @Test
  public void test13()  throws Throwable  {
      DOMDocumentFactory dOMDocumentFactory0 = new DOMDocumentFactory();
      DOMSAXContentHandler dOMSAXContentHandler0 = new DOMSAXContentHandler(dOMDocumentFactory0);
      boolean boolean0 = dOMSAXContentHandler0.isStripWhitespaceText();
      assertEquals(false, dOMSAXContentHandler0.isIgnoreComments());
      assertEquals(false, dOMSAXContentHandler0.isMergeAdjacentText());
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      DOMSAXContentHandler dOMSAXContentHandler0 = new DOMSAXContentHandler();
      dOMSAXContentHandler0.endPrefixMapping("sC");
      assertEquals(false, dOMSAXContentHandler0.isStripWhitespaceText());
      assertEquals(false, dOMSAXContentHandler0.isIgnoreComments());
      assertEquals(false, dOMSAXContentHandler0.isMergeAdjacentText());
  }

  @Test
  public void test15()  throws Throwable  {
      DOMSAXContentHandler dOMSAXContentHandler0 = new DOMSAXContentHandler();
      boolean boolean0 = dOMSAXContentHandler0.isIgnoreComments();
      assertEquals(false, dOMSAXContentHandler0.isStripWhitespaceText());
      assertEquals(false, dOMSAXContentHandler0.isMergeAdjacentText());
      assertEquals(false, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      DOMDocumentFactory dOMDocumentFactory0 = new DOMDocumentFactory();
      DOMSAXContentHandler dOMSAXContentHandler0 = new DOMSAXContentHandler(dOMDocumentFactory0);
      dOMSAXContentHandler0.startCDATA();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      dOMSAXContentHandler0.startElement("cw~J\"};F6v", (String) null, "cw~J\"};F6v", (Attributes) attributes2Impl0);
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try {
        dOMSAXContentHandler0.characters(charArray0, (int) 'i', (int) 'i');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
        /*
         * String index out of range: 210
         */
      }
  }

  @Test
  public void test17()  throws Throwable  {
      DOMDocumentFactory dOMDocumentFactory0 = new DOMDocumentFactory();
      DOMSAXContentHandler dOMSAXContentHandler0 = new DOMSAXContentHandler(dOMDocumentFactory0);
      dOMSAXContentHandler0.startPrefixMapping((String) null, (String) null);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      dOMSAXContentHandler0.startElement((String) null, (String) null, "", (Attributes) attributes2Impl0);
      assertEquals(false, dOMSAXContentHandler0.isIgnoreComments());
      assertEquals(false, dOMSAXContentHandler0.isStripWhitespaceText());
      assertEquals(false, dOMSAXContentHandler0.isMergeAdjacentText());
  }

  @Test
  public void test18()  throws Throwable  {
      DOMSAXContentHandler dOMSAXContentHandler0 = new DOMSAXContentHandler();
      // Undeclared exception!
      try {
        dOMSAXContentHandler0.endCDATA();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test19()  throws Throwable  {
      DOMSAXContentHandler dOMSAXContentHandler0 = new DOMSAXContentHandler();
      dOMSAXContentHandler0.warning((SAXParseException) null);
      assertEquals(false, dOMSAXContentHandler0.isStripWhitespaceText());
      assertEquals(false, dOMSAXContentHandler0.isMergeAdjacentText());
      assertEquals(false, dOMSAXContentHandler0.isIgnoreComments());
  }

  @Test
  public void test20()  throws Throwable  {
      DOMDocumentFactory dOMDocumentFactory0 = new DOMDocumentFactory();
      DOMSAXContentHandler dOMSAXContentHandler0 = new DOMSAXContentHandler(dOMDocumentFactory0);
      assertEquals(false, dOMSAXContentHandler0.isMergeAdjacentText());
      
      dOMSAXContentHandler0.setMergeAdjacentText(true);
      dOMSAXContentHandler0.processingInstruction((String) null, "");
      assertEquals(true, dOMSAXContentHandler0.isMergeAdjacentText());
  }

  @Test
  public void test21()  throws Throwable  {
      DOMSAXContentHandler dOMSAXContentHandler0 = new DOMSAXContentHandler();
      dOMSAXContentHandler0.endEntity((String) null);
      assertEquals(false, dOMSAXContentHandler0.isStripWhitespaceText());
      assertEquals(false, dOMSAXContentHandler0.isMergeAdjacentText());
      assertEquals(false, dOMSAXContentHandler0.isIgnoreComments());
  }

  @Test
  public void test22()  throws Throwable  {
      DOMDocumentFactory dOMDocumentFactory0 = new DOMDocumentFactory();
      DOMSAXContentHandler dOMSAXContentHandler0 = new DOMSAXContentHandler(dOMDocumentFactory0);
      dOMSAXContentHandler0.getInputSource();
      assertEquals(false, dOMSAXContentHandler0.isMergeAdjacentText());
      assertEquals(false, dOMSAXContentHandler0.isIgnoreComments());
      assertEquals(false, dOMSAXContentHandler0.isStripWhitespaceText());
  }

  @Test
  public void test23()  throws Throwable  {
      DOMSAXContentHandler dOMSAXContentHandler0 = new DOMSAXContentHandler();
      dOMSAXContentHandler0.processingInstruction("9m7", "9m7");
      AttributesImpl attributesImpl0 = new AttributesImpl();
      dOMSAXContentHandler0.startElement("9m7", "9m7", "9m7", (Attributes) attributesImpl0);
      assertEquals(false, dOMSAXContentHandler0.isIgnoreComments());
      assertEquals(false, dOMSAXContentHandler0.isMergeAdjacentText());
      assertEquals(false, dOMSAXContentHandler0.isStripWhitespaceText());
  }

  @Test
  public void test24()  throws Throwable  {
      DOMDocumentFactory dOMDocumentFactory0 = new DOMDocumentFactory();
      DOMSAXContentHandler dOMSAXContentHandler0 = new DOMSAXContentHandler(dOMDocumentFactory0);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      dOMSAXContentHandler0.startElement("", (String) null, "", (Attributes) attributes2Impl0);
      dOMSAXContentHandler0.processingInstruction((String) null, "");
      assertEquals(false, dOMSAXContentHandler0.isStripWhitespaceText());
      assertEquals(false, dOMSAXContentHandler0.isIgnoreComments());
      assertEquals(false, dOMSAXContentHandler0.isMergeAdjacentText());
  }

  @Test
  public void test25()  throws Throwable  {
      DOMSAXContentHandler dOMSAXContentHandler0 = new DOMSAXContentHandler();
      dOMSAXContentHandler0.startDocument();
      assertEquals(false, dOMSAXContentHandler0.isStripWhitespaceText());
      assertEquals(false, dOMSAXContentHandler0.isIgnoreComments());
      assertEquals(false, dOMSAXContentHandler0.isMergeAdjacentText());
  }

  @Test
  public void test26()  throws Throwable  {
      DOMSAXContentHandler dOMSAXContentHandler0 = new DOMSAXContentHandler();
      assertEquals(false, dOMSAXContentHandler0.isMergeAdjacentText());
      
      dOMSAXContentHandler0.setMergeAdjacentText(true);
      dOMSAXContentHandler0.startDocument();
      dOMSAXContentHandler0.startDocument();
      assertEquals(true, dOMSAXContentHandler0.isMergeAdjacentText());
  }

  @Test
  public void test27()  throws Throwable  {
      DOMDocumentFactory dOMDocumentFactory0 = new DOMDocumentFactory();
      DOMSAXContentHandler dOMSAXContentHandler0 = new DOMSAXContentHandler(dOMDocumentFactory0);
      assertEquals(false, dOMSAXContentHandler0.isMergeAdjacentText());
      
      dOMSAXContentHandler0.setMergeAdjacentText(true);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      dOMSAXContentHandler0.startElement("", (String) null, "", (Attributes) attributes2Impl0);
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try {
        dOMSAXContentHandler0.characters(charArray0, 1, (int) '^');
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test28()  throws Throwable  {
      DOMSAXContentHandler dOMSAXContentHandler0 = new DOMSAXContentHandler();
      AttributesImpl attributesImpl0 = new AttributesImpl();
      dOMSAXContentHandler0.startElement("9m7", "9m7", "9m7", (Attributes) attributesImpl0);
      dOMSAXContentHandler0.startElement("9m7", "9m7", "9m7", (Attributes) attributesImpl0);
      assertEquals(false, dOMSAXContentHandler0.isMergeAdjacentText());
      assertEquals(false, dOMSAXContentHandler0.isStripWhitespaceText());
      assertEquals(false, dOMSAXContentHandler0.isIgnoreComments());
  }

  @Test
  public void test29()  throws Throwable  {
      DOMSAXContentHandler dOMSAXContentHandler0 = new DOMSAXContentHandler();
      dOMSAXContentHandler0.endElement("GS$)\"1", "GS$)\"1", "GS$)\"1");
      assertEquals(false, dOMSAXContentHandler0.isMergeAdjacentText());
      assertEquals(false, dOMSAXContentHandler0.isStripWhitespaceText());
      assertEquals(false, dOMSAXContentHandler0.isIgnoreComments());
  }

  @Test
  public void test30()  throws Throwable  {
      DOMDocumentFactory dOMDocumentFactory0 = new DOMDocumentFactory();
      DOMSAXContentHandler dOMSAXContentHandler0 = new DOMSAXContentHandler(dOMDocumentFactory0);
      assertEquals(false, dOMSAXContentHandler0.isMergeAdjacentText());
      
      dOMSAXContentHandler0.setMergeAdjacentText(true);
      dOMSAXContentHandler0.endElement(";&h[G3+4U6)B_R", ";&h[G3+4U6)B_R", ";&h[G3+4U6)B_R");
      assertEquals(true, dOMSAXContentHandler0.isMergeAdjacentText());
  }

  @Test
  public void test31()  throws Throwable  {
      DOMDocumentFactory dOMDocumentFactory0 = new DOMDocumentFactory();
      DOMSAXContentHandler dOMSAXContentHandler0 = new DOMSAXContentHandler(dOMDocumentFactory0);
      char[] charArray0 = new char[10];
      dOMSAXContentHandler0.characters(charArray0, (int) '\u0000', (int) '9');
      assertEquals(false, dOMSAXContentHandler0.isIgnoreComments());
      assertEquals(false, dOMSAXContentHandler0.isMergeAdjacentText());
      assertEquals(false, dOMSAXContentHandler0.isStripWhitespaceText());
  }

  @Test
  public void test32()  throws Throwable  {
      DOMSAXContentHandler dOMSAXContentHandler0 = new DOMSAXContentHandler();
      char[] charArray0 = new char[4];
      dOMSAXContentHandler0.characters(charArray0, (int) 'X', 0);
      assertEquals(false, dOMSAXContentHandler0.isStripWhitespaceText());
      assertEquals(false, dOMSAXContentHandler0.isMergeAdjacentText());
      assertEquals(false, dOMSAXContentHandler0.isIgnoreComments());
  }

  @Test
  public void test33()  throws Throwable  {
      DOMDocumentFactory dOMDocumentFactory0 = new DOMDocumentFactory();
      DOMSAXContentHandler dOMSAXContentHandler0 = new DOMSAXContentHandler(dOMDocumentFactory0);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      dOMSAXContentHandler0.startElement("", (String) null, "", (Attributes) attributes2Impl0);
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try {
        dOMSAXContentHandler0.characters(charArray0, 1, (int) '^');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
        /*
         * String index out of range: 95
         */
      }
  }

  @Test
  public void test34()  throws Throwable  {
      DOMDocumentFactory dOMDocumentFactory0 = new DOMDocumentFactory();
      DOMSAXContentHandler dOMSAXContentHandler0 = new DOMSAXContentHandler(dOMDocumentFactory0);
      dOMSAXContentHandler0.startCDATA();
      assertEquals(false, dOMSAXContentHandler0.isMergeAdjacentText());
      
      dOMSAXContentHandler0.setMergeAdjacentText(true);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      dOMSAXContentHandler0.startElement("cw~J\"};F6v", (String) null, "cw~J\"};F6v", (Attributes) attributes2Impl0);
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try {
        dOMSAXContentHandler0.characters(charArray0, (int) 'i', (int) 'i');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
        /*
         * String index out of range: 210
         */
      }
  }

  @Test
  public void test35()  throws Throwable  {
      DOMDocumentFactory dOMDocumentFactory0 = new DOMDocumentFactory();
      DOMSAXContentHandler dOMSAXContentHandler0 = new DOMSAXContentHandler(dOMDocumentFactory0);
      assertEquals(false, dOMSAXContentHandler0.isMergeAdjacentText());
      
      dOMSAXContentHandler0.setMergeAdjacentText(true);
      char[] charArray0 = new char[7];
      dOMSAXContentHandler0.comment(charArray0, 1, 1);
      assertEquals(true, dOMSAXContentHandler0.isMergeAdjacentText());
  }

  @Test
  public void test36()  throws Throwable  {
      DOMSAXContentHandler dOMSAXContentHandler0 = new DOMSAXContentHandler();
      char[] charArray0 = new char[9];
      dOMSAXContentHandler0.comment(charArray0, (int) '\u0000', (int) '\u0000');
      assertEquals(false, dOMSAXContentHandler0.isStripWhitespaceText());
      assertEquals(false, dOMSAXContentHandler0.isIgnoreComments());
      assertEquals(false, dOMSAXContentHandler0.isMergeAdjacentText());
  }

  @Test
  public void test37()  throws Throwable  {
      DOMDocumentFactory dOMDocumentFactory0 = new DOMDocumentFactory();
      DOMSAXContentHandler dOMSAXContentHandler0 = new DOMSAXContentHandler(dOMDocumentFactory0);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      dOMSAXContentHandler0.startElement("", (String) null, "", (Attributes) attributes2Impl0);
      char[] charArray0 = new char[7];
      dOMSAXContentHandler0.comment(charArray0, 1, 1);
      assertEquals(false, dOMSAXContentHandler0.isMergeAdjacentText());
      assertEquals(false, dOMSAXContentHandler0.isIgnoreComments());
      assertEquals(false, dOMSAXContentHandler0.isStripWhitespaceText());
  }

  @Test
  public void test38()  throws Throwable  {
      DOMSAXContentHandler dOMSAXContentHandler0 = new DOMSAXContentHandler();
      // Undeclared exception!
      try {
        dOMSAXContentHandler0.completeCurrentTextNode();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test39()  throws Throwable  {
      DOMSAXContentHandler dOMSAXContentHandler0 = new DOMSAXContentHandler();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      InputSource inputSource0 = new InputSource("E_5Ul f+$l");
      dOMSAXContentHandler0.setInputSource(inputSource0);
      dOMSAXContentHandler0.startElement("xmlns:E_5Ul f+$l", "xmlns:E_5Ul f+$l", "E_5Ul f+$l", (Attributes) attributes2Impl0);
      assertEquals(false, dOMSAXContentHandler0.isMergeAdjacentText());
      assertEquals(false, dOMSAXContentHandler0.isIgnoreComments());
      assertEquals(false, dOMSAXContentHandler0.isStripWhitespaceText());
  }

  @Test
  public void test40()  throws Throwable  {
      DOMSAXContentHandler dOMSAXContentHandler0 = new DOMSAXContentHandler();
      AttributesImpl attributesImpl0 = new AttributesImpl();
      attributesImpl0.addAttribute("9m7", "9m7", "9m7", "9m7", "9m7");
      dOMSAXContentHandler0.startElement("9m7", "9m7", "9m7", (Attributes) attributesImpl0);
      assertEquals(false, dOMSAXContentHandler0.isIgnoreComments());
      assertEquals(false, dOMSAXContentHandler0.isMergeAdjacentText());
      assertEquals(false, dOMSAXContentHandler0.isStripWhitespaceText());
  }

  @Test
  public void test41()  throws Throwable  {
      DOMSAXContentHandler dOMSAXContentHandler0 = new DOMSAXContentHandler();
      DOMDocumentFactory dOMDocumentFactory0 = new DOMDocumentFactory();
      DOMNamespace dOMNamespace0 = (DOMNamespace)dOMDocumentFactory0.createNamespace("E_5Ul f+$l", "E_5Ul f+$l");
      String string0 = dOMSAXContentHandler0.attributeNameForNamespace((Namespace) dOMNamespace0);
      assertEquals(false, dOMSAXContentHandler0.isStripWhitespaceText());
      assertEquals("xmlns:E_5Ul f+$l", string0);
      assertNotNull(string0);
      assertEquals(false, dOMSAXContentHandler0.isMergeAdjacentText());
      assertEquals(false, dOMSAXContentHandler0.isIgnoreComments());
  }
}
