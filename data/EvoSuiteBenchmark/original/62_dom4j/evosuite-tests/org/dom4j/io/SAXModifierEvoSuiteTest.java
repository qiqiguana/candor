/*
 * This file was automatically generated by EvoSuite
 */

package org.dom4j.io;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.DataInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.Reader;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.net.URL;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentException;
import org.dom4j.DocumentFactory;
import org.dom4j.io.ElementModifier;
import org.dom4j.io.OutputFormat;
import org.dom4j.io.SAXModifier;
import org.dom4j.io.XMLWriter;
import org.junit.BeforeClass;
import org.xml.sax.InputSource;
import org.xml.sax.Parser;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoSuiteRunner.class)
public class SAXModifierEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SAXModifier sAXModifier0 = new SAXModifier();
      sAXModifier0.setDocumentFactory((DocumentFactory) null);
      assertEquals(false, sAXModifier0.isPruneElements());
  }

  @Test
  public void test1()  throws Throwable  {
      SAXModifier sAXModifier0 = new SAXModifier(false);
      StringReader stringReader0 = new StringReader("}SRa@BjZ}f)Uc@Lf;-");
      try {
        sAXModifier0.modify((Reader) stringReader0);
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter((Parser) xMLReaderAdapter0);
      SAXModifier sAXModifier0 = new SAXModifier((XMLReader) parserAdapter0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try {
        sAXModifier0.modify((InputStream) pipedInputStream0);
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * Pipe not connected Nested exception: Pipe not connected
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      SAXModifier sAXModifier0 = new SAXModifier((XMLReader) xMLWriter0, true);
      // Undeclared exception!
      try {
        sAXModifier0.modify((URL) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      SAXModifier sAXModifier0 = new SAXModifier(true);
      sAXModifier0.resetModifiers();
      assertEquals(true, sAXModifier0.isPruneElements());
  }

  @Test
  public void test5()  throws Throwable  {
      SAXModifier sAXModifier0 = new SAXModifier(true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1080);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) pipedInputStream0);
      InputSource inputSource0 = new InputSource((InputStream) dataInputStream0);
      try {
        sAXModifier0.modify(inputSource0);
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * Pipe not connected Nested exception: Pipe not connected
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      SAXModifier sAXModifier0 = new SAXModifier();
      File file0 = new File("");
      try {
        sAXModifier0.modify(file0);
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         *  (No such file or directory) Nested exception:  (No such file or directory)
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      SAXModifier sAXModifier0 = new SAXModifier((XMLReader) null, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try {
        sAXModifier0.modify((InputStream) pipedInputStream0, "the size: ");
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * Pipe not connected Nested exception: Pipe not connected
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      SAXModifier sAXModifier0 = new SAXModifier((XMLReader) null, false);
      DefaultDocumentFactory defaultDocumentFactory0 = (DefaultDocumentFactory)sAXModifier0.getDocumentFactory();
      assertNotNull(defaultDocumentFactory0);
  }

  @Test
  public void test9()  throws Throwable  {
      SAXModifier sAXModifier0 = new SAXModifier((XMLReader) null, false);
      sAXModifier0.addModifier("w9{%AKQg*", (ElementModifier) null);
      try {
        sAXModifier0.modify((Reader) null, "(3m{");
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * null Nested exception: null
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      SAXModifier sAXModifier0 = new SAXModifier(true);
      try {
        sAXModifier0.modify("EZ1{a8u");
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * no protocol: EZ1{a8u Nested exception: no protocol: EZ1{a8u
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      SAXModifier sAXModifier0 = new SAXModifier((XMLReader) null, false);
      sAXModifier0.removeModifier((String) null);
      try {
        sAXModifier0.modify((Reader) null, "(3m{");
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * null Nested exception: null
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      SAXModifier sAXModifier0 = new SAXModifier((XMLReader) xMLWriter0, false);
      sAXModifier0.setXMLWriter(xMLWriter0);
      assertEquals(-1, xMLWriter0.getMaximumAllowedCharacter());
  }
}
