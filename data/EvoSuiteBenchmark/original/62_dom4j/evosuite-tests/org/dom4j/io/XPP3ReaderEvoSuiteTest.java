/*
 * This file was automatically generated by EvoSuite
 */

package org.dom4j.io;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.ByteArrayInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.net.URL;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentException;
import org.dom4j.DocumentFactory;
import org.dom4j.ElementHandler;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.XPP3Reader;
import org.junit.BeforeClass;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlPullParserFactory;

@RunWith(EvoSuiteRunner.class)
public class XPP3ReaderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      XPP3Reader xPP3Reader0 = new XPP3Reader();
      // Undeclared exception!
      try {
        xPP3Reader0.read((InputStream) null, "iI=5y");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      XPP3Reader xPP3Reader0 = new XPP3Reader();
      StringReader stringReader0 = new StringReader("Td4lU");
      try {
        xPP3Reader0.read((Reader) stringReader0, "Td4lU");
        fail("Expecting exception: XmlPullParserException");
      } catch(XmlPullParserException e) {
        /*
         * only whitespace content allowed before start tag and not T (position: START_DOCUMENT seen T... @1:1) 
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      XPP3Reader xPP3Reader0 = new XPP3Reader();
      // Undeclared exception!
      try {
        xPP3Reader0.read((URL) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      XPP3Reader xPP3Reader0 = new XPP3Reader();
      DefaultDocumentFactory defaultDocumentFactory0 = (DefaultDocumentFactory)xPP3Reader0.getDocumentFactory();
      xPP3Reader0.setDocumentFactory((DocumentFactory) defaultDocumentFactory0);
  }

  @Test
  public void test4()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      XPP3Reader xPP3Reader0 = new XPP3Reader((DocumentFactory) defaultDocumentFactory0);
      try {
        xPP3Reader0.read("");
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
        /*
         *  (No such file or directory)
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      XPP3Reader xPP3Reader0 = new XPP3Reader();
      xPP3Reader0.removeHandler("add[Object) u?supported");
      xPP3Reader0.removeHandler("Index value: ");
  }

  @Test
  public void test6()  throws Throwable  {
      XPP3Reader xPP3Reader0 = new XPP3Reader();
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) (byte)0, 468);
      try {
        xPP3Reader0.read((InputStream) byteArrayInputStream0);
        fail("Expecting exception: XmlPullParserException");
      } catch(XmlPullParserException e) {
        /*
         * only whitespace content allowed before start tag and not \\u0 (position: START_DOCUMENT seen \\u0... @1:1) 
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      XPP3Reader xPP3Reader0 = new XPP3Reader();
      xPP3Reader0.addHandler("Index value: ", (ElementHandler) null);
  }

  @Test
  public void test8()  throws Throwable  {
      XPP3Reader xPP3Reader0 = new XPP3Reader();
      XmlPullParserFactory xmlPullParserFactory0 = XmlPullParserFactory.newInstance();
      xPP3Reader0.setXPPFactory(xmlPullParserFactory0);
      assertEquals(false, xmlPullParserFactory0.isValidating());
  }

  @Test
  public void test9()  throws Throwable  {
      XPP3Reader xPP3Reader0 = new XPP3Reader();
      xPP3Reader0.setDispatchHandler((DispatchHandler) null);
  }

  @Test
  public void test10()  throws Throwable  {
      XPP3Reader xPP3Reader0 = new XPP3Reader();
      xPP3Reader0.setDefaultHandler((ElementHandler) null);
  }

  @Test
  public void test11()  throws Throwable  {
      XPP3Reader xPP3Reader0 = new XPP3Reader();
      try {
        xPP3Reader0.read("Index value: ");
        fail("Expecting exception: MalformedURLException");
      } catch(MalformedURLException e) {
        /*
         * no protocol: Index value: 
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      XPP3Reader xPP3Reader0 = new XPP3Reader();
      char[] charArray0 = new char[7];
      xPP3Reader0.getXPPFactory();
      try {
        xPP3Reader0.read(charArray0);
        fail("Expecting exception: XmlPullParserException");
      } catch(XmlPullParserException e) {
        /*
         * only whitespace content allowed before start tag and not \\u0 (position: START_DOCUMENT seen \\u0... @1:1) 
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      XPP3Reader xPP3Reader0 = new XPP3Reader();
      char[] charArray0 = new char[7];
      xPP3Reader0.getDocumentFactory();
      try {
        xPP3Reader0.read(charArray0);
        fail("Expecting exception: XmlPullParserException");
      } catch(XmlPullParserException e) {
        /*
         * only whitespace content allowed before start tag and not \\u0 (position: START_DOCUMENT seen \\u0... @1:1) 
         */
      }
  }
}
