/*
 * This file was automatically generated by EvoSuite
 */

package org.dom4j.io;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.dom4j.Branch;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.Element;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.bean.BeanElement;
import org.dom4j.dom.DOMAttribute;
import org.dom4j.dom.DOMCDATA;
import org.dom4j.dom.DOMComment;
import org.dom4j.dom.DOMDocument;
import org.dom4j.dom.DOMDocumentType;
import org.dom4j.dom.DOMElement;
import org.dom4j.dom.DOMEntityReference;
import org.dom4j.dom.DOMNamespace;
import org.dom4j.dom.DOMProcessingInstruction;
import org.dom4j.dom.DOMText;
import org.dom4j.io.DOMReader;
import org.dom4j.util.UserDataElement;
import org.junit.BeforeClass;
import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.Node;

@RunWith(EvoSuiteRunner.class)
public class DOMReaderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DOMReader dOMReader0 = new DOMReader((DocumentFactory) defaultDocumentFactory0);
      // Undeclared exception!
      try {
        dOMReader0.read((Document) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      DOMReader dOMReader0 = new DOMReader((DocumentFactory) null);
      // Undeclared exception!
      try {
        dOMReader0.getNamespace("g_ugsfd?\"? t;o[x", "g_ugsfd?\"? t;o[x");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      DOMReader dOMReader0 = new DOMReader();
      DOMDocument dOMDocument0 = new DOMDocument("org.dom4j.dos.DOMDocumentFactory.singleton.strategy");
      DOMProcessingInstruction dOMProcessingInstruction0 = (DOMProcessingInstruction)dOMDocument0.createProcessingInstruction("org.dom4j.dos.DOMDocumentFactory.singleton.strategy", "org.dom4j.dos.DOMDocumentFactory.singleton.strategy");
      dOMReader0.readTree((Node) dOMProcessingInstruction0, (Branch) dOMDocument0);
      // Undeclared exception!
      try {
        dOMReader0.readElement((Node) dOMDocument0, (Branch) dOMDocument0);
        fail("Expecting exception: DOMException");
      } catch(DOMException e) {
        /*
         * Not supported yet
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      DOMReader dOMReader0 = new DOMReader((DocumentFactory) null);
      dOMReader0.setDocumentFactory((DocumentFactory) null);
  }

  @Test
  public void test4()  throws Throwable  {
      DOMReader dOMReader0 = new DOMReader((DocumentFactory) null);
      DOMElement dOMElement0 = new DOMElement("g_ugsfd?\"? t;o[x");
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType("g_ugsfd?\"? t;o[x", "g_ugsfd?\"? t;o[x");
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0, dOMDocumentType0);
      DOMDocument dOMDocument1 = (DOMDocument)dOMReader0.read((Document) dOMDocument0);
      assertEquals("/", dOMDocument1.getUniquePath());
  }

  @Test
  public void test5()  throws Throwable  {
      DOMReader dOMReader0 = new DOMReader();
      DOMCDATA dOMCDATA0 = new DOMCDATA(".");
      DOMElement dOMElement0 = new DOMElement(".");
      dOMReader0.readTree((Node) dOMCDATA0, (Branch) dOMElement0);
      assertEquals(".", dOMElement0.getStringValue());
      assertEquals(true, dOMElement0.hasContent());
  }

  @Test
  public void test6()  throws Throwable  {
      DOMReader dOMReader0 = new DOMReader();
      DOMDocument dOMDocument0 = new DOMDocument("org.dom4j.dos.DOMDocumentFactory.singleton.strategy");
      // Undeclared exception!
      try {
        dOMReader0.readElement((Node) dOMDocument0, (Branch) dOMDocument0);
        fail("Expecting exception: DOMException");
      } catch(DOMException e) {
        /*
         * Not supported yet
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      DOMReader dOMReader0 = new DOMReader();
      QName qName0 = QName.get("qkz8#_");
      DOMAttribute dOMAttribute0 = new DOMAttribute(qName0, "qkz8#_");
      BeanElement beanElement0 = new BeanElement(qName0);
      dOMReader0.readTree((Node) dOMAttribute0, (Branch) beanElement0);
      assertEquals("", dOMAttribute0.getNamespaceURI());
  }

  @Test
  public void test8()  throws Throwable  {
      DOMReader dOMReader0 = new DOMReader();
      QName qName0 = QName.get("qkz8#_");
      DOMText dOMText0 = new DOMText("qkz8#_");
      DOMElement dOMElement0 = new DOMElement(qName0, (-4));
      dOMReader0.readTree((Node) dOMText0, (Branch) dOMElement0);
      assertEquals(true, dOMElement0.hasChildNodes());
      assertEquals("qkz8#_", dOMElement0.getText());
  }

  @Test
  public void test9()  throws Throwable  {
      DOMReader dOMReader0 = new DOMReader();
      DOMDocument dOMDocument0 = new DOMDocument();
      DOMEntityReference dOMEntityReference0 = new DOMEntityReference("_IX{Gjp]3dM/");
      // Undeclared exception!
      try {
        dOMReader0.readTree((Node) dOMEntityReference0, (Branch) dOMDocument0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      DOMReader dOMReader0 = new DOMReader();
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType();
      DOMDocument dOMDocument0 = new DOMDocument(dOMDocumentType0);
      DOMComment dOMComment0 = (DOMComment)dOMDocument0.createComment("");
      dOMReader0.readTree((Node) dOMComment0, (Branch) dOMDocument0);
      assertEquals(true, dOMDocument0.hasChildNodes());
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE null><!---->", dOMDocument0.asXML());
  }

  @Test
  public void test11()  throws Throwable  {
      DOMReader dOMReader0 = new DOMReader((DocumentFactory) null);
      DOMElement dOMElement0 = new DOMElement("g_ugsfd?\"? t;o[x");
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType("g_ugsfd?\"? t;o[x", "g_ugsfd?\"? t;o[x");
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0, dOMDocumentType0);
      dOMReader0.readTree((Node) dOMDocument0, (Branch) dOMDocument0);
      assertEquals("/", dOMDocument0.getPath());
  }

  @Test
  public void test12()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DOMReader dOMReader0 = new DOMReader((DocumentFactory) defaultDocumentFactory0);
      DOMNamespace dOMNamespace0 = new DOMNamespace("a*d/=NcU", "a*d/=NcU");
      BeanElement beanElement0 = new BeanElement("a*d/=NcU", (Namespace) dOMNamespace0, (Object) "a*d/=NcU");
      dOMReader0.readTree((Node) dOMNamespace0, (Branch) beanElement0);
      assertEquals(false, dOMNamespace0.hasContent());
  }

  @Test
  public void test13()  throws Throwable  {
      DOMReader dOMReader0 = new DOMReader();
      UserDataElement userDataElement0 = new UserDataElement("FS9x");
      DOMComment dOMComment0 = new DOMComment((Element) userDataElement0, "FS9x");
      dOMReader0.readTree((Node) dOMComment0, (Branch) userDataElement0);
      assertEquals(true, userDataElement0.hasContent());
      assertEquals(1, userDataElement0.nodeCount());
  }

  @Test
  public void test14()  throws Throwable  {
      DOMReader dOMReader0 = new DOMReader();
      DOMDocument dOMDocument0 = new DOMDocument();
      DOMElement dOMElement0 = (DOMElement)dOMDocument0.createElement("_IX{Gjp]3dM/");
      dOMReader0.readElement((Node) dOMElement0, (Branch) dOMDocument0);
      assertEquals(true, dOMDocument0.hasChildNodes());
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<_IX{Gjp]3dM//>", dOMDocument0.asXML());
  }
}
