/*
 * This file was automatically generated by EvoSuite
 */

package org.dom4j.io;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.List;
import org.dom4j.Attribute;
import org.dom4j.CDATA;
import org.dom4j.Comment;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.Document;
import org.dom4j.DocumentType;
import org.dom4j.Element;
import org.dom4j.Entity;
import org.dom4j.Namespace;
import org.dom4j.Node;
import org.dom4j.ProcessingInstruction;
import org.dom4j.QName;
import org.dom4j.Text;
import org.dom4j.dom.DOMComment;
import org.dom4j.dom.DOMDocument;
import org.dom4j.dom.DOMDocumentType;
import org.dom4j.dom.DOMElement;
import org.dom4j.dom.DOMNamespace;
import org.dom4j.dom.DOMText;
import org.dom4j.io.OutputFormat;
import org.dom4j.io.XMLWriter;
import org.dom4j.tree.DefaultAttribute;
import org.dom4j.tree.DefaultCDATA;
import org.dom4j.tree.DefaultComment;
import org.dom4j.tree.DefaultDocument;
import org.dom4j.tree.DefaultEntity;
import org.dom4j.tree.DefaultProcessingInstruction;
import org.dom4j.tree.DefaultText;
import org.dom4j.tree.FlyweightCDATA;
import org.dom4j.tree.FlyweightEntity;
import org.dom4j.tree.NamespaceStack;
import org.dom4j.util.IndexedElement;
import org.dom4j.util.NonLazyElement;
import org.dom4j.util.UserDataAttribute;
import org.dom4j.util.UserDataElement;
import org.junit.BeforeClass;
import org.xml.sax.Attributes;
import org.xml.sax.Locator;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXNotSupportedException;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.Attributes2Impl;
import org.xml.sax.ext.LexicalHandler;
import org.xml.sax.ext.Locator2Impl;

@RunWith(EvoSuiteRunner.class)
public class XMLWriterEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("rVu0,/");
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      xMLWriter0.unparsedEntityDecl("rVu0,/", "rVu0,/", "rVu0,/", "rVu0,/");
      assertEquals(true, xMLWriter0.isEscapeText());
      assertEquals(true, xMLWriter0.resolveEntityRefs());
  }

  @Test
  public void test1()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      xMLWriter0.endPrefixMapping("&amp;");
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test2()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      XMLWriter xMLWriter0 = new XMLWriter((Writer) pipedWriter0);
      assertNotNull(xMLWriter0);
      
      try {
        xMLWriter0.endCDATA();
        fail("Expecting exception: SAXException");
      } catch(SAXException e) {
        /*
         * Pipe not connected
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      XMLWriter xMLWriter0 = new XMLWriter((Writer) charArrayWriter0);
      DOMDocument dOMDocument0 = new DOMDocument();
      DOMDocument dOMDocument1 = (DOMDocument)dOMDocument0.addProcessingInstruction("M #;$9GwpV/wDb", "M #;$9GwpV/wDb");
      xMLWriter0.write((Document) dOMDocument1);
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<?M #;$9GwpV/wDb M #;$9GwpV/wDb?>", charArrayWriter0.toString());
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<?M #;$9GwpV/wDb M #;$9GwpV/wDb?>", dOMDocument0.asXML());
  }

  @Test
  public void test4()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1);
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      XMLWriter xMLWriter0 = new XMLWriter((Writer) charArrayWriter0, outputFormat0);
      assertNotNull(xMLWriter0);
      
      xMLWriter0.getLexicalHandler();
      assertEquals(true, xMLWriter0.isEscapeText());
      assertEquals(true, xMLWriter0.resolveEntityRefs());
  }

  @Test
  public void test5()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      XMLWriter xMLWriter0 = new XMLWriter((OutputStream) byteArrayOutputStream0);
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
      assertNotNull(xMLWriter0);
  }

  @Test
  public void test6()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter();
      assertNotNull(xMLWriter0);
      
      xMLWriter0.processingInstruction("Illegal value for count: ", "Illegal value for count: ");
      assertEquals(true, xMLWriter0.isEscapeText());
      assertEquals(true, xMLWriter0.resolveEntityRefs());
  }

  @Test
  public void test7()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(4520);
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      XMLWriter xMLWriter0 = new XMLWriter((OutputStream) byteArrayOutputStream0, outputFormat0);
      assertNotNull(xMLWriter0);
      
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      // Undeclared exception!
      try {
        xMLWriter0.writeAttribute((Attributes) attributes2Impl0, 4520);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      xMLWriter0.setOutputStream((OutputStream) byteArrayOutputStream0);
      assertEquals(true, xMLWriter0.isEscapeText());
      assertEquals(true, xMLWriter0.resolveEntityRefs());
  }

  @Test
  public void test9()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      xMLWriter0.isExpandEmptyElements();
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test10()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("8$G", true, "8$G");
      XMLWriter xMLWriter0 = new XMLWriter((Writer) null, outputFormat0);
      assertNotNull(xMLWriter0);
      
      // Undeclared exception!
      try {
        xMLWriter0.writeOpen((Element) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter();
      assertNotNull(xMLWriter0);
      
      xMLWriter0.setIndentLevel((int) 'c');
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test12()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("rVu0,/");
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      xMLWriter0.close();
      assertEquals(true, xMLWriter0.isEscapeText());
      assertEquals(true, xMLWriter0.resolveEntityRefs());
  }

  @Test
  public void test13()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("rVu0,/");
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      boolean boolean0 = xMLWriter0.isEscapeText();
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      XMLWriter xMLWriter0 = new XMLWriter((Writer) charArrayWriter0);
      assertNotNull(xMLWriter0);
      
      OutputFormat outputFormat0 = xMLWriter0.getOutputFormat();
      assertNotNull(outputFormat0);
      assertEquals(true, xMLWriter0.isEscapeText());
      assertEquals(true, xMLWriter0.resolveEntityRefs());
  }

  @Test
  public void test15()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(195);
      xMLWriter0.setWriter((Writer) charArrayWriter0);
      DOMNamespace dOMNamespace0 = new DOMNamespace((Element) null, "4f}Y2-3sLy[M\"XuMW", "The result of the XPath expression is not a Node. It was: ");
      QName qName0 = QName.get((String) null, (Namespace) dOMNamespace0, (String) null);
      DefaultAttribute defaultAttribute0 = new DefaultAttribute(qName0, "4f}Y2-3sLy[M\"XuMW");
      xMLWriter0.write((Attribute) defaultAttribute0);
      assertEquals(true, xMLWriter0.isEscapeText());
      assertEquals(-1, xMLWriter0.getMaximumAllowedCharacter());
  }

  @Test
  public void test16()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      XMLWriter xMLWriter0 = new XMLWriter((Writer) charArrayWriter0);
      assertNotNull(xMLWriter0);
      
      // Undeclared exception!
      try {
        xMLWriter0.parse(";]");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * No parent for filter
         */
      }
  }

  @Test
  public void test17()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertEquals(true, xMLWriter0.isEscapeText());
      assertNotNull(xMLWriter0);
      
      xMLWriter0.setEscapeText(false);
      xMLWriter0.writeString("4f}Y2-3sLy[M\"XuMW");
      assertEquals(false, xMLWriter0.isEscapeText());
      assertEquals(true, xMLWriter0.resolveEntityRefs());
  }

  @Test
  public void test18()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      xMLWriter0.notationDecl("Illegal value for count: ", "Illegal value for count: ", "Illegal value for count: ");
      assertEquals(true, xMLWriter0.isEscapeText());
      assertEquals(true, xMLWriter0.resolveEntityRefs());
  }

  @Test
  public void test19()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      DOMElement dOMElement0 = new DOMElement("Yl13[h^Oz");
      xMLWriter0.writeClose((Element) dOMElement0);
      assertEquals(true, xMLWriter0.isEscapeText());
      assertEquals(true, xMLWriter0.resolveEntityRefs());
  }

  @Test
  public void test20()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      xMLWriter0.startDocument();
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test21()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      xMLWriter0.startElement("8$G", "8$G", "8$G", (Attributes) attributes2Impl0);
      xMLWriter0.indent();
      assertEquals(true, xMLWriter0.isEscapeText());
      assertEquals(true, xMLWriter0.resolveEntityRefs());
  }

  @Test
  public void test22()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter();
      assertNotNull(xMLWriter0);
      
      Locator2Impl locator2Impl0 = new Locator2Impl();
      xMLWriter0.setDocumentLocator((Locator) locator2Impl0);
      assertEquals(true, xMLWriter0.isEscapeText());
      assertEquals(true, xMLWriter0.resolveEntityRefs());
  }

  @Test
  public void test23()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter();
      assertNotNull(xMLWriter0);
      
      char[] charArray0 = new char[10];
      xMLWriter0.ignorableWhitespace(charArray0, (-1), (int) 'o');
      assertEquals(true, xMLWriter0.isEscapeText());
      assertEquals(true, xMLWriter0.resolveEntityRefs());
  }

  @Test
  public void test24()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter();
      assertNotNull(xMLWriter0);
      
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType(";BS@MaIl^)", ";BS@MaIl^)", ";BS@MaIl^)");
      DOMDocument dOMDocument0 = new DOMDocument(dOMDocumentType0);
      xMLWriter0.writeNode((Node) dOMDocument0);
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE ;BS@MaIl^) PUBLIC \";BS@MaIl^)\" \";BS@MaIl^)\">", dOMDocument0.asXML());
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test25()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1);
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      XMLWriter xMLWriter0 = new XMLWriter((Writer) charArrayWriter0, outputFormat0);
      NamespaceStack namespaceStack0 = new NamespaceStack();
      QName qName0 = namespaceStack0.getQName("|", "|", "|");
      IndexedElement indexedElement0 = new IndexedElement(qName0, (int) 'c');
      xMLWriter0.write((Element) indexedElement0);
      assertEquals("<| xmlns=\"|\"/>", charArrayWriter0.toString());
      assertEquals(14, charArrayWriter0.size());
  }

  @Test
  public void test26()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1);
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      XMLWriter xMLWriter0 = new XMLWriter((Writer) charArrayWriter0, outputFormat0);
      FlyweightCDATA flyweightCDATA0 = new FlyweightCDATA("|");
      xMLWriter0.write((CDATA) flyweightCDATA0);
      assertEquals(13, charArrayWriter0.size());
      assertEquals("<![CDATA[|]]>", charArrayWriter0.toString());
  }

  @Test
  public void test27()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1);
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      XMLWriter xMLWriter0 = new XMLWriter((Writer) charArrayWriter0, outputFormat0);
      DefaultComment defaultComment0 = new DefaultComment("|");
      xMLWriter0.write((Comment) defaultComment0);
      assertEquals("<!--|-->", charArrayWriter0.toString());
      assertEquals(8, charArrayWriter0.size());
  }

  @Test
  public void test28()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      DOMComment dOMComment0 = new DOMComment("$0$R{");
      xMLWriter0.write((Comment) dOMComment0);
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test29()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter((Writer) null);
      assertNotNull(xMLWriter0);
      
      xMLWriter0.write((DocumentType) null);
      assertEquals(true, xMLWriter0.isEscapeText());
      assertEquals(true, xMLWriter0.resolveEntityRefs());
  }

  @Test
  public void test30()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      xMLWriter0.write((DocumentType) null);
      assertEquals(true, xMLWriter0.isEscapeText());
      assertEquals(true, xMLWriter0.resolveEntityRefs());
  }

  @Test
  public void test31()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1);
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      XMLWriter xMLWriter0 = new XMLWriter((Writer) charArrayWriter0, outputFormat0);
      FlyweightEntity flyweightEntity0 = new FlyweightEntity("|", "|");
      xMLWriter0.write((Entity) flyweightEntity0);
      assertEquals(1, charArrayWriter0.size());
      assertEquals("|", charArrayWriter0.toString());
  }

  @Test
  public void test32()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter();
      assertNotNull(xMLWriter0);
      
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultEntity defaultEntity0 = (DefaultEntity)defaultDocumentFactory0.createEntity("Illegal value for count: ", "Illegal value for count: ");
      xMLWriter0.write((Entity) defaultEntity0);
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test33()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PrintWriter printWriter0 = new PrintWriter((OutputStream) pipedOutputStream0, false);
      XMLWriter xMLWriter0 = new XMLWriter((Writer) printWriter0);
      NamespaceStack namespaceStack0 = new NamespaceStack();
      Namespace namespace0 = namespaceStack0.addNamespace("QCt*1)-#i=:", "'");
      xMLWriter0.write(namespace0);
  }

  @Test
  public void test34()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      xMLWriter0.write((Namespace) null);
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test35()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      QName qName0 = QName.get("pRAIg}#*vT>Oi");
      UserDataElement userDataElement0 = new UserDataElement(qName0);
      DefaultProcessingInstruction defaultProcessingInstruction0 = new DefaultProcessingInstruction((Element) userDataElement0, "", "");
      xMLWriter0.write((ProcessingInstruction) defaultProcessingInstruction0);
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
      assertEquals("<pRAIg}#*vT>Oi/>", userDataElement0.asXML());
  }

  @Test
  public void test36()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      XMLWriter xMLWriter0 = new XMLWriter((Writer) charArrayWriter0);
      xMLWriter0.write("$0$R{");
      assertEquals(5, charArrayWriter0.size());
      assertEquals("$0$R{", charArrayWriter0.toString());
  }

  @Test
  public void test37()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1);
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      XMLWriter xMLWriter0 = new XMLWriter((Writer) charArrayWriter0, outputFormat0);
      FlyweightEntity flyweightEntity0 = new FlyweightEntity("|", "|");
      xMLWriter0.write((Object) flyweightEntity0);
      assertEquals("|", charArrayWriter0.toString());
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test38()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      xMLWriter0.write((Object) null);
      assertEquals(true, xMLWriter0.isEscapeText());
      assertEquals(true, xMLWriter0.resolveEntityRefs());
  }

  @Test
  public void test39()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter();
      assertNotNull(xMLWriter0);
      
      xMLWriter0.write((Object) "text()");
      assertEquals(-1, xMLWriter0.getMaximumAllowedCharacter());
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test40()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      UserDataElement userDataElement0 = new UserDataElement("8$G");
      QName qName0 = userDataElement0.getQName("8$G");
      NonLazyElement nonLazyElement0 = new NonLazyElement(qName0, (int) '[');
      List<Element> list0 = nonLazyElement0.elements("f:(r;L$_");
      xMLWriter0.write((Object) list0);
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test41()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      XMLWriter xMLWriter0 = new XMLWriter();
      assertNotNull(xMLWriter0);
      
      try {
        xMLWriter0.write((Object) pipedInputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Invalid object: java.io.PipedInputStream@65869fb6
         */
      }
  }

  @Test
  public void test42()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter();
      assertNotNull(xMLWriter0);
      
      try {
        xMLWriter0.setProperty("", "/");
        fail("Expecting exception: SAXNotRecognizedException");
      } catch(SAXNotRecognizedException e) {
        /*
         * Property: 
         */
      }
  }

  @Test
  public void test43()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      XMLWriter xMLWriter0 = new XMLWriter((Writer) charArrayWriter0);
      assertNotNull(xMLWriter0);
      
      xMLWriter0.setParent((XMLReader) xMLWriter0);
      // Undeclared exception!
      try {
        xMLWriter0.parse(";]");
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }

  @Test
  public void test44()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter();
      assertNotNull(xMLWriter0);
      
      try {
        xMLWriter0.getProperty("m#yd4T@l/<W");
        fail("Expecting exception: SAXNotRecognizedException");
      } catch(SAXNotRecognizedException e) {
        /*
         * Property: m#yd4T@l/<W
         */
      }
  }

  @Test
  public void test45()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1);
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      XMLWriter xMLWriter0 = new XMLWriter((Writer) charArrayWriter0, outputFormat0);
      assertNotNull(xMLWriter0);
      
      // Undeclared exception!
      try {
        xMLWriter0.setLexicalHandler((LexicalHandler) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * Null lexical handler
         */
      }
  }

  @Test
  public void test46()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter((Writer) null);
      assertNotNull(xMLWriter0);
      
      xMLWriter0.endDocument();
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test47()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter();
      assertNotNull(xMLWriter0);
      
      xMLWriter0.endDocument();
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test48()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter();
      assertNotNull(xMLWriter0);
      
      xMLWriter0.startPrefixMapping(";BS@MaIl^)", "<8AeQl~v");
      xMLWriter0.startPrefixMapping(";BS@MaIl^)", ";BS@MaIl^)");
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test49()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      xMLWriter0.endElement("pRAIg}#*vT>Oi", "pRAIg}#*vT>Oi", "Illegal value for count: ");
      xMLWriter0.endElement("Illegal value for count: ", "Illegal value for count: ", "Illegal value for count: ");
      assertEquals(true, xMLWriter0.isEscapeText());
      assertEquals(true, xMLWriter0.resolveEntityRefs());
  }

  @Test
  public void test50()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      XMLWriter xMLWriter0 = new XMLWriter((Writer) charArrayWriter0);
      assertNotNull(xMLWriter0);
      
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try {
        xMLWriter0.characters(charArray0, (int) 'P', (int) 'P');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
        /*
         * String index out of range: 160
         */
      }
  }

  @Test
  public void test51()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter();
      assertNotNull(xMLWriter0);
      
      char[] charArray0 = new char[4];
      xMLWriter0.characters(charArray0, (int) 'x', 0);
      assertEquals(true, xMLWriter0.isEscapeText());
      assertEquals(true, xMLWriter0.resolveEntityRefs());
  }

  @Test
  public void test52()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter();
      assertNotNull(xMLWriter0);
      
      xMLWriter0.startDTD("6jD?=!y", "UTF-8", (String) null);
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test53()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter();
      assertNotNull(xMLWriter0);
      
      xMLWriter0.endDTD();
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test54()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter();
      assertNotNull(xMLWriter0);
      
      xMLWriter0.startCDATA();
      assertEquals(true, xMLWriter0.isEscapeText());
      assertEquals(true, xMLWriter0.resolveEntityRefs());
  }

  @Test
  public void test55()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter();
      assertNotNull(xMLWriter0);
      
      xMLWriter0.endCDATA();
      assertEquals(true, xMLWriter0.isEscapeText());
      assertEquals(true, xMLWriter0.resolveEntityRefs());
  }

  @Test
  public void test56()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PrintWriter printWriter0 = new PrintWriter((OutputStream) pipedOutputStream0, false);
      XMLWriter xMLWriter0 = new XMLWriter((Writer) printWriter0);
      XMLWriter xMLWriter1 = new XMLWriter();
      xMLWriter0.setLexicalHandler((LexicalHandler) xMLWriter1);
      xMLWriter0.startEntity("fz8!*GW._]%r");
  }

  @Test
  public void test57()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      xMLWriter0.endEntity((String) null);
      assertEquals(true, xMLWriter0.isEscapeText());
      assertEquals(true, xMLWriter0.resolveEntityRefs());
  }

  @Test
  public void test58()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("rVu0,/");
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      char[] charArray0 = new char[5];
      xMLWriter0.comment(charArray0, 0, (int) '\u0000');
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test59()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter();
      assertNotNull(xMLWriter0);
      
      NamespaceStack namespaceStack0 = new NamespaceStack();
      QName qName0 = namespaceStack0.getQName("|", "|", "|");
      IndexedElement indexedElement0 = new IndexedElement(qName0, (int) 'c');
      IndexedElement indexedElement1 = (IndexedElement)indexedElement0.addComment("|");
      xMLWriter0.write((Element) indexedElement1);
      assertEquals("<| xmlns=\"|\"><!--|--></|>", indexedElement0.asXML());
      assertEquals("<| xmlns=\"|\"><!--|--></|>", indexedElement1.asXML());
  }

  @Test
  public void test60()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      UserDataElement userDataElement0 = new UserDataElement("8$G");
      Namespace namespace0 = userDataElement0.getNamespace();
      DOMElement dOMElement0 = new DOMElement("8$G", namespace0);
      DOMElement dOMElement1 = (DOMElement)dOMElement0.addNamespace("8$G", "");
      xMLWriter0.writeElement((Element) dOMElement1);
      assertEquals("<8$G xmlns:8$G=\"\"></8$G>", dOMElement0.asXML());
      assertEquals("<8$G xmlns:8$G=\"\"></8$G>", dOMElement1.asXML());
  }

  @Test
  public void test61()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      QName qName0 = QName.get("pRAIg}#*vT>Oi");
      UserDataElement userDataElement0 = new UserDataElement(qName0);
      UserDataElement userDataElement1 = (UserDataElement)userDataElement0.addEntity("pRAIg}#*vT>Oi", "Illegal value for count: ");
      DefaultDocument defaultDocument0 = new DefaultDocument((Element) userDataElement1);
      xMLWriter0.write((Document) defaultDocument0);
      assertEquals("<pRAIg}#*vT>Oi>Illegal value for count: </pRAIg}#*vT>Oi>", userDataElement0.asXML());
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<pRAIg}#*vT>Oi>Illegal value for count: </pRAIg}#*vT>Oi>", defaultDocument0.asXML());
  }

  @Test
  public void test62()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("MSG_NMTOKEN_REQUIRED_IN_ENUMERATION");
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      UserDataElement userDataElement0 = new UserDataElement("\n");
      UserDataElement userDataElement1 = (UserDataElement)userDataElement0.addText("MSG_NMTOKEN_REQUIRED_IN_ENUMERATION");
      xMLWriter0.writeElement((Element) userDataElement1);
      assertEquals("<\n>MSG_NMTOKEN_REQUIRED_IN_ENUMERATION</\n>", userDataElement0.asXML());
      assertEquals("<\n>MSG_NMTOKEN_REQUIRED_IN_ENUMERATION</\n>", userDataElement1.asXML());
  }

  @Test
  public void test63()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter();
      assertNotNull(xMLWriter0);
      
      DefaultCDATA defaultCDATA0 = new DefaultCDATA((String) null);
      xMLWriter0.write((CDATA) defaultCDATA0);
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test64()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      xMLWriter0.startPrefixMapping((String) null, "The result of the XPath expression is not a Node. It was: ");
      xMLWriter0.writeNamespaces();
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test65()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      xMLWriter0.writeString((String) null);
      assertEquals(true, xMLWriter0.isEscapeText());
      assertEquals(true, xMLWriter0.resolveEntityRefs());
  }

  @Test
  public void test66()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      DefaultText defaultText0 = new DefaultText("");
      xMLWriter0.write((Text) defaultText0);
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test67()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      UserDataElement userDataElement0 = new UserDataElement("8$G");
      xMLWriter0.writeNodeText((Node) userDataElement0);
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test68()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      XMLWriter xMLWriter0 = new XMLWriter((Writer) charArrayWriter0);
      UserDataElement userDataElement0 = new UserDataElement("$0$R{");
      QName qName0 = userDataElement0.getQName();
      DOMElement dOMElement0 = new DOMElement(qName0);
      DOMElement dOMElement1 = (DOMElement)dOMElement0.addCDATA("Index value: ");
      xMLWriter0.writeElementContent((Element) dOMElement1);
      assertEquals("<![CDATA[Index value: ]]>", charArrayWriter0.toString());
      assertEquals("<$0$R{><![CDATA[Index value: ]]></$0$R{>", dOMElement0.asXML());
  }

  @Test
  public void test69()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter();
      assertNotNull(xMLWriter0);
      
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType("}-!ADp v7>", "}-!ADp v7>");
      xMLWriter0.writeNode((Node) dOMDocumentType0);
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test70()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      xMLWriter0.writeDocType("4fY}Y2-3sLy[XuMW", (String) null, "Yl13[h^Oz");
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test71()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      xMLWriter0.writeDocType("", "", "");
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test72()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter();
      assertNotNull(xMLWriter0);
      
      xMLWriter0.writeDocType("g&IY", "g&IY", "g&IY");
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test73()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter();
      assertNotNull(xMLWriter0);
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      
      xMLWriter0.setResolveEntityRefs(false);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultEntity defaultEntity0 = (DefaultEntity)defaultDocumentFactory0.createEntity("&gt;&lt;/", "l|:B");
      xMLWriter0.writeEntity((Entity) defaultEntity0);
      assertEquals(false, xMLWriter0.resolveEntityRefs());
  }

  @Test
  public void test74()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      xMLWriter0.writeComment("FCKmL");
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test75()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("xmlns:c,f  Xj`ayl}NUa[");
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      DOMElement dOMElement0 = new DOMElement("xmlns:c,f  Xj`ayl}NUa[");
      DOMElement dOMElement1 = (DOMElement)dOMElement0.addAttribute("xmlns:c,f  Xj`ayl}NUa[", "xmlns:c,f  Xj`ayl}NUa[");
      xMLWriter0.write((Element) dOMElement1);
      assertEquals("<xmlns:c,f  Xj`ayl}NUa[ xmlns:c,f  Xj`ayl}NUa[=\"xmlns:c,f  Xj`ayl}NUa[\"/>", dOMElement0.asXML());
      assertEquals("<xmlns:c,f  Xj`ayl}NUa[ xmlns:c,f  Xj`ayl}NUa[=\"xmlns:c,f  Xj`ayl}NUa[\"/>", dOMElement1.asXML());
  }

  @Test
  public void test76()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      DOMElement dOMElement0 = new DOMElement("");
      DOMElement dOMElement1 = (DOMElement)dOMElement0.addAttribute("", "");
      xMLWriter0.write((Element) dOMElement1);
      assertEquals("< =\"\"/>", dOMElement0.asXML());
      assertEquals("< =\"\"/>", dOMElement1.asXML());
  }

  @Test
  public void test77()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setExpandEmptyElements(true);
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      DOMElement dOMElement0 = new DOMElement("Yl13[h^Oz");
      xMLWriter0.writeElement((Element) dOMElement0);
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
      assertEquals("<Yl13[h^Oz/>", dOMElement0.asXML());
  }

  @Test
  public void test78()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter((Writer) null);
      assertNotNull(xMLWriter0);
      
      DOMElement dOMElement0 = new DOMElement("xmlns:c,f  Xj`ayl}NUa[");
      DefaultText defaultText0 = new DefaultText((Element) dOMElement0, "\n");
      // Undeclared exception!
      try {
        xMLWriter0.write((Text) defaultText0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test79()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter();
      assertNotNull(xMLWriter0);
      
      String string0 = xMLWriter0.escapeElementEntities("></");
      assertNotNull(string0);
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals("&gt;&lt;/", string0);
      assertEquals(true, xMLWriter0.isEscapeText());
      assertEquals(-1, xMLWriter0.getMaximumAllowedCharacter());
  }

  @Test
  public void test80()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      xMLWriter0.setMaximumAllowedCharacter((int) '[');
      DOMText dOMText0 = new DOMText("&#117;&#104;(&#119;&#112;JL@A &#98;&#100;&gt;Z");
      xMLWriter0.write((Text) dOMText0);
      assertEquals(91, xMLWriter0.getMaximumAllowedCharacter());
      assertEquals(true, xMLWriter0.resolveEntityRefs());
  }

  @Test
  public void test81()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter();
      assertNotNull(xMLWriter0);
      
      xMLWriter0.write("}5!ADp v7>");
      assertEquals(-1, xMLWriter0.getMaximumAllowedCharacter());
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test82()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter();
      assertNotNull(xMLWriter0);
      
      QName qName0 = QName.get("JSEG0qqKiiQ$");
      UserDataAttribute userDataAttribute0 = new UserDataAttribute(qName0);
      xMLWriter0.write((Attribute) userDataAttribute0);
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test83()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("MSG_NMTOKEN_REQUIRED_IN_ENUMERATION");
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      String string0 = xMLWriter0.escapeAttributeEntities("\n");
      assertEquals(true, xMLWriter0.isEscapeText());
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertNotNull(string0);
      assertEquals("\n", string0);
  }

  @Test
  public void test84()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      xMLWriter0.writeEscapeAttributeEntities("[R%x&fwfoJ'1!lrP1B ");
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(-1, xMLWriter0.getMaximumAllowedCharacter());
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test85()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter();
      assertNotNull(xMLWriter0);
      
      String string0 = xMLWriter0.escapeAttributeEntities("m#yd4T@l/<W");
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertNotNull(string0);
      assertEquals(true, xMLWriter0.isEscapeText());
      assertEquals(-1, xMLWriter0.getMaximumAllowedCharacter());
      assertEquals("m#yd4T@l/&lt;W", string0);
  }

  @Test
  public void test86()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      String string0 = xMLWriter0.escapeAttributeEntities("uh(wpJL@A bd>Z");
      assertEquals("uh(wpJL@A bd&gt;Z", string0);
      assertNotNull(string0);
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(-1, xMLWriter0.getMaximumAllowedCharacter());
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test87()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      DOMNamespace dOMNamespace0 = new DOMNamespace((Element) null, "4f}Y2-3sLy[M\"XuMW", "The result of the XPath expression is not a Node. It was: ");
      QName qName0 = QName.get((String) null, (Namespace) dOMNamespace0, (String) null);
      DefaultAttribute defaultAttribute0 = new DefaultAttribute(qName0, "4f}Y2-3sLy[M\"XuMW");
      xMLWriter0.setMaximumAllowedCharacter(31);
      xMLWriter0.write((Node) defaultAttribute0);
      assertEquals(31, xMLWriter0.getMaximumAllowedCharacter());
  }

  @Test
  public void test88()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      boolean boolean0 = xMLWriter0.isNamespaceDeclaration((Namespace) null);
      assertEquals(true, xMLWriter0.isEscapeText());
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(false, boolean0);
  }
}
