/*
 * This file was automatically generated by EvoSuite
 */

package org.dom4j.io;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.dom4j.Element;
import org.dom4j.ElementHandler;
import org.dom4j.io.ElementStack;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ElementStackEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ElementStack elementStack0 = new ElementStack();
      assertNotNull(elementStack0);
      
      elementStack0.clear();
      assertEquals(0, elementStack0.size());
  }

  @Test
  public void test1()  throws Throwable  {
      ElementStack elementStack0 = new ElementStack();
      assertNotNull(elementStack0);
      
      elementStack0.getCurrent();
      assertEquals(0, elementStack0.size());
  }

  @Test
  public void test2()  throws Throwable  {
      ElementStack elementStack0 = new ElementStack();
      assertNotNull(elementStack0);
      
      // Undeclared exception!
      try {
        elementStack0.containsHandler("/");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
      assertEquals(0, elementStack0.size());
  }

  @Test
  public void test3()  throws Throwable  {
      ElementStack elementStack0 = new ElementStack();
      assertNotNull(elementStack0);
      
      // Undeclared exception!
      try {
        elementStack0.addHandler("3=f>+", (ElementHandler) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
      assertEquals(0, elementStack0.size());
  }

  @Test
  public void test4()  throws Throwable  {
      ElementStack elementStack0 = new ElementStack();
      assertNotNull(elementStack0);
      
      elementStack0.getElement(0);
      assertEquals(0, elementStack0.size());
  }

  @Test
  public void test5()  throws Throwable  {
      ElementStack elementStack0 = new ElementStack();
      assertNotNull(elementStack0);
      
      int int0 = elementStack0.size();
      assertEquals(0, int0);
  }

  @Test
  public void test6()  throws Throwable  {
      ElementStack elementStack0 = new ElementStack(0);
      assertNotNull(elementStack0);
      
      // Undeclared exception!
      try {
        elementStack0.pushElement((Element) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 0
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      ElementStack elementStack0 = new ElementStack();
      assertNotNull(elementStack0);
      
      elementStack0.pushElement((Element) null);
      elementStack0.getCurrent();
      assertEquals(1, elementStack0.size());
  }

  @Test
  public void test8()  throws Throwable  {
      ElementStack elementStack0 = new ElementStack();
      assertNotNull(elementStack0);
      
      elementStack0.pushElement((Element) null);
      assertEquals(1, elementStack0.size());
      
      elementStack0.popElement();
      assertEquals(0, elementStack0.size());
  }

  @Test
  public void test9()  throws Throwable  {
      ElementStack elementStack0 = new ElementStack();
      assertNotNull(elementStack0);
      
      elementStack0.popElement();
      assertEquals(0, elementStack0.size());
  }

  @Test
  public void test10()  throws Throwable  {
      ElementStack elementStack0 = new ElementStack();
      assertNotNull(elementStack0);
      
      String string0 = elementStack0.getPath();
      assertNotNull(string0);
      
      elementStack0.removeHandler("/");
      assertEquals(0, elementStack0.size());
  }
}
