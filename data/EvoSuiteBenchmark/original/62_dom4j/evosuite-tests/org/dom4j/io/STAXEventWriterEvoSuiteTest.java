/*
 * This file was automatically generated by EvoSuite
 */

package org.dom4j.io;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
// import com.sun.xml.internal.stream.events.XMLEventFactoryImpl;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.Writer;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.util.XMLEventConsumer;
import org.dom4j.Attribute;
import org.dom4j.CDATA;
import org.dom4j.Document;
import org.dom4j.DocumentType;
import org.dom4j.Element;
import org.dom4j.Entity;
import org.dom4j.ProcessingInstruction;
import org.dom4j.io.STAXEventWriter;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class STAXEventWriterEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = false; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  //Test case number: 0
  /*
   * 3 covered goals:
   * 1 org.dom4j.io.STAXEventWriter.createEntityReference(Lorg/dom4j/Entity;)Ljavax/xml/stream/events/EntityReference;: root-Branch
   * 2 org.dom4j.io.STAXEventWriter.writeEntity(Lorg/dom4j/Entity;)V: root-Branch
   * 3 org.dom4j.io.STAXEventWriter.<init>(Ljava/io/OutputStream;)V: root-Branch
   */
  @Test
  public void test0()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1399);
      STAXEventWriter sTAXEventWriter0 = new STAXEventWriter((OutputStream) byteArrayOutputStream0);
      assertNotNull(sTAXEventWriter0);
      
      // Undeclared exception!
      try {
        sTAXEventWriter0.writeEntity((Entity) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  //Test case number: 1
  /*
   * 3 covered goals:
   * 1 org.dom4j.io.STAXEventWriter.writeElement(Lorg/dom4j/Element;)V: root-Branch
   * 2 org.dom4j.io.STAXEventWriter.<init>()V: root-Branch
   * 3 org.dom4j.io.STAXEventWriter.createStartElement(Lorg/dom4j/Element;)Ljavax/xml/stream/events/StartElement;: root-Branch
   */
  @Test
  public void test1()  throws Throwable  {
      STAXEventWriter sTAXEventWriter0 = new STAXEventWriter();
      // Undeclared exception!
      try {
        sTAXEventWriter0.writeElement((Element) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  //Test case number: 2
  /*
   * 3 covered goals:
   * 1 org.dom4j.io.STAXEventWriter.createAttribute(Lorg/dom4j/Attribute;)Ljavax/xml/stream/events/Attribute;: root-Branch
   * 2 org.dom4j.io.STAXEventWriter.writeAttribute(Lorg/dom4j/Attribute;)V: root-Branch
   * 3 org.dom4j.io.STAXEventWriter.<init>(Ljava/io/OutputStream;)V: root-Branch
   */
  @Test
  public void test2()  throws Throwable  {
      STAXEventWriter sTAXEventWriter0 = new STAXEventWriter((OutputStream) null);
      // Undeclared exception!
      try {
        sTAXEventWriter0.writeAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 org.dom4j.io.STAXEventWriter.writeDocument(Lorg/dom4j/Document;)V: root-Branch
   */
  @Test
  public void test3()  throws Throwable  {
      STAXEventWriter sTAXEventWriter0 = new STAXEventWriter();
      // Undeclared exception!
      try {
        sTAXEventWriter0.writeDocument((Document) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 org.dom4j.io.STAXEventWriter.setConsumer(Ljavax/xml/stream/util/XMLEventConsumer;)V: root-Branch
   */
  @Test
  public void test4()  throws Throwable  {
      STAXEventWriter sTAXEventWriter0 = new STAXEventWriter();
      sTAXEventWriter0.setConsumer((XMLEventConsumer) null);
  }

  //Test case number: 5
  /*
   * 2 covered goals:
   * 1 org.dom4j.io.STAXEventWriter.writeProcessingInstruction(Lorg/dom4j/ProcessingInstruction;)V: root-Branch
   * 2 org.dom4j.io.STAXEventWriter.createProcessingInstruction(Lorg/dom4j/ProcessingInstruction;)Ljavax/xml/stream/events/ProcessingInstruction;: root-Branch
   */
  @Test
  public void test5()  throws Throwable  {
      STAXEventWriter sTAXEventWriter0 = new STAXEventWriter();
      // Undeclared exception!
      try {
        sTAXEventWriter0.writeProcessingInstruction((ProcessingInstruction) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  //Test case number: 6
  /*
   * 2 covered goals:
   * 1 org.dom4j.io.STAXEventWriter.createCharacters(Lorg/dom4j/CDATA;)Ljavax/xml/stream/events/Characters;: root-Branch
   * 2 org.dom4j.io.STAXEventWriter.<init>(Ljavax/xml/stream/util/XMLEventConsumer;)V: root-Branch
   */
  @Test
  public void test6()  throws Throwable  {
      STAXEventWriter sTAXEventWriter0 = new STAXEventWriter((XMLEventConsumer) null);
      // Undeclared exception!
      try {
        sTAXEventWriter0.createCharacters((CDATA) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  //Test case number: 7
  /*
   * 2 covered goals:
   * 1 org.dom4j.io.STAXEventWriter.writeDocumentType(Lorg/dom4j/DocumentType;)V: root-Branch
   * 2 org.dom4j.io.STAXEventWriter.createDTD(Lorg/dom4j/DocumentType;)Ljavax/xml/stream/events/DTD;: root-Branch
   */
  @Test
  public void test7()  throws Throwable  {
      STAXEventWriter sTAXEventWriter0 = new STAXEventWriter();
      // Undeclared exception!
      try {
        sTAXEventWriter0.writeDocumentType((DocumentType) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  //Test case number: 8
  /*
   * 2 covered goals:
   * 1 org.dom4j.io.STAXEventWriter.getEventFactory()Ljavax/xml/stream/XMLEventFactory;: root-Branch
   * 2 org.dom4j.io.STAXEventWriter.<init>(Ljava/io/Writer;)V: root-Branch
   */
  @Test
  public void test8()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(397);
      STAXEventWriter sTAXEventWriter0 = new STAXEventWriter((Writer) charArrayWriter0);
//      XMLEventFactoryImpl xMLEventFactoryImpl0 = (XMLEventFactoryImpl)sTAXEventWriter0.getEventFactory();
//      assertNotNull(xMLEventFactoryImpl0);
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 org.dom4j.io.STAXEventWriter.<init>(Ljava/io/File;)V: root-Branch
   */
  @Test
  public void test9()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          File file0 = new File("");
          STAXEventWriter sTAXEventWriter0 = null;
          try {
            sTAXEventWriter0 = new STAXEventWriter(file0);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (\"java.io.FilePermission\" \"\" \"write\")
             * java.lang.Thread.getStackTrace(Thread.java:1567)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:165)
             * java.io.FileWriter.<init>(FileWriter.java:90)
             * org.dom4j.io.STAXEventWriter.<init>(STAXEventWriter.java:57)
             * sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             * sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
             * sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             * java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             * org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             * java.util.concurrent.FutureTask.run(FutureTask.java:166)
             * java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             * java.lang.Thread.run(Thread.java:722)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  //Test case number: 10
  /*
   * 2 covered goals:
   * 1 org.dom4j.io.STAXEventWriter.getConsumer()Ljavax/xml/stream/util/XMLEventConsumer;: root-Branch
   * 2 org.dom4j.io.STAXEventWriter.<init>()V: root-Branch
   */
  @Test
  public void test10()  throws Throwable  {
      STAXEventWriter sTAXEventWriter0 = new STAXEventWriter();
      XMLEventConsumer xMLEventConsumer0 = sTAXEventWriter0.getConsumer();
      assertNull(xMLEventConsumer0);
  }
}
