/*
 * This file was automatically generated by EvoSuite
 */

package org.dom4j.xpath;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.List;
import java.util.Map;
import org.dom4j.Element;
import org.dom4j.InvalidXPathException;
import org.dom4j.Namespace;
import org.dom4j.Node;
import org.dom4j.QName;
import org.dom4j.XPath;
import org.dom4j.XPathException;
import org.dom4j.bean.BeanAttributeList;
import org.dom4j.bean.BeanElement;
import org.dom4j.bean.BeanMetaData;
import org.dom4j.dom.DOMElement;
import org.dom4j.dom.DOMProcessingInstruction;
import org.dom4j.tree.BaseElement;
import org.dom4j.tree.DefaultComment;
import org.dom4j.tree.NamespaceStack;
import org.dom4j.util.NonLazyElement;
import org.dom4j.util.UserDataAttribute;
import org.dom4j.xpath.DefaultXPath;
import org.jaxen.FunctionContext;
import org.jaxen.SimpleVariableContext;
import org.jaxen.VariableContext;
import org.jaxen.XPathFunctionContext;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DefaultXPathEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DefaultXPath defaultXPath0 = new DefaultXPath("bTQBDP*Tk5ZGcZ");
      defaultXPath0.selectObject((Object) defaultXPath0);
      assertEquals("[XPath: bTQBDP*Tk5ZGcZ]", defaultXPath0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      DefaultXPath defaultXPath0 = new DefaultXPath("VH_bIc_\"/.5ym");
      QName qName0 = QName.get("VH_bIc_\"/.5ym", "text()");
      BeanElement beanElement0 = new BeanElement(qName0, (Object) "text()");
      Class<?> class0 = DefaultXPath.class;
      BeanMetaData beanMetaData0 = BeanMetaData.get(class0);
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0, beanMetaData0);
      // Undeclared exception!
      try {
        defaultXPath0.sort((List) beanAttributeList0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * set(int,Object) unsupported
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      DefaultXPath defaultXPath0 = new DefaultXPath("bTQBDP*Tk5ZGcZ");
      defaultXPath0.booleanValueOf((Object) "NaN");
      assertEquals("[XPath: bTQBDP*Tk5ZGcZ]", defaultXPath0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      DefaultXPath defaultXPath0 = new DefaultXPath("VH_bIc_\"/S.5ym");
      defaultXPath0.numberValueOf((Object) "VH_bIc_\"/S.5ym");
      assertEquals("[XPath: VH_bIc_\"/S.5ym]", defaultXPath0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      DefaultXPath defaultXPath0 = new DefaultXPath(".\"Z'.na9=e'");
      List<Object> list0 = defaultXPath0.selectNodes((Object) true, (XPath) defaultXPath0);
      assertNotNull(list0);
      assertEquals("[XPath: .\"Z'.na9=e']", defaultXPath0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      DefaultXPath defaultXPath0 = new DefaultXPath("VH_bIc_\"/S.5ym");
      XPathFunctionContext xPathFunctionContext0 = (XPathFunctionContext)defaultXPath0.getFunctionContext();
      defaultXPath0.setFunctionContext((FunctionContext) xPathFunctionContext0);
      assertEquals("VH_bIc_\"/S.5ym", defaultXPath0.getText());
  }

  @Test
  public void test6()  throws Throwable  {
      DefaultXPath defaultXPath0 = new DefaultXPath("processing-instruction()");
      SimpleVariableContext simpleVariableContext0 = new SimpleVariableContext();
      defaultXPath0.setVariableContext((VariableContext) simpleVariableContext0);
      assertEquals("[XPath: processing-instruction()]", defaultXPath0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      DefaultXPath defaultXPath0 = new DefaultXPath(".\"Z'.na9=e'");
      String string0 = defaultXPath0.getText();
      assertNotNull(string0);
      assertEquals("[XPath: .\"Z'.na9=e']", defaultXPath0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      DefaultXPath defaultXPath0 = new DefaultXPath("VH_bIc_\"/S.5ym");
      String string0 = defaultXPath0.toString();
      assertNotNull(string0);
      assertEquals("[XPath: VH_bIc_\"/S.5ym]", string0);
  }

  @Test
  public void test9()  throws Throwable  {
      DefaultXPath defaultXPath0 = new DefaultXPath("ncVSh3_:");
      // Undeclared exception!
      try {
        defaultXPath0.selectNodes((Object) defaultXPath0, (XPath) defaultXPath0, false);
        fail("Expecting exception: XPathException");
      } catch(XPathException e) {
        /*
         * Exception occurred evaluting XPath: ncVSh3_:. Exception: XPath expression uses unbound namespace prefix ncVSh3_
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      DefaultXPath defaultXPath0 = new DefaultXPath("processing-instruction()");
      SimpleVariableContext simpleVariableContext0 = (SimpleVariableContext)defaultXPath0.getVariableContext();
      assertNotNull(simpleVariableContext0);
      assertEquals("[XPath: processing-instruction()]", defaultXPath0.toString());
  }

  @Test
  public void test11()  throws Throwable  {
      DefaultXPath defaultXPath0 = new DefaultXPath("processing-instruction()");
      defaultXPath0.getNamespaceContext();
      assertEquals("[XPath: processing-instruction()]", defaultXPath0.toString());
  }

  @Test
  public void test12()  throws Throwable  {
      DefaultXPath defaultXPath0 = new DefaultXPath("VH_bIc_\"/S.5ym");
      NamespaceStack namespaceStack0 = new NamespaceStack();
      QName qName0 = namespaceStack0.getQName("VH_bIc_\"/S.5ym", "VH_bIc_\"/S.5ym", "VH_bIc_\"/S.5ym");
      UserDataAttribute userDataAttribute0 = new UserDataAttribute(qName0);
      Object object0 = defaultXPath0.evaluate((Object) userDataAttribute0);
      assertNotNull(object0);
      assertEquals("[XPath: VH_bIc_\"/S.5ym]", defaultXPath0.toString());
  }

  @Test
  public void test13()  throws Throwable  {
      DefaultXPath defaultXPath0 = new DefaultXPath("VH_bIc_\"/S.5ym");
      NamespaceStack namespaceStack0 = new NamespaceStack();
      defaultXPath0.selectSingleNode((Object) namespaceStack0);
      assertEquals("[XPath: VH_bIc_\"/S.5ym]", defaultXPath0.toString());
  }

  @Test
  public void test14()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      BaseElement baseElement0 = new BaseElement(".\"Z'.na9=e'", namespace0);
      BaseElement baseElement1 = (BaseElement)baseElement0.selectSingleNode(".\"Z'.na9=e'");
      assertEquals("/.\"Z'.na9=e'", baseElement1.getUniquePath());
  }

  @Test
  public void test15()  throws Throwable  {
      DefaultXPath defaultXPath0 = new DefaultXPath("bTQBDP*Tk5ZGcZ");
      // Undeclared exception!
      try {
        defaultXPath0.selectSingleNode((Object) "NaN");
        fail("Expecting exception: XPathException");
      } catch(XPathException e) {
        /*
         * Exception occurred evaluting XPath: The result of the XPath expression is not a Node. It was: NaN of type: java.lang.Double
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      DefaultXPath defaultXPath0 = new DefaultXPath(".\"Z'.na9=e'");
      defaultXPath0.sort((List) null, true);
      assertEquals("[XPath: .\"Z'.na9=e']", defaultXPath0.toString());
  }

  @Test
  public void test17()  throws Throwable  {
      DefaultComment defaultComment0 = new DefaultComment("VH_bIc_\"/.5ym");
      List<?> list0 = defaultComment0.selectNodes("VH_bIc_\"/.5ym", "VH_bIc_\"/.5ym", true);
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test18()  throws Throwable  {
      DefaultXPath defaultXPath0 = new DefaultXPath(".\"Z'.na9=e'");
      List<Object> list0 = defaultXPath0.selectNodes((Object) ".\"Z'.na9=e'", (XPath) defaultXPath0, true);
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test
  public void test19()  throws Throwable  {
      DefaultXPath defaultXPath0 = new DefaultXPath("Nor_=11");
      DOMElement dOMElement0 = new DOMElement("Nor_=11");
      boolean boolean0 = defaultXPath0.matches((Node) dOMElement0);
      assertEquals(false, boolean0);
      assertEquals("[XPath: Nor_=11]", defaultXPath0.toString());
  }

  @Test
  public void test20()  throws Throwable  {
      DefaultXPath defaultXPath0 = new DefaultXPath("bTQBDP*Tk5ZGcZ");
      Namespace namespace0 = Namespace.get("bTQBDP*Tk5ZGcZ");
      boolean boolean0 = defaultXPath0.matches((Node) namespace0);
      assertEquals("[XPath: bTQBDP*Tk5ZGcZ]", defaultXPath0.toString());
      assertEquals(true, boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      DefaultXPath defaultXPath0 = new DefaultXPath("processing-instruction()");
      NonLazyElement nonLazyElement0 = new NonLazyElement("processing-instruction()");
      Namespace namespace0 = Namespace.get("processing-instruction()");
      DOMProcessingInstruction dOMProcessingInstruction0 = new DOMProcessingInstruction((Element) nonLazyElement0, "processing-instruction()", "processing-instruction()");
      Map<String, String> map0 = dOMProcessingInstruction0.getValues();
      defaultXPath0.setNamespaceURIs(map0);
      assertEquals("[XPath: processing-instruction()]", defaultXPath0.toString());
      
      boolean boolean0 = defaultXPath0.matches((Node) namespace0);
      assertEquals(false, boolean0);
  }
}
