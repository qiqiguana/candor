/*
 * This file was automatically generated by EvoSuite
 */

package org.dom4j.tree;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import org.dom4j.tree.ConcurrentReaderHashMap;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ConcurrentReaderHashMapEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      
      boolean boolean0 = concurrentReaderHashMap_ValueIterator0.hasMoreElements();
      assertEquals(false, boolean0);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
  }

  @Test
  public void test1()  throws Throwable  {
      HashMap<Object, Map.Entry<Integer, ConcurrentReaderHashMap>> hashMap0 = new HashMap<Object, Map.Entry<Integer, ConcurrentReaderHashMap>>();
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap((Map) hashMap0);
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      
      concurrentReaderHashMap_ValueIterator0.returnValueOfNext();
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap0.capacity());
  }

  @Test
  public void test2()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertNotNull(concurrentReaderHashMap0);
      
      Enumeration<Object> enumeration0 = concurrentReaderHashMap0.keys();
      assertNotNull(enumeration0);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
  }

  @Test
  public void test3()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(1915);
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(1915);
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap(1);
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>("/cyK:KG0X", (Integer) 1769);
      concurrentReaderHashMap0.put((Object) concurrentReaderHashMap2, (Object) abstractMap_SimpleImmutableEntry0);
      concurrentReaderHashMap0.put((Object) concurrentReaderHashMap1, (Object) "{}");
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(2048, concurrentReaderHashMap1.capacity());
  }

  @Test
  public void test4()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertNotNull(concurrentReaderHashMap0);
      
      int int0 = concurrentReaderHashMap0.capacity();
      assertEquals(32, int0);
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
  }

  @Test
  public void test5()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertNotNull(concurrentReaderHashMap0);
      
      Enumeration<Object> enumeration0 = concurrentReaderHashMap0.elements();
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertNotNull(enumeration0);
  }

  @Test
  public void test6()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(134);
      assertNotNull(concurrentReaderHashMap0);
      
      float float0 = concurrentReaderHashMap0.loadFactor();
      assertEquals(0.75F, float0, 0.01F);
      assertEquals(256, concurrentReaderHashMap0.capacity());
  }

  @Test
  public void test7()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertNotNull(concurrentReaderHashMap0);
      
      Object object0 = new Object();
      concurrentReaderHashMap0.put(object0, object0);
      assertEquals(1, concurrentReaderHashMap0.size());
      
      boolean boolean0 = concurrentReaderHashMap0.containsKey(object0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      HashMap<Object, Map.Entry<Integer, ConcurrentReaderHashMap>> hashMap0 = new HashMap<Object, Map.Entry<Integer, ConcurrentReaderHashMap>>();
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap((Map) hashMap0);
      assertNotNull(concurrentReaderHashMap0);
      
      AbstractMap.SimpleEntry<Object, ConcurrentReaderHashMap> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, ConcurrentReaderHashMap>((Object) null, concurrentReaderHashMap0);
      boolean boolean0 = concurrentReaderHashMap0.contains((Object) abstractMap_SimpleEntry0);
      assertEquals(16, concurrentReaderHashMap0.capacity());
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertNotNull(concurrentReaderHashMap0);
      
      int int0 = concurrentReaderHashMap0.size();
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, int0);
      assertEquals(32, concurrentReaderHashMap0.capacity());
  }

  @Test
  public void test10()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap.KeyIterator concurrentReaderHashMap_KeyIterator0 = concurrentReaderHashMap0.new KeyIterator();
      assertNotNull(concurrentReaderHashMap_KeyIterator0);
      
      // Undeclared exception!
      try {
        concurrentReaderHashMap_KeyIterator0.nextElement();
        fail("Expecting exception: NoSuchElementException");
      } catch(NoSuchElementException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(1915);
      concurrentReaderHashMap0.put((Object) concurrentReaderHashMap1, (Object) concurrentReaderHashMap1);
      assertEquals(false, concurrentReaderHashMap0.isEmpty());
      
      AbstractMap.SimpleImmutableEntry<ConcurrentReaderHashMap, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<ConcurrentReaderHashMap, Integer>(concurrentReaderHashMap0, (Integer) 1915);
      concurrentReaderHashMap0.remove((Object) abstractMap_SimpleImmutableEntry0);
      assertEquals(32, concurrentReaderHashMap0.capacity());
  }

  @Test
  public void test12()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = new ConcurrentReaderHashMap.Entry(0, (Object) "{}", (Object) concurrentReaderHashMap0, (ConcurrentReaderHashMap.Entry) null);
      String string0 = concurrentReaderHashMap_Entry0.toString();
      assertNotNull(string0);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals("{}={}", string0);
  }

  @Test
  public void test13()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = new ConcurrentReaderHashMap.Entry(0, (Object) "{}", (Object) concurrentReaderHashMap0, (ConcurrentReaderHashMap.Entry) null);
      AbstractMap.SimpleEntry<ConcurrentReaderHashMap, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<ConcurrentReaderHashMap, Integer>((Map.Entry<? extends ConcurrentReaderHashMap, ? extends Integer>) concurrentReaderHashMap_Entry0);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals("{}={}", abstractMap_SimpleEntry0.toString());
  }

  @Test
  public void test14()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertNotNull(concurrentReaderHashMap0);
      
      concurrentReaderHashMap0.sput((Object) null, (Object) null, 418);
      concurrentReaderHashMap0.sput((Object) concurrentReaderHashMap0, (Object) null, 418);
      assertEquals(false, concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
  }

  @Test
  public void test15()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(1915);
      assertNotNull(concurrentReaderHashMap0);
      
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>("/cyK:KG0X", (Integer) 1769);
      concurrentReaderHashMap0.put((Object) concurrentReaderHashMap0, (Object) abstractMap_SimpleImmutableEntry0);
      assertEquals(1, concurrentReaderHashMap0.size());
      
      boolean boolean0 = concurrentReaderHashMap0.isEmpty();
      assertEquals(false, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertNotNull(concurrentReaderHashMap0);
      
      boolean boolean0 = concurrentReaderHashMap0.isEmpty();
      assertEquals(true, boolean0);
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
  }

  @Test
  public void test17()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(134);
      assertNotNull(concurrentReaderHashMap0);
      
      boolean boolean0 = concurrentReaderHashMap0.containsKey((Object) "I]l>gal Load factor: =java.lang.Object@323443fe");
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(false, boolean0);
      assertEquals(256, concurrentReaderHashMap0.capacity());
  }

  @Test
  public void test18()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap((Map) hashMap0);
      assertNotNull(concurrentReaderHashMap0);
      
      concurrentReaderHashMap0.sput((Object) null, (Object) null, (-416));
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("", "");
      boolean boolean0 = concurrentReaderHashMap0.findAndRemoveEntry((Map.Entry) abstractMap_SimpleEntry0);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(false, boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap((Map) hashMap0);
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.clone();
      concurrentReaderHashMap0.put((Object) concurrentReaderHashMap1, (Object) concurrentReaderHashMap1);
      assertEquals(false, concurrentReaderHashMap0.isEmpty());
      
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("", "");
      concurrentReaderHashMap0.findAndRemoveEntry((Map.Entry) abstractMap_SimpleEntry0);
      assertEquals("{{}={}}", concurrentReaderHashMap0.toString());
  }

  @Test
  public void test20()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertNotNull(concurrentReaderHashMap0);
      
      // Undeclared exception!
      try {
        concurrentReaderHashMap0.put((Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test21()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("", (Object) "");
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap((Map) hashMap0);
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.clone();
      concurrentReaderHashMap0.put((Object) concurrentReaderHashMap1, (Object) concurrentReaderHashMap1);
      assertEquals(2, concurrentReaderHashMap0.size());
      
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("", "");
      boolean boolean0 = concurrentReaderHashMap0.findAndRemoveEntry((Map.Entry) abstractMap_SimpleEntry0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(0);
      assertNotNull(concurrentReaderHashMap0);
      
      concurrentReaderHashMap0.put((Object) concurrentReaderHashMap0, (Object) concurrentReaderHashMap0);
      Object object0 = new Object();
      concurrentReaderHashMap0.put((Object) "{}", object0);
      concurrentReaderHashMap0.put(object0, object0);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(3, concurrentReaderHashMap0.size());
  }

  @Test
  public void test23()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertNotNull(concurrentReaderHashMap0);
      
      concurrentReaderHashMap0.sput((Object) null, (Object) null, 1915);
      concurrentReaderHashMap0.sput((Object) null, (Object) null, 1915);
      assertEquals(false, concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
  }

  @Test
  public void test24()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap((Map) hashMap0);
      ConcurrentReaderHashMap.KeyIterator concurrentReaderHashMap_KeyIterator0 = concurrentReaderHashMap0.new KeyIterator();
      ConcurrentReaderHashMap concurrentReaderHashMap1 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.clone();
      concurrentReaderHashMap0.put((Object) concurrentReaderHashMap1, (Object) concurrentReaderHashMap1);
      concurrentReaderHashMap0.sput((Object) null, (Object) null, (-416));
      concurrentReaderHashMap_KeyIterator0.nextElement();
      concurrentReaderHashMap_KeyIterator0.remove();
  }

  @Test
  public void test25()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = hashMap0.put("", (Object) "");
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap((Map) hashMap0);
      assertNotNull(concurrentReaderHashMap0);
      
      concurrentReaderHashMap0.sremove(object0, 1168);
      assertEquals(16, concurrentReaderHashMap0.capacity());
      assertEquals(1, concurrentReaderHashMap0.size());
  }

  @Test
  public void test26()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap((Map) hashMap0);
      assertNotNull(concurrentReaderHashMap0);
      
      // Undeclared exception!
      try {
        concurrentReaderHashMap0.containsValue((Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test27()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(134);
      assertNotNull(concurrentReaderHashMap0);
      
      concurrentReaderHashMap0.put((Object) concurrentReaderHashMap0, (Object) concurrentReaderHashMap0);
      assertEquals(1, concurrentReaderHashMap0.size());
      
      Object object0 = new Object();
      boolean boolean0 = concurrentReaderHashMap0.containsValue(object0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test28()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap((Map) hashMap0);
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.clone();
      concurrentReaderHashMap0.put((Object) concurrentReaderHashMap1, (Object) concurrentReaderHashMap1);
      assertEquals(1, concurrentReaderHashMap0.size());
      
      boolean boolean0 = concurrentReaderHashMap0.containsValue((Object) concurrentReaderHashMap1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test29()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertNotNull(concurrentReaderHashMap0);
      
      concurrentReaderHashMap0.put((Object) concurrentReaderHashMap0, (Object) concurrentReaderHashMap0);
      assertEquals(1, concurrentReaderHashMap0.size());
      
      concurrentReaderHashMap0.clear();
      assertEquals(32, concurrentReaderHashMap0.capacity());
  }

  @Test
  public void test30()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertNotNull(concurrentReaderHashMap0);
      
      Set<Object> set0 = concurrentReaderHashMap0.keySet();
      Set<Object> set1 = concurrentReaderHashMap0.keySet();
      assertNotNull(set1);
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertSame(set1, set0);
  }

  @Test
  public void test31()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(0);
      assertNotNull(concurrentReaderHashMap0);
      
      Collection<Object> collection0 = concurrentReaderHashMap0.values();
      Collection<Object> collection1 = concurrentReaderHashMap0.values();
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertSame(collection1, collection0);
      assertNotNull(collection1);
  }

  @Test
  public void test32()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertNotNull(concurrentReaderHashMap0);
      
      Object object0 = new Object();
      concurrentReaderHashMap0.put(object0, object0);
      assertEquals(false, concurrentReaderHashMap0.isEmpty());
      
      AbstractMap.SimpleEntry<Object, ConcurrentReaderHashMap> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, ConcurrentReaderHashMap>(object0, concurrentReaderHashMap0);
      boolean boolean0 = concurrentReaderHashMap0.findAndRemoveEntry((Map.Entry) abstractMap_SimpleEntry0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test33()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(134);
      assertNotNull(concurrentReaderHashMap0);
      
      Object object0 = concurrentReaderHashMap0.put((Object) concurrentReaderHashMap0, (Object) concurrentReaderHashMap0);
      assertEquals(1, concurrentReaderHashMap0.size());
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = new ConcurrentReaderHashMap.Entry((-124), (Object) "I]l>gal Load factor: ", object0, (ConcurrentReaderHashMap.Entry) null);
      concurrentReaderHashMap_Entry0.setValue((Object) "I]l>gal Load factor: ");
      assertEquals(256, concurrentReaderHashMap0.capacity());
  }

  @Test
  public void test34()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(0);
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = new ConcurrentReaderHashMap.Entry(0, (Object) concurrentReaderHashMap0, (Object) null, (ConcurrentReaderHashMap.Entry) null);
      // Undeclared exception!
      try {
        concurrentReaderHashMap_Entry0.setValue((Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test35()  throws Throwable  {
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = new ConcurrentReaderHashMap.Entry(1915, (Object) "{}", (Object) null, (ConcurrentReaderHashMap.Entry) null);
      AbstractMap.SimpleEntry<Map.Entry<ConcurrentReaderHashMap, String>, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Map.Entry<ConcurrentReaderHashMap, String>, String>((Map.Entry<ConcurrentReaderHashMap, String>) null, "{}");
      boolean boolean0 = concurrentReaderHashMap_Entry0.equals((Object) abstractMap_SimpleEntry0);
      assertEquals("{}=null", concurrentReaderHashMap_Entry0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test36()  throws Throwable  {
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = new ConcurrentReaderHashMap.Entry(1915, (Object) "{}", (Object) null, (ConcurrentReaderHashMap.Entry) null);
      boolean boolean0 = concurrentReaderHashMap_Entry0.equals((Object) null);
      assertEquals("{}=null", concurrentReaderHashMap_Entry0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test37()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = new ConcurrentReaderHashMap.Entry(1915, (Object) "{}", (Object) "{}", (ConcurrentReaderHashMap.Entry) null);
      AbstractMap.SimpleEntry<String, ConcurrentReaderHashMap> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, ConcurrentReaderHashMap>("{}", concurrentReaderHashMap0);
      boolean boolean0 = concurrentReaderHashMap_Entry0.equals((Object) abstractMap_SimpleEntry0);
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(false, boolean0);
  }

  @Test
  public void test38()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      
      // Undeclared exception!
      try {
        concurrentReaderHashMap_ValueIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
      }
  }
}
