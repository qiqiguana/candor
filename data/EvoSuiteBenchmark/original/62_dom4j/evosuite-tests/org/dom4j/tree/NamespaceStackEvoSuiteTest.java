/*
 * This file was automatically generated by EvoSuite
 */

package org.dom4j.tree;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Map;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.tree.NamespaceStack;
import org.dom4j.util.IndexedElement;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class NamespaceStackEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      // Undeclared exception!
      try {
        namespaceStack0.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.clear();
      assertEquals(0, namespaceStack0.size());
  }

  @Test
  public void test2()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      DefaultDocumentFactory defaultDocumentFactory0 = (DefaultDocumentFactory)namespaceStack0.getDocumentFactory();
      namespaceStack0.setDocumentFactory((DocumentFactory) defaultDocumentFactory0);
      assertEquals(0, namespaceStack0.size());
  }

  @Test
  public void test3()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      String string0 = namespaceStack0.toString();
      assertNotNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      // Undeclared exception!
      try {
        namespaceStack0.getNamespace((-33));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      int int0 = namespaceStack0.size();
      assertEquals(0, int0);
  }

  @Test
  public void test6()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      Namespace namespace0 = namespaceStack0.getNamespaceForPrefix((String) null);
      assertNull(namespace0);
  }

  @Test
  public void test7()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack0 = new NamespaceStack((DocumentFactory) defaultDocumentFactory0);
      QName qName0 = namespaceStack0.getQName("Qts;jq:pu", "", "Qts;jq:pu");
      IndexedElement indexedElement0 = new IndexedElement(qName0);
      Namespace namespace0 = indexedElement0.getNamespace();
      namespaceStack0.push("", "");
      assertEquals(1, namespaceStack0.size());
      
      boolean boolean0 = namespaceStack0.contains(namespace0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      String string0 = namespaceStack0.getURI("<Ih+fqv<a");
      assertNull(string0);
  }

  @Test
  public void test9()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.push("", "");
      namespaceStack0.getURI("");
      assertEquals(1, namespaceStack0.size());
  }

  @Test
  public void test10()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack0 = new NamespaceStack((DocumentFactory) defaultDocumentFactory0);
      Namespace namespace0 = Namespace.get("");
      boolean boolean0 = namespaceStack0.contains(namespace0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      Namespace namespace0 = namespaceStack0.addNamespace("Z3 pVi-A%Ahr-Q", "Z3 pVi-A%Ahr-Q");
      namespaceStack0.addNamespace("Z3 pVi-A%Ahr-Q", "?I')1!(2W");
      boolean boolean0 = namespaceStack0.contains(namespace0);
      assertEquals(2, namespaceStack0.size());
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      QName qName0 = namespaceStack0.getQName("", (String) null, "<Ih+fqv<a");
      assertEquals("", qName0.getNamespaceURI());
      assertEquals("<Ih+fqv<a", qName0.getQualifiedName());
      assertNotNull(qName0);
  }

  @Test
  public void test13()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      QName qName0 = namespaceStack0.getQName("<Ih+fqv<a", "", (String) null);
      assertEquals("", qName0.getQualifiedName());
      assertEquals("<Ih+fqv<a", qName0.getNamespaceURI());
      assertNotNull(qName0);
  }

  @Test
  public void test14()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      QName qName0 = namespaceStack0.getQName((String) null, " Nested exception: ", " Nested exception: ");
      assertEquals("", qName0.getNamespaceURI());
      assertEquals(" Nested exception: Nested exception: ", qName0.getQualifiedName());
      assertNotNull(qName0);
  }

  @Test
  public void test15()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.getAttributeQName("", "", (String) null);
      QName qName0 = namespaceStack0.getAttributeQName("", "", "");
      assertEquals("", qName0.getNamespaceURI());
  }

  @Test
  public void test16()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      QName qName0 = namespaceStack0.getAttributeQName((String) null, (String) null, " Nested exception: ");
      assertEquals("", qName0.getNamespaceURI());
      assertNotNull(qName0);
      assertEquals(" Nested exception: Nested exception: ", qName0.getQualifiedName());
  }

  @Test
  public void test17()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      QName qName0 = namespaceStack0.getAttributeQName("FomFe>U#", "FomFe>U#", (String) null);
      assertNotNull(qName0);
      assertEquals("FomFe>U#", qName0.getQualifiedName());
  }

  @Test
  public void test18()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.push("FomFe>U#", (String) null);
      assertEquals(1, namespaceStack0.size());
  }

  @Test
  public void test19()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.push("FAY@aLq= ", "G(ht@");
      namespaceStack0.pop("G(ht@");
      assertEquals(1, namespaceStack0.size());
  }

  @Test
  public void test20()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack0 = new NamespaceStack((DocumentFactory) defaultDocumentFactory0);
      Namespace namespace0 = Namespace.get("");
      namespaceStack0.push("", "");
      boolean boolean0 = namespaceStack0.contains(namespace0);
      assertEquals(1, namespaceStack0.size());
      assertEquals(true, boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      IndexedElement indexedElement0 = new IndexedElement((String) null);
      Namespace namespace0 = indexedElement0.getNamespaceForPrefix("");
      QName qName0 = namespaceStack0.pushQName("<Ih+fqv<a", "<Ih+fqv<a", namespace0, (String) null);
      assertNotNull(qName0);
      assertEquals("<Ih+fqv<a", qName0.getName());
  }

  @Test
  public void test22()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      namespaceStack0.push(namespace0);
      namespaceStack0.findDefaultNamespace();
      assertEquals(1, namespaceStack0.size());
  }

  @Test
  public void test23()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.push("FAY@aLq= ", "G(ht@");
      namespaceStack0.findDefaultNamespace();
      assertEquals(1, namespaceStack0.size());
  }

  @Test
  public void test24()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack0 = new NamespaceStack((DocumentFactory) defaultDocumentFactory0);
      namespaceStack0.push("", "");
      namespaceStack0.getAttributeQName("Qts;jq:pu", "", "Qts;jq:pu");
      assertEquals(1, namespaceStack0.size());
  }

  @Test
  public void test25()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      namespaceStack0.push(namespace0);
      namespaceStack0.getAttributeQName("", "", (String) null);
      namespaceStack0.addNamespace("", "");
      namespaceStack0.pop((String) null);
      Map<Object, Object> map0 = namespaceStack0.getNamespaceCache();
      assertEquals(1, namespaceStack0.size());
      assertEquals(1, map0.size());
  }
}
