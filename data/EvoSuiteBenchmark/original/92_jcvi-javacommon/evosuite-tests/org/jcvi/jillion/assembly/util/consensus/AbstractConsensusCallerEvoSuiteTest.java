/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.assembly.util.consensus;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Map;
import org.jcvi.jillion.assembly.util.Slice;
import org.jcvi.jillion.assembly.util.consensus.ConicConsensusCaller;
import org.jcvi.jillion.assembly.util.consensus.ConsensusResult;
import org.jcvi.jillion.assembly.util.consensus.NoAmbiguityConsensusCaller;
import org.jcvi.jillion.core.qual.PhredQuality;
import org.jcvi.jillion.core.residue.nt.Nucleotide;
import org.jcvi.jillion.internal.assembly.util.CompactedSlice;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class AbstractConsensusCallerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ConicConsensusCaller conicConsensusCaller0 = new ConicConsensusCaller((PhredQuality) null);
      PhredQuality phredQuality0 = conicConsensusCaller0.getHighQualityThreshold();
      assertNull(phredQuality0);
  }

  @Test
  public void test1()  throws Throwable  {
      ConicConsensusCaller conicConsensusCaller0 = new ConicConsensusCaller((PhredQuality) null);
      CompactedSlice compactedSlice0 = CompactedSlice.EMPTY;
      ConsensusResult consensusResult0 = conicConsensusCaller0.callConsensus((Slice) compactedSlice0);
      assertEquals(0, consensusResult0.getConsensusQuality());
  }

  @Test
  public void test2()  throws Throwable  {
      CompactedSlice compactedSlice0 = CompactedSlice.EMPTY;
      NoAmbiguityConsensusCaller noAmbiguityConsensusCaller0 = new NoAmbiguityConsensusCaller((PhredQuality) null);
      Map<Nucleotide, Integer> map0 = noAmbiguityConsensusCaller0.generateBasecallHistogramMap((Slice) compactedSlice0);
      assertNotNull(map0);
      assertEquals(0, map0.size());
  }

  @Test
  public void test3()  throws Throwable  {
      ConicConsensusCaller conicConsensusCaller0 = new ConicConsensusCaller((PhredQuality) null);
      CompactedSlice compactedSlice0 = CompactedSlice.EMPTY;
      ConsensusResult consensusResult0 = conicConsensusCaller0.callConsensusWithCoverage((Slice) compactedSlice0);
      assertEquals(0, consensusResult0.getConsensusQuality());
      assertNotNull(consensusResult0);
  }
}
