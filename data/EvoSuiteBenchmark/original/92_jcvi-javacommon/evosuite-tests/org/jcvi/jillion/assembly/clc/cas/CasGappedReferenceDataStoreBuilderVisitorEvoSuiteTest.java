/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.assembly.clc.cas;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.File;
import org.jcvi.jillion.assembly.clc.cas.CasContigPair;
import org.jcvi.jillion.assembly.clc.cas.CasFileInfo;
import org.jcvi.jillion.assembly.clc.cas.CasFileVisitor;
import org.jcvi.jillion.assembly.clc.cas.CasGappedReferenceDataStore;
import org.jcvi.jillion.assembly.clc.cas.CasGappedReferenceDataStoreBuilderVisitor;
import org.jcvi.jillion.assembly.clc.cas.CasMatchVisitor;
import org.jcvi.jillion.assembly.clc.cas.CasReferenceDescription;
import org.jcvi.jillion.assembly.clc.cas.CasScoringScheme;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class CasGappedReferenceDataStoreBuilderVisitorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      CasGappedReferenceDataStoreBuilderVisitor.Insertion casGappedReferenceDataStoreBuilderVisitor_Insertion0 = new CasGappedReferenceDataStoreBuilderVisitor.Insertion((-1531L));
      long long0 = casGappedReferenceDataStoreBuilderVisitor_Insertion0.getSize();
      assertEquals((-1531L), long0);
  }

  @Test
  public void test1()  throws Throwable  {
      CasGappedReferenceDataStoreBuilderVisitor casGappedReferenceDataStoreBuilderVisitor0 = new CasGappedReferenceDataStoreBuilderVisitor((File) null);
      String string0 = casGappedReferenceDataStoreBuilderVisitor0.createGapStringOf(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      CasGappedReferenceDataStoreBuilderVisitor casGappedReferenceDataStoreBuilderVisitor0 = new CasGappedReferenceDataStoreBuilderVisitor((File) null);
      casGappedReferenceDataStoreBuilderVisitor0.visitNumberOfReadFiles((-1531L));
  }

  @Test
  public void test3()  throws Throwable  {
      CasGappedReferenceDataStoreBuilderVisitor casGappedReferenceDataStoreBuilderVisitor0 = new CasGappedReferenceDataStoreBuilderVisitor((File) null);
      casGappedReferenceDataStoreBuilderVisitor0.visitAssemblyProgramInfo("LI`^6tin$&[(9p2$", "LI`^6tin$&[(9p2$", "LI`^6tin$&[(9p2$");
  }

  @Test
  public void test4()  throws Throwable  {
      File file0 = new File("cTX${ i<rHj");
      CasGappedReferenceDataStoreBuilderVisitor casGappedReferenceDataStoreBuilderVisitor0 = new CasGappedReferenceDataStoreBuilderVisitor(file0);
      casGappedReferenceDataStoreBuilderVisitor0.halted();
      // Undeclared exception!
      try {
        casGappedReferenceDataStoreBuilderVisitor0.build();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * visiting was halted; can not build datastore
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      File file0 = new File("cTX${ i<rHj");
      CasGappedReferenceDataStoreBuilderVisitor casGappedReferenceDataStoreBuilderVisitor0 = new CasGappedReferenceDataStoreBuilderVisitor(file0);
      casGappedReferenceDataStoreBuilderVisitor0.visitReferenceDescription((CasReferenceDescription) null);
  }

  @Test
  public void test6()  throws Throwable  {
      File file0 = new File("cTX${ i<rHj");
      CasGappedReferenceDataStoreBuilderVisitor casGappedReferenceDataStoreBuilderVisitor0 = new CasGappedReferenceDataStoreBuilderVisitor(file0);
      casGappedReferenceDataStoreBuilderVisitor0.visitReadFileInfo((CasFileInfo) null);
  }

  @Test
  public void test7()  throws Throwable  {
      File file0 = new File("<", "<");
      CasGappedReferenceDataStoreBuilderVisitor casGappedReferenceDataStoreBuilderVisitor0 = new CasGappedReferenceDataStoreBuilderVisitor(file0);
      casGappedReferenceDataStoreBuilderVisitor0.visitMetaData(587L, 587L);
  }

  @Test
  public void test8()  throws Throwable  {
      CasGappedReferenceDataStoreBuilderVisitor casGappedReferenceDataStoreBuilderVisitor0 = new CasGappedReferenceDataStoreBuilderVisitor((File) null);
      casGappedReferenceDataStoreBuilderVisitor0.visitScoringScheme((CasScoringScheme) null);
  }

  @Test
  public void test9()  throws Throwable  {
      CasGappedReferenceDataStoreBuilderVisitor casGappedReferenceDataStoreBuilderVisitor0 = new CasGappedReferenceDataStoreBuilderVisitor((File) null);
      CasMatchVisitor casMatchVisitor0 = casGappedReferenceDataStoreBuilderVisitor0.visitMatches((CasFileVisitor.CasVisitorCallback) null);
      assertNotNull(casMatchVisitor0);
  }

  @Test
  public void test10()  throws Throwable  {
      File file0 = new File("", "");
      CasGappedReferenceDataStoreBuilderVisitor casGappedReferenceDataStoreBuilderVisitor0 = new CasGappedReferenceDataStoreBuilderVisitor(file0);
      casGappedReferenceDataStoreBuilderVisitor0.visitContigPair((CasContigPair) null);
  }

  @Test
  public void test11()  throws Throwable  {
      CasGappedReferenceDataStoreBuilderVisitor casGappedReferenceDataStoreBuilderVisitor0 = new CasGappedReferenceDataStoreBuilderVisitor((File) null);
      casGappedReferenceDataStoreBuilderVisitor0.visitNumberOfReferenceFiles((-1531L));
  }

  @Test
  public void test12()  throws Throwable  {
      CasGappedReferenceDataStoreBuilderVisitor casGappedReferenceDataStoreBuilderVisitor0 = new CasGappedReferenceDataStoreBuilderVisitor((File) null);
      casGappedReferenceDataStoreBuilderVisitor0.visitEnd();
      CasGappedReferenceDataStore casGappedReferenceDataStore0 = casGappedReferenceDataStoreBuilderVisitor0.build();
      assertEquals(false, casGappedReferenceDataStore0.isClosed());
  }

  @Test
  public void test13()  throws Throwable  {
      CasGappedReferenceDataStoreBuilderVisitor casGappedReferenceDataStoreBuilderVisitor0 = new CasGappedReferenceDataStoreBuilderVisitor((File) null);
      casGappedReferenceDataStoreBuilderVisitor0.visitEnd();
      // Undeclared exception!
      try {
        casGappedReferenceDataStoreBuilderVisitor0.visitReferenceFileInfo((CasFileInfo) null);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * should only parse cas once
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      CasGappedReferenceDataStoreBuilderVisitor casGappedReferenceDataStoreBuilderVisitor0 = new CasGappedReferenceDataStoreBuilderVisitor((File) null);
      // Undeclared exception!
      try {
        casGappedReferenceDataStoreBuilderVisitor0.build();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * have not yet completly visited the cas to build the datastore
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      CasGappedReferenceDataStoreBuilderVisitor.Insertion casGappedReferenceDataStoreBuilderVisitor_Insertion0 = new CasGappedReferenceDataStoreBuilderVisitor.Insertion((-1531L));
      casGappedReferenceDataStoreBuilderVisitor_Insertion0.updateSize((-1531L));
      assertEquals((-1531L), casGappedReferenceDataStoreBuilderVisitor_Insertion0.getSize());
  }

  @Test
  public void test16()  throws Throwable  {
      CasGappedReferenceDataStoreBuilderVisitor.Insertion casGappedReferenceDataStoreBuilderVisitor_Insertion0 = new CasGappedReferenceDataStoreBuilderVisitor.Insertion((-1531L));
      casGappedReferenceDataStoreBuilderVisitor_Insertion0.updateSize((long) 0);
      assertEquals(0L, casGappedReferenceDataStoreBuilderVisitor_Insertion0.getSize());
  }
}
