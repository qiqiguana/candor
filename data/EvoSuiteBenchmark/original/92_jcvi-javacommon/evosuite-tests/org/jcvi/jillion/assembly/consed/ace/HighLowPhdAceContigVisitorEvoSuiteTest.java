/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.assembly.consed.ace;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Map;
import org.jcvi.jillion.assembly.consed.ace.AceContigReadVisitor;
import org.jcvi.jillion.assembly.consed.ace.HighLowPhdAceContigVisitor;
import org.jcvi.jillion.assembly.consed.phd.Phd;
import org.jcvi.jillion.core.Direction;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class HighLowPhdAceContigVisitorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      HighLowPhdAceContigVisitor highLowPhdAceContigVisitor0 = new HighLowPhdAceContigVisitor(18, 18, 2);
      AceContigReadVisitor aceContigReadVisitor0 = highLowPhdAceContigVisitor0.visitBeginRead("", 18);
      assertNotNull(aceContigReadVisitor0);
  }

  @Test
  public void test1()  throws Throwable  {
      HighLowPhdAceContigVisitor highLowPhdAceContigVisitor0 = new HighLowPhdAceContigVisitor(18, 18, 2);
      Map<String, Phd> map0 = highLowPhdAceContigVisitor0.getPhds();
      assertEquals(0, map0.size());
  }

  @Test
  public void test2()  throws Throwable  {
      HighLowPhdAceContigVisitor highLowPhdAceContigVisitor0 = new HighLowPhdAceContigVisitor(18, 18, 2);
      Direction direction0 = Direction.REVERSE;
      highLowPhdAceContigVisitor0.visitAlignedReadInfo("", direction0, 18);
  }

  @Test
  public void test3()  throws Throwable  {
      HighLowPhdAceContigVisitor highLowPhdAceContigVisitor0 = null;
      try {
        highLowPhdAceContigVisitor0 = new HighLowPhdAceContigVisitor((-238));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * expected number of reads must be >=1
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      HighLowPhdAceContigVisitor highLowPhdAceContigVisitor0 = null;
      try {
        highLowPhdAceContigVisitor0 = new HighLowPhdAceContigVisitor(158, (-58), 158);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * low quality must be valid quality value : -58
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      HighLowPhdAceContigVisitor highLowPhdAceContigVisitor0 = null;
      try {
        highLowPhdAceContigVisitor0 = new HighLowPhdAceContigVisitor(328, 328, 328);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * low quality must be valid quality value : 328
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      HighLowPhdAceContigVisitor highLowPhdAceContigVisitor0 = null;
      try {
        highLowPhdAceContigVisitor0 = new HighLowPhdAceContigVisitor(7, 7, (-1121));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * high quality must be valid quality value : -1121
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      HighLowPhdAceContigVisitor highLowPhdAceContigVisitor0 = null;
      try {
        highLowPhdAceContigVisitor0 = new HighLowPhdAceContigVisitor(7, 7, 266);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * high quality must be valid quality value : 266
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      HighLowPhdAceContigVisitor highLowPhdAceContigVisitor0 = null;
      try {
        highLowPhdAceContigVisitor0 = new HighLowPhdAceContigVisitor(2);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * high quality must be higher than low quality value 15 vs 26
         */
      }
  }
}
