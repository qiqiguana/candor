/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.assembly.consed.nav;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.File;
import java.io.IOException;
import org.jcvi.jillion.assembly.consed.nav.PhdDirQualityDataStore;
import org.jcvi.jillion.assembly.consed.phd.Phd;
import org.jcvi.jillion.core.datastore.DataStoreException;
import org.jcvi.jillion.core.util.iter.StreamingIterator;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PhdDirQualityDataStoreEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      File file0 = new File("", "");
      PhdDirQualityDataStore phdDirQualityDataStore0 = new PhdDirQualityDataStore(file0);
      assertNotNull(phdDirQualityDataStore0);
      
      boolean boolean0 = phdDirQualityDataStore0.isClosed();
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      File file0 = new File("..");
      PhdDirQualityDataStore phdDirQualityDataStore0 = new PhdDirQualityDataStore(file0);
      // Undeclared exception!
      try {
        phdDirQualityDataStore0.get("..");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * could not find any phd files for ..
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      File file0 = new File("", "");
      PhdDirQualityDataStore phdDirQualityDataStore0 = new PhdDirQualityDataStore(file0);
      phdDirQualityDataStore0.close();
      assertEquals(false, phdDirQualityDataStore0.isClosed());
  }

  @Test
  public void test3()  throws Throwable  {
      File file0 = new File("", "");
      PhdDirQualityDataStore phdDirQualityDataStore0 = new PhdDirQualityDataStore(file0);
      StreamingIterator<String> streamingIterator0 = phdDirQualityDataStore0.idIterator();
      assertNull(streamingIterator0);
  }

  @Test
  public void test4()  throws Throwable  {
      File file0 = new File("xS}.lW0r;");
      File file1 = file0.getCanonicalFile();
      File file2 = file1.getParentFile();
      PhdDirQualityDataStore phdDirQualityDataStore0 = new PhdDirQualityDataStore(file2);
      StreamingIterator<Phd> streamingIterator0 = phdDirQualityDataStore0.iterator();
      assertNull(streamingIterator0);
  }

  @Test
  public void test5()  throws Throwable  {
      File file0 = new File("", "");
      PhdDirQualityDataStore phdDirQualityDataStore0 = new PhdDirQualityDataStore(file0);
      assertNotNull(phdDirQualityDataStore0);
      
      long long0 = phdDirQualityDataStore0.getNumberOfRecords();
      assertEquals(0L, long0);
  }

  @Test
  public void test6()  throws Throwable  {
      File file0 = new File("", "");
      PhdDirQualityDataStore phdDirQualityDataStore0 = new PhdDirQualityDataStore(file0);
      // Undeclared exception!
      try {
        phdDirQualityDataStore0.contains("");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
        /*
         * For input string: \"\"
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      File file0 = new File("xS}.lW0r;");
      File file1 = file0.getCanonicalFile();
      File file2 = file1.getParentFile();
      PhdDirQualityDataStore phdDirQualityDataStore0 = new PhdDirQualityDataStore(file2);
      assertNotNull(phdDirQualityDataStore0);
      
      boolean boolean0 = phdDirQualityDataStore0.contains("xS}.lW0r;");
      assertEquals(false, boolean0);
  }
}
