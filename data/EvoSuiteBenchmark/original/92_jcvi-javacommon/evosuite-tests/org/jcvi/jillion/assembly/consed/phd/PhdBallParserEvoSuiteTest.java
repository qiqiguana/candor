/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.assembly.consed.phd;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import org.jcvi.jillion.assembly.consed.phd.IndexedPhdDataStore;
import org.jcvi.jillion.assembly.consed.phd.PhdBallParser;
import org.jcvi.jillion.assembly.consed.phd.PhdBallVisitor;
import org.jcvi.jillion.assembly.consed.phd.PhdBallVisitorCallback;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PhdBallParserEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      FileDescriptor fileDescriptor0 = FileDescriptor.err;
      FileInputStream fileInputStream0 = new FileInputStream(fileDescriptor0);
      PhdBallParser phdBallParser0 = PhdBallParser.create((InputStream) fileInputStream0);
      PhdBallVisitorCallback phdBallVisitorCallback0 = phdBallParser0.createCallback((PhdBallParser.ParserState) null, (-1311L));
      assertEquals(false, phdBallVisitorCallback0.canCreateMemento());
  }

  @Test
  public void test1()  throws Throwable  {
      File file0 = new File("", "");
      PhdBallParser phdBallParser0 = PhdBallParser.create(file0);
      PhdBallVisitorCallback phdBallVisitorCallback0 = phdBallParser0.createCallback((PhdBallParser.ParserState) null, (-1496L));
      assertEquals(true, phdBallVisitorCallback0.canCreateMemento());
  }

  @Test
  public void test2()  throws Throwable  {
      FileDescriptor fileDescriptor0 = FileDescriptor.out;
      FileInputStream fileInputStream0 = new FileInputStream(fileDescriptor0);
      PhdBallParser phdBallParser0 = PhdBallParser.create((InputStream) fileInputStream0);
      IndexedPhdDataStore.SinglePhdVisitor indexedPhdDataStore_SinglePhdVisitor0 = new IndexedPhdDataStore.SinglePhdVisitor("");
      // Undeclared exception!
      try {
        phdBallParser0.accept((PhdBallVisitor) indexedPhdDataStore_SinglePhdVisitor0, (PhdBallVisitorCallback.PhdBallVisitorMemento) null);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * mementos not supported
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try {
        PhdBallParser.create((File) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * phdball can not be null
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      File file0 = new File("\u00B8\u00A6\u00FF");
      try {
        PhdBallParser.create(file0);
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
        /*
         * phdball must exist
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      File file0 = new File("", "");
      PhdBallParser phdBallParser0 = PhdBallParser.create(file0);
      IndexedPhdDataStore.SinglePhdVisitor indexedPhdDataStore_SinglePhdVisitor0 = new IndexedPhdDataStore.SinglePhdVisitor("");
      try {
        phdBallParser0.accept((PhdBallVisitor) indexedPhdDataStore_SinglePhdVisitor0);
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
        /*
         * / (Is a directory)
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      File file0 = new File("");
      File file1 = file0.getAbsoluteFile();
      PhdBallParser phdBallParser0 = PhdBallParser.create(file1);
      // Undeclared exception!
      try {
        phdBallParser0.accept((PhdBallVisitor) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * visitor can not be null
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      File file0 = new File("");
      File file1 = new File(file0, "");
      PhdBallParser phdBallParser0 = PhdBallParser.create(file1);
      IndexedPhdDataStore.SinglePhdVisitor indexedPhdDataStore_SinglePhdVisitor0 = new IndexedPhdDataStore.SinglePhdVisitor("");
      // Undeclared exception!
      try {
        phdBallParser0.accept((PhdBallVisitor) indexedPhdDataStore_SinglePhdVisitor0, (PhdBallVisitorCallback.PhdBallVisitorMemento) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * memento can not be null
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      // Undeclared exception!
      try {
        PhdBallParser.create((InputStream) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * input stream can not be null
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      FileDescriptor fileDescriptor0 = FileDescriptor.err;
      FileInputStream fileInputStream0 = new FileInputStream(fileDescriptor0);
      PhdBallParser phdBallParser0 = PhdBallParser.create((InputStream) fileInputStream0);
      IndexedPhdDataStore.SinglePhdVisitor indexedPhdDataStore_SinglePhdVisitor0 = new IndexedPhdDataStore.SinglePhdVisitor("");
      // Undeclared exception!
      try {
        phdBallParser0.accept((PhdBallVisitor) indexedPhdDataStore_SinglePhdVisitor0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * inputstream has been closed
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PhdBallParser phdBallParser0 = PhdBallParser.create((InputStream) byteArrayInputStream0);
      // Undeclared exception!
      try {
        phdBallParser0.accept((PhdBallVisitor) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * visitor can not be null
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PhdBallParser phdBallParser0 = PhdBallParser.create((InputStream) byteArrayInputStream0);
      IndexedPhdDataStore.SinglePhdVisitor indexedPhdDataStore_SinglePhdVisitor0 = new IndexedPhdDataStore.SinglePhdVisitor("I/g");
      phdBallParser0.accept((PhdBallVisitor) indexedPhdDataStore_SinglePhdVisitor0);
      assertEquals(-1, byteArrayInputStream0.read());
  }
}
