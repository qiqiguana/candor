/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.assembly.ca.frg;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.jcvi.jillion.assembly.ca.frg.DefaultLibrary;
import org.jcvi.jillion.assembly.ca.frg.Distance;
import org.jcvi.jillion.assembly.ca.frg.MateOrientation;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DefaultLibraryEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Distance distance0 = Distance.buildDistance((-1198), (-1198), (-1198), (-1198));
      MateOrientation mateOrientation0 = MateOrientation.OUTTIE;
      DefaultLibrary defaultLibrary0 = new DefaultLibrary("l0Nf'", distance0, mateOrientation0);
      assertNotNull(defaultLibrary0);
      
      int int0 = defaultLibrary0.hashCode();
      assertEquals(101248426, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      Distance distance0 = Distance.buildDistance((-1198), (-1198), (-1198), (-1198));
      MateOrientation mateOrientation0 = MateOrientation.OUTTIE;
      DefaultLibrary defaultLibrary0 = new DefaultLibrary("l0Nf'", distance0, mateOrientation0);
      String string0 = defaultLibrary0.getId();
      assertEquals("l0Nf'", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      Distance distance0 = Distance.buildDistance(1613, 1613);
      MateOrientation mateOrientation0 = MateOrientation.OUTTIE;
      DefaultLibrary defaultLibrary0 = new DefaultLibrary("DCS*<iQjH@`V%~X>9", distance0, mateOrientation0);
      MateOrientation mateOrientation1 = defaultLibrary0.getMateOrientation();
      assertEquals(2, mateOrientation1.ordinal());
  }

  @Test
  public void test3()  throws Throwable  {
      Distance distance0 = Distance.buildDistance((-1198), (-1198), (-1198), (-1198));
      MateOrientation mateOrientation0 = MateOrientation.OUTTIE;
      DefaultLibrary defaultLibrary0 = new DefaultLibrary("l0Nf'", distance0, mateOrientation0);
      Distance distance1 = defaultLibrary0.getDistance();
      assertSame(distance0, distance1);
  }

  @Test
  public void test4()  throws Throwable  {
      MateOrientation mateOrientation0 = MateOrientation.INNIE;
      DefaultLibrary defaultLibrary0 = null;
      try {
        defaultLibrary0 = new DefaultLibrary((String) null, (Distance) null, mateOrientation0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * can not have null fields
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      MateOrientation mateOrientation0 = MateOrientation.UNORIENTED;
      DefaultLibrary defaultLibrary0 = null;
      try {
        defaultLibrary0 = new DefaultLibrary("a[Sq;FunWA5", (Distance) null, mateOrientation0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * can not have null fields
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      Distance distance0 = Distance.buildDistance((-1198), (-1198), (-1198), (-1198));
      MateOrientation mateOrientation0 = MateOrientation.OUTTIE;
      DefaultLibrary defaultLibrary0 = new DefaultLibrary("l0Nf'", distance0, mateOrientation0);
      assertNotNull(defaultLibrary0);
      
      boolean boolean0 = defaultLibrary0.equals((Object) "l0Nf'");
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      Distance distance0 = Distance.buildDistance(1613, 1613);
      MateOrientation mateOrientation0 = MateOrientation.OUTTIE;
      DefaultLibrary defaultLibrary0 = new DefaultLibrary("DCS*<iQjH@`V%~X>9", distance0, mateOrientation0);
      assertNotNull(defaultLibrary0);
      
      DefaultLibrary defaultLibrary1 = new DefaultLibrary("DCS*<iQjH@`V%~X>9", distance0, mateOrientation0);
      boolean boolean0 = defaultLibrary0.equals((Object) defaultLibrary1);
      assertEquals(true, boolean0);
  }
}
