/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.internal.trace.chromat.ztr;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.jcvi.jillion.internal.trace.chromat.ztr.DefaultZTRChromatogramWriterBuilder;
import org.jcvi.jillion.internal.trace.chromat.ztr.ZtrChromatogramWriter;
import org.jcvi.jillion.internal.trace.chromat.ztr.chunk.Chunk;
import org.jcvi.jillion.internal.trace.chromat.ztr.chunk.ChunkType;
import org.jcvi.jillion.internal.trace.chromat.ztr.data.DeltaEncodedData;
import org.jcvi.jillion.internal.trace.chromat.ztr.data.ShrinkToEightBitData;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DefaultZTRChromatogramWriterBuilderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DefaultZTRChromatogramWriterBuilder defaultZTRChromatogramWriterBuilder0 = new DefaultZTRChromatogramWriterBuilder();
      ZtrChromatogramWriter ztrChromatogramWriter0 = (ZtrChromatogramWriter)defaultZTRChromatogramWriterBuilder0.build();
      assertNotNull(ztrChromatogramWriter0);
  }

  @Test
  public void test1()  throws Throwable  {
      DefaultZTRChromatogramWriterBuilder defaultZTRChromatogramWriterBuilder0 = new DefaultZTRChromatogramWriterBuilder();
      DefaultZTRChromatogramWriterBuilder.ChunkEncoderBuilder defaultZTRChromatogramWriterBuilder_ChunkEncoderBuilder0 = defaultZTRChromatogramWriterBuilder0.forConfidenceChunkEncoder();
      assertNotNull(defaultZTRChromatogramWriterBuilder_ChunkEncoderBuilder0);
  }

  @Test
  public void test2()  throws Throwable  {
      DefaultZTRChromatogramWriterBuilder defaultZTRChromatogramWriterBuilder0 = new DefaultZTRChromatogramWriterBuilder();
      DefaultZTRChromatogramWriterBuilder.ChunkEncoderBuilder defaultZTRChromatogramWriterBuilder_ChunkEncoderBuilder0 = defaultZTRChromatogramWriterBuilder0.forClipPointsChunkEncoder();
      assertNotNull(defaultZTRChromatogramWriterBuilder_ChunkEncoderBuilder0);
  }

  @Test
  public void test3()  throws Throwable  {
      DefaultZTRChromatogramWriterBuilder defaultZTRChromatogramWriterBuilder0 = new DefaultZTRChromatogramWriterBuilder();
      DefaultZTRChromatogramWriterBuilder.ChunkEncoderBuilder defaultZTRChromatogramWriterBuilder_ChunkEncoderBuilder0 = defaultZTRChromatogramWriterBuilder0.forPositionsChunkEncoder();
      assertNotNull(defaultZTRChromatogramWriterBuilder_ChunkEncoderBuilder0);
  }

  @Test
  public void test4()  throws Throwable  {
      DefaultZTRChromatogramWriterBuilder defaultZTRChromatogramWriterBuilder0 = new DefaultZTRChromatogramWriterBuilder();
      DefaultZTRChromatogramWriterBuilder.ChunkEncoderBuilder defaultZTRChromatogramWriterBuilder_ChunkEncoderBuilder0 = defaultZTRChromatogramWriterBuilder0.forBasecallChunkEncoder();
      DefaultZTRChromatogramWriterBuilder.ChunkEncoderBuilder defaultZTRChromatogramWriterBuilder_ChunkEncoderBuilder1 = defaultZTRChromatogramWriterBuilder_ChunkEncoderBuilder0.addRunLengthEncoder();
      assertSame(defaultZTRChromatogramWriterBuilder_ChunkEncoderBuilder1, defaultZTRChromatogramWriterBuilder_ChunkEncoderBuilder0);
  }

  @Test
  public void test5()  throws Throwable  {
      DefaultZTRChromatogramWriterBuilder defaultZTRChromatogramWriterBuilder0 = new DefaultZTRChromatogramWriterBuilder();
      DefaultZTRChromatogramWriterBuilder.ChunkEncoderBuilder defaultZTRChromatogramWriterBuilder_ChunkEncoderBuilder0 = defaultZTRChromatogramWriterBuilder0.forPeaksChunkEncoder();
      assertNotNull(defaultZTRChromatogramWriterBuilder_ChunkEncoderBuilder0);
  }

  @Test
  public void test6()  throws Throwable  {
      DefaultZTRChromatogramWriterBuilder defaultZTRChromatogramWriterBuilder0 = new DefaultZTRChromatogramWriterBuilder();
      DefaultZTRChromatogramWriterBuilder.ChunkEncoderBuilder defaultZTRChromatogramWriterBuilder_ChunkEncoderBuilder0 = defaultZTRChromatogramWriterBuilder0.forCommentsChunkEncoder();
      DefaultZTRChromatogramWriterBuilder.ChunkEncoderBuilder defaultZTRChromatogramWriterBuilder_ChunkEncoderBuilder1 = defaultZTRChromatogramWriterBuilder_ChunkEncoderBuilder0.addFollowEncoder();
      assertSame(defaultZTRChromatogramWriterBuilder_ChunkEncoderBuilder0, defaultZTRChromatogramWriterBuilder_ChunkEncoderBuilder1);
  }

  @Test
  public void test7()  throws Throwable  {
      Chunk chunk0 = Chunk.COMMENTS;
      ChunkType chunkType0 = ChunkType.COMMENTS;
      DefaultZTRChromatogramWriterBuilder.ChunkEncoderBuilder defaultZTRChromatogramWriterBuilder_ChunkEncoderBuilder0 = new DefaultZTRChromatogramWriterBuilder.ChunkEncoderBuilder(chunk0, chunkType0);
      DeltaEncodedData deltaEncodedData0 = DeltaEncodedData.INTEGER;
      DeltaEncodedData.Level deltaEncodedData_Level0 = DeltaEncodedData.Level.DELTA_LEVEL_2;
      DefaultZTRChromatogramWriterBuilder.ChunkEncoderBuilder defaultZTRChromatogramWriterBuilder_ChunkEncoderBuilder1 = defaultZTRChromatogramWriterBuilder_ChunkEncoderBuilder0.addDeltaEncoder(deltaEncodedData0, deltaEncodedData_Level0);
      assertSame(defaultZTRChromatogramWriterBuilder_ChunkEncoderBuilder0, defaultZTRChromatogramWriterBuilder_ChunkEncoderBuilder1);
  }

  @Test
  public void test8()  throws Throwable  {
      Chunk chunk0 = Chunk.COMMENTS;
      ChunkType chunkType0 = ChunkType.COMMENTS;
      DefaultZTRChromatogramWriterBuilder.ChunkEncoderBuilder defaultZTRChromatogramWriterBuilder_ChunkEncoderBuilder0 = new DefaultZTRChromatogramWriterBuilder.ChunkEncoderBuilder(chunk0, chunkType0);
      DefaultZTRChromatogramWriterBuilder.ChunkEncoderBuilder defaultZTRChromatogramWriterBuilder_ChunkEncoderBuilder1 = defaultZTRChromatogramWriterBuilder_ChunkEncoderBuilder0.addZLibEncoder();
      assertSame(defaultZTRChromatogramWriterBuilder_ChunkEncoderBuilder0, defaultZTRChromatogramWriterBuilder_ChunkEncoderBuilder1);
  }

  @Test
  public void test9()  throws Throwable  {
      Chunk chunk0 = Chunk.COMMENTS;
      ChunkType chunkType0 = ChunkType.COMMENTS;
      DefaultZTRChromatogramWriterBuilder.ChunkEncoderBuilder defaultZTRChromatogramWriterBuilder_ChunkEncoderBuilder0 = new DefaultZTRChromatogramWriterBuilder.ChunkEncoderBuilder(chunk0, chunkType0);
      // Undeclared exception!
      try {
        defaultZTRChromatogramWriterBuilder_ChunkEncoderBuilder0.addShrinkEncoder((ShrinkToEightBitData) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * data can not be null
         */
      }
  }
}
