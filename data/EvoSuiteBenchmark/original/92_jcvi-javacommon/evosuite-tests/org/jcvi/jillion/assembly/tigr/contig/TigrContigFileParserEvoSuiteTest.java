/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.assembly.tigr.contig;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import org.jcvi.jillion.assembly.tigr.contig.TigrContigFileParser;
import org.jcvi.jillion.assembly.tigr.contig.TigrContigFileVisitor;
import org.jcvi.jillion.internal.core.io.OpenAwareInputStream;
import org.jcvi.jillion.internal.core.io.TextLineParser;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TigrContigFileParserEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      TigrContigFileParser tigrContigFileParser0 = TigrContigFileParser.create((File) null);
      // Undeclared exception!
      try {
        tigrContigFileParser0.accept((TigrContigFileVisitor) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * name can't be null
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      TigrContigFileParser tigrContigFileParser0 = TigrContigFileParser.create((InputStream) pipedInputStream0);
      try {
        tigrContigFileParser0.getInputStream();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * inputstream is closed
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      File file0 = new File("");
      TigrContigFileParser tigrContigFileParser0 = TigrContigFileParser.create(file0);
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      TextLineParser textLineParser0 = new TextLineParser((InputStream) byteArrayInputStream0, 3L);
      // Undeclared exception!
      try {
        tigrContigFileParser0.parse((TigrContigFileVisitor) null, textLineParser0, (long) (byte) (-25));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid character \u0000 ascii value 0
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      File file0 = new File("");
      TigrContigFileParser tigrContigFileParser0 = TigrContigFileParser.create(file0);
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read(byteArray0);
      TextLineParser textLineParser0 = new TextLineParser((InputStream) byteArrayInputStream0, 3L);
      // Undeclared exception!
      try {
        tigrContigFileParser0.parse((TigrContigFileVisitor) null, textLineParser0, (long) (byte) (-25));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) (byte) (-103), (int) (byte) (-63));
      TigrContigFileParser tigrContigFileParser0 = TigrContigFileParser.create((InputStream) byteArrayInputStream0);
      OpenAwareInputStream openAwareInputStream0 = (OpenAwareInputStream)tigrContigFileParser0.getInputStream();
      assertEquals(-1, openAwareInputStream0.read());
  }
}
