/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.trace.fastq;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.charset.Charset;
import org.jcvi.jillion.trace.fastq.FastqQualityCodec;
import org.jcvi.jillion.trace.fastq.FastqRecordWriter;
import org.jcvi.jillion.trace.fastq.FastqRecordWriterBuilder;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class FastqRecordWriterBuilderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FastqRecordWriterBuilder fastqRecordWriterBuilder0 = new FastqRecordWriterBuilder((OutputStream) byteArrayOutputStream0);
      FastqRecordWriterBuilder fastqRecordWriterBuilder1 = fastqRecordWriterBuilder0.duplicateIdOnQualityDefLine();
      assertSame(fastqRecordWriterBuilder0, fastqRecordWriterBuilder1);
  }

  @Test
  public void test1()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FastqRecordWriterBuilder fastqRecordWriterBuilder0 = new FastqRecordWriterBuilder((OutputStream) byteArrayOutputStream0);
      FastqRecordWriter fastqRecordWriter0 = (FastqRecordWriter)fastqRecordWriterBuilder0.build();
      assertNotNull(fastqRecordWriter0);
  }

  @Test
  public void test2()  throws Throwable  {
      FastqRecordWriterBuilder fastqRecordWriterBuilder0 = null;
      try {
        fastqRecordWriterBuilder0 = new FastqRecordWriterBuilder((File) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      FastqRecordWriterBuilder fastqRecordWriterBuilder0 = null;
      try {
        fastqRecordWriterBuilder0 = new FastqRecordWriterBuilder((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * outputstream can not be null
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FastqRecordWriterBuilder fastqRecordWriterBuilder0 = new FastqRecordWriterBuilder((OutputStream) byteArrayOutputStream0);
      // Undeclared exception!
      try {
        fastqRecordWriterBuilder0.charset((Charset) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * charset can not be null
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FastqRecordWriterBuilder fastqRecordWriterBuilder0 = new FastqRecordWriterBuilder((OutputStream) byteArrayOutputStream0);
      FastqQualityCodec fastqQualityCodec0 = FastqQualityCodec.ILLUMINA;
      FastqRecordWriterBuilder fastqRecordWriterBuilder1 = fastqRecordWriterBuilder0.qualityCodec(fastqQualityCodec0);
      assertSame(fastqRecordWriterBuilder0, fastqRecordWriterBuilder1);
  }

  @Test
  public void test6()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FastqRecordWriterBuilder fastqRecordWriterBuilder0 = new FastqRecordWriterBuilder((OutputStream) byteArrayOutputStream0);
      FastqRecordWriterBuilder fastqRecordWriterBuilder1 = fastqRecordWriterBuilder0.basesPerLine(65580);
      assertSame(fastqRecordWriterBuilder1, fastqRecordWriterBuilder0);
  }

  @Test
  public void test7()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FastqRecordWriterBuilder fastqRecordWriterBuilder0 = new FastqRecordWriterBuilder((OutputStream) byteArrayOutputStream0);
      // Undeclared exception!
      try {
        fastqRecordWriterBuilder0.basesPerLine((-1747));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * number per line must be >=1
         */
      }
  }
}
