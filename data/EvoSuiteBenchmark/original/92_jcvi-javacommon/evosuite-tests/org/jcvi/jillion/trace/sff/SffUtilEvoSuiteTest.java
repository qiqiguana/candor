/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.trace.sff;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.jcvi.jillion.core.residue.nt.Nucleotide;
import org.jcvi.jillion.core.residue.nt.NucleotideSequence;
import org.jcvi.jillion.trace.sff.SffFlowgram;
import org.jcvi.jillion.trace.sff.SffReadHeader;
import org.jcvi.jillion.trace.sff.SffUtil;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SffUtilEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SffUtil.Linkers sffUtil_Linkers0 = SffUtil.Linkers.TITANIUM;
      NucleotideSequence nucleotideSequence0 = sffUtil_Linkers0.getReverseSequence();
      assertEquals(0, nucleotideSequence0.getNumberOfGaps());
  }

  @Test
  public void test1()  throws Throwable  {
      SffUtil.Linkers sffUtil_Linkers0 = SffUtil.Linkers.TITANIUM;
      NucleotideSequence nucleotideSequence0 = sffUtil_Linkers0.getForwardSequence();
      assertNotNull(nucleotideSequence0);
      
      int int0 = SffUtil.numberOfIntensities((Iterable<Nucleotide>) nucleotideSequence0);
      assertEquals(36, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = SffUtil.getReadDataLength(1031, 1031);
      assertEquals(5155, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      byte[] byteArray0 = SffUtil.toSffIndexOffsetValue((long) 0);
      assertNotNull(byteArray0);
  }

  @Test
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try {
        SffUtil.computeTrimRangeFor((SffFlowgram) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      float float0 = SffUtil.convertFlowgramValue((short)1994);
      assertEquals(19.94F, float0, 0.01F);
  }

  @Test
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      long long0 = SffUtil.parseSffIndexOffsetValue(byteArray0);
      assertEquals(0L, long0);
  }

  @Test
  public void test7()  throws Throwable  {
      // Undeclared exception!
      try {
        SffUtil.computeTrimRangeFor((SffReadHeader) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = SffUtil.caclulatePaddedBytes(1031);
      assertEquals(1, int0);
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = SffUtil.caclulatePaddedBytes(0);
      assertEquals(0, int0);
  }

  @Test
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try {
        SffUtil.parseSffInfoEncodedFlowgram("");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * could not parse sffinfo encoded flowgram value 
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      short short0 = SffUtil.parseSffInfoEncodedFlowgram("ZAQo3pm2.9w\"s $");
      assertEquals((short)29, short0);
  }
}
