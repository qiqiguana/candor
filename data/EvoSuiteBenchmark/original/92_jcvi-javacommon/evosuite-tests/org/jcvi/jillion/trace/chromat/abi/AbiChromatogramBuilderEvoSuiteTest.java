/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.trace.chromat.abi;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.jcvi.jillion.core.pos.PositionSequence;
import org.jcvi.jillion.core.residue.nt.Nucleotide;
import org.jcvi.jillion.core.residue.nt.NucleotideSequence;
import org.jcvi.jillion.internal.trace.chromat.abi.tag.Ab1LocalDate;
import org.jcvi.jillion.internal.trace.chromat.abi.tag.Ab1LocalTime;
import org.jcvi.jillion.internal.trace.chromat.abi.tag.ByteArrayTaggedDataRecord;
import org.jcvi.jillion.internal.trace.chromat.abi.tag.DateTaggedDataRecord;
import org.jcvi.jillion.internal.trace.chromat.abi.tag.DefaultFloatTaggedDataRecord;
import org.jcvi.jillion.internal.trace.chromat.abi.tag.DefaultPascalStringTaggedDataRecord;
import org.jcvi.jillion.internal.trace.chromat.abi.tag.DefaultTimeTaggedDataRecord;
import org.jcvi.jillion.internal.trace.chromat.abi.tag.DefaultUserDefinedTaggedDataRecord;
import org.jcvi.jillion.internal.trace.chromat.abi.tag.FloatArrayTaggedDataRecord;
import org.jcvi.jillion.internal.trace.chromat.abi.tag.IntArrayTaggedDataRecord;
import org.jcvi.jillion.internal.trace.chromat.abi.tag.ShortArrayTaggedDataRecord;
import org.jcvi.jillion.internal.trace.chromat.abi.tag.StringTaggedDataRecord;
import org.jcvi.jillion.internal.trace.chromat.abi.tag.TaggedDataName;
import org.jcvi.jillion.internal.trace.chromat.abi.tag.TaggedDataType;
import org.jcvi.jillion.internal.trace.chromat.abi.tag.TimeTaggedDataRecord;
import org.jcvi.jillion.internal.trace.chromat.abi.tag.UserDefinedTaggedDataRecord;
import org.jcvi.jillion.internal.trace.chromat.abi.tag.rate.DefaultScanRateTaggedDataType;
import org.jcvi.jillion.internal.trace.chromat.abi.tag.rate.ScanRate;
import org.jcvi.jillion.internal.trace.chromat.abi.tag.rate.ScanRateTaggedDataType;
import org.jcvi.jillion.trace.TraceDecoderException;
import org.jcvi.jillion.trace.chromat.abi.AbiChromatogramBuilder;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class AbiChromatogramBuilderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder("EJ$k4iJ-");
      short[] shortArray0 = abiChromatogramBuilder0.originalCPositions();
      AbiChromatogramBuilder abiChromatogramBuilder1 = abiChromatogramBuilder0.tPositions(shortArray0);
      assertEquals("EJ$k4iJ-", abiChromatogramBuilder1.id());
  }

  @Test
  public void test1()  throws Throwable  {
      AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder("@NgXc8_Sc0C|iQRR");
      short[] shortArray0 = abiChromatogramBuilder0.originalGPositions();
      assertNotNull(shortArray0);
  }

  @Test
  public void test2()  throws Throwable  {
      AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder("NotThymine");
      // Undeclared exception!
      try {
        abiChromatogramBuilder0.properties((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder("EJ$k4iJ-");
      short[] shortArray0 = new short[1];
      AbiChromatogramBuilder abiChromatogramBuilder1 = abiChromatogramBuilder0.originalAPositions(shortArray0);
      assertSame(abiChromatogramBuilder1, abiChromatogramBuilder0);
  }

  @Test
  public void test4()  throws Throwable  {
      AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder("NotThymine");
      short[] shortArray0 = abiChromatogramBuilder0.cPositions();
      assertNotNull(shortArray0);
  }

  @Test
  public void test5()  throws Throwable  {
      AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder("j +V7>'J[QV");
      short[] shortArray0 = new short[4];
      AbiChromatogramBuilder abiChromatogramBuilder1 = abiChromatogramBuilder0.peaks(shortArray0);
      assertEquals("j +V7>'J[QV", abiChromatogramBuilder1.id());
  }

  @Test
  public void test6()  throws Throwable  {
      AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder("EJ$k4iJ-");
      short[] shortArray0 = new short[1];
      AbiChromatogramBuilder abiChromatogramBuilder1 = abiChromatogramBuilder0.originalPeaks(shortArray0);
      assertSame(abiChromatogramBuilder1, abiChromatogramBuilder0);
  }

  @Test
  public void test7()  throws Throwable  {
      AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder("j +V7>'J[QV");
      NucleotideSequence nucleotideSequence0 = abiChromatogramBuilder0.basecalls();
      assertNull(nucleotideSequence0);
  }

  @Test
  public void test8()  throws Throwable  {
      AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder("EJ$k4iJ-");
      short[] shortArray0 = abiChromatogramBuilder0.originalAPositions();
      assertNotNull(shortArray0);
  }

  @Test
  public void test9()  throws Throwable  {
      AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder("GTyp");
      byte[] byteArray0 = new byte[7];
      AbiChromatogramBuilder abiChromatogramBuilder1 = abiChromatogramBuilder0.originalGConfidence(byteArray0);
      assertSame(abiChromatogramBuilder0, abiChromatogramBuilder1);
  }

  @Test
  public void test10()  throws Throwable  {
      AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder("");
      short[] shortArray0 = new short[10];
      AbiChromatogramBuilder abiChromatogramBuilder1 = abiChromatogramBuilder0.cPositions(shortArray0);
      assertEquals("", abiChromatogramBuilder1.id());
  }

  @Test
  public void test11()  throws Throwable  {
      AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder("GTyp");
      short[] shortArray0 = new short[10];
      AbiChromatogramBuilder abiChromatogramBuilder1 = abiChromatogramBuilder0.aPositions(shortArray0);
      assertSame(abiChromatogramBuilder0, abiChromatogramBuilder1);
  }

  @Test
  public void test12()  throws Throwable  {
      AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder("EJ$k4iJ-");
      byte[] byteArray0 = new byte[3];
      AbiChromatogramBuilder abiChromatogramBuilder1 = abiChromatogramBuilder0.tConfidence(byteArray0);
      assertSame(abiChromatogramBuilder1, abiChromatogramBuilder0);
  }

  @Test
  public void test13()  throws Throwable  {
      AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder("j +V7>'J[QV");
      AbiChromatogramBuilder abiChromatogramBuilder1 = abiChromatogramBuilder0.originalBasecalls((NucleotideSequence) null);
      assertSame(abiChromatogramBuilder0, abiChromatogramBuilder1);
  }

  @Test
  public void test14()  throws Throwable  {
      AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder("EJ$k4iJ-");
      byte[] byteArray0 = abiChromatogramBuilder0.originalGConfidence();
      AbiChromatogramBuilder abiChromatogramBuilder1 = abiChromatogramBuilder0.aConfidence(byteArray0);
      assertSame(abiChromatogramBuilder1, abiChromatogramBuilder0);
  }

  @Test
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 790, 31);
      AbiChromatogramBuilder abiChromatogramBuilder0 = null;
      try {
        abiChromatogramBuilder0 = new AbiChromatogramBuilder("%gC&%r]iJ%[M?j;$x8", (InputStream) byteArrayInputStream0);
        fail("Expecting exception: TraceDecoderException");
      } catch(TraceDecoderException e) {
        /*
         * could not read magic number
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder("h)foc");
      Map<String, String> map0 = abiChromatogramBuilder0.properties();
      assertNull(map0);
  }

  @Test
  public void test17()  throws Throwable  {
      AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder("uc&$M)7y/e[");
      short[] shortArray0 = abiChromatogramBuilder0.gPositions();
      assertNotNull(shortArray0);
  }

  @Test
  public void test18()  throws Throwable  {
      AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder("EJ$k4iJ-");
      byte[] byteArray0 = abiChromatogramBuilder0.gConfidence();
      assertNotNull(byteArray0);
  }

  @Test
  public void test19()  throws Throwable  {
      AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder("v@- }j7Y");
      byte[] byteArray0 = abiChromatogramBuilder0.tConfidence();
      assertNotNull(byteArray0);
  }

  @Test
  public void test20()  throws Throwable  {
      AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder("EJ$k4iJ-");
      byte[] byteArray0 = new byte[3];
      AbiChromatogramBuilder abiChromatogramBuilder1 = abiChromatogramBuilder0.originalCConfidence(byteArray0);
      assertEquals("EJ$k4iJ-", abiChromatogramBuilder1.id());
  }

  @Test
  public void test21()  throws Throwable  {
      AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder("@NgXc8_Sc0C|iQRR");
      short[] shortArray0 = new short[8];
      AbiChromatogramBuilder abiChromatogramBuilder1 = abiChromatogramBuilder0.originalGPositions(shortArray0);
      assertSame(abiChromatogramBuilder1, abiChromatogramBuilder0);
  }

  @Test
  public void test22()  throws Throwable  {
      AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder("");
      byte[] byteArray0 = abiChromatogramBuilder0.cConfidence();
      assertNotNull(byteArray0);
  }

  @Test
  public void test23()  throws Throwable  {
      AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder("@NgXc8_Sc0C|iQRR");
      byte[] byteArray0 = abiChromatogramBuilder0.originalTConfidence();
      assertNotNull(byteArray0);
  }

  @Test
  public void test24()  throws Throwable  {
      AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder("");
      byte[] byteArray0 = abiChromatogramBuilder0.originalCConfidence();
      assertNotNull(byteArray0);
  }

  @Test
  public void test25()  throws Throwable  {
      AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder("@NgXc8_Sc0C|iQRR");
      short[] shortArray0 = new short[8];
      AbiChromatogramBuilder abiChromatogramBuilder1 = abiChromatogramBuilder0.gPositions(shortArray0);
      assertSame(abiChromatogramBuilder0, abiChromatogramBuilder1);
  }

  @Test
  public void test26()  throws Throwable  {
      AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder("j +V7>'J[QV");
      byte[] byteArray0 = new byte[5];
      AbiChromatogramBuilder abiChromatogramBuilder1 = abiChromatogramBuilder0.cConfidence(byteArray0);
      assertSame(abiChromatogramBuilder0, abiChromatogramBuilder1);
  }

  @Test
  public void test27()  throws Throwable  {
      AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder("NotThymine");
      NucleotideSequence nucleotideSequence0 = abiChromatogramBuilder0.originalBasecalls();
      assertNull(nucleotideSequence0);
  }

  @Test
  public void test28()  throws Throwable  {
      AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder("EJ$k4iJ-");
      String string0 = abiChromatogramBuilder0.id();
      assertEquals("EJ$k4iJ-", string0);
  }

  @Test
  public void test29()  throws Throwable  {
      AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder("EJ$k4iJ-");
      byte[] byteArray0 = abiChromatogramBuilder0.originalAConfidence();
      assertNotNull(byteArray0);
  }

  @Test
  public void test30()  throws Throwable  {
      AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder("");
      short[] shortArray0 = abiChromatogramBuilder0.aPositions();
      assertNotNull(shortArray0);
  }

  @Test
  public void test31()  throws Throwable  {
      AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder("j +V7>'J[QV");
      byte[] byteArray0 = new byte[5];
      AbiChromatogramBuilder abiChromatogramBuilder1 = abiChromatogramBuilder0.gConfidence(byteArray0);
      assertSame(abiChromatogramBuilder0, abiChromatogramBuilder1);
  }

  @Test
  public void test32()  throws Throwable  {
      AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder("GTyp");
      short[] shortArray0 = abiChromatogramBuilder0.originalTPositions();
      assertNotNull(shortArray0);
  }

  @Test
  public void test33()  throws Throwable  {
      AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder("EJ$k4iJ-");
      short[] shortArray0 = new short[1];
      AbiChromatogramBuilder abiChromatogramBuilder1 = abiChromatogramBuilder0.originalTPositions(shortArray0);
      assertSame(abiChromatogramBuilder0, abiChromatogramBuilder1);
  }

  @Test
  public void test34()  throws Throwable  {
      AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder("@NgXc8_Sc0C|iQRR");
      short[] shortArray0 = new short[8];
      AbiChromatogramBuilder abiChromatogramBuilder1 = abiChromatogramBuilder0.originalCPositions(shortArray0);
      assertSame(abiChromatogramBuilder1, abiChromatogramBuilder0);
  }

  @Test
  public void test35()  throws Throwable  {
      AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder("GTyp");
      PositionSequence positionSequence0 = abiChromatogramBuilder0.peaks();
      assertNull(positionSequence0);
  }

  @Test
  public void test36()  throws Throwable  {
      AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder("h)foc");
      // Undeclared exception!
      try {
        abiChromatogramBuilder0.originalProperties((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test37()  throws Throwable  {
      AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder("NotThymine");
      short[] shortArray0 = abiChromatogramBuilder0.tPositions();
      assertNotNull(shortArray0);
  }

  @Test
  public void test38()  throws Throwable  {
      AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder("NotThymine");
      AbiChromatogramBuilder abiChromatogramBuilder1 = abiChromatogramBuilder0.id(">");
      assertSame(abiChromatogramBuilder0, abiChromatogramBuilder1);
  }

  @Test
  public void test39()  throws Throwable  {
      AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder("NotThymine");
      byte[] byteArray0 = abiChromatogramBuilder0.aConfidence();
      assertNotNull(byteArray0);
  }

  @Test
  public void test40()  throws Throwable  {
      AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder("NotThymine");
      Map<String, String> map0 = abiChromatogramBuilder0.originalProperties();
      assertNull(map0);
  }

  @Test
  public void test41()  throws Throwable  {
      File file0 = new File("P'`WiaMaIpEzf");
      AbiChromatogramBuilder abiChromatogramBuilder0 = null;
      try {
        abiChromatogramBuilder0 = new AbiChromatogramBuilder("P'`WiaMaIpEzf", file0);
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
        /*
         * P'`WiaMaIpEzf (No such file or directory)
         */
      }
  }

  @Test
  public void test42()  throws Throwable  {
      AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder("EJ$k4iJ-");
      AbiChromatogramBuilder abiChromatogramBuilder1 = abiChromatogramBuilder0.basecalls((NucleotideSequence) null);
      assertSame(abiChromatogramBuilder0, abiChromatogramBuilder1);
  }

  @Test
  public void test43()  throws Throwable  {
      AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder("h)foc");
      byte[] byteArray0 = new byte[7];
      AbiChromatogramBuilder abiChromatogramBuilder1 = abiChromatogramBuilder0.originalAConfidence(byteArray0);
      assertSame(abiChromatogramBuilder1, abiChromatogramBuilder0);
  }

  @Test
  public void test44()  throws Throwable  {
      AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder("j +V7>'J[QV");
      // Undeclared exception!
      try {
        abiChromatogramBuilder0.build();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      AbiChromatogramBuilder abiChromatogramBuilder0 = new AbiChromatogramBuilder("");
      AbiChromatogramBuilder abiChromatogramBuilder1 = abiChromatogramBuilder0.originalTConfidence(byteArray0);
      assertEquals("", abiChromatogramBuilder1.id());
  }

  @Test
  public void test46()  throws Throwable  {
      AbiChromatogramBuilder.AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder.AbiChromatogramBuilderVisitor("@NgXc8_Sc0C|iQRR");
      short[] shortArray0 = new short[10];
      abiChromatogramBuilder_AbiChromatogramBuilderVisitor0.visitAPositions(shortArray0);
  }

  @Test
  public void test47()  throws Throwable  {
      AbiChromatogramBuilder.AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder.AbiChromatogramBuilderVisitor("P'`WiaMaIpEzf");
      byte[] byteArray0 = new byte[9];
      abiChromatogramBuilder_AbiChromatogramBuilderVisitor0.visitOriginalCConfidence(byteArray0);
  }

  @Test
  public void test48()  throws Throwable  {
      AbiChromatogramBuilder.AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder.AbiChromatogramBuilderVisitor("/+g{b#Yv-_");
      Ab1LocalDate ab1LocalDate0 = new Ab1LocalDate((-931), 22, 0);
      abiChromatogramBuilder_AbiChromatogramBuilderVisitor0.visitTaggedDataRecord((DateTaggedDataRecord) null, ab1LocalDate0);
      assertEquals(0, ab1LocalDate0.getDay());
  }

  @Test
  public void test49()  throws Throwable  {
      AbiChromatogramBuilder.AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder.AbiChromatogramBuilderVisitor("/+g{b#Yv-_");
      byte[] byteArray0 = new byte[5];
      abiChromatogramBuilder_AbiChromatogramBuilderVisitor0.visitGConfidence(byteArray0);
  }

  @Test
  public void test50()  throws Throwable  {
      AbiChromatogramBuilder.AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder.AbiChromatogramBuilderVisitor("@NgXc8_Sc0C|iQRR");
      short[] shortArray0 = new short[1];
      abiChromatogramBuilder_AbiChromatogramBuilderVisitor0.visitGelTemperatureData(shortArray0);
  }

  @Test
  public void test51()  throws Throwable  {
      AbiChromatogramBuilder.AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder.AbiChromatogramBuilderVisitor("EJ$k4iJ-");
      short[] shortArray0 = new short[1];
      abiChromatogramBuilder_AbiChromatogramBuilderVisitor0.visitPhotometricData(shortArray0, (int) (short)1);
  }

  @Test
  public void test52()  throws Throwable  {
      AbiChromatogramBuilder.AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder.AbiChromatogramBuilderVisitor("");
      short[] shortArray0 = new short[9];
      abiChromatogramBuilder_AbiChromatogramBuilderVisitor0.visitGPositions(shortArray0);
  }

  @Test
  public void test53()  throws Throwable  {
      AbiChromatogramBuilder.AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder.AbiChromatogramBuilderVisitor("uc&$M)7y/e[");
      abiChromatogramBuilder_AbiChromatogramBuilderVisitor0.visitChannelOrder((List<Nucleotide>) null);
  }

  @Test
  public void test54()  throws Throwable  {
      AbiChromatogramBuilder.AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder.AbiChromatogramBuilderVisitor("");
      short[] shortArray0 = new short[3];
      abiChromatogramBuilder_AbiChromatogramBuilderVisitor0.visitPeaks(shortArray0);
  }

  @Test
  public void test55()  throws Throwable  {
      AbiChromatogramBuilder.AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder.AbiChromatogramBuilderVisitor("uc&$M)7y/e[");
      byte[] byteArray0 = new byte[9];
      abiChromatogramBuilder_AbiChromatogramBuilderVisitor0.visitAConfidence(byteArray0);
  }

  @Test
  public void test56()  throws Throwable  {
      AbiChromatogramBuilder.AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder.AbiChromatogramBuilderVisitor("EJ$k4iJ-");
      abiChromatogramBuilder_AbiChromatogramBuilderVisitor0.visitNewTrace();
  }

  @Test
  public void test57()  throws Throwable  {
      AbiChromatogramBuilder.AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder.AbiChromatogramBuilderVisitor("@NgXc8_Sc0C|iQRR");
      TaggedDataName taggedDataName0 = TaggedDataName.DyeN;
      TaggedDataType taggedDataType0 = TaggedDataType.TYPE_5;
      DefaultScanRateTaggedDataType defaultScanRateTaggedDataType0 = new DefaultScanRateTaggedDataType(taggedDataName0, (-1L), taggedDataType0, 926, (-1L), (-711L), (-711L), (-364L));
      byte[] byteArray0 = new byte[13];
      abiChromatogramBuilder_AbiChromatogramBuilderVisitor0.visitTaggedDataRecord((UserDefinedTaggedDataRecord) defaultScanRateTaggedDataType0, byteArray0);
      assertEquals(TaggedDataType.TYPE_5, defaultScanRateTaggedDataType0.getDataType());
  }

  @Test
  public void test58()  throws Throwable  {
      AbiChromatogramBuilder.AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder.AbiChromatogramBuilderVisitor("P'`WiaMaIpEzf");
      short[] shortArray0 = new short[1];
      abiChromatogramBuilder_AbiChromatogramBuilderVisitor0.visitCPositions(shortArray0);
  }

  @Test
  public void test59()  throws Throwable  {
      AbiChromatogramBuilder.AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder.AbiChromatogramBuilderVisitor("");
      TaggedDataName taggedDataName0 = TaggedDataName.LAT_PIXEL_AVG;
      TaggedDataType taggedDataType0 = TaggedDataType.TYPE_5;
      DefaultFloatTaggedDataRecord defaultFloatTaggedDataRecord0 = new DefaultFloatTaggedDataRecord(taggedDataName0, (long) (short)0, taggedDataType0, (int) (short)0, (-877L), (long) (short)0, (long) (short) (-1879), 1L);
      float[] floatArray0 = new float[1];
      abiChromatogramBuilder_AbiChromatogramBuilderVisitor0.visitTaggedDataRecord((FloatArrayTaggedDataRecord) defaultFloatTaggedDataRecord0, floatArray0);
      assertEquals(0L, defaultFloatTaggedDataRecord0.getRecordLength());
  }

  @Test
  public void test60()  throws Throwable  {
      AbiChromatogramBuilder.AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder.AbiChromatogramBuilderVisitor("%gC&%r]iJ%[M?j;$x8");
      TaggedDataName taggedDataName0 = TaggedDataName.BASECALLS;
      TaggedDataType taggedDataType0 = TaggedDataType.TYPE_1;
      DefaultScanRateTaggedDataType defaultScanRateTaggedDataType0 = new DefaultScanRateTaggedDataType(taggedDataName0, 0L, taggedDataType0, 1596, (-819L), 0L, 0L, (-819L));
      abiChromatogramBuilder_AbiChromatogramBuilderVisitor0.visitTaggedDataRecord((ScanRateTaggedDataType) defaultScanRateTaggedDataType0, (ScanRate) null);
      assertEquals((-819L), defaultScanRateTaggedDataType0.getCrypticValue());
  }

  @Test
  public void test61()  throws Throwable  {
      AbiChromatogramBuilder.AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder.AbiChromatogramBuilderVisitor("P'`WiaMaIpEzf");
      TaggedDataName taggedDataName0 = TaggedDataName.BASECALLS;
      TaggedDataType taggedDataType0 = TaggedDataType.TYPE_19;
      DefaultTimeTaggedDataRecord defaultTimeTaggedDataRecord0 = new DefaultTimeTaggedDataRecord(taggedDataName0, 0L, taggedDataType0, (-1), (long) (-1), (-1237L), 0L, 2147483654L);
      Ab1LocalTime ab1LocalTime0 = new Ab1LocalTime((-1), 0, 1507);
      abiChromatogramBuilder_AbiChromatogramBuilderVisitor0.visitTaggedDataRecord((TimeTaggedDataRecord) defaultTimeTaggedDataRecord0, ab1LocalTime0);
      assertEquals(TaggedDataType.TYPE_19, defaultTimeTaggedDataRecord0.getDataType());
  }

  @Test
  public void test62()  throws Throwable  {
      AbiChromatogramBuilder.AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder.AbiChromatogramBuilderVisitor("P'`WiaMaIpEzf");
      TaggedDataType taggedDataType0 = TaggedDataType.INTEGER;
      TaggedDataName taggedDataName0 = TaggedDataName.phDY;
      DefaultPascalStringTaggedDataRecord defaultPascalStringTaggedDataRecord0 = new DefaultPascalStringTaggedDataRecord(taggedDataName0, 0L, taggedDataType0, 1774, (long) 1774, (long) 1774, (long) 1774, 113L);
      abiChromatogramBuilder_AbiChromatogramBuilderVisitor0.visitTaggedDataRecord((StringTaggedDataRecord) defaultPascalStringTaggedDataRecord0, "P'`WiaMaIpEzf");
      assertEquals(1774L, defaultPascalStringTaggedDataRecord0.getNumberOfElements());
  }

  @Test
  public void test63()  throws Throwable  {
      AbiChromatogramBuilder.AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder.AbiChromatogramBuilderVisitor("GTyp");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      abiChromatogramBuilder_AbiChromatogramBuilderVisitor0.visitComments((Map<String, String>) hashMap0);
      assertEquals("{}", hashMap0.toString());
  }

  @Test
  public void test64()  throws Throwable  {
      AbiChromatogramBuilder.AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder.AbiChromatogramBuilderVisitor("");
      abiChromatogramBuilder_AbiChromatogramBuilderVisitor0.visitOriginalBasecalls((NucleotideSequence) null);
  }

  @Test
  public void test65()  throws Throwable  {
      AbiChromatogramBuilder.AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder.AbiChromatogramBuilderVisitor("");
      int[] intArray0 = new int[1];
      abiChromatogramBuilder_AbiChromatogramBuilderVisitor0.visitTaggedDataRecord((IntArrayTaggedDataRecord) null, intArray0);
  }

  @Test
  public void test66()  throws Throwable  {
      AbiChromatogramBuilder.AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder.AbiChromatogramBuilderVisitor("/+g{b#Yv-_");
      byte[] byteArray0 = new byte[5];
      abiChromatogramBuilder_AbiChromatogramBuilderVisitor0.visitOriginalTConfidence(byteArray0);
  }

  @Test
  public void test67()  throws Throwable  {
      AbiChromatogramBuilder.AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder.AbiChromatogramBuilderVisitor("GTyp");
      short[] shortArray0 = new short[10];
      abiChromatogramBuilder_AbiChromatogramBuilderVisitor0.visitOriginalPeaks(shortArray0);
  }

  @Test
  public void test68()  throws Throwable  {
      AbiChromatogramBuilder.AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder.AbiChromatogramBuilderVisitor("");
      short[] shortArray0 = new short[9];
      abiChromatogramBuilder_AbiChromatogramBuilderVisitor0.visitElectrophoreticPower(shortArray0);
  }

  @Test
  public void test69()  throws Throwable  {
      AbiChromatogramBuilder.AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder.AbiChromatogramBuilderVisitor("P'`WiaMaIpEzf");
      byte[] byteArray0 = new byte[9];
      TaggedDataName taggedDataName0 = TaggedDataName.BASECALLS;
      TaggedDataType taggedDataType0 = TaggedDataType.TYPE_19;
      DefaultUserDefinedTaggedDataRecord defaultUserDefinedTaggedDataRecord0 = new DefaultUserDefinedTaggedDataRecord(taggedDataName0, (long) (byte)93, taggedDataType0, 1268, 1148L, 0L, (long) (byte)47, (long) (byte)1);
      abiChromatogramBuilder_AbiChromatogramBuilderVisitor0.visitTaggedDataRecord((ByteArrayTaggedDataRecord) defaultUserDefinedTaggedDataRecord0, byteArray0);
      assertEquals(0L, defaultUserDefinedTaggedDataRecord0.getRecordLength());
  }

  @Test
  public void test70()  throws Throwable  {
      AbiChromatogramBuilder.AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder.AbiChromatogramBuilderVisitor("");
      byte[] byteArray0 = new byte[1];
      abiChromatogramBuilder_AbiChromatogramBuilderVisitor0.visitTConfidence(byteArray0);
  }

  @Test
  public void test71()  throws Throwable  {
      AbiChromatogramBuilder.AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder.AbiChromatogramBuilderVisitor("uc&$M)7y/e[");
      byte[] byteArray0 = new byte[9];
      abiChromatogramBuilder_AbiChromatogramBuilderVisitor0.visitOriginalGConfidence(byteArray0);
  }

  @Test
  public void test72()  throws Throwable  {
      AbiChromatogramBuilder.AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder.AbiChromatogramBuilderVisitor("");
      abiChromatogramBuilder_AbiChromatogramBuilderVisitor0.visitScaleFactors((short)67, (short)67, (short)0, (short)1392);
  }

  @Test
  public void test73()  throws Throwable  {
      AbiChromatogramBuilder.AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder.AbiChromatogramBuilderVisitor("@NgXc8_Sc0C|iQRR");
      abiChromatogramBuilder_AbiChromatogramBuilderVisitor0.visitEndOfTrace();
  }

  @Test
  public void test74()  throws Throwable  {
      AbiChromatogramBuilder.AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder.AbiChromatogramBuilderVisitor("");
      byte[] byteArray0 = new byte[9];
      abiChromatogramBuilder_AbiChromatogramBuilderVisitor0.visitCConfidence(byteArray0);
  }

  @Test
  public void test75()  throws Throwable  {
      AbiChromatogramBuilder.AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder.AbiChromatogramBuilderVisitor("GTyp");
      short[] shortArray0 = new short[10];
      abiChromatogramBuilder_AbiChromatogramBuilderVisitor0.visitTaggedDataRecord((ShortArrayTaggedDataRecord) null, shortArray0);
  }

  @Test
  public void test76()  throws Throwable  {
      AbiChromatogramBuilder.AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder.AbiChromatogramBuilderVisitor("uc&$M)7y/e[");
      abiChromatogramBuilder_AbiChromatogramBuilderVisitor0.visitBasecalls((NucleotideSequence) null);
  }

  @Test
  public void test77()  throws Throwable  {
      AbiChromatogramBuilder.AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder.AbiChromatogramBuilderVisitor("P'`WiaMaIpEzf");
      short[] shortArray0 = new short[1];
      abiChromatogramBuilder_AbiChromatogramBuilderVisitor0.visitGelCurrentData(shortArray0);
  }

  @Test
  public void test78()  throws Throwable  {
      AbiChromatogramBuilder.AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder.AbiChromatogramBuilderVisitor("");
      byte[] byteArray0 = new byte[3];
      abiChromatogramBuilder_AbiChromatogramBuilderVisitor0.visitOriginalAConfidence(byteArray0);
  }

  @Test
  public void test79()  throws Throwable  {
      AbiChromatogramBuilder.AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder.AbiChromatogramBuilderVisitor("I3\t\"h-K{>+ZQAX");
      short[] shortArray0 = new short[5];
      abiChromatogramBuilder_AbiChromatogramBuilderVisitor0.visitGelVoltageData(shortArray0);
  }

  @Test
  public void test80()  throws Throwable  {
      AbiChromatogramBuilder.AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder.AbiChromatogramBuilderVisitor("P'`WiaMaIpEzf");
      short[] shortArray0 = new short[1];
      abiChromatogramBuilder_AbiChromatogramBuilderVisitor0.visitTPositions(shortArray0);
  }
}
