/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.internal.trace.chromat.abi.tag;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.jcvi.jillion.internal.trace.chromat.abi.tag.TaggedDataName;
import org.jcvi.jillion.internal.trace.chromat.abi.tag.TaggedDataRecord;
import org.jcvi.jillion.internal.trace.chromat.abi.tag.TaggedDataRecordBuilder;
import org.jcvi.jillion.internal.trace.chromat.abi.tag.TaggedDataType;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TaggedDataRecordBuilderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      TaggedDataName taggedDataName0 = TaggedDataName.FILTER_WHEEL_ORDER;
      TaggedDataRecordBuilder taggedDataRecordBuilder0 = new TaggedDataRecordBuilder(taggedDataName0, 0L);
      TaggedDataRecordBuilder taggedDataRecordBuilder1 = taggedDataRecordBuilder0.setDataRecord(0L);
      assertSame(taggedDataRecordBuilder0, taggedDataRecordBuilder1);
  }

  @Test
  public void test1()  throws Throwable  {
      TaggedDataName taggedDataName0 = TaggedDataName.EVENT;
      TaggedDataRecordBuilder taggedDataRecordBuilder0 = new TaggedDataRecordBuilder(taggedDataName0, 776L);
      TaggedDataRecordBuilder taggedDataRecordBuilder1 = taggedDataRecordBuilder0.setCrypticValue(0L);
      assertSame(taggedDataRecordBuilder1, taggedDataRecordBuilder0);
  }

  @Test
  public void test2()  throws Throwable  {
      TaggedDataRecordBuilder taggedDataRecordBuilder0 = null;
      try {
        taggedDataRecordBuilder0 = new TaggedDataRecordBuilder((TaggedDataName) null, (-10L));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * name can not be null
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      TaggedDataName taggedDataName0 = TaggedDataName.FVoc;
      TaggedDataRecordBuilder taggedDataRecordBuilder0 = null;
      try {
        taggedDataRecordBuilder0 = new TaggedDataRecordBuilder(taggedDataName0, (-224L));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * tag number must be >=0
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      TaggedDataName taggedDataName0 = TaggedDataName.EVENT;
      TaggedDataRecordBuilder taggedDataRecordBuilder0 = new TaggedDataRecordBuilder(taggedDataName0, 776L);
      assertNotNull(taggedDataRecordBuilder0);
      
      TaggedDataType taggedDataType0 = TaggedDataType.INTEGER;
      TaggedDataRecordBuilder taggedDataRecordBuilder1 = taggedDataRecordBuilder0.setDataType(taggedDataType0, 2);
      assertNotNull(taggedDataRecordBuilder1);
      
      TaggedDataRecord<Object, Object> taggedDataRecord0 = (TaggedDataRecord<Object, Object>)taggedDataRecordBuilder0.build();
      assertNotNull(taggedDataRecord0);
      assertEquals(2, taggedDataRecord0.getElementLength());
      assertEquals(776L, taggedDataRecord0.getTagNumber());
  }

  @Test
  public void test5()  throws Throwable  {
      TaggedDataName taggedDataName0 = TaggedDataName.EVENT;
      TaggedDataRecordBuilder taggedDataRecordBuilder0 = new TaggedDataRecordBuilder(taggedDataName0, 776L);
      TaggedDataType taggedDataType0 = TaggedDataType.INTEGER;
      // Undeclared exception!
      try {
        taggedDataRecordBuilder0.setDataType(taggedDataType0, 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * elementLength must be >0
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      TaggedDataName taggedDataName0 = TaggedDataName.EVENT;
      TaggedDataRecordBuilder taggedDataRecordBuilder0 = new TaggedDataRecordBuilder(taggedDataName0, 791L);
      taggedDataRecordBuilder0.setRecordLength((long) 23);
      // Undeclared exception!
      try {
        taggedDataRecordBuilder0.build();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * invalid record length: expected(23) but was 0
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      TaggedDataName taggedDataName0 = TaggedDataName.phDY;
      TaggedDataRecordBuilder taggedDataRecordBuilder0 = new TaggedDataRecordBuilder(taggedDataName0, 1L);
      // Undeclared exception!
      try {
        taggedDataRecordBuilder0.setRecordLength(0L);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * recordLength must be >0
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      TaggedDataName taggedDataName0 = TaggedDataName.EVENT;
      TaggedDataRecordBuilder taggedDataRecordBuilder0 = new TaggedDataRecordBuilder(taggedDataName0, 776L);
      TaggedDataRecordBuilder taggedDataRecordBuilder1 = taggedDataRecordBuilder0.setNumberOfElements(776L);
      assertSame(taggedDataRecordBuilder1, taggedDataRecordBuilder0);
  }

  @Test
  public void test9()  throws Throwable  {
      TaggedDataName taggedDataName0 = TaggedDataName.FILTER_WHEEL_ORDER;
      TaggedDataRecordBuilder taggedDataRecordBuilder0 = new TaggedDataRecordBuilder(taggedDataName0, 0L);
      // Undeclared exception!
      try {
        taggedDataRecordBuilder0.setNumberOfElements(0L);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * numberOfElements must be >0
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      TaggedDataName taggedDataName0 = TaggedDataName.EVENT;
      TaggedDataRecordBuilder taggedDataRecordBuilder0 = new TaggedDataRecordBuilder(taggedDataName0, 776L);
      assertNotNull(taggedDataRecordBuilder0);
      
      TaggedDataType taggedDataType0 = TaggedDataType.PASCAL_STRING;
      TaggedDataRecordBuilder taggedDataRecordBuilder1 = taggedDataRecordBuilder0.setDataType(taggedDataType0, 92);
      assertNotNull(taggedDataRecordBuilder1);
      
      TaggedDataRecord<Object, Object> taggedDataRecord0 = (TaggedDataRecord<Object, Object>)taggedDataRecordBuilder0.build();
      assertEquals(92, taggedDataRecord0.getElementLength());
      assertEquals(776L, taggedDataRecord0.getTagNumber());
      assertNotNull(taggedDataRecord0);
  }

  @Test
  public void test11()  throws Throwable  {
      TaggedDataName taggedDataName0 = TaggedDataName.GEL_TYPE;
      TaggedDataRecordBuilder taggedDataRecordBuilder0 = new TaggedDataRecordBuilder(taggedDataName0, 791L);
      assertNotNull(taggedDataRecordBuilder0);
      
      TaggedDataType taggedDataType0 = TaggedDataType.TIME;
      TaggedDataRecordBuilder taggedDataRecordBuilder1 = taggedDataRecordBuilder0.setDataType(taggedDataType0, 24);
      assertNotNull(taggedDataRecordBuilder1);
      
      TaggedDataRecord<Object, Object> taggedDataRecord0 = (TaggedDataRecord<Object, Object>)taggedDataRecordBuilder0.build();
      assertEquals(24, taggedDataRecord0.getElementLength());
      assertNotNull(taggedDataRecord0);
      assertEquals(791L, taggedDataRecord0.getTagNumber());
  }

  @Test
  public void test12()  throws Throwable  {
      TaggedDataName taggedDataName0 = TaggedDataName.EVENT;
      TaggedDataRecordBuilder taggedDataRecordBuilder0 = new TaggedDataRecordBuilder(taggedDataName0, 781L);
      assertNotNull(taggedDataRecordBuilder0);
      
      TaggedDataType taggedDataType0 = TaggedDataType.DATE;
      TaggedDataRecordBuilder taggedDataRecordBuilder1 = taggedDataRecordBuilder0.setDataType(taggedDataType0, 24);
      assertNotNull(taggedDataRecordBuilder1);
      
      TaggedDataRecord<Object, Object> taggedDataRecord0 = (TaggedDataRecord<Object, Object>)taggedDataRecordBuilder0.build();
      assertEquals(781L, taggedDataRecord0.getTagNumber());
      assertNotNull(taggedDataRecord0);
      assertEquals(24, taggedDataRecord0.getElementLength());
  }

  @Test
  public void test13()  throws Throwable  {
      TaggedDataName taggedDataName0 = TaggedDataName.EVENT;
      TaggedDataRecordBuilder taggedDataRecordBuilder0 = new TaggedDataRecordBuilder(taggedDataName0, 791L);
      assertNotNull(taggedDataRecordBuilder0);
      
      TaggedDataType taggedDataType0 = TaggedDataType.USER_DEFINED;
      TaggedDataRecordBuilder taggedDataRecordBuilder1 = taggedDataRecordBuilder0.setDataType(taggedDataType0, 23);
      assertNotNull(taggedDataRecordBuilder1);
      
      TaggedDataRecord<Object, Object> taggedDataRecord0 = (TaggedDataRecord<Object, Object>)taggedDataRecordBuilder0.build();
      assertNotNull(taggedDataRecord0);
      assertEquals(791L, taggedDataRecord0.getTagNumber());
      assertEquals(23, taggedDataRecord0.getElementLength());
  }

  @Test
  public void test14()  throws Throwable  {
      TaggedDataName taggedDataName0 = TaggedDataName.FILTER_WHEEL_ORDER;
      TaggedDataRecordBuilder taggedDataRecordBuilder0 = new TaggedDataRecordBuilder(taggedDataName0, 0L);
      assertNotNull(taggedDataRecordBuilder0);
      
      TaggedDataType taggedDataType0 = TaggedDataType.TYPE_19;
      TaggedDataRecordBuilder taggedDataRecordBuilder1 = taggedDataRecordBuilder0.setDataType(taggedDataType0, 1);
      assertNotNull(taggedDataRecordBuilder1);
      
      TaggedDataRecord<Object, Object> taggedDataRecord0 = (TaggedDataRecord<Object, Object>)taggedDataRecordBuilder0.build();
      assertEquals(1, taggedDataRecord0.getElementLength());
      assertNotNull(taggedDataRecord0);
  }

  @Test
  public void test15()  throws Throwable  {
      TaggedDataName taggedDataName0 = TaggedDataName.EVENT;
      TaggedDataRecordBuilder taggedDataRecordBuilder0 = new TaggedDataRecordBuilder(taggedDataName0, 776L);
      assertNotNull(taggedDataRecordBuilder0);
      
      TaggedDataType taggedDataType0 = TaggedDataType.INTEGER;
      TaggedDataRecordBuilder taggedDataRecordBuilder1 = taggedDataRecordBuilder0.setDataType(taggedDataType0, 92);
      assertNotNull(taggedDataRecordBuilder1);
      
      TaggedDataRecord<Object, Object> taggedDataRecord0 = (TaggedDataRecord<Object, Object>)taggedDataRecordBuilder0.build();
      assertEquals(776L, taggedDataRecord0.getTagNumber());
      assertNotNull(taggedDataRecord0);
      assertEquals(92, taggedDataRecord0.getElementLength());
  }

  @Test
  public void test16()  throws Throwable  {
      TaggedDataName taggedDataName0 = TaggedDataName.GEL_TYPE;
      TaggedDataRecordBuilder taggedDataRecordBuilder0 = new TaggedDataRecordBuilder(taggedDataName0, 791L);
      assertNotNull(taggedDataRecordBuilder0);
      
      TaggedDataType taggedDataType0 = TaggedDataType.CHAR;
      TaggedDataRecordBuilder taggedDataRecordBuilder1 = taggedDataRecordBuilder0.setDataType(taggedDataType0, 24);
      assertNotNull(taggedDataRecordBuilder1);
      
      TaggedDataRecord<Object, Object> taggedDataRecord0 = (TaggedDataRecord<Object, Object>)taggedDataRecordBuilder0.build();
      assertNotNull(taggedDataRecord0);
      assertEquals(24, taggedDataRecord0.getElementLength());
      assertEquals(791L, taggedDataRecord0.getTagNumber());
  }
}
