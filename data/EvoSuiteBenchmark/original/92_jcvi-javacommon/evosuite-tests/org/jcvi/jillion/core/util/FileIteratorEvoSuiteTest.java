/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.core.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.util.Iterator;
import java.util.NoSuchElementException;
import org.jcvi.jillion.core.util.FileIterator;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class FileIteratorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      File file0 = new File("");
      File file1 = file0.getCanonicalFile();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(file1);
      FileIterator fileIterator0 = (FileIterator)fileIterator_FileIteratorBuilder0.build();
      assertNotNull(fileIterator0);
      
      // Undeclared exception!
      try {
        fileIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * can not remove
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      File file0 = new File("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(file0);
      FileIterator fileIterator0 = (FileIterator)fileIterator_FileIteratorBuilder0.build();
      assertNotNull(fileIterator0);
      
      Iterator<File> iterator0 = fileIterator0.iterator();
      assertEquals(true, iterator0.hasNext());
      assertNotNull(iterator0);
  }

  @Test
  public void test2()  throws Throwable  {
      File file0 = new File("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(file0);
      FileIterator fileIterator0 = (FileIterator)fileIterator_FileIteratorBuilder0.build();
      assertNotNull(fileIterator0);
      
      Iterator<File> iterator0 = fileIterator0.iterator();
      assertNotNull(iterator0);
      assertEquals(true, fileIterator0.hasNext());
      assertEquals(true, iterator0.hasNext());
  }

  @Test
  public void test3()  throws Throwable  {
      File file0 = new File("");
      File file1 = file0.getCanonicalFile();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(file1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder1.includeDirectories(true);
      FileIterator fileIterator0 = (FileIterator)fileIterator_FileIteratorBuilder1.build();
      assertEquals(true, fileIterator0.hasNext());
      assertNotNull(fileIterator0);
  }

  @Test
  public void test4()  throws Throwable  {
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder((File) null);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.fileFilter((FileFilter) null);
      assertSame(fileIterator_FileIteratorBuilder0, fileIterator_FileIteratorBuilder1);
  }

  @Test
  public void test5()  throws Throwable  {
      File file0 = new File("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(file0);
      FileIterator fileIterator0 = (FileIterator)fileIterator_FileIteratorBuilder0.build();
      assertNotNull(fileIterator0);
      
      Iterator<File> iterator0 = fileIterator0.iterator();
      assertNotNull(iterator0);
      assertEquals(false, iterator0.hasNext());
  }

  @Test
  public void test6()  throws Throwable  {
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder((File) null);
      // Undeclared exception!
      try {
        fileIterator_FileIteratorBuilder0.build();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * rootDir can not be null
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      File file0 = new File("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(file0);
      // Undeclared exception!
      try {
        fileIterator_FileIteratorBuilder0.createFileIterator(file0, (FileFilter) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * fileFilter can not be null
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      File file0 = new File("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(file0);
      FileIterator fileIterator0 = (FileIterator)fileIterator_FileIteratorBuilder0.build();
      assertNotNull(fileIterator0);
      
      File file1 = fileIterator0.getNextFile();
      assertEquals(true, fileIterator0.hasNext());
      
      fileIterator0.setUpInitialState(file1);
      // Undeclared exception!
      try {
        fileIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      } catch(NoSuchElementException e) {
        /*
         * no more files
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      File file0 = new File("");
      File file1 = file0.getCanonicalFile();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(file1);
      FileIterator fileIterator0 = (FileIterator)fileIterator_FileIteratorBuilder0.build();
      assertNotNull(fileIterator0);
      
      File file2 = fileIterator0.next();
      assertNotNull(file2);
      assertEquals(true, fileIterator0.hasNext());
      assertEquals(23743L, file2.length());
  }

  @Test
  public void test10()  throws Throwable  {
      File file0 = new File("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(file0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator fileIterator0 = (FileIterator)fileIterator_FileIteratorBuilder1.build();
      assertEquals(true, fileIterator0.hasNext());
      assertNotNull(fileIterator0);
  }

  @Test
  public void test11()  throws Throwable  {
      File file0 = new File("");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(file0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      // Undeclared exception!
      try {
        fileIterator_FileIteratorBuilder1.build();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * rootDir must be a directory
         */
      }
  }
}
