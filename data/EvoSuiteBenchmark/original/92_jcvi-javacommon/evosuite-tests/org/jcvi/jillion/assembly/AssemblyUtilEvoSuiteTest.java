/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.assembly;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.jcvi.jillion.assembly.AssembledRead;
import org.jcvi.jillion.assembly.AssemblyUtil;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.residue.nt.NucleotideSequence;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class AssemblyUtilEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try {
        AssemblyUtil.convertToUngappedFullRangeOffset((AssembledRead) null, (-23), (-23));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try {
        AssemblyUtil.convertToUngappedFullRangeOffset((AssembledRead) null, 1607);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try {
        AssemblyUtil.reverseComplementValidRange((Range) null, (-15L));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * valid range can not be null
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try {
        AssemblyUtil.getLeftFlankingNonGapIndex((NucleotideSequence) null, 1496);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = AssemblyUtil.getLeftFlankingNonGapIndex((NucleotideSequence) null, (-780));
      assertEquals((-780), int0);
  }

  @Test
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try {
        AssemblyUtil.toUngappedRange((NucleotideSequence) null, (Range) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * gapped sequence can not be null
         */
      }
  }
}
