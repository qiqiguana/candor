/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.core.pos;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Iterator;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.pos.DefaultPositionSequence;
import org.jcvi.jillion.core.pos.Position;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DefaultPositionSequenceEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      short[] shortArray0 = new short[42];
      DefaultPositionSequence defaultPositionSequence0 = new DefaultPositionSequence(shortArray0);
      Iterator<Position> iterator0 = defaultPositionSequence0.iterator();
      assertEquals(true, iterator0.hasNext());
  }

  @Test
  public void test1()  throws Throwable  {
      short[] shortArray0 = new short[14];
      DefaultPositionSequence defaultPositionSequence0 = new DefaultPositionSequence(shortArray0);
      long long0 = defaultPositionSequence0.getLength();
      assertEquals(14L, long0);
  }

  @Test
  public void test2()  throws Throwable  {
      short[] shortArray0 = new short[42];
      DefaultPositionSequence defaultPositionSequence0 = new DefaultPositionSequence(shortArray0);
      int int0 = defaultPositionSequence0.hashCode();
      assertEquals((-448696608), int0);
  }

  @Test
  public void test3()  throws Throwable  {
      short[] shortArray0 = new short[14];
      DefaultPositionSequence defaultPositionSequence0 = new DefaultPositionSequence(shortArray0);
      String string0 = defaultPositionSequence0.toString();
      assertEquals("[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]", string0);
      assertNotNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      short[] shortArray0 = new short[9];
      DefaultPositionSequence defaultPositionSequence0 = new DefaultPositionSequence(shortArray0);
      short[] shortArray1 = defaultPositionSequence0.toArray();
      assertFalse(shortArray1.equals(shortArray0));
  }

  @Test
  public void test5()  throws Throwable  {
      short[] shortArray0 = new short[14];
      DefaultPositionSequence defaultPositionSequence0 = new DefaultPositionSequence(shortArray0);
      // Undeclared exception!
      try {
        defaultPositionSequence0.iterator((Range) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      short[] shortArray0 = new short[14];
      DefaultPositionSequence defaultPositionSequence0 = new DefaultPositionSequence(shortArray0);
      Position position0 = (Position)defaultPositionSequence0.get(1L);
      assertEquals("0", position0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      short[] shortArray0 = new short[14];
      DefaultPositionSequence defaultPositionSequence0 = new DefaultPositionSequence(shortArray0);
      boolean boolean0 = defaultPositionSequence0.equals((Object) "_+8,?m");
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      short[] shortArray0 = new short[42];
      DefaultPositionSequence defaultPositionSequence0 = new DefaultPositionSequence(shortArray0);
      boolean boolean0 = defaultPositionSequence0.equals((Object) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      short[] shortArray0 = new short[9];
      DefaultPositionSequence defaultPositionSequence0 = new DefaultPositionSequence(shortArray0);
      DefaultPositionSequence defaultPositionSequence1 = new DefaultPositionSequence(shortArray0);
      boolean boolean0 = defaultPositionSequence0.equals((Object) defaultPositionSequence1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      short[] shortArray0 = new short[9];
      DefaultPositionSequence defaultPositionSequence0 = new DefaultPositionSequence(shortArray0);
      DefaultPositionSequence defaultPositionSequence1 = new DefaultPositionSequence((short[]) null);
      boolean boolean0 = defaultPositionSequence1.equals((Object) defaultPositionSequence0);
      assertFalse(defaultPositionSequence0.equals(defaultPositionSequence1));
      assertEquals(false, boolean0);
  }
}
