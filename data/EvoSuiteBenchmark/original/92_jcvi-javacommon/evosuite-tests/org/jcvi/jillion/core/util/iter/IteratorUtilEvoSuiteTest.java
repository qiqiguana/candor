/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.core.util.iter;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import org.jcvi.jillion.core.util.iter.IteratorUtil;
import org.jcvi.jillion.core.util.iter.PeekableIterator;
import org.jcvi.jillion.core.util.iter.PeekableStreamingIterator;
import org.jcvi.jillion.core.util.iter.StreamingIterator;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class IteratorUtilEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Iterator<Iterator<Integer>> iterator0 = IteratorUtil.createEmptyIterator();
      assertEquals(false, iterator0.hasNext());
  }

  @Test
  public void test1()  throws Throwable  {
      LinkedList<StreamingIterator<Object>> linkedList0 = new LinkedList<StreamingIterator<Object>>();
      ListIterator<StreamingIterator<Object>> listIterator0 = linkedList0.listIterator();
      PeekableIterator<StreamingIterator<Object>> peekableIterator0 = IteratorUtil.createPeekableIterator((Iterator<StreamingIterator<Object>>) listIterator0);
      assertEquals(false, peekableIterator0.hasNext());
  }

  @Test
  public void test2()  throws Throwable  {
      LinkedList<Iterator<StreamingIterator<Object>>> linkedList0 = new LinkedList<Iterator<StreamingIterator<Object>>>();
      // Undeclared exception!
      try {
        IteratorUtil.createChainedIterator((Collection<? extends Iterator<StreamingIterator<Object>>>) linkedList0);
        fail("Expecting exception: NoSuchElementException");
      } catch(NoSuchElementException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try {
        IteratorUtil.createPeekableStreamingIterator((StreamingIterator<Integer>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      LinkedList<StreamingIterator<String>> linkedList0 = new LinkedList<StreamingIterator<String>>();
      // Undeclared exception!
      try {
        IteratorUtil.createChainedStreamingIterator((Collection<? extends StreamingIterator<?>>) linkedList0);
        fail("Expecting exception: NoSuchElementException");
      } catch(NoSuchElementException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      StreamingIterator<Iterator<StreamingIterator<Integer>>> streamingIterator0 = IteratorUtil.createEmptyStreamingIterator();
      PeekableStreamingIterator<Iterator<StreamingIterator<Integer>>> peekableStreamingIterator0 = IteratorUtil.createPeekableStreamingIterator(streamingIterator0);
      PeekableStreamingIterator<Iterator<StreamingIterator<Integer>>> peekableStreamingIterator1 = IteratorUtil.createPeekableStreamingIterator((Iterator<Iterator<StreamingIterator<Integer>>>) peekableStreamingIterator0);
      assertEquals(false, peekableStreamingIterator1.hasNext());
  }

  @Test
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try {
        IteratorUtil.createPeekableIterator((Iterator<Iterator<Iterator<Integer>>>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
