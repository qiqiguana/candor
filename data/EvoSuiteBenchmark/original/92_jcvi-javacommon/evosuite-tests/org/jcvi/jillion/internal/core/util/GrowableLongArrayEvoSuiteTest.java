/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.internal.core.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.jcvi.jillion.internal.core.util.GrowableLongArray;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class GrowableLongArrayEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      long[] longArray0 = new long[2];
      GrowableLongArray growableLongArray0 = new GrowableLongArray(longArray0);
      assertNotNull(growableLongArray0);
      
      growableLongArray0.prepend(0L);
      assertEquals(3, growableLongArray0.getCurrentLength());
  }

  @Test
  public void test1()  throws Throwable  {
      GrowableLongArray growableLongArray0 = new GrowableLongArray(990);
      assertNotNull(growableLongArray0);
      
      growableLongArray0.prepend(growableLongArray0);
      assertEquals(0, growableLongArray0.getCurrentLength());
  }

  @Test
  public void test2()  throws Throwable  {
      long[] longArray0 = new long[8];
      GrowableLongArray growableLongArray0 = new GrowableLongArray(longArray0);
      long[] longArray1 = growableLongArray0.toArray();
      assertNotSame(longArray0, longArray1);
  }

  @Test
  public void test3()  throws Throwable  {
      long[] longArray0 = new long[34];
      GrowableLongArray growableLongArray0 = new GrowableLongArray(longArray0);
      assertNotNull(growableLongArray0);
      
      growableLongArray0.append(0L);
      assertEquals(35, growableLongArray0.getCurrentLength());
  }

  @Test
  public void test4()  throws Throwable  {
      GrowableLongArray growableLongArray0 = new GrowableLongArray(1652);
      assertNotNull(growableLongArray0);
      
      long[] longArray0 = new long[2];
      growableLongArray0.append(longArray0);
      growableLongArray0.reverse();
      assertEquals(2, growableLongArray0.getCurrentLength());
  }

  @Test
  public void test5()  throws Throwable  {
      long[] longArray0 = new long[2];
      GrowableLongArray growableLongArray0 = new GrowableLongArray(longArray0);
      assertNotNull(growableLongArray0);
      
      growableLongArray0.append(growableLongArray0);
      assertEquals(4, growableLongArray0.getCurrentLength());
  }

  @Test
  public void test6()  throws Throwable  {
      long[] longArray0 = new long[34];
      GrowableLongArray growableLongArray0 = new GrowableLongArray(longArray0);
      // Undeclared exception!
      try {
        growableLongArray0.get((-3));
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: -3, Size: 34
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      GrowableLongArray growableLongArray0 = new GrowableLongArray(990);
      assertNotNull(growableLongArray0);
      
      GrowableLongArray growableLongArray1 = growableLongArray0.copy();
      assertNotNull(growableLongArray1);
      assertEquals(0, growableLongArray1.getCurrentLength());
  }

  @Test
  public void test8()  throws Throwable  {
      long[] longArray0 = new long[2];
      GrowableLongArray growableLongArray0 = new GrowableLongArray(longArray0);
      assertNotNull(growableLongArray0);
      
      int int0 = growableLongArray0.getCurrentLength();
      assertEquals(2, int0);
  }

  @Test
  public void test9()  throws Throwable  {
      long[] longArray0 = new long[2];
      GrowableLongArray growableLongArray0 = new GrowableLongArray(longArray0);
      assertNotNull(growableLongArray0);
      
      growableLongArray0.prepend(longArray0);
      assertEquals(4, growableLongArray0.getCurrentLength());
  }

  @Test
  public void test10()  throws Throwable  {
      long[] longArray0 = new long[8];
      GrowableLongArray growableLongArray0 = new GrowableLongArray(longArray0);
      growableLongArray0.replace(0, 0);
      assertEquals(8, growableLongArray0.getCurrentLength());
  }

  @Test
  public void test11()  throws Throwable  {
      GrowableLongArray growableLongArray0 = null;
      try {
        growableLongArray0 = new GrowableLongArray((-28));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * initial capacity should be > 0 :-28
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      GrowableLongArray growableLongArray0 = new GrowableLongArray(1652);
      assertNotNull(growableLongArray0);
      
      long[] longArray0 = new long[2];
      // Undeclared exception!
      try {
        growableLongArray0.insert(1652, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 1652, Size: 0
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      GrowableLongArray growableLongArray0 = new GrowableLongArray(1652);
      assertNotNull(growableLongArray0);
      
      growableLongArray0.reverse();
      assertEquals(0, growableLongArray0.getCurrentLength());
  }

  @Test
  public void test14()  throws Throwable  {
      long[] longArray0 = new long[2];
      GrowableLongArray growableLongArray0 = new GrowableLongArray(longArray0);
      assertNotNull(growableLongArray0);
      
      growableLongArray0.remove(1);
      assertEquals(1, growableLongArray0.getCurrentLength());
  }

  @Test
  public void test15()  throws Throwable  {
      long[] longArray0 = new long[8];
      GrowableLongArray growableLongArray0 = new GrowableLongArray(longArray0);
      assertNotNull(growableLongArray0);
      
      growableLongArray0.remove(0);
      assertEquals(7, growableLongArray0.getCurrentLength());
  }

  @Test
  public void test16()  throws Throwable  {
      long[] longArray0 = new long[8];
      GrowableLongArray growableLongArray0 = new GrowableLongArray(longArray0);
      growableLongArray0.ensureCapacity(826);
      assertEquals(8, growableLongArray0.getCurrentLength());
  }
}
