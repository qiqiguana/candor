/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.assembly.consed.phd;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.List;
import java.util.Map;
import org.jcvi.jillion.assembly.consed.phd.DefaultPhd;
import org.jcvi.jillion.assembly.consed.phd.PhdReadTag;
import org.jcvi.jillion.assembly.consed.phd.PhdWholeReadItem;
import org.jcvi.jillion.core.pos.PositionSequence;
import org.jcvi.jillion.core.qual.QualitySequence;
import org.jcvi.jillion.core.residue.nt.NucleotideSequence;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DefaultPhdEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DefaultPhd defaultPhd0 = new DefaultPhd("'^~9iaGxC3pz", (NucleotideSequence) null, (QualitySequence) null, (PositionSequence) null);
      Map<String, String> map0 = defaultPhd0.getComments();
      assertNotNull(map0);
      
      DefaultPhd defaultPhd1 = new DefaultPhd("", (NucleotideSequence) null, (QualitySequence) null, (PositionSequence) null, map0);
      boolean boolean0 = defaultPhd0.equals((Object) defaultPhd1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      DefaultPhd defaultPhd0 = new DefaultPhd("aFnY:d^nHXD!DYHv", (NucleotideSequence) null, (QualitySequence) null, (PositionSequence) null);
      List<PhdWholeReadItem> list0 = defaultPhd0.getWholeReadItems();
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test2()  throws Throwable  {
      DefaultPhd defaultPhd0 = new DefaultPhd("aFnY:d^nHXD!DYHv", (NucleotideSequence) null, (QualitySequence) null, (PositionSequence) null);
      String string0 = defaultPhd0.toString();
      assertEquals("DefaultPhd [id=aFnY:d^nHXD!DYHv]", string0);
      assertNotNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      DefaultPhd defaultPhd0 = new DefaultPhd("~zEn", (NucleotideSequence) null, (QualitySequence) null, (PositionSequence) null);
      DefaultPhd defaultPhd1 = new DefaultPhd("~zEn", (NucleotideSequence) null, (QualitySequence) null, (PositionSequence) null);
      // Undeclared exception!
      try {
        defaultPhd0.equals((Object) defaultPhd1);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      DefaultPhd defaultPhd0 = new DefaultPhd("aFnY:d^nHXD!DYHv", (NucleotideSequence) null, (QualitySequence) null, (PositionSequence) null);
      QualitySequence qualitySequence0 = defaultPhd0.getQualitySequence();
      assertNull(qualitySequence0);
  }

  @Test
  public void test5()  throws Throwable  {
      DefaultPhd defaultPhd0 = new DefaultPhd("~zEn", (NucleotideSequence) null, (QualitySequence) null, (PositionSequence) null);
      List<PhdReadTag> list0 = defaultPhd0.getReadTags();
      assertEquals(0, list0.size());
  }

  @Test
  public void test6()  throws Throwable  {
      DefaultPhd defaultPhd0 = new DefaultPhd("~zEn", (NucleotideSequence) null, (QualitySequence) null, (PositionSequence) null);
      PositionSequence positionSequence0 = defaultPhd0.getPositionSequence();
      assertNull(positionSequence0);
  }

  @Test
  public void test7()  throws Throwable  {
      DefaultPhd defaultPhd0 = new DefaultPhd("*A", (NucleotideSequence) null, (QualitySequence) null, (PositionSequence) null);
      boolean boolean0 = defaultPhd0.equals((Object) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      DefaultPhd defaultPhd0 = new DefaultPhd("'^~9iaGxC3pz", (NucleotideSequence) null, (QualitySequence) null, (PositionSequence) null);
      boolean boolean0 = defaultPhd0.equals((Object) "[]");
      assertEquals(false, boolean0);
  }
}
