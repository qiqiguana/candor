/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.assembly.clc.cas;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.jcvi.jillion.assembly.clc.cas.CasAlignment;
import org.jcvi.jillion.assembly.clc.cas.DefaultCasMatch;
import org.jcvi.jillion.core.Range;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DefaultCasMatchEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DefaultCasMatch defaultCasMatch0 = new DefaultCasMatch(false, (-1098L), (-1098L), false, (CasAlignment) null, 0);
      long long0 = defaultCasMatch0.getNumberOfReportedAlignments();
      assertEquals(0, defaultCasMatch0.getScore());
      assertEquals((-1098L), long0);
      assertEquals("DefaultCasMatch [hasMatch=false, numberOfAlignments=-1098, numberOfMatches=-1098, isPartOfPair=false, alignments=\n]", defaultCasMatch0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      DefaultCasMatch defaultCasMatch0 = new DefaultCasMatch(true, 0L, 0L, true, (CasAlignment) null, (-640));
      int int0 = defaultCasMatch0.getScore();
      assertEquals(true, defaultCasMatch0.matchReported());
      assertEquals((-640), int0);
      assertEquals(true, defaultCasMatch0.readIsPartOfAPair());
  }

  @Test
  public void test2()  throws Throwable  {
      DefaultCasMatch defaultCasMatch0 = new DefaultCasMatch(false, (-1098L), (-1098L), false, (CasAlignment) null, 0);
      defaultCasMatch0.getTrimRange();
      assertEquals(0, defaultCasMatch0.getScore());
      assertEquals("DefaultCasMatch [hasMatch=false, numberOfAlignments=-1098, numberOfMatches=-1098, isPartOfPair=false, alignments=\n]", defaultCasMatch0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      DefaultCasMatch defaultCasMatch0 = new DefaultCasMatch(true, (-6L), (-6L), true, (CasAlignment) null, 38);
      boolean boolean0 = defaultCasMatch0.readIsPartOfAPair();
      assertEquals(true, boolean0);
      assertEquals(true, defaultCasMatch0.matchReported());
      assertEquals(38, defaultCasMatch0.getScore());
      assertEquals("DefaultCasMatch [hasMatch=true, numberOfAlignments=-6, numberOfMatches=-6, isPartOfPair=true, alignments=\n]", defaultCasMatch0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      DefaultCasMatch defaultCasMatch0 = new DefaultCasMatch(true, 2L, 2L, true, (CasAlignment) null, (-345), (Range) null);
      long long0 = defaultCasMatch0.getNumberOfMatches();
      assertEquals("DefaultCasMatch [hasMatch=true, numberOfAlignments=2, numberOfMatches=2, isPartOfPair=true, alignments=\n]", defaultCasMatch0.toString());
      assertEquals(true, defaultCasMatch0.matchReported());
      assertEquals(true, defaultCasMatch0.readIsPartOfAPair());
      assertEquals(-345, defaultCasMatch0.getScore());
      assertEquals(2L, long0);
  }

  @Test
  public void test5()  throws Throwable  {
      DefaultCasMatch defaultCasMatch0 = new DefaultCasMatch(false, (-1098L), (-1098L), false, (CasAlignment) null, 0);
      boolean boolean0 = defaultCasMatch0.matchReported();
      assertEquals("DefaultCasMatch [hasMatch=false, numberOfAlignments=-1098, numberOfMatches=-1098, isPartOfPair=false, alignments=\n]", defaultCasMatch0.toString());
      assertEquals(0, defaultCasMatch0.getScore());
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      DefaultCasMatch defaultCasMatch0 = new DefaultCasMatch(true, (-6L), (-6L), true, (CasAlignment) null, 38);
      defaultCasMatch0.getChosenAlignment();
      assertEquals("DefaultCasMatch [hasMatch=true, numberOfAlignments=-6, numberOfMatches=-6, isPartOfPair=true, alignments=\n]", defaultCasMatch0.toString());
      assertEquals(38, defaultCasMatch0.getScore());
      assertEquals(true, defaultCasMatch0.readIsPartOfAPair());
      assertEquals(true, defaultCasMatch0.matchReported());
  }

  @Test
  public void test7()  throws Throwable  {
      DefaultCasMatch defaultCasMatch0 = new DefaultCasMatch(true, (-6L), (-6L), true, (CasAlignment) null, 38);
      boolean boolean0 = defaultCasMatch0.hasMultipleAlignments();
      assertEquals(false, boolean0);
      assertEquals("DefaultCasMatch [hasMatch=true, numberOfAlignments=-6, numberOfMatches=-6, isPartOfPair=true, alignments=\n]", defaultCasMatch0.toString());
      assertEquals(true, defaultCasMatch0.readIsPartOfAPair());
      assertEquals(38, defaultCasMatch0.getScore());
      assertEquals(true, defaultCasMatch0.matchReported());
  }

  @Test
  public void test8()  throws Throwable  {
      DefaultCasMatch defaultCasMatch0 = new DefaultCasMatch(false, 1825L, 1825L, false, (CasAlignment) null, (-1938));
      boolean boolean0 = defaultCasMatch0.hasMultipleAlignments();
      assertEquals(true, boolean0);
      assertEquals("DefaultCasMatch [hasMatch=false, numberOfAlignments=1825, numberOfMatches=1825, isPartOfPair=false, alignments=\n]", defaultCasMatch0.toString());
      assertEquals(-1938, defaultCasMatch0.getScore());
  }

  @Test
  public void test9()  throws Throwable  {
      DefaultCasMatch defaultCasMatch0 = new DefaultCasMatch(false, (-1098L), (-1098L), false, (CasAlignment) null, 0);
      boolean boolean0 = defaultCasMatch0.readHasMutlipleMatches();
      assertEquals(false, boolean0);
      assertEquals("DefaultCasMatch [hasMatch=false, numberOfAlignments=-1098, numberOfMatches=-1098, isPartOfPair=false, alignments=\n]", defaultCasMatch0.toString());
      assertEquals(0, defaultCasMatch0.getScore());
  }

  @Test
  public void test10()  throws Throwable  {
      DefaultCasMatch defaultCasMatch0 = new DefaultCasMatch(true, 2L, 2L, true, (CasAlignment) null, (-345), (Range) null);
      boolean boolean0 = defaultCasMatch0.readHasMutlipleMatches();
      assertEquals(true, defaultCasMatch0.readIsPartOfAPair());
      assertEquals(true, boolean0);
      assertEquals("DefaultCasMatch [hasMatch=true, numberOfAlignments=2, numberOfMatches=2, isPartOfPair=true, alignments=\n]", defaultCasMatch0.toString());
      assertEquals(-345, defaultCasMatch0.getScore());
      assertEquals(true, defaultCasMatch0.matchReported());
  }

  @Test
  public void test11()  throws Throwable  {
      DefaultCasMatch defaultCasMatch0 = new DefaultCasMatch(true, 2L, 2L, true, (CasAlignment) null, (-345), (Range) null);
      String string0 = defaultCasMatch0.toString();
      assertEquals(true, defaultCasMatch0.matchReported());
      assertEquals(true, defaultCasMatch0.readIsPartOfAPair());
      assertEquals("DefaultCasMatch [hasMatch=true, numberOfAlignments=2, numberOfMatches=2, isPartOfPair=true, alignments=\n]", string0);
      assertEquals(-345, defaultCasMatch0.getScore());
      assertNotNull(string0);
  }

  @Test
  public void test12()  throws Throwable  {
      DefaultCasMatch defaultCasMatch0 = new DefaultCasMatch(false, (-1098L), (-1098L), false, (CasAlignment) null, 0);
      int int0 = defaultCasMatch0.hashCode();
      assertEquals(66703382, int0);
      assertEquals(false, defaultCasMatch0.hasMultipleAlignments());
  }

  @Test
  public void test13()  throws Throwable  {
      DefaultCasMatch defaultCasMatch0 = new DefaultCasMatch(true, 2L, 2L, true, (CasAlignment) null, (-345), (Range) null);
      int int0 = defaultCasMatch0.hashCode();
      assertEquals(66484580, int0);
      assertEquals(true, defaultCasMatch0.readIsPartOfAPair());
      assertEquals(true, defaultCasMatch0.hasMultipleAlignments());
      assertEquals(true, defaultCasMatch0.matchReported());
  }

  @Test
  public void test14()  throws Throwable  {
      DefaultCasMatch defaultCasMatch0 = new DefaultCasMatch(false, (-1098L), (-1098L), false, (CasAlignment) null, 0);
      DefaultCasMatch defaultCasMatch1 = new DefaultCasMatch(false, (-1098L), (-1098L), true, (CasAlignment) null, 0, (Range) null);
      boolean boolean0 = defaultCasMatch0.equals((Object) defaultCasMatch1);
      assertFalse(defaultCasMatch1.equals(defaultCasMatch0));
      assertEquals("DefaultCasMatch [hasMatch=false, numberOfAlignments=-1098, numberOfMatches=-1098, isPartOfPair=true, alignments=\n]", defaultCasMatch1.toString());
      assertEquals(0, defaultCasMatch0.getScore());
      assertEquals(true, defaultCasMatch1.readIsPartOfAPair());
      assertEquals(false, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      DefaultCasMatch defaultCasMatch0 = new DefaultCasMatch(true, 0L, 0L, true, (CasAlignment) null, (-640));
      boolean boolean0 = defaultCasMatch0.equals((Object) null);
      assertEquals(-640, defaultCasMatch0.getScore());
      assertEquals(true, defaultCasMatch0.matchReported());
      assertEquals(false, boolean0);
      assertEquals(true, defaultCasMatch0.readIsPartOfAPair());
  }

  @Test
  public void test16()  throws Throwable  {
      DefaultCasMatch defaultCasMatch0 = new DefaultCasMatch(true, 2L, 2L, true, (CasAlignment) null, (-345), (Range) null);
      Object object0 = new Object();
      boolean boolean0 = defaultCasMatch0.equals(object0);
      assertEquals(-345, defaultCasMatch0.getScore());
      assertEquals(false, boolean0);
      assertEquals(true, defaultCasMatch0.matchReported());
      assertEquals(true, defaultCasMatch0.readIsPartOfAPair());
      assertEquals("DefaultCasMatch [hasMatch=true, numberOfAlignments=2, numberOfMatches=2, isPartOfPair=true, alignments=\n]", defaultCasMatch0.toString());
  }

  @Test
  public void test17()  throws Throwable  {
      DefaultCasMatch defaultCasMatch0 = new DefaultCasMatch(true, (-6L), (-6L), true, (CasAlignment) null, 38);
      DefaultCasMatch defaultCasMatch1 = new DefaultCasMatch(false, (long) 38, (-6L), false, (CasAlignment) null, 38, (Range) null);
      boolean boolean0 = defaultCasMatch0.equals((Object) defaultCasMatch1);
      assertEquals(true, defaultCasMatch0.matchReported());
      assertEquals(false, boolean0);
      assertEquals(38, defaultCasMatch1.getScore());
      assertEquals("DefaultCasMatch [hasMatch=false, numberOfAlignments=-6, numberOfMatches=38, isPartOfPair=false, alignments=\n]", defaultCasMatch1.toString());
      assertEquals(true, defaultCasMatch0.readIsPartOfAPair());
  }

  @Test
  public void test18()  throws Throwable  {
      DefaultCasMatch defaultCasMatch0 = new DefaultCasMatch(false, (-1098L), (-1098L), false, (CasAlignment) null, 0);
      DefaultCasMatch defaultCasMatch1 = new DefaultCasMatch(false, (long) 0, (long) 0, false, (CasAlignment) null, 0);
      boolean boolean0 = defaultCasMatch0.equals((Object) defaultCasMatch1);
      assertEquals(false, boolean0);
      assertEquals("DefaultCasMatch [hasMatch=false, numberOfAlignments=-1098, numberOfMatches=-1098, isPartOfPair=false, alignments=\n]", defaultCasMatch0.toString());
      assertEquals(0, defaultCasMatch0.getScore());
      assertFalse(defaultCasMatch1.equals(defaultCasMatch0));
  }

  @Test
  public void test19()  throws Throwable  {
      DefaultCasMatch defaultCasMatch0 = new DefaultCasMatch(true, (-6L), (-6L), true, (CasAlignment) null, 38);
      DefaultCasMatch defaultCasMatch1 = new DefaultCasMatch(true, (-6L), (-6L), true, (CasAlignment) null, 38);
      boolean boolean0 = defaultCasMatch0.equals((Object) defaultCasMatch1);
      assertEquals("DefaultCasMatch [hasMatch=true, numberOfAlignments=-6, numberOfMatches=-6, isPartOfPair=true, alignments=\n]", defaultCasMatch0.toString());
      assertEquals(true, defaultCasMatch0.readIsPartOfAPair());
      assertEquals(true, defaultCasMatch0.matchReported());
      assertEquals(38, defaultCasMatch0.getScore());
      assertEquals(true, boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      DefaultCasMatch defaultCasMatch0 = new DefaultCasMatch(true, 0L, 0L, true, (CasAlignment) null, (-640));
      DefaultCasMatch defaultCasMatch1 = new DefaultCasMatch(true, 0L, 0L, true, (CasAlignment) null, 793);
      boolean boolean0 = defaultCasMatch0.equals((Object) defaultCasMatch1);
      assertEquals(-640, defaultCasMatch0.getScore());
      assertEquals(true, defaultCasMatch0.matchReported());
      assertEquals(false, boolean0);
      assertEquals(true, defaultCasMatch0.readIsPartOfAPair());
  }
}
