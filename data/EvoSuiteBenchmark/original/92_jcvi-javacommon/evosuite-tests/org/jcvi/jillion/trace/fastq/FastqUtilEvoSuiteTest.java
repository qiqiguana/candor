/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.trace.fastq;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import org.jcvi.jillion.trace.fastq.FastqQualityCodec;
import org.jcvi.jillion.trace.fastq.FastqUtil;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class FastqUtilEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      File file0 = new File("adZTxxJQtmm", "adZTxxJQtmm");
      try {
        FastqUtil.guessQualityCodecUsed(file0);
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
        /*
         * /mnt/fastdata/ac1gf/SF110/dist/92_jcvi-javacommon/adZTxxJQtmm/adZTxxJQtmm does not exist
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try {
        FastqUtil.guessQualityCodecUsed((File) null, (-52));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * number of reads to inspect must be >=1
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      FastqQualityCodec fastqQualityCodec0 = FastqUtil.guessQualityCodecUsed("J#[uc,'Op=^/=\"=s>");
      assertEquals("SANGER", fastqQualityCodec0.name());
  }

  @Test
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try {
        FastqUtil.guessQualityCodecUsed("");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * encoded qualities can not be empty
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      FastqQualityCodec fastqQualityCodec0 = FastqUtil.guessQualityCodecUsed("<");
      assertEquals("SOLEXA", fastqQualityCodec0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try {
        FastqUtil.guessQualityCodecUsed("PnSdn *oAS.");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid encoded qualities has out of range ascii value 32 : 'PnSdn *oAS.'
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      FastqQualityCodec fastqQualityCodec0 = FastqUtil.guessQualityCodecUsed("adZTxxJQtmm");
      assertEquals(0, fastqQualityCodec0.ordinal());
  }
}
