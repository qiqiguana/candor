/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.trace.fastq;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import org.jcvi.jillion.core.datastore.DataStoreFilter;
import org.jcvi.jillion.core.datastore.DataStoreProviderHint;
import org.jcvi.jillion.trace.fastq.FastqDataStore;
import org.jcvi.jillion.trace.fastq.FastqFileDataStoreBuilder;
import org.jcvi.jillion.trace.fastq.FastqQualityCodec;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class FastqFileDataStoreBuilderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      File file0 = new File("", "");
      FastqFileDataStoreBuilder fastqFileDataStoreBuilder0 = new FastqFileDataStoreBuilder(file0);
      FastqQualityCodec fastqQualityCodec0 = FastqQualityCodec.SANGER;
      fastqFileDataStoreBuilder0.qualityCodec(fastqQualityCodec0);
      try {
        fastqFileDataStoreBuilder0.build();
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
        /*
         * / (Is a directory)
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      FastqFileDataStoreBuilder fastqFileDataStoreBuilder0 = null;
      try {
        fastqFileDataStoreBuilder0 = new FastqFileDataStoreBuilder((File) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * fastq file can not be null
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      File file0 = new File("47AcnR");
      FastqFileDataStoreBuilder fastqFileDataStoreBuilder0 = null;
      try {
        fastqFileDataStoreBuilder0 = new FastqFileDataStoreBuilder(file0);
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
        /*
         * fastq file must exist
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      File file0 = new File("", "");
      FastqFileDataStoreBuilder fastqFileDataStoreBuilder0 = new FastqFileDataStoreBuilder(file0);
      // Undeclared exception!
      try {
        fastqFileDataStoreBuilder0.filter((DataStoreFilter) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * filter can not be null
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      File file0 = new File("", "");
      FastqFileDataStoreBuilder fastqFileDataStoreBuilder0 = new FastqFileDataStoreBuilder(file0);
      DataStoreProviderHint dataStoreProviderHint0 = DataStoreProviderHint.ITERATION_ONLY;
      FastqFileDataStoreBuilder fastqFileDataStoreBuilder1 = fastqFileDataStoreBuilder0.hint(dataStoreProviderHint0);
      FastqQualityCodec fastqQualityCodec0 = FastqQualityCodec.SANGER;
      fastqFileDataStoreBuilder1.qualityCodec(fastqQualityCodec0);
      FastqDataStore fastqDataStore0 = fastqFileDataStoreBuilder1.build();
      assertEquals(false, fastqDataStore0.isClosed());
  }

  @Test
  public void test5()  throws Throwable  {
      File file0 = new File("", "");
      FastqFileDataStoreBuilder fastqFileDataStoreBuilder0 = new FastqFileDataStoreBuilder(file0);
      try {
        fastqFileDataStoreBuilder0.build();
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
        /*
         * / (Is a directory)
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      File file0 = new File("", "");
      FastqFileDataStoreBuilder fastqFileDataStoreBuilder0 = new FastqFileDataStoreBuilder(file0);
      FastqQualityCodec fastqQualityCodec0 = FastqQualityCodec.ILLUMINA;
      FastqFileDataStoreBuilder fastqFileDataStoreBuilder1 = fastqFileDataStoreBuilder0.qualityCodec(fastqQualityCodec0);
      DataStoreProviderHint dataStoreProviderHint0 = DataStoreProviderHint.RANDOM_ACCESS_OPTIMIZE_MEMORY;
      fastqFileDataStoreBuilder1.hint(dataStoreProviderHint0);
      try {
        fastqFileDataStoreBuilder1.build();
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
        /*
         * / (Is a directory)
         */
      }
  }
}
