/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.internal.trace.chromat;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.jcvi.jillion.core.pos.PositionSequence;
import org.jcvi.jillion.core.qual.QualitySequence;
import org.jcvi.jillion.internal.trace.chromat.DefaultChannel;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DefaultChannelEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      short[] shortArray0 = new short[5];
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      assertNotNull(defaultChannel0);
      
      DefaultChannel defaultChannel1 = new DefaultChannel(byteArray0, shortArray0);
      boolean boolean0 = defaultChannel0.equals((Object) defaultChannel1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      short[] shortArray0 = new short[5];
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      assertNotNull(defaultChannel0);
      
      short[] shortArray1 = new short[9];
      DefaultChannel defaultChannel1 = new DefaultChannel(byteArray0, shortArray1);
      boolean boolean0 = defaultChannel0.equals((Object) defaultChannel1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      short[] shortArray0 = new short[3];
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      assertNotNull(defaultChannel0);
      
      boolean boolean0 = defaultChannel0.equals((Object) shortArray0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[55];
      short[] shortArray0 = new short[4];
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      assertNotNull(defaultChannel0);
      
      byte[] byteArray1 = new byte[1];
      DefaultChannel defaultChannel1 = new DefaultChannel(byteArray1, shortArray0);
      boolean boolean0 = defaultChannel0.equals((Object) defaultChannel1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[55];
      short[] shortArray0 = new short[4];
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      assertNotNull(defaultChannel0);
      
      int int0 = defaultChannel0.hashCode();
      assertEquals((-721461053), int0);
  }

  @Test
  public void test5()  throws Throwable  {
      DefaultChannel defaultChannel0 = null;
      try {
        defaultChannel0 = new DefaultChannel((QualitySequence) null, (PositionSequence) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * qualities can not be null
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      short[] shortArray0 = new short[3];
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      QualitySequence qualitySequence0 = defaultChannel0.getConfidence();
      DefaultChannel defaultChannel1 = null;
      try {
        defaultChannel1 = new DefaultChannel(qualitySequence0, (PositionSequence) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * positions can not be null
         */
      }
  }
}
