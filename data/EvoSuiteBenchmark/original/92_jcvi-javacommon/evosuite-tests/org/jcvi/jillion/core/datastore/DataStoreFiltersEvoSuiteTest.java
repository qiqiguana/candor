/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.core.datastore;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.regex.Pattern;
import org.jcvi.jillion.core.datastore.DataStoreFilter;
import org.jcvi.jillion.core.datastore.DataStoreFilters;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DataStoreFiltersEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      DataStoreFilter dataStoreFilter0 = DataStoreFilters.newIncludeFilter((Collection<String>) linkedList0);
      DataStoreFilter dataStoreFilter1 = DataStoreFilters.invertFilter(dataStoreFilter0);
      assertNotSame(dataStoreFilter0, dataStoreFilter1);
  }

  @Test
  public void test1()  throws Throwable  {
      DataStoreFilter dataStoreFilter0 = DataStoreFilters.neverAccept();
      assertNotNull(dataStoreFilter0);
  }

  @Test
  public void test2()  throws Throwable  {
      DataStoreFilter dataStoreFilter0 = DataStoreFilters.alwaysAccept();
      assertNotNull(dataStoreFilter0);
  }

  @Test
  public void test3()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("");
      DataStoreFilter dataStoreFilter0 = DataStoreFilters.newMatchFilter(pattern0);
      assertNotNull(dataStoreFilter0);
  }

  @Test
  public void test4()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      DataStoreFilter dataStoreFilter0 = DataStoreFilters.newExcludeFilter((Collection<String>) linkedList0);
      assertNotNull(dataStoreFilter0);
  }

  @Test
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try {
        DataStoreFilters.newIncludeFilter((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * ids can not be null
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try {
        DataStoreFilters.newExcludeFilter((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * ids can not be null
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      // Undeclared exception!
      try {
        DataStoreFilters.invertFilter((DataStoreFilter) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * filter can not be null
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      // Undeclared exception!
      try {
        DataStoreFilters.newMatchFilter((Pattern) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * pattern can not be null
         */
      }
  }
}
