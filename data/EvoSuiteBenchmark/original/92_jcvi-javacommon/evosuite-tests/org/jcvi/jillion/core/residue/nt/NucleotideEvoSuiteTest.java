/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.core.residue.nt;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Set;
import org.jcvi.jillion.core.residue.nt.Nucleotide;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class NucleotideEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Adenine;
      byte byte0 = nucleotide0.getOrdinalAsByte();
      assertEquals((byte)12, byte0);
  }

  @Test
  public void test1()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Cytosine;
      String string0 = nucleotide0.toString();
      assertEquals("C", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.parse("Weak");
      assertEquals(Nucleotide.Weak, nucleotide0);
  }

  @Test
  public void test3()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.parse("xr");
      Nucleotide nucleotide1 = nucleotide0.complement();
      assertEquals(Nucleotide.Unknown, nucleotide1);
  }

  @Test
  public void test4()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Adenine;
      Nucleotide nucleotide1 = nucleotide0.complement();
      Character character0 = nucleotide1.getCharacter();
      Nucleotide nucleotide2 = Nucleotide.parse((char) character0);
      assertEquals(Nucleotide.Thymine, nucleotide2);
  }

  @Test
  public void test5()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.NotThymine;
      Nucleotide nucleotide1 = nucleotide0.complement();
      assertEquals(Nucleotide.NotAdenine, nucleotide1);
  }

  @Test
  public void test6()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.parse('H');
      Nucleotide nucleotide1 = nucleotide0.complement();
      assertEquals(Nucleotide.NotCytosine, nucleotide1);
  }

  @Test
  public void test7()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.NotCytosine;
      Nucleotide nucleotide1 = nucleotide0.complement();
      assertEquals(Nucleotide.NotGuanine, nucleotide1);
  }

  @Test
  public void test8()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.parse('B');
      Nucleotide nucleotide1 = nucleotide0.complement();
      assertEquals(Nucleotide.NotThymine, nucleotide1);
  }

  @Test
  public void test9()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Weak;
      Nucleotide nucleotide1 = nucleotide0.complement();
      assertEquals(Nucleotide.Weak, nucleotide1);
  }

  @Test
  public void test10()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Amino;
      Nucleotide nucleotide1 = nucleotide0.complement();
      assertEquals(Nucleotide.Keto, nucleotide1);
  }

  @Test
  public void test11()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Purine;
      Nucleotide nucleotide1 = nucleotide0.complement();
      assertEquals(Nucleotide.Pyrimidine, nucleotide1);
  }

  @Test
  public void test12()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Strong;
      Nucleotide nucleotide1 = nucleotide0.complement();
      assertEquals(Nucleotide.Strong, nucleotide1);
  }

  @Test
  public void test13()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      Nucleotide nucleotide1 = nucleotide0.complement();
      assertEquals(Nucleotide.Purine, nucleotide1);
  }

  @Test
  public void test14()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Keto;
      Nucleotide nucleotide1 = nucleotide0.complement();
      assertEquals(Nucleotide.Amino, nucleotide1);
  }

  @Test
  public void test15()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.getAmbiguityFor((Collection<Nucleotide>) linkedList0);
      Nucleotide nucleotide1 = nucleotide0.complement();
      assertEquals(Nucleotide.Gap, nucleotide1);
  }

  @Test
  public void test16()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Cytosine;
      Nucleotide nucleotide1 = nucleotide0.complement();
      boolean boolean0 = nucleotide1.isAmbiguity();
      assertEquals(false, nucleotide1.isGap());
      assertEquals(false, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Guanine;
      Nucleotide nucleotide1 = nucleotide0.complement();
      assertEquals(Nucleotide.Cytosine, nucleotide1);
  }

  @Test
  public void test18()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Thymine;
      Nucleotide nucleotide1 = nucleotide0.complement();
      boolean boolean0 = nucleotide1.isAmbiguity();
      assertEquals(false, nucleotide0.isGap());
      assertEquals(false, boolean0);
      assertEquals(false, nucleotide1.isGap());
  }

  @Test
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try {
        Nucleotide.parse('+');
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid character + ascii value 43
         */
      }
  }

  @Test
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try {
        Nucleotide.parse(',');
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid character , ascii value 44
         */
      }
  }

  @Test
  public void test21()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.parse('-');
      assertEquals(Nucleotide.Gap, nucleotide0);
  }

  @Test
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try {
        Nucleotide.parse('.');
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid character . ascii value 46
         */
      }
  }

  @Test
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try {
        Nucleotide.parse('/');
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid character / ascii value 47
         */
      }
  }

  @Test
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try {
        Nucleotide.parse('1');
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid character 1 ascii value 49
         */
      }
  }

  @Test
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try {
        Nucleotide.parse('2');
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid character 2 ascii value 50
         */
      }
  }

  @Test
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try {
        Nucleotide.parse("4`/O59{fB0PG7q");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid character 4 ascii value 52
         */
      }
  }

  @Test
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try {
        Nucleotide.parse('6');
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid character 6 ascii value 54
         */
      }
  }

  @Test
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try {
        Nucleotide.parse("7\"q`8{mX?.$%");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid character 7 ascii value 55
         */
      }
  }

  @Test
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try {
        Nucleotide.parse('8');
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid character 8 ascii value 56
         */
      }
  }

  @Test
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try {
        Nucleotide.parse('9');
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid character 9 ascii value 57
         */
      }
  }

  @Test
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try {
        Nucleotide.parse(':');
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid character : ascii value 58
         */
      }
  }

  @Test
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try {
        Nucleotide.parse(';');
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid character ; ascii value 59
         */
      }
  }

  @Test
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try {
        Nucleotide.parse('<');
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid character < ascii value 60
         */
      }
  }

  @Test
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try {
        Nucleotide.parse('=');
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid character = ascii value 61
         */
      }
  }

  @Test
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try {
        Nucleotide.parse('>');
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid character > ascii value 62
         */
      }
  }

  @Test
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try {
        Nucleotide.parse("?j");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid character ? ascii value 63
         */
      }
  }

  @Test
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try {
        Nucleotide.parse('@');
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid character @ ascii value 64
         */
      }
  }

  @Test
  public void test38()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.parse("Arg");
      assertEquals(Nucleotide.Adenine, nucleotide0);
  }

  @Test
  public void test39()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.parse("Cytosine");
      assertEquals(Nucleotide.Cytosine, nucleotide0);
  }

  @Test
  public void test40()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.parse('D');
      assertEquals(Nucleotide.NotCytosine, nucleotide0);
  }

  @Test
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try {
        Nucleotide.parse('E');
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid character E ascii value 69
         */
      }
  }

  @Test
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try {
        Nucleotide.parse('F');
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid character F ascii value 70
         */
      }
  }

  @Test
  public void test43()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.parse("Glycine");
      assertEquals(Nucleotide.Guanine, nucleotide0);
  }

  @Test
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try {
        Nucleotide.parse("I}PcJ");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid character I ascii value 73
         */
      }
  }

  @Test
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try {
        Nucleotide.parse("J%w<{p(K{# hvQH#W");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid character J ascii value 74
         */
      }
  }

  @Test
  public void test46()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.parse('K');
      boolean boolean0 = nucleotide0.isAmbiguity();
      assertEquals(true, boolean0);
  }

  @Test
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try {
        Nucleotide.parse("L;BPW)");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid character L ascii value 76
         */
      }
  }

  @Test
  public void test48()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.parse('M');
      assertEquals(Nucleotide.Amino, nucleotide0);
  }

  @Test
  public void test49()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.parse("NotAdenine");
      assertEquals(Nucleotide.Unknown, nucleotide0);
  }

  @Test
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try {
        Nucleotide.parse("OMf8()E$}2:I12!@ z");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid character O ascii value 79
         */
      }
  }

  @Test
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try {
        Nucleotide.parse("Pro");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid character P ascii value 80
         */
      }
  }

  @Test
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try {
        Nucleotide.parse('Q');
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid character Q ascii value 81
         */
      }
  }

  @Test
  public void test53()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.parse('R');
      assertEquals(Nucleotide.Purine, nucleotide0);
  }

  @Test
  public void test54()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.parse("Strong");
      assertEquals(Nucleotide.Strong, nucleotide0);
  }

  @Test
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try {
        Nucleotide.parse("Unknown");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid character U ascii value 85
         */
      }
  }

  @Test
  public void test56()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.parse('V');
      assertEquals(Nucleotide.NotThymine, nucleotide0);
  }

  @Test
  public void test57()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.parse("XmaT`bp");
      assertEquals(Nucleotide.Unknown, nucleotide0);
  }

  @Test
  public void test58()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.parse("Y");
      assertEquals(Nucleotide.Pyrimidine, nucleotide0);
  }

  @Test
  public void test59()  throws Throwable  {
      // Undeclared exception!
      try {
        Nucleotide.parse("[=8x20Lrd;w");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid character [ ascii value 91
         */
      }
  }

  @Test
  public void test60()  throws Throwable  {
      // Undeclared exception!
      try {
        Nucleotide.parse(']');
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid character ] ascii value 93
         */
      }
  }

  @Test
  public void test61()  throws Throwable  {
      // Undeclared exception!
      try {
        Nucleotide.parse('^');
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid character ^ ascii value 94
         */
      }
  }

  @Test
  public void test62()  throws Throwable  {
      // Undeclared exception!
      try {
        Nucleotide.parse("`M\"+");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid character ` ascii value 96
         */
      }
  }

  @Test
  public void test63()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.parse('a');
      assertEquals(Nucleotide.Adenine, nucleotide0);
  }

  @Test
  public void test64()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.parse('b');
      assertEquals(Nucleotide.NotAdenine, nucleotide0);
  }

  @Test
  public void test65()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.parse("cAOC+s19d+xZIs \"");
      assertEquals(Nucleotide.Cytosine, nucleotide0);
  }

  @Test
  public void test66()  throws Throwable  {
      // Undeclared exception!
      try {
        Nucleotide.parse('e');
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid character e ascii value 101
         */
      }
  }

  @Test
  public void test67()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.parse('g');
      assertEquals(Nucleotide.Guanine, nucleotide0);
  }

  @Test
  public void test68()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.parse('h');
      assertEquals(Nucleotide.NotGuanine, nucleotide0);
  }

  @Test
  public void test69()  throws Throwable  {
      // Undeclared exception!
      try {
        Nucleotide.parse('i');
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid character i ascii value 105
         */
      }
  }

  @Test
  public void test70()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.parse('k');
      assertEquals("Keto", nucleotide0.name());
  }

  @Test
  public void test71()  throws Throwable  {
      // Undeclared exception!
      try {
        Nucleotide.parse('l');
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid character l ascii value 108
         */
      }
  }

  @Test
  public void test72()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.parse('m');
      assertEquals(Nucleotide.Amino, nucleotide0);
  }

  @Test
  public void test73()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.parse("n");
      assertEquals(Nucleotide.Unknown, nucleotide0);
  }

  @Test
  public void test74()  throws Throwable  {
      // Undeclared exception!
      try {
        Nucleotide.parse('o');
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid character o ascii value 111
         */
      }
  }

  @Test
  public void test75()  throws Throwable  {
      // Undeclared exception!
      try {
        Nucleotide.parse('p');
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid character p ascii value 112
         */
      }
  }

  @Test
  public void test76()  throws Throwable  {
      // Undeclared exception!
      try {
        Nucleotide.parse('q');
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid character q ascii value 113
         */
      }
  }

  @Test
  public void test77()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.parse('r');
      assertEquals(Nucleotide.Purine, nucleotide0);
  }

  @Test
  public void test78()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.parse('s');
      assertEquals(Nucleotide.Strong, nucleotide0);
  }

  @Test
  public void test79()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.parse('t');
      assertEquals(Nucleotide.Thymine, nucleotide0);
  }

  @Test
  public void test80()  throws Throwable  {
      // Undeclared exception!
      try {
        Nucleotide.parse('u');
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid character u ascii value 117
         */
      }
  }

  @Test
  public void test81()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.parse("v}WlrZN*0kqO(;");
      assertEquals(Nucleotide.NotThymine, nucleotide0);
  }

  @Test
  public void test82()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.parse('w');
      assertEquals(Nucleotide.Weak, nucleotide0);
  }

  @Test
  public void test83()  throws Throwable  {
      // Undeclared exception!
      try {
        Nucleotide.parse('&');
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid character & ascii value 38
         */
      }
  }

  @Test
  public void test84()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Gap;
      boolean boolean0 = nucleotide0.isAmbiguity();
      assertEquals(false, boolean0);
  }

  @Test
  public void test85()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Cytosine;
      boolean boolean0 = nucleotide0.isAmbiguity();
      assertEquals(false, boolean0);
      assertEquals(false, nucleotide0.isGap());
  }

  @Test
  public void test86()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Thymine;
      boolean boolean0 = nucleotide0.isAmbiguity();
      assertEquals(false, nucleotide0.isGap());
      assertEquals(false, boolean0);
  }

  @Test
  public void test87()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.NotThymine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      assertEquals(0, set0.size());
  }

  @Test
  public void test88()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Adenine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      assertNotNull(set0);
      assertEquals(false, set0.isEmpty());
  }

  @Test
  public void test89()  throws Throwable  {
      // Undeclared exception!
      try {
        Nucleotide.getAmbiguityFor((Collection<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * unambiguousBases can not be null
         */
      }
  }

  @Test
  public void test90()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Keto;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      assertNotNull(set0);
      
      Nucleotide nucleotide1 = Nucleotide.getAmbiguityFor((Collection<Nucleotide>) set0);
      assertEquals(Nucleotide.Keto, nucleotide1);
  }

  @Test
  public void test91()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      assertEquals(1, set0.size());
  }

  @Test
  public void test92()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Adenine;
      boolean boolean0 = nucleotide0.matches(nucleotide0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test93()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Adenine;
      Nucleotide nucleotide1 = nucleotide0.complement();
      boolean boolean0 = nucleotide0.matches(nucleotide1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test94()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Weak;
      Nucleotide nucleotide1 = Nucleotide.Thymine;
      boolean boolean0 = nucleotide0.matches(nucleotide1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test95()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Weak;
      Nucleotide nucleotide1 = Nucleotide.Unknown;
      boolean boolean0 = nucleotide0.matches(nucleotide1);
      assertEquals(true, boolean0);
  }
}
