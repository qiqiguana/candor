/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.internal.core.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.jcvi.jillion.internal.core.util.GrowableIntArray;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class GrowableIntArrayEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      GrowableIntArray growableIntArray0 = new GrowableIntArray(751);
      assertNotNull(growableIntArray0);
      
      GrowableIntArray growableIntArray1 = growableIntArray0.copy();
      assertNotNull(growableIntArray1);
      assertEquals(0, growableIntArray1.getCurrentLength());
  }

  @Test
  public void test1()  throws Throwable  {
      GrowableIntArray growableIntArray0 = new GrowableIntArray(751);
      assertNotNull(growableIntArray0);
      
      growableIntArray0.append(751);
      assertEquals(1, growableIntArray0.getCurrentLength());
  }

  @Test
  public void test2()  throws Throwable  {
      int[] intArray0 = new int[12];
      GrowableIntArray growableIntArray0 = new GrowableIntArray(intArray0);
      growableIntArray0.prepend(intArray0);
      assertEquals(24, growableIntArray0.getCurrentLength());
  }

  @Test
  public void test3()  throws Throwable  {
      int[] intArray0 = new int[2];
      GrowableIntArray growableIntArray0 = new GrowableIntArray(intArray0);
      assertNotNull(growableIntArray0);
      
      int int0 = growableIntArray0.getCurrentLength();
      assertEquals(2, int0);
  }

  @Test
  public void test4()  throws Throwable  {
      int[] intArray0 = new int[10];
      GrowableIntArray growableIntArray0 = new GrowableIntArray(intArray0);
      assertNotNull(growableIntArray0);
      
      growableIntArray0.append(growableIntArray0);
      assertEquals(20, growableIntArray0.getCurrentLength());
  }

  @Test
  public void test5()  throws Throwable  {
      int[] intArray0 = new int[1];
      GrowableIntArray growableIntArray0 = new GrowableIntArray(intArray0);
      int[] intArray1 = growableIntArray0.toArray();
      assertFalse(intArray1.equals(intArray0));
  }

  @Test
  public void test6()  throws Throwable  {
      GrowableIntArray growableIntArray0 = new GrowableIntArray(751);
      assertNotNull(growableIntArray0);
      
      growableIntArray0.prepend(growableIntArray0);
      assertEquals(0, growableIntArray0.getCurrentLength());
  }

  @Test
  public void test7()  throws Throwable  {
      int[] intArray0 = new int[1];
      GrowableIntArray growableIntArray0 = new GrowableIntArray(intArray0);
      // Undeclared exception!
      try {
        growableIntArray0.get(1105);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 1105, Size: 1
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int[] intArray0 = new int[12];
      GrowableIntArray growableIntArray0 = new GrowableIntArray(intArray0);
      // Undeclared exception!
      try {
        growableIntArray0.replace((-961), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: -961, Size: 12
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      int[] intArray0 = new int[10];
      GrowableIntArray growableIntArray0 = new GrowableIntArray(intArray0);
      assertNotNull(growableIntArray0);
      
      growableIntArray0.append(intArray0);
      assertEquals(20, growableIntArray0.getCurrentLength());
  }

  @Test
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[12];
      GrowableIntArray growableIntArray0 = new GrowableIntArray(intArray0);
      assertNotNull(growableIntArray0);
      
      growableIntArray0.prepend((-961));
      assertEquals(13, growableIntArray0.getCurrentLength());
  }

  @Test
  public void test11()  throws Throwable  {
      GrowableIntArray growableIntArray0 = null;
      try {
        growableIntArray0 = new GrowableIntArray((-1416));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * initial capacity should be > 0 :-1416
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[10];
      GrowableIntArray growableIntArray0 = new GrowableIntArray(intArray0);
      growableIntArray0.reverse();
      assertEquals(10, growableIntArray0.getCurrentLength());
  }

  @Test
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[2];
      GrowableIntArray growableIntArray0 = new GrowableIntArray(intArray0);
      assertNotNull(growableIntArray0);
      
      int int0 = growableIntArray0.remove(1);
      assertEquals(1, growableIntArray0.getCurrentLength());
      assertEquals(0, int0);
  }

  @Test
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[10];
      GrowableIntArray growableIntArray0 = new GrowableIntArray(intArray0);
      assertNotNull(growableIntArray0);
      
      int int0 = growableIntArray0.remove(0);
      assertEquals(9, growableIntArray0.getCurrentLength());
      assertEquals(0, int0);
  }
}
