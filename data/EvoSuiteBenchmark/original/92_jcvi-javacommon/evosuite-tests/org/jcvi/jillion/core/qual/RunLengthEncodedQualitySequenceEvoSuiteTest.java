/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.core.qual;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.nio.BufferUnderflowException;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.qual.RunLengthEncodedQualitySequence;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class RunLengthEncodedQualitySequenceEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      RunLengthEncodedQualitySequence runLengthEncodedQualitySequence0 = new RunLengthEncodedQualitySequence(byteArray0);
      int int0 = runLengthEncodedQualitySequence0.hashCode();
      assertEquals(0, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      RunLengthEncodedQualitySequence runLengthEncodedQualitySequence0 = new RunLengthEncodedQualitySequence(byteArray0);
      // Undeclared exception!
      try {
        runLengthEncodedQualitySequence0.iterator((Range) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      RunLengthEncodedQualitySequence runLengthEncodedQualitySequence0 = new RunLengthEncodedQualitySequence(byteArray0);
      // Undeclared exception!
      try {
        runLengthEncodedQualitySequence0.get((long) (byte)31);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * can not have index beyond length
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[2] = (byte)11;
      byteArray0[5] = (byte)2;
      byteArray0[7] = (byte)11;
      RunLengthEncodedQualitySequence runLengthEncodedQualitySequence0 = new RunLengthEncodedQualitySequence(byteArray0);
      runLengthEncodedQualitySequence0.hashCode();
      runLengthEncodedQualitySequence0.hashCode();
  }

  @Test
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      RunLengthEncodedQualitySequence runLengthEncodedQualitySequence0 = new RunLengthEncodedQualitySequence(byteArray0);
      boolean boolean0 = runLengthEncodedQualitySequence0.equals((Object) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      RunLengthEncodedQualitySequence runLengthEncodedQualitySequence0 = new RunLengthEncodedQualitySequence(byteArray0);
      Object object0 = new Object();
      boolean boolean0 = runLengthEncodedQualitySequence0.equals(object0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)8;
      RunLengthEncodedQualitySequence runLengthEncodedQualitySequence0 = new RunLengthEncodedQualitySequence(byteArray0);
      byte[] byteArray1 = new byte[10];
      RunLengthEncodedQualitySequence runLengthEncodedQualitySequence1 = new RunLengthEncodedQualitySequence(byteArray1);
      boolean boolean0 = runLengthEncodedQualitySequence0.equals((Object) runLengthEncodedQualitySequence1);
      assertEquals(2048L, runLengthEncodedQualitySequence0.getLength());
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[5] = (byte)2;
      RunLengthEncodedQualitySequence runLengthEncodedQualitySequence0 = new RunLengthEncodedQualitySequence(byteArray0);
      RunLengthEncodedQualitySequence runLengthEncodedQualitySequence1 = new RunLengthEncodedQualitySequence(byteArray0);
      boolean boolean0 = runLengthEncodedQualitySequence0.equals((Object) runLengthEncodedQualitySequence1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[2] = (byte)11;
      byteArray0[5] = (byte)2;
      RunLengthEncodedQualitySequence runLengthEncodedQualitySequence0 = new RunLengthEncodedQualitySequence(byteArray0);
      RunLengthEncodedQualitySequence runLengthEncodedQualitySequence1 = new RunLengthEncodedQualitySequence(byteArray0);
      // Undeclared exception!
      try {
        runLengthEncodedQualitySequence0.equals((Object) runLengthEncodedQualitySequence1);
        fail("Expecting exception: BufferUnderflowException");
      } catch(BufferUnderflowException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte)31;
      RunLengthEncodedQualitySequence runLengthEncodedQualitySequence0 = new RunLengthEncodedQualitySequence(byteArray0);
      String string0 = runLengthEncodedQualitySequence0.toString();
      assertEquals("", string0);
  }

  @Test
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)8;
      byteArray0[4] = (byte)8;
      RunLengthEncodedQualitySequence runLengthEncodedQualitySequence0 = new RunLengthEncodedQualitySequence(byteArray0);
      // Undeclared exception!
      try {
        runLengthEncodedQualitySequence0.toString();
        fail("Expecting exception: BufferUnderflowException");
      } catch(BufferUnderflowException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte)31;
      RunLengthEncodedQualitySequence runLengthEncodedQualitySequence0 = new RunLengthEncodedQualitySequence(byteArray0);
      byte[] byteArray1 = runLengthEncodedQualitySequence0.toArray();
      assertFalse(byteArray0.equals(byteArray1));
  }

  @Test
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte) (-3);
      RunLengthEncodedQualitySequence runLengthEncodedQualitySequence0 = new RunLengthEncodedQualitySequence(byteArray0);
      // Undeclared exception!
      try {
        runLengthEncodedQualitySequence0.toArray();
        fail("Expecting exception: BufferUnderflowException");
      } catch(BufferUnderflowException e) {
      }
  }
}
