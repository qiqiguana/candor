/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.internal.fasta.aa;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.jcvi.jillion.core.datastore.DataStoreClosedException;
import org.jcvi.jillion.core.datastore.DataStoreException;
import org.jcvi.jillion.core.datastore.DataStoreFilter;
import org.jcvi.jillion.core.util.iter.StreamingIterator;
import org.jcvi.jillion.fasta.FastaFileParser;
import org.jcvi.jillion.fasta.FastaVisitorCallback;
import org.jcvi.jillion.internal.fasta.aa.IndexedAminoAcidSequenceFastaFileDataStore;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class IndexedAminoAcidSequenceFastaFileDataStoreEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      File file0 = new File("");
      try {
        IndexedAminoAcidSequenceFastaFileDataStore.create(file0);
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
        /*
         * /mnt/fastdata/ac1gf/SF110/dist/92_jcvi-javacommon
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      IndexedAminoAcidSequenceFastaFileDataStore indexedAminoAcidSequenceFastaFileDataStore0 = new IndexedAminoAcidSequenceFastaFileDataStore();
      assertNotNull(indexedAminoAcidSequenceFastaFileDataStore0);
  }

  @Test
  public void test2()  throws Throwable  {
      File file0 = new File("", "");
      try {
        IndexedAminoAcidSequenceFastaFileDataStore.create(file0);
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
        /*
         * / (Is a directory)
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      HashMap<String, FastaVisitorCallback.FastaVisitorMemento> hashMap0 = new HashMap<String, FastaVisitorCallback.FastaVisitorMemento>();
      IndexedAminoAcidSequenceFastaFileDataStore.IndexedAminoAcidSequenceFastaFileDataStore2 indexedAminoAcidSequenceFastaFileDataStore_IndexedAminoAcidSequenceFastaFileDataStore2_0 = new IndexedAminoAcidSequenceFastaFileDataStore.IndexedAminoAcidSequenceFastaFileDataStore2((File) null, (FastaFileParser) null, (DataStoreFilter) null, (Map<String, FastaVisitorCallback.FastaVisitorMemento>) hashMap0);
      StreamingIterator<String> streamingIterator0 = indexedAminoAcidSequenceFastaFileDataStore_IndexedAminoAcidSequenceFastaFileDataStore2_0.idIterator();
      assertNotNull(streamingIterator0);
      assertEquals(false, indexedAminoAcidSequenceFastaFileDataStore_IndexedAminoAcidSequenceFastaFileDataStore2_0.isClosed());
  }

  @Test
  public void test4()  throws Throwable  {
      HashMap<String, FastaVisitorCallback.FastaVisitorMemento> hashMap0 = new HashMap<String, FastaVisitorCallback.FastaVisitorMemento>();
      IndexedAminoAcidSequenceFastaFileDataStore.IndexedAminoAcidSequenceFastaFileDataStore2 indexedAminoAcidSequenceFastaFileDataStore_IndexedAminoAcidSequenceFastaFileDataStore2_0 = new IndexedAminoAcidSequenceFastaFileDataStore.IndexedAminoAcidSequenceFastaFileDataStore2((File) null, (FastaFileParser) null, (DataStoreFilter) null, (Map<String, FastaVisitorCallback.FastaVisitorMemento>) hashMap0);
      assertEquals(false, indexedAminoAcidSequenceFastaFileDataStore_IndexedAminoAcidSequenceFastaFileDataStore2_0.isClosed());
      
      indexedAminoAcidSequenceFastaFileDataStore_IndexedAminoAcidSequenceFastaFileDataStore2_0.close();
      // Undeclared exception!
      try {
        indexedAminoAcidSequenceFastaFileDataStore_IndexedAminoAcidSequenceFastaFileDataStore2_0.contains("aqX");
        fail("Expecting exception: DataStoreClosedException");
      } catch(DataStoreClosedException e) {
        /*
         * datastore is closed
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      HashMap<String, FastaVisitorCallback.FastaVisitorMemento> hashMap0 = new HashMap<String, FastaVisitorCallback.FastaVisitorMemento>();
      IndexedAminoAcidSequenceFastaFileDataStore.IndexedAminoAcidSequenceFastaFileDataStore2 indexedAminoAcidSequenceFastaFileDataStore_IndexedAminoAcidSequenceFastaFileDataStore2_0 = new IndexedAminoAcidSequenceFastaFileDataStore.IndexedAminoAcidSequenceFastaFileDataStore2((File) null, (FastaFileParser) null, (DataStoreFilter) null, (Map<String, FastaVisitorCallback.FastaVisitorMemento>) hashMap0);
      boolean boolean0 = indexedAminoAcidSequenceFastaFileDataStore_IndexedAminoAcidSequenceFastaFileDataStore2_0.isClosed();
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          HashMap<String, FastaVisitorCallback.FastaVisitorMemento> hashMap0 = new HashMap<String, FastaVisitorCallback.FastaVisitorMemento>();
          IndexedAminoAcidSequenceFastaFileDataStore.IndexedAminoAcidSequenceFastaFileDataStore2 indexedAminoAcidSequenceFastaFileDataStore_IndexedAminoAcidSequenceFastaFileDataStore2_0 = new IndexedAminoAcidSequenceFastaFileDataStore.IndexedAminoAcidSequenceFastaFileDataStore2((File) null, (FastaFileParser) null, (DataStoreFilter) null, (Map<String, FastaVisitorCallback.FastaVisitorMemento>) hashMap0);
          // Undeclared exception!
          try {
            indexedAminoAcidSequenceFastaFileDataStore_IndexedAminoAcidSequenceFastaFileDataStore2_0.iterator();
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.lang.RuntimePermission shutdownHooks)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.Runtime.addShutdownHook(Runtime.java:190)
             * org.jcvi.jillion.internal.core.util.iter.AbstractBlockingStreamingIterator.start(AbstractBlockingStreamingIterator.java:143)
             * org.jcvi.jillion.internal.fasta.aa.LargeAminoAcidSequenceFastaIterator.createNewIteratorFor(LargeAminoAcidSequenceFastaIterator.java:45)
             * org.jcvi.jillion.internal.fasta.aa.IndexedAminoAcidSequenceFastaFileDataStore$IndexedAminoAcidSequenceFastaFileDataStore2.iterator(IndexedAminoAcidSequenceFastaFileDataStore.java:212)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
      HashMap<String, FastaVisitorCallback.FastaVisitorMemento> hashMap0 = new HashMap<String, FastaVisitorCallback.FastaVisitorMemento>();
      IndexedAminoAcidSequenceFastaFileDataStore.IndexedAminoAcidSequenceFastaFileDataStore2 indexedAminoAcidSequenceFastaFileDataStore_IndexedAminoAcidSequenceFastaFileDataStore2_0 = new IndexedAminoAcidSequenceFastaFileDataStore.IndexedAminoAcidSequenceFastaFileDataStore2((File) null, (FastaFileParser) null, (DataStoreFilter) null, (Map<String, FastaVisitorCallback.FastaVisitorMemento>) hashMap0);
      indexedAminoAcidSequenceFastaFileDataStore_IndexedAminoAcidSequenceFastaFileDataStore2_0.getNumberOfRecords();
      assertEquals(false, indexedAminoAcidSequenceFastaFileDataStore_IndexedAminoAcidSequenceFastaFileDataStore2_0.isClosed());
  }

  @Test
  public void test8()  throws Throwable  {
      // Undeclared exception!
      try {
        IndexedAminoAcidSequenceFastaFileDataStore.create((File) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * fasta file can not be null
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      File file0 = new File("", "");
      // Undeclared exception!
      try {
        IndexedAminoAcidSequenceFastaFileDataStore.create(file0, (DataStoreFilter) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * filter can not be null
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      File file0 = new File("1");
      HashMap<String, FastaVisitorCallback.FastaVisitorMemento> hashMap0 = new HashMap<String, FastaVisitorCallback.FastaVisitorMemento>();
      hashMap0.put("1", (FastaVisitorCallback.FastaVisitorMemento) null);
      IndexedAminoAcidSequenceFastaFileDataStore.IndexedAminoAcidSequenceFastaFileDataStore2 indexedAminoAcidSequenceFastaFileDataStore_IndexedAminoAcidSequenceFastaFileDataStore2_0 = new IndexedAminoAcidSequenceFastaFileDataStore.IndexedAminoAcidSequenceFastaFileDataStore2(file0, (FastaFileParser) null, (DataStoreFilter) null, (Map<String, FastaVisitorCallback.FastaVisitorMemento>) hashMap0);
      // Undeclared exception!
      try {
        indexedAminoAcidSequenceFastaFileDataStore_IndexedAminoAcidSequenceFastaFileDataStore2_0.get("1");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      HashMap<String, FastaVisitorCallback.FastaVisitorMemento> hashMap0 = new HashMap<String, FastaVisitorCallback.FastaVisitorMemento>();
      IndexedAminoAcidSequenceFastaFileDataStore.IndexedAminoAcidSequenceFastaFileDataStore2 indexedAminoAcidSequenceFastaFileDataStore_IndexedAminoAcidSequenceFastaFileDataStore2_0 = new IndexedAminoAcidSequenceFastaFileDataStore.IndexedAminoAcidSequenceFastaFileDataStore2((File) null, (FastaFileParser) null, (DataStoreFilter) null, (Map<String, FastaVisitorCallback.FastaVisitorMemento>) hashMap0);
      indexedAminoAcidSequenceFastaFileDataStore_IndexedAminoAcidSequenceFastaFileDataStore2_0.get("}t`\"q2Pzg6r");
      assertEquals(false, indexedAminoAcidSequenceFastaFileDataStore_IndexedAminoAcidSequenceFastaFileDataStore2_0.isClosed());
  }
}
