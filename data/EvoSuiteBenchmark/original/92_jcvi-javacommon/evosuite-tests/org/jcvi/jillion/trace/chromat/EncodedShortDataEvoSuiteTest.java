/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.trace.chromat;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.jcvi.jillion.trace.chromat.EncodedShortData;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class EncodedShortDataEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      short[] shortArray0 = new short[3];
      EncodedShortData encodedShortData0 = new EncodedShortData(shortArray0);
      assertNotNull(encodedShortData0);
      
      String string0 = encodedShortData0.encodeData();
      assertNotNull(string0);
      assertEquals("0, 0, 0", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      short[] shortArray0 = new short[6];
      EncodedShortData encodedShortData0 = new EncodedShortData(shortArray0);
      assertNotNull(encodedShortData0);
      
      int int0 = encodedShortData0.hashCode();
      assertEquals(887503712, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      short[] shortArray0 = new short[10];
      EncodedShortData encodedShortData0 = new EncodedShortData(shortArray0);
      assertNotNull(encodedShortData0);
      
      short[] shortArray1 = encodedShortData0.getData();
      assertNotNull(shortArray1);
      assertEquals("0, 0, 0, 0, 0, 0, 0, 0, 0, 0", encodedShortData0.encodeData());
  }

  @Test
  public void test3()  throws Throwable  {
      EncodedShortData encodedShortData0 = null;
      try {
        encodedShortData0 = new EncodedShortData((String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * data can not be null
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      short[] shortArray0 = new short[3];
      EncodedShortData encodedShortData0 = new EncodedShortData(shortArray0);
      assertNotNull(encodedShortData0);
      
      short[] shortArray1 = new short[7];
      EncodedShortData encodedShortData1 = new EncodedShortData(shortArray1);
      boolean boolean0 = encodedShortData0.equals((Object) encodedShortData1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      short[] shortArray0 = new short[5];
      EncodedShortData encodedShortData0 = new EncodedShortData(shortArray0);
      assertNotNull(encodedShortData0);
      
      boolean boolean0 = encodedShortData0.equals((Object) "-1888, 0, -1, 1713, 0");
      assertEquals("0, 0, 0, 0, 0", encodedShortData0.encodeData());
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1;
      shortArray0[5] = (short) (-1869);
      EncodedShortData encodedShortData0 = new EncodedShortData(shortArray0);
      assertNotNull(encodedShortData0);
      
      EncodedShortData encodedShortData1 = new EncodedShortData("1, 0, 0, 0, 0, -1869");
      assertNotNull(encodedShortData1);
      
      boolean boolean0 = encodedShortData0.equals((Object) encodedShortData1);
      assertEquals("1, 0, 0, 0, 0, -1869", encodedShortData0.encodeData());
      assertEquals(true, boolean0);
  }
}
