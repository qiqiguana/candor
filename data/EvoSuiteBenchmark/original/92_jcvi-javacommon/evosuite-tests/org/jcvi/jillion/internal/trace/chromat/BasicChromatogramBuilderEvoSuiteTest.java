/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.internal.trace.chromat;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.HashMap;
import java.util.Map;
import org.jcvi.jillion.core.pos.PositionSequence;
import org.jcvi.jillion.internal.trace.chromat.BasicChromatogram;
import org.jcvi.jillion.internal.trace.chromat.BasicChromatogramBuilder;
import org.jcvi.jillion.internal.trace.chromat.DefaultChannel;
import org.jcvi.jillion.internal.trace.chromat.DefaultChannelGroup;
import org.jcvi.jillion.trace.chromat.Channel;
import org.jcvi.jillion.trace.chromat.ChannelGroup;
import org.jcvi.jillion.trace.chromat.Chromatogram;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BasicChromatogramBuilderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BasicChromatogramBuilder basicChromatogramBuilder0 = new BasicChromatogramBuilder("}#>@rP}");
      // Undeclared exception!
      try {
        basicChromatogramBuilder0.build();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      BasicChromatogramBuilder basicChromatogramBuilder0 = new BasicChromatogramBuilder("");
      String string0 = basicChromatogramBuilder0.id();
      assertEquals("", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      short[] shortArray0 = new short[9];
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      PositionSequence positionSequence0 = defaultChannel0.getPositions();
      DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup((Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BasicChromatogram basicChromatogram0 = new BasicChromatogram("", "", byteArray0, positionSequence0, (ChannelGroup) defaultChannelGroup0, (Map<String, String>) hashMap0);
      BasicChromatogramBuilder basicChromatogramBuilder0 = new BasicChromatogramBuilder((Chromatogram) basicChromatogram0);
      assertEquals("", basicChromatogramBuilder0.id());
  }

  @Test
  public void test3()  throws Throwable  {
      BasicChromatogramBuilder basicChromatogramBuilder0 = new BasicChromatogramBuilder("");
      short[] shortArray0 = new short[4];
      BasicChromatogramBuilder basicChromatogramBuilder1 = basicChromatogramBuilder0.cPositions(shortArray0);
      short[] shortArray1 = basicChromatogramBuilder1.cPositions();
      assertFalse(shortArray0.equals(shortArray1));
  }

  @Test
  public void test4()  throws Throwable  {
      BasicChromatogramBuilder basicChromatogramBuilder0 = new BasicChromatogramBuilder("");
      short[] shortArray0 = new short[13];
      BasicChromatogramBuilder basicChromatogramBuilder1 = basicChromatogramBuilder0.tPositions(shortArray0);
      short[] shortArray1 = basicChromatogramBuilder1.tPositions();
      assertFalse(shortArray0.equals(shortArray1));
  }

  @Test
  public void test5()  throws Throwable  {
      BasicChromatogramBuilder basicChromatogramBuilder0 = new BasicChromatogramBuilder("");
      PositionSequence positionSequence0 = basicChromatogramBuilder0.peaks();
      assertNull(positionSequence0);
  }

  @Test
  public void test6()  throws Throwable  {
      BasicChromatogramBuilder basicChromatogramBuilder0 = new BasicChromatogramBuilder("[ange ca} nZt be null");
      byte[] byteArray0 = new byte[1];
      BasicChromatogramBuilder basicChromatogramBuilder1 = basicChromatogramBuilder0.gConfidence(byteArray0);
      assertSame(basicChromatogramBuilder1, basicChromatogramBuilder0);
  }

  @Test
  public void test7()  throws Throwable  {
      BasicChromatogramBuilder basicChromatogramBuilder0 = new BasicChromatogramBuilder("[ange ca} nZt be null");
      short[] shortArray0 = new short[10];
      BasicChromatogramBuilder basicChromatogramBuilder1 = basicChromatogramBuilder0.gPositions(shortArray0);
      short[] shortArray1 = basicChromatogramBuilder1.gPositions();
      assertFalse(shortArray0.equals(shortArray1));
  }

  @Test
  public void test8()  throws Throwable  {
      BasicChromatogramBuilder basicChromatogramBuilder0 = new BasicChromatogramBuilder(")X]PcZ[J.]6");
      byte[] byteArray0 = new byte[1];
      BasicChromatogramBuilder basicChromatogramBuilder1 = basicChromatogramBuilder0.aConfidence(byteArray0);
      assertSame(basicChromatogramBuilder1, basicChromatogramBuilder0);
  }

  @Test
  public void test9()  throws Throwable  {
      BasicChromatogramBuilder basicChromatogramBuilder0 = new BasicChromatogramBuilder("");
      short[] shortArray0 = new short[13];
      basicChromatogramBuilder0.aPositions(shortArray0);
      short[] shortArray1 = basicChromatogramBuilder0.aPositions();
      assertFalse(shortArray1.equals(shortArray0));
  }

  @Test
  public void test10()  throws Throwable  {
      BasicChromatogramBuilder basicChromatogramBuilder0 = new BasicChromatogramBuilder("");
      byte[] byteArray0 = new byte[16];
      BasicChromatogramBuilder basicChromatogramBuilder1 = basicChromatogramBuilder0.cConfidence(byteArray0);
      assertEquals("", basicChromatogramBuilder1.id());
  }

  @Test
  public void test11()  throws Throwable  {
      BasicChromatogramBuilder basicChromatogramBuilder0 = new BasicChromatogramBuilder("");
      byte[] byteArray0 = new byte[16];
      BasicChromatogramBuilder basicChromatogramBuilder1 = basicChromatogramBuilder0.tConfidence(byteArray0);
      assertSame(basicChromatogramBuilder0, basicChromatogramBuilder1);
  }

  @Test
  public void test12()  throws Throwable  {
      BasicChromatogramBuilder basicChromatogramBuilder0 = null;
      try {
        basicChromatogramBuilder0 = new BasicChromatogramBuilder((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * id can not be null
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      BasicChromatogramBuilder basicChromatogramBuilder0 = new BasicChromatogramBuilder(")X]PcZ[J.]6");
      // Undeclared exception!
      try {
        basicChromatogramBuilder0.id((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * id can not be null
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      BasicChromatogramBuilder basicChromatogramBuilder0 = new BasicChromatogramBuilder("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      basicChromatogramBuilder0.properties((Map<String, String>) hashMap0);
      Map<String, String> map0 = basicChromatogramBuilder0.properties();
      assertEquals(0, map0.size());
  }

  @Test
  public void test15()  throws Throwable  {
      BasicChromatogramBuilder basicChromatogramBuilder0 = new BasicChromatogramBuilder("[ange ca} nZt be null");
      Map<String, String> map0 = basicChromatogramBuilder0.properties();
      assertNull(map0);
  }

  @Test
  public void test16()  throws Throwable  {
      BasicChromatogramBuilder basicChromatogramBuilder0 = new BasicChromatogramBuilder("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "");
      BasicChromatogramBuilder basicChromatogramBuilder1 = basicChromatogramBuilder0.properties((Map<String, String>) hashMap0);
      assertEquals("", basicChromatogramBuilder1.id());
  }
}
