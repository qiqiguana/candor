/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.assembly.consed.ace;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.text.ParseException;
import java.util.Date;
import org.jcvi.jillion.assembly.AssembledRead;
import org.jcvi.jillion.assembly.Contig;
import org.jcvi.jillion.assembly.consed.ace.AceFileUtil;
import org.jcvi.jillion.assembly.consed.ace.ReadAceTag;
import org.jcvi.jillion.assembly.consed.ace.WholeAssemblyAceTag;
import org.jcvi.jillion.core.DirectedRange;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.Rangeable;
import org.jcvi.jillion.core.datastore.DataStoreException;
import org.jcvi.jillion.core.qual.QualitySequenceDataStore;
import org.jcvi.jillion.core.residue.nt.NucleotideSequence;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class AceFileUtilEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      try {
        AceFileUtil.parsePhdDate("XECMe.8}2~'e]Z=!");
        fail("Expecting exception: ParseException");
      } catch(ParseException e) {
        /*
         * Unparseable date: \"XECMe.8}2~'e]Z=!\"
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      Date date0 = new Date((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      DirectedRange directedRange0 = DirectedRange.parse((-1L), (-1L), range_CoordinateSystem0);
      Range range0 = directedRange0.asRange();
      ReadAceTag readAceTag0 = new ReadAceTag("", "", "", date0, (Rangeable) range0, true);
      // Undeclared exception!
      try {
        AceFileUtil.writeReadTag(readAceTag0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try {
        AceFileUtil.computeConsensusQualities((Contig<? extends AssembledRead>) null, (QualitySequenceDataStore) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * contig can not be null
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      try {
        AceFileUtil.parseTagDate("u");
        fail("Expecting exception: ParseException");
      } catch(ParseException e) {
        /*
         * Unparseable date: \"u\"
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try {
        AceFileUtil.writeAceFileHeader((-3L), (-3L), (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      Date date0 = new Date((-1L));
      String string0 = AceFileUtil.formatPhdDate(date0);
      assertEquals("Thu Jan 1 00:59:59 1970", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try {
        AceFileUtil.convertToAcePaddedBasecalls((NucleotideSequence) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      Date date0 = new Date();
      WholeAssemblyAceTag wholeAssemblyAceTag0 = new WholeAssemblyAceTag("", "", date0, "");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try {
        AceFileUtil.writeWholeAssemblyTag(wholeAssemblyAceTag0, (OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Pipe not connected
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      AceFileUtil.writeAceContigHeader("XECMe.8}2~'e]Z=!", (long) 8, (long) 8, 8, false, (OutputStream) byteArrayOutputStream0);
      assertEquals(28, byteArrayOutputStream0.size());
      assertEquals("CO XECMe.8}2~'e]Z=! 8 8 8 U\n", byteArrayOutputStream0.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      AceFileUtil.writeAceContigHeader("", (-1L), (-1L), 0, true, (OutputStream) byteArrayOutputStream0);
      assertEquals(14, byteArrayOutputStream0.size());
      assertEquals("CO  -1 -1 0 C\n", byteArrayOutputStream0.toString());
  }
}
