/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.assembly.consed.ace;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import org.jcvi.jillion.assembly.consed.ace.AceContigReadVisitor;
import org.jcvi.jillion.assembly.consed.ace.MultipleAceContigReadVisitor;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MultipleAceContigReadVisitorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      AceContigReadVisitor[] aceContigReadVisitorArray0 = new AceContigReadVisitor[1];
      LinkedList<AceContigReadVisitor> linkedList0 = new LinkedList<AceContigReadVisitor>();
      MultipleAceContigReadVisitor multipleAceContigReadVisitor0 = new MultipleAceContigReadVisitor((List<? extends AceContigReadVisitor>) linkedList0);
      aceContigReadVisitorArray0[0] = (AceContigReadVisitor) multipleAceContigReadVisitor0;
      MultipleAceContigReadVisitor multipleAceContigReadVisitor1 = new MultipleAceContigReadVisitor(aceContigReadVisitorArray0);
      multipleAceContigReadVisitor1.visitBasesLine("");
      assertFalse(multipleAceContigReadVisitor1.equals(multipleAceContigReadVisitor0));
  }

  @Test
  public void test1()  throws Throwable  {
      AceContigReadVisitor[] aceContigReadVisitorArray0 = new AceContigReadVisitor[2];
      LinkedList<AceContigReadVisitor> linkedList0 = new LinkedList<AceContigReadVisitor>();
      MultipleAceContigReadVisitor multipleAceContigReadVisitor0 = new MultipleAceContigReadVisitor((List<? extends AceContigReadVisitor>) linkedList0);
      aceContigReadVisitorArray0[0] = (AceContigReadVisitor) multipleAceContigReadVisitor0;
      MultipleAceContigReadVisitor multipleAceContigReadVisitor1 = new MultipleAceContigReadVisitor(aceContigReadVisitorArray0);
      multipleAceContigReadVisitor1.visitQualityLine(254, 254, 254, 254);
      assertFalse(multipleAceContigReadVisitor1.equals(multipleAceContigReadVisitor0));
  }

  @Test
  public void test2()  throws Throwable  {
      AceContigReadVisitor[] aceContigReadVisitorArray0 = new AceContigReadVisitor[3];
      LinkedList<AceContigReadVisitor> linkedList0 = new LinkedList<AceContigReadVisitor>();
      MultipleAceContigReadVisitor multipleAceContigReadVisitor0 = new MultipleAceContigReadVisitor((List<? extends AceContigReadVisitor>) linkedList0);
      aceContigReadVisitorArray0[0] = (AceContigReadVisitor) multipleAceContigReadVisitor0;
      MultipleAceContigReadVisitor multipleAceContigReadVisitor1 = new MultipleAceContigReadVisitor(aceContigReadVisitorArray0);
      Date date0 = new Date(0L);
      multipleAceContigReadVisitor1.visitTraceDescriptionLine("~f@^0-u", "~f@^0-u", date0);
      assertEquals(0, date0.getSeconds());
  }

  @Test
  public void test3()  throws Throwable  {
      LinkedList<AceContigReadVisitor> linkedList0 = new LinkedList<AceContigReadVisitor>();
      MultipleAceContigReadVisitor multipleAceContigReadVisitor0 = new MultipleAceContigReadVisitor((List<? extends AceContigReadVisitor>) linkedList0);
      multipleAceContigReadVisitor0.visitBasesLine("");
  }

  @Test
  public void test4()  throws Throwable  {
      AceContigReadVisitor[] aceContigReadVisitorArray0 = new AceContigReadVisitor[3];
      LinkedList<AceContigReadVisitor> linkedList0 = new LinkedList<AceContigReadVisitor>();
      MultipleAceContigReadVisitor multipleAceContigReadVisitor0 = new MultipleAceContigReadVisitor((List<? extends AceContigReadVisitor>) linkedList0);
      aceContigReadVisitorArray0[0] = (AceContigReadVisitor) multipleAceContigReadVisitor0;
      MultipleAceContigReadVisitor multipleAceContigReadVisitor1 = new MultipleAceContigReadVisitor(aceContigReadVisitorArray0);
      multipleAceContigReadVisitor1.visitEnd();
      assertFalse(multipleAceContigReadVisitor1.equals(multipleAceContigReadVisitor0));
  }

  @Test
  public void test5()  throws Throwable  {
      LinkedList<AceContigReadVisitor> linkedList0 = new LinkedList<AceContigReadVisitor>();
      MultipleAceContigReadVisitor multipleAceContigReadVisitor0 = new MultipleAceContigReadVisitor((List<? extends AceContigReadVisitor>) linkedList0);
      linkedList0.add((AceContigReadVisitor) multipleAceContigReadVisitor0);
      MultipleAceContigReadVisitor multipleAceContigReadVisitor1 = new MultipleAceContigReadVisitor((List<? extends AceContigReadVisitor>) linkedList0);
      multipleAceContigReadVisitor1.halted();
      assertFalse(multipleAceContigReadVisitor1.equals(multipleAceContigReadVisitor0));
  }
}
