/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.assembly.consed.phd;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.InputStream;
import org.jcvi.jillion.assembly.consed.phd.PhdDataStore;
import org.jcvi.jillion.assembly.consed.phd.PhdFileDataStoreBuilder;
import org.jcvi.jillion.core.datastore.DataStoreFilter;
import org.jcvi.jillion.core.datastore.DataStoreProviderHint;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PhdFileDataStoreBuilderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      File file0 = new File("", "");
      PhdFileDataStoreBuilder phdFileDataStoreBuilder0 = new PhdFileDataStoreBuilder(file0);
      // Undeclared exception!
      try {
        phdFileDataStoreBuilder0.filter((DataStoreFilter) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * filter can not be null
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      PhdFileDataStoreBuilder phdFileDataStoreBuilder0 = null;
      try {
        phdFileDataStoreBuilder0 = new PhdFileDataStoreBuilder((File) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * phd file can not be null
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      File file0 = new File("e");
      PhdFileDataStoreBuilder phdFileDataStoreBuilder0 = null;
      try {
        phdFileDataStoreBuilder0 = new PhdFileDataStoreBuilder(file0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * phd file must exist
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      PhdFileDataStoreBuilder phdFileDataStoreBuilder0 = null;
      try {
        phdFileDataStoreBuilder0 = new PhdFileDataStoreBuilder((InputStream) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * inputStream can not be null
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      File file0 = new File("", "");
      PhdFileDataStoreBuilder phdFileDataStoreBuilder0 = new PhdFileDataStoreBuilder(file0);
      DataStoreProviderHint dataStoreProviderHint0 = DataStoreProviderHint.ITERATION_ONLY;
      phdFileDataStoreBuilder0.hint(dataStoreProviderHint0);
      PhdDataStore phdDataStore0 = (PhdDataStore)phdFileDataStoreBuilder0.build();
      assertEquals(false, phdDataStore0.isClosed());
  }

  @Test
  public void test5()  throws Throwable  {
      File file0 = new File("", "");
      PhdFileDataStoreBuilder phdFileDataStoreBuilder0 = new PhdFileDataStoreBuilder(file0);
      // Undeclared exception!
      try {
        phdFileDataStoreBuilder0.build();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * error bulding phd datastore 
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      FileDescriptor fileDescriptor0 = FileDescriptor.out;
      FileInputStream fileInputStream0 = new FileInputStream(fileDescriptor0);
      PhdFileDataStoreBuilder phdFileDataStoreBuilder0 = new PhdFileDataStoreBuilder((InputStream) fileInputStream0);
      // Undeclared exception!
      try {
        phdFileDataStoreBuilder0.build();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * inputstream has been closed
         */
      }
  }
}
