/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.assembly.ca.frg;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.jcvi.jillion.assembly.ca.frg.Distance;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DistanceEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Distance distance0 = Distance.buildDistance((-1.0F), 6.0F);
      Distance distance1 = Distance.transformIntoCeleraAssemblerDistance(distance0);
      Distance distance2 = Distance.transformIntoCeleraAssemblerDistance(distance1);
      assertEquals(-19, distance1.getMin());
      assertEquals(17, distance1.getMax());
      assertSame(distance1, distance2);
      assertEquals(-19, distance0.getMin());
      assertEquals("-1.000, std: 6.000", distance0.toString());
      assertEquals("-1.000, std: -0.672", distance1.toString());
      assertEquals(17, distance0.getMax());
  }

  @Test
  public void test1()  throws Throwable  {
      Distance distance0 = Distance.buildDistance(0, 1, (float) 0, 0.0F);
      int int0 = distance0.hashCode();
      assertEquals(953312, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      Distance distance0 = Distance.buildDistance((-1858), (-1858), 1.0F, (float) (-1858));
      String string0 = distance0.toString();
      assertNotNull(string0);
      assertEquals(-1858, distance0.getMin());
      assertEquals(-1858, distance0.getMax());
      assertEquals("1.000, std: -1858.000", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      Distance distance0 = Distance.buildDistance((-1.0F), 6.0F);
      Distance distance1 = Distance.transformIntoCeleraAssemblerDistance(distance0);
      boolean boolean0 = distance0.equals((Object) distance1);
      assertEquals(6.0F, distance0.getStdDev(), 0.01F);
      assertEquals(false, boolean0);
      assertEquals(-19, distance0.getMin());
      assertEquals(-19, distance1.getMin());
      assertEquals(17, distance0.getMax());
      assertEquals("-1.000, std: -0.672", distance1.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      Distance distance0 = Distance.buildDistance(941, 941);
      boolean boolean0 = distance0.equals((Object) null);
      assertEquals(941, distance0.getMax());
      assertEquals("941.000, std: 0.000", distance0.toString());
      assertEquals(941, distance0.getMin());
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      Distance distance0 = Distance.buildDistance((-96.57249F), 0.0F);
      boolean boolean0 = distance0.equals((Object) "-96.572, std: -32.529");
      assertEquals(-96, distance0.getMax());
      assertEquals("-96.572, std: 0.000", distance0.toString());
      assertEquals(-96, distance0.getMin());
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      Distance distance0 = Distance.buildDistance((-1858), (-1858), 1.0F, (float) (-1858));
      Distance distance1 = Distance.buildDistance(1, (-2025), 1.0F, (-807.76373F));
      boolean boolean0 = distance0.equals((Object) distance1);
      assertEquals(false, boolean0);
      assertEquals(-2025, distance1.getMax());
      assertEquals("1.000, std: -1858.000", distance0.toString());
      assertEquals(1, distance1.getMin());
  }

  @Test
  public void test7()  throws Throwable  {
      Distance distance0 = Distance.buildDistance((-1858), (-1858), 1.0F, (float) (-1858));
      Distance distance1 = Distance.buildDistance((-1858), (-1858));
      boolean boolean0 = distance0.equals((Object) distance1);
      assertEquals(false, boolean0);
      assertEquals(-1858, distance0.getMax());
      assertEquals(-1858, distance1.getMin());
      assertEquals("-1858.000, std: 0.000", distance1.toString());
      assertEquals(-1858, distance1.getMax());
      assertEquals(-1858, distance0.getMin());
      assertEquals("1.000, std: -1858.000", distance0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      Distance distance0 = Distance.buildDistance((float) 0, 0.0F);
      Distance distance1 = Distance.buildDistance((-1957), 0, (float) 0, (-214.77959F));
      boolean boolean0 = distance0.equals((Object) distance1);
      assertEquals(false, boolean0);
      assertEquals(0, distance0.getMin());
      assertEquals(0, distance1.getMax());
      assertEquals(0, distance0.getMax());
      assertEquals("0.000, std: -214.780", distance1.toString());
      assertEquals(-1957, distance1.getMin());
      assertEquals(0.0F, distance0.getMean(), 0.01F);
  }

  @Test
  public void test9()  throws Throwable  {
      Distance distance0 = Distance.buildDistance(0, 0);
      assertNotNull(distance0);
      
      Distance distance1 = Distance.buildDistance(0, 0);
      boolean boolean0 = distance0.equals((Object) distance1);
      assertEquals(true, boolean0);
      assertEquals(0, distance0.getMax());
      assertEquals(0, distance0.getMin());
      assertEquals("0.000, std: 0.000", distance0.toString());
  }
}
