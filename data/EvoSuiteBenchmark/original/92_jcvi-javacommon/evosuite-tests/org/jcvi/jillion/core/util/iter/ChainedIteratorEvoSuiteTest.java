/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.core.util.iter;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import org.jcvi.jillion.core.util.iter.ChainedIterator;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ChainedIteratorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LinkedList<Iterator<Iterator<Object>>> linkedList0 = new LinkedList<Iterator<Iterator<Object>>>();
      LinkedList<Iterator<Object>> linkedList1 = new LinkedList<Iterator<Object>>();
      Iterator<Iterator<Object>> iterator0 = linkedList1.descendingIterator();
      linkedList0.add(iterator0);
      ChainedIterator<Object> chainedIterator0 = ChainedIterator.create((Collection<? extends Iterator<?>>) linkedList0);
      assertNotNull(chainedIterator0);
      
      // Undeclared exception!
      try {
        chainedIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      LinkedList<Iterator<Iterator<Object>>> linkedList0 = new LinkedList<Iterator<Iterator<Object>>>();
      LinkedList<Iterator<Object>> linkedList1 = new LinkedList<Iterator<Object>>();
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      Iterator<Object> iterator0 = linkedList2.descendingIterator();
      linkedList1.add(iterator0);
      Iterator<Iterator<Object>> iterator1 = linkedList1.descendingIterator();
      linkedList0.add(iterator1);
      ChainedIterator<Object> chainedIterator0 = ChainedIterator.create((Collection<? extends Iterator<?>>) linkedList0);
      assertNotNull(chainedIterator0);
      
      Object object0 = chainedIterator0.next();
      assertNotNull(object0);
      assertEquals(false, chainedIterator0.hasNext());
  }

  @Test
  public void test2()  throws Throwable  {
      LinkedList<Iterator<Iterator<Object>>> linkedList0 = new LinkedList<Iterator<Iterator<Object>>>();
      LinkedList<Iterator<Object>> linkedList1 = new LinkedList<Iterator<Object>>();
      Iterator<Iterator<Object>> iterator0 = linkedList1.descendingIterator();
      linkedList0.add(iterator0);
      linkedList0.add(iterator0);
      ChainedIterator<Object> chainedIterator0 = ChainedIterator.create((Collection<? extends Iterator<?>>) linkedList0);
      assertNotNull(chainedIterator0);
      
      // Undeclared exception!
      try {
        chainedIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      } catch(NoSuchElementException e) {
        /*
         * no more elements in chain
         */
      }
  }
}
