/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.trace.sff;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Date;
import org.jcvi.jillion.trace.sff.Sff454NameUtil;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class Sff454NameUtilEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Date date0 = Sff454NameUtil.getDateOfRun("00000000000000");
      assertNotNull(date0);
      assertEquals("27 Dec 2044 17:18:26 GMT", date0.toGMTString());
  }

  @Test
  public void test1()  throws Throwable  {
      Sff454NameUtil.Location sff454NameUtil_Location0 = new Sff454NameUtil.Location(10, 10);
      assertNotNull(sff454NameUtil_Location0);
      
      int int0 = sff454NameUtil_Location0.getX();
      assertEquals(10, int0);
      assertEquals("Location [x=10, y=10]", sff454NameUtil_Location0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      Sff454NameUtil.Location sff454NameUtil_Location0 = Sff454NameUtil.parseLocationOf("00000000000000");
      assertNotNull(sff454NameUtil_Location0);
      
      String string0 = sff454NameUtil_Location0.toString();
      assertNotNull(string0);
      assertEquals("Location [x=10966, y=994]", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      Sff454NameUtil.Location sff454NameUtil_Location0 = new Sff454NameUtil.Location(869, 869);
      assertNotNull(sff454NameUtil_Location0);
      
      int int0 = sff454NameUtil_Location0.getY();
      assertEquals("Location [x=869, y=869]", sff454NameUtil_Location0.toString());
      assertEquals(869, int0);
  }

  @Test
  public void test4()  throws Throwable  {
      Sff454NameUtil.Location sff454NameUtil_Location0 = new Sff454NameUtil.Location(9, 9);
      assertNotNull(sff454NameUtil_Location0);
      
      int int0 = sff454NameUtil_Location0.hashCode();
      assertEquals(1249, int0);
  }

  @Test
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try {
        Sff454NameUtil.parseUniversalAccessionNumberFrom(">\";");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * not a valid 454 read id: >\";
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try {
        Sff454NameUtil.parseUniversalAccessionNumberFrom("00000000000000");
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * No match found
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      Sff454NameUtil.Location sff454NameUtil_Location0 = new Sff454NameUtil.Location(10, 10);
      assertNotNull(sff454NameUtil_Location0);
      
      // Undeclared exception!
      try {
        Sff454NameUtil.generateAccessionNumberFor("nota valid 454 read id: ", (-1760), sff454NameUtil_Location0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * region number must be >=0 and <=99 : -1760
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      // Undeclared exception!
      try {
        Sff454NameUtil.generateAccessionNumberFor((String) null, 0, (Sff454NameUtil.Location) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * rigRunName can not be null
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      // Undeclared exception!
      try {
        Sff454NameUtil.generateAccessionNumberFor("lrm", 13, (Sff454NameUtil.Location) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * wellLocation can not be null
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      Sff454NameUtil.Location sff454NameUtil_Location0 = new Sff454NameUtil.Location(30, 30);
      assertNotNull(sff454NameUtil_Location0);
      
      // Undeclared exception!
      try {
        Sff454NameUtil.generateAccessionNumberFor("BwN[;$RDa.Wn*0V)", 30, sff454NameUtil_Location0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid rigRunName: BwN[;$RDa.Wn*0V)
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Sff454NameUtil.Location sff454NameUtil_Location0 = Sff454NameUtil.parseLocationOf("00000000000000");
      assertNotNull(sff454NameUtil_Location0);
      
      // Undeclared exception!
      try {
        Sff454NameUtil.generateAccessionNumberFor("00000000000000", 1116, sff454NameUtil_Location0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * region number must be >=0 and <=99 : 1116
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try {
        Sff454NameUtil.getDateOfRun("");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         *  is not a 454 read
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = Sff454NameUtil.getRegionNumber("00000000000000");
      assertEquals(0, int0);
  }

  @Test
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try {
        Sff454NameUtil.getRegionNumber("|`N}Dt0%Xub$");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * |`N}Dt0%Xub$ is not a 454 read
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      Sff454NameUtil.Location sff454NameUtil_Location0 = null;
      try {
        sff454NameUtil_Location0 = new Sff454NameUtil.Location((-6), (-6));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * x coordinate can not be negative
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      Sff454NameUtil.Location sff454NameUtil_Location0 = null;
      try {
        sff454NameUtil_Location0 = new Sff454NameUtil.Location(1, (-989));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * y coordinate can not be negative
         */
      }
  }

  @Test
  public void test17()  throws Throwable  {
      Sff454NameUtil.Location sff454NameUtil_Location0 = new Sff454NameUtil.Location(869, 869);
      assertNotNull(sff454NameUtil_Location0);
      
      boolean boolean0 = sff454NameUtil_Location0.equals((Object) null);
      assertEquals("Location [x=869, y=869]", sff454NameUtil_Location0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      Sff454NameUtil.Location sff454NameUtil_Location0 = new Sff454NameUtil.Location(30, 30);
      assertNotNull(sff454NameUtil_Location0);
      
      Sff454NameUtil.Location sff454NameUtil_Location1 = new Sff454NameUtil.Location(30, 30);
      boolean boolean0 = sff454NameUtil_Location1.equals((Object) sff454NameUtil_Location0);
      assertEquals(true, boolean0);
      assertEquals("Location [x=30, y=30]", sff454NameUtil_Location1.toString());
  }

  @Test
  public void test19()  throws Throwable  {
      Sff454NameUtil.Location sff454NameUtil_Location0 = Sff454NameUtil.parseLocationOf("00000000000000");
      assertNotNull(sff454NameUtil_Location0);
      
      sff454NameUtil_Location0.equals((Object) "Location [x=1116, y=1116]");
      assertEquals("Location [x=10966, y=994]", sff454NameUtil_Location0.toString());
      assertEquals(994, sff454NameUtil_Location0.getY());
  }

  @Test
  public void test20()  throws Throwable  {
      Sff454NameUtil.Location sff454NameUtil_Location0 = Sff454NameUtil.parseLocationOf("00000000000000");
      assertNotNull(sff454NameUtil_Location0);
      
      Sff454NameUtil.Location sff454NameUtil_Location1 = new Sff454NameUtil.Location(1116, 1116);
      boolean boolean0 = sff454NameUtil_Location1.equals((Object) sff454NameUtil_Location0);
      assertEquals("Location [x=10966, y=994]", sff454NameUtil_Location0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try {
        Sff454NameUtil.parseLocationOf("C-i&`e");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * C-i&`e is not a 454 read
         */
      }
  }

  @Test
  public void test22()  throws Throwable  {
      Sff454NameUtil.Location sff454NameUtil_Location0 = Sff454NameUtil.parseLocationOf("000000000RJ000J0");
      assertNotNull(sff454NameUtil_Location0);
      assertEquals("Location [x=7082, y=162]", sff454NameUtil_Location0.toString());
  }

  @Test
  public void test23()  throws Throwable  {
      Sff454NameUtil.Location sff454NameUtil_Location0 = new Sff454NameUtil.Location(9, 9);
      assertNotNull(sff454NameUtil_Location0);
      
      // Undeclared exception!
      try {
        Sff454NameUtil.generateAccessionNumberFor("R_0_0_0_0_0_0_\u0000", 9, sff454NameUtil_Location0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * No match found
         */
      }
  }
}
