/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.assembly.ca.asm;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import org.jcvi.jillion.assembly.ca.asm.AsmContig;
import org.jcvi.jillion.assembly.ca.asm.AsmFileParser;
import org.jcvi.jillion.assembly.ca.asm.AsmVisitor;
import org.jcvi.jillion.assembly.ca.asm.IndexedAsmFileContigDataStore;
import org.jcvi.jillion.core.datastore.DataStore;
import org.jcvi.jillion.core.datastore.DataStoreClosedException;
import org.jcvi.jillion.core.datastore.DataStoreException;
import org.jcvi.jillion.core.residue.nt.NucleotideSequence;
import org.jcvi.jillion.core.util.iter.StreamingIterator;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class IndexedAsmFileContigDataStoreEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      HashMap<String, AsmVisitor.AsmVisitorCallback.AsmVisitorMemento> hashMap0 = new HashMap<String, AsmVisitor.AsmVisitorCallback.AsmVisitorMemento>();
      IndexedAsmFileContigDataStore indexedAsmFileContigDataStore0 = new IndexedAsmFileContigDataStore((AsmFileParser) null, (DataStore<NucleotideSequence>) null, (Map<String, AsmVisitor.AsmVisitorCallback.AsmVisitorMemento>) hashMap0);
      StreamingIterator<AsmContig> streamingIterator0 = indexedAsmFileContigDataStore0.iterator();
      assertNotNull(streamingIterator0);
      assertEquals(false, indexedAsmFileContigDataStore0.isClosed());
  }

  @Test
  public void test1()  throws Throwable  {
      HashMap<String, AsmVisitor.AsmVisitorCallback.AsmVisitorMemento> hashMap0 = new HashMap<String, AsmVisitor.AsmVisitorCallback.AsmVisitorMemento>();
      IndexedAsmFileContigDataStore indexedAsmFileContigDataStore0 = new IndexedAsmFileContigDataStore((AsmFileParser) null, (DataStore<NucleotideSequence>) null, (Map<String, AsmVisitor.AsmVisitorCallback.AsmVisitorMemento>) hashMap0);
      indexedAsmFileContigDataStore0.getNumberOfRecords();
      assertEquals(false, indexedAsmFileContigDataStore0.isClosed());
  }

  @Test
  public void test2()  throws Throwable  {
      HashMap<String, AsmVisitor.AsmVisitorCallback.AsmVisitorMemento> hashMap0 = new HashMap<String, AsmVisitor.AsmVisitorCallback.AsmVisitorMemento>();
      IndexedAsmFileContigDataStore indexedAsmFileContigDataStore0 = new IndexedAsmFileContigDataStore((AsmFileParser) null, (DataStore<NucleotideSequence>) null, (Map<String, AsmVisitor.AsmVisitorCallback.AsmVisitorMemento>) hashMap0);
      boolean boolean0 = indexedAsmFileContigDataStore0.isClosed();
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      HashMap<String, AsmVisitor.AsmVisitorCallback.AsmVisitorMemento> hashMap0 = new HashMap<String, AsmVisitor.AsmVisitorCallback.AsmVisitorMemento>(1037);
      IndexedAsmFileContigDataStore indexedAsmFileContigDataStore0 = new IndexedAsmFileContigDataStore((AsmFileParser) null, (DataStore<NucleotideSequence>) null, (Map<String, AsmVisitor.AsmVisitorCallback.AsmVisitorMemento>) hashMap0);
      assertEquals(false, indexedAsmFileContigDataStore0.isClosed());
      
      indexedAsmFileContigDataStore0.close();
      // Undeclared exception!
      try {
        indexedAsmFileContigDataStore0.get("4P8zISp\u0006qLn23C");
        fail("Expecting exception: DataStoreClosedException");
      } catch(DataStoreClosedException e) {
        /*
         * datastore is closed
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      HashMap<String, AsmVisitor.AsmVisitorCallback.AsmVisitorMemento> hashMap0 = new HashMap<String, AsmVisitor.AsmVisitorCallback.AsmVisitorMemento>();
      IndexedAsmFileContigDataStore indexedAsmFileContigDataStore0 = new IndexedAsmFileContigDataStore((AsmFileParser) null, (DataStore<NucleotideSequence>) null, (Map<String, AsmVisitor.AsmVisitorCallback.AsmVisitorMemento>) hashMap0);
      boolean boolean0 = indexedAsmFileContigDataStore0.contains("1R[y{>qGJ(sa&R");
      assertEquals(false, indexedAsmFileContigDataStore0.isClosed());
      assertEquals(true, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      HashMap<String, AsmVisitor.AsmVisitorCallback.AsmVisitorMemento> hashMap0 = new HashMap<String, AsmVisitor.AsmVisitorCallback.AsmVisitorMemento>();
      IndexedAsmFileContigDataStore indexedAsmFileContigDataStore0 = new IndexedAsmFileContigDataStore((AsmFileParser) null, (DataStore<NucleotideSequence>) null, (Map<String, AsmVisitor.AsmVisitorCallback.AsmVisitorMemento>) hashMap0);
      indexedAsmFileContigDataStore0.get("1R[y{>qGJ(sa&R");
      assertEquals(false, indexedAsmFileContigDataStore0.isClosed());
  }
}
