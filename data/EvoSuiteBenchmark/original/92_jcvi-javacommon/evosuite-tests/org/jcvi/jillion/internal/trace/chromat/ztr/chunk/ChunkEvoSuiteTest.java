/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.internal.trace.chromat.ztr.chunk;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.NoSuchElementException;
import org.jcvi.jillion.core.residue.nt.NucleotideSequence;
import org.jcvi.jillion.internal.trace.chromat.ztr.chunk.Chunk;
import org.jcvi.jillion.internal.trace.chromat.ztr.chunk.ChunkException;
import org.jcvi.jillion.trace.TraceDecoderException;
import org.jcvi.jillion.trace.TraceEncoderException;
import org.jcvi.jillion.trace.chromat.Chromatogram;
import org.jcvi.jillion.trace.chromat.ChromatogramFileVisitor;
import org.jcvi.jillion.trace.chromat.abi.AbiChromatogramBuilder;
import org.jcvi.jillion.trace.chromat.ztr.ZtrChromatogramBuilder;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ChunkEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Chunk chunk0 = Chunk.SMP4;
      byte[] byteArray0 = new byte[11];
      // Undeclared exception!
      try {
        chunk0.parseData(byteArray0, (ZtrChromatogramBuilder) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      Chunk chunk0 = Chunk.COMMENTS;
      byte[] byteArray0 = new byte[1];
      AbiChromatogramBuilder.AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder.AbiChromatogramBuilderVisitor("eaf_gT}N*W_p, k*KF");
      NucleotideSequence nucleotideSequence0 = chunk0.parseData(byteArray0, (ChromatogramFileVisitor) abiChromatogramBuilder_AbiChromatogramBuilderVisitor0, (NucleotideSequence) null);
      assertNull(nucleotideSequence0);
  }

  @Test
  public void test2()  throws Throwable  {
      Chunk chunk0 = Chunk.CONFIDENCES;
      byte[] byteArray0 = new byte[1];
      AbiChromatogramBuilder.AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder.AbiChromatogramBuilderVisitor("v)v-J#@l`QD~SY%Q");
      // Undeclared exception!
      try {
        chunk0.parseData(byteArray0, (ChromatogramFileVisitor) abiChromatogramBuilder_AbiChromatogramBuilderVisitor0, (NucleotideSequence) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      Chunk chunk0 = Chunk.BASE;
      byte[] byteArray0 = new byte[1];
      ZtrChromatogramBuilder ztrChromatogramBuilder0 = new ZtrChromatogramBuilder("*9*:leKw` 6hrK[C:e");
      chunk0.parseData(byteArray0, ztrChromatogramBuilder0);
      assertEquals("BASE", chunk0.name());
  }

  @Test
  public void test4()  throws Throwable  {
      Chunk chunk0 = Chunk.BASE;
      byte[] byteArray0 = new byte[1];
      AbiChromatogramBuilder.AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder.AbiChromatogramBuilderVisitor("sEZzZ5H");
      NucleotideSequence nucleotideSequence0 = chunk0.parseData(byteArray0, (ChromatogramFileVisitor) abiChromatogramBuilder_AbiChromatogramBuilderVisitor0, (NucleotideSequence) null);
      assertEquals(0L, nucleotideSequence0.getLength());
  }

  @Test
  public void test5()  throws Throwable  {
      Chunk chunk0 = Chunk.CLIP;
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try {
        chunk0.parseChunk((InputStream) byteArrayInputStream0, (ChromatogramFileVisitor) null, (NucleotideSequence) null);
        fail("Expecting exception: TraceDecoderException");
      } catch(TraceDecoderException e) {
        /*
         * error decoding chunk
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      try {
        Chunk.getChunk("% u|VP2$4.L!b[3)");
        fail("Expecting exception: ChunkException");
      } catch(ChunkException e) {
        /*
         * header '% u|VP2$4.L!b[3)' is unknown
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      Chunk chunk0 = Chunk.POSITIONS;
      byte[] byteArray0 = new byte[8];
      ZtrChromatogramBuilder ztrChromatogramBuilder0 = new ZtrChromatogramBuilder("$*u:Y5n>)");
      chunk0.parseData(byteArray0, ztrChromatogramBuilder0);
      assertEquals("POSITIONS", chunk0.name());
  }

  @Test
  public void test8()  throws Throwable  {
      Chunk chunk0 = Chunk.POSITIONS;
      byte[] byteArray0 = new byte[8];
      AbiChromatogramBuilder.AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder.AbiChromatogramBuilderVisitor("$*u:Y5n>)");
      NucleotideSequence nucleotideSequence0 = chunk0.parseData(byteArray0, (ChromatogramFileVisitor) abiChromatogramBuilder_AbiChromatogramBuilderVisitor0, (NucleotideSequence) null);
      assertNull(nucleotideSequence0);
  }

  @Test
  public void test9()  throws Throwable  {
      Chunk chunk0 = Chunk.CLIP;
      byte[] byteArray0 = new byte[4];
      ZtrChromatogramBuilder ztrChromatogramBuilder0 = new ZtrChromatogramBuilder("o+]P {29_/mW.c)22F");
      try {
        chunk0.parseData(byteArray0, ztrChromatogramBuilder0);
        fail("Expecting exception: TraceDecoderException");
      } catch(TraceDecoderException e) {
        /*
         * Invalid DefaultClip size, num of bytes = 4
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      Chunk chunk0 = Chunk.CLIP;
      byte[] byteArray0 = new byte[9];
      AbiChromatogramBuilder.AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder.AbiChromatogramBuilderVisitor("");
      NucleotideSequence nucleotideSequence0 = chunk0.parseData(byteArray0, (ChromatogramFileVisitor) abiChromatogramBuilder_AbiChromatogramBuilderVisitor0, (NucleotideSequence) null);
      assertNull(nucleotideSequence0);
  }

  @Test
  public void test11()  throws Throwable  {
      Chunk chunk0 = Chunk.CLIP;
      byte[] byteArray0 = new byte[10];
      try {
        chunk0.parseData(byteArray0, (ChromatogramFileVisitor) null, (NucleotideSequence) null);
        fail("Expecting exception: TraceDecoderException");
      } catch(TraceDecoderException e) {
        /*
         * Invalid DefaultClip size, num of bytes = 10
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      Chunk chunk0 = Chunk.CLIP;
      byte[] byteArray0 = chunk0.encodeChunk((Chromatogram) null);
      assertNotNull(byteArray0);
  }

  @Test
  public void test13()  throws Throwable  {
      Chunk chunk0 = Chunk.COMMENTS;
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)89;
      ZtrChromatogramBuilder ztrChromatogramBuilder0 = new ZtrChromatogramBuilder("]e~+-;Xx");
      // Undeclared exception!
      try {
        chunk0.parseData(byteArray0, ztrChromatogramBuilder0);
        fail("Expecting exception: NoSuchElementException");
      } catch(NoSuchElementException e) {
      }
  }

  @Test
  public void test14()  throws Throwable  {
      Chunk chunk0 = Chunk.COMMENTS;
      ZtrChromatogramBuilder ztrChromatogramBuilder0 = new ZtrChromatogramBuilder("COMMENTS");
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try {
        chunk0.parseChunk(ztrChromatogramBuilder0, (InputStream) byteArrayInputStream0);
        fail("Expecting exception: TraceDecoderException");
      } catch(TraceDecoderException e) {
        /*
         * error reading chunk length
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      Chunk chunk0 = Chunk.CLIP;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      chunk0.readLength((InputStream) byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
  }

  @Test
  public void test16()  throws Throwable  {
      Chunk chunk0 = Chunk.CONFIDENCES;
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) (byte)1, (int) (byte)1);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) byteArrayInputStream0);
      chunk0.decodeChunk((InputStream) bufferedInputStream0, (int) (byte)1);
  }
}
