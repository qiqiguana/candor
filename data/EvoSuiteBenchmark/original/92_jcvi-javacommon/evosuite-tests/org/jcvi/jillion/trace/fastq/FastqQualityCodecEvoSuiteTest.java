/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.trace.fastq;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.jcvi.jillion.core.Sequence;
import org.jcvi.jillion.core.qual.PhredQuality;
import org.jcvi.jillion.core.qual.QualitySequence;
import org.jcvi.jillion.trace.fastq.FastqQualityCodec;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class FastqQualityCodecEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      FastqQualityCodec fastqQualityCodec0 = FastqQualityCodec.SOLEXA;
      PhredQuality phredQuality0 = fastqQualityCodec0.decode('G');
      assertNotNull(phredQuality0);
      
      char char0 = fastqQualityCodec0.encode(phredQuality0);
      assertEquals('G', char0);
  }

  @Test
  public void test1()  throws Throwable  {
      FastqQualityCodec fastqQualityCodec0 = FastqQualityCodec.SANGER;
      QualitySequence qualitySequence0 = fastqQualityCodec0.decode("SANGER");
      assertNotNull(qualitySequence0);
      
      String string0 = fastqQualityCodec0.encode((Sequence<PhredQuality>) qualitySequence0);
      assertEquals("SANGER", string0);
      assertNotNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      FastqQualityCodec fastqQualityCodec0 = FastqQualityCodec.ILLUMINA;
      QualitySequence qualitySequence0 = fastqQualityCodec0.decode("^");
      assertNotNull(qualitySequence0);
      
      String string0 = fastqQualityCodec0.encode((Sequence<PhredQuality>) qualitySequence0);
      assertEquals("^", string0);
      assertNotNull(string0);
  }
}
