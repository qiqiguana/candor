/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.core.residue.nt;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.List;
import java.util.SortedMap;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.residue.nt.DefaultReferenceEncodedNucleotideSequence;
import org.jcvi.jillion.core.residue.nt.Nucleotide;
import org.jcvi.jillion.core.residue.nt.NucleotideSequence;
import org.jcvi.jillion.core.residue.nt.NucleotideSequenceBuilder;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DefaultReferenceEncodedNucleotideSequenceEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      NucleotideSequenceBuilder nucleotideSequenceBuilder0 = new NucleotideSequenceBuilder();
      NucleotideSequence nucleotideSequence0 = (NucleotideSequence)nucleotideSequenceBuilder0.build();
      DefaultReferenceEncodedNucleotideSequence defaultReferenceEncodedNucleotideSequence0 = new DefaultReferenceEncodedNucleotideSequence(nucleotideSequence0, nucleotideSequenceBuilder0, 0);
      NucleotideSequence nucleotideSequence1 = defaultReferenceEncodedNucleotideSequence0.getReferenceSequence();
      assertSame(nucleotideSequence1, nucleotideSequence0);
  }

  @Test
  public void test1()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Keto;
      NucleotideSequenceBuilder nucleotideSequenceBuilder0 = new NucleotideSequenceBuilder(nucleotide0);
      NucleotideSequence nucleotideSequence0 = (NucleotideSequence)nucleotideSequenceBuilder0.build();
      DefaultReferenceEncodedNucleotideSequence defaultReferenceEncodedNucleotideSequence0 = new DefaultReferenceEncodedNucleotideSequence(nucleotideSequence0, nucleotideSequenceBuilder0, 0);
      assertNotNull(defaultReferenceEncodedNucleotideSequence0);
      
      defaultReferenceEncodedNucleotideSequence0.hashCode();
      int int0 = defaultReferenceEncodedNucleotideSequence0.hashCode();
      assertEquals(1904354598, int0);
      assertEquals(1L, defaultReferenceEncodedNucleotideSequence0.getLength());
      assertEquals("K", defaultReferenceEncodedNucleotideSequence0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      NucleotideSequenceBuilder nucleotideSequenceBuilder0 = new NucleotideSequenceBuilder("Y");
      NucleotideSequence nucleotideSequence0 = (NucleotideSequence)nucleotideSequenceBuilder0.build();
      DefaultReferenceEncodedNucleotideSequence defaultReferenceEncodedNucleotideSequence0 = new DefaultReferenceEncodedNucleotideSequence(nucleotideSequence0, "Y", 0);
      assertNotNull(defaultReferenceEncodedNucleotideSequence0);
      
      DefaultReferenceEncodedNucleotideSequence defaultReferenceEncodedNucleotideSequence1 = new DefaultReferenceEncodedNucleotideSequence((NucleotideSequence) defaultReferenceEncodedNucleotideSequence0, nucleotideSequenceBuilder0, 0);
      assertNotNull(defaultReferenceEncodedNucleotideSequence1);
      
      boolean boolean0 = defaultReferenceEncodedNucleotideSequence0.equals((Object) defaultReferenceEncodedNucleotideSequence1);
      assertEquals(true, boolean0);
      assertEquals("Y", defaultReferenceEncodedNucleotideSequence0.toString());
      assertEquals(1L, defaultReferenceEncodedNucleotideSequence1.getUngappedLength());
  }

  @Test
  public void test3()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Keto;
      NucleotideSequenceBuilder nucleotideSequenceBuilder0 = new NucleotideSequenceBuilder(nucleotide0);
      NucleotideSequence nucleotideSequence0 = (NucleotideSequence)nucleotideSequenceBuilder0.build();
      DefaultReferenceEncodedNucleotideSequence defaultReferenceEncodedNucleotideSequence0 = new DefaultReferenceEncodedNucleotideSequence(nucleotideSequence0, nucleotideSequenceBuilder0, 0);
      assertNotNull(defaultReferenceEncodedNucleotideSequence0);
      
      SortedMap<Integer, Nucleotide> sortedMap0 = defaultReferenceEncodedNucleotideSequence0.getDifferenceMap();
      assertNotNull(sortedMap0);
      assertEquals(true, sortedMap0.isEmpty());
  }

  @Test
  public void test4()  throws Throwable  {
      NucleotideSequenceBuilder nucleotideSequenceBuilder0 = new NucleotideSequenceBuilder();
      Nucleotide nucleotide0 = Nucleotide.Cytosine;
      nucleotideSequenceBuilder0.append(nucleotide0);
      NucleotideSequenceBuilder nucleotideSequenceBuilder1 = (NucleotideSequenceBuilder)nucleotideSequenceBuilder0.prepend((Iterable) nucleotideSequenceBuilder0);
      NucleotideSequence nucleotideSequence0 = (NucleotideSequence)nucleotideSequenceBuilder1.build();
      nucleotideSequenceBuilder0.complement();
      DefaultReferenceEncodedNucleotideSequence defaultReferenceEncodedNucleotideSequence0 = new DefaultReferenceEncodedNucleotideSequence(nucleotideSequence0, nucleotideSequenceBuilder0, 0);
      assertNotNull(defaultReferenceEncodedNucleotideSequence0);
      
      SortedMap<Integer, Nucleotide> sortedMap0 = defaultReferenceEncodedNucleotideSequence0.getDifferenceMap();
      assertNotNull(sortedMap0);
      assertEquals(2, sortedMap0.size());
      assertEquals("GG", defaultReferenceEncodedNucleotideSequence0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Gap;
      NucleotideSequenceBuilder nucleotideSequenceBuilder0 = new NucleotideSequenceBuilder(nucleotide0);
      NucleotideSequence nucleotideSequence0 = (NucleotideSequence)nucleotideSequenceBuilder0.build();
      DefaultReferenceEncodedNucleotideSequence defaultReferenceEncodedNucleotideSequence0 = new DefaultReferenceEncodedNucleotideSequence(nucleotideSequence0, nucleotideSequenceBuilder0, 0);
      assertNotNull(defaultReferenceEncodedNucleotideSequence0);
      
      List<Integer> list0 = defaultReferenceEncodedNucleotideSequence0.getGapOffsets();
      assertNotNull(list0);
      assertEquals(1, defaultReferenceEncodedNucleotideSequence0.getNumberOfGaps());
      assertEquals(false, list0.isEmpty());
  }

  @Test
  public void test6()  throws Throwable  {
      NucleotideSequenceBuilder nucleotideSequenceBuilder0 = new NucleotideSequenceBuilder("");
      NucleotideSequence nucleotideSequence0 = (NucleotideSequence)nucleotideSequenceBuilder0.build();
      DefaultReferenceEncodedNucleotideSequence defaultReferenceEncodedNucleotideSequence0 = null;
      try {
        defaultReferenceEncodedNucleotideSequence0 = new DefaultReferenceEncodedNucleotideSequence(nucleotideSequence0, "", 1317);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * sequences extends beyond reference by 1317 bases
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      DefaultReferenceEncodedNucleotideSequence defaultReferenceEncodedNucleotideSequence0 = null;
      try {
        defaultReferenceEncodedNucleotideSequence0 = new DefaultReferenceEncodedNucleotideSequence((NucleotideSequence) null, "", (-1127));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * can not start before reference: -1127
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      NucleotideSequenceBuilder nucleotideSequenceBuilder0 = new NucleotideSequenceBuilder();
      NucleotideSequence nucleotideSequence0 = (NucleotideSequence)nucleotideSequenceBuilder0.build();
      DefaultReferenceEncodedNucleotideSequence defaultReferenceEncodedNucleotideSequence0 = new DefaultReferenceEncodedNucleotideSequence(nucleotideSequence0, nucleotideSequenceBuilder0, 0);
      // Undeclared exception!
      try {
        defaultReferenceEncodedNucleotideSequence0.iterator((Range) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * range can not be null
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Cytosine;
      NucleotideSequenceBuilder nucleotideSequenceBuilder0 = new NucleotideSequenceBuilder(nucleotide0);
      nucleotideSequenceBuilder0.append(nucleotide0);
      NucleotideSequence nucleotideSequence0 = (NucleotideSequence)nucleotideSequenceBuilder0.build();
      nucleotideSequenceBuilder0.complement();
      DefaultReferenceEncodedNucleotideSequence defaultReferenceEncodedNucleotideSequence0 = new DefaultReferenceEncodedNucleotideSequence(nucleotideSequence0, nucleotideSequenceBuilder0, 0);
      assertNotNull(defaultReferenceEncodedNucleotideSequence0);
      
      String string0 = defaultReferenceEncodedNucleotideSequence0.toString();
      assertNotNull(string0);
      assertEquals("GG", string0);
  }

  @Test
  public void test10()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Keto;
      NucleotideSequenceBuilder nucleotideSequenceBuilder0 = new NucleotideSequenceBuilder(nucleotide0);
      NucleotideSequence nucleotideSequence0 = (NucleotideSequence)nucleotideSequenceBuilder0.build();
      DefaultReferenceEncodedNucleotideSequence defaultReferenceEncodedNucleotideSequence0 = new DefaultReferenceEncodedNucleotideSequence(nucleotideSequence0, nucleotideSequenceBuilder0, 0);
      // Undeclared exception!
      try {
        defaultReferenceEncodedNucleotideSequence0.get((-14L));
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * invalid offset -14
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Cytosine;
      NucleotideSequenceBuilder nucleotideSequenceBuilder0 = new NucleotideSequenceBuilder(nucleotide0);
      NucleotideSequence nucleotideSequence0 = (NucleotideSequence)nucleotideSequenceBuilder0.build();
      DefaultReferenceEncodedNucleotideSequence defaultReferenceEncodedNucleotideSequence0 = new DefaultReferenceEncodedNucleotideSequence(nucleotideSequence0, nucleotideSequenceBuilder0, 0);
      Nucleotide nucleotide1 = (Nucleotide)defaultReferenceEncodedNucleotideSequence0.get((long) 0);
      assertEquals(false, nucleotide1.isGap());
  }

  @Test
  public void test12()  throws Throwable  {
      NucleotideSequenceBuilder nucleotideSequenceBuilder0 = new NucleotideSequenceBuilder(240);
      NucleotideSequence nucleotideSequence0 = (NucleotideSequence)nucleotideSequenceBuilder0.build();
      DefaultReferenceEncodedNucleotideSequence defaultReferenceEncodedNucleotideSequence0 = new DefaultReferenceEncodedNucleotideSequence(nucleotideSequence0, nucleotideSequenceBuilder0, 0);
      // Undeclared exception!
      try {
        defaultReferenceEncodedNucleotideSequence0.get((long) 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * invalid offset 0
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Cytosine;
      NucleotideSequenceBuilder nucleotideSequenceBuilder0 = new NucleotideSequenceBuilder(nucleotide0);
      NucleotideSequence nucleotideSequence0 = (NucleotideSequence)nucleotideSequenceBuilder0.build();
      nucleotideSequenceBuilder0.complement();
      DefaultReferenceEncodedNucleotideSequence defaultReferenceEncodedNucleotideSequence0 = new DefaultReferenceEncodedNucleotideSequence(nucleotideSequence0, nucleotideSequenceBuilder0, 0);
      assertNotNull(defaultReferenceEncodedNucleotideSequence0);
      
      Nucleotide nucleotide1 = (Nucleotide)defaultReferenceEncodedNucleotideSequence0.get((long) 0);
      assertEquals(Nucleotide.Guanine, nucleotide1);
  }

  @Test
  public void test14()  throws Throwable  {
      NucleotideSequenceBuilder nucleotideSequenceBuilder0 = new NucleotideSequenceBuilder();
      Nucleotide nucleotide0 = Nucleotide.Strong;
      nucleotideSequenceBuilder0.append(nucleotide0);
      Nucleotide nucleotide1 = Nucleotide.Thymine;
      nucleotideSequenceBuilder0.append(nucleotide1);
      NucleotideSequence nucleotideSequence0 = (NucleotideSequence)nucleotideSequenceBuilder0.build();
      nucleotideSequenceBuilder0.complement();
      DefaultReferenceEncodedNucleotideSequence defaultReferenceEncodedNucleotideSequence0 = new DefaultReferenceEncodedNucleotideSequence(nucleotideSequence0, nucleotideSequenceBuilder0, 0);
      assertNotNull(defaultReferenceEncodedNucleotideSequence0);
      
      Nucleotide nucleotide2 = (Nucleotide)defaultReferenceEncodedNucleotideSequence0.get((long) 0);
      assertEquals("SA", defaultReferenceEncodedNucleotideSequence0.toString());
      assertEquals(Nucleotide.Strong, nucleotide2);
  }

  @Test
  public void test15()  throws Throwable  {
      NucleotideSequenceBuilder nucleotideSequenceBuilder0 = new NucleotideSequenceBuilder("Y");
      nucleotideSequenceBuilder0.complement();
      NucleotideSequence nucleotideSequence0 = (NucleotideSequence)nucleotideSequenceBuilder0.build();
      DefaultReferenceEncodedNucleotideSequence defaultReferenceEncodedNucleotideSequence0 = new DefaultReferenceEncodedNucleotideSequence(nucleotideSequence0, "Y", 0);
      assertNotNull(defaultReferenceEncodedNucleotideSequence0);
      
      long long0 = defaultReferenceEncodedNucleotideSequence0.getUngappedLength();
      assertEquals(1L, long0);
      assertEquals("Y", defaultReferenceEncodedNucleotideSequence0.toString());
  }

  @Test
  public void test16()  throws Throwable  {
      NucleotideSequenceBuilder nucleotideSequenceBuilder0 = new NucleotideSequenceBuilder();
      Nucleotide nucleotide0 = Nucleotide.Cytosine;
      nucleotideSequenceBuilder0.append(nucleotide0);
      NucleotideSequenceBuilder nucleotideSequenceBuilder1 = (NucleotideSequenceBuilder)nucleotideSequenceBuilder0.prepend((Iterable) nucleotideSequenceBuilder0);
      NucleotideSequence nucleotideSequence0 = (NucleotideSequence)nucleotideSequenceBuilder1.build();
      nucleotideSequenceBuilder0.complement();
      DefaultReferenceEncodedNucleotideSequence defaultReferenceEncodedNucleotideSequence0 = new DefaultReferenceEncodedNucleotideSequence(nucleotideSequence0, nucleotideSequenceBuilder0, 0);
      assertNotNull(defaultReferenceEncodedNucleotideSequence0);
      
      List<Integer> list0 = defaultReferenceEncodedNucleotideSequence0.getGapOffsets();
      assertEquals("GG", defaultReferenceEncodedNucleotideSequence0.toString());
      assertNotNull(list0);
      assertEquals(2L, defaultReferenceEncodedNucleotideSequence0.getUngappedLength());
  }

  @Test
  public void test17()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Gap;
      NucleotideSequenceBuilder nucleotideSequenceBuilder0 = new NucleotideSequenceBuilder(nucleotide0);
      nucleotideSequenceBuilder0.append(nucleotide0);
      NucleotideSequence nucleotideSequence0 = (NucleotideSequence)nucleotideSequenceBuilder0.build();
      DefaultReferenceEncodedNucleotideSequence defaultReferenceEncodedNucleotideSequence0 = new DefaultReferenceEncodedNucleotideSequence(nucleotideSequence0, "", 1);
      assertNotNull(defaultReferenceEncodedNucleotideSequence0);
      
      boolean boolean0 = defaultReferenceEncodedNucleotideSequence0.isGap(1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      NucleotideSequenceBuilder nucleotideSequenceBuilder0 = new NucleotideSequenceBuilder();
      NucleotideSequence nucleotideSequence0 = (NucleotideSequence)nucleotideSequenceBuilder0.build();
      DefaultReferenceEncodedNucleotideSequence defaultReferenceEncodedNucleotideSequence0 = new DefaultReferenceEncodedNucleotideSequence(nucleotideSequence0, nucleotideSequenceBuilder0, 0);
      assertNotNull(defaultReferenceEncodedNucleotideSequence0);
      
      int int0 = defaultReferenceEncodedNucleotideSequence0.hashCode();
      assertEquals(0L, defaultReferenceEncodedNucleotideSequence0.getUngappedLength());
      assertEquals(0, int0);
  }

  @Test
  public void test19()  throws Throwable  {
      NucleotideSequenceBuilder nucleotideSequenceBuilder0 = new NucleotideSequenceBuilder("");
      NucleotideSequence nucleotideSequence0 = (NucleotideSequence)nucleotideSequenceBuilder0.build();
      DefaultReferenceEncodedNucleotideSequence defaultReferenceEncodedNucleotideSequence0 = new DefaultReferenceEncodedNucleotideSequence(nucleotideSequence0, nucleotideSequenceBuilder0, 0);
      assertNotNull(defaultReferenceEncodedNucleotideSequence0);
      
      boolean boolean0 = defaultReferenceEncodedNucleotideSequence0.equals((Object) "");
      assertEquals(false, boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      NucleotideSequenceBuilder nucleotideSequenceBuilder0 = new NucleotideSequenceBuilder("Y");
      NucleotideSequence nucleotideSequence0 = (NucleotideSequence)nucleotideSequenceBuilder0.build();
      DefaultReferenceEncodedNucleotideSequence defaultReferenceEncodedNucleotideSequence0 = new DefaultReferenceEncodedNucleotideSequence(nucleotideSequence0, "Y", 0);
      assertNotNull(defaultReferenceEncodedNucleotideSequence0);
      
      boolean boolean0 = defaultReferenceEncodedNucleotideSequence0.equals((Object) defaultReferenceEncodedNucleotideSequence0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      NucleotideSequenceBuilder nucleotideSequenceBuilder0 = new NucleotideSequenceBuilder();
      Nucleotide nucleotide0 = Nucleotide.Strong;
      nucleotideSequenceBuilder0.append(nucleotide0);
      NucleotideSequence nucleotideSequence0 = (NucleotideSequence)nucleotideSequenceBuilder0.build();
      DefaultReferenceEncodedNucleotideSequence defaultReferenceEncodedNucleotideSequence0 = new DefaultReferenceEncodedNucleotideSequence(nucleotideSequence0, nucleotideSequenceBuilder0, 0);
      assertNotNull(defaultReferenceEncodedNucleotideSequence0);
      
      DefaultReferenceEncodedNucleotideSequence defaultReferenceEncodedNucleotideSequence1 = new DefaultReferenceEncodedNucleotideSequence((NucleotideSequence) defaultReferenceEncodedNucleotideSequence0, "", 0);
      assertNotNull(defaultReferenceEncodedNucleotideSequence1);
      
      boolean boolean0 = defaultReferenceEncodedNucleotideSequence0.equals((Object) defaultReferenceEncodedNucleotideSequence1);
      assertEquals("S", defaultReferenceEncodedNucleotideSequence0.toString());
      assertFalse(defaultReferenceEncodedNucleotideSequence1.equals(defaultReferenceEncodedNucleotideSequence0));
      assertEquals(0L, defaultReferenceEncodedNucleotideSequence1.getUngappedLength());
      assertEquals(false, boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      NucleotideSequenceBuilder nucleotideSequenceBuilder0 = new NucleotideSequenceBuilder("Y");
      nucleotideSequenceBuilder0.complement();
      NucleotideSequence nucleotideSequence0 = (NucleotideSequence)nucleotideSequenceBuilder0.build();
      DefaultReferenceEncodedNucleotideSequence defaultReferenceEncodedNucleotideSequence0 = new DefaultReferenceEncodedNucleotideSequence(nucleotideSequence0, "Y", 0);
      assertNotNull(defaultReferenceEncodedNucleotideSequence0);
      
      boolean boolean0 = defaultReferenceEncodedNucleotideSequence0.equals((Object) nucleotideSequence0);
      assertEquals(1L, defaultReferenceEncodedNucleotideSequence0.getUngappedLength());
      assertEquals("Y", defaultReferenceEncodedNucleotideSequence0.toString());
      assertEquals(false, boolean0);
  }
}
