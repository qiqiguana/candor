/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.assembly.clc.cas.consed;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.File;
import java.util.Date;
import org.jcvi.jillion.assembly.clc.cas.consed.ChromatDirFastaConsedPhdAdaptedIterator;
import org.jcvi.jillion.core.qual.PhredQuality;
import org.jcvi.jillion.core.util.iter.StreamingIterator;
import org.jcvi.jillion.fasta.nt.NucleotideFastaRecord;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ChromatDirFastaConsedPhdAdaptedIteratorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      File file0 = new File("");
      Date date0 = new Date(0L);
      PhredQuality phredQuality0 = PhredQuality.valueOf(0);
      ChromatDirFastaConsedPhdAdaptedIterator chromatDirFastaConsedPhdAdaptedIterator0 = new ChromatDirFastaConsedPhdAdaptedIterator((StreamingIterator<NucleotideFastaRecord>) null, file0, date0, phredQuality0, file0);
      // Undeclared exception!
      try {
        chromatDirFastaConsedPhdAdaptedIterator0.tryToParseFromChromatDir("");
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * error parsing chromatogram for 
         */
      }
  }
}
