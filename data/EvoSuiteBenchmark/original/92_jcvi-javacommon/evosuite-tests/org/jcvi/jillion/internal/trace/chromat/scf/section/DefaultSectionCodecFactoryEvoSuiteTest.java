/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.internal.trace.chromat.scf.section;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.jcvi.jillion.internal.trace.chromat.scf.header.DefaultSCFHeader;
import org.jcvi.jillion.internal.trace.chromat.scf.header.SCFHeader;
import org.jcvi.jillion.internal.trace.chromat.scf.section.CommentSectionCodec;
import org.jcvi.jillion.internal.trace.chromat.scf.section.DefaultSectionCodecFactory;
import org.jcvi.jillion.internal.trace.chromat.scf.section.Section;
import org.jcvi.jillion.internal.trace.chromat.scf.section.Version2BasesSectionCodec;
import org.jcvi.jillion.internal.trace.chromat.scf.section.Version3BasesSectionCodec;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DefaultSectionCodecFactoryEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DefaultSectionCodecFactory defaultSectionCodecFactory0 = DefaultSectionCodecFactory.INSTANCE;
      Section section0 = Section.COMMENTS;
      DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader();
      CommentSectionCodec commentSectionCodec0 = (CommentSectionCodec)defaultSectionCodecFactory0.getSectionParserFor(section0, (SCFHeader) defaultSCFHeader0);
      assertNotNull(commentSectionCodec0);
  }

  @Test
  public void test1()  throws Throwable  {
      DefaultSectionCodecFactory defaultSectionCodecFactory0 = DefaultSectionCodecFactory.INSTANCE;
      Section section0 = Section.SAMPLES;
      // Undeclared exception!
      try {
        defaultSectionCodecFactory0.getSectionParserFor(section0, (SCFHeader) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * header can not be null
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      DefaultSectionCodecFactory defaultSectionCodecFactory0 = DefaultSectionCodecFactory.INSTANCE;
      Section section0 = Section.COMMENTS;
      DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader();
      defaultSCFHeader0.setVersion(35.75293F);
      CommentSectionCodec commentSectionCodec0 = (CommentSectionCodec)defaultSectionCodecFactory0.getSectionParserFor(section0, (SCFHeader) defaultSCFHeader0);
      assertNotNull(commentSectionCodec0);
  }

  @Test
  public void test3()  throws Throwable  {
      DefaultSectionCodecFactory defaultSectionCodecFactory0 = DefaultSectionCodecFactory.INSTANCE;
      Section section0 = Section.BASES;
      Version3BasesSectionCodec version3BasesSectionCodec0 = (Version3BasesSectionCodec)defaultSectionCodecFactory0.getSectionEncoderFor(section0, 3.0F);
      assertNotNull(version3BasesSectionCodec0);
  }

  @Test
  public void test4()  throws Throwable  {
      DefaultSectionCodecFactory defaultSectionCodecFactory0 = DefaultSectionCodecFactory.INSTANCE;
      Section section0 = Section.BASES;
      Version2BasesSectionCodec version2BasesSectionCodec0 = (Version2BasesSectionCodec)defaultSectionCodecFactory0.getSectionEncoderFor(section0, 2.8971682F);
      assertNotNull(version2BasesSectionCodec0);
  }

  @Test
  public void test5()  throws Throwable  {
      DefaultSectionCodecFactory defaultSectionCodecFactory0 = DefaultSectionCodecFactory.INSTANCE;
      Section section0 = Section.BASES;
      // Undeclared exception!
      try {
        defaultSectionCodecFactory0.getSectionEncoderFor(section0, 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * can not encode for version < 2 or >= 4
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      DefaultSectionCodecFactory defaultSectionCodecFactory0 = DefaultSectionCodecFactory.INSTANCE;
      Section section0 = Section.COMMENTS;
      // Undeclared exception!
      try {
        defaultSectionCodecFactory0.getSectionEncoderFor(section0, 1407.2404F);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * can not encode for version < 2 or >= 4
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      DefaultSectionCodecFactory defaultSectionCodecFactory0 = DefaultSectionCodecFactory.INSTANCE;
      // Undeclared exception!
      try {
        defaultSectionCodecFactory0.getSectionEncoderFor((Section) null, 357.06686F);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Section can not be null
         */
      }
  }
}
