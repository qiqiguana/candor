/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.internal.trace.chromat.scf.header;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.jcvi.jillion.internal.trace.chromat.scf.header.DefaultSCFHeader;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DefaultSCFHeaderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader();
      int int0 = defaultSCFHeader0.hashCode();
      assertEquals((-1796951359), int0);
  }

  @Test
  public void test1()  throws Throwable  {
      DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader();
      defaultSCFHeader0.setNumberOfSamples(1);
      DefaultSCFHeader defaultSCFHeader1 = new DefaultSCFHeader();
      boolean boolean0 = defaultSCFHeader0.equals((Object) defaultSCFHeader1);
      assertEquals(1, defaultSCFHeader0.getNumberOfSamples());
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader();
      defaultSCFHeader0.setPrivateDataOffset(180);
      DefaultSCFHeader defaultSCFHeader1 = new DefaultSCFHeader();
      boolean boolean0 = defaultSCFHeader0.equals((Object) defaultSCFHeader1);
      assertEquals(180, defaultSCFHeader0.getPrivateDataOffset());
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader();
      defaultSCFHeader0.setSampleOffset((-1479));
      DefaultSCFHeader defaultSCFHeader1 = new DefaultSCFHeader();
      boolean boolean0 = defaultSCFHeader0.equals((Object) defaultSCFHeader1);
      assertEquals(-1479, defaultSCFHeader0.getSampleOffset());
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader();
      boolean boolean0 = defaultSCFHeader0.equals((Object) "");
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader();
      DefaultSCFHeader defaultSCFHeader1 = new DefaultSCFHeader();
      boolean boolean0 = defaultSCFHeader0.equals((Object) defaultSCFHeader1);
      assertEquals(0, defaultSCFHeader0.getPrivateDataSize());
      assertEquals(0, defaultSCFHeader0.getBasesOffset());
      assertEquals(0, defaultSCFHeader0.getPrivateDataOffset());
      assertEquals(0, defaultSCFHeader0.getNumberOfBases());
      assertEquals(true, boolean0);
      assertEquals(0, defaultSCFHeader0.getNumberOfSamples());
      assertEquals(0, defaultSCFHeader0.getCommentOffset());
      assertEquals(0, defaultSCFHeader0.getCommentSize());
      assertEquals(0.0F, defaultSCFHeader0.getVersion(), 0.01F);
      assertEquals(0, defaultSCFHeader0.getSampleOffset());
  }

  @Test
  public void test6()  throws Throwable  {
      DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader();
      DefaultSCFHeader defaultSCFHeader1 = new DefaultSCFHeader();
      defaultSCFHeader1.setBasesOffset(495);
      boolean boolean0 = defaultSCFHeader0.equals((Object) defaultSCFHeader1);
      assertEquals(495, defaultSCFHeader1.getBasesOffset());
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader();
      defaultSCFHeader0.setCommentOffset(37);
      DefaultSCFHeader defaultSCFHeader1 = new DefaultSCFHeader();
      boolean boolean0 = defaultSCFHeader0.equals((Object) defaultSCFHeader1);
      assertEquals(37, defaultSCFHeader0.getCommentOffset());
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader();
      DefaultSCFHeader defaultSCFHeader1 = new DefaultSCFHeader();
      defaultSCFHeader0.setCommentSize((-1796951359));
      boolean boolean0 = defaultSCFHeader1.equals((Object) defaultSCFHeader0);
      assertEquals(-1796951359, defaultSCFHeader0.getCommentSize());
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader();
      DefaultSCFHeader defaultSCFHeader1 = new DefaultSCFHeader();
      defaultSCFHeader1.setNumberOfBases(1);
      boolean boolean0 = defaultSCFHeader1.equals((Object) defaultSCFHeader0);
      assertEquals(1, defaultSCFHeader1.getNumberOfBases());
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader();
      defaultSCFHeader0.setPrivateDataSize((-15));
      DefaultSCFHeader defaultSCFHeader1 = new DefaultSCFHeader();
      boolean boolean0 = defaultSCFHeader0.equals((Object) defaultSCFHeader1);
      assertEquals(-15, defaultSCFHeader0.getPrivateDataSize());
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader();
      DefaultSCFHeader defaultSCFHeader1 = new DefaultSCFHeader();
      defaultSCFHeader1.setSampleSize((byte) (-1));
      boolean boolean0 = defaultSCFHeader0.equals((Object) defaultSCFHeader1);
      assertEquals(-1, defaultSCFHeader1.getSampleSize());
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader();
      DefaultSCFHeader defaultSCFHeader1 = new DefaultSCFHeader();
      defaultSCFHeader1.setVersion((-1.0F));
      boolean boolean0 = defaultSCFHeader0.equals((Object) defaultSCFHeader1);
      assertEquals((-1.0F), defaultSCFHeader1.getVersion(), 0.01F);
      assertEquals(false, boolean0);
  }
}
