/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.core.residue.aa;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.List;
import java.util.Map;
import org.jcvi.jillion.core.residue.aa.AminoAcid;
import org.jcvi.jillion.core.residue.aa.Codon;
import org.jcvi.jillion.core.residue.nt.Nucleotide;
import org.jcvi.jillion.core.residue.nt.NucleotideSequence;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class CodonEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      List<Codon> list0 = Codon.getCodonsFor("GGC");
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test
  public void test1()  throws Throwable  {
      Codon codon0 = Codon.getStartCodon();
      assertNotNull(codon0);
      
      int int0 = codon0.hashCode();
      assertEquals(1547818161, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      Map<List<Nucleotide>, Codon> map0 = Codon.getCodonMap();
      assertEquals(false, map0.isEmpty());
  }

  @Test
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try {
        Codon.getCodonFor((NucleotideSequence) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try {
        Codon.getCodonsFor((NucleotideSequence) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * sequence can not be null
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Amino;
      Codon codon0 = Codon.getCodonFor(nucleotide0, nucleotide0, nucleotide0);
      assertNull(codon0);
  }

  @Test
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try {
        Codon.getCodonByOffset("\"", (-227));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
        /*
         * String index out of range: -227
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      Codon codon0 = Codon.getStartCodon();
      assertNotNull(codon0);
      
      boolean boolean0 = codon0.isStartCodon();
      assertEquals(false, codon0.isStopCodon());
      assertEquals(true, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      Codon codon0 = Codon.getStartCodon();
      AminoAcid aminoAcid0 = codon0.getAminoAcid();
      assertEquals(AminoAcid.Methionine, aminoAcid0);
  }

  @Test
  public void test9()  throws Throwable  {
      List<Codon> list0 = Codon.getStopCodons();
      assertEquals(5, list0.size());
  }

  @Test
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try {
        Codon.getCodonFor("%W8_]qaveR?+");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * triplet must have 3 bases
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try {
        Codon.getCodonByOffset((NucleotideSequence) null, (-5));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * offset must be >=0 -5
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      Codon codon0 = Codon.getStartCodon();
      List<Nucleotide> list0 = codon0.getNucleotides();
      assertNotNull(list0);
      
      // Undeclared exception!
      try {
        Codon.getCodonByOffset(list0, (-351));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * offset must be >=0 -351
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      Codon codon0 = Codon.getStartCodon();
      assertNotNull(codon0);
      
      boolean boolean0 = codon0.isStopCodon();
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      Codon codon0 = Codon.getStartCodon();
      String string0 = codon0.toString();
      assertNotNull(string0);
      assertEquals("[ATG]", string0);
  }

  @Test
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try {
        Codon.Frame.parseFrame(97);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * unable to parse frame 97
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      Codon.Frame codon_Frame0 = Codon.Frame.parseFrame(0);
      assertEquals(Codon.Frame.ZERO, codon_Frame0);
  }
}
