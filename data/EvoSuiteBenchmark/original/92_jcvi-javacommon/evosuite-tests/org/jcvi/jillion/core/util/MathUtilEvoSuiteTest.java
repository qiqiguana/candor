/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.core.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.math.BigInteger;
import java.util.Collection;
import java.util.LinkedList;
import org.jcvi.jillion.core.util.MathUtil;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MathUtilEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-1));
      integerArray0[0] = integer0;
      integerArray0[1] = integerArray0[0];
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integerArray0[1];
      integerArray0[5] = integer0;
      Integer integer1 = MathUtil.minOf(integerArray0);
      assertEquals((-1), (int)integer1);
  }

  @Test
  public void test1()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-1));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1139));
      integerArray0[1] = integer1;
      // Undeclared exception!
      try {
        MathUtil.minOf(integerArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try {
        MathUtil.medianOf((Collection<Integer>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * must pass in at least one value
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(1);
      integerArray0[1] = integer0;
      Number[] numberArray0 = new Number[4];
      Long long0 = new Long((-1L));
      numberArray0[0] = (Number) long0;
      numberArray0[1] = (Number) integerArray0[1];
      Float float0 = new Float((float) long0);
      numberArray0[2] = (Number) float0;
      numberArray0[3] = (Number) integer0;
      Integer integer1 = (Integer)MathUtil.maxOf(numberArray0);
      assertEquals(1, (int)integer1);
      assertNotSame(integer1, integer0);
  }

  @Test
  public void test4()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      integerArray0[1] = integerArray0[0];
      integerArray0[2] = integer0;
      integerArray0[3] = integerArray0[1];
      integerArray0[4] = integerArray0[3];
      integerArray0[5] = integerArray0[1];
      integerArray0[6] = integerArray0[2];
      Double double0 = MathUtil.averageOf(integerArray0);
      assertEquals(1.0, (double)double0, 0.01D);
  }

  @Test
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = MathUtil.sumOf(byteArray0);
      assertNotNull(bigInteger0);
      assertEquals("0", bigInteger0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      int[] intArray0 = new int[9];
      BigInteger bigInteger0 = MathUtil.sumOf(intArray0);
      assertNotNull(bigInteger0);
      assertEquals(0, bigInteger0.shortValue());
  }

  @Test
  public void test7()  throws Throwable  {
      long[] longArray0 = new long[10];
      BigInteger bigInteger0 = MathUtil.sumOf(longArray0);
      assertEquals(0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
  }

  @Test
  public void test8()  throws Throwable  {
      short[] shortArray0 = new short[6];
      BigInteger bigInteger0 = MathUtil.sumOf(shortArray0);
      assertNotNull(bigInteger0);
      assertEquals("0", bigInteger0.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(10);
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integerArray0[0];
      Long long0 = MathUtil.medianOf(integerArray0);
      assertEquals(10L, (long)long0);
  }

  @Test
  public void test10()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-1));
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integerArray0[0];
      integerArray0[5] = integerArray0[4];
      Long long0 = MathUtil.medianOf(integerArray0);
      assertEquals((-1L), (long)long0);
  }
}
