/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.core.residue.nt;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.Set;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec;
import org.jcvi.jillion.core.residue.nt.Nucleotide;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DefaultNucleotideCodecEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      assertNotNull(byteArray0);
      
      String string0 = defaultNucleotideCodec0.toString(byteArray0);
      assertNotNull(string0);
      assertEquals("CT", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      assertNotNull(byteArray0);
      
      int int0 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (int) (byte)1);
      assertEquals(1, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Strong;
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      // Undeclared exception!
      try {
        defaultNucleotideCodec0.decode(byteArray0, (long) (byte) (-123));
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * index can not be negative: -123
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Strong;
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      assertNotNull(byteArray0);
      
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray0);
      assertEquals(1L, long0);
  }

  @Test
  public void test4()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[10];
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, 1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Iterator<Nucleotide> iterator0 = linkedList0.descendingIterator();
      byte[] byteArray0 = defaultNucleotideCodec0.encode(0, iterator0);
      assertNotNull(byteArray0);
  }

  @Test
  public void test6()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[10];
      // Undeclared exception!
      try {
        defaultNucleotideCodec0.iterator(byteArray0, (Range) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      Nucleotide nucleotide0 = (Nucleotide)defaultNucleotideCodec0.decode(byteArray0, 9223372036854775807L);
      assertEquals(Nucleotide.Gap, nucleotide0);
  }

  @Test
  public void test8()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[17];
      Nucleotide nucleotide0 = (Nucleotide)defaultNucleotideCodec0.decode(byteArray0, (long) (byte)0);
      assertEquals(Nucleotide.Gap, nucleotide0);
  }

  @Test
  public void test9()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try {
        defaultNucleotideCodec0.decode(byteArray0, 1582L);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * index 1582 corresponds to encodedIndex 795  encodedglyph length is 2
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[10];
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      // Undeclared exception!
      try {
        defaultNucleotideCodec0.encode(65, iterator0);
        fail("Expecting exception: NoSuchElementException");
      } catch(NoSuchElementException e) {
        /*
         * no more elements
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)36;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      byte[] byteArray1 = defaultNucleotideCodec0.encode(9, iterator0);
      assertFalse(byteArray0.equals(byteArray1));
  }

  @Test
  public void test12()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte)1;
      int int0 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-1175));
      assertEquals(0, int0);
  }

  @Test
  public void test13()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-125);
      // Undeclared exception!
      try {
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test14()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[10];
      int int0 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (int) (byte) (-1));
      assertEquals(0, int0);
  }

  @Test
  public void test15()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Strong;
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      assertNotNull(byteArray0);
      
      int int0 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 1482);
      assertEquals(0, int0);
  }

  @Test
  public void test16()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-1);
      byteArray0[8] = (byte) (-1);
      // Undeclared exception!
      try {
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (int) (byte) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test17()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte)1;
      int int0 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (int) (byte)1);
      assertEquals(0, int0);
  }

  @Test
  public void test18()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      String string0 = defaultNucleotideCodec0.toString(byteArray0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test19()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-2);
      // Undeclared exception!
      try {
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 4
         */
      }
  }

  @Test
  public void test20()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Strong;
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      assertNotNull(byteArray0);
      
      String string0 = defaultNucleotideCodec0.toString(byteArray0);
      assertNotNull(string0);
      assertEquals("S", string0);
  }
}
