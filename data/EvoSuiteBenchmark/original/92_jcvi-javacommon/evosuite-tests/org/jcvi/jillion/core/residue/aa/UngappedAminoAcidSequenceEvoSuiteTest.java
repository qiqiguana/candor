/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.core.residue.aa;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import org.jcvi.jillion.core.residue.aa.AminoAcid;
import org.jcvi.jillion.core.residue.aa.UngappedAminoAcidSequence;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class UngappedAminoAcidSequenceEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      UngappedAminoAcidSequence ungappedAminoAcidSequence0 = new UngappedAminoAcidSequence("");
      int int0 = ungappedAminoAcidSequence0.getGappedOffsetFor(431);
      assertEquals(431, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      UngappedAminoAcidSequence ungappedAminoAcidSequence0 = new UngappedAminoAcidSequence("");
      int int0 = ungappedAminoAcidSequence0.getNumberOfGapsUntil((-857));
      assertEquals(0, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      LinkedList<AminoAcid> linkedList0 = new LinkedList<AminoAcid>();
      UngappedAminoAcidSequence ungappedAminoAcidSequence0 = new UngappedAminoAcidSequence((Collection<AminoAcid>) linkedList0);
      long long0 = ungappedAminoAcidSequence0.getUngappedLength();
      assertEquals(0L, long0);
  }

  @Test
  public void test3()  throws Throwable  {
      LinkedList<AminoAcid> linkedList0 = new LinkedList<AminoAcid>();
      UngappedAminoAcidSequence ungappedAminoAcidSequence0 = new UngappedAminoAcidSequence((Collection<AminoAcid>) linkedList0);
      boolean boolean0 = ungappedAminoAcidSequence0.isGap((-1));
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      UngappedAminoAcidSequence ungappedAminoAcidSequence0 = new UngappedAminoAcidSequence("");
      List<Integer> list0 = ungappedAminoAcidSequence0.getGapOffsets();
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test5()  throws Throwable  {
      LinkedList<AminoAcid> linkedList0 = new LinkedList<AminoAcid>();
      UngappedAminoAcidSequence ungappedAminoAcidSequence0 = new UngappedAminoAcidSequence((Collection<AminoAcid>) linkedList0);
      int int0 = ungappedAminoAcidSequence0.getNumberOfGaps();
      assertEquals(0, int0);
  }

  @Test
  public void test6()  throws Throwable  {
      LinkedList<AminoAcid> linkedList0 = new LinkedList<AminoAcid>();
      UngappedAminoAcidSequence ungappedAminoAcidSequence0 = new UngappedAminoAcidSequence((Collection<AminoAcid>) linkedList0);
      int int0 = ungappedAminoAcidSequence0.getUngappedOffsetFor(890);
      assertEquals(890, int0);
  }
}
