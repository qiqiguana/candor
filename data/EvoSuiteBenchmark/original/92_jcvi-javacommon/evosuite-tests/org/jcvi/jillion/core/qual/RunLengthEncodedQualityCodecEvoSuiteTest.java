/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.core.qual;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;
import org.jcvi.jillion.core.qual.PhredQuality;
import org.jcvi.jillion.core.qual.RunLengthEncodedQualityCodec;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class RunLengthEncodedQualityCodecEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      RunLengthEncodedQualityCodec runLengthEncodedQualityCodec0 = RunLengthEncodedQualityCodec.INSTANCE;
      byte[] byteArray0 = new byte[11];
      byteArray0[6] = (byte)26;
      Iterator<PhredQuality> iterator0 = runLengthEncodedQualityCodec0.iterator(byteArray0);
      assertEquals(false, iterator0.hasNext());
      assertNotNull(iterator0);
  }

  @Test
  public void test1()  throws Throwable  {
      RunLengthEncodedQualityCodec runLengthEncodedQualityCodec0 = new RunLengthEncodedQualityCodec((byte) (-70));
      Vector<PhredQuality> vector0 = new Vector<PhredQuality>();
      byte[] byteArray0 = runLengthEncodedQualityCodec0.encode((Iterable<PhredQuality>) vector0, (int) (byte) (-70));
      assertNotNull(byteArray0);
  }

  @Test
  public void test2()  throws Throwable  {
      RunLengthEncodedQualityCodec runLengthEncodedQualityCodec0 = RunLengthEncodedQualityCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      int int0 = runLengthEncodedQualityCodec0.decodedLengthOf(byteArray0);
      assertEquals(0, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      RunLengthEncodedQualityCodec runLengthEncodedQualityCodec0 = new RunLengthEncodedQualityCodec((byte) (-70));
      int int0 = runLengthEncodedQualityCodec0.hashCode();
      assertEquals((-39), int0);
  }

  @Test
  public void test4()  throws Throwable  {
      RunLengthEncodedQualityCodec runLengthEncodedQualityCodec0 = RunLengthEncodedQualityCodec.INSTANCE;
      Vector<PhredQuality> vector0 = new Vector<PhredQuality>();
      byte[] byteArray0 = runLengthEncodedQualityCodec0.encode((Collection<PhredQuality>) vector0);
      assertNotNull(byteArray0);
  }

  @Test
  public void test5()  throws Throwable  {
      RunLengthEncodedQualityCodec runLengthEncodedQualityCodec0 = RunLengthEncodedQualityCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-93);
      byteArray0[6] = (byte) (-93);
      // Undeclared exception!
      try {
        runLengthEncodedQualityCodec0.decode(byteArray0, (long) (byte)53);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * could not find index 53
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      RunLengthEncodedQualityCodec runLengthEncodedQualityCodec0 = RunLengthEncodedQualityCodec.INSTANCE;
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = runLengthEncodedQualityCodec0.encode(byteArray0);
      assertNotNull(byteArray1);
      
      PhredQuality phredQuality0 = (PhredQuality)runLengthEncodedQualityCodec0.decode(byteArray1, (long) (byte)0);
      assertNotNull(phredQuality0);
      assertEquals(0, phredQuality0.getQualityScore());
  }

  @Test
  public void test7()  throws Throwable  {
      RunLengthEncodedQualityCodec runLengthEncodedQualityCodec0 = RunLengthEncodedQualityCodec.INSTANCE;
      byte[] byteArray0 = new byte[2];
      RunLengthEncodedQualityCodec runLengthEncodedQualityCodec1 = new RunLengthEncodedQualityCodec((byte)0);
      byte[] byteArray1 = runLengthEncodedQualityCodec1.encode(byteArray0);
      assertNotNull(byteArray1);
      
      PhredQuality phredQuality0 = (PhredQuality)runLengthEncodedQualityCodec0.decode(byteArray1, (long) (byte)0);
      assertEquals("Q00", phredQuality0.toString());
      assertNotNull(phredQuality0);
  }

  @Test
  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      RunLengthEncodedQualityCodec runLengthEncodedQualityCodec0 = RunLengthEncodedQualityCodec.INSTANCE;
      // Undeclared exception!
      try {
        runLengthEncodedQualityCodec0.decode(byteArray0, (-1233L));
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * can not have negative length
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      RunLengthEncodedQualityCodec runLengthEncodedQualityCodec0 = new RunLengthEncodedQualityCodec((byte) (-1));
      byte[] byteArray0 = new byte[10];
      // Undeclared exception!
      try {
        runLengthEncodedQualityCodec0.decode(byteArray0, (long) (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * can not have index beyond length
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      RunLengthEncodedQualityCodec runLengthEncodedQualityCodec0 = RunLengthEncodedQualityCodec.INSTANCE;
      Object object0 = new Object();
      boolean boolean0 = runLengthEncodedQualityCodec0.equals(object0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      RunLengthEncodedQualityCodec runLengthEncodedQualityCodec0 = new RunLengthEncodedQualityCodec((byte)0);
      RunLengthEncodedQualityCodec runLengthEncodedQualityCodec1 = new RunLengthEncodedQualityCodec((byte)0);
      boolean boolean0 = runLengthEncodedQualityCodec0.equals((Object) runLengthEncodedQualityCodec1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      RunLengthEncodedQualityCodec runLengthEncodedQualityCodec0 = new RunLengthEncodedQualityCodec((byte)20);
      RunLengthEncodedQualityCodec runLengthEncodedQualityCodec1 = RunLengthEncodedQualityCodec.INSTANCE;
      boolean boolean0 = runLengthEncodedQualityCodec0.equals((Object) runLengthEncodedQualityCodec1);
      assertFalse(runLengthEncodedQualityCodec1.equals(runLengthEncodedQualityCodec0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      RunLengthEncodedQualityCodec runLengthEncodedQualityCodec0 = new RunLengthEncodedQualityCodec((byte) (-19));
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte) (-19);
      // Undeclared exception!
      try {
        runLengthEncodedQualityCodec0.encode(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * qualityScore of our range -19
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      RunLengthEncodedQualityCodec runLengthEncodedQualityCodec0 = RunLengthEncodedQualityCodec.INSTANCE;
      Vector<PhredQuality> vector0 = new Vector<PhredQuality>();
      PhredQuality phredQuality0 = PhredQuality.valueOf(0);
      vector0.add(phredQuality0);
      byte[] byteArray0 = runLengthEncodedQualityCodec0.encode((Collection<PhredQuality>) vector0);
      assertNotNull(byteArray0);
  }

  @Test
  public void test15()  throws Throwable  {
      RunLengthEncodedQualityCodec runLengthEncodedQualityCodec0 = RunLengthEncodedQualityCodec.INSTANCE;
      Vector<PhredQuality> vector0 = new Vector<PhredQuality>();
      PhredQuality phredQuality0 = PhredQuality.valueOf(0);
      vector0.add(phredQuality0);
      vector0.add(phredQuality0);
      byte[] byteArray0 = runLengthEncodedQualityCodec0.encode((Collection<PhredQuality>) vector0);
      assertNotNull(byteArray0);
  }

  @Test
  public void test16()  throws Throwable  {
      RunLengthEncodedQualityCodec runLengthEncodedQualityCodec0 = RunLengthEncodedQualityCodec.INSTANCE;
      Vector<PhredQuality> vector0 = new Vector<PhredQuality>();
      PhredQuality phredQuality0 = PhredQuality.valueOf(2);
      vector0.add(phredQuality0);
      vector0.add((PhredQuality) null);
      // Undeclared exception!
      try {
        runLengthEncodedQualityCodec0.encode((Collection<PhredQuality>) vector0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test17()  throws Throwable  {
      RunLengthEncodedQualityCodec runLengthEncodedQualityCodec0 = RunLengthEncodedQualityCodec.INSTANCE;
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = runLengthEncodedQualityCodec0.encode(byteArray0);
      assertNotNull(byteArray1);
      
      Iterator<PhredQuality> iterator0 = runLengthEncodedQualityCodec0.iterator(byteArray1);
      assertEquals(true, iterator0.hasNext());
      assertNotNull(iterator0);
  }

  @Test
  public void test18()  throws Throwable  {
      RunLengthEncodedQualityCodec runLengthEncodedQualityCodec0 = RunLengthEncodedQualityCodec.INSTANCE;
      byte[] byteArray0 = new byte[2];
      RunLengthEncodedQualityCodec runLengthEncodedQualityCodec1 = new RunLengthEncodedQualityCodec((byte)0);
      byte[] byteArray1 = runLengthEncodedQualityCodec1.encode(byteArray0);
      assertNotNull(byteArray1);
      
      Iterator<PhredQuality> iterator0 = runLengthEncodedQualityCodec0.iterator(byteArray1);
      assertEquals(true, iterator0.hasNext());
      assertNotNull(iterator0);
  }
}
