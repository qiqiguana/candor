/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.trace.fastq;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import org.jcvi.jillion.internal.core.io.TextLineParser;
import org.jcvi.jillion.trace.fastq.FastqFileParser;
import org.jcvi.jillion.trace.fastq.FastqVisitor;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class FastqFileParserEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      FastqFileParser.OffsetMemento fastqFileParser_OffsetMemento0 = FastqFileParser.OffsetMemento.valueOf(1325L);
      assertNotNull(fastqFileParser_OffsetMemento0);
      
      int int0 = fastqFileParser_OffsetMemento0.hashCode();
      assertEquals(41075, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      FastqFileParser.OffsetMemento fastqFileParser_OffsetMemento0 = FastqFileParser.OffsetMemento.valueOf(4294967302L);
      assertNotNull(fastqFileParser_OffsetMemento0);
      
      int int0 = fastqFileParser_OffsetMemento0.hashCode();
      assertEquals(217, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      FastqFileParser fastqFileParser0 = FastqFileParser.create((InputStream) pipedInputStream0);
      FastqFileParser.OffsetMemento fastqFileParser_OffsetMemento0 = FastqFileParser.OffsetMemento.valueOf(0L);
      // Undeclared exception!
      try {
        fastqFileParser0.accept((FastqVisitor) null, (FastqVisitor.FastqVisitorCallback.FastqVisitorMemento) fastqFileParser_OffsetMemento0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * mementos not supported
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) (byte)72, 41075);
      FastqFileParser fastqFileParser0 = FastqFileParser.create((InputStream) byteArrayInputStream0);
      TextLineParser textLineParser0 = new TextLineParser((InputStream) byteArrayInputStream0);
      // Undeclared exception!
      try {
        fastqFileParser0.parseFastqFile((FastqVisitor) null, textLineParser0, (long) (byte)0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      FastqFileParser.OffsetMemento fastqFileParser_OffsetMemento0 = FastqFileParser.OffsetMemento.valueOf(19L);
      assertNotNull(fastqFileParser_OffsetMemento0);
      
      String string0 = fastqFileParser_OffsetMemento0.toString();
      assertEquals("19", string0);
      assertNotNull(string0);
  }

  @Test
  public void test5()  throws Throwable  {
      File file0 = new File("", "");
      FastqFileParser fastqFileParser0 = FastqFileParser.create(file0);
      assertNotNull(fastqFileParser0);
      
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      TextLineParser textLineParser0 = new TextLineParser((InputStream) byteArrayInputStream0, (long) (byte)127);
      // Undeclared exception!
      try {
        fastqFileParser0.parseFastqFile((FastqVisitor) null, textLineParser0, (long) (byte)127);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * invalid fastq file, could not parse seq id from \u0000\u0000\u0000\u0000\u0000\u0000\u0000
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      FastqFileParser.OffsetMemento fastqFileParser_OffsetMemento0 = FastqFileParser.OffsetMemento.valueOf(4294967295L);
      assertNotNull(fastqFileParser_OffsetMemento0);
      
      long long0 = fastqFileParser_OffsetMemento0.getValue();
      assertEquals(4294967295L, long0);
  }

  @Test
  public void test7()  throws Throwable  {
      File file0 = new File("KVHO1=Es?O3K*[9", "KVHO1=Es?O3K*[9");
      try {
        FastqFileParser.create(file0);
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
        /*
         * /mnt/fastdata/ac1gf/SF110/dist/92_jcvi-javacommon/KVHO1=Es?O3K*[9/KVHO1=Es?O3K*[9 does not exist
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      File file0 = new File("", "");
      FastqFileParser fastqFileParser0 = FastqFileParser.create(file0);
      // Undeclared exception!
      try {
        fastqFileParser0.accept((FastqVisitor) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * visitor can not be null
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      File file0 = new File("", "");
      FastqFileParser fastqFileParser0 = FastqFileParser.create(file0);
      assertNotNull(fastqFileParser0);
      
      FastqFileParser.OffsetMemento fastqFileParser_OffsetMemento0 = FastqFileParser.OffsetMemento.valueOf(391L);
      assertNotNull(fastqFileParser_OffsetMemento0);
      
      // Undeclared exception!
      try {
        fastqFileParser0.accept((FastqVisitor) null, (FastqVisitor.FastqVisitorCallback.FastqVisitorMemento) fastqFileParser_OffsetMemento0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * visitor can not be null
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try {
        FastqFileParser.create((InputStream) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * inputstream can not be null
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileInputStream fileInputStream0 = new FileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) fileInputStream0);
      FastqFileParser fastqFileParser0 = FastqFileParser.create((InputStream) pushbackInputStream0);
      // Undeclared exception!
      try {
        fastqFileParser0.accept((FastqVisitor) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * visitor can not be null
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try {
        FastqFileParser.OffsetMemento.valueOf((-1232L));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * can not have negative offset
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      FastqFileParser.OffsetMemento fastqFileParser_OffsetMemento0 = FastqFileParser.OffsetMemento.valueOf(1325L);
      assertNotNull(fastqFileParser_OffsetMemento0);
      
      boolean boolean0 = fastqFileParser_OffsetMemento0.equals((Object) "");
      assertEquals(1325L, fastqFileParser_OffsetMemento0.getValue());
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      FastqFileParser.OffsetMemento fastqFileParser_OffsetMemento0 = FastqFileParser.OffsetMemento.valueOf(391L);
      assertNotNull(fastqFileParser_OffsetMemento0);
      
      boolean boolean0 = fastqFileParser_OffsetMemento0.equals((Object) null);
      assertEquals(false, boolean0);
      assertEquals(391L, fastqFileParser_OffsetMemento0.getValue());
  }
}
