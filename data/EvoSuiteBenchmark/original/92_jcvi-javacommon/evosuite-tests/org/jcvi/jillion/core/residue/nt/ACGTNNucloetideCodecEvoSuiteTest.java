/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.core.residue.nt;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.List;
import org.jcvi.jillion.core.residue.nt.ACGTNNucloetideCodec;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ACGTNNucloetideCodecEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ACGTNNucloetideCodec aCGTNNucloetideCodec0 = ACGTNNucloetideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      int int0 = aCGTNNucloetideCodec0.getGappedOffsetFor(byteArray0, 826);
      assertEquals(826, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      ACGTNNucloetideCodec aCGTNNucloetideCodec0 = ACGTNNucloetideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = aCGTNNucloetideCodec0.isGap(byteArray0, (-1));
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      ACGTNNucloetideCodec aCGTNNucloetideCodec0 = ACGTNNucloetideCodec.INSTANCE;
      byte[] byteArray0 = new byte[2];
      int int0 = aCGTNNucloetideCodec0.getUngappedOffsetFor(byteArray0, (int) (byte)122);
      assertEquals(122, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      ACGTNNucloetideCodec aCGTNNucloetideCodec0 = ACGTNNucloetideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      int int0 = aCGTNNucloetideCodec0.getNumberOfGapsUntil(byteArray0, (-1));
      assertEquals(0, int0);
  }

  @Test
  public void test4()  throws Throwable  {
      ACGTNNucloetideCodec aCGTNNucloetideCodec0 = ACGTNNucloetideCodec.INSTANCE;
      byte[] byteArray0 = new byte[2];
      long long0 = aCGTNNucloetideCodec0.getUngappedLength(byteArray0);
      assertEquals(0L, long0);
  }

  @Test
  public void test5()  throws Throwable  {
      ACGTNNucloetideCodec aCGTNNucloetideCodec0 = ACGTNNucloetideCodec.INSTANCE;
      byte[] byteArray0 = new byte[2];
      int int0 = aCGTNNucloetideCodec0.getNumberOfGaps(byteArray0);
      assertEquals(0, int0);
  }

  @Test
  public void test6()  throws Throwable  {
      ACGTNNucloetideCodec aCGTNNucloetideCodec0 = ACGTNNucloetideCodec.INSTANCE;
      byte[] byteArray0 = new byte[2];
      List<Integer> list0 = aCGTNNucloetideCodec0.getGapOffsets(byteArray0);
      assertEquals(true, list0.isEmpty());
  }
}
