/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.internal.trace.chromat;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.LinkedList;
import org.jcvi.jillion.core.residue.nt.Nucleotide;
import org.jcvi.jillion.internal.trace.chromat.DefaultChannel;
import org.jcvi.jillion.internal.trace.chromat.DefaultChannelGroup;
import org.jcvi.jillion.trace.chromat.Channel;
import org.jcvi.jillion.trace.chromat.ChannelGroup;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DefaultChannelGroupEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      short[] shortArray0 = new short[1];
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup((Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel0);
      assertNotNull(defaultChannelGroup0);
      
      DefaultChannelGroup defaultChannelGroup1 = new DefaultChannelGroup((Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel0);
      boolean boolean0 = defaultChannelGroup0.equals((Object) defaultChannelGroup1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      short[] shortArray0 = new short[14];
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup((Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel0);
      LinkedList<ChannelGroup> linkedList0 = new LinkedList<ChannelGroup>();
      linkedList0.add((ChannelGroup) defaultChannelGroup0);
      String string0 = linkedList0.toString();
      assertNotNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      short[] shortArray0 = new short[14];
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      short[] shortArray1 = new short[5];
      DefaultChannel defaultChannel1 = new DefaultChannel(byteArray0, shortArray1);
      DefaultChannelGroup defaultChannelGroup0 = null;
      try {
        defaultChannelGroup0 = new DefaultChannelGroup((Channel) defaultChannel1, (Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * positions must all have the same length
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      short[] shortArray0 = new short[20];
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      short[] shortArray1 = new short[3];
      DefaultChannel defaultChannel1 = new DefaultChannel(byteArray0, shortArray1);
      DefaultChannelGroup defaultChannelGroup0 = null;
      try {
        defaultChannelGroup0 = new DefaultChannelGroup((Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel1, (Channel) defaultChannel0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * positions must all have the same length
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      short[] shortArray0 = new short[13];
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      short[] shortArray1 = new short[12];
      DefaultChannel defaultChannel1 = new DefaultChannel(byteArray0, shortArray1);
      DefaultChannelGroup defaultChannelGroup0 = null;
      try {
        defaultChannelGroup0 = new DefaultChannelGroup((Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * positions must all have the same length
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      short[] shortArray0 = new short[1];
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      byte[] byteArray1 = new byte[9];
      DefaultChannel defaultChannel1 = new DefaultChannel(byteArray1, shortArray0);
      DefaultChannelGroup defaultChannelGroup0 = null;
      try {
        defaultChannelGroup0 = new DefaultChannelGroup((Channel) defaultChannel0, (Channel) defaultChannel1, (Channel) defaultChannel0, (Channel) defaultChannel0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * confidences must all have the same length
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      short[] shortArray0 = new short[8];
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      byte[] byteArray1 = new byte[4];
      DefaultChannel defaultChannel1 = new DefaultChannel(byteArray1, shortArray0);
      DefaultChannelGroup defaultChannelGroup0 = null;
      try {
        defaultChannelGroup0 = new DefaultChannelGroup((Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * confidences must all have the same length
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      short[] shortArray0 = new short[1];
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup((Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel0);
      assertNotNull(defaultChannelGroup0);
      
      shortArray0[0] = (short) (byte)26;
      DefaultChannel defaultChannel1 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannelGroup defaultChannelGroup1 = new DefaultChannelGroup((Channel) defaultChannel0, (Channel) defaultChannel1, (Channel) defaultChannel0, (Channel) defaultChannel0);
      boolean boolean0 = defaultChannelGroup0.equals((Object) defaultChannelGroup1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      short[] shortArray0 = new short[14];
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup((Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel0);
      assertNotNull(defaultChannelGroup0);
      
      boolean boolean0 = defaultChannelGroup0.equals((Object) "[org.jcvi.jillion.internal.trace.chromat.DefaultChannelGroup@855f8841]");
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      short[] shortArray0 = new short[1];
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup((Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel0);
      assertNotNull(defaultChannelGroup0);
      
      shortArray0[0] = (short) (byte)26;
      DefaultChannel defaultChannel1 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannelGroup defaultChannelGroup1 = new DefaultChannelGroup((Channel) defaultChannel1, (Channel) defaultChannel0, (Channel) defaultChannel1, (Channel) defaultChannel1);
      boolean boolean0 = defaultChannelGroup0.equals((Object) defaultChannelGroup1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      short[] shortArray0 = new short[1];
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup((Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel0);
      assertNotNull(defaultChannelGroup0);
      
      shortArray0[0] = (short) (byte)26;
      DefaultChannel defaultChannel1 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannelGroup defaultChannelGroup1 = new DefaultChannelGroup((Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel1, (Channel) defaultChannel0);
      boolean boolean0 = defaultChannelGroup1.equals((Object) defaultChannelGroup0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      short[] shortArray0 = new short[1];
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup((Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel0);
      assertNotNull(defaultChannelGroup0);
      
      shortArray0[0] = (short) (byte)26;
      DefaultChannel defaultChannel1 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannelGroup defaultChannelGroup1 = new DefaultChannelGroup((Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel1);
      boolean boolean0 = defaultChannelGroup0.equals((Object) defaultChannelGroup1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      short[] shortArray0 = new short[1];
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup((Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel0);
      Nucleotide nucleotide0 = Nucleotide.Cytosine;
      DefaultChannel defaultChannel1 = (DefaultChannel)defaultChannelGroup0.getChannel(nucleotide0);
      assertSame(defaultChannel0, defaultChannel1);
  }

  @Test
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      short[] shortArray0 = new short[14];
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup((Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel0);
      Nucleotide nucleotide0 = Nucleotide.Adenine;
      DefaultChannel defaultChannel1 = (DefaultChannel)defaultChannelGroup0.getChannel(nucleotide0);
      assertSame(defaultChannel0, defaultChannel1);
  }

  @Test
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      short[] shortArray0 = new short[14];
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup((Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel0);
      Nucleotide nucleotide0 = Nucleotide.NotAdenine;
      DefaultChannel defaultChannel1 = (DefaultChannel)defaultChannelGroup0.getChannel(nucleotide0);
      assertSame(defaultChannel1, defaultChannel0);
  }

  @Test
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      short[] shortArray0 = new short[20];
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup((Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel0);
      Nucleotide nucleotide0 = Nucleotide.Guanine;
      DefaultChannel defaultChannel1 = (DefaultChannel)defaultChannelGroup0.getChannel(nucleotide0);
      assertSame(defaultChannel0, defaultChannel1);
  }
}
