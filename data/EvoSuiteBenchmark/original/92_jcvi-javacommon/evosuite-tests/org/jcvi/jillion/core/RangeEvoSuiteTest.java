/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Stack;
import java.util.TreeSet;
import org.jcvi.jillion.core.DirectedRange;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.Rangeable;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class RangeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-92L), 0L);
      assertNotNull(range0);
      
      int int0 = range0.hashCode();
      assertEquals(837, int0);
      assertEquals("[ -93 .. -1 ]/0B", range0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range_CoordinateSystem0.toString();
      assertEquals("Residue Based", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      Range.Comparators range_Comparators0 = Range.Comparators.SHORTEST_TO_LONGEST;
      Range.Builder range_Builder0 = new Range.Builder();
      assertNotNull(range_Builder0);
      
      Range range0 = range_Builder0.build();
      assertNotNull(range0);
      
      range_Comparators0.compare(range0, range0);
      assertEquals("[ -93 .. -1 ]/0B", range0.toString());
      assertEquals(93L, range0.getLength());
  }

  @Test
  public void test3()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      assertNotNull(range0);
      
      Range.Comparators range_Comparators0 = Range.Comparators.LONGEST_TO_SHORTEST;
      int int0 = range_Comparators0.compare(range0, range0);
      assertEquals("[ 0 .. -1 ]/0B", range0.toString());
      assertEquals(0, int0);
      assertEquals(0L, range0.getLength());
  }

  @Test
  public void test4()  throws Throwable  {
      Range range0 = Range.parseRange("[ 1 .. 0 ]/RB");
      assertNotNull(range0);
      assertEquals("[ 1 .. 0 ]/0B", range0.toString());
      assertEquals(0L, range0.getLength());
  }

  @Test
  public void test5()  throws Throwable  {
      Range range0 = Range.of((-1806L), (-1806L));
      assertNotNull(range0);
      
      Range range1 = range0.asRange();
      assertEquals("[ -1806 .. -1806 ]/0B", range1.toString());
      assertEquals((-1806L), range1.getEnd());
  }

  @Test
  public void test6()  throws Throwable  {
      Range range0 = Range.of(1935L);
      assertNotNull(range0);
      
      Iterator<Long> iterator0 = range0.iterator();
      assertEquals("[ 1935 .. 1935 ]/0B", range0.toString());
      assertEquals(true, iterator0.hasNext());
  }

  @Test
  public void test7()  throws Throwable  {
      Range range0 = Range.of(1935L);
      assertNotNull(range0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1644L), (-1644L));
      assertNotNull(range1);
      
      Range range2 = range0.intersection(range1);
      assertEquals(0L, range2.getLength());
      assertEquals("[ 1935 .. 1935 ]/0B", range0.toString());
      assertEquals((-1645L), range2.getEnd());
  }

  @Test
  public void test8()  throws Throwable  {
      Range range0 = Range.of(1903L, 9223372036854775807L);
      assertNotNull(range0);
      
      int int0 = range0.hashCode();
      assertEquals("[ 1903 .. 9223372036854775807 ]/0B", range0.toString());
      assertEquals((-2147421822), int0);
  }

  @Test
  public void test9()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      assertNotNull(range0);
      
      boolean boolean0 = range0.intersects(range0);
      assertEquals(true, range0.isEmpty());
      assertEquals("[ 0 .. -1 ]/0B", range0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      assertNotNull(range_Builder0);
      
      Range range0 = range_Builder0.build();
      assertNotNull(range0);
      
      LinkedHashSet<Range> linkedHashSet0 = new LinkedHashSet<Range>();
      linkedHashSet0.add(range0);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals((-1L), range0.getEnd());
  }

  @Test
  public void test11()  throws Throwable  {
      Range range0 = Range.of(9223372036854775804L);
      assertNotNull(range0);
      assertEquals("[ 9223372036854775804 .. 9223372036854775804 ]/0B", range0.toString());
      assertEquals(1L, range0.getLength());
  }

  @Test
  public void test12()  throws Throwable  {
      Range range0 = Range.of((-1806L), (-1806L));
      assertNotNull(range0);
      
      int int0 = range0.hashCode();
      assertEquals("[ -1806 .. -1806 ]/0B", range0.toString());
      assertEquals((-56831), int0);
  }

  @Test
  public void test13()  throws Throwable  {
      Range range0 = Range.of(65535L, 2147483647L);
      assertEquals("[ 65535 .. 2147483647 ]/0B", range0.toString());
      assertNotNull(range0);
  }

  @Test
  public void test14()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      DirectedRange directedRange0 = DirectedRange.parse(1735L, 384L, range_CoordinateSystem0);
      assertNotNull(directedRange0);
      
      Range range0 = directedRange0.asRange();
      int int0 = range0.hashCode();
      assertEquals("DirectedRange [range=[ 384 .. 1735 ]/0B, direction=REVERSE]", directedRange0.toString());
      assertEquals(43257, int0);
  }

  @Test
  public void test15()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1806L, 1806L);
      assertNotNull(range0);
      
      LinkedHashSet<Rangeable> linkedHashSet0 = new LinkedHashSet<Rangeable>();
      linkedHashSet0.add((Rangeable) range0);
      assertEquals("[[ 1806 .. 1805 ]/0B]", linkedHashSet0.toString());
  }

  @Test
  public void test16()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      assertNotNull(range0);
      
      int int0 = range0.hashCode();
      assertEquals("[ 2147483647 .. 2147483646 ]/0B", range0.toString());
      assertEquals((-2147483618), int0);
  }

  @Test
  public void test17()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      assertNotNull(range0);
      
      boolean boolean0 = range0.isEmpty();
      assertEquals("[ 2147483647 .. 2147483646 ]/0B", range0.toString());
      assertEquals(true, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      DirectedRange directedRange0 = DirectedRange.parse((long) 0, 2147483647L, range_CoordinateSystem0);
      assertNotNull(directedRange0);
      assertEquals("DirectedRange [range=[ 2147483647 .. 2147483646 ]/0B, direction=FORWARD]", directedRange0.toString());
  }

  @Test
  public void test19()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1644L), (-1644L));
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-1644L));
      assertSame(range_Builder1, range_Builder0);
  }

  @Test
  public void test20()  throws Throwable  {
      Range range0 = Range.of(0L);
      assertNotNull(range0);
      
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd(437L);
      assertEquals("[ 0 .. 0 ]/0B", range0.toString());
      assertEquals(0L, range0.getBegin());
  }

  @Test
  public void test21()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(0L);
      assertSame(range_Builder1, range_Builder0);
  }

  @Test
  public void test22()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1806L), (-1806L));
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-1806L));
      assertSame(range_Builder1, range_Builder0);
  }

  @Test
  public void test23()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      assertFalse(range_Builder1.equals(range_Builder0));
  }

  @Test
  public void test24()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      assertEquals(0L, range0.getBegin());
      assertEquals("[ 0 .. 9223372036854775806 ]/0B", range0.toString());
      assertNotNull(range0);
  }

  @Test
  public void test25()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483641L, 2147483641L);
      assertNotNull(range0);
      
      int int0 = range0.hashCode();
      assertEquals((-2147482664), int0);
      assertEquals("[ 2147483640 .. 2147483640 ]/0B", range0.toString());
  }

  @Test
  public void test26()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      assertNotNull(range0);
      
      int int0 = range0.hashCode();
      assertEquals(961, int0);
      assertEquals("[ -9223372036854775808 .. -9223372036854775808 ]/0B", range0.toString());
  }

  @Test
  public void test27()  throws Throwable  {
      Range range0 = Range.of(193L);
      assertNotNull(range0);
      
      int int0 = range0.hashCode();
      assertEquals("[ 193 .. 193 ]/0B", range0.toString());
      assertEquals(929, int0);
  }

  @Test
  public void test28()  throws Throwable  {
      Range.Comparators range_Comparators0 = Range.Comparators.ARRIVAL;
      Range range0 = Range.of((-292L));
      assertNotNull(range0);
      
      int int0 = range_Comparators0.compare(range0, range0);
      assertEquals((-292L), range0.getBegin());
      assertEquals(0, int0);
      assertEquals("[ -292 .. -292 ]/0B", range0.toString());
  }

  @Test
  public void test29()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      DirectedRange directedRange0 = DirectedRange.parse(795L, (-1502L), range_CoordinateSystem0);
      assertNotNull(directedRange0);
      
      Range range0 = directedRange0.asRange();
      List<Range> list0 = range0.split(795L);
      assertNotNull(list0);
      
      List<Range> list1 = range0.complementFrom((Collection<Range>) list0);
      assertEquals(2298L, range0.getLength());
      assertNotNull(list1);
      assertEquals(3, list0.size());
      assertEquals(794L, range0.getEnd());
      assertEquals(0, list1.size());
  }

  @Test
  public void test30()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      assertNotNull(range0);
      
      Range.Comparators range_Comparators0 = Range.Comparators.DEPARTURE;
      int int0 = range_Comparators0.compare(range0, range0);
      assertEquals(0, int0);
      assertEquals("[ -9223372036854775808 .. -9223372036854775808 ]/0B", range0.toString());
      assertEquals((-9223372036854775808L), range0.getBegin());
  }

  @Test
  public void test31()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      DirectedRange directedRange0 = DirectedRange.parse((long) 0, 2147483641L, range_CoordinateSystem0);
      assertEquals("DirectedRange [range=[ -1 .. 2147483640 ]/0B, direction=FORWARD]", directedRange0.toString());
      assertNotNull(directedRange0);
  }

  @Test
  public void test32()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try {
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * can not parse  into a Range
         */
      }
  }

  @Test
  public void test33()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      assertNotNull(range0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals("[ 0 .. -1 ]/0B", range0.toString());
      assertEquals(0L, long0);
  }

  @Test
  public void test34()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      assertNotNull(range0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long0);
      assertEquals(0L, range0.getLength());
      assertEquals("[ 0 .. -1 ]/0B", range0.toString());
  }

  @Test
  public void test35()  throws Throwable  {
      Range range0 = Range.of(1330L, 1330L);
      assertNotNull(range0);
      
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertEquals(1L, range0.getLength());
      assertEquals("[ 1330 .. 1330 ]/0B", range0.toString());
      assertEquals(true, boolean0);
  }

  @Test
  public void test36()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      assertNotNull(range0);
      
      Range.Builder range_Builder0 = new Range.Builder(range0);
      assertNotNull(range_Builder0);
      
      Range.Builder range_Builder1 = range_Builder0.shift((-347L));
      Range range1 = range_Builder1.build();
      assertNotNull(range1);
      
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertEquals("[ -347 .. -348 ]/0B", range1.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test37()  throws Throwable  {
      Range range0 = Range.of(1330L, 1330L);
      assertNotNull(range0);
      
      Range range1 = Range.of(1L);
      assertNotNull(range1);
      
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertEquals(false, boolean0);
      assertEquals("[ 1330 .. 1330 ]/0B", range0.toString());
      assertEquals(0L, range1.getLength());
  }

  @Test
  public void test38()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      assertNotNull(range0);
      
      // Undeclared exception!
      try {
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Null Range used in intersection operation.
         */
      }
  }

  @Test
  public void test39()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-764L), (-764L));
      assertNotNull(range0);
      
      Range range1 = Range.of((long) 1992686325);
      assertNotNull(range1);
      
      Range range2 = range0.intersection(range1);
      assertEquals("[ 1992686325 .. 1992686325 ]/0B", range1.toString());
      assertEquals(0L, range2.getLength());
      assertNotNull(range2);
      assertEquals("[ -764 .. -764 ]/0B", range0.toString());
  }

  @Test
  public void test40()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      assertNotNull(range_Builder0);
      
      Range range0 = range_Builder0.build();
      assertNotNull(range0);
      
      List<Range> list0 = range0.complement(range0);
      assertEquals(0L, range0.getBegin());
      assertEquals(false, list0.isEmpty());
      assertNotNull(list0);
      assertEquals("[ 0 .. -1 ]/0B", range0.toString());
  }

  @Test
  public void test41()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      assertNotNull(range_Builder0);
      
      Range range0 = range_Builder0.build();
      assertNotNull(range0);
      
      boolean boolean0 = range0.startsBefore(range0);
      assertEquals(false, boolean0);
      assertEquals("[ 0 .. -1 ]/0B", range0.toString());
      assertEquals(true, range0.isEmpty());
  }

  @Test
  public void test42()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      assertNotNull(range0);
      
      Range range1 = Range.of((-764L));
      assertNotNull(range1);
      
      boolean boolean0 = range0.startsBefore(range1);
      assertEquals("[ -764 .. -764 ]/0B", range1.toString());
      assertEquals((-764L), range1.getEnd());
      assertEquals("[ -9223372036854775808 .. -9223372036854775808 ]/0B", range0.toString());
      assertEquals(true, boolean0);
  }

  @Test
  public void test43()  throws Throwable  {
      Range range0 = Range.of(1935L);
      assertNotNull(range0);
      
      boolean boolean0 = range0.endsBefore(range0);
      assertEquals(1935L, range0.getBegin());
      assertEquals("[ 1935 .. 1935 ]/0B", range0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test44()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      assertNotNull(range0);
      
      boolean boolean0 = range0.endsBefore(range0);
      assertEquals("[ 0 .. -1 ]/0B", range0.toString());
      assertEquals(true, boolean0);
  }

  @Test
  public void test45()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      assertNotNull(range_Builder0);
      
      Range range0 = range_Builder0.build();
      assertNotNull(range0);
      
      // Undeclared exception!
      try {
        range0.split((long) 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * max splitLength must be >= 1
         */
      }
  }

  @Test
  public void test46()  throws Throwable  {
      Range range0 = Range.of(1330L, 1330L);
      assertNotNull(range0);
      
      List<Range> list0 = range0.split(1330L);
      range0.equals((Object) list0);
      assertEquals("[ 1330 .. 1330 ]/0B", range0.toString());
  }

  @Test
  public void test47()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), 0L);
      assertNotNull(range0);
      
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      range0.equals((Object) hashSet0);
      assertEquals("[ -2147483648 .. 0 ]/0B", range0.toString());
      assertEquals(0L, range0.getEnd());
      assertEquals(2147483649L, range0.getLength());
  }

  @Test
  public void test48()  throws Throwable  {
      Range range0 = Range.of((-1419L), (-128L));
      assertNotNull(range0);
      
      TreeSet<Range> treeSet0 = new TreeSet<Range>();
      boolean boolean0 = range0.equals((Object) treeSet0);
      assertEquals(false, boolean0);
      assertEquals(1292L, range0.getLength());
      assertEquals("[ -1419 .. -128 ]/0B", range0.toString());
  }

  @Test
  public void test49()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (long) 0, (long) 0);
      assertNotNull(range0);
      
      boolean boolean0 = range0.equals((Object) "[]");
      assertEquals(false, boolean0);
      assertEquals(1L, range0.getLength());
      assertEquals("[ -1 .. -1 ]/0B", range0.toString());
  }

  @Test
  public void test50()  throws Throwable  {
      Range range0 = Range.of(0L);
      assertNotNull(range0);
      
      boolean boolean0 = range0.equals((Object) null);
      assertEquals(false, boolean0);
      assertEquals("[ 0 .. 0 ]/0B", range0.toString());
  }

  @Test
  public void test51()  throws Throwable  {
      Range range0 = Range.of(0L);
      assertNotNull(range0);
      
      boolean boolean0 = range0.equals((Object) "[]");
      assertEquals(0L, range0.getBegin());
      assertEquals("[ 0 .. 0 ]/0B", range0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test52()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483641L, 2147483641L);
      assertNotNull(range0);
      
      Stack<Range> stack0 = new Stack<Range>();
      boolean boolean0 = range0.equals((Object) stack0);
      assertEquals("[ 2147483640 .. 2147483640 ]/0B", range0.toString());
      assertEquals(false, boolean0);
      assertEquals(1L, range0.getLength());
  }

  @Test
  public void test53()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      assertNotNull(range_Builder0);
      
      Range range0 = range_Builder0.build();
      assertNotNull(range0);
      
      boolean boolean0 = range0.equals((Object) "[]");
      assertEquals(false, boolean0);
      assertEquals("[ 0 .. -1 ]/0B", range0.toString());
  }

  @Test
  public void test54()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      assertNotNull(range0);
      
      boolean boolean0 = range0.equals((Object) null);
      assertEquals("[ 0 .. -1 ]/0B", range0.toString());
      assertEquals(false, boolean0);
      assertEquals(0L, range0.getLength());
  }

  @Test
  public void test55()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1806L, 1806L);
      assertNotNull(range0);
      
      range0.equals((Object) "[]");
      assertEquals("[ 1806 .. 1805 ]/0B", range0.toString());
      assertEquals(1805L, range0.getEnd());
      assertEquals(1806L, range0.getBegin());
  }

  @Test
  public void test56()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      assertNotNull(range0);
      
      Stack<Range> stack0 = new Stack<Range>();
      range0.equals((Object) stack0);
      assertEquals(true, range0.isEmpty());
      assertEquals("[ 2147483647 .. 2147483646 ]/0B", range0.toString());
  }

  @Test
  public void test57()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483650L, 2147483650L);
      assertNotNull(range0);
      
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      boolean boolean0 = range0.equals((Object) arrayDeque0);
      assertEquals("[ 2147483650 .. 2147483649 ]/0B", range0.toString());
      assertEquals(true, range0.isEmpty());
      assertEquals(false, boolean0);
  }

  @Test
  public void test58()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try {
        Range.of(range_CoordinateSystem0, 1301L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * length can not be negative
         */
      }
  }

  @Test
  public void test59()  throws Throwable  {
      // Undeclared exception!
      try {
        Range.ofLength((-1851L));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * must be >=0
         */
      }
  }
}
