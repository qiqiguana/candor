/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.internal.trace.chromat.scf;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.HashMap;
import java.util.Map;
import org.jcvi.jillion.core.pos.PositionSequence;
import org.jcvi.jillion.core.qual.QualitySequence;
import org.jcvi.jillion.internal.trace.chromat.BasicChromatogram;
import org.jcvi.jillion.internal.trace.chromat.DefaultChannel;
import org.jcvi.jillion.internal.trace.chromat.DefaultChannelGroup;
import org.jcvi.jillion.internal.trace.chromat.scf.PrivateDataImpl;
import org.jcvi.jillion.internal.trace.chromat.scf.SCFChromatogramImpl;
import org.jcvi.jillion.trace.chromat.Channel;
import org.jcvi.jillion.trace.chromat.ChannelGroup;
import org.jcvi.jillion.trace.chromat.Chromatogram;
import org.jcvi.jillion.trace.chromat.scf.PrivateData;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SCFChromatogramImplEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      short[] shortArray0 = new short[2];
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      PositionSequence positionSequence0 = defaultChannel0.getPositions();
      DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup((Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BasicChromatogram basicChromatogram0 = new BasicChromatogram("", "", byteArray0, positionSequence0, (ChannelGroup) defaultChannelGroup0, (Map<String, String>) hashMap0);
      SCFChromatogramImpl sCFChromatogramImpl0 = new SCFChromatogramImpl((Chromatogram) basicChromatogram0);
      PrivateDataImpl privateDataImpl0 = new PrivateDataImpl(byteArray0);
      SCFChromatogramImpl sCFChromatogramImpl1 = new SCFChromatogramImpl((Chromatogram) sCFChromatogramImpl0, (QualitySequence) null, (QualitySequence) null, (QualitySequence) null, (PrivateData) privateDataImpl0);
      boolean boolean0 = sCFChromatogramImpl0.equals((Object) sCFChromatogramImpl1);
      assertEquals(false, boolean0);
      assertFalse(sCFChromatogramImpl1.equals(sCFChromatogramImpl0));
  }

  @Test
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      short[] shortArray0 = new short[2];
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      PositionSequence positionSequence0 = defaultChannel0.getPositions();
      DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup((Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BasicChromatogram basicChromatogram0 = new BasicChromatogram("", "", byteArray0, positionSequence0, (ChannelGroup) defaultChannelGroup0, (Map<String, String>) hashMap0);
      SCFChromatogramImpl sCFChromatogramImpl0 = new SCFChromatogramImpl((Chromatogram) basicChromatogram0);
      int int0 = sCFChromatogramImpl0.hashCode();
      assertEquals((-944262016), int0);
  }

  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      short[] shortArray0 = new short[2];
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      PositionSequence positionSequence0 = defaultChannel0.getPositions();
      DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup((Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BasicChromatogram basicChromatogram0 = new BasicChromatogram("", "", byteArray0, positionSequence0, (ChannelGroup) defaultChannelGroup0, (Map<String, String>) hashMap0);
      SCFChromatogramImpl sCFChromatogramImpl0 = new SCFChromatogramImpl((Chromatogram) basicChromatogram0);
      boolean boolean0 = sCFChromatogramImpl0.equals((Object) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      short[] shortArray0 = new short[2];
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      PositionSequence positionSequence0 = defaultChannel0.getPositions();
      DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup((Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BasicChromatogram basicChromatogram0 = new BasicChromatogram("", "", byteArray0, positionSequence0, (ChannelGroup) defaultChannelGroup0, (Map<String, String>) hashMap0);
      SCFChromatogramImpl sCFChromatogramImpl0 = new SCFChromatogramImpl((Chromatogram) basicChromatogram0);
      PrivateDataImpl privateDataImpl0 = new PrivateDataImpl(byteArray0);
      QualitySequence qualitySequence0 = sCFChromatogramImpl0.getQualitySequence();
      SCFChromatogramImpl sCFChromatogramImpl1 = new SCFChromatogramImpl((Chromatogram) sCFChromatogramImpl0, (QualitySequence) null, (QualitySequence) null, qualitySequence0, (PrivateData) privateDataImpl0);
      boolean boolean0 = sCFChromatogramImpl0.equals((Object) sCFChromatogramImpl1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      short[] shortArray0 = new short[2];
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      PositionSequence positionSequence0 = defaultChannel0.getPositions();
      DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup((Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BasicChromatogram basicChromatogram0 = new BasicChromatogram("", "", byteArray0, positionSequence0, (ChannelGroup) defaultChannelGroup0, (Map<String, String>) hashMap0);
      SCFChromatogramImpl sCFChromatogramImpl0 = new SCFChromatogramImpl((Chromatogram) basicChromatogram0);
      PrivateDataImpl privateDataImpl0 = new PrivateDataImpl(byteArray0);
      QualitySequence qualitySequence0 = sCFChromatogramImpl0.getQualitySequence();
      SCFChromatogramImpl sCFChromatogramImpl1 = new SCFChromatogramImpl((Chromatogram) sCFChromatogramImpl0, (QualitySequence) null, qualitySequence0, (QualitySequence) null, (PrivateData) privateDataImpl0);
      boolean boolean0 = sCFChromatogramImpl0.equals((Object) sCFChromatogramImpl1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      short[] shortArray0 = new short[2];
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      PositionSequence positionSequence0 = defaultChannel0.getPositions();
      DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup((Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BasicChromatogram basicChromatogram0 = new BasicChromatogram("", "", byteArray0, positionSequence0, (ChannelGroup) defaultChannelGroup0, (Map<String, String>) hashMap0);
      SCFChromatogramImpl sCFChromatogramImpl0 = new SCFChromatogramImpl((Chromatogram) basicChromatogram0);
      PrivateDataImpl privateDataImpl0 = new PrivateDataImpl(byteArray0);
      QualitySequence qualitySequence0 = sCFChromatogramImpl0.getQualitySequence();
      SCFChromatogramImpl sCFChromatogramImpl1 = new SCFChromatogramImpl((Chromatogram) sCFChromatogramImpl0, qualitySequence0, (QualitySequence) null, (QualitySequence) null, (PrivateData) privateDataImpl0);
      boolean boolean0 = sCFChromatogramImpl0.equals((Object) sCFChromatogramImpl1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      short[] shortArray0 = new short[2];
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      PositionSequence positionSequence0 = defaultChannel0.getPositions();
      DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup((Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel0, (Channel) defaultChannel0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BasicChromatogram basicChromatogram0 = new BasicChromatogram("", "", byteArray0, positionSequence0, (ChannelGroup) defaultChannelGroup0, (Map<String, String>) hashMap0);
      SCFChromatogramImpl sCFChromatogramImpl0 = new SCFChromatogramImpl((Chromatogram) basicChromatogram0);
      PrivateDataImpl privateDataImpl0 = new PrivateDataImpl(byteArray0);
      SCFChromatogramImpl sCFChromatogramImpl1 = new SCFChromatogramImpl((Chromatogram) sCFChromatogramImpl0, (QualitySequence) null, (QualitySequence) null, (QualitySequence) null, (PrivateData) privateDataImpl0);
      SCFChromatogramImpl sCFChromatogramImpl2 = new SCFChromatogramImpl((Chromatogram) basicChromatogram0, (QualitySequence) null, (QualitySequence) null, (QualitySequence) null, (PrivateData) privateDataImpl0);
      boolean boolean0 = sCFChromatogramImpl1.equals((Object) sCFChromatogramImpl2);
      assertEquals(true, boolean0);
      assertFalse(sCFChromatogramImpl0.equals(sCFChromatogramImpl2));
  }
}
