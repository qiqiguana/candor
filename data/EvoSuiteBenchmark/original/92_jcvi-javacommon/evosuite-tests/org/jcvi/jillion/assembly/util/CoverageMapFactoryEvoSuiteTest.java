/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.assembly.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Collection;
import java.util.LinkedList;
import org.jcvi.jillion.assembly.AssembledRead;
import org.jcvi.jillion.assembly.util.CoverageMap;
import org.jcvi.jillion.assembly.util.CoverageMapFactory;
import org.jcvi.jillion.core.DirectedRange;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.Rangeable;
import org.jcvi.jillion.core.residue.nt.NucleotideSequence;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class CoverageMapFactoryEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LinkedList<AssembledRead> linkedList0 = new LinkedList<AssembledRead>();
      CoverageMap<AssembledRead> coverageMap0 = CoverageMapFactory.create((Collection<AssembledRead>) linkedList0);
      CoverageMap<AssembledRead> coverageMap1 = CoverageMapFactory.createUngappedCoverageMap((NucleotideSequence) null, coverageMap0);
      assertEquals(0, coverageMap1.getMaxCoverage());
  }

  @Test
  public void test1()  throws Throwable  {
      LinkedList<Rangeable> linkedList0 = new LinkedList<Rangeable>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      DirectedRange directedRange0 = DirectedRange.parse((long) 1855, 711L, range_CoordinateSystem0);
      linkedList0.add((Rangeable) directedRange0);
      DirectedRange directedRange1 = DirectedRange.parse(711L, (-1395L), range_CoordinateSystem0);
      linkedList0.add(0, (Rangeable) directedRange1);
      CoverageMap<Rangeable> coverageMap0 = CoverageMapFactory.create((Collection<Rangeable>) linkedList0);
      assertEquals(2, coverageMap0.getMaxCoverage());
  }

  @Test
  public void test2()  throws Throwable  {
      LinkedList<Rangeable> linkedList0 = new LinkedList<Rangeable>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      DirectedRange directedRange0 = DirectedRange.parse((long) 1855, 711L, range_CoordinateSystem0);
      linkedList0.add((Rangeable) directedRange0);
      linkedList0.add(0, (Rangeable) directedRange0);
      CoverageMap<Rangeable> coverageMap0 = CoverageMapFactory.create((Collection<Rangeable>) linkedList0);
      assertEquals(2.0, coverageMap0.getAverageCoverage(), 0.01D);
  }

  @Test
  public void test3()  throws Throwable  {
      LinkedList<Rangeable> linkedList0 = new LinkedList<Rangeable>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      DirectedRange directedRange0 = DirectedRange.parse((long) 1855, 711L, range_CoordinateSystem0);
      linkedList0.add((Rangeable) directedRange0);
      DirectedRange directedRange1 = DirectedRange.parse(711L, (-1395L), range_CoordinateSystem0);
      linkedList0.add((Rangeable) directedRange1);
      CoverageMap<Rangeable> coverageMap0 = CoverageMapFactory.create((Collection<Rangeable>) linkedList0);
      assertEquals(false, coverageMap0.isEmpty());
  }

  @Test
  public void test4()  throws Throwable  {
      LinkedList<Rangeable> linkedList0 = new LinkedList<Rangeable>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      DirectedRange directedRange0 = DirectedRange.parse((-1380L), (-1380L), range_CoordinateSystem0);
      linkedList0.offer((Rangeable) directedRange0);
      CoverageMap<Rangeable> coverageMap0 = CoverageMapFactory.create((Collection<Rangeable>) linkedList0, 1);
      assertEquals(0, coverageMap0.getNumberOfRegions());
  }
}
