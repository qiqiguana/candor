/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.assembly.consed.phd;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import org.jcvi.jillion.assembly.consed.phd.IndexedPhdDataStore;
import org.jcvi.jillion.assembly.consed.phd.PhdBallVisitorCallback;
import org.jcvi.jillion.assembly.consed.phd.PhdVisitor;
import org.jcvi.jillion.core.datastore.DataStoreFilter;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class IndexedPhdDataStoreEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      File file0 = new File("", "");
      try {
        IndexedPhdDataStore.create(file0, (DataStoreFilter) null);
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
        /*
         * / (Is a directory)
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      IndexedPhdDataStore.SinglePhdVisitor indexedPhdDataStore_SinglePhdVisitor0 = new IndexedPhdDataStore.SinglePhdVisitor("]qRe<,");
      PhdVisitor phdVisitor0 = indexedPhdDataStore_SinglePhdVisitor0.visitPhd((PhdBallVisitorCallback) null, "]qRe<,", (Integer) 240);
      assertNotNull(phdVisitor0);
  }

  @Test
  public void test2()  throws Throwable  {
      IndexedPhdDataStore.SinglePhdVisitor indexedPhdDataStore_SinglePhdVisitor0 = new IndexedPhdDataStore.SinglePhdVisitor("]qRe<,");
      // Undeclared exception!
      try {
        indexedPhdDataStore_SinglePhdVisitor0.visitPhd((PhdBallVisitorCallback) null, " but was ", (Integer) 240);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * did not visit correct id: expected ]qRe<, but was  but was 
         */
      }
  }
}
