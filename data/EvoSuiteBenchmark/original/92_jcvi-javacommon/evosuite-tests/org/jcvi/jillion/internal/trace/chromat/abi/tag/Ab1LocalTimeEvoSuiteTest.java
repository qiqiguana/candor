/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.internal.trace.chromat.abi.tag;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.jcvi.jillion.internal.trace.chromat.abi.tag.Ab1LocalTime;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class Ab1LocalTimeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Ab1LocalTime ab1LocalTime0 = new Ab1LocalTime(0, (-410), 1052);
      int int0 = ab1LocalTime0.getSec();
      assertEquals("Ab1LocalTime [hour=0, min=-410, sec=1052]", ab1LocalTime0.toString());
      assertEquals(1052, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      Ab1LocalTime ab1LocalTime0 = new Ab1LocalTime((-1271), (-1271), (-1271));
      int int0 = ab1LocalTime0.getMin();
      assertEquals((-1271), int0);
      assertEquals("Ab1LocalTime [hour=-1271, min=-1271, sec=-1271]", ab1LocalTime0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      Ab1LocalTime ab1LocalTime0 = new Ab1LocalTime((-1305), (-1305), 436);
      int int0 = ab1LocalTime0.getHour();
      assertEquals("Ab1LocalTime [hour=-1305, min=-1305, sec=436]", ab1LocalTime0.toString());
      assertEquals((-1305), int0);
  }

  @Test
  public void test3()  throws Throwable  {
      Ab1LocalTime ab1LocalTime0 = new Ab1LocalTime((-1271), (-1271), (-1271));
      int int0 = ab1LocalTime0.hashCode();
      assertEquals((-1232312), int0);
  }

  @Test
  public void test4()  throws Throwable  {
      Ab1LocalTime ab1LocalTime0 = new Ab1LocalTime((-1305), (-1305), 436);
      String string0 = ab1LocalTime0.toString();
      assertEquals("Ab1LocalTime [hour=-1305, min=-1305, sec=436]", string0);
      assertNotNull(string0);
  }

  @Test
  public void test5()  throws Throwable  {
      Ab1LocalTime ab1LocalTime0 = new Ab1LocalTime((-1271), (-1271), (-1271));
      Ab1LocalTime ab1LocalTime1 = new Ab1LocalTime((-1271), (-684), (-1271));
      boolean boolean0 = ab1LocalTime0.equals((Object) ab1LocalTime1);
      assertEquals("Ab1LocalTime [hour=-1271, min=-684, sec=-1271]", ab1LocalTime1.toString());
      assertFalse(ab1LocalTime1.equals(ab1LocalTime0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      Ab1LocalTime ab1LocalTime0 = new Ab1LocalTime((-1384), (-1384), (-744));
      boolean boolean0 = ab1LocalTime0.equals((Object) null);
      assertEquals(false, boolean0);
      assertEquals("Ab1LocalTime [hour=-1384, min=-1384, sec=-744]", ab1LocalTime0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      Ab1LocalTime ab1LocalTime0 = new Ab1LocalTime(1, 1, 1);
      boolean boolean0 = ab1LocalTime0.equals((Object) "Ab1LocalTime [hour=1, min=1, sec=1]");
      assertEquals(false, boolean0);
      assertEquals("Ab1LocalTime [hour=1, min=1, sec=1]", ab1LocalTime0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      Ab1LocalTime ab1LocalTime0 = new Ab1LocalTime((-1271), (-1271), (-1271));
      Ab1LocalTime ab1LocalTime1 = new Ab1LocalTime(0, (-941), (-1232312));
      boolean boolean0 = ab1LocalTime0.equals((Object) ab1LocalTime1);
      assertEquals(-1271, ab1LocalTime0.getHour());
      assertEquals(false, boolean0);
      assertEquals("Ab1LocalTime [hour=0, min=-941, sec=-1232312]", ab1LocalTime1.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      Ab1LocalTime ab1LocalTime0 = new Ab1LocalTime(0, 0, 0);
      Ab1LocalTime ab1LocalTime1 = new Ab1LocalTime(0, 0, 19);
      boolean boolean0 = ab1LocalTime0.equals((Object) ab1LocalTime1);
      assertEquals(false, boolean0);
      assertFalse(ab1LocalTime1.equals(ab1LocalTime0));
      assertEquals("Ab1LocalTime [hour=0, min=0, sec=19]", ab1LocalTime1.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      Ab1LocalTime ab1LocalTime0 = new Ab1LocalTime(1, 1, 1);
      Ab1LocalTime ab1LocalTime1 = new Ab1LocalTime(1, 1, 1);
      boolean boolean0 = ab1LocalTime0.equals((Object) ab1LocalTime1);
      assertEquals(true, boolean0);
      assertEquals("Ab1LocalTime [hour=1, min=1, sec=1]", ab1LocalTime1.toString());
  }
}
