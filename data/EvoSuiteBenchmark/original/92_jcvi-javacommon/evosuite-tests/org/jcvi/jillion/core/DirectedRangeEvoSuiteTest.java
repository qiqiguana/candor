/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.jcvi.jillion.core.DirectedRange;
import org.jcvi.jillion.core.Direction;
import org.jcvi.jillion.core.Range;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DirectedRangeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      DirectedRange directedRange0 = DirectedRange.parse((-5L), 1427L, range_CoordinateSystem0);
      assertNotNull(directedRange0);
      
      Direction direction0 = directedRange0.getDirection();
      assertEquals("DirectedRange [range=[ -6 .. 1426 ]/0B, direction=FORWARD]", directedRange0.toString());
      assertEquals(Direction.FORWARD, direction0);
  }

  @Test
  public void test1()  throws Throwable  {
      DirectedRange directedRange0 = DirectedRange.parse(0L, 0L);
      assertNotNull(directedRange0);
      
      Range range0 = directedRange0.asRange();
      DirectedRange directedRange1 = DirectedRange.create(range0);
      assertNotNull(directedRange1);
      
      boolean boolean0 = directedRange0.equals((Object) directedRange1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      DirectedRange directedRange0 = DirectedRange.parse("DirectedRange [range=[ -12 .. -12 ]/0B, direction=REVERSE]");
      assertEquals("DirectedRange [range=[ -12 .. -12 ]/0B, direction=REVERSE]", directedRange0.toString());
      assertNotNull(directedRange0);
  }

  @Test
  public void test3()  throws Throwable  {
      DirectedRange directedRange0 = DirectedRange.parse((-12L), (-12L));
      assertNotNull(directedRange0);
      
      int int0 = directedRange0.hashCode();
      assertEquals((-1117314754), int0);
  }

  @Test
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try {
        DirectedRange.parse("c=qmuv*iI,p8{^2-9W*v", "c=qmuv*iI,p8{^2-9W*v");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
        /*
         * For input string: \"c=qmuv*iI,p8{^2-9W*v\"
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      DirectedRange directedRange0 = DirectedRange.parse((-12L), (-12L));
      assertNotNull(directedRange0);
      
      String string0 = directedRange0.toString();
      assertEquals("DirectedRange [range=[ -12 .. -12 ]/0B, direction=REVERSE]", string0);
      assertNotNull(string0);
  }

  @Test
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try {
        DirectedRange.parse("^l9rCso\tr:+<OqD&o");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * can not parse ^l9rCso\tr:+<OqD&o into a Range
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      DirectedRange directedRange0 = DirectedRange.parse("c=qmuv*iI,p8{^2-9W*v", range_CoordinateSystem0);
      assertNotNull(directedRange0);
      assertEquals("DirectedRange [range=[ 1 .. 8 ]/0B, direction=FORWARD]", directedRange0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      // Undeclared exception!
      try {
        DirectedRange.create((Range) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * range can not be null
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      DirectedRange directedRange0 = DirectedRange.parse(1361L, 1361L);
      assertNotNull(directedRange0);
      
      boolean boolean0 = directedRange0.equals((Object) null);
      assertEquals("DirectedRange [range=[ 1361 .. 1361 ]/0B, direction=REVERSE]", directedRange0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      DirectedRange directedRange0 = DirectedRange.parse("%*(`3,3Nq`8");
      assertNotNull(directedRange0);
      
      boolean boolean0 = directedRange0.equals(object0);
      assertEquals(false, boolean0);
      assertEquals("DirectedRange [range=[ 3 .. 3 ]/0B, direction=REVERSE]", directedRange0.toString());
  }

  @Test
  public void test11()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      DirectedRange directedRange0 = DirectedRange.parse((-5L), 1427L, range_CoordinateSystem0);
      assertNotNull(directedRange0);
      
      Range range0 = directedRange0.asRange();
      DirectedRange directedRange1 = DirectedRange.create(range0);
      assertNotNull(directedRange1);
      
      boolean boolean0 = directedRange0.equals((Object) directedRange1);
      assertEquals(true, boolean0);
      assertEquals("[ -6 .. 1426 ]/0B", range0.toString());
  }

  @Test
  public void test12()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      DirectedRange directedRange0 = DirectedRange.parse((-1L), (-1L), range_CoordinateSystem0);
      assertNotNull(directedRange0);
      
      DirectedRange directedRange1 = DirectedRange.parse((-1L), (-1L));
      assertNotNull(directedRange1);
      
      boolean boolean0 = directedRange0.equals((Object) directedRange1);
      assertEquals("DirectedRange [range=[ -1 .. -1 ]/0B, direction=REVERSE]", directedRange1.toString());
      assertEquals("DirectedRange [range=[ -1 .. -2 ]/0B, direction=REVERSE]", directedRange0.toString());
      assertEquals(false, boolean0);
  }
}
