/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.assembly.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Collection;
import java.util.LinkedList;
import org.jcvi.jillion.assembly.util.CoverageMap;
import org.jcvi.jillion.assembly.util.CoverageMapBuilder;
import org.jcvi.jillion.core.Rangeable;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class CoverageMapBuilderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      CoverageMapBuilder<Rangeable> coverageMapBuilder0 = null;
      try {
        coverageMapBuilder0 = new CoverageMapBuilder<Rangeable>((Collection<Rangeable>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * elements can not be null
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      LinkedList<Rangeable> linkedList0 = new LinkedList<Rangeable>();
      CoverageMapBuilder<Rangeable> coverageMapBuilder0 = new CoverageMapBuilder<Rangeable>((Collection<Rangeable>) linkedList0);
      // Undeclared exception!
      try {
        coverageMapBuilder0.maxAllowedCoverage((-304));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * maxCoverage must be positive
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      LinkedList<Rangeable> linkedList0 = new LinkedList<Rangeable>();
      CoverageMapBuilder<Rangeable> coverageMapBuilder0 = new CoverageMapBuilder<Rangeable>((Collection<Rangeable>) linkedList0);
      coverageMapBuilder0.maxAllowedCoverage(1);
      CoverageMap<Rangeable> coverageMap0 = coverageMapBuilder0.build();
      assertEquals(0, coverageMap0.getNumberOfRegions());
  }

  @Test
  public void test3()  throws Throwable  {
      LinkedList<Rangeable> linkedList0 = new LinkedList<Rangeable>();
      CoverageMapBuilder<Rangeable> coverageMapBuilder0 = new CoverageMapBuilder<Rangeable>((Collection<Rangeable>) linkedList0);
      CoverageMap<Rangeable> coverageMap0 = coverageMapBuilder0.build();
      assertEquals(0, coverageMap0.getMinCoverage());
  }
}
