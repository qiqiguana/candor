/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.internal.trace.chromat.ztr.data;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.jcvi.jillion.internal.trace.chromat.ztr.data.DeltaEncodedData;
import org.jcvi.jillion.trace.TraceEncoderException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DeltaEncodedDataEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DeltaEncodedData deltaEncodedData0 = DeltaEncodedData.SHORT;
      byte[] byteArray0 = new byte[12];
      byte[] byteArray1 = deltaEncodedData0.encodeData(byteArray0);
      assertEquals(0, deltaEncodedData0.getPaddingSize());
      assertNotNull(byteArray1);
  }

  @Test
  public void test1()  throws Throwable  {
      DeltaEncodedData deltaEncodedData0 = DeltaEncodedData.SHORT;
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try {
        deltaEncodedData0.parseData(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * no delta strategy for level 0
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      DeltaEncodedData.Level deltaEncodedData_Level0 = DeltaEncodedData.Level.DELTA_LEVEL_3;
      byte byte0 = deltaEncodedData_Level0.getLevel();
      assertEquals((byte)3, byte0);
  }

  @Test
  public void test3()  throws Throwable  {
      DeltaEncodedData deltaEncodedData0 = DeltaEncodedData.INTEGER;
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try {
        deltaEncodedData0.encodeData(byteArray0, (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * no delta strategy for level 0
         */
      }
  }
}
