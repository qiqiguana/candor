/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.assembly.util.consensus;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Map;
import java.util.Set;
import org.jcvi.jillion.assembly.util.consensus.ConsensusProbabilities;
import org.jcvi.jillion.core.residue.nt.Nucleotide;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ConsensusProbabilitiesEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.NotGuanine;
      ConsensusProbabilities consensusProbabilities0 = new ConsensusProbabilities(nucleotide0, 0);
      assertNotNull(consensusProbabilities0);
      
      String string0 = consensusProbabilities0.toString();
      assertEquals("ProbabilityStruct [probabilityMap={-=0.25, A=0.25, C=0.25, G=0.25, T=0.25}]", string0);
      assertNotNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Cytosine;
      ConsensusProbabilities consensusProbabilities0 = new ConsensusProbabilities(nucleotide0, 24);
      assertNotNull(consensusProbabilities0);
      
      Set<Map.Entry<Nucleotide, Double>> set0 = (Set<Map.Entry<Nucleotide, Double>>)consensusProbabilities0.entrySet();
      assertEquals("ProbabilityStruct [probabilityMap={-=9.952679263837425E-4, A=9.952679263837425E-4, C=0.996018928294465, G=9.952679263837425E-4, T=9.952679263837425E-4}]", consensusProbabilities0.toString());
      assertNotNull(set0);
  }

  @Test
  public void test2()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Cytosine;
      ConsensusProbabilities consensusProbabilities0 = new ConsensusProbabilities(nucleotide0, 24);
      assertNotNull(consensusProbabilities0);
      
      ConsensusProbabilities consensusProbabilities1 = consensusProbabilities0.normalize();
      assertNotNull(consensusProbabilities1);
      assertEquals("ProbabilityStruct [probabilityMap={-=0.9990047320736163, A=0.9990047320736163, C=0.003981071705534971, G=0.9990047320736163, T=0.9990047320736163}]", consensusProbabilities1.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.NotGuanine;
      ConsensusProbabilities consensusProbabilities0 = new ConsensusProbabilities(nucleotide0, 0);
      assertNotNull(consensusProbabilities0);
      
      consensusProbabilities0.getProbabilityFor(nucleotide0);
      assertEquals("ProbabilityStruct [probabilityMap={-=0.25, A=0.25, C=0.25, G=0.25, T=0.25}]", consensusProbabilities0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.NotGuanine;
      ConsensusProbabilities consensusProbabilities0 = new ConsensusProbabilities(nucleotide0, 0);
      assertNotNull(consensusProbabilities0);
      
      // Undeclared exception!
      try {
        consensusProbabilities0.getProbabilityFor((Nucleotide) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * base can not be null
         */
      }
  }
}
