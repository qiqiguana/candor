/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.core.qual;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.jcvi.jillion.core.qual.PhredQuality;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PhredQualityEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      PhredQuality phredQuality0 = PhredQuality.valueOf(0);
      assertNotNull(phredQuality0);
      
      String string0 = phredQuality0.toString();
      assertNotNull(string0);
      assertEquals("Q00", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      PhredQuality phredQuality0 = PhredQuality.valueOf(0);
      assertNotNull(phredQuality0);
      
      double double0 = phredQuality0.getErrorProbability();
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test2()  throws Throwable  {
      PhredQuality phredQuality0 = PhredQuality.valueOf(0);
      assertNotNull(phredQuality0);
      
      int int0 = phredQuality0.compareTo(phredQuality0);
      assertEquals(0, int0);
      assertEquals(0, phredQuality0.getQualityScore());
  }

  @Test
  public void test3()  throws Throwable  {
      PhredQuality phredQuality0 = PhredQuality.valueOf(0);
      assertNotNull(phredQuality0);
      
      int int0 = phredQuality0.hashCode();
      assertEquals(31, int0);
  }

  @Test
  public void test4()  throws Throwable  {
      PhredQuality phredQuality0 = PhredQuality.withErrorProbability(0.7943282347242815);
      assertNotNull(phredQuality0);
      assertEquals(0.7943282347242815, phredQuality0.getErrorProbability(), 0.01D);
  }

  @Test
  public void test5()  throws Throwable  {
      PhredQuality phredQuality0 = PhredQuality.valueOf(39);
      assertNotNull(phredQuality0);
      
      byte byte0 = phredQuality0.getQualityScore();
      assertEquals((byte)39, byte0);
  }

  @Test
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try {
        PhredQuality.withErrorProbability((double) 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * probability must be > 0 : 0.0
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      // Undeclared exception!
      try {
        PhredQuality.withErrorProbability((double) (byte)39);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * probability must be < 1: 39.0
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      // Undeclared exception!
      try {
        PhredQuality.valueOf((-1484));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * qualityScore of our range -1484
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      // Undeclared exception!
      try {
        PhredQuality.valueOf(198);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * qualityScore of our range 198
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      PhredQuality phredQuality0 = PhredQuality.valueOf(0);
      assertNotNull(phredQuality0);
      
      PhredQuality phredQuality1 = PhredQuality.valueOf(1);
      assertNotNull(phredQuality1);
      
      boolean boolean0 = phredQuality0.equals((Object) phredQuality1);
      assertFalse(phredQuality1.equals(phredQuality0));
      assertEquals(1.0, phredQuality0.getErrorProbability(), 0.01D);
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      PhredQuality phredQuality0 = PhredQuality.valueOf(39);
      assertNotNull(phredQuality0);
      
      boolean boolean0 = phredQuality0.equals((Object) phredQuality0);
      assertEquals(true, boolean0);
      assertEquals(1.2589254117941674E-4, phredQuality0.getErrorProbability(), 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      PhredQuality phredQuality0 = PhredQuality.valueOf(0);
      assertNotNull(phredQuality0);
      
      boolean boolean0 = phredQuality0.equals((Object) null);
      assertEquals(1.0, phredQuality0.getErrorProbability(), 0.01D);
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      PhredQuality phredQuality0 = PhredQuality.valueOf(39);
      assertNotNull(phredQuality0);
      
      Integer integer0 = new Integer(39);
      boolean boolean0 = phredQuality0.equals((Object) integer0);
      assertEquals(false, boolean0);
      assertEquals(39, phredQuality0.getQualityScore());
  }
}
