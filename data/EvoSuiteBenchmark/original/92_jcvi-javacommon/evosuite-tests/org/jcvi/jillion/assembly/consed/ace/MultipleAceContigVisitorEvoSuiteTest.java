/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.assembly.consed.ace;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import org.jcvi.jillion.assembly.consed.ace.AceContigVisitor;
import org.jcvi.jillion.assembly.consed.ace.HighLowPhdAceContigVisitor;
import org.jcvi.jillion.assembly.consed.ace.MultipleAceContigReadVisitor;
import org.jcvi.jillion.assembly.consed.ace.MultipleAceContigVisitor;
import org.jcvi.jillion.core.Direction;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.qual.QualitySequence;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MultipleAceContigVisitorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      AceContigVisitor[] aceContigVisitorArray0 = new AceContigVisitor[11];
      LinkedList<AceContigVisitor> linkedList0 = new LinkedList<AceContigVisitor>();
      MultipleAceContigVisitor multipleAceContigVisitor0 = new MultipleAceContigVisitor((List<? extends AceContigVisitor>) linkedList0);
      aceContigVisitorArray0[0] = (AceContigVisitor) multipleAceContigVisitor0;
      MultipleAceContigVisitor multipleAceContigVisitor1 = new MultipleAceContigVisitor(aceContigVisitorArray0);
      multipleAceContigVisitor1.visitBasesLine("S`nG}BPz");
      assertNotSame(multipleAceContigVisitor1, multipleAceContigVisitor0);
  }

  @Test
  public void test1()  throws Throwable  {
      LinkedList<AceContigVisitor> linkedList0 = new LinkedList<AceContigVisitor>();
      MultipleAceContigVisitor multipleAceContigVisitor0 = new MultipleAceContigVisitor((List<? extends AceContigVisitor>) linkedList0);
      multipleAceContigVisitor0.visitBasesLine("S`nG}BPz");
  }

  @Test
  public void test2()  throws Throwable  {
      LinkedList<AceContigVisitor> linkedList0 = new LinkedList<AceContigVisitor>();
      HighLowPhdAceContigVisitor highLowPhdAceContigVisitor0 = new HighLowPhdAceContigVisitor(13, 87, 13);
      linkedList0.add((AceContigVisitor) highLowPhdAceContigVisitor0);
      MultipleAceContigVisitor multipleAceContigVisitor0 = new MultipleAceContigVisitor((List<? extends AceContigVisitor>) linkedList0);
      multipleAceContigVisitor0.visitConsensusQualities((QualitySequence) null);
  }

  @Test
  public void test3()  throws Throwable  {
      LinkedList<AceContigVisitor> linkedList0 = new LinkedList<AceContigVisitor>();
      HighLowPhdAceContigVisitor highLowPhdAceContigVisitor0 = new HighLowPhdAceContigVisitor(13, 87, 13);
      linkedList0.add((AceContigVisitor) highLowPhdAceContigVisitor0);
      MultipleAceContigVisitor multipleAceContigVisitor0 = new MultipleAceContigVisitor((List<? extends AceContigVisitor>) linkedList0);
      Direction direction0 = Direction.REVERSE;
      multipleAceContigVisitor0.visitAlignedReadInfo((String) null, direction0, 0);
  }

  @Test
  public void test4()  throws Throwable  {
      AceContigVisitor[] aceContigVisitorArray0 = new AceContigVisitor[11];
      LinkedList<AceContigVisitor> linkedList0 = new LinkedList<AceContigVisitor>();
      MultipleAceContigVisitor multipleAceContigVisitor0 = new MultipleAceContigVisitor((List<? extends AceContigVisitor>) linkedList0);
      aceContigVisitorArray0[0] = (AceContigVisitor) multipleAceContigVisitor0;
      MultipleAceContigVisitor multipleAceContigVisitor1 = new MultipleAceContigVisitor(aceContigVisitorArray0);
      multipleAceContigVisitor1.visitBaseSegment((Range) null, "S`nG}BPz");
      assertNotSame(multipleAceContigVisitor1, multipleAceContigVisitor0);
  }

  @Test
  public void test5()  throws Throwable  {
      LinkedList<AceContigVisitor> linkedList0 = new LinkedList<AceContigVisitor>();
      HighLowPhdAceContigVisitor highLowPhdAceContigVisitor0 = new HighLowPhdAceContigVisitor(13, 87, 13);
      linkedList0.add((AceContigVisitor) highLowPhdAceContigVisitor0);
      MultipleAceContigVisitor multipleAceContigVisitor0 = new MultipleAceContigVisitor((List<? extends AceContigVisitor>) linkedList0);
      MultipleAceContigReadVisitor multipleAceContigReadVisitor0 = (MultipleAceContigReadVisitor)multipleAceContigVisitor0.visitBeginRead("gge", 96);
      assertNotNull(multipleAceContigReadVisitor0);
  }

  @Test
  public void test6()  throws Throwable  {
      LinkedList<AceContigVisitor> linkedList0 = new LinkedList<AceContigVisitor>();
      AceContigVisitor[] aceContigVisitorArray0 = new AceContigVisitor[24];
      MultipleAceContigVisitor multipleAceContigVisitor0 = new MultipleAceContigVisitor(aceContigVisitorArray0);
      linkedList0.add((AceContigVisitor) multipleAceContigVisitor0);
      MultipleAceContigVisitor multipleAceContigVisitor1 = new MultipleAceContigVisitor((List<? extends AceContigVisitor>) linkedList0);
      MultipleAceContigReadVisitor multipleAceContigReadVisitor0 = (MultipleAceContigReadVisitor)multipleAceContigVisitor1.visitBeginRead("gge", 96);
      assertNull(multipleAceContigReadVisitor0);
  }

  @Test
  public void test7()  throws Throwable  {
      LinkedList<AceContigVisitor> linkedList0 = new LinkedList<AceContigVisitor>();
      HighLowPhdAceContigVisitor highLowPhdAceContigVisitor0 = new HighLowPhdAceContigVisitor(13, 87, 13);
      linkedList0.add((AceContigVisitor) highLowPhdAceContigVisitor0);
      MultipleAceContigVisitor multipleAceContigVisitor0 = new MultipleAceContigVisitor((List<? extends AceContigVisitor>) linkedList0);
      multipleAceContigVisitor0.visitEnd();
  }

  @Test
  public void test8()  throws Throwable  {
      AceContigVisitor[] aceContigVisitorArray0 = new AceContigVisitor[11];
      LinkedList<AceContigVisitor> linkedList0 = new LinkedList<AceContigVisitor>();
      MultipleAceContigVisitor multipleAceContigVisitor0 = new MultipleAceContigVisitor((List<? extends AceContigVisitor>) linkedList0);
      aceContigVisitorArray0[0] = (AceContigVisitor) multipleAceContigVisitor0;
      MultipleAceContigVisitor multipleAceContigVisitor1 = new MultipleAceContigVisitor(aceContigVisitorArray0);
      multipleAceContigVisitor1.halted();
      assertNotSame(multipleAceContigVisitor1, multipleAceContigVisitor0);
  }
}
