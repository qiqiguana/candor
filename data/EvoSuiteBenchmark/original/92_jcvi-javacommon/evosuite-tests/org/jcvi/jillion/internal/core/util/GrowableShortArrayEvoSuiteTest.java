/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.internal.core.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.jcvi.jillion.internal.core.util.GrowableShortArray;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class GrowableShortArrayEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      short[] shortArray0 = new short[1];
      GrowableShortArray growableShortArray0 = new GrowableShortArray(shortArray0);
      growableShortArray0.prepend(shortArray0);
      assertEquals(2, growableShortArray0.getCurrentLength());
  }

  @Test
  public void test1()  throws Throwable  {
      short[] shortArray0 = new short[8];
      GrowableShortArray growableShortArray0 = new GrowableShortArray(shortArray0);
      assertNotNull(growableShortArray0);
      
      growableShortArray0.prepend(growableShortArray0);
      assertEquals(16, growableShortArray0.getCurrentLength());
  }

  @Test
  public void test2()  throws Throwable  {
      short[] shortArray0 = new short[1];
      GrowableShortArray growableShortArray0 = new GrowableShortArray(shortArray0);
      assertNotNull(growableShortArray0);
      
      int int0 = growableShortArray0.getCurrentLength();
      assertEquals(1, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      short[] shortArray0 = new short[32];
      GrowableShortArray growableShortArray0 = new GrowableShortArray(shortArray0);
      // Undeclared exception!
      try {
        growableShortArray0.get(296);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 296, Size: 32
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      short[] shortArray0 = new short[23];
      GrowableShortArray growableShortArray0 = new GrowableShortArray(shortArray0);
      assertNotNull(growableShortArray0);
      
      growableShortArray0.append((short)0);
      assertEquals(24, growableShortArray0.getCurrentLength());
  }

  @Test
  public void test5()  throws Throwable  {
      GrowableShortArray growableShortArray0 = new GrowableShortArray((int) (short)32);
      assertNotNull(growableShortArray0);
      
      growableShortArray0.prepend((short)32);
      assertEquals(1, growableShortArray0.getCurrentLength());
  }

  @Test
  public void test6()  throws Throwable  {
      short[] shortArray0 = new short[23];
      GrowableShortArray growableShortArray0 = new GrowableShortArray(shortArray0);
      short[] shortArray1 = growableShortArray0.toArray();
      assertFalse(shortArray0.equals(shortArray1));
  }

  @Test
  public void test7()  throws Throwable  {
      short[] shortArray0 = new short[8];
      GrowableShortArray growableShortArray0 = new GrowableShortArray(shortArray0);
      growableShortArray0.replace((int) (short)0, (short)19);
      assertEquals(8, growableShortArray0.getCurrentLength());
  }

  @Test
  public void test8()  throws Throwable  {
      short[] shortArray0 = new short[1];
      GrowableShortArray growableShortArray0 = new GrowableShortArray(shortArray0);
      assertNotNull(growableShortArray0);
      
      growableShortArray0.append(shortArray0);
      assertEquals(2, growableShortArray0.getCurrentLength());
  }

  @Test
  public void test9()  throws Throwable  {
      short[] shortArray0 = new short[32];
      GrowableShortArray growableShortArray0 = new GrowableShortArray(shortArray0);
      assertNotNull(growableShortArray0);
      
      growableShortArray0.append(growableShortArray0);
      assertEquals(64, growableShortArray0.getCurrentLength());
  }

  @Test
  public void test10()  throws Throwable  {
      short[] shortArray0 = new short[1];
      GrowableShortArray growableShortArray0 = new GrowableShortArray(shortArray0);
      assertNotNull(growableShortArray0);
      
      GrowableShortArray growableShortArray1 = growableShortArray0.copy();
      assertEquals(1, growableShortArray1.getCurrentLength());
      assertNotNull(growableShortArray1);
  }

  @Test
  public void test11()  throws Throwable  {
      GrowableShortArray growableShortArray0 = null;
      try {
        growableShortArray0 = new GrowableShortArray((-15));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * initial capacity should be > 0 :-15
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      short[] shortArray0 = new short[23];
      GrowableShortArray growableShortArray0 = new GrowableShortArray(shortArray0);
      // Undeclared exception!
      try {
        growableShortArray0.insert((-570), growableShortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: -570, Size: 23
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      short[] shortArray0 = new short[4];
      GrowableShortArray growableShortArray0 = new GrowableShortArray(shortArray0);
      growableShortArray0.reverse();
      assertEquals(4, growableShortArray0.getCurrentLength());
  }

  @Test
  public void test14()  throws Throwable  {
      short[] shortArray0 = new short[1];
      GrowableShortArray growableShortArray0 = new GrowableShortArray(shortArray0);
      assertNotNull(growableShortArray0);
      
      short short0 = growableShortArray0.remove((int) (short)0);
      assertEquals(0, growableShortArray0.getCurrentLength());
      assertEquals((short)0, short0);
  }

  @Test
  public void test15()  throws Throwable  {
      short[] shortArray0 = new short[4];
      GrowableShortArray growableShortArray0 = new GrowableShortArray(shortArray0);
      assertNotNull(growableShortArray0);
      
      short short0 = growableShortArray0.remove((int) (short)0);
      assertEquals(3, growableShortArray0.getCurrentLength());
      assertEquals((short)0, short0);
  }
}
