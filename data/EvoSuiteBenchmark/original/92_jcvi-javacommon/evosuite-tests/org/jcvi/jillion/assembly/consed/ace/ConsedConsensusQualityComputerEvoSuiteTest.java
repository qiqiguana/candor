/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.assembly.consed.ace;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.ArrayList;
import org.jcvi.jillion.assembly.AssembledRead;
import org.jcvi.jillion.assembly.Contig;
import org.jcvi.jillion.assembly.consed.ace.AceAssembledReadAdapter;
import org.jcvi.jillion.assembly.consed.ace.ConsedConsensusQualityComputer;
import org.jcvi.jillion.assembly.consed.ace.PhdInfo;
import org.jcvi.jillion.core.datastore.DataStoreException;
import org.jcvi.jillion.core.qual.QualitySequenceDataStore;
import org.jcvi.jillion.core.residue.nt.NucleotideSequence;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ConsedConsensusQualityComputerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ConsedConsensusQualityComputer consedConsensusQualityComputer0 = new ConsedConsensusQualityComputer();
      assertNotNull(consedConsensusQualityComputer0);
  }

  @Test
  public void test1()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ConsedConsensusQualityComputer.readMatchesWindow(intArray0, 0, (AssembledRead) null, (long) 0, intArray0, 1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try {
        ConsedConsensusQualityComputer.computeConsensusQualities((Contig<? extends AssembledRead>) null, (QualitySequenceDataStore) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * contig can not be null
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      ArrayList<AssembledRead> arrayList0 = new ArrayList<AssembledRead>();
      // Undeclared exception!
      try {
        ConsedConsensusQualityComputer.computeConsensusQualities((NucleotideSequence) null, (Iterable<? extends AssembledRead>) arrayList0, (QualitySequenceDataStore) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * consensus can not be null
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int[] intArray0 = new int[9];
      AceAssembledReadAdapter aceAssembledReadAdapter0 = new AceAssembledReadAdapter((AssembledRead) null, (PhdInfo) null);
      boolean boolean0 = ConsedConsensusQualityComputer.readMatchesWindow(intArray0, 983, (AssembledRead) aceAssembledReadAdapter0, (long) 0, intArray0, 0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      int[] intArray0 = new int[7];
      // Undeclared exception!
      try {
        ConsedConsensusQualityComputer.readMatchesWindow(intArray0, 572, (AssembledRead) null, 0L, intArray0, (-1));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int[] intArray0 = new int[7];
      boolean boolean0 = ConsedConsensusQualityComputer.readMatchesWindow(intArray0, (-1), (AssembledRead) null, (long) (-1), intArray0, 572);
      assertEquals(true, boolean0);
  }
}
