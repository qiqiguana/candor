/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.core.io;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.RandomAccessFile;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.sql.Connection;
import java.util.BitSet;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.jcvi.jillion.core.io.IOUtil;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class IOUtilEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try {
        IOUtil.blockingRead((InputStream) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * inputstream can not be null
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try {
        IOUtil.toByteArray((InputStream) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = IOUtil.convertUnsignedByteToByteArray((short) (-56));
      assertNotNull(byteArray0);
  }

  @Test
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOUtil.readUnsignedShort((InputStream) byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
  }

  @Test
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try {
        IOUtil.blockingRead((RandomAccessFile) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * inputstream can not be null
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      BitSet bitSet0 = IOUtil.toBitSet(1252L);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = IOUtil.toByteArray(bitSet0, 9);
      assertEquals(11, bitSet0.length());
      assertNotNull(byteArray0);
      assertEquals(false, bitSet0.isEmpty());
  }

  @Test
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      short short0 = IOUtil.readUnsignedByte(byteArray0);
      assertEquals((short)0, short0);
  }

  @Test
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOUtil.toByteArray((InputStream) byteArrayInputStream0, (int) (byte)1);
      assertEquals(5, byteArrayInputStream0.available());
  }

  @Test
  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOUtil.readUnsignedByte((InputStream) byteArrayInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
  }

  @Test
  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      int int0 = IOUtil.readUnsignedShort(byteArray0);
      assertEquals(0, int0);
  }

  @Test
  public void test10()  throws Throwable  {
      long long0 = IOUtil.toUnsignedInt(0);
      assertEquals(0L, long0);
  }

  @Test
  public void test11()  throws Throwable  {
      IOUtil.Endian iOUtil_Endian0 = IOUtil.Endian.LITTLE;
      // Undeclared exception!
      try {
        IOUtil.readUnsignedLong((InputStream) null, iOUtil_Endian0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * inputstream can not be null
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      File file0 = new File("");
      try {
        IOUtil.createInputStreamFromFile(file0, 0L, 1);
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
        /*
         *  (No such file or directory)
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      long long0 = IOUtil.readUnsignedInt(byteArray0);
      assertEquals(0L, long0);
  }

  @Test
  public void test14()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1504);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream((InputStream) pipedInputStream0, (InputStream) pipedInputStream0);
      try {
        IOUtil.readUnsignedInt((InputStream) sequenceInputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Pipe not connected
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try {
        IOUtil.getUnsignedByteCount((-1L));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * value can not be <0
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = IOUtil.toUnsignedByte((byte) (-77));
      assertEquals(179, int0);
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = IOUtil.toUnsignedShort((short) (-1927));
      assertEquals(63609, int0);
  }

  @Test
  public void test18()  throws Throwable  {
      File file0 = new File("");
      IOUtil.recursiveDelete(file0);
      assertEquals("", file0.toString());
  }

  @Test
  public void test19()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          File file0 = new File("", "");
          // Undeclared exception!
          try {
            IOUtil.recursiveDelete(file0);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission /fastdata/me1jrp/back-cl2-still-2-00070.dat delete)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkDelete(SecurityManager.java:990)
             * java.io.File.delete(File.java:902)
             * org.jcvi.jillion.core.io.IOUtil.delete(IOUtil.java:127)
             * org.jcvi.jillion.core.io.IOUtil.recursiveDelete(IOUtil.java:110)
             * org.jcvi.jillion.core.io.IOUtil.recursiveDelete(IOUtil.java:105)
             * org.jcvi.jillion.core.io.IOUtil.recursiveDelete(IOUtil.java:105)
             * org.jcvi.jillion.core.io.IOUtil.recursiveDelete(IOUtil.java:105)
             * sun.reflect.GeneratedMethodAccessor116.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test20()  throws Throwable  {
      File file0 = new File(")9>5IN1zm", ")9>5IN1zm");
      IOUtil.delete(file0);
      assertEquals(")9>5IN1zm/)9>5IN1zm", file0.toString());
  }

  @Test
  public void test21()  throws Throwable  {
      IOUtil.deleteIgnoreError((File) null);
  }

  @Test
  public void test22()  throws Throwable  {
      File file0 = new File(":G-?~0%3`");
      IOUtil.deleteIgnoreError(file0);
      assertEquals(false, file0.canRead());
  }

  @Test
  public void test23()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          File file0 = new File("length can not be less than 0", "length can not be less than 0");
          // Undeclared exception!
          try {
            IOUtil.mkdirs(file0);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission length can not be less than 0/length can not be less than 0 write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.mkdir(File.java:1155)
             * java.io.File.mkdirs(File.java:1184)
             * org.jcvi.jillion.core.io.IOUtil.mkdirs(IOUtil.java:170)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test24()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          File file0 = new File("");
          // Undeclared exception!
          try {
            IOUtil.mkdir(file0);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission  write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.mkdir(File.java:1155)
             * org.jcvi.jillion.core.io.IOUtil.mkdir(IOUtil.java:190)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test25()  throws Throwable  {
      File file0 = new File("", "");
      IOUtil.mkdir(file0);
      assertEquals(true, file0.canRead());
  }

  @Test
  public void test26()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) bufferedInputStream0);
      Closeable[] closeableArray0 = new Closeable[6];
      closeableArray0[0] = (Closeable) dataInputStream0;
      IOUtil.closeAndIgnoreErrors(closeableArray0);
  }

  @Test
  public void test27()  throws Throwable  {
      IOUtil.closeAndIgnoreErrors((Connection) null);
  }

  @Test
  public void test28()  throws Throwable  {
      IOUtil.closeAndIgnoreErrors((Scanner) null);
  }

  @Test
  public void test29()  throws Throwable  {
      Scanner scanner0 = new Scanner("");
      IOUtil.closeAndIgnoreErrors(scanner0);
      assertEquals("java.util.Scanner[delimiters=\\p{javaWhitespace}+][position=0][match valid=false][need input=false][source closed=true][skipped=false][group separator=\\,][decimal separator=\\.][positive prefix=][negative prefix=\\Q-\\E][positive suffix=][negative suffix=][NaN string=\\Q\uFFFD\\E][infinity string=\\Q\u221E\\E]", scanner0.toString());
  }

  @Test
  public void test30()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) pipedInputStream0);
      IOUtil.blockingSkip((InputStream) bufferedInputStream0, 0L);
      assertEquals(true, bufferedInputStream0.markSupported());
  }

  @Test
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOUtil.Endian iOUtil_Endian0 = IOUtil.Endian.BIG;
      try {
        IOUtil.readUnsignedInt((InputStream) byteArrayInputStream0, iOUtil_Endian0);
        fail("Expecting exception: EOFException");
      } catch(EOFException e) {
        /*
         * end of file after only 2 bytes read (expected 4)
         */
      }
  }

  @Test
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1716, (int) (byte)80);
      short[] shortArray0 = IOUtil.readUnsignedByteArray((InputStream) byteArrayInputStream0, (int) (byte)1);
      assertNotNull(shortArray0);
  }

  @Test
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try {
        IOUtil.readShortArray((InputStream) byteArrayInputStream0, (int) (byte)111);
        fail("Expecting exception: EOFException");
      } catch(EOFException e) {
      }
  }

  @Test
  public void test34()  throws Throwable  {
      byte byte0 = IOUtil.toSignedByte((-1839));
      assertEquals((byte) (-47), byte0);
  }

  @Test
  public void test35()  throws Throwable  {
      byte byte0 = IOUtil.toSignedByte(65535);
      assertEquals((byte) (-1), byte0);
  }

  @Test
  public void test36()  throws Throwable  {
      short short0 = IOUtil.toSignedShort(255);
      assertEquals((short)255, short0);
  }

  @Test
  public void test37()  throws Throwable  {
      int int0 = IOUtil.toSignedInt(1884L);
      assertEquals(1884, int0);
  }

  @Test
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOUtil.Endian iOUtil_Endian0 = IOUtil.Endian.LITTLE;
      IOUtil.readUnsignedInt((InputStream) byteArrayInputStream0, iOUtil_Endian0);
      assertEquals(1, byteArrayInputStream0.available());
  }

  @Test
  public void test39()  throws Throwable  {
      byte[] byteArray0 = IOUtil.convertUnsignedIntToByteArray((-1204L));
      assertNotNull(byteArray0);
  }

  @Test
  public void test40()  throws Throwable  {
      byte[] byteArray0 = IOUtil.convertUnsignedShortToByteArray(567);
      assertNotNull(byteArray0);
  }

  @Test
  public void test41()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = IOUtil.convertUnsignedLongToByteArray(bigInteger0);
      assertNotNull(byteArray0);
  }

  @Test
  public void test42()  throws Throwable  {
      int int0 = IOUtil.getUnsignedByteCount(2147483647L);
      assertEquals(4, int0);
  }

  @Test
  public void test43()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      byte[] byteArray0 = IOUtil.toByteArray(bitSet0, 1722);
      assertNotNull(byteArray0);
  }

  @Test
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOUtil.Endian iOUtil_Endian0 = IOUtil.Endian.LITTLE;
      IOUtil.toByteArray((InputStream) byteArrayInputStream0, iOUtil_Endian0);
      assertEquals(-1, byteArrayInputStream0.read());
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test
  public void test45()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) bufferedInputStream0);
      try {
        IOUtil.toString((InputStream) dataInputStream0, "]Dt");
        fail("Expecting exception: UnsupportedEncodingException");
      } catch(UnsupportedEncodingException e) {
        /*
         * ]Dt
         */
      }
  }

  @Test
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream((InputStream) byteArrayInputStream0, (InputStream) byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) sequenceInputStream0);
      String string0 = IOUtil.toString((InputStream) pushbackInputStream0, (String) null);
      assertEquals(-1, pushbackInputStream0.read());
      assertEquals("\u0000", string0);
  }

  @Test
  public void test47()  throws Throwable  {
      int int0 = IOUtil.computeNumberOfBitsIn(1722);
      assertEquals(11, int0);
  }
}
