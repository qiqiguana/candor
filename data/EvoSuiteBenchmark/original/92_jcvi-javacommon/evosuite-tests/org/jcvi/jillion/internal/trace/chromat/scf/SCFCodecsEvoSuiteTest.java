/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.internal.trace.chromat.scf;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import org.jcvi.jillion.internal.trace.chromat.scf.SCFCodecs;
import org.jcvi.jillion.internal.trace.chromat.scf.header.DefaultSCFHeader;
import org.jcvi.jillion.internal.trace.chromat.scf.header.SCFHeader;
import org.jcvi.jillion.internal.trace.chromat.scf.section.SectionDecoderException;
import org.jcvi.jillion.trace.TraceDecoderException;
import org.jcvi.jillion.trace.chromat.Chromatogram;
import org.jcvi.jillion.trace.chromat.ChromatogramFileVisitor;
import org.jcvi.jillion.trace.chromat.abi.AbiChromatogramBuilder;
import org.jcvi.jillion.trace.chromat.scf.ScfDecoderException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SCFCodecsEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SCFCodecs sCFCodecs0 = SCFCodecs.VERSION_3;
      // Undeclared exception!
      try {
        sCFCodecs0.write((Chromatogram) null, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      SCFCodecs sCFCodecs0 = SCFCodecs.VERSION_3;
      File file0 = new File((File) null, "");
      AbiChromatogramBuilder.AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder.AbiChromatogramBuilderVisitor("");
      try {
        sCFCodecs0.parse(file0, (ChromatogramFileVisitor) abiChromatogramBuilder_AbiChromatogramBuilderVisitor0);
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
        /*
         *  (No such file or directory)
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      SCFCodecs sCFCodecs0 = SCFCodecs.VERSION_3;
      AbiChromatogramBuilder.AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder.AbiChromatogramBuilderVisitor("z?");
      // Undeclared exception!
      try {
        sCFCodecs0.parse((InputStream) null, (ChromatogramFileVisitor) abiChromatogramBuilder_AbiChromatogramBuilderVisitor0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      SCFCodecs sCFCodecs0 = SCFCodecs.VERSION_2;
      // Undeclared exception!
      try {
        sCFCodecs0.decode((File) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * name can't be null
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      SCFCodecs sCFCodecs0 = SCFCodecs.VERSION_3;
      DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader();
      AbiChromatogramBuilder.AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder.AbiChromatogramBuilderVisitor("*zI{r+Ym(E");
      sCFCodecs0.parse((DataInputStream) null, (SCFHeader) defaultSCFHeader0, (ChromatogramFileVisitor) abiChromatogramBuilder_AbiChromatogramBuilderVisitor0);
      assertEquals(0, defaultSCFHeader0.getSampleOffset());
  }

  @Test
  public void test5()  throws Throwable  {
      SCFCodecs sCFCodecs0 = SCFCodecs.VERSION_2;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1023);
      // Undeclared exception!
      try {
        sCFCodecs0.encode((Chromatogram) null, (OutputStream) byteArrayOutputStream0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
