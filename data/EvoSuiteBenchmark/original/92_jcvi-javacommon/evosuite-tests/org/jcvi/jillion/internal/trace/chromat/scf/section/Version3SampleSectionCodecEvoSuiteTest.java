/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.internal.trace.chromat.scf.section;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import org.jcvi.jillion.core.pos.PositionSequence;
import org.jcvi.jillion.internal.trace.chromat.DefaultChannel;
import org.jcvi.jillion.internal.trace.chromat.scf.header.pos.BytePositionStrategy;
import org.jcvi.jillion.internal.trace.chromat.scf.header.pos.PositionStrategy;
import org.jcvi.jillion.internal.trace.chromat.scf.header.pos.ShortPositionStrategy;
import org.jcvi.jillion.internal.trace.chromat.scf.section.Version3SampleSectionCodec;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class Version3SampleSectionCodecEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Version3SampleSectionCodec version3SampleSectionCodec0 = new Version3SampleSectionCodec();
      BytePositionStrategy bytePositionStrategy0 = new BytePositionStrategy();
      byte[] byteArray0 = new byte[5];
      short[] shortArray0 = new short[9];
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      PositionSequence positionSequence0 = defaultChannel0.getPositions();
      // Undeclared exception!
      try {
        version3SampleSectionCodec0.writePositionsToBuffer((PositionStrategy) bytePositionStrategy0, positionSequence0, positionSequence0, positionSequence0, positionSequence0, (ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      Version3SampleSectionCodec version3SampleSectionCodec0 = new Version3SampleSectionCodec();
      byte[] byteArray0 = new byte[20];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) (byte)0, (int) (byte)0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) byteArrayInputStream0);
      ShortPositionStrategy shortPositionStrategy0 = new ShortPositionStrategy();
      short[][] shortArray0 = version3SampleSectionCodec0.parseRawPositions(dataInputStream0, 105, (PositionStrategy) shortPositionStrategy0);
      version3SampleSectionCodec0.extractActualPositions((PositionStrategy) shortPositionStrategy0, shortArray0);
      assertEquals(2, shortPositionStrategy0.getSampleSize());
  }

  @Test
  public void test2()  throws Throwable  {
      Version3SampleSectionCodec version3SampleSectionCodec0 = new Version3SampleSectionCodec();
      byte[] byteArray0 = new byte[20];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) (byte)0, (int) (byte)0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) byteArrayInputStream0);
      ShortPositionStrategy shortPositionStrategy0 = new ShortPositionStrategy();
      short[][] shortArray0 = version3SampleSectionCodec0.parseRawPositions(dataInputStream0, (int) (byte)0, (PositionStrategy) shortPositionStrategy0);
      assertNotNull(shortArray0);
  }
}
