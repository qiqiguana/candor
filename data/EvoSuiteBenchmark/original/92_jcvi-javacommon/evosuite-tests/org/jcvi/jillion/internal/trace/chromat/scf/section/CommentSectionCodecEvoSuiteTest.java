/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.internal.trace.chromat.scf.section;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import org.jcvi.jillion.internal.trace.chromat.scf.header.DefaultSCFHeader;
import org.jcvi.jillion.internal.trace.chromat.scf.header.SCFHeader;
import org.jcvi.jillion.internal.trace.chromat.scf.section.CommentSectionCodec;
import org.jcvi.jillion.internal.trace.chromat.scf.section.SectionDecoderException;
import org.jcvi.jillion.trace.chromat.ChromatogramFileVisitor;
import org.jcvi.jillion.trace.chromat.abi.AbiChromatogramBuilder;
import org.jcvi.jillion.trace.chromat.scf.ScfChromatogramBuilder;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class CommentSectionCodecEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      CommentSectionCodec commentSectionCodec0 = new CommentSectionCodec();
      PipedInputStream pipedInputStream0 = new PipedInputStream(1803);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) pipedInputStream0);
      DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader();
      ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder("PRIVATE_DATA");
      long long0 = commentSectionCodec0.decode(dataInputStream0, 1L, (SCFHeader) defaultSCFHeader0, scfChromatogramBuilder0);
      assertEquals(1L, long0);
  }

  @Test
  public void test1()  throws Throwable  {
      CommentSectionCodec commentSectionCodec0 = new CommentSectionCodec();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 24);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) pipedInputStream0);
      DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader();
      AbiChromatogramBuilder.AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder.AbiChromatogramBuilderVisitor("phAR");
      commentSectionCodec0.decode(dataInputStream0, 1716L, (SCFHeader) defaultSCFHeader0, (ChromatogramFileVisitor) abiChromatogramBuilder_AbiChromatogramBuilderVisitor0);
  }
}
