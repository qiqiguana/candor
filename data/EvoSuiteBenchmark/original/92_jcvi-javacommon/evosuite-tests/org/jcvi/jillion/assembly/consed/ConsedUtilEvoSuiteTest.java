/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.assembly.consed;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.File;
import java.util.Date;
import java.util.SortedMap;
import org.jcvi.jillion.assembly.consed.ConsedUtil;
import org.jcvi.jillion.assembly.consed.ace.AceContig;
import org.jcvi.jillion.assembly.consed.ace.AceContigBuilder;
import org.jcvi.jillion.assembly.consed.ace.ConsensusAceTag;
import org.jcvi.jillion.assembly.consed.ace.PhdInfo;
import org.jcvi.jillion.core.Range;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ConsedUtilEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try {
        ConsedUtil.getPhdBallDirFor((File) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * consedDir can not be null
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try {
        ConsedUtil.getRenamedContigId((ConsensusAceTag) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try {
        ConsedUtil.getChromatDirFor((File) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * consedDir can not be null
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      String string0 = ConsedUtil.convertContigGapstoAceGaps("INSTANCE");
      assertEquals("INSTANCE", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      File file0 = new File((File) null, ":VYt");
      File file1 = ConsedUtil.getPhdDirFor(file0);
      assertNotNull(file1);
      assertEquals("/mnt/fastdata/ac1gf/SF110/dist/92_jcvi-javacommon/:VYt/phd_dir", file1.getCanonicalPath());
  }

  @Test
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try {
        ConsedUtil.getEditDirFor((File) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * consedDir can not be null
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      String string0 = ConsedUtil.convertAceGapsToContigGaps("");
      assertEquals("", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      File file0 = new File("", "");
      File file1 = ConsedUtil.getLatestAceFile(file0, "");
      assertNull(file1);
  }

  @Test
  public void test8()  throws Throwable  {
      File file0 = new File((File) null, ":VYt");
      Date date0 = new Date((-279L));
      PhdInfo phdInfo0 = ConsedUtil.generateDefaultPhdInfoFor(file0, ":VYt", date0);
      assertEquals("DefaultPhdInfo [traceName=:VYt, phdName=:VYt.phd.1, phdDate=-279]", phdInfo0.toString());
      assertNotNull(phdInfo0);
  }

  @Test
  public void test9()  throws Throwable  {
      Date date0 = new Date();
      ConsedUtil.generateDefaultPhdInfoFor((File) null, "'ta,iPkzyLv#;4A+", date0);
      assertEquals(1372731474502L, date0.getTime());
  }

  @Test
  public void test10()  throws Throwable  {
      AceContigBuilder aceContigBuilder0 = new AceContigBuilder("nar", "nar");
      SortedMap<Range, AceContig> sortedMap0 = ConsedUtil.split0xContig(aceContigBuilder0, true);
      assertEquals(0, sortedMap0.size());
  }

  @Test
  public void test11()  throws Throwable  {
      AceContigBuilder aceContigBuilder0 = new AceContigBuilder("svar", "svar");
      SortedMap<Range, AceContig> sortedMap0 = ConsedUtil.split0xContig(aceContigBuilder0, false);
      assertEquals(0, sortedMap0.size());
  }

  @Test
  public void test12()  throws Throwable  {
      File file0 = ConsedUtil.getLatestAceFile((File) null, "'ta,iPkzyLv#;4A+");
      assertNull(file0);
  }

  @Test
  public void test13()  throws Throwable  {
      File file0 = new File("nar", "nar");
      File file1 = ConsedUtil.getLatestAceFile(file0, "nar");
      assertNull(file1);
  }

  @Test
  public void test14()  throws Throwable  {
      File file0 = new File("", "");
      File file1 = ConsedUtil.getLatestAceFile(file0, "INSTANCE");
      assertNull(file1);
  }

  @Test
  public void test15()  throws Throwable  {
      File file0 = new File("'ta,iPkzyLv#;4A+", "'ta,iPkzyLv#;4A+");
      // Undeclared exception!
      try {
        ConsedUtil.getAceVersionFor(file0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * could not parse version from 'ta,iPkzyLv#;4A+
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      File file0 = new File("ace.0");
      // Undeclared exception!
      try {
        ConsedUtil.generateNextAceVersionNameFor(file0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * No match found
         */
      }
  }

  @Test
  public void test17()  throws Throwable  {
      File file0 = new File("", "");
      // Undeclared exception!
      try {
        ConsedUtil.generateNextAceVersionNameFor(file0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * could not parse version from 
         */
      }
  }

  @Test
  public void test18()  throws Throwable  {
      ConsedUtil.ClipPointsType consedUtil_ClipPointsType0 = ConsedUtil.ClipPointsType.getType(396, 0, 396, 0);
      assertEquals(ConsedUtil.ClipPointsType.NEGATIVE_VALID_RANGE, consedUtil_ClipPointsType0);
  }

  @Test
  public void test19()  throws Throwable  {
      ConsedUtil.ClipPointsType consedUtil_ClipPointsType0 = ConsedUtil.ClipPointsType.getType((-1), 0, 0, 396);
      assertEquals(ConsedUtil.ClipPointsType.VALID, consedUtil_ClipPointsType0);
  }

  @Test
  public void test20()  throws Throwable  {
      ConsedUtil.ClipPointsType consedUtil_ClipPointsType0 = ConsedUtil.ClipPointsType.getType((-1), (-1), (-1), (-1));
      assertEquals(ConsedUtil.ClipPointsType.ALL_LOW_QUALITY, consedUtil_ClipPointsType0);
  }

  @Test
  public void test21()  throws Throwable  {
      ConsedUtil.ClipPointsType consedUtil_ClipPointsType0 = ConsedUtil.ClipPointsType.getType((-133), (-133), 621, 621);
      assertEquals(ConsedUtil.ClipPointsType.NO_HIGH_QUALITY_ALIGNMENT_INTERSECTION, consedUtil_ClipPointsType0);
  }
}
