/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.internal.fasta.qual;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import org.jcvi.jillion.core.datastore.DataStoreClosedException;
import org.jcvi.jillion.core.datastore.DataStoreException;
import org.jcvi.jillion.core.datastore.DataStoreFilter;
import org.jcvi.jillion.core.util.iter.StreamingIterator;
import org.jcvi.jillion.fasta.FastaFileParser;
import org.jcvi.jillion.fasta.FastaVisitorCallback;
import org.jcvi.jillion.internal.fasta.qual.IndexedQualityFastaFileDataStore;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class IndexedQualityFastaFileDataStoreEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      File file0 = new File("", "");
      try {
        IndexedQualityFastaFileDataStore.create(file0);
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
        /*
         * / (Is a directory)
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      IndexedQualityFastaFileDataStore indexedQualityFastaFileDataStore0 = new IndexedQualityFastaFileDataStore();
      assertNotNull(indexedQualityFastaFileDataStore0);
  }

  @Test
  public void test2()  throws Throwable  {
      HashMap<String, FastaVisitorCallback.FastaVisitorMemento> hashMap0 = new HashMap<String, FastaVisitorCallback.FastaVisitorMemento>();
      IndexedQualityFastaFileDataStore.IndexedQualitySequenceFastaFileDataStore2 indexedQualityFastaFileDataStore_IndexedQualitySequenceFastaFileDataStore2_0 = new IndexedQualityFastaFileDataStore.IndexedQualitySequenceFastaFileDataStore2((File) null, (FastaFileParser) null, (DataStoreFilter) null, (Map<String, FastaVisitorCallback.FastaVisitorMemento>) hashMap0);
      boolean boolean0 = indexedQualityFastaFileDataStore_IndexedQualitySequenceFastaFileDataStore2_0.isClosed();
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      File file0 = new File("d6&R*E4)qkay8<Sk)uo=");
      HashMap<String, FastaVisitorCallback.FastaVisitorMemento> hashMap0 = new HashMap<String, FastaVisitorCallback.FastaVisitorMemento>();
      IndexedQualityFastaFileDataStore.IndexedQualitySequenceFastaFileDataStore2 indexedQualityFastaFileDataStore_IndexedQualitySequenceFastaFileDataStore2_0 = new IndexedQualityFastaFileDataStore.IndexedQualitySequenceFastaFileDataStore2(file0, (FastaFileParser) null, (DataStoreFilter) null, (Map<String, FastaVisitorCallback.FastaVisitorMemento>) hashMap0);
      // Undeclared exception!
      try {
        indexedQualityFastaFileDataStore_IndexedQualitySequenceFastaFileDataStore2_0.iterator();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * fasta file must exist
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      HashMap<String, FastaVisitorCallback.FastaVisitorMemento> hashMap0 = new HashMap<String, FastaVisitorCallback.FastaVisitorMemento>();
      IndexedQualityFastaFileDataStore.IndexedQualitySequenceFastaFileDataStore2 indexedQualityFastaFileDataStore_IndexedQualitySequenceFastaFileDataStore2_0 = new IndexedQualityFastaFileDataStore.IndexedQualitySequenceFastaFileDataStore2((File) null, (FastaFileParser) null, (DataStoreFilter) null, (Map<String, FastaVisitorCallback.FastaVisitorMemento>) hashMap0);
      StreamingIterator<String> streamingIterator0 = indexedQualityFastaFileDataStore_IndexedQualitySequenceFastaFileDataStore2_0.idIterator();
      assertNotNull(streamingIterator0);
      assertEquals(false, indexedQualityFastaFileDataStore_IndexedQualitySequenceFastaFileDataStore2_0.isClosed());
  }

  @Test
  public void test5()  throws Throwable  {
      File file0 = new File("d6&R*E4)qkay8<Sk)uo=");
      HashMap<String, FastaVisitorCallback.FastaVisitorMemento> hashMap0 = new HashMap<String, FastaVisitorCallback.FastaVisitorMemento>();
      IndexedQualityFastaFileDataStore.IndexedQualitySequenceFastaFileDataStore2 indexedQualityFastaFileDataStore_IndexedQualitySequenceFastaFileDataStore2_0 = new IndexedQualityFastaFileDataStore.IndexedQualitySequenceFastaFileDataStore2(file0, (FastaFileParser) null, (DataStoreFilter) null, (Map<String, FastaVisitorCallback.FastaVisitorMemento>) hashMap0);
      indexedQualityFastaFileDataStore_IndexedQualitySequenceFastaFileDataStore2_0.getNumberOfRecords();
      assertEquals(false, indexedQualityFastaFileDataStore_IndexedQualitySequenceFastaFileDataStore2_0.isClosed());
  }

  @Test
  public void test6()  throws Throwable  {
      HashMap<String, FastaVisitorCallback.FastaVisitorMemento> hashMap0 = new HashMap<String, FastaVisitorCallback.FastaVisitorMemento>();
      IndexedQualityFastaFileDataStore.IndexedQualitySequenceFastaFileDataStore2 indexedQualityFastaFileDataStore_IndexedQualitySequenceFastaFileDataStore2_0 = new IndexedQualityFastaFileDataStore.IndexedQualitySequenceFastaFileDataStore2((File) null, (FastaFileParser) null, (DataStoreFilter) null, (Map<String, FastaVisitorCallback.FastaVisitorMemento>) hashMap0);
      assertEquals(false, indexedQualityFastaFileDataStore_IndexedQualitySequenceFastaFileDataStore2_0.isClosed());
      
      indexedQualityFastaFileDataStore_IndexedQualitySequenceFastaFileDataStore2_0.close();
      // Undeclared exception!
      try {
        indexedQualityFastaFileDataStore_IndexedQualitySequenceFastaFileDataStore2_0.contains(" fl*G1wF");
        fail("Expecting exception: DataStoreClosedException");
      } catch(DataStoreClosedException e) {
        /*
         * datastore is closed
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      HashMap<String, FastaVisitorCallback.FastaVisitorMemento> hashMap0 = new HashMap<String, FastaVisitorCallback.FastaVisitorMemento>();
      IndexedQualityFastaFileDataStore.IndexedQualitySequenceFastaFileDataStore2 indexedQualityFastaFileDataStore_IndexedQualitySequenceFastaFileDataStore2_0 = new IndexedQualityFastaFileDataStore.IndexedQualitySequenceFastaFileDataStore2((File) null, (FastaFileParser) null, (DataStoreFilter) null, (Map<String, FastaVisitorCallback.FastaVisitorMemento>) hashMap0);
      boolean boolean0 = indexedQualityFastaFileDataStore_IndexedQualitySequenceFastaFileDataStore2_0.contains(" fl*G1wF");
      assertEquals(true, boolean0);
      assertEquals(false, indexedQualityFastaFileDataStore_IndexedQualitySequenceFastaFileDataStore2_0.isClosed());
  }

  @Test
  public void test8()  throws Throwable  {
      // Undeclared exception!
      try {
        IndexedQualityFastaFileDataStore.create((File) null, (DataStoreFilter) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * fasta file can not be null
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      File file0 = new File("Xp@A[.KDB");
      try {
        IndexedQualityFastaFileDataStore.create(file0);
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
        /*
         * /mnt/fastdata/ac1gf/SF110/dist/92_jcvi-javacommon/Xp@A[.KDB
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      File file0 = new File("", "");
      // Undeclared exception!
      try {
        IndexedQualityFastaFileDataStore.create(file0, (DataStoreFilter) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * filter can not be null
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      HashMap<String, FastaVisitorCallback.FastaVisitorMemento> hashMap0 = new HashMap<String, FastaVisitorCallback.FastaVisitorMemento>();
      IndexedQualityFastaFileDataStore.IndexedQualitySequenceFastaFileDataStore2 indexedQualityFastaFileDataStore_IndexedQualitySequenceFastaFileDataStore2_0 = new IndexedQualityFastaFileDataStore.IndexedQualitySequenceFastaFileDataStore2((File) null, (FastaFileParser) null, (DataStoreFilter) null, (Map<String, FastaVisitorCallback.FastaVisitorMemento>) hashMap0);
      hashMap0.put("gRMQ", (FastaVisitorCallback.FastaVisitorMemento) null);
      // Undeclared exception!
      try {
        indexedQualityFastaFileDataStore_IndexedQualitySequenceFastaFileDataStore2_0.get("gRMQ");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      HashMap<String, FastaVisitorCallback.FastaVisitorMemento> hashMap0 = new HashMap<String, FastaVisitorCallback.FastaVisitorMemento>();
      IndexedQualityFastaFileDataStore.IndexedQualitySequenceFastaFileDataStore2 indexedQualityFastaFileDataStore_IndexedQualitySequenceFastaFileDataStore2_0 = new IndexedQualityFastaFileDataStore.IndexedQualitySequenceFastaFileDataStore2((File) null, (FastaFileParser) null, (DataStoreFilter) null, (Map<String, FastaVisitorCallback.FastaVisitorMemento>) hashMap0);
      indexedQualityFastaFileDataStore_IndexedQualitySequenceFastaFileDataStore2_0.get("1Yb907+,aae2cPi");
      assertEquals(false, indexedQualityFastaFileDataStore_IndexedQualitySequenceFastaFileDataStore2_0.isClosed());
  }
}
