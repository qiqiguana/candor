/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.assembly.consed.ace;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Date;
import org.jcvi.jillion.assembly.consed.ace.ReadAceTag;
import org.jcvi.jillion.core.DirectedRange;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.Rangeable;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ReadAceTagEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Date date0 = new Date();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      DirectedRange directedRange0 = DirectedRange.parse(0L, 0L, range_CoordinateSystem0);
      ReadAceTag readAceTag0 = new ReadAceTag("RESIDUE_BASED", "RESIDUE_BASED", "RESIDUE_BASED", date0, (Rangeable) directedRange0, false);
      String string0 = readAceTag0.toString();
      assertEquals(1372729217008L, date0.getTime());
      assertEquals("ReadAceTag [getId()=RESIDUE_BASED, getType()=RESIDUE_BASED, getCreator()=RESIDUE_BASED, getCreationDate()=Tue Jul 02 02:40:17 BST 2013, asRange()=[ -1 .. -1 ]/0B, getData()=null, isTransient()=false]", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      Date date0 = new Date(1136L);
      ReadAceTag readAceTag0 = new ReadAceTag("", "", "", date0, (Rangeable) null, true);
      int int0 = readAceTag0.hashCode();
      assertEquals(629715552, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      Date date0 = new Date(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      DirectedRange directedRange0 = DirectedRange.parse(1L, (-137L), range_CoordinateSystem0);
      ReadAceTag readAceTag0 = new ReadAceTag("N>Y(E", "N>Y(E", "N>Y(E", date0, (Rangeable) directedRange0, false);
      boolean boolean0 = readAceTag0.equals((Object) readAceTag0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      Date date0 = new Date();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      DirectedRange directedRange0 = DirectedRange.parse(0L, 0L, range_CoordinateSystem0);
      ReadAceTag readAceTag0 = new ReadAceTag("RESIDUE_BASED", "RESIDUE_BASED", "RESIDUE_BASED", date0, (Rangeable) directedRange0, false);
      boolean boolean0 = readAceTag0.equals((Object) "ReadAceTag [getId()=RESIDUE_BASED, getType()=RESIDUE_BASED, getCreator()=RESIDUE_BASED, getCreationDate()=Tue Jul 02 02:40:16 BST 2013, asRange()=[ -1 .. -1 ]/0B, getData()=null, isTransient()=false]");
      assertEquals(1372729217551L, date0.getTime());
      assertEquals(false, boolean0);
  }
}
