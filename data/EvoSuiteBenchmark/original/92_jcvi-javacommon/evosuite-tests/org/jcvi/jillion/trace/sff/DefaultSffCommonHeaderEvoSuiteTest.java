/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.trace.sff;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.math.BigInteger;
import org.jcvi.jillion.core.residue.nt.NucleotideSequence;
import org.jcvi.jillion.trace.sff.DefaultSffCommonHeader;
import org.jcvi.jillion.trace.sff.SffCommonHeader;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DefaultSffCommonHeaderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      DefaultSffCommonHeader defaultSffCommonHeader0 = new DefaultSffCommonHeader(bigInteger0, (-17L), (-17L), 0, (NucleotideSequence) null, (NucleotideSequence) null);
      DefaultSffCommonHeader.Builder defaultSffCommonHeader_Builder0 = new DefaultSffCommonHeader.Builder((SffCommonHeader) defaultSffCommonHeader0);
      defaultSffCommonHeader_Builder0.keySequence((NucleotideSequence) null);
      assertEquals(0, defaultSffCommonHeader0.getNumberOfFlowsPerRead());
      assertEquals((-17L), defaultSffCommonHeader0.getNumberOfReads());
      assertEquals((-17L), defaultSffCommonHeader0.getIndexLength());
      assertEquals("DefaultSFFCommonHeader [flow=null, indexLength=-17, indexOffset=10, keySequence=null, numberOfFlowsPerRead=0, numberOfReads=-17]", defaultSffCommonHeader0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      DefaultSffCommonHeader.Builder defaultSffCommonHeader_Builder0 = new DefaultSffCommonHeader.Builder();
      DefaultSffCommonHeader.Builder defaultSffCommonHeader_Builder1 = defaultSffCommonHeader_Builder0.flow((NucleotideSequence) null);
      assertSame(defaultSffCommonHeader_Builder1, defaultSffCommonHeader_Builder0);
  }

  @Test
  public void test2()  throws Throwable  {
      DefaultSffCommonHeader.Builder defaultSffCommonHeader_Builder0 = new DefaultSffCommonHeader.Builder();
      DefaultSffCommonHeader.Builder defaultSffCommonHeader_Builder1 = defaultSffCommonHeader_Builder0.numberOfReads((-9L));
      assertSame(defaultSffCommonHeader_Builder0, defaultSffCommonHeader_Builder1);
  }

  @Test
  public void test3()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      DefaultSffCommonHeader defaultSffCommonHeader0 = new DefaultSffCommonHeader(bigInteger0, (-17L), (-17L), 0, (NucleotideSequence) null, (NucleotideSequence) null);
      DefaultSffCommonHeader.Builder defaultSffCommonHeader_Builder0 = new DefaultSffCommonHeader.Builder((SffCommonHeader) defaultSffCommonHeader0);
      defaultSffCommonHeader_Builder0.numberOfFlowsPerRead(0);
      assertEquals((-17L), defaultSffCommonHeader0.getNumberOfReads());
      assertEquals(0, defaultSffCommonHeader0.getNumberOfFlowsPerRead());
      assertEquals((-17L), defaultSffCommonHeader0.getIndexLength());
      assertEquals("DefaultSFFCommonHeader [flow=null, indexLength=-17, indexOffset=10, keySequence=null, numberOfFlowsPerRead=0, numberOfReads=-17]", defaultSffCommonHeader0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      DefaultSffCommonHeader.Builder defaultSffCommonHeader_Builder0 = new DefaultSffCommonHeader.Builder();
      DefaultSffCommonHeader.Builder defaultSffCommonHeader_Builder1 = defaultSffCommonHeader_Builder0.indexLength((-9L));
      assertSame(defaultSffCommonHeader_Builder0, defaultSffCommonHeader_Builder1);
  }

  @Test
  public void test5()  throws Throwable  {
      DefaultSffCommonHeader.Builder defaultSffCommonHeader_Builder0 = new DefaultSffCommonHeader.Builder();
      BigInteger bigInteger0 = BigInteger.ONE;
      DefaultSffCommonHeader.Builder defaultSffCommonHeader_Builder1 = defaultSffCommonHeader_Builder0.indexOffset(bigInteger0);
      assertSame(defaultSffCommonHeader_Builder1, defaultSffCommonHeader_Builder0);
  }

  @Test
  public void test6()  throws Throwable  {
      DefaultSffCommonHeader.Builder defaultSffCommonHeader_Builder0 = new DefaultSffCommonHeader.Builder();
      DefaultSffCommonHeader.Builder defaultSffCommonHeader_Builder1 = defaultSffCommonHeader_Builder0.withNoIndex();
      assertSame(defaultSffCommonHeader_Builder1, defaultSffCommonHeader_Builder0);
  }

  @Test
  public void test7()  throws Throwable  {
      DefaultSffCommonHeader defaultSffCommonHeader0 = new DefaultSffCommonHeader((BigInteger) null, 0L, (long) (-2), (-2), (NucleotideSequence) null, (NucleotideSequence) null);
      String string0 = defaultSffCommonHeader0.toString();
      assertNotNull(string0);
      assertEquals("DefaultSFFCommonHeader [flow=null, indexLength=0, indexOffset=null, keySequence=null, numberOfFlowsPerRead=-2, numberOfReads=-2]", string0);
  }

  @Test
  public void test8()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      DefaultSffCommonHeader defaultSffCommonHeader0 = new DefaultSffCommonHeader(bigInteger0, (-17L), (-17L), 0, (NucleotideSequence) null, (NucleotideSequence) null);
      int int0 = defaultSffCommonHeader0.hashCode();
      assertEquals(902577943, int0);
  }

  @Test
  public void test9()  throws Throwable  {
      DefaultSffCommonHeader defaultSffCommonHeader0 = new DefaultSffCommonHeader((BigInteger) null, 147L, 147L, (-642), (NucleotideSequence) null, (NucleotideSequence) null);
      int int0 = defaultSffCommonHeader0.hashCode();
      assertEquals(1023241513, int0);
  }

  @Test
  public void test10()  throws Throwable  {
      DefaultSffCommonHeader defaultSffCommonHeader0 = new DefaultSffCommonHeader((BigInteger) null, 0L, (long) (-2), (-2), (NucleotideSequence) null, (NucleotideSequence) null);
      boolean boolean0 = defaultSffCommonHeader0.equals((Object) "DefaultSFFCommonHeader [flow=null, indexLength=0, indexOffset=null, keySequence=null, numberOfFlowsPerRead=-2, numberOfReads=-2]");
      assertEquals("DefaultSFFCommonHeader [flow=null, indexLength=0, indexOffset=null, keySequence=null, numberOfFlowsPerRead=-2, numberOfReads=-2]", defaultSffCommonHeader0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      DefaultSffCommonHeader defaultSffCommonHeader0 = new DefaultSffCommonHeader((BigInteger) null, 147L, 147L, (-642), (NucleotideSequence) null, (NucleotideSequence) null);
      boolean boolean0 = defaultSffCommonHeader0.equals((Object) null);
      assertEquals("DefaultSFFCommonHeader [flow=null, indexLength=147, indexOffset=null, keySequence=null, numberOfFlowsPerRead=-642, numberOfReads=147]", defaultSffCommonHeader0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      DefaultSffCommonHeader defaultSffCommonHeader0 = new DefaultSffCommonHeader(bigInteger0, 0L, 0L, 0, (NucleotideSequence) null, (NucleotideSequence) null);
      DefaultSffCommonHeader defaultSffCommonHeader1 = new DefaultSffCommonHeader(bigInteger0, (long) 0, 0L, 0, (NucleotideSequence) null, (NucleotideSequence) null);
      boolean boolean0 = defaultSffCommonHeader0.equals((Object) defaultSffCommonHeader1);
      assertEquals(0, defaultSffCommonHeader0.getNumberOfFlowsPerRead());
      assertEquals(true, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      DefaultSffCommonHeader defaultSffCommonHeader0 = new DefaultSffCommonHeader((BigInteger) null, 147L, 147L, (-642), (NucleotideSequence) null, (NucleotideSequence) null);
      DefaultSffCommonHeader defaultSffCommonHeader1 = new DefaultSffCommonHeader((BigInteger) null, (long) 1023241513, (long) (-642), 1924, (NucleotideSequence) null, (NucleotideSequence) null);
      boolean boolean0 = defaultSffCommonHeader0.equals((Object) defaultSffCommonHeader1);
      assertEquals(147L, defaultSffCommonHeader0.getIndexLength());
      assertEquals("DefaultSFFCommonHeader [flow=null, indexLength=1023241513, indexOffset=null, keySequence=null, numberOfFlowsPerRead=1924, numberOfReads=-642]", defaultSffCommonHeader1.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      DefaultSffCommonHeader defaultSffCommonHeader0 = new DefaultSffCommonHeader((BigInteger) null, 147L, 147L, (-642), (NucleotideSequence) null, (NucleotideSequence) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      DefaultSffCommonHeader defaultSffCommonHeader1 = new DefaultSffCommonHeader(bigInteger0, 147L, 147L, 1023241513, (NucleotideSequence) null, (NucleotideSequence) null);
      boolean boolean0 = defaultSffCommonHeader0.equals((Object) defaultSffCommonHeader1);
      assertEquals("DefaultSFFCommonHeader [flow=null, indexLength=147, indexOffset=null, keySequence=null, numberOfFlowsPerRead=-642, numberOfReads=147]", defaultSffCommonHeader0.toString());
      assertEquals(false, boolean0);
      assertEquals(147L, defaultSffCommonHeader0.getIndexLength());
  }

  @Test
  public void test15()  throws Throwable  {
      DefaultSffCommonHeader defaultSffCommonHeader0 = new DefaultSffCommonHeader((BigInteger) null, 147L, 147L, (-642), (NucleotideSequence) null, (NucleotideSequence) null);
      DefaultSffCommonHeader defaultSffCommonHeader1 = new DefaultSffCommonHeader((BigInteger) null, 147L, 147L, 1924, (NucleotideSequence) null, (NucleotideSequence) null);
      boolean boolean0 = defaultSffCommonHeader0.equals((Object) defaultSffCommonHeader1);
      assertEquals(147L, defaultSffCommonHeader0.getIndexLength());
      assertEquals(false, boolean0);
      assertEquals(147L, defaultSffCommonHeader0.getNumberOfReads());
      assertEquals(-642, defaultSffCommonHeader0.getNumberOfFlowsPerRead());
  }

  @Test
  public void test16()  throws Throwable  {
      DefaultSffCommonHeader defaultSffCommonHeader0 = new DefaultSffCommonHeader((BigInteger) null, 0L, (long) (-2), (-2), (NucleotideSequence) null, (NucleotideSequence) null);
      DefaultSffCommonHeader defaultSffCommonHeader1 = new DefaultSffCommonHeader((BigInteger) null, 0L, 0L, (-2), (NucleotideSequence) null, (NucleotideSequence) null);
      boolean boolean0 = defaultSffCommonHeader0.equals((Object) defaultSffCommonHeader1);
      assertFalse(defaultSffCommonHeader1.equals(defaultSffCommonHeader0));
      assertEquals((-2L), defaultSffCommonHeader0.getNumberOfReads());
      assertEquals(false, boolean0);
      assertEquals(0L, defaultSffCommonHeader0.getIndexLength());
      assertEquals(-2, defaultSffCommonHeader0.getNumberOfFlowsPerRead());
  }

  @Test
  public void test17()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      DefaultSffCommonHeader defaultSffCommonHeader0 = new DefaultSffCommonHeader(bigInteger0, (-17L), (-17L), 0, (NucleotideSequence) null, (NucleotideSequence) null);
      DefaultSffCommonHeader.Builder defaultSffCommonHeader_Builder0 = new DefaultSffCommonHeader.Builder((SffCommonHeader) defaultSffCommonHeader0);
      // Undeclared exception!
      try {
        defaultSffCommonHeader_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * initial capacity must be >=1
         */
      }
  }
}
