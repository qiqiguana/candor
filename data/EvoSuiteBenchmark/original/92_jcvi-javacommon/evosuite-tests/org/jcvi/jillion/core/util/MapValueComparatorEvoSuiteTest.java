/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.core.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.SortedMap;
import org.jcvi.jillion.core.util.MapValueComparator;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MapValueComparatorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      SortedMap<Integer, Object> sortedMap0 = MapValueComparator.sortDescending((Map<Integer, Object>) hashMap0, (Comparator<Object>) null);
      assertEquals(true, sortedMap0.isEmpty());
  }

  @Test
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try {
        MapValueComparator.sortAscending((Map<Comparable<Object>, Comparator<Integer>>) null, (Comparator<Comparator<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * map can not be null
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try {
        MapValueComparator.sortAscending((Map<Comparable<Object>, Integer>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * map can not be null
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try {
        MapValueComparator.sortDescending((Map<String, Integer>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * map can not be null
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.put((Integer) 1203, (Integer) 975);
      Integer integer0 = new Integer(975);
      hashMap0.put((Integer) 975, integer0);
      SortedMap<Integer, Integer> sortedMap0 = MapValueComparator.sortAscending((Map<Integer, Integer>) hashMap0);
      assertNotNull(sortedMap0);
      assertEquals(2, sortedMap0.size());
  }
}
