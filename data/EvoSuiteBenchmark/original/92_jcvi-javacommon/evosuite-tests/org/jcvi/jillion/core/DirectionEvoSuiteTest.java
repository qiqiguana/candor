/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.jcvi.jillion.core.Direction;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DirectionEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Direction direction0 = Direction.parseSequenceDirection("f");
      String string0 = direction0.getCode();
      assertNotNull(string0);
      assertEquals("F", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try {
        Direction.parseSequenceDirection((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * dirString can not be null
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      Direction direction0 = Direction.parseSequenceDirection("FORWARD");
      assertEquals(0, direction0.ordinal());
  }

  @Test
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try {
        Direction.parseSequenceDirection("@6U7rx^%~bP]6I[!#B");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * unknown dirString : @6U7rx^%~bP]6I[!#B
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      Direction direction0 = Direction.FORWARD;
      Direction direction1 = direction0.oppositeOrientation();
      Direction direction2 = direction1.oppositeOrientation();
      assertNotSame(direction2, direction1);
  }
}
