/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.assembly.util.consensus;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.jcvi.jillion.assembly.util.Slice;
import org.jcvi.jillion.assembly.util.consensus.ChurchillWatermanConsensusCaller;
import org.jcvi.jillion.assembly.util.consensus.ConsensusResult;
import org.jcvi.jillion.core.qual.PhredQuality;
import org.jcvi.jillion.core.residue.nt.Nucleotide;
import org.jcvi.jillion.internal.assembly.util.CompactedSlice;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class AbstractChurchillWatermanConsensusCallerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      PhredQuality phredQuality0 = PhredQuality.valueOf(0);
      ChurchillWatermanConsensusCaller churchillWatermanConsensusCaller0 = new ChurchillWatermanConsensusCaller(phredQuality0);
      CompactedSlice compactedSlice0 = CompactedSlice.EMPTY;
      ConsensusResult consensusResult0 = churchillWatermanConsensusCaller0.callConsensusWithCoverage((Slice) compactedSlice0);
      assertEquals(0, consensusResult0.getConsensusQuality());
      assertEquals(Nucleotide.Adenine, consensusResult0.getConsensus());
      assertNotNull(consensusResult0);
  }
}
