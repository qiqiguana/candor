/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.internal.trace.chromat.scf.section;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import org.jcvi.jillion.internal.trace.chromat.scf.header.DefaultSCFHeader;
import org.jcvi.jillion.internal.trace.chromat.scf.header.SCFHeader;
import org.jcvi.jillion.internal.trace.chromat.scf.section.SectionDecoderException;
import org.jcvi.jillion.internal.trace.chromat.scf.section.Version2BasesSectionCodec;
import org.jcvi.jillion.internal.trace.chromat.scf.section.Version3BasesSectionCodec;
import org.jcvi.jillion.trace.chromat.ChromatogramFileVisitor;
import org.jcvi.jillion.trace.chromat.abi.AbiChromatogramBuilder;
import org.jcvi.jillion.trace.chromat.scf.ScfChromatogram;
import org.jcvi.jillion.trace.chromat.scf.ScfChromatogramBuilder;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class AbstractBasesSectionCodecEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Version3BasesSectionCodec version3BasesSectionCodec0 = new Version3BasesSectionCodec();
      PipedInputStream pipedInputStream0 = new PipedInputStream(52);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) pipedInputStream0);
      DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader();
      ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder("");
      long long0 = version3BasesSectionCodec0.decode(dataInputStream0, (long) 52, (SCFHeader) defaultSCFHeader0, scfChromatogramBuilder0);
      assertEquals(52L, long0);
  }

  @Test
  public void test1()  throws Throwable  {
      Version2BasesSectionCodec version2BasesSectionCodec0 = new Version2BasesSectionCodec();
      DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader();
      // Undeclared exception!
      try {
        version2BasesSectionCodec0.encode((ScfChromatogram) null, (SCFHeader) defaultSCFHeader0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      Version2BasesSectionCodec version2BasesSectionCodec0 = new Version2BasesSectionCodec();
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) (byte) (-73), (int) (byte) (-73));
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) byteArrayInputStream0);
      DefaultSCFHeader defaultSCFHeader0 = new DefaultSCFHeader();
      AbiChromatogramBuilder.AbiChromatogramBuilderVisitor abiChromatogramBuilder_AbiChromatogramBuilderVisitor0 = new AbiChromatogramBuilder.AbiChromatogramBuilderVisitor("");
      long long0 = version2BasesSectionCodec0.decode(dataInputStream0, (long) (byte)76, (SCFHeader) defaultSCFHeader0, (ChromatogramFileVisitor) abiChromatogramBuilder_AbiChromatogramBuilderVisitor0);
      assertEquals(0L, long0);
  }
}
