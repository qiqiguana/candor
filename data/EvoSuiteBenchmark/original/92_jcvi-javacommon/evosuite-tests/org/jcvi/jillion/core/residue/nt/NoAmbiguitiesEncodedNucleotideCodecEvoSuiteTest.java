/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.core.residue.nt;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.PriorityQueue;
import java.util.SortedSet;
import java.util.TreeSet;
import org.jcvi.jillion.core.residue.nt.NoAmbiguitiesEncodedNucleotideCodec;
import org.jcvi.jillion.core.residue.nt.Nucleotide;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class NoAmbiguitiesEncodedNucleotideCodecEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      NoAmbiguitiesEncodedNucleotideCodec noAmbiguitiesEncodedNucleotideCodec0 = NoAmbiguitiesEncodedNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try {
        noAmbiguitiesEncodedNucleotideCodec0.isGap(byteArray0, (int) (byte) (-99));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * can not call getNext()
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      TreeSet<Nucleotide> treeSet0 = new TreeSet<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Cytosine;
      treeSet0.add(nucleotide0);
      boolean boolean0 = NoAmbiguitiesEncodedNucleotideCodec.canEncode((Iterable<Nucleotide>) treeSet0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      TreeSet<Nucleotide> treeSet0 = new TreeSet<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.NotAdenine;
      treeSet0.add(nucleotide0);
      PriorityQueue<Nucleotide> priorityQueue0 = new PriorityQueue<Nucleotide>((SortedSet<? extends Nucleotide>) treeSet0);
      boolean boolean0 = NoAmbiguitiesEncodedNucleotideCodec.canEncode((Iterable<Nucleotide>) priorityQueue0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      NoAmbiguitiesEncodedNucleotideCodec noAmbiguitiesEncodedNucleotideCodec0 = NoAmbiguitiesEncodedNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)1;
      byteArray0[2] = (byte)1;
      int int0 = noAmbiguitiesEncodedNucleotideCodec0.getNumberOfGaps(byteArray0);
      assertEquals(0, int0);
  }

  @Test
  public void test4()  throws Throwable  {
      NoAmbiguitiesEncodedNucleotideCodec noAmbiguitiesEncodedNucleotideCodec0 = NoAmbiguitiesEncodedNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)1;
      int int0 = noAmbiguitiesEncodedNucleotideCodec0.getNumberOfGaps(byteArray0);
      assertEquals(0, int0);
  }

  @Test
  public void test5()  throws Throwable  {
      NoAmbiguitiesEncodedNucleotideCodec noAmbiguitiesEncodedNucleotideCodec0 = NoAmbiguitiesEncodedNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)1;
      byteArray0[2] = (byte)1;
      long long0 = noAmbiguitiesEncodedNucleotideCodec0.getUngappedLength(byteArray0);
      assertEquals(0L, long0);
  }

  @Test
  public void test6()  throws Throwable  {
      NoAmbiguitiesEncodedNucleotideCodec noAmbiguitiesEncodedNucleotideCodec0 = NoAmbiguitiesEncodedNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)1;
      long long0 = noAmbiguitiesEncodedNucleotideCodec0.getUngappedLength(byteArray0);
      assertEquals(0L, long0);
  }

  @Test
  public void test7()  throws Throwable  {
      NoAmbiguitiesEncodedNucleotideCodec noAmbiguitiesEncodedNucleotideCodec0 = NoAmbiguitiesEncodedNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      int int0 = noAmbiguitiesEncodedNucleotideCodec0.getUngappedOffsetFor(byteArray0, (-64));
      assertEquals((-64), int0);
  }

  @Test
  public void test8()  throws Throwable  {
      NoAmbiguitiesEncodedNucleotideCodec noAmbiguitiesEncodedNucleotideCodec0 = NoAmbiguitiesEncodedNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      int int0 = noAmbiguitiesEncodedNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 1);
      assertEquals(1, int0);
  }

  @Test
  public void test9()  throws Throwable  {
      NoAmbiguitiesEncodedNucleotideCodec noAmbiguitiesEncodedNucleotideCodec0 = NoAmbiguitiesEncodedNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      int int0 = noAmbiguitiesEncodedNucleotideCodec0.getGappedOffsetFor(byteArray0, (-1224));
      assertEquals((-1224), int0);
  }

  @Test
  public void test10()  throws Throwable  {
      NoAmbiguitiesEncodedNucleotideCodec noAmbiguitiesEncodedNucleotideCodec0 = NoAmbiguitiesEncodedNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      int int0 = noAmbiguitiesEncodedNucleotideCodec0.getGappedOffsetFor(byteArray0, 1);
      assertEquals(2, int0);
  }
}
