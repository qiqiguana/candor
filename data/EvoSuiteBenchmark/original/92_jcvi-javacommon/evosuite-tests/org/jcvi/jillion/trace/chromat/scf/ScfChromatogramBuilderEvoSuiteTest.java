/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.trace.chromat.scf;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.util.HashMap;
import java.util.Map;
import org.jcvi.jillion.core.pos.PositionSequence;
import org.jcvi.jillion.core.qual.QualitySequence;
import org.jcvi.jillion.core.residue.nt.NucleotideSequence;
import org.jcvi.jillion.internal.trace.chromat.scf.header.SCFHeaderDecoderException;
import org.jcvi.jillion.trace.chromat.scf.ScfChromatogram;
import org.jcvi.jillion.trace.chromat.scf.ScfChromatogramBuilder;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ScfChromatogramBuilderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ScfChromatogramBuilder scfChromatogramBuilder0 = null;
      try {
        scfChromatogramBuilder0 = new ScfChromatogramBuilder((ScfChromatogram) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder("");
      PositionSequence positionSequence0 = scfChromatogramBuilder0.peaks();
      assertNull(positionSequence0);
  }

  @Test
  public void test2()  throws Throwable  {
      ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder("tr-_6zH");
      byte[] byteArray0 = new byte[3];
      ScfChromatogramBuilder scfChromatogramBuilder1 = scfChromatogramBuilder0.gConfidence(byteArray0);
      assertSame(scfChromatogramBuilder0, scfChromatogramBuilder1);
  }

  @Test
  public void test3()  throws Throwable  {
      ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder("");
      QualitySequence qualitySequence0 = scfChromatogramBuilder0.insertionConfidence();
      assertNull(qualitySequence0);
  }

  @Test
  public void test4()  throws Throwable  {
      ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder("positions can not be null");
      short[] shortArray0 = scfChromatogramBuilder0.aPositions();
      assertNotNull(shortArray0);
  }

  @Test
  public void test5()  throws Throwable  {
      ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder("Pp[`zj)gH=zY,");
      short[] shortArray0 = new short[2];
      ScfChromatogramBuilder scfChromatogramBuilder1 = scfChromatogramBuilder0.peaks(shortArray0);
      assertSame(scfChromatogramBuilder1, scfChromatogramBuilder0);
  }

  @Test
  public void test6()  throws Throwable  {
      ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder("tr-_6zH");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ScfChromatogramBuilder scfChromatogramBuilder1 = scfChromatogramBuilder0.properties((Map<String, String>) hashMap0);
      assertSame(scfChromatogramBuilder0, scfChromatogramBuilder1);
  }

  @Test
  public void test7()  throws Throwable  {
      ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder("");
      byte[] byteArray0 = new byte[4];
      ScfChromatogramBuilder scfChromatogramBuilder1 = scfChromatogramBuilder0.cConfidence(byteArray0);
      assertSame(scfChromatogramBuilder0, scfChromatogramBuilder1);
  }

  @Test
  public void test8()  throws Throwable  {
      ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder("Pp[`zj)gH=zY,");
      short[] shortArray0 = scfChromatogramBuilder0.cPositions();
      assertNotNull(shortArray0);
  }

  @Test
  public void test9()  throws Throwable  {
      ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder("Pp[`zj)gH=zY,");
      short[] shortArray0 = new short[7];
      ScfChromatogramBuilder scfChromatogramBuilder1 = scfChromatogramBuilder0.cPositions(shortArray0);
      assertSame(scfChromatogramBuilder1, scfChromatogramBuilder0);
  }

  @Test
  public void test10()  throws Throwable  {
      ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder("positions can not be null");
      byte[] byteArray0 = new byte[10];
      ScfChromatogramBuilder scfChromatogramBuilder1 = scfChromatogramBuilder0.tConfidence(byteArray0);
      assertSame(scfChromatogramBuilder0, scfChromatogramBuilder1);
  }

  @Test
  public void test11()  throws Throwable  {
      ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder("positions can not be null");
      QualitySequence qualitySequence0 = scfChromatogramBuilder0.substitutionConfidence();
      assertNull(qualitySequence0);
  }

  @Test
  public void test12()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(818);
      ScfChromatogramBuilder scfChromatogramBuilder0 = null;
      try {
        scfChromatogramBuilder0 = new ScfChromatogramBuilder("E79xf", (InputStream) pipedInputStream0);
        fail("Expecting exception: SCFHeaderDecoderException");
      } catch(SCFHeaderDecoderException e) {
        /*
         * Error parsing Header
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder("");
      byte[] byteArray0 = scfChromatogramBuilder0.aConfidence();
      assertNotNull(byteArray0);
  }

  @Test
  public void test14()  throws Throwable  {
      ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder("");
      byte[] byteArray0 = scfChromatogramBuilder0.gConfidence();
      assertNotNull(byteArray0);
  }

  @Test
  public void test15()  throws Throwable  {
      ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder("Pp[`zj)gH=zY,");
      ScfChromatogramBuilder scfChromatogramBuilder1 = scfChromatogramBuilder0.basecalls((NucleotideSequence) null);
      assertSame(scfChromatogramBuilder0, scfChromatogramBuilder1);
  }

  @Test
  public void test16()  throws Throwable  {
      ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder("V777|:s$5Rh$LT}=@");
      short[] shortArray0 = scfChromatogramBuilder0.gPositions();
      assertNotNull(shortArray0);
  }

  @Test
  public void test17()  throws Throwable  {
      ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder("positions can not be null");
      short[] shortArray0 = scfChromatogramBuilder0.tPositions();
      assertNotNull(shortArray0);
  }

  @Test
  public void test18()  throws Throwable  {
      ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder("");
      // Undeclared exception!
      try {
        scfChromatogramBuilder0.build();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test19()  throws Throwable  {
      ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder("Pp[`zj)gH=zY,");
      byte[] byteArray0 = new byte[2];
      ScfChromatogramBuilder scfChromatogramBuilder1 = scfChromatogramBuilder0.aConfidence(byteArray0);
      assertSame(scfChromatogramBuilder0, scfChromatogramBuilder1);
  }

  @Test
  public void test20()  throws Throwable  {
      ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder("");
      NucleotideSequence nucleotideSequence0 = scfChromatogramBuilder0.basecalls();
      assertNull(nucleotideSequence0);
  }

  @Test
  public void test21()  throws Throwable  {
      ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder("positions can not be null");
      short[] shortArray0 = new short[7];
      ScfChromatogramBuilder scfChromatogramBuilder1 = scfChromatogramBuilder0.aPositions(shortArray0);
      assertSame(scfChromatogramBuilder1, scfChromatogramBuilder0);
  }

  @Test
  public void test22()  throws Throwable  {
      ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder("tr-_6zH");
      Map<String, String> map0 = scfChromatogramBuilder0.properties();
      assertNull(map0);
  }

  @Test
  public void test23()  throws Throwable  {
      File file0 = new File("'YU", "'YU");
      ScfChromatogramBuilder scfChromatogramBuilder0 = null;
      try {
        scfChromatogramBuilder0 = new ScfChromatogramBuilder("'YU", file0);
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
        /*
         * 'YU/'YU (No such file or directory)
         */
      }
  }

  @Test
  public void test24()  throws Throwable  {
      ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder("tr-_6zH");
      QualitySequence qualitySequence0 = scfChromatogramBuilder0.deletionConfidence();
      assertNull(qualitySequence0);
  }

  @Test
  public void test25()  throws Throwable  {
      ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder("positions can not be null");
      byte[] byteArray0 = scfChromatogramBuilder0.cConfidence();
      assertNotNull(byteArray0);
  }

  @Test
  public void test26()  throws Throwable  {
      ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder("positions can not be null");
      byte[] byteArray0 = scfChromatogramBuilder0.tConfidence();
      assertNotNull(byteArray0);
  }

  @Test
  public void test27()  throws Throwable  {
      ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder("positions can not be null");
      short[] shortArray0 = new short[7];
      ScfChromatogramBuilder scfChromatogramBuilder1 = scfChromatogramBuilder0.gPositions(shortArray0);
      assertSame(scfChromatogramBuilder1, scfChromatogramBuilder0);
  }

  @Test
  public void test28()  throws Throwable  {
      ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder("positions can not be null");
      short[] shortArray0 = new short[7];
      ScfChromatogramBuilder scfChromatogramBuilder1 = scfChromatogramBuilder0.tPositions(shortArray0);
      assertSame(scfChromatogramBuilder1, scfChromatogramBuilder0);
  }

  @Test
  public void test29()  throws Throwable  {
      ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder("Pp[`zj)gH=zY,");
      byte[] byteArray0 = new byte[2];
      ScfChromatogramBuilder scfChromatogramBuilder1 = scfChromatogramBuilder0.substitutionConfidence(byteArray0);
      assertSame(scfChromatogramBuilder1, scfChromatogramBuilder0);
  }

  @Test
  public void test30()  throws Throwable  {
      ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder("V777|:s$5Rh$LT}=@");
      ScfChromatogramBuilder scfChromatogramBuilder1 = scfChromatogramBuilder0.substitutionConfidence((byte[]) null);
      assertSame(scfChromatogramBuilder0, scfChromatogramBuilder1);
  }

  @Test
  public void test31()  throws Throwable  {
      ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder("Pp[`zj)gH=zY,");
      byte[] byteArray0 = new byte[2];
      ScfChromatogramBuilder scfChromatogramBuilder1 = scfChromatogramBuilder0.insertionConfidence(byteArray0);
      assertSame(scfChromatogramBuilder1, scfChromatogramBuilder0);
  }

  @Test
  public void test32()  throws Throwable  {
      ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder("");
      ScfChromatogramBuilder scfChromatogramBuilder1 = scfChromatogramBuilder0.insertionConfidence((byte[]) null);
      assertSame(scfChromatogramBuilder1, scfChromatogramBuilder0);
  }

  @Test
  public void test33()  throws Throwable  {
      ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder("Pp[`zj)gH=zY,");
      byte[] byteArray0 = new byte[1];
      ScfChromatogramBuilder scfChromatogramBuilder1 = scfChromatogramBuilder0.deletionConfidence(byteArray0);
      assertSame(scfChromatogramBuilder0, scfChromatogramBuilder1);
  }

  @Test
  public void test34()  throws Throwable  {
      ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder("");
      ScfChromatogramBuilder scfChromatogramBuilder1 = scfChromatogramBuilder0.deletionConfidence((byte[]) null);
      assertSame(scfChromatogramBuilder1, scfChromatogramBuilder0);
  }

  @Test
  public void test35()  throws Throwable  {
      ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder("");
      byte[] byteArray0 = new byte[4];
      ScfChromatogramBuilder scfChromatogramBuilder1 = scfChromatogramBuilder0.privateData(byteArray0);
      byte[] byteArray1 = scfChromatogramBuilder1.privateData();
      assertNotSame(byteArray0, byteArray1);
  }

  @Test
  public void test36()  throws Throwable  {
      ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder("");
      byte[] byteArray0 = scfChromatogramBuilder0.privateData();
      assertNull(byteArray0);
  }

  @Test
  public void test37()  throws Throwable  {
      ScfChromatogramBuilder scfChromatogramBuilder0 = new ScfChromatogramBuilder("V777|:s$5Rh$LT}=@");
      ScfChromatogramBuilder scfChromatogramBuilder1 = scfChromatogramBuilder0.privateData((byte[]) null);
      assertSame(scfChromatogramBuilder1, scfChromatogramBuilder0);
  }
}
