/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.trace.sff;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.qual.QualitySequence;
import org.jcvi.jillion.core.residue.nt.NucleotideSequence;
import org.jcvi.jillion.trace.sff.SffFlowgramImpl;
import org.jcvi.jillion.trace.sff.SffReadData;
import org.jcvi.jillion.trace.sff.SffReadHeader;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SffFlowgramImplEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      short[] shortArray0 = new short[6];
      byte[] byteArray0 = new byte[1];
      SffFlowgramImpl sffFlowgramImpl0 = null;
      try {
        sffFlowgramImpl0 = new SffFlowgramImpl("id cNan not be null", (NucleotideSequence) null, (QualitySequence) null, shortArray0, (Range) null, (Range) null, byteArray0, shortArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * basecalls can not be null
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try {
        SffFlowgramImpl.create((SffReadHeader) null, (SffReadData) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      short[] shortArray0 = new short[10];
      short[] shortArray1 = SffFlowgramImpl.computeValues(byteArray0, shortArray0);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[5] = (byte)11;
      short[] shortArray0 = new short[10];
      // Undeclared exception!
      try {
        SffFlowgramImpl.computeValues(byteArray0, shortArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 10
         */
      }
  }
}
