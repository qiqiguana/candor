/*
 * This file was automatically generated by EvoSuite
 */

package org.jcvi.jillion.assembly.ca.asm;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.TreeSet;
import org.jcvi.jillion.assembly.ca.asm.AsmFileParser;
import org.jcvi.jillion.assembly.ca.asm.AsmVisitor;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class AsmFileParserEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      AsmFileParser.AsmMessageHandler asmFileParser_AsmMessageHandler0 = AsmFileParser.AsmMessageHandler.CONTIG_LINK;
      AsmVisitor.LinkOrientation asmVisitor_LinkOrientation0 = AsmVisitor.LinkOrientation.INNIE;
      AsmVisitor.OverlapType asmVisitor_OverlapType0 = AsmVisitor.OverlapType.NO_OVERLAP;
      AsmVisitor.OverlapStatus asmVisitor_OverlapStatus0 = AsmVisitor.OverlapStatus.POLYMORPHISM;
      HashSet<AsmVisitor.MatePairEvidence> hashSet0 = new HashSet<AsmVisitor.MatePairEvidence>();
      // Undeclared exception!
      try {
        asmFileParser_AsmMessageHandler0.visitLink((AsmVisitor) null, "E9Mhjj", "E9Mhjj", asmVisitor_LinkOrientation0, asmVisitor_OverlapType0, false, 0.0F, 778.7197F, 0, asmVisitor_OverlapStatus0, (Set<AsmVisitor.MatePairEvidence>) hashSet0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      AsmFileParser.AsmMessageHandler asmFileParser_AsmMessageHandler0 = AsmFileParser.AsmMessageHandler.CONTIG_LINK;
      // Undeclared exception!
      try {
        asmFileParser_AsmMessageHandler0.handle((AsmFileParser.ParserState) null, (AsmVisitor) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try {
        AsmFileParser.parseLength((AsmFileParser.ParserState) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      File file0 = new File(":mz3h1ZX5D");
      AsmFileParser asmFileParser0 = AsmFileParser.create(file0);
      // Undeclared exception!
      try {
        asmFileParser0.parseAsm((AsmFileParser.ParserState) null, (AsmVisitor) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      AsmFileParser.AsmMessageHandler asmFileParser_AsmMessageHandler0 = AsmFileParser.AsmMessageHandler.UNITIG_LINK;
      AsmVisitor.LinkOrientation asmVisitor_LinkOrientation0 = AsmVisitor.LinkOrientation.OUTIE;
      AsmVisitor.OverlapType asmVisitor_OverlapType0 = AsmVisitor.OverlapType.TANDEM;
      AsmVisitor.OverlapStatus asmVisitor_OverlapStatus0 = AsmVisitor.OverlapStatus.BAD;
      LinkedHashSet<AsmVisitor.MatePairEvidence> linkedHashSet0 = new LinkedHashSet<AsmVisitor.MatePairEvidence>();
      // Undeclared exception!
      try {
        asmFileParser_AsmMessageHandler0.visitLink((AsmVisitor) null, "UNITIG_LINK", "UNITIG_LINK", asmVisitor_LinkOrientation0, asmVisitor_OverlapType0, false, (-869.9772F), (-869.9772F), 160, asmVisitor_OverlapStatus0, (Set<AsmVisitor.MatePairEvidence>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      AsmFileParser.AsmMessageHandler asmFileParser_AsmMessageHandler0 = AsmFileParser.AsmMessageHandler.UNITIG_LINK;
      // Undeclared exception!
      try {
        asmFileParser_AsmMessageHandler0.handle((AsmFileParser.ParserState) null, (AsmVisitor) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      AsmFileParser.AsmMessageHandler asmFileParser_AsmMessageHandler0 = AsmFileParser.AsmMessageHandler.SCAFFOLD_LINK;
      AsmVisitor.LinkOrientation asmVisitor_LinkOrientation0 = AsmVisitor.LinkOrientation.NORMAL;
      AsmVisitor.OverlapType asmVisitor_OverlapType0 = AsmVisitor.OverlapType.CONTAINMENT_1_BY_2;
      AsmVisitor.OverlapStatus asmVisitor_OverlapStatus0 = AsmVisitor.OverlapStatus.CHIMERA;
      TreeSet<AsmVisitor.MatePairEvidence> treeSet0 = new TreeSet<AsmVisitor.MatePairEvidence>();
      // Undeclared exception!
      try {
        asmFileParser_AsmMessageHandler0.visitLink((AsmVisitor) null, "vfc", "vfc", asmVisitor_LinkOrientation0, asmVisitor_OverlapType0, false, (-1374.3124F), (-1374.3124F), 1, asmVisitor_OverlapStatus0, (Set<AsmVisitor.MatePairEvidence>) treeSet0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      AsmFileParser.AsmMessageHandler asmFileParser_AsmMessageHandler0 = AsmFileParser.AsmMessageHandler.SCAFFOLD_LINK;
      // Undeclared exception!
      try {
        asmFileParser_AsmMessageHandler0.handle((AsmFileParser.ParserState) null, (AsmVisitor) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      File file0 = new File("TjAz lKJ", "TjAz lKJ");
      AsmFileParser asmFileParser0 = AsmFileParser.create(file0);
      try {
        asmFileParser0.accept((AsmVisitor) null);
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
        /*
         * TjAz lKJ/TjAz lKJ (No such file or directory)
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      AsmFileParser.AsmMessageHandler asmFileParser_AsmMessageHandler0 = AsmFileParser.AsmMessageHandler.CONTIG;
      AsmVisitor.LinkOrientation asmVisitor_LinkOrientation0 = AsmVisitor.LinkOrientation.ANTI_NORMAL;
      AsmVisitor.OverlapType asmVisitor_OverlapType0 = AsmVisitor.OverlapType.REGULAR;
      AsmVisitor.OverlapStatus asmVisitor_OverlapStatus0 = AsmVisitor.OverlapStatus.UNKNOWN;
      HashSet<AsmVisitor.MatePairEvidence> hashSet0 = new HashSet<AsmVisitor.MatePairEvidence>();
      // Undeclared exception!
      try {
        asmFileParser_AsmMessageHandler0.visitLink((AsmVisitor) null, (String) null, (String) null, asmVisitor_LinkOrientation0, asmVisitor_OverlapType0, false, (-1549.406F), (-1549.406F), 1995, asmVisitor_OverlapStatus0, (Set<AsmVisitor.MatePairEvidence>) hashSet0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * invalid state should not contain any links
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      AsmFileParser.AsmMessageHandler asmFileParser_AsmMessageHandler0 = AsmFileParser.AsmMessageHandler.FRAGMENT;
      // Undeclared exception!
      try {
        asmFileParser_AsmMessageHandler0.handle((AsmFileParser.ParserState) null, (AsmVisitor) null, false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      AsmFileParser.AsmMessageHandler asmFileParser_AsmMessageHandler0 = AsmFileParser.AsmMessageHandler.UNITIG;
      String string0 = asmFileParser_AsmMessageHandler0.getMessageCode();
      assertEquals("UTG", string0);
  }

  @Test
  public void test12()  throws Throwable  {
      AsmFileParser.AsmMessageHandler asmFileParser_AsmMessageHandler0 = AsmFileParser.AsmMessageHandler.UNITIG;
      boolean boolean0 = asmFileParser_AsmMessageHandler0.canHandle(" np)[]w%");
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      AsmFileParser.AsmMessageHandler asmFileParser_AsmMessageHandler0 = AsmFileParser.AsmMessageHandler.SCAFFOLD_LINK;
      String string0 = asmFileParser_AsmMessageHandler0.parseMessageCode("std:(S+)");
      assertNull(string0);
  }

  @Test
  public void test14()  throws Throwable  {
      AsmFileParser.AsmMessageHandler asmFileParser_AsmMessageHandler0 = AsmFileParser.AsmMessageHandler.UNITIG;
      try {
        asmFileParser_AsmMessageHandler0.parseMateStatus("UTG");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * invalid asm file: could not parse UTG mate status: UTG
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      AsmFileParser.AsmMessageHandler asmFileParser_AsmMessageHandler0 = AsmFileParser.AsmMessageHandler.CONTIG_LINK;
      Set<AsmVisitor.MatePairEvidence> set0 = asmFileParser_AsmMessageHandler0.parseMatePairEvidence(0, (AsmFileParser.ParserState) null);
      assertEquals(0, set0.size());
  }

  @Test
  public void test16()  throws Throwable  {
      AsmFileParser.AsmMessageHandler asmFileParser_AsmMessageHandler0 = AsmFileParser.AsmMessageHandler.CONTIG;
      // Undeclared exception!
      try {
        asmFileParser_AsmMessageHandler0.parseMatePairEvidence(393, (AsmFileParser.ParserState) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test17()  throws Throwable  {
      AsmFileParser.AsmMessageHandler asmFileParser_AsmMessageHandler0 = AsmFileParser.AsmMessageHandler.UNITIG_LINK;
      try {
        asmFileParser_AsmMessageHandler0.parseMeanEdgeDistance("9c*KGGK6!");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * error reading is mean edge distance message9c*KGGK6!
         */
      }
  }

  @Test
  public void test18()  throws Throwable  {
      AsmFileParser asmFileParser0 = AsmFileParser.create((File) null);
      // Undeclared exception!
      try {
        asmFileParser0.accept((AsmVisitor) null, (AsmVisitor.AsmVisitorCallback.AsmVisitorMemento) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * unknown memento type null must use instance created by this parser
         */
      }
  }
}
