/*
 * This file was automatically generated by EvoSuite
 */

package net.virtualinfinity.atrobots.hardware.missiles;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import net.virtualinfinity.atrobots.ArenaObjectVisitor;
import net.virtualinfinity.atrobots.ArenaObjectVisitorAdaptor;
import net.virtualinfinity.atrobots.arena.Explosion;
import net.virtualinfinity.atrobots.arena.Heading;
import net.virtualinfinity.atrobots.arena.Position;
import net.virtualinfinity.atrobots.arena.TangibleArenaObject;
import net.virtualinfinity.atrobots.arenaobjects.DamageInflicter;
import net.virtualinfinity.atrobots.hardware.missiles.Missile;
import net.virtualinfinity.atrobots.hardware.turret.Turret;
import net.virtualinfinity.atrobots.measures.AbsoluteAngle;
import net.virtualinfinity.atrobots.measures.Duration;
import net.virtualinfinity.atrobots.measures.Vector;
import net.virtualinfinity.atrobots.robot.Robot;
import net.virtualinfinity.atrobots.robot.RobotScore;
import net.virtualinfinity.atrobots.robot.RobotScoreKeeper;
import net.virtualinfinity.atrobots.snapshots.MissileSnapshot;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MissileEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Position position0 = new Position((Vector) null);
      Heading heading0 = new Heading();
      AbsoluteAngle absoluteAngle0 = heading0.getAngle();
      Missile missile0 = new Missile((DamageInflicter) null, position0, absoluteAngle0, 1783.1455454333393, true);
      RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper();
      Robot robot0 = new Robot("g^zl}[Xu-g", 932, (RobotScore) robotScoreKeeper0);
      // Undeclared exception!
      try {
        missile0.checkCollision((TangibleArenaObject) robot0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      Position position0 = new Position((Vector) null);
      Heading heading0 = new Heading();
      AbsoluteAngle absoluteAngle0 = heading0.getAngle();
      Missile missile0 = new Missile((DamageInflicter) null, position0, absoluteAngle0, 1783.1455454333393, true);
      ArenaObjectVisitorAdaptor arenaObjectVisitorAdaptor0 = new ArenaObjectVisitorAdaptor();
      missile0.accept((ArenaObjectVisitor) arenaObjectVisitorAdaptor0);
      assertEquals(150, absoluteAngle0.getBygrees());
      assertEquals("2.110757564130642r/150", heading0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      String string0 = "N~L.*R,Xg{\\8";
      int int0 = (-1686);
      RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper();
      Robot robot0 = new Robot(string0, int0, (RobotScore) robotScoreKeeper0);
      AbsoluteAngle absoluteAngle0 = AbsoluteAngle.fromRadians((double) int0);
      Vector vector0 = absoluteAngle0.toUnitVector();
      Explosion explosion0 = new Explosion(vector0, (double) int0);
      Position position0 = explosion0.getPosition();
      boolean boolean0 = false;
      Missile missile0 = new Missile((DamageInflicter) robot0, position0, absoluteAngle0, (double) int0, boolean0);
      assertNotNull(missile0);
      
      MissileSnapshot missileSnapshot0 = (MissileSnapshot)missile0.getSnapshot();
      assertNotNull(missileSnapshot0);
      assertEquals(46398.3154278743, missileSnapshot0.getVelocityY(), 0.01D);
      assertEquals(false, missileSnapshot0.isOverburn());
  }

  @Test
  public void test3()  throws Throwable  {
      String string0 = "N~L.*R,Xg{\\8";
      int int0 = (-1686);
      RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper();
      Robot robot0 = new Robot(string0, int0, (RobotScore) robotScoreKeeper0);
      AbsoluteAngle absoluteAngle0 = AbsoluteAngle.fromRadians((double) int0);
      Vector vector0 = absoluteAngle0.toUnitVector();
      Explosion explosion0 = new Explosion(vector0, (double) int0);
      Position position0 = explosion0.getPosition();
      boolean boolean0 = false;
      Missile missile0 = new Missile((DamageInflicter) robot0, position0, absoluteAngle0, (double) int0, boolean0);
      missile0.checkCollision((TangibleArenaObject) robot0);
      assertEquals(0, robot0.getTotalDeaths());
  }

  @Test
  public void test4()  throws Throwable  {
      String string0 = "N~L.*R,Xg{\\8";
      int int0 = (-1686);
      RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper();
      Robot robot0 = new Robot(string0, int0, (RobotScore) robotScoreKeeper0);
      int int1 = 111;
      AbsoluteAngle absoluteAngle0 = AbsoluteAngle.fromRadians((double) int1);
      Vector vector0 = absoluteAngle0.toUnitVector();
      Explosion explosion0 = new Explosion(vector0, (double) int1);
      Position position0 = explosion0.getPosition();
      boolean boolean0 = false;
      Missile missile0 = new Missile((DamageInflicter) robot0, position0, absoluteAngle0, (double) int0, boolean0);
      Duration duration0 = Duration.fromCycles(int1);
      missile0.update(duration0);
      missile0.update(duration0);
      // Undeclared exception!
      try {
        missile0.update(duration0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      String string0 = "N~L.*R,Xg{\\8";
      int int0 = 5;
      RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper();
      int int1 = robotScoreKeeper0.getTotalWins();
      Robot robot0 = new Robot(string0, int0, (RobotScore) robotScoreKeeper0);
      AbsoluteAngle absoluteAngle0 = AbsoluteAngle.fromRadians((double) int0);
      Turret turret0 = new Turret();
      Heading heading0 = turret0.getHeading();
      Vector vector0 = heading0.times((double) int0);
      Explosion explosion0 = new Explosion(vector0, (double) int0);
      Position position0 = explosion0.getPosition();
      Missile missile0 = robot0.createMissile(absoluteAngle0, position0, (double) int1);
      Duration duration0 = Duration.ZERO_CYCLE;
      missile0.update(duration0);
  }
}
