/*
 * This file was automatically generated by EvoSuite
 */

package net.virtualinfinity.atrobots.compiler;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import net.virtualinfinity.atrobots.compiler.Symbol;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SymbolEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Symbol symbol0 = new Symbol((short) (-913), (short) (-913), (short) (-913));
      short short0 = symbol0.getMicrocode();
      assertEquals(-913, symbol0.getLineNumber());
      assertEquals(-913, symbol0.getValue());
      assertEquals((short) (-913), short0);
  }

  @Test
  public void test1()  throws Throwable  {
      Symbol symbol0 = new Symbol((short) (-913), (short) (-913), (short) (-913));
      short short0 = symbol0.getValue();
      assertEquals((short) (-913), short0);
      assertEquals(-913, symbol0.getLineNumber());
      assertEquals(-913, symbol0.getMicrocode());
  }

  @Test
  public void test2()  throws Throwable  {
      Symbol symbol0 = new Symbol((short) (-913), (short) (-913), (short) (-913));
      int int0 = symbol0.getLineNumber();
      assertEquals((-913), int0);
      assertEquals(-913, symbol0.getValue());
      assertEquals(-913, symbol0.getMicrocode());
  }
}
