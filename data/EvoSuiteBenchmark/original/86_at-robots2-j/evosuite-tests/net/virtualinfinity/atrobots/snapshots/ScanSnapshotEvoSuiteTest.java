/*
 * This file was automatically generated by EvoSuite
 */

package net.virtualinfinity.atrobots.snapshots;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import net.virtualinfinity.atrobots.measures.AbsoluteAngle;
import net.virtualinfinity.atrobots.measures.AngleBracket;
import net.virtualinfinity.atrobots.measures.RelativeAngle;
import net.virtualinfinity.atrobots.measures.Vector;
import net.virtualinfinity.atrobots.snapshots.ScanSnapshot;
import net.virtualinfinity.atrobots.snapshots.SnapshotAdaptor;
import net.virtualinfinity.atrobots.snapshots.SnapshotVisitor;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ScanSnapshotEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      AbsoluteAngle absoluteAngle0 = AbsoluteAngle.fromRadians(21.110957314061793);
      AngleBracket angleBracket0 = AngleBracket.clockwiseFrom(absoluteAngle0, (RelativeAngle) null);
      ScanSnapshot scanSnapshot0 = new ScanSnapshot(angleBracket0, 1327.435665262909, false, (Vector) null, false, 1);
      // Undeclared exception!
      try {
        scanSnapshot0.getAccuracyArea();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      ScanSnapshot scanSnapshot0 = new ScanSnapshot((AngleBracket) null, (-410.0049755646119), false, (Vector) null, true, 1245);
      boolean boolean0 = scanSnapshot0.isSuccessful();
      assertEquals(1245, scanSnapshot0.getAccuracy());
      assertEquals(false, boolean0);
      assertEquals((-410.0049755646119), scanSnapshot0.getMaxDistance(), 0.01D);
      assertEquals(true, scanSnapshot0.isAccuracyAvailable());
  }

  @Test
  public void test2()  throws Throwable  {
      RelativeAngle relativeAngle0 = RelativeAngle.fromRadians(0.0);
      AngleBracket angleBracket0 = AngleBracket.clockwiseFrom((AbsoluteAngle) null, relativeAngle0);
      ScanSnapshot scanSnapshot0 = new ScanSnapshot(angleBracket0, 0.0, true, (Vector) null, false, 400);
      scanSnapshot0.getMatchVector();
      assertEquals(0.0, scanSnapshot0.getMaxDistance(), 0.01D);
      assertEquals(true, scanSnapshot0.isSuccessful());
      assertEquals(400, scanSnapshot0.getAccuracy());
      assertEquals(false, scanSnapshot0.isAccuracyAvailable());
  }

  @Test
  public void test3()  throws Throwable  {
      AngleBracket angleBracket0 = AngleBracket.all();
      ScanSnapshot scanSnapshot0 = new ScanSnapshot(angleBracket0, (-1.0), false, (Vector) null, true, 1517);
      double double0 = scanSnapshot0.getMaxDistance();
      assertEquals((-1.0), double0, 0.01D);
      assertEquals(false, scanSnapshot0.isSuccessful());
      assertEquals(1517, scanSnapshot0.getAccuracy());
      assertEquals(true, scanSnapshot0.isAccuracyAvailable());
  }

  @Test
  public void test4()  throws Throwable  {
      AngleBracket angleBracket0 = AngleBracket.all();
      ScanSnapshot scanSnapshot0 = new ScanSnapshot(angleBracket0, 0.0, false, (Vector) null, true, (-1216));
      boolean boolean0 = scanSnapshot0.isAccuracyAvailable();
      assertEquals(-1216, scanSnapshot0.getAccuracy());
      assertEquals(false, scanSnapshot0.isSuccessful());
      assertEquals(true, boolean0);
      assertEquals(0.0, scanSnapshot0.getMaxDistance(), 0.01D);
  }

  @Test
  public void test5()  throws Throwable  {
      AngleBracket angleBracket0 = AngleBracket.all();
      ScanSnapshot scanSnapshot0 = new ScanSnapshot(angleBracket0, (-1248.4533177641247), false, (Vector) null, true, (-970));
      // Undeclared exception!
      try {
        scanSnapshot0.getAccuracyArea();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      AngleBracket angleBracket0 = AngleBracket.all();
      ScanSnapshot scanSnapshot0 = new ScanSnapshot(angleBracket0, (-1.0), false, (Vector) null, true, 1517);
      int int0 = scanSnapshot0.getAccuracy();
      assertEquals(true, scanSnapshot0.isAccuracyAvailable());
      assertEquals(1517, int0);
      assertEquals(false, scanSnapshot0.isSuccessful());
      assertEquals((-1.0), scanSnapshot0.getMaxDistance(), 0.01D);
  }

  @Test
  public void test7()  throws Throwable  {
      AngleBracket angleBracket0 = AngleBracket.all();
      ScanSnapshot scanSnapshot0 = new ScanSnapshot(angleBracket0, (-1.0), false, (Vector) null, true, 1517);
      SnapshotAdaptor snapshotAdaptor0 = new SnapshotAdaptor();
      scanSnapshot0.visit((SnapshotVisitor) snapshotAdaptor0);
      assertEquals(false, scanSnapshot0.isSuccessful());
      assertEquals((-1.0), scanSnapshot0.getMaxDistance(), 0.01D);
      assertEquals(true, scanSnapshot0.isAccuracyAvailable());
      assertEquals(1517, scanSnapshot0.getAccuracy());
  }
}
