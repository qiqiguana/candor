/*
 * This file was automatically generated by EvoSuite
 */

package net.virtualinfinity.atrobots.compiler;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import net.virtualinfinity.atrobots.arena.Arena;
import net.virtualinfinity.atrobots.arena.RoundState;
import net.virtualinfinity.atrobots.compiler.RobotConfigurer;
import net.virtualinfinity.atrobots.computer.HardwareBus;
import net.virtualinfinity.atrobots.computer.MemoryArray;
import net.virtualinfinity.atrobots.computer.RandomAccessMemoryArray;
import net.virtualinfinity.atrobots.game.StandardRoundState;
import net.virtualinfinity.atrobots.hardware.armor.Armor;
import net.virtualinfinity.atrobots.hardware.mines.MineLayer;
import net.virtualinfinity.atrobots.hardware.missiles.MissileLauncher;
import net.virtualinfinity.atrobots.hardware.radio.Transceiver;
import net.virtualinfinity.atrobots.hardware.scanning.radar.Radar;
import net.virtualinfinity.atrobots.hardware.scanning.scanner.Scanner;
import net.virtualinfinity.atrobots.hardware.scanning.sonar.Sonar;
import net.virtualinfinity.atrobots.hardware.shield.Shield;
import net.virtualinfinity.atrobots.hardware.throttle.Throttle;
import net.virtualinfinity.atrobots.hardware.transponder.Transponder;
import net.virtualinfinity.atrobots.hardware.turret.Turret;
import net.virtualinfinity.atrobots.robot.Robot;
import net.virtualinfinity.atrobots.robot.RobotScore;
import net.virtualinfinity.atrobots.robot.RobotScoreKeeper;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class RobotConfigurerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      RobotConfigurer robotConfigurer0 = new RobotConfigurer();
      MissileLauncher missileLauncher0 = new MissileLauncher();
      robotConfigurer0.setMissileLauncher(missileLauncher0);
  }

  @Test
  public void test1()  throws Throwable  {
      RobotConfigurer robotConfigurer0 = new RobotConfigurer();
      HardwareBus hardwareBus0 = new HardwareBus();
      robotConfigurer0.setHardwareBus(hardwareBus0);
      assertEquals(350, hardwareBus0.getShutdownLevel());
  }

  @Test
  public void test2()  throws Throwable  {
      RobotConfigurer robotConfigurer0 = new RobotConfigurer();
      Sonar sonar0 = new Sonar();
      robotConfigurer0.setSonar(sonar0);
      MineLayer mineLayer0 = new MineLayer((-1300));
      robotConfigurer0.setMineLayer(mineLayer0);
      Radar radar0 = new Radar();
      robotConfigurer0.setRadar(radar0);
      Armor armor0 = new Armor(9.034846802810186);
      robotConfigurer0.setArmor(armor0);
      RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper();
      Robot robot0 = new Robot(":<E02", (-1300), (RobotScore) robotScoreKeeper0);
      robotConfigurer0.setRobot(robot0);
      Throttle throttle0 = new Throttle((double) (-1300));
      robotConfigurer0.setThrottle(throttle0);
      Shield shield0 = new Shield((double) (-1300));
      robotConfigurer0.setShield(shield0);
      StandardRoundState standardRoundState0 = new StandardRoundState((-1300), (-1300));
      // Undeclared exception!
      try {
        robotConfigurer0.wireRobotComponents((Arena) null, (RoundState) standardRoundState0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      RobotConfigurer robotConfigurer0 = new RobotConfigurer();
      MineLayer mineLayer0 = new MineLayer((-1300));
      robotConfigurer0.setMineLayer(mineLayer0);
      Radar radar0 = new Radar();
      robotConfigurer0.setRadar(radar0);
      Armor armor0 = new Armor(9.034846802810186);
      robotConfigurer0.setArmor(armor0);
      RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper();
      Robot robot0 = new Robot(":<E02", (-1300), (RobotScore) robotScoreKeeper0);
      robotConfigurer0.setRobot(robot0);
      Throttle throttle0 = new Throttle((double) (-1300));
      robotConfigurer0.setThrottle(throttle0);
      Shield shield0 = new Shield((double) (-1300));
      robotConfigurer0.setShield(shield0);
      StandardRoundState standardRoundState0 = new StandardRoundState((-1300), (-1300));
      // Undeclared exception!
      try {
        robotConfigurer0.wireRobotComponents((Arena) null, (RoundState) standardRoundState0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      RobotConfigurer robotConfigurer0 = new RobotConfigurer();
      Transceiver transceiver0 = new Transceiver();
      robotConfigurer0.setTransceiver(transceiver0);
      assertEquals(0, transceiver0.getChannel());
  }

  @Test
  public void test5()  throws Throwable  {
      RobotConfigurer robotConfigurer0 = new RobotConfigurer();
      robotConfigurer0.setScanner((Scanner) null);
  }

  @Test
  public void test6()  throws Throwable  {
      RobotConfigurer robotConfigurer0 = new RobotConfigurer();
      robotConfigurer0.setMissileLauncherPower((double) 462);
  }

  @Test
  public void test7()  throws Throwable  {
      RobotConfigurer robotConfigurer0 = new RobotConfigurer();
      robotConfigurer0.setCoolMultiplier((double) 462);
  }

  @Test
  public void test8()  throws Throwable  {
      RobotConfigurer robotConfigurer0 = new RobotConfigurer();
      Turret turret0 = new Turret();
      robotConfigurer0.setTurret(turret0);
  }

  @Test
  public void test9()  throws Throwable  {
      RobotConfigurer robotConfigurer0 = new RobotConfigurer();
      Transponder transponder0 = new Transponder();
      robotConfigurer0.setTransponder(transponder0);
      assertEquals(0, transponder0.getId());
  }

  @Test
  public void test10()  throws Throwable  {
      RobotConfigurer robotConfigurer0 = new RobotConfigurer();
      RandomAccessMemoryArray randomAccessMemoryArray0 = new RandomAccessMemoryArray(119);
      robotConfigurer0.setLowerMemoryArray((MemoryArray) randomAccessMemoryArray0);
      assertEquals(119, randomAccessMemoryArray0.size());
  }
}
