/*
 * This file was automatically generated by EvoSuite
 */

package net.virtualinfinity.atrobots.measures;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import net.virtualinfinity.atrobots.measures.AbsoluteAngle;
import net.virtualinfinity.atrobots.measures.RelativeAngle;
import net.virtualinfinity.atrobots.measures.Vector;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class AbsoluteAngleEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      AbsoluteAngle absoluteAngle0 = AbsoluteAngle.fromRadians((double) 15);
      AbsoluteAngle absoluteAngle1 = absoluteAngle0.getSupplementary();
      assertEquals(499.43669269623484, absoluteAngle0.getDegrees(), 0.01D);
      assertEquals("5.575222039230621r/35", absoluteAngle1.toString());
      assertEquals("2.433629385640827r/163", absoluteAngle0.toString());
      assertNotNull(absoluteAngle1);
  }

  @Test
  public void test1()  throws Throwable  {
      AbsoluteAngle absoluteAngle0 = AbsoluteAngle.fromRadians((double) 15);
      RelativeAngle relativeAngle0 = absoluteAngle0.counterClockwiseFromStandardOrigin();
      assertEquals(8.716814692820414, relativeAngle0.getRadians(), 0.01D);
      assertNotNull(relativeAngle0);
  }

  @Test
  public void test2()  throws Throwable  {
      AbsoluteAngle absoluteAngle0 = AbsoluteAngle.fromBygrees(424);
      assertNotNull(absoluteAngle0);
      
      RelativeAngle relativeAngle0 = RelativeAngle.HALF_CIRCLE;
      RelativeAngle relativeAngle1 = relativeAngle0.times((double) 424);
      AbsoluteAngle absoluteAngle1 = absoluteAngle0.counterClockwise(relativeAngle1);
      String string0 = absoluteAngle1.toString();
      assertEquals("2.5525440310416325r/168", string0);
      assertNotNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      AbsoluteAngle absoluteAngle0 = AbsoluteAngle.fromBygrees((-27));
      assertNotNull(absoluteAngle0);
      
      Vector vector0 = absoluteAngle0.toVector((double) (-27));
      Vector vector1 = absoluteAngle0.projectAngle(vector0);
      assertNotNull(vector1);
      assertEquals(16.611252945676924, vector1.getX(), 0.01D);
  }

  @Test
  public void test4()  throws Throwable  {
      AbsoluteAngle absoluteAngle0 = AbsoluteAngle.fromCartesian(1465.1868186155336, 1465.1868186155336);
      assertNotNull(absoluteAngle0);
      
      double double0 = absoluteAngle0.getDegrees();
      assertEquals(45.0, double0, 0.01D);
  }

  @Test
  public void test5()  throws Throwable  {
      AbsoluteAngle absoluteAngle0 = AbsoluteAngle.fromCartesian(1465.1868186155336, 1465.1868186155336);
      assertNotNull(absoluteAngle0);
      
      byte byte0 = absoluteAngle0.getSignedBygrees();
      assertEquals((byte)96, byte0);
      assertEquals("0.7853981633974483r/96", absoluteAngle0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      AbsoluteAngle absoluteAngle0 = AbsoluteAngle.fromBygrees(15);
      assertNotNull(absoluteAngle0);
      
      Vector vector0 = absoluteAngle0.toUnitVector();
      assertNotNull(vector0);
      assertEquals(0.3598950365349876, vector0.getX(), 0.01D);
  }

  @Test
  public void test7()  throws Throwable  {
      AbsoluteAngle absoluteAngle0 = AbsoluteAngle.fromBygrees(15);
      assertNotNull(absoluteAngle0);
      
      boolean boolean0 = absoluteAngle0.isClockwiseCloser(absoluteAngle0);
      assertEquals(true, boolean0);
      assertEquals((-0.9329927988347391), absoluteAngle0.sine(), 0.01D);
  }

  @Test
  public void test8()  throws Throwable  {
      AbsoluteAngle absoluteAngle0 = AbsoluteAngle.fromBygrees((-31));
      assertNotNull(absoluteAngle0);
      
      double double0 = absoluteAngle0.getDegrees();
      assertEquals(226.40625, double0, 0.01D);
  }

  @Test
  public void test9()  throws Throwable  {
      AbsoluteAngle absoluteAngle0 = AbsoluteAngle.fromBygrees((-27));
      assertNotNull(absoluteAngle0);
      
      byte byte0 = absoluteAngle0.getSignedBygrees();
      assertEquals((byte) (-27), byte0);
  }

  @Test
  public void test10()  throws Throwable  {
      AbsoluteAngle absoluteAngle0 = AbsoluteAngle.fromRadians((-1625.8346933947073));
      double double0 = absoluteAngle0.getNormalizedRadians();
      assertEquals(1.5103011648055749, double0, 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      AbsoluteAngle absoluteAngle0 = AbsoluteAngle.fromBygrees((-1));
      assertNotNull(absoluteAngle0);
      
      RelativeAngle relativeAngle0 = absoluteAngle0.counterClockwiseFromStandardOrigin();
      RelativeAngle relativeAngle1 = relativeAngle0.dividedBy((double) (-1));
      AbsoluteAngle absoluteAngle1 = absoluteAngle0.clockwise(relativeAngle1);
      assertNotNull(absoluteAngle1);
      
      boolean boolean0 = absoluteAngle0.isClockwiseCloser(absoluteAngle1);
      assertEquals(false, boolean0);
      assertEquals(false, absoluteAngle1.isExactBygrees());
      assertEquals(268.59375, absoluteAngle0.getDegrees(), 0.01D);
      assertEquals(0.0, absoluteAngle1.getNormalizedRadians(), 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      AbsoluteAngle absoluteAngle0 = AbsoluteAngle.fromBygrees((-1));
      assertNotNull(absoluteAngle0);
      
      RelativeAngle relativeAngle0 = absoluteAngle0.counterClockwiseFromStandardOrigin();
      AbsoluteAngle absoluteAngle1 = absoluteAngle0.clockwise(relativeAngle0);
      assertNotNull(absoluteAngle1);
      
      boolean boolean0 = absoluteAngle1.isClockwiseCloser(absoluteAngle0);
      assertEquals(false, boolean0);
      assertEquals(3.0925052683774528, absoluteAngle1.getRadians(), 0.01D);
  }

  @Test
  public void test13()  throws Throwable  {
      AbsoluteAngle absoluteAngle0 = AbsoluteAngle.fromBygrees(424);
      assertNotNull(absoluteAngle0);
      
      RelativeAngle relativeAngle0 = RelativeAngle.HALF_CIRCLE;
      AbsoluteAngle absoluteAngle1 = absoluteAngle0.counterClockwise(relativeAngle0);
      assertEquals((-0.8314696123025453), absoluteAngle0.cosine(), 0.01D);
      assertNotSame(absoluteAngle1, absoluteAngle0);
  }

  @Test
  public void test14()  throws Throwable  {
      AbsoluteAngle absoluteAngle0 = AbsoluteAngle.fromBygrees((-31));
      assertNotNull(absoluteAngle0);
      
      RelativeAngle relativeAngle0 = RelativeAngle.FULL_CIRCLE;
      absoluteAngle0.clockwise(relativeAngle0);
      assertEquals(-31, absoluteAngle0.getSignedBygrees());
      assertEquals(3.9515345095934116, absoluteAngle0.getRadians(), 0.01D);
  }

  @Test
  public void test15()  throws Throwable  {
      AbsoluteAngle absoluteAngle0 = AbsoluteAngle.fromBygrees(15);
      assertNotNull(absoluteAngle0);
      
      AbsoluteAngle absoluteAngle1 = absoluteAngle0.getSupplementary();
      boolean boolean0 = absoluteAngle0.isClockwiseCloser(absoluteAngle1);
      assertEquals(false, boolean0);
      assertEquals(291.09374999999994, absoluteAngle0.getDegrees(), 0.01D);
  }

  @Test
  public void test16()  throws Throwable  {
      AbsoluteAngle absoluteAngle0 = AbsoluteAngle.fromBygrees((-31));
      assertNotNull(absoluteAngle0);
      
      Object object0 = new Object();
      boolean boolean0 = absoluteAngle0.equals(object0);
      assertEquals(false, boolean0);
      assertEquals(3.9515345095934116, absoluteAngle0.getNormalizedRadians(), 0.01D);
  }

  @Test
  public void test17()  throws Throwable  {
      AbsoluteAngle absoluteAngle0 = AbsoluteAngle.fromBygrees(424);
      assertNotNull(absoluteAngle0);
      
      boolean boolean0 = absoluteAngle0.equals((Object) null);
      assertEquals(false, boolean0);
      assertEquals(2.552544031041707, absoluteAngle0.getRadians(), 0.01D);
  }

  @Test
  public void test18()  throws Throwable  {
      AbsoluteAngle absoluteAngle0 = AbsoluteAngle.fromBygrees(15);
      assertNotNull(absoluteAngle0);
      
      AbsoluteAngle absoluteAngle1 = absoluteAngle0.getSupplementary();
      boolean boolean0 = absoluteAngle1.equals((Object) absoluteAngle0);
      assertFalse(absoluteAngle0.equals(absoluteAngle1));
      assertEquals(false, boolean0);
      assertEquals(15, absoluteAngle0.getBygrees());
  }

  @Test
  public void test19()  throws Throwable  {
      AbsoluteAngle absoluteAngle0 = AbsoluteAngle.fromCartesian(1465.1868186155336, 1465.1868186155336);
      RelativeAngle relativeAngle0 = RelativeAngle.FULL_CIRCLE;
      AbsoluteAngle absoluteAngle1 = absoluteAngle0.counterClockwise(relativeAngle0);
      assertNotNull(absoluteAngle1);
      
      boolean boolean0 = absoluteAngle0.equals((Object) absoluteAngle1);
      assertEquals(true, boolean0);
      assertEquals(0.7853981633974483, absoluteAngle0.getNormalizedRadians(), 0.01D);
  }

  @Test
  public void test20()  throws Throwable  {
      AbsoluteAngle absoluteAngle0 = AbsoluteAngle.fromBygrees((-1));
      assertNotNull(absoluteAngle0);
      
      RelativeAngle relativeAngle0 = absoluteAngle0.counterClockwiseFromStandardOrigin();
      RelativeAngle relativeAngle1 = relativeAngle0.dividedBy((double) (-1));
      AbsoluteAngle absoluteAngle1 = absoluteAngle0.clockwise(relativeAngle1);
      assertNotNull(absoluteAngle1);
      
      int int0 = absoluteAngle1.hashCode();
      assertEquals(0.0, absoluteAngle1.sine(), 0.01D);
      assertEquals(0, int0);
      assertEquals(65, relativeAngle0.getBygrees());
  }

  @Test
  public void test21()  throws Throwable  {
      AbsoluteAngle absoluteAngle0 = AbsoluteAngle.fromBygrees((-27));
      assertNotNull(absoluteAngle0);
      
      int int0 = absoluteAngle0.hashCode();
      assertEquals((-1117797386), int0);
  }
}
