/*
 * This file was automatically generated by EvoSuite
 */

package net.virtualinfinity.atrobots.compiler;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.CharArrayReader;
import java.io.IOException;
import java.io.LineNumberReader;
import java.io.Reader;
import java.io.StringReader;
import net.virtualinfinity.atrobots.compiler.AtRobotLineLexer;
import net.virtualinfinity.atrobots.compiler.LineVisitor;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class AtRobotLineLexerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) stringReader0, 35);
      AtRobotLineLexer atRobotLineLexer0 = new AtRobotLineLexer(lineNumberReader0, (LineVisitor) null);
      int int0 = atRobotLineLexer0.getLineNumber();
      assertEquals(0, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      char[] charArray0 = new char[14];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0, (int) 'l');
      AtRobotLineLexer atRobotLineLexer0 = new AtRobotLineLexer(lineNumberReader0, (LineVisitor) null);
      // Undeclared exception!
      try {
        atRobotLineLexer0.visitAllLines();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
      assertEquals(1, atRobotLineLexer0.getLineNumber());
  }

  @Test
  public void test2()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) stringReader0, 35);
      AtRobotLineLexer atRobotLineLexer0 = new AtRobotLineLexer(lineNumberReader0, (LineVisitor) null);
      atRobotLineLexer0.visitAllLines();
      assertEquals(0, atRobotLineLexer0.getLineNumber());
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = AtRobotLineLexer.parseNumber("0X");
      assertEquals(0, int0);
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = AtRobotLineLexer.parseNumber("-");
      assertEquals(0, int0);
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = AtRobotLineLexer.parseNumber("0X0M^5uo/)gh");
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = AtRobotLineLexer.parseNumber("0x");
      assertEquals(0, int0);
  }
}
