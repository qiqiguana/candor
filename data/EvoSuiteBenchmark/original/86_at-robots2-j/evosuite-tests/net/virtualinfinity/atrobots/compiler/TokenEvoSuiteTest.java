/*
 * This file was automatically generated by EvoSuite
 */

package net.virtualinfinity.atrobots.compiler;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.HashMap;
import java.util.Map;
import net.virtualinfinity.atrobots.compiler.Symbol;
import net.virtualinfinity.atrobots.compiler.Token;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TokenEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Token token0 = Token.parse(0, "!%>2rUV");
      assertNotNull(token0);
      
      HashMap<String, Symbol> hashMap0 = new HashMap<String, Symbol>();
      short short0 = token0.getMicrocode((Map<String, Symbol>) hashMap0);
      assertEquals((short)3, short0);
      assertEquals(0, token0.getLineNumber());
  }

  @Test
  public void test1()  throws Throwable  {
      Token token0 = Token.parse(0, "[3HBn]");
      assertNotNull(token0);
      
      HashMap<String, Symbol> hashMap0 = new HashMap<String, Symbol>();
      short short0 = token0.getMicrocode((Map<String, Symbol>) hashMap0);
      assertEquals(0, token0.getLineNumber());
      assertEquals((short)8, short0);
  }

  @Test
  public void test2()  throws Throwable  {
      Token token0 = Token.parse(0, "[3HBn]");
      assertNotNull(token0);
      
      HashMap<String, Symbol> hashMap0 = new HashMap<String, Symbol>();
      short short0 = token0.getValue((Map<String, Symbol>) hashMap0);
      assertEquals(0, token0.getLineNumber());
      assertEquals("<token>", token0.toString());
      assertEquals((short)0, short0);
  }

  @Test
  public void test3()  throws Throwable  {
      Token token0 = Token.parse((-1), "[3HBn");
      assertNotNull(token0);
      
      HashMap<String, Symbol> hashMap0 = new HashMap<String, Symbol>();
      short short0 = token0.getMicrocode((Map<String, Symbol>) hashMap0);
      assertEquals(-1, token0.getLineNumber());
      assertEquals("[3HBn", token0.toString());
      assertEquals((short)0, short0);
  }

  @Test
  public void test4()  throws Throwable  {
      Token token0 = Token.parse(0, "!%>2rUV");
      assertNotNull(token0);
      
      String string0 = token0.toString();
      assertEquals(0, token0.getLineNumber());
      assertNotNull(string0);
      assertEquals("!%>2rUV", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      Token token0 = Token.parse((-1547), ";v=");
      assertNotNull(token0);
      
      HashMap<String, Symbol> hashMap0 = new HashMap<String, Symbol>();
      Symbol symbol0 = new Symbol((short)0, (short)245, (short)0);
      hashMap0.put(";v=", symbol0);
      short short0 = token0.getValue((Map<String, Symbol>) hashMap0);
      assertEquals(-1547, token0.getLineNumber());
      assertEquals((short)245, short0);
  }

  @Test
  public void test6()  throws Throwable  {
      Token token0 = Token.parse((-1411), "@'I'srQe3nQUo");
      assertNotNull(token0);
      
      String string0 = token0.toString();
      assertEquals("<token>", string0);
      assertEquals(-1411, token0.getLineNumber());
  }

  @Test
  public void test7()  throws Throwable  {
      Token token0 = Token.parse(0, "[3HBn]");
      assertNotNull(token0);
      
      int int0 = token0.getLineNumber();
      assertEquals(0, int0);
      assertEquals("<token>", token0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      Token token0 = Token.parse((-1411), "@'I'srQe3nQUo");
      assertNotNull(token0);
      
      HashMap<String, Symbol> hashMap0 = new HashMap<String, Symbol>();
      boolean boolean0 = token0.isUnresolved((Map<String, Symbol>) hashMap0);
      assertEquals(-1411, token0.getLineNumber());
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      Token token0 = Token.parse((-1411), "@'I'srQe3nQUo");
      assertNotNull(token0);
      
      HashMap<String, Symbol> hashMap0 = new HashMap<String, Symbol>();
      short short0 = token0.getMicrocode((Map<String, Symbol>) hashMap0);
      assertEquals((short)1, short0);
      assertEquals(-1411, token0.getLineNumber());
  }

  @Test
  public void test10()  throws Throwable  {
      Token token0 = Token.parse(0, "-9fm|?W");
      assertNotNull(token0);
      assertEquals("<token>", token0.toString());
      assertEquals(0, token0.getLineNumber());
  }

  @Test
  public void test11()  throws Throwable  {
      Token token0 = Token.parse(0, "-");
      assertEquals("-", token0.toString());
      assertEquals(0, token0.getLineNumber());
      assertNotNull(token0);
  }

  @Test
  public void test12()  throws Throwable  {
      Token token0 = Token.parse(16, "-j=,'fx~7m}/i");
      assertEquals(16, token0.getLineNumber());
      assertEquals("-j=,'fx~7m}/i", token0.toString());
      assertNotNull(token0);
  }

  @Test
  public void test13()  throws Throwable  {
      Token token0 = Token.parse((-1547), ";v=");
      assertNotNull(token0);
      
      HashMap<String, Symbol> hashMap0 = new HashMap<String, Symbol>();
      short short0 = token0.getValue((Map<String, Symbol>) hashMap0);
      assertEquals((short)0, short0);
      assertEquals(";v=", token0.toString());
      assertEquals(-1547, token0.getLineNumber());
  }

  @Test
  public void test14()  throws Throwable  {
      Token token0 = Token.parse((-1547), ";v=");
      assertNotNull(token0);
      
      HashMap<String, Symbol> hashMap0 = new HashMap<String, Symbol>();
      Symbol symbol0 = new Symbol((short)0, (short)245, (short)0);
      hashMap0.put(";v=", symbol0);
      short short0 = token0.getMicrocode((Map<String, Symbol>) hashMap0);
      assertEquals(-1547, token0.getLineNumber());
      assertEquals(";v=", token0.toString());
      assertEquals((short)0, short0);
  }
}
