/*
 * This file was automatically generated by EvoSuite
 */

package net.virtualinfinity.atrobots.gui;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.beans.PropertyChangeListener;
import javax.swing.Icon;
import javax.swing.JCheckBox;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.tree.DefaultTreeCellRenderer;
import net.virtualinfinity.atrobots.gui.BooleanAccessor;
import net.virtualinfinity.atrobots.gui.ToggleProperty;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TogglePropertyEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ToggleProperty toggleProperty0 = new ToggleProperty("P", (BooleanAccessor) null);
      JCheckBox jCheckBox0 = new JCheckBox();
      toggleProperty0.configure(jCheckBox0);
      assertEquals("P", jCheckBox0.getActionCommand());
      assertEquals("P", jCheckBox0.getText());
  }

  @Test
  public void test1()  throws Throwable  {
      ToggleProperty toggleProperty0 = new ToggleProperty((BooleanAccessor) null);
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem();
      JCheckBoxMenuItem jCheckBoxMenuItem1 = toggleProperty0.configure(jCheckBoxMenuItem0);
      // Undeclared exception!
      try {
        jCheckBoxMenuItem1.setSelected(false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Icon icon0 = defaultTreeCellRenderer0.getLeafIcon();
      ToggleProperty toggleProperty0 = new ToggleProperty("hG+RJy5cQcK$dC;", icon0, (BooleanAccessor) null);
      assertEquals(true, toggleProperty0.isEnabled());
  }

  @Test
  public void test3()  throws Throwable  {
      ToggleProperty toggleProperty0 = new ToggleProperty((BooleanAccessor) null);
      toggleProperty0.addPropertyChangeListener((PropertyChangeListener) null);
      assertEquals(true, toggleProperty0.isEnabled());
  }

  @Test
  public void test4()  throws Throwable  {
      ToggleProperty toggleProperty0 = new ToggleProperty((BooleanAccessor) null);
      toggleProperty0.removePropertyChangeListener((PropertyChangeListener) null);
      assertEquals(true, toggleProperty0.isEnabled());
  }

  @Test
  public void test5()  throws Throwable  {
      ToggleProperty toggleProperty0 = new ToggleProperty((BooleanAccessor) null);
      Object[] objectArray0 = toggleProperty0.getKeys();
      assertNull(objectArray0);
  }

  @Test
  public void test6()  throws Throwable  {
      ToggleProperty toggleProperty0 = new ToggleProperty("R", (BooleanAccessor) null);
      PropertyChangeListener[] propertyChangeListenerArray0 = toggleProperty0.getPropertyChangeListeners();
      assertNotNull(propertyChangeListenerArray0);
  }

  @Test
  public void test7()  throws Throwable  {
      ToggleProperty toggleProperty0 = new ToggleProperty((BooleanAccessor) null);
      boolean boolean0 = toggleProperty0.isEnabled();
      assertEquals(true, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      ToggleProperty toggleProperty0 = new ToggleProperty((BooleanAccessor) null);
      toggleProperty0.setEnabled(false);
      assertEquals(false, toggleProperty0.isEnabled());
  }

  @Test
  public void test9()  throws Throwable  {
      ToggleProperty toggleProperty0 = new ToggleProperty("R", (BooleanAccessor) null);
      Object object0 = toggleProperty0.getValue("R");
      assertNull(object0);
  }

  @Test
  public void test10()  throws Throwable  {
      ToggleProperty toggleProperty0 = new ToggleProperty("P", (BooleanAccessor) null);
      toggleProperty0.putValue("P", "mnemonic");
      assertEquals(true, toggleProperty0.isEnabled());
  }
}
