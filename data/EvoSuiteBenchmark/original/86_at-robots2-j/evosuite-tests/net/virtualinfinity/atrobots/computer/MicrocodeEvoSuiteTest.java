/*
 * This file was automatically generated by EvoSuite
 */

package net.virtualinfinity.atrobots.computer;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import net.virtualinfinity.atrobots.computer.Computer;
import net.virtualinfinity.atrobots.computer.DebugInfo;
import net.virtualinfinity.atrobots.computer.Memory;
import net.virtualinfinity.atrobots.computer.Microcode;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MicrocodeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Microcode microcode0 = Microcode.get(0);
      Memory memory0 = new Memory();
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 0, 0, debugInfo0);
      int int0 = microcode0.getAddress(computer0, 0);
      assertEquals(0, int0);
      assertEquals("Constant", microcode0.name());
  }

  @Test
  public void test1()  throws Throwable  {
      Microcode microcode0 = Microcode.Dereference;
      Memory memory0 = new Memory();
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 24, 24, debugInfo0);
      // Undeclared exception!
      try {
        microcode0.getValue(computer0, 24);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      Microcode microcode0 = Microcode.Dereference;
      // Undeclared exception!
      try {
        microcode0.getAddress((Computer) null, 0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      Microcode microcode0 = Microcode.DoubleDereference;
      // Undeclared exception!
      try {
        microcode0.getValue((Computer) null, (-19));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      Microcode microcode0 = Microcode.DoubleDereference;
      // Undeclared exception!
      try {
        microcode0.getAddress((Computer) null, 940);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      Microcode microcode0 = Microcode.NumberedLabel;
      // Undeclared exception!
      try {
        microcode0.getAddress((Computer) null, 1088420552);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      Microcode microcode0 = Microcode.NumberedLabel;
      // Undeclared exception!
      try {
        microcode0.getValue((Computer) null, 0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      Microcode microcode0 = Microcode.ResolvedLabel;
      Memory memory0 = new Memory();
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 325, 325, debugInfo0);
      // Undeclared exception!
      try {
        microcode0.getValue(computer0, 325);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      Microcode microcode0 = Microcode.ResolvedLabel;
      Memory memory0 = new Memory();
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 325, 325, debugInfo0);
      int int0 = microcode0.getAddress(computer0, 325);
      assertEquals(0, int0);
  }

  @Test
  public void test9()  throws Throwable  {
      Microcode microcode0 = Microcode.UnresolvedLabel;
      Memory memory0 = new Memory();
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 18, 18, debugInfo0);
      int int0 = microcode0.getAddress(computer0, 18);
      assertEquals(0, int0);
  }

  @Test
  public void test10()  throws Throwable  {
      Microcode microcode0 = Microcode.UnresolvedLabel;
      Memory memory0 = new Memory();
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 18, 18, debugInfo0);
      // Undeclared exception!
      try {
        microcode0.getValue(computer0, 0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Microcode microcode0 = Microcode.Invalid;
      // Undeclared exception!
      try {
        microcode0.getAddress((Computer) null, 0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      Microcode microcode0 = Microcode.get((-660));
      // Undeclared exception!
      try {
        microcode0.getValue((Computer) null, (-660));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      Microcode microcode0 = Microcode.get((-660));
      boolean boolean0 = microcode0.isValid();
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      Microcode microcode0 = Microcode.UnresolvedLabel;
      boolean boolean0 = microcode0.isValid();
      assertEquals(false, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      Microcode microcode0 = Microcode.get(0);
      boolean boolean0 = microcode0.isValid();
      assertEquals(true, boolean0);
      assertEquals(false, microcode0.isAddressible());
  }

  @Test
  public void test16()  throws Throwable  {
      Microcode microcode0 = Microcode.Dereference;
      boolean boolean0 = microcode0.hasValue();
      assertEquals(true, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      Microcode microcode0 = Microcode.DoubleDereference;
      boolean boolean0 = microcode0.isAddressible();
      assertEquals(true, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      Microcode microcode0 = Microcode.ResolvedLabel;
      boolean boolean0 = microcode0.hasValue();
      assertEquals(false, boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      Microcode microcode0 = Microcode.get(0);
      boolean boolean0 = microcode0.hasValue();
      assertEquals(true, boolean0);
      assertEquals(false, microcode0.isAddressible());
  }
}
