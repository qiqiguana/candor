/*
 * This file was automatically generated by EvoSuite
 */

package net.virtualinfinity.atrobots.debugger;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import net.virtualinfinity.atrobots.computer.Computer;
import net.virtualinfinity.atrobots.computer.DebugInfo;
import net.virtualinfinity.atrobots.computer.Memory;
import net.virtualinfinity.atrobots.debugger.BreakpointHandler;
import net.virtualinfinity.atrobots.debugger.Debugger;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DebuggerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Debugger debugger0 = new Debugger();
      debugger0.pauseAll();
      Memory memory0 = new Memory();
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 14, 14, debugInfo0);
      // Undeclared exception!
      try {
        debugger0.beforeInstruction(computer0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      Debugger debugger0 = new Debugger();
      debugger0.go();
      assertEquals(false, debugger0.hasDefaultEntrant());
  }

  @Test
  public void test2()  throws Throwable  {
      Debugger debugger0 = new Debugger();
      Memory memory0 = new Memory();
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 14, 14, debugInfo0);
      debugger0.pause(14);
      // Undeclared exception!
      try {
        debugger0.beforeInstruction(computer0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      Debugger debugger0 = new Debugger();
      Memory memory0 = new Memory();
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 1599, 1599, debugInfo0);
      debugger0.doPause(computer0);
      // Undeclared exception!
      try {
        debugger0.beforeInstruction(computer0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      Debugger debugger0 = new Debugger();
      debugger0.setBreakpointHandler((BreakpointHandler) null);
      assertEquals(false, debugger0.hasDefaultEntrant());
  }

  @Test
  public void test5()  throws Throwable  {
      Debugger debugger0 = new Debugger();
      debugger0.clearDefaultEntrant();
      assertEquals(false, debugger0.hasDefaultEntrant());
  }

  @Test
  public void test6()  throws Throwable  {
      Debugger debugger0 = new Debugger();
      Memory memory0 = new Memory();
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 14, 14, debugInfo0);
      debugger0.afterInstruction(computer0);
      assertEquals(false, debugger0.hasDefaultEntrant());
  }

  @Test
  public void test7()  throws Throwable  {
      Debugger debugger0 = new Debugger();
      debugger0.setBreakpoint();
      assertEquals(false, debugger0.hasDefaultEntrant());
  }

  @Test
  public void test8()  throws Throwable  {
      Debugger debugger0 = new Debugger();
      debugger0.clearBreakpoint();
      assertEquals(false, debugger0.isAllPaused());
  }

  @Test
  public void test9()  throws Throwable  {
      Debugger debugger0 = new Debugger();
      debugger0.step();
      assertEquals(false, debugger0.isAllPaused());
  }

  @Test
  public void test10()  throws Throwable  {
      Debugger debugger0 = new Debugger();
      Memory memory0 = new Memory();
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 14, 14, debugInfo0);
      debugger0.resetDefaultEntrant();
      debugger0.clearBreakpoint(14);
      // Undeclared exception!
      try {
        debugger0.beforeInstruction(computer0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Debugger debugger0 = new Debugger();
      Memory memory0 = new Memory();
      debugger0.setBreakpoint(1599);
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 1599, 1599, debugInfo0);
      // Undeclared exception!
      try {
        debugger0.beforeInstruction(computer0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      Debugger debugger0 = new Debugger();
      Memory memory0 = new Memory();
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 14, 14, debugInfo0);
      debugger0.doPauseAll();
      boolean boolean0 = debugger0.isPaused(computer0);
      assertEquals(true, debugger0.isAllPaused());
      assertEquals(true, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      Debugger debugger0 = new Debugger();
      Memory memory0 = new Memory();
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 1599, 1599, debugInfo0);
      boolean boolean0 = debugger0.isPaused(computer0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      Debugger debugger0 = new Debugger();
      Memory memory0 = new Memory();
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 1599, 1599, debugInfo0);
      debugger0.doPause(computer0);
      boolean boolean0 = debugger0.isPaused(computer0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      Debugger debugger0 = new Debugger();
      debugger0.pause();
      assertEquals(false, debugger0.hasDefaultEntrant());
  }

  @Test
  public void test16()  throws Throwable  {
      Debugger debugger0 = new Debugger();
      debugger0.setDefaultEntrant(11);
      debugger0.pause();
      assertEquals(true, debugger0.hasDefaultEntrant());
  }
}
