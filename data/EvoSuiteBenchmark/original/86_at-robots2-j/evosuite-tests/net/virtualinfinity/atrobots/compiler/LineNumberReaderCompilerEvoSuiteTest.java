/*
 * This file was automatically generated by EvoSuite
 */

package net.virtualinfinity.atrobots.compiler;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.CharArrayReader;
import java.io.IOException;
import java.io.LineNumberReader;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.StringReader;
import net.virtualinfinity.atrobots.compiler.AtRobotCompilerOutput;
import net.virtualinfinity.atrobots.compiler.LineNumberReaderCompiler;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class LineNumberReaderCompilerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LineNumberReaderCompiler lineNumberReaderCompiler0 = new LineNumberReaderCompiler();
      assertNotNull(lineNumberReaderCompiler0);
      
      StringReader stringReader0 = new StringReader("7]*wB\"r^S{*<Rw&&a");
      PushbackReader pushbackReader0 = new PushbackReader((Reader) stringReader0);
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) pushbackReader0);
      AtRobotCompilerOutput atRobotCompilerOutput0 = lineNumberReaderCompiler0.compile(lineNumberReader0);
      assertEquals(false, atRobotCompilerOutput0.hasErrors());
      assertNotNull(atRobotCompilerOutput0);
  }

  @Test
  public void test1()  throws Throwable  {
      LineNumberReaderCompiler lineNumberReaderCompiler0 = new LineNumberReaderCompiler();
      assertNotNull(lineNumberReaderCompiler0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '!';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      AtRobotCompilerOutput atRobotCompilerOutput0 = lineNumberReaderCompiler0.compile(lineNumberReader0);
      assertEquals(0, atRobotCompilerOutput0.getMaxProcessorSpeed());
      assertNotNull(atRobotCompilerOutput0);
      assertEquals(false, atRobotCompilerOutput0.hasErrors());
  }

  @Test
  public void test2()  throws Throwable  {
      LineNumberReaderCompiler lineNumberReaderCompiler0 = new LineNumberReaderCompiler();
      assertNotNull(lineNumberReaderCompiler0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '*';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader((Reader) charArrayReader0);
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) pushbackReader0);
      AtRobotCompilerOutput atRobotCompilerOutput0 = lineNumberReaderCompiler0.compile(lineNumberReader0);
      assertNotNull(atRobotCompilerOutput0);
      assertEquals(false, atRobotCompilerOutput0.hasErrors());
  }

  @Test
  public void test3()  throws Throwable  {
      LineNumberReaderCompiler lineNumberReaderCompiler0 = new LineNumberReaderCompiler();
      assertNotNull(lineNumberReaderCompiler0);
      
      StringReader stringReader0 = new StringReader("jbe");
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) stringReader0, 1);
      AtRobotCompilerOutput atRobotCompilerOutput0 = lineNumberReaderCompiler0.compile(lineNumberReader0);
      assertEquals(0, atRobotCompilerOutput0.getMaxProcessorSpeed());
      assertEquals(false, atRobotCompilerOutput0.hasErrors());
      assertNotNull(atRobotCompilerOutput0);
  }
}
