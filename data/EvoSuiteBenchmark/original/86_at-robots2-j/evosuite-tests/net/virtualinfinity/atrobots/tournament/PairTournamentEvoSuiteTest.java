/*
 * This file was automatically generated by EvoSuite
 */

package net.virtualinfinity.atrobots.tournament;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import java.util.concurrent.ExecutionException;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import net.virtualinfinity.atrobots.arena.FrameBuilder;
import net.virtualinfinity.atrobots.compiler.HardwareSpecification;
import net.virtualinfinity.atrobots.compiler.RobotFactory;
import net.virtualinfinity.atrobots.computer.DebugInfo;
import net.virtualinfinity.atrobots.computer.Program;
import net.virtualinfinity.atrobots.tournament.PairTournament;
import net.virtualinfinity.atrobots.tournament.PairTournamentResults;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PairTournamentEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      PairTournament pairTournament0 = new PairTournament((-1L));
      assertEquals(25, pairTournament0.getRoundsPerPairing());
  }

  @Test
  public void test1()  throws Throwable  {
      PairTournament pairTournament0 = new PairTournament();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel((Vector) null, (Vector) null);
      TableRowSorter<DefaultTableModel> tableRowSorter0 = new TableRowSorter<DefaultTableModel>(defaultTableModel0);
      List<?> list0 = tableRowSorter0.getSortKeys();
      pairTournament0.setCompetitors(list0);
      PairTournamentResults pairTournamentResults0 = (PairTournamentResults)pairTournament0.call();
      assertEquals(25, pairTournament0.getRoundsPerPairing());
      assertNotNull(pairTournamentResults0);
  }

  @Test
  public void test2()  throws Throwable  {
      PairTournament pairTournament0 = new PairTournament();
      int int0 = pairTournament0.getRoundsPerPairing();
      assertEquals(25, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      PairTournament pairTournament0 = new PairTournament();
      pairTournament0.getCompetitors();
      assertEquals(25, pairTournament0.getRoundsPerPairing());
  }

  @Test
  public void test4()  throws Throwable  {
      PairTournament pairTournament0 = new PairTournament();
      pairTournament0.setRoundsPerPairing((-1496));
      assertEquals(-1496, pairTournament0.getRoundsPerPairing());
  }

  @Test
  public void test5()  throws Throwable  {
      PairTournament pairTournament0 = new PairTournament();
      LinkedList<RobotFactory> linkedList0 = new LinkedList<RobotFactory>();
      short[] shortArray0 = new short[1];
      Program program0 = new Program(shortArray0);
      HardwareSpecification hardwareSpecification0 = new HardwareSpecification((Map<String, Integer>) null);
      DebugInfo debugInfo0 = new DebugInfo();
      RobotFactory robotFactory0 = new RobotFactory("JNZ", program0, hardwareSpecification0, debugInfo0, 0, "JNZ");
      linkedList0.add(robotFactory0);
      pairTournament0.setCompetitors((List<RobotFactory>) linkedList0);
      RobotFactory robotFactory1 = new RobotFactory("m\"", program0, hardwareSpecification0, debugInfo0, (int) (short) (-649), "m\"");
      linkedList0.add(robotFactory1);
      try {
        pairTournament0.call();
        fail("Expecting exception: ExecutionException");
      } catch(ExecutionException e) {
        /*
         * java.lang.NullPointerException
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      PairTournament pairTournament0 = new PairTournament();
      FrameBuilder frameBuilder0 = pairTournament0.getFrameBuffer();
      FrameBuilder frameBuilder1 = pairTournament0.getFrameBuffer();
      assertEquals(25, pairTournament0.getRoundsPerPairing());
      assertSame(frameBuilder1, frameBuilder0);
      assertNotNull(frameBuilder1);
  }
}
