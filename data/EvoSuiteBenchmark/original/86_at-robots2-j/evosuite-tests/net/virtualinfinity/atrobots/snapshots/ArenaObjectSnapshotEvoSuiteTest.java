/*
 * This file was automatically generated by EvoSuite
 */

package net.virtualinfinity.atrobots.snapshots;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import net.virtualinfinity.atrobots.measures.Duration;
import net.virtualinfinity.atrobots.measures.Vector;
import net.virtualinfinity.atrobots.snapshots.MineSnapshot;
import net.virtualinfinity.atrobots.snapshots.MissileSnapshot;
import net.virtualinfinity.atrobots.snapshots.RobotSnapshot;
import net.virtualinfinity.atrobots.snapshots.UnknownSnapshot;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ArenaObjectSnapshotEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      RobotSnapshot robotSnapshot0 = new RobotSnapshot();
      boolean boolean0 = robotSnapshot0.isDead();
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      UnknownSnapshot unknownSnapshot0 = new UnknownSnapshot("hd");
      unknownSnapshot0.setDead(false);
      assertEquals(false, unknownSnapshot0.isDead());
  }

  @Test
  public void test2()  throws Throwable  {
      Duration duration0 = Duration.ZERO_CYCLE;
      MissileSnapshot missileSnapshot0 = new MissileSnapshot(true, duration0);
      missileSnapshot0.setPositionVector((Vector) null);
      assertEquals(false, missileSnapshot0.isDead());
  }

  @Test
  public void test3()  throws Throwable  {
      Duration duration0 = Duration.ZERO_CYCLE;
      MissileSnapshot missileSnapshot0 = new MissileSnapshot(true, duration0);
      missileSnapshot0.setVelocityVector((Vector) null);
      assertEquals(false, missileSnapshot0.isDead());
  }

  @Test
  public void test4()  throws Throwable  {
      RobotSnapshot robotSnapshot0 = new RobotSnapshot();
      // Undeclared exception!
      try {
        robotSnapshot0.getVelocityY();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      MineSnapshot mineSnapshot0 = new MineSnapshot();
      // Undeclared exception!
      try {
        mineSnapshot0.getX();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      RobotSnapshot robotSnapshot0 = new RobotSnapshot();
      // Undeclared exception!
      try {
        robotSnapshot0.getY();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      Duration duration0 = Duration.ZERO_CYCLE;
      MissileSnapshot missileSnapshot0 = new MissileSnapshot(false, duration0);
      // Undeclared exception!
      try {
        missileSnapshot0.getVelocityX();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
