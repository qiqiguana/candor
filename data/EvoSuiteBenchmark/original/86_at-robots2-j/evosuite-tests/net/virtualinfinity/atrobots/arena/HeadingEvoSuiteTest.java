/*
 * This file was automatically generated by EvoSuite
 */

package net.virtualinfinity.atrobots.arena;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import net.virtualinfinity.atrobots.arena.Heading;
import net.virtualinfinity.atrobots.measures.AbsoluteAngle;
import net.virtualinfinity.atrobots.measures.RelativeAngle;
import net.virtualinfinity.atrobots.measures.Vector;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class HeadingEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Heading heading0 = new Heading();
      String string0 = heading0.toString();
      assertEquals("1.9389517158874505r/143", string0);
      assertNotNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      AbsoluteAngle absoluteAngle0 = AbsoluteAngle.fromCartesian((-458.25552644140515), (-458.25552644140515));
      Heading heading0 = new Heading(absoluteAngle0);
      RelativeAngle relativeAngle0 = absoluteAngle0.counterClockwiseFromStandardOrigin();
      heading0.rotate(relativeAngle0);
      assertEquals("1.5707963267948966r/128", heading0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      AbsoluteAngle absoluteAngle0 = AbsoluteAngle.fromCartesian((-458.25552644140515), (-458.25552644140515));
      Heading heading0 = new Heading(absoluteAngle0);
      Vector vector0 = heading0.times(40.74366543152521);
      assertNotNull(vector0);
      assertEquals((-28.810122117027394), vector0.getY(), 0.01D);
  }

  @Test
  public void test3()  throws Throwable  {
      Heading heading0 = new Heading();
      heading0.setRelation(heading0);
      // Undeclared exception!
      try {
        heading0.setAbsolute(false);
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      Heading heading0 = new Heading();
      Heading heading1 = new Heading();
      RelativeAngle relativeAngle0 = RelativeAngle.FULL_CIRCLE;
      RelativeAngle relativeAngle1 = relativeAngle0.normalize();
      heading0.moveToward(heading1, relativeAngle1);
      assertEquals("0.5154175447295755r/85", heading1.toString());
      assertEquals("5.375068680751287r/27", heading0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      AbsoluteAngle absoluteAngle0 = AbsoluteAngle.fromCartesian(0.0, 0.0);
      Heading heading0 = new Heading(absoluteAngle0);
      RelativeAngle relativeAngle0 = RelativeAngle.fromRadians((-1.0));
      RelativeAngle relativeAngle1 = relativeAngle0.dividedBy((-1.0));
      heading0.moveToward(heading0, relativeAngle1);
      assertEquals("0.0r/64", heading0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      Heading heading0 = new Heading();
      RelativeAngle relativeAngle0 = RelativeAngle.FULL_CIRCLE;
      RelativeAngle relativeAngle1 = relativeAngle0.dividedBy((-563.8359956072502));
      heading0.moveToward(heading0, relativeAngle1);
      assertEquals("4.527183079452131r/248", heading0.toString());
  }
}
