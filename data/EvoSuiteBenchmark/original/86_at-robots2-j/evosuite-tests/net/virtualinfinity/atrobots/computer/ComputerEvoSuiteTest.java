/*
 * This file was automatically generated by EvoSuite
 */

package net.virtualinfinity.atrobots.computer;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import net.virtualinfinity.atrobots.computer.AtRobotsCommunicationsQueue;
import net.virtualinfinity.atrobots.computer.Computer;
import net.virtualinfinity.atrobots.computer.ComputerErrorHandler;
import net.virtualinfinity.atrobots.computer.DebugInfo;
import net.virtualinfinity.atrobots.computer.DebugListener;
import net.virtualinfinity.atrobots.computer.EmptyDebugListener;
import net.virtualinfinity.atrobots.computer.Flags;
import net.virtualinfinity.atrobots.computer.HardwareBus;
import net.virtualinfinity.atrobots.computer.Memory;
import net.virtualinfinity.atrobots.computer.MemoryArray;
import net.virtualinfinity.atrobots.computer.MemoryRegion;
import net.virtualinfinity.atrobots.computer.RandomAccessMemoryArray;
import net.virtualinfinity.atrobots.computer.Registers;
import net.virtualinfinity.atrobots.computer.StackMemory;
import net.virtualinfinity.atrobots.measures.Duration;
import net.virtualinfinity.atrobots.ports.InvalidPort;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ComputerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Memory memory0 = new Memory();
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 27, 27, debugInfo0);
      assertNotNull(computer0);
      
      computer0.genericError((short)514);
      assertEquals(27, computer0.getCyclesPerSimCycle());
      assertEquals("ERR 514", computer0.getLastMessage());
  }

  @Test
  public void test1()  throws Throwable  {
      Memory memory0 = new Memory();
      Computer computer0 = new Computer(memory0, 8, 8, (DebugInfo) null);
      assertNotNull(computer0);
      
      // Undeclared exception!
      try {
        computer0.reset();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      Memory memory0 = new Memory();
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 784, (-25), debugInfo0);
      assertNotNull(computer0);
      
      InvalidPort invalidPort0 = (InvalidPort)computer0.createDefaultPortHandler();
      assertEquals(-25, computer0.getCyclesPerSimCycle());
      assertNotNull(invalidPort0);
  }

  @Test
  public void test3()  throws Throwable  {
      Memory memory0 = new Memory();
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 750, 750, debugInfo0);
      assertNotNull(computer0);
      
      // Undeclared exception!
      try {
        computer0.getDoubleDereferencedValue(750);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      Memory memory0 = new Memory();
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 316, 316, debugInfo0);
      assertNotNull(computer0);
      
      Flags flags0 = computer0.getFlags();
      assertNotNull(flags0);
      assertEquals(316, computer0.getCyclesPerSimCycle());
  }

  @Test
  public void test5()  throws Throwable  {
      Memory memory0 = new Memory();
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 784, (-25), debugInfo0);
      assertNotNull(computer0);
      
      computer0.isShutDown();
      assertEquals(-25, computer0.getCyclesPerSimCycle());
  }

  @Test
  public void test6()  throws Throwable  {
      Memory memory0 = new Memory();
      Computer computer0 = new Computer(memory0, 8, 8, (DebugInfo) null);
      assertNotNull(computer0);
      
      computer0.invalidInterruptError((short)1801);
      assertEquals(8, computer0.getCyclesPerSimCycle());
      assertEquals("Invalid Interrupt: 1801", computer0.getLastMessage());
  }

  @Test
  public void test7()  throws Throwable  {
      Memory memory0 = new Memory();
      Computer computer0 = new Computer(memory0, 8, 8, (DebugInfo) null);
      assertNotNull(computer0);
      
      computer0.getCommQueue();
      assertEquals(8, computer0.getCyclesPerSimCycle());
  }

  @Test
  public void test8()  throws Throwable  {
      Memory memory0 = new Memory();
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 316, 316, debugInfo0);
      assertNotNull(computer0);
      
      StackMemory stackMemory0 = computer0.getStack();
      assertEquals(316, computer0.getCyclesPerSimCycle());
      assertNotNull(stackMemory0);
  }

  @Test
  public void test9()  throws Throwable  {
      Memory memory0 = new Memory();
      Computer computer0 = new Computer(memory0, 8, 8, (DebugInfo) null);
      assertNotNull(computer0);
      
      computer0.getLastMessage();
      assertEquals(8, computer0.getCyclesPerSimCycle());
  }

  @Test
  public void test10()  throws Throwable  {
      Memory memory0 = new Memory();
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 0, 0, debugInfo0);
      assertNotNull(computer0);
      
      // Undeclared exception!
      try {
        computer0.readPort();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Memory memory0 = new Memory();
      Computer computer0 = new Computer(memory0, 8, 8, (DebugInfo) null);
      assertNotNull(computer0);
      
      computer0.setCommQueue((AtRobotsCommunicationsQueue) null);
      assertEquals(8, computer0.getCyclesPerSimCycle());
  }

  @Test
  public void test12()  throws Throwable  {
      Memory memory0 = new Memory();
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 9, 9, debugInfo0);
      assertNotNull(computer0);
      
      // Undeclared exception!
      try {
        computer0.popInstructionPointer();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      Memory memory0 = new Memory();
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 25, 25, debugInfo0);
      assertNotNull(computer0);
      
      // Undeclared exception!
      try {
        computer0.callInterrupt();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test14()  throws Throwable  {
      Memory memory0 = new Memory();
      Computer computer0 = new Computer(memory0, 8, 8, (DebugInfo) null);
      assertNotNull(computer0);
      
      EmptyDebugListener emptyDebugListener0 = (EmptyDebugListener)computer0.getDebugListener();
      assertNotNull(emptyDebugListener0);
      
      computer0.setDebugListener((DebugListener) emptyDebugListener0);
      assertEquals(8, computer0.getCyclesPerSimCycle());
  }

  @Test
  public void test15()  throws Throwable  {
      Memory memory0 = new Memory();
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 7, 7, debugInfo0);
      assertNotNull(computer0);
      
      // Undeclared exception!
      try {
        computer0.decrementOperand(7);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test16()  throws Throwable  {
      Memory memory0 = new Memory();
      Computer computer0 = new Computer(memory0, 8, 8, (DebugInfo) null);
      assertNotNull(computer0);
      
      computer0.invalidMicrocodeError();
      assertEquals(8, computer0.getCyclesPerSimCycle());
  }

  @Test
  public void test17()  throws Throwable  {
      Memory memory0 = new Memory();
      RandomAccessMemoryArray randomAccessMemoryArray0 = new RandomAccessMemoryArray(1603);
      DebugInfo debugInfo0 = new DebugInfo();
      memory0.addMemoryArray((MemoryArray) randomAccessMemoryArray0);
      Computer computer0 = new Computer(memory0, 357, 357, debugInfo0);
      assertNotNull(computer0);
      
      computer0.executeInstruction();
      assertEquals(1, computer0.getNextInstructionPointer());
      assertEquals(-1, computer0.getCycles());
  }

  @Test
  public void test18()  throws Throwable  {
      Memory memory0 = new Memory();
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 784, (-25), debugInfo0);
      assertNotNull(computer0);
      
      // Undeclared exception!
      try {
        computer0.incrementOperand((-25));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test19()  throws Throwable  {
      Memory memory0 = new Memory();
      Computer computer0 = new Computer(memory0, 8, 8, (DebugInfo) null);
      assertNotNull(computer0);
      
      computer0.notAddressableError();
      assertEquals(8, computer0.getCyclesPerSimCycle());
  }

  @Test
  public void test20()  throws Throwable  {
      Memory memory0 = new Memory();
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 325, 325, debugInfo0);
      assertNotNull(computer0);
      
      // Undeclared exception!
      try {
        computer0.getLabelValue(325);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test21()  throws Throwable  {
      Memory memory0 = new Memory();
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 316, 316, debugInfo0);
      assertNotNull(computer0);
      
      Memory memory1 = computer0.getMemory();
      assertNotNull(memory1);
      assertEquals(316, computer0.getCyclesPerSimCycle());
  }

  @Test
  public void test22()  throws Throwable  {
      Memory memory0 = new Memory();
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 325, 325, debugInfo0);
      assertNotNull(computer0);
      
      computer0.getName();
      assertEquals(325, computer0.getCyclesPerSimCycle());
  }

  @Test
  public void test23()  throws Throwable  {
      Memory memory0 = new Memory();
      Computer computer0 = new Computer(memory0, 8, 8, (DebugInfo) null);
      assertNotNull(computer0);
      
      computer0.getDebugInfo();
      assertEquals(8, computer0.getCyclesPerSimCycle());
  }

  @Test
  public void test24()  throws Throwable  {
      Memory memory0 = new Memory();
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 325, 325, debugInfo0);
      assertNotNull(computer0);
      
      computer0.setId((int) (short)0);
      assertEquals(325, computer0.getCyclesPerSimCycle());
      assertEquals(0, computer0.getId());
  }

  @Test
  public void test25()  throws Throwable  {
      Memory memory0 = new Memory();
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 325, 325, debugInfo0);
      assertNotNull(computer0);
      
      ComputerErrorHandler computerErrorHandler0 = computer0.getErrorHandler();
      assertNotNull(computerErrorHandler0);
      
      memory0.setErrorHandler(computerErrorHandler0);
      computer0.jumpToLine();
      assertEquals(325, computer0.getCyclesPerSimCycle());
      assertEquals(0, computer0.getNextInstructionPointer());
      assertEquals("OutOfBounds: @1025", computer0.getLastMessage());
  }

  @Test
  public void test26()  throws Throwable  {
      Memory memory0 = new Memory();
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 25, 25, debugInfo0);
      assertNotNull(computer0);
      
      computer0.invalidPortError();
      assertEquals(25, computer0.getCyclesPerSimCycle());
  }

  @Test
  public void test27()  throws Throwable  {
      Memory memory0 = new Memory();
      Computer computer0 = new Computer(memory0, 8, 8, (DebugInfo) null);
      assertNotNull(computer0);
      
      int int0 = computer0.getNextInstructionPointer();
      assertEquals(0, int0);
      assertEquals(8, computer0.getCyclesPerSimCycle());
  }

  @Test
  public void test28()  throws Throwable  {
      Memory memory0 = new Memory();
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 532, 532, debugInfo0);
      assertNotNull(computer0);
      
      // Undeclared exception!
      try {
        computer0.call();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test29()  throws Throwable  {
      Memory memory0 = new Memory();
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 325, 325, debugInfo0);
      assertNotNull(computer0);
      
      computer0.startUp();
      assertEquals(325, computer0.getCyclesPerSimCycle());
      assertEquals(false, computer0.isShutDown());
  }

  @Test
  public void test30()  throws Throwable  {
      Memory memory0 = new Memory();
      Computer computer0 = new Computer(memory0, 8, 8, (DebugInfo) null);
      assertNotNull(computer0);
      
      computer0.unknownInstructionError((short)1801);
      assertEquals(8, computer0.getCyclesPerSimCycle());
      assertEquals("Unknown instruction: 1801", computer0.getLastMessage());
  }

  @Test
  public void test31()  throws Throwable  {
      Memory memory0 = new Memory();
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 316, 316, debugInfo0);
      assertNotNull(computer0);
      
      int int0 = computer0.getInstructionPointer();
      assertEquals(316, computer0.getCyclesPerSimCycle());
      assertEquals(0, int0);
  }

  @Test
  public void test32()  throws Throwable  {
      Memory memory0 = new Memory();
      Computer computer0 = new Computer(memory0, 8, 8, (DebugInfo) null);
      assertNotNull(computer0);
      
      int int0 = computer0.getCycles();
      assertEquals(0, int0);
      assertEquals(8, computer0.getCyclesPerSimCycle());
  }

  @Test
  public void test33()  throws Throwable  {
      Memory memory0 = new Memory();
      Computer computer0 = new Computer(memory0, 953, 953, (DebugInfo) null);
      assertNotNull(computer0);
      
      // Undeclared exception!
      try {
        computer0.getOperandAddress(953);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test34()  throws Throwable  {
      Memory memory0 = new Memory();
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 0, 0, debugInfo0);
      assertNotNull(computer0);
      
      Duration duration0 = Duration.ZERO_CYCLE;
      // Undeclared exception!
      try {
        computer0.update(duration0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test35()  throws Throwable  {
      Memory memory0 = new Memory();
      Computer computer0 = new Computer(memory0, 8, 8, (DebugInfo) null);
      assertNotNull(computer0);
      
      computer0.setName("?sDW=+GAAAG~qrcKi");
      assertEquals(8, computer0.getCyclesPerSimCycle());
  }

  @Test
  public void test36()  throws Throwable  {
      Memory memory0 = new Memory();
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 325, 325, debugInfo0);
      assertNotNull(computer0);
      
      // Undeclared exception!
      try {
        computer0.getNumberedLabelValue((int) (short)0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test37()  throws Throwable  {
      Memory memory0 = new Memory();
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 0, 0, debugInfo0);
      assertNotNull(computer0);
      
      // Undeclared exception!
      try {
        computer0.push();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test38()  throws Throwable  {
      Memory memory0 = new Memory();
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 325, 325, debugInfo0);
      assertNotNull(computer0);
      
      // Undeclared exception!
      try {
        computer0.getUnresolvedLabelValue((int) (short)0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test39()  throws Throwable  {
      Memory memory0 = new Memory();
      Computer computer0 = new Computer(memory0, 8, 8, (DebugInfo) null);
      assertNotNull(computer0);
      
      computer0.divideByZeroError();
      assertEquals(8, computer0.getCyclesPerSimCycle());
  }

  @Test
  public void test40()  throws Throwable  {
      Memory memory0 = new Memory();
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 27, 27, debugInfo0);
      assertNotNull(computer0);
      
      int int0 = computer0.getId();
      assertEquals(0, int0);
      assertEquals(27, computer0.getCyclesPerSimCycle());
  }

  @Test
  public void test41()  throws Throwable  {
      Memory memory0 = new Memory();
      Computer computer0 = new Computer(memory0, 8, 8, (DebugInfo) null);
      assertNotNull(computer0);
      
      Registers registers0 = computer0.getRegisters();
      assertNotNull(registers0);
      assertEquals(8, computer0.getCyclesPerSimCycle());
  }

  @Test
  public void test42()  throws Throwable  {
      Memory memory0 = new Memory();
      Computer computer0 = new Computer(memory0, 8, 8, (DebugInfo) null);
      assertNotNull(computer0);
      
      HardwareBus hardwareBus0 = new HardwareBus();
      computer0.setHardwareBus(hardwareBus0);
      assertEquals(8, computer0.getCyclesPerSimCycle());
  }

  @Test
  public void test43()  throws Throwable  {
      Memory memory0 = new Memory();
      Computer computer0 = new Computer(memory0, 953, 953, (DebugInfo) null);
      assertNotNull(computer0);
      
      MemoryRegion memoryRegion0 = computer0.getCommQueueMemoryRegion();
      assertEquals(953, computer0.getCyclesPerSimCycle());
      assertEquals(-512, memoryRegion0.size());
      assertNotNull(memoryRegion0);
  }

  @Test
  public void test44()  throws Throwable  {
      Memory memory0 = new Memory();
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 0, 0, debugInfo0);
      assertNotNull(computer0);
      
      // Undeclared exception!
      try {
        computer0.writePort();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test45()  throws Throwable  {
      Memory memory0 = new Memory();
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 316, 316, debugInfo0);
      assertNotNull(computer0);
      
      ComputerErrorHandler computerErrorHandler0 = computer0.getErrorHandler();
      assertNotNull(computerErrorHandler0);
      
      memory0.setErrorHandler(computerErrorHandler0);
      computer0.jump();
      assertEquals("Label not found: 0", computer0.getLastMessage());
      assertEquals(316, computer0.getCyclesPerSimCycle());
  }

  @Test
  public void test46()  throws Throwable  {
      Memory memory0 = new Memory();
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 316, 316, debugInfo0);
      assertNotNull(computer0);
      
      Duration duration0 = Duration.ZERO_CYCLE;
      // Undeclared exception!
      try {
        computer0.update(duration0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test47()  throws Throwable  {
      Memory memory0 = new Memory();
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 325, 325, debugInfo0);
      assertNotNull(computer0);
      
      computer0.shutDown();
      Duration duration0 = Duration.ZERO_CYCLE;
      // Undeclared exception!
      try {
        computer0.update(duration0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test48()  throws Throwable  {
      Memory memory0 = new Memory();
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 0, 0, debugInfo0);
      assertNotNull(computer0);
      
      Duration duration0 = Duration.ZERO_CYCLE;
      computer0.shutDown();
      // Undeclared exception!
      try {
        computer0.update(duration0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test49()  throws Throwable  {
      Memory memory0 = new Memory();
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 27, 27, debugInfo0);
      assertNotNull(computer0);
      
      // Undeclared exception!
      try {
        computer0.executeInstruction();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test50()  throws Throwable  {
      Memory memory0 = new Memory();
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 784, (-25), debugInfo0);
      assertNotNull(computer0);
      
      computer0.consumeCycles((-25));
      assertEquals(-25, computer0.getCyclesPerSimCycle());
      assertEquals(0, computer0.getCycles());
  }

  @Test
  public void test51()  throws Throwable  {
      Memory memory0 = new Memory();
      DebugInfo debugInfo0 = new DebugInfo();
      Computer computer0 = new Computer(memory0, 325, 325, debugInfo0);
      assertNotNull(computer0);
      
      ComputerErrorHandler computerErrorHandler0 = computer0.getErrorHandler();
      assertNotNull(computerErrorHandler0);
      
      memory0.setErrorHandler(computerErrorHandler0);
      computer0.pop();
      assertEquals("OutOfBounds: @1027", computer0.getLastMessage());
      assertEquals(325, computer0.getCyclesPerSimCycle());
  }
}
