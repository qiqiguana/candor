/*
 * This file was automatically generated by EvoSuite
 */

package net.virtualinfinity.atrobots.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.AbstractMap;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import net.virtualinfinity.atrobots.util.MapWithDefaultValue;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MapWithDefaultValueEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      HashMap<Map.Entry<Integer, Integer>, Map.Entry<Object, Integer>> hashMap0 = new HashMap<Map.Entry<Integer, Integer>, Map.Entry<Object, Integer>>();
      MapWithDefaultValue<Map.Entry<Integer, Integer>, Map.Entry<Object, Integer>> mapWithDefaultValue0 = new MapWithDefaultValue<Map.Entry<Integer, Integer>, Map.Entry<Object, Integer>>((Map<Map.Entry<Integer, Integer>, Map.Entry<Object, Integer>>) hashMap0, (Map.Entry<Object, Integer>) null);
      boolean boolean0 = mapWithDefaultValue0.isEmpty();
      assertEquals(true, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      HashMap<Map<Integer, Object>, Map<Object, Object>> hashMap0 = new HashMap<Map<Integer, Object>, Map<Object, Object>>();
      MapWithDefaultValue<Map<Integer, Object>, Map<Object, Object>> mapWithDefaultValue0 = new MapWithDefaultValue<Map<Integer, Object>, Map<Object, Object>>((Map<Map<Integer, Object>, Map<Object, Object>>) hashMap0);
      mapWithDefaultValue0.putAll((Map<? extends Map<Integer, Object>, ? extends Map<Object, Object>>) mapWithDefaultValue0);
      assertEquals(true, mapWithDefaultValue0.isEmpty());
  }

  @Test
  public void test2()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Object, String>, MapWithDefaultValue<String, String>> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, String>, MapWithDefaultValue<String, String>>();
      MapWithDefaultValue<AbstractMap.SimpleEntry<Object, String>, MapWithDefaultValue<String, String>> mapWithDefaultValue0 = new MapWithDefaultValue<AbstractMap.SimpleEntry<Object, String>, MapWithDefaultValue<String, String>>((Map<AbstractMap.SimpleEntry<Object, String>, MapWithDefaultValue<String, String>>) hashMap0);
      mapWithDefaultValue0.clear();
      assertEquals(0, mapWithDefaultValue0.size());
  }

  @Test
  public void test3()  throws Throwable  {
      MapWithDefaultValue<AbstractMap.SimpleEntry<Integer, Integer>, String> mapWithDefaultValue0 = new MapWithDefaultValue<AbstractMap.SimpleEntry<Integer, Integer>, String>((Map<AbstractMap.SimpleEntry<Integer, Integer>, String>) null, "");
      mapWithDefaultValue0.setDefaultValue("");
  }

  @Test
  public void test4()  throws Throwable  {
      HashMap<Map.Entry<Integer, Object>, Map<Integer, Object>> hashMap0 = new HashMap<Map.Entry<Integer, Object>, Map<Integer, Object>>();
      MapWithDefaultValue<Map.Entry<Integer, Object>, Map<Integer, Object>> mapWithDefaultValue0 = new MapWithDefaultValue<Map.Entry<Integer, Object>, Map<Integer, Object>>((Map<Map.Entry<Integer, Object>, Map<Integer, Object>>) hashMap0);
      mapWithDefaultValue0.put((Map.Entry<Integer, Object>) null, (Map<Integer, Object>) null);
      assertEquals("{null=null}", hashMap0.toString());
      assertEquals(true, mapWithDefaultValue0.isEmpty());
  }

  @Test
  public void test5()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      MapWithDefaultValue<String, Integer> mapWithDefaultValue0 = new MapWithDefaultValue<String, Integer>((Map<String, Integer>) hashMap0);
      mapWithDefaultValue0.getDefaultValue();
  }

  @Test
  public void test6()  throws Throwable  {
      HashMap<Object, Map<Object, Object>> hashMap0 = new HashMap<Object, Map<Object, Object>>();
      MapWithDefaultValue<Object, Map<Object, Object>> mapWithDefaultValue0 = new MapWithDefaultValue<Object, Map<Object, Object>>((Map<Object, Map<Object, Object>>) hashMap0, (Map<Object, Object>) null);
      MapWithDefaultValue<Object, Map<Object, Object>> mapWithDefaultValue1 = new MapWithDefaultValue<Object, Map<Object, Object>>((Map<Object, Map<Object, Object>>) mapWithDefaultValue0);
      Map<Object, Object> map0 = mapWithDefaultValue1.get((Object) "");
      assertNull(map0);
  }

  @Test
  public void test7()  throws Throwable  {
      MapWithDefaultValue<AbstractMap.SimpleEntry<Integer, Integer>, String> mapWithDefaultValue0 = new MapWithDefaultValue<AbstractMap.SimpleEntry<Integer, Integer>, String>((Map<AbstractMap.SimpleEntry<Integer, Integer>, String>) null, "");
      MapWithDefaultValue<AbstractMap.SimpleEntry<Integer, Integer>, String> mapWithDefaultValue1 = new MapWithDefaultValue<AbstractMap.SimpleEntry<Integer, Integer>, String>((Map<AbstractMap.SimpleEntry<Integer, Integer>, String>) mapWithDefaultValue0, "");
      // Undeclared exception!
      try {
        mapWithDefaultValue1.containsValue((Object) mapWithDefaultValue0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      HashMap<Map.Entry<Integer, Object>, Map<Integer, Object>> hashMap0 = new HashMap<Map.Entry<Integer, Object>, Map<Integer, Object>>();
      MapWithDefaultValue<Map.Entry<Integer, Object>, Map<Integer, Object>> mapWithDefaultValue0 = new MapWithDefaultValue<Map.Entry<Integer, Object>, Map<Integer, Object>>((Map<Map.Entry<Integer, Object>, Map<Integer, Object>>) hashMap0);
      Object object0 = new Object();
      Map<Integer, Object> map0 = mapWithDefaultValue0.remove(object0);
      assertNull(map0);
  }

  @Test
  public void test9()  throws Throwable  {
      HashMap<MapWithDefaultValue<String, Object>, Map.Entry<Object, Object>> hashMap0 = new HashMap<MapWithDefaultValue<String, Object>, Map.Entry<Object, Object>>();
      MapWithDefaultValue<MapWithDefaultValue<String, Object>, Map.Entry<Object, Object>> mapWithDefaultValue0 = new MapWithDefaultValue<MapWithDefaultValue<String, Object>, Map.Entry<Object, Object>>((Map<MapWithDefaultValue<String, Object>, Map.Entry<Object, Object>>) hashMap0);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("?Llrmky@yF,z", "?Llrmky@yF,z");
      boolean boolean0 = mapWithDefaultValue0.equals((Object) abstractMap_SimpleEntry0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      MapWithDefaultValue<String, Integer> mapWithDefaultValue0 = new MapWithDefaultValue<String, Integer>((Map<String, Integer>) hashMap0);
      int int0 = mapWithDefaultValue0.hashCode();
      assertEquals(0, int0);
  }

  @Test
  public void test11()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      MapWithDefaultValue<String, Integer> mapWithDefaultValue0 = new MapWithDefaultValue<String, Integer>((Map<String, Integer>) hashMap0);
      Set<Map.Entry<String, Integer>> set0 = (Set<Map.Entry<String, Integer>>)mapWithDefaultValue0.entrySet();
      assertEquals(true, set0.isEmpty());
  }
}
