/*
 * This file was automatically generated by EvoSuite
 */

package net.virtualinfinity.atrobots.compiler;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.CharArrayReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.LineNumberReader;
import java.io.PipedInputStream;
import java.io.PushbackReader;
import java.io.Reader;
import net.virtualinfinity.atrobots.compiler.AtRobotCompiler;
import net.virtualinfinity.atrobots.compiler.AtRobotCompilerOutput;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class AtRobotCompilerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      AtRobotCompiler atRobotCompiler0 = new AtRobotCompiler();
      File file0 = new File("");
      try {
        atRobotCompiler0.compile(file0);
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
        /*
         *  (No such file or directory)
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      AtRobotCompiler atRobotCompiler0 = new AtRobotCompiler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try {
        atRobotCompiler0.compile((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Pipe not connected
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      AtRobotCompiler atRobotCompiler0 = new AtRobotCompiler();
      char[] charArray0 = new char[9];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader((Reader) charArrayReader0, 17);
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) pushbackReader0);
      AtRobotCompilerOutput atRobotCompilerOutput0 = atRobotCompiler0.compile((Reader) lineNumberReader0);
      assertEquals("", atRobotCompilerOutput0.getMessage());
  }
}
