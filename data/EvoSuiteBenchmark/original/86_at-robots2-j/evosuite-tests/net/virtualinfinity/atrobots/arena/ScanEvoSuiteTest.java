/*
 * This file was automatically generated by EvoSuite
 */

package net.virtualinfinity.atrobots.arena;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import net.virtualinfinity.atrobots.ArenaObjectVisitor;
import net.virtualinfinity.atrobots.ArenaObjectVisitorAdaptor;
import net.virtualinfinity.atrobots.arena.Scan;
import net.virtualinfinity.atrobots.measures.AngleBracket;
import net.virtualinfinity.atrobots.measures.Duration;
import net.virtualinfinity.atrobots.measures.Vector;
import net.virtualinfinity.atrobots.snapshots.ScanSnapshot;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ScanEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      AngleBracket angleBracket0 = AngleBracket.all();
      Scan scan0 = new Scan(angleBracket0, 1.0, true, (Vector) null, true, 663);
      ArenaObjectVisitorAdaptor arenaObjectVisitorAdaptor0 = new ArenaObjectVisitorAdaptor();
      scan0.accept((ArenaObjectVisitor) arenaObjectVisitorAdaptor0);
      assertEquals(false, scan0.isDead());
  }

  @Test
  public void test1()  throws Throwable  {
      AngleBracket angleBracket0 = AngleBracket.all();
      Scan scan0 = new Scan(angleBracket0, 0.0, true, (Vector) null, true, 0);
      ScanSnapshot scanSnapshot0 = (ScanSnapshot)scan0.createSpecificSnapshot();
      assertEquals(true, scanSnapshot0.isSuccessful());
      assertEquals(0.0, scanSnapshot0.getMaxDistance(), 0.01D);
      assertEquals(0, scanSnapshot0.getAccuracy());
      assertNotNull(scanSnapshot0);
      assertEquals(true, scanSnapshot0.isAccuracyAvailable());
  }

  @Test
  public void test2()  throws Throwable  {
      AngleBracket angleBracket0 = AngleBracket.all();
      Scan scan0 = new Scan(angleBracket0, 0.0, true, (Vector) null, true, 0);
      Duration duration0 = Duration.fromCycles(1465);
      scan0.update(duration0);
      scan0.update(duration0);
      scan0.update(duration0);
      assertEquals(true, scan0.isDead());
  }
}
