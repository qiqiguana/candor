/*
 * This file was automatically generated by EvoSuite
 */

package net.virtualinfinity.atrobots.computer;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import net.virtualinfinity.atrobots.computer.ComputerErrorHandler;
import net.virtualinfinity.atrobots.computer.RandomAccessMemoryArray;
import net.virtualinfinity.atrobots.computer.SpecialRegister;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MemoryArrayEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      RandomAccessMemoryArray randomAccessMemoryArray0 = new RandomAccessMemoryArray(1936);
      assertNotNull(randomAccessMemoryArray0);
      
      randomAccessMemoryArray0.getErrorHandler();
      assertEquals(1936, randomAccessMemoryArray0.size());
  }

  @Test
  public void test1()  throws Throwable  {
      RandomAccessMemoryArray randomAccessMemoryArray0 = new RandomAccessMemoryArray(1936);
      assertNotNull(randomAccessMemoryArray0);
      
      int int0 = randomAccessMemoryArray0.size();
      assertEquals(1936, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      RandomAccessMemoryArray randomAccessMemoryArray0 = new RandomAccessMemoryArray(1936);
      assertNotNull(randomAccessMemoryArray0);
      
      randomAccessMemoryArray0.setErrorHandler((ComputerErrorHandler) null);
      assertEquals(1936, randomAccessMemoryArray0.size());
  }

  @Test
  public void test3()  throws Throwable  {
      RandomAccessMemoryArray randomAccessMemoryArray0 = new RandomAccessMemoryArray(1936);
      assertNotNull(randomAccessMemoryArray0);
      
      randomAccessMemoryArray0.get(1);
      assertEquals(1936, randomAccessMemoryArray0.size());
  }

  @Test
  public void test4()  throws Throwable  {
      RandomAccessMemoryArray randomAccessMemoryArray0 = new RandomAccessMemoryArray(1936);
      assertNotNull(randomAccessMemoryArray0);
      
      randomAccessMemoryArray0.addSpecialRegister(1936, (SpecialRegister) null);
      randomAccessMemoryArray0.get((int) (short)0);
      assertEquals(1936, randomAccessMemoryArray0.size());
  }

  @Test
  public void test5()  throws Throwable  {
      RandomAccessMemoryArray randomAccessMemoryArray0 = new RandomAccessMemoryArray(1936);
      assertNotNull(randomAccessMemoryArray0);
      
      randomAccessMemoryArray0.addSpecialRegister(1936, (SpecialRegister) null);
      randomAccessMemoryArray0.addSpecialRegister((int) (short)0, (SpecialRegister) null);
      assertEquals(1936, randomAccessMemoryArray0.size());
  }
}
