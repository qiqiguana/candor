/*
 * This file was automatically generated by EvoSuite
 */

package nu.staldal.lagoon.producer;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import nu.staldal.lagoon.core.LagoonException;
import nu.staldal.lagoon.core.Target;
import nu.staldal.lagoon.producer.BasicSplit;
import org.junit.BeforeClass;
import org.xml.sax.Attributes;
import org.xml.sax.ContentHandler;
import org.xml.sax.Locator;
import org.xml.sax.SAXException;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.helpers.AttributesImpl;
import org.xml.sax.helpers.LocatorImpl;

@RunWith(EvoSuiteRunner.class)
public class BasicSplitEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BasicSplit basicSplit0 = new BasicSplit();
      // Undeclared exception!
      try {
        basicSplit0.run();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      BasicSplit basicSplit0 = new BasicSplit();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      basicSplit0.setDocumentLocator((Locator) locatorImpl0);
      assertEquals(0, basicSplit0.getPosition());
  }

  @Test
  public void test2()  throws Throwable  {
      BasicSplit basicSplit0 = new BasicSplit();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      try {
        basicSplit0.start((ContentHandler) defaultHandler2_0, (Target) null);
        fail("Expecting exception: SAXException");
      } catch(SAXException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      BasicSplit basicSplit0 = new BasicSplit();
      // Undeclared exception!
      try {
        basicSplit0.endDocument();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      BasicSplit basicSplit0 = new BasicSplit();
      // Undeclared exception!
      try {
        basicSplit0.hasBeenUpdated((long) '\u0000');
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      BasicSplit basicSplit0 = new BasicSplit();
      basicSplit0.startDocument();
      assertEquals(0, basicSplit0.getPosition());
  }

  @Test
  public void test6()  throws Throwable  {
      BasicSplit basicSplit0 = new BasicSplit();
      try {
        basicSplit0.init();
        fail("Expecting exception: LagoonException");
      } catch(LagoonException e) {
        /*
         * parameter 'namespace' must be set
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      BasicSplit basicSplit0 = new BasicSplit();
      AttributesImpl attributesImpl0 = new AttributesImpl();
      basicSplit0.startElement("", "", "", (Attributes) attributesImpl0);
      assertNull(basicSplit0.getEntryName());
  }

  @Test
  public void test8()  throws Throwable  {
      BasicSplit basicSplit0 = new BasicSplit();
      basicSplit0.endElement("", "", "");
      assertNull(basicSplit0.getEntryName());
  }

  @Test
  public void test9()  throws Throwable  {
      BasicSplit basicSplit0 = new BasicSplit();
      // Undeclared exception!
      try {
        basicSplit0.startPrefixMapping(")3ECdYM", ")3ECdYM");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      BasicSplit basicSplit0 = new BasicSplit();
      // Undeclared exception!
      try {
        basicSplit0.endPrefixMapping("pbr`!L=y4o4(qS'd(M");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      BasicSplit basicSplit0 = new BasicSplit();
      char[] charArray0 = new char[32];
      basicSplit0.characters(charArray0, 439, (int) '\u0000');
      assertNull(basicSplit0.getEntryName());
  }

  @Test
  public void test12()  throws Throwable  {
      BasicSplit basicSplit0 = new BasicSplit();
      char[] charArray0 = new char[32];
      basicSplit0.ignorableWhitespace(charArray0, 439, 439);
      assertNull(basicSplit0.getEntryName());
  }

  @Test
  public void test13()  throws Throwable  {
      BasicSplit basicSplit0 = new BasicSplit();
      basicSplit0.processingInstruction("", "");
      assertNull(basicSplit0.getEntryName());
  }

  @Test
  public void test14()  throws Throwable  {
      BasicSplit basicSplit0 = new BasicSplit();
      basicSplit0.skippedEntity("");
      assertEquals(0, basicSplit0.getPosition());
  }
}
