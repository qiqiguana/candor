/*
 * This file was automatically generated by EvoSuite
 */

package nu.staldal.ftp;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.UnknownHostException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import nu.staldal.ftp.FTPAuthenticationException;
import nu.staldal.ftp.FTPClient;
import nu.staldal.ftp.FTPException;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class FTPClientEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          FTPClient fTPClient0 = null;
          try {
            fTPClient0 = new FTPClient("f52y:y/SCOR", (-407), "f52y:y/SCOR", "f52y:y/SCOR", "f52y:y/SCOR");
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.net.SocketPermission [f52y:y/SCOR] resolve)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkConnect(SecurityManager.java:1031)
             * java.net.InetAddress.getAllByName0(InetAddress.java:1145)
             * java.net.InetAddress.getAllByName(InetAddress.java:1083)
             * java.net.InetAddress.getAllByName(InetAddress.java:1019)
             * java.net.InetAddress.getByName(InetAddress.java:969)
             * java.net.InetSocketAddress.<init>(InetSocketAddress.java:124)
             * java.net.Socket.<init>(Socket.java:189)
             * nu.staldal.ftp.FTPClient.connect(FTPClient.java:200)
             * nu.staldal.ftp.FTPClient.<init>(FTPClient.java:190)
             * sun.reflect.GeneratedConstructorAccessor40.newInstance(Unknown Source)
             * sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)
             * java.lang.reflect.Constructor.newInstance(Constructor.java:513)
             * org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
      FTPClient fTPClient0 = null;
      try {
        fTPClient0 = new FTPClient("ftp://", "ftp://");
        fail("Expecting exception: MalformedURLException");
      } catch(MalformedURLException e) {
        /*
         * ftp://
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      FTPClient fTPClient0 = null;
      try {
        fTPClient0 = new FTPClient("", "");
        fail("Expecting exception: MalformedURLException");
      } catch(MalformedURLException e) {
        /*
         * 
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      FTPClient fTPClient0 = null;
      try {
        fTPClient0 = new FTPClient("ftp://.iN|z@/+x)S v_", "ftp://.iN|z@/+x)S v_");
        fail("Expecting exception: MalformedURLException");
      } catch(MalformedURLException e) {
        /*
         * ftp://.iN|z@/+x)S v_
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      FTPClient fTPClient0 = null;
      try {
        fTPClient0 = new FTPClient("ftp://|@pDq=:3/#L&6", "ftp://|@pDq=:3/#L&6");
        fail("Expecting exception: MalformedURLException");
      } catch(MalformedURLException e) {
        /*
         * ftp://|@pDq=:3/#L&6
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      FTPClient fTPClient0 = null;
      try {
        fTPClient0 = new FTPClient("ftp://@pDq3/P", "ftp://@pDq3/P");
        fail("Expecting exception: MalformedURLException");
      } catch(MalformedURLException e) {
        /*
         * ftp://@pDq3/P
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      FTPClient fTPClient0 = null;
      try {
        fTPClient0 = new FTPClient("ftp://|@*p=Qq3/", "ftp://|@*p=Qq3/");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid host wildcard specification
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          FTPClient fTPClient0 = null;
          try {
            fTPClient0 = new FTPClient("ftp://|T~Y3@p=/3/", "ftp://|T~Y3@p=/3/");
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.net.SocketPermission p= resolve)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkConnect(SecurityManager.java:1031)
             * java.net.InetAddress.getAllByName0(InetAddress.java:1145)
             * java.net.InetAddress.getAllByName(InetAddress.java:1083)
             * java.net.InetAddress.getAllByName(InetAddress.java:1019)
             * java.net.InetAddress.getByName(InetAddress.java:969)
             * java.net.InetSocketAddress.<init>(InetSocketAddress.java:124)
             * java.net.Socket.<init>(Socket.java:189)
             * nu.staldal.ftp.FTPClient.connect(FTPClient.java:200)
             * nu.staldal.ftp.FTPClient.<init>(FTPClient.java:167)
             * sun.reflect.GeneratedConstructorAccessor41.newInstance(Unknown Source)
             * sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)
             * java.lang.reflect.Constructor.newInstance(Constructor.java:513)
             * org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test8()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          FTPClient fTPClient0 = null;
          try {
            fTPClient0 = new FTPClient("ftp://US-ASCII", 65573, "ftp://US-ASCII", "ftp://US-ASCII", "ftp://US-ASCII");
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.net.SocketPermission [ftp://US-ASCII] resolve)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkConnect(SecurityManager.java:1031)
             * java.net.InetAddress.getAllByName0(InetAddress.java:1145)
             * java.net.InetAddress.getAllByName(InetAddress.java:1083)
             * java.net.InetAddress.getAllByName(InetAddress.java:1019)
             * java.net.InetAddress.getByName(InetAddress.java:969)
             * java.net.InetSocketAddress.<init>(InetSocketAddress.java:124)
             * java.net.Socket.<init>(Socket.java:189)
             * nu.staldal.ftp.FTPClient.connect(FTPClient.java:200)
             * nu.staldal.ftp.FTPClient.<init>(FTPClient.java:190)
             * sun.reflect.GeneratedConstructorAccessor40.newInstance(Unknown Source)
             * sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)
             * java.lang.reflect.Constructor.newInstance(Constructor.java:513)
             * org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
