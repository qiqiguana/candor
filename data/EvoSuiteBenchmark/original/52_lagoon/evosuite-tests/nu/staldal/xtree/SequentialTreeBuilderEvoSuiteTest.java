/*
 * This file was automatically generated by EvoSuite
 */

package nu.staldal.xtree;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.net.MalformedURLException;
import java.net.URL;
import nu.staldal.xtree.ElementHandler;
import nu.staldal.xtree.SequentialTreeBuilder;
import org.junit.BeforeClass;
import org.xml.sax.Attributes;
import org.xml.sax.Locator;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;
import org.xml.sax.ext.Attributes2Impl;
import org.xml.sax.ext.Locator2Impl;

@RunWith(EvoSuiteRunner.class)
public class SequentialTreeBuilderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      URL uRL0 = new URL("http:/www.w.org/XMt/1998/names/ace");
      SequentialTreeBuilder sequentialTreeBuilder0 = new SequentialTreeBuilder((ElementHandler) null, uRL0);
      sequentialTreeBuilder0.warning((SAXParseException) null);
  }

  @Test
  public void test1()  throws Throwable  {
      SequentialTreeBuilder sequentialTreeBuilder0 = new SequentialTreeBuilder((ElementHandler) null);
      sequentialTreeBuilder0.startDocument();
  }

  @Test
  public void test2()  throws Throwable  {
      SequentialTreeBuilder sequentialTreeBuilder0 = new SequentialTreeBuilder((ElementHandler) null);
      sequentialTreeBuilder0.endDocument();
  }

  @Test
  public void test3()  throws Throwable  {
      URL uRL0 = new URL("http:/www.w.org/XMt/1998/names/ace");
      SequentialTreeBuilder sequentialTreeBuilder0 = new SequentialTreeBuilder((ElementHandler) null, uRL0);
      // Undeclared exception!
      try {
        sequentialTreeBuilder0.fatalError((SAXParseException) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      SequentialTreeBuilder sequentialTreeBuilder0 = new SequentialTreeBuilder((ElementHandler) null);
      // Undeclared exception!
      try {
        sequentialTreeBuilder0.error((SAXParseException) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      URL uRL0 = new URL("http:/www.w.org/XMt/1998/names/ace");
      SequentialTreeBuilder sequentialTreeBuilder0 = new SequentialTreeBuilder((ElementHandler) null, uRL0);
      sequentialTreeBuilder0.endPrefixMapping("http://www.w3.org/XML/1998/namespace");
  }

  @Test
  public void test6()  throws Throwable  {
      SequentialTreeBuilder sequentialTreeBuilder0 = new SequentialTreeBuilder((ElementHandler) null);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      sequentialTreeBuilder0.setDocumentLocator((Locator) locator2Impl0);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      sequentialTreeBuilder0.startElement("'Y8h3!F9>Y%T*", "'Y8h3!F9>Y%T*", "'Y8h3!F9>Y%T*", (Attributes) attributes2Impl0);
      assertEquals(0, attributes2Impl0.getLength());
  }

  @Test
  public void test7()  throws Throwable  {
      SequentialTreeBuilder sequentialTreeBuilder0 = new SequentialTreeBuilder((ElementHandler) null);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      sequentialTreeBuilder0.startElement("Xs", "Xs", "Xs", (Attributes) attributes2Impl0);
      sequentialTreeBuilder0.startElement("Xs", "Xs", "Xs", (Attributes) attributes2Impl0);
      // Undeclared exception!
      try {
        sequentialTreeBuilder0.endElement("Xs", "Xs", "Xs");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      URL uRL0 = new URL("http:/www.w.org/XMt/1998/names/ace");
      SequentialTreeBuilder sequentialTreeBuilder0 = new SequentialTreeBuilder((ElementHandler) null, uRL0);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      sequentialTreeBuilder0.startElement("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/XML/1998/namespace", "http://www.w3.org/XML/1998/namespace", (Attributes) attributes2Impl0);
      sequentialTreeBuilder0.startPrefixMapping("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/XML/1998/namespace");
  }

  @Test
  public void test9()  throws Throwable  {
      SequentialTreeBuilder sequentialTreeBuilder0 = new SequentialTreeBuilder((ElementHandler) null);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      attributes2Impl0.addAttribute("'Y8h3!F9>Y%T*", "'Y8h3!F9>Y%T*", "'Y8h3!F9>Y%T*", "'Y8h3!F9>Y%T*", "'Y8h3!F9>Y%T*");
      sequentialTreeBuilder0.startElement("'Y8h3!F9>Y%T*", "'Y8h3!F9>Y%T*", "'Y8h3!F9>Y%T*", (Attributes) attributes2Impl0);
      assertEquals(1, attributes2Impl0.getLength());
  }

  @Test
  public void test10()  throws Throwable  {
      URL uRL0 = new URL("http:/www.w.org/XMt/1998/names/ace");
      SequentialTreeBuilder sequentialTreeBuilder0 = new SequentialTreeBuilder((ElementHandler) null, uRL0);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      attributes2Impl0.addAttribute("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/XML/1998/namespace", "http://www.w3.org/XML/1998/namespace", "http://www.w3.org/XML/1998/namespace", "http://www.w3.org/XML/1998/namespace");
      sequentialTreeBuilder0.startElement("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/XML/1998/namespace", "http://www.w3.org/XML/1998/namespace", (Attributes) attributes2Impl0);
      assertEquals(1, attributes2Impl0.getLength());
  }

  @Test
  public void test11()  throws Throwable  {
      URL uRL0 = new URL("http:/www.w.org/XMt/1998/names/ace");
      SequentialTreeBuilder sequentialTreeBuilder0 = new SequentialTreeBuilder((ElementHandler) null, uRL0);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      attributes2Impl0.addAttribute("http://www.w3.org/XML/1998/namespace", "base", "http://www.w3.org/XML/1998/namespace", "base", "http://www.w3.org/XML/1998/namespace");
      sequentialTreeBuilder0.startElement("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/XML/1998/namespace", "http://www.w3.org/XML/1998/namespace", (Attributes) attributes2Impl0);
      assertEquals(1, attributes2Impl0.getLength());
  }

  @Test
  public void test12()  throws Throwable  {
      SequentialTreeBuilder sequentialTreeBuilder0 = new SequentialTreeBuilder((ElementHandler) null);
      sequentialTreeBuilder0.startPrefixMapping("'Y8h3!F9>Y%T*", "'Y8h3!F9>Y%T*");
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      // Undeclared exception!
      try {
        sequentialTreeBuilder0.startElement("'Y8h3!F9>Y%T*", "'Y8h3!F9>Y%T*", "'Y8h3!F9>Y%T*", (Attributes) attributes2Impl0);
        fail("Expecting exception: NoSuchMethodError");
      } catch(NoSuchMethodError e) {
        /*
         * nu.staldal.xtree.Element.setNamespaceMappings(Ljava/util/Vector;Ljava/util/Vector;)V
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      URL uRL0 = new URL("http:/www.w.org/XMt/1998/names/ace");
      SequentialTreeBuilder sequentialTreeBuilder0 = new SequentialTreeBuilder((ElementHandler) null, uRL0);
      sequentialTreeBuilder0.endElement("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/XML/1998/namespace", "http://www.w3.org/XML/1998/namespace");
  }

  @Test
  public void test14()  throws Throwable  {
      SequentialTreeBuilder sequentialTreeBuilder0 = new SequentialTreeBuilder((ElementHandler) null);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      sequentialTreeBuilder0.startElement("Xs", "Xs", "Xs", (Attributes) attributes2Impl0);
      sequentialTreeBuilder0.startElement("Xs", "Xs", "Xs", (Attributes) attributes2Impl0);
      sequentialTreeBuilder0.startElement("Xs", "Xs", "Xs", (Attributes) attributes2Impl0);
      sequentialTreeBuilder0.endElement("Xs", "Xs", "Xs");
  }

  @Test
  public void test15()  throws Throwable  {
      SequentialTreeBuilder sequentialTreeBuilder0 = new SequentialTreeBuilder((ElementHandler) null);
      sequentialTreeBuilder0.startPrefixMapping("'Y8h3!F9>Y%T*", "'Y8h3!F9>Y%T*");
      sequentialTreeBuilder0.startPrefixMapping("'Y8h3!F9>Y%T*", "'Y8h3!F9>Y%T*");
  }

  @Test
  public void test16()  throws Throwable  {
      SequentialTreeBuilder sequentialTreeBuilder0 = new SequentialTreeBuilder((ElementHandler) null);
      char[] charArray0 = new char[31];
      sequentialTreeBuilder0.characters(charArray0, (int) '\u0000', (int) '\u0000');
  }

  @Test
  public void test17()  throws Throwable  {
      SequentialTreeBuilder sequentialTreeBuilder0 = new SequentialTreeBuilder((ElementHandler) null);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      sequentialTreeBuilder0.startElement("Xs", "Xs", "Xs", (Attributes) attributes2Impl0);
      sequentialTreeBuilder0.startElement("Xs", "Xs", "Xs", (Attributes) attributes2Impl0);
      char[] charArray0 = new char[4];
      sequentialTreeBuilder0.characters(charArray0, 0, 0);
  }

  @Test
  public void test18()  throws Throwable  {
      SequentialTreeBuilder sequentialTreeBuilder0 = new SequentialTreeBuilder((ElementHandler) null);
      char[] charArray0 = new char[31];
      sequentialTreeBuilder0.ignorableWhitespace(charArray0, 283, 283);
  }

  @Test
  public void test19()  throws Throwable  {
      SequentialTreeBuilder sequentialTreeBuilder0 = new SequentialTreeBuilder((ElementHandler) null);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      sequentialTreeBuilder0.startElement("Xs", "Xs", "Xs", (Attributes) attributes2Impl0);
      sequentialTreeBuilder0.startElement("Xs", "Xs", "Xs", (Attributes) attributes2Impl0);
      char[] charArray0 = new char[4];
      sequentialTreeBuilder0.ignorableWhitespace(charArray0, (int) '\u0000', (int) '_');
  }

  @Test
  public void test20()  throws Throwable  {
      SequentialTreeBuilder sequentialTreeBuilder0 = new SequentialTreeBuilder((ElementHandler) null);
      sequentialTreeBuilder0.processingInstruction("Xs", "Xs");
  }

  @Test
  public void test21()  throws Throwable  {
      SequentialTreeBuilder sequentialTreeBuilder0 = new SequentialTreeBuilder((ElementHandler) null);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      sequentialTreeBuilder0.startElement("Xs", "Xs", "Xs", (Attributes) attributes2Impl0);
      sequentialTreeBuilder0.startElement("Xs", "Xs", "Xs", (Attributes) attributes2Impl0);
      sequentialTreeBuilder0.processingInstruction("Xs", "Xs");
  }

  @Test
  public void test22()  throws Throwable  {
      SequentialTreeBuilder sequentialTreeBuilder0 = new SequentialTreeBuilder((ElementHandler) null);
      sequentialTreeBuilder0.skippedEntity("'Y8h3!F9>Y%T*");
  }

  @Test
  public void test23()  throws Throwable  {
      SequentialTreeBuilder sequentialTreeBuilder0 = new SequentialTreeBuilder((ElementHandler) null);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      sequentialTreeBuilder0.startElement("Xs", "Xs", "Xs", (Attributes) attributes2Impl0);
      sequentialTreeBuilder0.startElement("Xs", "Xs", "Xs", (Attributes) attributes2Impl0);
      sequentialTreeBuilder0.skippedEntity((String) null);
  }
}
