/*
 * This file was automatically generated by EvoSuite
 */

package it.pdfsam.console.tools.pdf;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lowagie.text.ChapterAutoNumber;
import com.lowagie.text.Paragraph;
import com.lowagie.text.Phrase;
import it.pdfsam.console.MainConsole;
import it.pdfsam.console.exception.ConcatException;
import it.pdfsam.console.tools.pdf.PdfConcat;
import java.io.File;
import java.util.Collection;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.swing.table.DefaultTableModel;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.pdfsam.console.business.dto.commands.RotateParsedCommand;

@RunWith(EvoSuiteRunner.class)
public class PdfConcatEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      ChapterAutoNumber chapterAutoNumber0 = new ChapterAutoNumber("");
      Paragraph paragraph0 = chapterAutoNumber0.getBookmarkTitle();
      File file0 = new File("");
      MainConsole mainConsole0 = new MainConsole();
      PdfConcat pdfConcat0 = new PdfConcat((Collection) paragraph0, file0, "", false, true, mainConsole0);
      try {
        pdfConcat0.doConcat();
        fail("Expecting exception: ConcatException");
      } catch(ConcatException e) {
        /*
         * java.io.IOException: 0.  not found as file or resource.
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      Vector<Object> vector0 = defaultTableModel0.getDataVector();
      RotateParsedCommand rotateParsedCommand0 = new RotateParsedCommand();
      File file0 = rotateParsedCommand0.getOutputFile();
      PdfConcat pdfConcat0 = new PdfConcat((Collection) vector0, file0, (String) null, false, (MainConsole) null);
      assertEquals("", pdfConcat0.getOutHTMLMessage());
  }

  @Test
  public void test2()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      Vector<Object> vector0 = defaultTableModel0.getDataVector();
      File file0 = new File((File) null, "Cp1257");
      PdfConcat pdfConcat0 = new PdfConcat((Collection) vector0, file0, "Cp1257", false, (MainConsole) null);
      try {
        pdfConcat0.execute();
        fail("Expecting exception: ConcatException");
      } catch(ConcatException e) {
        /*
         * java.lang.NullPointerException
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          Phrase phrase0 = Phrase.getInstance("Ok}Z:Qlp/n ");
          File file0 = new File("Ok}Z:Qlp/n ", "Ok}Z:Qlp/n ");
          MainConsole mainConsole0 = new MainConsole();
          PdfConcat pdfConcat0 = new PdfConcat((Collection) phrase0, file0, "Ok}Z:Qlp/n ", true, mainConsole0);
          try {
            pdfConcat0.doConcat();
            fail("Expecting exception: ConcatException");
          } catch(ConcatException e) {
            /*
             * ValidationError: Syntax error on ok}z. Unable to delete temporary file.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
