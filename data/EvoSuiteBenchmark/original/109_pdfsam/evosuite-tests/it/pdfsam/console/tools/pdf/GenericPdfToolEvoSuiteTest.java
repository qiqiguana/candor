/*
 * This file was automatically generated by EvoSuite
 */

package it.pdfsam.console.tools.pdf;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lowagie.text.ChapterAutoNumber;
import com.lowagie.text.ZapfDingbatsList;
import it.pdfsam.console.MainConsole;
import it.pdfsam.console.exception.ConcatException;
import it.pdfsam.console.exception.ConsoleException;
import it.pdfsam.console.exception.SplitException;
import it.pdfsam.console.tools.pdf.PdfConcat;
import it.pdfsam.console.tools.pdf.PdfSplit;
import java.io.File;
import java.util.ArrayList;
import java.util.Collection;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class GenericPdfToolEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      MainConsole mainConsole0 = new MainConsole();
      PdfSplit pdfSplit0 = new PdfSplit((File) null, (File) null, "", "", "", false, mainConsole0);
      String string0 = pdfSplit0.getOutMessage();
      assertEquals("", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      MainConsole mainConsole0 = new MainConsole();
      PdfSplit pdfSplit0 = new PdfSplit((File) null, (File) null, "", "", "", false, mainConsole0);
      String string0 = pdfSplit0.getOutHTMLMessage();
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      PdfSplit pdfSplit0 = new PdfSplit((File) null, (File) null, "", "", "", (MainConsole) null);
      pdfSplit0.workingIndeterminate();
      assertEquals("", pdfSplit0.getOutMessage());
  }

  @Test
  public void test3()  throws Throwable  {
      MainConsole mainConsole0 = new MainConsole();
      PdfSplit pdfSplit0 = new PdfSplit((File) null, (File) null, "Applying pages rotation.", "Applying pages rotation.", "Applying pages rotation.", true, true, mainConsole0);
      pdfSplit0.workingIndeterminate();
      assertEquals("", pdfSplit0.getOutHTMLMessage());
  }

  @Test
  public void test4()  throws Throwable  {
      ChapterAutoNumber chapterAutoNumber0 = new ChapterAutoNumber("");
      PdfConcat pdfConcat0 = new PdfConcat((Collection) chapterAutoNumber0, (File) null, "", false, true, (MainConsole) null);
      pdfConcat0.workCompleted();
      assertEquals("", pdfConcat0.getOutHTMLMessage());
  }

  @Test
  public void test5()  throws Throwable  {
      MainConsole mainConsole0 = new MainConsole();
      PdfSplit pdfSplit0 = new PdfSplit((File) null, (File) null, "ParentTree", "ParentTree", "L:Ftdxd", true, mainConsole0);
      try {
        pdfSplit0.execute();
        fail("Expecting exception: SplitException");
      } catch(SplitException e) {
        /*
         * java.lang.NullPointerException
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      PdfSplit pdfSplit0 = new PdfSplit((File) null, (File) null, "", "", "", true, false, (MainConsole) null);
      pdfSplit0.percentageChanged(182);
      assertEquals("", pdfSplit0.getOutMessage());
  }

  @Test
  public void test7()  throws Throwable  {
      PdfSplit pdfSplit0 = new PdfSplit((File) null, (File) null, "", "", "", true, false, (MainConsole) null);
      pdfSplit0.percentageChanged(182, 121);
      assertEquals("", pdfSplit0.getOutMessage());
  }

  @Test
  public void test8()  throws Throwable  {
      ZapfDingbatsList zapfDingbatsList0 = new ZapfDingbatsList(1473);
      ArrayList<Object> arrayList0 = zapfDingbatsList0.getChunks();
      MainConsole mainConsole0 = new MainConsole();
      PdfConcat pdfConcat0 = new PdfConcat((Collection) arrayList0, (File) null, "org.bouncycastle.jce.provider.JCEMac$RIPEMD160", false, mainConsole0);
      try {
        pdfConcat0.execute();
        fail("Expecting exception: ConcatException");
      } catch(ConcatException e) {
        /*
         * java.lang.NullPointerException
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      PdfSplit pdfSplit0 = new PdfSplit((File) null, (File) null, "", "", "", true, false, (MainConsole) null);
      pdfSplit0.renameTemporaryFile((File) null, (File) null, true);
      assertEquals("[02/07/13 18:14:49] Exception renaming temporary file, source or destination are null.<br>", pdfSplit0.getOutHTMLMessage());
  }

  @Test
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          File file0 = new File("T)l!A#9D");
          MainConsole mainConsole0 = new MainConsole();
          PdfSplit pdfSplit0 = new PdfSplit(file0, file0, "T)l!A#9D", (String) null, (String) null, true, mainConsole0);
          pdfSplit0.renameTemporaryFile(file0, file0, true);
          assertEquals("[02/07/13 18:14:49] Exception renaming T)l!A#9D to T)l!A#9D: Security manager blocks (java.io.FilePermission T)l!A#9D write)<br>java.lang.Thread.getStackTrace(Thread.java:1479)<br>org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)<br>java.lang.SecurityManager.checkWrite(SecurityManager.java:962)<br>java.io.File.renameTo(File.java:1225)<br>it.pdfsam.console.tools.pdf.GenericPdfTool.renameTemporaryFile(GenericPdfTool.java:127)<br>sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br>sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)<br>sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)<br>java.lang.reflect.Method.invoke(Method.java:597)<br>org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)<br>org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)<br>org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)<br>org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)<br>org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)<br>java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)<br>java.util.concurrent.FutureTask.run(FutureTask.java:138)<br>java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)<br>java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)<br>java.lang.Thread.run(Thread.java:662)<br>.<br>", pdfSplit0.getOutHTMLMessage());
          assertEquals("[02/07/13 18:14:49] Exception renaming T)l!A#9D to T)l!A#9D: Security manager blocks (java.io.FilePermission T)l!A#9D write)\njava.lang.Thread.getStackTrace(Thread.java:1479)\norg.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)\njava.lang.SecurityManager.checkWrite(SecurityManager.java:962)\njava.io.File.renameTo(File.java:1225)\nit.pdfsam.console.tools.pdf.GenericPdfTool.renameTemporaryFile(GenericPdfTool.java:127)\nsun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\njava.lang.reflect.Method.invoke(Method.java:597)\norg.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)\norg.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)\norg.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)\norg.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)\norg.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)\njava.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)\njava.util.concurrent.FutureTask.run(FutureTask.java:138)\njava.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)\njava.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)\njava.lang.Thread.run(Thread.java:662)\n.\n", pdfSplit0.getOutMessage());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
