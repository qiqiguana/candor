/*
 * This file was automatically generated by EvoSuite
 */

package it.pdfsam.console.tools;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import it.pdfsam.console.exception.ParseException;
import it.pdfsam.console.tools.CmdParser;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class CmdParserEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      String[] stringArray0 = new String[1];
      CmdParser cmdParser0 = new CmdParser(stringArray0);
      assertNotNull(cmdParser0);
      
      boolean boolean0 = cmdParser0.isCompressed();
      assertEquals(false, cmdParser0.isCCopyFields());
      assertEquals(false, cmdParser0.isOverwrite());
      assertEquals(0, cmdParser0.getInputCommand());
      assertEquals(false, boolean0);
      assertEquals(0, cmdParser0.getInputOption());
  }

  @Test
  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[1];
      CmdParser cmdParser0 = new CmdParser(stringArray0);
      assertNotNull(cmdParser0);
      
      cmdParser0.getOValue();
      assertEquals(0, cmdParser0.getInputCommand());
      assertEquals(0, cmdParser0.getInputOption());
      assertEquals(false, cmdParser0.isCCopyFields());
      assertEquals(false, cmdParser0.isOverwrite());
      assertEquals(false, cmdParser0.isCompressed());
  }

  @Test
  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[1];
      CmdParser cmdParser0 = new CmdParser(stringArray0);
      assertNotNull(cmdParser0);
      
      cmdParser0.getSFValue();
      assertEquals(false, cmdParser0.isCompressed());
      assertEquals(0, cmdParser0.getInputOption());
      assertEquals(0, cmdParser0.getInputCommand());
      assertEquals(false, cmdParser0.isCCopyFields());
      assertEquals(false, cmdParser0.isOverwrite());
      assertEquals(false, cmdParser0.COverwrite());
  }

  @Test
  public void test3()  throws Throwable  {
      String[] stringArray0 = new String[8];
      CmdParser cmdParser0 = new CmdParser(stringArray0);
      assertNotNull(cmdParser0);
      
      String string0 = cmdParser0.getSNumberPageValue();
      assertEquals(0, cmdParser0.getInputCommand());
      assertNull(string0);
      assertEquals(false, cmdParser0.isCompressed());
      assertEquals(false, cmdParser0.isCCopyFields());
      assertEquals(false, cmdParser0.COverwrite());
      assertEquals(0, cmdParser0.getInputOption());
  }

  @Test
  public void test4()  throws Throwable  {
      String[] stringArray0 = new String[1];
      CmdParser cmdParser0 = new CmdParser(stringArray0);
      assertNotNull(cmdParser0);
      
      byte byte0 = cmdParser0.getInputOption();
      assertEquals(false, cmdParser0.isCCopyFields());
      assertEquals(false, cmdParser0.isCompressed());
      assertEquals(false, cmdParser0.COverwrite());
      assertEquals(0, cmdParser0.getInputCommand());
      assertEquals((byte)0, byte0);
  }

  @Test
  public void test5()  throws Throwable  {
      String[] stringArray0 = new String[8];
      CmdParser cmdParser0 = new CmdParser(stringArray0);
      assertNotNull(cmdParser0);
      
      boolean boolean0 = cmdParser0.isCCopyFields();
      assertEquals(0, cmdParser0.getInputCommand());
      assertEquals(false, cmdParser0.isCompressed());
      assertEquals(false, boolean0);
      assertEquals(0, cmdParser0.getInputOption());
      assertEquals(false, cmdParser0.isOverwrite());
  }

  @Test
  public void test6()  throws Throwable  {
      String[] stringArray0 = new String[8];
      CmdParser cmdParser0 = new CmdParser(stringArray0);
      assertNotNull(cmdParser0);
      
      byte byte0 = cmdParser0.getInputCommand();
      assertEquals((byte)0, byte0);
      assertEquals(false, cmdParser0.isCCopyFields());
      assertEquals(false, cmdParser0.isOverwrite());
      assertEquals(0, cmdParser0.getInputOption());
      assertEquals(false, cmdParser0.isCompressed());
  }

  @Test
  public void test7()  throws Throwable  {
      String[] stringArray0 = new String[1];
      CmdParser cmdParser0 = new CmdParser(stringArray0);
      assertNotNull(cmdParser0);
      
      String string0 = cmdParser0.getSPValue();
      assertEquals(false, cmdParser0.isCompressed());
      assertNull(string0);
      assertEquals(false, cmdParser0.isCCopyFields());
      assertEquals(0, cmdParser0.getInputOption());
      assertEquals(0, cmdParser0.getInputCommand());
      assertEquals(false, cmdParser0.COverwrite());
  }

  @Test
  public void test8()  throws Throwable  {
      String[] stringArray0 = new String[7];
      CmdParser cmdParser0 = new CmdParser(stringArray0);
      assertNotNull(cmdParser0);
      
      String string0 = cmdParser0.getCUValue();
      assertEquals(0, cmdParser0.getInputOption());
      assertEquals(0, cmdParser0.getInputCommand());
      assertEquals(false, cmdParser0.isCCopyFields());
      assertEquals(false, cmdParser0.isCompressed());
      assertEquals(false, cmdParser0.COverwrite());
      assertNull(string0);
  }

  @Test
  public void test9()  throws Throwable  {
      String[] stringArray0 = new String[1];
      CmdParser cmdParser0 = new CmdParser(stringArray0);
      assertNotNull(cmdParser0);
      
      String string0 = cmdParser0.getSSValue();
      assertNull(string0);
      assertEquals(false, cmdParser0.isCompressed());
      assertEquals(0, cmdParser0.getInputCommand());
      assertEquals(false, cmdParser0.COverwrite());
      assertEquals(0, cmdParser0.getInputOption());
      assertEquals(false, cmdParser0.isCCopyFields());
  }

  @Test
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[7];
      CmdParser cmdParser0 = new CmdParser(stringArray0);
      assertNotNull(cmdParser0);
      
      cmdParser0.getCFValue();
      assertEquals(false, cmdParser0.isCCopyFields());
      assertEquals(0, cmdParser0.getInputOption());
      assertEquals(0, cmdParser0.getInputCommand());
      assertEquals(false, cmdParser0.COverwrite());
      assertEquals(false, cmdParser0.isCompressed());
  }

  @Test
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[1];
      CmdParser cmdParser0 = new CmdParser(stringArray0);
      assertNotNull(cmdParser0);
      
      cmdParser0.getCLValue();
      assertEquals(0, cmdParser0.getInputOption());
      assertEquals(false, cmdParser0.isCCopyFields());
      assertEquals(false, cmdParser0.isCompressed());
      assertEquals(0, cmdParser0.getInputCommand());
      assertEquals(false, cmdParser0.isOverwrite());
  }

  @Test
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[1];
      CmdParser cmdParser0 = new CmdParser(stringArray0);
      assertNotNull(cmdParser0);
      
      cmdParser0.getLogValue();
      assertEquals(0, cmdParser0.getInputCommand());
      assertEquals(false, cmdParser0.isCompressed());
      assertEquals(0, cmdParser0.getInputOption());
      assertEquals(false, cmdParser0.isCCopyFields());
      assertEquals(false, cmdParser0.isOverwrite());
  }

  @Test
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[8];
      CmdParser cmdParser0 = new CmdParser(stringArray0);
      assertNotNull(cmdParser0);
      
      boolean boolean0 = cmdParser0.isOverwrite();
      assertEquals(false, boolean0);
      assertEquals(false, cmdParser0.isCompressed());
      assertEquals(0, cmdParser0.getInputOption());
      assertEquals(false, cmdParser0.isCCopyFields());
      assertEquals(0, cmdParser0.getInputCommand());
  }

  @Test
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[1];
      CmdParser cmdParser0 = new CmdParser(stringArray0);
      assertNotNull(cmdParser0);
      
      stringArray0[0] = "split";
      try {
        cmdParser0.parse();
        fail("Expecting exception: ParseException");
      } catch(ParseException e) {
        /*
         * ParseError: Required option <f> has not been specified.
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[6] = "concat";
      CmdParser cmdParser0 = new CmdParser(stringArray0);
      assertEquals(0, cmdParser0.getInputCommand());
      assertNotNull(cmdParser0);
      
      try {
        cmdParser0.parse();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "DYA9&t";
      CmdParser cmdParser0 = new CmdParser(stringArray0);
      assertNotNull(cmdParser0);
      
      try {
        cmdParser0.parse();
        fail("Expecting exception: ParseException");
      } catch(ParseException e) {
        /*
         * ParseError: Invalid value \"DYA9&t\" specified for <command>, expecting one of: 
         *    concat
         *    split
         */
      }
  }
}
