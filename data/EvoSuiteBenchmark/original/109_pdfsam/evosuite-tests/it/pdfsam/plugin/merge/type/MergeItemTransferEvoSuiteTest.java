/*
 * This file was automatically generated by EvoSuite
 */

package it.pdfsam.plugin.merge.type;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import it.pdfsam.plugin.merge.type.MergeItemTransfer;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JColorChooser;
import javax.swing.JComponent;
import javax.swing.JPasswordField;
import javax.swing.JToolBar;
import javax.swing.colorchooser.ColorSelectionModel;
import javax.swing.colorchooser.DefaultColorSelectionModel;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MergeItemTransferEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DefaultColorSelectionModel defaultColorSelectionModel0 = new DefaultColorSelectionModel();
      JColorChooser jColorChooser0 = new JColorChooser((ColorSelectionModel) defaultColorSelectionModel0);
      MergeItemTransfer mergeItemTransfer0 = new MergeItemTransfer((JComponent) jColorChooser0, (ArrayList) null);
      ArrayList<Object> arrayList0 = mergeItemTransfer0.getData();
      assertNull(arrayList0);
  }

  @Test
  public void test1()  throws Throwable  {
      JToolBar jToolBar0 = new JToolBar("java.io.InputStream", 0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MergeItemTransfer mergeItemTransfer0 = new MergeItemTransfer((JComponent) jToolBar0, (ArrayList) arrayList0);
      DataFlavor[] dataFlavorArray0 = mergeItemTransfer0.getTransferDataFlavors();
      assertNotNull(dataFlavorArray0);
  }

  @Test
  public void test2()  throws Throwable  {
      JToolBar jToolBar0 = new JToolBar("java.io.InputStream", 0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MergeItemTransfer mergeItemTransfer0 = new MergeItemTransfer((JComponent) jToolBar0, (ArrayList) arrayList0);
      JToolBar jToolBar1 = (JToolBar)mergeItemTransfer0.getSource();
      assertEquals(false, jToolBar1.hasFocus());
  }

  @Test
  public void test3()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      MergeItemTransfer mergeItemTransfer0 = new MergeItemTransfer((JComponent) null, (ArrayList) arrayList0);
      MergeItemTransfer mergeItemTransfer1 = (MergeItemTransfer)mergeItemTransfer0.getTransferData(mergeItemTransfer0.MERGEITEMFLAVOUR);
      assertSame(mergeItemTransfer0, mergeItemTransfer1);
  }

  @Test
  public void test4()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MergeItemTransfer mergeItemTransfer0 = new MergeItemTransfer((JComponent) jPasswordField0, (ArrayList) arrayList0);
      DataFlavor dataFlavor0 = DataFlavor.imageFlavor;
      try {
        mergeItemTransfer0.getTransferData(dataFlavor0);
        fail("Expecting exception: UnsupportedFlavorException");
      } catch(UnsupportedFlavorException e) {
        /*
         * Image
         */
      }
  }
}
