/*
 * This file was automatically generated by EvoSuite
 */

package org.pdfsam.guiclient.utils;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.util.Collection;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.DocumentFactory;
import org.dom4j.Element;
import org.dom4j.Node;
import org.dom4j.bean.BeanAttributeList;
import org.dom4j.bean.BeanElement;
import org.dom4j.bean.BeanMetaData;
import org.dom4j.dom.DOMDocument;
import org.dom4j.dom.DOMDocumentType;
import org.dom4j.dom.DOMElement;
import org.dom4j.tree.DefaultDocument;
import org.dom4j.tree.DefaultElement;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.pdfsam.guiclient.dto.DocumentPage;
import org.pdfsam.guiclient.dto.Rotation;
import org.pdfsam.guiclient.utils.XmlUtility;

@RunWith(EvoSuiteRunner.class)
public class XmlUtilityEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      File file0 = new File("4");
      URI uRI0 = file0.toURI();
      URL uRL0 = uRI0.toURL();
      try {
        XmlUtility.parseXmlFile(uRL0);
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * /mnt/fastdata/ac1gf/SF110/dist/109_pdfsam/4 (No such file or directory) Nested exception: /mnt/fastdata/ac1gf/SF110/dist/109_pdfsam/4 (No such file or directory)
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      try {
        XmlUtility.parseXmlFile("/text()");
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * Unable to read /text().
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          File file0 = new File("");
          // Undeclared exception!
          try {
            XmlUtility.writeXmlFile((Document) null, file0);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission  write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:183)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:145)
             * org.pdfsam.guiclient.utils.XmlUtility.writeXmlFile(XmlUtility.java:98)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
      DocumentPage documentPage0 = XmlUtility.getDocumentPage((Node) null);
      assertNull(documentPage0);
  }

  @Test
  public void test4()  throws Throwable  {
      DocumentFactory documentFactory0 = DocumentFactory.getInstance();
      DefaultDocument defaultDocument0 = (DefaultDocument)documentFactory0.createDocument(".");
      DocumentPage documentPage0 = XmlUtility.getDocumentPage((Node) defaultDocument0);
      assertEquals(Rotation.DEGREES_0, documentPage0.getRotation());
  }

  @Test
  public void test5()  throws Throwable  {
      DocumentFactory documentFactory0 = DocumentFactory.getInstance();
      DefaultDocument defaultDocument0 = (DefaultDocument)documentFactory0.createDocument("o");
      String string0 = XmlUtility.getXmlValue((Document) defaultDocument0, "o");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test
  public void test6()  throws Throwable  {
      DocumentFactory documentFactory0 = DocumentFactory.getInstance();
      DefaultDocument defaultDocument0 = (DefaultDocument)documentFactory0.createDocument(".");
      String string0 = XmlUtility.getXmlValue((Document) defaultDocument0, ".");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      DocumentFactory documentFactory0 = DocumentFactory.getInstance();
      DefaultDocument defaultDocument0 = (DefaultDocument)documentFactory0.createDocument(".");
      Set<String> set0 = XmlUtility.getXmlValues((Document) defaultDocument0, ".");
      assertNotNull(set0);
      
      DOMDocument dOMDocument0 = new DOMDocument();
      DOMElement dOMElement0 = (DOMElement)dOMDocument0.addElement(".", ".");
      XmlUtility.addXmlNodesAndAttribute((Element) dOMElement0, ".", ".", (Collection<String>) set0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
  }

  @Test
  public void test8()  throws Throwable  {
      DefaultElement defaultElement0 = new DefaultElement("");
      DefaultElement defaultElement1 = (DefaultElement)XmlUtility.processXPath((Element) defaultElement0, "", "");
      assertSame(defaultElement0, defaultElement1);
  }

  @Test
  public void test9()  throws Throwable  {
      // Undeclared exception!
      try {
        XmlUtility.processXPath((Element) null, "j@dyh", "j@dyh");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      DOMDocument dOMDocument0 = new DOMDocument((DOMDocumentType) null);
      DOMElement dOMElement0 = (DOMElement)dOMDocument0.addElement("/text()", "/text()");
      XmlUtility.addXmlNodeAndAttribute((Element) dOMElement0, "/text()", "/text()", "/text()");
      assertEquals(1, dOMElement0.nodeCount());
      assertEquals("</text() xmlns=\"/text()\"><text() /text()=\"/text()\"/><//text()>", dOMElement0.asXML());
  }

  @Test
  public void test11()  throws Throwable  {
      DOMDocument dOMDocument0 = new DOMDocument();
      DOMElement dOMElement0 = (DOMElement)dOMDocument0.addElement(".", ".");
      XmlUtility.addXmlNodeAndAttribute((Element) dOMElement0, ".", ".", ".");
      assertEquals(1, dOMElement0.attributeCount());
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<. xmlns=\".\" .=\".\"/>", dOMDocument0.asXML());
  }

  @Test
  public void test12()  throws Throwable  {
      DefaultElement defaultElement0 = new DefaultElement("");
      DefaultElement defaultElement1 = (DefaultElement)XmlUtility.addXmlNodeAndAttribute((Element) defaultElement0, "", "", (String) null);
      assertSame(defaultElement1, defaultElement0);
  }

  @Test
  public void test13()  throws Throwable  {
      Class<?> class0 = XmlUtility.class;
      BeanMetaData beanMetaData0 = new BeanMetaData(class0);
      BeanElement beanElement0 = new BeanElement("Ji", "org.dom4j.dom.DOMNamespace@babe [Namespace: prefix Ji mapped to URI \"Ji\"]");
      BeanAttributeList beanAttributeList0 = beanMetaData0.createAttributeList(beanElement0);
      // Undeclared exception!
      try {
        XmlUtility.addXmlNodesAndAttribute((Element) null, "Ji", "Ji", (Collection<String>) beanAttributeList0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * org.dom4j.bean.BeanAttribute cannot be cast to java.lang.String
         */
      }
  }
}
