/*
 * This file was automatically generated by EvoSuite
 */

package org.pdfsam.guiclient.dto;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import org.pdfsam.guiclient.dto.Rotation;

@RunWith(EvoSuiteRunner.class)
public class RotationEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Rotation rotation0 = Rotation.DEGREES_90;
      int int0 = rotation0.getDegrees();
      assertEquals(90, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      Rotation rotation0 = Rotation.getRotation(0);
      assertEquals(Rotation.DEGREES_0, rotation0);
  }

  @Test
  public void test2()  throws Throwable  {
      Rotation rotation0 = Rotation.getRotation(270);
      Rotation rotation1 = rotation0.rotateClockwise();
      assertEquals(Rotation.DEGREES_90, rotation1.rotateClockwise());
      assertEquals(Rotation.DEGREES_0, rotation1);
  }

  @Test
  public void test3()  throws Throwable  {
      Rotation rotation0 = Rotation.getRotation(90);
      assertEquals(Rotation.DEGREES_90, rotation0);
  }

  @Test
  public void test4()  throws Throwable  {
      Rotation rotation0 = Rotation.getRotation(180);
      assertEquals(Rotation.DEGREES_180, rotation0);
  }

  @Test
  public void test5()  throws Throwable  {
      Rotation rotation0 = Rotation.getRotation((-34));
      assertEquals(Rotation.DEGREES_0, rotation0);
  }

  @Test
  public void test6()  throws Throwable  {
      Rotation rotation0 = Rotation.DEGREES_0;
      Rotation rotation1 = rotation0.rotateClockwise();
      assertEquals(Rotation.DEGREES_90, rotation1);
      
      Rotation rotation2 = rotation1.rotateClockwise();
      assertEquals(Rotation.DEGREES_180, rotation2);
  }

  @Test
  public void test7()  throws Throwable  {
      Rotation rotation0 = Rotation.DEGREES_180;
      Rotation rotation1 = rotation0.rotateClockwise();
      Rotation rotation2 = rotation1.rotateAnticlockwise();
      assertEquals(Rotation.DEGREES_180, rotation2);
      assertEquals(Rotation.DEGREES_90, rotation0.rotateAnticlockwise());
      assertEquals(Rotation.DEGREES_0, rotation1.rotateClockwise());
  }

  @Test
  public void test8()  throws Throwable  {
      Rotation rotation0 = Rotation.DEGREES_90;
      Rotation rotation1 = rotation0.rotateAnticlockwise();
      assertEquals(Rotation.DEGREES_0, rotation1);
      
      Rotation rotation2 = rotation1.rotateAnticlockwise();
      assertEquals(Rotation.DEGREES_270, rotation2);
  }

  @Test
  public void test9()  throws Throwable  {
      Rotation rotation0 = Rotation.DEGREES_180;
      Rotation rotation1 = rotation0.rotateAnticlockwise();
      assertEquals(Rotation.DEGREES_0, rotation1.rotateAnticlockwise());
      assertEquals(Rotation.DEGREES_90, rotation1);
  }
}
