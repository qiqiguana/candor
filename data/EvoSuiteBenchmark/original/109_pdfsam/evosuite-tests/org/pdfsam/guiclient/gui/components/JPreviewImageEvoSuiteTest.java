/*
 * This file was automatically generated by EvoSuite
 */

package org.pdfsam.guiclient.gui.components;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.image.ColorModel;
import java.awt.image.DirectColorModel;
import java.awt.image.ImageProducer;
import java.awt.image.MemoryImageSource;
import java.util.Hashtable;
import java.util.Properties;
import javax.swing.CellRendererPane;
import javax.swing.JTable;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.junit.BeforeClass;
import org.pdfsam.guiclient.gui.components.JPreviewImage;

@RunWith(EvoSuiteRunner.class)
public class JPreviewImageEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      JPreviewImage jPreviewImage0 = new JPreviewImage();
      // Undeclared exception!
      try {
        jPreviewImage0.zoomIn();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      CellRendererPane cellRendererPane0 = new CellRendererPane();
      DirectColorModel directColorModel0 = (DirectColorModel)cellRendererPane0.getColorModel();
      JPreviewImage jPreviewImage0 = new JPreviewImage();
      assertNotNull(jPreviewImage0);
      
      int[] intArray0 = new int[3];
      MemoryImageSource memoryImageSource0 = new MemoryImageSource((-1400), (-1400), (ColorModel) directColorModel0, intArray0, (-1400), (-1400), (Hashtable<?, ?>) null);
      Image image0 = jPreviewImage0.createImage((ImageProducer) memoryImageSource0);
      JPreviewImage jPreviewImage1 = new JPreviewImage(image0);
      assertNotNull(jPreviewImage1);
      
      Dimension dimension0 = jPreviewImage1.getPreferredSize();
      assertNotNull(dimension0);
      assertEquals((-1400), dimension0.height);
  }

  @Test
  public void test2()  throws Throwable  {
      JPreviewImage jPreviewImage0 = new JPreviewImage();
      // Undeclared exception!
      try {
        jPreviewImage0.zoom(32767);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      JPreviewImage jPreviewImage0 = new JPreviewImage((Image) null);
      jPreviewImage0.zoomOut();
      assertEquals(false, jPreviewImage0.isPaintingTile());
  }

  @Test
  public void test4()  throws Throwable  {
      JPreviewImage jPreviewImage0 = new JPreviewImage((Image) null);
      Image image0 = jPreviewImage0.getImage();
      assertNull(image0);
  }

  @Test
  public void test5()  throws Throwable  {
      JPreviewImage jPreviewImage0 = new JPreviewImage();
      // Undeclared exception!
      try {
        jPreviewImage0.rotateClockwise();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * operation \"AWTImage\" requires parameter at index 0 to be non-null.
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      JPreviewImage jPreviewImage0 = new JPreviewImage();
      // Undeclared exception!
      try {
        jPreviewImage0.rotateAntiClockwise();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * operation \"AWTImage\" requires parameter at index 0 to be non-null.
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      JPreviewImage jPreviewImage0 = new JPreviewImage();
      // Undeclared exception!
      try {
        jPreviewImage0.zoomNone();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      JPreviewImage jPreviewImage0 = new JPreviewImage();
      assertNotNull(jPreviewImage0);
      
      jPreviewImage0.setBounds((-306), (-306), (-693), (-306));
      jPreviewImage0.setSize((-693), (-693));
      assertEquals(-306, jPreviewImage0.getY());
      assertEquals("org.pdfsam.guiclient.gui.components.JPreviewImage[,-306,-306,-693x-693,invalid,alignmentX=0.0,alignmentY=0.0,border=,flags=0,maximumSize=,minimumSize=,preferredSize=]", jPreviewImage0.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      JPreviewImage jPreviewImage0 = new JPreviewImage();
      assertNotNull(jPreviewImage0);
      
      jPreviewImage0.setSize(0, 0);
      assertEquals("org.pdfsam.guiclient.gui.components.JPreviewImage[,0,0,0x0,invalid,alignmentX=0.0,alignmentY=0.0,border=,flags=0,maximumSize=,minimumSize=,preferredSize=]", jPreviewImage0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      JPreviewImage jPreviewImage0 = new JPreviewImage();
      Dimension dimension0 = jPreviewImage0.getPreferredSize();
      assertEquals(0, dimension0.height);
  }

  @Test
  public void test11()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      JTable jTable0 = new JTable(54, 54);
      DirectColorModel directColorModel0 = (DirectColorModel)jTable0.getColorModel();
      byte[] byteArray0 = new byte[1];
      Properties properties0 = new Properties();
      MemoryImageSource memoryImageSource0 = new MemoryImageSource(54, 54, (ColorModel) directColorModel0, byteArray0, 54, 54, (Hashtable<?, ?>) properties0);
      Image image0 = defaultTreeCellRenderer0.createImage((ImageProducer) memoryImageSource0);
      JPreviewImage jPreviewImage0 = new JPreviewImage(image0);
      assertEquals(false, jPreviewImage0.requestFocusInWindow());
  }
}
