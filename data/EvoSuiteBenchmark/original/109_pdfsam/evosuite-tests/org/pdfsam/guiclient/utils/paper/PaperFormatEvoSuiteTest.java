/*
 * This file was automatically generated by EvoSuite
 */

package org.pdfsam.guiclient.utils.paper;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import org.pdfsam.guiclient.utils.paper.PaperFormat;

@RunWith(EvoSuiteRunner.class)
public class PaperFormatEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      PaperFormat paperFormat0 = new PaperFormat(0.0, 0.0, (String) null, 0.0, 0.0);
      paperFormat0.setVerticalTolerance(0.0);
      assertEquals(0.0, paperFormat0.getHorizontalTolerance(), 0.01D);
      assertEquals(0.0, paperFormat0.getVerticalTolerance(), 0.01D);
      assertEquals(0.0, paperFormat0.getWidth(), 0.01D);
      assertEquals(0.0, paperFormat0.getHeight(), 0.01D);
  }

  @Test
  public void test1()  throws Throwable  {
      PaperFormat paperFormat0 = new PaperFormat();
      boolean boolean0 = paperFormat0.isTolerable(paperFormat0);
      assertEquals(0.0, paperFormat0.getVerticalTolerance(), 0.01D);
      assertEquals(0.0, paperFormat0.getWidth(), 0.01D);
      assertEquals(true, boolean0);
      assertEquals(0.0, paperFormat0.getHorizontalTolerance(), 0.01D);
      assertEquals(0.0, paperFormat0.getHeight(), 0.01D);
  }

  @Test
  public void test2()  throws Throwable  {
      PaperFormat paperFormat0 = new PaperFormat();
      paperFormat0.setDescription("!b@FY$");
      assertEquals(0.0, paperFormat0.getWidth(), 0.01D);
      assertEquals(0.0, paperFormat0.getVerticalTolerance(), 0.01D);
      assertEquals(0.0, paperFormat0.getHeight(), 0.01D);
      assertEquals(0.0, paperFormat0.getHorizontalTolerance(), 0.01D);
  }

  @Test
  public void test3()  throws Throwable  {
      PaperFormat paperFormat0 = new PaperFormat();
      paperFormat0.setHeight((-578.044317604598));
      paperFormat0.setHorizontalTolerance(87.35963420278784);
      PaperFormat paperFormat1 = new PaperFormat(87.35963420278784, 87.35963420278784, "tj|z(|%[.}T", (-956.2645380918584), 87.35963420278784);
      boolean boolean0 = paperFormat0.isTolerable(paperFormat1);
      assertEquals(87.35963420278784, paperFormat0.getHorizontalTolerance(), 0.01D);
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      PaperFormat paperFormat0 = new PaperFormat();
      double double0 = paperFormat0.getHorizontalTolerance();
      assertEquals(0.0, paperFormat0.getHeight(), 0.01D);
      assertEquals(0.0, paperFormat0.getWidth(), 0.01D);
      assertEquals(0.0, paperFormat0.getVerticalTolerance(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test5()  throws Throwable  {
      PaperFormat paperFormat0 = new PaperFormat();
      paperFormat0.setHorizontalTolerance(87.35963420278784);
      PaperFormat paperFormat1 = new PaperFormat(87.35963420278784, (-956.2645380918584), "{$'l>Z$H<SJ#2Wim", 1.0, 1.0);
      boolean boolean0 = paperFormat0.isTolerable(paperFormat1);
      assertEquals(87.35963420278784, paperFormat0.getHorizontalTolerance(), 0.01D);
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      PaperFormat paperFormat0 = new PaperFormat();
      String string0 = paperFormat0.getDescription();
      assertEquals(0.0, paperFormat0.getVerticalTolerance(), 0.01D);
      assertEquals(0.0, paperFormat0.getHorizontalTolerance(), 0.01D);
      assertEquals(0.0, paperFormat0.getHeight(), 0.01D);
      assertNotNull(string0);
      assertEquals(0.0, paperFormat0.getWidth(), 0.01D);
  }

  @Test
  public void test7()  throws Throwable  {
      PaperFormat paperFormat0 = new PaperFormat();
      String string0 = paperFormat0.toString();
      assertEquals(0.0, paperFormat0.getHorizontalTolerance(), 0.01D);
      assertEquals(0.0, paperFormat0.getHeight(), 0.01D);
      assertEquals(0.0, paperFormat0.getWidth(), 0.01D);
      assertEquals(0.0, paperFormat0.getVerticalTolerance(), 0.01D);
      assertNotNull(string0);
  }

  @Test
  public void test8()  throws Throwable  {
      PaperFormat paperFormat0 = new PaperFormat();
      double double0 = paperFormat0.getVerticalTolerance();
      assertEquals(0.0, double0, 0.01D);
      assertEquals(0.0, paperFormat0.getHeight(), 0.01D);
      assertEquals(0.0, paperFormat0.getHorizontalTolerance(), 0.01D);
      assertEquals(0.0, paperFormat0.getWidth(), 0.01D);
  }

  @Test
  public void test9()  throws Throwable  {
      PaperFormat paperFormat0 = new PaperFormat();
      boolean boolean0 = paperFormat0.isTolerable((PaperFormat) null);
      assertEquals(0.0, paperFormat0.getWidth(), 0.01D);
      assertEquals(0.0, paperFormat0.getVerticalTolerance(), 0.01D);
      assertEquals(0.0, paperFormat0.getHeight(), 0.01D);
      assertEquals(0.0, paperFormat0.getHorizontalTolerance(), 0.01D);
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      PaperFormat paperFormat0 = new PaperFormat();
      PaperFormat paperFormat1 = new PaperFormat(1.0, (-1014.9173899584771), "I0x6}~z=", (-1014.9173899584771), (-1014.9173899584771));
      boolean boolean0 = paperFormat1.isTolerable(paperFormat0);
      assertEquals(1.0, paperFormat1.getWidth(), 0.01D);
      assertEquals(false, boolean0);
      assertEquals(0.0, paperFormat0.getWidth(), 0.01D);
      assertEquals((-1014.9173899584771), paperFormat1.getVerticalTolerance(), 0.01D);
      assertEquals((-1014.9173899584771), paperFormat1.getHorizontalTolerance(), 0.01D);
      assertEquals(0.0, paperFormat0.getVerticalTolerance(), 0.01D);
      assertEquals(0.0, paperFormat0.getHeight(), 0.01D);
      assertEquals(0.0, paperFormat0.getHorizontalTolerance(), 0.01D);
      assertEquals((-1014.9173899584771), paperFormat1.getHeight(), 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      PaperFormat paperFormat0 = new PaperFormat();
      PaperFormat paperFormat1 = new PaperFormat();
      paperFormat0.setWidth((-328.1911658739991));
      boolean boolean0 = paperFormat1.isTolerable(paperFormat0);
      assertEquals((-328.1911658739991), paperFormat0.getWidth(), 0.01D);
      assertEquals(false, boolean0);
  }
}
