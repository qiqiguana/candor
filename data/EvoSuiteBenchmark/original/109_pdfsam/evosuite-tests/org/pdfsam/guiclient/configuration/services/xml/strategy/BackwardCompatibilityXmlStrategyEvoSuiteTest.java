/*
 * This file was automatically generated by EvoSuite
 */

package org.pdfsam.guiclient.configuration.services.xml.strategy;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Deque;
import org.dom4j.Document;
import org.dom4j.DocumentFactory;
import org.dom4j.Element;
import org.dom4j.QName;
import org.dom4j.dom.DOMDocument;
import org.dom4j.dom.DOMElement;
import org.dom4j.tree.DefaultDocument;
import org.dom4j.util.UserDataElement;
import org.junit.BeforeClass;
import org.pdfsam.guiclient.configuration.services.xml.strategy.BackwardCompatibilityXmlStrategy;

@RunWith(EvoSuiteRunner.class)
public class BackwardCompatibilityXmlStrategyEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DocumentFactory documentFactory0 = DocumentFactory.getInstance();
      DefaultDocument defaultDocument0 = (DefaultDocument)documentFactory0.createDocument("org.apache.log4j.xml.DOMConfigurator");
      BackwardCompatibilityXmlStrategy backwardCompatibilityXmlStrategy0 = new BackwardCompatibilityXmlStrategy((Document) defaultDocument0);
      String string0 = backwardCompatibilityXmlStrategy0.getCheckForUpdatesValue();
      assertEquals("", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      UserDataElement userDataElement0 = new UserDataElement("GR: .j\"!:");
      DefaultDocument defaultDocument0 = new DefaultDocument((Element) userDataElement0);
      BackwardCompatibilityXmlStrategy backwardCompatibilityXmlStrategy0 = new BackwardCompatibilityXmlStrategy((Document) defaultDocument0);
      String string0 = backwardCompatibilityXmlStrategy0.getThemeValue();
      assertEquals("", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      DOMDocument dOMDocument0 = new DOMDocument();
      BackwardCompatibilityXmlStrategy backwardCompatibilityXmlStrategy0 = new BackwardCompatibilityXmlStrategy((Document) dOMDocument0);
      String string0 = backwardCompatibilityXmlStrategy0.getHighQualityThumbnails();
      assertEquals("false", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      DocumentFactory documentFactory0 = DocumentFactory.getInstance();
      QName qName0 = documentFactory0.createQName("^HGc0qT gLq\"-.6", "^HGc0qT gLq\"-.6");
      DOMElement dOMElement0 = new DOMElement(qName0);
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0);
      BackwardCompatibilityXmlStrategy backwardCompatibilityXmlStrategy0 = new BackwardCompatibilityXmlStrategy((Document) dOMDocument0);
      String string0 = backwardCompatibilityXmlStrategy0.getThumbnailsSize();
      assertNotNull(string0);
      assertEquals("190", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      DOMDocument dOMDocument0 = new DOMDocument("6q ?H@Hp0");
      BackwardCompatibilityXmlStrategy backwardCompatibilityXmlStrategy0 = new BackwardCompatibilityXmlStrategy((Document) dOMDocument0);
      String string0 = backwardCompatibilityXmlStrategy0.getLookAndFeelValue();
      assertEquals("", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      DOMDocument dOMDocument0 = new DOMDocument("xC<83~6Y:o9<sbp~");
      BackwardCompatibilityXmlStrategy backwardCompatibilityXmlStrategy0 = new BackwardCompatibilityXmlStrategy((Document) dOMDocument0);
      String string0 = backwardCompatibilityXmlStrategy0.getThumbnailsCreatorIdentifierValue();
      assertEquals("", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      DOMDocument dOMDocument0 = new DOMDocument();
      BackwardCompatibilityXmlStrategy backwardCompatibilityXmlStrategy0 = new BackwardCompatibilityXmlStrategy((Document) dOMDocument0);
      String string0 = backwardCompatibilityXmlStrategy0.getDefaultWorkingDirectoryValue();
      assertEquals("", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      DocumentFactory documentFactory0 = DocumentFactory.getInstance();
      DefaultDocument defaultDocument0 = (DefaultDocument)documentFactory0.createDocument("org.apache.log4j.xml.DOMConfigurator");
      BackwardCompatibilityXmlStrategy backwardCompatibilityXmlStrategy0 = new BackwardCompatibilityXmlStrategy((Document) defaultDocument0);
      Deque<String> deque0 = backwardCompatibilityXmlStrategy0.getRecentEnvironments();
      assertEquals(0, deque0.size());
  }

  @Test
  public void test8()  throws Throwable  {
      DOMDocument dOMDocument0 = new DOMDocument("xC<83~6Y:o9<sbp~");
      BackwardCompatibilityXmlStrategy backwardCompatibilityXmlStrategy0 = new BackwardCompatibilityXmlStrategy((Document) dOMDocument0);
      String string0 = backwardCompatibilityXmlStrategy0.getAskOverwriteConfirmation();
      assertEquals("true", string0);
  }

  @Test
  public void test9()  throws Throwable  {
      DocumentFactory documentFactory0 = DocumentFactory.getInstance();
      QName qName0 = documentFactory0.createQName("^HGc0qT gLq\"-.6", "^HGc0qT gLq\"-.6");
      DOMElement dOMElement0 = new DOMElement(qName0);
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0);
      BackwardCompatibilityXmlStrategy backwardCompatibilityXmlStrategy0 = new BackwardCompatibilityXmlStrategy((Document) dOMDocument0);
      String string0 = backwardCompatibilityXmlStrategy0.getPlaySoundsValue();
      assertEquals("", string0);
  }

  @Test
  public void test10()  throws Throwable  {
      DOMDocument dOMDocument0 = new DOMDocument("6q ?H@Hp0");
      BackwardCompatibilityXmlStrategy backwardCompatibilityXmlStrategy0 = new BackwardCompatibilityXmlStrategy((Document) dOMDocument0);
      String string0 = backwardCompatibilityXmlStrategy0.getThreadPoolSizeValue();
      assertEquals("", string0);
  }

  @Test
  public void test11()  throws Throwable  {
      DOMDocument dOMDocument0 = new DOMDocument("xC<83~6Y:o9<sbp~");
      BackwardCompatibilityXmlStrategy backwardCompatibilityXmlStrategy0 = new BackwardCompatibilityXmlStrategy((Document) dOMDocument0);
      String string0 = backwardCompatibilityXmlStrategy0.getLoggingLevelValue();
      assertEquals("", string0);
  }

  @Test
  public void test12()  throws Throwable  {
      BackwardCompatibilityXmlStrategy backwardCompatibilityXmlStrategy0 = new BackwardCompatibilityXmlStrategy((Document) null);
      // Undeclared exception!
      try {
        backwardCompatibilityXmlStrategy0.getPluginAbsolutePath();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      DOMDocument dOMDocument0 = new DOMDocument();
      BackwardCompatibilityXmlStrategy backwardCompatibilityXmlStrategy0 = new BackwardCompatibilityXmlStrategy((Document) dOMDocument0);
      String string0 = backwardCompatibilityXmlStrategy0.getDefaultEnvironmentValue();
      assertEquals("", string0);
  }

  @Test
  public void test14()  throws Throwable  {
      DocumentFactory documentFactory0 = DocumentFactory.getInstance();
      QName qName0 = documentFactory0.createQName("^HGc0qT gLq\"-.6", "^HGc0qT gLq\"-.6");
      DOMElement dOMElement0 = new DOMElement(qName0);
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0);
      BackwardCompatibilityXmlStrategy backwardCompatibilityXmlStrategy0 = new BackwardCompatibilityXmlStrategy((Document) dOMDocument0);
      String string0 = backwardCompatibilityXmlStrategy0.getLocaleValue();
      assertEquals("", string0);
  }
}
