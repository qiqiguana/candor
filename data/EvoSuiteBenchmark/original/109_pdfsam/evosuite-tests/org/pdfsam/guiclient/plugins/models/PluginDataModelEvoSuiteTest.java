/*
 * This file was automatically generated by EvoSuite
 */

package org.pdfsam.guiclient.plugins.models;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import org.pdfsam.guiclient.plugins.models.PluginDataModel;

@RunWith(EvoSuiteRunner.class)
public class PluginDataModelEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      PluginDataModel pluginDataModel0 = new PluginDataModel("xh&_D-cv;Ubttg~ Sr", "xh&_D-cv;Ubttg~ Sr", "xh&_D-cv;Ubttg~ Sr", "xh&_D-cv;Ubttg~ Sr");
      int int0 = pluginDataModel0.compareTo(pluginDataModel0);
      assertEquals(0, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      PluginDataModel pluginDataModel0 = new PluginDataModel();
      String string0 = pluginDataModel0.getAuthor();
      assertNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      PluginDataModel pluginDataModel0 = new PluginDataModel(";p-", ";p-", ";p-", ";p-");
      String string0 = pluginDataModel0.getClassName();
      assertEquals(";p-", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      PluginDataModel pluginDataModel0 = new PluginDataModel();
      pluginDataModel0.setName((String) null);
      assertNull(pluginDataModel0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      PluginDataModel pluginDataModel0 = new PluginDataModel();
      String string0 = pluginDataModel0.toString();
      assertNull(string0);
  }

  @Test
  public void test5()  throws Throwable  {
      PluginDataModel pluginDataModel0 = new PluginDataModel();
      pluginDataModel0.setAuthor("2j&");
      assertNull(pluginDataModel0.getName());
  }

  @Test
  public void test6()  throws Throwable  {
      PluginDataModel pluginDataModel0 = new PluginDataModel(";p-", ";p-", ";p-", ";p-");
      pluginDataModel0.setClassName(";p-");
      assertEquals(";p-", pluginDataModel0.getVersion());
  }

  @Test
  public void test7()  throws Throwable  {
      PluginDataModel pluginDataModel0 = new PluginDataModel();
      String string0 = pluginDataModel0.getVersion();
      assertNull(string0);
  }

  @Test
  public void test8()  throws Throwable  {
      PluginDataModel pluginDataModel0 = new PluginDataModel("VxdBm+:6{i=cnn", "VxdBm+:6{i=cnn", "VxdBm+:6{i=cnn", "VxdBm+:6{i=cnn");
      int int0 = pluginDataModel0.hashCode();
      assertEquals((-981937407), int0);
  }

  @Test
  public void test9()  throws Throwable  {
      PluginDataModel pluginDataModel0 = new PluginDataModel();
      int int0 = pluginDataModel0.hashCode();
      assertEquals(923521, int0);
  }

  @Test
  public void test10()  throws Throwable  {
      PluginDataModel pluginDataModel0 = new PluginDataModel(";p-", ";p-", ";p-", ";p-");
      PluginDataModel pluginDataModel1 = new PluginDataModel("", ";p-", ";p-", "");
      boolean boolean0 = pluginDataModel0.equals((Object) pluginDataModel1);
      assertEquals("", pluginDataModel1.getClassName());
      assertEquals(";p-", pluginDataModel1.getAuthor());
      assertEquals("", pluginDataModel1.getName());
      assertEquals(";p-", pluginDataModel1.getVersion());
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      PluginDataModel pluginDataModel0 = new PluginDataModel(";p-", ";p-", ";p-", ";p-");
      boolean boolean0 = pluginDataModel0.equals((Object) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      PluginDataModel pluginDataModel0 = new PluginDataModel();
      boolean boolean0 = pluginDataModel0.equals((Object) "xh&_D-cv;Ubttg~ Sr");
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      PluginDataModel pluginDataModel0 = new PluginDataModel();
      PluginDataModel pluginDataModel1 = new PluginDataModel("/33+N", "/33+N", "/33+N", "/33+N");
      boolean boolean0 = pluginDataModel0.equals((Object) pluginDataModel1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      PluginDataModel pluginDataModel0 = new PluginDataModel();
      PluginDataModel pluginDataModel1 = new PluginDataModel((String) null, (String) null, (String) null, (String) null);
      boolean boolean0 = pluginDataModel0.equals((Object) pluginDataModel1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      PluginDataModel pluginDataModel0 = new PluginDataModel();
      PluginDataModel pluginDataModel1 = new PluginDataModel("VxdBm+:6{i=cnn", "VxdBm+:6{i=cnn", "VxdBm+:6{i=cnn", "VxdBm+:6{i=cnn");
      boolean boolean0 = pluginDataModel1.equals((Object) pluginDataModel0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      PluginDataModel pluginDataModel0 = new PluginDataModel();
      PluginDataModel pluginDataModel1 = new PluginDataModel((String) null, (String) null, (String) null, "K{Hz&[ *zENMndx,70");
      boolean boolean0 = pluginDataModel0.equals((Object) pluginDataModel1);
      assertEquals(false, boolean0);
      assertFalse(pluginDataModel1.equals(pluginDataModel0));
  }

  @Test
  public void test17()  throws Throwable  {
      PluginDataModel pluginDataModel0 = new PluginDataModel("eN&[Ye:yQ{S'R9", "eN&[Ye:yQ{S'R9", "eN&[Ye:yQ{S'R9", "eN&[Ye:yQ{S'R9");
      PluginDataModel pluginDataModel1 = new PluginDataModel("eN&[Ye:yQ{S'R9", "eN&[Ye:yQ{S'R9", "eN&[Ye:yQ{S'R9", "eN&[Ye:yQ{S'R9");
      boolean boolean0 = pluginDataModel0.equals((Object) pluginDataModel1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      PluginDataModel pluginDataModel0 = new PluginDataModel();
      PluginDataModel pluginDataModel1 = new PluginDataModel("", (String) null, (String) null, (String) null);
      boolean boolean0 = pluginDataModel0.equals((Object) pluginDataModel1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      PluginDataModel pluginDataModel0 = new PluginDataModel("xh&_D-cv;Ubttg~ Sr", "xh&_D-cv;Ubttg~ Sr", "xh&_D-cv;Ubttg~ Sr", "xh&_D-cv;Ubttg~ Sr");
      PluginDataModel pluginDataModel1 = new PluginDataModel("o", "xh&_D-cv;Ubttg~ Sr", "xh&_D-cv;Ubttg~ Sr", "xh&_D-cv;Ubttg~ Sr");
      boolean boolean0 = pluginDataModel0.equals((Object) pluginDataModel1);
      assertEquals("xh&_D-cv;Ubttg~ Sr", pluginDataModel1.getClassName());
      assertEquals(false, boolean0);
      assertEquals("xh&_D-cv;Ubttg~ Sr", pluginDataModel1.getVersion());
      assertEquals("xh&_D-cv;Ubttg~ Sr", pluginDataModel1.getAuthor());
  }

  @Test
  public void test20()  throws Throwable  {
      PluginDataModel pluginDataModel0 = new PluginDataModel();
      PluginDataModel pluginDataModel1 = new PluginDataModel((String) null, (String) null, (String) null, (String) null);
      assertTrue(pluginDataModel1.equals(pluginDataModel0));
      
      pluginDataModel1.setVersion("");
      boolean boolean0 = pluginDataModel0.equals((Object) pluginDataModel1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      PluginDataModel pluginDataModel0 = new PluginDataModel();
      pluginDataModel0.setVersion("d");
      PluginDataModel pluginDataModel1 = new PluginDataModel((String) null, (String) null, (String) null, (String) null);
      boolean boolean0 = pluginDataModel0.equals((Object) pluginDataModel1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      PluginDataModel pluginDataModel0 = new PluginDataModel();
      // Undeclared exception!
      try {
        pluginDataModel0.compareTo(pluginDataModel0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
