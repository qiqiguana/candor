/*
 * This file was automatically generated by EvoSuite
 */

package org.pdfsam.guiclient.business;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.awt.HeadlessException;
import java.util.Map;
import org.apache.log4j.Category;
import org.apache.log4j.Layout;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.PatternLayout;
import org.apache.log4j.Priority;
import org.apache.log4j.spi.LocationInfo;
import org.apache.log4j.spi.LoggingEvent;
import org.apache.log4j.spi.ThrowableInformation;
import org.junit.BeforeClass;
import org.pdfsam.guiclient.business.TextPaneAppender;

@RunWith(EvoSuiteRunner.class)
public class TextPaneAppenderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      TextPaneAppender textPaneAppender0 = new TextPaneAppender();
      textPaneAppender0.requiresLayout();
  }

  @Test
  public void test1()  throws Throwable  {
      TextPaneAppender textPaneAppender0 = new TextPaneAppender();
      textPaneAppender0.finalize();
      assertEquals(true, textPaneAppender0.requiresLayout());
  }

  @Test
  public void test2()  throws Throwable  {
      TextPaneAppender textPaneAppender0 = null;
      try {
        textPaneAppender0 = new TextPaneAppender();
        fail("Expecting exception: HeadlessException");
      } catch(HeadlessException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      TextPaneAppender textPaneAppender0 = new TextPaneAppender();
      PatternLayout patternLayout0 = new PatternLayout("&?&W/y");
      textPaneAppender0.setLayout((Layout) patternLayout0);
      String[] stringArray0 = new String[5];
      ThrowableInformation throwableInformation0 = new ThrowableInformation(stringArray0);
      LocationInfo locationInfo0 = new LocationInfo("&?&W/y", "", (String) null, "&?&W/y");
      LoggingEvent loggingEvent0 = new LoggingEvent("&?&W/y", (Category) null, (-690L), (Level) null, (Object) "", "&?&W/y", throwableInformation0, "&?&W/y", locationInfo0, (Map) null);
      // Undeclared exception!
      try {
        textPaneAppender0.doAppend(loggingEvent0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      TextPaneAppender textPaneAppender0 = new TextPaneAppender();
      PatternLayout patternLayout0 = new PatternLayout("F;&M[-");
      textPaneAppender0.setLayout((Layout) patternLayout0);
      Logger logger0 = Logger.getLogger("F;&M[-");
      Level level0 = (Level)Priority.WARN;
      LoggingEvent loggingEvent0 = new LoggingEvent("F;&M[-", (Category) logger0, (Priority) level0, (Object) "F;&M[-", (Throwable) null);
      // Undeclared exception!
      try {
        textPaneAppender0.doAppend(loggingEvent0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
