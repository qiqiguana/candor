/*
 * This file was automatically generated by EvoSuite
 */

package org.pdfsam.guiclient.commons.business;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import org.pdfsam.guiclient.commons.business.WorkExecutor;

@RunWith(EvoSuiteRunner.class)
public class WorkExecutorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      WorkExecutor workExecutor0 = WorkExecutor.getInstance();
      WorkExecutor.WorkQueue workExecutor_WorkQueue0 = workExecutor0.new WorkQueue();
      assertNotNull(workExecutor_WorkQueue0);
      
      workExecutor_WorkQueue0.deincRunningCounter();
      assertEquals(-1, workExecutor_WorkQueue0.getRunning());
  }

  @Test
  public void test1()  throws Throwable  {
      WorkExecutor workExecutor0 = WorkExecutor.getInstance();
      assertNotNull(workExecutor0);
      
      int int0 = workExecutor0.getRunningThreads();
      assertEquals(0, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      WorkExecutor workExecutor0 = WorkExecutor.getInstance();
      workExecutor0.execute((Runnable) null);
      assertEquals(0, workExecutor0.getRunningThreads());
  }

  @Test
  public void test3()  throws Throwable  {
      WorkExecutor workExecutor0 = WorkExecutor.getInstance();
      WorkExecutor.WorkQueue workExecutor_WorkQueue0 = workExecutor0.new WorkQueue();
      assertNotNull(workExecutor_WorkQueue0);
      
      workExecutor_WorkQueue0.incRunningCounter();
      assertEquals(1, workExecutor_WorkQueue0.getRunning());
  }

  @Test
  public void test4()  throws Throwable  {
      WorkExecutor workExecutor0 = WorkExecutor.getInstance();
      try {
        workExecutor0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      } catch(CloneNotSupportedException e) {
        /*
         * Cannot clone WorkExecutor object.
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      WorkExecutor workExecutor0 = WorkExecutor.getInstance();
      WorkExecutor.WorkQueue workExecutor_WorkQueue0 = workExecutor0.new WorkQueue();
      assertNotNull(workExecutor_WorkQueue0);
      
      workExecutor_WorkQueue0.startWorkQueue();
      assertEquals(0, workExecutor_WorkQueue0.getRunning());
  }
}
