/*
 * This file was automatically generated by EvoSuite
 */

package org.pdfsam.console.business.pdf.handlers.interfaces;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lowagie.text.DocListener;
import com.lowagie.text.Document;
import com.lowagie.text.DocumentException;
import com.lowagie.text.pdf.PdfStamper;
import com.lowagie.text.pdf.PdfWriter;
import java.io.File;
import java.io.OutputStream;
import org.junit.BeforeClass;
import org.pdfsam.console.business.dto.PdfFile;
import org.pdfsam.console.business.dto.Transition;
import org.pdfsam.console.business.dto.commands.AbstractParsedCommand;
import org.pdfsam.console.business.dto.commands.MixParsedCommand;
import org.pdfsam.console.business.dto.commands.SlideShowParsedCommand;
import org.pdfsam.console.business.dto.commands.UnpackParsedCommand;
import org.pdfsam.console.business.pdf.handlers.AlternateMixCmdExecutor;
import org.pdfsam.console.business.pdf.handlers.ConcatCmdExecutor;
import org.pdfsam.console.business.pdf.handlers.DecryptCmdExecutor;
import org.pdfsam.console.business.pdf.handlers.DocumentInfoCmdExecutor;
import org.pdfsam.console.business.pdf.handlers.EncryptCmdExecutor;
import org.pdfsam.console.business.pdf.handlers.PageLabelsCmdExecutor;
import org.pdfsam.console.business.pdf.handlers.RotateCmdExecutor;
import org.pdfsam.console.business.pdf.handlers.SlideShowCmdExecutor;
import org.pdfsam.console.business.pdf.handlers.SplitCmdExecutor;
import org.pdfsam.console.business.pdf.handlers.UnpackCmdExecutor;

@RunWith(EvoSuiteRunner.class)
public class AbstractCmdExecutorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SplitCmdExecutor splitCmdExecutor0 = new SplitCmdExecutor();
      MixParsedCommand mixParsedCommand0 = new MixParsedCommand((File) null, (PdfFile) null, (PdfFile) null, true, true, 10130, 10130);
      Document document0 = new Document();
      PdfWriter pdfWriter0 = PdfWriter.getInstance(document0, (OutputStream) null, (DocListener) document0);
      splitCmdExecutor0.setPdfVersionSettingOnWriter((AbstractParsedCommand) mixParsedCommand0, pdfWriter0);
      assertEquals(0.0F, pdfWriter0.getUserunit(), 0.01F);
  }

  @Test
  public void test1()  throws Throwable  {
      SlideShowCmdExecutor slideShowCmdExecutor0 = new SlideShowCmdExecutor();
      assertNotNull(slideShowCmdExecutor0);
      
      slideShowCmdExecutor0.setWorkCompleted();
      slideShowCmdExecutor0.setWorkIndeterminate();
      assertEquals(false, slideShowCmdExecutor0.hasChanged());
  }

  @Test
  public void test2()  throws Throwable  {
      DecryptCmdExecutor decryptCmdExecutor0 = new DecryptCmdExecutor();
      decryptCmdExecutor0.resetPercentageOfWorkDone();
      assertEquals(false, decryptCmdExecutor0.hasChanged());
  }

  @Test
  public void test3()  throws Throwable  {
      SlideShowCmdExecutor slideShowCmdExecutor0 = new SlideShowCmdExecutor();
      assertNotNull(slideShowCmdExecutor0);
      
      slideShowCmdExecutor0.setWorkCompleted();
      slideShowCmdExecutor0.resetPercentageOfWorkDone();
      assertEquals(false, slideShowCmdExecutor0.hasChanged());
  }

  @Test
  public void test4()  throws Throwable  {
      UnpackCmdExecutor unpackCmdExecutor0 = new UnpackCmdExecutor();
      PdfFile[] pdfFileArray0 = unpackCmdExecutor0.getPdfFiles((File) null);
      assertNull(pdfFileArray0);
  }

  @Test
  public void test5()  throws Throwable  {
      PageLabelsCmdExecutor pageLabelsCmdExecutor0 = new PageLabelsCmdExecutor();
      File file0 = new File("", "");
      PdfFile[] pdfFileArray0 = pageLabelsCmdExecutor0.getPdfFiles(file0);
      assertNotNull(pdfFileArray0);
  }

  @Test
  public void test6()  throws Throwable  {
      SplitCmdExecutor splitCmdExecutor0 = new SplitCmdExecutor();
      File file0 = new File("=qo+q", "=qo+q");
      PdfFile[] pdfFileArray0 = splitCmdExecutor0.getPdfFiles(file0);
      assertNull(pdfFileArray0);
  }

  @Test
  public void test7()  throws Throwable  {
      UnpackCmdExecutor unpackCmdExecutor0 = new UnpackCmdExecutor();
      PdfFile[] pdfFileArray0 = new PdfFile[10];
      PdfFile[] pdfFileArray1 = unpackCmdExecutor0.arraysConcat((PdfFile[]) null, pdfFileArray0);
      assertSame(pdfFileArray0, pdfFileArray1);
  }

  @Test
  public void test8()  throws Throwable  {
      PdfFile[] pdfFileArray0 = new PdfFile[6];
      SlideShowCmdExecutor slideShowCmdExecutor0 = new SlideShowCmdExecutor();
      assertNotNull(slideShowCmdExecutor0);
      
      PdfFile[] pdfFileArray1 = slideShowCmdExecutor0.arraysConcat(pdfFileArray0, pdfFileArray0);
      assertNotNull(pdfFileArray1);
      assertNotSame(pdfFileArray0, pdfFileArray1);
  }

  @Test
  public void test9()  throws Throwable  {
      PdfFile pdfFile0 = new PdfFile();
      Transition transition0 = new Transition();
      Transition[] transitionArray0 = new Transition[2];
      SlideShowParsedCommand slideShowParsedCommand0 = new SlideShowParsedCommand((File) null, pdfFile0, true, transition0, transitionArray0, (File) null);
      EncryptCmdExecutor encryptCmdExecutor0 = new EncryptCmdExecutor();
      encryptCmdExecutor0.setCompressionSettingOnWriter((AbstractParsedCommand) slideShowParsedCommand0, (PdfWriter) null);
      assertEquals(0, encryptCmdExecutor0.countObservers());
  }

  @Test
  public void test10()  throws Throwable  {
      UnpackParsedCommand unpackParsedCommand0 = new UnpackParsedCommand();
      DocumentInfoCmdExecutor documentInfoCmdExecutor0 = new DocumentInfoCmdExecutor();
      documentInfoCmdExecutor0.setCompressionSettingOnStamper((AbstractParsedCommand) unpackParsedCommand0, (PdfStamper) null);
      assertEquals(false, unpackParsedCommand0.isCompress());
  }

  @Test
  public void test11()  throws Throwable  {
      ConcatCmdExecutor concatCmdExecutor0 = new ConcatCmdExecutor();
      MixParsedCommand mixParsedCommand0 = new MixParsedCommand((File) null, (PdfFile) null, (PdfFile) null, true, true, (int) 'I', true, true, (File) null, 'm');
      // Undeclared exception!
      try {
        concatCmdExecutor0.setCompressionSettingOnStamper((AbstractParsedCommand) mixParsedCommand0, (PdfStamper) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      SplitCmdExecutor splitCmdExecutor0 = new SplitCmdExecutor();
      SlideShowParsedCommand slideShowParsedCommand0 = new SlideShowParsedCommand();
      // Undeclared exception!
      try {
        splitCmdExecutor0.setPdfVersionSettingOnWriter((AbstractParsedCommand) slideShowParsedCommand0, (PdfWriter) null, (Character) 'r');
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      AlternateMixCmdExecutor alternateMixCmdExecutor0 = new AlternateMixCmdExecutor();
      alternateMixCmdExecutor0.clean();
      assertEquals(false, alternateMixCmdExecutor0.hasChanged());
  }

  @Test
  public void test14()  throws Throwable  {
      RotateCmdExecutor rotateCmdExecutor0 = new RotateCmdExecutor();
      rotateCmdExecutor0.clean();
      assertEquals(false, rotateCmdExecutor0.hasChanged());
  }

  @Test
  public void test15()  throws Throwable  {
      Document document0 = new Document();
      PdfWriter pdfWriter0 = PdfWriter.getInstance(document0, (OutputStream) null, (DocListener) document0);
      DocumentInfoCmdExecutor documentInfoCmdExecutor0 = new DocumentInfoCmdExecutor();
      documentInfoCmdExecutor0.closePdfWriter(pdfWriter0);
      assertEquals(false, pdfWriter0.isStrictImageSequence());
  }
}
