/*
 * This file was automatically generated by EvoSuite
 */

package org.pdfsam.console.business.pdf.handlers;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.File;
import org.junit.BeforeClass;
import org.pdfsam.console.business.dto.PdfFile;
import org.pdfsam.console.business.dto.commands.AbstractParsedCommand;
import org.pdfsam.console.business.dto.commands.ConcatParsedCommand;
import org.pdfsam.console.business.dto.commands.UnpackParsedCommand;
import org.pdfsam.console.business.pdf.handlers.UnpackCmdExecutor;
import org.pdfsam.console.exceptions.console.ConsoleException;
import org.pdfsam.console.exceptions.console.UnpackException;

@RunWith(EvoSuiteRunner.class)
public class UnpackCmdExecutorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      UnpackCmdExecutor unpackCmdExecutor0 = new UnpackCmdExecutor();
      unpackCmdExecutor0.clean();
      assertEquals(false, unpackCmdExecutor0.hasChanged());
  }

  @Test
  public void test1()  throws Throwable  {
      UnpackCmdExecutor unpackCmdExecutor0 = new UnpackCmdExecutor();
      try {
        unpackCmdExecutor0.execute((AbstractParsedCommand) null);
        fail("Expecting exception: ConsoleException");
      } catch(ConsoleException e) {
        /*
         * CLS005 - Bad command.
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      UnpackCmdExecutor unpackCmdExecutor0 = new UnpackCmdExecutor();
      ConcatParsedCommand concatParsedCommand0 = new ConcatParsedCommand();
      try {
        unpackCmdExecutor0.execute((AbstractParsedCommand) concatParsedCommand0);
        fail("Expecting exception: ConsoleException");
      } catch(ConsoleException e) {
        /*
         * CLS005 - Bad command.
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      UnpackCmdExecutor unpackCmdExecutor0 = new UnpackCmdExecutor();
      UnpackParsedCommand unpackParsedCommand0 = new UnpackParsedCommand();
      try {
        unpackCmdExecutor0.execute((AbstractParsedCommand) unpackParsedCommand0);
        fail("Expecting exception: UnpackException");
      } catch(UnpackException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      UnpackCmdExecutor unpackCmdExecutor0 = new UnpackCmdExecutor();
      PdfFile[] pdfFileArray0 = new PdfFile[1];
      PdfFile pdfFile0 = new PdfFile(")A\"Fu@,vuQO}$JJ", ")A\"Fu@,vuQO}$JJ");
      pdfFileArray0[0] = pdfFile0;
      UnpackParsedCommand unpackParsedCommand0 = new UnpackParsedCommand((File) null, (File) null, pdfFileArray0);
      unpackCmdExecutor0.execute((AbstractParsedCommand) unpackParsedCommand0);
      assertEquals(0, unpackCmdExecutor0.countObservers());
  }
}
