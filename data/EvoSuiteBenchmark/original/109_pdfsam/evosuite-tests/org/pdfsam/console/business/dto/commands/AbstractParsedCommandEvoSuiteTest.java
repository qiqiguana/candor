/*
 * This file was automatically generated by EvoSuite
 */

package org.pdfsam.console.business.dto.commands;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.File;
import org.junit.BeforeClass;
import org.pdfsam.console.business.dto.PageRotation;
import org.pdfsam.console.business.dto.PdfFile;
import org.pdfsam.console.business.dto.commands.ConcatParsedCommand;
import org.pdfsam.console.business.dto.commands.MixParsedCommand;
import org.pdfsam.console.business.dto.commands.RotateParsedCommand;
import org.pdfsam.console.business.dto.commands.SetViewerParsedCommand;

@RunWith(EvoSuiteRunner.class)
public class AbstractParsedCommandEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      PdfFile[] pdfFileArray0 = new PdfFile[3];
      PageRotation pageRotation0 = new PageRotation();
      RotateParsedCommand rotateParsedCommand0 = new RotateParsedCommand(pdfFileArray0, (File) null, "", pageRotation0);
      boolean boolean0 = rotateParsedCommand0.isOverwrite();
      assertEquals(false, rotateParsedCommand0.isCompress());
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      ConcatParsedCommand concatParsedCommand0 = new ConcatParsedCommand();
      boolean boolean0 = concatParsedCommand0.isCompress();
      assertEquals(false, concatParsedCommand0.isOverwrite());
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      PdfFile[] pdfFileArray0 = new PdfFile[4];
      PageRotation[] pageRotationArray0 = new PageRotation[5];
      ConcatParsedCommand concatParsedCommand0 = new ConcatParsedCommand((File) null, (File) null, pdfFileArray0, "org.pdfsam.console.business.dto.commands.UnpackParsedCommand@263586a4[false,false,<null>][command=unpack]", false, pageRotationArray0, (File) null, true, true, (File) null, '[');
      concatParsedCommand0.setOutputPdfVersion((Character) '[');
      assertEquals(true, concatParsedCommand0.isOverwrite());
      assertEquals(true, concatParsedCommand0.isCompress());
  }

  @Test
  public void test3()  throws Throwable  {
      SetViewerParsedCommand setViewerParsedCommand0 = new SetViewerParsedCommand();
      assertEquals(false, setViewerParsedCommand0.isCompress());
      
      setViewerParsedCommand0.setCompress(true);
      assertEquals(true, setViewerParsedCommand0.isCompress());
      assertEquals(false, setViewerParsedCommand0.isOverwrite());
  }

  @Test
  public void test4()  throws Throwable  {
      SetViewerParsedCommand setViewerParsedCommand0 = new SetViewerParsedCommand();
      String string0 = setViewerParsedCommand0.toString();
      assertEquals(false, setViewerParsedCommand0.isCompress());
      assertEquals(false, setViewerParsedCommand0.isOverwrite());
      assertNotNull(string0);
  }

  @Test
  public void test5()  throws Throwable  {
      ConcatParsedCommand concatParsedCommand0 = new ConcatParsedCommand();
      concatParsedCommand0.setOverwrite(false);
      assertEquals(false, concatParsedCommand0.isOverwrite());
      assertEquals(false, concatParsedCommand0.isCompress());
  }

  @Test
  public void test6()  throws Throwable  {
      SetViewerParsedCommand setViewerParsedCommand0 = new SetViewerParsedCommand();
      setViewerParsedCommand0.getOutputPdfVersion();
      assertEquals(false, setViewerParsedCommand0.isCompress());
      assertEquals(false, setViewerParsedCommand0.isOverwrite());
  }

  @Test
  public void test7()  throws Throwable  {
      MixParsedCommand mixParsedCommand0 = new MixParsedCommand((File) null, (PdfFile) null, (PdfFile) null, false, false, 352, 2);
      mixParsedCommand0.setOutputPdfVersion('b');
      assertEquals(false, mixParsedCommand0.isOverwrite());
      assertEquals(false, mixParsedCommand0.isCompress());
  }
}
