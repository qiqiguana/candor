/*
 * This file was automatically generated by EvoSuite
 */

package org.pdfsam.console.business.dto.commands;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.File;
import org.junit.BeforeClass;
import org.pdfsam.console.business.dto.PdfFile;
import org.pdfsam.console.business.dto.commands.MixParsedCommand;

@RunWith(EvoSuiteRunner.class)
public class MixParsedCommandEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      File file0 = new File("`6X9CT-T>XW+g/*z#R", "`6X9CT-T>XW+g/*z#R");
      PdfFile pdfFile0 = new PdfFile();
      pdfFile0.setFile(file0);
      MixParsedCommand mixParsedCommand0 = new MixParsedCommand(file0, pdfFile0, pdfFile0, true, true, (-21), (-1), true, false, 'm');
      String string0 = mixParsedCommand0.toString();
      assertEquals(true, mixParsedCommand0.isReverseSecond());
      assertEquals(true, mixParsedCommand0.isReverseFirst());
      assertEquals(-1, mixParsedCommand0.getSecondStep());
      assertEquals(-21, mixParsedCommand0.getStep());
      assertNotNull(string0);
      assertEquals("mix", mixParsedCommand0.getCommand());
  }

  @Test
  public void test1()  throws Throwable  {
      MixParsedCommand mixParsedCommand0 = new MixParsedCommand();
      mixParsedCommand0.getSecondInputFile();
      assertEquals(1, mixParsedCommand0.getSecondStep());
      assertEquals(false, mixParsedCommand0.isReverseFirst());
      assertEquals(false, mixParsedCommand0.isReverseSecond());
      assertEquals(1, mixParsedCommand0.getStep());
  }

  @Test
  public void test2()  throws Throwable  {
      MixParsedCommand mixParsedCommand0 = new MixParsedCommand();
      int int0 = mixParsedCommand0.getSecondStep();
      assertEquals(1, int0);
      assertEquals(false, mixParsedCommand0.isReverseSecond());
      assertEquals(false, mixParsedCommand0.isReverseFirst());
      assertEquals(1, mixParsedCommand0.getStep());
  }

  @Test
  public void test3()  throws Throwable  {
      MixParsedCommand mixParsedCommand0 = new MixParsedCommand();
      mixParsedCommand0.setStep(1);
      assertEquals(false, mixParsedCommand0.isReverseFirst());
      assertEquals(1, mixParsedCommand0.getSecondStep());
      assertEquals(1, mixParsedCommand0.getStep());
      assertEquals(false, mixParsedCommand0.isReverseSecond());
  }

  @Test
  public void test4()  throws Throwable  {
      MixParsedCommand mixParsedCommand0 = new MixParsedCommand();
      boolean boolean0 = mixParsedCommand0.isReverseSecond();
      assertEquals(false, mixParsedCommand0.isReverseFirst());
      assertEquals(false, boolean0);
      assertEquals(1, mixParsedCommand0.getSecondStep());
      assertEquals(1, mixParsedCommand0.getStep());
  }

  @Test
  public void test5()  throws Throwable  {
      File file0 = new File("jva.v.name", "jva.v.name");
      MixParsedCommand mixParsedCommand0 = new MixParsedCommand(file0, (PdfFile) null, (PdfFile) null, false, true, (-167), (-167), false, false, '8');
      PdfFile pdfFile0 = new PdfFile("jva.v.name", "jva.v.name");
      mixParsedCommand0.setFirstInputFile(pdfFile0);
      assertEquals(false, mixParsedCommand0.isReverseFirst());
      assertEquals(-167, mixParsedCommand0.getStep());
      assertEquals(-167, mixParsedCommand0.getSecondStep());
      assertEquals(true, mixParsedCommand0.isReverseSecond());
  }

  @Test
  public void test6()  throws Throwable  {
      MixParsedCommand mixParsedCommand0 = new MixParsedCommand();
      mixParsedCommand0.getFirstInputFile();
      assertEquals(1, mixParsedCommand0.getStep());
      assertEquals(false, mixParsedCommand0.isReverseSecond());
      assertEquals(1, mixParsedCommand0.getSecondStep());
      assertEquals(false, mixParsedCommand0.isReverseFirst());
  }

  @Test
  public void test7()  throws Throwable  {
      File file0 = new File("`6X9CT-T>XW+g/*z#R", "`6X9CT-T>XW+g/*z#R");
      PdfFile pdfFile0 = new PdfFile();
      MixParsedCommand mixParsedCommand0 = new MixParsedCommand(file0, pdfFile0, pdfFile0, true, true, (-21), (-1), true, false, 'm');
      mixParsedCommand0.setOutputFile(file0);
      assertEquals(true, mixParsedCommand0.isReverseFirst());
      assertEquals(-21, mixParsedCommand0.getStep());
      assertEquals(-1, mixParsedCommand0.getSecondStep());
      assertEquals(true, mixParsedCommand0.isReverseSecond());
  }

  @Test
  public void test8()  throws Throwable  {
      MixParsedCommand mixParsedCommand0 = new MixParsedCommand();
      boolean boolean0 = mixParsedCommand0.isReverseFirst();
      assertEquals(false, boolean0);
      assertEquals(1, mixParsedCommand0.getSecondStep());
      assertEquals(false, mixParsedCommand0.isReverseSecond());
      assertEquals(1, mixParsedCommand0.getStep());
  }

  @Test
  public void test9()  throws Throwable  {
      MixParsedCommand mixParsedCommand0 = new MixParsedCommand();
      int int0 = mixParsedCommand0.getStep();
      assertEquals(false, mixParsedCommand0.isReverseSecond());
      assertEquals(false, mixParsedCommand0.isReverseFirst());
      assertEquals(1, int0);
      assertEquals(1, mixParsedCommand0.getSecondStep());
  }

  @Test
  public void test10()  throws Throwable  {
      MixParsedCommand mixParsedCommand0 = new MixParsedCommand();
      mixParsedCommand0.getOutputFile();
      assertEquals(1, mixParsedCommand0.getSecondStep());
      assertEquals(1, mixParsedCommand0.getStep());
      assertEquals(false, mixParsedCommand0.isReverseSecond());
      assertEquals(false, mixParsedCommand0.isReverseFirst());
  }

  @Test
  public void test11()  throws Throwable  {
      PdfFile pdfFile0 = new PdfFile((File) null, "@`1B%C");
      MixParsedCommand mixParsedCommand0 = new MixParsedCommand((File) null, pdfFile0, pdfFile0, true, false, (-1970), (-1970));
      assertEquals(true, mixParsedCommand0.isReverseFirst());
      assertEquals(-1970, mixParsedCommand0.getSecondStep());
      assertEquals(-1970, mixParsedCommand0.getStep());
      assertEquals(false, mixParsedCommand0.isReverseSecond());
  }

  @Test
  public void test12()  throws Throwable  {
      File file0 = new File("`6X9CT-T>XW+g/*z#R", "`6X9CT-T>XW+g/*z#R");
      PdfFile pdfFile0 = new PdfFile();
      MixParsedCommand mixParsedCommand0 = new MixParsedCommand(file0, pdfFile0, pdfFile0, true, true, (-21), (-1), true, false, 'm');
      mixParsedCommand0.setReverseSecond(true);
      assertEquals(-21, mixParsedCommand0.getStep());
      assertEquals(true, mixParsedCommand0.isReverseFirst());
      assertEquals(true, mixParsedCommand0.isReverseSecond());
      assertEquals(-1, mixParsedCommand0.getSecondStep());
  }

  @Test
  public void test13()  throws Throwable  {
      MixParsedCommand mixParsedCommand0 = new MixParsedCommand();
      mixParsedCommand0.setSecondInputFile((PdfFile) null);
      assertEquals(1, mixParsedCommand0.getStep());
      assertEquals(false, mixParsedCommand0.isReverseSecond());
      assertEquals(false, mixParsedCommand0.isReverseFirst());
      assertEquals(1, mixParsedCommand0.getSecondStep());
  }

  @Test
  public void test14()  throws Throwable  {
      File file0 = new File("jva.v.name", "jva.v.name");
      MixParsedCommand mixParsedCommand0 = new MixParsedCommand(file0, (PdfFile) null, (PdfFile) null, false, true, (-167), (-167), false, false, '8');
      mixParsedCommand0.setSecondStep((-167));
      assertEquals(false, mixParsedCommand0.isReverseFirst());
      assertEquals(true, mixParsedCommand0.isReverseSecond());
      assertEquals(-167, mixParsedCommand0.getStep());
      assertEquals(-167, mixParsedCommand0.getSecondStep());
  }

  @Test
  public void test15()  throws Throwable  {
      MixParsedCommand mixParsedCommand0 = new MixParsedCommand();
      mixParsedCommand0.setReverseFirst(false);
      assertEquals(1, mixParsedCommand0.getSecondStep());
      assertEquals(false, mixParsedCommand0.isReverseSecond());
      assertEquals(1, mixParsedCommand0.getStep());
      assertEquals(false, mixParsedCommand0.isReverseFirst());
  }

  @Test
  public void test16()  throws Throwable  {
      MixParsedCommand mixParsedCommand0 = new MixParsedCommand();
      String string0 = mixParsedCommand0.toString();
      assertEquals(false, mixParsedCommand0.isReverseSecond());
      assertEquals("mix", mixParsedCommand0.getCommand());
      assertEquals(1, mixParsedCommand0.getSecondStep());
      assertEquals(1, mixParsedCommand0.getStep());
      assertNotNull(string0);
      assertEquals(false, mixParsedCommand0.isReverseFirst());
  }
}
