/*
 * This file was automatically generated by EvoSuite
 */

package org.pdfsam.console.business.dto.commands;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.File;
import org.junit.BeforeClass;
import org.pdfsam.console.business.dto.PdfFile;
import org.pdfsam.console.business.dto.commands.EncryptParsedCommand;

@RunWith(EvoSuiteRunner.class)
public class EncryptParsedCommandEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      File file0 = new File("");
      PdfFile[] pdfFileArray0 = new PdfFile[6];
      EncryptParsedCommand encryptParsedCommand0 = new EncryptParsedCommand(file0, "", "", "", 0, "", pdfFileArray0, file0, true, false, file0, 'S');
      String string0 = encryptParsedCommand0.getUserPwd();
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      EncryptParsedCommand encryptParsedCommand0 = new EncryptParsedCommand();
      encryptParsedCommand0.setPermissions((-1027));
      assertEquals(-1027, encryptParsedCommand0.getPermissions());
  }

  @Test
  public void test2()  throws Throwable  {
      File file0 = new File("1.1", "1.1");
      PdfFile[] pdfFileArray0 = new PdfFile[10];
      EncryptParsedCommand encryptParsedCommand0 = new EncryptParsedCommand(file0, "1.1", "1.1", "1.1", (-399), "1.1", pdfFileArray0, file0, false, false, 'A');
      encryptParsedCommand0.setOutputFilesPrefix("1.1");
      assertEquals(-399, encryptParsedCommand0.getPermissions());
      assertEquals("1.1", encryptParsedCommand0.getUserPwd());
      assertEquals("1.1", encryptParsedCommand0.getEncryptionType());
      assertEquals("1.1", encryptParsedCommand0.getOutputFilesPrefix());
      assertEquals("1.1", encryptParsedCommand0.getOwnerPwd());
  }

  @Test
  public void test3()  throws Throwable  {
      PdfFile[] pdfFileArray0 = new PdfFile[1];
      EncryptParsedCommand encryptParsedCommand0 = new EncryptParsedCommand((File) null, "", "", "", 54, "", pdfFileArray0, (File) null);
      assertEquals("", encryptParsedCommand0.getOutputFilesPrefix());
      assertEquals("", encryptParsedCommand0.getOwnerPwd());
      assertEquals("", encryptParsedCommand0.getEncryptionType());
      assertEquals(54, encryptParsedCommand0.getPermissions());
      assertEquals("", encryptParsedCommand0.getUserPwd());
  }

  @Test
  public void test4()  throws Throwable  {
      EncryptParsedCommand encryptParsedCommand0 = new EncryptParsedCommand();
      encryptParsedCommand0.setInputDirectory((File) null);
      assertEquals("rc4_40", encryptParsedCommand0.getEncryptionType());
  }

  @Test
  public void test5()  throws Throwable  {
      File file0 = new File("");
      PdfFile[] pdfFileArray0 = new PdfFile[6];
      EncryptParsedCommand encryptParsedCommand0 = new EncryptParsedCommand(file0, "", "", "", 0, "", pdfFileArray0, file0, true, false, file0, 'S');
      String string0 = encryptParsedCommand0.getEncryptionType();
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      EncryptParsedCommand encryptParsedCommand0 = new EncryptParsedCommand();
      encryptParsedCommand0.getOutputFile();
      assertEquals("rc4_40", encryptParsedCommand0.getEncryptionType());
  }

  @Test
  public void test7()  throws Throwable  {
      EncryptParsedCommand encryptParsedCommand0 = new EncryptParsedCommand();
      encryptParsedCommand0.setOwnerPwd("dfY+jrO;0BOPD]");
      assertEquals("dfY+jrO;0BOPD]", encryptParsedCommand0.getOwnerPwd());
  }

  @Test
  public void test8()  throws Throwable  {
      EncryptParsedCommand encryptParsedCommand0 = new EncryptParsedCommand();
      encryptParsedCommand0.setUserPwd("");
      assertEquals("", encryptParsedCommand0.getUserPwd());
      assertEquals("rc4_40", encryptParsedCommand0.getEncryptionType());
  }

  @Test
  public void test9()  throws Throwable  {
      EncryptParsedCommand encryptParsedCommand0 = new EncryptParsedCommand();
      encryptParsedCommand0.getInputFileList();
      assertEquals("rc4_40", encryptParsedCommand0.getEncryptionType());
  }

  @Test
  public void test10()  throws Throwable  {
      EncryptParsedCommand encryptParsedCommand0 = new EncryptParsedCommand();
      encryptParsedCommand0.getInputDirectory();
      assertEquals("rc4_40", encryptParsedCommand0.getEncryptionType());
  }

  @Test
  public void test11()  throws Throwable  {
      EncryptParsedCommand encryptParsedCommand0 = new EncryptParsedCommand();
      assertEquals("rc4_40", encryptParsedCommand0.getEncryptionType());
      
      encryptParsedCommand0.setEncryptionType("");
      assertEquals("", encryptParsedCommand0.getEncryptionType());
  }

  @Test
  public void test12()  throws Throwable  {
      EncryptParsedCommand encryptParsedCommand0 = new EncryptParsedCommand();
      File file0 = new File("dfY+jrO;0BOPD]", "dfY+jrO;0BOPD]");
      encryptParsedCommand0.setOutputFile(file0);
      String string0 = encryptParsedCommand0.toString();
      assertNotNull(string0);
      assertEquals("encrypt", encryptParsedCommand0.getCommand());
      assertEquals("rc4_40", encryptParsedCommand0.getEncryptionType());
  }

  @Test
  public void test13()  throws Throwable  {
      EncryptParsedCommand encryptParsedCommand0 = new EncryptParsedCommand();
      String string0 = encryptParsedCommand0.getOutputFilesPrefix();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("rc4_40", encryptParsedCommand0.getEncryptionType());
  }

  @Test
  public void test14()  throws Throwable  {
      EncryptParsedCommand encryptParsedCommand0 = new EncryptParsedCommand();
      int int0 = encryptParsedCommand0.getPermissions();
      assertEquals("rc4_40", encryptParsedCommand0.getEncryptionType());
      assertEquals(0, int0);
  }

  @Test
  public void test15()  throws Throwable  {
      EncryptParsedCommand encryptParsedCommand0 = new EncryptParsedCommand();
      String string0 = encryptParsedCommand0.getOwnerPwd();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("rc4_40", encryptParsedCommand0.getEncryptionType());
  }

  @Test
  public void test16()  throws Throwable  {
      EncryptParsedCommand encryptParsedCommand0 = new EncryptParsedCommand();
      String string0 = encryptParsedCommand0.toString();
      assertNotNull(string0);
      assertEquals("encrypt", encryptParsedCommand0.getCommand());
      assertEquals("rc4_40", encryptParsedCommand0.getEncryptionType());
  }

  @Test
  public void test17()  throws Throwable  {
      EncryptParsedCommand encryptParsedCommand0 = new EncryptParsedCommand();
      PdfFile[] pdfFileArray0 = new PdfFile[4];
      PdfFile pdfFile0 = new PdfFile("", "");
      pdfFileArray0[0] = pdfFile0;
      encryptParsedCommand0.setInputFileList(pdfFileArray0);
      String string0 = encryptParsedCommand0.toString();
      assertNotNull(string0);
      assertEquals("encrypt", encryptParsedCommand0.getCommand());
      assertEquals("rc4_40", encryptParsedCommand0.getEncryptionType());
  }

  @Test
  public void test18()  throws Throwable  {
      File file0 = new File("1.1", "1.1");
      PdfFile[] pdfFileArray0 = new PdfFile[10];
      EncryptParsedCommand encryptParsedCommand0 = new EncryptParsedCommand(file0, "oO", "oO", "oO", (-124), "oO", pdfFileArray0, file0, false, false, file0, 'H');
      String string0 = encryptParsedCommand0.toString();
      assertEquals("encrypt", encryptParsedCommand0.getCommand());
      assertNotNull(string0);
  }
}
