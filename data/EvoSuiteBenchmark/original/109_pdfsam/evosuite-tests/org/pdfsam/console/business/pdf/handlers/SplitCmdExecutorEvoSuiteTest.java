/*
 * This file was automatically generated by EvoSuite
 */

package org.pdfsam.console.business.pdf.handlers;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.File;
import org.junit.BeforeClass;
import org.pdfsam.console.business.dto.PdfFile;
import org.pdfsam.console.business.dto.commands.AbstractParsedCommand;
import org.pdfsam.console.business.dto.commands.PageLabelsParsedCommand;
import org.pdfsam.console.business.dto.commands.SplitParsedCommand;
import org.pdfsam.console.business.pdf.handlers.SplitCmdExecutor;
import org.pdfsam.console.exceptions.console.ConsoleException;
import org.pdfsam.console.exceptions.console.SplitException;

@RunWith(EvoSuiteRunner.class)
public class SplitCmdExecutorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SplitCmdExecutor splitCmdExecutor0 = new SplitCmdExecutor();
      PdfFile[] pdfFileArray0 = new PdfFile[4];
      PdfFile pdfFile0 = new PdfFile("Unhandled operator in createAdditiveExpr(): ", "Unhandled operator in createAdditiveExpr(): ");
      pdfFileArray0[2] = pdfFile0;
      Integer[] integerArray0 = new Integer[6];
      SplitParsedCommand splitParsedCommand0 = new SplitParsedCommand((File) null, "Unhandled operator in createAdditiveExpr(): ", pdfFileArray0[2], "NSPLIT", integerArray0, (Long) null, (Integer) null, false, false, 'v');
      try {
        splitCmdExecutor0.execute((AbstractParsedCommand) splitParsedCommand0);
        fail("Expecting exception: SplitException");
      } catch(SplitException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      SplitCmdExecutor splitCmdExecutor0 = new SplitCmdExecutor();
      splitCmdExecutor0.clean();
      assertEquals(0, splitCmdExecutor0.countObservers());
  }

  @Test
  public void test2()  throws Throwable  {
      SplitCmdExecutor splitCmdExecutor0 = new SplitCmdExecutor();
      try {
        splitCmdExecutor0.execute((AbstractParsedCommand) null);
        fail("Expecting exception: ConsoleException");
      } catch(ConsoleException e) {
        /*
         * CLS005 - Bad command.
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      SplitCmdExecutor splitCmdExecutor0 = new SplitCmdExecutor();
      PageLabelsParsedCommand pageLabelsParsedCommand0 = new PageLabelsParsedCommand();
      try {
        splitCmdExecutor0.execute((AbstractParsedCommand) pageLabelsParsedCommand0);
        fail("Expecting exception: ConsoleException");
      } catch(ConsoleException e) {
        /*
         * CLS005 - Bad command.
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      SplitCmdExecutor splitCmdExecutor0 = new SplitCmdExecutor();
      PdfFile[] pdfFileArray0 = new PdfFile[9];
      File file0 = new File("Unhandled operator in createAdditiveExpr(): ", "Unhandled operator in createAdditiveExpr(): ");
      PdfFile pdfFile0 = new PdfFile("Unhandled operator in createAdditiveExpr(): ", "Unhandled operator in createAdditiveExpr(): ");
      pdfFileArray0[2] = pdfFile0;
      Integer[] integerArray0 = new Integer[9];
      SplitParsedCommand splitParsedCommand0 = new SplitParsedCommand(file0, "Unhandled operator in createAdditiveExpr(): ", pdfFileArray0[2], "Unhandled operator in createAdditiveExpr(): ", integerArray0, (Long) null, (Integer) null, true, true, 'v');
      try {
        splitCmdExecutor0.execute((AbstractParsedCommand) splitParsedCommand0);
        fail("Expecting exception: SplitException");
      } catch(SplitException e) {
      }
  }
}
