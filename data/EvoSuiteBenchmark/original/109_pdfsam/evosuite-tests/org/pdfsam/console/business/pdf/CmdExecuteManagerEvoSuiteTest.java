/*
 * This file was automatically generated by EvoSuite
 */

package org.pdfsam.console.business.pdf;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.File;
import org.junit.BeforeClass;
import org.pdfsam.console.business.dto.PageRotation;
import org.pdfsam.console.business.dto.PdfFile;
import org.pdfsam.console.business.dto.commands.AbstractParsedCommand;
import org.pdfsam.console.business.dto.commands.ConcatParsedCommand;
import org.pdfsam.console.business.dto.commands.DecryptParsedCommand;
import org.pdfsam.console.business.dto.commands.DocumentInfoParsedCommand;
import org.pdfsam.console.business.dto.commands.EncryptParsedCommand;
import org.pdfsam.console.business.dto.commands.MixParsedCommand;
import org.pdfsam.console.business.dto.commands.PageLabelsParsedCommand;
import org.pdfsam.console.business.dto.commands.RotateParsedCommand;
import org.pdfsam.console.business.dto.commands.SetViewerParsedCommand;
import org.pdfsam.console.business.dto.commands.SlideShowParsedCommand;
import org.pdfsam.console.business.dto.commands.SplitParsedCommand;
import org.pdfsam.console.business.dto.commands.UnpackParsedCommand;
import org.pdfsam.console.business.pdf.CmdExecuteManager;
import org.pdfsam.console.exceptions.console.ConcatException;
import org.pdfsam.console.exceptions.console.ConsoleException;
import org.pdfsam.console.exceptions.console.EncryptException;
import org.pdfsam.console.exceptions.console.MixException;
import org.pdfsam.console.exceptions.console.PageLabelsException;
import org.pdfsam.console.exceptions.console.SetViewerException;
import org.pdfsam.console.exceptions.console.SlideShowException;
import org.pdfsam.console.exceptions.console.SplitException;
import org.pdfsam.console.exceptions.console.UnpackException;

@RunWith(EvoSuiteRunner.class)
public class CmdExecuteManagerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      CmdExecuteManager cmdExecuteManager0 = new CmdExecuteManager();
      assertNotNull(cmdExecuteManager0);
      
      ConcatParsedCommand concatParsedCommand0 = new ConcatParsedCommand();
      try {
        cmdExecuteManager0.execute((AbstractParsedCommand) concatParsedCommand0);
        fail("Expecting exception: ConcatException");
      } catch(ConcatException e) {
        /*
         * MRG007 - No input file found.
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      CmdExecuteManager cmdExecuteManager0 = new CmdExecuteManager();
      try {
        cmdExecuteManager0.execute((AbstractParsedCommand) null);
        fail("Expecting exception: ConsoleException");
      } catch(ConsoleException e) {
        /*
         * CLS007 - Input command is null.
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      CmdExecuteManager cmdExecuteManager0 = new CmdExecuteManager();
      assertNotNull(cmdExecuteManager0);
      
      MixParsedCommand mixParsedCommand0 = new MixParsedCommand();
      try {
        cmdExecuteManager0.execute((AbstractParsedCommand) mixParsedCommand0);
        fail("Expecting exception: MixException");
      } catch(MixException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      CmdExecuteManager cmdExecuteManager0 = new CmdExecuteManager();
      assertNotNull(cmdExecuteManager0);
      
      SplitParsedCommand splitParsedCommand0 = new SplitParsedCommand();
      try {
        cmdExecuteManager0.execute((AbstractParsedCommand) splitParsedCommand0);
        fail("Expecting exception: SplitException");
      } catch(SplitException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      CmdExecuteManager cmdExecuteManager0 = new CmdExecuteManager();
      assertNotNull(cmdExecuteManager0);
      
      File file0 = new File("mix", "mix");
      PdfFile[] pdfFileArray0 = new PdfFile[5];
      EncryptParsedCommand encryptParsedCommand0 = new EncryptParsedCommand(file0, "mix", "mix", "mix", 0, "mix", pdfFileArray0, file0, true, true, file0, 'f');
      try {
        cmdExecuteManager0.execute((AbstractParsedCommand) encryptParsedCommand0);
        fail("Expecting exception: EncryptException");
      } catch(EncryptException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      CmdExecuteManager cmdExecuteManager0 = new CmdExecuteManager();
      assertNotNull(cmdExecuteManager0);
      
      PageLabelsParsedCommand pageLabelsParsedCommand0 = new PageLabelsParsedCommand();
      try {
        cmdExecuteManager0.execute((AbstractParsedCommand) pageLabelsParsedCommand0);
        fail("Expecting exception: PageLabelsException");
      } catch(PageLabelsException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      CmdExecuteManager cmdExecuteManager0 = new CmdExecuteManager();
      assertNotNull(cmdExecuteManager0);
      
      UnpackParsedCommand unpackParsedCommand0 = new UnpackParsedCommand();
      try {
        cmdExecuteManager0.execute((AbstractParsedCommand) unpackParsedCommand0);
        fail("Expecting exception: UnpackException");
      } catch(UnpackException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      CmdExecuteManager cmdExecuteManager0 = new CmdExecuteManager();
      assertNotNull(cmdExecuteManager0);
      
      PdfFile[] pdfFileArray0 = new PdfFile[3];
      SetViewerParsedCommand setViewerParsedCommand0 = new SetViewerParsedCommand((File) null, (int) '\u001F', (int) '\u001F', (int) '\u001F', (int) '\u001F', pdfFileArray0, "Jz", false, false, false, false, false, false, false, (File) null, false, false, '\u001F');
      try {
        cmdExecuteManager0.execute((AbstractParsedCommand) setViewerParsedCommand0);
        fail("Expecting exception: SetViewerException");
      } catch(SetViewerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      CmdExecuteManager cmdExecuteManager0 = new CmdExecuteManager();
      assertNotNull(cmdExecuteManager0);
      
      SlideShowParsedCommand slideShowParsedCommand0 = new SlideShowParsedCommand();
      try {
        cmdExecuteManager0.execute((AbstractParsedCommand) slideShowParsedCommand0);
        fail("Expecting exception: SlideShowException");
      } catch(SlideShowException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      CmdExecuteManager cmdExecuteManager0 = new CmdExecuteManager();
      assertNotNull(cmdExecuteManager0);
      
      PdfFile[] pdfFileArray0 = new PdfFile[2];
      DecryptParsedCommand decryptParsedCommand0 = new DecryptParsedCommand(pdfFileArray0, (File) null, "Lo373_8");
      // Undeclared exception!
      try {
        cmdExecuteManager0.execute((AbstractParsedCommand) decryptParsedCommand0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      CmdExecuteManager cmdExecuteManager0 = new CmdExecuteManager();
      assertNotNull(cmdExecuteManager0);
      
      PdfFile[] pdfFileArray0 = new PdfFile[4];
      RotateParsedCommand rotateParsedCommand0 = new RotateParsedCommand(pdfFileArray0, (File) null, "", (PageRotation) null);
      try {
        cmdExecuteManager0.execute((AbstractParsedCommand) rotateParsedCommand0);
        fail("Expecting exception: EncryptException");
      } catch(EncryptException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      CmdExecuteManager cmdExecuteManager0 = new CmdExecuteManager();
      assertNotNull(cmdExecuteManager0);
      
      DocumentInfoParsedCommand documentInfoParsedCommand0 = new DocumentInfoParsedCommand((File) null, (PdfFile) null, (String) null, (String) null, (String) null, (String) null);
      try {
        cmdExecuteManager0.execute((AbstractParsedCommand) documentInfoParsedCommand0);
        fail("Expecting exception: ConsoleException");
      } catch(ConsoleException e) {
      }
  }
}
