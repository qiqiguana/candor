/*
 * This file was automatically generated by EvoSuite
 */

package org.pdfsam.console.business.pdf.handlers;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.File;
import javax.swing.JLayeredPane;
import org.junit.BeforeClass;
import org.pdfsam.console.business.dto.PageRotation;
import org.pdfsam.console.business.dto.PdfFile;
import org.pdfsam.console.business.dto.commands.AbstractParsedCommand;
import org.pdfsam.console.business.dto.commands.ConcatParsedCommand;
import org.pdfsam.console.business.dto.commands.SplitParsedCommand;
import org.pdfsam.console.business.pdf.handlers.ConcatCmdExecutor;
import org.pdfsam.console.exceptions.console.ConcatException;
import org.pdfsam.console.exceptions.console.ConsoleException;

@RunWith(EvoSuiteRunner.class)
public class ConcatCmdExecutorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ConcatCmdExecutor concatCmdExecutor0 = new ConcatCmdExecutor();
      try {
        concatCmdExecutor0.execute((AbstractParsedCommand) null);
        fail("Expecting exception: ConsoleException");
      } catch(ConsoleException e) {
        /*
         * CLS005 - Bad command.
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      ConcatCmdExecutor concatCmdExecutor0 = new ConcatCmdExecutor();
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      integerArray0[0] = integer0;
      Long long0 = new Long((long) integerArray0[0]);
      SplitParsedCommand splitParsedCommand0 = new SplitParsedCommand((File) null, "[rotation=", (PdfFile) null, "[rotation=", integerArray0, long0, integerArray0[0], true, true, '`');
      try {
        concatCmdExecutor0.execute((AbstractParsedCommand) splitParsedCommand0);
        fail("Expecting exception: ConsoleException");
      } catch(ConsoleException e) {
        /*
         * CLS005 - Bad command.
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      ConcatCmdExecutor concatCmdExecutor0 = new ConcatCmdExecutor();
      File file0 = new File("'");
      PdfFile[] pdfFileArray0 = new PdfFile[1];
      String[] stringArray0 = new String[8];
      PageRotation[] pageRotationArray0 = new PageRotation[8];
      ConcatParsedCommand concatParsedCommand0 = new ConcatParsedCommand(file0, file0, pdfFileArray0, stringArray0, false, pageRotationArray0, file0);
      try {
        concatCmdExecutor0.execute((AbstractParsedCommand) concatParsedCommand0);
        fail("Expecting exception: ConcatException");
      } catch(ConcatException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      ConcatCmdExecutor concatCmdExecutor0 = new ConcatCmdExecutor();
      ConcatParsedCommand concatParsedCommand0 = new ConcatParsedCommand();
      File file0 = new File("g@b(");
      concatParsedCommand0.setInputCvsOrXmlFile(file0);
      try {
        concatCmdExecutor0.execute((AbstractParsedCommand) concatParsedCommand0);
        fail("Expecting exception: ConcatException");
      } catch(ConcatException e) {
        /*
         * MRG007 - No input file found.
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      ConcatCmdExecutor concatCmdExecutor0 = new ConcatCmdExecutor();
      ConcatParsedCommand concatParsedCommand0 = new ConcatParsedCommand();
      File file0 = new File("g@b(");
      concatParsedCommand0.setInputDirectory(file0);
      try {
        concatCmdExecutor0.execute((AbstractParsedCommand) concatParsedCommand0);
        fail("Expecting exception: ConcatException");
      } catch(ConcatException e) {
        /*
         * MRG007 - No input file found.
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      ConcatCmdExecutor concatCmdExecutor0 = new ConcatCmdExecutor();
      PdfFile[] pdfFileArray0 = new PdfFile[6];
      PageRotation[] pageRotationArray0 = new PageRotation[4];
      ConcatParsedCommand concatParsedCommand0 = new ConcatParsedCommand((File) null, (File) null, pdfFileArray0, "xq-t:2X", false, pageRotationArray0, (File) null, false, false, (File) null, '}');
      try {
        concatCmdExecutor0.execute((AbstractParsedCommand) concatParsedCommand0);
        fail("Expecting exception: ConcatException");
      } catch(ConcatException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      ConcatCmdExecutor concatCmdExecutor0 = new ConcatCmdExecutor();
      concatCmdExecutor0.clean();
      assertEquals(0, concatCmdExecutor0.countObservers());
  }
}
