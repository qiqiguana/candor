/*
 * This file was automatically generated by EvoSuite
 */

package org.pdfsam.console.business.dto.commands;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.File;
import org.junit.BeforeClass;
import org.pdfsam.console.business.dto.PdfFile;
import org.pdfsam.console.business.dto.commands.SplitParsedCommand;

@RunWith(EvoSuiteRunner.class)
public class SplitParsedCommandEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SplitParsedCommand splitParsedCommand0 = new SplitParsedCommand();
      splitParsedCommand0.setSplitType("");
      assertEquals("", splitParsedCommand0.getSplitType());
  }

  @Test
  public void test1()  throws Throwable  {
      SplitParsedCommand splitParsedCommand0 = new SplitParsedCommand();
      File file0 = new File("", "");
      splitParsedCommand0.setOutputFile(file0);
      String string0 = splitParsedCommand0.toString();
      assertEquals("split", splitParsedCommand0.getCommand());
      assertNotNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      SplitParsedCommand splitParsedCommand0 = new SplitParsedCommand();
      PdfFile pdfFile0 = splitParsedCommand0.getInputFile();
      assertNull(pdfFile0);
  }

  @Test
  public void test3()  throws Throwable  {
      SplitParsedCommand splitParsedCommand0 = new SplitParsedCommand();
      Integer integer0 = new Integer(0);
      Long long0 = new Long((long) integer0);
      splitParsedCommand0.setSplitSize(long0);
      assertEquals("", splitParsedCommand0.getOutputFilesPrefix());
  }

  @Test
  public void test4()  throws Throwable  {
      SplitParsedCommand splitParsedCommand0 = new SplitParsedCommand();
      String string0 = splitParsedCommand0.getSplitType();
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test
  public void test5()  throws Throwable  {
      SplitParsedCommand splitParsedCommand0 = new SplitParsedCommand();
      splitParsedCommand0.getBookmarksLevel();
  }

  @Test
  public void test6()  throws Throwable  {
      SplitParsedCommand splitParsedCommand0 = new SplitParsedCommand();
      File file0 = splitParsedCommand0.getOutputFile();
      assertNull(file0);
  }

  @Test
  public void test7()  throws Throwable  {
      SplitParsedCommand splitParsedCommand0 = new SplitParsedCommand();
      Integer[] integerArray0 = splitParsedCommand0.getSplitPageNumbers();
      assertNotNull(integerArray0);
  }

  @Test
  public void test8()  throws Throwable  {
      File file0 = new File("", "");
      Integer[] integerArray0 = new Integer[7];
      Long long0 = new Long((long) (-8));
      SplitParsedCommand splitParsedCommand0 = new SplitParsedCommand(file0, "", (PdfFile) null, "", integerArray0, long0, (Integer) null, false, false, ' ');
      assertEquals("", splitParsedCommand0.getOutputFilesPrefix());
      assertEquals("", splitParsedCommand0.getSplitType());
  }

  @Test
  public void test9()  throws Throwable  {
      SplitParsedCommand splitParsedCommand0 = new SplitParsedCommand();
      splitParsedCommand0.setOutputFilesPrefix("");
      assertEquals("", splitParsedCommand0.getOutputFilesPrefix());
  }

  @Test
  public void test10()  throws Throwable  {
      SplitParsedCommand splitParsedCommand0 = new SplitParsedCommand();
      String string0 = splitParsedCommand0.getOutputFilesPrefix();
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test
  public void test11()  throws Throwable  {
      SplitParsedCommand splitParsedCommand0 = new SplitParsedCommand();
      splitParsedCommand0.getSplitSize();
  }

  @Test
  public void test12()  throws Throwable  {
      SplitParsedCommand splitParsedCommand0 = new SplitParsedCommand();
      Integer[] integerArray0 = new Integer[1];
      splitParsedCommand0.setSplitPageNumbers(integerArray0);
      String string0 = splitParsedCommand0.toString();
      assertNotNull(string0);
      assertEquals("split", splitParsedCommand0.getCommand());
  }

  @Test
  public void test13()  throws Throwable  {
      SplitParsedCommand splitParsedCommand0 = new SplitParsedCommand();
      Integer integer0 = new Integer(0);
      splitParsedCommand0.setBookmarksLevel(integer0);
      assertEquals("", splitParsedCommand0.getSplitType());
  }

  @Test
  public void test14()  throws Throwable  {
      SplitParsedCommand splitParsedCommand0 = new SplitParsedCommand();
      PdfFile pdfFile0 = new PdfFile("", "");
      splitParsedCommand0.setInputFile(pdfFile0);
      String string0 = splitParsedCommand0.toString();
      assertEquals("split", splitParsedCommand0.getCommand());
      assertNotNull(string0);
  }

  @Test
  public void test15()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      Long long0 = new Long((long) integer0);
      SplitParsedCommand splitParsedCommand0 = new SplitParsedCommand((File) null, (String) null, (PdfFile) null, (String) null, integerArray0, long0, (Integer) null);
      assertEquals(false, splitParsedCommand0.isOverwrite());
  }
}
