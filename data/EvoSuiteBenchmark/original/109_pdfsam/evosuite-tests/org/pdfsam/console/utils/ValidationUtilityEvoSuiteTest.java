/*
 * This file was automatically generated by EvoSuite
 */

package org.pdfsam.console.utils;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.File;
import java.util.LinkedList;
import java.util.List;
import org.junit.BeforeClass;
import org.pdfsam.console.business.dto.Bounds;
import org.pdfsam.console.business.dto.PageLabel;
import org.pdfsam.console.business.dto.PageRotation;
import org.pdfsam.console.exceptions.console.ValidationException;
import org.pdfsam.console.utils.ValidationUtility;

@RunWith(EvoSuiteRunner.class)
public class ValidationUtilityEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      PageRotation[] pageRotationArray0 = ValidationUtility.getPagesRotation("");
      assertNotNull(pageRotationArray0);
  }

  @Test
  public void test1()  throws Throwable  {
      PageRotation[] pageRotationArray0 = ValidationUtility.getPagesRotation((String) null);
      assertNotNull(pageRotationArray0);
  }

  @Test
  public void test2()  throws Throwable  {
      try {
        ValidationUtility.getPagesRotation("+Riq:1");
        fail("Expecting exception: ValidationException");
      } catch(ValidationException e) {
        /*
         * VLD001 - Error parsing rotations values.
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      PageRotation[] pageRotationArray0 = ValidationUtility.getPagesRotation(",", false);
      assertNotNull(pageRotationArray0);
  }

  @Test
  public void test4()  throws Throwable  {
      try {
        ValidationUtility.getPagesRotation("u\"D");
        fail("Expecting exception: ValidationException");
      } catch(ValidationException e) {
        /*
         * VLD001 - Error parsing rotations values.
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      try {
        ValidationUtility.getPagesRotation("GmikQ'!ygb{");
        fail("Expecting exception: ValidationException");
      } catch(ValidationException e) {
        /*
         * VLD001 - Error parsing rotations values.
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      PageLabel pageLabel0 = ValidationUtility.getPageLabel((String) null);
      assertNull(pageLabel0);
  }

  @Test
  public void test7()  throws Throwable  {
      PageLabel pageLabel0 = ValidationUtility.getPageLabel("");
      assertNull(pageLabel0);
  }

  @Test
  public void test8()  throws Throwable  {
      try {
        ValidationUtility.getPageLabel("4:2");
        fail("Expecting exception: ValidationException");
      } catch(ValidationException e) {
        /*
         * VLD007 - Unknown page label style: 2.
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      try {
        ValidationUtility.getPageLabel("No aKpenders coul\" be found for lorger (");
        fail("Expecting exception: ValidationException");
      } catch(ValidationException e) {
        /*
         * VLD006 - Wrong value for the -l option No aKpenders coul\" be found for lorger (.
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      try {
        ValidationUtility.assertValidPdfExtension("");
        fail("Expecting exception: ValidationException");
      } catch(ValidationException e) {
        /*
         * VLD004 - The given file is not a pdf document. 
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      ValidationUtility.assertValidPdfExtension("dg^!.pdf");
  }

  @Test
  public void test12()  throws Throwable  {
      try {
        ValidationUtility.assertValidPdfExtension(".pdf");
        fail("Expecting exception: ValidationException");
      } catch(ValidationException e) {
        /*
         * VLD004 - The given file is not a pdf document. .pdf
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      File file0 = new File("", "");
      ValidationUtility.assertValidDirectory(file0);
      assertEquals(false, file0.isHidden());
  }

  @Test
  public void test14()  throws Throwable  {
      File file0 = new File(";]$i}y2xk");
      try {
        ValidationUtility.assertValidDirectory(file0);
        fail("Expecting exception: ValidationException");
      } catch(ValidationException e) {
        /*
         * VLD005 - /mnt/fastdata/ac1gf/SF110/dist/109_pdfsam/;]$i}y2xk must be a directory.
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      ValidationUtility.assertValidPageSelectionsArray((String[]) null);
  }

  @Test
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[13];
      stringArray0[0] = "";
      try {
        ValidationUtility.assertValidPageSelectionsArray(stringArray0);
        fail("Expecting exception: ValidationException");
      } catch(ValidationException e) {
        /*
         * VLD009 - -u value parsing error. The selection string must be 'all' or a comma separated list of values like 'num', 'num-' and 'num1-num2'.
         */
      }
  }

  @Test
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "?:?:0]0";
      boolean boolean0 = ValidationUtility.isValidPageSelectionsArray(stringArray0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[15];
      stringArray0[0] = "all";
      // Undeclared exception!
      try {
        ValidationUtility.isValidPageSelectionsArray(stringArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test19()  throws Throwable  {
      Bounds bounds0 = new Bounds(10005, 576);
      try {
        ValidationUtility.assertValidBounds(bounds0, 10005);
        fail("Expecting exception: ValidationException");
      } catch(ValidationException e) {
        /*
         * VLD012 - Syntax error. 10005 is bigger than 576 in 10005-576.
         */
      }
  }

  @Test
  public void test20()  throws Throwable  {
      Bounds bounds0 = new Bounds((-13), (-13));
      try {
        ValidationUtility.assertValidBounds(bounds0, (-13));
        fail("Expecting exception: ValidationException");
      } catch(ValidationException e) {
        /*
         * VLD010 - Syntax error. -13 must be positive in -13--13.
         */
      }
  }

  @Test
  public void test21()  throws Throwable  {
      Bounds bounds0 = new Bounds(394, 394);
      try {
        ValidationUtility.assertValidBounds(bounds0, 15);
        fail("Expecting exception: ValidationException");
      } catch(ValidationException e) {
        /*
         * VLD011 - Cannot merge at page 394. No such page.
         */
      }
  }

  @Test
  public void test22()  throws Throwable  {
      Bounds bounds0 = new Bounds(394, 394);
      ValidationUtility.assertValidBounds(bounds0, 394);
      assertEquals(394, bounds0.getStart());
  }

  @Test
  public void test23()  throws Throwable  {
      LinkedList<Bounds> linkedList0 = new LinkedList<Bounds>();
      Bounds bounds0 = new Bounds();
      linkedList0.add(bounds0);
      linkedList0.add(bounds0);
      try {
        ValidationUtility.assertNotIntersectedBoundsList((List) linkedList0);
        fail("Expecting exception: ValidationException");
      } catch(ValidationException e) {
        /*
         * VLD013 - Not valid subset of pages selected. The following bounds have an intersections : 0-0, 0-0.
         */
      }
  }

  @Test
  public void test24()  throws Throwable  {
      LinkedList<Bounds> linkedList0 = new LinkedList<Bounds>();
      Bounds bounds0 = new Bounds();
      Bounds bounds1 = new Bounds((-1711), (-1711));
      linkedList0.add(bounds1);
      linkedList0.add(bounds0);
      ValidationUtility.assertNotIntersectedBoundsList((List) linkedList0);
      assertEquals(2, linkedList0.size());
  }
}
