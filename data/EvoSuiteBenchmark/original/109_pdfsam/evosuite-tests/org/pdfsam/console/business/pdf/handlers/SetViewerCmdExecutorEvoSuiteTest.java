/*
 * This file was automatically generated by EvoSuite
 */

package org.pdfsam.console.business.pdf.handlers;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.File;
import org.junit.BeforeClass;
import org.pdfsam.console.business.dto.PdfFile;
import org.pdfsam.console.business.dto.commands.AbstractParsedCommand;
import org.pdfsam.console.business.dto.commands.SetViewerParsedCommand;
import org.pdfsam.console.business.dto.commands.UnpackParsedCommand;
import org.pdfsam.console.business.pdf.handlers.SetViewerCmdExecutor;
import org.pdfsam.console.exceptions.console.ConsoleException;
import org.pdfsam.console.exceptions.console.SetViewerException;

@RunWith(EvoSuiteRunner.class)
public class SetViewerCmdExecutorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SetViewerCmdExecutor setViewerCmdExecutor0 = new SetViewerCmdExecutor();
      setViewerCmdExecutor0.clean();
      assertEquals(false, setViewerCmdExecutor0.hasChanged());
  }

  @Test
  public void test1()  throws Throwable  {
      SetViewerCmdExecutor setViewerCmdExecutor0 = new SetViewerCmdExecutor();
      try {
        setViewerCmdExecutor0.execute((AbstractParsedCommand) null);
        fail("Expecting exception: ConsoleException");
      } catch(ConsoleException e) {
        /*
         * CLS005 - Bad command.
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      SetViewerCmdExecutor setViewerCmdExecutor0 = new SetViewerCmdExecutor();
      UnpackParsedCommand unpackParsedCommand0 = new UnpackParsedCommand();
      try {
        setViewerCmdExecutor0.execute((AbstractParsedCommand) unpackParsedCommand0);
        fail("Expecting exception: ConsoleException");
      } catch(ConsoleException e) {
        /*
         * CLS005 - Bad command.
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      SetViewerCmdExecutor setViewerCmdExecutor0 = new SetViewerCmdExecutor();
      SetViewerParsedCommand setViewerParsedCommand0 = new SetViewerParsedCommand((File) null, (-1944), (-1944), (-1944), (-1944), (PdfFile[]) null, "V4A0fG[0Kf", false, false, false, false, false, false, false, (File) null, false, false, '3');
      try {
        setViewerCmdExecutor0.execute((AbstractParsedCommand) setViewerParsedCommand0);
        fail("Expecting exception: SetViewerException");
      } catch(SetViewerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      SetViewerCmdExecutor setViewerCmdExecutor0 = new SetViewerCmdExecutor();
      File file0 = new File("");
      PdfFile[] pdfFileArray0 = new PdfFile[4];
      PdfFile pdfFile0 = new PdfFile("", "");
      pdfFileArray0[0] = pdfFile0;
      pdfFileArray0[1] = pdfFile0;
      pdfFileArray0[2] = pdfFile0;
      pdfFileArray0[3] = pdfFileArray0[0];
      SetViewerParsedCommand setViewerParsedCommand0 = new SetViewerParsedCommand(file0, (-1805), (-1805), (-1805), (-1805), pdfFileArray0, "", true, true, true, true, true, true, true, file0);
      setViewerCmdExecutor0.execute((AbstractParsedCommand) setViewerParsedCommand0);
      assertEquals(true, setViewerParsedCommand0.isHideWindowUI());
  }
}
