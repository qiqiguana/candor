/*
 * This file was automatically generated by EvoSuite
 */

package org.pdfsam.console.business.dto.commands;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.File;
import org.junit.BeforeClass;
import org.pdfsam.console.business.dto.PageRotation;
import org.pdfsam.console.business.dto.PdfFile;
import org.pdfsam.console.business.dto.commands.RotateParsedCommand;

@RunWith(EvoSuiteRunner.class)
public class RotateParsedCommandEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      RotateParsedCommand rotateParsedCommand0 = new RotateParsedCommand();
      File file0 = rotateParsedCommand0.getOutputFile();
      assertNull(file0);
  }

  @Test
  public void test1()  throws Throwable  {
      RotateParsedCommand rotateParsedCommand0 = new RotateParsedCommand();
      String string0 = rotateParsedCommand0.getOutputFilesPrefix();
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      PdfFile[] pdfFileArray0 = new PdfFile[1];
      PdfFile pdfFile0 = new PdfFile("@8;ST}C-iFCp$2,B-Li", "@8;ST}C-iFCp$2,B-Li");
      File file0 = pdfFile0.getFile();
      PageRotation pageRotation0 = new PageRotation();
      RotateParsedCommand rotateParsedCommand0 = new RotateParsedCommand(pdfFileArray0, file0, "@8;ST}C-iFCp$2,B-Li", pageRotation0, true, false, 'Q');
      rotateParsedCommand0.setInputFileList(pdfFileArray0);
      assertEquals("@8;ST}C-iFCp$2,B-Li", rotateParsedCommand0.getOutputFilesPrefix());
  }

  @Test
  public void test3()  throws Throwable  {
      PdfFile[] pdfFileArray0 = new PdfFile[2];
      File file0 = new File("M7s~#4u2ipB>.G", "M7s~#4u2ipB>.G");
      RotateParsedCommand rotateParsedCommand0 = new RotateParsedCommand(pdfFileArray0, file0, "M7s~#4u2ipB>.G", (PageRotation) null, false, true, '-');
      rotateParsedCommand0.getRotation();
      assertEquals("M7s~#4u2ipB>.G", rotateParsedCommand0.getOutputFilesPrefix());
  }

  @Test
  public void test4()  throws Throwable  {
      RotateParsedCommand rotateParsedCommand0 = new RotateParsedCommand();
      rotateParsedCommand0.setOutputFile((File) null);
      assertEquals(false, rotateParsedCommand0.isCompress());
  }

  @Test
  public void test5()  throws Throwable  {
      RotateParsedCommand rotateParsedCommand0 = new RotateParsedCommand();
      PageRotation pageRotation0 = new PageRotation((-1974), 0, 0);
      rotateParsedCommand0.setRotation(pageRotation0);
      assertEquals(0, pageRotation0.getType());
  }

  @Test
  public void test6()  throws Throwable  {
      PdfFile[] pdfFileArray0 = new PdfFile[1];
      PageRotation pageRotation0 = new PageRotation();
      RotateParsedCommand rotateParsedCommand0 = new RotateParsedCommand(pdfFileArray0, (File) null, (String) null, pageRotation0);
      assertEquals(false, rotateParsedCommand0.isCompress());
  }

  @Test
  public void test7()  throws Throwable  {
      RotateParsedCommand rotateParsedCommand0 = new RotateParsedCommand();
      PdfFile[] pdfFileArray0 = rotateParsedCommand0.getInputFileList();
      assertNull(pdfFileArray0);
  }

  @Test
  public void test8()  throws Throwable  {
      RotateParsedCommand rotateParsedCommand0 = new RotateParsedCommand();
      rotateParsedCommand0.setOutputFilesPrefix("encrypt");
      assertEquals("encrypt", rotateParsedCommand0.getOutputFilesPrefix());
  }

  @Test
  public void test9()  throws Throwable  {
      RotateParsedCommand rotateParsedCommand0 = new RotateParsedCommand();
      String string0 = rotateParsedCommand0.toString();
      assertNotNull(string0);
      assertEquals("rotate", rotateParsedCommand0.getCommand());
  }

  @Test
  public void test10()  throws Throwable  {
      PdfFile[] pdfFileArray0 = new PdfFile[2];
      File file0 = new File("M7s~#4u2ipB>.G", "M7s~#4u2ipB>.G");
      PdfFile pdfFile0 = new PdfFile(file0, "M7s~#4u2ipB>.G");
      pdfFileArray0[1] = pdfFile0;
      RotateParsedCommand rotateParsedCommand0 = new RotateParsedCommand(pdfFileArray0, file0, "M7s~#4u2ipB>.G", (PageRotation) null, false, true, '-');
      String string0 = rotateParsedCommand0.toString();
      assertNotNull(string0);
      assertEquals("rotate", rotateParsedCommand0.getCommand());
      assertEquals("M7s~#4u2ipB>.G", rotateParsedCommand0.getOutputFilesPrefix());
  }
}
