/*
 * This file was automatically generated by EvoSuite
 */

package org.pdfsam.console.business.pdf.handlers;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.File;
import org.junit.BeforeClass;
import org.pdfsam.console.business.dto.PdfFile;
import org.pdfsam.console.business.dto.Transition;
import org.pdfsam.console.business.dto.commands.AbstractParsedCommand;
import org.pdfsam.console.business.dto.commands.SlideShowParsedCommand;
import org.pdfsam.console.business.dto.commands.UnpackParsedCommand;
import org.pdfsam.console.business.pdf.handlers.SlideShowCmdExecutor;
import org.pdfsam.console.exceptions.console.ConsoleException;
import org.pdfsam.console.exceptions.console.SlideShowException;

@RunWith(EvoSuiteRunner.class)
public class SlideShowCmdExecutorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SlideShowCmdExecutor slideShowCmdExecutor0 = new SlideShowCmdExecutor();
      File file0 = new File("");
      PdfFile pdfFile0 = new PdfFile();
      Transition transition0 = new Transition();
      Transition[] transitionArray0 = new Transition[1];
      SlideShowParsedCommand slideShowParsedCommand0 = new SlideShowParsedCommand(file0, pdfFile0, false, transition0, transitionArray0, file0);
      try {
        slideShowCmdExecutor0.execute((AbstractParsedCommand) slideShowParsedCommand0);
        fail("Expecting exception: SlideShowException");
      } catch(SlideShowException e) {
        /*
         * SLS005 - Error reading xml input file.
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      SlideShowCmdExecutor slideShowCmdExecutor0 = new SlideShowCmdExecutor();
      slideShowCmdExecutor0.clean();
      assertEquals(false, slideShowCmdExecutor0.hasChanged());
  }

  @Test
  public void test2()  throws Throwable  {
      SlideShowCmdExecutor slideShowCmdExecutor0 = new SlideShowCmdExecutor();
      try {
        slideShowCmdExecutor0.execute((AbstractParsedCommand) null);
        fail("Expecting exception: ConsoleException");
      } catch(ConsoleException e) {
        /*
         * CLS005 - Bad command.
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      SlideShowCmdExecutor slideShowCmdExecutor0 = new SlideShowCmdExecutor();
      UnpackParsedCommand unpackParsedCommand0 = new UnpackParsedCommand();
      try {
        slideShowCmdExecutor0.execute((AbstractParsedCommand) unpackParsedCommand0);
        fail("Expecting exception: ConsoleException");
      } catch(ConsoleException e) {
        /*
         * CLS005 - Bad command.
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      SlideShowCmdExecutor slideShowCmdExecutor0 = new SlideShowCmdExecutor();
      SlideShowParsedCommand slideShowParsedCommand0 = new SlideShowParsedCommand();
      try {
        slideShowCmdExecutor0.execute((AbstractParsedCommand) slideShowParsedCommand0);
        fail("Expecting exception: SlideShowException");
      } catch(SlideShowException e) {
      }
  }
}
