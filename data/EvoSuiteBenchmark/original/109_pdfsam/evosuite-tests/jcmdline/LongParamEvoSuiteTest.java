/*
 * This file was automatically generated by EvoSuite
 */

package jcmdline;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import jcmdline.CmdLineException;
import jcmdline.LongParam;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class LongParamEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      long[] longArray0 = new long[6];
      LongParam longParam0 = new LongParam("MO t#Z%xMN*}z+@#", "MO t#Z%xMN*}z+@#", longArray0);
      assertNotNull(longParam0);
      
      long[] longArray1 = longParam0.getAcceptableLongValues();
      assertEquals("MO t#Z%xMN*}z+@#", longParam0.getTag());
      assertEquals("<n>", longParam0.getOptionLabel());
      assertEquals(9223372036854775807L, longParam0.getMax());
      assertEquals(true, longParam0.isOptional());
      assertEquals(false, longParam0.isHidden());
      assertEquals(false, longParam0.isMultiValued());
      assertEquals((-9223372036854775808L), longParam0.getMin());
      assertNotNull(longArray1);
  }

  @Test
  public void test1()  throws Throwable  {
      long[] longArray0 = new long[1];
      LongParam longParam0 = new LongParam("goh@H'Os", "goh@H'Os", longArray0, true);
      assertEquals((-9223372036854775808L), longParam0.getMin());
      assertNotNull(longParam0);
      assertEquals(false, longParam0.isMultiValued());
      assertEquals(false, longParam0.isHidden());
      assertEquals(9223372036854775807L, longParam0.getMax());
      assertEquals(true, longParam0.isOptional());
      assertEquals("<n>", longParam0.getOptionLabel());
      assertEquals("goh@H'Os", longParam0.getTag());
  }

  @Test
  public void test2()  throws Throwable  {
      LongParam longParam0 = new LongParam("0(cmvdMaxM1%n", "0(cmvdMaxM1%n", 14L, 14L);
      assertNotNull(longParam0);
      
      try {
        longParam0.validateValue("0(cmvdMaxM1%n");
        fail("Expecting exception: CmdLineException");
      } catch(CmdLineException e) {
        /*
         * The value for <0(cmvdMaxM1%n> must be a number between 14 and 14, inclusive.
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      LongParam longParam0 = new LongParam("goh@H'Os", "goh@H'Os", 766L, 766L, true, true);
      assertNotNull(longParam0);
      
      long long0 = longParam0.getMin();
      assertEquals(true, longParam0.isMultiValued());
      assertEquals(false, longParam0.isHidden());
      assertEquals("<n>", longParam0.getOptionLabel());
      assertEquals(true, longParam0.isOptional());
      assertEquals(766L, longParam0.getMax());
      assertEquals("goh@H'Os", longParam0.getTag());
      assertEquals(766L, long0);
  }

  @Test
  public void test4()  throws Throwable  {
      LongParam longParam0 = new LongParam("goh@H'Os", "goh@H'Os", 766L, 766L, true, true);
      assertNotNull(longParam0);
      
      long long0 = longParam0.getMax();
      assertEquals(766L, long0);
      assertEquals(true, longParam0.isOptional());
      assertEquals("goh@H'Os", longParam0.getTag());
      assertEquals(false, longParam0.isHidden());
      assertEquals(true, longParam0.isMultiValued());
      assertEquals(766L, longParam0.getMin());
      assertEquals("<n>", longParam0.getOptionLabel());
  }

  @Test
  public void test5()  throws Throwable  {
      long[] longArray0 = new long[4];
      LongParam longParam0 = new LongParam("; prams^ ", "; prams^ ", longArray0, true, true);
      assertEquals(true, longParam0.isMultiValued());
      assertEquals(9223372036854775807L, longParam0.getMax());
      assertNotNull(longParam0);
      assertEquals((-9223372036854775808L), longParam0.getMin());
      assertEquals(true, longParam0.isOptional());
      assertEquals(false, longParam0.isHidden());
      assertEquals("<n>", longParam0.getOptionLabel());
      assertEquals("; prams^ ", longParam0.getTag());
  }

  @Test
  public void test6()  throws Throwable  {
      LongParam longParam0 = new LongParam("Ge5w$01", "Ge5w$01", 10L, 10L, true);
      assertNotNull(longParam0);
      
      long[] longArray0 = longParam0.longValues();
      assertEquals("<n>", longParam0.getOptionLabel());
      assertEquals(10L, longParam0.getMin());
      assertEquals(false, longParam0.isMultiValued());
      assertEquals(10L, longParam0.getMax());
      assertEquals(true, longParam0.isOptional());
      assertNotNull(longArray0);
      assertEquals(false, longParam0.isHidden());
      assertEquals("Ge5w$01", longParam0.getTag());
  }

  @Test
  public void test7()  throws Throwable  {
      LongParam longParam0 = null;
      try {
        longParam0 = new LongParam("5^", "5^", false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Minimum acceptable value (5^) must not be greater than the maximum ({1})
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      LongParam longParam0 = new LongParam("]WVN%je<iQdlxyz)'2", "]WVN%je<iQdlxyz)'2", 0L, 0L);
      assertNotNull(longParam0);
      
      // Undeclared exception!
      try {
        longParam0.longValue();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * There is no value set for <]WVN%je<iQdlxyz)'2>.
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      LongParam longParam0 = new LongParam("JsF*JE>L0", "JsF*JE>L0", 9223372036854775807L, 9223372036854775807L);
      assertNotNull(longParam0);
      
      // Undeclared exception!
      try {
        longParam0.setMax(1131L);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Minimum acceptable value (JsF*JE>L0) must not be greater than the maximum ({1})
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      LongParam longParam0 = new LongParam("]WVN%je<iQdl}xyz)'2", "]WVN%je<iQdl}xyz)'2", 0L, 0L);
      assertNotNull(longParam0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "4";
      try {
        longParam0.setValues(stringArray0);
        fail("Expecting exception: CmdLineException");
      } catch(CmdLineException e) {
        /*
         * The value for <]WVN%je<iQdl}xyz)'2> must be a number between 0 and 0, inclusive.
         */
      }
  }
}
