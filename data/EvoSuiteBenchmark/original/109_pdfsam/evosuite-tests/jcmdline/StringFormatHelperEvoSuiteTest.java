/*
 * This file was automatically generated by EvoSuite
 */

package jcmdline;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import jcmdline.StringFormatHelper;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class StringFormatHelperEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      StringFormatHelper stringFormatHelper0 = StringFormatHelper.getHelper();
      String string0 = stringFormatHelper0.formatHangingIndent((String) null, (-1346), (-1346));
      assertEquals("", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      StringFormatHelper stringFormatHelper0 = StringFormatHelper.getHelper();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "ni";
      stringArray0[2] = "tYTaY#.y(x{4";
      String string0 = stringFormatHelper0.formatLabeledList(stringArray0, stringArray0, "ni", 0, 1600);
      assertNotNull(string0);
      assertEquals("        ni\nni      nini\ntYTaY#.y(x{4ni\n          tYTaY#.y(x{4\n", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      StringFormatHelper stringFormatHelper0 = StringFormatHelper.getHelper();
      String string0 = stringFormatHelper0.formatHangingIndent("", 0, 0);
      assertEquals("", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      StringFormatHelper stringFormatHelper0 = StringFormatHelper.getHelper();
      // Undeclared exception!
      try {
        stringFormatHelper0.formatHangingIndent("\n", 1398, 1398);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * maximum line length must be greater than indent
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      StringFormatHelper stringFormatHelper0 = StringFormatHelper.getHelper();
      // Undeclared exception!
      try {
        stringFormatHelper0.formatHangingIndent("0", (-1), 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * maximum line length must be greater than 0
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      StringFormatHelper stringFormatHelper0 = StringFormatHelper.getHelper();
      String string0 = stringFormatHelper0.formatBlockedText((String) null, (-1346), (-1346));
      assertEquals("", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      StringFormatHelper stringFormatHelper0 = StringFormatHelper.getHelper();
      String string0 = stringFormatHelper0.formatBlockedText("", 22, 22);
      assertEquals("", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      StringFormatHelper stringFormatHelper0 = StringFormatHelper.getHelper();
      // Undeclared exception!
      try {
        stringFormatHelper0.formatBlockedText("Ui", 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * maximum line length must be greater than indent
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      StringFormatHelper stringFormatHelper0 = StringFormatHelper.getHelper();
      // Undeclared exception!
      try {
        stringFormatHelper0.formatBlockedText("o ", (-473), 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * maximum line length must be greater than 0
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      StringFormatHelper stringFormatHelper0 = StringFormatHelper.getHelper();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\n";
      stringArray0[1] = "";
      stringArray0[2] = "\n";
      stringArray0[3] = "\n";
      stringArray0[4] = "\n";
      stringArray0[5] = "t>pNBMP";
      String string0 = stringFormatHelper0.formatLabeledList(stringArray0, stringArray0, "\n", 10, 10);
      assertEquals("\n          \n        \n        \n        \n       \n        \n\n          \n        \n        \n        \n\n          \n        \n        \n        \n\n          \n        \n        \n        \nt>pNBMP\n        t>\n        pN\n        BM\n        P\n", string0);
      assertNotNull(string0);
  }

  @Test
  public void test10()  throws Throwable  {
      StringFormatHelper stringFormatHelper0 = StringFormatHelper.getHelper();
      String[] stringArray0 = stringFormatHelper0.breakString((String) null, 1398);
      assertNotNull(stringArray0);
  }

  @Test
  public void test11()  throws Throwable  {
      StringFormatHelper stringFormatHelper0 = StringFormatHelper.getHelper();
      String[] stringArray0 = stringFormatHelper0.breakString(" ", 0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test12()  throws Throwable  {
      StringFormatHelper stringFormatHelper0 = StringFormatHelper.getHelper();
      String[] stringArray0 = new String[1];
      String[] stringArray1 = new String[8];
      // Undeclared exception!
      try {
        stringFormatHelper0.formatLabeledList(stringArray0, stringArray1, ".))'S", (-1615), (-1615));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * The number of labels (1) passed to formatLabelledList does not match the number of descriptions (8)
         */
      }
  }
}
