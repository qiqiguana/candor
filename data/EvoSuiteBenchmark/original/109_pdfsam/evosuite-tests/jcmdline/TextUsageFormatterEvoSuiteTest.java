/*
 * This file was automatically generated by EvoSuite
 */

package jcmdline;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import jcmdline.DateParam;
import jcmdline.LongParam;
import jcmdline.Parameter;
import jcmdline.PdfFileParam;
import jcmdline.StringParam;
import jcmdline.TextUsageFormatter;
import jcmdline.TimeParam;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TextUsageFormatterEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      TextUsageFormatter textUsageFormatter0 = new TextUsageFormatter();
      int int0 = textUsageFormatter0.getLineLength();
      assertEquals(80, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      TextUsageFormatter textUsageFormatter0 = new TextUsageFormatter();
      String string0 = textUsageFormatter0.formatText("Yik)$Mk3J", 0, 467);
      assertEquals("Yik)$Mk3J", string0);
      assertNotNull(string0);
      assertEquals(80, textUsageFormatter0.getLineLength());
  }

  @Test
  public void test2()  throws Throwable  {
      TextUsageFormatter textUsageFormatter0 = new TextUsageFormatter();
      String string0 = textUsageFormatter0.formatErrorMsg("PdfFlePaa.wrieabl");
      assertEquals("ERROR: PdfFlePaa.wrieabl", string0);
      assertEquals(80, textUsageFormatter0.getLineLength());
      assertNotNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      TextUsageFormatter textUsageFormatter0 = new TextUsageFormatter();
      textUsageFormatter0.setLineLength(467);
      assertEquals(467, textUsageFormatter0.getLineLength());
  }

  @Test
  public void test4()  throws Throwable  {
      TextUsageFormatter textUsageFormatter0 = new TextUsageFormatter();
      HashMap<Parameter, Parameter> hashMap0 = new HashMap<Parameter, Parameter>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      TimeParam timeParam0 = new TimeParam("Yik)$Mk3J", "Yik)$Mk3J - Yik)$Mk3J\n\nUsage: Yik)$Mk3J options [Yik)$Mk3J]\n\nwhere:\n\nYik)$Mk3J = Yik)$Mk3J (optional)\n\nand options are:\n\n-Yik)$Mk3J <n> Yik)$Mk3J (required)\n\nOption tags are not case sensitive, and may be truncated as long as they remain unambiguous.  Option tags must be separated from their corresponding values by whitespace, or by an equal sign.  Boolean options (options that require no associated value) may be specified alone (=true), or as 'tag=value' where value is 'true' or 'false'.", true, true, true);
      hashMap0.put((Parameter) null, (Parameter) timeParam0);
      String string0 = textUsageFormatter0.formatUsage("Yik)$Mk3J", "Yik)$Mk3J", (Map) hashMap0, (List) linkedList0, true);
      assertEquals("Yik)$Mk3J - Yik)$Mk3J\n\nUsage: Yik)$Mk3J [options] \n\nwhere options are:\n\n-Yik)$Mk3J HH:mm[:ss[:SSS]] \n          Yik)$Mk3J - Yik)$Mk3J\n          \n          Usage: Yik)$Mk3J options [Yik)$Mk3J]\n          \n          where:\n          \n          Yik)$Mk3J = Yik)$Mk3J (optional)\n          \n          and options are:\n          \n          -Yik)$Mk3J <n> Yik)$Mk3J (required)\n          \n          Option tags are not case sensitive, and may be truncated as long as\n          they remain unambiguous.  Option tags must be separated from their\n          corresponding values by whitespace, or by an equal sign.  Boolean\n          options (options that require no associated value) may be specified\n          alone (=true), or as 'tag=value' where value is 'true' or 'false'.\n          (optional) (hidden)\n\nOption tags are not case sensitive, and may be truncated as long as they remain\nunambiguous.  Option tags must be separated from their corresponding values by\nwhitespace, or by an equal sign.  Boolean options (options that require no\nassociated value) may be specified alone (=true), or as 'tag=value' where value\nis 'true' or 'false'.", string0);
      assertEquals(80, textUsageFormatter0.getLineLength());
      assertNotNull(string0);
  }

  @Test
  public void test5()  throws Throwable  {
      TextUsageFormatter textUsageFormatter0 = new TextUsageFormatter();
      HashMap<Parameter, Parameter> hashMap0 = new HashMap<Parameter, Parameter>();
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      String[] stringArray0 = new String[12];
      StringParam stringParam0 = new StringParam("Yik)$Mk3J", "Yik)$Mk3J", stringArray0);
      linkedList0.add((Parameter) stringParam0);
      LongParam longParam0 = new LongParam("Yik)$Mk3J", "Yik)$Mk3J", false);
      hashMap0.put((Parameter) null, (Parameter) longParam0);
      String string0 = textUsageFormatter0.formatUsage("Yik)$Mk3J", "Yik)$Mk3J", (Map) hashMap0, (List) linkedList0, true);
      assertEquals("Yik)$Mk3J - Yik)$Mk3J\n\nUsage: Yik)$Mk3J options [Yik)$Mk3J]\n\nwhere:\n\nYik)$Mk3J = Yik)$Mk3J (optional)\n\nand options are:\n\n-Yik)$Mk3J <n> Yik)$Mk3J (required)\n\nOption tags are not case sensitive, and may be truncated as long as they remain\nunambiguous.  Option tags must be separated from their corresponding values by\nwhitespace, or by an equal sign.  Boolean options (options that require no\nassociated value) may be specified alone (=true), or as 'tag=value' where value\nis 'true' or 'false'.", string0);
      assertNotNull(string0);
      assertEquals(80, textUsageFormatter0.getLineLength());
  }

  @Test
  public void test6()  throws Throwable  {
      TextUsageFormatter textUsageFormatter0 = new TextUsageFormatter();
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      PdfFileParam pdfFileParam0 = new PdfFileParam("PdfFlePaa.wrieabl", "PdfFlePaa.wrieabl");
      linkedList0.add((Parameter) pdfFileParam0);
      pdfFileParam0.setHidden(true);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      String string0 = textUsageFormatter0.formatUsage("PdfFlePaa.wrieabl - PdfFlePaa.wrieabl\n\nUsage: PdfFlePaa.wrieabl \n\nwhere:\n", "PdfFlePaa.wrieabl - PdfFlePaa.wrieabl\n\nUsage: PdfFlePaa.wrieabl \n\nwhere:\n", (Map) hashMap0, (List) linkedList0, true);
      assertEquals("PdfFlePaa.wrieabl - PdfFlePaa.wrieabl\n                                                                            \n                                                                            Usag\n                                                                            e:\n                                                                            PdfF\n                                                                            lePa\n                                                                            a.wr\n                                                                            ieab\n                                                                            l \n                                                                            \n                                                                            wher\n                                                                            e:\n                                                                             -\n                                                                            PdfF\n                                                                            lePa\n                                                                            a.wr\n                                                                            ieab\n                                                                            l -\n                                                                            PdfF\n                                                                            lePa\n                                                                            a.wr\n                                                                            ieab\n                                                                            l\n                                                                            \n                                                                            Usag\n                                                                            e:\n                                                                            PdfF\n                                                                            lePa\n                                                                            a.wr\n                                                                            ieab\n                                                                            l \n                                                                            \n                                                                            wher\n                                                                            e:\n\n\nUsage: PdfFlePaa.wrieabl - PdfFlePaa.wrieabl\n\nUsage: PdfFlePaa.wrieabl \n\nwhere:\n [PdfFlePaa.wrieabl]\n\nwhere:\n\nPdfFlePaa.wrieabl = PdfFlePaa.wrieabl (optional) (hidden)", string0);
      assertNotNull(string0);
  }

  @Test
  public void test7()  throws Throwable  {
      TextUsageFormatter textUsageFormatter0 = new TextUsageFormatter();
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      PdfFileParam pdfFileParam0 = new PdfFileParam("PdfFlePaa.wrieabl", "PdfFlePaa.wrieabl");
      linkedList0.add((Parameter) pdfFileParam0);
      pdfFileParam0.setHidden(true);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      DateParam dateParam0 = new DateParam("ERROR: PdfFlePaa.wrieabl", "PdfFlePaa.wrieabl", false);
      linkedList0.add((Parameter) dateParam0);
      linkedList0.offerFirst((Parameter) dateParam0);
      String string0 = textUsageFormatter0.formatUsage("ERROR: PdfFlePaa.wrieabl", "PdfFlePaa.wrieabl", (Map) hashMap0, (List) linkedList0, false);
      assertNotNull(string0);
      assertEquals("ERROR: PdfFlePaa.wrieabl - PdfFlePaa.wrieabl\n\nUsage: ERROR: PdfFlePaa.wrieabl ERROR: PdfFlePaa.wrieabl \\\n                                ERROR: PdfFlePaa.wrieabl\n\nwhere:\n\nERROR: PdfFlePaa.wrieabl = \n          PdfFlePaa.wrieabl (required)\nERROR: PdfFlePaa.wrieabl = \n          PdfFlePaa.wrieabl (required)", string0);
  }

  @Test
  public void test8()  throws Throwable  {
      TextUsageFormatter textUsageFormatter0 = new TextUsageFormatter();
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      PdfFileParam pdfFileParam0 = new PdfFileParam("PdfFlePaa.wrieabl", "PdfFlePaa.wrieabl");
      linkedList0.add((Parameter) pdfFileParam0);
      pdfFileParam0.setHidden(true);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      String string0 = textUsageFormatter0.formatUsage("PdfFlePaa.wrieabl", "PdfFlePaa.wrieabl", (Map) hashMap0, (List) linkedList0, false);
      assertNotNull(string0);
      assertEquals(80, textUsageFormatter0.getLineLength());
      assertEquals("PdfFlePaa.wrieabl - PdfFlePaa.wrieabl\n\nUsage: PdfFlePaa.wrieabl \n\nwhere:\n", string0);
  }

  @Test
  public void test9()  throws Throwable  {
      TextUsageFormatter textUsageFormatter0 = new TextUsageFormatter();
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      PdfFileParam pdfFileParam0 = new PdfFileParam("PdfFlePaa.wrieabl", "PdfFlePaa.wrieabl");
      linkedList0.add((Parameter) pdfFileParam0);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      pdfFileParam0.setMultiValued(true);
      String string0 = textUsageFormatter0.formatUsage("PdfFlePaa.wrieabl - PdfFlePaa.wrieabl\n\nUsage: PdfFlePaa.wrieabl \n\nwhere:\n", "PdfFlePaa.wrieabl - PdfFlePaa.wrieabl\n\nUsage: PdfFlePaa.wrieabl \n\nwhere:\n", (Map) hashMap0, (List) linkedList0, true);
      assertEquals("PdfFlePaa.wrieabl - PdfFlePaa.wrieabl\n                                                                            \n                                                                            Usag\n                                                                            e:\n                                                                            PdfF\n                                                                            lePa\n                                                                            a.wr\n                                                                            ieab\n                                                                            l \n                                                                            \n                                                                            wher\n                                                                            e:\n                                                                             -\n                                                                            PdfF\n                                                                            lePa\n                                                                            a.wr\n                                                                            ieab\n                                                                            l -\n                                                                            PdfF\n                                                                            lePa\n                                                                            a.wr\n                                                                            ieab\n                                                                            l\n                                                                            \n                                                                            Usag\n                                                                            e:\n                                                                            PdfF\n                                                                            lePa\n                                                                            a.wr\n                                                                            ieab\n                                                                            l \n                                                                            \n                                                                            wher\n                                                                            e:\n\n\nUsage: PdfFlePaa.wrieabl - PdfFlePaa.wrieabl\n\nUsage: PdfFlePaa.wrieabl \n\nwhere:\n [PdfFlePaa.wrieabl],[PdfFlePaa.wrieabl]...\n\nwhere:\n\nPdfFlePaa.wrieabl = PdfFlePaa.wrieabl (optional)", string0);
      assertNotNull(string0);
  }

  @Test
  public void test10()  throws Throwable  {
      TextUsageFormatter textUsageFormatter0 = new TextUsageFormatter();
      HashMap<Parameter, Parameter> hashMap0 = new HashMap<Parameter, Parameter>();
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      TimeParam timeParam0 = new TimeParam("Yik)$Mk3J", "Yik)$Mk3J - Yik)$Mk3J\n\nUsage: Yik)$Mk3J options [Yik)$Mk3J]\n\nwhere:\n\nYik)$Mk3J = Yik)$Mk3J (optional)\n\nand options are:\n\n-Yik)$Mk3J <n> Yik)$Mk3J (required)\n\nOption tags are not case sensitive, and may be truncated as long as they remain unambiguous.  Option tags must be separated from their corresponding values by whitespace, or by an equal sign.  Boolean options (options that require no associated value) may be specified alone (=true), or as 'tag=value' where value is 'true' or 'false'.", true, true, true);
      hashMap0.put((Parameter) null, (Parameter) timeParam0);
      // Undeclared exception!
      try {
        textUsageFormatter0.formatUsage("Yik)$Mk3J", "Yik)$Mk3J", (Map) hashMap0, (List) linkedList0, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
        /*
         * String index out of range: -1
         */
      }
  }
}
