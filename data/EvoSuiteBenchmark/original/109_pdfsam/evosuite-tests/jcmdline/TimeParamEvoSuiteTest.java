/*
 * This file was automatically generated by EvoSuite
 */

package jcmdline;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Collection;
import java.util.Date;
import jcmdline.CmdLineException;
import jcmdline.TimeParam;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TimeParamEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      TimeParam timeParam0 = new TimeParam("AbstracfFarameteS.specifiedMreThanOnce", "AbstracfFarameteS.specifiedMreThanOnce");
      try {
        timeParam0.addValue("AbstracfFarameteS.specifiedMreThanOnce");
        fail("Expecting exception: CmdLineException");
      } catch(CmdLineException e) {
        /*
         * Invalid time format (AbstracfFarameteS.specifiedMreThanOnce), expecting \"HH:mm[:ss[:SSS]]\"
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      TimeParam timeParam0 = new TimeParam("aMuE~&u~", "aMuE~&u~", true);
      try {
        timeParam0.setValue("000");
        fail("Expecting exception: CmdLineException");
      } catch(CmdLineException e) {
        /*
         * Invalid time format (000), expecting \"HH:mm[:ss[:SSS]]\"
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      TimeParam timeParam0 = new TimeParam("h>:suGskJ}KbP@", "h>:suGskJ}KbP@", false);
      Date date0 = new Date();
      // Undeclared exception!
      try {
        timeParam0.getDate(date0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      TimeParam timeParam0 = new TimeParam("pPC}y:", "pPC}y:");
      int int0 = timeParam0.getDefaultMilliSeconds();
      assertEquals(0, int0);
      assertEquals(true, timeParam0.isOptional());
      assertEquals(false, timeParam0.isMultiValued());
      assertEquals("HH:mm[:ss[:SSS]]", timeParam0.getOptionLabel());
      assertEquals(0, timeParam0.getDefaultSeconds());
      assertEquals(false, timeParam0.isHidden());
  }

  @Test
  public void test4()  throws Throwable  {
      String[] stringArray0 = new String[2];
      TimeParam timeParam0 = new TimeParam("<lTItG{es7", "<lTItG{es7", stringArray0, false, false);
      int int0 = timeParam0.getDefaultSeconds();
      assertEquals(0, int0);
      assertEquals(false, timeParam0.isMultiValued());
      assertEquals(false, timeParam0.isHidden());
      assertEquals(0, timeParam0.getDefaultMilliSeconds());
      assertEquals(false, timeParam0.isOptional());
      assertEquals("HH:mm[:ss[:SSS]]", timeParam0.getOptionLabel());
  }

  @Test
  public void test5()  throws Throwable  {
      String[] stringArray0 = new String[3];
      TimeParam timeParam0 = new TimeParam("arametr.val}otAccep?bleVal", "arametr.val}otAccep?bleVal", stringArray0, true);
      // Undeclared exception!
      try {
        timeParam0.setDefaultSeconds((-994));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Invalid seconds value specified (-994) must be between 0 and 59, inclusive.
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "(#U`x";
      TimeParam timeParam0 = new TimeParam("(#U`x", "(#U`x", stringArray0, false, false);
      timeParam0.setValue("(#U`x");
      assertEquals(true, timeParam0.isSet());
      
      // Undeclared exception!
      try {
        timeParam0.getMilliValues();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * java.lang.NumberFormatException: For input string: \"(#\"
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      String[] stringArray0 = new String[2];
      TimeParam timeParam0 = new TimeParam("<lTItG{es7", "<lTItG{es7", stringArray0, false, false);
      String[] stringArray1 = timeParam0.getAcceptableValues();
      assertEquals(false, timeParam0.isMultiValued());
      assertEquals("HH:mm[:ss[:SSS]]", timeParam0.getOptionLabel());
      assertNotNull(stringArray1);
      assertEquals(false, timeParam0.isOptional());
      assertEquals(0, timeParam0.getDefaultMilliSeconds());
      assertEquals(0, timeParam0.getDefaultSeconds());
      assertEquals(false, timeParam0.isHidden());
  }

  @Test
  public void test8()  throws Throwable  {
      TimeParam timeParam0 = new TimeParam("(#U`Ux", "(#U`Ux", false, false, false);
      // Undeclared exception!
      try {
        timeParam0.getFullValue();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      TimeParam timeParam0 = new TimeParam("76}|x", "76}|x", true, true);
      try {
        timeParam0.addValue("76}|x");
        fail("Expecting exception: CmdLineException");
      } catch(CmdLineException e) {
        /*
         * Invalid time format (76}|x), expecting \"HH:mm[:ss[:SSS]]\"
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      TimeParam timeParam0 = new TimeParam("|anPX<RIPrXa", "|anPX<RIPrXa");
      // Undeclared exception!
      try {
        timeParam0.getMilliValue();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[8];
      TimeParam timeParam0 = new TimeParam("!~6zX", "!~6zX", stringArray0);
      // Undeclared exception!
      try {
        timeParam0.setDefaultMilliSeconds(1880);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Invalid milliseconds value specified (1,880) must be between 0 and 999, inclusive.
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "<lTItG{es7";
      stringArray0[1] = "<lTItG{es7";
      TimeParam timeParam0 = new TimeParam("<lTItG{es7", "<lTItG{es7", stringArray0, false, false);
      try {
        timeParam0.addValue("\n   ");
        fail("Expecting exception: CmdLineException");
      } catch(CmdLineException e) {
        /*
         * Invalid value \"
         *    \" specified for <<lTItG{es7>, expecting one of: 
         *    <lTItG{es7
         *    <lTItG{es7
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      TimeParam timeParam0 = new TimeParam("O?LZ;.?bt:000", "O?LZ;.?bt:000", false, false, false);
      Date date0 = new Date();
      timeParam0.getDates(date0);
      assertEquals(1372785660332L, date0.getTime());
  }

  @Test
  public void test14()  throws Throwable  {
      TimeParam timeParam0 = new TimeParam("HH:m}m:ss:SSS", "HH:m}m:ss:SSS");
      long[] longArray0 = timeParam0.getMilliValues();
      assertEquals(true, timeParam0.isOptional());
      assertEquals(0, timeParam0.getDefaultSeconds());
      assertEquals(0, timeParam0.getDefaultMilliSeconds());
      assertEquals(false, timeParam0.isMultiValued());
      assertEquals(false, timeParam0.isHidden());
      assertNotNull(longArray0);
      assertEquals("HH:mm[:ss[:SSS]]", timeParam0.getOptionLabel());
  }

  @Test
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "(#U`x";
      TimeParam timeParam0 = new TimeParam("(#U`x", "(#U`x", stringArray0, false, false);
      timeParam0.setValue("(#U`x");
      assertEquals(true, timeParam0.isSet());
      
      timeParam0.getFullValues();
      assertEquals(false, timeParam0.isOptional());
  }

  @Test
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[4];
      TimeParam timeParam0 = new TimeParam("38UQ`[L", "38UQ`[L", stringArray0, true);
      timeParam0.setDefaultSeconds(5);
      assertEquals(5, timeParam0.getDefaultSeconds());
      assertEquals(false, timeParam0.isHidden());
  }

  @Test
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[6];
      TimeParam timeParam0 = new TimeParam("TimeParam.invalidMilliSeconds", "TimeParam.invalidMilliSeconds", stringArray0, true);
      // Undeclared exception!
      try {
        timeParam0.setDefaultSeconds(1338);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Invalid seconds value specified (1,338) must be between 0 and 59, inclusive.
         */
      }
  }

  @Test
  public void test18()  throws Throwable  {
      TimeParam timeParam0 = new TimeParam("T]5Xy+1", "T]5Xy+1", true, true, true);
      // Undeclared exception!
      try {
        timeParam0.setDefaultMilliSeconds((-234));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Invalid milliseconds value specified (-234) must be between 0 and 999, inclusive.
         */
      }
  }

  @Test
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[4];
      TimeParam timeParam0 = new TimeParam("38UQ`[L", "38UQ`[L", stringArray0, true);
      timeParam0.setDefaultMilliSeconds(5);
      assertEquals(5, timeParam0.getDefaultMilliSeconds());
      assertEquals(0, timeParam0.getDefaultSeconds());
  }

  @Test
  public void test20()  throws Throwable  {
      TimeParam timeParam0 = new TimeParam("(#U`Ux", "(#U`Ux", false, false, false);
      timeParam0.setAcceptableValues((Collection) null);
      assertEquals(false, timeParam0.isMultiValued());
      assertEquals(0, timeParam0.getDefaultMilliSeconds());
      assertEquals(false, timeParam0.isOptional());
      assertEquals(0, timeParam0.getDefaultSeconds());
      assertEquals("HH:mm[:ss[:SSS]]", timeParam0.getOptionLabel());
      assertEquals(false, timeParam0.isHidden());
  }

  @Test
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[1];
      TimeParam timeParam0 = new TimeParam("(#U`x", "(#U`x", stringArray0, false, false);
      Collection<Object> collection0 = timeParam0.getValues();
      timeParam0.setAcceptableValues(collection0);
      assertEquals(false, timeParam0.isMultiValued());
      assertEquals(0, timeParam0.getDefaultMilliSeconds());
      assertEquals(false, timeParam0.isOptional());
      assertEquals("HH:mm[:ss[:SSS]]", timeParam0.getOptionLabel());
      assertEquals(0, timeParam0.getDefaultSeconds());
      assertEquals(false, timeParam0.isHidden());
  }

  @Test
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "(#U`x";
      TimeParam timeParam0 = new TimeParam("(#U`x", "(#U`x", stringArray0, false, false);
      timeParam0.setValue("(#U`x");
      assertEquals(true, timeParam0.isSet());
      
      Collection<Object> collection0 = timeParam0.getValues();
      timeParam0.setAcceptableValues(collection0);
      assertEquals(false, timeParam0.isOptional());
  }

  @Test
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[8];
      TimeParam timeParam0 = new TimeParam("!~6zX", "!~6zX", stringArray0);
      timeParam0.setAcceptableValues((String[]) null);
      assertEquals(false, timeParam0.isMultiValued());
      assertEquals("HH:mm[:ss[:SSS]]", timeParam0.getOptionLabel());
      assertEquals(false, timeParam0.isHidden());
      assertEquals(true, timeParam0.isOptional());
      assertEquals(0, timeParam0.getDefaultSeconds());
      assertEquals(0, timeParam0.getDefaultMilliSeconds());
  }

  @Test
  public void test24()  throws Throwable  {
      TimeParam timeParam0 = new TimeParam("pPC}y:", "pPC}y:");
      String[] stringArray0 = timeParam0.getFullValues();
      assertNotNull(stringArray0);
      
      timeParam0.setAcceptableValues(stringArray0);
      assertEquals(0, timeParam0.getDefaultMilliSeconds());
      assertEquals("HH:mm[:ss[:SSS]]", timeParam0.getOptionLabel());
      assertEquals(false, timeParam0.isHidden());
      assertEquals(true, timeParam0.isOptional());
      assertEquals(false, timeParam0.isMultiValued());
      assertEquals(0, timeParam0.getDefaultSeconds());
  }
}
