/*
 * This file was automatically generated by EvoSuite
 */

package jcmdline;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.util.Collection;
import java.util.List;
import jcmdline.BooleanParam;
import jcmdline.CmdLineHandler;
import jcmdline.CmdLineParser;
import jcmdline.DefaultCmdLineHandler;
import jcmdline.FileParam;
import jcmdline.HelpCmdLineHandler;
import jcmdline.LoggerCmdLineHandler;
import jcmdline.Parameter;
import jcmdline.PosixCmdLineParser;
import jcmdline.StringParam;
import jcmdline.VersionCmdLineHandler;
import org.evosuite.runtime.System;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class AbstractHandlerDecoratorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      FileParam fileParam0 = new FileParam("lEOJL0`adK#", "lEOJL0`adK#", false);
      Collection<Object> collection0 = fileParam0.getValues();
      VersionCmdLineHandler versionCmdLineHandler0 = new VersionCmdLineHandler("lEOJL0`adK#", "lEOJL0`adK#", "lEOJL0`adK#", (Collection) collection0, (Collection) collection0);
      // Undeclared exception!
      try {
        versionCmdLineHandler0.exitUsageError("lEOJL0`adK#");
        fail("Expecting exception: System.SystemExitException");
      } catch(System.SystemExitException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[7];
      StringParam stringParam0 = new StringParam("3NzJslFe0`3WUqj", "3NzJslFe0`3WUqj", stringArray0, true, true);
      Collection<Object> collection0 = stringParam0.getValues();
      VersionCmdLineHandler versionCmdLineHandler0 = new VersionCmdLineHandler("3NzJslFe0`3WUqj", "3NzJslFe0`3WUqj", "3NzJslFe0`3WUqj", (Collection) collection0, (Collection) collection0);
      versionCmdLineHandler0.setCmdName("3NzJslFe0`3WUqj");
      assertEquals("3NzJslFe0`3WUqj", versionCmdLineHandler0.getCmdDesc());
  }

  @Test
  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[6];
      StringParam stringParam0 = new StringParam("c6_[9XVu/i", "c6_[9XVu/i", stringArray0, true, false);
      Collection<Object> collection0 = stringParam0.getValues();
      HelpCmdLineHandler helpCmdLineHandler0 = new HelpCmdLineHandler("c6_[9XVu/i", "c6_[9XVu/i", "c6_[9XVu/i", "c6_[9XVu/i", (Collection) collection0, (Collection) collection0);
      assertNotNull(helpCmdLineHandler0);
      
      Collection<Object> collection1 = helpCmdLineHandler0.getOptions();
      assertEquals(6, collection1.size());
      assertNotNull(collection1);
  }

  @Test
  public void test3()  throws Throwable  {
      String[] stringArray0 = new String[10];
      StringParam stringParam0 = new StringParam("fFU2,3~2]Uv\"\"t", "02lEk.MJ2c}", stringArray0, false, false);
      Collection<Object> collection0 = stringParam0.getValues();
      DefaultCmdLineHandler defaultCmdLineHandler0 = new DefaultCmdLineHandler("fFU2,3~2]Uv\"\"t", "fFU2,3~2]Uv\"\"t", (Collection) collection0, (Collection) collection0);
      Parameter parameter0 = defaultCmdLineHandler0.getArg("fFU2,3~2]Uv\"\"t");
      assertNull(parameter0);
  }

  @Test
  public void test4()  throws Throwable  {
      String[] stringArray0 = new String[7];
      StringParam stringParam0 = new StringParam("3NzJslFe0`3WUqj", "3NzJslFe0`3WUqj", stringArray0, true, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(10);
      Collection<Object> collection0 = stringParam0.getValues();
      HelpCmdLineHandler helpCmdLineHandler0 = new HelpCmdLineHandler("3NzJslFe0`3WUqj", "3NzJslFe0`3WUqj", "3NzJslFe0`3WUqj", "3NzJslFe0`3WUqj", "3NzJslFe0`3WUqj", (Collection) collection0, (Collection) collection0);
      assertNotNull(helpCmdLineHandler0);
      
      List<Object> list0 = helpCmdLineHandler0.getArgs();
      assertNotNull(list0);
      
      LoggerCmdLineHandler loggerCmdLineHandler0 = new LoggerCmdLineHandler((OutputStream) byteArrayOutputStream0, "3NzJslFe0`3WUqj", "3NzJslFe0`3WUqj", (Collection) list0, (Collection) list0);
      loggerCmdLineHandler0.setDieOnParseError(true);
      assertEquals(true, loggerCmdLineHandler0.getDieOnParseError());
  }

  @Test
  public void test5()  throws Throwable  {
      FileParam fileParam0 = new FileParam("lEOJL0`adK#", "lEOJL0`adK#", false);
      Collection<Object> collection0 = fileParam0.getValues();
      DefaultCmdLineHandler defaultCmdLineHandler0 = new DefaultCmdLineHandler("lEOJL0`adK#", "lEOJL0`adK#", (Collection) collection0, (Collection) collection0);
      defaultCmdLineHandler0.addArg((Parameter) fileParam0);
      assertEquals(false, fileParam0.isHidden());
  }

  @Test
  public void test6()  throws Throwable  {
      FileParam fileParam0 = new FileParam("lEOJL0`adK#", "lEOJL0`adK#", false);
      Collection<Object> collection0 = fileParam0.getValues();
      DefaultCmdLineHandler defaultCmdLineHandler0 = new DefaultCmdLineHandler("lEOJL0`adK#", "lEOJL0`adK#", (Collection) collection0, (Collection) collection0);
      Parameter[] parameterArray0 = defaultCmdLineHandler0.getCustomOptions();
      assertNotNull(parameterArray0);
  }

  @Test
  public void test7()  throws Throwable  {
      String[] stringArray0 = new String[7];
      StringParam stringParam0 = new StringParam("3NzJslFe0`3WUqj", "3NzJslFe0`3WUqj", stringArray0, true, true);
      Collection<Object> collection0 = stringParam0.getValues();
      VersionCmdLineHandler versionCmdLineHandler0 = new VersionCmdLineHandler("3NzJslFe0`3WUqj", "3NzJslFe0`3WUqj", "3NzJslFe0`3WUqj", (Collection) collection0, (Collection) collection0);
      PosixCmdLineParser posixCmdLineParser0 = (PosixCmdLineParser)versionCmdLineHandler0.getParser();
      versionCmdLineHandler0.setParser((CmdLineParser) posixCmdLineParser0);
      assertEquals("3NzJslFe0`3WUqj", versionCmdLineHandler0.getCmdDesc());
  }

  @Test
  public void test8()  throws Throwable  {
      String[] stringArray0 = new String[10];
      StringParam stringParam0 = new StringParam("fFU2,3~2]Uv\"\"t", "02lEk.MJ2c}", stringArray0, false, false);
      Collection<Object> collection0 = stringParam0.getValues();
      DefaultCmdLineHandler defaultCmdLineHandler0 = new DefaultCmdLineHandler("fFU2,3~2]Uv\"\"t", "fFU2,3~2]Uv\"\"t", (Collection) collection0, (Collection) collection0);
      String string0 = defaultCmdLineHandler0.getCmdName();
      assertEquals("fFU2,3~2]Uv\"\"t", string0);
  }

  @Test
  public void test9()  throws Throwable  {
      String[] stringArray0 = new String[7];
      StringParam stringParam0 = new StringParam("3NzJslFe0`3WUqj", "3NzJslFe0`3WUqj", stringArray0, true, true);
      Collection<Object> collection0 = stringParam0.getValues();
      HelpCmdLineHandler helpCmdLineHandler0 = new HelpCmdLineHandler("3NzJslFe0`3WUqj", "3NzJslFe0`3WUqj", "3NzJslFe0`3WUqj", "3NzJslFe0`3WUqj", "3NzJslFe0`3WUqj", (Collection) collection0, (Collection) collection0);
      Parameter[] parameterArray0 = new Parameter[3];
      // Undeclared exception!
      try {
        helpCmdLineHandler0.setArgs(parameterArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Argument parameter may not be null.
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      Parameter[] parameterArray0 = new Parameter[1];
      BooleanParam booleanParam0 = new BooleanParam("%fw7oE_UFN)sGCFq", "%fw7oE_UFN)sGCFq", true);
      parameterArray0[0] = (Parameter) booleanParam0;
      HelpCmdLineHandler helpCmdLineHandler0 = new HelpCmdLineHandler("%fw7oE_UFN)sGCFq", "%fw7oE_UFN)sGCFq", "%fw7oE_UFN)sGCFq", "%fw7oE_UFN)sGCFq", parameterArray0, parameterArray0);
      String string0 = helpCmdLineHandler0.getParseError();
      assertNull(string0);
  }

  @Test
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[7];
      StringParam stringParam0 = new StringParam("3NzJslFe0`3WUqj", "3NzJslFe0`3WUqj", stringArray0, true, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(10);
      Collection<Object> collection0 = stringParam0.getValues();
      HelpCmdLineHandler helpCmdLineHandler0 = new HelpCmdLineHandler("3NzJslFe0`3WUqj", "3NzJslFe0`3WUqj", "3NzJslFe0`3WUqj", "3NzJslFe0`3WUqj", "3NzJslFe0`3WUqj", (Collection) collection0, (Collection) collection0);
      List<Object> list0 = helpCmdLineHandler0.getArgs();
      LoggerCmdLineHandler loggerCmdLineHandler0 = new LoggerCmdLineHandler((OutputStream) byteArrayOutputStream0, "3NzJslFe0`3WUqj", "3NzJslFe0`3WUqj", (Collection) list0, (Collection) list0);
      Parameter parameter0 = loggerCmdLineHandler0.getOption("3NzJslFe0`3WUqj");
      assertNull(parameter0);
  }

  @Test
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[7];
      StringParam stringParam0 = new StringParam("3NzJslFe0`3WUqj", "3NzJslFe0`3WUqj", stringArray0, true, true);
      Collection<Object> collection0 = stringParam0.getValues();
      HelpCmdLineHandler helpCmdLineHandler0 = new HelpCmdLineHandler("3NzJslFe0`3WUqj", "3NzJslFe0`3WUqj", "3NzJslFe0`3WUqj", "3NzJslFe0`3WUqj", "3NzJslFe0`3WUqj", (Collection) collection0, (Collection) collection0);
      helpCmdLineHandler0.setCmdDesc("3NzJslFe0`3WUqj");
      assertEquals("3NzJslFe0`3WUqj", helpCmdLineHandler0.getCmdDesc());
  }

  @Test
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[10];
      StringParam stringParam0 = new StringParam("fFU2,3~2]Uv\"\"t", "02lEk.MJ2c}", stringArray0, false, false);
      Collection<Object> collection0 = stringParam0.getValues();
      DefaultCmdLineHandler defaultCmdLineHandler0 = new DefaultCmdLineHandler("fFU2,3~2]Uv\"\"t", "fFU2,3~2]Uv\"\"t", (Collection) collection0, (Collection) collection0);
      assertNotNull(defaultCmdLineHandler0);
      
      boolean boolean0 = defaultCmdLineHandler0.getDieOnParseError();
      assertEquals(true, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[6];
      StringParam stringParam0 = new StringParam("c6_[9XVu/i", "c6_[9XVu/i", stringArray0, true, false);
      Collection<Object> collection0 = stringParam0.getValues();
      HelpCmdLineHandler helpCmdLineHandler0 = new HelpCmdLineHandler("c6_[9XVu/i", "c6_[9XVu/i", "c6_[9XVu/i", "c6_[9XVu/i", (Collection) collection0, (Collection) collection0);
      VersionCmdLineHandler versionCmdLineHandler0 = new VersionCmdLineHandler("c6_[9XVu/i", (CmdLineHandler) helpCmdLineHandler0);
      versionCmdLineHandler0.setParseError("]il ZuNe@}ZJWq|");
      assertEquals("]il ZuNe@}ZJWq|", versionCmdLineHandler0.getParseError());
  }

  @Test
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[6];
      StringParam stringParam0 = new StringParam("c6_[9XVu/i", "c6_[9XVu/i", stringArray0, true, false);
      Collection<Object> collection0 = stringParam0.getValues();
      HelpCmdLineHandler helpCmdLineHandler0 = new HelpCmdLineHandler("c6_[9XVu/i", "c6_[9XVu/i", "c6_[9XVu/i", "c6_[9XVu/i", (Collection) collection0, (Collection) collection0);
      assertNotNull(helpCmdLineHandler0);
      
      VersionCmdLineHandler versionCmdLineHandler0 = new VersionCmdLineHandler("c6_[9XVu/i", (CmdLineHandler) helpCmdLineHandler0);
      String string0 = versionCmdLineHandler0.getUsage(true);
      assertEquals("c6_[9XVu/i - c6_[9XVu/i\n\nUsage: c6_[9XVu/i [options] \n\nwhere options are:\n\n-?        prints usage to stdout; exits (optional)\n-h        prints usage to stdout; exits (optional)\n-h!       prints usage (including hidden options) to stdout; exits (optional)\n          (hidden)\n-help     displays verbose help information (optional)\n-help!    displays verbose help information, including hidden parameters\n          (optional) (hidden)\n-license  displays license information (optional)\n-version  displays command's version (optional)\n\nOption tags are not case sensitive, and may be truncated as long as they remain\nunambiguous.  Option tags must be separated from their corresponding values by\nwhitespace, or by an equal sign.  Boolean options (options that require no\nassociated value) may be specified alone (=true), or as 'tag=value' where value\nis 'true' or 'false'.", string0);
      assertNotNull(string0);
  }

  @Test
  public void test16()  throws Throwable  {
      FileParam fileParam0 = new FileParam("lEOJL0`adK#", "lEOJL0`adK#", false);
      Collection<Object> collection0 = fileParam0.getValues();
      DefaultCmdLineHandler defaultCmdLineHandler0 = new DefaultCmdLineHandler("lEOJL0`adK#", "lEOJL0`adK#", (Collection) collection0, (Collection) collection0);
      String string0 = defaultCmdLineHandler0.getCmdDesc();
      assertEquals("lEOJL0`adK#", string0);
  }

  @Test
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[6];
      StringParam stringParam0 = new StringParam("c6_[9XVu/i", "c6_[9XVu/i", stringArray0, true, false);
      Collection<Object> collection0 = stringParam0.getValues();
      HelpCmdLineHandler helpCmdLineHandler0 = new HelpCmdLineHandler("c6_[9XVu/i", "c6_[9XVu/i", "c6_[9XVu/i", "c6_[9XVu/i", (Collection) collection0, (Collection) collection0);
      // Undeclared exception!
      try {
        helpCmdLineHandler0.parse(stringArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[10];
      StringParam stringParam0 = new StringParam("fFU2,3~2]Uv\"\"t", "02lEk.MJ2c}", stringArray0, false, false);
      Parameter[] parameterArray0 = new Parameter[7];
      parameterArray0[0] = (Parameter) stringParam0;
      parameterArray0[1] = (Parameter) stringParam0;
      parameterArray0[2] = (Parameter) stringParam0;
      parameterArray0[3] = (Parameter) stringParam0;
      parameterArray0[4] = (Parameter) stringParam0;
      parameterArray0[5] = (Parameter) stringParam0;
      parameterArray0[6] = (Parameter) stringParam0;
      HelpCmdLineHandler helpCmdLineHandler0 = new HelpCmdLineHandler("fFU2,3~2]Uv\"\"t", "02lEk.MJ2c}", "02lEk.MJ2c}", "fFU2,3~2]Uv\"\"t", parameterArray0, parameterArray0);
      helpCmdLineHandler0.setOptions(parameterArray0);
      assertEquals("fFU2,3~2]Uv\"\"t", helpCmdLineHandler0.getCmdDesc());
  }
}
