/*
 * This file was automatically generated by EvoSuite
 */

package jcmdline;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedList;
import jcmdline.CmdLineException;
import jcmdline.DateTimeParam;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DateTimeParamEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DateTimeParam dateTimeParam0 = new DateTimeParam(".mW-FG}Gktj7", ".mW-FG}Gktj7");
      assertNotNull(dateTimeParam0);
      
      Date[] dateArray0 = dateTimeParam0.getDates();
      assertNotNull(dateArray0);
      
      DateTimeParam dateTimeParam1 = new DateTimeParam(".mW-FG}Gktj7", ".mW-FG}Gktj7", dateArray0, true, true);
      assertEquals(false, dateTimeParam0.isMultiValued());
      assertEquals(false, dateTimeParam0.isHidden());
      assertEquals("MM/dd/yyyy HH:mm[:ss[:SSS]]", dateTimeParam0.getOptionLabel());
      assertEquals(true, dateTimeParam1.isOptional());
      assertEquals(0, dateTimeParam0.getDefaultSeconds());
      assertEquals(0, dateTimeParam0.getDefaultMilliSeconds());
      assertEquals(0, dateTimeParam1.getDefaultSeconds());
      assertEquals(false, dateTimeParam1.isHidden());
      assertEquals(true, dateTimeParam1.isMultiValued());
      assertEquals("MM/dd/yyyy HH:mm[:ss[:SSS]]", dateTimeParam1.getOptionLabel());
      assertNotNull(dateTimeParam1);
      assertEquals(true, dateTimeParam0.isOptional());
      assertEquals(0, dateTimeParam1.getDefaultMilliSeconds());
  }

  @Test
  public void test1()  throws Throwable  {
      DateTimeParam dateTimeParam0 = new DateTimeParam("AbstractParameter.descTooShort", "AbstractParameter.descTooShort", true, true);
      assertNotNull(dateTimeParam0);
      
      // Undeclared exception!
      try {
        dateTimeParam0.setAcceptableValues((Collection) null);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      Date[] dateArray0 = new Date[1];
      Date date0 = new Date();
      dateArray0[0] = date0;
      assertEquals(1372786723025L, dateArray0[0].getTime());
      
      DateTimeParam dateTimeParam0 = new DateTimeParam("#L%\"/,/z|vu\"$&:guWA", "#L%\"/,/z|vu\"$&:guWA", dateArray0);
      int int0 = dateTimeParam0.getDefaultMilliSeconds();
      assertEquals(0, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      DateTimeParam dateTimeParam0 = new DateTimeParam(".mW-FG}Gktj7", ".mW-FG}Gktj7");
      assertNotNull(dateTimeParam0);
      
      dateTimeParam0.setDefaultSeconds((-347));
      assertEquals(-347, dateTimeParam0.getDefaultSeconds());
      assertEquals(false, dateTimeParam0.isHidden());
  }

  @Test
  public void test4()  throws Throwable  {
      String string0 = DateTimeParam.getParseFormat();
      assertEquals("MM/dd/yyyy HH:mm:ss:SSS", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      DateTimeParam dateTimeParam0 = new DateTimeParam("Bv<hD5q1iH!!|rI-", "Bv<hD5q1iH!!|rI-");
      assertNotNull(dateTimeParam0);
      
      try {
        dateTimeParam0.addValue("Bv<hD5q1iH!!|rI-");
        fail("Expecting exception: CmdLineException");
      } catch(CmdLineException e) {
        /*
         * Invalid date specified for <Bv<hD5q1iH!!|rI->, expecting MM/dd/yyyy HH:mm[:ss[:SSS]]
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      DateTimeParam dateTimeParam0 = new DateTimeParam("(%d]B$Vp0Ga", "(%d]B$Vp0Ga", true, true, true);
      assertNotNull(dateTimeParam0);
      
      int int0 = dateTimeParam0.getDefaultSeconds();
      assertEquals(0, dateTimeParam0.getDefaultMilliSeconds());
      assertEquals(true, dateTimeParam0.isMultiValued());
      assertEquals(true, dateTimeParam0.isOptional());
      assertEquals("MM/dd/yyyy HH:mm[:ss[:SSS]]", dateTimeParam0.getOptionLabel());
      assertEquals(true, dateTimeParam0.isHidden());
      assertEquals(0, int0);
  }

  @Test
  public void test7()  throws Throwable  {
      DateTimeParam dateTimeParam0 = new DateTimeParam("O05]8`od>GZ6Z_z>8)JC", "O05]8`od>GZ6Z_z>8)JC", true, true);
      assertNotNull(dateTimeParam0);
      
      String[] stringArray0 = new String[11];
      // Undeclared exception!
      try {
        dateTimeParam0.setAcceptableValues(stringArray0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      DateTimeParam dateTimeParam0 = new DateTimeParam("HH:mm[:ss[:SSS]]", "HH:mm[:ss[:SSS]]");
      assertNotNull(dateTimeParam0);
      
      dateTimeParam0.setDefaultMilliSeconds(200);
      assertEquals(200, dateTimeParam0.getDefaultMilliSeconds());
      assertEquals("MM/dd/yyyy HH:mm[:ss[:SSS]]", dateTimeParam0.getOptionLabel());
  }

  @Test
  public void test9()  throws Throwable  {
      DateTimeParam dateTimeParam0 = new DateTimeParam("HH:mm[:ss[:SSS]]", "HH:mm[:ss[:SSS]]", true);
      assertEquals(0, dateTimeParam0.getDefaultMilliSeconds());
      assertEquals("MM/dd/yyyy HH:mm[:ss[:SSS]]", dateTimeParam0.getOptionLabel());
      assertNotNull(dateTimeParam0);
      assertEquals(false, dateTimeParam0.isMultiValued());
      assertEquals(0, dateTimeParam0.getDefaultSeconds());
      assertEquals(false, dateTimeParam0.isHidden());
      assertEquals(true, dateTimeParam0.isOptional());
  }

  @Test
  public void test10()  throws Throwable  {
      DateTimeParam dateTimeParam0 = new DateTimeParam("(%d]B$Vp0Ga", "(%d]B$Vp0Ga", true, true, true);
      assertNotNull(dateTimeParam0);
      
      dateTimeParam0.getDate();
      assertEquals(0, dateTimeParam0.getDefaultSeconds());
      assertEquals(true, dateTimeParam0.isMultiValued());
      assertEquals(true, dateTimeParam0.isHidden());
      assertEquals(true, dateTimeParam0.isOptional());
      assertEquals(0, dateTimeParam0.getDefaultMilliSeconds());
      assertEquals("MM/dd/yyyy HH:mm[:ss[:SSS]]", dateTimeParam0.getOptionLabel());
  }

  @Test
  public void test11()  throws Throwable  {
      Date[] dateArray0 = new Date[1];
      Date date0 = new Date();
      dateArray0[0] = date0;
      assertEquals(1372786725510L, dateArray0[0].getTime());
      
      DateTimeParam dateTimeParam0 = new DateTimeParam("#L%\"/,/z|vu\"$&:guWA", "#L%\"/,/z|vu\"$&:guWA", dateArray0);
      dateTimeParam0.getAcceptableDates();
      assertEquals(true, dateTimeParam0.isOptional());
  }

  @Test
  public void test12()  throws Throwable  {
      DateTimeParam dateTimeParam0 = new DateTimeParam("HH:mm[:ss[:SSS]]", "HH:mm[:ss[:SSS]]");
      assertNotNull(dateTimeParam0);
      
      dateTimeParam0.getAcceptableDates();
      assertEquals("MM/dd/yyyy HH:mm[:ss[:SSS]]", dateTimeParam0.getOptionLabel());
      assertEquals(0, dateTimeParam0.getDefaultMilliSeconds());
      assertEquals(true, dateTimeParam0.isOptional());
      assertEquals(false, dateTimeParam0.isHidden());
      assertEquals(0, dateTimeParam0.getDefaultSeconds());
      assertEquals(false, dateTimeParam0.isMultiValued());
  }

  @Test
  public void test13()  throws Throwable  {
      DateTimeParam dateTimeParam0 = new DateTimeParam("HH:mm[:ss[:SSS]]", "HH:mm[:ss[:SSS]]");
      assertNotNull(dateTimeParam0);
      
      LinkedList<Date> linkedList0 = new LinkedList<Date>();
      Date date0 = new Date();
      linkedList0.add(date0);
      assertEquals(1372786726427L, date0.getTime());
      
      dateTimeParam0.setAcceptableDates((Collection) linkedList0);
      assertEquals(true, dateTimeParam0.isOptional());
  }
}
