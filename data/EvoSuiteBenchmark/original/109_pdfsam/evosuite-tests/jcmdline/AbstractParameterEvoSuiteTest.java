/*
 * This file was automatically generated by EvoSuite
 */

package jcmdline;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Collection;
import java.util.Date;
import jcmdline.BooleanParam;
import jcmdline.CmdLineException;
import jcmdline.DateParam;
import jcmdline.DateTimeParam;
import jcmdline.FileParam;
import jcmdline.IntParam;
import jcmdline.LongParam;
import jcmdline.PdfFileParam;
import jcmdline.StringParam;
import jcmdline.TimeParam;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class AbstractParameterEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BooleanParam booleanParam0 = new BooleanParam("0^I;X!D*1%4", "0^I;X!D*1%4", true);
      assertNotNull(booleanParam0);
      
      String string0 = booleanParam0.getValue();
      assertEquals(true, booleanParam0.isHidden());
      assertNotNull(string0);
      assertEquals(false, booleanParam0.isMultiValued());
      assertEquals(true, booleanParam0.isOptional());
  }

  @Test
  public void test1()  throws Throwable  {
      FileParam fileParam0 = new FileParam("sJ2:N>>;", "sJ2:N>>;", 65514, false, false);
      String[] stringArray0 = fileParam0.getAcceptableValues();
      assertNull(stringArray0);
  }

  @Test
  public void test2()  throws Throwable  {
      BooleanParam booleanParam0 = new BooleanParam("7B4.[}*e!)qw4(wm;", "7B4.[}*e!)qw4(wm;");
      assertNotNull(booleanParam0);
      
      boolean boolean0 = booleanParam0.getIgnoreRequired();
      assertEquals(false, booleanParam0.isMultiValued());
      assertEquals(false, booleanParam0.isHidden());
      assertEquals(true, booleanParam0.isOptional());
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      FileParam fileParam0 = new FileParam("sJ2:N>>;", "sJ2:N>>;", 65514, false, false);
      assertNotNull(fileParam0);
      
      boolean boolean0 = fileParam0.isHidden();
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      String[] stringArray0 = new String[1];
      TimeParam timeParam0 = new TimeParam("|9emfo>jpv`PU;#Q", "|9emfo>jpv`PU;#Q", stringArray0, true, true, true);
      assertNotNull(timeParam0);
      
      boolean boolean0 = timeParam0.isOptional();
      assertEquals(true, timeParam0.isHidden());
      assertEquals(true, timeParam0.isMultiValued());
      assertEquals(true, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      DateParam dateParam0 = new DateParam("PdfFileParam.a", "PdfFileParam.a", false, false);
      assertNotNull(dateParam0);
      
      dateParam0.setIgnoreRequired(false);
      assertEquals(false, dateParam0.isMultiValued());
      assertEquals(false, dateParam0.isHidden());
      assertEquals(false, dateParam0.isOptional());
      assertEquals(false, dateParam0.getIgnoreRequired());
  }

  @Test
  public void test6()  throws Throwable  {
      TimeParam timeParam0 = new TimeParam("PdfFileParam.a", "PdfFileParam.a");
      assertNotNull(timeParam0);
      
      String string0 = timeParam0.getDesc();
      assertEquals(true, timeParam0.isOptional());
      assertEquals(false, timeParam0.isHidden());
      assertEquals(false, timeParam0.isMultiValued());
      assertNotNull(string0);
  }

  @Test
  public void test7()  throws Throwable  {
      DateParam dateParam0 = new DateParam("PdfFileParam.a", "PdfFileParam.a", false, false);
      assertNotNull(dateParam0);
      
      dateParam0.setValue("07/02/2013 18:16:53:872");
      assertEquals(true, dateParam0.isSet());
      assertEquals(false, dateParam0.isMultiValued());
  }

  @Test
  public void test8()  throws Throwable  {
      Date[] dateArray0 = new Date[1];
      Date date0 = new Date();
      dateArray0[0] = date0;
      assertEquals(1372785703633L, dateArray0[0].getTime());
      
      DateParam dateParam0 = new DateParam("TH^'0ZjW([o5gYJC", "TH^'0ZjW([o5gYJC", dateArray0, false, false, false);
      dateParam0.getTag();
      assertEquals(false, dateParam0.isMultiValued());
  }

  @Test
  public void test9()  throws Throwable  {
      BooleanParam booleanParam0 = new BooleanParam("`p$ AC;l>!:`KY`", "`p$ AC;l>!:`KY`");
      assertNotNull(booleanParam0);
      
      boolean boolean0 = booleanParam0.isSet();
      assertEquals(false, boolean0);
      assertEquals(true, booleanParam0.isOptional());
      assertEquals(false, booleanParam0.isHidden());
      assertEquals(false, booleanParam0.isMultiValued());
  }

  @Test
  public void test10()  throws Throwable  {
      PdfFileParam pdfFileParam0 = new PdfFileParam("PdfFileParam.a", "PdfFileParam.a", (-720), false, false);
      assertNotNull(pdfFileParam0);
      
      boolean boolean0 = pdfFileParam0.isMultiValued();
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      LongParam longParam0 = new LongParam("`p$ AC;l>!:`KY`", "`p$ AC;l>!:`KY`", true, true);
      assertNotNull(longParam0);
      
      Collection<Object> collection0 = longParam0.getValues();
      assertNotNull(collection0);
      
      PdfFileParam pdfFileParam0 = new PdfFileParam("`p$ AC;l>!:`KY`", "`p$ AC;l>!:`KY`", true);
      pdfFileParam0.setAcceptableValues(collection0);
      assertEquals(true, longParam0.isOptional());
      assertEquals(false, longParam0.isHidden());
      assertEquals(true, longParam0.isMultiValued());
  }

  @Test
  public void test12()  throws Throwable  {
      DateTimeParam dateTimeParam0 = null;
      try {
        dateTimeParam0 = new DateTimeParam("true", "true");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Description for true must be at least 5 characters.
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[6];
      TimeParam timeParam0 = null;
      try {
        timeParam0 = new TimeParam((String) null, (String) null, stringArray0, true, true, true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * A tag may not be an empty string.
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      PdfFileParam pdfFileParam0 = null;
      try {
        pdfFileParam0 = new PdfFileParam("", "", (-720));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * A tag may not be an empty string.
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      BooleanParam booleanParam0 = null;
      try {
        booleanParam0 = new BooleanParam("L('D9B=djBl[", "L('D9B=djBl[", true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Parameter tag <L('D9B=djBl[> contains illegal character <=>.
         * Valid characters are letters, numbers, _, and -.
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      StringParam stringParam0 = new StringParam("MM/dd/yyyy", "MM/dd/yyyy", (String[]) null, false, false);
      assertNull(stringParam0.getValue());
  }

  @Test
  public void test17()  throws Throwable  {
      DateTimeParam dateTimeParam0 = new DateTimeParam("`p$ AC;l>!:`KY`", "`p$ AC;l>!:`KY`", true, true);
      assertNotNull(dateTimeParam0);
      
      LongParam longParam0 = new LongParam("`p$ AC;l>!:`KY`", "`p$ AC;l>!:`KY`", true, true);
      Collection<Object> collection0 = longParam0.getValues();
      assertNotNull(collection0);
      
      dateTimeParam0.setAcceptableDates(collection0);
      assertEquals(false, dateTimeParam0.isHidden());
      assertEquals(true, dateTimeParam0.isOptional());
      assertEquals(true, dateTimeParam0.isMultiValued());
      assertEquals(true, longParam0.isOptional());
  }

  @Test
  public void test18()  throws Throwable  {
      BooleanParam booleanParam0 = new BooleanParam("7B4.[}*e!)qw4(wm;", "7B4.[}*e!)qw4(wm;");
      assertNotNull(booleanParam0);
      
      booleanParam0.setAcceptableValues((Collection) null);
      assertEquals(true, booleanParam0.isOptional());
      assertEquals(false, booleanParam0.isMultiValued());
      assertEquals(false, booleanParam0.isHidden());
  }

  @Test
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[2];
      IntParam intParam0 = new IntParam("|9emfo>jpv`PU;#Q", "|9emfo>jpv`PU;#Q", intArray0, true);
      assertNotNull(intParam0);
      
      BooleanParam booleanParam0 = new BooleanParam("|9emfo>jpv`PU;#Q", "|9emfo>jpv`PU;#Q");
      assertNotNull(booleanParam0);
      
      Collection<Object> collection0 = booleanParam0.getValues();
      assertNotNull(collection0);
      
      intParam0.setAcceptableValues(collection0);
      assertEquals(false, intParam0.isHidden());
      assertEquals(false, intParam0.isMultiValued());
      assertEquals(true, booleanParam0.isOptional());
  }

  @Test
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[1];
      TimeParam timeParam0 = new TimeParam("|9emfo>jpvRx`PU;#Q", "|9emfo>jpvRx`PU;#Q", stringArray0, false, false, false);
      assertNotNull(timeParam0);
      
      String[] stringArray1 = new String[3];
      stringArray1[0] = "|9emfo>jpvRx`PU;#Q";
      stringArray0[0] = "|9emfo>jpvRx`PU;#Q";
      try {
        timeParam0.setValues(stringArray1);
        fail("Expecting exception: CmdLineException");
      } catch(CmdLineException e) {
        /*
         * <|9emfo>jpvRx`PU;#Q> may only be specified once.
         */
      }
  }

  @Test
  public void test21()  throws Throwable  {
      TimeParam timeParam0 = new TimeParam("PdfFileParam.a", "PdfFileParam.a");
      assertNotNull(timeParam0);
      
      PdfFileParam pdfFileParam0 = new PdfFileParam("PdfFileParam.a", "PdfFileParam.a", (-720), false, false);
      Collection<Object> collection0 = pdfFileParam0.getPdfFiles();
      timeParam0.setValues(collection0);
      assertEquals(true, timeParam0.isOptional());
      assertEquals(false, timeParam0.isHidden());
      assertEquals(false, timeParam0.isMultiValued());
  }

  @Test
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[2];
      IntParam intParam0 = new IntParam("|9emfo>jpv`PU;#Q", "|9emfo>jpv`PU;#Q", intArray0, true);
      assertNotNull(intParam0);
      
      BooleanParam booleanParam0 = new BooleanParam("|9emfo>jpv`PU;#Q", "|9emfo>jpv`PU;#Q");
      assertNotNull(booleanParam0);
      
      Collection<Object> collection0 = booleanParam0.getValues();
      assertNotNull(collection0);
      
      try {
        intParam0.setValues(collection0);
        fail("Expecting exception: CmdLineException");
      } catch(CmdLineException e) {
        /*
         * Invalid value \"false\" specified for <|9emfo>jpv`PU;#Q>, expecting one of: 
         *    0
         *    0
         */
      }
  }

  @Test
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[1];
      TimeParam timeParam0 = new TimeParam("|9emfo>jpv`PU;#Q", "|9emfo>jpv`PU;#Q", stringArray0, true, true, true);
      assertNotNull(timeParam0);
      
      String[] stringArray1 = new String[3];
      stringArray1[0] = "|9emfo>jpv`PU;#Q";
      stringArray1[1] = "|9emfo>jpv`PU;#Q";
      stringArray0[0] = "|9emfo>jpv`PU;#Q";
      stringArray1[2] = "|9emfo>jpv`PU;#Q";
      timeParam0.setValues(stringArray1);
      assertEquals(true, timeParam0.isSet());
      assertEquals(true, timeParam0.isOptional());
  }

  @Test
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[5];
      TimeParam timeParam0 = new TimeParam("hw}4\"u", "hw}4\"u", stringArray0, false, false, false);
      assertNotNull(timeParam0);
      
      Date date0 = new Date();
      // Undeclared exception!
      try {
        timeParam0.getDate(date0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[3];
      StringParam stringParam0 = new StringParam("|9emfo>jpvRx`PU;#Q", "|9emfo>jpvRx`PU;#Q", stringArray0, false, false);
      assertNotNull(stringParam0);
      
      String string0 = stringParam0.getOptionLabel();
      assertEquals("<s>", string0);
      assertNotNull(string0);
  }
}
