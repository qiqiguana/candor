/*
 * This file was automatically generated by EvoSuite
 */

package jcmdline;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import jcmdline.CmdLineException;
import jcmdline.IntParam;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class IntParamEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      IntParam intParam0 = new IntParam("e0iV%)Lz]9YE\"}?", "e0iV%)Lz]9YE\"}?", true, true, true);
      assertNotNull(intParam0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "5";
      // Undeclared exception!
      try {
        intParam0.setValues(stringArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int[] intArray0 = new int[3];
      IntParam intParam0 = new IntParam("tis?F;(psy1&%Jy<", "tis?F;(psy1&%Jy<", intArray0, true);
      assertEquals(2147483647, intParam0.getMax());
      assertEquals(true, intParam0.isOptional());
      assertEquals(false, intParam0.isMultiValued());
      assertEquals(false, intParam0.isHidden());
      assertEquals("<n>", intParam0.getOptionLabel());
      assertNotNull(intParam0);
      assertEquals("tis?F;(psy1&%Jy<", intParam0.getTag());
      assertEquals(-2147483648, intParam0.getMin());
  }

  @Test
  public void test2()  throws Throwable  {
      IntParam intParam0 = new IntParam("|Jp{B>9p9`", "|Jp{B>9p9`", (-191), (-191), true, true);
      assertNotNull(intParam0);
      
      int int0 = intParam0.getMax();
      assertEquals("|Jp{B>9p9`", intParam0.getTag());
      assertEquals(false, intParam0.isHidden());
      assertEquals(true, intParam0.isOptional());
      assertEquals(true, intParam0.isMultiValued());
      assertEquals(-191, intParam0.getMin());
      assertEquals("<n>", intParam0.getOptionLabel());
      assertEquals((-191), int0);
  }

  @Test
  public void test3()  throws Throwable  {
      IntParam intParam0 = new IntParam("N!D%jyZP/X|aJC RO%d^", "N!D%jyZP/X|aJC RO%d^", false, false);
      assertNotNull(intParam0);
      assertEquals("N!D%jyZP/X|aJC RO%d^", intParam0.getTag());
      assertEquals(false, intParam0.isMultiValued());
      assertEquals("<n>", intParam0.getOptionLabel());
      assertEquals(false, intParam0.isOptional());
      assertEquals(-2147483648, intParam0.getMin());
      assertEquals(false, intParam0.isHidden());
      assertEquals(2147483647, intParam0.getMax());
  }

  @Test
  public void test4()  throws Throwable  {
      IntParam intParam0 = new IntParam("000I0PFra*.vidValues", "000I0PFra*.vidValues");
      assertNotNull(intParam0);
      
      // Undeclared exception!
      try {
        intParam0.intValue();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * There is no value set for <000I0PFra*.vidValues>.
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int[] intArray0 = new int[1];
      IntParam intParam0 = new IntParam("N!D%jyZP/X|aJC RO%d^", "N!D%jyZP/X|aJC RO%d^", intArray0);
      assertEquals(false, intParam0.isHidden());
      assertEquals(false, intParam0.isMultiValued());
      assertEquals(true, intParam0.isOptional());
      assertEquals("N!D%jyZP/X|aJC RO%d^", intParam0.getTag());
      assertEquals("<n>", intParam0.getOptionLabel());
      assertEquals(2147483647, intParam0.getMax());
      assertNotNull(intParam0);
      assertEquals(-2147483648, intParam0.getMin());
  }

  @Test
  public void test6()  throws Throwable  {
      IntParam intParam0 = new IntParam("xq-t:2X", "xq-t:2X", true);
      assertNotNull(intParam0);
      
      int int0 = intParam0.getMin();
      assertEquals(2147483647, intParam0.getMax());
      assertEquals("xq-t:2X", intParam0.getTag());
      assertEquals(Integer.MIN_VALUE, int0);
      assertEquals(true, intParam0.isOptional());
      assertEquals(false, intParam0.isHidden());
      assertEquals("<n>", intParam0.getOptionLabel());
      assertEquals(false, intParam0.isMultiValued());
  }

  @Test
  public void test7()  throws Throwable  {
      IntParam intParam0 = new IntParam("AbstractParameter.descTooShort", "AbstractParameter.descTooShort", 19, 19);
      assertNotNull(intParam0);
      
      // Undeclared exception!
      try {
        intParam0.setMin(194);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Minimum acceptable value (AbstractParameter.descTooShort) must not be greater than the maximum ({1})
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      IntParam intParam0 = new IntParam("AbstractParameter.descTooShort", "AbstractParameter.descTooShort", 19, 19);
      assertNotNull(intParam0);
      
      int[] intArray0 = intParam0.intValues();
      assertEquals(19, intParam0.getMin());
      assertEquals(true, intParam0.isOptional());
      assertEquals(19, intParam0.getMax());
      assertEquals(false, intParam0.isHidden());
      assertNotNull(intArray0);
      assertEquals("AbstractParameter.descTooShort", intParam0.getTag());
      assertEquals("<n>", intParam0.getOptionLabel());
      assertEquals(false, intParam0.isMultiValued());
  }

  @Test
  public void test9()  throws Throwable  {
      IntParam intParam0 = null;
      try {
        intParam0 = new IntParam("xq-t:2X", "xq-t:2X", (-17), Integer.MIN_VALUE, true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Minimum acceptable value (xq-t:2X) must not be greater than the maximum ({1})
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[5];
      IntParam intParam0 = new IntParam("|Jp{B>9p9`", "|Jp{B>9p9`", intArray0, true, true, true);
      assertNotNull(intParam0);
      
      int[] intArray1 = intParam0.getAcceptableIntValues();
      assertEquals("|Jp{B>9p9`", intParam0.getTag());
      assertEquals(true, intParam0.isMultiValued());
      assertEquals(2147483647, intParam0.getMax());
      assertEquals(true, intParam0.isOptional());
      assertNotNull(intArray1);
      assertEquals(true, intParam0.isHidden());
      assertEquals("<n>", intParam0.getOptionLabel());
      assertEquals(-2147483648, intParam0.getMin());
  }

  @Test
  public void test11()  throws Throwable  {
      IntParam intParam0 = new IntParam("0IntParam.val;dValues", "0IntParam.val;dValues");
      assertNotNull(intParam0);
      
      try {
        intParam0.setValue("0IntParam.val;dValues");
        fail("Expecting exception: CmdLineException");
      } catch(CmdLineException e) {
        /*
         * The value for <0IntParam.val;dValues> must be a number between -2,147,483,648 and 2,147,483,647, inclusive.
         */
      }
  }
}
