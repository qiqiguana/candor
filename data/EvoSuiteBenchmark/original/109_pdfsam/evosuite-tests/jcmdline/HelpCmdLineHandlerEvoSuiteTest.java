/*
 * This file was automatically generated by EvoSuite
 */

package jcmdline;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Collection;
import java.util.LinkedList;
import jcmdline.CmdLineHandler;
import jcmdline.CmdLineParser;
import jcmdline.DefaultCmdLineHandler;
import jcmdline.HelpCmdLineHandler;
import jcmdline.IntParam;
import jcmdline.Parameter;
import jcmdline.PosixCmdLineParser;
import jcmdline.TimeParam;
import jcmdline.VersionCmdLineHandler;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class HelpCmdLineHandlerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      IntParam intParam0 = new IntParam("e_)dZu8I sVgldo]>", "e_)dZu8I sVgldo]>", (-61), 1336, false, false, true);
      Parameter[] parameterArray0 = new Parameter[8];
      parameterArray0[0] = (Parameter) intParam0;
      parameterArray0[1] = (Parameter) intParam0;
      parameterArray0[2] = (Parameter) intParam0;
      parameterArray0[3] = (Parameter) intParam0;
      parameterArray0[4] = (Parameter) intParam0;
      parameterArray0[5] = (Parameter) intParam0;
      parameterArray0[6] = (Parameter) intParam0;
      parameterArray0[7] = (Parameter) intParam0;
      DefaultCmdLineHandler defaultCmdLineHandler0 = new DefaultCmdLineHandler("e_)dZu8I sVgldo]>", "e_)dZu8I sVgldo]>", parameterArray0, parameterArray0);
      VersionCmdLineHandler versionCmdLineHandler0 = new VersionCmdLineHandler("e_)dZu8I sVgldo]>", (CmdLineHandler) defaultCmdLineHandler0);
      PosixCmdLineParser posixCmdLineParser0 = (PosixCmdLineParser)versionCmdLineHandler0.getParser();
      HelpCmdLineHandler helpCmdLineHandler0 = new HelpCmdLineHandler("e_)dZu8I sVgldo]>", "e_)dZu8I sVgldo]>", "e_)dZu8I sVgldo]>", parameterArray0, parameterArray0, (CmdLineParser) posixCmdLineParser0);
      assertEquals("e_)dZu8I sVgldo]>", helpCmdLineHandler0.getCmdDesc());
  }

  @Test
  public void test1()  throws Throwable  {
      TimeParam timeParam0 = new TimeParam("5", "0 udcX'rVdlL5F", true, true);
      Collection<Object> collection0 = timeParam0.getValues();
      HelpCmdLineHandler helpCmdLineHandler0 = new HelpCmdLineHandler("5", "5", "0 udcX'rVdlL5F", "@8lJ", (Collection) collection0, (Collection) collection0);
      assertEquals(true, helpCmdLineHandler0.getDieOnParseError());
  }

  @Test
  public void test2()  throws Throwable  {
      IntParam intParam0 = new IntParam("e_)dZu8I sVgldo]>", "e_)dZu8I sVgldo]>", (-61), 1336, false, false, false);
      Collection<Object> collection0 = intParam0.getValues();
      HelpCmdLineHandler helpCmdLineHandler0 = new HelpCmdLineHandler("e_)dZu8I sVgldo]>", "e_)dZu8I sVgldo]>", "e_)dZu8I sVgldo]>", (Collection) collection0, (Collection) collection0);
      boolean boolean0 = helpCmdLineHandler0.processParsedOptions(false);
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HelpCmdLineHandler helpCmdLineHandler0 = new HelpCmdLineHandler("!PwFW[", "!PwFW[", "!PwFW[", "!PwFW[", "!PwFW[", (Collection) linkedList0, (Collection) linkedList0);
      assertNull(helpCmdLineHandler0.getParseError());
  }

  @Test
  public void test4()  throws Throwable  {
      HelpCmdLineHandler helpCmdLineHandler0 = null;
      try {
        helpCmdLineHandler0 = new HelpCmdLineHandler("", (CmdLineHandler) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * a non-empty help text must be specified to the HelpCmdLineHandler constructor
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      HelpCmdLineHandler helpCmdLineHandler0 = null;
      try {
        helpCmdLineHandler0 = new HelpCmdLineHandler("P-", "", (CmdLineHandler) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
