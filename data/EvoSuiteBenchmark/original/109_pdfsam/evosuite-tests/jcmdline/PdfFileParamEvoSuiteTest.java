/*
 * This file was automatically generated by EvoSuite
 */

package jcmdline;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import jcmdline.CmdLineException;
import jcmdline.PdfFileParam;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PdfFileParamEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      PdfFileParam pdfFileParam0 = new PdfFileParam("Y!th?504#", "Y!th?504#");
      assertNotNull(pdfFileParam0);
      
      boolean boolean0 = pdfFileParam0.attrSpecified(0);
      assertEquals(65535, pdfFileParam0.getAttributes());
      assertEquals(false, pdfFileParam0.isMultiValued());
      assertEquals(false, pdfFileParam0.isHidden());
      assertEquals(false, boolean0);
      assertEquals("<f>", pdfFileParam0.getOptionLabel());
      assertEquals("Y!th?504#", pdfFileParam0.getTag());
      assertEquals(true, pdfFileParam0.isOptional());
  }

  @Test
  public void test1()  throws Throwable  {
      PdfFileParam pdfFileParam0 = new PdfFileParam("^WY5%jx", "^WY5%jx", 65509);
      assertEquals(65509, pdfFileParam0.getAttributes());
      assertNotNull(pdfFileParam0);
      assertEquals(true, pdfFileParam0.isOptional());
      assertEquals(false, pdfFileParam0.isMultiValued());
      assertEquals(false, pdfFileParam0.isHidden());
      assertEquals("<f>", pdfFileParam0.getOptionLabel());
      assertEquals("^WY5%jx", pdfFileParam0.getTag());
  }

  @Test
  public void test2()  throws Throwable  {
      PdfFileParam pdfFileParam0 = new PdfFileParam("ETw(-e\"kaS", "ETw(-e\"kaS", false);
      assertNotNull(pdfFileParam0);
      
      pdfFileParam0.setValue("ETw(-e\"kaS");
      assertEquals(true, pdfFileParam0.isSet());
      
      pdfFileParam0.getPdfFile();
      assertEquals(false, pdfFileParam0.isOptional());
  }

  @Test
  public void test3()  throws Throwable  {
      PdfFileParam pdfFileParam0 = new PdfFileParam("960gD5", "960gD5", 65535, false);
      assertNotNull(pdfFileParam0);
      
      int int0 = pdfFileParam0.getAttributes();
      assertEquals(65535, int0);
      assertEquals("<f>", pdfFileParam0.getOptionLabel());
      assertEquals(false, pdfFileParam0.isMultiValued());
      assertEquals(false, pdfFileParam0.isOptional());
      assertEquals("960gD5", pdfFileParam0.getTag());
      assertEquals(false, pdfFileParam0.isHidden());
  }

  @Test
  public void test4()  throws Throwable  {
      PdfFileParam pdfFileParam0 = new PdfFileParam(",#NMftn?gi", ",#NMftn?gi", (-902), true);
      assertNotNull(pdfFileParam0);
      
      // Undeclared exception!
      try {
        pdfFileParam0.getPdfFile();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * There is no value set for <,#NMftn?gi>.
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      PdfFileParam pdfFileParam0 = new PdfFileParam("ETw(-e\"kaS", "ETw(-e\"kaS", false);
      assertNotNull(pdfFileParam0);
      
      pdfFileParam0.setValue("ETw(-e\"kaS");
      assertEquals(true, pdfFileParam0.isSet());
      
      pdfFileParam0.getPdfFiles();
      assertEquals(false, pdfFileParam0.isMultiValued());
  }

  @Test
  public void test6()  throws Throwable  {
      PdfFileParam pdfFileParam0 = new PdfFileParam("PdfFilParam.w3iteable", "PdfFilParam.w3iteable", (-172), false, false, false);
      assertNotNull(pdfFileParam0);
      
      try {
        pdfFileParam0.addValue("PdfFilParam.w3iteable");
        fail("Expecting exception: CmdLineException");
      } catch(CmdLineException e) {
        /*
         * Invalid name (PdfFilParam.w3iteable) specified for <PdfFilParam.w3iteable>, must be an existing, readable, writeable, file.
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      PdfFileParam pdfFileParam0 = new PdfFileParam(".pdf:", ".pdf:", 65509, false, false, false);
      assertNotNull(pdfFileParam0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = ".pdf:";
      try {
        pdfFileParam0.setValues(stringArray0);
        fail("Expecting exception: CmdLineException");
      } catch(CmdLineException e) {
        /*
         * Invalid name (.pdf:) specified for <.pdf:>, must be an existing, readable, file.
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          PdfFileParam pdfFileParam0 = new PdfFileParam("$foCYU6", "$foCYU6", 65489, true);
          assertNotNull(pdfFileParam0);
          
          // Undeclared exception!
          try {
            pdfFileParam0.addValue("$foCYU6");
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission $foCYU6 write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.canWrite(File.java:711)
             * jcmdline.PdfFileParam.validateValue(PdfFileParam.java:349)
             * jcmdline.AbstractParameter.addValue(AbstractParameter.java:350)
             * sun.reflect.GeneratedMethodAccessor53.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test9()  throws Throwable  {
      PdfFileParam pdfFileParam0 = new PdfFileParam("960gD5", "960gD5", 65535, false);
      assertNotNull(pdfFileParam0);
      
      boolean boolean0 = pdfFileParam0.attrSpecified(65535);
      assertEquals("960gD5", pdfFileParam0.getTag());
      assertEquals("<f>", pdfFileParam0.getOptionLabel());
      assertEquals(false, boolean0);
      assertEquals(65535, pdfFileParam0.getAttributes());
      assertEquals(false, pdfFileParam0.isOptional());
      assertEquals(false, pdfFileParam0.isMultiValued());
      assertEquals(false, pdfFileParam0.isHidden());
  }

  @Test
  public void test10()  throws Throwable  {
      PdfFileParam pdfFileParam0 = null;
      try {
        pdfFileParam0 = new PdfFileParam("960gD5", "960gD5", 18, false, false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Invalid attributes specified: <18>, please use static final literals.
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      PdfFileParam pdfFileParam0 = new PdfFileParam("E]Sx^", "E]Sx^", 65503, false, false, false);
      assertNotNull(pdfFileParam0);
      
      String[] stringArray0 = new String[2];
      try {
        pdfFileParam0.setValues(stringArray0);
        fail("Expecting exception: CmdLineException");
      } catch(CmdLineException e) {
        /*
         * Invalid name (null) specified for <E]Sx^>, must be an existing, writeable, file.
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      PdfFileParam pdfFileParam0 = new PdfFileParam("Y!th?504#", "Y!th?504#");
      assertNotNull(pdfFileParam0);
      
      try {
        pdfFileParam0.setValue((String) null);
        fail("Expecting exception: CmdLineException");
      } catch(CmdLineException e) {
        /*
         * Invalid name (null) specified for <Y!th?504#>, must be a file.
         */
      }
  }
}
