/*
 * This file was automatically generated by EvoSuite
 */

package jcmdline;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.util.Collection;
import java.util.LinkedList;
import java.util.logging.Formatter;
import java.util.logging.SimpleFormatter;
import java.util.logging.XMLFormatter;
import jcmdline.BooleanParam;
import jcmdline.CmdLineParser;
import jcmdline.DateTimeParam;
import jcmdline.LoggerCmdLineHandler;
import jcmdline.Parameter;
import jcmdline.PosixCmdLineParser;
import jcmdline.TimeParam;
import jcmdline.VersionCmdLineHandler;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class LoggerCmdLineHandlerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LoggerCmdLineHandler loggerCmdLineHandler0 = new LoggerCmdLineHandler((OutputStream) pipedOutputStream0, "PdfFileParam.an_existing", "PdfFileParam.an_existing", (Collection) linkedList0, (Collection) linkedList0);
      SimpleFormatter simpleFormatter0 = (SimpleFormatter)loggerCmdLineHandler0.getLogFormatter();
      assertNotNull(simpleFormatter0);
  }

  @Test
  public void test1()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Parameter[] parameterArray0 = new Parameter[1];
      BooleanParam booleanParam0 = new BooleanParam("PdfFileParam.an_existing", "PdfFileParam.an_existing");
      parameterArray0[0] = (Parameter) booleanParam0;
      Parameter[] parameterArray1 = new Parameter[3];
      parameterArray1[0] = (Parameter) booleanParam0;
      parameterArray1[1] = (Parameter) booleanParam0;
      parameterArray1[2] = (Parameter) booleanParam0;
      LoggerCmdLineHandler loggerCmdLineHandler0 = new LoggerCmdLineHandler((OutputStream) pipedOutputStream0, "PdfFileParam.an_existing", "PdfFileParam.an_existing", parameterArray0, parameterArray1);
      assertNotNull(loggerCmdLineHandler0);
      
      boolean boolean0 = loggerCmdLineHandler0.processParsedOptions(false);
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      DateTimeParam dateTimeParam0 = new DateTimeParam("StringParam.defaultOptionLabel", "StringParam.defaultOptionLabel");
      Collection<Object> collection0 = dateTimeParam0.getValues();
      Parameter[] parameterArray0 = new Parameter[3];
      parameterArray0[0] = (Parameter) dateTimeParam0;
      parameterArray0[1] = (Parameter) dateTimeParam0;
      parameterArray0[2] = (Parameter) dateTimeParam0;
      VersionCmdLineHandler versionCmdLineHandler0 = new VersionCmdLineHandler("StringParam.defaultOptionLabel", "StringParam.defaultOptionLabel", "StringParam.defaultOptionLabel", (Collection) collection0, (Collection) collection0);
      PosixCmdLineParser posixCmdLineParser0 = (PosixCmdLineParser)versionCmdLineHandler0.getParser();
      LoggerCmdLineHandler loggerCmdLineHandler0 = null;
      try {
        loggerCmdLineHandler0 = new LoggerCmdLineHandler((OutputStream) null, "StringParam.defaultOptionLabel", "StringParam.defaultOptionLabel", parameterArray0, parameterArray0, (CmdLineParser) posixCmdLineParser0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * The stream specified to the LoggerCmdLineHandler may not be null.
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      String[] stringArray0 = new String[10];
      TimeParam timeParam0 = new TimeParam("PdfFileParam.an_existing", "PdfFileParam.an_existing", stringArray0);
      Collection<Object> collection0 = timeParam0.getValues();
      LoggerCmdLineHandler loggerCmdLineHandler0 = new LoggerCmdLineHandler((OutputStream) pipedOutputStream0, "PdfFileParam.an_existing", "PdfFileParam.an_existing", (Collection) collection0, (Collection) collection0);
      assertNotNull(loggerCmdLineHandler0);
      
      boolean boolean0 = loggerCmdLineHandler0.processParsedOptions(true);
      assertEquals(true, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LoggerCmdLineHandler loggerCmdLineHandler0 = new LoggerCmdLineHandler((OutputStream) pipedOutputStream0, "PdfFileParam.an_existing", "PdfFileParam.an_existing", (Collection) linkedList0, (Collection) linkedList0);
      XMLFormatter xMLFormatter0 = new XMLFormatter();
      loggerCmdLineHandler0.setLogFormatter((Formatter) xMLFormatter0);
      assertEquals("PdfFileParam.an_existing", loggerCmdLineHandler0.getCmdDesc());
  }

  @Test
  public void test5()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      String[] stringArray0 = new String[10];
      TimeParam timeParam0 = new TimeParam("PdfFileParam.an_existing", "PdfFileParam.an_existing", stringArray0);
      Collection<Object> collection0 = timeParam0.getValues();
      LoggerCmdLineHandler loggerCmdLineHandler0 = new LoggerCmdLineHandler((OutputStream) pipedOutputStream0, "PdfFileParam.an_existing", "PdfFileParam.an_existing", (Collection) collection0, (Collection) collection0);
      // Undeclared exception!
      try {
        loggerCmdLineHandler0.setLogFormatter((Formatter) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * The Formatter passed to setlogFormatter() must not be null
         */
      }
  }
}
