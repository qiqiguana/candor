/*
 * This file was automatically generated by EvoSuite
 */

package jcmdline;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import jcmdline.CmdLineException;
import jcmdline.FileParam;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class FileParamEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      FileParam fileParam0 = new FileParam(";>/Cy2eg6:B1y", ";>/Cy2eg6:B1y");
      assertNotNull(fileParam0);
      
      int int0 = fileParam0.getAttributes();
      assertEquals(false, fileParam0.isHidden());
      assertEquals(false, fileParam0.isMultiValued());
      assertEquals(true, fileParam0.isOptional());
      assertEquals("<f>", fileParam0.getOptionLabel());
      assertEquals(65535, int0);
      assertEquals(";>/Cy2eg6:B1y", fileParam0.getDesc());
  }

  @Test
  public void test1()  throws Throwable  {
      FileParam fileParam0 = new FileParam("LS?DuM/\b5Azsi?z", "LS?DuM/\b5Azsi?z", (-908));
      assertNotNull(fileParam0);
      
      // Undeclared exception!
      try {
        fileParam0.getFile();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * There is no value set for <LS?DuM/\b5Azsi?z>.
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      FileParam fileParam0 = new FileParam("X~o.Z", "X~o.Z", false);
      assertEquals(false, fileParam0.isOptional());
      assertEquals(false, fileParam0.isMultiValued());
      assertNotNull(fileParam0);
      assertEquals(false, fileParam0.isHidden());
      assertEquals(65535, fileParam0.getAttributes());
      assertEquals("X~o.Z", fileParam0.getTag());
      assertEquals("<f>", fileParam0.getOptionLabel());
  }

  @Test
  public void test3()  throws Throwable  {
      FileParam fileParam0 = new FileParam("``*Fm", "``*Fm", (-1755), false, false);
      assertNotNull(fileParam0);
      
      try {
        fileParam0.addValue("``*Fm");
        fail("Expecting exception: CmdLineException");
      } catch(CmdLineException e) {
        /*
         * Invalid name (``*Fm) specified for <``*Fm>, must be an existing, readable, writeable, directory.
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      FileParam fileParam0 = new FileParam("AbstractParameter.illegalCharInTag", "AbstractParameter.illegalCharInTag", 65531, false);
      assertNotNull(fileParam0);
      
      try {
        fileParam0.setValue("AbstractParameter.illegalCharInTag");
        fail("Expecting exception: CmdLineException");
      } catch(CmdLineException e) {
        /*
         * Invalid name (AbstractParameter.illegalCharInTag) specified for <AbstractParameter.illegalCharInTag>, must be an existing file.
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      FileParam fileParam0 = new FileParam(";>/Cy2eg6:B1y", ";>/Cy2eg6:B1y");
      assertNotNull(fileParam0);
      
      fileParam0.setValue(";>/Cy2eg6:B1y");
      assertEquals(true, fileParam0.isSet());
      
      fileParam0.getFile();
      assertEquals(false, fileParam0.isMultiValued());
  }

  @Test
  public void test6()  throws Throwable  {
      FileParam fileParam0 = new FileParam(";>/Cy2eg6:B1y", ";>/Cy2eg6:B1y");
      assertNotNull(fileParam0);
      
      fileParam0.setValue(";>/Cy2eg6:B1y");
      assertEquals(true, fileParam0.isSet());
      
      fileParam0.getFiles();
      assertEquals(65535, fileParam0.getAttributes());
  }

  @Test
  public void test7()  throws Throwable  {
      FileParam fileParam0 = new FileParam("$ Ai;[O0_IxR4e2+J&Fv", "$ Ai;[O0_IxR4e2+J&Fv", 65527, false, false, false);
      assertNotNull(fileParam0);
      
      try {
        fileParam0.addValue("$ Ai;[O0_IxR4e2+J&Fv");
        fail("Expecting exception: CmdLineException");
      } catch(CmdLineException e) {
        /*
         * Invalid name ($ Ai;[O0_IxR4e2+J&Fv) specified for <$ Ai;[O0_IxR4e2+J&Fv>, must be an existing directory.
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      FileParam fileParam0 = new FileParam(",*z`mym", ",*z`mym", 65517, true, true, true);
      assertNotNull(fileParam0);
      
      try {
        fileParam0.addValue(",*z`mym");
        fail("Expecting exception: CmdLineException");
      } catch(CmdLineException e) {
        /*
         * Invalid name (,*z`mym) specified for <,*z`mym>, must be an existing, readable, file or directory.
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          FileParam fileParam0 = new FileParam("cLM%I'xS)1##", "cLM%I'xS)1##", 65503);
          // Undeclared exception!
          try {
            fileParam0.validateValue("cLM%I'xS)1##");
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission cLM%I'xS)1## write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.canWrite(File.java:711)
             * jcmdline.FileParam.validateValue(FileParam.java:409)
             * sun.reflect.GeneratedMethodAccessor75.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test10()  throws Throwable  {
      FileParam fileParam0 = new FileParam(";>/Cy2eg6:B1y", ";>/Cy2eg6:B1y");
      assertNotNull(fileParam0);
      
      boolean boolean0 = fileParam0.attrSpecified(65535);
      assertEquals(";>/Cy2eg6:B1y", fileParam0.getTag());
      assertEquals(false, fileParam0.isHidden());
      assertEquals(true, fileParam0.isOptional());
      assertEquals("<f>", fileParam0.getOptionLabel());
      assertEquals(65535, fileParam0.getAttributes());
      assertEquals(false, fileParam0.isMultiValued());
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      FileParam fileParam0 = new FileParam(";>/Cy2eg6:B1y", ";>/Cy2eg6:B1y");
      assertNotNull(fileParam0);
      
      fileParam0.attrSpecified(0);
      assertEquals(";>/Cy2eg6:B1y", fileParam0.getTag());
      assertEquals(65535, fileParam0.getAttributes());
      assertEquals(false, fileParam0.isMultiValued());
      assertEquals("<f>", fileParam0.getOptionLabel());
      assertEquals(false, fileParam0.isHidden());
      assertEquals(true, fileParam0.isOptional());
  }

  @Test
  public void test12()  throws Throwable  {
      FileParam fileParam0 = null;
      try {
        fileParam0 = new FileParam("gdL4HZl>", "gdL4HZl>", 380);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Invalid attributes specified: <380>, please use static final literals.
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      FileParam fileParam0 = new FileParam(";>/Cy2eg6:B1y", ";>/Cy2eg6:B1y");
      assertNotNull(fileParam0);
      
      String[] stringArray0 = new String[24];
      try {
        fileParam0.setValues(stringArray0);
        fail("Expecting exception: CmdLineException");
      } catch(CmdLineException e) {
        /*
         * Invalid name (null) specified for <;>/Cy2eg6:B1y>, must be a file or directory.
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      FileParam fileParam0 = new FileParam("``*Fm", "``*Fm", 65502, true, true, true);
      assertNotNull(fileParam0);
      
      try {
        fileParam0.addValue("``*Fm");
        fail("Expecting exception: CmdLineException");
      } catch(CmdLineException e) {
        /*
         * Invalid name (``*Fm) specified for <``*Fm>, must be an existing, writeable, file or directory.
         */
      }
  }
}
