/*
 * This file was automatically generated by EvoSuite
 */

package jcmdline;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import jcmdline.BasicCmdLineHandler;
import jcmdline.BooleanParam;
import jcmdline.CmdLineException;
import jcmdline.CmdLineParser;
import jcmdline.DateTimeParam;
import jcmdline.FileParam;
import jcmdline.IntParam;
import jcmdline.LongParam;
import jcmdline.Parameter;
import jcmdline.PosixCmdLineParser;
import jcmdline.StringParam;
import jcmdline.TimeParam;
import org.evosuite.runtime.System;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BasicCmdLineHandlerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      TimeParam timeParam0 = new TimeParam("FileParlm.defaultDirOptionLabel", "FileParlm.defaultDirOptionLabel", true);
      Parameter[] parameterArray0 = new Parameter[1];
      parameterArray0[0] = (Parameter) timeParam0;
      Parameter[] parameterArray1 = new Parameter[1];
      parameterArray1[0] = (Parameter) timeParam0;
      BasicCmdLineHandler basicCmdLineHandler0 = new BasicCmdLineHandler("FileParlm.defaultDirOptionLabel", "FileParlm.defaultDirOptionLabel", parameterArray1, parameterArray0);
      assertNotNull(basicCmdLineHandler0);
      
      List<Object> list0 = basicCmdLineHandler0.getArgs();
      assertEquals(true, basicCmdLineHandler0.getDieOnParseError());
      assertEquals(false, list0.isEmpty());
      assertNotNull(list0);
  }

  @Test
  public void test1()  throws Throwable  {
      TimeParam timeParam0 = new TimeParam("FileParam.defaultDirOptionLabel", "FileParam.defaultDirOptionLabel", true);
      Parameter[] parameterArray0 = new Parameter[1];
      parameterArray0[0] = (Parameter) timeParam0;
      Parameter[] parameterArray1 = new Parameter[1];
      parameterArray1[0] = (Parameter) timeParam0;
      BasicCmdLineHandler basicCmdLineHandler0 = new BasicCmdLineHandler("FileParam.defaultDirOptionLabel", "FileParam.defaultDirOptionLabel", parameterArray1, parameterArray0);
      assertNotNull(basicCmdLineHandler0);
      
      String string0 = basicCmdLineHandler0.getCmdDesc();
      assertNotNull(string0);
      assertEquals(true, basicCmdLineHandler0.getDieOnParseError());
  }

  @Test
  public void test2()  throws Throwable  {
      int[] intArray0 = new int[7];
      IntParam intParam0 = new IntParam("A}bzX^n{~`r", "A}bzX^n{~`r", intArray0, false);
      Collection<Object> collection0 = intParam0.getValues();
      BasicCmdLineHandler basicCmdLineHandler0 = new BasicCmdLineHandler("A}bzX^n{~`r", "A}bzX^n{~`r", (Collection) collection0, (Collection) collection0);
      assertNotNull(basicCmdLineHandler0);
      
      basicCmdLineHandler0.setParseError("A}bzX^n{~`r");
      assertEquals(true, basicCmdLineHandler0.getDieOnParseError());
  }

  @Test
  public void test3()  throws Throwable  {
      TimeParam timeParam0 = new TimeParam("FileParam.defaultDirOptionLabel", "FileParam.defaultDirOptionLabel", true);
      Parameter[] parameterArray0 = new Parameter[1];
      parameterArray0[0] = (Parameter) timeParam0;
      Parameter[] parameterArray1 = new Parameter[1];
      parameterArray1[0] = (Parameter) timeParam0;
      BasicCmdLineHandler basicCmdLineHandler0 = new BasicCmdLineHandler("FileParam.defaultDirOptionLabel", "FileParam.defaultDirOptionLabel", parameterArray1, parameterArray0);
      assertNotNull(basicCmdLineHandler0);
      
      boolean boolean0 = basicCmdLineHandler0.getDieOnParseError();
      assertEquals(true, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      Parameter[] parameterArray0 = new Parameter[2];
      FileParam fileParam0 = new FileParam("StringParam.valTooShort", "StringParam.valTooShort");
      parameterArray0[0] = (Parameter) fileParam0;
      BooleanParam booleanParam0 = new BooleanParam("StringParam.valTooShort", "StringParam.valTooShort");
      parameterArray0[1] = (Parameter) booleanParam0;
      BasicCmdLineHandler basicCmdLineHandler0 = new BasicCmdLineHandler("StringParam.valTooShort", "StringParam.valTooShort", parameterArray0, (Parameter[]) null);
      assertNotNull(basicCmdLineHandler0);
      
      basicCmdLineHandler0.getOption("StringParam.valTooShort");
      assertEquals(true, basicCmdLineHandler0.getDieOnParseError());
  }

  @Test
  public void test5()  throws Throwable  {
      TimeParam timeParam0 = new TimeParam("FileParlm.defaultDirOptionLabel", "FileParlm.defaultDirOptionLabel", true);
      Parameter[] parameterArray0 = new Parameter[1];
      parameterArray0[0] = (Parameter) timeParam0;
      Parameter[] parameterArray1 = new Parameter[1];
      parameterArray1[0] = (Parameter) timeParam0;
      BasicCmdLineHandler basicCmdLineHandler0 = new BasicCmdLineHandler("FileParlm.defaultDirOptionLabel", "FileParlm.defaultDirOptionLabel", parameterArray1, parameterArray0);
      assertNotNull(basicCmdLineHandler0);
      
      Collection<Object> collection0 = basicCmdLineHandler0.getOptions();
      assertNotNull(collection0);
      assertEquals(true, basicCmdLineHandler0.getDieOnParseError());
      assertEquals(false, collection0.isEmpty());
  }

  @Test
  public void test6()  throws Throwable  {
      TimeParam timeParam0 = new TimeParam("FileParam.defaultDirOptionLabel", "FileParam.defaultDirOptionLabel", true);
      Parameter[] parameterArray0 = new Parameter[1];
      parameterArray0[0] = (Parameter) timeParam0;
      Parameter[] parameterArray1 = new Parameter[1];
      parameterArray1[0] = (Parameter) timeParam0;
      BasicCmdLineHandler basicCmdLineHandler0 = new BasicCmdLineHandler("FileParam.defaultDirOptionLabel", "FileParam.defaultDirOptionLabel", parameterArray1, parameterArray0);
      assertNotNull(basicCmdLineHandler0);
      
      basicCmdLineHandler0.getParseError();
      assertEquals(true, basicCmdLineHandler0.getDieOnParseError());
  }

  @Test
  public void test7()  throws Throwable  {
      TimeParam timeParam0 = new TimeParam("FileParlm.defaultDirOptionLabel", "FileParlm.defaultDirOptionLabel", true);
      Parameter[] parameterArray0 = new Parameter[1];
      parameterArray0[0] = (Parameter) timeParam0;
      Parameter[] parameterArray1 = new Parameter[1];
      parameterArray1[0] = (Parameter) timeParam0;
      BasicCmdLineHandler basicCmdLineHandler0 = new BasicCmdLineHandler("FileParlm.defaultDirOptionLabel", "FileParlm.defaultDirOptionLabel", parameterArray1, parameterArray0);
      assertNotNull(basicCmdLineHandler0);
      
      String string0 = basicCmdLineHandler0.getCmdName();
      assertEquals(true, basicCmdLineHandler0.getDieOnParseError());
      assertNotNull(string0);
  }

  @Test
  public void test8()  throws Throwable  {
      StringParam stringParam0 = new StringParam("1PSaUg4\"B7F,}", "1PSaUg4\"B7F,}", false);
      stringParam0.addValue("1PSaUg4\"B7F,}");
      stringParam0.setIgnoreRequired(true);
      Parameter[] parameterArray0 = new Parameter[6];
      parameterArray0[0] = (Parameter) stringParam0;
      parameterArray0[1] = (Parameter) stringParam0;
      parameterArray0[2] = (Parameter) stringParam0;
      parameterArray0[3] = (Parameter) stringParam0;
      parameterArray0[4] = (Parameter) stringParam0;
      parameterArray0[5] = (Parameter) stringParam0;
      BasicCmdLineHandler basicCmdLineHandler0 = new BasicCmdLineHandler("1PSaUg4\"B7F,}", "6b^1^UPB4R[{kgsgd", parameterArray0, parameterArray0);
      assertNotNull(basicCmdLineHandler0);
      
      boolean boolean0 = basicCmdLineHandler0.parse((String[]) null);
      assertEquals(true, basicCmdLineHandler0.getDieOnParseError());
      assertEquals("6b^1^UPB4R[{kgsgd", basicCmdLineHandler0.getCmdDesc());
      assertEquals(true, boolean0);
      assertEquals("1PSaUg4\"B7F,}", basicCmdLineHandler0.getCmdName());
  }

  @Test
  public void test9()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      BasicCmdLineHandler basicCmdLineHandler0 = new BasicCmdLineHandler("B}", "B}", (Collection) linkedList0, (Collection) linkedList0);
      assertNotNull(basicCmdLineHandler0);
      assertEquals(true, basicCmdLineHandler0.getDieOnParseError());
      
      String[] stringArray0 = new String[10];
      stringArray0[0] = "B}";
      basicCmdLineHandler0.setDieOnParseError(false);
      boolean boolean0 = basicCmdLineHandler0.parse(stringArray0);
      assertEquals(false, basicCmdLineHandler0.getDieOnParseError());
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      Parameter[] parameterArray0 = new Parameter[2];
      PosixCmdLineParser posixCmdLineParser0 = new PosixCmdLineParser();
      BasicCmdLineHandler basicCmdLineHandler0 = null;
      try {
        basicCmdLineHandler0 = new BasicCmdLineHandler("v", "v", (Parameter[]) null, parameterArray0, (CmdLineParser) posixCmdLineParser0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Argument parameter may not be null.
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Parameter[] parameterArray0 = new Parameter[6];
      LongParam longParam0 = new LongParam("#6aiQbq<NBG@V:Jdm", "#6aiQbq<NBG@V:Jdm", true, true);
      parameterArray0[0] = (Parameter) longParam0;
      DateTimeParam dateTimeParam0 = new DateTimeParam("#6aiQbq<NBG@V:Jdm", "#6aiQbq<NBG@V:Jdm", true);
      parameterArray0[1] = (Parameter) dateTimeParam0;
      String[] stringArray0 = new String[7];
      TimeParam timeParam0 = new TimeParam("#6aiQbq<NBG@V:Jdm", "#6aiQbq<NBG@V:Jdm", stringArray0, true);
      parameterArray0[2] = (Parameter) timeParam0;
      StringParam stringParam0 = new StringParam("}?]^$5)O/b6yNtq#*vp", "#6aiQbq<NBG@V:Jdm", stringArray0, true, true);
      parameterArray0[3] = (Parameter) stringParam0;
      parameterArray0[4] = (Parameter) dateTimeParam0;
      parameterArray0[5] = (Parameter) stringParam0;
      Collection<Object> collection0 = timeParam0.getValues();
      BasicCmdLineHandler basicCmdLineHandler0 = new BasicCmdLineHandler("!usvAVAkjd(#=wQn;H", "#6aiQbq<NBG@V:Jdm", (Collection) collection0, (Collection) collection0);
      assertNotNull(basicCmdLineHandler0);
      
      PosixCmdLineParser posixCmdLineParser0 = (PosixCmdLineParser)basicCmdLineHandler0.getParser();
      assertNotNull(posixCmdLineParser0);
      
      BasicCmdLineHandler basicCmdLineHandler1 = null;
      try {
        basicCmdLineHandler1 = new BasicCmdLineHandler("#6aiQbq<NBG@V:Jdm", "#6aiQbq<NBG@V:Jdm", parameterArray0, parameterArray0, (CmdLineParser) posixCmdLineParser0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Multi-valued argument <#6aiQbq<NBG@V:Jdm> must be the last specified because it will absorb all command line parameters.
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      StringParam stringParam0 = new StringParam("1PSaUg4\"B7F,}", "1PSaUg4\"B7F,}", true);
      Parameter[] parameterArray0 = new Parameter[6];
      parameterArray0[0] = (Parameter) stringParam0;
      parameterArray0[1] = (Parameter) stringParam0;
      parameterArray0[2] = (Parameter) stringParam0;
      parameterArray0[3] = (Parameter) stringParam0;
      parameterArray0[4] = (Parameter) stringParam0;
      parameterArray0[5] = (Parameter) stringParam0;
      BasicCmdLineHandler basicCmdLineHandler0 = new BasicCmdLineHandler("1PSaUg4\"B7F,}", "#6aiQbq<NBG@V:Jdm", parameterArray0, parameterArray0);
      assertNotNull(basicCmdLineHandler0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "#6aiQbq<NBG@V:Jdm";
      boolean boolean0 = basicCmdLineHandler0.parse(stringArray0);
      assertEquals(true, boolean0);
      assertEquals("1PSaUg4\"B7F,}", basicCmdLineHandler0.getCmdName());
  }

  @Test
  public void test13()  throws Throwable  {
      Parameter[] parameterArray0 = new Parameter[2];
      int[] intArray0 = new int[4];
      IntParam intParam0 = new IntParam("XyZis", "XyZis", intArray0, true, false, true);
      parameterArray0[0] = (Parameter) intParam0;
      LongParam longParam0 = new LongParam("XyZis", "XyZis", false);
      parameterArray0[1] = (Parameter) longParam0;
      BasicCmdLineHandler basicCmdLineHandler0 = null;
      try {
        basicCmdLineHandler0 = new BasicCmdLineHandler("XyZis", "XyZis", parameterArray0, parameterArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Required argument (XyZis) may not be specified after optional argument (XyZis).
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      StringParam stringParam0 = new StringParam("1PSaUg4\"B7F,}", "1PSaUg4\"B7F,}", false);
      Parameter[] parameterArray0 = new Parameter[6];
      parameterArray0[0] = (Parameter) stringParam0;
      parameterArray0[1] = (Parameter) stringParam0;
      parameterArray0[2] = (Parameter) stringParam0;
      parameterArray0[3] = (Parameter) stringParam0;
      parameterArray0[4] = (Parameter) stringParam0;
      parameterArray0[5] = (Parameter) stringParam0;
      BasicCmdLineHandler basicCmdLineHandler0 = new BasicCmdLineHandler("1PSaUg4\"B7F,}", "6b^1^UPB4R[{kgsgd", parameterArray0, parameterArray0);
      assertNotNull(basicCmdLineHandler0);
      
      StringParam stringParam1 = (StringParam)basicCmdLineHandler0.getArg("6b^1^UPB4R[{kgsgd");
      assertEquals(true, basicCmdLineHandler0.getDieOnParseError());
      assertEquals("6b^1^UPB4R[{kgsgd", basicCmdLineHandler0.getCmdDesc());
      assertEquals("1PSaUg4\"B7F,}", basicCmdLineHandler0.getCmdName());
      assertNull(stringParam1);
  }

  @Test
  public void test15()  throws Throwable  {
      TimeParam timeParam0 = new TimeParam("FileParam.defaultDirOptionLabel", "FileParam.defaultDirOptionLabel", true);
      Parameter[] parameterArray0 = new Parameter[1];
      parameterArray0[0] = (Parameter) timeParam0;
      Parameter[] parameterArray1 = new Parameter[1];
      parameterArray1[0] = (Parameter) timeParam0;
      BasicCmdLineHandler basicCmdLineHandler0 = new BasicCmdLineHandler("FileParam.defaultDirOptionLabel", "FileParam.defaultDirOptionLabel", parameterArray1, parameterArray0);
      assertNotNull(basicCmdLineHandler0);
      
      TimeParam timeParam1 = (TimeParam)basicCmdLineHandler0.getArg("FileParam.defaultDirOptionLabel");
      assertEquals(true, basicCmdLineHandler0.getDieOnParseError());
      assertNotNull(timeParam1);
  }

  @Test
  public void test16()  throws Throwable  {
      Parameter[] parameterArray0 = new Parameter[6];
      BasicCmdLineHandler basicCmdLineHandler0 = null;
      try {
        basicCmdLineHandler0 = new BasicCmdLineHandler("1PSaUg4\"B7F,}", "1PSaUg4\"B7F,}", parameterArray0, parameterArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test17()  throws Throwable  {
      Parameter[] parameterArray0 = new Parameter[2];
      TimeParam timeParam0 = new TimeParam("#;fy!dlm('3%p>[[\"+", "#;fy!dlm('3%p>[[\"+", true, true, true);
      parameterArray0[0] = (Parameter) timeParam0;
      IntParam intParam0 = new IntParam("#;fy!dlm('3%p>[[\"+", "PdfFileParam.valueNotSet", 1657, 1657);
      parameterArray0[1] = (Parameter) intParam0;
      BasicCmdLineHandler basicCmdLineHandler0 = null;
      try {
        basicCmdLineHandler0 = new BasicCmdLineHandler("#;fy!dlm('3%p>[[\"+", "#;fy!dlm('3%p>[[\"+", parameterArray0, parameterArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * An option (#;fy!dlm('3%p>[[\"+) is defined more than once.
         */
      }
  }

  @Test
  public void test18()  throws Throwable  {
      Parameter[] parameterArray0 = new Parameter[2];
      BasicCmdLineHandler basicCmdLineHandler0 = null;
      try {
        basicCmdLineHandler0 = new BasicCmdLineHandler("KTaV.", (String) null, parameterArray0, parameterArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Command description must be specified.
         */
      }
  }

  @Test
  public void test19()  throws Throwable  {
      Parameter[] parameterArray0 = new Parameter[6];
      BasicCmdLineHandler basicCmdLineHandler0 = null;
      try {
        basicCmdLineHandler0 = new BasicCmdLineHandler("1PSaUu4\"B79F,}", "", parameterArray0, parameterArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Command description must be specified.
         */
      }
  }

  @Test
  public void test20()  throws Throwable  {
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      BasicCmdLineHandler basicCmdLineHandler0 = null;
      try {
        basicCmdLineHandler0 = new BasicCmdLineHandler((String) null, (String) null, (Collection) linkedList0, (Collection) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Command name must be specified.
         */
      }
  }

  @Test
  public void test21()  throws Throwable  {
      HashMap<Parameter, Parameter> hashMap0 = new HashMap<Parameter, Parameter>();
      Collection<Parameter> collection0 = hashMap0.values();
      BasicCmdLineHandler basicCmdLineHandler0 = null;
      try {
        basicCmdLineHandler0 = new BasicCmdLineHandler("", "", (Collection) collection0, (Collection) collection0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Command name must be specified.
         */
      }
  }

  @Test
  public void test22()  throws Throwable  {
      StringParam stringParam0 = new StringParam("1PSaUg4\"B7F,}", "1PSaUg4\"B7F,}", false);
      stringParam0.setIgnoreRequired(true);
      Parameter[] parameterArray0 = new Parameter[6];
      parameterArray0[0] = (Parameter) stringParam0;
      parameterArray0[1] = (Parameter) stringParam0;
      parameterArray0[2] = (Parameter) stringParam0;
      parameterArray0[3] = (Parameter) stringParam0;
      parameterArray0[4] = (Parameter) stringParam0;
      parameterArray0[5] = (Parameter) stringParam0;
      BasicCmdLineHandler basicCmdLineHandler0 = new BasicCmdLineHandler("1PSaUg4\"B7F,}", "6b^1^UPB4R[{kgsgd", parameterArray0, parameterArray0);
      assertNotNull(basicCmdLineHandler0);
      
      // Undeclared exception!
      try {
        basicCmdLineHandler0.parse((String[]) null);
        fail("Expecting exception: System.SystemExitException");
      } catch(System.SystemExitException e) {
      }
  }

  @Test
  public void test23()  throws Throwable  {
      StringParam stringParam0 = new StringParam("1PSaUg4\"B7F,}", "1PSaUg4\"B7F,}", false);
      Parameter[] parameterArray0 = new Parameter[6];
      parameterArray0[0] = (Parameter) stringParam0;
      parameterArray0[1] = (Parameter) stringParam0;
      parameterArray0[2] = (Parameter) stringParam0;
      parameterArray0[3] = (Parameter) stringParam0;
      parameterArray0[4] = (Parameter) stringParam0;
      parameterArray0[5] = (Parameter) stringParam0;
      BasicCmdLineHandler basicCmdLineHandler0 = new BasicCmdLineHandler("1PSaUg4\"B7F,}", "6b^1^UPB4R[{kgsgd", parameterArray0, parameterArray0);
      assertNotNull(basicCmdLineHandler0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "6b^1^UPB4R[{kgsgd";
      boolean boolean0 = basicCmdLineHandler0.parse(stringArray0);
      assertEquals("6b^1^UPB4R[{kgsgd", basicCmdLineHandler0.getCmdDesc());
      assertEquals("1PSaUg4\"B7F,}", basicCmdLineHandler0.getCmdName());
      assertEquals(true, boolean0);
  }
}
