/*
 * This file was automatically generated by EvoSuite
 */

package de.devcity.parseargs;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import de.devcity.parseargs.ArgsParser;
import de.devcity.parseargs.arguments.ParameterArgument;
import de.devcity.parseargs.arguments.StringArgument;
import de.devcity.parseargs.arguments.SwitchArgument;
import java.util.List;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ArgsParserEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ArgsParser argsParser0 = null;
      try {
        argsParser0 = new ArgsParser((String[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * args[] cannot be null.
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ArgsParser argsParser0 = new ArgsParser(stringArray0);
      String[] stringArray1 = argsParser0.getArgs();
      assertNotSame(stringArray1, stringArray0);
  }

  @Test
  public void test2()  throws Throwable  {
      ArgsParser argsParser0 = new ArgsParser();
      assertNotNull(argsParser0);
  }

  @Test
  public void test3()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ArgsParser argsParser0 = new ArgsParser(stringArray0);
      int int0 = argsParser0.getArgsCount();
      assertEquals(1, int0);
  }

  @Test
  public void test4()  throws Throwable  {
      String[] stringArray0 = new String[13];
      stringArray0[6] = "-%";
      ArgsParser argsParser0 = new ArgsParser(stringArray0);
      assertNotNull(argsParser0);
      
      int int0 = argsParser0.getArgsLeftCount();
      assertEquals(1, int0);
  }

  @Test
  public void test5()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[4] = "--";
      ArgsParser argsParser0 = new ArgsParser(stringArray0);
      assertNotNull(argsParser0);
      
      SwitchArgument switchArgument0 = argsParser0.parseSwitchArgument("'1");
      assertNotNull(switchArgument0);
      assertEquals(1, argsParser0.getArgsLeftCount());
      assertEquals(false, switchArgument0.isSet());
  }

  @Test
  public void test6()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[1] = "--DHK{J0RAn]E";
      ArgsParser argsParser0 = new ArgsParser(stringArray0);
      assertNotNull(argsParser0);
      
      SwitchArgument switchArgument0 = argsParser0.parseSwitchArgument("DHK{J0RAn]E");
      assertEquals(0, argsParser0.getArgsLeftCount());
      assertNotNull(switchArgument0);
      assertEquals(true, switchArgument0.isSet());
  }

  @Test
  public void test7()  throws Throwable  {
      String[] stringArray0 = new String[12];
      stringArray0[3] = "-1";
      ArgsParser argsParser0 = new ArgsParser(stringArray0);
      assertNotNull(argsParser0);
      
      SwitchArgument switchArgument0 = argsParser0.parseSwitchArgument("1");
      assertEquals(true, switchArgument0.isSet());
      assertNotNull(switchArgument0);
      assertEquals(0, argsParser0.getArgsLeftCount());
  }

  @Test
  public void test8()  throws Throwable  {
      String[] stringArray0 = new String[14];
      stringArray0[1] = "<";
      ArgsParser argsParser0 = new ArgsParser(stringArray0);
      assertNotNull(argsParser0);
      
      SwitchArgument switchArgument0 = argsParser0.parseSwitchArgument("<");
      assertEquals(1, argsParser0.getArgsLeftCount());
      assertNotNull(switchArgument0);
  }

  @Test
  public void test9()  throws Throwable  {
      String[] stringArray0 = new String[14];
      stringArray0[2] = "%q`EY;N1@";
      ArgsParser argsParser0 = new ArgsParser(stringArray0);
      assertNotNull(argsParser0);
      
      SwitchArgument switchArgument0 = argsParser0.parseSwitchArgument("<");
      assertNotNull(switchArgument0);
      assertEquals(1, argsParser0.getArgsLeftCount());
  }

  @Test
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[14];
      stringArray0[4] = "--";
      ArgsParser argsParser0 = new ArgsParser(stringArray0);
      assertNotNull(argsParser0);
      
      SwitchArgument switchArgument0 = argsParser0.parseSwitchArgument("<");
      assertNotNull(switchArgument0);
      assertEquals(1, argsParser0.getArgsLeftCount());
  }

  @Test
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[13];
      stringArray0[6] = "-%";
      ArgsParser argsParser0 = new ArgsParser(stringArray0);
      assertNotNull(argsParser0);
      
      SwitchArgument switchArgument0 = argsParser0.parseSwitchArgument("B");
      assertNotNull(switchArgument0);
      assertEquals(1, argsParser0.getArgsLeftCount());
  }

  @Test
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[21];
      stringArray0[2] = "-1}&,";
      ArgsParser argsParser0 = new ArgsParser(stringArray0);
      assertNotNull(argsParser0);
      
      SwitchArgument switchArgument0 = argsParser0.parseSwitchArgument("1");
      assertNotNull(switchArgument0);
      assertEquals(2, switchArgument0.getPosition());
  }

  @Test
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[17];
      stringArray0[0] = "--DHK{J0RAn]E";
      ArgsParser argsParser0 = new ArgsParser(stringArray0);
      assertNotNull(argsParser0);
      
      argsParser0.parseParameterArgument("DHK{J0RAn]E");
      assertEquals(1, argsParser0.getArgsLeftCount());
  }

  @Test
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[3] = "-&'1";
      ArgsParser argsParser0 = new ArgsParser(stringArray0);
      assertNotNull(argsParser0);
      
      argsParser0.parseParameterArgument("-&'1");
      assertEquals(1, argsParser0.getArgsLeftCount());
  }

  @Test
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[4] = "---&'1";
      stringArray0[5] = "---&'1";
      ArgsParser argsParser0 = new ArgsParser(stringArray0);
      assertNotNull(argsParser0);
      
      ParameterArgument parameterArgument0 = argsParser0.parseParameterArgument("-&'1");
      assertEquals(0, argsParser0.getArgsLeftCount());
      assertNotNull(parameterArgument0);
  }

  @Test
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[10];
      stringArray0[4] = "-&'1";
      ArgsParser argsParser0 = new ArgsParser(stringArray0);
      assertNotNull(argsParser0);
      
      argsParser0.parseParameterArgument("1");
      assertEquals(1, argsParser0.getArgsLeftCount());
  }

  @Test
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[10];
      stringArray0[5] = "1";
      ArgsParser argsParser0 = new ArgsParser(stringArray0);
      assertNotNull(argsParser0);
      
      argsParser0.parseParameterArgument("1");
      assertEquals(1, argsParser0.getArgsLeftCount());
  }

  @Test
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[10];
      stringArray0[4] = "'1";
      ArgsParser argsParser0 = new ArgsParser(stringArray0);
      assertNotNull(argsParser0);
      
      argsParser0.parseParameterArgument("1");
      assertEquals(1, argsParser0.getArgsLeftCount());
  }

  @Test
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[4] = "--";
      ArgsParser argsParser0 = new ArgsParser(stringArray0);
      assertNotNull(argsParser0);
      
      argsParser0.parseParameterArgument("1");
      assertEquals(1, argsParser0.getArgsLeftCount());
  }

  @Test
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[3] = "-%Z+qETY;N1@";
      ArgsParser argsParser0 = new ArgsParser(stringArray0);
      assertNotNull(argsParser0);
      
      argsParser0.parseParameterArgument("]");
      assertEquals(1, argsParser0.getArgsLeftCount());
  }

  @Test
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[10];
      stringArray0[9] = "-Aem1[]} ydk";
      ArgsParser argsParser0 = new ArgsParser(stringArray0);
      assertNotNull(argsParser0);
      
      ParameterArgument parameterArgument0 = argsParser0.parseParameterArgument("1");
      assertNotNull(parameterArgument0);
      assertEquals(9, parameterArgument0.getPosition());
  }

  @Test
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[6];
      ArgsParser argsParser0 = new ArgsParser(stringArray0);
      assertNotNull(argsParser0);
      
      String[] stringArray1 = new String[10];
      stringArray1[9] = "-&'1";
      argsParser0.setArgs(stringArray1);
      argsParser0.parseParameterArgument("1");
      assertEquals(1, argsParser0.getArgsLeftCount());
  }

  @Test
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[10];
      stringArray0[4] = "-&'1";
      stringArray0[5] = "1";
      ArgsParser argsParser0 = new ArgsParser(stringArray0);
      assertNotNull(argsParser0);
      
      ParameterArgument parameterArgument0 = argsParser0.parseParameterArgument("1");
      assertNotNull(parameterArgument0);
      assertEquals(1, argsParser0.getArgsLeftCount());
  }

  @Test
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[12];
      stringArray0[3] = "-1";
      stringArray0[4] = "-1";
      ArgsParser argsParser0 = new ArgsParser(stringArray0);
      assertNotNull(argsParser0);
      
      ParameterArgument parameterArgument0 = argsParser0.parseParameterArgument("1");
      assertNotNull(parameterArgument0);
      assertEquals(0, argsParser0.getArgsLeftCount());
  }

  @Test
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[21];
      stringArray0[2] = "-1}&,";
      ArgsParser argsParser0 = new ArgsParser(stringArray0);
      assertNotNull(argsParser0);
      
      ParameterArgument parameterArgument0 = argsParser0.parseParameterArgument("1");
      assertEquals(0, argsParser0.getArgsLeftCount());
      assertNotNull(parameterArgument0);
  }

  @Test
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[5] = "/i{XZPwz]#/]i<PU*A";
      ArgsParser argsParser0 = new ArgsParser(stringArray0);
      assertNotNull(argsParser0);
      
      List<StringArgument> list0 = argsParser0.parseStringArgument();
      assertNotNull(list0);
      assertEquals(false, list0.isEmpty());
      assertEquals(0, argsParser0.getArgsLeftCount());
  }
}
