/*
 * This file was automatically generated by EvoSuite
 */

package org.sourceforge.ifx.utils;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.util.HashMap;
import java.util.Map;
import org.jdom.Document;
import org.jdom.IllegalNameException;
import org.junit.BeforeClass;
import org.sourceforge.ifx.basetypes.IFXObject;
import org.sourceforge.ifx.utils.IFXDocumentHandler;
import org.sourceforge.ifx.utils.IFXException;

@RunWith(EvoSuiteRunner.class)
public class IFXDocumentHandlerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Document document0 = new Document();
      // Undeclared exception!
      try {
        IFXDocumentHandler.parse(document0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Root element not set
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      IFXDocumentHandler iFXDocumentHandler0 = new IFXDocumentHandler();
      assertNotNull(iFXDocumentHandler0);
  }

  @Test
  public void test2()  throws Throwable  {
      IFXObject iFXObject0 = new IFXObject();
      try {
        IFXDocumentHandler.build(iFXObject0, (String) null, (String) null);
        fail("Expecting exception: IFXException");
      } catch(IFXException e) {
        /*
         * Error encoding org.sourceforge.ifx.basetypes.IFXObject
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      IFXObject iFXObject0 = new IFXObject();
      // Undeclared exception!
      try {
        IFXDocumentHandler.build(iFXObject0, ",5/YN4hg]~&pk", ",5/YN4hg]~&pk");
        fail("Expecting exception: IllegalNameException");
      } catch(IllegalNameException e) {
        /*
         * The name \",5/YN4hg]~&pk\" is not legal for JDOM/XML Namespace prefixs: Namespace prefixes cannot contain the character \",\".
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try {
        IFXDocumentHandler.write((Document) null, 1476, (String) null, (OutputStream) byteArrayOutputStream0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try {
        IFXDocumentHandler.write((Document) null, (-1087), "TL", (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1175);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) pipedInputStream0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      try {
        IFXDocumentHandler.read((InputStream) pushbackInputStream0, false, (Map) hashMap0);
        fail("Expecting exception: IFXException");
      } catch(IFXException e) {
        /*
         * Error reading Document
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try {
        IFXDocumentHandler.read((InputStream) dataInputStream0, true, (Map) hashMap0);
        fail("Expecting exception: IFXException");
      } catch(IFXException e) {
        /*
         * Error reading Document
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      try {
        IFXDocumentHandler.read((InputStream) null, true, (Map) null);
        fail("Expecting exception: IFXException");
      } catch(IFXException e) {
        /*
         * Error reading Document
         */
      }
  }
}
