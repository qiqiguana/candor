/*
 * This file was automatically generated by EvoSuite
 */

package org.sourceforge.ifx.tools;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import org.sourceforge.ifx.tools.MemberVariable;

@RunWith(EvoSuiteRunner.class)
public class MemberVariableEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      MemberVariable memberVariable0 = new MemberVariable("04L<[&&a-n*`", "04L<[&&a-n*`", true);
      String string0 = memberVariable0.getGetterName();
      assertEquals("04L<[&&a-n*`[]", memberVariable0.getClassName());
      assertNotNull(string0);
      assertEquals("get04L<[&&a-n*`", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      MemberVariable memberVariable0 = new MemberVariable("04L<[&&a-n*`", "04L<[&&a-n*`", true);
      String string0 = memberVariable0.getSetterName();
      assertEquals("04L<[&&a-n*`[]", memberVariable0.getClassName());
      assertNotNull(string0);
      assertEquals("set04L<[&&a-n*`", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      MemberVariable memberVariable0 = new MemberVariable("04L<[&&a-n*`", "04L<[&&a-n*`", true);
      int int0 = memberVariable0.hashCode();
      assertEquals("04L<[&&a-n*`[]", memberVariable0.getClassName());
      assertEquals(51892209, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      MemberVariable memberVariable0 = new MemberVariable("K^I(;X!D*", "K^I(;X!D*", false);
      assertNotNull(memberVariable0);
      assertEquals("K^I(;X!D*", memberVariable0.getClassName());
      assertEquals("k^I(;X!D*", memberVariable0.getName());
  }

  @Test
  public void test4()  throws Throwable  {
      MemberVariable memberVariable0 = new MemberVariable("04L<[&&a-n*`", "04L<[&&a-n*`", false);
      String string0 = memberVariable0.getClassName();
      assertNotNull(string0);
      assertEquals("04L<[&&a-n*`", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      MemberVariable memberVariable0 = new MemberVariable("04L<[&&a-n*`", "04L<[&&a-n*`", true);
      String string0 = memberVariable0.getClassName();
      assertNotNull(string0);
      assertEquals("04L<[&&a-n*`[]", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      MemberVariable memberVariable0 = new MemberVariable("set", "set", false);
      boolean boolean0 = memberVariable0.equals((Object) memberVariable0);
      assertEquals("set", memberVariable0.getClassName());
      assertEquals(true, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      MemberVariable memberVariable0 = new MemberVariable("04L<[&&a-n*`", "04L<[&&a-n*`", true);
      boolean boolean0 = memberVariable0.equals((Object) "04L<[&&a-n*`");
      assertEquals("04L<[&&a-n*`[]", memberVariable0.getClassName());
      assertEquals(false, boolean0);
  }
}
