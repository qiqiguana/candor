/*
 * This file was automatically generated by EvoSuite
 */

package org.sourceforge.ifx.framework.complextype;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import org.sourceforge.ifx.framework.complextype.CustAddRq_Type;
import org.sourceforge.ifx.framework.element.AsyncRqUID;
import org.sourceforge.ifx.framework.element.AuthInfo;
import org.sourceforge.ifx.framework.element.CryptType;
import org.sourceforge.ifx.framework.element.CustId;
import org.sourceforge.ifx.framework.element.CustInfo;
import org.sourceforge.ifx.framework.element.MsgRqHdr;
import org.sourceforge.ifx.framework.element.RqUID;
import org.sourceforge.ifx.framework.element.SecObjId;
import org.sourceforge.ifx.framework.element.SecretList;

@RunWith(EvoSuiteRunner.class)
public class CustAddRq_TypeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      CustAddRq_Type custAddRq_Type0 = new CustAddRq_Type();
      custAddRq_Type0.setCustInfo((CustInfo) null);
      assertEquals("org.sourceforge.ifx.framework.complextype.CustAddRq_Type = {\n  RqUID = NULL\n  MsgRqHdr = NULL\n  AsyncRqUID = NULL\n  CustInfo = NULL\n  SecretList = NULL\n  CryptType = NULL\n  SecObjId = NULL\n  CustId = NULL\n  AuthInfo = NULL\n}", custAddRq_Type0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      CustAddRq_Type custAddRq_Type0 = new CustAddRq_Type();
      RqUID rqUID0 = new RqUID();
      custAddRq_Type0.setRqUID(rqUID0);
      assertEquals("org.sourceforge.ifx.framework.element.RqUID = {\n  String = NULL\n}", rqUID0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      CustAddRq_Type custAddRq_Type0 = new CustAddRq_Type();
      CryptType[] cryptTypeArray0 = new CryptType[5];
      custAddRq_Type0.setCryptType(cryptTypeArray0);
      assertEquals("org.sourceforge.ifx.framework.complextype.CustAddRq_Type = {\n  RqUID = NULL\n  MsgRqHdr = NULL\n  AsyncRqUID = NULL\n  CustInfo = NULL\n  SecretList = NULL\n  CryptType = [\n    [0]:Exception! java.lang.NullPointerException\n  },\n    [1]:Exception! java.lang.NullPointerException\n  },\n    [2]:Exception! java.lang.NullPointerException\n  },\n    [3]:Exception! java.lang.NullPointerException\n  },\n    [4]:Exception! java.lang.NullPointerException\n  }\n  ]\n  SecObjId = NULL\n  CustId = NULL\n  AuthInfo = NULL\n}", custAddRq_Type0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      CustAddRq_Type custAddRq_Type0 = new CustAddRq_Type();
      CustId custId0 = new CustId();
      custAddRq_Type0.setCustId(custId0);
      assertEquals("org.sourceforge.ifx.framework.element.CustId = {\n  SPName = NULL\n  CustPermId = NULL\n  CustLoginId = NULL\n  CardMagData = NULL\n  CardLogicalData = NULL\n}", custId0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      CustAddRq_Type custAddRq_Type0 = new CustAddRq_Type();
      boolean boolean0 = custAddRq_Type0.equals((Object) "2013-07-01");
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      CustAddRq_Type custAddRq_Type0 = new CustAddRq_Type();
      String string0 = custAddRq_Type0.toString();
      assertEquals("org.sourceforge.ifx.framework.complextype.CustAddRq_Type = {\n  RqUID = NULL\n  MsgRqHdr = NULL\n  AsyncRqUID = NULL\n  CustInfo = NULL\n  SecretList = NULL\n  CryptType = NULL\n  SecObjId = NULL\n  CustId = NULL\n  AuthInfo = NULL\n}", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      CustAddRq_Type custAddRq_Type0 = new CustAddRq_Type();
      SecretList[] secretListArray0 = new SecretList[1];
      custAddRq_Type0.setSecretList(secretListArray0);
      assertEquals("org.sourceforge.ifx.framework.complextype.CustAddRq_Type = {\n  RqUID = NULL\n  MsgRqHdr = NULL\n  AsyncRqUID = NULL\n  CustInfo = NULL\n  SecretList = [\n    [0]:Exception! java.lang.NullPointerException\n  }\n  ]\n  CryptType = NULL\n  SecObjId = NULL\n  CustId = NULL\n  AuthInfo = NULL\n}", custAddRq_Type0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      CustAddRq_Type custAddRq_Type0 = new CustAddRq_Type();
      custAddRq_Type0.setMsgRqHdr((MsgRqHdr) null);
      assertEquals("org.sourceforge.ifx.framework.complextype.CustAddRq_Type = {\n  RqUID = NULL\n  MsgRqHdr = NULL\n  AsyncRqUID = NULL\n  CustInfo = NULL\n  SecretList = NULL\n  CryptType = NULL\n  SecObjId = NULL\n  CustId = NULL\n  AuthInfo = NULL\n}", custAddRq_Type0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      CustAddRq_Type custAddRq_Type0 = new CustAddRq_Type();
      custAddRq_Type0.setAuthInfo((AuthInfo) null);
      assertEquals("org.sourceforge.ifx.framework.complextype.CustAddRq_Type = {\n  RqUID = NULL\n  MsgRqHdr = NULL\n  AsyncRqUID = NULL\n  CustInfo = NULL\n  SecretList = NULL\n  CryptType = NULL\n  SecObjId = NULL\n  CustId = NULL\n  AuthInfo = NULL\n}", custAddRq_Type0.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      CustAddRq_Type custAddRq_Type0 = new CustAddRq_Type();
      SecObjId[] secObjIdArray0 = new SecObjId[1];
      custAddRq_Type0.setSecObjId(secObjIdArray0);
      assertEquals("org.sourceforge.ifx.framework.complextype.CustAddRq_Type = {\n  RqUID = NULL\n  MsgRqHdr = NULL\n  AsyncRqUID = NULL\n  CustInfo = NULL\n  SecretList = NULL\n  CryptType = NULL\n  SecObjId = [\n    [0]:Exception! java.lang.NullPointerException\n  }\n  ]\n  CustId = NULL\n  AuthInfo = NULL\n}", custAddRq_Type0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      CustAddRq_Type custAddRq_Type0 = new CustAddRq_Type();
      custAddRq_Type0.setAsyncRqUID((AsyncRqUID) null);
      assertEquals("org.sourceforge.ifx.framework.complextype.CustAddRq_Type = {\n  RqUID = NULL\n  MsgRqHdr = NULL\n  AsyncRqUID = NULL\n  CustInfo = NULL\n  SecretList = NULL\n  CryptType = NULL\n  SecObjId = NULL\n  CustId = NULL\n  AuthInfo = NULL\n}", custAddRq_Type0.toString());
  }
}
