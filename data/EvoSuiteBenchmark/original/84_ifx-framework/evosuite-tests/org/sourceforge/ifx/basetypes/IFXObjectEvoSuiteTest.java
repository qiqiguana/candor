/*
 * This file was automatically generated by EvoSuite
 */

package org.sourceforge.ifx.basetypes;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import org.sourceforge.ifx.basetypes.IFXBase64Binary;
import org.sourceforge.ifx.basetypes.IFXHexBinary;
import org.sourceforge.ifx.basetypes.IFXObject;
import org.sourceforge.ifx.basetypes.IFXString;

@RunWith(EvoSuiteRunner.class)
public class IFXObjectEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      IFXBase64Binary iFXBase64Binary0 = new IFXBase64Binary();
      String string0 = iFXBase64Binary0.toString();
      assertEquals("org.sourceforge.ifx.basetypes.IFXBase64Binary = {\n  Bytes = NULL\n  String = Exception! java.lang.reflect.InvocationTargetException\n}", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      IFXObject iFXObject0 = new IFXObject();
      boolean boolean0 = iFXObject0.equals((Object) iFXObject0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      IFXObject iFXObject0 = new IFXObject();
      boolean boolean0 = iFXObject0.equals((Object) "org.sourceforge.ifx.basetypes.IFXObject = {\n}");
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      IFXObject iFXObject0 = new IFXObject();
      String string0 = iFXObject0.toString();
      assertEquals("org.sourceforge.ifx.basetypes.IFXObject = {\n}", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      IFXBase64Binary iFXBase64Binary0 = new IFXBase64Binary();
      iFXBase64Binary0.setString("");
      String string0 = iFXBase64Binary0.toString();
      assertEquals("org.sourceforge.ifx.basetypes.IFXBase64Binary = {\n  Bytes = [\n\n  ]\n  String = Exception! java.lang.ClassCastException: java.lang.String cannot be cast to org.sourceforge.ifx.basetypes.IFXObject\n}", iFXBase64Binary0.toString());
      assertEquals("org.sourceforge.ifx.basetypes.IFXBase64Binary = {\n  Bytes = [\n\n  ]\n  String = Exception! java.lang.ClassCastException: java.lang.String cannot be cast to org.sourceforge.ifx.basetypes.IFXObject\n}", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      IFXHexBinary iFXHexBinary0 = new IFXHexBinary();
      iFXHexBinary0.setString("org.sourceforge.ifx.basetypes.IFXHexBinary = {\n  Bytes = NULL\n  String = Exception! java.lang.reflect.InvocationTargetException\n}");
      String string0 = iFXHexBinary0.toString();
      assertEquals("org.sourceforge.ifx.basetypes.IFXHexBinary = {\n  Bytes = [\n    [0]:Exception! java.lang.ClassCastException: java.lang.Byte cannot be cast to org.sourceforge.ifx.basetypes.IFXObject\n  }", iFXHexBinary0.toString());
      assertEquals("org.sourceforge.ifx.basetypes.IFXHexBinary = {\n  Bytes = [\n    [0]:Exception! java.lang.ClassCastException: java.lang.Byte cannot be cast to org.sourceforge.ifx.basetypes.IFXObject\n  }", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      IFXObject iFXObject0 = new IFXObject();
      IFXString iFXString0 = new IFXString();
      boolean boolean0 = iFXObject0.equals((Object) iFXString0);
      assertEquals(false, boolean0);
  }
}
