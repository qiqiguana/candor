/*
 * This file was automatically generated by EvoSuite
 */

package org.sourceforge.ifx.framework.complextype;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import org.sourceforge.ifx.framework.complextype.ChkDetail_Type;
import org.sourceforge.ifx.framework.element.AcctId;
import org.sourceforge.ifx.framework.element.BankId;
import org.sourceforge.ifx.framework.element.ChkNum;
import org.sourceforge.ifx.framework.element.ManualMicr;
import org.sourceforge.ifx.framework.element.Memo;
import org.sourceforge.ifx.framework.element.Name;
import org.sourceforge.ifx.framework.element.OrgPhone;
import org.sourceforge.ifx.framework.element.OrigDt;
import org.sourceforge.ifx.framework.element.PostAddr;
import org.sourceforge.ifx.framework.element.ProcessControl;

@RunWith(EvoSuiteRunner.class)
public class ChkDetail_TypeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ChkDetail_Type chkDetail_Type0 = new ChkDetail_Type();
      chkDetail_Type0.setName((Name) null);
      assertEquals("org.sourceforge.ifx.framework.complextype.ChkDetail_Type = {\n  Name = NULL\n  ManualMicr = NULL\n  BankId = NULL\n  AcctId = NULL\n  ProcessControl = NULL\n  ChkNum = NULL\n  OrigDt = NULL\n  PostAddr = NULL\n  OrgPhone = NULL\n  Memo = NULL\n}", chkDetail_Type0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      ChkDetail_Type chkDetail_Type0 = new ChkDetail_Type();
      boolean boolean0 = chkDetail_Type0.equals((Object) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      ChkDetail_Type chkDetail_Type0 = new ChkDetail_Type();
      OrgPhone orgPhone0 = new OrgPhone();
      chkDetail_Type0.setOrgPhone(orgPhone0);
      assertEquals("org.sourceforge.ifx.framework.complextype.ChkDetail_Type = {\n  Name = NULL\n  ManualMicr = NULL\n  BankId = NULL\n  AcctId = NULL\n  ProcessControl = NULL\n  ChkNum = NULL\n  OrigDt = NULL\n  PostAddr = NULL\n  OrgPhone = null\n  Memo = NULL\n}", chkDetail_Type0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      ChkDetail_Type chkDetail_Type0 = new ChkDetail_Type();
      BankId bankId0 = new BankId();
      chkDetail_Type0.setBankId(bankId0);
      assertEquals("org.sourceforge.ifx.framework.element.BankId = {\n  String = NULL\n}", bankId0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      ChkDetail_Type chkDetail_Type0 = new ChkDetail_Type();
      ProcessControl processControl0 = new ProcessControl();
      chkDetail_Type0.setProcessControl(processControl0);
      assertEquals("org.sourceforge.ifx.framework.element.ProcessControl = {\n  String = NULL\n}", processControl0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      ChkDetail_Type chkDetail_Type0 = new ChkDetail_Type();
      chkDetail_Type0.setPostAddr((PostAddr) null);
      assertEquals("org.sourceforge.ifx.framework.complextype.ChkDetail_Type = {\n  Name = NULL\n  ManualMicr = NULL\n  BankId = NULL\n  AcctId = NULL\n  ProcessControl = NULL\n  ChkNum = NULL\n  OrigDt = NULL\n  PostAddr = NULL\n  OrgPhone = NULL\n  Memo = NULL\n}", chkDetail_Type0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      ChkDetail_Type chkDetail_Type0 = new ChkDetail_Type();
      assertNotNull(chkDetail_Type0);
      
      OrigDt origDt0 = new OrigDt();
      chkDetail_Type0.setOrigDt(origDt0);
      assertEquals("org.sourceforge.ifx.framework.element.OrigDt = {\n  String = Exception! java.lang.ClassCastException: java.lang.String cannot be cast to org.sourceforge.ifx.basetypes.IFXObject\n}", origDt0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      ChkDetail_Type chkDetail_Type0 = new ChkDetail_Type();
      chkDetail_Type0.setMemo((Memo) null);
      assertEquals("org.sourceforge.ifx.framework.complextype.ChkDetail_Type = {\n  Name = NULL\n  ManualMicr = NULL\n  BankId = NULL\n  AcctId = NULL\n  ProcessControl = NULL\n  ChkNum = NULL\n  OrigDt = NULL\n  PostAddr = NULL\n  OrgPhone = NULL\n  Memo = NULL\n}", chkDetail_Type0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      ChkDetail_Type chkDetail_Type0 = new ChkDetail_Type();
      String string0 = chkDetail_Type0.toString();
      assertEquals("org.sourceforge.ifx.framework.complextype.ChkDetail_Type = {\n  Name = NULL\n  ManualMicr = NULL\n  BankId = NULL\n  AcctId = NULL\n  ProcessControl = NULL\n  ChkNum = NULL\n  OrigDt = NULL\n  PostAddr = NULL\n  OrgPhone = NULL\n  Memo = NULL\n}", string0);
  }

  @Test
  public void test9()  throws Throwable  {
      ChkDetail_Type chkDetail_Type0 = new ChkDetail_Type();
      chkDetail_Type0.setChkNum((ChkNum) null);
      assertEquals("org.sourceforge.ifx.framework.complextype.ChkDetail_Type = {\n  Name = NULL\n  ManualMicr = NULL\n  BankId = NULL\n  AcctId = NULL\n  ProcessControl = NULL\n  ChkNum = NULL\n  OrigDt = NULL\n  PostAddr = NULL\n  OrgPhone = NULL\n  Memo = NULL\n}", chkDetail_Type0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      ChkDetail_Type chkDetail_Type0 = new ChkDetail_Type();
      chkDetail_Type0.setAcctId((AcctId) null);
      assertEquals("org.sourceforge.ifx.framework.complextype.ChkDetail_Type = {\n  Name = NULL\n  ManualMicr = NULL\n  BankId = NULL\n  AcctId = NULL\n  ProcessControl = NULL\n  ChkNum = NULL\n  OrigDt = NULL\n  PostAddr = NULL\n  OrgPhone = NULL\n  Memo = NULL\n}", chkDetail_Type0.toString());
  }

  @Test
  public void test11()  throws Throwable  {
      ChkDetail_Type chkDetail_Type0 = new ChkDetail_Type();
      chkDetail_Type0.setManualMicr((ManualMicr) null);
      assertEquals("org.sourceforge.ifx.framework.complextype.ChkDetail_Type = {\n  Name = NULL\n  ManualMicr = NULL\n  BankId = NULL\n  AcctId = NULL\n  ProcessControl = NULL\n  ChkNum = NULL\n  OrigDt = NULL\n  PostAddr = NULL\n  OrgPhone = NULL\n  Memo = NULL\n}", chkDetail_Type0.toString());
  }
}
