/*
 * This file was automatically generated by EvoSuite
 */

package glengineer.positions;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import glengineer.blocks.Block;
import glengineer.blocks.CharTable;
import glengineer.blocks.HorizontalBlock;
import glengineer.blocks.Scheme;
import glengineer.blocks.VerticalBlock;
import glengineer.positions.CharPosition;
import glengineer.positions.CharPosition1;
import glengineer.positions.CharPosition2;
import glengineer.positions.VWordPosition;
import glengineer.positions.WordPosition;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class VWordPositionEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      VWordPosition vWordPosition0 = new VWordPosition(0, (-4), 0);
      assertNotNull(vWordPosition0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "H";
      Scheme scheme0 = new Scheme(stringArray0);
      HorizontalBlock horizontalBlock0 = new HorizontalBlock(scheme0);
      int int0 = vWordPosition0.getLengthInsideOf((Block) horizontalBlock0);
      assertEquals("vertical(0;-4,0)", vWordPosition0.toString());
      assertEquals(0, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      VWordPosition vWordPosition0 = new VWordPosition(0, 0, 0);
      assertNotNull(vWordPosition0);
      
      String string0 = vWordPosition0.toString();
      assertEquals("vertical(0;0,0)", string0);
      assertNotNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      CharPosition charPosition0 = new CharPosition(346, 346);
      VWordPosition vWordPosition0 = new VWordPosition(346, charPosition0);
      assertNotNull(vWordPosition0);
      
      // Undeclared exception!
      try {
        vWordPosition0.textAt((CharTable) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      VWordPosition vWordPosition0 = new VWordPosition(1589, 1589, 1589);
      assertNotNull(vWordPosition0);
      
      int int0 = vWordPosition0.getHeight();
      assertEquals("vertical(1589;1589,1589)", vWordPosition0.toString());
      assertEquals(0, int0);
  }

  @Test
  public void test4()  throws Throwable  {
      VWordPosition vWordPosition0 = new VWordPosition(1, 1, 1);
      assertNotNull(vWordPosition0);
      
      CharPosition1 charPosition1_0 = vWordPosition0.getStart();
      VWordPosition vWordPosition1 = new VWordPosition((CharPosition) charPosition1_0, 1);
      assertEquals("(1,1)", charPosition1_0.toString());
      assertEquals("vertical(1;1,1)", vWordPosition1.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      VWordPosition vWordPosition0 = new VWordPosition(1, (-1175), 1);
      assertNotNull(vWordPosition0);
      
      CharPosition2 charPosition2_0 = vWordPosition0.getEnd();
      assertEquals("(1,1)", charPosition2_0.toString());
      assertEquals(1176, vWordPosition0.getHeight());
  }

  @Test
  public void test6()  throws Throwable  {
      VWordPosition vWordPosition0 = null;
      try {
        vWordPosition0 = new VWordPosition(0, 261, 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * wrong word position parameters
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      VWordPosition vWordPosition0 = new VWordPosition(0, (-4), 0);
      assertNotNull(vWordPosition0);
      
      boolean boolean0 = vWordPosition0.equals((WordPosition) vWordPosition0);
      assertEquals("vertical(0;-4,0)", vWordPosition0.toString());
      assertEquals(true, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      CharPosition charPosition0 = new CharPosition(346, 346);
      VWordPosition vWordPosition0 = new VWordPosition(346, charPosition0);
      assertNotNull(vWordPosition0);
      
      boolean boolean0 = vWordPosition0.equals((WordPosition) null);
      assertEquals(false, boolean0);
      assertEquals("vertical(346;346,346)", vWordPosition0.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      VWordPosition vWordPosition0 = new VWordPosition(0, (-4), 0);
      assertNotNull(vWordPosition0);
      
      VWordPosition vWordPosition1 = new VWordPosition(4, 4, 4);
      assertNotNull(vWordPosition1);
      
      boolean boolean0 = vWordPosition0.equals((WordPosition) vWordPosition1);
      assertEquals("vertical(4;4,4)", vWordPosition1.toString());
      assertEquals("vertical(0;-4,0)", vWordPosition0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      VWordPosition vWordPosition0 = new VWordPosition(0, 0, 0);
      assertNotNull(vWordPosition0);
      
      VWordPosition vWordPosition1 = new VWordPosition(0, 5, 5);
      assertNotNull(vWordPosition1);
      
      boolean boolean0 = vWordPosition0.equals((WordPosition) vWordPosition1);
      assertEquals(false, boolean0);
      assertEquals("vertical(0;5,5)", vWordPosition1.toString());
  }

  @Test
  public void test11()  throws Throwable  {
      VWordPosition vWordPosition0 = new VWordPosition(0, 0, 0);
      assertNotNull(vWordPosition0);
      
      VWordPosition vWordPosition1 = new VWordPosition(0, 0, 1);
      assertNotNull(vWordPosition1);
      
      boolean boolean0 = vWordPosition1.equals((WordPosition) vWordPosition0);
      assertEquals(false, boolean0);
      assertEquals("vertical(0;0,1)", vWordPosition1.toString());
  }

  @Test
  public void test12()  throws Throwable  {
      VWordPosition vWordPosition0 = new VWordPosition(1, (-1175), 1);
      assertNotNull(vWordPosition0);
      
      boolean boolean0 = vWordPosition0.isTrivial();
      assertEquals(false, boolean0);
      assertEquals("vertical(1;-1175,1)", vWordPosition0.toString());
  }

  @Test
  public void test13()  throws Throwable  {
      CharPosition charPosition0 = new CharPosition(346, 346);
      VWordPosition vWordPosition0 = new VWordPosition(346, charPosition0);
      assertNotNull(vWordPosition0);
      
      boolean boolean0 = vWordPosition0.isTrivial();
      assertEquals("vertical(346;346,346)", vWordPosition0.toString());
      assertEquals(true, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      VWordPosition vWordPosition0 = new VWordPosition(0, 0, 0);
      assertNotNull(vWordPosition0);
      
      boolean boolean0 = vWordPosition0.contains((-1402), 0);
      assertEquals(false, boolean0);
      assertEquals("vertical(0;0,0)", vWordPosition0.toString());
  }

  @Test
  public void test15()  throws Throwable  {
      VWordPosition vWordPosition0 = new VWordPosition((-2), (-26), (-2));
      assertNotNull(vWordPosition0);
      
      boolean boolean0 = vWordPosition0.contains((-2), (-26));
      assertEquals(24, vWordPosition0.getHeight());
      assertEquals(true, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      VWordPosition vWordPosition0 = new VWordPosition(1, 1, 1);
      assertNotNull(vWordPosition0);
      
      boolean boolean0 = vWordPosition0.contains(1, (-10));
      assertEquals("vertical(1;1,1)", vWordPosition0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      VWordPosition vWordPosition0 = new VWordPosition(2, 2, 2);
      assertNotNull(vWordPosition0);
      
      boolean boolean0 = vWordPosition0.contains(2, 2);
      assertEquals("vertical(2;2,2)", vWordPosition0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      VWordPosition vWordPosition0 = new VWordPosition(0, 0, 0);
      assertNotNull(vWordPosition0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "H";
      Scheme scheme0 = new Scheme(stringArray0);
      HorizontalBlock horizontalBlock0 = new HorizontalBlock(scheme0);
      VerticalBlock verticalBlock0 = new VerticalBlock((Block) horizontalBlock0);
      CharPosition2 charPosition2_0 = verticalBlock0.getPos2();
      VerticalBlock verticalBlock1 = new VerticalBlock(scheme0, (CharPosition) charPosition2_0, (CharPosition) charPosition2_0);
      boolean boolean0 = vWordPosition0.liesIn((CharTable) verticalBlock1);
      assertEquals(false, boolean0);
      assertEquals("vertical(0;0,0)", vWordPosition0.toString());
  }

  @Test
  public void test19()  throws Throwable  {
      VWordPosition vWordPosition0 = new VWordPosition(0, (-4), 0);
      assertNotNull(vWordPosition0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "H";
      Scheme scheme0 = new Scheme(stringArray0);
      HorizontalBlock horizontalBlock0 = new HorizontalBlock(scheme0);
      boolean boolean0 = vWordPosition0.liesIn((CharTable) horizontalBlock0);
      assertEquals("vertical(0;-4,0)", vWordPosition0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      VWordPosition vWordPosition0 = new VWordPosition(4, 4, 4);
      assertNotNull(vWordPosition0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "H";
      Scheme scheme0 = new Scheme(stringArray0);
      HorizontalBlock horizontalBlock0 = new HorizontalBlock(scheme0);
      boolean boolean0 = vWordPosition0.liesIn((CharTable) horizontalBlock0);
      assertEquals(false, boolean0);
      assertEquals("vertical(4;4,4)", vWordPosition0.toString());
  }

  @Test
  public void test21()  throws Throwable  {
      VWordPosition vWordPosition0 = new VWordPosition(0, 0, 0);
      assertNotNull(vWordPosition0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "H";
      Scheme scheme0 = new Scheme(stringArray0);
      HorizontalBlock horizontalBlock0 = new HorizontalBlock(scheme0);
      boolean boolean0 = vWordPosition0.liesIn((CharTable) horizontalBlock0);
      assertEquals(true, boolean0);
      assertEquals(0, vWordPosition0.getHeight());
  }

  @Test
  public void test22()  throws Throwable  {
      VWordPosition vWordPosition0 = new VWordPosition(0, 32, 32);
      assertNotNull(vWordPosition0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "H";
      Scheme scheme0 = new Scheme(stringArray0);
      HorizontalBlock horizontalBlock0 = new HorizontalBlock(scheme0);
      boolean boolean0 = vWordPosition0.liesIn((CharTable) horizontalBlock0);
      assertEquals(false, boolean0);
      assertEquals("vertical(0;32,32)", vWordPosition0.toString());
  }

  @Test
  public void test23()  throws Throwable  {
      CharPosition charPosition0 = new CharPosition((-66), 346);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      Scheme scheme0 = new Scheme(stringArray0);
      VWordPosition vWordPosition0 = new VWordPosition(charPosition0);
      assertNotNull(vWordPosition0);
      
      boolean boolean0 = vWordPosition0.intersects((CharTable) scheme0);
      assertEquals(false, boolean0);
      assertEquals("vertical(-66;346,346)", vWordPosition0.toString());
  }

  @Test
  public void test24()  throws Throwable  {
      VWordPosition vWordPosition0 = new VWordPosition(0, (-4), 0);
      assertNotNull(vWordPosition0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "H";
      Scheme scheme0 = new Scheme(stringArray0);
      boolean boolean0 = vWordPosition0.intersects((CharTable) scheme0);
      assertEquals("vertical(0;-4,0)", vWordPosition0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test25()  throws Throwable  {
      VWordPosition vWordPosition0 = new VWordPosition(4, 4, 4);
      assertNotNull(vWordPosition0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "H";
      Scheme scheme0 = new Scheme(stringArray0);
      boolean boolean0 = vWordPosition0.intersects((CharTable) scheme0);
      assertEquals(false, boolean0);
      assertEquals("vertical(4;4,4)", vWordPosition0.toString());
  }

  @Test
  public void test26()  throws Throwable  {
      VWordPosition vWordPosition0 = new VWordPosition(0, 5, 5);
      assertNotNull(vWordPosition0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "H";
      Scheme scheme0 = new Scheme(stringArray0);
      boolean boolean0 = vWordPosition0.intersects((CharTable) scheme0);
      assertEquals("vertical(0;5,5)", vWordPosition0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "H";
      Scheme scheme0 = new Scheme(stringArray0);
      VWordPosition vWordPosition0 = new VWordPosition(0, 0, 1);
      assertNotNull(vWordPosition0);
      
      boolean boolean0 = vWordPosition0.intersects((CharTable) scheme0);
      assertEquals(true, boolean0);
      assertEquals(1, vWordPosition0.getHeight());
  }

  @Test
  public void test28()  throws Throwable  {
      VWordPosition vWordPosition0 = new VWordPosition(0, 0, 0);
      assertNotNull(vWordPosition0);
      
      int int0 = vWordPosition0.compareTo(vWordPosition0);
      assertEquals(0, int0);
      assertEquals("vertical(0;0,0)", vWordPosition0.toString());
  }

  @Test
  public void test29()  throws Throwable  {
      VWordPosition vWordPosition0 = new VWordPosition(0, (-4), 0);
      assertNotNull(vWordPosition0);
      
      VWordPosition vWordPosition1 = new VWordPosition(4, 4, 4);
      assertNotNull(vWordPosition1);
      
      int int0 = vWordPosition0.compareTo(vWordPosition1);
      assertEquals("vertical(0;-4,0)", vWordPosition0.toString());
      assertEquals(0, vWordPosition1.getHeight());
      assertEquals((-1), int0);
  }

  @Test
  public void test30()  throws Throwable  {
      VWordPosition vWordPosition0 = new VWordPosition(1589, 1589, 1589);
      assertNotNull(vWordPosition0);
      
      VWordPosition vWordPosition1 = new VWordPosition(0, 0, 1589);
      assertNotNull(vWordPosition1);
      
      int int0 = vWordPosition0.compareTo(vWordPosition1);
      assertEquals("vertical(1589;1589,1589)", vWordPosition0.toString());
      assertEquals(1, int0);
      assertEquals(false, vWordPosition1.isTrivial());
  }
}
