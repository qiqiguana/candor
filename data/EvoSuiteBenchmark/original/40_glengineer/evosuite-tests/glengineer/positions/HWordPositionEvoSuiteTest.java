/*
 * This file was automatically generated by EvoSuite
 */

package glengineer.positions;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import glengineer.blocks.Block;
import glengineer.blocks.CharTable;
import glengineer.blocks.HorizontalBlock;
import glengineer.blocks.Scheme;
import glengineer.blocks.VerticalBlock;
import glengineer.positions.CharPosition;
import glengineer.positions.CharPosition1;
import glengineer.positions.CharPosition2;
import glengineer.positions.HWordPosition;
import glengineer.positions.VWordPosition;
import glengineer.positions.WordPosition;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class HWordPositionEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      Scheme scheme0 = new Scheme(stringArray0);
      HorizontalBlock horizontalBlock0 = new HorizontalBlock(scheme0);
      HWordPosition hWordPosition0 = new HWordPosition((Block) horizontalBlock0);
      assertNotNull(hWordPosition0);
      
      boolean boolean0 = hWordPosition0.liesIn((CharTable) horizontalBlock0);
      assertEquals("horizontal(0,0;0)", hWordPosition0.toString());
      assertEquals(true, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      Scheme scheme0 = new Scheme(stringArray0);
      HorizontalBlock horizontalBlock0 = new HorizontalBlock(scheme0);
      HWordPosition hWordPosition0 = new HWordPosition(2, 2, 0);
      assertNotNull(hWordPosition0);
      
      int int0 = hWordPosition0.getLengthInsideOf((Block) horizontalBlock0);
      assertEquals(0, int0);
      assertEquals("horizontal(2,2;0)", hWordPosition0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      Scheme scheme0 = new Scheme(stringArray0);
      HorizontalBlock horizontalBlock0 = new HorizontalBlock(scheme0);
      HWordPosition hWordPosition0 = new HWordPosition(2, 2, 0);
      assertNotNull(hWordPosition0);
      
      // Undeclared exception!
      try {
        hWordPosition0.textAt((CharTable) horizontalBlock0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Improper subline coodinates.
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      CharPosition charPosition0 = new CharPosition(1013, 1013);
      HWordPosition hWordPosition0 = new HWordPosition(21, charPosition0);
      assertNotNull(hWordPosition0);
      
      CharPosition1 charPosition1_0 = hWordPosition0.getStart();
      boolean boolean0 = hWordPosition0.contains((CharPosition) charPosition1_0);
      assertEquals("(21,1013)", charPosition1_0.toString());
      assertEquals(true, boolean0);
      assertEquals("horizontal(21,1013;1013)", hWordPosition0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      HWordPosition hWordPosition0 = new HWordPosition(2, 2, 0);
      assertNotNull(hWordPosition0);
      
      int int0 = hWordPosition0.getWidth();
      assertEquals("horizontal(2,2;0)", hWordPosition0.toString());
      assertEquals(0, int0);
  }

  @Test
  public void test5()  throws Throwable  {
      VWordPosition vWordPosition0 = new VWordPosition(28, 28, 28);
      CharPosition2 charPosition2_0 = vWordPosition0.getEnd();
      HWordPosition hWordPosition0 = new HWordPosition((CharPosition) charPosition2_0, 28);
      assertNotNull(hWordPosition0);
      
      String string0 = hWordPosition0.toString();
      assertNotNull(string0);
      assertEquals("horizontal(28,28;28)", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      HWordPosition hWordPosition0 = new HWordPosition(2, 2, 0);
      assertNotNull(hWordPosition0);
      
      CharPosition2 charPosition2_0 = hWordPosition0.getEnd();
      assertEquals(0, hWordPosition0.getWidth());
      assertEquals("(2,0)", charPosition2_0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      CharPosition charPosition0 = new CharPosition(1013, 1013);
      HWordPosition hWordPosition0 = null;
      try {
        hWordPosition0 = new HWordPosition(charPosition0, 21);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * wrong word position parameters
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      HWordPosition hWordPosition0 = new HWordPosition((-764), (-764), (-764));
      assertNotNull(hWordPosition0);
      
      boolean boolean0 = hWordPosition0.equals((WordPosition) hWordPosition0);
      assertEquals("horizontal(-764,-764;-764)", hWordPosition0.toString());
      assertEquals(true, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      VWordPosition vWordPosition0 = new VWordPosition(28, 28, 28);
      CharPosition2 charPosition2_0 = vWordPosition0.getEnd();
      HWordPosition hWordPosition0 = new HWordPosition((CharPosition) charPosition2_0, 28);
      assertNotNull(hWordPosition0);
      
      boolean boolean0 = hWordPosition0.equals((WordPosition) vWordPosition0);
      assertEquals(false, boolean0);
      assertEquals("horizontal(28,28;28)", hWordPosition0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      HWordPosition hWordPosition0 = new HWordPosition(1, 1, 1342);
      assertNotNull(hWordPosition0);
      
      CharPosition1 charPosition1_0 = new CharPosition1(1342, 1);
      HWordPosition hWordPosition1 = new HWordPosition((CharPosition) charPosition1_0);
      boolean boolean0 = hWordPosition0.equals((WordPosition) hWordPosition1);
      assertEquals("horizontal(1,1;1342)", hWordPosition0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      HWordPosition hWordPosition0 = new HWordPosition((-764), (-764), (-764));
      assertNotNull(hWordPosition0);
      
      CharPosition1 charPosition1_0 = hWordPosition0.getStart();
      HWordPosition hWordPosition1 = new HWordPosition((CharPosition) charPosition1_0, 897);
      assertNotNull(hWordPosition1);
      
      boolean boolean0 = hWordPosition0.equals((WordPosition) hWordPosition1);
      assertEquals(false, boolean0);
      assertEquals("horizontal(-764,897;-764)", hWordPosition1.toString());
      assertEquals("horizontal(-764,-764;-764)", hWordPosition0.toString());
  }

  @Test
  public void test12()  throws Throwable  {
      HWordPosition hWordPosition0 = new HWordPosition((-764), (-764), (-764));
      assertNotNull(hWordPosition0);
      
      HWordPosition hWordPosition1 = new HWordPosition((-764), (-764), 897);
      boolean boolean0 = hWordPosition0.equals((WordPosition) hWordPosition1);
      assertEquals("horizontal(-764,-764;897)", hWordPosition1.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      CharPosition charPosition0 = new CharPosition(1013, 1013);
      HWordPosition hWordPosition0 = new HWordPosition(21, charPosition0);
      assertNotNull(hWordPosition0);
      
      boolean boolean0 = hWordPosition0.isTrivial();
      assertEquals("horizontal(21,1013;1013)", hWordPosition0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      HWordPosition hWordPosition0 = new HWordPosition(2, 2, 0);
      assertNotNull(hWordPosition0);
      
      boolean boolean0 = hWordPosition0.isTrivial();
      assertEquals("horizontal(2,2;0)", hWordPosition0.toString());
      assertEquals(true, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      HWordPosition hWordPosition0 = new HWordPosition(1, 1, 1342);
      assertNotNull(hWordPosition0);
      
      CharPosition1 charPosition1_0 = new CharPosition1(1342, 1);
      boolean boolean0 = hWordPosition0.contains((CharPosition) charPosition1_0);
      assertEquals("horizontal(1,1;1342)", hWordPosition0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      HWordPosition hWordPosition0 = new HWordPosition(1, 1, 1342);
      assertNotNull(hWordPosition0);
      
      CharPosition charPosition0 = new CharPosition((-1530), 1342);
      boolean boolean0 = hWordPosition0.contains(charPosition0);
      assertEquals("horizontal(1,1;1342)", hWordPosition0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      HWordPosition hWordPosition0 = new HWordPosition((-778), (-778), (-778));
      assertNotNull(hWordPosition0);
      
      CharPosition1 charPosition1_0 = hWordPosition0.getStart();
      boolean boolean0 = hWordPosition0.contains((CharPosition) charPosition1_0);
      assertEquals(false, boolean0);
      assertEquals("(-778,-778)", charPosition1_0.toString());
      assertEquals(0, hWordPosition0.getWidth());
  }

  @Test
  public void test18()  throws Throwable  {
      HWordPosition hWordPosition0 = new HWordPosition((-778), (-778), (-778));
      assertNotNull(hWordPosition0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "T";
      Scheme scheme0 = new Scheme(stringArray0);
      assertNotNull(scheme0);
      
      boolean boolean0 = hWordPosition0.liesIn((CharTable) scheme0);
      assertEquals(false, boolean0);
      assertEquals("horizontal(-778,-778;-778)", hWordPosition0.toString());
  }

  @Test
  public void test19()  throws Throwable  {
      HWordPosition hWordPosition0 = new HWordPosition(1, 1, 1);
      assertNotNull(hWordPosition0);
      
      String[] stringArray0 = new String[17];
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      stringArray0[9] = "";
      stringArray0[10] = "";
      stringArray0[11] = "";
      stringArray0[12] = "";
      stringArray0[13] = "";
      stringArray0[14] = "";
      stringArray0[15] = "";
      stringArray0[16] = "";
      stringArray0[0] = "";
      Scheme scheme0 = new Scheme(stringArray0);
      boolean boolean0 = hWordPosition0.liesIn((CharTable) scheme0);
      assertEquals("horizontal(1,1;1)", hWordPosition0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      HWordPosition hWordPosition0 = new HWordPosition(1, 1, 1342);
      assertNotNull(hWordPosition0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Mg";
      Scheme scheme0 = new Scheme(stringArray0);
      assertNotNull(scheme0);
      
      boolean boolean0 = hWordPosition0.liesIn((CharTable) scheme0);
      assertEquals(false, boolean0);
      assertEquals("horizontal(1,1;1342)", hWordPosition0.toString());
  }

  @Test
  public void test21()  throws Throwable  {
      HWordPosition hWordPosition0 = new HWordPosition((-778), (-778), (-778));
      assertNotNull(hWordPosition0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "T";
      Scheme scheme0 = new Scheme(stringArray0);
      assertNotNull(scheme0);
      
      VerticalBlock verticalBlock0 = new VerticalBlock(scheme0);
      boolean boolean0 = hWordPosition0.intersects((CharTable) verticalBlock0);
      assertEquals(false, boolean0);
      assertEquals("horizontal(-778,-778;-778)", hWordPosition0.toString());
  }

  @Test
  public void test22()  throws Throwable  {
      HWordPosition hWordPosition0 = new HWordPosition(1, 1, 1);
      assertNotNull(hWordPosition0);
      
      String[] stringArray0 = new String[17];
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      stringArray0[9] = "";
      stringArray0[10] = "";
      stringArray0[11] = "";
      stringArray0[12] = "";
      stringArray0[13] = "";
      stringArray0[14] = "";
      stringArray0[15] = "";
      stringArray0[16] = "";
      stringArray0[0] = "";
      Scheme scheme0 = new Scheme(stringArray0);
      VerticalBlock verticalBlock0 = new VerticalBlock(scheme0);
      boolean boolean0 = hWordPosition0.intersects((CharTable) verticalBlock0);
      assertEquals("horizontal(1,1;1)", hWordPosition0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      HWordPosition hWordPosition0 = new HWordPosition(1, 1, 1342);
      assertNotNull(hWordPosition0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Mg";
      Scheme scheme0 = new Scheme(stringArray0);
      assertNotNull(scheme0);
      
      boolean boolean0 = hWordPosition0.intersects((CharTable) scheme0);
      assertEquals("horizontal(1,1;1342)", hWordPosition0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      Scheme scheme0 = new Scheme(stringArray0);
      HorizontalBlock horizontalBlock0 = new HorizontalBlock(scheme0);
      HWordPosition hWordPosition0 = new HWordPosition((Block) horizontalBlock0);
      assertNotNull(hWordPosition0);
      
      boolean boolean0 = hWordPosition0.intersects((CharTable) scheme0);
      assertEquals("horizontal(0,0;0)", hWordPosition0.toString());
      assertEquals(false, boolean0);
  }
}
