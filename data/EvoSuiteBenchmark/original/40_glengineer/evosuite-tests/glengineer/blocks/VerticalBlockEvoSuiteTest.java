/*
 * This file was automatically generated by EvoSuite
 */

package glengineer.blocks;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import glengineer.blocks.Block;
import glengineer.blocks.Scheme;
import glengineer.blocks.VerticalBlock;
import glengineer.positions.CharPosition;
import glengineer.positions.CharPosition1;
import glengineer.positions.VWordPosition;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class VerticalBlockEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "char position ";
      Scheme scheme0 = new Scheme(stringArray0);
      VerticalBlock verticalBlock0 = new VerticalBlock(scheme0);
      verticalBlock0.extractParallelSubblocks();
      assertEquals(13, verticalBlock0.x2);
      assertEquals("char position", verticalBlock0.getUpperLine());
  }

  @Test
  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "kc|";
      Scheme scheme0 = new Scheme(stringArray0);
      VerticalBlock verticalBlock0 = new VerticalBlock(scheme0);
      List<Block> list0 = verticalBlock0.extractSequentialSubblocks();
      assertEquals(2, verticalBlock0.x2);
      assertEquals(false, list0.isEmpty());
  }

  @Test
  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "i";
      Scheme scheme0 = new Scheme(stringArray0);
      VerticalBlock verticalBlock0 = new VerticalBlock(scheme0, 0, 0, 1, 0);
      TreeSet<VWordPosition> treeSet0 = new TreeSet<VWordPosition>();
      List<Block> list0 = verticalBlock0.extractParallelSubblocksSeparatedByLines((Set<VWordPosition>) treeSet0);
      assertNotNull(list0);
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test3()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "i";
      Scheme scheme0 = new Scheme(stringArray0);
      VerticalBlock verticalBlock0 = new VerticalBlock(scheme0, 1, 0, 1, 0);
      List<Block> list0 = verticalBlock0.extractSequentialSubblocks();
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test4()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".";
      stringArray0[1] = ".";
      stringArray0[2] = ".";
      stringArray0[3] = ".";
      stringArray0[4] = ".";
      stringArray0[5] = ".";
      Scheme scheme0 = new Scheme(stringArray0);
      VerticalBlock verticalBlock0 = new VerticalBlock(scheme0);
      List<Block> list0 = verticalBlock0.extractSequentialSubblocks();
      assertEquals(6, list0.size());
      assertNotNull(list0);
  }

  @Test
  public void test5()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "kc|";
      Scheme scheme0 = new Scheme(stringArray0);
      VerticalBlock verticalBlock0 = new VerticalBlock(scheme0);
      stringArray0[0] = "\",#6v(j?*";
      List<Block> list0 = verticalBlock0.extractSequentialSubblocks();
      assertEquals(false, list0.isEmpty());
      assertEquals(true, verticalBlock0.containsOnlyOneWord());
      assertNotNull(list0);
  }

  @Test
  public void test6()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Scheme scheme0 = new Scheme(stringArray0);
      CharPosition1 charPosition1_0 = new CharPosition1(0, 0);
      VerticalBlock verticalBlock0 = new VerticalBlock(scheme0, (CharPosition) charPosition1_0, (CharPosition) charPosition1_0);
      List<Block> list0 = verticalBlock0.extractParallelSubblocks();
      assertEquals(0, list0.size());
  }

  @Test
  public void test7()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "kc|";
      Scheme scheme0 = new Scheme(stringArray0);
      VerticalBlock verticalBlock0 = new VerticalBlock(scheme0);
      stringArray0[0] = "\",#6v(j?*";
      verticalBlock0.extractParallelSubblocks();
      assertEquals("Block(0,0, 3,1):\n #######\n # \",# #\n #######", verticalBlock0.toString());
      assertEquals(true, verticalBlock0.containsOnlyOneWord());
  }

  @Test
  public void test8()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "p8K-Z-6OB9LN";
      Scheme scheme0 = new Scheme(stringArray0);
      VerticalBlock verticalBlock0 = new VerticalBlock(scheme0);
      Set<VWordPosition> set0 = scheme0.getVLinesPositions();
      List<Block> list0 = verticalBlock0.extractParallelSubblocksSeparatedByLines(set0);
      assertNotNull(list0);
      assertEquals(false, verticalBlock0.containsOnlyOneWord());
      assertEquals(false, list0.isEmpty());
  }

  @Test
  public void test9()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "i";
      Scheme scheme0 = new Scheme(stringArray0);
      VerticalBlock verticalBlock0 = new VerticalBlock(scheme0, 0, 0, 1, 0);
      // Undeclared exception!
      try {
        verticalBlock0.extractParallelSubblocksWithoutLines();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Can not extract a group from an empty block:
         * Block(0,0, 1,0):
         *  #####
         *  #####
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "i";
      Scheme scheme0 = new Scheme(stringArray0);
      VerticalBlock verticalBlock0 = new VerticalBlock(scheme0, 1, 0, 1, 0);
      // Undeclared exception!
      try {
        verticalBlock0.extractParallelSubblocksWithoutLines();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "p8K-Z-6OB9LN";
      Scheme scheme0 = new Scheme(stringArray0);
      VerticalBlock verticalBlock0 = new VerticalBlock(scheme0);
      List<Block> list0 = verticalBlock0.extractParallelSubblocks();
      assertNotNull(list0);
      assertEquals(3, list0.size());
  }

  @Test
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".";
      stringArray0[1] = ".";
      stringArray0[2] = ".";
      stringArray0[3] = ".";
      stringArray0[4] = ".";
      stringArray0[5] = ".";
      Scheme scheme0 = new Scheme(stringArray0);
      VerticalBlock verticalBlock0 = new VerticalBlock(scheme0);
      List<Block> list0 = verticalBlock0.extractParallelSubblocksWithoutLines();
      assertNotNull(list0);
      assertEquals(false, list0.isEmpty());
  }
}
