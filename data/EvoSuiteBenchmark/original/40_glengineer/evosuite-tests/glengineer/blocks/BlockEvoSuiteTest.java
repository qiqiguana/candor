/*
 * This file was automatically generated by EvoSuite
 */

package glengineer.blocks;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import glengineer.blocks.Block;
import glengineer.blocks.HorizontalBlock;
import glengineer.blocks.Scheme;
import glengineer.blocks.VerticalBlock;
import glengineer.positions.CharPosition;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BlockEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Scheme scheme0 = new Scheme(stringArray0);
      HorizontalBlock horizontalBlock0 = new HorizontalBlock(scheme0);
      // Undeclared exception!
      try {
        horizontalBlock0.wordCharAt(1, 1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * char position (1,1) out of block.
         * Block(0,0, 0,1):
         *  ####
         *  #  #
         *  ####
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Scheme scheme0 = new Scheme(stringArray0);
      HorizontalBlock horizontalBlock0 = new HorizontalBlock(scheme0);
      String string0 = horizontalBlock0.getUpperLine();
      assertEquals(1, horizontalBlock0.y2);
      assertNotNull(string0);
      assertEquals(0, horizontalBlock0.x2);
  }

  @Test
  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Scheme scheme0 = new Scheme(stringArray0);
      HorizontalBlock horizontalBlock0 = new HorizontalBlock(scheme0);
      HorizontalBlock horizontalBlock1 = new HorizontalBlock((Block) horizontalBlock0);
      assertNotNull(horizontalBlock1);
      assertEquals(0, horizontalBlock1.x1);
      assertEquals(0, horizontalBlock1.y1);
      assertEquals(0, horizontalBlock1.x2);
      assertEquals("Block(0,0, 0,1):\n ####\n #  #\n ####", horizontalBlock1.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Scheme scheme0 = new Scheme(stringArray0);
      HorizontalBlock horizontalBlock0 = new HorizontalBlock(scheme0);
      HorizontalBlock horizontalBlock1 = null;
      try {
        horizontalBlock1 = new HorizontalBlock((Block) horizontalBlock0, (-1209), 0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * improper block definition: -1209,0, 0,0.
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "U";
      Scheme scheme0 = new Scheme(stringArray0);
      HorizontalBlock horizontalBlock0 = null;
      try {
        horizontalBlock0 = new HorizontalBlock(scheme0, 1, (-1), (-1), 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * improper block definition: 1,-1, -1,0.
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      HorizontalBlock horizontalBlock0 = null;
      try {
        horizontalBlock0 = new HorizontalBlock((Scheme) null, 1150, 1150, (-3), 1150);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * improper block definition: 1150,1150, -3,1150.
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Scheme scheme0 = new Scheme(stringArray0);
      VerticalBlock verticalBlock0 = null;
      try {
        verticalBlock0 = new VerticalBlock(scheme0, 0, 0, 0, (-1387));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * improper block definition: 0,0, 0,-1387.
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[0] = "";
      Scheme scheme0 = new Scheme(stringArray0);
      CharPosition charPosition0 = new CharPosition(5, 5);
      HorizontalBlock horizontalBlock0 = null;
      try {
        horizontalBlock0 = new HorizontalBlock(scheme0, charPosition0, charPosition0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * improper block definition: 5,5, 5,5.
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      Scheme scheme0 = new Scheme(stringArray0);
      CharPosition charPosition0 = new CharPosition(0, 1141);
      HorizontalBlock horizontalBlock0 = null;
      try {
        horizontalBlock0 = new HorizontalBlock(scheme0, charPosition0, charPosition0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * improper block definition: 0,1141, 0,1141.
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".";
      stringArray0[1] = ".";
      Scheme scheme0 = new Scheme(stringArray0);
      HorizontalBlock horizontalBlock0 = new HorizontalBlock(scheme0);
      boolean boolean0 = horizontalBlock0.containsOnlyOneWord();
      assertEquals(1, horizontalBlock0.x2);
      assertEquals(2, horizontalBlock0.y2);
      assertEquals("Block(0,0, 1,2):\n #####\n # . #\n # . #\n #####", horizontalBlock0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      Scheme scheme0 = new Scheme(stringArray0);
      HorizontalBlock horizontalBlock0 = new HorizontalBlock(scheme0);
      // Undeclared exception!
      try {
        horizontalBlock0.containsOnlyOneWord();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * cannot search in a trivial block
         */
      }
  }
}
