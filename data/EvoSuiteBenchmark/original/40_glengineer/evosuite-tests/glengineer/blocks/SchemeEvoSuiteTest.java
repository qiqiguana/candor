/*
 * This file was automatically generated by EvoSuite
 */

package glengineer.blocks;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import glengineer.blocks.Scheme;
import glengineer.positions.CharPosition;
import glengineer.positions.CharPosition1;
import glengineer.positions.CharPosition2;
import glengineer.positions.HWordPosition;
import glengineer.positions.VWordPosition;
import glengineer.positions.WordPosition;
import java.util.Set;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SchemeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[3] = "-|";
      stringArray0[2] = "-|";
      stringArray0[4] = "-|";
      stringArray0[0] = "-|";
      stringArray0[1] = "-|";
      Scheme scheme0 = new Scheme(stringArray0);
      assertNotNull(scheme0);
      
      CharPosition1 charPosition1_0 = scheme0.getPos1();
      scheme0.verticalLineAt((CharPosition) charPosition1_0);
      assertEquals(0, scheme0.y1);
      assertEquals(5, scheme0.y2);
      assertEquals(false, scheme0.isTrivial());
  }

  @Test
  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = " ";
      Scheme scheme0 = new Scheme(stringArray0);
      assertNotNull(scheme0);
      
      scheme0.containsGapName(" ");
      assertEquals(false, scheme0.isTrivial());
  }

  @Test
  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "wrong word position parameters";
      Scheme scheme0 = new Scheme(stringArray0);
      CharPosition1 charPosition1_0 = scheme0.getPos1();
      VWordPosition vWordPosition0 = scheme0.verticalLineAt((CharPosition) charPosition1_0);
      assertNull(vWordPosition0);
  }

  @Test
  public void test3()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "wrong word position parameters";
      Scheme scheme0 = new Scheme(stringArray0);
      HWordPosition hWordPosition0 = scheme0.firstWord_Horizontally();
      CharPosition2 charPosition2_0 = hWordPosition0.getEnd();
      HWordPosition hWordPosition1 = scheme0.anyHElementAt((CharPosition) charPosition2_0);
      assertNull(hWordPosition1);
  }

  @Test
  public void test4()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".";
      Scheme scheme0 = new Scheme(stringArray0);
      assertNotNull(scheme0);
      
      Set<HWordPosition> set0 = scheme0.getHLinesPositions();
      assertNotNull(set0);
      assertEquals(true, set0.isEmpty());
  }

  @Test
  public void test5()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "The s*rings are not of equal|length.";
      Scheme scheme0 = null;
      try {
        scheme0 = new Scheme(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * A wrong symbol '*' was found on the scheme under position (5,0)
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Pdy-9yC";
      Scheme scheme0 = new Scheme(stringArray0);
      assertNotNull(scheme0);
      
      Set<VWordPosition> set0 = scheme0.getVLinesPositions();
      assertNotNull(set0);
      assertEquals(0, scheme0.x1);
  }

  @Test
  public void test7()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "|";
      stringArray0[1] = "|";
      stringArray0[2] = "|";
      stringArray0[3] = "8";
      stringArray0[4] = "|";
      stringArray0[5] = "|";
      stringArray0[6] = "|";
      Scheme scheme0 = new Scheme(stringArray0);
      assertNotNull(scheme0);
      
      boolean boolean0 = scheme0.containsComponentName("|");
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "[Z=G]6/3^)";
      stringArray0[1] = "[Z=G]6/3^)";
      stringArray0[2] = "eE4N>lm&pEyS9vw~eoY";
      Scheme scheme0 = null;
      try {
        scheme0 = new Scheme(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * The strings are not of equal length.
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\"'S,sh1\"k*J";
      Scheme scheme0 = null;
      try {
        scheme0 = new Scheme(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * A wrong symbol '\"' was found on the scheme under position (0,0)
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "+9[Yc";
      stringArray0[1] = "+9[Yc";
      stringArray0[2] = "+9[Yc";
      stringArray0[3] = "+9[Yc";
      Scheme scheme0 = null;
      try {
        scheme0 = new Scheme(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Unrecognizable construction found in the scheme under position (0,0)
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = " -";
      Scheme scheme0 = new Scheme(stringArray0);
      assertEquals(2, scheme0.x2);
      assertEquals(0, scheme0.x1);
      assertNotNull(scheme0);
  }

  @Test
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[3] = "-)`~F+";
      stringArray0[0] = "-)`~F+";
      stringArray0[5] = "-)`~F+";
      stringArray0[1] = "-)`~F+";
      stringArray0[2] = "-)`~F+";
      stringArray0[4] = "-)`~F+";
      Scheme scheme0 = null;
      try {
        scheme0 = new Scheme(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * A wrong symbol ')' was found on the scheme under position (1,0)
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-y|9hz]6qz";
      stringArray0[1] = "D8`4y/,%)";
      Scheme scheme0 = null;
      try {
        scheme0 = new Scheme(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * A wrong symbol '`' was found on the scheme under position (2,1)
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".mt9'xG)_+m>xb6L";
      Scheme scheme0 = null;
      try {
        scheme0 = new Scheme(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * A wrong symbol ''' was found on the scheme under position (4,0)
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[2] = "-b+";
      stringArray0[0] = "-b+";
      stringArray0[1] = "-b+";
      stringArray0[3] = "Pri";
      stringArray0[4] = "-b+";
      Scheme scheme0 = null;
      try {
        scheme0 = new Scheme(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Unrecognizable construction found in the scheme under position (2,0)
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "cCQ|C9N";
      stringArray0[1] = "cCQ|C9N";
      Scheme scheme0 = null;
      try {
        scheme0 = new Scheme(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * cannot register the component name \"cCQ\"
         */
      }
  }

  @Test
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "cCQrC9N";
      Scheme scheme0 = new Scheme(stringArray0);
      assertNotNull(scheme0);
      
      scheme0.anyHElementAt(7, 0);
      assertEquals(0, scheme0.x1);
  }

  @Test
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "wrong word position parameters";
      Scheme scheme0 = new Scheme(stringArray0);
      assertNotNull(scheme0);
      
      HWordPosition hWordPosition0 = scheme0.anyHElementAt(0, 0);
      assertNotNull(hWordPosition0);
      assertEquals("horizontal(0,5;0)", hWordPosition0.toString());
  }

  @Test
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "|";
      stringArray0[1] = "|";
      stringArray0[2] = "|";
      stringArray0[3] = "8";
      stringArray0[4] = "|";
      stringArray0[5] = "|";
      stringArray0[6] = "|";
      Scheme scheme0 = new Scheme(stringArray0);
      assertNotNull(scheme0);
      
      CharPosition1 charPosition1_0 = scheme0.getPos1();
      scheme0.anyHElementAt((CharPosition) charPosition1_0);
      assertEquals(false, scheme0.isTrivial());
      assertEquals("(0,0)", charPosition1_0.toString());
  }

  @Test
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".";
      Scheme scheme0 = new Scheme(stringArray0);
      HWordPosition hWordPosition0 = scheme0.gapAt(0, 0);
      assertEquals(false, hWordPosition0.isTrivial());
  }

  @Test
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "cCQ|C9N";
      Scheme scheme0 = new Scheme(stringArray0);
      assertNotNull(scheme0);
      
      scheme0.verticalLineAt(1, 7);
      assertEquals(0, scheme0.y1);
      assertEquals(false, scheme0.isTrivial());
  }

  @Test
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = " ";
      Scheme scheme0 = new Scheme(stringArray0);
      VWordPosition vWordPosition0 = scheme0.verticalLineAt(0, 0);
      assertNull(vWordPosition0);
  }

  @Test
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "|";
      stringArray0[1] = "|";
      stringArray0[2] = "|";
      stringArray0[3] = "8";
      stringArray0[4] = "|";
      stringArray0[5] = "|";
      stringArray0[6] = "|";
      Scheme scheme0 = new Scheme(stringArray0);
      assertNotNull(scheme0);
      
      CharPosition1 charPosition1_0 = scheme0.getPos1();
      VWordPosition vWordPosition0 = scheme0.verticalLineAt((CharPosition) charPosition1_0);
      assertNotNull(vWordPosition0);
      assertEquals(3, vWordPosition0.getHeight());
  }

  @Test
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "cCQrC9N";
      Scheme scheme0 = new Scheme(stringArray0);
      assertNotNull(scheme0);
      
      scheme0.gapAtLine((WordPosition) null);
      assertEquals(0, scheme0.x1);
  }

  @Test
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      Scheme scheme0 = new Scheme(stringArray0);
      assertNotNull(scheme0);
      
      String string0 = scheme0.toString();
      assertEquals(3, scheme0.y2);
      assertNotNull(string0);
      assertEquals("\n\n\n", string0);
      assertEquals(0, scheme0.y1);
  }
}
