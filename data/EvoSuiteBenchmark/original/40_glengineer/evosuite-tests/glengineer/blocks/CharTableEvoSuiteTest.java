/*
 * This file was automatically generated by EvoSuite
 */

package glengineer.blocks;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import glengineer.blocks.Block;
import glengineer.blocks.CharTable;
import glengineer.blocks.HorizontalBlock;
import glengineer.blocks.Scheme;
import glengineer.blocks.VerticalBlock;
import glengineer.positions.CharPosition;
import glengineer.positions.CharPosition1;
import glengineer.positions.CharPosition2;
import glengineer.positions.HWordPosition;
import glengineer.positions.VWordPosition;
import glengineer.positions.WordPosition;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class CharTableEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "D";
      Scheme scheme0 = new Scheme(stringArray0);
      // Undeclared exception!
      try {
        scheme0.splitterAt(1, 1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * char position out of table
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "b";
      Scheme scheme0 = new Scheme(stringArray0);
      assertNotNull(scheme0);
      
      boolean boolean0 = scheme0.letterAt(0, 0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "9JZdj-";
      Scheme scheme0 = new Scheme(stringArray0);
      assertNotNull(scheme0);
      
      scheme0.optimize();
      assertEquals(5, scheme0.x2);
      assertEquals(false, scheme0.isTrivial());
  }

  @Test
  public void test3()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "9JZdj-";
      Scheme scheme0 = new Scheme(stringArray0);
      assertNotNull(scheme0);
      
      HWordPosition hWordPosition0 = scheme0.firstWord_Vertically();
      assertNotNull(hWordPosition0);
      
      HWordPosition hWordPosition1 = scheme0.firstWordAfter_Horizontally(hWordPosition0);
      assertNull(hWordPosition1);
      assertEquals("horizontal(0,5;0)", hWordPosition0.toString());
      assertEquals(5, hWordPosition0.getWidth());
  }

  @Test
  public void test4()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "-";
      stringArray0[0] = "-";
      Scheme scheme0 = new Scheme(stringArray0);
      assertNotNull(scheme0);
      
      HorizontalBlock horizontalBlock0 = new HorizontalBlock(scheme0);
      CharPosition1 charPosition1_0 = scheme0.getPos1();
      char char0 = horizontalBlock0.charAt((CharPosition) charPosition1_0);
      assertEquals("(0,0)", charPosition1_0.toString());
      assertEquals('-', char0);
  }

  @Test
  public void test5()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "-";
      stringArray0[0] = "-";
      Scheme scheme0 = new Scheme(stringArray0);
      assertNotNull(scheme0);
      
      scheme0.optimize();
      boolean boolean0 = scheme0.permitsY(0);
      assertEquals(1, scheme0.x1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "NU";
      Scheme scheme0 = new Scheme(stringArray0);
      HWordPosition hWordPosition0 = scheme0.anyHElementAt(1, 1);
      assertNull(hWordPosition0);
  }

  @Test
  public void test7()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "D";
      Scheme scheme0 = new Scheme(stringArray0);
      assertNotNull(scheme0);
      
      VerticalBlock verticalBlock0 = new VerticalBlock(scheme0);
      CharPosition2 charPosition2_0 = verticalBlock0.getPos2();
      boolean boolean0 = verticalBlock0.contains((CharPosition) charPosition2_0);
      assertEquals("(1,1)", charPosition2_0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "9JZdj-";
      Scheme scheme0 = new Scheme(stringArray0);
      assertNotNull(scheme0);
      
      HWordPosition hWordPosition0 = scheme0.firstWord_Vertically();
      assertNotNull(hWordPosition0);
      
      HWordPosition hWordPosition1 = scheme0.firstWordAfter_Vertically(hWordPosition0);
      assertNull(hWordPosition1);
      assertEquals("horizontal(0,5;0)", hWordPosition0.toString());
      assertEquals(5, hWordPosition0.getWidth());
  }

  @Test
  public void test9()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "b";
      Scheme scheme0 = new Scheme(stringArray0);
      assertNotNull(scheme0);
      
      CharPosition2 charPosition2_0 = scheme0.getPos2();
      HorizontalBlock horizontalBlock0 = new HorizontalBlock(scheme0, (CharPosition) charPosition2_0, (CharPosition) charPosition2_0);
      horizontalBlock0.extractParallelSubblocks();
      assertEquals("Block(1,1, 1,1):\n ####\n ####", horizontalBlock0.toString());
      assertEquals(false, scheme0.isTrivial());
      assertEquals(true, horizontalBlock0.isTrivial());
      assertEquals("(1,1)", charPosition2_0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "9JZdj-";
      Scheme scheme0 = new Scheme(stringArray0);
      assertNotNull(scheme0);
      
      boolean boolean0 = scheme0.isTrivial();
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "b";
      Scheme scheme0 = new Scheme(stringArray0);
      assertNotNull(scheme0);
      assertEquals(false, scheme0.isTrivial());
      
      scheme0.y1 = 1;
      boolean boolean0 = scheme0.isTrivial();
      assertEquals(true, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      boolean boolean0 = CharTable.isWordChar('.');
      assertEquals(true, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      boolean boolean0 = CharTable.isSplitter('u');
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "9JZdj-";
      Scheme scheme0 = new Scheme(stringArray0);
      assertNotNull(scheme0);
      
      HWordPosition hWordPosition0 = scheme0.firstWord_Vertically();
      assertNotNull(hWordPosition0);
      
      String string0 = scheme0.textAt((WordPosition) hWordPosition0);
      assertEquals("9JZdj", string0);
  }

  @Test
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "9JZdj-";
      Scheme scheme0 = new Scheme(stringArray0);
      // Undeclared exception!
      try {
        scheme0.textAt((WordPosition) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Null word position.
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "-";
      stringArray0[0] = "-";
      Scheme scheme0 = new Scheme(stringArray0);
      assertNotNull(scheme0);
      
      HorizontalBlock horizontalBlock0 = new HorizontalBlock(scheme0);
      VWordPosition vWordPosition0 = new VWordPosition((Block) horizontalBlock0);
      assertNotNull(vWordPosition0);
      
      String string0 = horizontalBlock0.textAt(vWordPosition0);
      assertEquals("(vertical) -", string0);
      assertNotNull(string0);
  }

  @Test
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "D";
      Scheme scheme0 = new Scheme(stringArray0);
      assertNotNull(scheme0);
      
      VerticalBlock verticalBlock0 = new VerticalBlock(scheme0);
      HWordPosition hWordPosition0 = verticalBlock0.firstWord_Horizontally();
      assertEquals("horizontal(0,1;0)", hWordPosition0.toString());
      assertNotNull(hWordPosition0);
  }

  @Test
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "-";
      stringArray0[0] = "-";
      Scheme scheme0 = new Scheme(stringArray0);
      HorizontalBlock horizontalBlock0 = new HorizontalBlock(scheme0);
      HWordPosition hWordPosition0 = horizontalBlock0.firstWord_Horizontally();
      assertNull(hWordPosition0);
  }

  @Test
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "9JZdj-";
      Scheme scheme0 = new Scheme(stringArray0);
      assertNotNull(scheme0);
      
      HWordPosition hWordPosition0 = scheme0.lastWord_Horizontally();
      assertEquals("horizontal(0,5;0)", hWordPosition0.toString());
      assertNotNull(hWordPosition0);
  }

  @Test
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "-";
      stringArray0[0] = "-";
      Scheme scheme0 = new Scheme(stringArray0);
      HorizontalBlock horizontalBlock0 = new HorizontalBlock(scheme0);
      HWordPosition hWordPosition0 = horizontalBlock0.lastWord_Horizontally();
      assertNull(hWordPosition0);
  }

  @Test
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "9JZdj-";
      Scheme scheme0 = new Scheme(stringArray0);
      assertNotNull(scheme0);
      
      stringArray0[0] = "32'v2+7{IL";
      HWordPosition hWordPosition0 = scheme0.lastWord_Horizontally();
      assertEquals("horizontal(3,5;0)", hWordPosition0.toString());
      assertNotNull(hWordPosition0);
  }

  @Test
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "-";
      stringArray0[0] = "-";
      Scheme scheme0 = new Scheme(stringArray0);
      VerticalBlock verticalBlock0 = new VerticalBlock(scheme0);
      HWordPosition hWordPosition0 = verticalBlock0.firstWord_Vertically();
      assertNull(hWordPosition0);
  }

  @Test
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Scheme scheme0 = new Scheme(stringArray0);
      CharPosition2 charPosition2_0 = scheme0.getPos2();
      VerticalBlock verticalBlock0 = new VerticalBlock(scheme0, (CharPosition) charPosition2_0, (CharPosition) charPosition2_0);
      // Undeclared exception!
      try {
        verticalBlock0.firstWordAfter_Vertically((HWordPosition) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Can not search for the word following the null word.
         */
      }
  }
}
