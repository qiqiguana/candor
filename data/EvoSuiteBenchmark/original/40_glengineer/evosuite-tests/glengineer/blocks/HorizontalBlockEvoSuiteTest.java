/*
 * This file was automatically generated by EvoSuite
 */

package glengineer.blocks;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import glengineer.blocks.Block;
import glengineer.blocks.HorizontalBlock;
import glengineer.blocks.Scheme;
import glengineer.blocks.VerticalBlock;
import glengineer.positions.CharPosition;
import glengineer.positions.CharPosition1;
import glengineer.positions.HWordPosition;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class HorizontalBlockEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "B";
      Scheme scheme0 = new Scheme(stringArray0);
      HorizontalBlock horizontalBlock0 = new HorizontalBlock(scheme0);
      assertEquals("B", horizontalBlock0.getUpperLine());
  }

  @Test
  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnoprstuvw-yz_1234567890";
      Scheme scheme0 = new Scheme(stringArray0);
      VerticalBlock verticalBlock0 = new VerticalBlock(scheme0);
      HorizontalBlock horizontalBlock0 = new HorizontalBlock((Block) verticalBlock0, 0, 0, 62, 1);
      List<Block> list0 = horizontalBlock0.extractSequentialSubblocks();
      assertNotNull(list0);
      assertEquals(2, list0.size());
  }

  @Test
  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnoprstuvw-yz_1234567890";
      Scheme scheme0 = new Scheme(stringArray0);
      VerticalBlock verticalBlock0 = new VerticalBlock(scheme0);
      HorizontalBlock horizontalBlock0 = new HorizontalBlock((Block) verticalBlock0, 0, 0, 62, 1);
      List<Block> list0 = horizontalBlock0.extractParallelSubblocks();
      assertNotNull(list0);
      assertEquals(0, list0.size());
  }

  @Test
  public void test3()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "B";
      Scheme scheme0 = new Scheme(stringArray0);
      CharPosition1 charPosition1_0 = new CharPosition1(0, 1);
      HorizontalBlock horizontalBlock0 = new HorizontalBlock(scheme0, (CharPosition) charPosition1_0, (CharPosition) charPosition1_0);
      List<Block> list0 = horizontalBlock0.extractSequentialSubblocks();
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test4()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      Scheme scheme0 = new Scheme(stringArray0);
      VerticalBlock verticalBlock0 = new VerticalBlock(scheme0);
      HorizontalBlock horizontalBlock0 = new HorizontalBlock((Block) verticalBlock0);
      horizontalBlock0.extractParallelSubblocks();
      assertEquals(5, horizontalBlock0.y1);
      assertEquals("Block(0,5, 0,5):\n ####\n ####", horizontalBlock0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "yv";
      Scheme scheme0 = new Scheme(stringArray0);
      VerticalBlock verticalBlock0 = new VerticalBlock(scheme0);
      HorizontalBlock horizontalBlock0 = new HorizontalBlock((Block) verticalBlock0);
      List<Block> list0 = horizontalBlock0.extractParallelSubblocks();
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test
  public void test6()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "B";
      Scheme scheme0 = new Scheme(stringArray0);
      CharPosition1 charPosition1_0 = new CharPosition1(0, 1);
      VerticalBlock verticalBlock0 = new VerticalBlock(scheme0);
      HorizontalBlock horizontalBlock0 = new HorizontalBlock((Block) verticalBlock0);
      HashSet<HWordPosition> hashSet0 = new HashSet<HWordPosition>();
      HWordPosition hWordPosition0 = new HWordPosition((CharPosition) charPosition1_0);
      hashSet0.add(hWordPosition0);
      List<Block> list0 = horizontalBlock0.extractParallelSubblocksSeparatedByLines((Set<HWordPosition>) hashSet0);
      assertEquals("[horizontal(0,0;1)]", hashSet0.toString());
      assertEquals(1, list0.size());
  }

  @Test
  public void test7()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "B";
      Scheme scheme0 = new Scheme(stringArray0);
      stringArray0[0] = ">nI5UpSz>\"";
      CharPosition1 charPosition1_0 = new CharPosition1(0, 1);
      VerticalBlock verticalBlock0 = new VerticalBlock(scheme0);
      HorizontalBlock horizontalBlock0 = new HorizontalBlock((Block) verticalBlock0);
      HashSet<HWordPosition> hashSet0 = new HashSet<HWordPosition>();
      HWordPosition hWordPosition0 = new HWordPosition((CharPosition) charPosition1_0);
      hashSet0.add(hWordPosition0);
      horizontalBlock0.extractParallelSubblocksSeparatedByLines((Set<HWordPosition>) hashSet0);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
  }

  @Test
  public void test8()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "yv";
      Scheme scheme0 = new Scheme(stringArray0);
      VerticalBlock verticalBlock0 = new VerticalBlock(scheme0);
      HorizontalBlock horizontalBlock0 = new HorizontalBlock((Block) verticalBlock0);
      HashSet<HWordPosition> hashSet0 = new HashSet<HWordPosition>();
      List<Block> list0 = horizontalBlock0.extractParallelSubblocksSeparatedByLines((Set<HWordPosition>) hashSet0);
      assertNotNull(list0);
      assertEquals(false, list0.isEmpty());
  }

  @Test
  public void test9()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      Scheme scheme0 = new Scheme(stringArray0);
      VerticalBlock verticalBlock0 = new VerticalBlock(scheme0);
      HorizontalBlock horizontalBlock0 = new HorizontalBlock((Block) verticalBlock0);
      HashSet<HWordPosition> hashSet0 = new HashSet<HWordPosition>();
      List<Block> list0 = horizontalBlock0.extractParallelSubblocksSeparatedByLines((Set<HWordPosition>) hashSet0);
      assertEquals(0, list0.size());
  }

  @Test
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      Scheme scheme0 = new Scheme(stringArray0);
      VerticalBlock verticalBlock0 = new VerticalBlock(scheme0);
      HorizontalBlock horizontalBlock0 = new HorizontalBlock((Block) verticalBlock0);
      List<Block> list0 = horizontalBlock0.extractParallelSubblocksWithoutLines();
      assertEquals(true, list0.isEmpty());
      assertNotNull(list0);
  }
}
