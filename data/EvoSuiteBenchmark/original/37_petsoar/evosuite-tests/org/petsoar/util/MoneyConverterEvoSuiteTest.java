/*
 * This file was automatically generated by EvoSuite
 */

package org.petsoar.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.lang.reflect.Member;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;
import org.junit.BeforeClass;
import org.petsoar.util.MoneyConverter;

@RunWith(EvoSuiteRunner.class)
public class MoneyConverterEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      MoneyConverter moneyConverter0 = new MoneyConverter();
      HashMap<Integer, BigDecimal> hashMap0 = new HashMap<Integer, BigDecimal>();
      Class<?> class0 = MoneyConverter.class;
      Object object0 = moneyConverter0.convertValue((Map) hashMap0, (Object) "precision=0 roundingMode=HALF_UP", (Member) null, "UP", (Object) "-900.5749482720567584692616946995258331298828125", (Class) class0);
      assertNull(object0);
  }

  @Test
  public void test1()  throws Throwable  {
      MoneyConverter moneyConverter0 = new MoneyConverter();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Class<?> class0 = String.class;
      String string0 = (String)moneyConverter0.convertValue((Map) hashMap0, (Object) bigDecimal0, (Class) class0);
      assertEquals("$0.00", string0);
      assertNotNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      MoneyConverter moneyConverter0 = new MoneyConverter();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<?> class0 = String.class;
      String string0 = (String)moneyConverter0.convertValue((Map) hashMap0, (Object) null, (Class) class0);
      assertNotNull(string0);
      assertEquals("$0.00", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      MoneyConverter moneyConverter0 = new MoneyConverter();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Class<?> class0 = BigDecimal.class;
      // Undeclared exception!
      try {
        moneyConverter0.convertValue((Map) hashMap0, (Object) "CEILING", (Class) class0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * java.lang.String cannot be cast to [Ljava.lang.String;
         */
      }
  }
}
