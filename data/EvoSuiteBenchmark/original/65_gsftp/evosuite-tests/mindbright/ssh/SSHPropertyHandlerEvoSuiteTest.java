/*
 * This file was automatically generated by EvoSuite
 */

package mindbright.ssh;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.awt.Frame;
import mindbright.ssh.SSHPropertyHandler;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SSHPropertyHandlerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler();
      String string0 = sSHPropertyHandler0.getRemoteServer();
      assertEquals("localhost", string0);
      assertNotNull(string0);
      assertEquals(true, sSHPropertyHandler0.hasBinay);
      assertEquals(21, sSHPropertyHandler0.remotePort);
  }

  @Test
  public void test1()  throws Throwable  {
      SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler();
      sSHPropertyHandler0.setHasBinay(true);
      assertEquals(21, sSHPropertyHandler0.remotePort);
      assertEquals("localhost", sSHPropertyHandler0.getRemoteServer());
      assertEquals(true, sSHPropertyHandler0.hasBinay());
      assertEquals(21, sSHPropertyHandler0.getRemotePort());
  }

  @Test
  public void test2()  throws Throwable  {
      SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler();
      int int0 = sSHPropertyHandler0.getRemotePort();
      assertEquals("localhost", sSHPropertyHandler0.getRemoteServer());
      assertEquals(true, sSHPropertyHandler0.hasBinay);
      assertEquals(21, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler();
      sSHPropertyHandler0.setRemotePort((-82));
      assertEquals((-82), sSHPropertyHandler0.remotePort);
      assertEquals(-82, sSHPropertyHandler0.getRemotePort());
  }

  @Test
  public void test4()  throws Throwable  {
      SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler();
      sSHPropertyHandler0.setSshHomeDir((String) null);
      assertEquals("localhost", sSHPropertyHandler0.getRemoteServer());
      assertEquals("/", sSHPropertyHandler0.getSSHHomeDir());
      assertEquals(true, sSHPropertyHandler0.hasBinay);
      assertEquals(21, sSHPropertyHandler0.remotePort);
      assertEquals("/", sSHPropertyHandler0.getSshHomeDir());
  }

  @Test
  public void test5()  throws Throwable  {
      SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler();
      String string0 = sSHPropertyHandler0.getRemotePassword();
      assertEquals(true, sSHPropertyHandler0.hasBinay);
      assertNull(string0);
      assertEquals("localhost", sSHPropertyHandler0.getRemoteServer());
      assertEquals(21, sSHPropertyHandler0.remotePort);
  }

  @Test
  public void test6()  throws Throwable  {
      SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler();
      sSHPropertyHandler0.setRemoteUser((String) null);
      assertEquals(21, sSHPropertyHandler0.remotePort);
      assertEquals(true, sSHPropertyHandler0.hasBinay);
      assertEquals("localhost", sSHPropertyHandler0.getRemoteServer());
      assertEquals(true, sSHPropertyHandler0.hasBinay());
  }

  @Test
  public void test7()  throws Throwable  {
      SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler();
      sSHPropertyHandler0.setRemotePassword((String) null);
      assertEquals(true, sSHPropertyHandler0.hasBinay);
      assertEquals(21, sSHPropertyHandler0.remotePort);
      assertEquals("localhost", sSHPropertyHandler0.getRemoteServer());
      assertEquals(21, sSHPropertyHandler0.getRemotePort());
  }

  @Test
  public void test8()  throws Throwable  {
      SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler();
      boolean boolean0 = sSHPropertyHandler0.hasBinay();
      assertEquals("localhost", sSHPropertyHandler0.getRemoteServer());
      assertEquals(true, boolean0);
      assertEquals(21, sSHPropertyHandler0.remotePort);
  }

  @Test
  public void test9()  throws Throwable  {
      SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler();
      String string0 = sSHPropertyHandler0.getRemoteUser();
      assertEquals(21, sSHPropertyHandler0.remotePort);
      assertEquals(true, sSHPropertyHandler0.hasBinay);
      assertNull(string0);
      assertEquals("localhost", sSHPropertyHandler0.getRemoteServer());
  }

  @Test
  public void test10()  throws Throwable  {
      SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler();
      String string0 = sSHPropertyHandler0.getSshHomeDir();
      assertEquals(21, sSHPropertyHandler0.remotePort);
      assertEquals("/", string0);
      assertEquals("localhost", sSHPropertyHandler0.getRemoteServer());
      assertEquals(true, sSHPropertyHandler0.hasBinay);
      assertNotNull(string0);
  }

  @Test
  public void test11()  throws Throwable  {
      SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler();
      sSHPropertyHandler0.setRemoteServer("localhost");
      assertEquals(21, sSHPropertyHandler0.remotePort);
      assertEquals("localhost", sSHPropertyHandler0.getRemoteServer());
      assertEquals(true, sSHPropertyHandler0.hasBinay);
      assertEquals(21, sSHPropertyHandler0.getRemotePort());
  }

  @Test
  public void test12()  throws Throwable  {
      SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler();
      sSHPropertyHandler0.getParent();
      assertEquals(true, sSHPropertyHandler0.hasBinay);
      assertEquals(21, sSHPropertyHandler0.remotePort);
      assertEquals("localhost", sSHPropertyHandler0.getRemoteServer());
      assertEquals(true, sSHPropertyHandler0.hasBinay());
  }

  @Test
  public void test13()  throws Throwable  {
      SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler();
      sSHPropertyHandler0.setParent((Frame) null);
      assertEquals(true, sSHPropertyHandler0.hasBinay);
      assertEquals(21, sSHPropertyHandler0.remotePort);
      assertEquals("localhost", sSHPropertyHandler0.getRemoteServer());
      assertEquals(21, sSHPropertyHandler0.getRemotePort());
  }

  @Test
  public void test14()  throws Throwable  {
      SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler();
      sSHPropertyHandler0.setSSHHomeDir((String) null);
      assertEquals(21, sSHPropertyHandler0.remotePort);
      assertEquals("localhost", sSHPropertyHandler0.getRemoteServer());
      assertEquals(true, sSHPropertyHandler0.hasBinay);
      assertEquals("/", sSHPropertyHandler0.getSshHomeDir());
      assertEquals(true, sSHPropertyHandler0.hasBinay());
  }

  @Test
  public void test15()  throws Throwable  {
      SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler();
      sSHPropertyHandler0.getSSHHomeDir();
      String string0 = sSHPropertyHandler0.getSSHHomeDir();
      assertEquals("/", string0);
      assertEquals(21, sSHPropertyHandler0.remotePort);
      assertEquals("localhost", sSHPropertyHandler0.getRemoteServer());
      assertEquals(true, sSHPropertyHandler0.hasBinay);
      assertNotNull(string0);
  }
}
