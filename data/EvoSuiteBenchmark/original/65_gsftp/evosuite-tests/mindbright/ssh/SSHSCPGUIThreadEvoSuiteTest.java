/*
 * This file was automatically generated by EvoSuite
 */

package mindbright.ssh;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.gotoservers.ftp.RemoteFileBrowser;
import com.isnetworks.ssh.FileDisplay;
import java.awt.Frame;
import java.awt.HeadlessException;
import mindbright.ssh.SSHSCPGUIThread;
import mindbright.ssh.SSHSCPPanel;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SSHSCPGUIThreadEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SSHSCPGUIThread sSHSCPGUIThread0 = new SSHSCPGUIThread((Frame) null, (FileDisplay) null, (FileDisplay) null, (RemoteFileBrowser) null, true, true, true, true, (SSHSCPPanel) null);
      // Undeclared exception!
      try {
        sSHSCPGUIThread0.startFile("/", 0L);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      SSHSCPGUIThread sSHSCPGUIThread0 = new SSHSCPGUIThread((Frame) null, (FileDisplay) null, (FileDisplay) null, (RemoteFileBrowser) null, false, false, false, false, (SSHSCPPanel) null);
      // Undeclared exception!
      try {
        sSHSCPGUIThread0.connected("/");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      SSHSCPGUIThread sSHSCPGUIThread0 = new SSHSCPGUIThread((Frame) null, (FileDisplay) null, (FileDisplay) null, (RemoteFileBrowser) null, false, false, true, false, (SSHSCPPanel) null);
      sSHSCPGUIThread0.endDir();
      assertEquals(false, sSHSCPGUIThread0.recursive);
      assertEquals(true, sSHSCPGUIThread0.toRemote);
      assertEquals(false, sSHSCPGUIThread0.background);
      assertEquals(0L, sSHSCPGUIThread0.startTime);
      assertEquals(0L, sSHSCPGUIThread0.fileTransSize);
      assertEquals(0, sSHSCPGUIThread0.fileCnt);
      assertEquals(0L, sSHSCPGUIThread0.lastSize);
      assertEquals(0L, sSHSCPGUIThread0.lastTime);
      assertEquals(false, sSHSCPGUIThread0.doneCopying);
      assertEquals(0L, sSHSCPGUIThread0.totTransSize);
      assertEquals(false, sSHSCPGUIThread0.isBinary);
  }

  @Test
  public void test3()  throws Throwable  {
      SSHSCPGUIThread sSHSCPGUIThread0 = new SSHSCPGUIThread((Frame) null, (FileDisplay) null, (FileDisplay) null, (RemoteFileBrowser) null, true, true, true, true, (SSHSCPPanel) null);
      // Undeclared exception!
      try {
        sSHSCPGUIThread0.run();
        fail("Expecting exception: HeadlessException");
      } catch(HeadlessException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      SSHSCPGUIThread sSHSCPGUIThread0 = new SSHSCPGUIThread((Frame) null, (FileDisplay) null, (FileDisplay) null, (RemoteFileBrowser) null, false, false, false, false, (SSHSCPPanel) null);
      // Undeclared exception!
      try {
        sSHSCPGUIThread0.run();
        fail("Expecting exception: HeadlessException");
      } catch(HeadlessException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      String[] stringArray0 = SSHSCPGUIThread.spaceSplit((String) null);
      assertNull(stringArray0);
  }

  @Test
  public void test6()  throws Throwable  {
      String[] stringArray0 = SSHSCPGUIThread.spaceSplit("Uo \"kdl3C6 L5ki");
      assertNull(stringArray0);
  }

  @Test
  public void test7()  throws Throwable  {
      String[] stringArray0 = SSHSCPGUIThread.spaceSplit("");
      assertNull(stringArray0);
  }

  @Test
  public void test8()  throws Throwable  {
      String[] stringArray0 = SSHSCPGUIThread.spaceSplit("Eb4qz+l/");
      assertNotNull(stringArray0);
  }

  @Test
  public void test9()  throws Throwable  {
      String[] stringArray0 = SSHSCPGUIThread.spaceSplit("FTP response 421 received  Server clsei conctio");
      assertNotNull(stringArray0);
  }

  @Test
  public void test10()  throws Throwable  {
      String[] stringArray0 = SSHSCPGUIThread.spaceSplit("\"");
      assertNull(stringArray0);
  }

  @Test
  public void test11()  throws Throwable  {
      String[] stringArray0 = SSHSCPGUIThread.spaceSplit("opdio:\"");
      assertNotNull(stringArray0);
  }

  @Test
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "/";
      stringArray0[1] = "/";
      stringArray0[2] = "/";
      stringArray0[3] = "/8a^UP *9~?";
      stringArray0[4] = "/8a^UP *9~?";
      stringArray0[5] = "/";
      stringArray0[6] = "/";
      stringArray0[7] = "/";
      stringArray0[8] = "/";
      String[] stringArray1 = SSHSCPGUIThread.starExpand(stringArray0, "/");
      assertFalse(stringArray1.equals(stringArray0));
  }

  @Test
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "q_K\"!\")/t3sH";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "C+C[9_a>*V#O7";
      // Undeclared exception!
      try {
        SSHSCPGUIThread.starExpand(stringArray0, "C+C[9_a>*V#O7");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test14()  throws Throwable  {
      SSHSCPGUIThread sSHSCPGUIThread0 = new SSHSCPGUIThread((Frame) null, (FileDisplay) null, (FileDisplay) null, (RemoteFileBrowser) null, false, false, false, false, (SSHSCPPanel) null);
      // Undeclared exception!
      try {
        sSHSCPGUIThread0.startDir("q4U81WbYk+j,$}:$+'");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test15()  throws Throwable  {
      SSHSCPGUIThread sSHSCPGUIThread0 = new SSHSCPGUIThread((Frame) null, (FileDisplay) null, (FileDisplay) null, (RemoteFileBrowser) null, false, false, true, false, (SSHSCPPanel) null);
      // Undeclared exception!
      try {
        sSHSCPGUIThread0.startDir("/");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test16()  throws Throwable  {
      SSHSCPGUIThread sSHSCPGUIThread0 = new SSHSCPGUIThread((Frame) null, (FileDisplay) null, (FileDisplay) null, (RemoteFileBrowser) null, false, false, false, false, (SSHSCPPanel) null);
      sSHSCPGUIThread0.progress(0L);
      assertEquals(0L, sSHSCPGUIThread0.lastTime);
      assertEquals(false, sSHSCPGUIThread0.doneCopying);
      assertEquals(0L, sSHSCPGUIThread0.fileTransSize);
      assertEquals(false, sSHSCPGUIThread0.recursive);
      assertEquals(0L, sSHSCPGUIThread0.totTransSize);
      assertEquals(false, sSHSCPGUIThread0.background);
      assertEquals(0, sSHSCPGUIThread0.fileCnt);
      assertEquals(0L, sSHSCPGUIThread0.lastSize);
      assertEquals(0L, sSHSCPGUIThread0.startTime);
      assertEquals(false, sSHSCPGUIThread0.isBinary);
      assertEquals(false, sSHSCPGUIThread0.toRemote);
  }

  @Test
  public void test17()  throws Throwable  {
      SSHSCPGUIThread sSHSCPGUIThread0 = new SSHSCPGUIThread((Frame) null, (FileDisplay) null, (FileDisplay) null, (RemoteFileBrowser) null, false, false, false, false, (SSHSCPPanel) null);
      String string0 = sSHSCPGUIThread0.cutName("q4U81WbYk+j,$}:$+'", 3);
      assertEquals(false, sSHSCPGUIThread0.toRemote);
      assertEquals(false, sSHSCPGUIThread0.doneCopying);
      assertEquals(false, sSHSCPGUIThread0.isBinary);
      assertEquals(0L, sSHSCPGUIThread0.startTime);
      assertEquals(0, sSHSCPGUIThread0.fileCnt);
      assertEquals(false, sSHSCPGUIThread0.background);
      assertNotNull(string0);
      assertEquals(false, sSHSCPGUIThread0.recursive);
      assertEquals(0L, sSHSCPGUIThread0.lastSize);
      assertEquals(0L, sSHSCPGUIThread0.lastTime);
      assertEquals(0L, sSHSCPGUIThread0.totTransSize);
      assertEquals(0L, sSHSCPGUIThread0.fileTransSize);
      assertEquals("...", string0);
  }
}
