/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.net.udp.uc.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.versioncheck.VersionCheckClientUDPReply;
import com.aelitis.azureus.core.versioncheck.VersionCheckClientUDPRequest;
import com.aelitis.net.udp.uc.PRUDPPacket;
import com.aelitis.net.udp.uc.PRUDPPacketHandlerException;
import com.aelitis.net.udp.uc.PRUDPPrimordialHandler;
import com.aelitis.net.udp.uc.PRUDPRequestHandler;
import com.aelitis.net.udp.uc.impl.PRUDPPacketHandlerImpl;
import com.aelitis.net.udp.uc.impl.PRUDPPacketHandlerStatsImpl;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.UnknownHostException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.runtime.System;
import org.evosuite.sandbox.Sandbox;
import org.gudy.azureus2.core3.util.AESemaphore;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PRUDPPacketHandlerImplEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          inet4Address0.isAnyLocalAddress();
          inet4Address0.isSiteLocalAddress();
          PRUDPPacketHandlerImpl pRUDPPacketHandlerImpl0 = new PRUDPPacketHandlerImpl(0, (InetAddress) inet4Address0, (PRUDPPacketHandlerImpl.PacketTransformer) null);
          assertNotNull(pRUDPPacketHandlerImpl0);
          
          inet4Address0.isMCGlobal();
          pRUDPPacketHandlerImpl0.getReceiveQueueLength();
          PRUDPPacketHandlerImpl pRUDPPacketHandlerImpl1 = new PRUDPPacketHandlerImpl(0, (InetAddress) null, (PRUDPPacketHandlerImpl.PacketTransformer) null);
          assertNotNull(pRUDPPacketHandlerImpl1);
          
          pRUDPPacketHandlerImpl1.getSendQueueLength();
          pRUDPPacketHandlerImpl1.getRequestHandler();
          inet4Address0.isMCSiteLocal();
          PRUDPPacketHandlerImpl pRUDPPacketHandlerImpl2 = new PRUDPPacketHandlerImpl(0, (InetAddress) null, (PRUDPPacketHandlerImpl.PacketTransformer) null);
          pRUDPPacketHandlerImpl0.getPort();
          pRUDPPacketHandlerImpl0.closeSession();
          pRUDPPacketHandlerImpl1.setRequestHandler((PRUDPRequestHandler) null);
          VersionCheckClientUDPRequest versionCheckClientUDPRequest0 = new VersionCheckClientUDPRequest(0L);
          pRUDPPacketHandlerImpl0.getPort();
          versionCheckClientUDPRequest0.getAddress();
          try {
            pRUDPPacketHandlerImpl0.sendAndReceive((PRUDPPacket) versionCheckClientUDPRequest0, (InetSocketAddress) null);
            fail("Expecting exception: PRUDPPacketHandlerException");
          } catch(PRUDPPacketHandlerException e) {
            /*
             * Transport unavailable
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      assertNotNull(byteArray0);
  }

  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[3] = (byte)1;
      assertEquals((byte)1, byteArray0[3]);
  }

  @Test
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)1;
      assertEquals((byte)1, byteArray0[3]);
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          inet4Address0.getHostAddress();
          InetAddress.getAllByName("");
          PRUDPPacketHandlerImpl pRUDPPacketHandlerImpl0 = new PRUDPPacketHandlerImpl(1, (InetAddress) inet4Address0, (PRUDPPacketHandlerImpl.PacketTransformer) null);
          InetAddress.getByName("");
          AESemaphore aESemaphore0 = new AESemaphore("", 66);
          pRUDPPacketHandlerImpl0.receiveLoop(aESemaphore0);
          assertEquals(66, aESemaphore0.getValue());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = (-1876);
          // Undeclared exception!
          try {
            InetAddress.getByName("OZj!9xiR1N$hV--6");
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.net.SocketPermission OZj!9xiR1N$hV--6 resolve)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkConnect(SecurityManager.java:1031)
             * java.net.InetAddress.getAllByName0(InetAddress.java:1145)
             * java.net.InetAddress.getAllByName(InetAddress.java:1083)
             * java.net.InetAddress.getAllByName(InetAddress.java:1019)
             * java.net.InetAddress.getByName(InetAddress.java:969)
             * sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          PRUDPPacketHandlerImpl pRUDPPacketHandlerImpl0 = new PRUDPPacketHandlerImpl(586, (InetAddress) null, (PRUDPPacketHandlerImpl.PacketTransformer) null);
          assertNotNull(pRUDPPacketHandlerImpl0);
          
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          pRUDPPacketHandlerImpl0.setDefaultBindAddress((InetAddress) inet4Address0);
          PRUDPPacketHandlerImpl pRUDPPacketHandlerImpl1 = new PRUDPPacketHandlerImpl(586, (InetAddress) null, (PRUDPPacketHandlerImpl.PacketTransformer) null);
          pRUDPPacketHandlerImpl1.getPort();
          VersionCheckClientUDPReply versionCheckClientUDPReply0 = new VersionCheckClientUDPReply(59);
          versionCheckClientUDPReply0.getAddress();
          PRUDPPacketHandlerImpl pRUDPPacketHandlerImpl2 = (PRUDPPacketHandlerImpl)pRUDPPacketHandlerImpl0.openSession((InetSocketAddress) null);
          assertNotNull(pRUDPPacketHandlerImpl2);
          
          pRUDPPacketHandlerImpl1.addPrimordialHandler((PRUDPPrimordialHandler) null);
          pRUDPPacketHandlerImpl1.getPort();
          int int0 = pRUDPPacketHandlerImpl1.getPort();
          assertEquals(586, int0);
          
          pRUDPPacketHandlerImpl1.destroy();
          pRUDPPacketHandlerImpl1.removePrimordialHandler((PRUDPPrimordialHandler) null);
          pRUDPPacketHandlerImpl1.addPrimordialHandler((PRUDPPrimordialHandler) null);
          pRUDPPacketHandlerImpl1.checkTimeouts();
          System.setCurrentTimeMillis((long) 586);
          PRUDPPacketHandlerStatsImpl pRUDPPacketHandlerStatsImpl0 = (PRUDPPacketHandlerStatsImpl)pRUDPPacketHandlerImpl1.getStats();
          assertNotNull(pRUDPPacketHandlerStatsImpl0);
          assertEquals(586, pRUDPPacketHandlerImpl1.getPort());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          PRUDPPacketHandlerImpl pRUDPPacketHandlerImpl0 = new PRUDPPacketHandlerImpl(586, (InetAddress) null, (PRUDPPacketHandlerImpl.PacketTransformer) null);
          assertNotNull(pRUDPPacketHandlerImpl0);
          
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          pRUDPPacketHandlerImpl0.getReceiveQueueLength();
          pRUDPPacketHandlerImpl0.setDefaultBindAddress((InetAddress) inet4Address0);
          PRUDPPacketHandlerImpl pRUDPPacketHandlerImpl1 = new PRUDPPacketHandlerImpl(586, (InetAddress) null, (PRUDPPacketHandlerImpl.PacketTransformer) null);
          pRUDPPacketHandlerImpl1.getPort();
          pRUDPPacketHandlerImpl1.addPrimordialHandler((PRUDPPrimordialHandler) null);
          pRUDPPacketHandlerImpl1.getPort();
          int int0 = pRUDPPacketHandlerImpl1.getPort();
          assertEquals(586, int0);
          
          pRUDPPacketHandlerImpl0.getStats();
          pRUDPPacketHandlerImpl1.setDefaultBindAddress((InetAddress) inet4Address0);
          pRUDPPacketHandlerImpl1.destroy();
          pRUDPPacketHandlerImpl1.removePrimordialHandler((PRUDPPrimordialHandler) null);
          pRUDPPacketHandlerImpl1.addPrimordialHandler((PRUDPPrimordialHandler) null);
          pRUDPPacketHandlerImpl1.checkTimeouts();
          PRUDPPacketHandlerStatsImpl pRUDPPacketHandlerStatsImpl0 = (PRUDPPacketHandlerStatsImpl)pRUDPPacketHandlerImpl1.getStats();
          assertNotNull(pRUDPPacketHandlerStatsImpl0);
          assertEquals(586, pRUDPPacketHandlerImpl1.getPort());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test8()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          PRUDPPacketHandlerImpl pRUDPPacketHandlerImpl0 = new PRUDPPacketHandlerImpl(1004, (InetAddress) null, (PRUDPPacketHandlerImpl.PacketTransformer) null);
          pRUDPPacketHandlerImpl0.getRequestHandler();
          pRUDPPacketHandlerImpl0.setRequestHandler((PRUDPRequestHandler) null);
          pRUDPPacketHandlerImpl0.closeSession();
          pRUDPPacketHandlerImpl0.getRequestHandler();
          pRUDPPacketHandlerImpl0.setDelays(1004, 1764, 0);
          pRUDPPacketHandlerImpl0.setDefaultBindAddress((InetAddress) null);
          assertEquals(0L, pRUDPPacketHandlerImpl0.getSendQueueLength());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test9()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          PRUDPPacketHandlerImpl pRUDPPacketHandlerImpl0 = new PRUDPPacketHandlerImpl(0, (InetAddress) null, (PRUDPPacketHandlerImpl.PacketTransformer) null);
          assertNotNull(pRUDPPacketHandlerImpl0);
          
          pRUDPPacketHandlerImpl0.setDefaultBindAddress((InetAddress) null);
          long long0 = pRUDPPacketHandlerImpl0.getSendQueueLength();
          assertEquals(0L, long0);
          
          pRUDPPacketHandlerImpl0.process((DatagramPacket) null, (long) 0);
          pRUDPPacketHandlerImpl0.setDelays(0, 0, 0);
          pRUDPPacketHandlerImpl0.setExplicitBindAddress((InetAddress) null);
          PRUDPPacketHandlerImpl pRUDPPacketHandlerImpl1 = new PRUDPPacketHandlerImpl(0, (InetAddress) null, (PRUDPPacketHandlerImpl.PacketTransformer) null);
          AESemaphore aESemaphore0 = new AESemaphore("", (-11));
          pRUDPPacketHandlerImpl1.receiveLoop(aESemaphore0);
          assertEquals(0L, pRUDPPacketHandlerImpl1.getSendQueueLength());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          PRUDPPacketHandlerImpl pRUDPPacketHandlerImpl0 = new PRUDPPacketHandlerImpl((-231), (InetAddress) null, (PRUDPPacketHandlerImpl.PacketTransformer) null);
          pRUDPPacketHandlerImpl0.getSendQueueLength();
          byte[] byteArray0 = new byte[10];
          byteArray0[0] = (byte)0;
          byteArray0[1] = (byte)9;
          byteArray0[2] = (byte)96;
          byteArray0[3] = (byte)23;
          byteArray0[4] = (byte) (-1);
          byteArray0[5] = (byte)0;
          byteArray0[6] = (byte) (-12);
          byteArray0[7] = (byte)35;
          byteArray0[8] = (byte) (-1);
          byteArray0[9] = (byte)0;
          InetSocketAddress inetSocketAddress0 = InetSocketAddress.createUnresolved("not supported", (int) (byte)35);
          try {
            pRUDPPacketHandlerImpl0.primordialSend(byteArray0, inetSocketAddress0);
            fail("Expecting exception: PRUDPPacketHandlerException");
          } catch(PRUDPPacketHandlerException e) {
            /*
             * Transport unavailable
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          System.setCurrentTimeMillis((-985L));
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getByName("");
          PRUDPPacketHandlerImpl pRUDPPacketHandlerImpl0 = new PRUDPPacketHandlerImpl((-290), (InetAddress) inet4Address0, (PRUDPPacketHandlerImpl.PacketTransformer) null);
          pRUDPPacketHandlerImpl0.removePrimordialHandler((PRUDPPrimordialHandler) null);
          assertEquals(0L, pRUDPPacketHandlerImpl0.getReceiveQueueLength());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
