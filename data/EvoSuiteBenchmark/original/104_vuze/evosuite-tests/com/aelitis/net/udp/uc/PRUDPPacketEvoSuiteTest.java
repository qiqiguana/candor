/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.net.udp.uc;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.versioncheck.VersionCheckClientUDPReply;
import com.aelitis.azureus.core.versioncheck.VersionCheckClientUDPRequest;
import com.aelitis.net.udp.uc.PRUDPPacket;
import java.net.InetSocketAddress;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PRUDPPacketEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      VersionCheckClientUDPReply versionCheckClientUDPReply0 = new VersionCheckClientUDPReply(0);
      String string0 = versionCheckClientUDPReply0.getString();
      assertNotNull(string0);
      assertEquals("type=33,addr=null:reply[trans=0]", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      VersionCheckClientUDPReply versionCheckClientUDPReply0 = new VersionCheckClientUDPReply((-1873));
      int int0 = versionCheckClientUDPReply0.getSerialisedSize();
      assertEquals("type=33,addr=null:reply[trans=-1873]", versionCheckClientUDPReply0.getString());
      assertEquals(0, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      VersionCheckClientUDPReply versionCheckClientUDPReply0 = new VersionCheckClientUDPReply(1641);
      VersionCheckClientUDPRequest versionCheckClientUDPRequest0 = new VersionCheckClientUDPRequest((long) 1641);
      assertNotNull(versionCheckClientUDPRequest0);
      
      versionCheckClientUDPRequest0.setPreviousPacket((PRUDPPacket) versionCheckClientUDPReply0);
      assertEquals(33, versionCheckClientUDPReply0.getAction());
      assertEquals(0, versionCheckClientUDPRequest0.getTransactionId());
      assertEquals("type=32,addr=null:request[con=1641,trans=0]", versionCheckClientUDPRequest0.getString());
  }

  @Test
  public void test3()  throws Throwable  {
      VersionCheckClientUDPRequest versionCheckClientUDPRequest0 = new VersionCheckClientUDPRequest((-776L));
      assertNotNull(versionCheckClientUDPRequest0);
      
      versionCheckClientUDPRequest0.getPreviousPacket();
      assertEquals(8200, versionCheckClientUDPRequest0.getTransactionId());
      assertEquals("type=32,addr=null:request[con=-776,trans=8200]", versionCheckClientUDPRequest0.getString());
  }

  @Test
  public void test4()  throws Throwable  {
      VersionCheckClientUDPRequest versionCheckClientUDPRequest0 = new VersionCheckClientUDPRequest((-776L));
      assertNotNull(versionCheckClientUDPRequest0);
      
      boolean boolean0 = versionCheckClientUDPRequest0.hasContinuation();
      assertEquals("type=32,addr=null:request[con=-776,trans=-29999]", versionCheckClientUDPRequest0.getString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      VersionCheckClientUDPReply versionCheckClientUDPReply0 = new VersionCheckClientUDPReply(1978);
      int int0 = versionCheckClientUDPReply0.getAction();
      assertEquals(33, int0);
      assertEquals(1978, versionCheckClientUDPReply0.getTransactionId());
  }

  @Test
  public void test6()  throws Throwable  {
      VersionCheckClientUDPReply versionCheckClientUDPReply0 = new VersionCheckClientUDPReply(1641);
      versionCheckClientUDPReply0.getAddress();
      assertEquals("type=33,addr=null:reply[trans=1641]", versionCheckClientUDPReply0.getString());
  }

  @Test
  public void test7()  throws Throwable  {
      VersionCheckClientUDPReply versionCheckClientUDPReply0 = new VersionCheckClientUDPReply(1641);
      versionCheckClientUDPReply0.setAddress((InetSocketAddress) null);
      assertEquals("type=33,addr=null:reply[trans=1641]", versionCheckClientUDPReply0.getString());
  }

  @Test
  public void test8()  throws Throwable  {
      VersionCheckClientUDPReply versionCheckClientUDPReply0 = new VersionCheckClientUDPReply(0);
      versionCheckClientUDPReply0.setSerialisedSize((-2019));
      assertEquals(-2019, versionCheckClientUDPReply0.getSerialisedSize());
      assertEquals(0, versionCheckClientUDPReply0.getTransactionId());
  }
}
