/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.net.magneturi.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.net.magneturi.MagnetURIHandler;
import com.aelitis.net.magneturi.MagnetURIHandlerListener;
import com.aelitis.net.magneturi.impl.MagnetURIHandlerImpl;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.LineNumberReader;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.net.URL;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MagnetURIHandlerImplEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          MagnetURIHandlerImpl magnetURIHandlerImpl0 = new MagnetURIHandlerImpl();
          ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1781);
          magnetURIHandlerImpl0.process("/magnet10/default.js?", (BufferedReader) null, (OutputStream) byteArrayOutputStream0);
          assertEquals(527, byteArrayOutputStream0.size());
          assertEquals("HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: application/x-javascript\r\nContent-Length: 404\r\n\r\ndocument.write(magnetOptionsPreamble);\r\ndocument.write(\"<a href=\\\"http://127.0.0.1:\"+(45100+magnetCurrentSlot)+\"/select/?\"+magnetQueryString+\"\\\" target=\\\"_blank\\\">\");\r\ndocument.write(\"<img src=\\\"http://127.0.0.1:\"+(45100+magnetCurrentSlot)+\"/magnet10/badge.img\\\">\");\r\ndocument.write(\"Download with Azureus\");\r\ndocument.write(\"</a>\");\r\ndocument.write(magnetOptionsPostamble);\r\nmagnetOptionsPollSuccesses++", byteArrayOutputStream0.toString());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          MagnetURIHandlerImpl magnetURIHandlerImpl0 = new MagnetURIHandlerImpl();
          magnetURIHandlerImpl0.addInfo((String) null, 1781);
          assertEquals(0, magnetURIHandlerImpl0.getPort());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          MagnetURIHandlerImpl magnetURIHandlerImpl0 = new MagnetURIHandlerImpl();
          String string0 = magnetURIHandlerImpl0.getMessageText((String) null);
          assertEquals("!MagnetURLHandler.report.null!", string0);
          assertNotNull(string0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          MagnetURIHandlerImpl magnetURIHandlerImpl0 = new MagnetURIHandlerImpl();
          String string0 = magnetURIHandlerImpl0.getMessageText("L4BG mAUZ-G", "L4BG mAUZ-G");
          assertNotNull(string0);
          assertEquals("!MagnetURLHandler.report.L4BG mAUZ-G!", string0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          MagnetURIHandlerImpl magnetURIHandlerImpl0 = new MagnetURIHandlerImpl();
          int int0 = magnetURIHandlerImpl0.getPort();
          assertEquals(0, int0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          MagnetURIHandlerImpl magnetURIHandlerImpl0 = new MagnetURIHandlerImpl();
          magnetURIHandlerImpl0.addListener((MagnetURIHandlerListener) null);
          assertEquals(0, magnetURIHandlerImpl0.getPort());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          MagnetURIHandlerImpl magnetURIHandlerImpl0 = new MagnetURIHandlerImpl();
          URL uRL0 = magnetURIHandlerImpl0.registerResource((MagnetURIHandler.ResourceProvider) null);
          assertNull(uRL0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          MagnetURIHandlerImpl magnetURIHandlerImpl0 = new MagnetURIHandlerImpl();
          PipedInputStream pipedInputStream0 = new PipedInputStream();
          magnetURIHandlerImpl0.process("L4BG mAUZ-G", (InputStream) pipedInputStream0, (OutputStream) null);
          assertEquals(0, pipedInputStream0.available());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test8()  throws Throwable  {
      MagnetURIHandlerImpl magnetURIHandlerImpl0 = (MagnetURIHandlerImpl)MagnetURIHandlerImpl.getSingleton();
      assertEquals(0, magnetURIHandlerImpl0.getPort());
  }

  @Test
  public void test9()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          MagnetURIHandlerImpl magnetURIHandlerImpl0 = new MagnetURIHandlerImpl();
          PipedWriter pipedWriter0 = new PipedWriter();
          PipedReader pipedReader0 = new PipedReader(pipedWriter0, 779);
          BufferedReader bufferedReader0 = new BufferedReader((Reader) pipedReader0, 779);
          ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
          magnetURIHandlerImpl0.process("", bufferedReader0, (OutputStream) byteArrayOutputStream0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          MagnetURIHandlerImpl magnetURIHandlerImpl0 = new MagnetURIHandlerImpl();
          StringReader stringReader0 = new StringReader("/resource.!MagnetURLHandler.report.null!");
          LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) stringReader0);
          // Undeclared exception!
          try {
            magnetURIHandlerImpl0.process("/resource.!MagnetURLHandler.report.null!", (BufferedReader) lineNumberReader0, (OutputStream) null);
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
