/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.peermanager.messaging.bittorrent;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.peermanager.messaging.MessageException;
import com.aelitis.azureus.core.peermanager.messaging.bittorrent.BTHandshake;
import org.gudy.azureus2.core3.util.DirectByteBuffer;
import org.gudy.azureus2.core3.util.DirectByteBufferPool;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BTHandshakeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BTHandshake bTHandshake0 = new BTHandshake(byteArray0, byteArray0, true, (byte)0);
      assertNotNull(bTHandshake0);
      
      bTHandshake0.isNoDelay();
      assertEquals("BT_HANDSHAKE of dataID: 00 peerID: -", bTHandshake0.getDescription());
      assertEquals(0, bTHandshake0.getVersion());
  }

  @Test
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      BTHandshake bTHandshake0 = new BTHandshake(byteArray0, byteArray0, true, (byte) (-20));
      assertNotNull(bTHandshake0);
      
      byte[] byteArray1 = bTHandshake0.getDataHash();
      assertEquals(-20, bTHandshake0.getVersion());
      assertSame(byteArray1, byteArray0);
      assertEquals("BT_HANDSHAKE of dataID: 0000 peerID: --", bTHandshake0.getDescription());
  }

  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BTHandshake bTHandshake0 = new BTHandshake(byteArray0, byteArray0, true, (byte) (-114));
      assertNotNull(bTHandshake0);
      
      String string0 = bTHandshake0.getFeatureID();
      assertEquals(-114, bTHandshake0.getVersion());
      assertEquals("BT1", string0);
      assertEquals("BT_HANDSHAKE of dataID: 00 peerID: -", bTHandshake0.getDescription());
  }

  @Test
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BTHandshake bTHandshake0 = new BTHandshake(byteArray0, byteArray0, true, (byte) (-114));
      assertNotNull(bTHandshake0);
      
      int int0 = bTHandshake0.getFeatureSubID();
      assertEquals("BT_HANDSHAKE of dataID: 00 peerID: -", bTHandshake0.getDescription());
      assertEquals(-114, bTHandshake0.getVersion());
      assertEquals(10, int0);
  }

  @Test
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      BTHandshake bTHandshake0 = new BTHandshake(byteArray0, byteArray0, true, (byte) (-20));
      assertNotNull(bTHandshake0);
      
      bTHandshake0.getIDBytes();
      assertEquals("BT_HANDSHAKE of dataID: 0000 peerID: --", bTHandshake0.getDescription());
  }

  @Test
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      BTHandshake bTHandshake0 = new BTHandshake(byteArray0, byteArray0, true, (byte)0);
      assertNotNull(bTHandshake0);
      
      int int0 = bTHandshake0.getPriority();
      assertEquals(0, bTHandshake0.getVersion());
      assertEquals(2, int0);
      assertEquals("BT_HANDSHAKE of dataID: 0000 peerID: --", bTHandshake0.getDescription());
  }

  @Test
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      BTHandshake bTHandshake0 = new BTHandshake(byteArray0, byteArray0, false, (byte)11);
      assertNotNull(bTHandshake0);
      
      bTHandshake0.messagesToRemove();
      assertEquals("BT_HANDSHAKE of dataID: 00000000 peerID: ----", bTHandshake0.getDescription());
      assertEquals(11, bTHandshake0.getVersion());
  }

  @Test
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BTHandshake bTHandshake0 = new BTHandshake(byteArray0, byteArray0, true, (byte) (-114));
      assertNotNull(bTHandshake0);
      
      DirectByteBuffer[] directByteBufferArray0 = bTHandshake0.getData();
      assertNotNull(directByteBufferArray0);
      
      bTHandshake0.getRawData();
      assertEquals(-114, bTHandshake0.getVersion());
      assertEquals("BT_HANDSHAKE of dataID: 00 peerID: -", bTHandshake0.getDescription());
  }

  @Test
  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BTHandshake bTHandshake0 = new BTHandshake(byteArray0, byteArray0, true, (byte) (-114));
      assertNotNull(bTHandshake0);
      
      int int0 = bTHandshake0.getType();
      assertEquals(0, int0);
      assertEquals("BT_HANDSHAKE of dataID: 00 peerID: -", bTHandshake0.getDescription());
      assertEquals(-114, bTHandshake0.getVersion());
  }

  @Test
  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BTHandshake bTHandshake0 = new BTHandshake(byteArray0, byteArray0, false, (byte)0);
      assertNotNull(bTHandshake0);
      
      byte byte0 = bTHandshake0.getVersion();
      assertEquals("BT_HANDSHAKE of dataID: 00 peerID: -", bTHandshake0.getDescription());
      assertEquals((byte)0, byte0);
  }

  @Test
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BTHandshake bTHandshake0 = new BTHandshake(byteArray0, byteArray0, true, (byte) (-114));
      assertNotNull(bTHandshake0);
      
      byte[] byteArray1 = bTHandshake0.getPeerId();
      assertEquals("BT_HANDSHAKE of dataID: 00 peerID: -", bTHandshake0.getDescription());
      assertSame(byteArray0, byteArray1);
      assertEquals(-114, bTHandshake0.getVersion());
  }

  @Test
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BTHandshake bTHandshake0 = new BTHandshake(byteArray0, byteArray0, false, (byte)0);
      assertNotNull(bTHandshake0);
      
      BTHandshake bTHandshake1 = (BTHandshake)bTHandshake0.getBaseMessage();
      assertEquals("BT_HANDSHAKE of dataID: 00 peerID: -", bTHandshake0.getDescription());
      assertEquals(0, bTHandshake0.getVersion());
      assertEquals("BT_HANDSHAKE of dataID: 00 peerID: -", bTHandshake1.getDescription());
  }

  @Test
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      BTHandshake bTHandshake0 = new BTHandshake(byteArray0, byteArray0, true, (byte)0);
      assertNotNull(bTHandshake0);
      
      byte[] byteArray1 = bTHandshake0.getReserved();
      assertEquals(0, bTHandshake0.getVersion());
      assertEquals("BT_HANDSHAKE of dataID: 000000 peerID: ---", bTHandshake0.getDescription());
      assertNotSame(byteArray1, byteArray0);
  }

  @Test
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      BTHandshake bTHandshake0 = new BTHandshake(byteArray0, byteArray0, true, (byte)68);
      assertNotNull(bTHandshake0);
      
      DirectByteBuffer directByteBuffer0 = DirectByteBufferPool.getBuffer((byte)68, (byte)68);
      try {
        bTHandshake0.deserialize(directByteBuffer0, (byte)68);
        fail("Expecting exception: MessageException");
      } catch(MessageException e) {
        /*
         * [BT_HANDSHAKE] decode error: payload.get() != (byte)PROTOCOL.length()
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      BTHandshake bTHandshake0 = new BTHandshake(byteArray0, byteArray0, true, (byte)0);
      assertNotNull(bTHandshake0);
      
      bTHandshake0.setNoDelay();
      assertEquals(0, bTHandshake0.getVersion());
      assertEquals("BT_HANDSHAKE of dataID: 000000 peerID: ---", bTHandshake0.getDescription());
  }

  @Test
  public void test15()  throws Throwable  {
      BTHandshake.setMainlineDHTEnabled(false);
  }

  @Test
  public void test16()  throws Throwable  {
      BTHandshake.setMainlineDHTEnabled(true);
  }

  @Test
  public void test17()  throws Throwable  {
      BTHandshake.setFastExtensionEnabled(false);
  }

  @Test
  public void test18()  throws Throwable  {
      BTHandshake.setFastExtensionEnabled(true);
  }

  @Test
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      BTHandshake bTHandshake0 = new BTHandshake(byteArray0, byteArray0, true, (byte) (-20));
      assertNotNull(bTHandshake0);
      
      bTHandshake0.getDescription();
      String string0 = bTHandshake0.getDescription();
      assertNotNull(string0);
      assertEquals("BT_HANDSHAKE of dataID: 0000 peerID: --", string0);
      assertEquals(-20, bTHandshake0.getVersion());
  }

  @Test
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      BTHandshake bTHandshake0 = new BTHandshake(byteArray0, byteArray0, true, (byte) (-20));
      assertNotNull(bTHandshake0);
      
      DirectByteBuffer[] directByteBufferArray0 = bTHandshake0.getRawData();
      assertNotNull(directByteBufferArray0);
      
      bTHandshake0.getData();
      assertEquals(-20, bTHandshake0.getVersion());
      assertEquals("BT_HANDSHAKE of dataID: 0000 peerID: --", bTHandshake0.getDescription());
  }

  @Test
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BTHandshake bTHandshake0 = new BTHandshake(byteArray0, byteArray0, false, (byte)0);
      assertNotNull(bTHandshake0);
      
      try {
        bTHandshake0.deserialize((DirectByteBuffer) null, (byte)0);
        fail("Expecting exception: MessageException");
      } catch(MessageException e) {
        /*
         * [BT_HANDSHAKE] decode error: data == null
         */
      }
  }

  @Test
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BTHandshake bTHandshake0 = new BTHandshake(byteArray0, byteArray0, true, (byte)0);
      assertNotNull(bTHandshake0);
      
      DirectByteBuffer directByteBuffer0 = DirectByteBufferPool.getBuffer((byte)0, (byte)65);
      try {
        bTHandshake0.deserialize(directByteBuffer0, (byte)65);
        fail("Expecting exception: MessageException");
      } catch(MessageException e) {
        /*
         * [BT_HANDSHAKE] decode error: payload.remaining[65] != 68
         */
      }
  }

  @Test
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      BTHandshake bTHandshake0 = new BTHandshake(byteArray0, byteArray0, true, (byte)0);
      assertNotNull(bTHandshake0);
      
      bTHandshake0.destroy();
      assertEquals("BT_HANDSHAKE of dataID: 0000 peerID: --", bTHandshake0.getDescription());
      assertEquals(0, bTHandshake0.getVersion());
  }

  @Test
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      BTHandshake bTHandshake0 = new BTHandshake(byteArray0, byteArray0, false, (byte)11);
      assertNotNull(bTHandshake0);
      
      DirectByteBuffer[] directByteBufferArray0 = bTHandshake0.getRawData();
      assertNotNull(directByteBufferArray0);
      
      bTHandshake0.destroy();
      assertEquals(11, bTHandshake0.getVersion());
      assertEquals("BT_HANDSHAKE of dataID: 00000000 peerID: ----", bTHandshake0.getDescription());
  }
}
