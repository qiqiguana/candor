/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.networkmanager.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.networkmanager.NetworkConnectionBase;
import com.aelitis.azureus.core.networkmanager.RateHandler;
import com.aelitis.azureus.core.networkmanager.impl.MultiPeerDownloader;
import com.aelitis.azureus.core.networkmanager.impl.MultiPeerDownloader2;
import com.aelitis.azureus.core.networkmanager.impl.RateControlledEntity;
import com.aelitis.azureus.core.networkmanager.impl.ReadController;
import com.aelitis.azureus.core.networkmanager.impl.SinglePeerUploader;
import com.aelitis.azureus.core.peermanager.messaging.azureus.AZStatReply;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ReadControllerEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          ReadController readController0 = new ReadController();
          assertNotNull(readController0);
          
          int int0 = readController0.getEntityCount();
          assertEquals(0, int0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          ReadController readController0 = new ReadController();
          assertNotNull(readController0);
          
          LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
          HashMap<String, String> hashMap0 = new HashMap<String, String>();
          AZStatReply aZStatReply0 = new AZStatReply((Map) hashMap0, (byte)108);
          Map<Object, Object> map0 = aZStatReply0.getReply();
          readController0.updateStats((Set) linkedHashSet0, (Map) map0);
          assertEquals("{}", hashMap0.toString());
          assertEquals("AZ_STAT_REP: {}", aZStatReply0.getDescription());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          ReadController readController0 = new ReadController();
          assertNotNull(readController0);
          
          SinglePeerUploader singlePeerUploader0 = new SinglePeerUploader((NetworkConnectionBase) null, (RateHandler) null);
          readController0.addReadEntity((RateControlledEntity) singlePeerUploader0);
          assertEquals(1, readController0.getEntityCount());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
      ReadController readController0 = new ReadController();
      assertNotNull(readController0);
      
      MultiPeerDownloader multiPeerDownloader0 = new MultiPeerDownloader((RateHandler) null);
      readController0.addReadEntity((RateControlledEntity) multiPeerDownloader0);
      assertEquals(1, readController0.getEntityCount());
  }

  @Test
  public void test4()  throws Throwable  {
      ReadController readController0 = new ReadController();
      SinglePeerUploader singlePeerUploader0 = new SinglePeerUploader((NetworkConnectionBase) null, (RateHandler) null);
      readController0.removeReadEntity((RateControlledEntity) singlePeerUploader0);
      assertEquals(0, singlePeerUploader0.getPriority());
  }

  @Test
  public void test5()  throws Throwable  {
      ReadController readController0 = new ReadController();
      MultiPeerDownloader2 multiPeerDownloader2_0 = new MultiPeerDownloader2((RateHandler) null);
      readController0.removeReadEntity((RateControlledEntity) multiPeerDownloader2_0);
      assertEquals(1, multiPeerDownloader2_0.getPriority());
  }
}
