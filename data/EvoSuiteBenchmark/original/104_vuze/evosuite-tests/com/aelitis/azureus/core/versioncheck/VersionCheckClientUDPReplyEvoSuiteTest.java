/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.versioncheck;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.versioncheck.VersionCheckClientUDPReply;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Map;
import org.gudy.azureus2.core3.util.BEncodingException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class VersionCheckClientUDPReplyEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      VersionCheckClientUDPReply versionCheckClientUDPReply0 = new VersionCheckClientUDPReply((-177));
      // Undeclared exception!
      try {
        versionCheckClientUDPReply0.serialise((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      VersionCheckClientUDPReply versionCheckClientUDPReply0 = new VersionCheckClientUDPReply((-177));
      Map<String, Object> map0 = versionCheckClientUDPReply0.getPayload();
      assertNull(map0);
  }

  @Test
  public void test2()  throws Throwable  {
      VersionCheckClientUDPReply versionCheckClientUDPReply0 = new VersionCheckClientUDPReply((-617));
      String string0 = versionCheckClientUDPReply0.getString();
      assertEquals("type=33,addr=null:reply[trans=-617]", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      VersionCheckClientUDPReply versionCheckClientUDPReply0 = new VersionCheckClientUDPReply((-177));
      versionCheckClientUDPReply0.setPayload((Map<String, Object>) null);
      assertEquals("type=33,addr=null:reply[trans=-177]", versionCheckClientUDPReply0.getString());
  }

  @Test
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte)121;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) byteArrayInputStream0);
      VersionCheckClientUDPReply versionCheckClientUDPReply0 = null;
      try {
        versionCheckClientUDPReply0 = new VersionCheckClientUDPReply(dataInputStream0, (int) (byte) (-1));
        fail("Expecting exception: BEncodingException");
      } catch(BEncodingException e) {
        /*
         * BDecoder: unknown command '0, remainder = \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) byteArrayInputStream0);
      VersionCheckClientUDPReply versionCheckClientUDPReply0 = null;
      try {
        versionCheckClientUDPReply0 = new VersionCheckClientUDPReply(dataInputStream0, (int) (byte)0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * invalid length
         */
      }
  }
}
