/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.plugins.dht.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.dht.DHTLogger;
import com.aelitis.azureus.core.dht.DHTStorageKey;
import com.aelitis.azureus.core.dht.transport.DHTTransportContact;
import com.aelitis.azureus.core.dht.transport.loopback.DHTTransportLoopbackContactImpl;
import com.aelitis.azureus.core.dht.transport.loopback.DHTTransportLoopbackImpl;
import com.aelitis.azureus.plugins.dht.impl.DHTPluginStorageManager;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.gudy.azureus2.core3.util.HashWrapper;
import org.gudy.azureus2.plugins.torrent.TorrentAttribute;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DHTPluginStorageManagerEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      DHTPluginStorageManager.diversification dHTPluginStorageManager_diversification0 = new DHTPluginStorageManager.diversification((DHTPluginStorageManager) null, (HashWrapper) null, (byte)3);
      assertNotNull(dHTPluginStorageManager_diversification0);
      
      dHTPluginStorageManager_diversification0.getKey();
      assertEquals(222036695L, dHTPluginStorageManager_diversification0.getExpiry());
  }

  @Test
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      HashWrapper hashWrapper0 = new HashWrapper(byteArray0);
      int[] intArray0 = new int[7];
      DHTPluginStorageManager.diversification dHTPluginStorageManager_diversification0 = new DHTPluginStorageManager.diversification((DHTPluginStorageManager) null, hashWrapper0, (byte)1, (long) (byte)1, intArray0);
      List<Object> list0 = dHTPluginStorageManager_diversification0.getKeys(false, false);
      assertEquals(2, list0.size());
      assertNotNull(list0);
      assertEquals(1, dHTPluginStorageManager_diversification0.getType());
      assertEquals(1L, dHTPluginStorageManager_diversification0.getExpiry());
  }

  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      DHTPluginStorageManager.keyBlock dHTPluginStorageManager_keyBlock0 = new DHTPluginStorageManager.keyBlock(byteArray0, byteArray0, 0, true);
      // Undeclared exception!
      try {
        dHTPluginStorageManager_keyBlock0.getCreated();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 6
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      DHTPluginStorageManager.keyBlock dHTPluginStorageManager_keyBlock0 = new DHTPluginStorageManager.keyBlock(byteArray0, byteArray0, (int) (byte) (-38), true);
      byte[] byteArray1 = dHTPluginStorageManager_keyBlock0.getKey();
      assertEquals(true, dHTPluginStorageManager_keyBlock0.isDirect());
      assertEquals(-38, dHTPluginStorageManager_keyBlock0.getReceived());
      assertNotNull(byteArray1);
  }

  @Test
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      DHTPluginStorageManager.keyBlock dHTPluginStorageManager_keyBlock0 = new DHTPluginStorageManager.keyBlock(byteArray0, byteArray0, (-932), true);
      dHTPluginStorageManager_keyBlock0.getLogged();
      assertEquals(true, dHTPluginStorageManager_keyBlock0.isDirect());
      assertEquals(-932, dHTPluginStorageManager_keyBlock0.getReceived());
  }

  @Test
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      DHTPluginStorageManager.keyBlock dHTPluginStorageManager_keyBlock0 = new DHTPluginStorageManager.keyBlock(byteArray0, byteArray0, (-932), true);
      boolean boolean0 = dHTPluginStorageManager_keyBlock0.isDirect();
      assertEquals(true, boolean0);
      assertEquals(-932, dHTPluginStorageManager_keyBlock0.getReceived());
  }

  @Test
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      DHTPluginStorageManager.keyBlock dHTPluginStorageManager_keyBlock0 = new DHTPluginStorageManager.keyBlock(byteArray0, byteArray0, (int) (byte)0, false);
      int int0 = dHTPluginStorageManager_keyBlock0.getReceived();
      assertEquals(false, dHTPluginStorageManager_keyBlock0.isDirect());
      assertEquals(0, int0);
  }

  @Test
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      DHTPluginStorageManager.keyBlock dHTPluginStorageManager_keyBlock0 = new DHTPluginStorageManager.keyBlock(byteArray0, byteArray0, (-1147), false);
      dHTPluginStorageManager_keyBlock0.setLogged();
      assertEquals(true, dHTPluginStorageManager_keyBlock0.getLogged());
  }

  @Test
  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      DHTPluginStorageManager.keyBlock dHTPluginStorageManager_keyBlock0 = new DHTPluginStorageManager.keyBlock(byteArray0, byteArray0, (-932), true);
      byte[] byteArray1 = dHTPluginStorageManager_keyBlock0.getCertificate();
      assertNotNull(byteArray1);
      assertEquals(-932, dHTPluginStorageManager_keyBlock0.getReceived());
      assertEquals(true, dHTPluginStorageManager_keyBlock0.isDirect());
  }

  @Test
  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      DHTPluginStorageManager.keyBlock dHTPluginStorageManager_keyBlock0 = new DHTPluginStorageManager.keyBlock(byteArray0, byteArray0, (int) (byte)0, false);
      byte[] byteArray1 = dHTPluginStorageManager_keyBlock0.getRequest();
      assertNotNull(byteArray1);
      assertEquals(false, dHTPluginStorageManager_keyBlock0.isDirect());
      assertEquals(0, dHTPluginStorageManager_keyBlock0.getReceived());
  }

  @Test
  public void test10()  throws Throwable  {
      HashMap<DHTPluginStorageManager.storageKey, DHTPluginStorageManager.diversification> hashMap0 = new HashMap<DHTPluginStorageManager.storageKey, DHTPluginStorageManager.diversification>();
      // Undeclared exception!
      try {
        DHTPluginStorageManager.storageKey.deserialise((DHTPluginStorageManager) null, (Map) hashMap0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      DHTPluginStorageManager.storageKey dHTPluginStorageManager_storageKey0 = new DHTPluginStorageManager.storageKey((DHTPluginStorageManager) null, (byte)0, (HashWrapper) null);
      int int0 = dHTPluginStorageManager_storageKey0.getSize();
      assertEquals(249605949L, dHTPluginStorageManager_storageKey0.getExpiry());
      assertEquals(0, int0);
  }

  @Test
  public void test12()  throws Throwable  {
      DHTPluginStorageManager.storageKey dHTPluginStorageManager_storageKey0 = new DHTPluginStorageManager.storageKey((DHTPluginStorageManager) null, (byte)0, (HashWrapper) null);
      // Undeclared exception!
      try {
        dHTPluginStorageManager_storageKey0.serialiseStats((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      DHTPluginStorageManager.storageKey dHTPluginStorageManager_storageKey0 = new DHTPluginStorageManager.storageKey((DHTPluginStorageManager) null, (byte)0, (HashWrapper) null, (long) (byte)0);
      // Undeclared exception!
      try {
        dHTPluginStorageManager_storageKey0.serialise();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test14()  throws Throwable  {
      DHTPluginStorageManager.storageKey dHTPluginStorageManager_storageKey0 = new DHTPluginStorageManager.storageKey((DHTPluginStorageManager) null, (byte)0, (HashWrapper) null, (long) (byte)0);
      dHTPluginStorageManager_storageKey0.getReadsPerMinute();
      assertEquals(0, dHTPluginStorageManager_storageKey0.getDiversificationType());
  }

  @Test
  public void test15()  throws Throwable  {
      DHTPluginStorageManager.storageKey dHTPluginStorageManager_storageKey0 = new DHTPluginStorageManager.storageKey((DHTPluginStorageManager) null, (byte)0, (HashWrapper) null);
      long long0 = dHTPluginStorageManager_storageKey0.getExpiry();
      assertEquals(213585144L, long0);
  }

  @Test
  public void test16()  throws Throwable  {
      DHTPluginStorageManager.storageKey dHTPluginStorageManager_storageKey0 = new DHTPluginStorageManager.storageKey((DHTPluginStorageManager) null, (byte)0, (HashWrapper) null, (-1822L));
      int int0 = dHTPluginStorageManager_storageKey0.getEntryCount();
      assertEquals(1, dHTPluginStorageManager_storageKey0.getDiversificationType());
      assertEquals(0, int0);
  }

  @Test
  public void test17()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          File file0 = new File("", "");
          DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager((int) (byte)1, (DHTLogger) null, file0);
          assertNotNull(dHTPluginStorageManager0);
          
          dHTPluginStorageManager0.getKeyCount();
          assertEquals(true, dHTPluginStorageManager0.suspendDivs());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test18()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          File file0 = new File("", "");
          DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager((int) (byte)1, (DHTLogger) null, file0);
          assertNotNull(dHTPluginStorageManager0);
          
          int int0 = dHTPluginStorageManager0.getNextValueVersions(0);
          assertEquals(0, int0);
          
          int int1 = dHTPluginStorageManager0.getNextValueVersions((int) (byte)1);
          assertEquals(0, int1);
          assertEquals(true, dHTPluginStorageManager0.suspendDivs());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test19()  throws Throwable  {
      File file0 = new File("", "");
      DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager((-1787), (DHTLogger) null, file0);
      assertNotNull(dHTPluginStorageManager0);
      
      int int0 = dHTPluginStorageManager0.getRemoteSizeDivCount();
      assertEquals(0, int0);
      assertEquals(-1787, dHTPluginStorageManager0.getNetwork());
      assertEquals(false, dHTPluginStorageManager0.suspendDivs());
  }

  @Test
  public void test20()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          byte[] byteArray0 = new byte[6];
          File file0 = new File("", "");
          DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager((-1787), (DHTLogger) null, file0);
          assertNotNull(dHTPluginStorageManager0);
          
          dHTPluginStorageManager0.setStorageForKey("", byteArray0);
          assertEquals(-1787, dHTPluginStorageManager0.getNetwork());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test21()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          File file0 = new File("", "");
          DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager((-1787), (DHTLogger) null, file0);
          assertNotNull(dHTPluginStorageManager0);
          
          dHTPluginStorageManager0.recordCurrentAddress("");
          boolean boolean0 = dHTPluginStorageManager0.isRecentAddress("");
          assertEquals(false, dHTPluginStorageManager0.suspendDivs());
          assertEquals(-1787, dHTPluginStorageManager0.getNetwork());
          assertEquals(true, boolean0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test22()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          File file0 = new File("", "");
          DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager((int) (byte)1, (DHTLogger) null, file0);
          assertNotNull(dHTPluginStorageManager0);
          
          int int0 = dHTPluginStorageManager0.getNetwork();
          assertEquals(true, dHTPluginStorageManager0.suspendDivs());
          assertEquals(1, int0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test23()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          File file0 = new File("", "");
          DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager((int) (byte)1, (DHTLogger) null, file0);
          assertNotNull(dHTPluginStorageManager0);
          
          dHTPluginStorageManager0.getStorageForKey("");
          assertEquals(true, dHTPluginStorageManager0.suspendDivs());
          assertEquals(1, dHTPluginStorageManager0.getNetwork());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test24()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          byte[] byteArray0 = new byte[20];
          File file0 = new File("", "");
          DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager((int) (byte)1, (DHTLogger) null, file0);
          assertNotNull(dHTPluginStorageManager0);
          
          HashWrapper hashWrapper0 = new HashWrapper(byteArray0, (int) (byte)1, (int) (byte)0);
          DHTPluginStorageManager.storageKey dHTPluginStorageManager_storageKey0 = dHTPluginStorageManager0.getStorageKey(hashWrapper0);
          assertEquals(1, dHTPluginStorageManager0.getKeyCount());
          
          dHTPluginStorageManager0.keyDeleted((DHTStorageKey) dHTPluginStorageManager_storageKey0);
          assertEquals(179572606L, dHTPluginStorageManager_storageKey0.getExpiry());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test25()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          File file0 = new File("", "");
          DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager((int) (byte)1, (DHTLogger) null, file0);
          assertNotNull(dHTPluginStorageManager0);
          
          int int0 = dHTPluginStorageManager0.getRemoteFreqDivCount();
          assertEquals(true, dHTPluginStorageManager0.suspendDivs());
          assertEquals(0, int0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test26()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          File file0 = new File("", "");
          DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager((int) (byte)1, (DHTLogger) null, file0);
          assertNotNull(dHTPluginStorageManager0);
          
          boolean boolean0 = dHTPluginStorageManager0.isRecentAddress("/");
          assertEquals(false, boolean0);
          assertEquals(true, dHTPluginStorageManager0.suspendDivs());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test27()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          byte[] byteArray0 = new byte[20];
          File file0 = new File("", "");
          DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager((int) (byte)1, (DHTLogger) null, file0);
          assertNotNull(dHTPluginStorageManager0);
          
          boolean boolean0 = dHTPluginStorageManager0.isDiversified(byteArray0);
          assertEquals(true, dHTPluginStorageManager0.suspendDivs());
          assertEquals(false, boolean0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      File file0 = new File("", "");
      DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager(1382, (DHTLogger) null, file0);
      assertNotNull(dHTPluginStorageManager0);
      
      byte[][] byteArray1 = dHTPluginStorageManager0.getExistingDiversification(byteArray0, true, true, (-1382));
      assertNotNull(byteArray1);
      assertEquals(1382, dHTPluginStorageManager0.getNetwork());
  }

  @Test
  public void test29()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          File file0 = new File("", "");
          DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager((int) (byte)1, (DHTLogger) null, file0);
          assertNotNull(dHTPluginStorageManager0);
          
          byte[][] byteArray0 = dHTPluginStorageManager0.getExistingDiversification((byte[]) null, false, false, (-1091));
          assertNotNull(byteArray0);
          assertEquals(true, dHTPluginStorageManager0.suspendDivs());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      File file0 = new File("", "");
      DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager((-1787), (DHTLogger) null, file0);
      assertNotNull(dHTPluginStorageManager0);
      
      byte[][] byteArray1 = dHTPluginStorageManager0.getExistingDiversification(byteArray0, false, false, 687);
      assertEquals(false, dHTPluginStorageManager0.suspendDivs());
      assertNotNull(byteArray1);
      assertEquals(-1787, dHTPluginStorageManager0.getNetwork());
  }

  @Test
  public void test31()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          byte[] byteArray0 = new byte[20];
          File file0 = new File("", "");
          DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager((int) (byte)1, (DHTLogger) null, file0);
          HashWrapper hashWrapper0 = new HashWrapper(byteArray0, (int) (byte)1, (int) (byte)0);
          dHTPluginStorageManager0.createDiversification(hashWrapper0, (byte) (-116));
          dHTPluginStorageManager0.followDivChain(hashWrapper0, true, true, (int) (byte)1);
          assertEquals(1, dHTPluginStorageManager0.getRemoteSizeDivCount());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test32()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          byte[] byteArray0 = new byte[20];
          File file0 = new File("", "");
          DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager((int) (byte)1, (DHTLogger) null, file0);
          assertNotNull(dHTPluginStorageManager0);
          
          HashWrapper hashWrapper0 = new HashWrapper(byteArray0, (int) (byte)1, (int) (byte)0);
          dHTPluginStorageManager0.createDiversification(hashWrapper0, (byte) (-116));
          dHTPluginStorageManager0.followDivChain(hashWrapper0, true, true, 1302);
          assertEquals(1, dHTPluginStorageManager0.getRemoteSizeDivCount());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test33()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          byte[] byteArray0 = new byte[20];
          File file0 = new File("", "");
          DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager((int) (byte)1, (DHTLogger) null, file0);
          assertNotNull(dHTPluginStorageManager0);
          
          HashWrapper hashWrapper0 = new HashWrapper(byteArray0, (int) (byte)1, (int) (byte)0);
          dHTPluginStorageManager0.getStorageKey(hashWrapper0);
          DHTPluginStorageManager.storageKey dHTPluginStorageManager_storageKey0 = (DHTPluginStorageManager.storageKey)dHTPluginStorageManager0.keyCreated(hashWrapper0, true);
          assertEquals(1, dHTPluginStorageManager0.getKeyCount());
          assertEquals(214532590L, dHTPluginStorageManager_storageKey0.getExpiry());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test34()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          byte[] byteArray0 = new byte[20];
          File file0 = new File("", "");
          DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager((int) (byte)1, (DHTLogger) null, file0);
          assertNotNull(dHTPluginStorageManager0);
          
          HashWrapper hashWrapper0 = new HashWrapper(byteArray0, (int) (byte)1, (int) (byte)0);
          dHTPluginStorageManager0.getStorageKey(hashWrapper0);
          assertEquals(1, dHTPluginStorageManager0.getKeyCount());
          
          DHTPluginStorageManager.storageKey dHTPluginStorageManager_storageKey0 = new DHTPluginStorageManager.storageKey(dHTPluginStorageManager0, (byte)63, hashWrapper0, (long) (byte)1);
          dHTPluginStorageManager0.keyDeleted((DHTStorageKey) dHTPluginStorageManager_storageKey0);
          assertEquals(true, dHTPluginStorageManager0.suspendDivs());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      File file0 = new File("", "");
      HashWrapper hashWrapper0 = new HashWrapper(byteArray0, (int) (byte)1, (int) (byte)0);
      DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager(1382, (DHTLogger) null, file0);
      assertNotNull(dHTPluginStorageManager0);
      
      dHTPluginStorageManager0.getStorageKey(hashWrapper0);
      DHTPluginStorageManager.diversification dHTPluginStorageManager_diversification0 = dHTPluginStorageManager0.createDiversification(hashWrapper0, (byte) (-116));
      assertEquals(1, dHTPluginStorageManager0.getRemoteSizeDivCount());
      assertEquals(222195942L, dHTPluginStorageManager_diversification0.getExpiry());
  }

  @Test
  public void test36()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          byte[] byteArray0 = new byte[20];
          File file0 = new File("", "");
          DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager((int) (byte)1, (DHTLogger) null, file0);
          assertNotNull(dHTPluginStorageManager0);
          
          HashWrapper hashWrapper0 = new HashWrapper(byteArray0, (int) (byte)1, (int) (byte)0);
          dHTPluginStorageManager0.createDiversification(hashWrapper0, (byte) (-116));
          DHTPluginStorageManager.diversification dHTPluginStorageManager_diversification0 = dHTPluginStorageManager0.createDiversification(hashWrapper0, (byte)1);
          assertEquals(1, dHTPluginStorageManager0.getRemoteSizeDivCount());
          assertEquals(231481053L, dHTPluginStorageManager_diversification0.getExpiry());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      File file0 = new File("", "");
      HashWrapper hashWrapper0 = new HashWrapper(byteArray0, (int) (byte)1, (int) (byte)0);
      DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager(1382, (DHTLogger) null, file0);
      assertNotNull(dHTPluginStorageManager0);
      
      DHTPluginStorageManager.diversification dHTPluginStorageManager_diversification0 = dHTPluginStorageManager0.createDiversification(hashWrapper0, (byte)1);
      assertEquals(1, dHTPluginStorageManager0.getRemoteSizeDivCount());
      assertEquals(191650455L, dHTPluginStorageManager_diversification0.getExpiry());
  }

  @Test
  public void test38()  throws Throwable  {
      String string0 = DHTPluginStorageManager.formatExpiry((-1636L));
      assertEquals("-00:00:01", string0);
      assertNotNull(string0);
  }

  @Test
  public void test39()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          File file0 = new File("", "");
          DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager((int) (byte)1, (DHTLogger) null, file0);
          assertNotNull(dHTPluginStorageManager0);
          
          dHTPluginStorageManager0.writeKeyBlocks();
          assertEquals(true, dHTPluginStorageManager0.suspendDivs());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      boolean boolean0 = DHTPluginStorageManager.verifyKeyBlock(byteArray0, byteArray0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test41()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          byte[] byteArray0 = new byte[20];
          File file0 = new File("", "");
          DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager((int) (byte)1, (DHTLogger) null, file0);
          assertNotNull(dHTPluginStorageManager0);
          
          dHTPluginStorageManager0.getKeyBlockDetails(byteArray0);
          assertEquals(true, dHTPluginStorageManager0.suspendDivs());
          assertEquals(1, dHTPluginStorageManager0.getNetwork());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test42()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          byte[] byteArray0 = new byte[20];
          File file0 = new File("", "");
          DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager((int) (byte)1, (DHTLogger) null, file0);
          assertNotNull(dHTPluginStorageManager0);
          
          byte[] byteArray1 = dHTPluginStorageManager0.getKeyForKeyBlock(byteArray0);
          assertNotNull(byteArray1);
          assertEquals(true, dHTPluginStorageManager0.suspendDivs());
          assertNotSame(byteArray1, byteArray0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      File file0 = new File("", "");
      DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager((-1787), (DHTLogger) null, file0);
      assertNotNull(dHTPluginStorageManager0);
      
      byte[] byteArray1 = dHTPluginStorageManager0.getKeyForKeyBlock(byteArray0);
      assertEquals(-1787, dHTPluginStorageManager0.getNetwork());
      assertNotNull(byteArray1);
      assertEquals(false, dHTPluginStorageManager0.suspendDivs());
  }

  @Test
  public void test44()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          File file0 = new File("", "");
          DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager((int) (byte)1, (DHTLogger) null, file0);
          assertNotNull(dHTPluginStorageManager0);
          
          dHTPluginStorageManager0.purgeDirectKeyBlocks();
          assertEquals(true, dHTPluginStorageManager0.suspendDivs());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      DHTPluginStorageManager.keyBlock dHTPluginStorageManager_keyBlock0 = new DHTPluginStorageManager.keyBlock(byteArray0, byteArray0, (int) (byte)0, false);
      boolean boolean0 = dHTPluginStorageManager_keyBlock0.isAdd();
      assertEquals(false, boolean0);
      assertEquals(false, dHTPluginStorageManager_keyBlock0.isDirect());
      assertEquals(0, dHTPluginStorageManager_keyBlock0.getReceived());
  }

  @Test
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)1;
      DHTPluginStorageManager.keyBlock dHTPluginStorageManager_keyBlock0 = new DHTPluginStorageManager.keyBlock(byteArray0, byteArray0, (-932), true);
      boolean boolean0 = dHTPluginStorageManager_keyBlock0.isAdd();
      assertEquals(true, dHTPluginStorageManager_keyBlock0.isDirect());
      assertEquals(-932, dHTPluginStorageManager_keyBlock0.getReceived());
      assertEquals(true, boolean0);
  }

  @Test
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      DHTPluginStorageManager.keyBlock dHTPluginStorageManager_keyBlock0 = new DHTPluginStorageManager.keyBlock(byteArray0, byteArray0, (int) (byte)0, false);
      DHTTransportLoopbackImpl dHTTransportLoopbackImpl0 = new DHTTransportLoopbackImpl((int) (byte)1);
      DHTTransportLoopbackContactImpl dHTTransportLoopbackContactImpl0 = (DHTTransportLoopbackContactImpl)dHTTransportLoopbackImpl0.getLocalContact();
      dHTPluginStorageManager_keyBlock0.sentTo((DHTTransportContact) dHTTransportLoopbackContactImpl0);
      boolean boolean0 = dHTPluginStorageManager_keyBlock0.hasBeenSentTo((DHTTransportContact) dHTTransportLoopbackContactImpl0);
      assertEquals(0, dHTPluginStorageManager_keyBlock0.getReceived());
      assertEquals(false, dHTPluginStorageManager_keyBlock0.isDirect());
      assertEquals(true, boolean0);
  }

  @Test
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      DHTPluginStorageManager.keyBlock dHTPluginStorageManager_keyBlock0 = new DHTPluginStorageManager.keyBlock(byteArray0, byteArray0, (int) (byte)0, true);
      DHTTransportLoopbackImpl dHTTransportLoopbackImpl0 = new DHTTransportLoopbackImpl((int) (byte)0);
      DHTTransportLoopbackContactImpl dHTTransportLoopbackContactImpl0 = (DHTTransportLoopbackContactImpl)dHTTransportLoopbackImpl0.getLocalContact();
      boolean boolean0 = dHTPluginStorageManager_keyBlock0.hasBeenSentTo((DHTTransportContact) dHTTransportLoopbackContactImpl0);
      assertEquals(true, dHTPluginStorageManager_keyBlock0.isDirect());
      assertEquals(false, boolean0);
      assertEquals(0, dHTPluginStorageManager_keyBlock0.getReceived());
  }

  @Test
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      DHTPluginStorageManager.keyBlock dHTPluginStorageManager_keyBlock0 = new DHTPluginStorageManager.keyBlock(byteArray0, byteArray0, (int) (byte)0, false);
      DHTTransportLoopbackImpl dHTTransportLoopbackImpl0 = new DHTTransportLoopbackImpl((int) (byte)1);
      DHTTransportLoopbackContactImpl dHTTransportLoopbackContactImpl0 = (DHTTransportLoopbackContactImpl)dHTTransportLoopbackImpl0.getLocalContact();
      dHTPluginStorageManager_keyBlock0.sentTo((DHTTransportContact) dHTTransportLoopbackContactImpl0);
      dHTPluginStorageManager_keyBlock0.sentTo((DHTTransportContact) dHTTransportLoopbackContactImpl0);
      assertEquals(false, dHTPluginStorageManager_keyBlock0.isDirect());
      assertEquals(0, dHTPluginStorageManager_keyBlock0.getReceived());
  }

  @Test
  public void test50()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          byte[] byteArray0 = new byte[20];
          byteArray0[0] = (byte)1;
          File file0 = new File("", "");
          byteArray0[1] = (byte)1;
          String string0 = TorrentAttribute.TA_TRACKER_CLIENT_EXTENSIONS;
          file0.equals((Object) "TrackerClientExtensions");
          byteArray0[3] = (byte)1;
          byteArray0[4] = (byte)0;
          DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager((int) (byte)1, (DHTLogger) null, file0);
          assertNotNull(dHTPluginStorageManager0);
          
          byteArray0[5] = (byte)1;
          byteArray0[6] = (byte)1;
          byteArray0[7] = (byte)0;
          byteArray0[9] = (byte)0;
          byteArray0[10] = (byte)1;
          HashWrapper hashWrapper0 = new HashWrapper(byteArray0, (int) (byte)1, (int) (byte)0);
          DHTPluginStorageManager.diversification dHTPluginStorageManager_diversification0 = new DHTPluginStorageManager.diversification(dHTPluginStorageManager0, hashWrapper0, (byte) (-78));
          assertEquals(206187639L, dHTPluginStorageManager_diversification0.getExpiry());
          assertNotNull(dHTPluginStorageManager_diversification0);
          
          file0.toString();
          byteArray0[14] = (byte)0;
          byteArray0[16] = (byte)1;
          dHTPluginStorageManager0.getDirectKeyBlocks();
          byteArray0[19] = (byte)0;
          dHTPluginStorageManager0.writeDiversifications();
          int int0 = dHTPluginStorageManager0.getNextValueVersions(0);
          assertEquals(0, int0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      HashWrapper hashWrapper0 = new HashWrapper(byteArray0);
      int[] intArray0 = new int[5];
      DHTPluginStorageManager.diversification dHTPluginStorageManager_diversification0 = new DHTPluginStorageManager.diversification((DHTPluginStorageManager) null, hashWrapper0, (byte)0, (long) (byte)0, intArray0);
      List<Object> list0 = dHTPluginStorageManager_diversification0.getKeys(true, false);
      assertEquals(0, dHTPluginStorageManager_diversification0.getType());
      assertEquals(5, list0.size());
      assertNotNull(list0);
  }

  @Test
  public void test52()  throws Throwable  {
      DHTPluginStorageManager.diversification dHTPluginStorageManager_diversification0 = new DHTPluginStorageManager.diversification((DHTPluginStorageManager) null, (HashWrapper) null, (byte)3);
      assertNotNull(dHTPluginStorageManager_diversification0);
      
      // Undeclared exception!
      try {
        dHTPluginStorageManager_diversification0.getKeys(false, true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test53()  throws Throwable  {
      DHTPluginStorageManager.storageKey dHTPluginStorageManager_storageKey0 = new DHTPluginStorageManager.storageKey((DHTPluginStorageManager) null, (byte)0, (HashWrapper) null, (-1822L));
      // Undeclared exception!
      byte byte0 = 0;
      try {
        byte0 = dHTPluginStorageManager_storageKey0.getDiversificationType();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test54()  throws Throwable  {
      DHTPluginStorageManager.storageKey dHTPluginStorageManager_storageKey0 = new DHTPluginStorageManager.storageKey((DHTPluginStorageManager) null, (byte)0, (HashWrapper) null);
      DHTTransportLoopbackImpl dHTTransportLoopbackImpl0 = new DHTTransportLoopbackImpl((int) (byte)0);
      DHTTransportLoopbackContactImpl dHTTransportLoopbackContactImpl0 = (DHTTransportLoopbackContactImpl)dHTTransportLoopbackImpl0.getLocalContact();
      dHTPluginStorageManager_storageKey0.read((DHTTransportContact) dHTTransportLoopbackContactImpl0);
      assertEquals(194478517L, dHTPluginStorageManager_storageKey0.getExpiry());
  }

  @Test
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      HashWrapper hashWrapper0 = new HashWrapper(byteArray0);
      DHTPluginStorageManager.storageKey dHTPluginStorageManager_storageKey0 = new DHTPluginStorageManager.storageKey((DHTPluginStorageManager) null, (byte)1, hashWrapper0);
      DHTTransportLoopbackImpl dHTTransportLoopbackImpl0 = new DHTTransportLoopbackImpl((int) (byte)1);
      DHTTransportLoopbackContactImpl dHTTransportLoopbackContactImpl0 = (DHTTransportLoopbackContactImpl)dHTTransportLoopbackImpl0.getLocalContact();
      // Undeclared exception!
      try {
        dHTPluginStorageManager_storageKey0.read((DHTTransportContact) dHTTransportLoopbackContactImpl0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test56()  throws Throwable  {
      DHTPluginStorageManager.storageKey dHTPluginStorageManager_storageKey0 = new DHTPluginStorageManager.storageKey((DHTPluginStorageManager) null, (byte)0, (HashWrapper) null, (-1822L));
      dHTPluginStorageManager_storageKey0.valueChanged((int) (byte)0, (-1780));
  }

  @Test
  public void test57()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          byte[] byteArray0 = new byte[20];
          File file0 = new File("", "");
          DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager((int) (byte)1, (DHTLogger) null, file0);
          assertNotNull(dHTPluginStorageManager0);
          
          HashWrapper hashWrapper0 = new HashWrapper(byteArray0, (int) (byte)1, (int) (byte)0);
          DHTPluginStorageManager.storageKey dHTPluginStorageManager_storageKey0 = dHTPluginStorageManager0.getStorageKey(hashWrapper0);
          dHTPluginStorageManager_storageKey0.valueChanged((-1382), (int) (byte)1);
          assertEquals(1, dHTPluginStorageManager0.getKeyCount());
          assertEquals(251882335L, dHTPluginStorageManager_storageKey0.getExpiry());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      File file0 = new File("", "");
      HashWrapper hashWrapper0 = new HashWrapper(byteArray0, (int) (byte)1, (int) (byte)0);
      DHTPluginStorageManager dHTPluginStorageManager0 = new DHTPluginStorageManager(1382, (DHTLogger) null, file0);
      assertNotNull(dHTPluginStorageManager0);
      
      DHTPluginStorageManager.storageKey dHTPluginStorageManager_storageKey0 = dHTPluginStorageManager0.getStorageKey(hashWrapper0);
      dHTPluginStorageManager_storageKey0.valueChanged((int) (byte)1, 0);
      assertEquals(1, dHTPluginStorageManager0.getKeyCount());
      assertEquals(240154535L, dHTPluginStorageManager_storageKey0.getExpiry());
  }
}
