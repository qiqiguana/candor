/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.ui.swt.mdi;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.ui.common.viewtitleinfo.ViewTitleInfo;
import com.aelitis.azureus.ui.mdi.MdiEntry;
import com.aelitis.azureus.ui.swt.mdi.MdiEntrySWT;
import com.aelitis.azureus.ui.swt.mdi.TabbedEntry;
import com.aelitis.azureus.ui.swt.mdi.TabbedMDI;
import com.aelitis.azureus.ui.swt.skin.SWTSkin;
import com.aelitis.azureus.ui.swt.skin.SWTSkinObject;
import java.io.PrintWriter;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.gudy.azureus2.core3.util.IndentWriter;
import org.gudy.azureus2.ui.swt.plugins.PluginUISWTSkinObject;
import org.gudy.azureus2.ui.swt.plugins.UISWTViewEventListener;
import org.gudy.azureus2.ui.swt.pluginsimpl.UISWTViewCore;
import org.gudy.azureus2.ui.swt.views.MySharesView;
import org.gudy.azureus2.ui.swt.views.PiecesView;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TabbedMDIEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          MySharesView mySharesView0 = new MySharesView();
          TabbedEntry tabbedEntry0 = (TabbedEntry)tabbedMDI0.createEntryFromSkinRef((String) null, (String) null, (String) null, (String) null, (ViewTitleInfo) mySharesView0, (Object) "time", false, (String) null);
          assertEquals("null", tabbedEntry0.getLogID());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          boolean boolean0 = tabbedMDI0.showEntryByID("");
          assertEquals(false, boolean0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          // Undeclared exception!
          try {
            tabbedMDI0.skinObjectCreated((SWTSkinObject) null, (Object) null);
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          MdiEntry mdiEntry0 = tabbedMDI0.createHeader("gV%^7M<)gC3", "gV%^7M<)gC3", "gV%^7M<)gC3");
          assertNull(mdiEntry0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          // Undeclared exception!
          try {
            tabbedMDI0.skinObjectInitialShow((SWTSkinObject) null, (Object) "swarm");
            fail("Expecting exception: NoClassDefFoundError");
          } catch(NoClassDefFoundError e) {
            /*
             * Could not initialize class org.gudy.azureus2.pluginsimpl.local.PluginInitializer
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, " #P,F");
          tabbedMDI0.showEntry((MdiEntry) tabbedEntry0);
          assertEquals("MDI- #P,F", tabbedMDI0.getUpdateUIName());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          tabbedMDI0.showEntry((MdiEntry) null);
          assertEquals(false, tabbedMDI0.isVisible());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          tabbedMDI0.updateUI();
          assertEquals(false, tabbedMDI0.isVisible());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test8()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          MySharesView mySharesView0 = new MySharesView();
          TabbedEntry tabbedEntry0 = (TabbedEntry)tabbedMDI0.createEntryFromSkinRef("BT_INTERESTED", "BT_INTERESTED", "BT_INTERESTED", "", (ViewTitleInfo) mySharesView0, (Object) "BT_INTERESTED", false, "");
          assertEquals("", tabbedEntry0.getTitle());
          assertEquals("BT_INTERESTED", tabbedEntry0.getSkinRef());
          assertEquals("BT", tabbedEntry0.getLogID());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test9()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          PiecesView piecesView0 = new PiecesView();
          TabbedEntry tabbedEntry0 = (TabbedEntry)tabbedMDI0.createEntryFromEventListener((String) null, (UISWTViewEventListener) piecesView0, (String) null, false, (Object) "azureus_private_properties");
          assertNotNull(tabbedEntry0);
          assertEquals("null", tabbedEntry0.getLogID());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = (TabbedEntry)tabbedMDI0.createEntryFromView("racker Password Web HTTPS Only", (UISWTViewCore) null, "racker Password Web HTTPS Only", (Object) "AZ_SESSION_REQUEST", false, false, false);
          assertNotNull(tabbedEntry0);
          assertEquals("racker Password Web HTTPS Only", tabbedEntry0.getLogID());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          // Undeclared exception!
          try {
            tabbedMDI0.createEntryFromView((String) null, (UISWTViewCore) null, (String) null, (Object) "BT_SUGGEST_PIECE", true, true, true);
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          String string0 = tabbedMDI0.getUpdateUIName();
          assertNotNull(string0);
          assertEquals("MDI", string0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          IndentWriter indentWriter0 = new IndentWriter((PrintWriter) null);
          tabbedMDI0.generate(indentWriter0);
          assertEquals(false, tabbedMDI0.isVisible());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test14()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          MdiEntrySWT mdiEntrySWT0 = tabbedMDI0.getEntryFromSkinObject((PluginUISWTSkinObject) null);
          assertNull(mdiEntrySWT0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
