/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.neuronal;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.neuronal.NeuralNetworkLayer;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class NeuralNetworkLayerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      NeuralNetworkLayer neuralNetworkLayer0 = new NeuralNetworkLayer(1);
      neuralNetworkLayer0.setMomentum(true, (double) 1);
      assertEquals(1.0, neuralNetworkLayer0.momentumFactor, 0.01D);
      assertEquals(true, neuralNetworkLayer0.useMomentum);
  }

  @Test
  public void test1()  throws Throwable  {
      NeuralNetworkLayer neuralNetworkLayer0 = new NeuralNetworkLayer((-1941));
      neuralNetworkLayer0.setLearningRate(1854.769730900511);
      assertEquals(1854.769730900511, neuralNetworkLayer0.learningRate, 0.01D);
      assertEquals(0.9, neuralNetworkLayer0.momentumFactor, 0.01D);
  }

  @Test
  public void test2()  throws Throwable  {
      NeuralNetworkLayer neuralNetworkLayer0 = new NeuralNetworkLayer((-1941));
      neuralNetworkLayer0.calculateNeuronValues();
      assertEquals((-1941), neuralNetworkLayer0.numberOfNodes);
      assertEquals(false, neuralNetworkLayer0.useMomentum);
      assertEquals(0.9, neuralNetworkLayer0.momentumFactor, 0.01D);
      assertEquals(false, neuralNetworkLayer0.linearOutput);
  }

  @Test
  public void test3()  throws Throwable  {
      NeuralNetworkLayer neuralNetworkLayer0 = new NeuralNetworkLayer((-576));
      neuralNetworkLayer0.calculateErrors();
      assertEquals(0.9, neuralNetworkLayer0.momentumFactor, 0.01D);
      assertEquals(false, neuralNetworkLayer0.linearOutput);
      assertEquals(false, neuralNetworkLayer0.useMomentum);
      assertEquals((-576), neuralNetworkLayer0.numberOfNodes);
      assertEquals(-576, neuralNetworkLayer0.getNumberOfNodes());
  }

  @Test
  public void test4()  throws Throwable  {
      NeuralNetworkLayer neuralNetworkLayer0 = new NeuralNetworkLayer(1);
      // Undeclared exception!
      try {
        neuralNetworkLayer0.calculateErrors();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      NeuralNetworkLayer neuralNetworkLayer0 = new NeuralNetworkLayer((-1941));
      neuralNetworkLayer0.adjustWeights();
      assertEquals(0.9, neuralNetworkLayer0.momentumFactor, 0.01D);
      assertEquals(false, neuralNetworkLayer0.useMomentum);
      assertEquals((-1941), neuralNetworkLayer0.numberOfNodes);
      assertEquals(false, neuralNetworkLayer0.linearOutput);
  }

  @Test
  public void test6()  throws Throwable  {
      NeuralNetworkLayer neuralNetworkLayer0 = new NeuralNetworkLayer((-1941));
      String string0 = neuralNetworkLayer0.toString();
      assertEquals(0.9, neuralNetworkLayer0.momentumFactor, 0.01D);
      assertEquals(false, neuralNetworkLayer0.linearOutput);
      assertNotNull(string0);
      assertEquals(false, neuralNetworkLayer0.useMomentum);
      assertEquals((-1941), neuralNetworkLayer0.numberOfNodes);
  }
}
