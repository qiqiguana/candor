/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.security.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.security.CryptoManagerException;
import com.aelitis.azureus.core.security.impl.CryptoHandlerECC;
import com.aelitis.azureus.core.security.impl.CryptoManagerImpl;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.SecureRandom;
import java.security.spec.AlgorithmParameterSpec;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.spec.SecretKeySpec;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class CryptoHandlerECCEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC((CryptoManagerImpl) null, 15);
          assertNotNull(cryptoHandlerECC0);
          
          CryptoHandlerECC.InternalECIES cryptoHandlerECC_InternalECIES0 = cryptoHandlerECC0.new InternalECIES();
          byte[] byteArray0 = new byte[3];
          // Undeclared exception!
          try {
            cryptoHandlerECC_InternalECIES0.internalEngineDoFinal(byteArray0, (int) (byte) (-22), (int) (byte)0);
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC((CryptoManagerImpl) null, 1905);
          assertNotNull(cryptoHandlerECC0);
          
          CryptoHandlerECC.InternalECIES cryptoHandlerECC_InternalECIES0 = cryptoHandlerECC0.new InternalECIES();
          byte[] byteArray0 = new byte[5];
          SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "*1O3[bv-m4S*");
          SecureRandom secureRandom0 = new SecureRandom(byteArray0);
          try {
            cryptoHandlerECC_InternalECIES0.internalEngineInit(1905, (Key) secretKeySpec0, (AlgorithmParameterSpec) null, secureRandom0);
            fail("Expecting exception: InvalidKeyException");
          } catch(InvalidKeyException e) {
            /*
             * must be passed IE key
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC((CryptoManagerImpl) null, 1105);
          assertNotNull(cryptoHandlerECC0);
          
          // Undeclared exception!
          try {
            cryptoHandlerECC0.exportKeys();
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC((CryptoManagerImpl) null, (-456));
          assertNotNull(cryptoHandlerECC0);
          
          byte[] byteArray0 = new byte[6];
          boolean boolean0 = cryptoHandlerECC0.verifyPublicKey(byteArray0);
          assertEquals(1, cryptoHandlerECC0.getCurrentPasswordType());
          assertEquals(false, boolean0);
          assertEquals(1, cryptoHandlerECC0.getDefaultPasswordHandlerType());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC((CryptoManagerImpl) null, (-37));
          assertNotNull(cryptoHandlerECC0);
          
          byte[] byteArray0 = new byte[3];
          try {
            cryptoHandlerECC0.encrypt(byteArray0, byteArray0, (String) null);
            fail("Expecting exception: CryptoManagerException");
          } catch(CryptoManagerException e) {
            /*
             * Encrypt failed
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC((CryptoManagerImpl) null, (-598));
          assertNotNull(cryptoHandlerECC0);
          
          byte[] byteArray0 = new byte[5];
          try {
            cryptoHandlerECC0.decrypt(byteArray0, byteArray0, "");
            fail("Expecting exception: CryptoManagerException");
          } catch(CryptoManagerException e) {
            /*
             * Decrypt failed
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC((CryptoManagerImpl) null, 1009);
          assertNotNull(cryptoHandlerECC0);
          
          // Undeclared exception!
          try {
            cryptoHandlerECC0.getPublicKey("KeyStore.PKCS12");
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC((CryptoManagerImpl) null, 1009);
          assertNotNull(cryptoHandlerECC0);
          
          int int0 = cryptoHandlerECC0.getType();
          assertEquals(1, int0);
          assertEquals(1, cryptoHandlerECC0.getDefaultPasswordHandlerType());
          assertEquals(1, cryptoHandlerECC0.getCurrentPasswordType());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test8()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC((CryptoManagerImpl) null, 2080);
          assertNotNull(cryptoHandlerECC0);
          
          cryptoHandlerECC0.peekPublicKey();
          assertEquals(1, cryptoHandlerECC0.getDefaultPasswordHandlerType());
          assertEquals(1, cryptoHandlerECC0.getCurrentPasswordType());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test9()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC((CryptoManagerImpl) null, (-17));
          assertNotNull(cryptoHandlerECC0);
          
          // Undeclared exception!
          try {
            cryptoHandlerECC0.checkKeysOK("");
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC((CryptoManagerImpl) null, (-1643));
          assertNotNull(cryptoHandlerECC0);
          
          int int0 = cryptoHandlerECC0.getUnlockTimeoutSeconds();
          assertEquals(3600, int0);
          assertEquals(1, cryptoHandlerECC0.getDefaultPasswordHandlerType());
          assertEquals(1, cryptoHandlerECC0.getCurrentPasswordType());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC((CryptoManagerImpl) null, (-1630));
          assertNotNull(cryptoHandlerECC0);
          
          // Undeclared exception!
          try {
            cryptoHandlerECC0.unlock();
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC((CryptoManagerImpl) null, (-8));
          assertNotNull(cryptoHandlerECC0);
          
          byte[] byteArray0 = new byte[1];
          // Undeclared exception!
          try {
            cryptoHandlerECC0.sign(byteArray0, "unsupported tag number");
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC((CryptoManagerImpl) null, (-456));
          assertEquals(3600, cryptoHandlerECC0.getUnlockTimeoutSeconds());
          assertNotNull(cryptoHandlerECC0);
          
          cryptoHandlerECC0.setUnlockTimeoutSeconds((-456));
          assertEquals(1, cryptoHandlerECC0.getDefaultPasswordHandlerType());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test14()  throws Throwable  {
      CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC((CryptoManagerImpl) null, 1);
      assertNotNull(cryptoHandlerECC0);
      
      try {
        cryptoHandlerECC0.getSTSEngine("bi~");
        fail("Expecting exception: CryptoManagerException");
      } catch(CryptoManagerException e) {
        /*
         * Failed to decode public key
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC((CryptoManagerImpl) null, 552);
          assertNotNull(cryptoHandlerECC0);
          
          byte[] byteArray0 = new byte[5];
          try {
            cryptoHandlerECC0.verify(byteArray0, byteArray0, byteArray0);
            fail("Expecting exception: CryptoManagerException");
          } catch(CryptoManagerException e) {
            /*
             * Failed to decode public key
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test16()  throws Throwable  {
      CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC((CryptoManagerImpl) null, 1);
      assertNotNull(cryptoHandlerECC0);
      
      // Undeclared exception!
      try {
        cryptoHandlerECC0.setDefaultPasswordHandlerType((-779));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test17()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC((CryptoManagerImpl) null, 1009);
          assertNotNull(cryptoHandlerECC0);
          
          boolean boolean0 = cryptoHandlerECC0.isUnlocked();
          assertEquals(1, cryptoHandlerECC0.getDefaultPasswordHandlerType());
          assertEquals(false, boolean0);
          assertEquals(1, cryptoHandlerECC0.getCurrentPasswordType());
          assertEquals(3600, cryptoHandlerECC0.getUnlockTimeoutSeconds());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test18()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC((CryptoManagerImpl) null, (-239));
          assertNotNull(cryptoHandlerECC0);
          
          cryptoHandlerECC0.lock();
          assertEquals(1, cryptoHandlerECC0.getDefaultPasswordHandlerType());
          assertEquals(1, cryptoHandlerECC0.getCurrentPasswordType());
          assertEquals(3600, cryptoHandlerECC0.getUnlockTimeoutSeconds());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test19()  throws Throwable  {
      CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC((CryptoManagerImpl) null, (-1));
      assertNotNull(cryptoHandlerECC0);
      
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try {
        cryptoHandlerECC0.recoverKeys(byteArray0, byteArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test20()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC((CryptoManagerImpl) null, 2080);
          assertNotNull(cryptoHandlerECC0);
          
          // Undeclared exception!
          try {
            cryptoHandlerECC0.resetKeys("RIPEMD12!WiIhRSA{ncryption");
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test21()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC((CryptoManagerImpl) null, (-456));
          assertNotNull(cryptoHandlerECC0);
          assertEquals(1, cryptoHandlerECC0.getDefaultPasswordHandlerType());
          
          // Undeclared exception!
          try {
            cryptoHandlerECC0.setDefaultPasswordHandlerType((-456));
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test22()  throws Throwable  {
      CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC((CryptoManagerImpl) null, 1);
      assertNotNull(cryptoHandlerECC0);
      
      cryptoHandlerECC0.setDefaultPasswordHandlerType(1);
      assertEquals(3600, cryptoHandlerECC0.getUnlockTimeoutSeconds());
      assertEquals(1, cryptoHandlerECC0.getDefaultPasswordHandlerType());
      assertEquals(1, cryptoHandlerECC0.getCurrentPasswordType());
  }

  @Test
  public void test23()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          CryptoHandlerECC cryptoHandlerECC0 = new CryptoHandlerECC((CryptoManagerImpl) null, 1819);
          assertNotNull(cryptoHandlerECC0);
          
          // Undeclared exception!
          try {
            cryptoHandlerECC0.createAndStoreKeys((CryptoManagerImpl.passwordDetails) null);
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
