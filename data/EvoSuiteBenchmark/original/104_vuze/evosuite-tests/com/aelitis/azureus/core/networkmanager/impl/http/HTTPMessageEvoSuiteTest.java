/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.networkmanager.impl.http;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.networkmanager.impl.RawMessageImpl;
import com.aelitis.azureus.core.networkmanager.impl.http.HTTPMessage;
import com.aelitis.azureus.core.peermanager.messaging.Message;
import com.aelitis.azureus.core.peermanager.messaging.MessageException;
import org.gudy.azureus2.core3.util.DirectByteBuffer;
import org.gudy.azureus2.core3.util.DirectByteBufferPool;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class HTTPMessageEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      HTTPMessage hTTPMessage0 = new HTTPMessage(byteArray0);
      DirectByteBuffer[] directByteBufferArray0 = hTTPMessage0.getData();
      assertNotNull(directByteBufferArray0);
  }

  @Test
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      HTTPMessage hTTPMessage0 = new HTTPMessage(byteArray0);
      assertNotNull(hTTPMessage0);
      
      String string0 = hTTPMessage0.getID();
      assertEquals("HTTP_DATA", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      HTTPMessage hTTPMessage0 = new HTTPMessage(byteArray0);
      assertNotNull(hTTPMessage0);
      
      byte byte0 = hTTPMessage0.getVersion();
      assertEquals((byte)1, byte0);
  }

  @Test
  public void test3()  throws Throwable  {
      HTTPMessage hTTPMessage0 = new HTTPMessage("4bg");
      assertNotNull(hTTPMessage0);
      
      int int0 = hTTPMessage0.getFeatureSubID();
      assertEquals(0, int0);
  }

  @Test
  public void test4()  throws Throwable  {
      HTTPMessage hTTPMessage0 = new HTTPMessage("");
      String string0 = hTTPMessage0.getFeatureID();
      assertNull(string0);
  }

  @Test
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      HTTPMessage hTTPMessage0 = new HTTPMessage(byteArray0);
      assertNotNull(hTTPMessage0);
      
      RawMessageImpl rawMessageImpl0 = (RawMessageImpl)hTTPMessage0.encode((Message) null);
      assertEquals(2, rawMessageImpl0.getPriority());
      assertEquals(true, rawMessageImpl0.isNoDelay());
  }

  @Test
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      HTTPMessage hTTPMessage0 = new HTTPMessage(byteArray0);
      assertNotNull(hTTPMessage0);
      
      int int0 = hTTPMessage0.getType();
      assertEquals(1, int0);
  }

  @Test
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      HTTPMessage hTTPMessage0 = new HTTPMessage(byteArray0);
      assertNotNull(hTTPMessage0);
      
      String string0 = hTTPMessage0.getDescription();
      assertEquals("HTTP data", string0);
  }

  @Test
  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      HTTPMessage hTTPMessage0 = new HTTPMessage(byteArray0);
      DirectByteBuffer directByteBuffer0 = DirectByteBufferPool.getBuffer((byte)0, (byte)1);
      try {
        hTTPMessage0.deserialize(directByteBuffer0, (byte)93);
        fail("Expecting exception: MessageException");
      } catch(MessageException e) {
        /*
         * not supported
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      HTTPMessage hTTPMessage0 = new HTTPMessage(byteArray0);
      hTTPMessage0.destroy();
      assertEquals(0, hTTPMessage0.getFeatureSubID());
  }

  @Test
  public void test10()  throws Throwable  {
      HTTPMessage hTTPMessage0 = new HTTPMessage("4bg");
      byte[] byteArray0 = hTTPMessage0.getIDBytes();
      assertNotNull(byteArray0);
  }
}
