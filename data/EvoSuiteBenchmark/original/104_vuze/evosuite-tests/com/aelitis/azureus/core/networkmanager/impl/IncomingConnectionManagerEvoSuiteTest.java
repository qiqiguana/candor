/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.networkmanager.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.networkmanager.Transport;
import com.aelitis.azureus.core.networkmanager.impl.IncomingConnectionManager;
import com.aelitis.azureus.core.networkmanager.impl.TransportHelper;
import com.aelitis.azureus.core.networkmanager.impl.TransportHelperFilter;
import com.aelitis.azureus.core.networkmanager.impl.TransportHelperFilterSwitcher;
import com.aelitis.azureus.core.networkmanager.impl.TransportHelperFilterTransparent;
import com.aelitis.azureus.core.networkmanager.impl.tcp.TCPTransportHelper;
import com.aelitis.azureus.core.peermanager.messaging.bittorrent.BTMessageDecoder;
import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class IncomingConnectionManagerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      IncomingConnectionManager incomingConnectionManager0 = new IncomingConnectionManager();
      int int0 = incomingConnectionManager0.getMaxMinMatchBufferSize();
      assertEquals(0, incomingConnectionManager0.getMaxMatchBufferSize());
      assertEquals(0, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      IncomingConnectionManager incomingConnectionManager0 = new IncomingConnectionManager();
      int int0 = incomingConnectionManager0.getMaxMatchBufferSize();
      assertEquals(0, int0);
      assertEquals(0, incomingConnectionManager0.getMaxMinMatchBufferSize());
  }

  @Test
  public void test2()  throws Throwable  {
      IncomingConnectionManager incomingConnectionManager0 = new IncomingConnectionManager();
      TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent((TransportHelper) null, false);
      TransportHelperFilterSwitcher transportHelperFilterSwitcher0 = new TransportHelperFilterSwitcher((TransportHelperFilter) transportHelperFilterTransparent0, (TransportHelperFilter) transportHelperFilterTransparent0, 0, 0);
      // Undeclared exception!
      try {
        incomingConnectionManager0.addConnection(0, (TransportHelperFilter) transportHelperFilterSwitcher0, (Transport) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      IncomingConnectionManager incomingConnectionManager0 = IncomingConnectionManager.getSingleton();
      incomingConnectionManager0.addSharedSecrets((byte[][]) null);
      assertEquals(true, incomingConnectionManager0.isEmpty());
  }

  @Test
  public void test4()  throws Throwable  {
      IncomingConnectionManager incomingConnectionManager0 = new IncomingConnectionManager();
      IncomingConnectionManager.SelectorListener incomingConnectionManager_SelectorListener0 = incomingConnectionManager0.new SelectorListener((-1), (Transport) null);
      // Undeclared exception!
      try {
        incomingConnectionManager_SelectorListener0.selectSuccess((TransportHelper) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      IncomingConnectionManager incomingConnectionManager0 = new IncomingConnectionManager();
      BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder();
      ByteBuffer byteBuffer0 = bTMessageDecoder0.destroy();
      incomingConnectionManager0.checkForMatch((TransportHelper) null, 1949, byteBuffer0, false);
      assertEquals(0, incomingConnectionManager0.getMaxMatchBufferSize());
      assertEquals(0, incomingConnectionManager0.getMaxMinMatchBufferSize());
  }

  @Test
  public void test6()  throws Throwable  {
      IncomingConnectionManager incomingConnectionManager0 = new IncomingConnectionManager();
      byte[][] byteArray0 = new byte[14][6];
      incomingConnectionManager0.addSharedSecrets(byteArray0);
      assertEquals(0, incomingConnectionManager0.getMaxMatchBufferSize());
      assertEquals(0, incomingConnectionManager0.getMaxMinMatchBufferSize());
  }

  @Test
  public void test7()  throws Throwable  {
      IncomingConnectionManager incomingConnectionManager0 = IncomingConnectionManager.getSingleton();
      incomingConnectionManager0.removeSharedSecrets((byte[][]) null);
      assertEquals(0, incomingConnectionManager0.getMaxMatchBufferSize());
  }

  @Test
  public void test8()  throws Throwable  {
      IncomingConnectionManager incomingConnectionManager0 = new IncomingConnectionManager();
      byte[][] byteArray0 = new byte[14][6];
      incomingConnectionManager0.removeSharedSecrets(byteArray0);
      assertEquals(0, incomingConnectionManager0.getMaxMatchBufferSize());
      assertEquals(0, incomingConnectionManager0.getMaxMinMatchBufferSize());
  }

  @Test
  public void test9()  throws Throwable  {
      IncomingConnectionManager incomingConnectionManager0 = new IncomingConnectionManager();
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent((TransportHelper) tCPTransportHelper0, false);
      IncomingConnectionManager.IncomingConnection incomingConnectionManager_IncomingConnection0 = new IncomingConnectionManager.IncomingConnection((TransportHelperFilter) transportHelperFilterTransparent0, (int) (byte)53);
      assertNotNull(incomingConnectionManager_IncomingConnection0);
      
      incomingConnectionManager0.removeConnection(incomingConnectionManager_IncomingConnection0, false, (String) null);
      assertEquals(false, tCPTransportHelper0.isClosed());
      assertEquals(0, incomingConnectionManager0.getMaxMinMatchBufferSize());
      assertEquals(0, incomingConnectionManager0.getMaxMatchBufferSize());
  }

  @Test
  public void test10()  throws Throwable  {
      IncomingConnectionManager incomingConnectionManager0 = new IncomingConnectionManager();
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent((TransportHelper) tCPTransportHelper0, false);
      IncomingConnectionManager.IncomingConnection incomingConnectionManager_IncomingConnection0 = new IncomingConnectionManager.IncomingConnection((TransportHelperFilter) transportHelperFilterTransparent0, 10);
      incomingConnectionManager0.removeConnection(incomingConnectionManager_IncomingConnection0, true, "");
      assertEquals(true, tCPTransportHelper0.isClosed());
  }

  @Test
  public void test11()  throws Throwable  {
      IncomingConnectionManager incomingConnectionManager0 = new IncomingConnectionManager();
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent((TransportHelper) tCPTransportHelper0, false);
      IncomingConnectionManager.IncomingConnection incomingConnectionManager_IncomingConnection0 = new IncomingConnectionManager.IncomingConnection((TransportHelperFilter) transportHelperFilterTransparent0, (int) (byte)53);
      incomingConnectionManager0.removeConnection(incomingConnectionManager_IncomingConnection0, true, (String) null);
      assertEquals(true, tCPTransportHelper0.isClosed());
  }

  @Test
  public void test12()  throws Throwable  {
      IncomingConnectionManager incomingConnectionManager0 = new IncomingConnectionManager();
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent((TransportHelper) tCPTransportHelper0, false);
      IncomingConnectionManager.IncomingConnection incomingConnectionManager_IncomingConnection0 = new IncomingConnectionManager.IncomingConnection((TransportHelperFilter) transportHelperFilterTransparent0, (int) (byte)0);
      incomingConnectionManager0.removeConnection(incomingConnectionManager_IncomingConnection0, true, "'@uiEeH{");
      assertEquals(true, tCPTransportHelper0.isClosed());
  }

  @Test
  public void test13()  throws Throwable  {
      IncomingConnectionManager incomingConnectionManager0 = new IncomingConnectionManager();
      incomingConnectionManager0.doTimeoutChecks();
      assertEquals(0, incomingConnectionManager0.getMaxMinMatchBufferSize());
      assertEquals(0, incomingConnectionManager0.getMaxMatchBufferSize());
  }

  @Test
  public void test14()  throws Throwable  {
      IncomingConnectionManager incomingConnectionManager0 = new IncomingConnectionManager();
      IncomingConnectionManager.SelectorListener incomingConnectionManager_SelectorListener0 = incomingConnectionManager0.new SelectorListener(0, (Transport) null);
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      // Undeclared exception!
      try {
        incomingConnectionManager_SelectorListener0.selectFailure((TransportHelper) tCPTransportHelper0, (Object) null, (Throwable) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
