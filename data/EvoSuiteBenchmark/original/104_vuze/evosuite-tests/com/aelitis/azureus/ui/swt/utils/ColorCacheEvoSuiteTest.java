/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.ui.swt.utils;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.ui.swt.utils.ColorCache;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.eclipse.swt.custom.CTabFolder;
import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.graphics.Device;
import org.eclipse.swt.graphics.RGB;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ColorCacheEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      Color color0 = ColorCache.getColor((Device) null, "#F");
      assertNull(color0);
  }

  @Test
  public void test1()  throws Throwable  {
      ColorCache colorCache0 = new ColorCache();
      assertNotNull(colorCache0);
  }

  @Test
  public void test2()  throws Throwable  {
      Color color0 = ColorCache.getSchemedColor((Device) null, "#F");
      assertNull(color0);
  }

  @Test
  public void test3()  throws Throwable  {
      RGB rGB0 = CTabFolder.borderMiddleRGB;
      Color color0 = ColorCache.getColor((Device) null, rGB0);
      assertNull(color0);
  }

  @Test
  public void test4()  throws Throwable  {
      Color color0 = ColorCache.getSchemedColor((Device) null, (-531), (-531), (-531));
      assertNull(color0);
  }

  @Test
  public void test5()  throws Throwable  {
      Color color0 = ColorCache.getSchemedColor((Device) null, 792, 0, 1);
      assertNull(color0);
  }

  @Test
  public void test6()  throws Throwable  {
      Color color0 = ColorCache.getSchemedColor((Device) null, 1161, 262, 262);
      assertNull(color0);
  }

  @Test
  public void test7()  throws Throwable  {
      Color color0 = ColorCache.getSchemedColor((Device) null, (String) null);
      assertNull(color0);
  }

  @Test
  public void test8()  throws Throwable  {
      Color color0 = ColorCache.getColor((Device) null, "");
      assertNull(color0);
  }

  @Test
  public void test9()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          Color color0 = ColorCache.getColor((Device) null, "BLUE.FADED.L_7D=SD7/_V");
          assertNull(color0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          Color color0 = ColorCache.getColor((Device) null, "SI)!Vg2`,\"X!#WN=\"");
          assertNull(color0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test11()  throws Throwable  {
      Color color0 = ColorCache.getColor((Device) null, "COLOR_LIST_SELECTION");
      assertNull(color0);
  }

  @Test
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          Color color0 = ColorCache.getSchemedColor((Device) null, "BLUE.QG");
          assertNull(color0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test13()  throws Throwable  {
      Color color0 = ColorCache.getSchemedColor((Device) null, "attr");
      assertNull(color0);
  }

  @Test
  public void test14()  throws Throwable  {
      Color color0 = ColorCache.getSchemedColor((Device) null, "ALTROW");
      assertNull(color0);
  }

  @Test
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[2];
      Color color0 = ColorCache.getColor((Device) null, intArray0);
      assertNull(color0);
  }

  @Test
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[27];
      Color color0 = ColorCache.getColor((Device) null, intArray0);
      assertNull(color0);
  }

  @Test
  public void test17()  throws Throwable  {
      Color color0 = ColorCache.getRandomColor();
      assertNull(color0);
  }

  @Test
  public void test18()  throws Throwable  {
      float[] floatArray0 = new float[13];
      floatArray0[0] = (-1042.0674F);
      Color color0 = ColorCache.getColor((Device) null, floatArray0);
      assertNull(color0);
  }

  @Test
  public void test19()  throws Throwable  {
      float[] floatArray0 = new float[13];
      floatArray0[0] = 1253.1709F;
      Color color0 = ColorCache.getColor((Device) null, floatArray0);
      assertNull(color0);
  }

  @Test
  public void test20()  throws Throwable  {
      float[] floatArray0 = new float[13];
      floatArray0[1] = (-267.0394F);
      Color color0 = ColorCache.getColor((Device) null, floatArray0);
      assertNull(color0);
  }

  @Test
  public void test21()  throws Throwable  {
      float[] floatArray0 = new float[13];
      floatArray0[1] = 1253.1709F;
      Color color0 = ColorCache.getColor((Device) null, floatArray0);
      assertNull(color0);
  }

  @Test
  public void test22()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[2] = (-1049.3845F);
      Color color0 = ColorCache.getColor((Device) null, floatArray0);
      assertNull(color0);
  }

  @Test
  public void test23()  throws Throwable  {
      float[] floatArray0 = new float[13];
      floatArray0[2] = 1253.1709F;
      Color color0 = ColorCache.getColor((Device) null, floatArray0);
      assertNull(color0);
  }
}
