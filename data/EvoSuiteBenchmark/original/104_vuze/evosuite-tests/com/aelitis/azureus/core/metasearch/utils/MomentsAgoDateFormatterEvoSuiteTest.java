/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.metasearch.utils;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.metasearch.utils.MomentsAgoDateFormatter;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.GregorianCalendar;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MomentsAgoDateFormatterEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      MomentsAgoDateFormatter momentsAgoDateFormatter0 = new MomentsAgoDateFormatter();
      assertNotNull(momentsAgoDateFormatter0);
  }

  @Test
  public void test1()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar();
      Date date0 = gregorianCalendar0.getGregorianChange();
      SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat();
      String string0 = MomentsAgoDateFormatter.getMomentsAgoString(date0, (DateFormat) simpleDateFormat0);
      assertEquals("java.util.GregorianCalendar[time=1372801113517,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GB\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=GB,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=183,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=38,SECOND=33,MILLISECOND=517,ZONE_OFFSET=0,DST_OFFSET=3600000]", gregorianCalendar0.toString());
      assertEquals("431 yr on 10/15/82 12:00 AM", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar();
      Date date0 = gregorianCalendar0.getTime();
      SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat();
      String string0 = MomentsAgoDateFormatter.getMomentsAgoString(date0, (DateFormat) simpleDateFormat0);
      assertEquals(1372801122070L, date0.getTime());
      assertEquals("< 1 h on 7/2/13 9:38 PM", string0);
  }
}
