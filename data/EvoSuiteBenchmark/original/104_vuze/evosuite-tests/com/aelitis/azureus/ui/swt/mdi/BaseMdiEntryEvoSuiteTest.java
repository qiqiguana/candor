/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.ui.swt.mdi;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.ui.common.viewtitleinfo.ViewTitleInfo;
import com.aelitis.azureus.ui.mdi.MdiChildCloseListener;
import com.aelitis.azureus.ui.mdi.MdiCloseListener;
import com.aelitis.azureus.ui.mdi.MdiEntry;
import com.aelitis.azureus.ui.mdi.MdiEntryDropListener;
import com.aelitis.azureus.ui.mdi.MdiEntryLogIdListener;
import com.aelitis.azureus.ui.mdi.MdiEntryOpenListener;
import com.aelitis.azureus.ui.skin.SkinProperties;
import com.aelitis.azureus.ui.swt.mdi.TabbedEntry;
import com.aelitis.azureus.ui.swt.mdi.TabbedMDI;
import com.aelitis.azureus.ui.swt.skin.SWTSkin;
import com.aelitis.azureus.ui.swt.skin.SWTSkinObject;
import com.aelitis.azureus.ui.swt.views.ViewTitleInfoBetaP;
import com.aelitis.azureus.ui.swt.views.skin.Browse;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.eclipse.swt.graphics.Image;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.gudy.azureus2.plugins.ui.toolbar.UIToolBarEnablerBase;
import org.gudy.azureus2.ui.swt.plugins.UISWTViewEventListener;
import org.gudy.azureus2.ui.swt.pluginsimpl.UISWTViewCore;
import org.gudy.azureus2.ui.swt.pluginsimpl.UISWTViewImpl;
import org.gudy.azureus2.ui.swt.views.LoggerView;
import org.gudy.azureus2.ui.swt.views.MySharesView;
import org.gudy.azureus2.ui.swt.views.ScrapeInfoView;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BaseMdiEntryEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, ">0T,6");
          assertEquals(true, tabbedEntry0.isPullTitleFromView());
          assertNotNull(tabbedEntry0);
          
          tabbedEntry0.setPullTitleFromView(false);
          assertEquals(false, tabbedEntry0.isPullTitleFromView());
          assertEquals(">0T,6", tabbedEntry0.getLogID());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "nr");
          assertNotNull(tabbedEntry0);
          assertEquals(false, tabbedEntry0.isCollapseDisabled());
          
          tabbedEntry0.setCollapseDisabled(true);
          boolean boolean0 = tabbedEntry0.isExpanded();
          assertEquals(true, tabbedEntry0.isCollapseDisabled());
          assertEquals(true, boolean0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "ok #fLHZ8S");
          assertNotNull(tabbedEntry0);
          
          String string0 = tabbedEntry0.getLogID();
          assertEquals(false, tabbedEntry0.isCollapseDisabled());
          assertEquals(false, tabbedEntry0.isAdded());
          assertNotNull(string0);
          assertEquals(false, tabbedEntry0.isDisposed());
          assertEquals("ok #fLHZ8S", string0);
          assertEquals(true, tabbedEntry0.isPullTitleFromView());
          assertEquals(false, tabbedEntry0.isExpanded());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
      TabbedEntry tabbedEntry0 = new TabbedEntry((TabbedMDI) null, (SWTSkin) null, "{!+G8$PP}Ha*<!");
      assertNotNull(tabbedEntry0);
      
      tabbedEntry0.getViewClass();
      assertEquals(false, tabbedEntry0.isExpanded());
      assertEquals(false, tabbedEntry0.isDisposed());
      assertEquals(true, tabbedEntry0.isPullTitleFromView());
      assertEquals(false, tabbedEntry0.isAdded());
      assertEquals("{!+G8$PP}Ha*<!", tabbedEntry0.getLogID());
      assertEquals(false, tabbedEntry0.isCollapseDisabled());
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          MySharesView mySharesView0 = new MySharesView();
          // Undeclared exception!
          try {
            tabbedMDI0.createEntryFromSkinRef("upp]<Iy/yY<4T3", "upp]<Iy/yY<4T3", "upp]<Iy/yY<4T3", "upp]<Iy/yY<4T3", (ViewTitleInfo) mySharesView0, (Object) null, true, "upp]<Iy/yY<4T3");
            fail("Expecting exception: NoClassDefFoundError");
          } catch(NoClassDefFoundError e) {
            /*
             * Could not initialize class org.gudy.azureus2.ui.swt.Utils
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "|;jKUKN%");
          assertNotNull(tabbedEntry0);
          
          MySharesView mySharesView0 = new MySharesView();
          tabbedEntry0.removeToolbarEnabler((UIToolBarEnablerBase) mySharesView0);
          assertEquals(false, tabbedEntry0.isAdded());
          assertEquals(false, tabbedEntry0.isCollapseDisabled());
          assertEquals(true, tabbedEntry0.isPullTitleFromView());
          assertEquals(false, tabbedEntry0.isDisposed());
          assertEquals(false, tabbedEntry0.isExpanded());
          assertEquals("|;jKUKN%", tabbedEntry0.getLogID());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test6()  throws Throwable  {
      TabbedEntry tabbedEntry0 = new TabbedEntry((TabbedMDI) null, (SWTSkin) null, "{!+G8$PP}Ha*<!");
      assertNotNull(tabbedEntry0);
      
      tabbedEntry0.getMDI();
      assertEquals("{!+G8$PP}Ha*<!", tabbedEntry0.getLogID());
      assertEquals(false, tabbedEntry0.isDisposed());
      assertEquals(true, tabbedEntry0.isPullTitleFromView());
      assertEquals(false, tabbedEntry0.isCollapseDisabled());
      assertEquals(false, tabbedEntry0.isExpanded());
      assertEquals(false, tabbedEntry0.isAdded());
  }

  @Test
  public void test7()  throws Throwable  {
      TabbedEntry tabbedEntry0 = new TabbedEntry((TabbedMDI) null, (SWTSkin) null, " ?+}6%U(*GG");
      assertNotNull(tabbedEntry0);
      
      tabbedEntry0.getSkinObject();
      assertEquals(true, tabbedEntry0.isPullTitleFromView());
      assertEquals(false, tabbedEntry0.isExpanded());
      assertEquals(" ?+}6%U(*GG", tabbedEntry0.getLogID());
      assertEquals(false, tabbedEntry0.isCollapseDisabled());
      assertEquals(false, tabbedEntry0.isDisposed());
      assertEquals(false, tabbedEntry0.isAdded());
  }

  @Test
  public void test8()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "0o3-e,lX#XbxrMI");
          assertNotNull(tabbedEntry0);
          
          // Undeclared exception!
          try {
            tabbedEntry0.hide();
            fail("Expecting exception: NoClassDefFoundError");
          } catch(NoClassDefFoundError e) {
            /*
             * Could not initialize class org.gudy.azureus2.ui.swt.Utils
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test9()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "");
          assertNotNull(tabbedEntry0);
          
          tabbedEntry0.setPreferredAfterID("");
          assertEquals(true, tabbedEntry0.isPullTitleFromView());
          assertEquals(false, tabbedEntry0.isDisposed());
          assertEquals(false, tabbedEntry0.isExpanded());
          assertEquals(false, tabbedEntry0.isAdded());
          assertEquals("", tabbedEntry0.getLogID());
          assertEquals(false, tabbedEntry0.isCollapseDisabled());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test10()  throws Throwable  {
      TabbedEntry tabbedEntry0 = new TabbedEntry((TabbedMDI) null, (SWTSkin) null, "{!+G8$PP}Ha*<!");
      assertNotNull(tabbedEntry0);
      
      tabbedEntry0.setDatasource((Object) "Incoming UDP Port");
      ScrapeInfoView scrapeInfoView0 = new ScrapeInfoView();
      // Undeclared exception!
      try {
        tabbedEntry0.setEventListener((UISWTViewEventListener) scrapeInfoView0);
        fail("Expecting exception: NoClassDefFoundError");
      } catch(NoClassDefFoundError e) {
        /*
         * Could not initialize class org.gudy.azureus2.core3.internat.MessageText
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "nr");
          assertNotNull(tabbedEntry0);
          
          tabbedEntry0.getPreferredAfterID();
          assertEquals(false, tabbedEntry0.isCollapseDisabled());
          assertEquals(false, tabbedEntry0.isAdded());
          assertEquals("nr", tabbedEntry0.getLogID());
          assertEquals(true, tabbedEntry0.isPullTitleFromView());
          assertEquals(false, tabbedEntry0.isDisposed());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "");
          assertNotNull(tabbedEntry0);
          
          boolean boolean0 = tabbedEntry0.isCollapseDisabled();
          assertEquals(false, boolean0);
          assertEquals(false, tabbedEntry0.isAdded());
          assertEquals(false, tabbedEntry0.isExpanded());
          assertEquals(true, tabbedEntry0.isPullTitleFromView());
          assertEquals(false, tabbedEntry0.isDisposed());
          assertEquals("", tabbedEntry0.getLogID());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "{fgi;OJGRyvVk,3$BN");
          assertNotNull(tabbedEntry0);
          
          Class<?> class0 = SkinProperties.class;
          tabbedEntry0.setViewClass(class0);
          assertEquals("{fgi;OJGRyvVk,3$BN", tabbedEntry0.getLogID());
          assertEquals(false, tabbedEntry0.isCollapseDisabled());
          assertEquals(false, tabbedEntry0.isAdded());
          assertEquals(true, tabbedEntry0.isPullTitleFromView());
          assertEquals(false, tabbedEntry0.isDisposed());
          assertEquals(false, tabbedEntry0.isExpanded());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test14()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "AlgorithmParameterGenerator.DH");
          assertNotNull(tabbedEntry0);
          
          tabbedEntry0.getViewTitleInfo();
          assertEquals(true, tabbedEntry0.isPullTitleFromView());
          assertEquals("AlgorithmParameterGenerator.DH", tabbedEntry0.getLogID());
          assertEquals(false, tabbedEntry0.isDisposed());
          assertEquals(false, tabbedEntry0.isExpanded());
          assertEquals(false, tabbedEntry0.isCollapseDisabled());
          assertEquals(false, tabbedEntry0.isAdded());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test15()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "0o3-e,lX#XbxrMI");
          ViewTitleInfoBetaP viewTitleInfoBetaP0 = null;
          try {
            viewTitleInfoBetaP0 = new ViewTitleInfoBetaP();
            fail("Expecting exception: NoClassDefFoundError");
          } catch(NoClassDefFoundError e) {
            /*
             * Could not initialize class org.gudy.azureus2.core3.util.SimpleTimer
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test16()  throws Throwable  {
      TabbedEntry tabbedEntry0 = new TabbedEntry((TabbedMDI) null, (SWTSkin) null, "{!+G8$PP}Ha*<!");
      assertNotNull(tabbedEntry0);
      
      tabbedEntry0.setImageLeftID("5S");
      assertEquals(false, tabbedEntry0.isCollapseDisabled());
      assertEquals(false, tabbedEntry0.isDisposed());
      assertEquals(true, tabbedEntry0.isPullTitleFromView());
      assertEquals(false, tabbedEntry0.isAdded());
      assertEquals("{!+G8$PP}Ha*<!", tabbedEntry0.getLogID());
      assertEquals(false, tabbedEntry0.isExpanded());
  }

  @Test
  public void test17()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "|;jKUKN%");
          assertNotNull(tabbedEntry0);
          
          tabbedEntry0.getDatasource();
          assertEquals(false, tabbedEntry0.isAdded());
          assertEquals(false, tabbedEntry0.isDisposed());
          assertEquals(false, tabbedEntry0.isCollapseDisabled());
          assertEquals(true, tabbedEntry0.isPullTitleFromView());
          assertEquals(false, tabbedEntry0.isExpanded());
          assertEquals("|;jKUKN%", tabbedEntry0.getLogID());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test18()  throws Throwable  {
      TabbedEntry tabbedEntry0 = new TabbedEntry((TabbedMDI) null, (SWTSkin) null, "{!+G8$PP}Ha*<!");
      assertNotNull(tabbedEntry0);
      
      tabbedEntry0.setImageLeft((Image) null);
      assertEquals(false, tabbedEntry0.isExpanded());
      assertEquals(false, tabbedEntry0.isCollapseDisabled());
      assertEquals("{!+G8$PP}Ha*<!", tabbedEntry0.getLogID());
      assertEquals(true, tabbedEntry0.isPullTitleFromView());
      assertEquals(false, tabbedEntry0.isAdded());
      assertEquals(false, tabbedEntry0.isDisposed());
  }

  @Test
  public void test19()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "{@fHKY(r*(K@1");
          assertNotNull(tabbedEntry0);
          
          tabbedEntry0.getView();
          assertEquals(true, tabbedEntry0.isPullTitleFromView());
          assertEquals(false, tabbedEntry0.isDisposed());
          assertEquals(false, tabbedEntry0.isExpanded());
          assertEquals(false, tabbedEntry0.isCollapseDisabled());
          assertEquals(false, tabbedEntry0.isAdded());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test20()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "nr");
          assertNotNull(tabbedEntry0);
          
          tabbedEntry0.getSkinRef();
          assertEquals(false, tabbedEntry0.isAdded());
          assertEquals(false, tabbedEntry0.isCollapseDisabled());
          assertEquals(true, tabbedEntry0.isPullTitleFromView());
          assertEquals(false, tabbedEntry0.isDisposed());
          assertEquals("nr", tabbedEntry0.getLogID());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test21()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, (String) null);
          assertNotNull(tabbedEntry0);
          
          tabbedEntry0.getImageLeftID();
          assertEquals(false, tabbedEntry0.isAdded());
          assertEquals(true, tabbedEntry0.isPullTitleFromView());
          assertEquals(false, tabbedEntry0.isDisposed());
          assertEquals("null", tabbedEntry0.getLogID());
          assertEquals(false, tabbedEntry0.isCollapseDisabled());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test22()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "Zg_-tB''[h");
          assertEquals(false, tabbedEntry0.isDisposed());
          assertNotNull(tabbedEntry0);
          
          tabbedEntry0.setDisposed(true);
          assertEquals(true, tabbedEntry0.isDisposed());
          assertEquals(false, tabbedEntry0.isCollapseDisabled());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test23()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "nr");
          assertNotNull(tabbedEntry0);
          assertEquals(false, tabbedEntry0.isDisposed());
          
          // Undeclared exception!
          try {
            tabbedEntry0.close(true);
            fail("Expecting exception: NoClassDefFoundError");
          } catch(NoClassDefFoundError e) {
            /*
             * Could not initialize class org.gudy.azureus2.ui.swt.Utils
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test24()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, (String) null);
          assertEquals(false, tabbedEntry0.isDisposed());
          assertNotNull(tabbedEntry0);
          
          // Undeclared exception!
          try {
            tabbedEntry0.close(false);
            fail("Expecting exception: NoClassDefFoundError");
          } catch(NoClassDefFoundError e) {
            /*
             * Could not initialize class org.gudy.azureus2.ui.swt.Utils
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test25()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, (String) null);
          MySharesView mySharesView0 = new MySharesView();
          // Undeclared exception!
          try {
            tabbedEntry0.setEventListener((UISWTViewEventListener) mySharesView0);
            fail("Expecting exception: NoClassDefFoundError");
          } catch(NoClassDefFoundError e) {
            /*
             * Could not initialize class org.gudy.azureus2.core3.internat.MessageText
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test26()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "nr");
          assertNotNull(tabbedEntry0);
          assertEquals(false, tabbedEntry0.isAdded());
          
          tabbedEntry0.setDisposed(false);
          tabbedEntry0.setDatasource((Object) "PeerSources");
          assertEquals(true, tabbedEntry0.isAdded());
          assertEquals(false, tabbedEntry0.isCollapseDisabled());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test27()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "Signature.RIPEMD160ithRSAEncryption");
          assertNotNull(tabbedEntry0);
          
          tabbedEntry0.setParentID("Signature.RIPEMD160ithRSAEncryption");
          assertEquals(true, tabbedEntry0.isPullTitleFromView());
          assertEquals(false, tabbedEntry0.isDisposed());
          assertEquals(false, tabbedEntry0.isCollapseDisabled());
          assertEquals("Signature.RIPEMD160ithRSAEncryption", tabbedEntry0.getLogID());
          assertEquals(false, tabbedEntry0.isExpanded());
          assertEquals(false, tabbedEntry0.isAdded());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test28()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "{@fHKY(r*(K@1");
          assertNotNull(tabbedEntry0);
          
          tabbedEntry0.setParentID("=yf");
          assertEquals(true, tabbedEntry0.isPullTitleFromView());
          assertEquals("=yf", tabbedEntry0.getParentID());
          assertEquals(false, tabbedEntry0.isAdded());
          assertEquals(false, tabbedEntry0.isExpanded());
          assertEquals(false, tabbedEntry0.isCollapseDisabled());
          assertEquals(false, tabbedEntry0.isDisposed());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test29()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "Signature.RIPEMD160ithRSAEncryption");
          assertNotNull(tabbedEntry0);
          
          tabbedEntry0.removeListener((MdiCloseListener) null);
          assertEquals(false, tabbedEntry0.isAdded());
          assertEquals("Signature.RIPEMD160ithRSAEncryption", tabbedEntry0.getLogID());
          assertEquals(false, tabbedEntry0.isDisposed());
          assertEquals(false, tabbedEntry0.isExpanded());
          assertEquals(false, tabbedEntry0.isCollapseDisabled());
          assertEquals(true, tabbedEntry0.isPullTitleFromView());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test30()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "&uploaded=");
          assertNotNull(tabbedEntry0);
          
          tabbedEntry0.triggerCloseListeners(false);
          assertEquals(false, tabbedEntry0.isExpanded());
          assertEquals(true, tabbedEntry0.isPullTitleFromView());
          assertEquals(false, tabbedEntry0.isDisposed());
          assertEquals(false, tabbedEntry0.isCollapseDisabled());
          assertEquals("&uploaded=", tabbedEntry0.getLogID());
          assertEquals(false, tabbedEntry0.isAdded());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test31()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "{fgi;OJGRyvVk,3$BN");
          assertNotNull(tabbedEntry0);
          
          Browse browse0 = new Browse();
          tabbedEntry0.addListener((MdiCloseListener) browse0);
          tabbedEntry0.triggerCloseListeners(false);
          assertEquals(false, tabbedEntry0.isAdded());
          assertEquals(false, tabbedEntry0.isCollapseDisabled());
          assertEquals(false, tabbedEntry0.isDisposed());
          assertEquals(false, tabbedEntry0.isExpanded());
          assertEquals(true, tabbedEntry0.isPullTitleFromView());
          assertEquals("{fgi;OJGRyvVk,3$BN", tabbedEntry0.getLogID());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test32()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "Signature.RIPEMD160ithRSAEncryption");
          assertNotNull(tabbedEntry0);
          
          tabbedEntry0.addListener((MdiChildCloseListener) null);
          tabbedEntry0.addListener((MdiChildCloseListener) null);
          assertEquals(true, tabbedEntry0.isPullTitleFromView());
          assertEquals(false, tabbedEntry0.isExpanded());
          assertEquals(false, tabbedEntry0.isDisposed());
          assertEquals(false, tabbedEntry0.isAdded());
          assertEquals("Signature.RIPEMD160ithRSAEncryption", tabbedEntry0.getLogID());
          assertEquals(false, tabbedEntry0.isCollapseDisabled());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test33()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "0o3-e,lX#XbxrMI");
          assertNotNull(tabbedEntry0);
          
          tabbedEntry0.removeListener((MdiChildCloseListener) null);
          assertEquals(false, tabbedEntry0.isCollapseDisabled());
          assertEquals(false, tabbedEntry0.isExpanded());
          assertEquals(true, tabbedEntry0.isPullTitleFromView());
          assertEquals(false, tabbedEntry0.isDisposed());
          assertEquals("0o3-e,lX#XbxrMI", tabbedEntry0.getLogID());
          assertEquals(false, tabbedEntry0.isAdded());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test34()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "R6(]LYq");
          assertNotNull(tabbedEntry0);
          
          tabbedEntry0.addListener((MdiChildCloseListener) null);
          tabbedEntry0.removeListener((MdiChildCloseListener) null);
          assertEquals(false, tabbedEntry0.isAdded());
          assertEquals(false, tabbedEntry0.isCollapseDisabled());
          assertEquals(false, tabbedEntry0.isExpanded());
          assertEquals(false, tabbedEntry0.isDisposed());
          assertEquals(true, tabbedEntry0.isPullTitleFromView());
          assertEquals("R6(]LYq", tabbedEntry0.getLogID());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test35()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, (String) null);
          assertNotNull(tabbedEntry0);
          
          tabbedEntry0.triggerChildCloseListeners((MdiEntry) tabbedEntry0, false);
          assertEquals("null", tabbedEntry0.getLogID());
          assertEquals(false, tabbedEntry0.isDisposed());
          assertEquals(true, tabbedEntry0.isPullTitleFromView());
          assertEquals(false, tabbedEntry0.isAdded());
          assertEquals(false, tabbedEntry0.isCollapseDisabled());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test36()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "nr");
          assertNotNull(tabbedEntry0);
          
          tabbedEntry0.addListener((MdiEntryLogIdListener) null);
          assertEquals(false, tabbedEntry0.isDisposed());
          assertEquals(true, tabbedEntry0.isPullTitleFromView());
          assertEquals(false, tabbedEntry0.isAdded());
          assertEquals(false, tabbedEntry0.isCollapseDisabled());
          assertEquals("nr", tabbedEntry0.getLogID());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test37()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "ok #fLHZ8S");
          assertNotNull(tabbedEntry0);
          
          tabbedEntry0.removeListener((MdiEntryLogIdListener) null);
          assertEquals(false, tabbedEntry0.isAdded());
          assertEquals(false, tabbedEntry0.isDisposed());
          assertEquals(false, tabbedEntry0.isCollapseDisabled());
          assertEquals(false, tabbedEntry0.isExpanded());
          assertEquals(true, tabbedEntry0.isPullTitleFromView());
          assertEquals("ok #fLHZ8S", tabbedEntry0.getLogID());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test38()  throws Throwable  {
      TabbedEntry tabbedEntry0 = new TabbedEntry((TabbedMDI) null, (SWTSkin) null, "{!+G8$PP}Ha*<!");
      assertNotNull(tabbedEntry0);
      
      tabbedEntry0.setLogID("5S");
      assertEquals("5S", tabbedEntry0.getLogID());
      assertEquals(false, tabbedEntry0.isCollapseDisabled());
  }

  @Test
  public void test39()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "N");
          assertNotNull(tabbedEntry0);
          
          tabbedEntry0.addListener((MdiEntryOpenListener) null);
          assertEquals(true, tabbedEntry0.isPullTitleFromView());
          assertEquals(false, tabbedEntry0.isCollapseDisabled());
          assertEquals(false, tabbedEntry0.isExpanded());
          assertEquals("N", tabbedEntry0.getLogID());
          assertEquals(false, tabbedEntry0.isDisposed());
          assertEquals(false, tabbedEntry0.isAdded());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test40()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, (String) null);
          assertNotNull(tabbedEntry0);
          
          tabbedEntry0.removeListener((MdiEntryOpenListener) null);
          assertEquals("null", tabbedEntry0.getLogID());
          assertEquals(true, tabbedEntry0.isPullTitleFromView());
          assertEquals(false, tabbedEntry0.isDisposed());
          assertEquals(false, tabbedEntry0.isCollapseDisabled());
          assertEquals(false, tabbedEntry0.isAdded());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test41()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "&uploaded=");
          assertNotNull(tabbedEntry0);
          
          tabbedEntry0.triggerOpenListeners();
          assertEquals(true, tabbedEntry0.isPullTitleFromView());
          assertEquals(false, tabbedEntry0.isCollapseDisabled());
          assertEquals(false, tabbedEntry0.isAdded());
          assertEquals(false, tabbedEntry0.isExpanded());
          assertEquals(false, tabbedEntry0.isDisposed());
          assertEquals("&uploaded=", tabbedEntry0.getLogID());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test42()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "ok #fLHZ8S");
          assertNotNull(tabbedEntry0);
          
          tabbedEntry0.removeListener((MdiEntryDropListener) null);
          assertEquals(true, tabbedEntry0.isPullTitleFromView());
          assertEquals(false, tabbedEntry0.isDisposed());
          assertEquals(false, tabbedEntry0.isExpanded());
          assertEquals(false, tabbedEntry0.isCollapseDisabled());
          assertEquals("ok #fLHZ8S", tabbedEntry0.getLogID());
          assertEquals(false, tabbedEntry0.isAdded());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test43()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "{fgi;OJGRyvVk,3$BN");
          assertNotNull(tabbedEntry0);
          
          boolean boolean0 = tabbedEntry0.hasDropListeners();
          assertEquals(false, tabbedEntry0.isCollapseDisabled());
          assertEquals(false, boolean0);
          assertEquals(false, tabbedEntry0.isDisposed());
          assertEquals("{fgi;OJGRyvVk,3$BN", tabbedEntry0.getLogID());
          assertEquals(false, tabbedEntry0.isExpanded());
          assertEquals(true, tabbedEntry0.isPullTitleFromView());
          assertEquals(false, tabbedEntry0.isAdded());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test44()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, (String) null);
          MySharesView mySharesView0 = new MySharesView();
          // Undeclared exception!
          try {
            tabbedEntry0.setEventListener((UISWTViewEventListener) mySharesView0);
            fail("Expecting exception: NoClassDefFoundError");
          } catch(NoClassDefFoundError e) {
            /*
             * Could not initialize class org.gudy.azureus2.core3.internat.MessageText
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test45()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "&uploaded=");
          assertNotNull(tabbedEntry0);
          
          boolean boolean0 = tabbedEntry0.triggerDropListeners((Object) null);
          assertEquals(true, tabbedEntry0.isPullTitleFromView());
          assertEquals(false, boolean0);
          assertEquals(false, tabbedEntry0.isCollapseDisabled());
          assertEquals(false, tabbedEntry0.isAdded());
          assertEquals(false, tabbedEntry0.isExpanded());
          assertEquals(false, tabbedEntry0.isDisposed());
          assertEquals("&uploaded=", tabbedEntry0.getLogID());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test46()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "{fgi;OJGRyvVk,3$BN");
          assertNotNull(tabbedEntry0);
          
          tabbedEntry0.setLogID((String) null);
          assertEquals(false, tabbedEntry0.isAdded());
          assertEquals(false, tabbedEntry0.isDisposed());
          assertEquals("{fgi;OJGRyvVk,3$BN", tabbedEntry0.getLogID());
          assertEquals(true, tabbedEntry0.isPullTitleFromView());
          assertEquals(false, tabbedEntry0.isExpanded());
          assertEquals(false, tabbedEntry0.isCollapseDisabled());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test47()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "AlgorithmParameterGenerator.DH");
          assertNotNull(tabbedEntry0);
          assertEquals("AlgorithmParameterGenerator.DH", tabbedEntry0.getLogID());
          
          tabbedEntry0.setLogID("AlgorithmParameterGenerator.DH");
          assertEquals(false, tabbedEntry0.isDisposed());
          assertEquals(false, tabbedEntry0.isAdded());
          assertEquals(true, tabbedEntry0.isPullTitleFromView());
          assertEquals(false, tabbedEntry0.isExpanded());
          assertEquals(false, tabbedEntry0.isCollapseDisabled());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test48()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, (String) null);
          MySharesView mySharesView0 = new MySharesView();
          // Undeclared exception!
          try {
            tabbedEntry0.setEventListener((UISWTViewEventListener) mySharesView0);
            fail("Expecting exception: NoClassDefFoundError");
          } catch(NoClassDefFoundError e) {
            /*
             * Could not initialize class org.gudy.azureus2.core3.internat.MessageText
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test49()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "0o3-e,lX#XbxrMI");
          assertNotNull(tabbedEntry0);
          
          UIToolBarEnablerBase[] uIToolBarEnablerBaseArray0 = tabbedEntry0.getToolbarEnablers();
          assertEquals(false, tabbedEntry0.isDisposed());
          assertNotNull(uIToolBarEnablerBaseArray0);
          assertEquals(false, tabbedEntry0.isAdded());
          assertEquals(false, tabbedEntry0.isCollapseDisabled());
          assertEquals("0o3-e,lX#XbxrMI", tabbedEntry0.getLogID());
          assertEquals(true, tabbedEntry0.isPullTitleFromView());
          assertEquals(false, tabbedEntry0.isExpanded());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test50()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "f)W:>3]nG' 'dTqwE");
          assertNotNull(tabbedEntry0);
          
          tabbedEntry0.setCoreView((UISWTViewCore) null);
          assertEquals(false, tabbedEntry0.isExpanded());
          assertEquals(false, tabbedEntry0.isDisposed());
          assertEquals("f)W:>3]nG' 'dTqwE", tabbedEntry0.getLogID());
          assertEquals(false, tabbedEntry0.isAdded());
          assertEquals(false, tabbedEntry0.isCollapseDisabled());
          assertEquals(true, tabbedEntry0.isPullTitleFromView());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test51()  throws Throwable  {
      TabbedEntry tabbedEntry0 = new TabbedEntry((TabbedMDI) null, (SWTSkin) null, "{!+G8$PP}Ha*<!");
      ScrapeInfoView scrapeInfoView0 = new ScrapeInfoView();
      // Undeclared exception!
      try {
        tabbedEntry0.setEventListener((UISWTViewEventListener) scrapeInfoView0);
        fail("Expecting exception: NoClassDefFoundError");
      } catch(NoClassDefFoundError e) {
        /*
         * Could not initialize class org.gudy.azureus2.core3.internat.MessageText
         */
      }
  }

  @Test
  public void test52()  throws Throwable  {
      TabbedEntry tabbedEntry0 = new TabbedEntry((TabbedMDI) null, (SWTSkin) null, "{!+G8$PP}Ha*<!");
      assertNotNull(tabbedEntry0);
      
      tabbedEntry0.setSkinObject((SWTSkinObject) null, (SWTSkinObject) null);
      assertEquals(false, tabbedEntry0.isAdded());
      assertEquals(false, tabbedEntry0.isExpanded());
      assertEquals("{!+G8$PP}Ha*<!", tabbedEntry0.getLogID());
      assertEquals(true, tabbedEntry0.isPullTitleFromView());
      assertEquals(false, tabbedEntry0.isCollapseDisabled());
      assertEquals(false, tabbedEntry0.isDisposed());
  }

  @Test
  public void test53()  throws Throwable  {
      TabbedEntry tabbedEntry0 = new TabbedEntry((TabbedMDI) null, (SWTSkin) null, "{!+G8$PP}Ha*<!");
      assertNotNull(tabbedEntry0);
      
      tabbedEntry0.swt_hide();
      assertEquals(false, tabbedEntry0.isDisposed());
      assertEquals("{!+G8$PP}Ha*<!", tabbedEntry0.getLogID());
      assertEquals(false, tabbedEntry0.isAdded());
      assertEquals(true, tabbedEntry0.isPullTitleFromView());
      assertEquals(false, tabbedEntry0.isExpanded());
      assertEquals(false, tabbedEntry0.isCollapseDisabled());
  }

  @Test
  public void test54()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "nr");
          assertNotNull(tabbedEntry0);
          
          tabbedEntry0.getTitle();
          assertEquals(false, tabbedEntry0.isDisposed());
          assertEquals(true, tabbedEntry0.isPullTitleFromView());
          assertEquals(false, tabbedEntry0.isCollapseDisabled());
          assertEquals("nr", tabbedEntry0.getLogID());
          assertEquals(false, tabbedEntry0.isAdded());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test55()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "nr");
          assertNotNull(tabbedEntry0);
          
          tabbedEntry0.setTitle("}D;]_AZ'h+w/8.$N");
          String string0 = tabbedEntry0.getTitle();
          assertNotNull(string0);
          assertEquals(false, tabbedEntry0.isDisposed());
          assertEquals(false, tabbedEntry0.isAdded());
          assertEquals("nr", tabbedEntry0.getLogID());
          assertEquals(false, tabbedEntry0.isCollapseDisabled());
          assertEquals(true, tabbedEntry0.isPullTitleFromView());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test56()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          // Undeclared exception!
          try {
            tabbedMDI0.createEntryFromSkinRef((String) null, (String) null, (String) null, (String) null, (ViewTitleInfo) null, (Object) "BT_HAVE_ALL", true, "BT_HAVE_ALL");
            fail("Expecting exception: NoClassDefFoundError");
          } catch(NoClassDefFoundError e) {
            /*
             * Could not initialize class org.gudy.azureus2.ui.swt.Utils
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test57()  throws Throwable  {
      TabbedEntry tabbedEntry0 = new TabbedEntry((TabbedMDI) null, (SWTSkin) null, "{!+G8$PP}Ha*<!");
      assertNotNull(tabbedEntry0);
      
      tabbedEntry0.setTitle("{!+G8$PP}Ha*<!");
      assertEquals(true, tabbedEntry0.isPullTitleFromView());
      assertEquals(false, tabbedEntry0.isDisposed());
      assertEquals("{!+G8$PP}Ha*<!", tabbedEntry0.getLogID());
      assertEquals(false, tabbedEntry0.isCollapseDisabled());
      assertEquals(false, tabbedEntry0.isAdded());
      assertEquals(false, tabbedEntry0.isExpanded());
  }

  @Test
  public void test58()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "|;jKUKN%");
          // Undeclared exception!
          try {
            tabbedEntry0.setTitleID("Access parameter '");
            fail("Expecting exception: NoClassDefFoundError");
          } catch(NoClassDefFoundError e) {
            /*
             * Could not initialize class org.gudy.azureus2.core3.internat.MessageText
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test59()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "Signature.RIPEMD160ithRSAEncryption");
          assertNotNull(tabbedEntry0);
          
          tabbedEntry0.updateLanguage();
          assertEquals(false, tabbedEntry0.isCollapseDisabled());
          assertEquals(true, tabbedEntry0.isPullTitleFromView());
          assertEquals("Signature.RIPEMD160ithRSAEncryption", tabbedEntry0.getLogID());
          assertEquals(false, tabbedEntry0.isDisposed());
          assertEquals(false, tabbedEntry0.isExpanded());
          assertEquals(false, tabbedEntry0.isAdded());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test60()  throws Throwable  {
      TabbedEntry tabbedEntry0 = new TabbedEntry((TabbedMDI) null, (SWTSkin) null, "{!+G8$PP}Ha*<!");
      assertNotNull(tabbedEntry0);
      
      tabbedEntry0.setCloseable(false);
      assertEquals(false, tabbedEntry0.isAdded());
      assertEquals(true, tabbedEntry0.isPullTitleFromView());
      assertEquals(false, tabbedEntry0.isExpanded());
      assertEquals(false, tabbedEntry0.isCollapseDisabled());
      assertEquals("{!+G8$PP}Ha*<!", tabbedEntry0.getLogID());
      assertEquals(false, tabbedEntry0.isDisposed());
  }

  @Test
  public void test61()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          LoggerView loggerView0 = new LoggerView();
          // Undeclared exception!
          try {
            tabbedMDI0.createEntryFromEventListener("DESMAC", (UISWTViewEventListener) loggerView0, "DESMAC", true, (Object) null);
            fail("Expecting exception: NoClassDefFoundError");
          } catch(NoClassDefFoundError e) {
            /*
             * Could not initialize class org.gudy.azureus2.core3.internat.MessageText
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test62()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "&uploaded=");
          assertNotNull(tabbedEntry0);
          
          boolean boolean0 = tabbedEntry0.isExpanded();
          assertEquals(false, tabbedEntry0.isAdded());
          assertEquals(false, tabbedEntry0.isCollapseDisabled());
          assertEquals(true, tabbedEntry0.isPullTitleFromView());
          assertEquals(false, boolean0);
          assertEquals(false, tabbedEntry0.isDisposed());
          assertEquals("&uploaded=", tabbedEntry0.getLogID());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test63()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "ok #fLHZ8S");
          assertNotNull(tabbedEntry0);
          
          tabbedEntry0.setExpanded(false);
          assertEquals(false, tabbedEntry0.isExpanded());
          assertEquals(false, tabbedEntry0.isDisposed());
          assertEquals(false, tabbedEntry0.isCollapseDisabled());
          assertEquals(true, tabbedEntry0.isPullTitleFromView());
          assertEquals("ok #fLHZ8S", tabbedEntry0.getLogID());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test64()  throws Throwable  {
      TabbedEntry tabbedEntry0 = new TabbedEntry((TabbedMDI) null, (SWTSkin) null, "{!+G8$PP}Ha*<!");
      assertNotNull(tabbedEntry0);
      
      tabbedEntry0.getImageLeft("5S");
      assertEquals(false, tabbedEntry0.isCollapseDisabled());
      assertEquals(true, tabbedEntry0.isPullTitleFromView());
      assertEquals("{!+G8$PP}Ha*<!", tabbedEntry0.getLogID());
      assertEquals(false, tabbedEntry0.isExpanded());
      assertEquals(false, tabbedEntry0.isDisposed());
      assertEquals(false, tabbedEntry0.isAdded());
  }

  @Test
  public void test65()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, (String) null);
          assertNotNull(tabbedEntry0);
          
          tabbedEntry0.releaseImageLeft((String) null);
          assertEquals(false, tabbedEntry0.isExpanded());
          assertEquals("null", tabbedEntry0.getLogID());
          assertEquals(false, tabbedEntry0.isCollapseDisabled());
          assertEquals(false, tabbedEntry0.isAdded());
          assertEquals(true, tabbedEntry0.isPullTitleFromView());
          assertEquals(false, tabbedEntry0.isDisposed());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test66()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, (String) null);
          assertNotNull(tabbedEntry0);
          
          tabbedEntry0.viewTitleInfoRefresh((ViewTitleInfo) null);
          assertEquals(false, tabbedEntry0.isAdded());
          assertEquals(false, tabbedEntry0.isExpanded());
          assertEquals(false, tabbedEntry0.isCollapseDisabled());
          assertEquals("null", tabbedEntry0.getLogID());
          assertEquals(false, tabbedEntry0.isDisposed());
          assertEquals(true, tabbedEntry0.isPullTitleFromView());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test67()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "Zg_-tB''[h");
          assertNotNull(tabbedEntry0);
          
          MySharesView mySharesView0 = new MySharesView();
          tabbedEntry0.viewTitleInfoRefresh((ViewTitleInfo) mySharesView0);
          assertEquals(false, tabbedEntry0.isCollapseDisabled());
          assertEquals(true, tabbedEntry0.isPullTitleFromView());
          assertEquals(false, tabbedEntry0.isExpanded());
          assertEquals(false, tabbedEntry0.isAdded());
          assertEquals(false, tabbedEntry0.isDisposed());
          assertEquals("Zg", tabbedEntry0.getLogID());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
