/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.speedmanager.impl.v2;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.speedmanager.impl.v2.LimitControlDropUploadFirst;
import com.aelitis.azureus.core.speedmanager.impl.v2.SMUpdate;
import com.aelitis.azureus.core.speedmanager.impl.v2.SaturatedMode;
import com.aelitis.azureus.core.speedmanager.impl.v2.TransferMode;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class LimitControlDropUploadFirstEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LimitControlDropUploadFirst limitControlDropUploadFirst0 = new LimitControlDropUploadFirst();
      boolean boolean0 = limitControlDropUploadFirst0.isDownloadUnlimitedMode();
      assertEquals(0.6F, limitControlDropUploadFirst0.usedUpMaxDownloadMode, 0.01F);
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      LimitControlDropUploadFirst limitControlDropUploadFirst0 = new LimitControlDropUploadFirst();
      limitControlDropUploadFirst0.setDownloadUnlimitedMode(false);
      assertEquals(0.6F, limitControlDropUploadFirst0.usedUpMaxDownloadMode, 0.01F);
      assertEquals(false, limitControlDropUploadFirst0.isDownloadUnlimited);
  }

  @Test
  public void test2()  throws Throwable  {
      LimitControlDropUploadFirst limitControlDropUploadFirst0 = new LimitControlDropUploadFirst();
      limitControlDropUploadFirst0.updateLimits(61440, 20480, 20480, 30720);
      assertEquals(6144, limitControlDropUploadFirst0.upMin);
      assertEquals(61440, limitControlDropUploadFirst0.upMax);
  }

  @Test
  public void test3()  throws Throwable  {
      LimitControlDropUploadFirst limitControlDropUploadFirst0 = new LimitControlDropUploadFirst();
      limitControlDropUploadFirst0.updateSeedSettings(1.0F);
      assertEquals(false, limitControlDropUploadFirst0.isDownloadUnlimited);
      assertEquals(0.6F, limitControlDropUploadFirst0.usedUpMaxDownloadMode, 0.01F);
  }

  @Test
  public void test4()  throws Throwable  {
      LimitControlDropUploadFirst limitControlDropUploadFirst0 = new LimitControlDropUploadFirst();
      limitControlDropUploadFirst0.updateSeedSettings(0.6F);
      assertEquals(0.6F, limitControlDropUploadFirst0.usedUpMaxDownloadMode, 0.01F);
      assertEquals(false, limitControlDropUploadFirst0.isDownloadUnlimited);
  }

  @Test
  public void test5()  throws Throwable  {
      LimitControlDropUploadFirst limitControlDropUploadFirst0 = new LimitControlDropUploadFirst();
      limitControlDropUploadFirst0.updateSeedSettings((float) 0);
      assertEquals(false, limitControlDropUploadFirst0.isDownloadUnlimited);
      assertEquals(0.6F, limitControlDropUploadFirst0.usedUpMaxDownloadMode, 0.01F);
  }

  @Test
  public void test6()  throws Throwable  {
      LimitControlDropUploadFirst limitControlDropUploadFirst0 = new LimitControlDropUploadFirst();
      TransferMode transferMode0 = new TransferMode();
      limitControlDropUploadFirst0.updateStatus(0, (SaturatedMode) null, 0, (SaturatedMode) null, transferMode0);
      SMUpdate sMUpdate0 = limitControlDropUploadFirst0.adjust((-1318.9626F));
      assertNotNull(sMUpdate0);
      
      limitControlDropUploadFirst0.adjust((-1318.9626F));
      SMUpdate sMUpdate1 = limitControlDropUploadFirst0.adjust((float) 0);
      assertEquals(0, limitControlDropUploadFirst0.upCurr);
      assertEquals(0, sMUpdate1.newUploadLimit);
      assertEquals(0.6F, limitControlDropUploadFirst0.usedUpMaxDownloadMode, 0.01F);
      assertEquals(false, limitControlDropUploadFirst0.isDownloadUnlimited);
  }

  @Test
  public void test7()  throws Throwable  {
      LimitControlDropUploadFirst limitControlDropUploadFirst0 = new LimitControlDropUploadFirst();
      SaturatedMode saturatedMode0 = SaturatedMode.AT_LIMIT;
      TransferMode transferMode0 = new TransferMode();
      limitControlDropUploadFirst0.updateStatus(30720, saturatedMode0, 0, saturatedMode0, transferMode0);
      limitControlDropUploadFirst0.adjust((float) 20480);
      assertEquals(30720, limitControlDropUploadFirst0.upCurr);
  }

  @Test
  public void test8()  throws Throwable  {
      LimitControlDropUploadFirst limitControlDropUploadFirst0 = new LimitControlDropUploadFirst();
      limitControlDropUploadFirst0.upMax = (-2);
      TransferMode transferMode0 = new TransferMode();
      limitControlDropUploadFirst0.updateStatus(0, (SaturatedMode) null, 0, (SaturatedMode) null, transferMode0);
      SMUpdate sMUpdate0 = limitControlDropUploadFirst0.adjust(0.6F);
      assertNotNull(sMUpdate0);
      assertEquals((-1), sMUpdate0.newUploadLimit);
      assertEquals(false, limitControlDropUploadFirst0.isDownloadUnlimited);
  }

  @Test
  public void test9()  throws Throwable  {
      LimitControlDropUploadFirst limitControlDropUploadFirst0 = new LimitControlDropUploadFirst();
      TransferMode transferMode0 = new TransferMode();
      limitControlDropUploadFirst0.updateStatus(0, (SaturatedMode) null, 0, (SaturatedMode) null, transferMode0);
      limitControlDropUploadFirst0.setDownloadUnlimitedMode(true);
      limitControlDropUploadFirst0.adjust((float) 0);
      assertEquals(true, limitControlDropUploadFirst0.isDownloadUnlimited);
      assertEquals(0, limitControlDropUploadFirst0.upCurr);
  }

  @Test
  public void test10()  throws Throwable  {
      LimitControlDropUploadFirst limitControlDropUploadFirst0 = new LimitControlDropUploadFirst();
      SaturatedMode saturatedMode0 = SaturatedMode.AT_LIMIT;
      limitControlDropUploadFirst0.updateLimits(0, 20480, 61440, 30720);
      TransferMode transferMode0 = new TransferMode();
      limitControlDropUploadFirst0.updateStatus(30720, saturatedMode0, 0, saturatedMode0, transferMode0);
      limitControlDropUploadFirst0.adjust((float) 20480);
      assertEquals(30720, limitControlDropUploadFirst0.upCurr);
      assertEquals(20480, limitControlDropUploadFirst0.downMin);
  }
}
