/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.networkmanager.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.networkmanager.impl.TransportHelper;
import com.aelitis.azureus.core.networkmanager.impl.TransportHelperFilterStreamXOR;
import com.aelitis.azureus.core.networkmanager.impl.tcp.TCPTransportHelper;
import com.aelitis.azureus.core.peermanager.messaging.bittorrent.BTMessageDecoder;
import java.io.IOException;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import org.gudy.azureus2.core3.util.DirectByteBuffer;
import org.gudy.azureus2.core3.util.DirectByteBufferPool;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TransportHelperFilterStreamXOREvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      byte[] byteArray0 = new byte[10];
      TransportHelperFilterStreamXOR transportHelperFilterStreamXOR0 = new TransportHelperFilterStreamXOR((TransportHelper) tCPTransportHelper0, byteArray0);
      String string0 = transportHelperFilterStreamXOR0.getName(false);
      assertNotNull(string0);
      assertEquals("XOR-80", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      TransportHelperFilterStreamXOR transportHelperFilterStreamXOR0 = new TransportHelperFilterStreamXOR((TransportHelper) null, byteArray0);
      boolean boolean0 = transportHelperFilterStreamXOR0.isEncrypted();
      assertEquals(true, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      TransportHelperFilterStreamXOR transportHelperFilterStreamXOR0 = new TransportHelperFilterStreamXOR((TransportHelper) null, byteArray0);
      BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder();
      ByteBuffer byteBuffer0 = bTMessageDecoder0.destroy();
      transportHelperFilterStreamXOR0.cryptoOut(byteBuffer0, byteBuffer0);
      assertEquals(false, byteBuffer0.isReadOnly());
  }

  @Test
  public void test3()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      byte[] byteArray0 = new byte[3];
      TransportHelperFilterStreamXOR transportHelperFilterStreamXOR0 = new TransportHelperFilterStreamXOR((TransportHelper) tCPTransportHelper0, byteArray0);
      DirectByteBuffer directByteBuffer0 = DirectByteBufferPool.getBuffer((byte) (-1), 578);
      ByteBuffer byteBuffer0 = directByteBuffer0.getBuffer((byte) (-1));
      // Undeclared exception!
      try {
        transportHelperFilterStreamXOR0.cryptoOut(byteBuffer0, byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      } catch(BufferUnderflowException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      TransportHelperFilterStreamXOR transportHelperFilterStreamXOR0 = new TransportHelperFilterStreamXOR((TransportHelper) null, byteArray0);
      BTMessageDecoder bTMessageDecoder0 = new BTMessageDecoder();
      ByteBuffer byteBuffer0 = bTMessageDecoder0.destroy();
      transportHelperFilterStreamXOR0.cryptoIn(byteBuffer0, byteBuffer0);
      assertEquals(true, byteBuffer0.hasArray());
  }

  @Test
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      TransportHelperFilterStreamXOR transportHelperFilterStreamXOR0 = new TransportHelperFilterStreamXOR((TransportHelper) null, byteArray0);
      DirectByteBuffer directByteBuffer0 = DirectByteBufferPool.getBuffer((byte)94, 271);
      ByteBuffer byteBuffer0 = directByteBuffer0.getBuffer((byte)15);
      // Undeclared exception!
      try {
        transportHelperFilterStreamXOR0.cryptoIn(byteBuffer0, byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      } catch(BufferOverflowException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      byte[] byteArray0 = new byte[3];
      TransportHelperFilterStreamXOR transportHelperFilterStreamXOR0 = new TransportHelperFilterStreamXOR((TransportHelper) tCPTransportHelper0, byteArray0);
      String string0 = transportHelperFilterStreamXOR0.getName(true);
      assertEquals("XOR-24 (TCP)", string0);
      assertNotNull(string0);
  }
}
