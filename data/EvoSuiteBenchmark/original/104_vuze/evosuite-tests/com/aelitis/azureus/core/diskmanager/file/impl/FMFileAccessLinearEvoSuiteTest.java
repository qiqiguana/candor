/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.diskmanager.file.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.diskmanager.file.FMFileManagerException;
import com.aelitis.azureus.core.diskmanager.file.impl.FMFileAccessLinear;
import com.aelitis.azureus.core.diskmanager.file.impl.FMFileImpl;
import java.io.RandomAccessFile;
import org.gudy.azureus2.core3.util.DirectByteBuffer;
import org.gudy.azureus2.core3.util.DirectByteBufferPool;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class FMFileAccessLinearEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      FMFileAccessLinear fMFileAccessLinear0 = new FMFileAccessLinear((FMFileImpl) null);
      String string0 = fMFileAccessLinear0.getString();
      assertEquals("linear", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      FMFileAccessLinear fMFileAccessLinear0 = new FMFileAccessLinear((FMFileImpl) null);
      boolean boolean0 = fMFileAccessLinear0.isPieceCompleteProcessingNeeded(40);
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      FMFileAccessLinear fMFileAccessLinear0 = new FMFileAccessLinear((FMFileImpl) null);
      fMFileAccessLinear0.flush();
      assertEquals("linear", fMFileAccessLinear0.getString());
  }

  @Test
  public void test3()  throws Throwable  {
      FMFileAccessLinear fMFileAccessLinear0 = new FMFileAccessLinear((FMFileImpl) null);
      try {
        fMFileAccessLinear0.getLength((RandomAccessFile) null);
        fail("Expecting exception: FMFileManagerException");
      } catch(FMFileManagerException e) {
        /*
         * getLength fails
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      FMFileAccessLinear fMFileAccessLinear0 = new FMFileAccessLinear((FMFileImpl) null);
      fMFileAccessLinear0.aboutToOpen();
      assertEquals("linear", fMFileAccessLinear0.getString());
  }

  @Test
  public void test5()  throws Throwable  {
      FMFileAccessLinear fMFileAccessLinear0 = new FMFileAccessLinear((FMFileImpl) null);
      fMFileAccessLinear0.setPieceComplete((RandomAccessFile) null, 40, (DirectByteBuffer) null);
      assertEquals("linear", fMFileAccessLinear0.getString());
  }

  @Test
  public void test6()  throws Throwable  {
      FMFileAccessLinear fMFileAccessLinear0 = new FMFileAccessLinear((FMFileImpl) null);
      try {
        fMFileAccessLinear0.setLength((RandomAccessFile) null, (-18L));
        fail("Expecting exception: FMFileManagerException");
      } catch(FMFileManagerException e) {
        /*
         * setLength fails
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      FMFileAccessLinear fMFileAccessLinear0 = new FMFileAccessLinear((FMFileImpl) null);
      FMFileImpl fMFileImpl0 = fMFileAccessLinear0.getFile();
      assertNull(fMFileImpl0);
  }

  @Test
  public void test8()  throws Throwable  {
      FMFileAccessLinear fMFileAccessLinear0 = new FMFileAccessLinear((FMFileImpl) null);
      DirectByteBuffer directByteBuffer0 = DirectByteBufferPool.getBuffer((byte)11, (byte)11);
      try {
        fMFileAccessLinear0.read((RandomAccessFile) null, directByteBuffer0, (long) (byte)11);
        fail("Expecting exception: FMFileManagerException");
      } catch(FMFileManagerException e) {
        /*
         * read: raf is null
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      FMFileAccessLinear fMFileAccessLinear0 = new FMFileAccessLinear((FMFileImpl) null);
      DirectByteBuffer[] directByteBufferArray0 = new DirectByteBuffer[5];
      try {
        fMFileAccessLinear0.read((RandomAccessFile) null, directByteBufferArray0, (-1L));
        fail("Expecting exception: FMFileManagerException");
      } catch(FMFileManagerException e) {
        /*
         * read: raf is null
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      FMFileAccessLinear fMFileAccessLinear0 = new FMFileAccessLinear((FMFileImpl) null);
      DirectByteBuffer[] directByteBufferArray0 = new DirectByteBuffer[3];
      try {
        fMFileAccessLinear0.write((RandomAccessFile) null, directByteBufferArray0, (long) (byte)0);
        fail("Expecting exception: FMFileManagerException");
      } catch(FMFileManagerException e) {
        /*
         * write fails: raf is null
         */
      }
  }
}
