/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.networkmanager.impl.tcp;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.networkmanager.EventWaiter;
import com.aelitis.azureus.core.networkmanager.NetworkConnection;
import com.aelitis.azureus.core.networkmanager.ProtocolEndpoint;
import com.aelitis.azureus.core.networkmanager.impl.TransportCipher;
import com.aelitis.azureus.core.networkmanager.impl.TransportHelper;
import com.aelitis.azureus.core.networkmanager.impl.TransportHelperFilter;
import com.aelitis.azureus.core.networkmanager.impl.TransportHelperFilterStreamCipher;
import com.aelitis.azureus.core.networkmanager.impl.TransportHelperFilterTransparent;
import com.aelitis.azureus.core.networkmanager.impl.tcp.LightweightTCPTransport;
import com.aelitis.azureus.core.networkmanager.impl.tcp.TCPTransportHelper;
import com.aelitis.azureus.core.networkmanager.impl.tcp.TransportEndpointTCP;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class LightweightTCPTransportEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      TransportHelperFilterStreamCipher transportHelperFilterStreamCipher0 = new TransportHelperFilterStreamCipher((TransportHelper) tCPTransportHelper0, (TransportCipher) null, (TransportCipher) null);
      LightweightTCPTransport lightweightTCPTransport0 = new LightweightTCPTransport((ProtocolEndpoint) null, (TransportHelperFilter) transportHelperFilterStreamCipher0);
      // Undeclared exception!
      try {
        lightweightTCPTransport0.getTransportMode();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * not implemented
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent((TransportHelper) tCPTransportHelper0, false);
      LightweightTCPTransport lightweightTCPTransport0 = new LightweightTCPTransport((ProtocolEndpoint) null, (TransportHelperFilter) transportHelperFilterTransparent0);
      // Undeclared exception!
      try {
        lightweightTCPTransport0.connectedInbound();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * not implemented
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent((TransportHelper) tCPTransportHelper0, true);
      LightweightTCPTransport lightweightTCPTransport0 = new LightweightTCPTransport((ProtocolEndpoint) null, (TransportHelperFilter) transportHelperFilterTransparent0);
      lightweightTCPTransport0.close("Plain (TCP)");
      assertEquals(false, lightweightTCPTransport0.isEncrypted());
  }

  @Test
  public void test3()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent((TransportHelper) tCPTransportHelper0, true);
      LightweightTCPTransport lightweightTCPTransport0 = new LightweightTCPTransport((ProtocolEndpoint) null, (TransportHelperFilter) transportHelperFilterTransparent0);
      ByteBuffer[] byteBufferArray0 = new ByteBuffer[16];
      long long0 = lightweightTCPTransport0.write(byteBufferArray0, (-1867), 10000);
      assertEquals(0L, long0);
  }

  @Test
  public void test4()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent((TransportHelper) tCPTransportHelper0, true);
      LightweightTCPTransport lightweightTCPTransport0 = new LightweightTCPTransport((ProtocolEndpoint) null, (TransportHelperFilter) transportHelperFilterTransparent0);
      // Undeclared exception!
      try {
        lightweightTCPTransport0.getRemoteAddress();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent((TransportHelper) tCPTransportHelper0, true);
      LightweightTCPTransport lightweightTCPTransport0 = new LightweightTCPTransport((ProtocolEndpoint) null, (TransportHelperFilter) transportHelperFilterTransparent0);
      boolean boolean0 = lightweightTCPTransport0.isEncrypted();
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent((TransportHelper) tCPTransportHelper0, true);
      LightweightTCPTransport lightweightTCPTransport0 = new LightweightTCPTransport((ProtocolEndpoint) null, (TransportHelperFilter) transportHelperFilterTransparent0);
      lightweightTCPTransport0.setTrace(true);
      assertEquals("TCP", lightweightTCPTransport0.getProtocol());
  }

  @Test
  public void test7()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent((TransportHelper) tCPTransportHelper0, true);
      LightweightTCPTransport lightweightTCPTransport0 = new LightweightTCPTransport((ProtocolEndpoint) null, (TransportHelperFilter) transportHelperFilterTransparent0);
      lightweightTCPTransport0.unbindConnection((NetworkConnection) null);
      assertEquals("TCP", lightweightTCPTransport0.getProtocol());
  }

  @Test
  public void test8()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent((TransportHelper) tCPTransportHelper0, true);
      LightweightTCPTransport lightweightTCPTransport0 = new LightweightTCPTransport((ProtocolEndpoint) null, (TransportHelperFilter) transportHelperFilterTransparent0);
      assertNotNull(lightweightTCPTransport0);
      
      boolean boolean0 = lightweightTCPTransport0.isTCP();
      assertEquals(true, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent((TransportHelper) tCPTransportHelper0, true);
      LightweightTCPTransport lightweightTCPTransport0 = new LightweightTCPTransport((ProtocolEndpoint) null, (TransportHelperFilter) transportHelperFilterTransparent0);
      int int0 = lightweightTCPTransport0.getMssSize();
      assertEquals(0, int0);
  }

  @Test
  public void test10()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent((TransportHelper) tCPTransportHelper0, true);
      LightweightTCPTransport lightweightTCPTransport0 = new LightweightTCPTransport((ProtocolEndpoint) null, (TransportHelperFilter) transportHelperFilterTransparent0);
      lightweightTCPTransport0.bindConnection((NetworkConnection) null);
      assertEquals(0, lightweightTCPTransport0.getMssSize());
  }

  @Test
  public void test11()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      TransportHelperFilterStreamCipher transportHelperFilterStreamCipher0 = new TransportHelperFilterStreamCipher((TransportHelper) tCPTransportHelper0, (TransportCipher) null, (TransportCipher) null);
      LightweightTCPTransport lightweightTCPTransport0 = new LightweightTCPTransport((ProtocolEndpoint) null, (TransportHelperFilter) transportHelperFilterStreamCipher0);
      assertNotNull(lightweightTCPTransport0);
      
      String string0 = lightweightTCPTransport0.getProtocol();
      assertEquals("TCP", string0);
  }

  @Test
  public void test12()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent((TransportHelper) tCPTransportHelper0, true);
      LightweightTCPTransport lightweightTCPTransport0 = new LightweightTCPTransport((ProtocolEndpoint) null, (TransportHelperFilter) transportHelperFilterTransparent0);
      TransportEndpointTCP transportEndpointTCP0 = (TransportEndpointTCP)lightweightTCPTransport0.getTransportEndpoint();
      assertNotNull(transportEndpointTCP0);
  }

  @Test
  public void test13()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent((TransportHelper) tCPTransportHelper0, true);
      LightweightTCPTransport lightweightTCPTransport0 = new LightweightTCPTransport((ProtocolEndpoint) null, (TransportHelperFilter) transportHelperFilterTransparent0);
      // Undeclared exception!
      try {
        lightweightTCPTransport0.setReadyForRead();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * not implemented
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent((TransportHelper) tCPTransportHelper0, false);
      LightweightTCPTransport lightweightTCPTransport0 = new LightweightTCPTransport((ProtocolEndpoint) null, (TransportHelperFilter) transportHelperFilterTransparent0);
      // Undeclared exception!
      try {
        lightweightTCPTransport0.getDescription();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test15()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent((TransportHelper) tCPTransportHelper0, true);
      LightweightTCPTransport lightweightTCPTransport0 = new LightweightTCPTransport((ProtocolEndpoint) null, (TransportHelperFilter) transportHelperFilterTransparent0);
      assertNotNull(lightweightTCPTransport0);
      
      String string0 = lightweightTCPTransport0.getEncryption(true);
      assertNotNull(string0);
      assertEquals("Plain (TCP)", string0);
  }

  @Test
  public void test16()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent((TransportHelper) tCPTransportHelper0, true);
      LightweightTCPTransport lightweightTCPTransport0 = new LightweightTCPTransport((ProtocolEndpoint) null, (TransportHelperFilter) transportHelperFilterTransparent0);
      ByteBuffer[] byteBufferArray0 = new ByteBuffer[16];
      long long0 = lightweightTCPTransport0.read(byteBufferArray0, (-1867), (-1867));
      assertEquals(0L, long0);
  }

  @Test
  public void test17()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent((TransportHelper) tCPTransportHelper0, true);
      LightweightTCPTransport lightweightTCPTransport0 = new LightweightTCPTransport((ProtocolEndpoint) null, (TransportHelperFilter) transportHelperFilterTransparent0);
      EventWaiter eventWaiter0 = new EventWaiter();
      // Undeclared exception!
      try {
        lightweightTCPTransport0.isReadyForRead(eventWaiter0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * not implemented
         */
      }
  }
}
