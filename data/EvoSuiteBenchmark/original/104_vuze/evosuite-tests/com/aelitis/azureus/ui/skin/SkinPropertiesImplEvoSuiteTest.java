/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.ui.skin;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.ui.skin.SkinPropertiesImpl;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.instrumentation.InstrumentingClassLoader;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SkinPropertiesImplEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      SkinPropertiesImpl skinPropertiesImpl0 = new SkinPropertiesImpl();
      skinPropertiesImpl0.addProperty("", "#){\"E~e4s40,C.");
      int[] intArray0 = skinPropertiesImpl0.getColorValue("");
      assertNotNull(intArray0);
  }

  @Test
  public void test1()  throws Throwable  {
      SkinPropertiesImpl skinPropertiesImpl0 = new SkinPropertiesImpl();
      String string0 = skinPropertiesImpl0.getStringValue("Q}BDHS9s.b`I+~/ZWst");
      assertNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      SkinPropertiesImpl skinPropertiesImpl0 = new SkinPropertiesImpl();
      String[] stringArray0 = skinPropertiesImpl0.getStringArray("AGEv$}{+\"PY}&Gv");
      assertNull(stringArray0);
  }

  @Test
  public void test3()  throws Throwable  {
      SkinPropertiesImpl skinPropertiesImpl0 = new SkinPropertiesImpl();
      InstrumentingClassLoader instrumentingClassLoader0 = (InstrumentingClassLoader)skinPropertiesImpl0.getClassLoader();
      SkinPropertiesImpl skinPropertiesImpl1 = null;
      try {
        skinPropertiesImpl1 = new SkinPropertiesImpl((ClassLoader) instrumentingClassLoader0, " HTTP/1.1\r\n\r\n", " HTTP/1.1\r\n\r\n");
        fail("Expecting exception: MissingResourceException");
      } catch(MissingResourceException e) {
        /*
         * Can't find bundle for base name  HTTP.1.1\r
         * \r
         * . HTTP/1.1\r
         * \r
         * , locale en_GB
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SkinPropertiesImpl skinPropertiesImpl0 = new SkinPropertiesImpl();
          skinPropertiesImpl0.addResourceBundle((ResourceBundle) null, "Xn.properties");
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
      SkinPropertiesImpl skinPropertiesImpl0 = new SkinPropertiesImpl();
      boolean boolean0 = skinPropertiesImpl0.hasKey("1");
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      SkinPropertiesImpl skinPropertiesImpl0 = new SkinPropertiesImpl();
      assertNotNull(skinPropertiesImpl0);
      
      boolean boolean0 = skinPropertiesImpl0.hasKey((String) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      SkinPropertiesImpl skinPropertiesImpl0 = new SkinPropertiesImpl();
      assertNotNull(skinPropertiesImpl0);
      
      skinPropertiesImpl0.addProperty("1", "1");
      boolean boolean0 = skinPropertiesImpl0.hasKey("1");
      assertEquals(true, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      SkinPropertiesImpl skinPropertiesImpl0 = new SkinPropertiesImpl();
      String string0 = skinPropertiesImpl0.getReferenceID("k");
      assertNull(string0);
  }

  @Test
  public void test9()  throws Throwable  {
      SkinPropertiesImpl skinPropertiesImpl0 = new SkinPropertiesImpl();
      skinPropertiesImpl0.addProperty("1", "1");
      String string0 = skinPropertiesImpl0.getReferenceID("1");
      assertNull(string0);
  }

  @Test
  public void test10()  throws Throwable  {
      SkinPropertiesImpl skinPropertiesImpl0 = new SkinPropertiesImpl();
      skinPropertiesImpl0.addProperty("|HlE_[S_3$NM1", "|HlE_[S_3$NM1");
      String string0 = skinPropertiesImpl0.getReferenceID("|HlE_[S_3$NM1");
      assertNull(string0);
  }

  @Test
  public void test11()  throws Throwable  {
      SkinPropertiesImpl skinPropertiesImpl0 = new SkinPropertiesImpl();
      assertNotNull(skinPropertiesImpl0);
      
      boolean boolean0 = skinPropertiesImpl0.getBooleanValue((String) null, false);
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      SkinPropertiesImpl skinPropertiesImpl0 = new SkinPropertiesImpl();
      skinPropertiesImpl0.addProperty("AGEv$}{+\"PY}&Gv", "AGEv$}{+\"PY}&Gv");
      int[] intArray0 = skinPropertiesImpl0.getColorValue("AGEv$}{+\"PY}&Gv");
      assertNotNull(intArray0);
  }

  @Test
  public void test13()  throws Throwable  {
      SkinPropertiesImpl skinPropertiesImpl0 = new SkinPropertiesImpl();
      assertNotNull(skinPropertiesImpl0);
      
      skinPropertiesImpl0.addProperty("Q}BDHS9s.b`I+~/ZWst", "Q}BDHS9s.b`I+~/ZWst");
      String[] stringArray0 = new String[2];
      String[] stringArray1 = skinPropertiesImpl0.getStringArray("Q}BDHS9s.b`I+~/ZWst", stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
  }

  @Test
  public void test14()  throws Throwable  {
      SkinPropertiesImpl skinPropertiesImpl0 = new SkinPropertiesImpl();
      assertNotNull(skinPropertiesImpl0);
      
      skinPropertiesImpl0.addProperty("|HlE_[S_3$NM1", "|HlE_[S_3$NM1");
      int int0 = skinPropertiesImpl0.getIntValue("|HlE_[S_3$NM1", 337);
      assertEquals(337, int0);
  }

  @Test
  public void test15()  throws Throwable  {
      SkinPropertiesImpl skinPropertiesImpl0 = new SkinPropertiesImpl();
      assertNotNull(skinPropertiesImpl0);
      
      int int0 = skinPropertiesImpl0.getIntValue("Q}BDHS9s.b`I+~/ZWst", 761);
      assertEquals(761, int0);
  }

  @Test
  public void test16()  throws Throwable  {
      SkinPropertiesImpl skinPropertiesImpl0 = new SkinPropertiesImpl();
      int[] intArray0 = skinPropertiesImpl0.getColorValue("Xn.properties");
      assertNotNull(intArray0);
  }

  @Test
  public void test17()  throws Throwable  {
      SkinPropertiesImpl skinPropertiesImpl0 = new SkinPropertiesImpl();
      assertNotNull(skinPropertiesImpl0);
      
      skinPropertiesImpl0.addProperty("1", "1");
      boolean boolean0 = skinPropertiesImpl0.getBooleanValue("1", true);
      assertEquals(true, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      SkinPropertiesImpl skinPropertiesImpl0 = new SkinPropertiesImpl();
      assertNotNull(skinPropertiesImpl0);
      
      skinPropertiesImpl0.addProperty("T", "T");
      boolean boolean0 = skinPropertiesImpl0.getBooleanValue("T", false);
      assertEquals(false, boolean0);
  }
}
