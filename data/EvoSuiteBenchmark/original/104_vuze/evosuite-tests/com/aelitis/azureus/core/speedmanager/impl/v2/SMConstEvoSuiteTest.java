/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.speedmanager.impl.v2;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.speedmanager.SpeedManagerLimitEstimate;
import com.aelitis.azureus.core.speedmanager.impl.v2.SMConst;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SMConstEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SMConst.FilteredLimitEstimate sMConst_FilteredLimitEstimate0 = new SMConst.FilteredLimitEstimate((-496), 0.0F, 0.0F, (long) (-496), "%|[f[&7*Oh:!6lur[");
      sMConst_FilteredLimitEstimate0.getSegments();
      assertEquals(0.0F, sMConst_FilteredLimitEstimate0.metric, 0.01F);
      assertEquals((-496), sMConst_FilteredLimitEstimate0.bytesPerSec);
      assertEquals((-496L), sMConst_FilteredLimitEstimate0.when);
      assertEquals(0.0F, sMConst_FilteredLimitEstimate0.type, 0.01F);
      assertEquals((-496L), sMConst_FilteredLimitEstimate0.getWhen());
  }

  @Test
  public void test1()  throws Throwable  {
      SMConst.FilteredLimitEstimate sMConst_FilteredLimitEstimate0 = new SMConst.FilteredLimitEstimate(0, 0.0F, (-1.0F), (-789L), "");
      SMConst.FilteredLimitEstimate sMConst_FilteredLimitEstimate1 = (SMConst.FilteredLimitEstimate)SMConst.filterEstimate((SpeedManagerLimitEstimate) sMConst_FilteredLimitEstimate0, 0);
      assertEquals(0.0F, sMConst_FilteredLimitEstimate1.type, 0.01F);
      assertEquals(0, sMConst_FilteredLimitEstimate1.getBytesPerSec());
      assertEquals((-789L), sMConst_FilteredLimitEstimate0.getWhen());
      assertEquals((-789L), sMConst_FilteredLimitEstimate1.when);
      assertEquals((-1.0F), sMConst_FilteredLimitEstimate1.metric, 0.01F);
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = SMConst.calculateMinUpload(1197);
      assertEquals(5120, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = SMConst.calculateMinDownload((-436));
      assertEquals(20480, int0);
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = SMConst.checkForMinUploadValue(20480);
      assertEquals(20480, int0);
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = SMConst.checkForMinDownloadValue(20480);
      assertEquals(20480, int0);
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = SMConst.filterLimit(918, 918);
      assertEquals(918, int0);
  }
}
