/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.peermanager.messaging.bittorrent;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.peermanager.messaging.MessageException;
import com.aelitis.azureus.core.peermanager.messaging.bittorrent.BTHave;
import org.gudy.azureus2.core3.util.DirectByteBuffer;
import org.gudy.azureus2.core3.util.DirectByteBufferPool;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BTHaveEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BTHave bTHave0 = new BTHave(1459, (byte)44);
      byte[] byteArray0 = bTHave0.getIDBytes();
      assertEquals(44, bTHave0.getVersion());
      assertNotNull(byteArray0);
      assertEquals("BT_HAVE piece #1459", bTHave0.getDescription());
      assertEquals(1459, bTHave0.getPieceNumber());
  }

  @Test
  public void test1()  throws Throwable  {
      BTHave bTHave0 = new BTHave(7, (byte) (-93));
      String string0 = bTHave0.getFeatureID();
      assertEquals(7, bTHave0.getPieceNumber());
      assertEquals(-93, bTHave0.getVersion());
      assertEquals("BT1", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      BTHave bTHave0 = new BTHave(1459, (byte)44);
      int int0 = bTHave0.getPieceNumber();
      assertEquals(1459, int0);
      assertEquals(44, bTHave0.getVersion());
  }

  @Test
  public void test3()  throws Throwable  {
      BTHave bTHave0 = new BTHave(1459, (byte)44);
      byte byte0 = bTHave0.getVersion();
      assertEquals((byte)44, byte0);
      assertEquals("BT_HAVE piece #1459", bTHave0.getDescription());
  }

  @Test
  public void test4()  throws Throwable  {
      BTHave bTHave0 = new BTHave(1459, (byte)44);
      int int0 = bTHave0.getType();
      assertEquals(44, bTHave0.getVersion());
      assertEquals(0, int0);
      assertEquals("BT_HAVE piece #1459", bTHave0.getDescription());
  }

  @Test
  public void test5()  throws Throwable  {
      BTHave bTHave0 = new BTHave((int) (byte)0, (byte)0);
      try {
        bTHave0.deserialize((DirectByteBuffer) null, (byte)0);
        fail("Expecting exception: MessageException");
      } catch(MessageException e) {
        /*
         * [BT_HAVE] decode error: data == null
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      BTHave bTHave0 = new BTHave(1459, (byte)44);
      int int0 = bTHave0.getFeatureSubID();
      assertEquals(44, bTHave0.getVersion());
      assertEquals(4, int0);
      assertEquals("BT_HAVE piece #1459", bTHave0.getDescription());
  }

  @Test
  public void test7()  throws Throwable  {
      BTHave bTHave0 = new BTHave(1459, (byte)44);
      String string0 = bTHave0.getDescription();
      String string1 = bTHave0.getDescription();
      assertEquals(44, bTHave0.getVersion());
      assertNotNull(string1);
      assertEquals("BT_HAVE piece #1459", string1);
      assertSame(string1, string0);
  }

  @Test
  public void test8()  throws Throwable  {
      BTHave bTHave0 = new BTHave(1459, (byte)44);
      DirectByteBuffer[] directByteBufferArray0 = bTHave0.getData();
      assertNotNull(directByteBufferArray0);
      
      bTHave0.getData();
      assertEquals(44, bTHave0.getVersion());
      assertEquals(1459, bTHave0.getPieceNumber());
      assertEquals("BT_HAVE piece #1459", bTHave0.getDescription());
  }

  @Test
  public void test9()  throws Throwable  {
      BTHave bTHave0 = new BTHave(1459, (byte)44);
      DirectByteBuffer directByteBuffer0 = DirectByteBufferPool.getBuffer((byte)44, 4);
      BTHave bTHave1 = (BTHave)bTHave0.deserialize(directByteBuffer0, (byte)44);
      assertEquals(44, bTHave1.getVersion());
      assertEquals("BT_HAVE piece #1459", bTHave0.getDescription());
      assertEquals("BT_HAVE piece #0", bTHave1.getDescription());
      assertNotNull(bTHave1);
  }

  @Test
  public void test10()  throws Throwable  {
      BTHave bTHave0 = new BTHave(7, (byte) (-93));
      DirectByteBuffer directByteBuffer0 = DirectByteBufferPool.getBuffer((byte) (-93), 7);
      try {
        bTHave0.deserialize(directByteBuffer0, (byte) (-93));
        fail("Expecting exception: MessageException");
      } catch(MessageException e) {
        /*
         * [BT_HAVE] decode error: payload.remaining[7] != 4
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      BTHave bTHave0 = new BTHave(1459, (byte)44);
      bTHave0.destroy();
      assertEquals(44, bTHave0.getVersion());
      assertEquals(1459, bTHave0.getPieceNumber());
      assertEquals("BT_HAVE piece #1459", bTHave0.getDescription());
  }

  @Test
  public void test12()  throws Throwable  {
      BTHave bTHave0 = new BTHave(1459, (byte)44);
      DirectByteBuffer[] directByteBufferArray0 = bTHave0.getData();
      assertNotNull(directByteBufferArray0);
      
      bTHave0.destroy();
      assertEquals(44, bTHave0.getVersion());
      assertEquals(1459, bTHave0.getPieceNumber());
      assertEquals("BT_HAVE piece #1459", bTHave0.getDescription());
  }
}
