/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.peermanager.messaging.bittorrent;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.peermanager.messaging.MessageException;
import com.aelitis.azureus.core.peermanager.messaging.bittorrent.BTRejectRequest;
import org.gudy.azureus2.core3.util.DirectByteBuffer;
import org.gudy.azureus2.core3.util.DirectByteBufferPool;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BTRejectRequestEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BTRejectRequest bTRejectRequest0 = new BTRejectRequest(0, 0, 0, (byte)0);
      assertNotNull(bTRejectRequest0);
      
      int int0 = bTRejectRequest0.getFeatureSubID();
      assertEquals("BT_REJECT_REQUEST piece #0:0->-1", bTRejectRequest0.getDescription());
      assertEquals(16, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      BTRejectRequest bTRejectRequest0 = new BTRejectRequest(26, 26, 26, (byte) (-35));
      bTRejectRequest0.getIDBytes();
      assertEquals(-35, bTRejectRequest0.getVersion());
      assertEquals("BT_REJECT_REQUEST piece #26:26->51", bTRejectRequest0.getDescription());
      assertEquals(26, bTRejectRequest0.getPieceOffset());
  }

  @Test
  public void test2()  throws Throwable  {
      BTRejectRequest bTRejectRequest0 = new BTRejectRequest(1154, 1154, 1154, (byte) (-123));
      try {
        bTRejectRequest0.deserialize((DirectByteBuffer) null, (byte) (-123));
        fail("Expecting exception: MessageException");
      } catch(MessageException e) {
        /*
         * [BT_REJECT_REQUEST] decode error: data == null
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      BTRejectRequest bTRejectRequest0 = new BTRejectRequest(26, 26, 26, (byte) (-35));
      int int0 = bTRejectRequest0.getPieceOffset();
      assertEquals(26, int0);
      assertEquals(-35, bTRejectRequest0.getVersion());
      assertEquals("BT_REJECT_REQUEST piece #26:26->51", bTRejectRequest0.getDescription());
  }

  @Test
  public void test4()  throws Throwable  {
      BTRejectRequest bTRejectRequest0 = new BTRejectRequest(66, 66, 66, (byte)0);
      int int0 = bTRejectRequest0.getLength();
      assertEquals(0, bTRejectRequest0.getVersion());
      assertEquals(66, int0);
      assertEquals("BT_REJECT_REQUEST piece #66:66->131", bTRejectRequest0.getDescription());
  }

  @Test
  public void test5()  throws Throwable  {
      BTRejectRequest bTRejectRequest0 = new BTRejectRequest(1154, 1154, 1154, (byte) (-123));
      bTRejectRequest0.getFeatureID();
      assertEquals(-123, bTRejectRequest0.getVersion());
      assertEquals("BT_REJECT_REQUEST piece #1154:1154->2307", bTRejectRequest0.getDescription());
      assertEquals(1154, bTRejectRequest0.getLength());
  }

  @Test
  public void test6()  throws Throwable  {
      BTRejectRequest bTRejectRequest0 = new BTRejectRequest(1959, 1959, 1959, (byte)12);
      int int0 = bTRejectRequest0.hashCode();
      assertEquals(12, bTRejectRequest0.getVersion());
      assertEquals(5877, int0);
      assertEquals("BT_REJECT_REQUEST piece #1959:1959->3917", bTRejectRequest0.getDescription());
  }

  @Test
  public void test7()  throws Throwable  {
      BTRejectRequest bTRejectRequest0 = new BTRejectRequest(66, 66, 66, (byte)0);
      byte byte0 = bTRejectRequest0.getVersion();
      assertEquals((byte)0, byte0);
      assertEquals("BT_REJECT_REQUEST piece #66:66->131", bTRejectRequest0.getDescription());
  }

  @Test
  public void test8()  throws Throwable  {
      BTRejectRequest bTRejectRequest0 = new BTRejectRequest(26, 26, 26, (byte) (-35));
      bTRejectRequest0.getType();
      assertEquals(-35, bTRejectRequest0.getVersion());
      assertEquals("BT_REJECT_REQUEST piece #26:26->51", bTRejectRequest0.getDescription());
      assertEquals(26, bTRejectRequest0.getPieceNumber());
  }

  @Test
  public void test9()  throws Throwable  {
      BTRejectRequest bTRejectRequest0 = new BTRejectRequest(0, 0, 0, (byte)0);
      assertNotNull(bTRejectRequest0);
      
      int int0 = bTRejectRequest0.getPieceNumber();
      assertEquals(0, int0);
      assertEquals("BT_REJECT_REQUEST piece #0:0->-1", bTRejectRequest0.getDescription());
      assertEquals(0, bTRejectRequest0.getVersion());
  }

  @Test
  public void test10()  throws Throwable  {
      BTRejectRequest bTRejectRequest0 = new BTRejectRequest(26, 26, 26, (byte) (-35));
      String string0 = bTRejectRequest0.getDescription();
      String string1 = bTRejectRequest0.getDescription();
      assertNotNull(string1);
      assertEquals("BT_REJECT_REQUEST piece #26:26->51", string1);
      assertSame(string1, string0);
      assertEquals(-35, bTRejectRequest0.getVersion());
  }

  @Test
  public void test11()  throws Throwable  {
      BTRejectRequest bTRejectRequest0 = new BTRejectRequest(26, 26, 26, (byte) (-35));
      DirectByteBuffer[] directByteBufferArray0 = bTRejectRequest0.getData();
      assertNotNull(directByteBufferArray0);
      
      bTRejectRequest0.getData();
      assertEquals("BT_REJECT_REQUEST piece #26:26->51", bTRejectRequest0.getDescription());
      assertEquals(-35, bTRejectRequest0.getVersion());
      assertEquals(26, bTRejectRequest0.getPieceOffset());
  }

  @Test
  public void test12()  throws Throwable  {
      BTRejectRequest bTRejectRequest0 = new BTRejectRequest(1959, 1959, 1959, (byte)12);
      DirectByteBuffer directByteBuffer0 = DirectByteBufferPool.getBuffer((byte)12, (byte)12);
      BTRejectRequest bTRejectRequest1 = (BTRejectRequest)bTRejectRequest0.deserialize(directByteBuffer0, (byte)12);
      assertNotNull(bTRejectRequest1);
      assertEquals("BT_REJECT_REQUEST piece #1959:1959->3917", bTRejectRequest0.getDescription());
  }

  @Test
  public void test13()  throws Throwable  {
      BTRejectRequest bTRejectRequest0 = new BTRejectRequest(2006, 2006, 2006, (byte) (-16));
      DirectByteBuffer directByteBuffer0 = DirectByteBufferPool.getBuffer((byte) (-16), 2006);
      try {
        bTRejectRequest0.deserialize(directByteBuffer0, (byte) (-16));
        fail("Expecting exception: MessageException");
      } catch(MessageException e) {
        /*
         * [BT_REJECT_REQUEST] decode error: payload.remaining[2006] != 12
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      BTRejectRequest bTRejectRequest0 = new BTRejectRequest(1154, 1154, 1154, (byte) (-123));
      bTRejectRequest0.destroy();
      assertEquals(-123, bTRejectRequest0.getVersion());
      assertEquals("BT_REJECT_REQUEST piece #1154:1154->2307", bTRejectRequest0.getDescription());
      assertEquals(1154, bTRejectRequest0.getPieceNumber());
  }

  @Test
  public void test15()  throws Throwable  {
      BTRejectRequest bTRejectRequest0 = new BTRejectRequest(26, 26, 26, (byte) (-35));
      DirectByteBuffer[] directByteBufferArray0 = bTRejectRequest0.getData();
      assertNotNull(directByteBufferArray0);
      
      bTRejectRequest0.destroy();
      assertEquals("BT_REJECT_REQUEST piece #26:26->51", bTRejectRequest0.getDescription());
      assertEquals(-35, bTRejectRequest0.getVersion());
      assertEquals(26, bTRejectRequest0.getLength());
  }

  @Test
  public void test16()  throws Throwable  {
      BTRejectRequest bTRejectRequest0 = new BTRejectRequest(0, (-1), 0, (byte) (-127));
      assertNotNull(bTRejectRequest0);
      
      BTRejectRequest bTRejectRequest1 = new BTRejectRequest(0, 0, (int) (byte) (-127), (byte) (-127));
      assertNotNull(bTRejectRequest1);
      
      boolean boolean0 = bTRejectRequest0.equals((Object) bTRejectRequest1);
      assertEquals("BT_REJECT_REQUEST piece #0:-1->-2", bTRejectRequest0.getDescription());
      assertEquals(-127, bTRejectRequest1.getLength());
      assertEquals(false, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      BTRejectRequest bTRejectRequest0 = new BTRejectRequest(66, 66, 66, (byte)0);
      boolean boolean0 = bTRejectRequest0.equals((Object) null);
      assertEquals(0, bTRejectRequest0.getVersion());
      assertEquals(false, boolean0);
      assertEquals("BT_REJECT_REQUEST piece #66:66->131", bTRejectRequest0.getDescription());
  }

  @Test
  public void test18()  throws Throwable  {
      BTRejectRequest bTRejectRequest0 = new BTRejectRequest(120, 120, 120, (byte) (-88));
      boolean boolean0 = bTRejectRequest0.equals((Object) "BT_KEEP_ALIVE");
      assertEquals(-88, bTRejectRequest0.getVersion());
      assertEquals(false, boolean0);
      assertEquals("BT_REJECT_REQUEST piece #120:120->239", bTRejectRequest0.getDescription());
  }

  @Test
  public void test19()  throws Throwable  {
      BTRejectRequest bTRejectRequest0 = new BTRejectRequest(26, 26, 26, (byte) (-35));
      BTRejectRequest bTRejectRequest1 = new BTRejectRequest((int) (byte) (-35), (int) (byte) (-35), 26, (byte) (-35));
      bTRejectRequest0.equals((Object) bTRejectRequest1);
      assertEquals("BT_REJECT_REQUEST piece #-35:-35->-10", bTRejectRequest1.getDescription());
      assertEquals(-35, bTRejectRequest0.getVersion());
  }

  @Test
  public void test20()  throws Throwable  {
      BTRejectRequest bTRejectRequest0 = new BTRejectRequest(0, 0, 0, (byte)0);
      assertNotNull(bTRejectRequest0);
      
      BTRejectRequest bTRejectRequest1 = new BTRejectRequest(0, (int) (byte)0, 85, (byte)0);
      boolean boolean0 = bTRejectRequest0.equals((Object) bTRejectRequest1);
      assertEquals(false, boolean0);
      assertEquals(0, bTRejectRequest1.getVersion());
      assertFalse(bTRejectRequest1.equals(bTRejectRequest0));
      assertEquals("BT_REJECT_REQUEST piece #0:0->84", bTRejectRequest1.getDescription());
  }

  @Test
  public void test21()  throws Throwable  {
      BTRejectRequest bTRejectRequest0 = new BTRejectRequest(0, 0, 0, (byte)0);
      BTRejectRequest bTRejectRequest1 = new BTRejectRequest(0, 0, 0, (byte)0);
      boolean boolean0 = bTRejectRequest0.equals((Object) bTRejectRequest1);
      assertEquals(true, boolean0);
      assertEquals(0, bTRejectRequest0.getVersion());
      assertEquals("BT_REJECT_REQUEST piece #0:0->-1", bTRejectRequest0.getDescription());
  }
}
