/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.peermanager.messaging.azureus;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.peermanager.messaging.MessageException;
import com.aelitis.azureus.core.peermanager.messaging.azureus.AZHave;
import org.evosuite.runtime.Random;
import org.gudy.azureus2.core3.util.DirectByteBuffer;
import org.gudy.azureus2.core3.util.DirectByteBufferPool;
import org.gudy.azureus2.core3.util.ReferenceCountedDirectByteBuffer;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class AZHaveEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      int[] intArray0 = new int[10];
      AZHave aZHave0 = new AZHave(intArray0, (byte)0);
      int int0 = aZHave0.getType();
      assertEquals(0, int0);
      assertEquals(0, aZHave0.getVersion());
  }

  @Test
  public void test1()  throws Throwable  {
      int[] intArray0 = new int[2];
      AZHave aZHave0 = new AZHave(intArray0, (byte)0);
      String string0 = aZHave0.getFeatureID();
      assertEquals("AZ1", string0);
      assertEquals(0, aZHave0.getVersion());
  }

  @Test
  public void test2()  throws Throwable  {
      int[] intArray0 = new int[2];
      AZHave aZHave0 = new AZHave(intArray0, (byte)0);
      int int0 = aZHave0.getFeatureSubID();
      assertEquals(0, aZHave0.getVersion());
      assertEquals(4, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      int[] intArray0 = new int[2];
      AZHave aZHave0 = new AZHave(intArray0, (byte)0);
      int[] intArray1 = aZHave0.getPieceNumbers();
      assertNotNull(intArray1);
      assertEquals(0, aZHave0.getVersion());
  }

  @Test
  public void test4()  throws Throwable  {
      int[] intArray0 = new int[10];
      AZHave aZHave0 = new AZHave(intArray0, (byte)0);
      DirectByteBuffer[] directByteBufferArray0 = aZHave0.getData();
      assertNotNull(directByteBufferArray0);
      
      aZHave0.getData();
      assertEquals(0, aZHave0.getVersion());
  }

  @Test
  public void test5()  throws Throwable  {
      int[] intArray0 = new int[17];
      AZHave aZHave0 = new AZHave(intArray0, (byte)32);
      DirectByteBuffer directByteBuffer0 = DirectByteBufferPool.getBuffer((byte)0, (byte)32);
      ReferenceCountedDirectByteBuffer referenceCountedDirectByteBuffer0 = directByteBuffer0.getReferenceCountedBuffer();
      aZHave0.deserialize((DirectByteBuffer) referenceCountedDirectByteBuffer0, (byte)16);
      intArray0[0] = 1500;
      intArray0[1] = (-286);
      Random.setNextRandom((-248));
      intArray0[2] = (-197);
      intArray0[3] = (-197);
      intArray0[4] = (-18);
      AZHave aZHave1 = new AZHave(intArray0, (byte)0);
      aZHave1.getVersion();
      aZHave1.getIDBytes();
      aZHave1.getDescription();
  }

  @Test
  public void test6()  throws Throwable  {
      int[] intArray0 = new int[10];
      AZHave aZHave0 = new AZHave(intArray0, (byte)0);
      aZHave0.destroy();
      assertEquals(0, aZHave0.getVersion());
  }

  @Test
  public void test7()  throws Throwable  {
      int[] intArray0 = new int[2];
      AZHave aZHave0 = new AZHave(intArray0, (byte)0);
      DirectByteBuffer[] directByteBufferArray0 = aZHave0.getData();
      assertNotNull(directByteBufferArray0);
      
      aZHave0.destroy();
      assertEquals(0, aZHave0.getVersion());
  }
}
