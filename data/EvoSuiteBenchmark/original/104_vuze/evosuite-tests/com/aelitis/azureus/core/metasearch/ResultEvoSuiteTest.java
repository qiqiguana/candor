/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.metasearch;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.metasearch.Engine;
import com.aelitis.azureus.core.metasearch.Result;
import com.aelitis.azureus.core.metasearch.impl.DateParser;
import com.aelitis.azureus.core.metasearch.impl.DateParserRegex;
import com.aelitis.azureus.core.metasearch.impl.web.WebResult;
import java.util.HashMap;
import java.util.Map;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ResultEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DateParserRegex dateParserRegex0 = new DateParserRegex();
      WebResult webResult0 = new WebResult((Engine) null, "D\"", "D\"", (DateParser) dateParserRegex0, "D\"");
      // Undeclared exception!
      try {
        webResult0.toJSONMap();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      DateParserRegex dateParserRegex0 = new DateParserRegex("", false, "");
      WebResult webResult0 = new WebResult((Engine) null, "", "", (DateParser) dateParserRegex0, "");
      Engine engine0 = webResult0.getEngine();
      assertNull(engine0);
  }

  @Test
  public void test2()  throws Throwable  {
      DateParserRegex dateParserRegex0 = new DateParserRegex();
      WebResult webResult0 = new WebResult((Engine) null, "D\"", "D\"", (DateParser) dateParserRegex0, "D\"");
      webResult0.setName("D\"");
      // Undeclared exception!
      try {
        webResult0.toJSONMap();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Result.adjustRelativeTerms((Map) hashMap0);
      assertEquals("{}", hashMap0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      String string0 = Result.removeHTMLTags("=kn_}f^sg");
      assertEquals("=kn_}f^sg", string0);
      assertNotNull(string0);
  }

  @Test
  public void test5()  throws Throwable  {
      String string0 = Result.unescapeEntities("");
      assertEquals("", string0);
  }
}
