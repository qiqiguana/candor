/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.networkmanager.impl.tcp;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.networkmanager.impl.tcp.TCPConnectionManager;
import java.net.InetSocketAddress;
import java.nio.channels.SocketChannel;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TCPConnectionManagerEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TCPConnectionManager tCPConnectionManager0 = new TCPConnectionManager();
          int int0 = tCPConnectionManager0.getMaxOutboundPermitted();
          assertEquals(2048, int0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TCPConnectionManager tCPConnectionManager0 = new TCPConnectionManager();
          tCPConnectionManager0.closeConnection((SocketChannel) null);
          tCPConnectionManager0.closeConnection((SocketChannel) null);
          assertEquals(2048, tCPConnectionManager0.getMaxOutboundPermitted());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TCPConnectionManager tCPConnectionManager0 = new TCPConnectionManager();
          InetSocketAddress inetSocketAddress0 = new InetSocketAddress(1803);
          tCPConnectionManager0.requestNewConnection(inetSocketAddress0, (TCPConnectionManager.ConnectListener) null, 553);
          assertEquals(2047, tCPConnectionManager0.getMaxOutboundPermitted());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TCPConnectionManager tCPConnectionManager0 = new TCPConnectionManager();
          tCPConnectionManager0.closeConnection((SocketChannel) null, 2048);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TCPConnectionManager tCPConnectionManager0 = new TCPConnectionManager();
          InetSocketAddress inetSocketAddress0 = new InetSocketAddress(553);
          tCPConnectionManager0.requestNewConnection(inetSocketAddress0, (TCPConnectionManager.ConnectListener) null, 2048, 0);
          tCPConnectionManager0.cancelRequest((TCPConnectionManager.ConnectListener) null);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
