/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.activities;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.activities.VuzeActivitiesEntry;
import com.aelitis.azureus.ui.common.table.TableColumnCore;
import com.aelitis.azureus.ui.selectedcontent.SelectedContentV3;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.gudy.azureus2.core3.torrent.TOTorrent;
import org.gudy.azureus2.ui.swt.views.columnsetup.ColumnTC_NameInfo;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class VuzeActivitiesEntryEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry((-1346L), "httpDH7,Q", "httpDH7,Q", "httpDH7,Q", "httpDH7,Q", "httpDH7,Q");
          vuzeActivitiesEntry0.setAssetImageURL("name");
          Map<String, Object> map0 = vuzeActivitiesEntry0.toDeletedMap();
          assertEquals("httpDH7,Q", vuzeActivitiesEntry0.getIconID());
          
          vuzeActivitiesEntry0.loadFromInternalMap(map0);
          assertEquals(true, vuzeActivitiesEntry0.getShowThumb());
          assertEquals((-1346L), vuzeActivitiesEntry0.getTimestamp());
          assertEquals(false, vuzeActivitiesEntry0.isPlayable());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
      VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry();
      vuzeActivitiesEntry0.getTimestamp();
      assertEquals(true, vuzeActivitiesEntry0.getShowThumb());
  }

  @Test
  public void test2()  throws Throwable  {
      VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry(1L, "=t'c.ps", "=t'c.ps");
      assertNotNull(vuzeActivitiesEntry0);
      
      vuzeActivitiesEntry0.getID();
      assertEquals(true, vuzeActivitiesEntry0.getShowThumb());
      assertEquals("image.vuze-entry.=t'c.ps", vuzeActivitiesEntry0.getIconID());
      assertEquals(1L, vuzeActivitiesEntry0.getTimestamp());
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry((-11L), "Problem moving torrent to removed download directory", "Problem moving torrent to removed download directory", "Problem moving torrent to removed download directory", "Problem moving torrent to removed download directory", "Problem moving torrent to removed download directory");
          assertNotNull(vuzeActivitiesEntry0);
          
          Map<String, Object> map0 = vuzeActivitiesEntry0.toMap();
          assertEquals(true, vuzeActivitiesEntry0.getShowThumb());
          assertEquals("image.vuze-entry.Problem moving torrent to removed download directory", vuzeActivitiesEntry0.getIconID());
          assertEquals((-11L), vuzeActivitiesEntry0.getTimestamp());
          assertEquals(9, map0.size());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry((-1346L), "httpDH7,Q", "httpDH7,Q", "httpDH7,Q", "httpDH7,Q", "httpDH7,Q");
          SelectedContentV3 selectedContentV3_0 = vuzeActivitiesEntry0.createSelectedContentObject();
          assertEquals(true, selectedContentV3_0.isPlatformContent());
          assertNotNull(selectedContentV3_0);
          assertEquals(true, vuzeActivitiesEntry0.getShowThumb());
          assertEquals((-1346L), vuzeActivitiesEntry0.getTimestamp());
          assertEquals("httpDH7,Q", vuzeActivitiesEntry0.getIconID());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry((-1346L), "httpDH7,Q", "httpDH7,Q", "httpDH7,Q", "httpDH7,Q", "httpDH7,Q");
          Map<String, Object> map0 = vuzeActivitiesEntry0.toDeletedMap();
          assertEquals("httpDH7,Q", vuzeActivitiesEntry0.getIconID());
          
          vuzeActivitiesEntry0.loadFromInternalMap(map0);
          assertEquals(false, vuzeActivitiesEntry0.isPlayable());
          assertEquals((-1346L), vuzeActivitiesEntry0.getTimestamp());
          assertEquals(true, vuzeActivitiesEntry0.getShowThumb());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry((-606L), "%_\"W", "%_\"W", "%_\"W", "%_\"W", "%_\"W");
          assertNotNull(vuzeActivitiesEntry0);
          
          vuzeActivitiesEntry0.loadFromExternalMap((Map<?, ?>) null);
          assertEquals(0L, vuzeActivitiesEntry0.getTimestamp());
          assertEquals(true, vuzeActivitiesEntry0.getShowThumb());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
      VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry();
      vuzeActivitiesEntry0.getReadOn();
      assertEquals(true, vuzeActivitiesEntry0.getShowThumb());
  }

  @Test
  public void test8()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry((-1346L), "httpDH7,Q", "httpDH7,Q", "httpDH7,Q", "httpDH7,Q", "httpDH7,Q");
          vuzeActivitiesEntry0.getImageBytes();
          assertEquals((-1346L), vuzeActivitiesEntry0.getTimestamp());
          assertEquals("httpDH7,Q", vuzeActivitiesEntry0.getIconID());
          assertEquals(true, vuzeActivitiesEntry0.getShowThumb());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test9()  throws Throwable  {
      VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry();
      vuzeActivitiesEntry0.setTorrent((TOTorrent) null);
      assertEquals(true, vuzeActivitiesEntry0.getShowThumb());
  }

  @Test
  public void test10()  throws Throwable  {
      VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry();
      vuzeActivitiesEntry0.getAssetImageURL();
      assertEquals(true, vuzeActivitiesEntry0.getShowThumb());
  }

  @Test
  public void test11()  throws Throwable  {
      VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry(286L, "887}fz~R+Sq`{=|7!t", "887}fz~R+Sq`{=|7!t");
      assertNotNull(vuzeActivitiesEntry0);
      
      vuzeActivitiesEntry0.loadFromInternalMap((Map<?, ?>) null);
      assertEquals(0L, vuzeActivitiesEntry0.getTimestamp());
      assertEquals(true, vuzeActivitiesEntry0.getShowThumb());
  }

  @Test
  public void test12()  throws Throwable  {
      VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry(540L, "cje#nVa", "cje#nVa");
      assertNotNull(vuzeActivitiesEntry0);
      assertEquals(true, vuzeActivitiesEntry0.getShowThumb());
      
      vuzeActivitiesEntry0.setShowThumb(false);
      Map<String, Object> map0 = vuzeActivitiesEntry0.toMap();
      vuzeActivitiesEntry0.loadFromInternalMap(map0);
      assertEquals(false, vuzeActivitiesEntry0.isPlayable());
  }

  @Test
  public void test13()  throws Throwable  {
      VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry();
      vuzeActivitiesEntry0.setPlayable(true);
      Map<String, Object> map0 = vuzeActivitiesEntry0.toMap();
      assertEquals(true, vuzeActivitiesEntry0.isPlayable());
      
      vuzeActivitiesEntry0.loadCommonFromMap(map0);
      assertEquals(true, vuzeActivitiesEntry0.getShowThumb());
  }

  @Test
  public void test14()  throws Throwable  {
      VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry(540L, "cje#nVa", "cje#nVa");
      assertNotNull(vuzeActivitiesEntry0);
      
      Map<String, Object> map0 = vuzeActivitiesEntry0.toMap();
      vuzeActivitiesEntry0.setTorrentName("cje#nVa");
      vuzeActivitiesEntry0.loadFromInternalMap(map0);
      assertEquals(8, map0.size());
      assertEquals("image.vuze-entry.cje#nva", vuzeActivitiesEntry0.getIconID());
      assertEquals(540L, vuzeActivitiesEntry0.getTimestamp());
      assertEquals(false, vuzeActivitiesEntry0.isPlayable());
      assertEquals(true, vuzeActivitiesEntry0.getShowThumb());
  }

  @Test
  public void test15()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry((-1346L), "httpDH7,Q", "httpDH7,Q", "httpDH7,Q", "httpDH7,Q", "httpDH7,Q");
          vuzeActivitiesEntry0.equals((Object) "name");
          assertEquals(true, vuzeActivitiesEntry0.getShowThumb());
          assertEquals((-1346L), vuzeActivitiesEntry0.getTimestamp());
          assertEquals("httpDH7,Q", vuzeActivitiesEntry0.getIconID());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test16()  throws Throwable  {
      VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry();
      boolean boolean0 = vuzeActivitiesEntry0.equals((Object) vuzeActivitiesEntry0);
      assertEquals(true, vuzeActivitiesEntry0.getShowThumb());
      assertEquals(true, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry();
      vuzeActivitiesEntry0.setID("ttot10_+w!k");
      boolean boolean0 = vuzeActivitiesEntry0.equals((Object) vuzeActivitiesEntry0);
      assertEquals(true, boolean0);
      assertEquals(true, vuzeActivitiesEntry0.getShowThumb());
  }

  @Test
  public void test18()  throws Throwable  {
      VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry(299973L, (String) null, (String) null, (String) null, (String) null, (String) null);
      assertNotNull(vuzeActivitiesEntry0);
      
      int int0 = vuzeActivitiesEntry0.compareTo((Object) null);
      assertEquals(1, int0);
      assertEquals(true, vuzeActivitiesEntry0.getShowThumb());
      assertEquals(299973L, vuzeActivitiesEntry0.getTimestamp());
  }

  @Test
  public void test19()  throws Throwable  {
      VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry((-1L), (String) null, (String) null);
      assertNotNull(vuzeActivitiesEntry0);
      
      int int0 = vuzeActivitiesEntry0.compareTo((Object) vuzeActivitiesEntry0);
      assertEquals(0, int0);
      assertEquals(true, vuzeActivitiesEntry0.getShowThumb());
      assertEquals((-1L), vuzeActivitiesEntry0.getTimestamp());
  }

  @Test
  public void test20()  throws Throwable  {
      VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry((-1L), (String) null, (String) null);
      assertNotNull(vuzeActivitiesEntry0);
      
      VuzeActivitiesEntry vuzeActivitiesEntry1 = new VuzeActivitiesEntry();
      int int0 = vuzeActivitiesEntry0.compareTo((Object) vuzeActivitiesEntry1);
      assertEquals(true, vuzeActivitiesEntry0.getShowThumb());
      assertEquals((-1), int0);
      assertEquals(true, vuzeActivitiesEntry1.getShowThumb());
  }

  @Test
  public void test21()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry();
          VuzeActivitiesEntry vuzeActivitiesEntry1 = new VuzeActivitiesEntry((-133L), "Rk%Jh9w)", "Rk%Jh9w)", "Rk%Jh9w)", "Rk%Jh9w)", "Rk%Jh9w)");
          assertNotNull(vuzeActivitiesEntry1);
          
          int int0 = vuzeActivitiesEntry0.compareTo((Object) vuzeActivitiesEntry1);
          assertEquals(1, int0);
          assertEquals(true, vuzeActivitiesEntry1.getShowThumb());
          assertEquals(true, vuzeActivitiesEntry0.getShowThumb());
          assertEquals("image.vuze-entry.Rk%Jh9w)", vuzeActivitiesEntry1.getIconID());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test22()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry((-1346L), "httpDH7,Q", "httpDH7,Q", "httpDH7,Q", "httpDH7,Q", "httpDH7,Q");
          vuzeActivitiesEntry0.setAssetImageURL("");
          assertEquals(true, vuzeActivitiesEntry0.getShowThumb());
          assertEquals((-1346L), vuzeActivitiesEntry0.getTimestamp());
          assertEquals("httpDH7,Q", vuzeActivitiesEntry0.getIconID());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test23()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry((long) (-1662), "httpW", "httpW", "httpW", "httpW", "httpW");
          vuzeActivitiesEntry0.setAssetImageURL("httpW");
          vuzeActivitiesEntry0.setAssetImageURL("httpW");
          assertEquals((-1662L), vuzeActivitiesEntry0.getTimestamp());
          assertEquals("httpW", vuzeActivitiesEntry0.getIconID());
          assertEquals(true, vuzeActivitiesEntry0.getShowThumb());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test24()  throws Throwable  {
      VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry();
      byte[] byteArray0 = new byte[10];
      vuzeActivitiesEntry0.setImageBytes(byteArray0);
      Map<String, Object> map0 = vuzeActivitiesEntry0.toMap();
      assertEquals(true, vuzeActivitiesEntry0.getShowThumb());
      assertEquals(9, map0.size());
  }

  @Test
  public void test25()  throws Throwable  {
      VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry(540L, "cje#nVa", "cje#nVa");
      assertNotNull(vuzeActivitiesEntry0);
      
      vuzeActivitiesEntry0.setTorrentName("cje#nVa");
      Map<String, Object> map0 = vuzeActivitiesEntry0.toMap();
      assertEquals("image.vuze-entry.cje#nva", vuzeActivitiesEntry0.getIconID());
      assertEquals(540L, vuzeActivitiesEntry0.getTimestamp());
      assertEquals(9, map0.size());
      assertEquals(true, vuzeActivitiesEntry0.getShowThumb());
  }

  @Test
  public void test26()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry((long) (-1662), "httpW", "httpW", "httpW", "httpW", "httpW");
          vuzeActivitiesEntry0.setTimestamp(10000L);
          assertEquals(10000L, vuzeActivitiesEntry0.getTimestamp());
          assertEquals("httpW", vuzeActivitiesEntry0.getIconID());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test27()  throws Throwable  {
      VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry(540L, "cje#nVa", "cje#nVa");
      assertEquals(540L, vuzeActivitiesEntry0.getTimestamp());
      assertNotNull(vuzeActivitiesEntry0);
      
      vuzeActivitiesEntry0.setTimestamp(540L);
      assertEquals(true, vuzeActivitiesEntry0.getShowThumb());
      assertEquals("image.vuze-entry.cje#nva", vuzeActivitiesEntry0.getIconID());
  }

  @Test
  public void test28()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry((long) (-1662), "httpW", "httpW", "httpW", "httpW", "httpW");
          ColumnTC_NameInfo columnTC_NameInfo0 = new ColumnTC_NameInfo("httpW");
          vuzeActivitiesEntry0.tableColumn = (TableColumnCore) columnTC_NameInfo0;
          vuzeActivitiesEntry0.setTimestamp(10000L);
          assertEquals(10000L, vuzeActivitiesEntry0.getTimestamp());
          assertEquals("httpW", vuzeActivitiesEntry0.getIconID());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test29()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry((-606L), "%_\"W", "%_\"W", "%_\"W", "%_\"W", "%_\"W");
          assertNotNull(vuzeActivitiesEntry0);
          
          vuzeActivitiesEntry0.setTorrentName("%_\"W");
          SelectedContentV3 selectedContentV3_0 = vuzeActivitiesEntry0.createSelectedContentObject();
          assertNotNull(selectedContentV3_0);
          assertEquals(true, selectedContentV3_0.isPlatformContent());
          assertEquals("image.vuze-entry.%_\"W", vuzeActivitiesEntry0.getIconID());
          assertEquals((-606L), vuzeActivitiesEntry0.getTimestamp());
          assertEquals(true, vuzeActivitiesEntry0.getShowThumb());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test30()  throws Throwable  {
      VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry(286L, "887}fz~R+Sq`{=|7!t", "887}fz~R+Sq`{=|7!t");
      assertNotNull(vuzeActivitiesEntry0);
      
      vuzeActivitiesEntry0.createSelectedContentObject();
      assertEquals(true, vuzeActivitiesEntry0.getShowThumb());
      assertEquals("image.vuze-entry.887}fz~r+sq`{=|7!t", vuzeActivitiesEntry0.getIconID());
      assertEquals(286L, vuzeActivitiesEntry0.getTimestamp());
  }

  @Test
  public void test31()  throws Throwable  {
      VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry();
      boolean boolean0 = vuzeActivitiesEntry0.isPlayable();
      assertEquals(true, vuzeActivitiesEntry0.getShowThumb());
      assertEquals(false, boolean0);
  }

  @Test
  public void test32()  throws Throwable  {
      VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry();
      vuzeActivitiesEntry0.setPlayable(true);
      boolean boolean0 = vuzeActivitiesEntry0.isPlayable();
      assertEquals(true, vuzeActivitiesEntry0.isPlayable());
      assertEquals(true, boolean0);
  }

  @Test
  public void test33()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry((-1346L), "httpDH7,Q", "httpDH7,Q", "httpDH7,Q", "httpDH7,Q", "httpDH7,Q");
          vuzeActivitiesEntry0.setReadOn(2028L);
          boolean boolean0 = vuzeActivitiesEntry0.canFlipRead();
          assertEquals(true, vuzeActivitiesEntry0.isRead());
          assertEquals(false, boolean0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test34()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry((-1346L), "httpDH7,Q", "httpDH7,Q", "httpDH7,Q", "httpDH7,Q", "httpDH7,Q");
          vuzeActivitiesEntry0.setRead(false);
          assertEquals(0L, vuzeActivitiesEntry0.getReadOn());
          assertEquals((-1346L), vuzeActivitiesEntry0.getTimestamp());
          assertEquals(true, vuzeActivitiesEntry0.getShowThumb());
          assertEquals("httpDH7,Q", vuzeActivitiesEntry0.getIconID());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test35()  throws Throwable  {
      VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry();
      vuzeActivitiesEntry0.setRead(true);
      assertEquals(true, vuzeActivitiesEntry0.getShowThumb());
  }

  @Test
  public void test36()  throws Throwable  {
      VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry();
      boolean boolean0 = vuzeActivitiesEntry0.isRead();
      assertEquals(true, vuzeActivitiesEntry0.getShowThumb());
      assertEquals(false, boolean0);
  }

  @Test
  public void test37()  throws Throwable  {
      VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry(1L, "=t'c.ps", "=t'c.ps");
      assertNotNull(vuzeActivitiesEntry0);
      
      vuzeActivitiesEntry0.setReadOn(1L);
      boolean boolean0 = vuzeActivitiesEntry0.isRead();
      assertEquals(1L, vuzeActivitiesEntry0.getReadOn());
      assertEquals(true, boolean0);
  }

  @Test
  public void test38()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry((-606L), "%_\"W", "%_\"W", "%_\"W", "%_\"W", "%_\"W");
          assertNotNull(vuzeActivitiesEntry0);
          
          boolean boolean0 = vuzeActivitiesEntry0.canFlipRead();
          assertEquals("image.vuze-entry.%_\"W", vuzeActivitiesEntry0.getIconID());
          assertEquals(true, vuzeActivitiesEntry0.getShowThumb());
          assertEquals(false, boolean0);
          assertEquals((-606L), vuzeActivitiesEntry0.getTimestamp());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
