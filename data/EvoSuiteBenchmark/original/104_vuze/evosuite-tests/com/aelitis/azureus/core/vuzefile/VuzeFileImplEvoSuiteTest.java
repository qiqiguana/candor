/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.vuzefile;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.vuzefile.VuzeFileComponent;
import com.aelitis.azureus.core.vuzefile.VuzeFileHandler;
import com.aelitis.azureus.core.vuzefile.VuzeFileImpl;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class VuzeFileImplEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      VuzeFileHandler vuzeFileHandler0 = VuzeFileHandler.getSingleton();
      VuzeFileImpl vuzeFileImpl0 = new VuzeFileImpl(vuzeFileHandler0);
      // Undeclared exception!
      try {
        vuzeFileImpl0.write((File) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * name can't be null
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      VuzeFileHandler vuzeFileHandler0 = VuzeFileHandler.getSingleton();
      VuzeFileImpl vuzeFileImpl0 = new VuzeFileImpl(vuzeFileHandler0);
      Map<Object, Object> map0 = vuzeFileImpl0.exportToMap();
      assertNotNull(map0);
      
      vuzeFileImpl0.addComponent(0, (Map) map0);
      byte[] byteArray0 = vuzeFileImpl0.exportToBytes();
      VuzeFileImpl vuzeFileImpl1 = (VuzeFileImpl)vuzeFileHandler0.loadVuzeFile(byteArray0);
      assertEquals("None", vuzeFileImpl0.getName());
      assertEquals("None", vuzeFileImpl1.getName());
  }

  @Test
  public void test2()  throws Throwable  {
      VuzeFileHandler vuzeFileHandler0 = VuzeFileHandler.getSingleton();
      VuzeFileImpl vuzeFileImpl0 = new VuzeFileImpl(vuzeFileHandler0);
      VuzeFileComponent[] vuzeFileComponentArray0 = vuzeFileImpl0.getComponents();
      assertNotNull(vuzeFileComponentArray0);
  }

  @Test
  public void test3()  throws Throwable  {
      VuzeFileImpl vuzeFileImpl0 = new VuzeFileImpl((VuzeFileHandler) null);
      HashMap<List<Integer>, List<Long>> hashMap0 = new HashMap<List<Integer>, List<Long>>();
      VuzeFileImpl.comp vuzeFileImpl_comp0 = vuzeFileImpl0.new comp(4, (Map) hashMap0);
      vuzeFileImpl_comp0.isProcessed();
      assertEquals("Condition Check", vuzeFileImpl_comp0.getTypeName());
      assertEquals(4, vuzeFileImpl_comp0.getType());
  }

  @Test
  public void test4()  throws Throwable  {
      VuzeFileHandler vuzeFileHandler0 = VuzeFileHandler.getSingleton();
      VuzeFileImpl vuzeFileImpl0 = new VuzeFileImpl(vuzeFileHandler0);
      Map<Object, Object> map0 = vuzeFileImpl0.exportToMap();
      assertNotNull(map0);
      
      VuzeFileImpl.comp vuzeFileImpl_comp0 = vuzeFileImpl0.new comp(64, (Map) map0);
      vuzeFileImpl_comp0.setProcessed();
      assertEquals(true, vuzeFileImpl_comp0.isProcessed());
      assertEquals(64, vuzeFileImpl_comp0.getType());
  }

  @Test
  public void test5()  throws Throwable  {
      VuzeFileImpl vuzeFileImpl0 = new VuzeFileImpl((VuzeFileHandler) null);
      Map<Object, Object> map0 = vuzeFileImpl0.exportToMap();
      assertNotNull(map0);
      
      vuzeFileImpl0.addComponent(0, (Map) map0);
      vuzeFileImpl0.addComponent(0, (Map) map0);
      String string0 = vuzeFileImpl0.getName();
      assertNotNull(string0);
      assertEquals("None,None", vuzeFileImpl0.getName());
      assertEquals("None,None", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      VuzeFileHandler vuzeFileHandler0 = VuzeFileHandler.getSingleton();
      VuzeFileImpl vuzeFileImpl0 = new VuzeFileImpl(vuzeFileHandler0);
      Map<Object, Object> map0 = vuzeFileImpl0.exportToMap();
      assertNotNull(map0);
      
      VuzeFileImpl.comp vuzeFileImpl_comp0 = vuzeFileImpl0.new comp(1361, (Map) map0);
      String string0 = vuzeFileImpl_comp0.getTypeName();
      assertEquals(1, map0.size());
      assertEquals("Unknown", string0);
      assertEquals(1361, vuzeFileImpl_comp0.getType());
  }

  @Test
  public void test7()  throws Throwable  {
      VuzeFileImpl vuzeFileImpl0 = new VuzeFileImpl((VuzeFileHandler) null);
      Map<Object, Object> map0 = vuzeFileImpl0.exportToMap();
      assertNotNull(map0);
      
      vuzeFileImpl0.addComponent(1, (Map) map0);
      String string0 = vuzeFileImpl0.getName();
      assertEquals("Search Template", vuzeFileImpl0.getName());
      assertNotNull(string0);
      assertEquals("Search Template", string0);
  }

  @Test
  public void test8()  throws Throwable  {
      VuzeFileHandler vuzeFileHandler0 = VuzeFileHandler.getSingleton();
      VuzeFileImpl vuzeFileImpl0 = new VuzeFileImpl(vuzeFileHandler0);
      VuzeFileImpl.comp vuzeFileImpl_comp0 = vuzeFileImpl0.new comp((int) (byte)2, (Map) null);
      String string0 = vuzeFileImpl_comp0.getTypeName();
      assertEquals("Navigation", string0);
  }

  @Test
  public void test9()  throws Throwable  {
      VuzeFileImpl vuzeFileImpl0 = new VuzeFileImpl((VuzeFileHandler) null);
      HashMap<List<Integer>, List<Long>> hashMap0 = new HashMap<List<Integer>, List<Long>>();
      VuzeFileImpl.comp vuzeFileImpl_comp0 = vuzeFileImpl0.new comp(4, (Map) hashMap0);
      String string0 = vuzeFileImpl_comp0.getTypeName();
      assertEquals("Condition Check", string0);
  }

  @Test
  public void test10()  throws Throwable  {
      VuzeFileImpl vuzeFileImpl0 = new VuzeFileImpl((VuzeFileHandler) null);
      HashMap<List<Integer>, List<Long>> hashMap0 = new HashMap<List<Integer>, List<Long>>();
      VuzeFileImpl.comp vuzeFileImpl_comp0 = vuzeFileImpl0.new comp(8, (Map) hashMap0);
      String string0 = vuzeFileImpl_comp0.getTypeName();
      assertEquals("Plugin", string0);
  }

  @Test
  public void test11()  throws Throwable  {
      VuzeFileImpl vuzeFileImpl0 = new VuzeFileImpl((VuzeFileHandler) null);
      HashMap<List<Integer>, List<Long>> hashMap0 = new HashMap<List<Integer>, List<Long>>();
      VuzeFileImpl.comp vuzeFileImpl_comp0 = vuzeFileImpl0.new comp(16, (Map) hashMap0);
      String string0 = vuzeFileImpl_comp0.getTypeName();
      assertEquals(16, vuzeFileImpl_comp0.getType());
      assertEquals("Subscription", string0);
  }

  @Test
  public void test12()  throws Throwable  {
      VuzeFileHandler vuzeFileHandler0 = VuzeFileHandler.getSingleton();
      VuzeFileImpl vuzeFileImpl0 = new VuzeFileImpl(vuzeFileHandler0);
      Map<Object, Object> map0 = vuzeFileImpl0.exportToMap();
      assertNotNull(map0);
      
      VuzeFileImpl.comp vuzeFileImpl_comp0 = vuzeFileImpl0.new comp(32, (Map) map0);
      String string0 = vuzeFileImpl_comp0.getTypeName();
      assertEquals(32, vuzeFileImpl_comp0.getType());
      assertEquals(1, map0.size());
      assertEquals("Subscription", string0);
  }

  @Test
  public void test13()  throws Throwable  {
      VuzeFileHandler vuzeFileHandler0 = VuzeFileHandler.getSingleton();
      VuzeFileImpl vuzeFileImpl0 = new VuzeFileImpl(vuzeFileHandler0);
      Map<Object, Object> map0 = vuzeFileImpl0.exportToMap();
      assertNotNull(map0);
      
      VuzeFileImpl.comp vuzeFileImpl_comp0 = vuzeFileImpl0.new comp(64, (Map) map0);
      String string0 = vuzeFileImpl_comp0.getTypeName();
      assertEquals(1, map0.size());
      assertEquals("Customization", string0);
  }

  @Test
  public void test14()  throws Throwable  {
      VuzeFileHandler vuzeFileHandler0 = VuzeFileHandler.getSingleton();
      VuzeFileImpl vuzeFileImpl0 = new VuzeFileImpl(vuzeFileHandler0);
      VuzeFileImpl.comp vuzeFileImpl_comp0 = vuzeFileImpl0.new comp(128, (Map) null);
      String string0 = vuzeFileImpl_comp0.getTypeName();
      assertEquals("Content Network", string0);
  }

  @Test
  public void test15()  throws Throwable  {
      VuzeFileHandler vuzeFileHandler0 = VuzeFileHandler.getSingleton();
      VuzeFileImpl vuzeFileImpl0 = new VuzeFileImpl(vuzeFileHandler0);
      Map<Object, Object> map0 = vuzeFileImpl0.exportToMap();
      assertNotNull(map0);
      
      VuzeFileImpl.comp vuzeFileImpl_comp0 = vuzeFileImpl0.new comp(256, (Map) map0);
      String string0 = vuzeFileImpl_comp0.getTypeName();
      assertEquals("Search Operation", string0);
      assertEquals(1, map0.size());
  }

  @Test
  public void test16()  throws Throwable  {
      VuzeFileHandler vuzeFileHandler0 = VuzeFileHandler.getSingleton();
      VuzeFileImpl vuzeFileImpl0 = new VuzeFileImpl(vuzeFileHandler0);
      Map<Object, Object> map0 = vuzeFileImpl0.exportToMap();
      assertNotNull(map0);
      
      VuzeFileImpl.comp vuzeFileImpl_comp0 = vuzeFileImpl0.new comp(48, (Map) map0);
      vuzeFileImpl_comp0.setData((Object) null, (Object) "");
      vuzeFileImpl_comp0.setData((Object) map0, (Object) "/");
      assertEquals(48, vuzeFileImpl_comp0.getType());
      assertEquals(1, map0.size());
  }

  @Test
  public void test17()  throws Throwable  {
      VuzeFileHandler vuzeFileHandler0 = VuzeFileHandler.getSingleton();
      VuzeFileImpl vuzeFileImpl0 = new VuzeFileImpl(vuzeFileHandler0);
      Map<Object, Object> map0 = vuzeFileImpl0.exportToMap();
      assertNotNull(map0);
      
      VuzeFileImpl.comp vuzeFileImpl_comp0 = vuzeFileImpl0.new comp(48, (Map) map0);
      vuzeFileImpl_comp0.setData((Object) null, (Object) "");
      String string0 = (String)vuzeFileImpl_comp0.getData((Object) "");
      assertEquals(48, vuzeFileImpl_comp0.getType());
      assertEquals(1, map0.size());
      assertNull(string0);
      assertEquals("Unknown", vuzeFileImpl_comp0.getTypeName());
  }

  @Test
  public void test18()  throws Throwable  {
      VuzeFileHandler vuzeFileHandler0 = VuzeFileHandler.getSingleton();
      VuzeFileImpl vuzeFileImpl0 = new VuzeFileImpl(vuzeFileHandler0);
      Map<Object, Object> map0 = vuzeFileImpl0.exportToMap();
      assertNotNull(map0);
      
      VuzeFileImpl.comp vuzeFileImpl_comp0 = vuzeFileImpl0.new comp(256, (Map) map0);
      vuzeFileImpl_comp0.getData((Object) "Search Operation");
      assertEquals(1, map0.size());
      assertEquals(256, vuzeFileImpl_comp0.getType());
      assertEquals(false, map0.isEmpty());
  }
}
