/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.peermanager.peerdb;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.peermanager.peerdb.PeerItem;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PeerItemEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      PeerItem peerItem0 = new PeerItem("", 0, (byte) (-1), (byte) (-1), (int) (byte) (-1), (byte) (-1), 0);
      assertNotNull(peerItem0);
      
      byte byte0 = peerItem0.getHandshakeType();
      assertEquals(-1, peerItem0.getSource());
      assertEquals((byte) (-1), byte0);
      assertEquals(65535, peerItem0.getUDPPort());
      assertEquals(0, peerItem0.getTCPPort());
      assertEquals(-1, peerItem0.getCryptoLevel());
  }

  @Test
  public void test1()  throws Throwable  {
      PeerItem peerItem0 = new PeerItem("", 0, (byte) (-1), (byte) (-1), (int) (byte) (-1), (byte) (-1), 0);
      assertNotNull(peerItem0);
      
      int int0 = peerItem0.getUDPPort();
      assertEquals(-1, peerItem0.getSource());
      assertEquals(0, peerItem0.getTCPPort());
      assertEquals(-1, peerItem0.getCryptoLevel());
      assertEquals(-1, peerItem0.getHandshakeType());
      assertEquals(65535, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      PeerItem peerItem0 = new PeerItem("", (int) (byte)0, (byte)0, (byte)0, 1629, (byte)0, 1629);
      assertNotNull(peerItem0);
      
      byte byte0 = peerItem0.getSource();
      assertEquals(0, peerItem0.getTCPPort());
      assertEquals((byte)0, byte0);
      assertEquals(0, peerItem0.getHandshakeType());
      assertEquals(0, peerItem0.getCryptoLevel());
      assertEquals(1629, peerItem0.getUDPPort());
  }

  @Test
  public void test3()  throws Throwable  {
      PeerItem peerItem0 = new PeerItem("", 0, (byte) (-1), (byte) (-1), (int) (byte) (-1), (byte) (-1), 0);
      assertNotNull(peerItem0);
      
      int int0 = peerItem0.getTCPPort();
      assertEquals(0, int0);
      assertEquals(-1, peerItem0.getSource());
      assertEquals(-1, peerItem0.getHandshakeType());
      assertEquals(65535, peerItem0.getUDPPort());
      assertEquals(-1, peerItem0.getCryptoLevel());
  }

  @Test
  public void test4()  throws Throwable  {
      PeerItem peerItem0 = new PeerItem("", (int) (byte)0, (byte)0, (byte)0, 1629, (byte)0, 1629);
      assertNotNull(peerItem0);
      
      String string0 = peerItem0.getIP();
      assertEquals(1629, peerItem0.getUDPPort());
      assertEquals(0, peerItem0.getTCPPort());
      assertEquals("127.0.0.1", string0);
      assertNotNull(string0);
      assertEquals(0, peerItem0.getHandshakeType());
      assertEquals(0, peerItem0.getCryptoLevel());
      assertEquals(0, peerItem0.getSource());
  }

  @Test
  public void test5()  throws Throwable  {
      PeerItem peerItem0 = new PeerItem((String) null, 0, (byte)6, (byte)6, 0, (byte) (-1), (-921));
      assertNotNull(peerItem0);
      
      byte byte0 = peerItem0.getCryptoLevel();
      assertEquals((byte) (-1), byte0);
      assertEquals(0, peerItem0.getUDPPort());
      assertEquals(0, peerItem0.getTCPPort());
      assertEquals(6, peerItem0.getHandshakeType());
      assertEquals(6, peerItem0.getSource());
  }

  @Test
  public void test6()  throws Throwable  {
      PeerItem peerItem0 = new PeerItem((String) null, 0, (byte)6, (byte)6, 0, (byte) (-1), (-921));
      assertNotNull(peerItem0);
      
      String string0 = peerItem0.getPeerSource();
      assertEquals("<unknown>", string0);
      assertEquals(6, peerItem0.getHandshakeType());
      assertEquals(0, peerItem0.getTCPPort());
      assertNotNull(string0);
      assertEquals(6, peerItem0.getSource());
      assertEquals(0, peerItem0.getUDPPort());
      assertEquals(-1, peerItem0.getCryptoLevel());
  }

  @Test
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      PeerItem peerItem0 = new PeerItem(byteArray0, (byte) (-78), (byte) (-78), (int) (byte)0);
      assertNotNull(peerItem0);
      
      int int0 = peerItem0.hashCode();
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", peerItem0.getAddressString());
      assertEquals(0, int0);
      assertEquals(-78, peerItem0.getSource());
  }

  @Test
  public void test8()  throws Throwable  {
      PeerItem peerItem0 = new PeerItem("", 0, (byte) (-1), (byte) (-1), (int) (byte) (-1), (byte) (-1), 0);
      assertNotNull(peerItem0);
      
      byte[] byteArray0 = peerItem0.getSerialization();
      assertEquals(-1, peerItem0.getCryptoLevel());
      assertNotNull(byteArray0);
      assertEquals(0, peerItem0.getTCPPort());
      assertEquals(65535, peerItem0.getUDPPort());
      assertEquals(-1, peerItem0.getSource());
      assertEquals(-1, peerItem0.getHandshakeType());
  }

  @Test
  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      PeerItem peerItem0 = null;
      try {
        peerItem0 = new PeerItem(byteArray0, (byte)85, (byte)0, (int) (byte)85);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * PeerItem: invalid serialisation length - 5
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[38];
      PeerItem peerItem0 = null;
      try {
        peerItem0 = new PeerItem(byteArray0, (byte)17, (byte)17, (int) (byte)17);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * PeerItem: invalid serialisation length - 38
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      PeerItem peerItem0 = new PeerItem("", (int) (byte)0, (byte)0, (byte)0, 1629, (byte)0, 1629);
      assertNotNull(peerItem0);
      
      boolean boolean0 = peerItem0.useCrypto();
      assertEquals(0, peerItem0.getTCPPort());
      assertEquals(1629, peerItem0.getUDPPort());
      assertEquals(false, boolean0);
      assertEquals("Tracker", peerItem0.getPeerSource());
      assertEquals(0, peerItem0.getHandshakeType());
  }

  @Test
  public void test12()  throws Throwable  {
      PeerItem peerItem0 = new PeerItem((String) null, 0, (byte)6, (byte)6, 0, (byte) (-1), (-921));
      assertNotNull(peerItem0);
      
      boolean boolean0 = peerItem0.useCrypto();
      assertEquals(true, boolean0);
      assertEquals(6, peerItem0.getSource());
      assertEquals(-1, peerItem0.getCryptoLevel());
      assertEquals(6, peerItem0.getHandshakeType());
      assertEquals(0, peerItem0.getTCPPort());
      assertEquals(0, peerItem0.getUDPPort());
  }

  @Test
  public void test13()  throws Throwable  {
      PeerItem peerItem0 = new PeerItem("", (int) (byte)0, (byte)0, (byte)0, 1629, (byte)0, 1629);
      assertNotNull(peerItem0);
      
      byte[] byteArray0 = new byte[7];
      PeerItem peerItem1 = new PeerItem(byteArray0, (byte)94, (byte)0, 1629);
      assertNotNull(peerItem1);
      
      boolean boolean0 = peerItem0.equals((Object) peerItem1);
      assertEquals(94, peerItem1.getSource());
      assertEquals(false, boolean0);
      assertEquals(0, peerItem0.getSource());
      assertEquals(0, peerItem0.getHandshakeType());
      assertEquals(0, peerItem0.getTCPPort());
      assertEquals("\u0000\u0000\u0000\u0000\u0000", peerItem1.getIP());
      assertEquals(0, peerItem1.getTCPPort());
      assertEquals(1629, peerItem0.getUDPPort());
      assertEquals(false, peerItem0.useCrypto());
  }

  @Test
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      PeerItem peerItem0 = new PeerItem(byteArray0, (byte)3, (byte)0, (int) (byte)3);
      assertNotNull(peerItem0);
      
      boolean boolean0 = peerItem0.equals((Object) null);
      assertEquals(0, peerItem0.getTCPPort());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", peerItem0.getAddressString());
      assertEquals("Plugin", peerItem0.getPeerSource());
      assertEquals(false, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      PeerItem peerItem0 = new PeerItem(byteArray0, (byte) (-78), (byte) (-78), (int) (byte)0);
      assertNotNull(peerItem0);
      
      boolean boolean0 = peerItem0.equals((Object) "Incoming");
      assertEquals(false, boolean0);
      assertEquals(0, peerItem0.getTCPPort());
      assertEquals(-78, peerItem0.getSource());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", peerItem0.getAddressString());
  }

  @Test
  public void test16()  throws Throwable  {
      PeerItem peerItem0 = new PeerItem("", (int) (byte)0, (byte)0, (byte)0, 1629, (byte)0, 1629);
      assertNotNull(peerItem0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte)28;
      PeerItem peerItem1 = new PeerItem(byteArray0, (byte)0, (byte)28, (int) (byte)0);
      assertNotNull(peerItem1);
      
      boolean boolean0 = peerItem0.equals((Object) peerItem1);
      assertEquals(1629, peerItem0.getUDPPort());
      assertEquals(7168, peerItem1.getTCPPort());
      assertEquals(0, peerItem0.getHandshakeType());
      assertEquals("Tracker", peerItem0.getPeerSource());
      assertEquals(false, boolean0);
      assertEquals(0, peerItem0.getTCPPort());
      assertEquals(0, peerItem0.getCryptoLevel());
      assertEquals(true, peerItem1.isIPv4());
      assertEquals("Tracker", peerItem1.getPeerSource());
  }

  @Test
  public void test17()  throws Throwable  {
      PeerItem peerItem0 = new PeerItem("", (int) (byte)0, (byte)0, (byte)0, 1629, (byte)0, 1629);
      assertNotNull(peerItem0);
      
      byte[] byteArray0 = new byte[7];
      PeerItem peerItem1 = new PeerItem(byteArray0, (byte)0, (byte)28, (int) (byte)0);
      assertNotNull(peerItem1);
      
      peerItem0.equals((Object) peerItem1);
      assertEquals(0, peerItem0.getCryptoLevel());
      assertEquals(0, peerItem0.getTCPPort());
      assertEquals(0, peerItem0.getHandshakeType());
      assertEquals(1629, peerItem0.getUDPPort());
      assertEquals("\u0000\u0000\u0000\u0000\u0000", peerItem1.getAddressString());
      assertEquals("Tracker", peerItem0.getPeerSource());
      assertEquals(0, peerItem1.getTCPPort());
      assertEquals("\u0000\u0000\u0000\u0000\u0000", peerItem1.getIP());
  }

  @Test
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[28];
      PeerItem peerItem0 = new PeerItem(byteArray0, (byte)1, (byte)1, (int) (byte)1);
      assertNotNull(peerItem0);
      
      PeerItem peerItem1 = new PeerItem(byteArray0, (byte)0, (byte)0, (int) (byte)1);
      boolean boolean0 = peerItem0.equals((Object) peerItem1);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", peerItem1.getIP());
      assertFalse(peerItem1.equals(peerItem0));
      assertEquals(false, boolean0);
      assertEquals(1, peerItem0.getSource());
      assertEquals(0, peerItem0.getTCPPort());
  }

  @Test
  public void test19()  throws Throwable  {
      PeerItem peerItem0 = new PeerItem("", 0, (byte) (-1), (byte) (-1), (int) (byte) (-1), (byte) (-1), 0);
      assertNotNull(peerItem0);
      
      PeerItem peerItem1 = new PeerItem("", (int) (byte)0, (byte) (-1), (byte) (-1), (int) (byte) (-1), (byte) (-1), 0);
      boolean boolean0 = peerItem0.equals((Object) peerItem1);
      assertEquals(-1, peerItem1.getHandshakeType());
      assertEquals(true, boolean0);
      assertEquals(-1, peerItem1.getSource());
      assertEquals(65535, peerItem1.getUDPPort());
      assertEquals(-1, peerItem1.getCryptoLevel());
      assertEquals(0, peerItem1.getTCPPort());
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = PeerItem.convertSourceString((byte)0);
      assertEquals("Tracker", string0);
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = PeerItem.convertSourceString((byte)1);
      assertEquals("DHT", string0);
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = PeerItem.convertSourceString((byte)2);
      assertEquals("PeerExchange", string0);
  }

  @Test
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      PeerItem peerItem0 = new PeerItem(byteArray0, (byte)3, (byte)0, (int) (byte)3);
      assertNotNull(peerItem0);
      
      String string0 = peerItem0.getPeerSource();
      assertEquals("Plugin", string0);
      assertEquals(0, peerItem0.getTCPPort());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", peerItem0.getAddressString());
      assertNotNull(string0);
  }

  @Test
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      PeerItem peerItem0 = new PeerItem(byteArray0, (byte)4, (byte) (-78), 0);
      assertNotNull(peerItem0);
      
      String string0 = peerItem0.getPeerSource();
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", peerItem0.getIP());
      assertEquals(0, peerItem0.getTCPPort());
      assertEquals("Incoming", string0);
  }

  @Test
  public void test25()  throws Throwable  {
      byte byte0 = PeerItem.convertSourceID("");
      assertEquals((byte) (-1), byte0);
  }

  @Test
  public void test26()  throws Throwable  {
      byte byte0 = PeerItem.convertSourceID("Tracker");
      assertEquals((byte)0, byte0);
  }

  @Test
  public void test27()  throws Throwable  {
      byte byte0 = PeerItem.convertSourceID("DHT");
      assertEquals((byte)1, byte0);
  }

  @Test
  public void test28()  throws Throwable  {
      byte byte0 = PeerItem.convertSourceID("PeerExchange");
      assertEquals((byte)2, byte0);
  }

  @Test
  public void test29()  throws Throwable  {
      byte byte0 = PeerItem.convertSourceID("Plugin");
      assertEquals((byte)3, byte0);
  }

  @Test
  public void test30()  throws Throwable  {
      byte byte0 = PeerItem.convertSourceID("Incoming");
      assertEquals((byte)4, byte0);
  }

  @Test
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[28];
      PeerItem peerItem0 = new PeerItem(byteArray0, (byte)6, (byte)0, (int) (byte)0);
      assertNotNull(peerItem0);
      
      boolean boolean0 = peerItem0.isIPv4();
      assertEquals(6, peerItem0.getSource());
      assertEquals(false, boolean0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", peerItem0.getAddressString());
      assertEquals(0, peerItem0.getTCPPort());
  }

  @Test
  public void test32()  throws Throwable  {
      PeerItem peerItem0 = new PeerItem("", 0, (byte) (-1), (byte) (-1), (int) (byte) (-1), (byte) (-1), 0);
      assertNotNull(peerItem0);
      
      boolean boolean0 = peerItem0.isIPv4();
      assertEquals(-1, peerItem0.getCryptoLevel());
      assertEquals(65535, peerItem0.getUDPPort());
      assertEquals(-1, peerItem0.getSource());
      assertEquals(0, peerItem0.getTCPPort());
      assertEquals(true, boolean0);
      assertEquals(-1, peerItem0.getHandshakeType());
  }
}
