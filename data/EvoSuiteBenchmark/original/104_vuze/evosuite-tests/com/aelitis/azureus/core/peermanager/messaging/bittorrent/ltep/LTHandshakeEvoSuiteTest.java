/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.peermanager.messaging.bittorrent.ltep;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.peermanager.messaging.MessageException;
import com.aelitis.azureus.core.peermanager.messaging.bittorrent.ltep.LTHandshake;
import java.util.HashMap;
import java.util.Map;
import org.gudy.azureus2.core3.util.DirectByteBuffer;
import org.gudy.azureus2.core3.util.DirectByteBufferPool;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class LTHandshakeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LTHandshake lTHandshake0 = new LTHandshake((Map) null, (byte)0);
      byte byte0 = lTHandshake0.getVersion();
      assertEquals((byte)0, byte0);
      assertEquals("LT_HANDSHAKE: de", lTHandshake0.getDescription());
  }

  @Test
  public void test1()  throws Throwable  {
      HashMap<Object, Map<Number, Number>> hashMap0 = new HashMap<Object, Map<Number, Number>>();
      LTHandshake lTHandshake0 = new LTHandshake((Map) hashMap0, (byte)65);
      String string0 = lTHandshake0.getFeatureID();
      assertEquals(65, lTHandshake0.getVersion());
      assertEquals("LT1", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      HashMap<Number, Map<Number, Long>> hashMap0 = new HashMap<Number, Map<Number, Long>>();
      LTHandshake lTHandshake0 = new LTHandshake((Map) hashMap0, (byte)57);
      byte[] byteArray0 = lTHandshake0.getIDBytes();
      assertNotNull(byteArray0);
      assertEquals(57, lTHandshake0.getVersion());
  }

  @Test
  public void test3()  throws Throwable  {
      LTHandshake lTHandshake0 = new LTHandshake((Map) null, (byte)0);
      Map<Object, Object> map0 = lTHandshake0.getDataMap();
      assertNotNull(map0);
      assertEquals(0, lTHandshake0.getVersion());
      assertEquals("LT_HANDSHAKE: de", lTHandshake0.getDescription());
  }

  @Test
  public void test4()  throws Throwable  {
      HashMap<Number, Map<Number, Long>> hashMap0 = new HashMap<Number, Map<Number, Long>>();
      LTHandshake lTHandshake0 = new LTHandshake((Map) hashMap0, (byte)57);
      int int0 = lTHandshake0.getFeatureSubID();
      assertEquals(0, int0);
      assertEquals(57, lTHandshake0.getVersion());
  }

  @Test
  public void test5()  throws Throwable  {
      HashMap<Map<Object, Long>, String> hashMap0 = new HashMap<Map<Object, Long>, String>();
      LTHandshake lTHandshake0 = new LTHandshake((Map) hashMap0, (byte) (-52));
      try {
        lTHandshake0.deserialize((DirectByteBuffer) null, (byte) (-52));
        fail("Expecting exception: MessageException");
      } catch(MessageException e) {
        /*
         * [lt_handshake] decode error: data == null
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      HashMap<Number, Map<Number, Long>> hashMap0 = new HashMap<Number, Map<Number, Long>>();
      LTHandshake lTHandshake0 = new LTHandshake((Map) hashMap0, (byte)57);
      int int0 = lTHandshake0.getType();
      assertEquals(57, lTHandshake0.getVersion());
      assertEquals(0, int0);
  }

  @Test
  public void test7()  throws Throwable  {
      LTHandshake lTHandshake0 = new LTHandshake((Map) null, (byte)15);
      // Undeclared exception!
      try {
        DirectByteBufferPool.getBuffer((byte)15, (byte)15);
        fail("Expecting exception: NoClassDefFoundError");
      } catch(NoClassDefFoundError e) {
        /*
         * Could not initialize class org.gudy.azureus2.core3.util.DirectByteBufferPool
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      LTHandshake lTHandshake0 = new LTHandshake((Map) null, (byte)15);
      // Undeclared exception!
      try {
        DirectByteBufferPool.getBuffer((byte)15, (byte)15);
        fail("Expecting exception: NoClassDefFoundError");
      } catch(NoClassDefFoundError e) {
        /*
         * Could not initialize class org.gudy.azureus2.core3.util.DirectByteBufferPool
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      LTHandshake lTHandshake0 = new LTHandshake((Map) null, (byte)0);
      // Undeclared exception!
      try {
        lTHandshake0.getData();
        fail("Expecting exception: NoClassDefFoundError");
      } catch(NoClassDefFoundError e) {
        /*
         * Could not initialize class org.gudy.azureus2.core3.util.DirectByteBufferPool
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      LTHandshake lTHandshake0 = new LTHandshake((Map) null, (byte)15);
      lTHandshake0.destroy();
      assertEquals(15, lTHandshake0.getVersion());
      assertEquals("LT_HANDSHAKE: de", lTHandshake0.getDescription());
      assertEquals("de", lTHandshake0.getBencodedString());
  }

  @Test
  public void test11()  throws Throwable  {
      LTHandshake lTHandshake0 = new LTHandshake((Map) null, (byte)0);
      // Undeclared exception!
      try {
        lTHandshake0.getData();
        fail("Expecting exception: NoClassDefFoundError");
      } catch(NoClassDefFoundError e) {
        /*
         * Could not initialize class org.gudy.azureus2.core3.util.DirectByteBufferPool
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      HashMap<Number, Map<Number, Long>> hashMap0 = new HashMap<Number, Map<Number, Long>>();
      LTHandshake lTHandshake0 = new LTHandshake((Map) hashMap0, (byte)57);
      String string0 = lTHandshake0.getDescription();
      String string1 = lTHandshake0.getDescription();
      assertEquals(57, lTHandshake0.getVersion());
      assertNotNull(string1);
      assertEquals("LT_HANDSHAKE: de", string1);
      assertSame(string1, string0);
  }

  @Test
  public void test13()  throws Throwable  {
      HashMap<Number, Map<Number, Long>> hashMap0 = new HashMap<Number, Map<Number, Long>>();
      LTHandshake lTHandshake0 = new LTHandshake((Map) hashMap0, (byte)57);
      lTHandshake0.getBencodedString();
      String string0 = lTHandshake0.getDescription();
      assertEquals(57, lTHandshake0.getVersion());
      assertNotNull(string0);
      assertEquals("LT_HANDSHAKE: de", string0);
  }

  @Test
  public void test14()  throws Throwable  {
      HashMap<Number, Map<Number, Long>> hashMap0 = new HashMap<Number, Map<Number, Long>>();
      LTHandshake lTHandshake0 = new LTHandshake((Map) hashMap0, (byte)57);
      lTHandshake0.getClientName();
      assertEquals(57, lTHandshake0.getVersion());
  }

  @Test
  public void test15()  throws Throwable  {
      HashMap<Object, Map<Number, Number>> hashMap0 = new HashMap<Object, Map<Number, Number>>();
      LTHandshake lTHandshake0 = new LTHandshake((Map) hashMap0, (byte)65);
      boolean boolean0 = lTHandshake0.isUploadOnly();
      assertEquals(false, boolean0);
      assertEquals(65, lTHandshake0.getVersion());
  }

  @Test
  public void test16()  throws Throwable  {
      LTHandshake lTHandshake0 = new LTHandshake((Map) null, (byte)0);
      lTHandshake0.getIPv6();
      assertEquals("LT_HANDSHAKE: de", lTHandshake0.getDescription());
      assertEquals(0, lTHandshake0.getVersion());
  }

  @Test
  public void test17()  throws Throwable  {
      HashMap<Map<Number, Integer>, Object> hashMap0 = new HashMap<Map<Number, Integer>, Object>();
      LTHandshake lTHandshake0 = new LTHandshake((Map) hashMap0, (byte)6);
      int int0 = lTHandshake0.getTCPListeningPort();
      assertEquals(6, lTHandshake0.getVersion());
      assertEquals(0, int0);
  }

  @Test
  public void test18()  throws Throwable  {
      HashMap<Map<Number, Integer>, Object> hashMap0 = new HashMap<Map<Number, Integer>, Object>();
      LTHandshake lTHandshake0 = new LTHandshake((Map) hashMap0, (byte)6);
      lTHandshake0.isCryptoRequested();
      assertEquals(6, lTHandshake0.getVersion());
  }

  @Test
  public void test19()  throws Throwable  {
      HashMap<Map<Object, Long>, String> hashMap0 = new HashMap<Map<Object, Long>, String>();
      LTHandshake lTHandshake0 = new LTHandshake((Map) hashMap0, (byte) (-52));
      lTHandshake0.addDefaultExtensionMappings(false, true);
      Map<Object, Object> map0 = lTHandshake0.getExtensionMapping();
      assertEquals(1, hashMap0.size());
      assertEquals(false, map0.isEmpty());
  }

  @Test
  public void test20()  throws Throwable  {
      HashMap<Number, Map<Number, Long>> hashMap0 = new HashMap<Number, Map<Number, Long>>();
      LTHandshake lTHandshake0 = new LTHandshake((Map) hashMap0, (byte)57);
      Map<Object, Object> map0 = lTHandshake0.getExtensionMapping();
      assertEquals(57, lTHandshake0.getVersion());
      assertNotNull(map0);
  }

  @Test
  public void test21()  throws Throwable  {
      HashMap<Object, Map<String, Object>> hashMap0 = new HashMap<Object, Map<String, Object>>();
      LTHandshake lTHandshake0 = new LTHandshake((Map) hashMap0, (byte)72);
      int int0 = lTHandshake0.getMetadataSize();
      assertEquals(0, int0);
      assertEquals(72, lTHandshake0.getVersion());
  }

  @Test
  public void test22()  throws Throwable  {
      HashMap<Object, Map<String, Object>> hashMap0 = new HashMap<Object, Map<String, Object>>();
      LTHandshake lTHandshake0 = new LTHandshake((Map) hashMap0, (byte)72);
      lTHandshake0.addDefaultExtensionMappings(false, false);
      assertEquals(72, lTHandshake0.getVersion());
      assertEquals("{}", hashMap0.toString());
  }

  @Test
  public void test23()  throws Throwable  {
      HashMap<Map<Number, Integer>, Object> hashMap0 = new HashMap<Map<Number, Integer>, Object>();
      LTHandshake lTHandshake0 = new LTHandshake((Map) hashMap0, (byte)6);
      lTHandshake0.addDefaultExtensionMappings(true, false);
      lTHandshake0.addDefaultExtensionMappings(true, true);
      assertEquals("{m={ut_metadata=3, ut_pex=1}}", hashMap0.toString());
      assertEquals(1, hashMap0.size());
  }
}
