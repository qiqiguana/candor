/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.cnetwork.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.cnetwork.ContentNetwork;
import com.aelitis.azureus.core.cnetwork.ContentNetworkException;
import com.aelitis.azureus.core.cnetwork.ContentNetworkListener;
import com.aelitis.azureus.core.cnetwork.impl.ContentNetworkImpl;
import com.aelitis.azureus.core.cnetwork.impl.ContentNetworkManagerImpl;
import com.aelitis.azureus.core.cnetwork.impl.ContentNetworkVuzeGeneric;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.Writer;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.runtime.System;
import org.evosuite.sandbox.Sandbox;
import org.gudy.azureus2.core3.util.IndentWriter;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ContentNetworkManagerImplEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          ContentNetworkManagerImpl contentNetworkManagerImpl0 = new ContentNetworkManagerImpl();
          contentNetworkManagerImpl0.checkForUpdates();
          contentNetworkManagerImpl0.checkForUpdates();
          contentNetworkManagerImpl0.addContentNetwork(1607L);
          contentNetworkManagerImpl0.getStartupContentNetwork();
          ContentNetworkManagerImpl contentNetworkManagerImpl1 = new ContentNetworkManagerImpl();
          assertFalse(contentNetworkManagerImpl1.equals(contentNetworkManagerImpl0));
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          ContentNetworkManagerImpl contentNetworkManagerImpl0 = new ContentNetworkManagerImpl();
          contentNetworkManagerImpl0.loadConfig();
          ContentNetworkManagerImpl.preInitialise();
          HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
          ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric(contentNetworkManagerImpl0, (-1831L), (-1831L), ",", (Map<String, Object>) hashMap0, (Set<Integer>) null, ",", ")E]=S?@P04:`W", ")E]=S?@P04:`W", ",", ")E]=S?@P04:`W", ")E]=S?@P04:`W", ")E]=S?@P04:`W", ",", ")E]=S?@P04:`W", ",");
          contentNetworkManagerImpl0.getContentNetworkForURL(",");
          contentNetworkManagerImpl0.addContentNetwork((-1831L));
          contentNetworkManagerImpl0.removeNetwork((ContentNetworkImpl) contentNetworkVuzeGeneric0);
          assertEquals((-1831L), contentNetworkVuzeGeneric0.getID());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          System.setCurrentTimeMillis((-1056L));
          ContentNetworkManagerImpl contentNetworkManagerImpl0 = new ContentNetworkManagerImpl();
          contentNetworkManagerImpl0.getContentNetworkForURL("HMACSHA1");
          ContentNetworkManagerImpl contentNetworkManagerImpl1 = new ContentNetworkManagerImpl();
          // Undeclared exception!
          try {
            contentNetworkManagerImpl1.saveConfig();
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission /home/ac1gf/.azureus/cnetworks.config delete)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkDelete(SecurityManager.java:990)
             * java.io.File.delete(File.java:902)
             * org.gudy.azureus2.core3.util.FileUtil.deleteResilientConfigFile(FileUtil.java:921)
             * com.aelitis.azureus.core.cnetwork.impl.ContentNetworkManagerImpl.saveConfig(ContentNetworkManagerImpl.java:500)
             * sun.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          ContentNetworkManagerImpl contentNetworkManagerImpl0 = new ContentNetworkManagerImpl();
          HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
          HashSet<Integer> hashSet0 = new HashSet<Integer>();
          ContentNetworkVuzeGeneric contentNetworkVuzeGeneric0 = new ContentNetworkVuzeGeneric(contentNetworkManagerImpl0, 1807L, 0L, "l4B&&`Sf}4$r", (Map<String, Object>) hashMap0, (Set<Integer>) hashSet0, "l4B&&`Sf}4$r", "l4B&&`Sf}4$r", "l4B&&`Sf}4$r", "l4B&&`Sf}4$r", "l4B&&`Sf}4$r", "", "l4B&&`Sf}4$r", "", "");
          ContentNetworkVuzeGeneric contentNetworkVuzeGeneric1 = (ContentNetworkVuzeGeneric)contentNetworkManagerImpl0.addNetwork((ContentNetworkImpl) contentNetworkVuzeGeneric0);
          contentNetworkManagerImpl0.addNetwork((ContentNetworkImpl) contentNetworkVuzeGeneric1);
          ContentNetworkManagerImpl contentNetworkManagerImpl1 = new ContentNetworkManagerImpl();
          contentNetworkManagerImpl1.loadConfig();
          contentNetworkManagerImpl1.checkForUpdates();
          contentNetworkManagerImpl1.addContentNetwork(1420L);
          contentNetworkManagerImpl1.addContentNetwork(1420L);
          contentNetworkManagerImpl1.getContentNetworks();
          ContentNetworkManagerImpl contentNetworkManagerImpl2 = (ContentNetworkManagerImpl)ContentNetworkManagerImpl.getSingleton();
          assertFalse(contentNetworkManagerImpl2.equals(contentNetworkManagerImpl0));
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          ContentNetworkManagerImpl contentNetworkManagerImpl0 = new ContentNetworkManagerImpl();
          contentNetworkManagerImpl0.addContentNetwork(1L);
          ContentNetworkManagerImpl contentNetworkManagerImpl1 = new ContentNetworkManagerImpl();
          contentNetworkManagerImpl1.getContentNetwork(24L);
          contentNetworkManagerImpl1.removeNetwork((ContentNetworkImpl) null);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          ContentNetworkManagerImpl contentNetworkManagerImpl0 = new ContentNetworkManagerImpl();
          HashMap<List<ContentNetworkListener>, String> hashMap0 = new HashMap<List<ContentNetworkListener>, String>();
          contentNetworkManagerImpl0.loadConfig();
          try {
            contentNetworkManagerImpl0.importNetwork((Map) hashMap0);
            fail("Expecting exception: IOException");
          } catch(IOException e) {
            /*
             * Unsupported network type: 0
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          ContentNetworkManagerImpl contentNetworkManagerImpl0 = new ContentNetworkManagerImpl();
          contentNetworkManagerImpl0.getStartupContentNetwork();
          ContentNetworkManagerImpl contentNetworkManagerImpl1 = new ContentNetworkManagerImpl();
          contentNetworkManagerImpl1.checkForUpdates();
          ContentNetworkManagerImpl contentNetworkManagerImpl2 = new ContentNetworkManagerImpl();
          HashMap<ContentNetwork, List<ContentNetwork>> hashMap0 = new HashMap<ContentNetwork, List<ContentNetwork>>();
          contentNetworkManagerImpl0.getContentNetwork((-1403L));
          try {
            contentNetworkManagerImpl1.importNetwork((Map) hashMap0);
            fail("Expecting exception: IOException");
          } catch(IOException e) {
            /*
             * Unsupported network type: 0
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          ContentNetworkManagerImpl contentNetworkManagerImpl0 = new ContentNetworkManagerImpl();
          PipedWriter pipedWriter0 = new PipedWriter();
          PrintWriter printWriter0 = new PrintWriter((Writer) pipedWriter0, true);
          PrintWriter printWriter1 = printWriter0.append('=');
          PrintWriter printWriter2 = printWriter1.append((CharSequence) null);
          Locale locale0 = Locale.CANADA_FRENCH;
          Object[] objectArray0 = new Object[8];
          Object object0 = new Object();
          objectArray0[0] = object0;
          objectArray0[1] = (Object) printWriter2;
          objectArray0[2] = (Object) true;
          objectArray0[3] = (Object) '=';
          objectArray0[4] = (Object) printWriter0;
          objectArray0[5] = (Object) pipedWriter0;
          objectArray0[6] = (Object) '=';
          objectArray0[7] = (Object) pipedWriter0;
          PrintWriter printWriter3 = printWriter2.printf(locale0, "v2kh,W", objectArray0);
          IndentWriter indentWriter0 = new IndentWriter(printWriter3);
          contentNetworkManagerImpl0.generate(indentWriter0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test8()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          ContentNetworkManagerImpl contentNetworkManagerImpl0 = new ContentNetworkManagerImpl();
          IndentWriter indentWriter0 = null;
          contentNetworkManagerImpl0.checkForUpdates();
          contentNetworkManagerImpl0.addContentNetwork((-264L));
          ContentNetworkManagerImpl.log("", (Throwable) null);
          // Undeclared exception!
          try {
            contentNetworkManagerImpl0.generate((IndentWriter) null);
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test9()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          ContentNetworkManagerImpl contentNetworkManagerImpl0 = new ContentNetworkManagerImpl();
          contentNetworkManagerImpl0.addListener((ContentNetworkListener) null);
          ContentNetworkManagerImpl contentNetworkManagerImpl1 = new ContentNetworkManagerImpl();
          String string0 = null;
          Throwable throwable0 = null;
          // Undeclared exception!
          try {
            ContentNetworkManagerImpl.log((String) null, (Throwable) null);
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
