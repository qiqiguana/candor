/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.networkmanager.impl.udp;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.networkmanager.impl.udp.UDPConnection;
import com.aelitis.azureus.core.networkmanager.impl.udp.UDPPacket;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class UDPPacketEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      int[] intArray0 = new int[4];
      byte[] byteArray0 = new byte[7];
      UDPPacket uDPPacket0 = new UDPPacket((UDPConnection) null, intArray0, (byte) (-1), byteArray0, (long) (-3));
      assertNotNull(uDPPacket0);
      
      byte[] byteArray1 = uDPPacket0.getBuffer();
      assertEquals((-3L), uDPPacket0.getUnAckInSequenceCount());
      assertEquals("seq=0,type=-1,retrans=true,sent=0,len=7", uDPPacket0.getString());
      assertNotNull(byteArray1);
      assertEquals(-1, uDPPacket0.getCommand());
  }

  @Test
  public void test1()  throws Throwable  {
      int[] intArray0 = new int[8];
      byte[] byteArray0 = new byte[2];
      UDPPacket uDPPacket0 = new UDPPacket((UDPConnection) null, intArray0, (byte)0, byteArray0, (long) 256);
      assertNotNull(uDPPacket0);
      
      uDPPacket0.getSendTickCount();
      assertEquals(256L, uDPPacket0.getUnAckInSequenceCount());
      assertEquals("seq=0,type=0,retrans=true,sent=0,len=2", uDPPacket0.getString());
      assertEquals(0, uDPPacket0.getCommand());
  }

  @Test
  public void test2()  throws Throwable  {
      int[] intArray0 = new int[10];
      byte[] byteArray0 = new byte[10];
      UDPPacket uDPPacket0 = new UDPPacket((UDPConnection) null, intArray0, (byte) (-1), byteArray0, 1217L);
      assertNotNull(uDPPacket0);
      
      uDPPacket0.setHasBeenReceived();
      assertEquals(true, uDPPacket0.hasBeenReceived());
      assertEquals("seq=0,type=-1,retrans=true,sent=0,len=10", uDPPacket0.getString());
  }

  @Test
  public void test3()  throws Throwable  {
      int[] intArray0 = new int[9];
      byte[] byteArray0 = new byte[6];
      UDPPacket uDPPacket0 = new UDPPacket((UDPConnection) null, intArray0, (byte)0, byteArray0, (long) 1);
      assertNotNull(uDPPacket0);
      
      long long0 = uDPPacket0.getUnAckInSequenceCount();
      assertEquals("seq=0,type=0,retrans=true,sent=0,len=6", uDPPacket0.getString());
      assertEquals(1L, long0);
  }

  @Test
  public void test4()  throws Throwable  {
      int[] intArray0 = new int[5];
      byte[] byteArray0 = new byte[6];
      UDPPacket uDPPacket0 = new UDPPacket((UDPConnection) null, intArray0, (byte) (-94), byteArray0, 1092L);
      assertNotNull(uDPPacket0);
      
      uDPPacket0.getConnection();
      assertEquals("seq=0,type=-94,retrans=true,sent=0,len=6", uDPPacket0.getString());
      assertEquals(1092L, uDPPacket0.getUnAckInSequenceCount());
  }

  @Test
  public void test5()  throws Throwable  {
      int[] intArray0 = new int[5];
      byte[] byteArray0 = new byte[6];
      UDPPacket uDPPacket0 = new UDPPacket((UDPConnection) null, intArray0, (byte)105, byteArray0, 1092L);
      assertNotNull(uDPPacket0);
      
      uDPPacket0.resent();
      assertEquals(1, uDPPacket0.getResendCount());
  }

  @Test
  public void test6()  throws Throwable  {
      int[] intArray0 = new int[10];
      byte[] byteArray0 = new byte[10];
      UDPPacket uDPPacket0 = new UDPPacket((UDPConnection) null, intArray0, (byte) (-1), byteArray0, 1217L);
      assertNotNull(uDPPacket0);
      
      int int0 = uDPPacket0.getSequence();
      assertEquals(1217L, uDPPacket0.getUnAckInSequenceCount());
      assertEquals("seq=0,type=-1,retrans=true,sent=0,len=10", uDPPacket0.getString());
      assertEquals(0, int0);
  }

  @Test
  public void test7()  throws Throwable  {
      int[] intArray0 = new int[4];
      byte[] byteArray0 = new byte[7];
      UDPPacket uDPPacket0 = new UDPPacket((UDPConnection) null, intArray0, (byte) (-1), byteArray0, (long) (-3));
      assertNotNull(uDPPacket0);
      
      boolean boolean0 = uDPPacket0.isAutoRetransmit();
      assertEquals(true, boolean0);
      assertEquals("seq=0,type=-1,retrans=true,sent=0,len=7", uDPPacket0.getString());
      assertEquals((-3L), uDPPacket0.getUnAckInSequenceCount());
  }

  @Test
  public void test8()  throws Throwable  {
      int[] intArray0 = new int[8];
      byte[] byteArray0 = new byte[2];
      UDPPacket uDPPacket0 = new UDPPacket((UDPConnection) null, intArray0, (byte)0, byteArray0, (long) 256);
      assertNotNull(uDPPacket0);
      
      uDPPacket0.hasBeenReceived();
      assertEquals("seq=0,type=0,retrans=true,sent=0,len=2", uDPPacket0.getString());
      assertEquals(256L, uDPPacket0.getUnAckInSequenceCount());
  }

  @Test
  public void test9()  throws Throwable  {
      int[] intArray0 = new int[10];
      byte[] byteArray0 = new byte[10];
      UDPPacket uDPPacket0 = new UDPPacket((UDPConnection) null, intArray0, (byte) (-1), byteArray0, 1217L);
      assertNotNull(uDPPacket0);
      
      String string0 = uDPPacket0.getString();
      assertEquals(1217L, uDPPacket0.getUnAckInSequenceCount());
      assertEquals("seq=0,type=-1,retrans=true,sent=0,len=10", string0);
      assertNotNull(string0);
  }

  @Test
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[4];
      byte[] byteArray0 = new byte[8];
      UDPPacket uDPPacket0 = new UDPPacket((UDPConnection) null, intArray0, (byte)82, byteArray0, (long) 1213);
      assertNotNull(uDPPacket0);
      
      short short0 = uDPPacket0.sent(65280L);
      assertEquals(65280L, uDPPacket0.getSendTickCount());
      assertEquals((short)1, short0);
  }

  @Test
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[4];
      byte[] byteArray0 = new byte[7];
      UDPPacket uDPPacket0 = new UDPPacket((UDPConnection) null, intArray0, (byte) (-1), byteArray0, (long) (-3));
      assertNotNull(uDPPacket0);
      
      uDPPacket0.setAutoRetransmit(true);
      assertEquals("seq=0,type=-1,retrans=true,sent=0,len=7", uDPPacket0.getString());
      assertEquals((-3L), uDPPacket0.getUnAckInSequenceCount());
      assertEquals(true, uDPPacket0.isAutoRetransmit());
  }

  @Test
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[10];
      byte[] byteArray0 = new byte[10];
      UDPPacket uDPPacket0 = new UDPPacket((UDPConnection) null, intArray0, (byte) (-1), byteArray0, 1217L);
      assertNotNull(uDPPacket0);
      
      int int0 = uDPPacket0.getAlternativeSequence();
      assertEquals("seq=0,type=-1,retrans=true,sent=0,len=10", uDPPacket0.getString());
      assertEquals(0, int0);
      assertEquals(1217L, uDPPacket0.getUnAckInSequenceCount());
  }

  @Test
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[4];
      byte[] byteArray0 = new byte[8];
      UDPPacket uDPPacket0 = new UDPPacket((UDPConnection) null, intArray0, (byte)82, byteArray0, (long) 1213);
      assertNotNull(uDPPacket0);
      
      byte byte0 = uDPPacket0.getCommand();
      assertEquals(1213L, uDPPacket0.getUnAckInSequenceCount());
      assertEquals((byte)82, byte0);
      assertEquals(true, uDPPacket0.isAutoRetransmit());
  }

  @Test
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[8];
      byte[] byteArray0 = new byte[4];
      UDPPacket uDPPacket0 = new UDPPacket((UDPConnection) null, intArray0, (byte)0, byteArray0, (-1127L));
      assertNotNull(uDPPacket0);
      
      uDPPacket0.getResendCount();
      assertEquals((-1127L), uDPPacket0.getUnAckInSequenceCount());
      assertEquals("seq=0,type=0,retrans=true,sent=0,len=4", uDPPacket0.getString());
      assertEquals(0, uDPPacket0.getCommand());
  }

  @Test
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[4];
      byte[] byteArray0 = new byte[8];
      UDPPacket uDPPacket0 = new UDPPacket((UDPConnection) null, intArray0, (byte)82, byteArray0, (long) 1213);
      assertNotNull(uDPPacket0);
      
      uDPPacket0.getSentCount();
      assertEquals("seq=0,type=82,retrans=true,sent=0,len=8", uDPPacket0.getString());
      assertEquals(1213L, uDPPacket0.getUnAckInSequenceCount());
      assertEquals(82, uDPPacket0.getCommand());
  }
}
