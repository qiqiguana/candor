/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.activities;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.activities.VuzeActivitiesEntry;
import com.aelitis.azureus.activities.VuzeActivitiesListener;
import com.aelitis.azureus.activities.VuzeActivitiesLoadedListener;
import com.aelitis.azureus.activities.VuzeActivitiesManager;
import com.aelitis.azureus.core.AzureusCore;
import com.aelitis.azureus.core.AzureusCoreException;
import com.aelitis.azureus.core.impl.AzureusCoreImpl;
import com.aelitis.azureus.ui.swt.views.skin.SBC_ActivityTableView;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.evosuite.testcase.TestCaseExecutor;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class VuzeActivitiesManagerEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      VuzeActivitiesManager.initialize((AzureusCore) null);
  }

  @Test
  public void test1()  throws Throwable  {
      VuzeActivitiesManager.clearLastPullTimes();
      VuzeActivitiesManager.pullActivitiesNow((-367L), "B:x~}/CjiQMSEi(_ W", false);
      VuzeActivitiesListener vuzeActivitiesListener0 = null;
      // Undeclared exception!
      try {
        VuzeActivitiesManager.isEntryIdRemoved("B:x~}/CjiQMSEi(_ W");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * StringEquals is not supposed to work on a null caller
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      VuzeActivitiesManager.removeListener((VuzeActivitiesListener) null);
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SBC_ActivityTableView sBC_ActivityTableView0 = new SBC_ActivityTableView();
          VuzeActivitiesManager.addListener((VuzeActivitiesListener) sBC_ActivityTableView0);
          assertEquals(false, sBC_ActivityTableView0.isVisible());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
      VuzeActivitiesManager.resetRemovedEntries();
  }

  @Test
  public void test5()  throws Throwable  {
      VuzeActivitiesEntry[] vuzeActivitiesEntryArray0 = VuzeActivitiesManager.getAllEntries();
      assertNotNull(vuzeActivitiesEntryArray0);
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = VuzeActivitiesManager.getNumEntries();
      assertEquals(0, int0);
  }

  @Test
  public void test7()  throws Throwable  {
      VuzeActivitiesManager vuzeActivitiesManager0 = new VuzeActivitiesManager();
      assertEquals((-63072000000L), vuzeActivitiesManager0.getCutoffTime());
  }

  @Test
  public void test8()  throws Throwable  {
      VuzeActivitiesManager.pullActivitiesNow(1183L, "@Y~6\"}MOtDZ<cq7B4.[", false);
  }

  @Test
  public void test9()  throws Throwable  {
      VuzeActivitiesManager.pullActivitiesNow(2L, "async", true);
  }

  @Test
  public void test10()  throws Throwable  {
      VuzeActivitiesManager.addListener((VuzeActivitiesLoadedListener) null);
  }

  @Test
  public void test11()  throws Throwable  {
      VuzeActivitiesManager.removeListener((VuzeActivitiesLoadedListener) null);
  }

  @Test
  public void test12()  throws Throwable  {
      VuzeActivitiesEntry[] vuzeActivitiesEntryArray0 = new VuzeActivitiesEntry[2];
      VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry();
      vuzeActivitiesEntryArray0[0] = vuzeActivitiesEntry0;
      vuzeActivitiesEntryArray0[1] = vuzeActivitiesEntry0;
      VuzeActivitiesEntry[] vuzeActivitiesEntryArray1 = VuzeActivitiesManager.addEntries(vuzeActivitiesEntryArray0);
      assertFalse(vuzeActivitiesEntryArray0.equals(vuzeActivitiesEntryArray1));
  }

  @Test
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          VuzeActivitiesEntry[] vuzeActivitiesEntryArray0 = new VuzeActivitiesEntry[1];
          VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry(0L, "0", "U", "", "", "");
          vuzeActivitiesEntryArray0[0] = vuzeActivitiesEntry0;
          VuzeActivitiesEntry[] vuzeActivitiesEntryArray1 = VuzeActivitiesManager.addEntries(vuzeActivitiesEntryArray0);
          assertFalse(vuzeActivitiesEntryArray0.equals(vuzeActivitiesEntryArray1));
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test14()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          VuzeActivitiesEntry[] vuzeActivitiesEntryArray0 = new VuzeActivitiesEntry[4];
          VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry((-1995L), "Invalid URL '", "Invalid URL '", "Invalid URL '", "Invalid URL '", "Invalid URL '");
          vuzeActivitiesEntryArray0[0] = vuzeActivitiesEntry0;
          VuzeActivitiesManager.removeEntries(vuzeActivitiesEntryArray0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test15()  throws Throwable  {
      VuzeActivitiesEntry[] vuzeActivitiesEntryArray0 = new VuzeActivitiesEntry[3];
      VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry();
      vuzeActivitiesEntryArray0[0] = vuzeActivitiesEntry0;
      VuzeActivitiesManager.removeEntries(vuzeActivitiesEntryArray0, true);
  }

  @Test
  public void test16()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          VuzeActivitiesEntry[] vuzeActivitiesEntryArray0 = new VuzeActivitiesEntry[2];
          VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry((-63072000000L), "6HWq,SNY.", "6HWq,SNY.", "6HWq,SNY.", "6HWq,SNY.", "6HWq,SNY.");
          vuzeActivitiesEntryArray0[0] = vuzeActivitiesEntry0;
          VuzeActivitiesManager.removeEntries(vuzeActivitiesEntryArray0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test17()  throws Throwable  {
      VuzeActivitiesEntry vuzeActivitiesEntry0 = VuzeActivitiesManager.getEntryByID("QRwp~kJu");
      assertNull(vuzeActivitiesEntry0);
  }

  @Test
  public void test18()  throws Throwable  {
      VuzeActivitiesEntry vuzeActivitiesEntry0 = VuzeActivitiesManager.getEntryByID("'dr79.'a2Ch/U");
      assertNull(vuzeActivitiesEntry0);
  }

  @Test
  public void test19()  throws Throwable  {
      VuzeActivitiesManager.isEntryIdRemoved("0");
  }

  @Test
  public void test20()  throws Throwable  {
      VuzeActivitiesManager.log("QRwp~kJu");
  }

  @Test
  public void test21()  throws Throwable  {
      VuzeActivitiesEntry vuzeActivitiesEntry0 = VuzeActivitiesManager.createEntryFromMap((Map<?, ?>) null, false);
      assertNull(vuzeActivitiesEntry0.getAssetHash());
  }
}
