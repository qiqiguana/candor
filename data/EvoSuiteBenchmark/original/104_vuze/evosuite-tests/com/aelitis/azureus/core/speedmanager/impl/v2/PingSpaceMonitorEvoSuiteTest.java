/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.speedmanager.impl.v2;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.speedmanager.impl.v2.PingSpaceMonitor;
import com.aelitis.azureus.core.speedmanager.impl.v2.TransferMode;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PingSpaceMonitorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      TransferMode transferMode0 = new TransferMode();
      PingSpaceMonitor pingSpaceMonitor0 = new PingSpaceMonitor((-61), (-61), transferMode0);
      assertEquals(0, pingSpaceMonitor0.limitType);
      assertNotNull(pingSpaceMonitor0);
      
      pingSpaceMonitor0.resetNewLimit();
      assertEquals(false, pingSpaceMonitor0.hasNewLimit);
      assertEquals((-2), pingSpaceMonitor0.newLimit);
      assertEquals((-61), pingSpaceMonitor0.maxGoodPing);
      assertEquals((-61), pingSpaceMonitor0.minBadPing);
      assertEquals(0, pingSpaceMonitor0.nBadPings);
      assertEquals(0, pingSpaceMonitor0.upAtLimit);
      assertEquals(0, pingSpaceMonitor0.downMed);
      assertEquals(-2, pingSpaceMonitor0.getNewLimit());
  }

  @Test
  public void test1()  throws Throwable  {
      PingSpaceMonitor pingSpaceMonitor0 = new PingSpaceMonitor((-1), (-1), (TransferMode) null);
      assertNotNull(pingSpaceMonitor0);
      
      int int0 = pingSpaceMonitor0.limitType();
      assertEquals((-2), pingSpaceMonitor0.newLimit);
      assertEquals((-1), pingSpaceMonitor0.minBadPing);
      assertEquals(0, int0);
      assertEquals(0, pingSpaceMonitor0.nGoodPings);
      assertEquals(0, pingSpaceMonitor0.upLow);
      assertEquals(0, pingSpaceMonitor0.downLow);
      assertEquals((-1), pingSpaceMonitor0.maxGoodPing);
  }

  @Test
  public void test2()  throws Throwable  {
      TransferMode transferMode0 = new TransferMode();
      PingSpaceMonitor pingSpaceMonitor0 = new PingSpaceMonitor(61, 61, transferMode0);
      assertNotNull(pingSpaceMonitor0);
      
      int int0 = pingSpaceMonitor0.getNewLimit();
      assertEquals(61, pingSpaceMonitor0.maxGoodPing);
      assertEquals(61, pingSpaceMonitor0.minBadPing);
      assertEquals((-2), int0);
      assertEquals(0, pingSpaceMonitor0.nNeutralPings);
      assertEquals(0, pingSpaceMonitor0.limitType);
      assertEquals(0, pingSpaceMonitor0.upAtLimit);
      assertEquals(0, pingSpaceMonitor0.downLow);
  }

  @Test
  public void test3()  throws Throwable  {
      TransferMode transferMode0 = new TransferMode();
      PingSpaceMonitor pingSpaceMonitor0 = new PingSpaceMonitor((-61), (-61), transferMode0);
      assertNotNull(pingSpaceMonitor0);
      
      pingSpaceMonitor0.setCurrentTransferRates((-61), (-61));
      assertEquals((-2), pingSpaceMonitor0.newLimit);
      assertEquals((-61), pingSpaceMonitor0.maxGoodPing);
      assertEquals(0, pingSpaceMonitor0.downMed);
      assertEquals((-61), pingSpaceMonitor0.minBadPing);
  }

  @Test
  public void test4()  throws Throwable  {
      TransferMode transferMode0 = new TransferMode();
      PingSpaceMonitor pingSpaceMonitor0 = new PingSpaceMonitor((-61), (-61), transferMode0);
      assertNotNull(pingSpaceMonitor0);
      
      pingSpaceMonitor0.hasNewLimit();
      assertEquals((-61), pingSpaceMonitor0.maxGoodPing);
      assertEquals(0, pingSpaceMonitor0.limitType);
      assertEquals((-2), pingSpaceMonitor0.newLimit);
      assertEquals((-61), pingSpaceMonitor0.minBadPing);
  }

  @Test
  public void test5()  throws Throwable  {
      PingSpaceMonitor pingSpaceMonitor0 = new PingSpaceMonitor((-1), (-1), (TransferMode) null);
      assertNotNull(pingSpaceMonitor0);
      
      TransferMode transferMode0 = new TransferMode();
      pingSpaceMonitor0.addToPingMapData(0, transferMode0);
      pingSpaceMonitor0.addToPingMapData((-2), transferMode0);
      assertEquals(1, pingSpaceMonitor0.nGoodPings);
      assertEquals((-1), pingSpaceMonitor0.minBadPing);
  }

  @Test
  public void test6()  throws Throwable  {
      TransferMode transferMode0 = new TransferMode();
      PingSpaceMonitor pingSpaceMonitor0 = new PingSpaceMonitor((-61), (-61), transferMode0);
      assertNotNull(pingSpaceMonitor0);
      
      TransferMode transferMode1 = new TransferMode();
      boolean boolean0 = pingSpaceMonitor0.addToPingMapData(0, transferMode1);
      assertEquals(0, pingSpaceMonitor0.nBadPings);
      assertEquals(0, pingSpaceMonitor0.limitType);
      assertEquals((-61), pingSpaceMonitor0.maxGoodPing);
      assertEquals(false, pingSpaceMonitor0.hasNewLimit);
      assertEquals((-61), pingSpaceMonitor0.minBadPing);
      assertEquals(false, boolean0);
      assertEquals(0, pingSpaceMonitor0.downNone);
      assertEquals(0, pingSpaceMonitor0.upHigh);
      assertEquals((-2), pingSpaceMonitor0.newLimit);
  }

  @Test
  public void test7()  throws Throwable  {
      TransferMode transferMode0 = new TransferMode();
      PingSpaceMonitor pingSpaceMonitor0 = new PingSpaceMonitor(61, 61, transferMode0);
      assertNotNull(pingSpaceMonitor0);
      
      pingSpaceMonitor0.addToPingMapData(61, transferMode0);
      assertEquals(1, pingSpaceMonitor0.nNeutralPings);
      assertEquals(61, pingSpaceMonitor0.minBadPing);
  }
}
