/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.util.average;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.util.average.ExponentialMovingAverage;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ExponentialMovingAverageEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ExponentialMovingAverage exponentialMovingAverage0 = new ExponentialMovingAverage((-1));
      assertNotNull(exponentialMovingAverage0);
      
      double double0 = exponentialMovingAverage0.getAverage();
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test1()  throws Throwable  {
      ExponentialMovingAverage exponentialMovingAverage0 = new ExponentialMovingAverage((-1));
      assertNotNull(exponentialMovingAverage0);
      
      exponentialMovingAverage0.reset();
      assertEquals(0.0, exponentialMovingAverage0.getAverage(), 0.01D);
  }

  @Test
  public void test2()  throws Throwable  {
      ExponentialMovingAverage exponentialMovingAverage0 = new ExponentialMovingAverage((-1389));
      assertNotNull(exponentialMovingAverage0);
      
      double double0 = exponentialMovingAverage0.update((double) (-1389));
      assertEquals(2.001440863008611, exponentialMovingAverage0.getAverage(), 0.01D);
      assertEquals(2.001440863008611, double0, 0.01D);
  }

  @Test
  public void test3()  throws Throwable  {
      ExponentialMovingAverage exponentialMovingAverage0 = new ExponentialMovingAverage(1105);
      assertEquals(0.0, exponentialMovingAverage0.getAverage(), 0.01D);
  }

  @Test
  public void test4()  throws Throwable  {
      ExponentialMovingAverage exponentialMovingAverage0 = new ExponentialMovingAverage((-1938.6545F));
      assertNotNull(exponentialMovingAverage0);
      assertEquals(0.0, exponentialMovingAverage0.getAverage(), 0.01D);
  }

  @Test
  public void test5()  throws Throwable  {
      ExponentialMovingAverage exponentialMovingAverage0 = new ExponentialMovingAverage(77.69488F);
      assertNotNull(exponentialMovingAverage0);
      assertEquals(0.0, exponentialMovingAverage0.getAverage(), 0.01D);
  }

  @Test
  public void test6()  throws Throwable  {
      ExponentialMovingAverage exponentialMovingAverage0 = new ExponentialMovingAverage(0.0F);
      assertEquals(0.0, exponentialMovingAverage0.getAverage(), 0.01D);
  }
}
