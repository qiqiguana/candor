/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.networkmanager.impl.udp;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.networkmanager.impl.udp.UDPConnectionManager;
import com.aelitis.azureus.core.networkmanager.impl.udp.UDPNetworkManager;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class UDPNetworkManagerEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      UDPNetworkManager uDPNetworkManager0 = new UDPNetworkManager();
      UDPConnectionManager uDPConnectionManager0 = uDPNetworkManager0.getConnectionManager();
      assertEquals(1460, uDPNetworkManager0.getUdpMssSize());
      assertNotNull(uDPConnectionManager0);
      assertEquals(22111, uDPNetworkManager0.getUDPListeningPortNumber());
      assertEquals(22111, uDPNetworkManager0.getUDPNonDataListeningPortNumber());
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          UDPNetworkManager uDPNetworkManager0 = UDPNetworkManager.getSingleton();
          assertNotNull(uDPNetworkManager0);
          
          int int0 = uDPNetworkManager0.getUDPNonDataListeningPortNumber();
          assertEquals(22111, int0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
      UDPNetworkManager uDPNetworkManager0 = UDPNetworkManager.getSingleton();
      assertNotNull(uDPNetworkManager0);
      
      boolean boolean0 = uDPNetworkManager0.isUDPListenerEnabled();
      assertEquals(true, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = UDPNetworkManager.getUdpMssSize();
      assertEquals(1460, int0);
  }

  @Test
  public void test4()  throws Throwable  {
      UDPNetworkManager uDPNetworkManager0 = UDPNetworkManager.getSingleton();
      assertNotNull(uDPNetworkManager0);
      
      int int0 = uDPNetworkManager0.getUDPListeningPortNumber();
      assertEquals(22111, int0);
  }

  @Test
  public void test5()  throws Throwable  {
      UDPNetworkManager uDPNetworkManager0 = UDPNetworkManager.getSingleton();
      assertNotNull(uDPNetworkManager0);
      
      boolean boolean0 = uDPNetworkManager0.isUDPNonDataListenerEnabled();
      assertEquals(true, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      UDPNetworkManager.refreshRates(22111);
  }

  @Test
  public void test7()  throws Throwable  {
      UDPNetworkManager.refreshRates((-1820));
  }

  @Test
  public void test8()  throws Throwable  {
      UDPNetworkManager uDPNetworkManager0 = UDPNetworkManager.getSingleton();
      UDPConnectionManager uDPConnectionManager0 = uDPNetworkManager0.getConnectionManager();
      assertEquals(2048, uDPConnectionManager0.getMaxOutboundPermitted());
  }
}
