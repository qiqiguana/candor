/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.util.bloom;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.util.bloom.BloomFilter;
import com.aelitis.azureus.core.util.bloom.BloomFilterFactory;
import com.aelitis.azureus.core.util.bloom.impl.BloomFilterAddOnly;
import com.aelitis.azureus.core.util.bloom.impl.BloomFilterAddRemove4Bit;
import com.aelitis.azureus.core.util.bloom.impl.BloomFilterAddRemove8Bit;
import com.aelitis.azureus.core.util.bloom.impl.BloomFilterRotator;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BloomFilterFactoryEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      BloomFilterAddRemove8Bit bloomFilterAddRemove8Bit0 = (BloomFilterAddRemove8Bit)BloomFilterFactory.createAddRemove8Bit(1954);
      assertEquals("ent=0,max=1955", bloomFilterAddRemove8Bit0.getString());
      assertNotNull(bloomFilterAddRemove8Bit0);
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          BloomFilter bloomFilter0 = BloomFilterFactory.deserialiseFromMap((Map<String, Object>) null);
          assertNull(bloomFilter0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
      BloomFilterAddRemove8Bit bloomFilterAddRemove8Bit0 = new BloomFilterAddRemove8Bit(661);
      Map<String, Object> map0 = bloomFilterAddRemove8Bit0.serialiseToMap();
      BloomFilterAddOnly bloomFilterAddOnly0 = new BloomFilterAddOnly(map0);
      BloomFilterRotator bloomFilterRotator0 = (BloomFilterRotator)BloomFilterFactory.createRotating((BloomFilter) bloomFilterAddOnly0, 661);
      assertEquals(661, bloomFilterRotator0.getSize());
  }

  @Test
  public void test3()  throws Throwable  {
      BloomFilterFactory bloomFilterFactory0 = new BloomFilterFactory();
      assertNotNull(bloomFilterFactory0);
  }

  @Test
  public void test4()  throws Throwable  {
      BloomFilterAddRemove4Bit bloomFilterAddRemove4Bit0 = (BloomFilterAddRemove4Bit)BloomFilterFactory.createAddRemove4Bit(102);
      assertNotNull(bloomFilterAddRemove4Bit0);
      assertEquals("ent=0,max=103", bloomFilterAddRemove4Bit0.getString());
  }

  @Test
  public void test5()  throws Throwable  {
      BloomFilterAddOnly bloomFilterAddOnly0 = (BloomFilterAddOnly)BloomFilterFactory.createAddOnly(1954);
      assertNotNull(bloomFilterAddOnly0);
      assertEquals("ent=0,max=1955", bloomFilterAddOnly0.getString());
  }
}
