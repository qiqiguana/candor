/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.networkmanager.impl.tcp;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.networkmanager.VirtualServerChannelSelector;
import com.aelitis.azureus.core.networkmanager.impl.tcp.VirtualBlockingServerChannelSelector;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class VirtualBlockingServerChannelSelectorEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          InetSocketAddress inetSocketAddress0 = new InetSocketAddress(0);
          VirtualBlockingServerChannelSelector virtualBlockingServerChannelSelector0 = new VirtualBlockingServerChannelSelector(inetSocketAddress0, 0, (VirtualServerChannelSelector.SelectListener) null);
          assertEquals(false, virtualBlockingServerChannelSelector0.isRunning());
          
          virtualBlockingServerChannelSelector0.start();
          virtualBlockingServerChannelSelector0.start();
          assertEquals(true, virtualBlockingServerChannelSelector0.isRunning());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
      VirtualBlockingServerChannelSelector virtualBlockingServerChannelSelector0 = new VirtualBlockingServerChannelSelector((InetSocketAddress) null, 44, (VirtualServerChannelSelector.SelectListener) null);
      long long0 = virtualBlockingServerChannelSelector0.getTimeOfLastAccept();
      assertEquals(0L, long0);
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          VirtualBlockingServerChannelSelector virtualBlockingServerChannelSelector0 = new VirtualBlockingServerChannelSelector((InetSocketAddress) null, 44, (VirtualServerChannelSelector.SelectListener) null);
          assertEquals(false, virtualBlockingServerChannelSelector0.isRunning());
          
          // Undeclared exception!
          try {
            virtualBlockingServerChannelSelector0.start();
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
      VirtualBlockingServerChannelSelector virtualBlockingServerChannelSelector0 = new VirtualBlockingServerChannelSelector((InetSocketAddress) null, 44, (VirtualServerChannelSelector.SelectListener) null);
      virtualBlockingServerChannelSelector0.stop();
      assertEquals(false, virtualBlockingServerChannelSelector0.isRunning());
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          InetSocketAddress inetSocketAddress0 = new InetSocketAddress(0);
          VirtualBlockingServerChannelSelector virtualBlockingServerChannelSelector0 = new VirtualBlockingServerChannelSelector(inetSocketAddress0, 0, (VirtualServerChannelSelector.SelectListener) null);
          virtualBlockingServerChannelSelector0.start();
          assertEquals(true, virtualBlockingServerChannelSelector0.isRunning());
          
          virtualBlockingServerChannelSelector0.stop();
          assertEquals(false, virtualBlockingServerChannelSelector0.isRunning());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
      VirtualBlockingServerChannelSelector virtualBlockingServerChannelSelector0 = new VirtualBlockingServerChannelSelector((InetSocketAddress) null, 44, (VirtualServerChannelSelector.SelectListener) null);
      virtualBlockingServerChannelSelector0.accept_loop();
      assertEquals(0L, virtualBlockingServerChannelSelector0.getTimeOfLastAccept());
  }

  @Test
  public void test6()  throws Throwable  {
      InetSocketAddress inetSocketAddress0 = new InetSocketAddress(0);
      VirtualBlockingServerChannelSelector virtualBlockingServerChannelSelector0 = new VirtualBlockingServerChannelSelector(inetSocketAddress0, 0, (VirtualServerChannelSelector.SelectListener) null);
      InetAddress inetAddress0 = virtualBlockingServerChannelSelector0.getBoundToAddress();
      assertNull(inetAddress0);
  }

  @Test
  public void test7()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          InetSocketAddress inetSocketAddress0 = new InetSocketAddress(0);
          VirtualBlockingServerChannelSelector virtualBlockingServerChannelSelector0 = new VirtualBlockingServerChannelSelector(inetSocketAddress0, 0, (VirtualServerChannelSelector.SelectListener) null);
          assertEquals(false, virtualBlockingServerChannelSelector0.isRunning());
          
          virtualBlockingServerChannelSelector0.start();
          virtualBlockingServerChannelSelector0.getBoundToAddress();
          assertEquals(true, virtualBlockingServerChannelSelector0.isRunning());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
