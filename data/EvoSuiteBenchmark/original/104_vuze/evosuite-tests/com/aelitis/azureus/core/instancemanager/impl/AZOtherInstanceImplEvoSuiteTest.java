/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.instancemanager.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.instancemanager.impl.AZOtherInstanceImpl;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class AZOtherInstanceImplEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
          AZOtherInstanceImpl aZOtherInstanceImpl0 = new AZOtherInstanceImpl(",udp2=", ",udp2=", (InetAddress) inet4Address0, (InetAddress) inet4Address0, 909, 909, 909, (Map<String, Object>) hashMap0);
          assertNotNull(aZOtherInstanceImpl0);
          
          String string0 = aZOtherInstanceImpl0.getString();
          assertEquals("id=,udp2=,ap=,udp2=,int=127.0.0.1,ext=127.0.0.1,tcp=909,udp=909,udp2=909,props={}", string0);
          assertNotNull(string0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
          AZOtherInstanceImpl aZOtherInstanceImpl0 = new AZOtherInstanceImpl(",udp2=", ",udp2=", (InetAddress) inet4Address0, (InetAddress) inet4Address0, 909, 909, 909, (Map<String, Object>) hashMap0);
          assertNotNull(aZOtherInstanceImpl0);
          
          List<Object> list0 = aZOtherInstanceImpl0.getInternalAddresses();
          assertNotNull(list0);
          assertEquals(false, list0.isEmpty());
          assertEquals("id=,udp2=,ap=,udp2=,int=127.0.0.1,ext=127.0.0.1,tcp=909,udp=909,udp2=909,props={}", aZOtherInstanceImpl0.getString());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
          AZOtherInstanceImpl aZOtherInstanceImpl0 = new AZOtherInstanceImpl(",udp2=", ",udp2=", (InetAddress) inet4Address0, (InetAddress) inet4Address0, 909, 909, 909, (Map<String, Object>) hashMap0);
          assertNotNull(aZOtherInstanceImpl0);
          
          boolean boolean0 = aZOtherInstanceImpl0.update(aZOtherInstanceImpl0);
          assertEquals(false, boolean0);
          assertEquals("id=,udp2=,ap=,udp2=,int=127.0.0.1,ext=127.0.0.1,tcp=909,udp=909,udp2=909,props={}", aZOtherInstanceImpl0.getString());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
          AZOtherInstanceImpl aZOtherInstanceImpl0 = new AZOtherInstanceImpl(",udp2=", ",udp2=", (InetAddress) inet4Address0, (InetAddress) inet4Address0, 909, 909, 909, (Map<String, Object>) hashMap0);
          assertEquals("id=,udp2=,ap=,udp2=,int=127.0.0.1,ext=127.0.0.1,tcp=909,udp=909,udp2=909,props={}", aZOtherInstanceImpl0.getString());
          assertNotNull(aZOtherInstanceImpl0);
          
          AZOtherInstanceImpl aZOtherInstanceImpl1 = new AZOtherInstanceImpl(",udp2=", ",udp2=", (InetAddress) null, (InetAddress) inet4Address0, 909, 909, 909, (Map<String, Object>) hashMap0);
          boolean boolean0 = aZOtherInstanceImpl0.update(aZOtherInstanceImpl1);
          assertEquals(909, aZOtherInstanceImpl0.getTCPListenPort());
          assertEquals(909, aZOtherInstanceImpl0.getUDPListenPort());
          assertEquals(true, boolean0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
          AZOtherInstanceImpl aZOtherInstanceImpl0 = new AZOtherInstanceImpl(",udp2=", ",udp2=", (InetAddress) inet4Address0, (InetAddress) inet4Address0, 909, 909, 909, (Map<String, Object>) hashMap0);
          assertEquals("id=,udp2=,ap=,udp2=,int=127.0.0.1,ext=127.0.0.1,tcp=909,udp=909,udp2=909,props={}", aZOtherInstanceImpl0.getString());
          assertNotNull(aZOtherInstanceImpl0);
          
          AZOtherInstanceImpl aZOtherInstanceImpl1 = new AZOtherInstanceImpl(",udp2=", ",udp2=", (InetAddress) inet4Address0, (InetAddress) null, 909, 909, 909, (Map<String, Object>) hashMap0);
          boolean boolean0 = aZOtherInstanceImpl0.update(aZOtherInstanceImpl1);
          assertEquals(true, boolean0);
          assertEquals(909, aZOtherInstanceImpl0.getTCPListenPort());
          assertEquals(909, aZOtherInstanceImpl0.getUDPListenPort());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
          AZOtherInstanceImpl aZOtherInstanceImpl0 = new AZOtherInstanceImpl("", "", (InetAddress) inet4Address0, (InetAddress) inet4Address0, (int) (byte)0, (int) (byte)0, (int) (byte)0, (Map<String, Object>) hashMap0);
          assertNotNull(aZOtherInstanceImpl0);
          
          AZOtherInstanceImpl aZOtherInstanceImpl1 = new AZOtherInstanceImpl("", "", (InetAddress) inet4Address0, (InetAddress) inet4Address0, (int) (byte) (-67), (int) (byte)0, (int) (byte)0, (Map<String, Object>) hashMap0);
          boolean boolean0 = aZOtherInstanceImpl0.update(aZOtherInstanceImpl1);
          assertEquals(-67, aZOtherInstanceImpl0.getTCPListenPort());
          assertEquals(true, boolean0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
          AZOtherInstanceImpl aZOtherInstanceImpl0 = new AZOtherInstanceImpl("{I^n:0n0;", "{I^n:0n0;", (InetAddress) inet4Address0, (InetAddress) inet4Address0, (-1974), (int) (byte)0, (-1974), (Map<String, Object>) hashMap0);
          assertNotNull(aZOtherInstanceImpl0);
          
          AZOtherInstanceImpl aZOtherInstanceImpl1 = new AZOtherInstanceImpl("{I^n:0n0;", "{I^n:0n0;", (InetAddress) inet4Address0, (InetAddress) inet4Address0, (-1974), (-1974), (-1974), (Map<String, Object>) hashMap0);
          boolean boolean0 = aZOtherInstanceImpl0.update(aZOtherInstanceImpl1);
          assertEquals(-1974, aZOtherInstanceImpl0.getUDPListenPort());
          assertEquals(true, boolean0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
          AZOtherInstanceImpl aZOtherInstanceImpl0 = new AZOtherInstanceImpl(",udp2=", ",udp2=", (InetAddress) inet4Address0, (InetAddress) inet4Address0, 909, 909, 909, (Map<String, Object>) hashMap0);
          assertNotNull(aZOtherInstanceImpl0);
          
          aZOtherInstanceImpl0.getAliveTime();
          assertEquals("id=,udp2=,ap=,udp2=,int=127.0.0.1,ext=127.0.0.1,tcp=909,udp=909,udp2=909,props={}", aZOtherInstanceImpl0.getString());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
