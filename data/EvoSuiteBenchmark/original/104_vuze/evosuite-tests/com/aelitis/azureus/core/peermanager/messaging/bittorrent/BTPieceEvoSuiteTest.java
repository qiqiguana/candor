/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.peermanager.messaging.bittorrent;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.peermanager.messaging.MessageException;
import com.aelitis.azureus.core.peermanager.messaging.bittorrent.BTPiece;
import org.gudy.azureus2.core3.util.DirectByteBuffer;
import org.gudy.azureus2.core3.util.DirectByteBufferPool;
import org.gudy.azureus2.core3.util.ReferenceCountedDirectByteBuffer;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BTPieceEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BTPiece bTPiece0 = new BTPiece(0, 0, (DirectByteBuffer) null, (byte) (-81));
      assertNotNull(bTPiece0);
      
      String string0 = bTPiece0.getFeatureID();
      assertEquals(-81, bTPiece0.getVersion());
      assertEquals("BT_PIECE data for piece #0:0->-1", bTPiece0.getDescription());
      assertEquals("BT1", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      BTPiece bTPiece0 = new BTPiece(0, 0, (DirectByteBuffer) null, (byte) (-81));
      assertNotNull(bTPiece0);
      
      byte byte0 = bTPiece0.getVersion();
      assertEquals((byte) (-81), byte0);
      assertEquals("BT_PIECE data for piece #0:0->-1", bTPiece0.getDescription());
  }

  @Test
  public void test2()  throws Throwable  {
      BTPiece bTPiece0 = new BTPiece(10, 10, (DirectByteBuffer) null, (byte)64);
      assertNotNull(bTPiece0);
      
      bTPiece0.getPieceData();
      assertEquals(64, bTPiece0.getVersion());
      assertEquals("BT_PIECE data for piece #10:10->9", bTPiece0.getDescription());
      assertEquals(10, bTPiece0.getPieceNumber());
  }

  @Test
  public void test3()  throws Throwable  {
      BTPiece bTPiece0 = new BTPiece(0, 0, (DirectByteBuffer) null, (byte) (-81));
      assertNotNull(bTPiece0);
      
      int int0 = bTPiece0.getPieceNumber();
      assertEquals(-81, bTPiece0.getVersion());
      assertEquals("BT_PIECE data for piece #0:0->-1", bTPiece0.getDescription());
      assertEquals(0, int0);
  }

  @Test
  public void test4()  throws Throwable  {
      DirectByteBuffer directByteBuffer0 = DirectByteBufferPool.getBuffer((byte)23, (byte)23);
      BTPiece bTPiece0 = new BTPiece(0, 0, directByteBuffer0, (byte)23);
      assertNotNull(bTPiece0);
      
      int int0 = bTPiece0.getPieceOffset();
      assertEquals("BT_PIECE data for piece #0:0->22", bTPiece0.getDescription());
      assertEquals(0, int0);
      assertEquals(23, bTPiece0.getVersion());
  }

  @Test
  public void test5()  throws Throwable  {
      BTPiece bTPiece0 = new BTPiece(10, 10, (DirectByteBuffer) null, (byte)64);
      assertNotNull(bTPiece0);
      
      try {
        bTPiece0.deserialize((DirectByteBuffer) null, (byte)64);
        fail("Expecting exception: MessageException");
      } catch(MessageException e) {
        /*
         * [BT_PIECE] decode error: data == null
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      BTPiece bTPiece0 = new BTPiece(0, 0, (DirectByteBuffer) null, (byte) (-81));
      assertNotNull(bTPiece0);
      
      byte[] byteArray0 = bTPiece0.getIDBytes();
      assertEquals(-81, bTPiece0.getVersion());
      assertEquals("BT_PIECE data for piece #0:0->-1", bTPiece0.getDescription());
      assertNotNull(byteArray0);
  }

  @Test
  public void test7()  throws Throwable  {
      BTPiece bTPiece0 = new BTPiece(0, 0, (DirectByteBuffer) null, (byte) (-81));
      assertNotNull(bTPiece0);
      
      int int0 = bTPiece0.getFeatureSubID();
      assertEquals(-81, bTPiece0.getVersion());
      assertEquals("BT_PIECE data for piece #0:0->-1", bTPiece0.getDescription());
      assertEquals(7, int0);
  }

  @Test
  public void test8()  throws Throwable  {
      BTPiece bTPiece0 = new BTPiece(10, 10, (DirectByteBuffer) null, (byte)64);
      assertNotNull(bTPiece0);
      
      int int0 = bTPiece0.getType();
      assertEquals(1, int0);
      assertEquals("BT_PIECE data for piece #10:10->9", bTPiece0.getDescription());
      assertEquals(64, bTPiece0.getVersion());
  }

  @Test
  public void test9()  throws Throwable  {
      BTPiece bTPiece0 = new BTPiece(0, 0, (DirectByteBuffer) null, (byte) (-47));
      assertNotNull(bTPiece0);
      
      String string0 = bTPiece0.getDescription();
      String string1 = bTPiece0.getDescription();
      assertEquals("BT_PIECE data for piece #0:0->-1", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertEquals(-47, bTPiece0.getVersion());
  }

  @Test
  public void test10()  throws Throwable  {
      BTPiece bTPiece0 = new BTPiece(10, 10, (DirectByteBuffer) null, (byte)64);
      assertNotNull(bTPiece0);
      
      DirectByteBuffer[] directByteBufferArray0 = bTPiece0.getData();
      assertNotNull(directByteBufferArray0);
      
      bTPiece0.getData();
      assertEquals(64, bTPiece0.getVersion());
      assertEquals("BT_PIECE data for piece #10:10->9", bTPiece0.getDescription());
      assertEquals(10, bTPiece0.getPieceNumber());
  }

  @Test
  public void test11()  throws Throwable  {
      DirectByteBuffer directByteBuffer0 = DirectByteBufferPool.getBuffer((byte)1, 14);
      ReferenceCountedDirectByteBuffer referenceCountedDirectByteBuffer0 = directByteBuffer0.getReferenceCountedBuffer();
      BTPiece bTPiece0 = new BTPiece(14, (int) (byte)1, (DirectByteBuffer) referenceCountedDirectByteBuffer0, (byte)1);
      assertNotNull(bTPiece0);
      
      BTPiece bTPiece1 = (BTPiece)bTPiece0.deserialize(directByteBuffer0, (byte)1);
      assertNotNull(bTPiece1);
      assertEquals(1, bTPiece0.getVersion());
      assertEquals("BT_PIECE data for piece #14:1->14", bTPiece0.getDescription());
      assertEquals("BT_PIECE data for piece #0:0->5", bTPiece1.getDescription());
  }

  @Test
  public void test12()  throws Throwable  {
      DirectByteBuffer directByteBuffer0 = DirectByteBufferPool.getBuffer((byte)4, (byte)4);
      BTPiece bTPiece0 = new BTPiece((-15), (-15), directByteBuffer0, (byte)4);
      assertNotNull(bTPiece0);
      
      try {
        bTPiece0.deserialize(directByteBuffer0, (byte)4);
        fail("Expecting exception: MessageException");
      } catch(MessageException e) {
        /*
         * [BT_PIECE] decode error: payload.remaining[4] < 8
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      DirectByteBuffer directByteBuffer0 = DirectByteBufferPool.getBuffer((byte)1, 14);
      ReferenceCountedDirectByteBuffer referenceCountedDirectByteBuffer0 = directByteBuffer0.getReferenceCountedBuffer();
      BTPiece bTPiece0 = new BTPiece(14, (int) (byte)1, (DirectByteBuffer) referenceCountedDirectByteBuffer0, (byte)1);
      bTPiece0.destroy();
      assertEquals(0, referenceCountedDirectByteBuffer0.getReferenceCount());
  }

  @Test
  public void test14()  throws Throwable  {
      BTPiece bTPiece0 = new BTPiece(10, 10, (DirectByteBuffer) null, (byte)64);
      assertNotNull(bTPiece0);
      
      DirectByteBuffer[] directByteBufferArray0 = bTPiece0.getData();
      assertNotNull(directByteBufferArray0);
      
      bTPiece0.destroy();
      assertEquals("BT_PIECE data for piece #10:10->9", bTPiece0.getDescription());
      assertEquals(64, bTPiece0.getVersion());
      assertEquals(10, bTPiece0.getPieceNumber());
  }
}
