/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.clientmessageservice.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.clientmessageservice.impl.ClientConnection;
import com.aelitis.azureus.core.clientmessageservice.impl.ClientMessage;
import com.aelitis.azureus.core.clientmessageservice.impl.ClientMessageHandler;
import com.aelitis.azureus.core.networkmanager.impl.tcp.ProtocolEndpointTCP;
import com.aelitis.azureus.core.networkmanager.impl.tcp.TCPTransportImpl;
import com.aelitis.azureus.core.peermanager.messaging.Message;
import com.aelitis.azureus.core.peermanager.messaging.azureus.AZStatRequest;
import com.aelitis.azureus.core.peermanager.messaging.bittorrent.BTHandshake;
import java.io.IOException;
import java.nio.channels.SocketChannel;
import java.util.HashMap;
import java.util.Map;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ClientConnectionEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ClientConnection clientConnection0 = new ClientConnection((SocketChannel) null);
      assertNotNull(clientConnection0);
      
      clientConnection0.getLastReadMadeProgress();
      assertEquals("<>", clientConnection0.getDebugString());
  }

  @Test
  public void test1()  throws Throwable  {
      ClientConnection clientConnection0 = new ClientConnection((SocketChannel) null);
      assertNotNull(clientConnection0);
      
      clientConnection0.isClosePending();
      assertEquals("<>", clientConnection0.getDebugString());
  }

  @Test
  public void test2()  throws Throwable  {
      ClientConnection clientConnection0 = new ClientConnection((SocketChannel) null);
      clientConnection0.setDebugString("FFy%PL=HF(");
      assertEquals(false, clientConnection0.writeMessages());
  }

  @Test
  public void test3()  throws Throwable  {
      ClientConnection clientConnection0 = new ClientConnection((SocketChannel) null);
      assertNotNull(clientConnection0);
      
      clientConnection0.getLastWriteMadeProgress();
      assertEquals("<>", clientConnection0.getDebugString());
  }

  @Test
  public void test4()  throws Throwable  {
      ClientConnection clientConnection0 = new ClientConnection((SocketChannel) null);
      assertNotNull(clientConnection0);
      
      HashMap<ProtocolEndpointTCP, ProtocolEndpointTCP> hashMap0 = new HashMap<ProtocolEndpointTCP, ProtocolEndpointTCP>();
      AZStatRequest aZStatRequest0 = new AZStatRequest((Map) hashMap0, (byte) (-18));
      Map<Object, Object> map0 = aZStatRequest0.getRequest();
      ClientMessage clientMessage0 = new ClientMessage("FFy%PL=HF(", clientConnection0, (Map) map0, (ClientMessageHandler) null);
      clientConnection0.sendMessage(clientMessage0, (Message) aZStatRequest0);
      // Undeclared exception!
      try {
        clientConnection0.close((Throwable) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      ClientConnection clientConnection0 = new ClientConnection((SocketChannel) null);
      assertNotNull(clientConnection0);
      
      String string0 = clientConnection0.getDebugString();
      assertEquals("<>", string0);
      assertNotNull(string0);
  }

  @Test
  public void test6()  throws Throwable  {
      ClientConnection clientConnection0 = new ClientConnection((SocketChannel) null);
      assertNotNull(clientConnection0);
      
      clientConnection0.getSocketChannel();
      assertEquals("<>", clientConnection0.getDebugString());
  }

  @Test
  public void test7()  throws Throwable  {
      ClientConnection clientConnection0 = new ClientConnection((SocketChannel) null);
      assertNotNull(clientConnection0);
      
      clientConnection0.closePending();
      assertEquals(true, clientConnection0.isClosePending());
      assertEquals("<>", clientConnection0.getDebugString());
  }

  @Test
  public void test8()  throws Throwable  {
      ClientConnection clientConnection0 = new ClientConnection((SocketChannel) null);
      assertNotNull(clientConnection0);
      
      clientConnection0.getLastActivityTime();
      assertEquals("<>", clientConnection0.getDebugString());
  }

  @Test
  public void test9()  throws Throwable  {
      ClientConnection clientConnection0 = new ClientConnection((SocketChannel) null);
      assertNotNull(clientConnection0);
      
      clientConnection0.resetLastActivityTime();
      assertEquals("<>", clientConnection0.getDebugString());
  }

  @Test
  public void test10()  throws Throwable  {
      byte[][] byteArray0 = new byte[33][8];
      TCPTransportImpl tCPTransportImpl0 = new TCPTransportImpl((ProtocolEndpointTCP) null, true, true, byteArray0);
      ClientConnection clientConnection0 = new ClientConnection(tCPTransportImpl0);
      clientConnection0.close((Throwable) null);
      assertEquals(true, tCPTransportImpl0.has_been_closed);
  }

  @Test
  public void test11()  throws Throwable  {
      ClientConnection clientConnection0 = new ClientConnection((SocketChannel) null);
      assertNotNull(clientConnection0);
      
      clientConnection0.setClosingReason((Throwable) null);
      assertEquals("<>", clientConnection0.getDebugString());
  }

  @Test
  public void test12()  throws Throwable  {
      ClientConnection clientConnection0 = new ClientConnection((SocketChannel) null);
      assertNotNull(clientConnection0);
      
      clientConnection0.readMessages();
      assertEquals("<>", clientConnection0.getDebugString());
  }

  @Test
  public void test13()  throws Throwable  {
      ClientConnection clientConnection0 = new ClientConnection((SocketChannel) null);
      assertNotNull(clientConnection0);
      
      boolean boolean0 = clientConnection0.writeMessages();
      assertEquals(false, clientConnection0.getLastWriteMadeProgress());
      assertEquals(false, boolean0);
      assertEquals("<>", clientConnection0.getDebugString());
  }

  @Test
  public void test14()  throws Throwable  {
      ClientConnection clientConnection0 = new ClientConnection((SocketChannel) null);
      assertNotNull(clientConnection0);
      assertEquals(false, clientConnection0.writeMessages());
      
      byte[] byteArray0 = new byte[5];
      BTHandshake bTHandshake0 = new BTHandshake(byteArray0, byteArray0, true, (byte)94);
      clientConnection0.sendMessage((ClientMessage) null, (Message) bTHandshake0);
      boolean boolean0 = clientConnection0.writeMessages();
      assertEquals(true, clientConnection0.writeMessages());
      assertEquals(true, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      ClientConnection clientConnection0 = new ClientConnection((SocketChannel) null);
      assertNotNull(clientConnection0);
      
      clientConnection0.close((Throwable) null);
      clientConnection0.close((Throwable) null);
      assertEquals("<>", clientConnection0.getDebugString());
  }

  @Test
  public void test16()  throws Throwable  {
      ClientConnection clientConnection0 = new ClientConnection((SocketChannel) null);
      assertNotNull(clientConnection0);
      
      clientConnection0.setUserData((Object) "BT_REQUEST", (Object) "BT_REQUEST");
      String string0 = (String)clientConnection0.getUserData((Object) "BT_REQUEST");
      assertNotNull(string0);
      assertEquals("<>", clientConnection0.getDebugString());
  }

  @Test
  public void test17()  throws Throwable  {
      byte[][] byteArray0 = new byte[33][8];
      TCPTransportImpl tCPTransportImpl0 = new TCPTransportImpl((ProtocolEndpointTCP) null, true, true, byteArray0);
      ClientConnection clientConnection0 = new ClientConnection(tCPTransportImpl0);
      assertNotNull(clientConnection0);
      
      clientConnection0.getUserData((Object) "AZ_SESSION_REQUEST");
      assertEquals("<>", clientConnection0.getDebugString());
  }

  @Test
  public void test18()  throws Throwable  {
      ClientConnection clientConnection0 = new ClientConnection((SocketChannel) null);
      assertNotNull(clientConnection0);
      
      clientConnection0.setUserData((Object) "BT_SUGGEST_PIECE", (Object) "BT_SUGGEST_PIECE");
      clientConnection0.setUserData((Object) "BT_SUGGEST_PIECE", (Object) "BT_SUGGEST_PIECE");
      assertEquals("<>", clientConnection0.getDebugString());
  }

  @Test
  public void test19()  throws Throwable  {
      ClientConnection clientConnection0 = new ClientConnection((SocketChannel) null);
      assertNotNull(clientConnection0);
      
      clientConnection0.setMaximumMessageSize(55);
      assertEquals("<>", clientConnection0.getDebugString());
  }
}
