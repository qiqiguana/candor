/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.peermanager.messaging.bittorrent;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.peermanager.messaging.MessageException;
import com.aelitis.azureus.core.peermanager.messaging.bittorrent.BTUninterested;
import org.gudy.azureus2.core3.util.DirectByteBuffer;
import org.gudy.azureus2.core3.util.DirectByteBufferPool;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BTUninterestedEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BTUninterested bTUninterested0 = new BTUninterested((byte) (-115));
      int int0 = bTUninterested0.getFeatureSubID();
      assertEquals(-115, bTUninterested0.getVersion());
      assertEquals(3, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      BTUninterested bTUninterested0 = new BTUninterested((byte)0);
      byte byte0 = bTUninterested0.getVersion();
      assertEquals((byte)0, byte0);
  }

  @Test
  public void test2()  throws Throwable  {
      BTUninterested bTUninterested0 = new BTUninterested((byte)0);
      bTUninterested0.getData();
      assertEquals(0, bTUninterested0.getVersion());
  }

  @Test
  public void test3()  throws Throwable  {
      BTUninterested bTUninterested0 = new BTUninterested((byte)0);
      int int0 = bTUninterested0.getType();
      assertEquals(0, int0);
      assertEquals(0, bTUninterested0.getVersion());
  }

  @Test
  public void test4()  throws Throwable  {
      BTUninterested bTUninterested0 = new BTUninterested((byte) (-115));
      bTUninterested0.destroy();
      assertEquals(-115, bTUninterested0.getVersion());
  }

  @Test
  public void test5()  throws Throwable  {
      BTUninterested bTUninterested0 = new BTUninterested((byte) (-115));
      byte[] byteArray0 = bTUninterested0.getIDBytes();
      assertNotNull(byteArray0);
      assertEquals(-115, bTUninterested0.getVersion());
  }

  @Test
  public void test6()  throws Throwable  {
      BTUninterested bTUninterested0 = new BTUninterested((byte) (-115));
      String string0 = bTUninterested0.getDescription();
      assertEquals(-115, bTUninterested0.getVersion());
      assertEquals("BT_UNINTERESTED", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      BTUninterested bTUninterested0 = new BTUninterested((byte) (-115));
      String string0 = bTUninterested0.getFeatureID();
      assertEquals("BT1", string0);
      assertEquals(-115, bTUninterested0.getVersion());
  }

  @Test
  public void test8()  throws Throwable  {
      BTUninterested bTUninterested0 = new BTUninterested((byte) (-115));
      BTUninterested bTUninterested1 = (BTUninterested)bTUninterested0.deserialize((DirectByteBuffer) null, (byte) (-115));
      assertNotNull(bTUninterested1);
      assertEquals(-115, bTUninterested1.getVersion());
  }

  @Test
  public void test9()  throws Throwable  {
      BTUninterested bTUninterested0 = new BTUninterested((byte)0);
      DirectByteBuffer directByteBuffer0 = DirectByteBufferPool.getBuffer((byte)1, 4);
      try {
        bTUninterested0.deserialize(directByteBuffer0, (byte)1);
        fail("Expecting exception: MessageException");
      } catch(MessageException e) {
        /*
         * [BT_UNINTERESTED] decode error: payload not empty
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      BTUninterested bTUninterested0 = new BTUninterested((byte)103);
      DirectByteBuffer directByteBuffer0 = DirectByteBufferPool.getBuffer((byte) (-13), (byte)103);
      directByteBuffer0.flip((byte) (-13));
      BTUninterested bTUninterested1 = (BTUninterested)bTUninterested0.deserialize(directByteBuffer0, (byte)36);
      assertNotNull(bTUninterested1);
      assertEquals(36, bTUninterested1.getVersion());
  }
}
