/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.util.CopyOnWriteList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.PriorityQueue;
import java.util.TreeSet;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class CopyOnWriteListEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      CopyOnWriteList<String> copyOnWriteList0 = new CopyOnWriteList<String>();
      assertNotNull(copyOnWriteList0);
      
      copyOnWriteList0.iterator();
      boolean boolean0 = copyOnWriteList0.remove("next has not been called!");
      assertEquals(1, copyOnWriteList0.getMutationCount());
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      CopyOnWriteList<String> copyOnWriteList0 = new CopyOnWriteList<String>();
      assertNotNull(copyOnWriteList0);
      
      String[] stringArray0 = new String[7];
      String[] stringArray1 = copyOnWriteList0.toArray(stringArray0);
      assertEquals(1, copyOnWriteList0.getInitialCapacity());
      assertNotNull(stringArray1);
  }

  @Test
  public void test2()  throws Throwable  {
      CopyOnWriteList<Object> copyOnWriteList0 = new CopyOnWriteList<Object>();
      assertNotNull(copyOnWriteList0);
      
      // Undeclared exception!
      try {
        copyOnWriteList0.get(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 1
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      CopyOnWriteList<Iterable<Object>> copyOnWriteList0 = new CopyOnWriteList<Iterable<Object>>(0);
      assertNotNull(copyOnWriteList0);
      
      copyOnWriteList0.size();
      assertEquals(0, copyOnWriteList0.getInitialCapacity());
  }

  @Test
  public void test4()  throws Throwable  {
      CopyOnWriteList<Object> copyOnWriteList0 = new CopyOnWriteList<Object>();
      assertNotNull(copyOnWriteList0);
      
      copyOnWriteList0.clear();
      assertEquals(1, copyOnWriteList0.getMutationCount());
  }

  @Test
  public void test5()  throws Throwable  {
      CopyOnWriteList<TreeSet<Collections.EmptyList>> copyOnWriteList0 = new CopyOnWriteList<TreeSet<Collections.EmptyList>>();
      assertNotNull(copyOnWriteList0);
      
      TreeSet<Collections.EmptyList> treeSet0 = new TreeSet<Collections.EmptyList>();
      boolean boolean0 = copyOnWriteList0.contains(treeSet0);
      assertEquals(1, copyOnWriteList0.getInitialCapacity());
      assertEquals(true, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      CopyOnWriteList<String> copyOnWriteList0 = new CopyOnWriteList<String>();
      assertNotNull(copyOnWriteList0);
      
      boolean boolean0 = copyOnWriteList0.isEmpty();
      assertEquals(1, copyOnWriteList0.getInitialCapacity());
      assertEquals(true, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      CopyOnWriteList<Object> copyOnWriteList0 = new CopyOnWriteList<Object>();
      assertNotNull(copyOnWriteList0);
      
      int int0 = copyOnWriteList0.getInitialCapacity();
      assertEquals(1, int0);
  }

  @Test
  public void test8()  throws Throwable  {
      CopyOnWriteList<CopyOnWriteList<Collections.EmptyList>> copyOnWriteList0 = new CopyOnWriteList<CopyOnWriteList<Collections.EmptyList>>(1);
      assertNotNull(copyOnWriteList0);
      
      Object[] objectArray0 = copyOnWriteList0.toArray();
      assertNotNull(objectArray0);
      assertEquals(1, copyOnWriteList0.getInitialCapacity());
  }

  @Test
  public void test9()  throws Throwable  {
      CopyOnWriteList<String> copyOnWriteList0 = new CopyOnWriteList<String>();
      assertNotNull(copyOnWriteList0);
      
      copyOnWriteList0.setInitialCapacity((-1115));
      assertEquals(-1115, copyOnWriteList0.getInitialCapacity());
  }

  @Test
  public void test10()  throws Throwable  {
      CopyOnWriteList<String> copyOnWriteList0 = new CopyOnWriteList<String>();
      assertNotNull(copyOnWriteList0);
      
      int int0 = copyOnWriteList0.getMutationCount();
      assertEquals(1, copyOnWriteList0.getInitialCapacity());
      assertEquals(0, int0);
  }

  @Test
  public void test11()  throws Throwable  {
      CopyOnWriteList<String> copyOnWriteList0 = new CopyOnWriteList<String>();
      assertNotNull(copyOnWriteList0);
      
      List<String> list0 = copyOnWriteList0.getList();
      copyOnWriteList0.addAll((Collection<String>) list0);
      copyOnWriteList0.addAll((Collection<String>) list0);
      assertEquals(2, copyOnWriteList0.getMutationCount());
  }

  @Test
  public void test12()  throws Throwable  {
      CopyOnWriteList<String> copyOnWriteList0 = new CopyOnWriteList<String>();
      assertNotNull(copyOnWriteList0);
      
      copyOnWriteList0.add("3R");
      copyOnWriteList0.add("3R");
      assertEquals(2, copyOnWriteList0.getMutationCount());
  }

  @Test
  public void test13()  throws Throwable  {
      CopyOnWriteList<String> copyOnWriteList0 = new CopyOnWriteList<String>();
      assertNotNull(copyOnWriteList0);
      
      copyOnWriteList0.iterator();
      copyOnWriteList0.add((String) null);
      assertEquals(1, copyOnWriteList0.getMutationCount());
  }

  @Test
  public void test14()  throws Throwable  {
      CopyOnWriteList<Iterable<String>> copyOnWriteList0 = new CopyOnWriteList<Iterable<String>>();
      assertNotNull(copyOnWriteList0);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      copyOnWriteList0.add(0, (Iterable<String>) priorityQueue0);
      copyOnWriteList0.add(0, (Iterable<String>) priorityQueue0);
      assertEquals(2, copyOnWriteList0.getMutationCount());
  }

  @Test
  public void test15()  throws Throwable  {
      CopyOnWriteList<TreeSet<Collections.EmptyList>> copyOnWriteList0 = new CopyOnWriteList<TreeSet<Collections.EmptyList>>();
      assertNotNull(copyOnWriteList0);
      
      copyOnWriteList0.getList();
      TreeSet<Collections.EmptyList> treeSet0 = new TreeSet<Collections.EmptyList>();
      copyOnWriteList0.add(0, treeSet0);
      assertEquals(1, copyOnWriteList0.getMutationCount());
      assertEquals(1, copyOnWriteList0.size());
  }

  @Test
  public void test16()  throws Throwable  {
      CopyOnWriteList<String> copyOnWriteList0 = new CopyOnWriteList<String>();
      assertNotNull(copyOnWriteList0);
      
      copyOnWriteList0.add("3R");
      List<String> list0 = copyOnWriteList0.getList();
      copyOnWriteList0.addAll((Collection<String>) list0);
      copyOnWriteList0.addAll((Collection<String>) list0);
      assertEquals(3, copyOnWriteList0.getMutationCount());
      assertEquals(3, copyOnWriteList0.size());
  }

  @Test
  public void test17()  throws Throwable  {
      CopyOnWriteList<String> copyOnWriteList0 = new CopyOnWriteList<String>();
      assertNotNull(copyOnWriteList0);
      
      copyOnWriteList0.remove("3R");
      assertEquals(1, copyOnWriteList0.getMutationCount());
  }
}
