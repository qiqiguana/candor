/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.peermanager.messaging.bittorrent;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.peermanager.messaging.MessageException;
import com.aelitis.azureus.core.peermanager.messaging.bittorrent.BTAllowedFast;
import org.gudy.azureus2.core3.util.DirectByteBuffer;
import org.gudy.azureus2.core3.util.DirectByteBufferPool;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BTAllowedFastEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BTAllowedFast bTAllowedFast0 = new BTAllowedFast((-1800), (byte)41);
      int int0 = bTAllowedFast0.getType();
      assertEquals(41, bTAllowedFast0.getVersion());
      assertEquals("BT_ALLOWED_FAST piece #-1800", bTAllowedFast0.getDescription());
      assertEquals(0, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      BTAllowedFast bTAllowedFast0 = new BTAllowedFast((-729), (byte)5);
      try {
        bTAllowedFast0.deserialize((DirectByteBuffer) null, (byte)5);
        fail("Expecting exception: MessageException");
      } catch(MessageException e) {
        /*
         * [BT_ALLOWED_FAST] decode error: data == null
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      BTAllowedFast bTAllowedFast0 = new BTAllowedFast(1828, (byte) (-38));
      int int0 = bTAllowedFast0.getPieceNumber();
      assertEquals(-38, bTAllowedFast0.getVersion());
      assertEquals(1828, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      BTAllowedFast bTAllowedFast0 = new BTAllowedFast(0, (byte)104);
      String string0 = bTAllowedFast0.getDescription();
      String string1 = bTAllowedFast0.getDescription();
      assertEquals(104, bTAllowedFast0.getVersion());
      assertSame(string1, string0);
      assertEquals("BT_ALLOWED_FAST piece #0", string1);
      assertNotNull(string1);
  }

  @Test
  public void test4()  throws Throwable  {
      BTAllowedFast bTAllowedFast0 = new BTAllowedFast((-1800), (byte)41);
      DirectByteBuffer[] directByteBufferArray0 = bTAllowedFast0.getData();
      assertNotNull(directByteBufferArray0);
      
      bTAllowedFast0.getData();
      assertEquals(41, bTAllowedFast0.getVersion());
      assertEquals(-1800, bTAllowedFast0.getPieceNumber());
      assertEquals("BT_ALLOWED_FAST piece #-1800", bTAllowedFast0.getDescription());
  }

  @Test
  public void test5()  throws Throwable  {
      BTAllowedFast bTAllowedFast0 = new BTAllowedFast((int) (byte)111, (byte)0);
      DirectByteBuffer directByteBuffer0 = DirectByteBufferPool.getBuffer((byte)87, (byte)4);
      BTAllowedFast bTAllowedFast1 = (BTAllowedFast)bTAllowedFast0.deserialize(directByteBuffer0, (byte)87);
      assertEquals(87, bTAllowedFast1.getVersion());
      assertNotNull(bTAllowedFast1);
      assertEquals(111, bTAllowedFast0.getPieceNumber());
      assertEquals("BT_ALLOWED_FAST piece #0", bTAllowedFast1.getDescription());
  }

  @Test
  public void test6()  throws Throwable  {
      BTAllowedFast bTAllowedFast0 = new BTAllowedFast(0, (byte)104);
      DirectByteBuffer directByteBuffer0 = DirectByteBufferPool.getBuffer((byte)104, (byte)104);
      try {
        bTAllowedFast0.deserialize(directByteBuffer0, (byte)104);
        fail("Expecting exception: MessageException");
      } catch(MessageException e) {
        /*
         * [BT_ALLOWED_FAST] decode error: payload.remaining[104] != 12
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      BTAllowedFast bTAllowedFast0 = new BTAllowedFast((int) (byte)111, (byte)0);
      bTAllowedFast0.getVersion();
      BTAllowedFast bTAllowedFast1 = new BTAllowedFast((-869), (byte)111);
      byte[] byteArray0 = bTAllowedFast1.getIDBytes();
      assertNotNull(byteArray0);
      
      BTAllowedFast bTAllowedFast2 = new BTAllowedFast(8, (byte)0);
      int int0 = bTAllowedFast2.getFeatureSubID();
      assertEquals(17, int0);
      
      BTAllowedFast bTAllowedFast3 = new BTAllowedFast(0, (byte)4);
      String string0 = bTAllowedFast2.getFeatureID();
      assertEquals("BT1", string0);
      assertEquals("BT_ALLOWED_FAST piece #8", bTAllowedFast2.getDescription());
      
      DirectByteBuffer directByteBuffer0 = DirectByteBufferPool.getBuffer((byte)87, (byte)4);
      BTAllowedFast bTAllowedFast4 = (BTAllowedFast)bTAllowedFast3.deserialize(directByteBuffer0, (byte)87);
      assertEquals("BT_ALLOWED_FAST piece #0", bTAllowedFast4.getDescription());
      assertNotNull(bTAllowedFast4);
      
      bTAllowedFast3.getType();
      assertEquals(4, bTAllowedFast3.getVersion());
      assertEquals("BT_ALLOWED_FAST piece #0", bTAllowedFast3.getDescription());
  }

  @Test
  public void test8()  throws Throwable  {
      BTAllowedFast bTAllowedFast0 = new BTAllowedFast(0, (byte)104);
      bTAllowedFast0.destroy();
      assertEquals(104, bTAllowedFast0.getVersion());
      assertEquals(0, bTAllowedFast0.getPieceNumber());
      assertEquals("BT_ALLOWED_FAST piece #0", bTAllowedFast0.getDescription());
  }

  @Test
  public void test9()  throws Throwable  {
      BTAllowedFast bTAllowedFast0 = new BTAllowedFast((-1800), (byte)41);
      DirectByteBuffer[] directByteBufferArray0 = bTAllowedFast0.getData();
      assertNotNull(directByteBufferArray0);
      
      bTAllowedFast0.destroy();
      assertEquals("BT_ALLOWED_FAST piece #-1800", bTAllowedFast0.getDescription());
      assertEquals(41, bTAllowedFast0.getVersion());
  }
}
