/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.networkmanager.impl.tcp;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.networkmanager.impl.TransportHelper;
import com.aelitis.azureus.core.networkmanager.impl.tcp.TCPTransportHelper;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TCPTransportHelperEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      Object object0 = new Object();
      tCPTransportHelper0.registerForReadSelects((TransportHelper.selectListener) null, object0);
      assertEquals(false, tCPTransportHelper0.minimiseOverheads());
  }

  @Test
  public void test1()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      Object object0 = new Object();
      tCPTransportHelper0.registerForWriteSelects((TransportHelper.selectListener) null, object0);
      assertEquals(20000, tCPTransportHelper0.getConnectTimeout());
  }

  @Test
  public void test2()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      boolean boolean0 = tCPTransportHelper0.isClosed();
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      tCPTransportHelper0.resumeReadSelects();
      assertEquals(false, tCPTransportHelper0.hasDelayedWrite());
  }

  @Test
  public void test4()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      SocketChannel socketChannel0 = tCPTransportHelper0.getSocketChannel();
      assertNull(socketChannel0);
  }

  @Test
  public void test5()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      // Undeclared exception!
      try {
        tCPTransportHelper0.getAddress();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      boolean boolean0 = tCPTransportHelper0.minimiseOverheads();
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      int int0 = tCPTransportHelper0.getReadTimeout();
      assertEquals(10000, int0);
  }

  @Test
  public void test8()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      int int0 = tCPTransportHelper0.getConnectTimeout();
      assertEquals(20000, int0);
  }

  @Test
  public void test9()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      tCPTransportHelper0.pauseReadSelects();
      assertEquals(20000, tCPTransportHelper0.getConnectTimeout());
  }

  @Test
  public void test10()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      tCPTransportHelper0.cancelReadSelects();
      assertEquals(false, tCPTransportHelper0.hasDelayedWrite());
  }

  @Test
  public void test11()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      tCPTransportHelper0.failed((Throwable) null);
      assertEquals(true, tCPTransportHelper0.isClosed());
  }

  @Test
  public void test12()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      tCPTransportHelper0.setTrace(true);
      tCPTransportHelper0.cancelWriteSelects();
      assertEquals(20000, tCPTransportHelper0.getConnectTimeout());
  }

  @Test
  public void test13()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      String string0 = tCPTransportHelper0.getName(false);
      assertEquals("", string0);
  }

  @Test
  public void test14()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      String string0 = tCPTransportHelper0.getName(true);
      assertEquals("TCP", string0);
  }

  @Test
  public void test15()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      boolean boolean0 = tCPTransportHelper0.delayWrite((ByteBuffer) null);
      assertEquals(true, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      boolean boolean0 = tCPTransportHelper0.hasDelayedWrite();
      assertEquals(false, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      int int0 = tCPTransportHelper0.write((ByteBuffer) null, true);
      assertEquals(0, int0);
  }

  @Test
  public void test18()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      ByteBuffer[] byteBufferArray0 = new ByteBuffer[6];
      long long0 = tCPTransportHelper0.write(byteBufferArray0, 20000, 20000);
      assertEquals(0L, long0);
  }

  @Test
  public void test19()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      int int0 = tCPTransportHelper0.read((ByteBuffer) null);
      assertEquals(0, int0);
  }

  @Test
  public void test20()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      ByteBuffer[] byteBufferArray0 = new ByteBuffer[15];
      long long0 = tCPTransportHelper0.read(byteBufferArray0, 0, 0);
      assertEquals(0L, long0);
  }

  @Test
  public void test21()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      tCPTransportHelper0.cancelWriteSelects();
      assertEquals(false, tCPTransportHelper0.isClosed());
  }

  @Test
  public void test22()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      tCPTransportHelper0.resumeWriteSelects();
      assertEquals(false, tCPTransportHelper0.isClosed());
  }

  @Test
  public void test23()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      tCPTransportHelper0.setTrace(true);
      tCPTransportHelper0.resumeWriteSelects();
      assertEquals(20000, tCPTransportHelper0.getConnectTimeout());
  }

  @Test
  public void test24()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      tCPTransportHelper0.pauseWriteSelects();
      assertEquals(false, tCPTransportHelper0.isClosed());
  }

  @Test
  public void test25()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      tCPTransportHelper0.setTrace(true);
      tCPTransportHelper0.pauseWriteSelects();
      assertEquals(false, tCPTransportHelper0.hasDelayedWrite());
  }

  @Test
  public void test26()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      Object object0 = new Object();
      tCPTransportHelper0.setUserData(object0, object0);
      tCPTransportHelper0.setUserData((Object) "TCP", object0);
      assertEquals(10000, tCPTransportHelper0.getReadTimeout());
  }

  @Test
  public void test27()  throws Throwable  {
      Object object0 = new Object();
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      tCPTransportHelper0.setUserData(object0, object0);
      Object object1 = tCPTransportHelper0.getUserData((Object) "(>;{QRuo,A0}q");
      assertNull(object1);
  }

  @Test
  public void test28()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      Object object0 = tCPTransportHelper0.getUserData((Object) null);
      assertNull(object0);
  }

  @Test
  public void test29()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      tCPTransportHelper0.setScatteringMode(0L);
      assertEquals(false, tCPTransportHelper0.hasDelayedWrite());
  }

  @Test
  public void test30()  throws Throwable  {
      TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
      // Undeclared exception!
      try {
        tCPTransportHelper0.setScatteringMode(45L);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
