/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.util.bloom.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.util.bloom.BloomFilter;
import com.aelitis.azureus.core.util.bloom.impl.BloomFilterAddOnly;
import com.aelitis.azureus.core.util.bloom.impl.BloomFilterAddRemove4Bit;
import com.aelitis.azureus.core.util.bloom.impl.BloomFilterAddRemove8Bit;
import com.aelitis.azureus.core.util.bloom.impl.BloomFilterImpl;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BloomFilterImplEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      BloomFilterAddOnly bloomFilterAddOnly0 = new BloomFilterAddOnly(0);
      byte[] byteArray0 = new byte[8];
      int int0 = bloomFilterAddOnly0.remove(byteArray0);
      assertEquals(1, bloomFilterAddOnly0.getMaxEntries());
      assertEquals(0, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      BloomFilterAddOnly bloomFilterAddOnly0 = new BloomFilterAddOnly((-3));
      assertNotNull(bloomFilterAddOnly0);
      
      Map<String, Object> map0 = bloomFilterAddOnly0.serialiseToMap();
      assertNotNull(map0);
      
      BloomFilterAddOnly bloomFilterAddOnly1 = (BloomFilterAddOnly)BloomFilterImpl.deserialiseFromMap(map0);
      assertEquals(0, bloomFilterAddOnly1.getEntryCount());
      assertEquals(-1, bloomFilterAddOnly1.getMaxEntries());
      assertNotNull(bloomFilterAddOnly1);
  }

  @Test
  public void test2()  throws Throwable  {
      BloomFilterAddOnly bloomFilterAddOnly0 = new BloomFilterAddOnly(0);
      assertNotNull(bloomFilterAddOnly0);
      
      int int0 = bloomFilterAddOnly0.getSize();
      assertEquals(1, int0);
      assertEquals(1, bloomFilterAddOnly0.getMaxEntries());
  }

  @Test
  public void test3()  throws Throwable  {
      BloomFilterAddRemove4Bit bloomFilterAddRemove4Bit0 = new BloomFilterAddRemove4Bit(1);
      byte[] byteArray0 = new byte[4];
      bloomFilterAddRemove4Bit0.add(byteArray0);
      int int0 = bloomFilterAddRemove4Bit0.add((int) (byte)96);
      assertEquals(1, bloomFilterAddRemove4Bit0.getEntryCount());
      assertEquals(6, int0);
  }

  @Test
  public void test4()  throws Throwable  {
      BloomFilterAddOnly bloomFilterAddOnly0 = new BloomFilterAddOnly((-3));
      assertNotNull(bloomFilterAddOnly0);
      
      String string0 = bloomFilterAddOnly0.getString();
      assertNotNull(string0);
      assertEquals("ent=0,max=-1", string0);
      assertEquals(-1, bloomFilterAddOnly0.getMaxEntries());
  }

  @Test
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = BloomFilterImpl.getSerialization(byteArray0, (int) (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
  }

  @Test
  public void test6()  throws Throwable  {
      BloomFilterAddOnly bloomFilterAddOnly0 = new BloomFilterAddOnly((-3));
      assertNotNull(bloomFilterAddOnly0);
      
      int int0 = bloomFilterAddOnly0.getEntryCount();
      assertEquals(-1, bloomFilterAddOnly0.getMaxEntries());
      assertEquals(0, int0);
  }

  @Test
  public void test7()  throws Throwable  {
      BloomFilterAddOnly bloomFilterAddOnly0 = new BloomFilterAddOnly(0);
      Map<String, Object> map0 = bloomFilterAddOnly0.serialiseToMap();
      assertNotNull(map0);
      
      byte[] byteArray0 = new byte[8];
      BloomFilterAddRemove4Bit bloomFilterAddRemove4Bit0 = new BloomFilterAddRemove4Bit(map0);
      assertNotNull(bloomFilterAddRemove4Bit0);
      
      int int0 = bloomFilterAddRemove4Bit0.count(byteArray0);
      assertEquals(1, bloomFilterAddRemove4Bit0.getMaxEntries());
      assertEquals(0, int0);
      assertEquals(4, map0.size());
  }

  @Test
  public void test8()  throws Throwable  {
      BloomFilterAddOnly bloomFilterAddOnly0 = new BloomFilterAddOnly(0);
      assertNotNull(bloomFilterAddOnly0);
      
      Map<String, Object> map0 = bloomFilterAddOnly0.serialiseToMap();
      assertNotNull(map0);
      
      byte[] byteArray0 = new byte[8];
      BloomFilterAddRemove4Bit bloomFilterAddRemove4Bit0 = new BloomFilterAddRemove4Bit(map0);
      assertNotNull(bloomFilterAddRemove4Bit0);
      
      boolean boolean0 = bloomFilterAddRemove4Bit0.contains(byteArray0);
      assertEquals(0, bloomFilterAddRemove4Bit0.getEntryCount());
      assertEquals(1, bloomFilterAddRemove4Bit0.getMaxEntries());
      assertEquals(false, boolean0);
      assertEquals(4, map0.size());
  }

  @Test
  public void test9()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
          BloomFilter bloomFilter0 = BloomFilterImpl.deserialiseFromMap((Map<String, Object>) hashMap0);
          assertNull(bloomFilter0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test10()  throws Throwable  {
      BloomFilterAddRemove4Bit bloomFilterAddRemove4Bit0 = new BloomFilterAddRemove4Bit(0);
      assertNotNull(bloomFilterAddRemove4Bit0);
      
      bloomFilterAddRemove4Bit0.add(0);
      assertEquals(1, bloomFilterAddRemove4Bit0.getEntryCount());
      
      byte[] byteArray0 = new byte[8];
      int int0 = bloomFilterAddRemove4Bit0.remove(byteArray0);
      assertEquals(0, int0);
  }

  @Test
  public void test11()  throws Throwable  {
      BloomFilterAddRemove8Bit bloomFilterAddRemove8Bit0 = new BloomFilterAddRemove8Bit((-1));
      assertNotNull(bloomFilterAddRemove8Bit0);
      
      byte[] byteArray0 = new byte[16];
      bloomFilterAddRemove8Bit0.add((-1));
      boolean boolean0 = bloomFilterAddRemove8Bit0.contains(byteArray0);
      assertEquals(1, bloomFilterAddRemove8Bit0.getEntryCount());
      assertEquals(true, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      BloomFilterAddOnly bloomFilterAddOnly0 = new BloomFilterAddOnly((-3));
      assertNotNull(bloomFilterAddOnly0);
      
      int int0 = bloomFilterAddOnly0.getHash((-3), (-3));
      assertEquals(0, int0);
      assertEquals(-1, bloomFilterAddOnly0.getMaxEntries());
  }
}
