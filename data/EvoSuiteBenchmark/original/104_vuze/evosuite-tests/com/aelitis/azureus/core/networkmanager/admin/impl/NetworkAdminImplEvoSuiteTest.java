/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.networkmanager.admin.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.AzureusCore;
import com.aelitis.azureus.core.networkmanager.admin.NetworkAdminASN;
import com.aelitis.azureus.core.networkmanager.admin.NetworkAdminException;
import com.aelitis.azureus.core.networkmanager.admin.NetworkAdminPropertyChangeListener;
import com.aelitis.azureus.core.networkmanager.admin.NetworkAdminProtocol;
import com.aelitis.azureus.core.networkmanager.admin.NetworkAdminRoutesListener;
import com.aelitis.azureus.core.networkmanager.admin.NetworkAdminSocksProxy;
import com.aelitis.azureus.core.networkmanager.admin.impl.NetworkAdminASNImpl;
import com.aelitis.azureus.core.networkmanager.admin.impl.NetworkAdminImpl;
import com.aelitis.azureus.core.networkmanager.admin.impl.NetworkAdminProtocolImpl;
import java.io.IOException;
import java.net.Inet4Address;
import java.net.Inet6Address;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.gudy.azureus2.ui.swt.views.columnsetup.ColumnTC_ChosenColumn;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class NetworkAdminImplEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl();
          assertNotNull(networkAdminImpl0);
          
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          NetworkInterface networkInterface0 = NetworkInterface.getByInetAddress((InetAddress) inet4Address0);
          NetworkAdminImpl.networkInterface networkAdminImpl_networkInterface0 = networkAdminImpl0.new networkInterface(networkInterface0);
          String string0 = networkAdminImpl_networkInterface0.getString();
          assertEquals("lo/lo []", string0);
          assertEquals("lo\t(lo)\nib0\t(ib0)\nem1\t(em1)\n", networkAdminImpl0.getNetworkInterfacesAsString());
          assertNotNull(string0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl();
          assertNotNull(networkAdminImpl0);
          
          Inet6Address inet6Address0 = (Inet6Address)networkAdminImpl0.getSingleHomedServiceBindAddress((-24));
          assertEquals("/0:0:0:0:0:0:0:0", inet6Address0.toString());
          assertNotNull(inet6Address0);
          
          NetworkAdminImpl.networkNode networkAdminImpl_networkNode0 = networkAdminImpl0.new networkNode((InetAddress) inet6Address0, (-24), (-24));
          int int0 = networkAdminImpl_networkNode0.getDistance();
          assertEquals("-24,0:0:0:0:0:0:0:0/0:0:0:0:0:0:0:0[local=false],-24", networkAdminImpl_networkNode0.getString());
          assertEquals((-24), int0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl();
          assertNotNull(networkAdminImpl0);
          
          NetworkAdminImpl.networkNode networkAdminImpl_networkNode0 = networkAdminImpl0.new networkNode((InetAddress) null, 109, 109);
          networkAdminImpl_networkNode0.getAddress();
          assertEquals(109, networkAdminImpl_networkNode0.getDistance());
          assertEquals(109, networkAdminImpl_networkNode0.getRTT());
          assertEquals("lo\t(lo)\nib0\t(ib0)\nem1\t(em1)\n", networkAdminImpl0.getNetworkInterfacesAsString());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl();
          assertNotNull(networkAdminImpl0);
          
          networkAdminImpl0.canTraceRoute();
          assertEquals("lo\t(lo)\nib0\t(ib0)\nem1\t(em1)\n", networkAdminImpl0.getNetworkInterfacesAsString());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl();
          assertNotNull(networkAdminImpl0);
          
          networkAdminImpl0.addPropertyChangeListener((NetworkAdminPropertyChangeListener) null);
          assertEquals("lo\t(lo)\nib0\t(ib0)\nem1\t(em1)\n", networkAdminImpl0.getNetworkInterfacesAsString());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl();
          assertNotNull(networkAdminImpl0);
          
          networkAdminImpl0.canPing();
          assertEquals("lo\t(lo)\nib0\t(ib0)\nem1\t(em1)\n", networkAdminImpl0.getNetworkInterfacesAsString());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl();
          assertNotNull(networkAdminImpl0);
          
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          NetworkAdminASNImpl networkAdminASNImpl0 = (NetworkAdminASNImpl)networkAdminImpl0.lookupCurrentASN((InetAddress) inet4Address0);
          assertEquals("lo\t(lo)\nib0\t(ib0)\nem1\t(em1)\n", networkAdminImpl0.getNetworkInterfacesAsString());
          assertEquals("as=,asn=, bgp_prefx=[null-null]", networkAdminASNImpl0.getString());
          assertNotNull(networkAdminASNImpl0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl();
          assertNotNull(networkAdminImpl0);
          
          NetworkAdminProtocolImpl networkAdminProtocolImpl0 = (NetworkAdminProtocolImpl)networkAdminImpl0.createInboundProtocol((AzureusCore) null, 0, 2003071092);
          assertEquals("lo\t(lo)\nib0\t(ib0)\nem1\t(em1)\n", networkAdminImpl0.getNetworkInterfacesAsString());
          assertEquals(0, networkAdminProtocolImpl0.getType());
          assertEquals("UDP port 2003071092 inbound", networkAdminProtocolImpl0.getName());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test8()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl();
          assertNotNull(networkAdminImpl0);
          
          boolean boolean0 = networkAdminImpl0.hasIPV4Potential();
          assertEquals("lo\t(lo)\nib0\t(ib0)\nem1\t(em1)\n", networkAdminImpl0.getNetworkInterfacesAsString());
          assertEquals(false, boolean0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test9()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl();
          assertNotNull(networkAdminImpl0);
          
          // Undeclared exception!
          try {
            networkAdminImpl0.testProtocol((NetworkAdminProtocol) null);
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl();
          assertNotNull(networkAdminImpl0);
          
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          NetworkInterface networkInterface0 = NetworkInterface.getByInetAddress((InetAddress) inet4Address0);
          NetworkAdminImpl.networkInterface networkAdminImpl_networkInterface0 = networkAdminImpl0.new networkInterface(networkInterface0);
          NetworkAdminImpl.networkInterface.networkAddress networkAdminImpl_networkInterface_networkAddress0 = networkAdminImpl_networkInterface0.new networkAddress((InetAddress) inet4Address0);
          assertEquals("lo\t(lo)\nib0\t(ib0)\nem1\t(em1)\n", networkAdminImpl0.getNetworkInterfacesAsString());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl();
          assertNotNull(networkAdminImpl0);
          
          networkAdminImpl0.setIPv6Enabled(true);
          assertEquals(false, networkAdminImpl0.hasIPV6Potential());
          assertEquals("lo\t(lo)\nib0\t(ib0)\nem1\t(em1)\n", networkAdminImpl0.getNetworkInterfacesAsString());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl();
          assertNotNull(networkAdminImpl0);
          
          networkAdminImpl0.checkNetworkInterfaces(false, false);
          assertEquals("lo\t(lo)\nib0\t(ib0)\nem1\t(em1)\n", networkAdminImpl0.getNetworkInterfacesAsString());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl();
          assertNotNull(networkAdminImpl0);
          
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          Inet4Address inet4Address1 = (Inet4Address)networkAdminImpl0.getMultiHomedOutgoingRoundRobinBindAddress((InetAddress) inet4Address0);
          assertNotNull(inet4Address1);
          assertEquals("0.0.0.0", inet4Address1.getCanonicalHostName());
          assertEquals("lo\t(lo)\nib0\t(ib0)\nem1\t(em1)\n", networkAdminImpl0.getNetworkInterfacesAsString());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test14()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl();
          assertNotNull(networkAdminImpl0);
          
          Inet6Address inet6Address0 = (Inet6Address)networkAdminImpl0.getSingleHomedServiceBindAddress((-1927));
          assertNotNull(inet6Address0);
          
          Inet6Address inet6Address1 = (Inet6Address)networkAdminImpl0.getMultiHomedOutgoingRoundRobinBindAddress((InetAddress) inet6Address0);
          assertNotSame(inet6Address0, inet6Address1);
          assertNotNull(inet6Address1);
          assertEquals("lo\t(lo)\nib0\t(ib0)\nem1\t(em1)\n", networkAdminImpl0.getNetworkInterfacesAsString());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test15()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl();
          assertNotNull(networkAdminImpl0);
          
          InetAddress[] inetAddressArray0 = networkAdminImpl0.getMultiHomedServiceBindAddresses(true);
          assertEquals("lo\t(lo)\nib0\t(ib0)\nem1\t(em1)\n", networkAdminImpl0.getNetworkInterfacesAsString());
          assertNotNull(inetAddressArray0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test16()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl();
          assertNotNull(networkAdminImpl0);
          
          InetAddress[] inetAddressArray0 = networkAdminImpl0.getMultiHomedServiceBindAddresses(false);
          assertEquals("lo\t(lo)\nib0\t(ib0)\nem1\t(em1)\n", networkAdminImpl0.getNetworkInterfacesAsString());
          assertNotNull(inetAddressArray0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test17()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl();
          assertNotNull(networkAdminImpl0);
          
          Inet4Address inet4Address0 = (Inet4Address)networkAdminImpl0.getSingleHomedServiceBindAddress();
          assertEquals("lo\t(lo)\nib0\t(ib0)\nem1\t(em1)\n", networkAdminImpl0.getNetworkInterfacesAsString());
          assertNotNull(inet4Address0);
          assertEquals(false, inet4Address0.isLoopbackAddress());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test18()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl();
          assertNotNull(networkAdminImpl0);
          
          InetAddress[] inetAddressArray0 = networkAdminImpl0.getAllBindAddresses(false);
          assertEquals("lo\t(lo)\nib0\t(ib0)\nem1\t(em1)\n", networkAdminImpl0.getNetworkInterfacesAsString());
          assertNotNull(inetAddressArray0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test19()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl();
          assertNotNull(networkAdminImpl0);
          
          String string0 = networkAdminImpl0.getNetworkInterfacesAsString();
          assertEquals("lo\t(lo)\nib0\t(ib0)\nem1\t(em1)\n", string0);
          assertNotNull(string0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test20()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl();
          assertNotNull(networkAdminImpl0);
          
          InetAddress[] inetAddressArray0 = networkAdminImpl0.getBindableAddresses();
          assertEquals("lo\t(lo)\nib0\t(ib0)\nem1\t(em1)\n", networkAdminImpl0.getNetworkInterfacesAsString());
          assertNotNull(inetAddressArray0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test21()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl();
          assertNotNull(networkAdminImpl0);
          
          boolean boolean0 = networkAdminImpl0.canBind((InetAddress) null);
          assertEquals("lo\t(lo)\nib0\t(ib0)\nem1\t(em1)\n", networkAdminImpl0.getNetworkInterfacesAsString());
          assertEquals(false, boolean0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test22()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl();
          assertNotNull(networkAdminImpl0);
          
          try {
            networkAdminImpl0.getBindablePort((-885));
            fail("Expecting exception: IOException");
          } catch(IOException e) {
            /*
             * No bindable ports found
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test23()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl();
          assertNotNull(networkAdminImpl0);
          
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          networkAdminImpl0.mapAddressToBindIP((InetAddress) inet4Address0);
          assertEquals("lo\t(lo)\nib0\t(ib0)\nem1\t(em1)\n", networkAdminImpl0.getNetworkInterfacesAsString());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test24()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl();
          assertNotNull(networkAdminImpl0);
          
          ColumnTC_ChosenColumn columnTC_ChosenColumn0 = new ColumnTC_ChosenColumn("X]5m_N@O7O8G@yP7");
          List<Object> list0 = columnTC_ChosenColumn0.getCellAddedListeners();
          networkAdminImpl0.guessAddress(list0);
          assertEquals("lo\t(lo)\nib0\t(ib0)\nem1\t(em1)\n", networkAdminImpl0.getNetworkInterfacesAsString());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test25()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl();
          assertNotNull(networkAdminImpl0);
          
          networkAdminImpl0.getDefaultPublicAddressV6();
          assertEquals("lo\t(lo)\nib0\t(ib0)\nem1\t(em1)\n", networkAdminImpl0.getNetworkInterfacesAsString());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test26()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl();
          assertNotNull(networkAdminImpl0);
          
          boolean boolean0 = networkAdminImpl0.hasDHTIPV6();
          assertEquals(false, boolean0);
          assertEquals("lo\t(lo)\nib0\t(ib0)\nem1\t(em1)\n", networkAdminImpl0.getNetworkInterfacesAsString());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test27()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl();
          assertNotNull(networkAdminImpl0);
          
          NetworkAdminSocksProxy[] networkAdminSocksProxyArray0 = networkAdminImpl0.getSocksProxies();
          assertNotNull(networkAdminSocksProxyArray0);
          assertEquals("lo\t(lo)\nib0\t(ib0)\nem1\t(em1)\n", networkAdminImpl0.getNetworkInterfacesAsString());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test28()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl();
          assertNotNull(networkAdminImpl0);
          
          networkAdminImpl0.getHTTPProxy();
          assertEquals("lo\t(lo)\nib0\t(ib0)\nem1\t(em1)\n", networkAdminImpl0.getNetworkInterfacesAsString());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test29()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl();
          assertNotNull(networkAdminImpl0);
          
          // Undeclared exception!
          try {
            networkAdminImpl0.lookupASN((InetAddress) null);
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test30()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl();
          assertNotNull(networkAdminImpl0);
          
          networkAdminImpl0.addToASHistory((NetworkAdminASN) null);
          assertEquals("lo\t(lo)\nib0\t(ib0)\nem1\t(em1)\n", networkAdminImpl0.getNetworkInterfacesAsString());
          assertEquals(false, networkAdminImpl0.hasIPV4Potential());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test31()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl();
          assertNotNull(networkAdminImpl0);
          
          networkAdminImpl0.pingTargets((InetAddress) null, (-1846), (NetworkAdminRoutesListener) null);
          assertEquals("lo\t(lo)\nib0\t(ib0)\nem1\t(em1)\n", networkAdminImpl0.getNetworkInterfacesAsString());
          assertEquals(false, networkAdminImpl0.hasIPV4Potential());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test32()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          NetworkAdminImpl networkAdminImpl0 = new NetworkAdminImpl();
          assertNotNull(networkAdminImpl0);
          
          Inet6Address inet6Address0 = (Inet6Address)networkAdminImpl0.getSingleHomedServiceBindAddress((-1927));
          assertNotNull(inet6Address0);
          
          NetworkAdminImpl.networkNode networkAdminImpl_networkNode0 = networkAdminImpl0.new networkNode((InetAddress) inet6Address0, 0, 0);
          String string0 = networkAdminImpl_networkNode0.getString();
          assertEquals("lo\t(lo)\nib0\t(ib0)\nem1\t(em1)\n", networkAdminImpl0.getNetworkInterfacesAsString());
          assertNotNull(string0);
          assertEquals("0,0:0:0:0:0:0:0:0/0:0:0:0:0:0:0:0[local=false],0", string0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
