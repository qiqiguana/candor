/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.networkmanager.admin.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.networkmanager.admin.impl.NetworkAdminSocksProxyImpl;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class NetworkAdminSocksProxyImplEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      NetworkAdminSocksProxyImpl networkAdminSocksProxyImpl0 = new NetworkAdminSocksProxyImpl(":rE.iL4[", ":rE.iL4[", ":rE.iL4[", ":rE.iL4[");
      String string0 = networkAdminSocksProxyImpl0.getPort();
      assertEquals(":rE.iL4[", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      NetworkAdminSocksProxyImpl networkAdminSocksProxyImpl0 = new NetworkAdminSocksProxyImpl("", "", "", "");
      String string0 = networkAdminSocksProxyImpl0.getHost();
      assertEquals("", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      NetworkAdminSocksProxyImpl networkAdminSocksProxyImpl0 = new NetworkAdminSocksProxyImpl("", "", "", "");
      String string0 = networkAdminSocksProxyImpl0.getUser();
      assertEquals("", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      NetworkAdminSocksProxyImpl networkAdminSocksProxyImpl0 = new NetworkAdminSocksProxyImpl("", "", "", "");
      String string0 = networkAdminSocksProxyImpl0.getString();
      assertEquals(":, versions=unknown (Connect failed)", string0);
      assertNotNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      NetworkAdminSocksProxyImpl networkAdminSocksProxyImpl0 = new NetworkAdminSocksProxyImpl("", "", "", "");
      boolean boolean0 = networkAdminSocksProxyImpl0.isConfigured();
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      NetworkAdminSocksProxyImpl networkAdminSocksProxyImpl0 = new NetworkAdminSocksProxyImpl(":rE.iL4[", ":rE.iL4[", ":rE.iL4[", ":rE.iL4[");
      boolean boolean0 = networkAdminSocksProxyImpl0.isConfigured();
      assertEquals(true, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          NetworkAdminSocksProxyImpl networkAdminSocksProxyImpl0 = new NetworkAdminSocksProxyImpl(":rE.iL4[", ":rE.iL4[", ":rE.iL4[", ":rE.iL4[");
          String string0 = networkAdminSocksProxyImpl0.getString();
          assertEquals(":rE.iL4[::rE.iL4[ [auth=:rE.iL4[], versions=unknown (Connect failed)", string0);
          assertNotNull(string0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
