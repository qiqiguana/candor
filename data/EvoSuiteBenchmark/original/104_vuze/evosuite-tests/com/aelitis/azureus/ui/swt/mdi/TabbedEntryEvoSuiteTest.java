/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.ui.swt.mdi;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.ui.common.viewtitleinfo.ViewTitleInfo;
import com.aelitis.azureus.ui.mdi.MdiEntryVitalityImage;
import com.aelitis.azureus.ui.swt.mdi.MdiSWTMenuHackListener;
import com.aelitis.azureus.ui.swt.mdi.TabbedEntry;
import com.aelitis.azureus.ui.swt.mdi.TabbedMDI;
import com.aelitis.azureus.ui.swt.skin.SWTSkin;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.eclipse.swt.events.DisposeEvent;
import org.eclipse.swt.widgets.Item;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.gudy.azureus2.ui.swt.views.MySharesView;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TabbedEntryEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "9\",o");
          tabbedEntry0.show();
          assertEquals(false, tabbedEntry0.isDisposed());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "s\",o");
          boolean boolean0 = tabbedEntry0.close(false);
          assertEquals(true, boolean0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, (String) null);
          MySharesView mySharesView0 = new MySharesView();
          tabbedEntry0.setViewTitleInfo((ViewTitleInfo) mySharesView0);
          tabbedEntry0.viewTitleInfoRefresh((ViewTitleInfo) mySharesView0);
          assertEquals(true, tabbedEntry0.isPullTitleFromView());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "W4");
          MdiEntryVitalityImage mdiEntryVitalityImage0 = tabbedEntry0.addVitalityImage("");
          assertNull(mdiEntryVitalityImage0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "9\",o");
          tabbedEntry0.setSelectable(false);
          assertEquals(true, tabbedEntry0.isCloseable());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "+G");
          MdiEntryVitalityImage[] mdiEntryVitalityImageArray0 = tabbedEntry0.getVitalityImages();
          assertNotNull(mdiEntryVitalityImageArray0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "s\",o");
          tabbedEntry0.expandTo();
          assertEquals(false, tabbedEntry0.isAdded());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "s\",o");
          tabbedEntry0.build();
          assertNull(tabbedEntry0.getPreferredAfterID());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test8()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, (String) null);
          boolean boolean0 = tabbedEntry0.isSelectable();
          assertEquals(true, boolean0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test9()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "9\",o");
          Item item0 = tabbedEntry0.getSwtItem();
          assertNull(item0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "@lD=|C#\"S$");
          tabbedEntry0.removeListener((MdiSWTMenuHackListener) null);
          assertEquals(false, tabbedEntry0.isCollapseDisabled());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, (String) null);
          boolean boolean0 = tabbedEntry0.isCloseable();
          assertEquals(true, boolean0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "W4");
          tabbedEntry0.addListener((MdiSWTMenuHackListener) null);
          assertNull(tabbedEntry0.getPreferredAfterID());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "W4");
          boolean boolean0 = tabbedEntry0.swt_build();
          assertEquals(true, boolean0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test14()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, (String) null);
          // Undeclared exception!
          try {
            tabbedEntry0.widgetDisposed((DisposeEvent) null);
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test15()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "9\",o");
          tabbedEntry0.setTitle("9\",o");
          assertNull(tabbedEntry0.getParentID());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test16()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "@lD=|C#\"S$");
          tabbedEntry0.viewTitleInfoRefresh((ViewTitleInfo) null);
          assertEquals(false, tabbedEntry0.isExpanded());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test17()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "W4");
          MySharesView mySharesView0 = new MySharesView();
          tabbedEntry0.viewTitleInfoRefresh((ViewTitleInfo) mySharesView0);
          assertEquals(true, tabbedEntry0.isCloseable());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
