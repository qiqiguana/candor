/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.peermanager.messaging.bittorrent;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.peermanager.messaging.MessageException;
import com.aelitis.azureus.core.peermanager.messaging.bittorrent.BTRequest;
import org.gudy.azureus2.core3.util.DirectByteBuffer;
import org.gudy.azureus2.core3.util.DirectByteBufferPool;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BTRequestEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BTRequest bTRequest0 = new BTRequest((-679), (-679), (-679), (byte) (-12));
      int int0 = bTRequest0.getLength();
      assertEquals((-679), int0);
      assertEquals(-12, bTRequest0.getVersion());
      assertEquals("BT_REQUEST piece #-679:-679->-1359", bTRequest0.getDescription());
  }

  @Test
  public void test1()  throws Throwable  {
      BTRequest bTRequest0 = new BTRequest((-679), (-679), (-679), (byte) (-12));
      byte byte0 = bTRequest0.getVersion();
      assertEquals((byte) (-12), byte0);
      assertEquals("BT_REQUEST piece #-679:-679->-1359", bTRequest0.getDescription());
  }

  @Test
  public void test2()  throws Throwable  {
      BTRequest bTRequest0 = new BTRequest((-10), (-10), (-10), (byte)28);
      byte[] byteArray0 = bTRequest0.getIDBytes();
      assertEquals("BT_REQUEST piece #-10:-10->-21", bTRequest0.getDescription());
      assertNotNull(byteArray0);
      assertEquals(28, bTRequest0.getVersion());
  }

  @Test
  public void test3()  throws Throwable  {
      BTRequest bTRequest0 = new BTRequest(0, 0, 0, (byte)94);
      assertNotNull(bTRequest0);
      
      int int0 = bTRequest0.getPieceNumber();
      assertEquals("BT_REQUEST piece #0:0->-1", bTRequest0.getDescription());
      assertEquals(0, int0);
      assertEquals(94, bTRequest0.getVersion());
  }

  @Test
  public void test4()  throws Throwable  {
      BTRequest bTRequest0 = new BTRequest(0, 0, 0, (byte)94);
      assertNotNull(bTRequest0);
      
      int int0 = bTRequest0.getPieceOffset();
      assertEquals(0, int0);
      assertEquals(94, bTRequest0.getVersion());
      assertEquals("BT_REQUEST piece #0:0->-1", bTRequest0.getDescription());
  }

  @Test
  public void test5()  throws Throwable  {
      BTRequest bTRequest0 = new BTRequest(26, 26, 26, (byte)31);
      int int0 = bTRequest0.getFeatureSubID();
      assertEquals(31, bTRequest0.getVersion());
      assertEquals(6, int0);
      assertEquals("BT_REQUEST piece #26:26->51", bTRequest0.getDescription());
  }

  @Test
  public void test6()  throws Throwable  {
      BTRequest bTRequest0 = new BTRequest(0, 0, 0, (byte)94);
      assertNotNull(bTRequest0);
      
      String string0 = bTRequest0.getFeatureID();
      assertEquals("BT1", string0);
      assertEquals(94, bTRequest0.getVersion());
      assertEquals("BT_REQUEST piece #0:0->-1", bTRequest0.getDescription());
  }

  @Test
  public void test7()  throws Throwable  {
      BTRequest bTRequest0 = new BTRequest(26, 26, 26, (byte)31);
      bTRequest0.getType();
      assertEquals("BT_REQUEST piece #26:26->51", bTRequest0.getDescription());
      assertEquals(31, bTRequest0.getVersion());
  }

  @Test
  public void test8()  throws Throwable  {
      BTRequest bTRequest0 = new BTRequest((-679), (-679), (-679), (byte) (-12));
      DirectByteBuffer directByteBuffer0 = DirectByteBufferPool.getBuffer((byte) (-12), 200);
      try {
        bTRequest0.deserialize(directByteBuffer0, (byte) (-12));
        fail("Expecting exception: MessageException");
      } catch(MessageException e) {
        /*
         * [BT_REQUEST] decode error: payload.remaining[200] != 12
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      BTRequest bTRequest0 = new BTRequest(26, 26, 26, (byte)31);
      String string0 = bTRequest0.getDescription();
      String string1 = bTRequest0.getDescription();
      assertEquals(31, bTRequest0.getVersion());
      assertSame(string1, string0);
      assertEquals("BT_REQUEST piece #26:26->51", string1);
      assertNotNull(string1);
  }

  @Test
  public void test10()  throws Throwable  {
      BTRequest bTRequest0 = new BTRequest((-10), (-10), (-10), (byte)28);
      DirectByteBuffer[] directByteBufferArray0 = bTRequest0.getData();
      assertNotNull(directByteBufferArray0);
      
      bTRequest0.getData();
      assertEquals(28, bTRequest0.getVersion());
      assertEquals("BT_REQUEST piece #-10:-10->-21", bTRequest0.getDescription());
      assertEquals(-10, bTRequest0.getLength());
  }

  @Test
  public void test11()  throws Throwable  {
      BTRequest bTRequest0 = new BTRequest((int) (byte) (-104), (int) (byte) (-104), (int) (byte) (-104), (byte) (-104));
      try {
        bTRequest0.deserialize((DirectByteBuffer) null, (byte) (-104));
        fail("Expecting exception: MessageException");
      } catch(MessageException e) {
        /*
         * [BT_REQUEST] decode error: data == null
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      BTRequest bTRequest0 = new BTRequest(0, 0, 0, (byte)12);
      DirectByteBuffer directByteBuffer0 = DirectByteBufferPool.getBuffer((byte)12, (byte)12);
      BTRequest bTRequest1 = (BTRequest)bTRequest0.deserialize(directByteBuffer0, (byte)12);
      assertNotNull(bTRequest1);
      
      int int0 = bTRequest0.hashCode();
      assertEquals(0, int0);
      
      DirectByteBuffer directByteBuffer1 = DirectByteBufferPool.getBuffer((byte)12, (byte)12);
      BTRequest bTRequest2 = (BTRequest)bTRequest0.deserialize(directByteBuffer1, (byte)12);
      assertEquals("BT_REQUEST piece #0:0->-1", bTRequest2.getDescription());
      assertEquals(12, bTRequest0.getVersion());
  }

  @Test
  public void test13()  throws Throwable  {
      BTRequest bTRequest0 = new BTRequest(0, 0, 0, (byte)94);
      assertNotNull(bTRequest0);
      
      bTRequest0.destroy();
      assertEquals(94, bTRequest0.getVersion());
      assertEquals("BT_REQUEST piece #0:0->-1", bTRequest0.getDescription());
      assertEquals(0, bTRequest0.getPieceNumber());
  }

  @Test
  public void test14()  throws Throwable  {
      BTRequest bTRequest0 = new BTRequest((-10), (-10), (-10), (byte)28);
      DirectByteBuffer[] directByteBufferArray0 = bTRequest0.getData();
      assertNotNull(directByteBufferArray0);
      
      bTRequest0.destroy();
      assertEquals("BT_REQUEST piece #-10:-10->-21", bTRequest0.getDescription());
  }

  @Test
  public void test15()  throws Throwable  {
      BTRequest bTRequest0 = new BTRequest((-10), (-10), (-10), (byte)28);
      boolean boolean0 = bTRequest0.equals((Object) null);
      assertEquals(false, boolean0);
      assertEquals(28, bTRequest0.getVersion());
      assertEquals("BT_REQUEST piece #-10:-10->-21", bTRequest0.getDescription());
  }

  @Test
  public void test16()  throws Throwable  {
      BTRequest bTRequest0 = new BTRequest(0, 0, 0, (byte)0);
      assertNotNull(bTRequest0);
      
      BTRequest bTRequest1 = new BTRequest((int) (byte)0, (int) (byte)0, 85, (byte)0);
      boolean boolean0 = bTRequest0.equals((Object) bTRequest1);
      assertEquals(false, boolean0);
      assertEquals("BT_REQUEST piece #0:0->84", bTRequest1.getDescription());
      assertEquals(0, bTRequest1.getVersion());
  }

  @Test
  public void test17()  throws Throwable  {
      BTRequest bTRequest0 = new BTRequest(26, 26, 26, (byte)31);
      boolean boolean0 = bTRequest0.equals((Object) "BT_REQUEST piece #26:26->51");
      assertEquals(31, bTRequest0.getVersion());
      assertEquals("BT_REQUEST piece #26:26->51", bTRequest0.getDescription());
      assertEquals(false, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      BTRequest bTRequest0 = new BTRequest(0, 0, 0, (byte)94);
      assertNotNull(bTRequest0);
      
      BTRequest bTRequest1 = new BTRequest((int) (byte)94, (int) (byte)94, (int) (byte)94, (byte)94);
      boolean boolean0 = bTRequest0.equals((Object) bTRequest1);
      assertEquals(94, bTRequest0.getVersion());
      assertEquals(false, boolean0);
      assertEquals("BT_REQUEST piece #94:94->187", bTRequest1.getDescription());
  }

  @Test
  public void test19()  throws Throwable  {
      BTRequest bTRequest0 = new BTRequest(0, 364, 364, (byte)0);
      BTRequest bTRequest1 = new BTRequest((int) (byte)0, (int) (byte)0, (int) (byte)0, (byte)0);
      assertNotNull(bTRequest1);
      
      bTRequest0.equals((Object) bTRequest1);
      assertEquals(0, bTRequest0.getVersion());
      assertEquals("BT_REQUEST piece #0:364->727", bTRequest0.getDescription());
      assertEquals(0, bTRequest1.getPieceNumber());
  }

  @Test
  public void test20()  throws Throwable  {
      BTRequest bTRequest0 = new BTRequest((int) (byte)94, (int) (byte)94, (int) (byte)94, (byte)94);
      BTRequest bTRequest1 = new BTRequest((int) (byte)94, 94, (int) (byte)94, (byte)94);
      boolean boolean0 = bTRequest0.equals((Object) bTRequest1);
      assertEquals("BT_REQUEST piece #94:94->187", bTRequest0.getDescription());
      assertEquals(true, boolean0);
  }
}
