/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.networkmanager.impl.tcp;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.networkmanager.impl.TransportHelper;
import com.aelitis.azureus.core.networkmanager.impl.TransportHelperFilter;
import com.aelitis.azureus.core.networkmanager.impl.TransportHelperFilterTransparent;
import com.aelitis.azureus.core.networkmanager.impl.tcp.IncomingSocketChannelManager;
import com.aelitis.azureus.core.networkmanager.impl.tcp.TCPTransportHelper;
import java.net.InetAddress;
import java.nio.channels.SocketChannel;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class IncomingSocketChannelManagerEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          IncomingSocketChannelManager incomingSocketChannelManager0 = new IncomingSocketChannelManager("", "");
          assertNotNull(incomingSocketChannelManager0);
          
          boolean boolean0 = incomingSocketChannelManager0.isEnabled();
          assertEquals(0, incomingSocketChannelManager0.getTCPListeningPortNumber());
          assertEquals(false, boolean0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          IncomingSocketChannelManager incomingSocketChannelManager0 = new IncomingSocketChannelManager("c`yqpK@#O)P", "c`yqpK@#O)P");
          assertNotNull(incomingSocketChannelManager0);
          
          incomingSocketChannelManager0.getLastNonLocalConnectionTime();
          assertEquals(false, incomingSocketChannelManager0.isEnabled());
          assertEquals(0, incomingSocketChannelManager0.getTCPListeningPortNumber());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          IncomingSocketChannelManager incomingSocketChannelManager0 = new IncomingSocketChannelManager("prop '", "prop '");
          assertNotNull(incomingSocketChannelManager0);
          
          boolean boolean0 = incomingSocketChannelManager0.isEffectiveBindAddress((InetAddress) null);
          assertEquals(false, incomingSocketChannelManager0.isEnabled());
          assertEquals(true, boolean0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          IncomingSocketChannelManager incomingSocketChannelManager0 = new IncomingSocketChannelManager("Max.Peer.Connections.Per.Torrent.When.Seeding", "Max.Peer.Connections.Per.Torrent.When.Seeding");
          assertNotNull(incomingSocketChannelManager0);
          
          incomingSocketChannelManager0.clearExplicitBindAddress();
          assertEquals(25, incomingSocketChannelManager0.getTCPListeningPortNumber());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          IncomingSocketChannelManager incomingSocketChannelManager0 = new IncomingSocketChannelManager("c`yqpK@#O)P", "c`yqpK@#O)P");
          assertNotNull(incomingSocketChannelManager0);
          
          incomingSocketChannelManager0.setExplicitBindAddress((InetAddress) null);
          incomingSocketChannelManager0.getEffectiveBindAddresses();
          assertEquals(0L, incomingSocketChannelManager0.getLastNonLocalConnectionTime());
          assertEquals(10000, incomingSocketChannelManager0.getTCPListeningPortNumber());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          IncomingSocketChannelManager incomingSocketChannelManager0 = new IncomingSocketChannelManager("Max.Peer.Connections.Per.Torrent.When.Seeding", "Max.Peer.Connections.Per.Torrent.When.Seeding");
          assertNotNull(incomingSocketChannelManager0);
          
          int int0 = incomingSocketChannelManager0.getTCPListeningPortNumber();
          assertEquals(10000, int0);
          assertEquals(0L, incomingSocketChannelManager0.getLastNonLocalConnectionTime());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          IncomingSocketChannelManager incomingSocketChannelManager0 = new IncomingSocketChannelManager("8/@r", "8/@r");
          assertNotNull(incomingSocketChannelManager0);
          
          TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
          TransportHelperFilterTransparent transportHelperFilterTransparent0 = new TransportHelperFilterTransparent((TransportHelper) tCPTransportHelper0, false);
          // Undeclared exception!
          try {
            incomingSocketChannelManager0.process(360, (TransportHelperFilter) transportHelperFilterTransparent0);
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
