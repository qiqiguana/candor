/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.networkmanager;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.networkmanager.VirtualServerChannelSelector;
import com.aelitis.azureus.core.networkmanager.VirtualServerChannelSelectorFactory;
import com.aelitis.azureus.core.networkmanager.impl.tcp.VirtualBlockingServerChannelSelector;
import com.aelitis.azureus.core.networkmanager.impl.tcp.VirtualNonBlockingServerChannelSelector;
import java.net.InetSocketAddress;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class VirtualServerChannelSelectorFactoryEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      InetSocketAddress inetSocketAddress0 = InetSocketAddress.createUnresolved("o?U2[Q", 68);
      VirtualBlockingServerChannelSelector virtualBlockingServerChannelSelector0 = (VirtualBlockingServerChannelSelector)VirtualServerChannelSelectorFactory.createTest(inetSocketAddress0, 68, (VirtualServerChannelSelector.SelectListener) null);
      assertEquals(false, virtualBlockingServerChannelSelector0.isRunning());
  }

  @Test
  public void test1()  throws Throwable  {
      VirtualServerChannelSelectorFactory virtualServerChannelSelectorFactory0 = new VirtualServerChannelSelectorFactory();
      assertNotNull(virtualServerChannelSelectorFactory0);
  }

  @Test
  public void test2()  throws Throwable  {
      InetSocketAddress inetSocketAddress0 = InetSocketAddress.createUnresolved("o?U2[Q", 68);
      VirtualNonBlockingServerChannelSelector virtualNonBlockingServerChannelSelector0 = (VirtualNonBlockingServerChannelSelector)VirtualServerChannelSelectorFactory.createNonBlocking(inetSocketAddress0, 68, (VirtualServerChannelSelector.SelectListener) null);
      assertEquals(0L, virtualNonBlockingServerChannelSelector0.getTimeOfLastAccept());
  }
}
