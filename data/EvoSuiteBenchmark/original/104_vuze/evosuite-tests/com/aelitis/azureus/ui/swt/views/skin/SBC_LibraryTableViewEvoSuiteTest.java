/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.ui.swt.views.skin;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.ui.common.ToolBarItem;
import com.aelitis.azureus.ui.common.table.TableColumnCore;
import com.aelitis.azureus.ui.common.table.TableRowCore;
import com.aelitis.azureus.ui.swt.skin.SWTSkin;
import com.aelitis.azureus.ui.swt.skin.SWTSkinObject;
import com.aelitis.azureus.ui.swt.skin.SWTSkinObjectBasic;
import com.aelitis.azureus.ui.swt.skin.SWTSkinProperties;
import com.aelitis.azureus.ui.swt.skin.SWTSkinPropertiesImpl;
import com.aelitis.azureus.ui.swt.toolbar.ToolBarItemSO;
import com.aelitis.azureus.ui.swt.views.skin.SBC_LibraryTableView;
import com.aelitis.azureus.ui.swt.views.skin.SBC_LibraryTableView_Big;
import com.aelitis.azureus.ui.swt.views.skin.ToolBarView;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.eclipse.swt.graphics.Image;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.gudy.azureus2.ui.swt.views.table.painted.TableRowPainted;
import org.gudy.azureus2.ui.swt.views.table.painted.TableViewPainted;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SBC_LibraryTableViewEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SBC_LibraryTableView sBC_LibraryTableView0 = new SBC_LibraryTableView();
          int int0 = sBC_LibraryTableView0.getTableMode();
          assertEquals(1, int0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SBC_LibraryTableView sBC_LibraryTableView0 = new SBC_LibraryTableView();
          ToolBarView toolBarView0 = new ToolBarView();
          ToolBarItemSO toolBarItemSO0 = new ToolBarItemSO(toolBarView0, "/bFp*cu7zX,", true);
          boolean boolean0 = sBC_LibraryTableView0.toolBarItemActivated((ToolBarItem) toolBarItemSO0, 0L, (Object) "BT_UNINTERESTED");
          assertEquals(false, boolean0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SBC_LibraryTableView sBC_LibraryTableView0 = new SBC_LibraryTableView();
          String string0 = sBC_LibraryTableView0.getUpdateUIName();
          assertEquals("SBC_LibraryTableView", string0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SBC_LibraryTableView sBC_LibraryTableView0 = new SBC_LibraryTableView();
          boolean boolean0 = sBC_LibraryTableView0.useBigTable();
          assertEquals(false, boolean0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SBC_LibraryTableView sBC_LibraryTableView0 = new SBC_LibraryTableView();
          SWTSkinPropertiesImpl sWTSkinPropertiesImpl0 = new SWTSkinPropertiesImpl();
          SWTSkinObjectBasic sWTSkinObjectBasic0 = new SWTSkinObjectBasic((SWTSkin) null, (SWTSkinProperties) sWTSkinPropertiesImpl0, (String) null, (String) null, (String) null, (SWTSkinObject) null);
          Object object0 = sBC_LibraryTableView0.skinObjectInitialShow((SWTSkinObject) sWTSkinObjectBasic0, (Object) sWTSkinPropertiesImpl0);
          assertNull(object0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SBC_LibraryTableView sBC_LibraryTableView0 = new SBC_LibraryTableView();
          Object object0 = sBC_LibraryTableView0.skinObjectShown((SWTSkinObject) null, (Object) null);
          assertNull(object0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test6()  throws Throwable  {
      TableRowCore[] tableRowCoreArray0 = new TableRowCore[7];
      SBC_LibraryTableView.doDefaultClick(tableRowCoreArray0, 1332, true);
  }

  @Test
  public void test7()  throws Throwable  {
      TableRowCore[] tableRowCoreArray0 = new TableRowCore[1];
      Class<?> class0 = SBC_LibraryTableView.class;
      TableColumnCore[] tableColumnCoreArray0 = new TableColumnCore[1];
      TableViewPainted tableViewPainted0 = new TableViewPainted(class0, "", "", tableColumnCoreArray0, "", 1768842341);
      TableRowPainted tableRowPainted0 = (TableRowPainted)tableViewPainted0.createNewRow((Object) "BT_PIECE");
      tableRowCoreArray0[0] = (TableRowCore) tableRowPainted0;
      SBC_LibraryTableView.doDefaultClick(tableRowCoreArray0, 0, false);
  }

  @Test
  public void test8()  throws Throwable  {
      TableRowCore[] tableRowCoreArray0 = new TableRowCore[1];
      Class<?> class0 = SBC_LibraryTableView.class;
      TableColumnCore[] tableColumnCoreArray0 = new TableColumnCore[1];
      TableViewPainted tableViewPainted0 = new TableViewPainted(class0, "", "", tableColumnCoreArray0, "", 1768842341);
      TableRowPainted tableRowPainted0 = (TableRowPainted)tableViewPainted0.createNewRow((Object) "BT_PIECE");
      tableRowCoreArray0[0] = (TableRowCore) tableRowPainted0;
      SBC_LibraryTableView.doDefaultClick(tableRowCoreArray0, (-301), false);
  }

  @Test
  public void test9()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SBC_LibraryTableView_Big sBC_LibraryTableView_Big0 = new SBC_LibraryTableView_Big();
          sBC_LibraryTableView_Big0.updateUI();
          assertEquals("SBC_LibraryTableView_Big", sBC_LibraryTableView_Big0.getUpdateUIName());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SBC_LibraryTableView sBC_LibraryTableView0 = new SBC_LibraryTableView();
          Object object0 = sBC_LibraryTableView0.skinObjectHidden((SWTSkinObject) null, (Object) "filelinks");
          assertNull(object0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SBC_LibraryTableView sBC_LibraryTableView0 = new SBC_LibraryTableView();
          sBC_LibraryTableView0.refreshToolBarItems((Map<String, Long>) null);
          assertEquals(false, sBC_LibraryTableView0.useBigTable());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SBC_LibraryTableView sBC_LibraryTableView0 = new SBC_LibraryTableView();
          TableColumnCore[] tableColumnCoreArray0 = sBC_LibraryTableView0.getColumns();
          assertNotNull(tableColumnCoreArray0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SBC_LibraryTableView sBC_LibraryTableView0 = new SBC_LibraryTableView();
          Object object0 = sBC_LibraryTableView0.skinObjectDestroyed((SWTSkinObject) null, (Object) null);
          assertNull(object0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test14()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SBC_LibraryTableView_Big sBC_LibraryTableView_Big0 = new SBC_LibraryTableView_Big();
          Image image0 = sBC_LibraryTableView_Big0.obfusticatedImage((Image) null);
          assertNull(image0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
