/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.custom.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.custom.CustomizationException;
import com.aelitis.azureus.core.custom.impl.CustomizationImpl;
import com.aelitis.azureus.core.custom.impl.CustomizationManagerImpl;
import java.io.File;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class CustomizationImplEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      File file0 = new File("", "");
      CustomizationImpl customizationImpl0 = new CustomizationImpl((CustomizationManagerImpl) null, "", "", file0);
      assertNotNull(customizationImpl0);
      
      customizationImpl0.getResource("");
      assertEquals("", customizationImpl0.getVersion());
      assertEquals("", customizationImpl0.getName());
  }

  @Test
  public void test1()  throws Throwable  {
      File file0 = new File("", "");
      CustomizationImpl customizationImpl0 = new CustomizationImpl((CustomizationManagerImpl) null, "", "", file0);
      assertNotNull(customizationImpl0);
      
      String string0 = customizationImpl0.getName();
      assertEquals("", customizationImpl0.getVersion());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      File file0 = new File("", "");
      CustomizationImpl customizationImpl0 = new CustomizationImpl((CustomizationManagerImpl) null, "", "", file0);
      assertNotNull(customizationImpl0);
      
      customizationImpl0.getProperty("");
      assertEquals("", customizationImpl0.getName());
      assertEquals("", customizationImpl0.getVersion());
  }

  @Test
  public void test3()  throws Throwable  {
      File file0 = new File("", "");
      CustomizationImpl customizationImpl0 = new CustomizationImpl((CustomizationManagerImpl) null, "", "", file0);
      assertNotNull(customizationImpl0);
      
      // Undeclared exception!
      try {
        customizationImpl0.exportToVuzeFile(file0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      File file0 = new File("", "");
      CustomizationImpl customizationImpl0 = new CustomizationImpl((CustomizationManagerImpl) null, "", "", file0);
      assertNotNull(customizationImpl0);
      
      customizationImpl0.setActive(true);
      assertEquals("", customizationImpl0.getVersion());
      assertEquals("", customizationImpl0.getName());
  }

  @Test
  public void test5()  throws Throwable  {
      File file0 = new File("", "");
      CustomizationImpl customizationImpl0 = new CustomizationImpl((CustomizationManagerImpl) null, "", "", file0);
      assertNotNull(customizationImpl0);
      
      File file1 = customizationImpl0.getContents();
      assertNotNull(file1);
      assertEquals("", customizationImpl0.getName());
      assertEquals("", customizationImpl0.getVersion());
  }

  @Test
  public void test6()  throws Throwable  {
      File file0 = new File("", "");
      CustomizationImpl customizationImpl0 = new CustomizationImpl((CustomizationManagerImpl) null, "", "", file0);
      assertNotNull(customizationImpl0);
      
      String string0 = customizationImpl0.getVersion();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", customizationImpl0.getName());
  }

  @Test
  public void test7()  throws Throwable  {
      File file0 = new File("", "");
      CustomizationImpl customizationImpl0 = new CustomizationImpl((CustomizationManagerImpl) null, "", "", file0);
      assertNotNull(customizationImpl0);
      
      boolean boolean0 = customizationImpl0.isActive();
      assertEquals("", customizationImpl0.getVersion());
      assertEquals("", customizationImpl0.getName());
      assertEquals(true, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      File file0 = new File("3w\"/2;-=0", "3w\"/2;-=0");
      CustomizationImpl customizationImpl0 = null;
      try {
        customizationImpl0 = new CustomizationImpl((CustomizationManagerImpl) null, "3w\"/2;-=0", "3w\"/2;-=0", file0);
        fail("Expecting exception: CustomizationException");
      } catch(CustomizationException e) {
        /*
         * Content file '3w\"/2;-=0/3w\"/2;-=0 not found
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          File file0 = new File("", "");
          CustomizationImpl customizationImpl0 = new CustomizationImpl((CustomizationManagerImpl) null, "", "", file0);
          assertNotNull(customizationImpl0);
          
          customizationImpl0.getResources("");
          assertEquals("", customizationImpl0.getVersion());
          assertEquals("", customizationImpl0.getName());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
