/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.plugins.dht;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.dht.DHT;
import com.aelitis.azureus.plugins.dht.DHTPlugin;
import com.aelitis.azureus.plugins.dht.DHTPluginListener;
import com.aelitis.azureus.plugins.dht.DHTPluginOperationListener;
import com.aelitis.azureus.plugins.dht.DHTPluginTransferHandler;
import java.net.InetSocketAddress;
import org.gudy.azureus2.plugins.ui.components.UITextField;
import org.gudy.azureus2.pluginsimpl.local.ui.UIManagerImpl;
import org.gudy.azureus2.pluginsimpl.local.ui.components.UITextFieldImpl;
import org.gudy.azureus2.pluginsimpl.local.ui.model.BasicPluginViewModelImpl;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DHTPluginEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DHTPlugin dHTPlugin0 = new DHTPlugin();
      dHTPlugin0.changePort(0);
      assertEquals(1, dHTPlugin0.getStatus());
  }

  @Test
  public void test1()  throws Throwable  {
      DHTPlugin dHTPlugin0 = new DHTPlugin();
      BasicPluginViewModelImpl basicPluginViewModelImpl0 = new BasicPluginViewModelImpl((UIManagerImpl) null, "");
      UITextFieldImpl uITextFieldImpl0 = (UITextFieldImpl)basicPluginViewModelImpl0.getStatus();
      dHTPlugin0.initComplete((UITextField) uITextFieldImpl0, false, "");
      assertEquals(1, dHTPlugin0.getStatus());
  }

  @Test
  public void test2()  throws Throwable  {
      DHTPlugin dHTPlugin0 = new DHTPlugin();
      int int0 = dHTPlugin0.getStatus();
      assertEquals(1, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      DHTPlugin dHTPlugin0 = new DHTPlugin();
      // Undeclared exception!
      try {
        dHTPlugin0.log((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      DHTPlugin dHTPlugin0 = new DHTPlugin();
      // Undeclared exception!
      try {
        dHTPlugin0.saveClockSkew();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      DHTPlugin dHTPlugin0 = new DHTPlugin();
      dHTPlugin0.isSleeping();
      assertEquals(1, dHTPlugin0.getStatus());
  }

  @Test
  public void test6()  throws Throwable  {
      DHTPlugin dHTPlugin0 = new DHTPlugin();
      dHTPlugin0.removeListener((DHTPluginListener) null);
      assertEquals(1, dHTPlugin0.getStatus());
  }

  @Test
  public void test7()  throws Throwable  {
      DHTPlugin dHTPlugin0 = new DHTPlugin();
      boolean boolean0 = dHTPlugin0.peekEnabled();
      assertEquals(1, dHTPlugin0.getStatus());
      assertEquals(true, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      DHTPlugin dHTPlugin0 = new DHTPlugin();
      boolean boolean0 = dHTPlugin0.isInitialising();
      assertEquals(1, dHTPlugin0.getStatus());
      assertEquals(true, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      DHTPlugin dHTPlugin0 = new DHTPlugin();
      boolean boolean0 = dHTPlugin0.isExtendedUseAllowed();
      assertEquals(1, dHTPlugin0.getStatus());
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      DHTPlugin dHTPlugin0 = new DHTPlugin();
      // Undeclared exception!
      try {
        dHTPlugin0.isReachable();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * DHT isn't enabled
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      DHTPlugin dHTPlugin0 = new DHTPlugin();
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try {
        dHTPlugin0.isDiversified(byteArray0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * DHT isn't enabled
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      DHTPlugin dHTPlugin0 = new DHTPlugin();
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try {
        dHTPlugin0.put(byteArray0, "", byteArray0, (byte)42, false, (DHTPluginOperationListener) null);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * DHT isn't enabled
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      DHTPlugin dHTPlugin0 = new DHTPlugin();
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try {
        dHTPlugin0.getLocalValue(byteArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test14()  throws Throwable  {
      DHTPlugin dHTPlugin0 = new DHTPlugin();
      // Undeclared exception!
      try {
        dHTPlugin0.getValues();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test15()  throws Throwable  {
      DHTPlugin dHTPlugin0 = new DHTPlugin();
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try {
        dHTPlugin0.get(byteArray0, "s", (byte) (-103), (int) (byte)0, 0L, true, true, (DHTPluginOperationListener) null);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * DHT isn't enabled
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      DHTPlugin dHTPlugin0 = new DHTPlugin();
      byte[] byteArray0 = new byte[10];
      // Undeclared exception!
      try {
        dHTPlugin0.hasLocalKey(byteArray0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * DHT isn't enabled
         */
      }
  }

  @Test
  public void test17()  throws Throwable  {
      DHTPlugin dHTPlugin0 = new DHTPlugin();
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try {
        dHTPlugin0.remove(byteArray0, "", (DHTPluginOperationListener) null);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * DHT isn't enabled
         */
      }
  }

  @Test
  public void test18()  throws Throwable  {
      DHTPlugin dHTPlugin0 = new DHTPlugin();
      // Undeclared exception!
      try {
        dHTPlugin0.importContact((InetSocketAddress) null, (byte)105);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * DHT isn't enabled
         */
      }
  }

  @Test
  public void test19()  throws Throwable  {
      DHTPlugin dHTPlugin0 = new DHTPlugin();
      // Undeclared exception!
      try {
        dHTPlugin0.importContact((InetSocketAddress) null, (byte)99, false);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * DHT isn't enabled
         */
      }
  }

  @Test
  public void test20()  throws Throwable  {
      DHTPlugin dHTPlugin0 = new DHTPlugin();
      // Undeclared exception!
      try {
        dHTPlugin0.getLocalAddress();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * DHT isn't enabled
         */
      }
  }

  @Test
  public void test21()  throws Throwable  {
      DHTPlugin dHTPlugin0 = new DHTPlugin();
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try {
        dHTPlugin0.registerHandler(byteArray0, (DHTPluginTransferHandler) null);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * DHT isn't enabled
         */
      }
  }

  @Test
  public void test22()  throws Throwable  {
      DHTPlugin dHTPlugin0 = new DHTPlugin();
      DHT[] dHTArray0 = dHTPlugin0.getDHTs();
      assertEquals(1, dHTPlugin0.getStatus());
      assertNotNull(dHTArray0);
  }

  @Test
  public void test23()  throws Throwable  {
      DHTPlugin dHTPlugin0 = new DHTPlugin();
      dHTPlugin0.getDHT((-505));
      assertEquals(1, dHTPlugin0.getStatus());
  }

  @Test
  public void test24()  throws Throwable  {
      DHTPlugin dHTPlugin0 = new DHTPlugin();
      long long0 = dHTPlugin0.getClockSkew();
      assertEquals(1, dHTPlugin0.getStatus());
      assertEquals(0L, long0);
  }
}
