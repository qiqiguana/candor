/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.versioncheck;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.versioncheck.VersionCheckClientUDPRequest;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.util.Map;
import org.gudy.azureus2.core3.util.BEncodingException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class VersionCheckClientUDPRequestEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      VersionCheckClientUDPRequest versionCheckClientUDPRequest0 = new VersionCheckClientUDPRequest((-442L));
      versionCheckClientUDPRequest0.getPayload();
      assertEquals(0, versionCheckClientUDPRequest0.getTransactionId());
      assertEquals("type=32,addr=null:request[con=-442,trans=0]", versionCheckClientUDPRequest0.getString());
  }

  @Test
  public void test1()  throws Throwable  {
      VersionCheckClientUDPRequest versionCheckClientUDPRequest0 = new VersionCheckClientUDPRequest(0L);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PrintStream printStream0 = new PrintStream((OutputStream) pipedOutputStream0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) printStream0);
      versionCheckClientUDPRequest0.serialise(dataOutputStream0);
      assertEquals(18, dataOutputStream0.size());
      assertEquals(2, versionCheckClientUDPRequest0.getTransactionId());
  }

  @Test
  public void test2()  throws Throwable  {
      VersionCheckClientUDPRequest versionCheckClientUDPRequest0 = new VersionCheckClientUDPRequest((-442L));
      String string0 = versionCheckClientUDPRequest0.getString();
      assertEquals("type=32,addr=null:request[con=-442,trans=7]", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      VersionCheckClientUDPRequest versionCheckClientUDPRequest0 = new VersionCheckClientUDPRequest((-442L));
      versionCheckClientUDPRequest0.setPayload((Map<String, Object>) null);
      assertEquals(0, versionCheckClientUDPRequest0.getSerialisedSize());
  }

  @Test
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)75;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) byteArrayInputStream0);
      VersionCheckClientUDPRequest versionCheckClientUDPRequest0 = null;
      try {
        versionCheckClientUDPRequest0 = new VersionCheckClientUDPRequest(dataInputStream0, (long) (byte) (-38), (int) (byte) (-38));
        fail("Expecting exception: BEncodingException");
      } catch(BEncodingException e) {
        /*
         * BDecoder: unknown command '0, remainder = \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) byteArrayInputStream0);
      VersionCheckClientUDPRequest versionCheckClientUDPRequest0 = null;
      try {
        versionCheckClientUDPRequest0 = new VersionCheckClientUDPRequest(dataInputStream0, (long) (byte) (-120), (int) (byte)0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * invalid length
         */
      }
  }
}
