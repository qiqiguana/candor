/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.networkmanager.admin.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.networkmanager.admin.impl.NetworkAdminNATUDPRequest;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.Map;
import org.gudy.azureus2.core3.util.BEncodingException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class NetworkAdminNATUDPRequestEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      NetworkAdminNATUDPRequest networkAdminNATUDPRequest0 = new NetworkAdminNATUDPRequest((-1387L));
      networkAdminNATUDPRequest0.setPayload((Map) null);
      assertEquals(0, networkAdminNATUDPRequest0.getTransactionId());
  }

  @Test
  public void test1()  throws Throwable  {
      NetworkAdminNATUDPRequest networkAdminNATUDPRequest0 = new NetworkAdminNATUDPRequest(0L);
      networkAdminNATUDPRequest0.getPayload();
      assertEquals("type=40,addr=null:request[con=0,trans=1]", networkAdminNATUDPRequest0.getString());
      assertEquals(1, networkAdminNATUDPRequest0.getTransactionId());
  }

  @Test
  public void test2()  throws Throwable  {
      NetworkAdminNATUDPRequest networkAdminNATUDPRequest0 = new NetworkAdminNATUDPRequest(32L);
      String string0 = networkAdminNATUDPRequest0.getString();
      assertEquals("type=40,addr=null:request[con=32,trans=3]", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      NetworkAdminNATUDPRequest networkAdminNATUDPRequest0 = new NetworkAdminNATUDPRequest(2147483647L);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) byteArrayOutputStream0);
      networkAdminNATUDPRequest0.serialise(dataOutputStream0);
      assertEquals("type=40,addr=null:request[con=2147483647,trans=4]", networkAdminNATUDPRequest0.getString());
      assertEquals(18, dataOutputStream0.size());
  }

  @Test
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-76);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) byteArrayInputStream0);
      NetworkAdminNATUDPRequest networkAdminNATUDPRequest0 = null;
      try {
        networkAdminNATUDPRequest0 = new NetworkAdminNATUDPRequest(dataInputStream0, 1L, 1512);
        fail("Expecting exception: BEncodingException");
      } catch(BEncodingException e) {
        /*
         * BDecoder: unknown command '0, remainder = \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream((InputStream) byteArrayInputStream0, (InputStream) byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) sequenceInputStream0);
      NetworkAdminNATUDPRequest networkAdminNATUDPRequest0 = null;
      try {
        networkAdminNATUDPRequest0 = new NetworkAdminNATUDPRequest(dataInputStream0, 0L, (int) (byte)70);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * invalid length
         */
      }
  }
}
