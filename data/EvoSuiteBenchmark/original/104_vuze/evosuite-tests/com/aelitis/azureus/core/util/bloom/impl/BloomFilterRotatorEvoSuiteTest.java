/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.util.bloom.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.util.bloom.BloomFilter;
import com.aelitis.azureus.core.util.bloom.impl.BloomFilterAddRemove4Bit;
import com.aelitis.azureus.core.util.bloom.impl.BloomFilterAddRemove8Bit;
import com.aelitis.azureus.core.util.bloom.impl.BloomFilterRotator;
import java.util.Map;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BloomFilterRotatorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BloomFilterAddRemove8Bit bloomFilterAddRemove8Bit0 = new BloomFilterAddRemove8Bit(6);
      BloomFilterRotator bloomFilterRotator0 = new BloomFilterRotator((BloomFilter) bloomFilterAddRemove8Bit0, 6);
      assertNotNull(bloomFilterRotator0);
      
      byte[] byteArray0 = new byte[10];
      bloomFilterRotator0.count(byteArray0);
      assertEquals("ind=0,filt=ent=0,max=7", bloomFilterRotator0.getString());
  }

  @Test
  public void test1()  throws Throwable  {
      BloomFilterAddRemove8Bit bloomFilterAddRemove8Bit0 = new BloomFilterAddRemove8Bit(1);
      BloomFilterRotator bloomFilterRotator0 = new BloomFilterRotator((BloomFilter) bloomFilterAddRemove8Bit0, 1);
      assertNotNull(bloomFilterRotator0);
      
      byte[] byteArray0 = new byte[12];
      bloomFilterRotator0.contains(byteArray0);
      assertEquals("ind=0,filt=ent=0,max=1", bloomFilterRotator0.getString());
  }

  @Test
  public void test2()  throws Throwable  {
      BloomFilterAddRemove4Bit bloomFilterAddRemove4Bit0 = new BloomFilterAddRemove4Bit(37);
      BloomFilterRotator bloomFilterRotator0 = new BloomFilterRotator((BloomFilter) bloomFilterAddRemove4Bit0, 4);
      assertNotNull(bloomFilterRotator0);
      
      int int0 = bloomFilterRotator0.getSize();
      assertEquals("ind=0,filt=ent=0,max=37", bloomFilterRotator0.getString());
      assertEquals(37, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      BloomFilterAddRemove8Bit bloomFilterAddRemove8Bit0 = new BloomFilterAddRemove8Bit(6);
      BloomFilterRotator bloomFilterRotator0 = new BloomFilterRotator((BloomFilter) bloomFilterAddRemove8Bit0, 6);
      assertNotNull(bloomFilterRotator0);
      
      String string0 = bloomFilterRotator0.getString();
      assertNotNull(string0);
      assertEquals("ind=0,filt=ent=0,max=7", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      BloomFilterAddRemove8Bit bloomFilterAddRemove8Bit0 = new BloomFilterAddRemove8Bit(1);
      BloomFilterRotator bloomFilterRotator0 = new BloomFilterRotator((BloomFilter) bloomFilterAddRemove8Bit0, 1);
      assertNotNull(bloomFilterRotator0);
      
      BloomFilterRotator bloomFilterRotator1 = (BloomFilterRotator)bloomFilterRotator0.getReplica();
      assertEquals("ind=0,filt=ent=0,max=1", bloomFilterRotator1.getString());
      assertNotNull(bloomFilterRotator1);
  }

  @Test
  public void test5()  throws Throwable  {
      BloomFilterAddRemove4Bit bloomFilterAddRemove4Bit0 = new BloomFilterAddRemove4Bit(37);
      BloomFilterRotator bloomFilterRotator0 = new BloomFilterRotator((BloomFilter) bloomFilterAddRemove4Bit0, 4);
      assertNotNull(bloomFilterRotator0);
      
      bloomFilterRotator0.getEntryCount();
      assertEquals("ind=0,filt=ent=0,max=37", bloomFilterRotator0.getString());
  }

  @Test
  public void test6()  throws Throwable  {
      BloomFilterAddRemove8Bit bloomFilterAddRemove8Bit0 = new BloomFilterAddRemove8Bit(1);
      BloomFilterRotator bloomFilterRotator0 = new BloomFilterRotator((BloomFilter) bloomFilterAddRemove8Bit0, 1);
      assertNotNull(bloomFilterRotator0);
      
      Map<String, Object> map0 = bloomFilterRotator0.serialiseToMap();
      assertNotNull(map0);
      
      BloomFilterRotator bloomFilterRotator1 = new BloomFilterRotator(map0);
      assertEquals(3, map0.size());
      assertNotNull(bloomFilterRotator1);
  }

  @Test
  public void test7()  throws Throwable  {
      BloomFilterAddRemove8Bit bloomFilterAddRemove8Bit0 = new BloomFilterAddRemove8Bit(1);
      BloomFilterRotator bloomFilterRotator0 = new BloomFilterRotator((BloomFilter) bloomFilterAddRemove8Bit0, 1);
      assertNotNull(bloomFilterRotator0);
      
      byte[] byteArray0 = new byte[12];
      bloomFilterAddRemove8Bit0.add(byteArray0);
      // Undeclared exception!
      try {
        bloomFilterRotator0.add(byteArray0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      BloomFilterAddRemove4Bit bloomFilterAddRemove4Bit0 = new BloomFilterAddRemove4Bit(37);
      byte[] byteArray0 = new byte[5];
      bloomFilterAddRemove4Bit0.add(byteArray0);
      BloomFilterRotator bloomFilterRotator0 = new BloomFilterRotator((BloomFilter) bloomFilterAddRemove4Bit0, 4);
      byte[] byteArray1 = new byte[10];
      bloomFilterRotator0.add(byteArray1);
      byteArray1[8] = (byte) (-1);
      bloomFilterAddRemove4Bit0.add(byteArray1);
      byte[] byteArray2 = new byte[3];
      bloomFilterRotator0.add(byteArray2);
      byteArray2[0] = (byte) (-1);
      int int0 = bloomFilterRotator0.add(byteArray2);
      assertEquals(5, bloomFilterAddRemove4Bit0.getEntryCount());
      assertEquals(1, int0);
  }

  @Test
  public void test9()  throws Throwable  {
      BloomFilterAddRemove8Bit bloomFilterAddRemove8Bit0 = new BloomFilterAddRemove8Bit(6);
      BloomFilterRotator bloomFilterRotator0 = new BloomFilterRotator((BloomFilter) bloomFilterAddRemove8Bit0, 6);
      assertNotNull(bloomFilterRotator0);
      
      byte[] byteArray0 = new byte[10];
      int int0 = bloomFilterRotator0.remove(byteArray0);
      assertEquals(0, int0);
      assertEquals("ind=0,filt=ent=0,max=7", bloomFilterRotator0.getString());
  }
}
