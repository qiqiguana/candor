/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.diskmanager.cache.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.diskmanager.cache.impl.CacheEntry;
import com.aelitis.azureus.core.diskmanager.cache.impl.CacheFileWithCache;
import org.gudy.azureus2.core3.util.DirectByteBuffer;
import org.gudy.azureus2.core3.util.DirectByteBufferPool;
import org.gudy.azureus2.core3.util.ReferenceCountedDirectByteBuffer;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class CacheEntryEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      CacheEntry cacheEntry0 = new CacheEntry(0L);
      DirectByteBuffer directByteBuffer0 = cacheEntry0.getBuffer();
      assertNull(directByteBuffer0);
  }

  @Test
  public void test1()  throws Throwable  {
      CacheEntry cacheEntry0 = new CacheEntry(16L);
      long long0 = cacheEntry0.getFilePosition();
      assertEquals(16L, long0);
  }

  @Test
  public void test2()  throws Throwable  {
      CacheEntry cacheEntry0 = new CacheEntry(2046L);
      int int0 = cacheEntry0.getUsageCount();
      assertEquals(2046L, cacheEntry0.getFilePosition());
      assertEquals(0, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      CacheEntry cacheEntry0 = new CacheEntry(2046L);
      cacheEntry0.getLastUsed();
      assertEquals(2046L, cacheEntry0.getFilePosition());
  }

  @Test
  public void test4()  throws Throwable  {
      CacheEntry cacheEntry0 = new CacheEntry(16L);
      cacheEntry0.isDirty();
      assertEquals(16L, cacheEntry0.getFilePosition());
  }

  @Test
  public void test5()  throws Throwable  {
      CacheEntry cacheEntry0 = new CacheEntry(1000L);
      // Undeclared exception!
      try {
        cacheEntry0.getString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      CacheEntry cacheEntry0 = new CacheEntry(2046L);
      cacheEntry0.used();
      assertEquals(1, cacheEntry0.getUsageCount());
  }

  @Test
  public void test7()  throws Throwable  {
      CacheEntry cacheEntry0 = new CacheEntry(2046L);
      int int0 = cacheEntry0.getType();
      assertEquals(2046L, cacheEntry0.getFilePosition());
      assertEquals(0, int0);
  }

  @Test
  public void test8()  throws Throwable  {
      CacheEntry cacheEntry0 = new CacheEntry(0L);
      int int0 = cacheEntry0.getLength();
      assertEquals(0, int0);
  }

  @Test
  public void test9()  throws Throwable  {
      CacheEntry cacheEntry0 = new CacheEntry(4L);
      cacheEntry0.setClean();
      assertEquals(false, cacheEntry0.isDirty());
      assertEquals(4L, cacheEntry0.getFilePosition());
  }

  @Test
  public void test10()  throws Throwable  {
      CacheEntry cacheEntry0 = new CacheEntry(2046L);
      // Undeclared exception!
      try {
        cacheEntry0.resetBufferPosition();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      CacheEntry cacheEntry0 = new CacheEntry(0L);
      CacheFileWithCache cacheFileWithCache0 = cacheEntry0.getFile();
      assertNull(cacheFileWithCache0);
  }

  @Test
  public void test12()  throws Throwable  {
      DirectByteBuffer directByteBuffer0 = DirectByteBufferPool.getBuffer((byte)4, (byte)4);
      ReferenceCountedDirectByteBuffer referenceCountedDirectByteBuffer0 = directByteBuffer0.getReferenceCountedBuffer();
      CacheEntry cacheEntry0 = new CacheEntry(1532, (CacheFileWithCache) null, (DirectByteBuffer) referenceCountedDirectByteBuffer0, 685L, (int) (byte)4);
      assertEquals(1532, cacheEntry0.getType());
      assertEquals("[685 - 688:0/4]", cacheEntry0.getString());
      assertNotNull(cacheEntry0);
      assertEquals(true, cacheEntry0.isDirty());
  }

  @Test
  public void test13()  throws Throwable  {
      DirectByteBuffer directByteBuffer0 = DirectByteBufferPool.getBuffer((byte)0, 1532);
      CacheEntry cacheEntry0 = new CacheEntry(120000, (CacheFileWithCache) null, directByteBuffer0, (long) 1532, (-673));
      assertEquals(120000, cacheEntry0.getType());
      assertNotNull(cacheEntry0);
      assertEquals("[1532 - 858:0/1532]", cacheEntry0.getString());
      assertEquals(true, cacheEntry0.isDirty());
  }
}
