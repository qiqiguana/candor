/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.peermanager.messaging.azureus;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.peermanager.messaging.MessageException;
import com.aelitis.azureus.core.peermanager.messaging.azureus.AZBadPiece;
import org.gudy.azureus2.core3.util.DirectByteBuffer;
import org.gudy.azureus2.core3.util.DirectByteBufferPool;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class AZBadPieceEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      AZBadPiece aZBadPiece0 = new AZBadPiece(596, (byte)14);
      DirectByteBuffer directByteBuffer0 = DirectByteBufferPool.getBuffer((byte)1, 596);
      try {
        aZBadPiece0.deserialize(directByteBuffer0, (byte)0);
        fail("Expecting exception: MessageException");
      } catch(MessageException e) {
        /*
         * [AZ_BAD_PIECE] payload stream b-decode error: BDecoder: unknown command '0, remainder = \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      AZBadPiece aZBadPiece0 = new AZBadPiece(1, (byte)1);
      int int0 = aZBadPiece0.getFeatureSubID();
      assertEquals(1, aZBadPiece0.getVersion());
      assertEquals("AZ_BAD_PIECE 1", aZBadPiece0.getDescription());
      assertEquals(5, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      AZBadPiece aZBadPiece0 = new AZBadPiece(0, (byte)42);
      byte[] byteArray0 = aZBadPiece0.getIDBytes();
      assertEquals("AZ_BAD_PIECE 0", aZBadPiece0.getDescription());
      assertNotNull(byteArray0);
      assertEquals(42, aZBadPiece0.getVersion());
      assertEquals(0, aZBadPiece0.getPieceNumber());
  }

  @Test
  public void test3()  throws Throwable  {
      AZBadPiece aZBadPiece0 = new AZBadPiece((-1097), (byte)31);
      String string0 = aZBadPiece0.getDescription();
      assertEquals(31, aZBadPiece0.getVersion());
      assertEquals("AZ_BAD_PIECE -1097", string0);
      assertNotNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      AZBadPiece aZBadPiece0 = new AZBadPiece((-1097), (byte)31);
      int int0 = aZBadPiece0.getType();
      assertEquals(0, int0);
      assertEquals(31, aZBadPiece0.getVersion());
      assertEquals(-1097, aZBadPiece0.getPieceNumber());
  }

  @Test
  public void test5()  throws Throwable  {
      AZBadPiece aZBadPiece0 = new AZBadPiece(1, (byte)1);
      int int0 = aZBadPiece0.getPieceNumber();
      assertEquals(1, int0);
      assertEquals(1, aZBadPiece0.getVersion());
  }

  @Test
  public void test6()  throws Throwable  {
      AZBadPiece aZBadPiece0 = new AZBadPiece((-1097), (byte)31);
      String string0 = aZBadPiece0.getFeatureID();
      assertEquals("AZ1", string0);
      assertEquals(31, aZBadPiece0.getVersion());
      assertEquals("AZ_BAD_PIECE -1097", aZBadPiece0.getDescription());
  }

  @Test
  public void test7()  throws Throwable  {
      AZBadPiece aZBadPiece0 = new AZBadPiece(0, (byte)42);
      byte byte0 = aZBadPiece0.getVersion();
      assertEquals(0, aZBadPiece0.getPieceNumber());
      assertEquals((byte)42, byte0);
  }

  @Test
  public void test8()  throws Throwable  {
      AZBadPiece aZBadPiece0 = new AZBadPiece(596, (byte)14);
      DirectByteBuffer[] directByteBufferArray0 = aZBadPiece0.getData();
      assertNotNull(directByteBufferArray0);
      
      aZBadPiece0.getData();
      assertEquals(14, aZBadPiece0.getVersion());
      assertEquals(596, aZBadPiece0.getPieceNumber());
      assertEquals("AZ_BAD_PIECE 596", aZBadPiece0.getDescription());
  }

  @Test
  public void test9()  throws Throwable  {
      AZBadPiece aZBadPiece0 = new AZBadPiece(1, (byte)1);
      aZBadPiece0.destroy();
      assertEquals(1, aZBadPiece0.getVersion());
      assertEquals("AZ_BAD_PIECE 1", aZBadPiece0.getDescription());
      assertEquals(1, aZBadPiece0.getPieceNumber());
  }

  @Test
  public void test10()  throws Throwable  {
      AZBadPiece aZBadPiece0 = new AZBadPiece(0, (byte)42);
      DirectByteBuffer[] directByteBufferArray0 = aZBadPiece0.getData();
      assertNotNull(directByteBufferArray0);
      
      aZBadPiece0.destroy();
      assertEquals("AZ_BAD_PIECE 0", aZBadPiece0.getDescription());
      assertEquals(42, aZBadPiece0.getVersion());
  }
}
