/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.ui.swt.views.skin.sidebar;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.ui.common.viewtitleinfo.ViewTitleInfo;
import com.aelitis.azureus.ui.mdi.MdiEntry;
import com.aelitis.azureus.ui.mdi.MdiEntryVitalityImageListener;
import com.aelitis.azureus.ui.swt.mdi.TabbedEntry;
import com.aelitis.azureus.ui.swt.mdi.TabbedMDI;
import com.aelitis.azureus.ui.swt.skin.SWTSkin;
import com.aelitis.azureus.ui.swt.views.ViewTitleInfoBetaP;
import com.aelitis.azureus.ui.swt.views.skin.sidebar.SideBarVitalityImageSWT;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.graphics.Rectangle;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.gudy.azureus2.ui.swt.plugins.UISWTViewEventListener;
import org.gudy.azureus2.ui.swt.views.MySharesView;
import org.gudy.azureus2.ui.swt.views.MyTorrentsView;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SideBarVitalityImageSWTEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          MyTorrentsView myTorrentsView0 = new MyTorrentsView();
          TabbedEntry tabbedEntry0 = (TabbedEntry)tabbedMDI0.createEntryFromEventListener("cu*", (UISWTViewEventListener) myTorrentsView0, "cu*", true, (Object) "fileotherhashes");
          SideBarVitalityImageSWT sideBarVitalityImageSWT0 = new SideBarVitalityImageSWT((MdiEntry) tabbedEntry0, "fileotherhashes");
          sideBarVitalityImageSWT0.getHitArea();
          assertEquals(-1, sideBarVitalityImageSWT0.getDelayTime());
          assertEquals(131072, sideBarVitalityImageSWT0.getAlignment());
          assertEquals(true, sideBarVitalityImageSWT0.isVisible());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          MyTorrentsView myTorrentsView0 = new MyTorrentsView();
          TabbedEntry tabbedEntry0 = (TabbedEntry)tabbedMDI0.createEntryFromEventListener("cu*", (UISWTViewEventListener) myTorrentsView0, "cu*", true, (Object) "fileotherhashes");
          SideBarVitalityImageSWT sideBarVitalityImageSWT0 = new SideBarVitalityImageSWT((MdiEntry) tabbedEntry0, "fileotherhashes");
          sideBarVitalityImageSWT0.setAlignment((-2001));
          assertEquals(-2001, sideBarVitalityImageSWT0.getAlignment());
          assertEquals(-1, sideBarVitalityImageSWT0.getDelayTime());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          MySharesView mySharesView0 = new MySharesView();
          TabbedEntry tabbedEntry0 = (TabbedEntry)tabbedMDI0.createEntryFromSkinRef("BT_CHOKE", "com.aelitis.azureus.plugins.upnp.UPnPPlugin", "BT_CHOKE", "BT_CHOKE", (ViewTitleInfo) mySharesView0, (Object) null, false, "com.aelitis.azureus.plugins.upnp.UPnPPlugin");
          SideBarVitalityImageSWT sideBarVitalityImageSWT0 = new SideBarVitalityImageSWT((MdiEntry) tabbedEntry0, "BT_CHOKE");
          int int0 = sideBarVitalityImageSWT0.getDelayTime();
          assertEquals(131072, sideBarVitalityImageSWT0.getAlignment());
          assertEquals(true, sideBarVitalityImageSWT0.isVisible());
          assertEquals((-1), int0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          MyTorrentsView myTorrentsView0 = new MyTorrentsView();
          TabbedEntry tabbedEntry0 = (TabbedEntry)tabbedMDI0.createEntryFromEventListener("cu*", (UISWTViewEventListener) myTorrentsView0, "cu*", true, (Object) "fileotherhashes");
          SideBarVitalityImageSWT sideBarVitalityImageSWT0 = new SideBarVitalityImageSWT((MdiEntry) tabbedEntry0, "fileotherhashes");
          sideBarVitalityImageSWT0.setToolTip("fileotherhashes");
          assertEquals(-1, sideBarVitalityImageSWT0.getDelayTime());
          assertEquals(true, sideBarVitalityImageSWT0.isVisible());
          assertEquals(131072, sideBarVitalityImageSWT0.getAlignment());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          MyTorrentsView myTorrentsView0 = new MyTorrentsView();
          TabbedEntry tabbedEntry0 = (TabbedEntry)tabbedMDI0.createEntryFromEventListener("cu*", (UISWTViewEventListener) myTorrentsView0, "cu*", true, (Object) "fileotherhashes");
          SideBarVitalityImageSWT sideBarVitalityImageSWT0 = new SideBarVitalityImageSWT((MdiEntry) tabbedEntry0, "fileotherhashes");
          sideBarVitalityImageSWT0.getImageID();
          assertEquals(131072, sideBarVitalityImageSWT0.getAlignment());
          assertEquals(true, sideBarVitalityImageSWT0.isVisible());
          assertEquals(-1, sideBarVitalityImageSWT0.getDelayTime());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          ViewTitleInfoBetaP viewTitleInfoBetaP0 = new ViewTitleInfoBetaP();
          TabbedEntry tabbedEntry0 = (TabbedEntry)tabbedMDI0.createEntryFromSkinRef("", "", "", "", (ViewTitleInfo) viewTitleInfoBetaP0, (Object) "BT_INTERESTED", true, "");
          SideBarVitalityImageSWT sideBarVitalityImageSWT0 = new SideBarVitalityImageSWT((MdiEntry) tabbedEntry0, "");
          int int0 = sideBarVitalityImageSWT0.getAlignment();
          assertEquals(-1, sideBarVitalityImageSWT0.getDelayTime());
          assertEquals(true, sideBarVitalityImageSWT0.isVisible());
          assertEquals(131072, int0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          MyTorrentsView myTorrentsView0 = new MyTorrentsView();
          TabbedEntry tabbedEntry0 = (TabbedEntry)tabbedMDI0.createEntryFromEventListener("cu*", (UISWTViewEventListener) myTorrentsView0, "cu*", true, (Object) "fileotherhashes");
          SideBarVitalityImageSWT sideBarVitalityImageSWT0 = new SideBarVitalityImageSWT((MdiEntry) tabbedEntry0, "fileotherhashes");
          TabbedEntry tabbedEntry1 = (TabbedEntry)sideBarVitalityImageSWT0.getMdiEntry();
          assertNotNull(tabbedEntry1);
          assertEquals(131072, sideBarVitalityImageSWT0.getAlignment());
          assertEquals(-1, sideBarVitalityImageSWT0.getDelayTime());
          assertEquals(true, sideBarVitalityImageSWT0.isVisible());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          MyTorrentsView myTorrentsView0 = new MyTorrentsView();
          TabbedEntry tabbedEntry0 = (TabbedEntry)tabbedMDI0.createEntryFromEventListener("cu*", (UISWTViewEventListener) myTorrentsView0, "cu*", true, (Object) "fileotherhashes");
          SideBarVitalityImageSWT sideBarVitalityImageSWT0 = new SideBarVitalityImageSWT((MdiEntry) tabbedEntry0, "fileotherhashes");
          sideBarVitalityImageSWT0.setHitArea((Rectangle) null);
          assertEquals(-1, sideBarVitalityImageSWT0.getDelayTime());
          assertEquals(true, sideBarVitalityImageSWT0.isVisible());
          assertEquals(131072, sideBarVitalityImageSWT0.getAlignment());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test8()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "G");
          SideBarVitalityImageSWT sideBarVitalityImageSWT0 = new SideBarVitalityImageSWT((MdiEntry) tabbedEntry0, "G");
          sideBarVitalityImageSWT0.getToolTip();
          assertEquals(131072, sideBarVitalityImageSWT0.getAlignment());
          assertEquals(true, sideBarVitalityImageSWT0.isVisible());
          assertEquals(-1, sideBarVitalityImageSWT0.getDelayTime());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test9()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          ViewTitleInfoBetaP viewTitleInfoBetaP0 = new ViewTitleInfoBetaP();
          TabbedEntry tabbedEntry0 = (TabbedEntry)tabbedMDI0.createEntryFromSkinRef("", "", "", "", (ViewTitleInfo) viewTitleInfoBetaP0, (Object) "BT_INTERESTED", true, "");
          SideBarVitalityImageSWT sideBarVitalityImageSWT0 = new SideBarVitalityImageSWT((MdiEntry) tabbedEntry0, "");
          sideBarVitalityImageSWT0.addListener((MdiEntryVitalityImageListener) null);
          sideBarVitalityImageSWT0.addListener((MdiEntryVitalityImageListener) null);
          assertEquals(-1, sideBarVitalityImageSWT0.getDelayTime());
          assertEquals(true, sideBarVitalityImageSWT0.isVisible());
          assertEquals(131072, sideBarVitalityImageSWT0.getAlignment());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          ViewTitleInfoBetaP viewTitleInfoBetaP0 = new ViewTitleInfoBetaP();
          TabbedEntry tabbedEntry0 = (TabbedEntry)tabbedMDI0.createEntryFromSkinRef("", "", "", "", (ViewTitleInfo) viewTitleInfoBetaP0, (Object) "BT_INTERESTED", true, "");
          SideBarVitalityImageSWT sideBarVitalityImageSWT0 = new SideBarVitalityImageSWT((MdiEntry) tabbedEntry0, "");
          sideBarVitalityImageSWT0.addListener((MdiEntryVitalityImageListener) null);
          sideBarVitalityImageSWT0.triggerClickedListeners(802, 802);
          assertEquals(true, sideBarVitalityImageSWT0.isVisible());
          assertEquals(131072, sideBarVitalityImageSWT0.getAlignment());
          assertEquals(-1, sideBarVitalityImageSWT0.getDelayTime());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          MyTorrentsView myTorrentsView0 = new MyTorrentsView();
          TabbedEntry tabbedEntry0 = (TabbedEntry)tabbedMDI0.createEntryFromEventListener("cu*", (UISWTViewEventListener) myTorrentsView0, "cu*", true, (Object) "fileotherhashes");
          SideBarVitalityImageSWT sideBarVitalityImageSWT0 = new SideBarVitalityImageSWT((MdiEntry) tabbedEntry0, "fileotherhashes");
          assertEquals(true, sideBarVitalityImageSWT0.isVisible());
          
          sideBarVitalityImageSWT0.setVisible(true);
          assertEquals(-1, sideBarVitalityImageSWT0.getDelayTime());
          assertEquals(131072, sideBarVitalityImageSWT0.getAlignment());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          MyTorrentsView myTorrentsView0 = new MyTorrentsView();
          TabbedEntry tabbedEntry0 = (TabbedEntry)tabbedMDI0.createEntryFromEventListener("cu*", (UISWTViewEventListener) myTorrentsView0, "cu*", true, (Object) "fileotherhashes");
          SideBarVitalityImageSWT sideBarVitalityImageSWT0 = new SideBarVitalityImageSWT((MdiEntry) tabbedEntry0, "fileotherhashes");
          Image[] imageArray0 = new Image[1];
          int int0 = sideBarVitalityImageSWT0.getCurrentAnimationIndex(imageArray0);
          assertEquals(true, sideBarVitalityImageSWT0.isVisible());
          assertEquals(131072, sideBarVitalityImageSWT0.getAlignment());
          assertEquals(0, int0);
          assertEquals(-1, sideBarVitalityImageSWT0.getDelayTime());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          MyTorrentsView myTorrentsView0 = new MyTorrentsView();
          TabbedEntry tabbedEntry0 = (TabbedEntry)tabbedMDI0.createEntryFromEventListener("cu*", (UISWTViewEventListener) myTorrentsView0, "cu*", true, (Object) "fileotherhashes");
          SideBarVitalityImageSWT sideBarVitalityImageSWT0 = new SideBarVitalityImageSWT((MdiEntry) tabbedEntry0, "fileotherhashes");
          sideBarVitalityImageSWT0.switchSuffix("fileotherhashes");
          assertEquals(-1, sideBarVitalityImageSWT0.getDelayTime());
          assertEquals(true, sideBarVitalityImageSWT0.isVisible());
          assertEquals(131072, sideBarVitalityImageSWT0.getAlignment());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test14()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          TabbedEntry tabbedEntry0 = new TabbedEntry(tabbedMDI0, (SWTSkin) null, "\"|");
          SideBarVitalityImageSWT sideBarVitalityImageSWT0 = new SideBarVitalityImageSWT((MdiEntry) tabbedEntry0, "\"|");
          sideBarVitalityImageSWT0.switchSuffix((String) null);
          assertEquals(131072, sideBarVitalityImageSWT0.getAlignment());
          assertEquals(-1, sideBarVitalityImageSWT0.getDelayTime());
          assertEquals(true, sideBarVitalityImageSWT0.isVisible());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test15()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          MyTorrentsView myTorrentsView0 = new MyTorrentsView();
          TabbedEntry tabbedEntry0 = (TabbedEntry)tabbedMDI0.createEntryFromEventListener("cu*", (UISWTViewEventListener) myTorrentsView0, "cu*", true, (Object) "fileotherhashes");
          SideBarVitalityImageSWT sideBarVitalityImageSWT0 = new SideBarVitalityImageSWT((MdiEntry) tabbedEntry0, "fileotherhashes");
          sideBarVitalityImageSWT0.getImage();
          assertEquals(-1, sideBarVitalityImageSWT0.getDelayTime());
          assertEquals(true, sideBarVitalityImageSWT0.isVisible());
          assertEquals(131072, sideBarVitalityImageSWT0.getAlignment());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test16()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          MySharesView mySharesView0 = new MySharesView();
          TabbedEntry tabbedEntry0 = (TabbedEntry)tabbedMDI0.createEntryFromSkinRef("BT_CHOKE", "com.aelitis.azureus.plugins.upnp.UPnPPlugin", "BT_CHOKE", "BT_CHOKE", (ViewTitleInfo) mySharesView0, (Object) null, false, "com.aelitis.azureus.plugins.upnp.UPnPPlugin");
          SideBarVitalityImageSWT sideBarVitalityImageSWT0 = new SideBarVitalityImageSWT((MdiEntry) tabbedEntry0, "BT_CHOKE");
          sideBarVitalityImageSWT0.setDelayTime((-52));
          sideBarVitalityImageSWT0.setDelayTime((-52));
          assertEquals(-52, sideBarVitalityImageSWT0.getDelayTime());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test17()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          TabbedMDI tabbedMDI0 = new TabbedMDI();
          MySharesView mySharesView0 = new MySharesView();
          TabbedEntry tabbedEntry0 = (TabbedEntry)tabbedMDI0.createEntryFromSkinRef("BT_CHOKE", "com.aelitis.azureus.plugins.upnp.UPnPPlugin", "BT_CHOKE", "BT_CHOKE", (ViewTitleInfo) mySharesView0, (Object) null, false, "com.aelitis.azureus.plugins.upnp.UPnPPlugin");
          SideBarVitalityImageSWT sideBarVitalityImageSWT0 = new SideBarVitalityImageSWT((MdiEntry) tabbedEntry0, "BT_CHOKE");
          sideBarVitalityImageSWT0.setVisible(false);
          sideBarVitalityImageSWT0.setDelayTime((-52));
          assertEquals(-52, sideBarVitalityImageSWT0.getDelayTime());
          assertEquals(false, sideBarVitalityImageSWT0.isVisible());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
