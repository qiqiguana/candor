/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.networkmanager.impl.udp;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.networkmanager.impl.tcp.TCPTransportHelper;
import com.aelitis.azureus.core.networkmanager.impl.udp.UDPConnection;
import com.aelitis.azureus.core.networkmanager.impl.udp.UDPConnectionManager;
import com.aelitis.azureus.core.networkmanager.impl.udp.UDPTransport;
import com.aelitis.azureus.core.networkmanager.impl.udp.UDPTransportHelper;
import java.io.IOException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.nio.channels.SocketChannel;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class UDPConnectionManagerEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          UDPConnectionManager uDPConnectionManager0 = new UDPConnectionManager();
          UDPConnectionManager.ProtocolTimer uDPConnectionManager_ProtocolTimer0 = uDPConnectionManager0.new ProtocolTimer();
          InetSocketAddress inetSocketAddress0 = new InetSocketAddress((InetAddress) null, 44);
          byte[] byteArray0 = new byte[8];
          byteArray0[0] = (byte)69;
          byteArray0[1] = (byte)0;
          byteArray0[2] = (byte)122;
          byteArray0[3] = (byte)0;
          byteArray0[4] = (byte) (-120);
          byteArray0[5] = (byte)0;
          byteArray0[6] = (byte)82;
          byteArray0[7] = (byte)50;
          uDPConnectionManager0.receive(44, inetSocketAddress0, byteArray0, (int) (byte)0);
          uDPConnectionManager_ProtocolTimer0.destroy();
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          UDPConnectionManager uDPConnectionManager0 = new UDPConnectionManager();
          uDPConnectionManager0.trace((String) null);
          assertEquals(2048, uDPConnectionManager0.getMaxOutboundPermitted());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          UDPConnectionManager uDPConnectionManager0 = new UDPConnectionManager();
          UDPConnectionManager uDPConnectionManager1 = new UDPConnectionManager();
          int int0 = 1110;
          InetSocketAddress inetSocketAddress0 = new InetSocketAddress(1110);
          uDPConnectionManager0.rateLimitIncoming(inetSocketAddress0);
          UDPConnectionManager uDPConnectionManager2 = new UDPConnectionManager();
          uDPConnectionManager1.timeoutDeadKeys();
          InetSocketAddress inetSocketAddress1 = null;
          // Undeclared exception!
          try {
            uDPConnectionManager2.rateLimitIncoming((InetSocketAddress) null);
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          UDPConnectionManager uDPConnectionManager0 = new UDPConnectionManager();
          uDPConnectionManager0.allocationConnectionID();
          int int0 = (-1996);
          TCPTransportHelper tCPTransportHelper0 = new TCPTransportHelper((SocketChannel) null);
          // Undeclared exception!
          try {
            tCPTransportHelper0.getAddress();
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          UDPConnectionManager uDPConnectionManager0 = new UDPConnectionManager();
          UDPConnectionManager uDPConnectionManager1 = new UDPConnectionManager();
          UDPConnectionManager uDPConnectionManager2 = new UDPConnectionManager();
          uDPConnectionManager1.checkThreadDeath(true);
          uDPConnectionManager1.getMaxOutboundPermitted();
          uDPConnectionManager1.poll();
          uDPConnectionManager2.logStats();
          uDPConnectionManager2.checkThreadCreation();
          uDPConnectionManager2.checkThreadDeath(false);
          uDPConnectionManager1.checkThreadDeath(false);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          UDPConnectionManager uDPConnectionManager0 = new UDPConnectionManager();
          UDPConnectionManager uDPConnectionManager1 = new UDPConnectionManager();
          uDPConnectionManager1.getMaxOutboundPermitted();
          uDPConnectionManager0.trace("NAaQ:ruw");
          uDPConnectionManager1.trace("NAaQ:ruw");
          UDPConnectionManager.ProtocolTimer uDPConnectionManager_ProtocolTimer0 = uDPConnectionManager1.new ProtocolTimer();
          uDPConnectionManager1.logStats();
          uDPConnectionManager0.checkThreadDeath(false);
          uDPConnectionManager1.poll();
          UDPConnectionManager.ProtocolTimer uDPConnectionManager_ProtocolTimer1 = uDPConnectionManager1.new ProtocolTimer();
          UDPConnectionManager uDPConnectionManager2 = new UDPConnectionManager();
          uDPConnectionManager1.checkThreadCreation();
          uDPConnectionManager_ProtocolTimer1.destroy();
          uDPConnectionManager_ProtocolTimer1.destroy();
          uDPConnectionManager_ProtocolTimer0.destroy();
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          UDPConnectionManager uDPConnectionManager0 = new UDPConnectionManager();
          UDPConnectionManager uDPConnectionManager1 = new UDPConnectionManager();
          uDPConnectionManager1.checkThreadCreation();
          InetSocketAddress inetSocketAddress0 = null;
          try {
            inetSocketAddress0 = new InetSocketAddress("", (-1128));
            fail("Expecting exception: IllegalArgumentException");
          } catch(IllegalArgumentException e) {
            /*
             * port out of range:-1128
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          UDPConnectionManager uDPConnectionManager0 = new UDPConnectionManager();
          UDPConnectionManager.ProtocolTimer uDPConnectionManager_ProtocolTimer0 = uDPConnectionManager0.new ProtocolTimer();
          UDPConnectionManager uDPConnectionManager1 = new UDPConnectionManager();
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
