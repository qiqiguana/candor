/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.subs.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.activities.VuzeActivitiesEntry;
import com.aelitis.azureus.core.security.CryptoManagerException;
import com.aelitis.azureus.core.subs.SubscriptionException;
import com.aelitis.azureus.core.subs.impl.SubscriptionBodyImpl;
import com.aelitis.azureus.core.subs.impl.SubscriptionImpl;
import com.aelitis.azureus.core.subs.impl.SubscriptionManagerImpl;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SubscriptionBodyImplEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      SubscriptionBodyImpl subscriptionBodyImpl0 = new SubscriptionBodyImpl((SubscriptionManagerImpl) null, "ds;", true, "ds;", byteArray0, (int) (byte)0, (int) (byte)0, (Map) null);
      assertNotNull(subscriptionBodyImpl0);
      
      String string0 = subscriptionBodyImpl0.getName();
      assertEquals(0, subscriptionBodyImpl0.getVersion());
      assertEquals(0, subscriptionBodyImpl0.getAZVersion());
      assertEquals(true, subscriptionBodyImpl0.isPublic());
      assertNotNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry();
      Map<String, Object> map0 = vuzeActivitiesEntry0.toMap();
      SubscriptionBodyImpl subscriptionBodyImpl0 = new SubscriptionBodyImpl((SubscriptionManagerImpl) null, "q%Dlqd", true, "q%Dlqd", byteArray0, (int) (byte)0, (int) (byte)0, (Map) map0);
      assertNotNull(subscriptionBodyImpl0);
      
      byte[] byteArray1 = subscriptionBodyImpl0.getPublicKey();
      assertEquals(0, subscriptionBodyImpl0.getAZVersion());
      assertEquals(8, map0.size());
      assertEquals(true, subscriptionBodyImpl0.isPublic());
      assertNotNull(byteArray1);
      assertEquals(0, subscriptionBodyImpl0.getVersion());
  }

  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      try {
        SubscriptionBodyImpl.sign(byteArray0, byteArray0, (int) (byte)0, (int) (byte)0);
        fail("Expecting exception: CryptoManagerException");
      } catch(CryptoManagerException e) {
        /*
         * Failed to decode private key
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      SubscriptionBodyImpl subscriptionBodyImpl0 = new SubscriptionBodyImpl((SubscriptionManagerImpl) null, "ds;", true, "ds;", byteArray0, (int) (byte)0, (int) (byte)0, (Map) null);
      assertNotNull(subscriptionBodyImpl0);
      
      int int0 = subscriptionBodyImpl0.getVersion();
      assertEquals(true, subscriptionBodyImpl0.isPublic());
      assertEquals(0, int0);
      assertEquals(0, subscriptionBodyImpl0.getAZVersion());
  }

  @Test
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      SubscriptionBodyImpl subscriptionBodyImpl0 = new SubscriptionBodyImpl((SubscriptionManagerImpl) null, "", false, "", byteArray0, (int) (byte)0, (int) (byte)0, (Map) null);
      assertNotNull(subscriptionBodyImpl0);
      
      subscriptionBodyImpl0.setJSON("");
      assertEquals(false, subscriptionBodyImpl0.isPublic());
      assertEquals(0, subscriptionBodyImpl0.getAZVersion());
      assertEquals(0, subscriptionBodyImpl0.getVersion());
  }

  @Test
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      SubscriptionBodyImpl subscriptionBodyImpl0 = new SubscriptionBodyImpl((SubscriptionManagerImpl) null, "#s", false, "#s", byteArray0, 1937208356, 1937208356, (Map) null);
      assertNotNull(subscriptionBodyImpl0);
      
      byte[] byteArray1 = subscriptionBodyImpl0.getShortID();
      assertEquals(1937208356, subscriptionBodyImpl0.getAZVersion());
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1937208356, subscriptionBodyImpl0.getVersion());
      assertEquals(false, subscriptionBodyImpl0.isPublic());
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          byte[] byteArray0 = new byte[9];
          boolean boolean0 = SubscriptionBodyImpl.verify(byteArray0, byteArray0, (int) (byte)0, (int) (byte)6, byteArray0);
          assertEquals(false, boolean0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry();
      Map<String, Object> map0 = vuzeActivitiesEntry0.toMap();
      SubscriptionBodyImpl subscriptionBodyImpl0 = new SubscriptionBodyImpl((SubscriptionManagerImpl) null, "q%Dlqd", true, "q%Dlqd", byteArray0, (int) (byte)0, (int) (byte)0, (Map) map0);
      assertNotNull(subscriptionBodyImpl0);
      
      boolean boolean0 = subscriptionBodyImpl0.isPublic();
      assertEquals(0, subscriptionBodyImpl0.getVersion());
      assertEquals(true, boolean0);
      assertEquals(8, map0.size());
      assertEquals(0, subscriptionBodyImpl0.getAZVersion());
  }

  @Test
  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = SubscriptionBodyImpl.encode(byteArray0, (int) (byte) (-22), (int) (byte) (-22));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test
  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      SubscriptionBodyImpl subscriptionBodyImpl0 = new SubscriptionBodyImpl((SubscriptionManagerImpl) null, "", false, "", byteArray0, (int) (byte)0, (int) (byte)0, (Map) null);
      assertNotNull(subscriptionBodyImpl0);
      
      String string0 = subscriptionBodyImpl0.getJSON();
      assertEquals(0, subscriptionBodyImpl0.getVersion());
      assertNotNull(string0);
      assertEquals(0, subscriptionBodyImpl0.getAZVersion());
      assertEquals(false, subscriptionBodyImpl0.isPublic());
  }

  @Test
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      SubscriptionBodyImpl subscriptionBodyImpl0 = new SubscriptionBodyImpl((SubscriptionManagerImpl) null, "#s", false, "#s", byteArray0, 1937208356, 1937208356, (Map) null);
      assertNotNull(subscriptionBodyImpl0);
      
      subscriptionBodyImpl0.getSig();
      assertEquals(1937208356, subscriptionBodyImpl0.getVersion());
      assertEquals(false, subscriptionBodyImpl0.isPublic());
      assertEquals(1937208356, subscriptionBodyImpl0.getAZVersion());
  }

  @Test
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      SubscriptionBodyImpl subscriptionBodyImpl0 = new SubscriptionBodyImpl((SubscriptionManagerImpl) null, "", false, "", byteArray0, (-6), (int) (byte)0, (Map) hashMap0);
      assertNotNull(subscriptionBodyImpl0);
      
      int int0 = subscriptionBodyImpl0.getAZVersion();
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, int0);
      assertEquals(-6, subscriptionBodyImpl0.getVersion());
      assertEquals(false, subscriptionBodyImpl0.isPublic());
  }

  @Test
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      SubscriptionBodyImpl subscriptionBodyImpl0 = new SubscriptionBodyImpl((SubscriptionManagerImpl) null, "#s", false, "#s", byteArray0, 1937208356, 1937208356, (Map) null);
      assertNotNull(subscriptionBodyImpl0);
      
      int int0 = subscriptionBodyImpl0.getSigDataSize();
      assertEquals(1937208356, subscriptionBodyImpl0.getAZVersion());
      assertEquals(0, int0);
      assertEquals(1937208356, subscriptionBodyImpl0.getVersion());
      assertEquals(false, subscriptionBodyImpl0.isPublic());
  }

  @Test
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          byte[] byteArray0 = new byte[1];
          VuzeActivitiesEntry vuzeActivitiesEntry0 = new VuzeActivitiesEntry((-680L), "]V", "]V", "]V", "]V", "]V");
          Map<String, Object> map0 = vuzeActivitiesEntry0.toDeletedMap();
          // Undeclared exception!
          try {
            SubscriptionBodyImpl.deriveShortID(byteArray0, (Map) map0);
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      SubscriptionBodyImpl subscriptionBodyImpl0 = new SubscriptionBodyImpl((SubscriptionManagerImpl) null, "", false, "", byteArray0, (int) (byte)0, (int) (byte)0, (Map) null);
      assertNotNull(subscriptionBodyImpl0);
      
      subscriptionBodyImpl0.getHash();
      assertEquals(0, subscriptionBodyImpl0.getVersion());
      assertEquals(0, subscriptionBodyImpl0.getAZVersion());
      assertEquals(false, subscriptionBodyImpl0.isPublic());
  }

  @Test
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      SubscriptionBodyImpl subscriptionBodyImpl0 = new SubscriptionBodyImpl((SubscriptionManagerImpl) null, "", false, "", byteArray0, (int) (byte)0, (int) (byte)0, (Map) null);
      assertNotNull(subscriptionBodyImpl0);
      
      subscriptionBodyImpl0.getSingletonDetails();
      assertEquals(false, subscriptionBodyImpl0.isPublic());
      assertEquals(0, subscriptionBodyImpl0.getAZVersion());
      assertEquals(0, subscriptionBodyImpl0.getVersion());
  }

  @Test
  public void test16()  throws Throwable  {
      HashMap<Map<String, String>, Map<Object, Long>> hashMap0 = new HashMap<Map<String, String>, Map<Object, Long>>();
      SubscriptionBodyImpl subscriptionBodyImpl0 = null;
      try {
        subscriptionBodyImpl0 = new SubscriptionBodyImpl((SubscriptionManagerImpl) null, (Map) hashMap0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Invalid subscription - details missing
         */
      }
  }

  @Test
  public void test17()  throws Throwable  {
      SubscriptionBodyImpl subscriptionBodyImpl0 = null;
      try {
        subscriptionBodyImpl0 = new SubscriptionBodyImpl((SubscriptionManagerImpl) null, (SubscriptionImpl) null);
        fail("Expecting exception: SubscriptionException");
      } catch(SubscriptionException e) {
        /*
         * Operation failed
         */
      }
  }
}
