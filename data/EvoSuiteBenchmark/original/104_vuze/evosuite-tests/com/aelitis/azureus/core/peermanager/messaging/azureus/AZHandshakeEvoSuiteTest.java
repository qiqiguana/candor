/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.peermanager.messaging.azureus;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.peermanager.messaging.azureus.AZHandshake;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.gudy.azureus2.core3.util.HashWrapper;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class AZHandshakeEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          byte[] byteArray0 = new byte[13];
          HashWrapper hashWrapper0 = new HashWrapper(byteArray0);
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          String[] stringArray0 = new String[25];
          AZHandshake aZHandshake0 = new AZHandshake(byteArray0, hashWrapper0, hashWrapper0, "\u0006!FqI)B|c7", "\u0006!FqI)B|c7", 0, (int) (byte) (-11), (int) (byte) (-11), (InetAddress) inet4Address0, (int) (byte) (-11), stringArray0, byteArray0, (int) (byte) (-11), (byte)0, true);
          aZHandshake0.getMessageIDs();
          assertEquals(true, aZHandshake0.isUploadOnly());
          assertEquals(0, aZHandshake0.getUDPNonDataListenPort());
          assertEquals(-11, aZHandshake0.getHandshakeType());
          assertEquals(0, aZHandshake0.getUDPListenPort());
          assertEquals("\u0006!FqI)B|c7", aZHandshake0.getClientVersion());
          assertEquals(0, aZHandshake0.getVersion());
          assertEquals("\u0006!FqI)B|c7", aZHandshake0.getClient());
          assertEquals(0, aZHandshake0.getTCPListenPort());
          assertEquals(-11, aZHandshake0.getMetadataSize());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          byte[] byteArray0 = new byte[9];
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          String[] stringArray0 = new String[1];
          AZHandshake aZHandshake0 = new AZHandshake(byteArray0, (HashWrapper) null, (HashWrapper) null, "\t", "\t", (-205), (-971), (int) (byte)55, (InetAddress) inet4Address0, (-1274), stringArray0, byteArray0, (int) (byte) (-94), (byte)0, false);
          aZHandshake0.getIPv6();
          assertEquals("\t", aZHandshake0.getClient());
          assertEquals(-1274, aZHandshake0.getMetadataSize());
          assertEquals(false, aZHandshake0.isUploadOnly());
          assertEquals(0, aZHandshake0.getUDPListenPort());
          assertEquals(55, aZHandshake0.getUDPNonDataListenPort());
          assertEquals(0, aZHandshake0.getVersion());
          assertEquals(0, aZHandshake0.getTCPListenPort());
          assertEquals(-94, aZHandshake0.getHandshakeType());
          assertEquals("\t", aZHandshake0.getClientVersion());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      String[] stringArray0 = new String[4];
      AZHandshake aZHandshake0 = new AZHandshake(byteArray0, (HashWrapper) null, (HashWrapper) null, "Lr5eQ nl", "Lr5eQ nl", (int) (byte)1, (-1502), 0, (InetAddress) null, (int) (byte)1, stringArray0, byteArray0, 0, (byte)1, false);
      aZHandshake0.getFeatureID();
      assertEquals("Lr5eQ nl", aZHandshake0.getClientVersion());
      assertEquals(false, aZHandshake0.isUploadOnly());
      assertEquals("Lr5eQ nl", aZHandshake0.getClient());
      assertEquals(1, aZHandshake0.getVersion());
      assertEquals(0, aZHandshake0.getUDPNonDataListenPort());
      assertEquals(0, aZHandshake0.getUDPListenPort());
      assertEquals(1, aZHandshake0.getTCPListenPort());
      assertEquals(0, aZHandshake0.getHandshakeType());
      assertEquals(1, aZHandshake0.getMetadataSize());
  }

  @Test
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      HashWrapper hashWrapper0 = new HashWrapper(byteArray0);
      String[] stringArray0 = new String[8];
      AZHandshake aZHandshake0 = new AZHandshake(byteArray0, hashWrapper0, hashWrapper0, "org.bKuncycastle.jce.provider.JCEKeyGenerator$RIPEMD128HMAC", "org.bKuncycastle.jce.provider.JCEKeyGenerator$RIPEMD128HMAC", (int) (byte)1, (int) (byte)1, 523, (InetAddress) null, (int) (byte)0, stringArray0, byteArray0, (int) (byte)0, (byte)0, true);
      int int0 = aZHandshake0.getUDPListenPort();
      assertEquals(0, aZHandshake0.getMetadataSize());
      assertEquals(523, aZHandshake0.getUDPNonDataListenPort());
      assertEquals("org.bKuncycastle.jce.provider.JCEKeyGenerator$RIPEMD128HMAC", aZHandshake0.getClient());
      assertEquals(true, aZHandshake0.isUploadOnly());
      assertEquals(1, aZHandshake0.getTCPListenPort());
      assertEquals(1, int0);
      assertEquals(0, aZHandshake0.getVersion());
      assertEquals(0, aZHandshake0.getHandshakeType());
      assertEquals("org.bKuncycastle.jce.provider.JCEKeyGenerator$RIPEMD128HMAC", aZHandshake0.getClientVersion());
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          byte[] byteArray0 = new byte[2];
          HashWrapper hashWrapper0 = new HashWrapper(byteArray0);
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          String[] stringArray0 = new String[8];
          AZHandshake aZHandshake0 = new AZHandshake(byteArray0, hashWrapper0, hashWrapper0, "AZ_HANDSHAKE", (String) null, (int) (byte) (-1), 120000, 508, (InetAddress) inet4Address0, (int) (byte)0, stringArray0, byteArray0, 120000, (byte) (-1), false);
          aZHandshake0.getFeatureSubID();
          assertEquals("AZ_HANDSHAKE", aZHandshake0.getClient());
          assertEquals(0, aZHandshake0.getMetadataSize());
          assertEquals(120000, aZHandshake0.getHandshakeType());
          assertEquals(false, aZHandshake0.isUploadOnly());
          assertEquals(508, aZHandshake0.getUDPNonDataListenPort());
          assertEquals(-1, aZHandshake0.getVersion());
          assertEquals(0, aZHandshake0.getUDPListenPort());
          assertEquals(0, aZHandshake0.getTCPListenPort());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      HashWrapper hashWrapper0 = new HashWrapper(byteArray0);
      String[] stringArray0 = new String[8];
      AZHandshake aZHandshake0 = new AZHandshake(byteArray0, hashWrapper0, hashWrapper0, "org.bKuncycastle.jce.provider.JCEKeyGenerator$RIPEMD128HMAC", "org.bKuncycastle.jce.provider.JCEKeyGenerator$RIPEMD128HMAC", (int) (byte)1, (int) (byte)1, 523, (InetAddress) null, (int) (byte)0, stringArray0, byteArray0, (int) (byte)0, (byte)0, true);
      byte[] byteArray1 = aZHandshake0.getIdentity();
      assertEquals(1, aZHandshake0.getUDPListenPort());
      assertEquals(0, aZHandshake0.getMetadataSize());
      assertEquals("org.bKuncycastle.jce.provider.JCEKeyGenerator$RIPEMD128HMAC", aZHandshake0.getClient());
      assertEquals("org.bKuncycastle.jce.provider.JCEKeyGenerator$RIPEMD128HMAC", aZHandshake0.getClientVersion());
      assertEquals(1, aZHandshake0.getTCPListenPort());
      assertEquals(523, aZHandshake0.getUDPNonDataListenPort());
      assertEquals(0, aZHandshake0.getVersion());
      assertEquals(0, aZHandshake0.getHandshakeType());
      assertEquals(true, aZHandshake0.isUploadOnly());
      assertNotNull(byteArray1);
      assertSame(byteArray1, byteArray0);
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          byte[] byteArray0 = new byte[32];
          HashWrapper hashWrapper0 = new HashWrapper(byteArray0);
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          String[] stringArray0 = new String[3];
          AZHandshake aZHandshake0 = new AZHandshake(byteArray0, hashWrapper0, hashWrapper0, "cFLjrv4", "cFLjrv4", (-28), (-28), (-28), (InetAddress) inet4Address0, (-28), stringArray0, byteArray0, (-28), (byte)97, true);
          String string0 = aZHandshake0.getClientVersion();
          assertEquals(true, aZHandshake0.isUploadOnly());
          assertEquals(0, aZHandshake0.getUDPListenPort());
          assertEquals("cFLjrv4", string0);
          assertEquals(-28, aZHandshake0.getHandshakeType());
          assertEquals("cFLjrv4", aZHandshake0.getClient());
          assertEquals(0, aZHandshake0.getTCPListenPort());
          assertNotNull(string0);
          assertEquals(97, aZHandshake0.getVersion());
          assertEquals(0, aZHandshake0.getUDPNonDataListenPort());
          assertEquals(-28, aZHandshake0.getMetadataSize());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      HashWrapper hashWrapper0 = new HashWrapper(byteArray0);
      String[] stringArray0 = new String[8];
      AZHandshake aZHandshake0 = new AZHandshake(byteArray0, hashWrapper0, hashWrapper0, "org.bKuncycastle.jce.provider.JCEKeyGenerator$RIPEMD128HMAC", "org.bKuncycastle.jce.provider.JCEKeyGenerator$RIPEMD128HMAC", (int) (byte)1, (int) (byte)1, 523, (InetAddress) null, (int) (byte)0, stringArray0, byteArray0, (int) (byte)0, (byte)0, true);
      HashWrapper hashWrapper1 = aZHandshake0.getRemoteSessionID();
      assertNotNull(hashWrapper1);
      assertEquals(0, aZHandshake0.getVersion());
      assertEquals(1, aZHandshake0.getTCPListenPort());
      assertEquals("org.bKuncycastle.jce.provider.JCEKeyGenerator$RIPEMD128HMAC", aZHandshake0.getClient());
      assertEquals(0, aZHandshake0.getHandshakeType());
      assertEquals(1, aZHandshake0.getUDPListenPort());
      assertEquals("org.bKuncycastle.jce.provider.JCEKeyGenerator$RIPEMD128HMAC", aZHandshake0.getClientVersion());
      assertEquals(523, aZHandshake0.getUDPNonDataListenPort());
      assertEquals(0, aZHandshake0.getMetadataSize());
  }

  @Test
  public void test8()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          byte[] byteArray0 = new byte[2];
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          String[] stringArray0 = new String[9];
          AZHandshake aZHandshake0 = new AZHandshake(byteArray0, (HashWrapper) null, (HashWrapper) null, (String) null, (String) null, 30, (int) (byte)0, (int) (byte)0, (InetAddress) inet4Address0, 0, stringArray0, byteArray0, 30, (byte)6, true);
          int int0 = aZHandshake0.getMetadataSize();
          assertEquals(0, aZHandshake0.getUDPListenPort());
          assertEquals(30, aZHandshake0.getHandshakeType());
          assertEquals(30, aZHandshake0.getTCPListenPort());
          assertEquals(0, aZHandshake0.getUDPNonDataListenPort());
          assertEquals(0, int0);
          assertEquals(true, aZHandshake0.isUploadOnly());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test9()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          byte[] byteArray0 = new byte[13];
          HashWrapper hashWrapper0 = new HashWrapper(byteArray0);
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          String[] stringArray0 = new String[25];
          AZHandshake aZHandshake0 = new AZHandshake(byteArray0, hashWrapper0, hashWrapper0, "\u0006!FqI)B|c7", "\u0006!FqI)B|c7", 0, (int) (byte) (-11), (int) (byte) (-11), (InetAddress) inet4Address0, (int) (byte) (-11), stringArray0, byteArray0, (int) (byte) (-11), (byte)0, true);
          byte[] byteArray1 = aZHandshake0.getIDBytes();
          assertEquals(0, aZHandshake0.getUDPNonDataListenPort());
          assertEquals(-11, aZHandshake0.getMetadataSize());
          assertEquals(0, aZHandshake0.getTCPListenPort());
          assertEquals("\u0006!FqI)B|c7", aZHandshake0.getClient());
          assertNotNull(byteArray1);
          assertEquals("\u0006!FqI)B|c7", aZHandshake0.getClientVersion());
          assertEquals(-11, aZHandshake0.getHandshakeType());
          assertEquals(true, aZHandshake0.isUploadOnly());
          assertEquals(0, aZHandshake0.getVersion());
          assertEquals(0, aZHandshake0.getUDPListenPort());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      HashWrapper hashWrapper0 = new HashWrapper(byteArray0);
      String[] stringArray0 = new String[8];
      AZHandshake aZHandshake0 = new AZHandshake(byteArray0, hashWrapper0, hashWrapper0, "org.bKuncycastle.jce.provider.JCEKeyGenerator$RIPEMD128HMAC", "org.bKuncycastle.jce.provider.JCEKeyGenerator$RIPEMD128HMAC", (int) (byte)1, (int) (byte)1, 523, (InetAddress) null, (int) (byte)0, stringArray0, byteArray0, (int) (byte)0, (byte)0, true);
      byte[] byteArray1 = aZHandshake0.getMessageVersions();
      assertEquals(true, aZHandshake0.isUploadOnly());
      assertSame(byteArray0, byteArray1);
      assertEquals(0, aZHandshake0.getVersion());
      assertEquals(0, aZHandshake0.getMetadataSize());
      assertNotNull(byteArray1);
      assertEquals(523, aZHandshake0.getUDPNonDataListenPort());
      assertEquals(1, aZHandshake0.getUDPListenPort());
      assertEquals(0, aZHandshake0.getHandshakeType());
      assertEquals("org.bKuncycastle.jce.provider.JCEKeyGenerator$RIPEMD128HMAC", aZHandshake0.getClientVersion());
      assertEquals("org.bKuncycastle.jce.provider.JCEKeyGenerator$RIPEMD128HMAC", aZHandshake0.getClient());
      assertEquals(1, aZHandshake0.getTCPListenPort());
  }

  @Test
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          byte[] byteArray0 = new byte[9];
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          String[] stringArray0 = new String[1];
          AZHandshake aZHandshake0 = new AZHandshake(byteArray0, (HashWrapper) null, (HashWrapper) null, "\t", "\t", (-205), (-971), (int) (byte)55, (InetAddress) inet4Address0, (-1274), stringArray0, byteArray0, (int) (byte) (-94), (byte)0, false);
          int int0 = aZHandshake0.getUDPNonDataListenPort();
          assertEquals(false, aZHandshake0.isUploadOnly());
          assertEquals(0, aZHandshake0.getVersion());
          assertEquals(0, aZHandshake0.getUDPListenPort());
          assertEquals("\t", aZHandshake0.getClient());
          assertEquals(55, int0);
          assertEquals(-94, aZHandshake0.getHandshakeType());
          assertEquals(0, aZHandshake0.getTCPListenPort());
          assertEquals(-1274, aZHandshake0.getMetadataSize());
          assertEquals("\t", aZHandshake0.getClientVersion());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          String[] stringArray0 = new String[6];
          byte[] byteArray0 = new byte[3];
          HashWrapper hashWrapper0 = new HashWrapper(byteArray0);
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          AZHandshake aZHandshake0 = new AZHandshake(byteArray0, hashWrapper0, hashWrapper0, (String) null, (String) null, (int) (byte) (-37), 52442, (int) (byte)0, (InetAddress) inet4Address0, (int) (byte)0, stringArray0, byteArray0, 52442, (byte)0, true);
          aZHandshake0.getReconnectSessionID();
          assertEquals(52442, aZHandshake0.getHandshakeType());
          assertEquals(0, aZHandshake0.getVersion());
          assertEquals(true, aZHandshake0.isUploadOnly());
          assertEquals(0, aZHandshake0.getUDPNonDataListenPort());
          assertEquals(0, aZHandshake0.getTCPListenPort());
          assertEquals(0, aZHandshake0.getMetadataSize());
          assertEquals(52442, aZHandshake0.getUDPListenPort());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          byte[] byteArray0 = new byte[2];
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          String[] stringArray0 = new String[9];
          AZHandshake aZHandshake0 = new AZHandshake(byteArray0, (HashWrapper) null, (HashWrapper) null, (String) null, (String) null, 30, (int) (byte)0, (int) (byte)0, (InetAddress) inet4Address0, 0, stringArray0, byteArray0, 30, (byte)6, true);
          String string0 = aZHandshake0.getClient();
          assertEquals(0, aZHandshake0.getUDPListenPort());
          assertEquals(6, aZHandshake0.getVersion());
          assertEquals(0, aZHandshake0.getMetadataSize());
          assertNull(string0);
          assertEquals(true, aZHandshake0.isUploadOnly());
          assertEquals(0, aZHandshake0.getUDPNonDataListenPort());
          assertEquals(30, aZHandshake0.getHandshakeType());
          assertEquals(30, aZHandshake0.getTCPListenPort());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test14()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          byte[] byteArray0 = new byte[9];
          HashWrapper hashWrapper0 = new HashWrapper(byteArray0);
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          String[] stringArray0 = new String[4];
          AZHandshake aZHandshake0 = new AZHandshake(byteArray0, hashWrapper0, hashWrapper0, "]", "]", (int) (byte) (-87), (int) (byte)0, (int) (byte) (-87), (InetAddress) inet4Address0, (int) (byte) (-87), stringArray0, byteArray0, (int) (byte)0, (byte)0, true);
          int int0 = aZHandshake0.getTCPListenPort();
          assertEquals("]", aZHandshake0.getClient());
          assertEquals(0, aZHandshake0.getUDPListenPort());
          assertEquals(-87, aZHandshake0.getMetadataSize());
          assertEquals(0, aZHandshake0.getUDPNonDataListenPort());
          assertEquals(0, aZHandshake0.getVersion());
          assertEquals(true, aZHandshake0.isUploadOnly());
          assertEquals(0, aZHandshake0.getHandshakeType());
          assertEquals(0, int0);
          assertEquals("]", aZHandshake0.getClientVersion());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test15()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          byte[] byteArray0 = new byte[13];
          HashWrapper hashWrapper0 = new HashWrapper(byteArray0);
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          String[] stringArray0 = new String[25];
          AZHandshake aZHandshake0 = new AZHandshake(byteArray0, hashWrapper0, hashWrapper0, "\u0006!FqI)B|c7", "\u0006!FqI)B|c7", 0, (int) (byte) (-11), (int) (byte) (-11), (InetAddress) inet4Address0, (int) (byte) (-11), stringArray0, byteArray0, (int) (byte) (-11), (byte)0, true);
          int int0 = aZHandshake0.getType();
          assertEquals(0, aZHandshake0.getUDPNonDataListenPort());
          assertEquals(0, aZHandshake0.getUDPListenPort());
          assertEquals(0, aZHandshake0.getTCPListenPort());
          assertEquals("\u0006!FqI)B|c7", aZHandshake0.getClient());
          assertEquals("\u0006!FqI)B|c7", aZHandshake0.getClientVersion());
          assertEquals(0, int0);
          assertEquals(-11, aZHandshake0.getHandshakeType());
          assertEquals(true, aZHandshake0.isUploadOnly());
          assertEquals(0, aZHandshake0.getVersion());
          assertEquals(-11, aZHandshake0.getMetadataSize());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test16()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          String[] stringArray0 = new String[6];
          byte[] byteArray0 = new byte[3];
          HashWrapper hashWrapper0 = new HashWrapper(byteArray0);
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          AZHandshake aZHandshake0 = new AZHandshake(byteArray0, hashWrapper0, hashWrapper0, (String) null, (String) null, (int) (byte) (-37), 52442, (int) (byte)0, (InetAddress) inet4Address0, (int) (byte)0, stringArray0, byteArray0, 52442, (byte)0, true);
          byte byte0 = aZHandshake0.getVersion();
          assertEquals((byte)0, byte0);
          assertEquals(0, aZHandshake0.getUDPNonDataListenPort());
          assertEquals(52442, aZHandshake0.getHandshakeType());
          assertEquals(0, aZHandshake0.getTCPListenPort());
          assertEquals(true, aZHandshake0.isUploadOnly());
          assertEquals(0, aZHandshake0.getMetadataSize());
          assertEquals(52442, aZHandshake0.getUDPListenPort());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test17()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          String[] stringArray0 = new String[6];
          byte[] byteArray0 = new byte[3];
          HashWrapper hashWrapper0 = new HashWrapper(byteArray0);
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          AZHandshake aZHandshake0 = new AZHandshake(byteArray0, hashWrapper0, hashWrapper0, (String) null, (String) null, 52442, (int) (byte)0, 65553, (InetAddress) inet4Address0, (int) (byte)0, stringArray0, byteArray0, (int) (byte)15, (byte)0, true);
          assertEquals(0, aZHandshake0.getMetadataSize());
          assertEquals(0, aZHandshake0.getUDPListenPort());
          assertEquals(0, aZHandshake0.getVersion());
          assertEquals(52442, aZHandshake0.getTCPListenPort());
          assertEquals(0, aZHandshake0.getUDPNonDataListenPort());
          assertEquals(15, aZHandshake0.getHandshakeType());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test18()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          byte[] byteArray0 = new byte[9];
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          String[] stringArray0 = new String[1];
          stringArray0[0] = "\t";
          AZHandshake aZHandshake0 = new AZHandshake(byteArray0, (HashWrapper) null, (HashWrapper) null, "\t", "\t", (-205), (-971), (int) (byte)55, (InetAddress) inet4Address0, (-1274), stringArray0, byteArray0, (int) (byte) (-94), (byte)0, false);
          aZHandshake0.getDescription();
          String string0 = aZHandshake0.getDescription();
          assertEquals(-94, aZHandshake0.getHandshakeType());
          assertEquals(0, aZHandshake0.getVersion());
          assertEquals("AZ_HANDSHAKE from [000000000000000000, \t \t, TCP/UDP ports 0/0/55, handshake crypto, upload_only = 0, ipv6 = 127.0.0.1, md_size=-1274] supports [\t:0]", string0);
          assertNotNull(string0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      HashWrapper hashWrapper0 = new HashWrapper(byteArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{%>$N8?9";
      stringArray0[1] = "{%>$N8?9";
      stringArray0[2] = "{%>$N8?9";
      AZHandshake aZHandshake0 = new AZHandshake(byteArray0, hashWrapper0, hashWrapper0, "{%>$N8?9", "{%>$N8?9", 1000000, (int) (byte) (-112), (int) (byte)0, (InetAddress) null, (int) (byte) (-112), stringArray0, byteArray0, (int) (byte)0, (byte)0, true);
      String string0 = aZHandshake0.getDescription();
      assertNotNull(string0);
      assertEquals(0, aZHandshake0.getVersion());
      assertEquals("AZ_HANDSHAKE from [0000000000000000, {%>$N8?9 {%>$N8?9, TCP/UDP ports 0/0/0, handshake plain, upload_only = 1, md_size=-112, sessionID: AAAAAAAAAAAAA, reconnect request: AAAAAAAAAAAAA] supports [{%>$N8?9:0][{%>$N8?9:0][{%>$N8?9:0]", string0);
  }

  @Test
  public void test20()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          byte[] byteArray0 = new byte[32];
          HashWrapper hashWrapper0 = new HashWrapper(byteArray0);
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          String[] stringArray0 = new String[3];
          stringArray0[0] = "cFLjrv4";
          stringArray0[1] = "d7YEa@{vi-l9ddg,Ro";
          stringArray0[2] = "cFLjrv4";
          AZHandshake aZHandshake0 = new AZHandshake(byteArray0, hashWrapper0, hashWrapper0, "cFLjrv4", "cFLjrv4", (-28), (-28), (-28), (InetAddress) inet4Address0, (-28), stringArray0, byteArray0, (-28), (byte)97, true);
          // Undeclared exception!
          try {
            aZHandshake0.getData();
            fail("Expecting exception: NoClassDefFoundError");
          } catch(NoClassDefFoundError e) {
            /*
             * Could not initialize class org.gudy.azureus2.core3.util.DirectByteBufferPool
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test21()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          byte[] byteArray0 = new byte[2];
          HashWrapper hashWrapper0 = new HashWrapper(byteArray0);
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          String[] stringArray0 = new String[8];
          stringArray0[0] = "AZ_HANDSHAKE";
          AZHandshake aZHandshake0 = new AZHandshake(byteArray0, hashWrapper0, hashWrapper0, "AZ_HANDSHAKE", (String) null, (int) (byte) (-1), 120000, 508, (InetAddress) inet4Address0, (int) (byte)0, stringArray0, byteArray0, 120000, (byte) (-1), false);
          // Undeclared exception!
          try {
            aZHandshake0.getData();
            fail("Expecting exception: IllegalArgumentException");
          } catch(IllegalArgumentException e) {
            /*
             * StringEquals is not supposed to work on a null caller
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      String[] stringArray0 = new String[4];
      stringArray0[2] = "Lr5eQ nl";
      stringArray0[3] = "Lr5eQ nl";
      stringArray0[0] = "Lr5eQ nl";
      stringArray0[1] = "Lr5eQ nl";
      byte[] byteArray1 = new byte[4];
      AZHandshake aZHandshake0 = new AZHandshake(byteArray0, (HashWrapper) null, (HashWrapper) null, "Lr5eQ nl", "Lr5eQ nl", (int) (byte)1, (int) (byte)1, (int) (byte)1, (InetAddress) null, (int) (byte)1, stringArray0, byteArray1, (int) (byte)1, (byte)55, false);
      // Undeclared exception!
      try {
        aZHandshake0.getData();
        fail("Expecting exception: NoClassDefFoundError");
      } catch(NoClassDefFoundError e) {
        /*
         * Could not initialize class org.gudy.azureus2.core3.util.DirectByteBufferPool
         */
      }
  }

  @Test
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      HashWrapper hashWrapper0 = new HashWrapper(byteArray0);
      String[] stringArray0 = new String[8];
      AZHandshake aZHandshake0 = new AZHandshake(byteArray0, hashWrapper0, hashWrapper0, "org.bKuncycastle.jce.provider.JCEKeyGenerator$RIPEMD128HMAC", "org.bKuncycastle.jce.provider.JCEKeyGenerator$RIPEMD128HMAC", (int) (byte)1, (int) (byte)1, 523, (InetAddress) null, (int) (byte)0, stringArray0, byteArray0, (int) (byte)0, (byte)0, true);
      aZHandshake0.destroy();
      assertEquals(1, aZHandshake0.getTCPListenPort());
      assertEquals(0, aZHandshake0.getMetadataSize());
      assertEquals("org.bKuncycastle.jce.provider.JCEKeyGenerator$RIPEMD128HMAC", aZHandshake0.getClient());
      assertEquals("org.bKuncycastle.jce.provider.JCEKeyGenerator$RIPEMD128HMAC", aZHandshake0.getClientVersion());
      assertEquals(523, aZHandshake0.getUDPNonDataListenPort());
      assertEquals(true, aZHandshake0.isUploadOnly());
      assertEquals(0, aZHandshake0.getHandshakeType());
      assertEquals(1, aZHandshake0.getUDPListenPort());
  }
}
