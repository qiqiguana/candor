/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.metasearch.impl.web;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.metasearch.Engine;
import com.aelitis.azureus.core.metasearch.impl.DateParser;
import com.aelitis.azureus.core.metasearch.impl.DateParserClassic;
import com.aelitis.azureus.core.metasearch.impl.DateParserRegex;
import com.aelitis.azureus.core.metasearch.impl.web.WebResult;
import java.util.Date;
import org.evosuite.testcase.TestCaseExecutor;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class WebResultEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DateParserRegex dateParserRegex0 = new DateParserRegex();
      WebResult webResult0 = new WebResult((Engine) null, "~&f2?FE^WI'}wCw=", "~&f2?FE^WI'}wCw=", (DateParser) dateParserRegex0, (String) null);
      webResult0.setDrmKey("dht:");
      assertEquals("dht:", webResult0.getDRMKey());
      assertEquals("null : -1 s, -1p, ", webResult0.toString());
      assertEquals((-1), webResult0.votesDown);
      assertEquals((-1), webResult0.nbSuperSeeds);
      assertEquals((-1), webResult0.votes);
      assertEquals((-1), webResult0.comments);
      assertEquals((-1.0F), webResult0.rank, 0.01F);
      assertEquals((-1L), webResult0.size);
      assertEquals(-1, webResult0.getVotesDown());
  }

  @Test
  public void test1()  throws Throwable  {
      WebResult webResult0 = new WebResult((Engine) null, (String) null, (String) null, (DateParser) null, (String) null);
      String string0 = webResult0.getContentType();
      assertEquals((-1), webResult0.votes);
      assertEquals((-1), webResult0.comments);
      assertNotNull(string0);
      assertEquals((-1L), webResult0.size);
      assertEquals((-1.0F), webResult0.rank, 0.01F);
      assertEquals((-1), webResult0.nbSuperSeeds);
      assertEquals("null : -1 s, -1p, ", webResult0.toString());
      assertEquals((-1), webResult0.votesDown);
  }

  @Test
  public void test2()  throws Throwable  {
      DateParserRegex dateParserRegex0 = new DateParserRegex();
      WebResult webResult0 = new WebResult((Engine) null, "AutoSpeed Choking Ping Milis", "AutoSpeed Choking Ping Milis", (DateParser) dateParserRegex0, "AutoSpeed Choking Ping Milis");
      String string0 = webResult0.getDRMKey();
      assertEquals((-1L), webResult0.size);
      assertEquals((-1), webResult0.votes);
      assertEquals((-1), webResult0.nbSuperSeeds);
      assertEquals("null : -1 s, -1p, ", webResult0.toString());
      assertNull(string0);
      assertEquals((-1), webResult0.comments);
      assertEquals((-1), webResult0.votesDown);
      assertEquals("AutoSpeed Choking Ping Milis", webResult0.getSearchQuery());
      assertEquals((-1.0F), webResult0.rank, 0.01F);
      assertEquals(-1, webResult0.getVotesDown());
  }

  @Test
  public void test3()  throws Throwable  {
      DateParserRegex dateParserRegex0 = new DateParserRegex("Ud/aE0l#<~3+w", true, "Ud/aE0l#<~3+w");
      WebResult webResult0 = new WebResult((Engine) null, "Ud/aE0l#<~3+w", "Ud/aE0l#<~3+w", (DateParser) dateParserRegex0, "Ud/aE0l#<~3+w");
      webResult0.setCategory("Ud/aE0l#<~3+w");
      assertEquals("Ud/aE0l#<~3+w", webResult0.getCategory());
      assertEquals("Ud/aE0l#<~3+w", webResult0.getSearchQuery());
  }

  @Test
  public void test4()  throws Throwable  {
      DateParserClassic dateParserClassic0 = new DateParserClassic();
      WebResult webResult0 = new WebResult((Engine) null, "Failed to record selection state", "Failed to record selection state", (DateParser) dateParserClassic0, "Failed to record selection state");
      webResult0.setHash("Failed to record selection state");
  }

  @Test
  public void test5()  throws Throwable  {
      WebResult webResult0 = new WebResult((Engine) null, (String) null, (String) null, (DateParser) null, (String) null);
      webResult0.setCDPLink((String) null);
  }

  @Test
  public void test6()  throws Throwable  {
      DateParserRegex dateParserRegex0 = new DateParserRegex("Alg.lias.AlgortmParam*ers.BEWIHSA1ANDC2", true, "Alg.lias.AlgortmParam*ers.BEWIHSA1ANDC2");
      WebResult webResult0 = new WebResult((Engine) null, "Alg.lias.AlgortmParam*ers.BEWIHSA1ANDC2", "Alg.lias.AlgortmParam*ers.BEWIHSA1ANDC2", (DateParser) dateParserRegex0, "Alg.lias.AlgortmParam*ers.BEWIHSA1ANDC2");
      webResult0.setUID("Alg.lias.AlgortmParam*ers.BEWIHSA1ANDC2");
      assertEquals("null : -1 s, -1p, ", webResult0.toString());
      assertEquals((-1L), webResult0.size);
      assertEquals("Alg.lias.AlgortmParam*ers.BEWIHSA1ANDC2", webResult0.getSearchQuery());
      assertEquals("Alg.lias.AlgortmParam*ers.BEWIHSA1ANDC2", webResult0.getUID());
      assertEquals((-1), webResult0.votesDown);
      assertEquals((-1), webResult0.comments);
      assertEquals((-1), webResult0.nbSuperSeeds);
      assertEquals((-1.0F), webResult0.rank, 0.01F);
      assertEquals((-1), webResult0.votes);
      assertEquals(-1, webResult0.getComments());
  }

  @Test
  public void test7()  throws Throwable  {
      WebResult webResult0 = new WebResult((Engine) null, "https://keypa", "https://keypa", (DateParser) null, "https://keypa");
      webResult0.setPublishedDate((Date) null);
      assertEquals("https://keypa", webResult0.getSearchQuery());
      assertEquals((-1.0F), webResult0.rank, 0.01F);
      assertEquals((-1), webResult0.nbSuperSeeds);
      assertEquals("null : -1 s, -1p, ", webResult0.toString());
      assertEquals((-1), webResult0.votesDown);
      assertEquals((-1), webResult0.comments);
      assertEquals((-1), webResult0.votes);
      assertEquals((-1L), webResult0.size);
  }

  @Test
  public void test8()  throws Throwable  {
      DateParserRegex dateParserRegex0 = new DateParserRegex("6", false, "6");
      WebResult webResult0 = new WebResult((Engine) null, "6", "6", (DateParser) dateParserRegex0, "6");
      // Undeclared exception!
      try {
        webResult0.toJSONMap();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      WebResult webResult0 = new WebResult((Engine) null, (String) null, (String) null, (DateParser) null, (String) null);
      webResult0.setContentType((String) null);
      assertEquals((-1L), webResult0.size);
      assertEquals((-1), webResult0.votesDown);
      assertEquals((-1), webResult0.votes);
      assertEquals((-1), webResult0.comments);
      assertEquals((-1), webResult0.nbSuperSeeds);
      assertEquals((-1.0F), webResult0.rank, 0.01F);
      assertEquals("null : -1 s, -1p, ", webResult0.toString());
      assertEquals(-1, webResult0.getVotesDown());
  }

  @Test
  public void test10()  throws Throwable  {
      DateParserRegex dateParserRegex0 = new DateParserRegex("", false, "");
      WebResult webResult0 = new WebResult((Engine) null, "", "", (DateParser) dateParserRegex0, "");
      float float0 = webResult0.getAccuracy();
      assertEquals((-1), webResult0.votesDown);
      assertEquals((-1), webResult0.comments);
      assertEquals((-1.0F), webResult0.rank, 0.01F);
      assertEquals("null : -1 s, -1p, ", webResult0.toString());
      assertEquals((-1.0F), float0, 0.01F);
      assertEquals((-1), webResult0.nbSuperSeeds);
      assertEquals((-1), webResult0.votes);
      assertEquals((-1L), webResult0.size);
  }

  @Test
  public void test11()  throws Throwable  {
      WebResult webResult0 = new WebResult((Engine) null, "/' ", "/' ", (DateParser) null, "/' ");
      assertEquals("", webResult0.getPlayLink());
      
      webResult0.setPlayLink("/' ");
      String string0 = webResult0.getPlayLink();
      assertEquals("/' /' ", webResult0.getPlayLink());
      assertEquals("/' /' ", string0);
  }

  @Test
  public void test12()  throws Throwable  {
      DateParserRegex dateParserRegex0 = new DateParserRegex();
      WebResult webResult0 = new WebResult((Engine) null, "~&f2?FE^WI'}wCw=", "~&f2?FE^WI'}wCw=", (DateParser) dateParserRegex0, (String) null);
      String string0 = webResult0.getHash();
      assertEquals("null : -1 s, -1p, ", webResult0.toString());
      assertEquals((-1L), webResult0.size);
      assertEquals((-1.0F), webResult0.rank, 0.01F);
      assertEquals((-1), webResult0.votes);
      assertEquals((-1), webResult0.votesDown);
      assertEquals((-1), webResult0.nbSuperSeeds);
      assertNull(string0);
      assertEquals((-1), webResult0.comments);
      assertEquals(-1, webResult0.getComments());
  }

  @Test
  public void test13()  throws Throwable  {
      WebResult webResult0 = new WebResult((Engine) null, (String) null, (String) null, (DateParser) null, (String) null);
      String string0 = webResult0.getCDPLink();
      assertEquals((-1L), webResult0.size);
      assertEquals((-1), webResult0.comments);
      assertEquals((-1.0F), webResult0.rank, 0.01F);
      assertEquals("null : -1 s, -1p, ", webResult0.toString());
      assertEquals((-1), webResult0.nbSuperSeeds);
      assertEquals((-1), webResult0.votesDown);
      assertNotNull(string0);
      assertEquals((-1), webResult0.votes);
      assertEquals(-1, webResult0.getNbSuperSeeds());
  }

  @Test
  public void test14()  throws Throwable  {
      DateParserClassic dateParserClassic0 = new DateParserClassic();
      WebResult webResult0 = new WebResult((Engine) null, "~<qbO*ST^", "~<qbO*ST^", (DateParser) dateParserClassic0, "~<qbO*ST^");
      String string0 = webResult0.getUID();
      assertEquals("~<qbO*ST^", webResult0.getSearchQuery());
      assertEquals((-1.0F), webResult0.rank, 0.01F);
      assertEquals((-1), webResult0.comments);
      assertNull(string0);
      assertEquals((-1), webResult0.votes);
      assertEquals("null : -1 s, -1p, ", webResult0.toString());
      assertEquals((-1), webResult0.nbSuperSeeds);
      assertEquals((-1L), webResult0.size);
      assertEquals((-1), webResult0.votesDown);
  }

  @Test
  public void test15()  throws Throwable  {
      DateParserRegex dateParserRegex0 = new DateParserRegex("6", false, "6");
      WebResult webResult0 = new WebResult((Engine) null, "6", "6", (DateParser) dateParserRegex0, "6");
      webResult0.setName((String) null);
      assertEquals((-1), webResult0.votes);
      assertEquals("null : -1 s, -1p, ", webResult0.toString());
      assertEquals((-1.0F), webResult0.rank, 0.01F);
      assertEquals((-1), webResult0.comments);
      assertEquals((-1L), webResult0.size);
      assertEquals("6", webResult0.getSearchQuery());
      assertEquals((-1), webResult0.nbSuperSeeds);
      assertEquals((-1), webResult0.votesDown);
      assertEquals(-1, webResult0.getNbPeers());
  }

  @Test
  public void test16()  throws Throwable  {
      DateParserRegex dateParserRegex0 = new DateParserRegex("", false, "");
      WebResult webResult0 = new WebResult((Engine) null, "", "", (DateParser) dateParserRegex0, "");
      webResult0.setName("");
      assertEquals(" : -1 s, -1p, ", webResult0.toString());
      assertEquals((-1L), webResult0.getSize());
  }

  @Test
  public void test17()  throws Throwable  {
      WebResult webResult0 = new WebResult((Engine) null, (String) null, (String) null, (DateParser) null, (String) null);
      webResult0.setNameFromHTML((String) null);
      assertEquals((-1), webResult0.nbSuperSeeds);
      assertEquals((-1), webResult0.votesDown);
      assertEquals((-1.0F), webResult0.rank, 0.01F);
      assertEquals((-1), webResult0.comments);
      assertEquals((-1L), webResult0.size);
      assertEquals("null : -1 s, -1p, ", webResult0.toString());
      assertEquals((-1), webResult0.votes);
      assertEquals(-1, webResult0.getNbSuperSeeds());
  }

  @Test
  public void test18()  throws Throwable  {
      WebResult webResult0 = new WebResult((Engine) null, "\rk&7(0{Om<sa+ Gm", "\rk&7(0{Om<sa+ Gm", (DateParser) null, "\rk&7(0{Om<sa+ Gm");
      webResult0.setNameFromHTML("");
      assertEquals(" : -1 s, -1p, ", webResult0.toString());
  }

  @Test
  public void test19()  throws Throwable  {
      WebResult webResult0 = new WebResult((Engine) null, (String) null, (String) null, (DateParser) null, (String) null);
      webResult0.setCommentsFromHTML((String) null);
      assertEquals((-1), webResult0.comments);
      assertEquals((-1.0F), webResult0.rank, 0.01F);
      assertEquals((-1L), webResult0.size);
      assertEquals("null : -1 s, -1p, ", webResult0.toString());
      assertEquals((-1), webResult0.nbSuperSeeds);
      assertEquals((-1), webResult0.votesDown);
      assertEquals((-1), webResult0.votes);
      assertEquals(-1, webResult0.getNbSuperSeeds());
  }

  @Test
  public void test20()  throws Throwable  {
      WebResult webResult0 = new WebResult((Engine) null, "/' ", "/' ", (DateParser) null, "/' ");
      webResult0.setCommentsFromHTML("/' /' ");
      assertEquals((-1), webResult0.votes);
      assertEquals((-1L), webResult0.size);
      assertEquals("null : -1 s, -1p, ", webResult0.toString());
      assertEquals("/' ", webResult0.getSearchQuery());
      assertEquals((-1.0F), webResult0.rank, 0.01F);
      assertEquals((-1), webResult0.nbSuperSeeds);
      assertEquals((-1), webResult0.votesDown);
      assertEquals((-1), webResult0.comments);
  }

  @Test
  public void test21()  throws Throwable  {
      DateParserRegex dateParserRegex0 = new DateParserRegex();
      WebResult webResult0 = new WebResult((Engine) null, "AutoSpeed Choking Ping Milis", "AutoSpeed Choking Ping Milis", (DateParser) dateParserRegex0, "AutoSpeed Choking Ping Milis");
      webResult0.setCategoryFromHTML((String) null);
      assertEquals((-1.0F), webResult0.rank, 0.01F);
      assertEquals("AutoSpeed Choking Ping Milis", webResult0.getSearchQuery());
      assertEquals((-1), webResult0.votes);
      assertEquals((-1), webResult0.comments);
      assertEquals((-1), webResult0.votesDown);
      assertEquals("null : -1 s, -1p, ", webResult0.toString());
      assertEquals((-1L), webResult0.size);
      assertEquals((-1), webResult0.nbSuperSeeds);
      assertEquals(-1, webResult0.getVotes());
  }

  @Test
  public void test22()  throws Throwable  {
      DateParserRegex dateParserRegex0 = new DateParserRegex("Ud/aE0l#<~3+w", true, "Ud/aE0l#<~3+w");
      WebResult webResult0 = new WebResult((Engine) null, "Ud/aE0l#<~3+w", "Ud/aE0l#<~3+w", (DateParser) dateParserRegex0, "Ud/aE0l#<~3+w");
      webResult0.setCategoryFromHTML("Ud/aE0l#<~3+w");
      assertEquals("Ud/aE0l#<~3+w", webResult0.getCategory());
  }

  @Test
  public void test23()  throws Throwable  {
      DateParserRegex dateParserRegex0 = new DateParserRegex("", false, "");
      WebResult webResult0 = new WebResult((Engine) null, "", "", (DateParser) dateParserRegex0, "");
      webResult0.setNbPeersFromHTML((String) null);
      assertEquals("null : -1 s, -1p, ", webResult0.toString());
      assertEquals((-1), webResult0.nbSuperSeeds);
      assertEquals((-1), webResult0.votes);
      assertEquals((-1), webResult0.comments);
      assertEquals((-1L), webResult0.size);
      assertEquals((-1), webResult0.votesDown);
      assertEquals((-1.0F), webResult0.rank, 0.01F);
      assertEquals(-1, webResult0.getNbSuperSeeds());
  }

  @Test
  public void test24()  throws Throwable  {
      WebResult webResult0 = new WebResult((Engine) null, "&az_template_version=", (String) null, (DateParser) null, (String) null);
      webResult0.setNbPeersFromHTML("Tracker TCP NonBlocking Immediate Close");
      assertEquals((-1.0F), webResult0.rank, 0.01F);
      assertEquals((-1), webResult0.votes);
      assertEquals("null : -1 s, -1p, ", webResult0.toString());
      assertEquals((-1L), webResult0.size);
      assertEquals((-1), webResult0.nbSuperSeeds);
      assertEquals((-1), webResult0.comments);
      assertEquals((-1), webResult0.votesDown);
      assertEquals(-1, webResult0.getVotes());
  }

  @Test
  public void test25()  throws Throwable  {
      WebResult webResult0 = new WebResult((Engine) null, "keypa", "keypa", (DateParser) null, "keypa");
      webResult0.setNbSeedsFromHTML((String) null);
      assertEquals("null : -1 s, -1p, ", webResult0.toString());
      assertEquals((-1L), webResult0.size);
      assertEquals((-1), webResult0.votes);
      assertEquals((-1), webResult0.votesDown);
      assertEquals((-1.0F), webResult0.rank, 0.01F);
      assertEquals((-1), webResult0.comments);
      assertEquals((-1), webResult0.nbSuperSeeds);
      assertEquals("keypa", webResult0.getSearchQuery());
  }

  @Test
  public void test26()  throws Throwable  {
      DateParserRegex dateParserRegex0 = new DateParserRegex();
      WebResult webResult0 = new WebResult((Engine) null, "~&f2?FE^WI'}wCw=", "~&f2?FE^WI'}wCw=", (DateParser) dateParserRegex0, (String) null);
      webResult0.setNbSeedsFromHTML("~&f2?FE^WI'}wCw=");
      assertEquals((-1), webResult0.comments);
      assertEquals("null : -1 s, -1p, ", webResult0.toString());
      assertEquals((-1), webResult0.nbSuperSeeds);
      assertEquals((-1), webResult0.votes);
      assertEquals((-1.0F), webResult0.rank, 0.01F);
      assertEquals((-1), webResult0.votesDown);
      assertEquals((-1L), webResult0.size);
      assertEquals(-1, webResult0.getNbSuperSeeds());
  }

  @Test
  public void test27()  throws Throwable  {
      DateParserRegex dateParserRegex0 = new DateParserRegex();
      WebResult webResult0 = new WebResult((Engine) null, "AutoSpeed Choking Ping Milis", "AutoSpeed Choking Ping Milis", (DateParser) dateParserRegex0, "AutoSpeed Choking Ping Milis");
      webResult0.setNbSuperSeedsFromHTML((String) null);
      assertEquals("null : -1 s, -1p, ", webResult0.toString());
      assertEquals((-1.0F), webResult0.rank, 0.01F);
      assertEquals("AutoSpeed Choking Ping Milis", webResult0.getSearchQuery());
      assertEquals((-1), webResult0.comments);
      assertEquals((-1), webResult0.nbSuperSeeds);
      assertEquals((-1L), webResult0.size);
      assertEquals((-1), webResult0.votesDown);
      assertEquals((-1), webResult0.votes);
      assertEquals((-1L), webResult0.getSize());
  }

  @Test
  public void test28()  throws Throwable  {
      WebResult webResult0 = new WebResult((Engine) null, "keypa", "keypa", (DateParser) null, "keypa");
      webResult0.setNbSuperSeedsFromHTML("keypa");
      assertEquals((-1), webResult0.nbSuperSeeds);
      assertEquals((-1), webResult0.votes);
      assertEquals((-1.0F), webResult0.rank, 0.01F);
      assertEquals((-1L), webResult0.size);
      assertEquals((-1), webResult0.votesDown);
      assertEquals("null : -1 s, -1p, ", webResult0.toString());
      assertEquals("keypa", webResult0.getSearchQuery());
      assertEquals((-1), webResult0.comments);
      assertEquals((-1L), webResult0.getSize());
  }

  @Test
  public void test29()  throws Throwable  {
      DateParserClassic dateParserClassic0 = new DateParserClassic();
      WebResult webResult0 = new WebResult((Engine) null, "b", "b", (DateParser) dateParserClassic0, "b");
      webResult0.setRankFromHTML("b", (float) (-1));
      assertEquals((-1L), webResult0.size);
      assertEquals((-1), webResult0.comments);
      assertEquals((-1), webResult0.votesDown);
      assertEquals((-1), webResult0.votes);
      assertEquals((-1.0F), webResult0.rank, 0.01F);
      assertEquals("b", webResult0.getSearchQuery());
      assertEquals((-1), webResult0.nbSuperSeeds);
      assertEquals("null : -1 s, -1p, ", webResult0.toString());
  }

  @Test
  public void test30()  throws Throwable  {
      WebResult webResult0 = new WebResult((Engine) null, (String) null, (String) null, (DateParser) null, (String) null);
      webResult0.setRankFromHTML((String) null, (float) (-1));
      assertEquals((-1.0F), webResult0.rank, 0.01F);
      assertEquals("null : -1 s, -1p, ", webResult0.toString());
      assertEquals((-1), webResult0.comments);
      assertEquals((-1), webResult0.votesDown);
      assertEquals((-1L), webResult0.size);
      assertEquals((-1), webResult0.nbSuperSeeds);
      assertEquals((-1), webResult0.votes);
      assertEquals(-1, webResult0.getVotes());
  }

  @Test
  public void test31()  throws Throwable  {
      WebResult webResult0 = new WebResult((Engine) null, "&az_template_version=", (String) null, (DateParser) null, (String) null);
      webResult0.setRankFromHTML((String) null);
      assertEquals((-1.0F), webResult0.rank, 0.01F);
      assertEquals((-1), webResult0.nbSuperSeeds);
      assertEquals((-1), webResult0.votesDown);
      assertEquals("null : -1 s, -1p, ", webResult0.toString());
      assertEquals((-1), webResult0.votes);
      assertEquals((-1L), webResult0.size);
      assertEquals((-1), webResult0.comments);
      assertEquals(-1, webResult0.getVotes());
  }

  @Test
  public void test32()  throws Throwable  {
      DateParserRegex dateParserRegex0 = new DateParserRegex("6", false, "6");
      WebResult webResult0 = new WebResult((Engine) null, "6", "6", (DateParser) dateParserRegex0, "6");
      webResult0.setRankFromHTML("6");
      // Undeclared exception!
      try {
        webResult0.toJSONMap();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test33()  throws Throwable  {
      WebResult webResult0 = new WebResult((Engine) null, "KFa/,n|qLtU'{T<\"r", "KFa/,n|qLtU'{T<\"r", (DateParser) null, "KFa/,n|qLtU'{T<\"r");
      webResult0.setRankFromHTML("222");
      assertEquals((-1.0F), webResult0.rank, 0.01F);
      assertEquals("null : -1 s, -1p, ", webResult0.toString());
      assertEquals("KFa/,n|qLtU'{T<\"r", webResult0.getSearchQuery());
      assertEquals((-1), webResult0.votesDown);
      assertEquals((-1), webResult0.votes);
      assertEquals((-1), webResult0.nbSuperSeeds);
      assertEquals((-1), webResult0.comments);
      assertEquals((-1L), webResult0.size);
      assertEquals((-1L), webResult0.getSize());
  }

  @Test
  public void test34()  throws Throwable  {
      WebResult webResult0 = new WebResult((Engine) null, "&az_template_version=", (String) null, (DateParser) null, (String) null);
      webResult0.setPublishedDateFromHTML((String) null);
      assertEquals((-1), webResult0.votes);
      assertEquals((-1.0F), webResult0.rank, 0.01F);
      assertEquals((-1), webResult0.nbSuperSeeds);
      assertEquals((-1L), webResult0.size);
      assertEquals("null : -1 s, -1p, ", webResult0.toString());
      assertEquals((-1), webResult0.votesDown);
      assertEquals((-1), webResult0.comments);
  }

  @Test
  public void test35()  throws Throwable  {
      DateParserRegex dateParserRegex0 = new DateParserRegex();
      WebResult webResult0 = new WebResult((Engine) null, "~&f2?FE^WI'}wCw=", "~&f2?FE^WI'}wCw=", (DateParser) dateParserRegex0, (String) null);
      webResult0.setPublishedDateFromHTML("");
      assertEquals((-1L), webResult0.size);
      assertEquals((-1), webResult0.comments);
      assertEquals("null : -1 s, -1p, ", webResult0.toString());
      assertEquals((-1), webResult0.votes);
      assertEquals((-1), webResult0.votesDown);
      assertEquals((-1.0F), webResult0.rank, 0.01F);
      assertEquals((-1), webResult0.nbSuperSeeds);
  }

  @Test
  public void test36()  throws Throwable  {
      WebResult webResult0 = new WebResult((Engine) null, (String) null, (String) null, (DateParser) null, (String) null);
      webResult0.setSizeFromHTML((String) null);
      assertEquals((-1), webResult0.votes);
      assertEquals((-1), webResult0.votesDown);
      assertEquals((-1.0F), webResult0.rank, 0.01F);
      assertEquals((-1L), webResult0.size);
      assertEquals((-1), webResult0.comments);
      assertEquals((-1), webResult0.nbSuperSeeds);
      assertEquals("null : -1 s, -1p, ", webResult0.toString());
      assertEquals((-1L), webResult0.getSize());
  }

  @Test
  public void test37()  throws Throwable  {
      DateParserClassic dateParserClassic0 = new DateParserClassic("results", true, "results");
      WebResult webResult0 = new WebResult((Engine) null, "results", "results", (DateParser) dateParserClassic0, "8745");
      webResult0.setSizeFromHTML("8745");
      assertEquals(8745L, webResult0.size);
      assertEquals(-1, webResult0.getNbPeers());
  }

  @Test
  public void test38()  throws Throwable  {
      DateParserClassic dateParserClassic0 = new DateParserClassic(">RT^", true, ">RT^");
      WebResult webResult0 = new WebResult((Engine) null, ">RT^", ">RT^", (DateParser) dateParserClassic0, ">RT^");
      webResult0.setVotesFromHTML((String) null);
      assertEquals(">RT^", webResult0.getSearchQuery());
      assertEquals((-1), webResult0.votes);
      assertEquals((-1.0F), webResult0.rank, 0.01F);
      assertEquals((-1L), webResult0.size);
      assertEquals((-1), webResult0.votesDown);
      assertEquals((-1), webResult0.nbSuperSeeds);
      assertEquals("null : -1 s, -1p, ", webResult0.toString());
      assertEquals((-1), webResult0.comments);
      assertEquals(-1, webResult0.getNbPeers());
  }

  @Test
  public void test39()  throws Throwable  {
      DateParserRegex dateParserRegex0 = new DateParserRegex("Alg.lias.AlgortmParam*ers.BEWIHSA1ANDC2", true, "Alg.lias.AlgortmParam*ers.BEWIHSA1ANDC2");
      WebResult webResult0 = new WebResult((Engine) null, "Alg.lias.AlgortmParam*ers.BEWIHSA1ANDC2", "Alg.lias.AlgortmParam*ers.BEWIHSA1ANDC2", (DateParser) dateParserRegex0, "Alg.lias.AlgortmParam*ers.BEWIHSA1ANDC2");
      webResult0.setVotesFromHTML("Alg.lias.AlgortmParam*ers.BEWIHSA1ANDC2");
      assertEquals((-1L), webResult0.size);
      assertEquals("Alg.lias.AlgortmParam*ers.BEWIHSA1ANDC2", webResult0.getSearchQuery());
      assertEquals((-1.0F), webResult0.rank, 0.01F);
      assertEquals((-1), webResult0.nbSuperSeeds);
      assertEquals((-1), webResult0.comments);
      assertEquals((-1), webResult0.votes);
      assertEquals((-1), webResult0.votesDown);
      assertEquals("null : -1 s, -1p, ", webResult0.toString());
      assertEquals(-1, webResult0.getVotesDown());
  }

  @Test
  public void test40()  throws Throwable  {
      DateParserRegex dateParserRegex0 = new DateParserRegex("", false, "");
      WebResult webResult0 = new WebResult((Engine) null, "", "", (DateParser) dateParserRegex0, "");
      webResult0.setVotesDownFromHTML((String) null);
      assertEquals((-1), webResult0.nbSuperSeeds);
      assertEquals("null : -1 s, -1p, ", webResult0.toString());
      assertEquals((-1.0F), webResult0.rank, 0.01F);
      assertEquals((-1L), webResult0.size);
      assertEquals((-1), webResult0.votesDown);
      assertEquals((-1), webResult0.comments);
      assertEquals((-1), webResult0.votes);
      assertEquals((-1L), webResult0.getSize());
  }

  @Test
  public void test41()  throws Throwable  {
      DateParserRegex dateParserRegex0 = new DateParserRegex("6", false, "6");
      WebResult webResult0 = new WebResult((Engine) null, "6", "6", (DateParser) dateParserRegex0, "6");
      webResult0.setVotesDownFromHTML("");
      assertEquals("6", webResult0.getSearchQuery());
      assertEquals((-1), webResult0.votesDown);
      assertEquals((-1), webResult0.nbSuperSeeds);
      assertEquals((-1), webResult0.votes);
      assertEquals((-1), webResult0.comments);
      assertEquals((-1.0F), webResult0.rank, 0.01F);
      assertEquals((-1L), webResult0.size);
      assertEquals("null : -1 s, -1p, ", webResult0.toString());
      assertEquals(-1, webResult0.getNbPeers());
  }

  @Test
  public void test42()  throws Throwable  {
      WebResult webResult0 = new WebResult((Engine) null, (String) null, (String) null, (DateParser) null, (String) null);
      webResult0.setPrivateFromHTML((String) null);
      assertEquals((-1), webResult0.votesDown);
      assertEquals("null : -1 s, -1p, ", webResult0.toString());
      assertEquals((-1L), webResult0.size);
      assertEquals((-1), webResult0.nbSuperSeeds);
      assertEquals((-1.0F), webResult0.rank, 0.01F);
      assertEquals((-1), webResult0.comments);
      assertEquals(false, webResult0.privateTorrent);
      assertEquals((-1), webResult0.votes);
      assertEquals((-1L), webResult0.getSize());
  }

  @Test
  public void test43()  throws Throwable  {
      DateParserRegex dateParserRegex0 = new DateParserRegex("|", false, "|");
      WebResult webResult0 = new WebResult((Engine) null, "|", "|", (DateParser) dateParserRegex0, "|");
      webResult0.setPrivateFromHTML("|");
      assertEquals(true, webResult0.privateTorrent);
      assertEquals("|", webResult0.getSearchQuery());
  }

  @Test
  public void test44()  throws Throwable  {
      WebResult webResult0 = new WebResult((Engine) null, "\rk&7(0{Om<sa+ Gm", "\rk&7(0{Om<sa+ Gm", (DateParser) null, "\rk&7(0{Om<sa+ Gm");
      webResult0.setPrivateFromHTML("");
      assertEquals("\rk&7(0{Om<sa+ Gm", webResult0.getSearchQuery());
      assertEquals((-1), webResult0.comments);
      assertEquals((-1.0F), webResult0.rank, 0.01F);
      assertEquals((-1), webResult0.votes);
      assertEquals(false, webResult0.privateTorrent);
      assertEquals("null : -1 s, -1p, ", webResult0.toString());
      assertEquals((-1L), webResult0.size);
      assertEquals((-1), webResult0.votesDown);
      assertEquals((-1), webResult0.nbSuperSeeds);
      assertEquals(false, webResult0.isPrivate());
  }

  @Test
  public void test45()  throws Throwable  {
      DateParserClassic dateParserClassic0 = new DateParserClassic(">RT^", true, ">RT^");
      WebResult webResult0 = new WebResult((Engine) null, ">RT^", ">RT^", (DateParser) dateParserClassic0, ">RT^");
      webResult0.setHash(">RT^");
      assertEquals((-1), webResult0.nbPeers);
      assertEquals((-1), webResult0.nbSuperSeeds);
      assertEquals((-1), webResult0.votesDown);
      assertEquals((-1), webResult0.comments);
      assertEquals((-1), webResult0.votes);
      assertEquals((-1L), webResult0.size);
      assertEquals(">RT^", webResult0.getSearchQuery());
      assertEquals((-1.0F), webResult0.rank, 0.01F);
      assertEquals("null : -1 s, -1p, ", webResult0.toString());
  }

  @Test
  public void test46()  throws Throwable  {
      WebResult webResult0 = new WebResult((Engine) null, "keypa", "keypa", (DateParser) null, "keypa");
      String string0 = webResult0.getDownloadButtonLink();
      assertEquals("null : -1 s, -1p, ", webResult0.toString());
      assertEquals((-1), webResult0.comments);
      assertEquals((-1), webResult0.votesDown);
      assertEquals((-1), webResult0.votes);
      assertEquals((-1L), webResult0.size);
      assertEquals((-1), webResult0.nbSuperSeeds);
      assertEquals("keypa", webResult0.getSearchQuery());
      assertNotNull(string0);
      assertEquals((-1.0F), webResult0.rank, 0.01F);
      assertEquals("", string0);
  }

  @Test
  public void test47()  throws Throwable  {
      DateParserClassic dateParserClassic0 = new DateParserClassic();
      WebResult webResult0 = new WebResult((Engine) null, "magnet:bctp:", "magnet:bctp:", (DateParser) dateParserClassic0, "magnet:bctp:");
      webResult0.downloadButtonLink = "magnet:bctp:";
      String string0 = webResult0.getDownloadButtonLink();
      assertEquals("magnet:bctp:", webResult0.getDownloadButtonLink());
      assertEquals("magnet:bctp:", string0);
  }

  @Test
  public void test48()  throws Throwable  {
      WebResult webResult0 = new WebResult((Engine) null, "https://keypa", "https://keypa", (DateParser) null, "https://keypa");
      assertEquals("", webResult0.getPlayLink());
      
      webResult0.setPlayLink("https://keypa");
      String string0 = webResult0.getPlayLink();
      assertEquals("https://keypa", webResult0.getPlayLink());
      assertEquals("https://keypa", string0);
  }

  @Test
  public void test49()  throws Throwable  {
      DateParserRegex dateParserRegex0 = new DateParserRegex();
      WebResult webResult0 = new WebResult((Engine) null, "~&f2?FE^WI'}wCw=", "~&f2?FE^WI'}wCw=", (DateParser) dateParserRegex0, (String) null);
      webResult0.setTorrentLink((String) null);
      webResult0.getDownloadLink();
  }

  @Test
  public void test50()  throws Throwable  {
      DateParserRegex dateParserRegex0 = new DateParserRegex();
      WebResult webResult0 = new WebResult((Engine) null, "~&f2?FE^WI'}wCw=", "~&f2?FE^WI'}wCw=", (DateParser) dateParserRegex0, (String) null);
      webResult0.setDownloadButtonLink("dht:");
      webResult0.getDownloadButtonLink();
  }

  @Test
  public void test51()  throws Throwable  {
      DateParserRegex dateParserRegex0 = new DateParserRegex();
      WebResult webResult0 = new WebResult((Engine) null, "~&f2?FE^WI'}wCw=", "~&f2?FE^WI'}wCw=", (DateParser) dateParserRegex0, (String) null);
      webResult0.setTorrentLink((String) null);
      webResult0.basePageURL = null;
      webResult0.getDownloadLink();
  }
}
