/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.peermanager.piecepicker.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.peermanager.piecepicker.util.BitFlags;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BitFlagsEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BitFlags bitFlags0 = new BitFlags(43);
      assertNotNull(bitFlags0);
      
      BitFlags bitFlags1 = (BitFlags)bitFlags0.clone();
      assertEquals(0, bitFlags0.end);
      assertTrue(bitFlags1.equals(bitFlags0));
      assertEquals(0, bitFlags0.nbSet);
      assertEquals(43, bitFlags1.size());
      assertNotNull(bitFlags1);
      assertEquals(43, bitFlags1.start);
  }

  @Test
  public void test1()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      BitFlags bitFlags0 = new BitFlags(booleanArray0);
      assertNotNull(bitFlags0);
      
      bitFlags0.setStart(1);
      assertEquals(1, bitFlags0.nbSet);
      assertEquals(1, bitFlags0.start);
  }

  @Test
  public void test2()  throws Throwable  {
      BitFlags bitFlags0 = new BitFlags(591);
      assertNotNull(bitFlags0);
      
      bitFlags0.setAll();
      assertEquals(591, bitFlags0.nbSet);
      assertEquals(590, bitFlags0.end);
  }

  @Test
  public void test3()  throws Throwable  {
      BitFlags bitFlags0 = new BitFlags(822);
      assertNotNull(bitFlags0);
      
      int int0 = bitFlags0.size();
      assertEquals(0, bitFlags0.nbSet);
      assertEquals(822, int0);
      assertEquals(822, bitFlags0.start);
      assertEquals(0, bitFlags0.end);
  }

  @Test
  public void test4()  throws Throwable  {
      BitFlags bitFlags0 = new BitFlags(43);
      assertNotNull(bitFlags0);
      
      bitFlags0.clear();
      assertEquals(43, bitFlags0.start);
      assertEquals(0, bitFlags0.nbSet);
      assertEquals(0, bitFlags0.end);
      assertEquals(43, bitFlags0.size());
  }

  @Test
  public void test5()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[26];
      BitFlags bitFlags0 = new BitFlags(booleanArray0);
      assertNotNull(bitFlags0);
      
      int int0 = bitFlags0.hashCode();
      assertEquals(26, int0);
  }

  @Test
  public void test6()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      BitFlags bitFlags0 = new BitFlags(booleanArray0);
      assertNotNull(bitFlags0);
      
      boolean boolean0 = bitFlags0.equals((Object) null);
      assertEquals(false, boolean0);
      assertEquals(2, bitFlags0.start);
  }

  @Test
  public void test7()  throws Throwable  {
      BitFlags bitFlags0 = new BitFlags(43);
      assertNotNull(bitFlags0);
      
      boolean boolean0 = bitFlags0.equals((Object) bitFlags0);
      assertEquals(0, bitFlags0.nbSet);
      assertEquals(43, bitFlags0.start);
      assertEquals(0, bitFlags0.end);
      assertEquals(true, boolean0);
      assertEquals(43, bitFlags0.size());
  }

  @Test
  public void test8()  throws Throwable  {
      BitFlags bitFlags0 = new BitFlags(591);
      assertNotNull(bitFlags0);
      
      boolean boolean0 = bitFlags0.equals((Object) "Xz?t9$-T@H'");
      assertEquals(591, bitFlags0.size());
      assertEquals(591, bitFlags0.start);
      assertEquals(false, boolean0);
      assertEquals(0, bitFlags0.nbSet);
      assertEquals(0, bitFlags0.end);
  }

  @Test
  public void test9()  throws Throwable  {
      BitFlags bitFlags0 = new BitFlags(822);
      assertNotNull(bitFlags0);
      
      boolean[] booleanArray0 = new boolean[4];
      BitFlags bitFlags1 = new BitFlags(booleanArray0);
      assertNotNull(bitFlags1);
      
      boolean boolean0 = bitFlags0.equals((Object) bitFlags1);
      assertEquals(0, bitFlags0.end);
      assertEquals(822, bitFlags0.size());
      assertEquals(822, bitFlags0.start);
      assertEquals(0, bitFlags1.end);
      assertEquals(false, boolean0);
      assertEquals(0, bitFlags0.nbSet);
  }

  @Test
  public void test10()  throws Throwable  {
      BitFlags bitFlags0 = new BitFlags(43);
      assertNotNull(bitFlags0);
      
      BitFlags bitFlags1 = bitFlags0.and(bitFlags0);
      assertNotNull(bitFlags1);
      assertEquals(0, bitFlags1.end);
      
      bitFlags1.end = 1;
      boolean boolean0 = bitFlags1.equals((Object) bitFlags0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      BitFlags bitFlags0 = new BitFlags(booleanArray0);
      assertNotNull(bitFlags0);
      
      BitFlags bitFlags1 = bitFlags0.and(bitFlags0);
      assertNotNull(bitFlags1);
      
      boolean boolean0 = bitFlags0.equals((Object) bitFlags1);
      assertEquals(1, bitFlags0.nbSet);
      assertEquals(0, bitFlags0.end);
      assertEquals(2, bitFlags1.nbSet);
      assertEquals(2, bitFlags1.size());
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      BitFlags bitFlags0 = new BitFlags(822);
      assertNotNull(bitFlags0);
      
      BitFlags bitFlags1 = new BitFlags(0);
      assertEquals(0, bitFlags1.start);
      
      bitFlags1.start = 822;
      boolean boolean0 = bitFlags0.equals((Object) bitFlags1);
      assertEquals(822, bitFlags0.size());
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      BitFlags bitFlags0 = new BitFlags(43);
      assertNotNull(bitFlags0);
      
      boolean[] booleanArray0 = new boolean[2];
      BitFlags bitFlags1 = new BitFlags(booleanArray0);
      assertNotNull(bitFlags1);
      
      BitFlags bitFlags2 = new BitFlags(booleanArray0);
      bitFlags1.setOnly(0);
      assertEquals(0, bitFlags1.start);
      
      BitFlags bitFlags3 = bitFlags2.and(bitFlags0);
      bitFlags2.equals((Object) bitFlags3);
      assertEquals(0, bitFlags3.end);
  }

  @Test
  public void test14()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      BitFlags bitFlags0 = new BitFlags(booleanArray0);
      assertNotNull(bitFlags0);
      
      bitFlags0.set(0);
      assertEquals(0, bitFlags0.end);
      assertEquals(1, bitFlags0.nbSet);
      assertEquals(0, bitFlags0.start);
  }

  @Test
  public void test15()  throws Throwable  {
      BitFlags bitFlags0 = new BitFlags(591);
      assertNotNull(bitFlags0);
      
      bitFlags0.set(0);
      assertEquals(1, bitFlags0.nbSet);
      assertEquals(591, bitFlags0.size());
  }

  @Test
  public void test16()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[36];
      booleanArray0[0] = true;
      BitFlags bitFlags0 = new BitFlags(booleanArray0);
      assertNotNull(bitFlags0);
      
      BitFlags bitFlags1 = new BitFlags(1);
      assertNotNull(bitFlags1);
      
      BitFlags bitFlags2 = bitFlags0.and(bitFlags1);
      assertNotNull(bitFlags2);
      assertEquals(0, bitFlags0.start);
      assertEquals(0, bitFlags2.end);
      assertEquals(0, bitFlags0.end);
      assertEquals(36, bitFlags2.start);
      assertEquals(1, bitFlags0.nbSet);
      assertEquals(36, bitFlags2.size());
  }

  @Test
  public void test17()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      BitFlags bitFlags0 = new BitFlags(booleanArray0);
      assertNotNull(bitFlags0);
      
      BitFlags bitFlags1 = new BitFlags(bitFlags0);
      bitFlags0.setOnly(1);
      assertEquals(1, bitFlags0.start);
      
      BitFlags bitFlags2 = bitFlags0.and(bitFlags1);
      assertEquals(2, bitFlags2.end);
  }

  @Test
  public void test18()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      BitFlags bitFlags0 = new BitFlags(booleanArray0);
      assertNotNull(bitFlags0);
      
      BitFlags bitFlags1 = new BitFlags(bitFlags0);
      bitFlags0.setEnd(0);
      bitFlags0.and(bitFlags1);
      assertEquals(2, bitFlags0.nbSet);
      assertEquals(1, bitFlags1.nbSet);
  }

  @Test
  public void test19()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[26];
      booleanArray0[0] = true;
      BitFlags bitFlags0 = new BitFlags(booleanArray0);
      assertNotNull(bitFlags0);
      
      booleanArray0[0] = false;
      BitFlags bitFlags1 = bitFlags0.and(bitFlags0);
      assertEquals(0, bitFlags1.nbSet);
      assertNotNull(bitFlags1);
      assertEquals(1, bitFlags0.nbSet);
      assertEquals(26, bitFlags1.end);
      assertEquals(0, bitFlags0.end);
      assertEquals(0, bitFlags0.start);
      assertEquals(26, bitFlags1.size());
  }

  @Test
  public void test20()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[26];
      booleanArray0[0] = true;
      BitFlags bitFlags0 = new BitFlags(booleanArray0);
      assertNotNull(bitFlags0);
      
      bitFlags0.set(2);
      BitFlags bitFlags1 = new BitFlags(bitFlags0);
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      bitFlags0.and(bitFlags1);
      assertEquals(2, bitFlags0.nbSet);
      assertEquals(2, bitFlags1.nbSet);
  }

  @Test
  public void test21()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[26];
      booleanArray0[0] = true;
      BitFlags bitFlags0 = new BitFlags(booleanArray0);
      assertNotNull(bitFlags0);
      
      bitFlags0.set(2);
      BitFlags bitFlags1 = bitFlags0.and(bitFlags0);
      assertEquals(2, bitFlags0.end);
      assertFalse(bitFlags1.equals(bitFlags0));
  }

  @Test
  public void test22()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[26];
      booleanArray0[0] = true;
      booleanArray0[6] = true;
      BitFlags bitFlags0 = new BitFlags(booleanArray0);
      assertNotNull(bitFlags0);
      
      BitFlags bitFlags1 = new BitFlags(bitFlags0);
      assertNotNull(bitFlags1);
      assertTrue(bitFlags1.equals(bitFlags0));
      
      booleanArray0[3] = true;
      BitFlags bitFlags2 = bitFlags0.and(bitFlags1);
      assertEquals(0, bitFlags2.start);
  }
}
