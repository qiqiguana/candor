/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.speedmanager.impl.v2;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.speedmanager.impl.v2.LimitControlPreferDownload;
import com.aelitis.azureus.core.speedmanager.impl.v2.LimitControlSetting;
import com.aelitis.azureus.core.speedmanager.impl.v2.SMUpdate;
import com.aelitis.azureus.core.speedmanager.impl.v2.SaturatedMode;
import com.aelitis.azureus.core.speedmanager.impl.v2.TransferMode;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class LimitControlPreferDownloadEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LimitControlPreferDownload limitControlPreferDownload0 = new LimitControlPreferDownload();
      boolean boolean0 = limitControlPreferDownload0.isDownloadUnlimitedMode();
      assertEquals(false, boolean0);
      assertEquals(0.8F, limitControlPreferDownload0.downMidPoint, 0.01F);
      assertEquals(0.2F, limitControlPreferDownload0.upMidPoint, 0.01F);
      assertEquals(0.6F, limitControlPreferDownload0.percentUpMaxUsed, 0.01F);
  }

  @Test
  public void test1()  throws Throwable  {
      LimitControlPreferDownload limitControlPreferDownload0 = new LimitControlPreferDownload();
      limitControlPreferDownload0.updateSeedSettings((float) 0);
      assertEquals(0.6F, limitControlPreferDownload0.percentUpMaxUsed, 0.01F);
      assertEquals(false, limitControlPreferDownload0.isDownloadUnlimited);
      assertEquals(0.8F, limitControlPreferDownload0.downMidPoint, 0.01F);
      assertEquals(0.2F, limitControlPreferDownload0.upMidPoint, 0.01F);
  }

  @Test
  public void test2()  throws Throwable  {
      LimitControlPreferDownload limitControlPreferDownload0 = new LimitControlPreferDownload();
      limitControlPreferDownload0.setDownloadUnlimitedMode(false);
      assertEquals(false, limitControlPreferDownload0.isDownloadUnlimited);
      assertEquals(0.2F, limitControlPreferDownload0.upMidPoint, 0.01F);
      assertEquals(0.6F, limitControlPreferDownload0.percentUpMaxUsed, 0.01F);
      assertEquals(0.8F, limitControlPreferDownload0.downMidPoint, 0.01F);
  }

  @Test
  public void test3()  throws Throwable  {
      LimitControlPreferDownload limitControlPreferDownload0 = new LimitControlPreferDownload();
      SaturatedMode saturatedMode0 = SaturatedMode.MED;
      limitControlPreferDownload0.updateStatus(0, saturatedMode0, 0, saturatedMode0, (TransferMode) null);
      assertEquals(false, limitControlPreferDownload0.isDownloadUnlimited);
      assertEquals(0.2F, limitControlPreferDownload0.upMidPoint, 0.01F);
      assertEquals(0.8F, limitControlPreferDownload0.downMidPoint, 0.01F);
      assertEquals(0.6F, limitControlPreferDownload0.percentUpMaxUsed, 0.01F);
  }

  @Test
  public void test4()  throws Throwable  {
      LimitControlPreferDownload limitControlPreferDownload0 = new LimitControlPreferDownload();
      limitControlPreferDownload0.updateLimits(0, 0, 0, 0);
      assertEquals(0.8F, limitControlPreferDownload0.downMidPoint, 0.01F);
      assertEquals(false, limitControlPreferDownload0.isDownloadUnlimited);
      assertEquals(0.6F, limitControlPreferDownload0.percentUpMaxUsed, 0.01F);
      assertEquals(0.2F, limitControlPreferDownload0.upMidPoint, 0.01F);
  }

  @Test
  public void test5()  throws Throwable  {
      LimitControlPreferDownload limitControlPreferDownload0 = new LimitControlPreferDownload();
      TransferMode transferMode0 = new TransferMode();
      limitControlPreferDownload0.mode = (com.aelitis.azureus.core.speedmanager.impl.v2.TransferMode) transferMode0;
      LimitControlSetting limitControlSetting0 = new LimitControlSetting(0.8F);
      limitControlPreferDownload0.setting = (com.aelitis.azureus.core.speedmanager.impl.v2.LimitControlSetting) limitControlSetting0;
      SMUpdate sMUpdate0 = limitControlPreferDownload0.adjust((-455.4339F));
      assertEquals(false, limitControlPreferDownload0.isDownloadUnlimited);
      assertEquals(0.2F, limitControlPreferDownload0.upMidPoint, 0.01F);
      assertNotNull(sMUpdate0);
      assertEquals(0, sMUpdate0.newDownloadLimit);
      assertEquals(0, sMUpdate0.newUploadLimit);
      assertEquals(0.8F, limitControlPreferDownload0.downMidPoint, 0.01F);
      assertEquals(0.6F, limitControlPreferDownload0.percentUpMaxUsed, 0.01F);
      assertEquals(true, sMUpdate0.hasNewDownloadLimit);
      assertEquals(true, sMUpdate0.hasNewUploadLimit);
  }

  @Test
  public void test6()  throws Throwable  {
      LimitControlPreferDownload limitControlPreferDownload0 = new LimitControlPreferDownload();
      TransferMode transferMode0 = new TransferMode();
      limitControlPreferDownload0.mode = (com.aelitis.azureus.core.speedmanager.impl.v2.TransferMode) transferMode0;
      LimitControlSetting limitControlSetting0 = new LimitControlSetting(0.8F);
      limitControlPreferDownload0.setting = (com.aelitis.azureus.core.speedmanager.impl.v2.LimitControlSetting) limitControlSetting0;
      SMUpdate sMUpdate0 = limitControlPreferDownload0.adjust(1003.28156F);
      assertEquals(0, sMUpdate0.newUploadLimit);
      assertEquals(0, sMUpdate0.newDownloadLimit);
      assertNotNull(sMUpdate0);
      assertEquals(0.2F, limitControlPreferDownload0.upMidPoint, 0.01F);
      assertEquals(true, sMUpdate0.hasNewDownloadLimit);
      assertEquals(0.6F, limitControlPreferDownload0.percentUpMaxUsed, 0.01F);
      assertEquals(true, sMUpdate0.hasNewUploadLimit);
      assertEquals(0.8F, limitControlPreferDownload0.downMidPoint, 0.01F);
      assertEquals(false, limitControlPreferDownload0.isDownloadUnlimited);
  }
}
