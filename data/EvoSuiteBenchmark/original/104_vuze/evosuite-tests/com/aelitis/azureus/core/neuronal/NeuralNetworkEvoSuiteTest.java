/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.neuronal;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.neuronal.ActivationFunction;
import com.aelitis.azureus.core.neuronal.LogisticActivationFunction;
import com.aelitis.azureus.core.neuronal.NeuralNetwork;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class NeuralNetworkEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      NeuralNetwork neuralNetwork0 = new NeuralNetwork(0, 0, 0);
      assertNotNull(neuralNetwork0);
      
      neuralNetwork0.setMomentum(true, (double) 0);
      assertEquals("Input Layer :\n\n\nHidden Layer :\n\n\n", neuralNetwork0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      NeuralNetwork neuralNetwork0 = new NeuralNetwork(0, 0, 0);
      assertNotNull(neuralNetwork0);
      
      String string0 = neuralNetwork0.toString();
      assertEquals("Input Layer :\n\n\nHidden Layer :\n\n\n", string0);
      assertNotNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      NeuralNetwork neuralNetwork0 = new NeuralNetwork(0, 0, 0);
      assertNotNull(neuralNetwork0);
      
      neuralNetwork0.setLearningRate((double) 0);
      assertEquals("Input Layer :\n\n\nHidden Layer :\n\n\n", neuralNetwork0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      NeuralNetwork neuralNetwork0 = new NeuralNetwork(0, 0, 0);
      assertNotNull(neuralNetwork0);
      
      neuralNetwork0.backPropagate();
      assertEquals("Input Layer :\n\n\nHidden Layer :\n\n\n", neuralNetwork0.toString());
      assertEquals(Double.NaN, neuralNetwork0.calculateError(), 0.01D);
  }

  @Test
  public void test4()  throws Throwable  {
      NeuralNetwork neuralNetwork0 = new NeuralNetwork(0, 0, 0);
      assertNotNull(neuralNetwork0);
      
      neuralNetwork0.feedForward();
      assertEquals("Input Layer :\n\n\nHidden Layer :\n\n\n", neuralNetwork0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      NeuralNetwork neuralNetwork0 = new NeuralNetwork(0, 0, 0);
      assertNotNull(neuralNetwork0);
      
      LogisticActivationFunction logisticActivationFunction0 = new LogisticActivationFunction();
      neuralNetwork0.setActivationFunction((ActivationFunction) logisticActivationFunction0);
      assertEquals("Input Layer :\n\n\nHidden Layer :\n\n\n", neuralNetwork0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      NeuralNetwork neuralNetwork0 = new NeuralNetwork(10, 10, 0);
      assertNotNull(neuralNetwork0);
      
      neuralNetwork0.setInput((-1), 10);
      assertEquals("Input Layer :\n0\t> 0:-0.22743483317124147\t1:0.6020086069951611\t2:0.4373620852730642\t3:0.07397432973446882\t4:0.5333137185162595\t5:0.6613587667886915\t6:0.03318481636424031\t7:-0.5086466538409964\t8:0.38610543758021\t9:0.8874008210424578\t\n1\t> 0:-0.7025982361460243\t1:-0.9060464163737312\t2:0.398512414664594\t3:-0.9822071544293991\t4:-0.5663638943318914\t5:0.49409955339543665\t6:-0.4452855637965767\t7:-0.8582899680030556\t8:-0.6394117060378566\t9:-0.7896983632712145\t\n2\t> 0:0.2613323084037562\t1:0.22150434346608572\t2:0.2831035900060277\t3:0.8388031171161303\t4:-0.18422729338301158\t5:-0.6219481501538264\t6:-0.7338350538991976\t7:-0.8872995407976183\t8:-0.944229956426504\t9:-0.2778215268099613\t\n3\t> 0:-0.8769676657747132\t1:0.6970414981248754\t2:-0.10100738506488405\t3:-0.055075470357637935\t4:-0.3283386495795668\t5:0.02934223365724775\t6:-0.7392831179711727\t7:0.4632192581091379\t8:-0.5623079370443698\t9:0.2539805796689083\t\n4\t> 0:0.36322314150516766\t1:-0.9252037268663906\t2:-0.07767364040322211\t3:-0.2988649863543076\t4:-0.36389734066919943\t5:0.10985809636303845\t6:-0.4393515614011261\t7:0.41938141867250933\t8:0.9098386916758345\t9:-0.7563851436285114\t\n5\t> 0:-0.26491822185041514\t1:0.24910884436546743\t2:-0.416998436373907\t3:0.9999342849881983\t4:-0.21657136025011448\t5:0.21764171639389063\t6:0.20370205952093245\t7:-0.2915815728059319\t8:-3.75339345621839E-5\t9:-0.733660141909918\t\n6\t> 0:0.5481419193381911\t1:0.06505063094606278\t2:0.32119633182321095\t3:-0.5508706475283192\t4:-0.0034229968732772953\t5:0.7177079615298063\t6:-0.6289418688366228\t7:0.7272366681524489\t8:0.8001140135019391\t9:-0.8535894125402601\t\n7\t> 0:-0.9118408738237809\t1:-0.442082663380303\t2:-0.4231306433347781\t3:-0.25138239146601205\t4:-0.6345739329986433\t5:-0.8294977816665288\t6:-0.6885176719658903\t7:0.7941841034507335\t8:0.9547736438453784\t9:0.6562145322402952\t\n8\t> 0:-0.5257507773001129\t1:0.3977411874588648\t2:-0.8764740762952117\t3:0.6019448807071524\t4:-0.1542624988861343\t5:0.9225381893583329\t6:0.4428481137942146\t7:0.1975364741468688\t8:0.8066034063617864\t9:-0.4819244875607416\t\n9\t> 0:0.09004523888900673\t1:0.9983668263518279\t2:0.9582545681870702\t3:-0.5636680732188655\t4:0.36602093853869055\t5:-0.11879728466923467\t6:-0.06993576286610304\t7:-0.17906073633828234\t8:0.21848104090542741\t9:-0.31937473838003627\t\n\n\nHidden Layer :\n\n\n", neuralNetwork0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      NeuralNetwork neuralNetwork0 = new NeuralNetwork(0, 0, 0);
      assertNotNull(neuralNetwork0);
      
      neuralNetwork0.setInput(0, 1278.8382270403915);
      assertEquals("Input Layer :\n\n\nHidden Layer :\n\n\n", neuralNetwork0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      NeuralNetwork neuralNetwork0 = new NeuralNetwork(1170, 0, 1170);
      assertNotNull(neuralNetwork0);
      
      neuralNetwork0.setInput(0, 0.0);
      assertEquals("Input Layer :\n\n\nHidden Layer :\n0\t> \n1\t> \n2\t> \n3\t> \n4\t> \n5\t> \n6\t> \n7\t> \n8\t> \n9\t> \n10\t> \n11\t> \n12\t> \n13\t> \n14\t> \n15\t> \n16\t> \n17\t> \n18\t> \n19\t> \n20\t> \n21\t> \n22\t> \n23\t> \n24\t> \n25\t> \n26\t> \n27\t> \n28\t> \n29\t> \n30\t> \n31\t> \n32\t> \n33\t> \n34\t> \n35\t> \n36\t> \n37\t> \n38\t> \n39\t> \n40\t> \n41\t> \n42\t> \n43\t> \n44\t> \n45\t> \n46\t> \n47\t> \n48\t> \n49\t> \n50\t> \n51\t> \n52\t> \n53\t> \n54\t> \n55\t> \n56\t> \n57\t> \n58\t> \n59\t> \n60\t> \n61\t> \n62\t> \n63\t> \n64\t> \n65\t> \n66\t> \n67\t> \n68\t> \n69\t> \n70\t> \n71\t> \n72\t> \n73\t> \n74\t> \n75\t> \n76\t> \n77\t> \n78\t> \n79\t> \n80\t> \n81\t> \n82\t> \n83\t> \n84\t> \n85\t> \n86\t> \n87\t> \n88\t> \n89\t> \n90\t> \n91\t> \n92\t> \n93\t> \n94\t> \n95\t> \n96\t> \n97\t> \n98\t> \n99\t> \n100\t> \n101\t> \n102\t> \n103\t> \n104\t> \n105\t> \n106\t> \n107\t> \n108\t> \n109\t> \n110\t> \n111\t> \n112\t> \n113\t> \n114\t> \n115\t> \n116\t> \n117\t> \n118\t> \n119\t> \n120\t> \n121\t> \n122\t> \n123\t> \n124\t> \n125\t> \n126\t> \n127\t> \n128\t> \n129\t> \n130\t> \n131\t> \n132\t> \n133\t> \n134\t> \n135\t> \n136\t> \n137\t> \n138\t> \n139\t> \n140\t> \n141\t> \n142\t> \n143\t> \n144\t> \n145\t> \n146\t> \n147\t> \n148\t> \n149\t> \n150\t> \n151\t> \n152\t> \n153\t> \n154\t> \n155\t> \n156\t> \n157\t> \n158\t> \n159\t> \n160\t> \n161\t> \n162\t> \n163\t> \n164\t> \n165\t> \n166\t> \n167\t> \n168\t> \n169\t> \n170\t> \n171\t> \n172\t> \n173\t> \n174\t> \n175\t> \n176\t> \n177\t> \n178\t> \n179\t> \n180\t> \n181\t> \n182\t> \n183\t> \n184\t> \n185\t> \n186\t> \n187\t> \n188\t> \n189\t> \n190\t> \n191\t> \n192\t> \n193\t> \n194\t> \n195\t> \n196\t> \n197\t> \n198\t> \n199\t> \n200\t> \n201\t> \n202\t> \n203\t> \n204\t> \n205\t> \n206\t> \n207\t> \n208\t> \n209\t> \n210\t> \n211\t> \n212\t> \n213\t> \n214\t> \n215\t> \n216\t> \n217\t> \n218\t> \n219\t> \n220\t> \n221\t> \n222\t> \n223\t> \n224\t> \n225\t> \n226\t> \n227\t> \n228\t> \n229\t> \n230\t> \n231\t> \n232\t> \n233\t> \n234\t> \n235\t> \n236\t> \n237\t> \n238\t> \n239\t> \n240\t> \n241\t> \n242\t> \n243\t> \n244\t> \n245\t> \n246\t> \n247\t> \n248\t> \n249\t> \n250\t> \n251\t> \n252\t> \n253\t> \n254\t> \n255\t> \n256\t> \n257\t> \n258\t> \n259\t> \n260\t> \n261\t> \n262\t> \n263\t> \n264\t> \n265\t> \n266\t> \n267\t> \n268\t> \n269\t> \n270\t> \n271\t> \n272\t> \n273\t> \n274\t> \n275\t> \n276\t> \n277\t> \n278\t> \n279\t> \n280\t> \n281\t> \n282\t> \n283\t> \n284\t> \n285\t> \n286\t> \n287\t> \n288\t> \n289\t> \n290\t> \n291\t> \n292\t> \n293\t> \n294\t> \n295\t> \n296\t> \n297\t> \n298\t> \n299\t> \n300\t> \n301\t> \n302\t> \n303\t> \n304\t> \n305\t> \n306\t> \n307\t> \n308\t> \n309\t> \n310\t> \n311\t> \n312\t> \n313\t> \n314\t> \n315\t> \n316\t> \n317\t> \n318\t> \n319\t> \n320\t> \n321\t> \n322\t> \n323\t> \n324\t> \n325\t> \n326\t> \n327\t> \n328\t> \n329\t> \n330\t> \n331\t> \n332\t> \n333\t> \n334\t> \n335\t> \n336\t> \n337\t> \n338\t> \n339\t> \n340\t> \n341\t> \n342\t> \n343\t> \n344\t> \n345\t> \n346\t> \n347\t> \n348\t> \n349\t> \n350\t> \n351\t> \n352\t> \n353\t> \n354\t> \n355\t> \n356\t> \n357\t> \n358\t> \n359\t> \n360\t> \n361\t> \n362\t> \n363\t> \n364\t> \n365\t> \n366\t> \n367\t> \n368\t> \n369\t> \n370\t> \n371\t> \n372\t> \n373\t> \n374\t> \n375\t> \n376\t> \n377\t> \n378\t> \n379\t> \n380\t> \n381\t> \n382\t> \n383\t> \n384\t> \n385\t> \n386\t> \n387\t> \n388\t> \n389\t> \n390\t> \n391\t> \n392\t> \n393\t> \n394\t> \n395\t> \n396\t> \n397\t> \n398\t> \n399\t> \n400\t> \n401\t> \n402\t> \n403\t> \n404\t> \n405\t> \n406\t> \n407\t> \n408\t> \n409\t> \n410\t> \n411\t> \n412\t> \n413\t> \n414\t> \n415\t> \n416\t> \n417\t> \n418\t> \n419\t> \n420\t> \n421\t> \n422\t> \n423\t> \n424\t> \n425\t> \n426\t> \n427\t> \n428\t> \n429\t> \n430\t> \n431\t> \n432\t> \n433\t> \n434\t> \n435\t> \n436\t> \n437\t> \n438\t> \n439\t> \n440\t> \n441\t> \n442\t> \n443\t> \n444\t> \n445\t> \n446\t> \n447\t> \n448\t> \n449\t> \n450\t> \n451\t> \n452\t> \n453\t> \n454\t> \n455\t> \n456\t> \n457\t> \n458\t> \n459\t> \n460\t> \n461\t> \n462\t> \n463\t> \n464\t> \n465\t> \n466\t> \n467\t> \n468\t> \n469\t> \n470\t> \n471\t> \n472\t> \n473\t> \n474\t> \n475\t> \n476\t> \n477\t> \n478\t> \n479\t> \n480\t> \n481\t> \n482\t> \n483\t> \n484\t> \n485\t> \n486\t> \n487\t> \n488\t> \n489\t> \n490\t> \n491\t> \n492\t> \n493\t> \n494\t> \n495\t> \n496\t> \n497\t> \n498\t> \n499\t> \n500\t> \n501\t> \n502\t> \n503\t> \n504\t> \n505\t> \n506\t> \n507\t> \n508\t> \n509\t> \n510\t> \n511\t> \n512\t> \n513\t> \n514\t> \n515\t> \n516\t> \n517\t> \n518\t> \n519\t> \n520\t> \n521\t> \n522\t> \n523\t> \n524\t> \n525\t> \n526\t> \n527\t> \n528\t> \n529\t> \n530\t> \n531\t> \n532\t> \n533\t> \n534\t> \n535\t> \n536\t> \n537\t> \n538\t> \n539\t> \n540\t> \n541\t> \n542\t> \n543\t> \n544\t> \n545\t> \n546\t> \n547\t> \n548\t> \n549\t> \n550\t> \n551\t> \n552\t> \n553\t> \n554\t> \n555\t> \n556\t> \n557\t> \n558\t> \n559\t> \n560\t> \n561\t> \n562\t> \n563\t> \n564\t> \n565\t> \n566\t> \n567\t> \n568\t> \n569\t> \n570\t> \n571\t> \n572\t> \n573\t> \n574\t> \n575\t> \n576\t> \n577\t> \n578\t> \n579\t> \n580\t> \n581\t> \n582\t> \n583\t> \n584\t> \n585\t> \n586\t> \n587\t> \n588\t> \n589\t> \n590\t> \n591\t> \n592\t> \n593\t> \n594\t> \n595\t> \n596\t> \n597\t> \n598\t> \n599\t> \n600\t> \n601\t> \n602\t> \n603\t> \n604\t> \n605\t> \n606\t> \n607\t> \n608\t> \n609\t> \n610\t> \n611\t> \n612\t> \n613\t> \n614\t> \n615\t> \n616\t> \n617\t> \n618\t> \n619\t> \n620\t> \n621\t> \n622\t> \n623\t> \n624\t> \n625\t> \n626\t> \n627\t> \n628\t> \n629\t> \n630\t> \n631\t> \n632\t> \n633\t> \n634\t> \n635\t> \n636\t> \n637\t> \n638\t> \n639\t> \n640\t> \n641\t> \n642\t> \n643\t> \n644\t> \n645\t> \n646\t> \n647\t> \n648\t> \n649\t> \n650\t> \n651\t> \n652\t> \n653\t> \n654\t> \n655\t> \n656\t> \n657\t> \n658\t> \n659\t> \n660\t> \n661\t> \n662\t> \n663\t> \n664\t> \n665\t> \n666\t> \n667\t> \n668\t> \n669\t> \n670\t> \n671\t> \n672\t> \n673\t> \n674\t> \n675\t> \n676\t> \n677\t> \n678\t> \n679\t> \n680\t> \n681\t> \n682\t> \n683\t> \n684\t> \n685\t> \n686\t> \n687\t> \n688\t> \n689\t> \n690\t> \n691\t> \n692\t> \n693\t> \n694\t> \n695\t> \n696\t> \n697\t> \n698\t> \n699\t> \n700\t> \n701\t> \n702\t> \n703\t> \n704\t> \n705\t> \n706\t> \n707\t> \n708\t> \n709\t> \n710\t> \n711\t> \n712\t> \n713\t> \n714\t> \n715\t> \n716\t> \n717\t> \n718\t> \n719\t> \n720\t> \n721\t> \n722\t> \n723\t> \n724\t> \n725\t> \n726\t> \n727\t> \n728\t> \n729\t> \n730\t> \n731\t> \n732\t> \n733\t> \n734\t> \n735\t> \n736\t> \n737\t> \n738\t> \n739\t> \n740\t> \n741\t> \n742\t> \n743\t> \n744\t> \n745\t> \n746\t> \n747\t> \n748\t> \n749\t> \n750\t> \n751\t> \n752\t> \n753\t> \n754\t> \n755\t> \n756\t> \n757\t> \n758\t> \n759\t> \n760\t> \n761\t> \n762\t> \n763\t> \n764\t> \n765\t> \n766\t> \n767\t> \n768\t> \n769\t> \n770\t> \n771\t> \n772\t> \n773\t> \n774\t> \n775\t> \n776\t> \n777\t> \n778\t> \n779\t> \n780\t> \n781\t> \n782\t> \n783\t> \n784\t> \n785\t> \n786\t> \n787\t> \n788\t> \n789\t> \n790\t> \n791\t> \n792\t> \n793\t> \n794\t> \n795\t> \n796\t> \n797\t> \n798\t> \n799\t> \n800\t> \n801\t> \n802\t> \n803\t> \n804\t> \n805\t> \n806\t> \n807\t> \n808\t> \n809\t> \n810\t> \n811\t> \n812\t> \n813\t> \n814\t> \n815\t> \n816\t> \n817\t> \n818\t> \n819\t> \n820\t> \n821\t> \n822\t> \n823\t> \n824\t> \n825\t> \n826\t> \n827\t> \n828\t> \n829\t> \n830\t> \n831\t> \n832\t> \n833\t> \n834\t> \n835\t> \n836\t> \n837\t> \n838\t> \n839\t> \n840\t> \n841\t> \n842\t> \n843\t> \n844\t> \n845\t> \n846\t> \n847\t> \n848\t> \n849\t> \n850\t> \n851\t> \n852\t> \n853\t> \n854\t> \n855\t> \n856\t> \n857\t> \n858\t> \n859\t> \n860\t> \n861\t> \n862\t> \n863\t> \n864\t> \n865\t> \n866\t> \n867\t> \n868\t> \n869\t> \n870\t> \n871\t> \n872\t> \n873\t> \n874\t> \n875\t> \n876\t> \n877\t> \n878\t> \n879\t> \n880\t> \n881\t> \n882\t> \n883\t> \n884\t> \n885\t> \n886\t> \n887\t> \n888\t> \n889\t> \n890\t> \n891\t> \n892\t> \n893\t> \n894\t> \n895\t> \n896\t> \n897\t> \n898\t> \n899\t> \n900\t> \n901\t> \n902\t> \n903\t> \n904\t> \n905\t> \n906\t> \n907\t> \n908\t> \n909\t> \n910\t> \n911\t> \n912\t> \n913\t> \n914\t> \n915\t> \n916\t> \n917\t> \n918\t> \n919\t> \n920\t> \n921\t> \n922\t> \n923\t> \n924\t> \n925\t> \n926\t> \n927\t> \n928\t> \n929\t> \n930\t> \n931\t> \n932\t> \n933\t> \n934\t> \n935\t> \n936\t> \n937\t> \n938\t> \n939\t> \n940\t> \n941\t> \n942\t> \n943\t> \n944\t> \n945\t> \n946\t> \n947\t> \n948\t> \n949\t> \n950\t> \n951\t> \n952\t> \n953\t> \n954\t> \n955\t> \n956\t> \n957\t> \n958\t> \n959\t> \n960\t> \n961\t> \n962\t> \n963\t> \n964\t> \n965\t> \n966\t> \n967\t> \n968\t> \n969\t> \n970\t> \n971\t> \n972\t> \n973\t> \n974\t> \n975\t> \n976\t> \n977\t> \n978\t> \n979\t> \n980\t> \n981\t> \n982\t> \n983\t> \n984\t> \n985\t> \n986\t> \n987\t> \n988\t> \n989\t> \n990\t> \n991\t> \n992\t> \n993\t> \n994\t> \n995\t> \n996\t> \n997\t> \n998\t> \n999\t> \n1000\t> \n1001\t> \n1002\t> \n1003\t> \n1004\t> \n1005\t> \n1006\t> \n1007\t> \n1008\t> \n1009\t> \n1010\t> \n1011\t> \n1012\t> \n1013\t> \n1014\t> \n1015\t> \n1016\t> \n1017\t> \n1018\t> \n1019\t> \n1020\t> \n1021\t> \n1022\t> \n1023\t> \n1024\t> \n1025\t> \n1026\t> \n1027\t> \n1028\t> \n1029\t> \n1030\t> \n1031\t> \n1032\t> \n1033\t> \n1034\t> \n1035\t> \n1036\t> \n1037\t> \n1038\t> \n1039\t> \n1040\t> \n1041\t> \n1042\t> \n1043\t> \n1044\t> \n1045\t> \n1046\t> \n1047\t> \n1048\t> \n1049\t> \n1050\t> \n1051\t> \n1052\t> \n1053\t> \n1054\t> \n1055\t> \n1056\t> \n1057\t> \n1058\t> \n1059\t> \n1060\t> \n1061\t> \n1062\t> \n1063\t> \n1064\t> \n1065\t> \n1066\t> \n1067\t> \n1068\t> \n1069\t> \n1070\t> \n1071\t> \n1072\t> \n1073\t> \n1074\t> \n1075\t> \n1076\t> \n1077\t> \n1078\t> \n1079\t> \n1080\t> \n1081\t> \n1082\t> \n1083\t> \n1084\t> \n1085\t> \n1086\t> \n1087\t> \n1088\t> \n1089\t> \n1090\t> \n1091\t> \n1092\t> \n1093\t> \n1094\t> \n1095\t> \n1096\t> \n1097\t> \n1098\t> \n1099\t> \n1100\t> \n1101\t> \n1102\t> \n1103\t> \n1104\t> \n1105\t> \n1106\t> \n1107\t> \n1108\t> \n1109\t> \n1110\t> \n1111\t> \n1112\t> \n1113\t> \n1114\t> \n1115\t> \n1116\t> \n1117\t> \n1118\t> \n1119\t> \n1120\t> \n1121\t> \n1122\t> \n1123\t> \n1124\t> \n1125\t> \n1126\t> \n1127\t> \n1128\t> \n1129\t> \n1130\t> \n1131\t> \n1132\t> \n1133\t> \n1134\t> \n1135\t> \n1136\t> \n1137\t> \n1138\t> \n1139\t> \n1140\t> \n1141\t> \n1142\t> \n1143\t> \n1144\t> \n1145\t> \n1146\t> \n1147\t> \n1148\t> \n1149\t> \n1150\t> \n1151\t> \n1152\t> \n1153\t> \n1154\t> \n1155\t> \n1156\t> \n1157\t> \n1158\t> \n1159\t> \n1160\t> \n1161\t> \n1162\t> \n1163\t> \n1164\t> \n1165\t> \n1166\t> \n1167\t> \n1168\t> \n1169\t> \n\n\n", neuralNetwork0.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      NeuralNetwork neuralNetwork0 = new NeuralNetwork(0, 0, 475);
      assertNotNull(neuralNetwork0);
      
      double double0 = neuralNetwork0.getOutput((-1863));
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals("Input Layer :\n\n\nHidden Layer :\n0\t> \n1\t> \n2\t> \n3\t> \n4\t> \n5\t> \n6\t> \n7\t> \n8\t> \n9\t> \n10\t> \n11\t> \n12\t> \n13\t> \n14\t> \n15\t> \n16\t> \n17\t> \n18\t> \n19\t> \n20\t> \n21\t> \n22\t> \n23\t> \n24\t> \n25\t> \n26\t> \n27\t> \n28\t> \n29\t> \n30\t> \n31\t> \n32\t> \n33\t> \n34\t> \n35\t> \n36\t> \n37\t> \n38\t> \n39\t> \n40\t> \n41\t> \n42\t> \n43\t> \n44\t> \n45\t> \n46\t> \n47\t> \n48\t> \n49\t> \n50\t> \n51\t> \n52\t> \n53\t> \n54\t> \n55\t> \n56\t> \n57\t> \n58\t> \n59\t> \n60\t> \n61\t> \n62\t> \n63\t> \n64\t> \n65\t> \n66\t> \n67\t> \n68\t> \n69\t> \n70\t> \n71\t> \n72\t> \n73\t> \n74\t> \n75\t> \n76\t> \n77\t> \n78\t> \n79\t> \n80\t> \n81\t> \n82\t> \n83\t> \n84\t> \n85\t> \n86\t> \n87\t> \n88\t> \n89\t> \n90\t> \n91\t> \n92\t> \n93\t> \n94\t> \n95\t> \n96\t> \n97\t> \n98\t> \n99\t> \n100\t> \n101\t> \n102\t> \n103\t> \n104\t> \n105\t> \n106\t> \n107\t> \n108\t> \n109\t> \n110\t> \n111\t> \n112\t> \n113\t> \n114\t> \n115\t> \n116\t> \n117\t> \n118\t> \n119\t> \n120\t> \n121\t> \n122\t> \n123\t> \n124\t> \n125\t> \n126\t> \n127\t> \n128\t> \n129\t> \n130\t> \n131\t> \n132\t> \n133\t> \n134\t> \n135\t> \n136\t> \n137\t> \n138\t> \n139\t> \n140\t> \n141\t> \n142\t> \n143\t> \n144\t> \n145\t> \n146\t> \n147\t> \n148\t> \n149\t> \n150\t> \n151\t> \n152\t> \n153\t> \n154\t> \n155\t> \n156\t> \n157\t> \n158\t> \n159\t> \n160\t> \n161\t> \n162\t> \n163\t> \n164\t> \n165\t> \n166\t> \n167\t> \n168\t> \n169\t> \n170\t> \n171\t> \n172\t> \n173\t> \n174\t> \n175\t> \n176\t> \n177\t> \n178\t> \n179\t> \n180\t> \n181\t> \n182\t> \n183\t> \n184\t> \n185\t> \n186\t> \n187\t> \n188\t> \n189\t> \n190\t> \n191\t> \n192\t> \n193\t> \n194\t> \n195\t> \n196\t> \n197\t> \n198\t> \n199\t> \n200\t> \n201\t> \n202\t> \n203\t> \n204\t> \n205\t> \n206\t> \n207\t> \n208\t> \n209\t> \n210\t> \n211\t> \n212\t> \n213\t> \n214\t> \n215\t> \n216\t> \n217\t> \n218\t> \n219\t> \n220\t> \n221\t> \n222\t> \n223\t> \n224\t> \n225\t> \n226\t> \n227\t> \n228\t> \n229\t> \n230\t> \n231\t> \n232\t> \n233\t> \n234\t> \n235\t> \n236\t> \n237\t> \n238\t> \n239\t> \n240\t> \n241\t> \n242\t> \n243\t> \n244\t> \n245\t> \n246\t> \n247\t> \n248\t> \n249\t> \n250\t> \n251\t> \n252\t> \n253\t> \n254\t> \n255\t> \n256\t> \n257\t> \n258\t> \n259\t> \n260\t> \n261\t> \n262\t> \n263\t> \n264\t> \n265\t> \n266\t> \n267\t> \n268\t> \n269\t> \n270\t> \n271\t> \n272\t> \n273\t> \n274\t> \n275\t> \n276\t> \n277\t> \n278\t> \n279\t> \n280\t> \n281\t> \n282\t> \n283\t> \n284\t> \n285\t> \n286\t> \n287\t> \n288\t> \n289\t> \n290\t> \n291\t> \n292\t> \n293\t> \n294\t> \n295\t> \n296\t> \n297\t> \n298\t> \n299\t> \n300\t> \n301\t> \n302\t> \n303\t> \n304\t> \n305\t> \n306\t> \n307\t> \n308\t> \n309\t> \n310\t> \n311\t> \n312\t> \n313\t> \n314\t> \n315\t> \n316\t> \n317\t> \n318\t> \n319\t> \n320\t> \n321\t> \n322\t> \n323\t> \n324\t> \n325\t> \n326\t> \n327\t> \n328\t> \n329\t> \n330\t> \n331\t> \n332\t> \n333\t> \n334\t> \n335\t> \n336\t> \n337\t> \n338\t> \n339\t> \n340\t> \n341\t> \n342\t> \n343\t> \n344\t> \n345\t> \n346\t> \n347\t> \n348\t> \n349\t> \n350\t> \n351\t> \n352\t> \n353\t> \n354\t> \n355\t> \n356\t> \n357\t> \n358\t> \n359\t> \n360\t> \n361\t> \n362\t> \n363\t> \n364\t> \n365\t> \n366\t> \n367\t> \n368\t> \n369\t> \n370\t> \n371\t> \n372\t> \n373\t> \n374\t> \n375\t> \n376\t> \n377\t> \n378\t> \n379\t> \n380\t> \n381\t> \n382\t> \n383\t> \n384\t> \n385\t> \n386\t> \n387\t> \n388\t> \n389\t> \n390\t> \n391\t> \n392\t> \n393\t> \n394\t> \n395\t> \n396\t> \n397\t> \n398\t> \n399\t> \n400\t> \n401\t> \n402\t> \n403\t> \n404\t> \n405\t> \n406\t> \n407\t> \n408\t> \n409\t> \n410\t> \n411\t> \n412\t> \n413\t> \n414\t> \n415\t> \n416\t> \n417\t> \n418\t> \n419\t> \n420\t> \n421\t> \n422\t> \n423\t> \n424\t> \n425\t> \n426\t> \n427\t> \n428\t> \n429\t> \n430\t> \n431\t> \n432\t> \n433\t> \n434\t> \n435\t> \n436\t> \n437\t> \n438\t> \n439\t> \n440\t> \n441\t> \n442\t> \n443\t> \n444\t> \n445\t> \n446\t> \n447\t> \n448\t> \n449\t> \n450\t> \n451\t> \n452\t> \n453\t> \n454\t> \n455\t> \n456\t> \n457\t> \n458\t> \n459\t> \n460\t> \n461\t> \n462\t> \n463\t> \n464\t> \n465\t> \n466\t> \n467\t> \n468\t> \n469\t> \n470\t> \n471\t> \n472\t> \n473\t> \n474\t> \n\n\n", neuralNetwork0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      NeuralNetwork neuralNetwork0 = new NeuralNetwork(0, 0, 0);
      assertNotNull(neuralNetwork0);
      
      double double0 = neuralNetwork0.getOutput(0);
      assertEquals("Input Layer :\n\n\nHidden Layer :\n\n\n", neuralNetwork0.toString());
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      NeuralNetwork neuralNetwork0 = new NeuralNetwork(713, 713, 713);
      neuralNetwork0.getOutput(0);
  }

  @Test
  public void test12()  throws Throwable  {
      NeuralNetwork neuralNetwork0 = new NeuralNetwork(10, 10, 0);
      assertNotNull(neuralNetwork0);
      
      neuralNetwork0.setDesiredOutput((-1306), 1809.7621551166549);
      assertEquals("Input Layer :\n0\t> 0:-0.710135030601651\t1:0.2709064140330064\t2:-0.007812954616102541\t3:0.9338123317142273\t4:0.8176874856358765\t5:0.6497785135552017\t6:0.7855085440131349\t7:0.43400441367175513\t8:-0.3532323339169485\t9:-0.2992977313395775\t\n1\t> 0:0.5735995200959154\t1:0.8503979843015694\t2:-0.9190410798024855\t3:-0.46592023350174716\t4:-0.014001921841250375\t5:-0.5797284587012712\t6:0.3208236763240342\t7:-0.5620603959263093\t8:0.48369395485486444\t9:-0.2753158156629667\t\n2\t> 0:-0.6883404856401152\t1:0.6916929891907146\t2:0.3085474830377699\t3:-0.09751556536281947\t4:0.5804901425375393\t5:-0.21057980998804382\t6:-0.4865390311985711\t7:0.32055457197636583\t8:-0.21659006366600275\t9:-0.34309690132511883\t\n3\t> 0:-0.4678463596148359\t1:0.1947392353567421\t2:0.5142674858660763\t3:0.13671187328322398\t4:0.48048618931796105\t5:-0.5718149883157708\t6:0.7612233290862942\t7:0.01819198225663432\t8:0.5643518410656996\t9:0.37481508776604566\t\n4\t> 0:-0.7736119579093323\t1:-0.44802998739542765\t2:-0.48794181202224585\t3:-0.669561130077412\t4:-0.4934786854884732\t5:0.7846355330117893\t6:-0.6137302626917553\t7:-0.11710851965758717\t8:0.19073346912724953\t9:0.9798149067943918\t\n5\t> 0:-0.44761069022587496\t1:-0.9059310037202533\t2:-0.993374259159455\t3:-0.11610106387371455\t4:0.08305341843485947\t5:0.3525896867696401\t6:-0.8681064157671108\t7:-0.056248443310247254\t8:0.7600340609363645\t9:-0.7568710560945333\t\n6\t> 0:0.8015301474501926\t1:0.750843374645189\t2:0.6244520966655827\t3:0.7798601776529481\t4:0.18028635282130523\t5:-0.7901828711629713\t6:0.5793440175214122\t7:-0.5781764681548041\t8:0.3197839748084683\t9:0.64274605444207\t\n7\t> 0:0.5324111597881034\t1:0.44633304367770665\t2:0.6561775305266897\t3:-0.552508663745201\t4:-0.2204924933368293\t5:0.30366823115405417\t6:0.2608700679225895\t7:0.8609927567811095\t8:-0.9622589402326553\t9:0.061221608652614945\t\n8\t> 0:-0.6604076932184213\t1:0.6778210609892041\t2:-0.6490537720764074\t3:-0.8633097916266808\t4:0.08883474139011471\t5:-0.2436884088778568\t6:0.6341932792995058\t7:-0.6610101278182166\t8:-0.5701669907757356\t9:0.5311152911838075\t\n9\t> 0:0.23049014695674153\t1:-0.6538982940726372\t2:0.5202988953863601\t3:-0.07627323010679632\t4:-0.4790160402527486\t5:-0.22899403401298168\t6:-0.7205803336346928\t7:-0.3367024515508472\t8:-0.35633651456753235\t9:0.4535261080967563\t\n\n\nHidden Layer :\n\n\n", neuralNetwork0.toString());
  }

  @Test
  public void test13()  throws Throwable  {
      NeuralNetwork neuralNetwork0 = new NeuralNetwork(0, 0, 0);
      assertNotNull(neuralNetwork0);
      
      neuralNetwork0.setDesiredOutput(0, 0);
      assertEquals("Input Layer :\n\n\nHidden Layer :\n\n\n", neuralNetwork0.toString());
  }

  @Test
  public void test14()  throws Throwable  {
      NeuralNetwork neuralNetwork0 = new NeuralNetwork(1153, 1153, 1153);
      neuralNetwork0.setDesiredOutput(1, 908.5891236194004);
  }

  @Test
  public void test15()  throws Throwable  {
      NeuralNetwork neuralNetwork0 = new NeuralNetwork(1153, 1153, 1153);
      neuralNetwork0.calculateError();
  }
}
