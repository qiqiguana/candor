/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.subs.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.metasearch.impl.MetaSearchImpl;
import com.aelitis.azureus.core.metasearch.impl.web.FieldMapping;
import com.aelitis.azureus.core.metasearch.impl.web.json.JSONEngine;
import com.aelitis.azureus.core.subs.Subscription;
import com.aelitis.azureus.core.subs.SubscriptionAssociationLookup;
import com.aelitis.azureus.core.subs.SubscriptionException;
import com.aelitis.azureus.core.subs.SubscriptionLookupListener;
import com.aelitis.azureus.core.subs.SubscriptionManagerListener;
import com.aelitis.azureus.core.subs.impl.SubscriptionImpl;
import com.aelitis.azureus.core.subs.impl.SubscriptionManagerImpl;
import com.aelitis.azureus.core.subs.impl.SubscriptionSchedulerImpl;
import com.aelitis.azureus.core.vuzefile.VuzeFile;
import com.aelitis.azureus.core.vuzefile.VuzeFileImpl;
import com.aelitis.azureus.plugins.magnet.MagnetPlugin;
import java.io.IOException;
import java.net.URL;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.gudy.azureus2.plugins.download.Download;
import org.gudy.azureus2.plugins.torrent.Torrent;
import org.gudy.azureus2.ui.swt.views.tableitems.mytorrents.TrackerNextAccessItem;
import org.json.simple.JSONObject;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SubscriptionManagerImplEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl(true);
      byte[] byteArray0 = new byte[4];
      SubscriptionAssociationLookup subscriptionAssociationLookup0 = subscriptionManagerImpl0.lookupAssociations(byteArray0, (SubscriptionLookupListener) null);
      assertNotNull(subscriptionAssociationLookup0);
  }

  @Test
  public void test1()  throws Throwable  {
      SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl(true);
      subscriptionManagerImpl0.configDirty();
      assertEquals(0, subscriptionManagerImpl0.getAutoStartMinMB());
  }

  @Test
  public void test2()  throws Throwable  {
      SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl(true);
      subscriptionManagerImpl0.updatePopularityFromDHT((SubscriptionImpl) null, true);
      assertEquals(512, subscriptionManagerImpl0.getMaxNonDeletedResults());
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl(true);
          // Undeclared exception!
          try {
            subscriptionManagerImpl0.addSubscription((SubscriptionImpl) null);
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
      SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl(true);
      subscriptionManagerImpl0.initialise();
      assertEquals(true, subscriptionManagerImpl0.hideSearchTemplates());
  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl(true);
          try {
            subscriptionManagerImpl0.createSingletonSubscription((Map) null, 8593, false);
            fail("Expecting exception: SubscriptionException");
          } catch(SubscriptionException e) {
            /*
             * Creation of singleton from null failed
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test6()  throws Throwable  {
      SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl(true);
      subscriptionManagerImpl0.setSearchEnabled(true);
      assertEquals(true, subscriptionManagerImpl0.isSearchEnabled());
  }

  @Test
  public void test7()  throws Throwable  {
      SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl(true);
      assertEquals(0, subscriptionManagerImpl0.getAutoStartMinMB());
      
      subscriptionManagerImpl0.setAutoStartMinMB((-1));
      assertEquals(-1, subscriptionManagerImpl0.getAutoStartMinMB());
  }

  @Test
  public void test8()  throws Throwable  {
      SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl(true);
      SubscriptionSchedulerImpl subscriptionSchedulerImpl0 = (SubscriptionSchedulerImpl)subscriptionManagerImpl0.getScheduler();
      assertNull(subscriptionSchedulerImpl0);
  }

  @Test
  public void test9()  throws Throwable  {
      SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl(true);
      boolean boolean0 = subscriptionManagerImpl0.hideSearchTemplates();
      assertEquals(true, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl(true);
      boolean boolean0 = subscriptionManagerImpl0.isRSSPublishEnabled();
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl(true);
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try {
        subscriptionManagerImpl0.updateSubscription((SubscriptionImpl) null, (int) (byte) (-77), byteArray0, (int) (byte)67);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl(true);
      byte[] byteArray0 = new byte[10];
      SubscriptionImpl subscriptionImpl0 = subscriptionManagerImpl0.getSubscriptionFromSID(byteArray0);
      assertNull(subscriptionImpl0);
  }

  @Test
  public void test13()  throws Throwable  {
      SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl(true);
      // Undeclared exception!
      try {
        subscriptionManagerImpl0.removeDownload((Download) null, true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test14()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl(true);
          byte[] byteArray0 = new byte[22];
          subscriptionManagerImpl0.downloadTorrent(byteArray0, (-1335));
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test15()  throws Throwable  {
      SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl(true);
      subscriptionManagerImpl0.removeListener((SubscriptionManagerListener) null);
      assertEquals(false, subscriptionManagerImpl0.isRSSPublishEnabled());
  }

  @Test
  public void test16()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl(true);
          // Undeclared exception!
          try {
            subscriptionManagerImpl0.loadResults((SubscriptionImpl) null);
            fail("Expecting exception: NullPointerException");
          } catch(NullPointerException e) {
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test17()  throws Throwable  {
      SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl(true);
      boolean boolean0 = subscriptionManagerImpl0.isSearchEnabled();
      assertEquals(true, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl(true);
      assertEquals(false, subscriptionManagerImpl0.isRSSPublishEnabled());
      
      subscriptionManagerImpl0.setRSSPublishEnabled(true);
      assertEquals(true, subscriptionManagerImpl0.isRSSPublishEnabled());
  }

  @Test
  public void test19()  throws Throwable  {
      SubscriptionManagerImpl subscriptionManagerImpl0 = (SubscriptionManagerImpl)SubscriptionManagerImpl.getSingleton(true);
      assertEquals(-1, subscriptionManagerImpl0.getAutoStartMinMB());
  }

  @Test
  public void test20()  throws Throwable  {
      SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl(false);
      assertEquals(0, subscriptionManagerImpl0.getAutoStartMaxMB());
  }

  @Test
  public void test21()  throws Throwable  {
      SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl(true);
      subscriptionManagerImpl0.checkMaxResults((-117));
      assertEquals(true, subscriptionManagerImpl0.getAutoStartDownloads());
  }

  @Test
  public void test22()  throws Throwable  {
      SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl(true);
      try {
        subscriptionManagerImpl0.create("lot#]@xbyxA[,bQ", true, "");
        fail("Expecting exception: SubscriptionException");
      } catch(SubscriptionException e) {
        /*
         * Failed to create subscription
         */
      }
  }

  @Test
  public void test23()  throws Throwable  {
      SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl(true);
      MagnetPlugin magnetPlugin0 = new MagnetPlugin();
      byte[] byteArray0 = new byte[3];
      URL uRL0 = magnetPlugin0.getMagnetURL(byteArray0);
      try {
        subscriptionManagerImpl0.checkURL(uRL0);
        fail("Expecting exception: SubscriptionException");
      } catch(SubscriptionException e) {
        /*
         * Invalid URL 'magnet:?xt=urn:btih:AAAAA'
         */
      }
  }

  @Test
  public void test24()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl(true);
          // Undeclared exception!
          try {
            subscriptionManagerImpl0.addMetaSearchListener();
            fail("Expecting exception: NoClassDefFoundError");
          } catch(NoClassDefFoundError e) {
            /*
             * Could not initialize class org.gudy.azureus2.pluginsimpl.local.PluginInitializer
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test25()  throws Throwable  {
      SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl(true);
      subscriptionManagerImpl0.removeSubscription((SubscriptionImpl) null);
      assertEquals(true, subscriptionManagerImpl0.hideSearchTemplates());
  }

  @Test
  public void test26()  throws Throwable  {
      SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl(true);
      subscriptionManagerImpl0.checkStuff((-1));
      assertEquals(true, subscriptionManagerImpl0.isSubsDownloadEnabled());
  }

  @Test
  public void test27()  throws Throwable  {
      SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl(true);
      JSONObject jSONObject0 = new JSONObject((-117));
      // Undeclared exception!
      try {
        subscriptionManagerImpl0.importSubscription((-1000), (Map) jSONObject0, true);
        fail("Expecting exception: NoClassDefFoundError");
      } catch(NoClassDefFoundError e) {
        /*
         * Could not initialize class org.gudy.azureus2.pluginsimpl.local.PluginInitializer
         */
      }
  }

  @Test
  public void test28()  throws Throwable  {
      SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl(true);
      Subscription[] subscriptionArray0 = subscriptionManagerImpl0.getSubscriptions(true);
      assertNotNull(subscriptionArray0);
  }

  @Test
  public void test29()  throws Throwable  {
      SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl(true);
      int int0 = subscriptionManagerImpl0.getSubscriptionCount(false);
      assertEquals(0, int0);
  }

  @Test
  public void test30()  throws Throwable  {
      SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl(true);
      int int0 = subscriptionManagerImpl0.getSubscriptionCount(true);
      assertEquals(0, int0);
  }

  @Test
  public void test31()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl(true);
          byte[] byteArray0 = new byte[8];
          try {
            subscriptionManagerImpl0.getSubscriptionFromVuzeFileContent(byteArray0, (int) (byte)15, "g>x N~-o\"");
            fail("Expecting exception: SubscriptionException");
          } catch(SubscriptionException e) {
            /*
             * Failed to load vuze file from content
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test32()  throws Throwable  {
      SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl(true);
      byte[] byteArray0 = new byte[6];
      FieldMapping[] fieldMappingArray0 = new FieldMapping[8];
      FieldMapping fieldMapping0 = new FieldMapping("E-?", (int) (byte)123);
      fieldMappingArray0[0] = fieldMapping0;
      fieldMappingArray0[1] = fieldMapping0;
      fieldMappingArray0[2] = fieldMappingArray0[1];
      fieldMappingArray0[3] = fieldMappingArray0[0];
      fieldMappingArray0[4] = fieldMappingArray0[3];
      fieldMappingArray0[5] = fieldMappingArray0[0];
      fieldMappingArray0[6] = fieldMappingArray0[3];
      fieldMappingArray0[7] = fieldMappingArray0[5];
      String[] stringArray0 = new String[4];
      stringArray0[0] = "=k>DyLTGbI|h.";
      stringArray0[1] = "E-?";
      stringArray0[2] = "=k>DyLTGbI|h.";
      stringArray0[3] = "=k>DyLTGbI|h.";
      JSONEngine jSONEngine0 = new JSONEngine((MetaSearchImpl) null, (-1543L), (long) (-1), (-1225.6095F), "=k>DyLTGbI|h.", "=k>DyLTGbI|h.", "=k>DyLTGbI|h.", true, "=k>DyLTGbI|h.", "=k>DyLTGbI|h.", fieldMappingArray0, true, "=k>DyLTGbI|h.", "%RKr?", stringArray0);
      VuzeFileImpl vuzeFileImpl0 = (VuzeFileImpl)jSONEngine0.exportToVuzeFile();
      try {
        subscriptionManagerImpl0.getSubscriptionFromVuzeFile(byteArray0, (-1), (VuzeFile) vuzeFileImpl0);
        fail("Expecting exception: SubscriptionException");
      } catch(SubscriptionException e) {
        /*
         * Subscription not found
         */
      }
  }

  @Test
  public void test33()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl(true);
          subscriptionManagerImpl0.publishSubscriptions();
          assertEquals(0, subscriptionManagerImpl0.getAutoStartMaxMB());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test34()  throws Throwable  {
      SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl(true);
      assertEquals(512, subscriptionManagerImpl0.getMaxNonDeletedResults());
      
      subscriptionManagerImpl0.setMaxNonDeletedResults(324);
      assertEquals(324, subscriptionManagerImpl0.getMaxNonDeletedResults());
  }

  @Test
  public void test35()  throws Throwable  {
      SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl(true);
      assertEquals(true, subscriptionManagerImpl0.getAutoStartDownloads());
      
      subscriptionManagerImpl0.setAutoStartDownloads(false);
      assertEquals(false, subscriptionManagerImpl0.getAutoStartDownloads());
  }

  @Test
  public void test36()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl(true);
          TrackerNextAccessItem trackerNextAccessItem0 = new TrackerNextAccessItem("7j+5ORlv\"j>}NL");
          trackerNextAccessItem0.getColumnExtraInfoListeners();
          subscriptionManagerImpl0.checkStuff(0);
          assertEquals(true, subscriptionManagerImpl0.isSubsDownloadEnabled());
          
          subscriptionManagerImpl0.setSubsDownloadEnabled(false);
          subscriptionManagerImpl0.setAutoStartMinMB((-1));
          subscriptionManagerImpl0.isVisible((SubscriptionImpl) null);
          byte[] byteArray0 = new byte[4];
          byteArray0[0] = (byte)0;
          byteArray0[1] = (byte)0;
          byteArray0[2] = (byte)0;
          byteArray0[3] = (byte)0;
          subscriptionManagerImpl0.checkPotentialAssociations(byteArray0, "7j+5ORlv\"j>}NL");
          assertEquals(false, subscriptionManagerImpl0.isSubsDownloadEnabled());
          assertEquals(-1, subscriptionManagerImpl0.getAutoStartMinMB());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test37()  throws Throwable  {
      SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl(true);
      assertEquals(0, subscriptionManagerImpl0.getAutoStartMaxMB());
      
      subscriptionManagerImpl0.setAutoStartMaxMB((-602));
      assertEquals(-602, subscriptionManagerImpl0.getAutoStartMaxMB());
  }

  @Test
  public void test38()  throws Throwable  {
      SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl(true);
      boolean boolean0 = subscriptionManagerImpl0.shouldAutoStart((Torrent) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test39()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SubscriptionManagerImpl subscriptionManagerImpl0 = new SubscriptionManagerImpl(true);
          // Undeclared exception!
          try {
            subscriptionManagerImpl0.saveConfig();
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission /home/ac1gf/.azureus/subscriptions.config delete)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkDelete(SecurityManager.java:990)
             * java.io.File.delete(File.java:902)
             * org.gudy.azureus2.core3.util.FileUtil.deleteResilientConfigFile(FileUtil.java:921)
             * com.aelitis.azureus.core.subs.impl.SubscriptionManagerImpl.saveConfig(SubscriptionManagerImpl.java:5879)
             * sun.reflect.GeneratedMethodAccessor197.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
