/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.peermanager.messaging.bittorrent.ltep;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.networkmanager.RawMessage;
import com.aelitis.azureus.core.peermanager.messaging.Message;
import com.aelitis.azureus.core.peermanager.messaging.azureus.AZGenericMapPayload;
import com.aelitis.azureus.core.peermanager.messaging.azureus.AZStatReply;
import com.aelitis.azureus.core.peermanager.messaging.bittorrent.ltep.LTHandshake;
import com.aelitis.azureus.core.peermanager.messaging.bittorrent.ltep.LTMessage;
import com.aelitis.azureus.core.peermanager.messaging.bittorrent.ltep.LTMessageEncoder;
import com.aelitis.azureus.core.peermanager.messaging.bittorrent.ltep.UTMetaData;
import java.util.HashMap;
import java.util.Map;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class LTMessageEncoderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LTMessageEncoder lTMessageEncoder0 = new LTMessageEncoder((Object) null);
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      AZGenericMapPayload aZGenericMapPayload0 = new AZGenericMapPayload("yg**hlyC@~|", (Map) hashMap0, (byte) (-110));
      RawMessage[] rawMessageArray0 = lTMessageEncoder0.encodeMessage((Message) aZGenericMapPayload0);
      assertNotNull(rawMessageArray0);
  }

  @Test
  public void test1()  throws Throwable  {
      LTMessageEncoder lTMessageEncoder0 = new LTMessageEncoder((Object) "AZ1");
      HashMap<Number, Map.Entry<LTMessage, Byte>> hashMap0 = new HashMap<Number, Map.Entry<LTMessage, Byte>>();
      LTHandshake lTHandshake0 = new LTHandshake((Map) hashMap0, (byte)87);
      RawMessage[] rawMessageArray0 = lTMessageEncoder0.encodeMessage((Message) lTHandshake0);
      assertNotNull(rawMessageArray0);
  }

  @Test
  public void test2()  throws Throwable  {
      LTMessageEncoder lTMessageEncoder0 = new LTMessageEncoder((Object) "AZ_REQUEST_HINT");
      UTMetaData uTMetaData0 = new UTMetaData((int) (byte) (-32), (byte) (-32));
      RawMessage[] rawMessageArray0 = lTMessageEncoder0.encodeMessage((Message) uTMetaData0);
      assertNotNull(rawMessageArray0);
  }

  @Test
  public void test3()  throws Throwable  {
      LTMessageEncoder lTMessageEncoder0 = new LTMessageEncoder((Object) "AZ1");
      HashMap<Number, Map.Entry<LTMessage, Byte>> hashMap0 = new HashMap<Number, Map.Entry<LTMessage, Byte>>();
      lTMessageEncoder0.updateSupportedExtensions((Map) hashMap0);
      assertEquals(true, hashMap0.isEmpty());
  }

  @Test
  public void test4()  throws Throwable  {
      LTMessageEncoder lTMessageEncoder0 = new LTMessageEncoder((Object) null);
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      Byte byte0 = new Byte((byte) (-110));
      AZGenericMapPayload aZGenericMapPayload0 = new AZGenericMapPayload("yg**hlyC@~|", (Map) hashMap0, (byte) (-110));
      Integer integer0 = new Integer((int) (byte) (-110));
      hashMap0.put(integer0, byte0);
      Map<Object, Object> map0 = aZGenericMapPayload0.getMapPayload();
      lTMessageEncoder0.updateSupportedExtensions(map0);
      assertEquals(false, lTMessageEncoder0.supportsUTPEX());
  }

  @Test
  public void test5()  throws Throwable  {
      LTMessageEncoder lTMessageEncoder0 = new LTMessageEncoder((Object) "BT_ALLOWED_FAST");
      HashMap<String, Number> hashMap0 = new HashMap<String, Number>();
      hashMap0.put("BT_ALLOWED_FAST", (Number) 46);
      AZStatReply aZStatReply0 = new AZStatReply((Map) hashMap0, (byte)1);
      Map<Object, Object> map0 = aZStatReply0.getReply();
      lTMessageEncoder0.updateSupportedExtensions(map0);
      assertEquals(1, map0.size());
  }

  @Test
  public void test6()  throws Throwable  {
      LTMessageEncoder lTMessageEncoder0 = new LTMessageEncoder((Object) "AZ1");
      boolean boolean0 = lTMessageEncoder0.supportsUTPEX();
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      LTMessageEncoder lTMessageEncoder0 = new LTMessageEncoder((Object) null);
      boolean boolean0 = lTMessageEncoder0.supportsUTMetaData();
      assertEquals(false, boolean0);
  }
}
