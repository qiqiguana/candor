/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.security.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.security.CryptoHandler;
import com.aelitis.azureus.core.security.CryptoManagerException;
import com.aelitis.azureus.core.security.CryptoManagerKeyListener;
import com.aelitis.azureus.core.security.CryptoManagerPasswordException;
import com.aelitis.azureus.core.security.CryptoManagerPasswordHandler;
import com.aelitis.azureus.core.security.impl.CryptoHandlerECC;
import com.aelitis.azureus.core.security.impl.CryptoManagerImpl;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.gudy.azureus2.ui.swt.auth.CryptoWindow;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class CryptoManagerImplEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      CryptoManagerImpl cryptoManagerImpl0 = new CryptoManagerImpl();
      assertNotNull(cryptoManagerImpl0);
      
      char[] charArray0 = new char[1];
      CryptoManagerImpl.passwordDetails cryptoManagerImpl_passwordDetails0 = cryptoManagerImpl0.new passwordDetails(charArray0, (int) '\u0000');
      int int0 = cryptoManagerImpl_passwordDetails0.getHandlerType();
      assertEquals(0, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      CryptoManagerImpl cryptoManagerImpl0 = new CryptoManagerImpl();
      cryptoManagerImpl0.removeKeyListener((CryptoManagerKeyListener) null);
  }

  @Test
  public void test2()  throws Throwable  {
      CryptoManagerImpl cryptoManagerImpl0 = new CryptoManagerImpl();
      cryptoManagerImpl0.addKeyListener((CryptoManagerKeyListener) null);
      CryptoHandlerECC cryptoHandlerECC0 = (CryptoHandlerECC)cryptoManagerImpl0.getECCHandler();
      cryptoManagerImpl0.keyChanged((CryptoHandler) cryptoHandlerECC0);
      assertEquals(1, cryptoHandlerECC0.getType());
  }

  @Test
  public void test3()  throws Throwable  {
      CryptoManagerImpl cryptoManagerImpl0 = new CryptoManagerImpl();
      CryptoWindow cryptoWindow0 = new CryptoWindow();
      cryptoManagerImpl0.removePasswordHandler((CryptoManagerPasswordHandler) cryptoWindow0);
      assertEquals(1, cryptoWindow0.getHandlerType());
  }

  @Test
  public void test4()  throws Throwable  {
      CryptoManagerImpl cryptoManagerImpl0 = new CryptoManagerImpl();
      cryptoManagerImpl0.clearPasswords();
  }

  @Test
  public void test5()  throws Throwable  {
      CryptoManagerImpl cryptoManagerImpl0 = new CryptoManagerImpl();
      assertNotNull(cryptoManagerImpl0);
      
      byte[] byteArray0 = new byte[32];
      byte[] byteArray1 = cryptoManagerImpl0.deobfuscate(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
  }

  @Test
  public void test6()  throws Throwable  {
      CryptoManagerImpl cryptoManagerImpl0 = new CryptoManagerImpl();
      CryptoHandlerECC cryptoHandlerECC0 = (CryptoHandlerECC)cryptoManagerImpl0.getECCHandler();
      cryptoManagerImpl0.keyChanged((CryptoHandler) cryptoHandlerECC0);
      assertEquals(1, cryptoHandlerECC0.getType());
  }

  @Test
  public void test7()  throws Throwable  {
      CryptoManagerImpl cryptoManagerImpl0 = new CryptoManagerImpl();
      byte[] byteArray0 = new byte[1];
      char[] charArray0 = new char[1];
      try {
        cryptoManagerImpl0.encryptWithPBE(byteArray0, charArray0);
        fail("Expecting exception: CryptoManagerException");
      } catch(CryptoManagerException e) {
        /*
         * PBE encryption failed
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          CryptoManagerImpl cryptoManagerImpl0 = new CryptoManagerImpl();
          byte[] byteArray0 = new byte[1];
          // Undeclared exception!
          try {
            cryptoManagerImpl0.setSecureID(byteArray0);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission /home/ac1gf/.azureus/azureus.config.bak delete)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkDelete(SecurityManager.java:990)
             * java.io.File.delete(File.java:902)
             * org.gudy.azureus2.core3.util.FileUtil.backupFile(FileUtil.java:999)
             * org.gudy.azureus2.core3.util.FileUtil.writeResilientFile(FileUtil.java:462)
             * org.gudy.azureus2.core3.util.FileUtil.writeResilientFile(FileUtil.java:445)
             * org.gudy.azureus2.core3.util.FileUtil.writeResilientConfigFile(FileUtil.java:418)
             * org.gudy.azureus2.core3.config.impl.ConfigurationManager.save(ConfigurationManager.java:249)
             * org.gudy.azureus2.core3.config.impl.ConfigurationManager.save(ConfigurationManager.java:279)
             * org.gudy.azureus2.core3.config.COConfigurationManager.save(COConfigurationManager.java:485)
             * com.aelitis.azureus.core.security.impl.CryptoManagerImpl.setSecureID(CryptoManagerImpl.java:566)
             * sun.reflect.GeneratedMethodAccessor48.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test9()  throws Throwable  {
      CryptoManagerImpl cryptoManagerImpl0 = new CryptoManagerImpl();
      assertNotNull(cryptoManagerImpl0);
      
      byte[] byteArray0 = cryptoManagerImpl0.getSecureID();
      assertNotNull(byteArray0);
      
      char[] charArray0 = new char[1];
      CryptoManagerImpl.passwordDetails cryptoManagerImpl_passwordDetails0 = cryptoManagerImpl0.setPassword(48, (int) (byte)0, charArray0, 676L);
      assertNotNull(cryptoManagerImpl_passwordDetails0);
      assertEquals(0, cryptoManagerImpl_passwordDetails0.getHandlerType());
  }

  @Test
  public void test10()  throws Throwable  {
      CryptoManagerImpl cryptoManagerImpl0 = new CryptoManagerImpl();
      byte[] byteArray0 = cryptoManagerImpl0.getSecureID();
      char[] charArray0 = new char[10];
      try {
        cryptoManagerImpl0.decryptWithPBE(byteArray0, charArray0);
        fail("Expecting exception: CryptoManagerException");
      } catch(CryptoManagerException e) {
        /*
         * PBE decryption failed
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      CryptoManagerImpl cryptoManagerImpl0 = new CryptoManagerImpl();
      cryptoManagerImpl0.clearPassword(0, 0);
  }

  @Test
  public void test12()  throws Throwable  {
      CryptoManagerImpl cryptoManagerImpl0 = new CryptoManagerImpl();
      try {
        cryptoManagerImpl0.getPassword(10, 10, "p&(e", (CryptoManagerImpl.passwordTester) null, 10);
        fail("Expecting exception: CryptoManagerPasswordException");
      } catch(CryptoManagerPasswordException e) {
        /*
         * No password handlers returned a password
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      CryptoManagerImpl cryptoManagerImpl0 = new CryptoManagerImpl();
      CryptoWindow cryptoWindow0 = new CryptoWindow();
      cryptoManagerImpl0.addPasswordHandler((CryptoManagerPasswordHandler) cryptoWindow0);
      try {
        cryptoManagerImpl0.getPassword(0, 0, "=UffG}PEx=djX", (CryptoManagerImpl.passwordTester) null, 0);
        fail("Expecting exception: CryptoManagerPasswordException");
      } catch(CryptoManagerPasswordException e) {
        /*
         * No password handlers returned a password
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      CryptoManagerImpl cryptoManagerImpl0 = new CryptoManagerImpl();
      CryptoWindow cryptoWindow0 = new CryptoWindow();
      cryptoManagerImpl0.addPasswordHandler((CryptoManagerPasswordHandler) cryptoWindow0);
      try {
        cryptoManagerImpl0.getPassword(1, 1, "WB-P5R[<l", (CryptoManagerImpl.passwordTester) null, 1);
        fail("Expecting exception: CryptoManagerPasswordException");
      } catch(CryptoManagerPasswordException e) {
        /*
         * No password handlers returned a password
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      CryptoManagerImpl cryptoManagerImpl0 = new CryptoManagerImpl();
      CryptoWindow cryptoWindow0 = new CryptoWindow();
      cryptoManagerImpl0.addPasswordHandler((CryptoManagerPasswordHandler) cryptoWindow0);
      try {
        cryptoManagerImpl0.getPassword((-1), (-1), "peek", (CryptoManagerImpl.passwordTester) null, (-1));
        fail("Expecting exception: CryptoManagerPasswordException");
      } catch(CryptoManagerPasswordException e) {
        /*
         * No password handlers returned a password
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      CryptoManagerImpl cryptoManagerImpl0 = new CryptoManagerImpl();
      cryptoManagerImpl0.addKeyListener((CryptoManagerKeyListener) null);
      CryptoHandlerECC cryptoHandlerECC0 = (CryptoHandlerECC)cryptoManagerImpl0.getECCHandler();
      cryptoManagerImpl0.lockChanged((CryptoHandler) cryptoHandlerECC0);
      assertEquals(1, cryptoHandlerECC0.getType());
  }
}
