/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.ui.swt.browser.listener;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.messenger.browser.BrowserMessage;
import com.aelitis.azureus.ui.swt.browser.listener.VuzeListener;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class VuzeListenerEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      VuzeListener vuzeListener0 = new VuzeListener();
      BrowserMessage browserMessage0 = new BrowserMessage("load-vuze-file", "load-vuze-file", (Map<?, ?>) null);
      // Undeclared exception!
      try {
        vuzeListener0.handleMessage(browserMessage0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * content missing
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      BrowserMessage browserMessage0 = new BrowserMessage((String) null, (String) null, (Map<?, ?>) null);
      VuzeListener vuzeListener0 = new VuzeListener();
      // Undeclared exception!
      try {
        vuzeListener0.handleMessage(browserMessage0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Unknown operation: null
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          VuzeListener vuzeListener0 = new VuzeListener();
          HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
          BrowserMessage browserMessage0 = new BrowserMessage("install-trial", "install-trial", (Map<?, ?>) hashMap0);
          vuzeListener0.handleMessage(browserMessage0);
          assertNull(browserMessage0.getReferer());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          VuzeListener vuzeListener0 = new VuzeListener();
          BrowserMessage browserMessage0 = new BrowserMessage("load-vuze-file", "get-mode", (Map<?, ?>) null);
          vuzeListener0.handleMessage(browserMessage0);
          assertEquals("get-mode", browserMessage0.getOperationId());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          VuzeListener vuzeListener0 = new VuzeListener();
          BrowserMessage browserMessage0 = new BrowserMessage("get-plus-remaining", "get-plus-remaining", (Map<?, ?>) null);
          vuzeListener0.handleMessage(browserMessage0);
          assertNull(browserMessage0.getReferer());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
