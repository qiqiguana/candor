/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.diskmanager.cache.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.diskmanager.cache.CacheFileManagerException;
import com.aelitis.azureus.core.diskmanager.cache.impl.CacheEntry;
import com.aelitis.azureus.core.diskmanager.cache.impl.CacheFileManagerImpl;
import com.aelitis.azureus.core.diskmanager.cache.impl.CacheFileManagerStatsImpl;
import com.aelitis.azureus.core.diskmanager.cache.impl.CacheFileWithCache;
import com.aelitis.azureus.core.util.CaseSensitiveFileMap;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.OutputStream;
import java.io.PrintWriter;
import org.gudy.azureus2.core3.disk.impl.DiskManagerFileInfoImpl;
import org.gudy.azureus2.core3.disk.impl.DiskManagerHelper;
import org.gudy.azureus2.core3.disk.impl.DiskManagerImpl;
import org.gudy.azureus2.core3.download.DownloadManager;
import org.gudy.azureus2.core3.torrent.TOTorrent;
import org.gudy.azureus2.core3.torrent.TOTorrentFile;
import org.gudy.azureus2.core3.util.DirectByteBuffer;
import org.gudy.azureus2.core3.util.DirectByteBufferPool;
import org.gudy.azureus2.core3.util.IndentWriter;
import org.gudy.azureus2.core3.util.ReferenceCountedDirectByteBuffer;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class CacheFileManagerImplEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl();
      assertNotNull(cacheFileManagerImpl0);
      
      cacheFileManagerImpl0.fileBytesWritten(15012L);
      assertEquals(15012L, cacheFileManagerImpl0.getBytesWrittenToFile());
      assertEquals(true, cacheFileManagerImpl0.isCacheEnabled());
  }

  @Test
  public void test1()  throws Throwable  {
      DiskManagerImpl diskManagerImpl0 = new DiskManagerImpl((TOTorrent) null, (DownloadManager) null);
      File file0 = new File("AXVisibleChildren", "AXVisibleChildren");
      DiskManagerFileInfoImpl diskManagerFileInfoImpl0 = null;
      try {
        diskManagerFileInfoImpl0 = new DiskManagerFileInfoImpl((DiskManagerHelper) diskManagerImpl0, file0, 2, (TOTorrentFile) null, 2);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl();
      assertNotNull(cacheFileManagerImpl0);
      
      long long0 = cacheFileManagerImpl0.getFileWriteCount();
      assertEquals(true, cacheFileManagerImpl0.isCacheEnabled());
      assertEquals(0L, long0);
      assertEquals(true, cacheFileManagerImpl0.isWriteCacheEnabled());
      assertEquals(0L, cacheFileManagerImpl0.getCacheUsed());
      assertEquals(4194304L, cacheFileManagerImpl0.getCacheSize());
      assertEquals(false, cacheFileManagerImpl0.isReadCacheEnabled());
  }

  @Test
  public void test3()  throws Throwable  {
      CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl();
      assertNotNull(cacheFileManagerImpl0);
      
      cacheFileManagerImpl0.cacheBytesWritten((long) 1);
      assertEquals(1L, cacheFileManagerImpl0.getBytesWrittenToCache());
      assertEquals(0L, cacheFileManagerImpl0.getCacheUsed());
  }

  @Test
  public void test4()  throws Throwable  {
      CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl();
      assertNotNull(cacheFileManagerImpl0);
      
      boolean boolean0 = cacheFileManagerImpl0.isReadCacheEnabled();
      assertEquals(4194304L, cacheFileManagerImpl0.getCacheSize());
      assertEquals(true, cacheFileManagerImpl0.isWriteCacheEnabled());
      assertEquals(0L, cacheFileManagerImpl0.getCacheUsed());
      assertEquals(true, cacheFileManagerImpl0.isCacheEnabled());
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl();
      assertNotNull(cacheFileManagerImpl0);
      
      CaseSensitiveFileMap caseSensitiveFileMap0 = new CaseSensitiveFileMap();
      cacheFileManagerImpl0.setFileLinks((TOTorrent) null, caseSensitiveFileMap0);
      assertEquals(true, cacheFileManagerImpl0.isCacheEnabled());
      assertEquals(false, cacheFileManagerImpl0.isReadCacheEnabled());
      assertEquals(4194304L, cacheFileManagerImpl0.getCacheSize());
      assertEquals(true, cacheFileManagerImpl0.isWriteCacheEnabled());
      assertEquals(0L, cacheFileManagerImpl0.getCacheUsed());
  }

  @Test
  public void test6()  throws Throwable  {
      CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl();
      assertNotNull(cacheFileManagerImpl0);
      
      boolean boolean0 = cacheFileManagerImpl0.isCacheEnabled();
      assertEquals(0L, cacheFileManagerImpl0.getCacheUsed());
      assertEquals(4194304L, cacheFileManagerImpl0.getCacheSize());
      assertEquals(false, cacheFileManagerImpl0.isReadCacheEnabled());
      assertEquals(true, cacheFileManagerImpl0.isWriteCacheEnabled());
      assertEquals(true, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl();
      assertNotNull(cacheFileManagerImpl0);
      
      long long0 = cacheFileManagerImpl0.getBytesReadFromFile();
      assertEquals(0L, cacheFileManagerImpl0.getCacheUsed());
      assertEquals(0L, long0);
      assertEquals(false, cacheFileManagerImpl0.isReadCacheEnabled());
      assertEquals(true, cacheFileManagerImpl0.isWriteCacheEnabled());
      assertEquals(4194304L, cacheFileManagerImpl0.getCacheSize());
      assertEquals(true, cacheFileManagerImpl0.isCacheEnabled());
  }

  @Test
  public void test8()  throws Throwable  {
      CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl();
      assertNotNull(cacheFileManagerImpl0);
      
      cacheFileManagerImpl0.getBytesReadFromCache();
      assertEquals(false, cacheFileManagerImpl0.isReadCacheEnabled());
      assertEquals(0L, cacheFileManagerImpl0.getCacheUsed());
      assertEquals(4194304L, cacheFileManagerImpl0.getCacheSize());
      assertEquals(true, cacheFileManagerImpl0.isCacheEnabled());
      assertEquals(true, cacheFileManagerImpl0.isWriteCacheEnabled());
  }

  @Test
  public void test9()  throws Throwable  {
      CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl();
      assertNotNull(cacheFileManagerImpl0);
      
      cacheFileManagerImpl0.getCacheReadCount();
      assertEquals(false, cacheFileManagerImpl0.isReadCacheEnabled());
      assertEquals(true, cacheFileManagerImpl0.isCacheEnabled());
      assertEquals(4194304L, cacheFileManagerImpl0.getCacheSize());
      assertEquals(0L, cacheFileManagerImpl0.getCacheUsed());
      assertEquals(true, cacheFileManagerImpl0.isWriteCacheEnabled());
  }

  @Test
  public void test10()  throws Throwable  {
      CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl();
      assertNotNull(cacheFileManagerImpl0);
      
      cacheFileManagerImpl0.cacheBytesRead(35);
      assertEquals(35L, cacheFileManagerImpl0.getBytesReadFromCache());
      assertEquals(4194304L, cacheFileManagerImpl0.getCacheSize());
  }

  @Test
  public void test11()  throws Throwable  {
      CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl();
      assertNotNull(cacheFileManagerImpl0);
      
      boolean boolean0 = cacheFileManagerImpl0.isWriteCacheEnabled();
      assertEquals(true, cacheFileManagerImpl0.isCacheEnabled());
      assertEquals(false, cacheFileManagerImpl0.isReadCacheEnabled());
      assertEquals(4194304L, cacheFileManagerImpl0.getCacheSize());
      assertEquals(true, boolean0);
      assertEquals(0L, cacheFileManagerImpl0.getCacheUsed());
  }

  @Test
  public void test12()  throws Throwable  {
      CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl();
      assertNotNull(cacheFileManagerImpl0);
      
      cacheFileManagerImpl0.getBytesWrittenToCache();
      assertEquals(true, cacheFileManagerImpl0.isWriteCacheEnabled());
      assertEquals(true, cacheFileManagerImpl0.isCacheEnabled());
      assertEquals(4194304L, cacheFileManagerImpl0.getCacheSize());
      assertEquals(0L, cacheFileManagerImpl0.getCacheUsed());
      assertEquals(false, cacheFileManagerImpl0.isReadCacheEnabled());
  }

  @Test
  public void test13()  throws Throwable  {
      CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl();
      assertNotNull(cacheFileManagerImpl0);
      
      long long0 = cacheFileManagerImpl0.getFileReadCount();
      assertEquals(0L, long0);
      assertEquals(4194304L, cacheFileManagerImpl0.getCacheSize());
      assertEquals(false, cacheFileManagerImpl0.isReadCacheEnabled());
      assertEquals(true, cacheFileManagerImpl0.isWriteCacheEnabled());
      assertEquals(0L, cacheFileManagerImpl0.getCacheUsed());
      assertEquals(true, cacheFileManagerImpl0.isCacheEnabled());
  }

  @Test
  public void test14()  throws Throwable  {
      CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl();
      assertNotNull(cacheFileManagerImpl0);
      
      long long0 = cacheFileManagerImpl0.getBytesWrittenToFile();
      assertEquals(0L, cacheFileManagerImpl0.getCacheUsed());
      assertEquals(4194304L, cacheFileManagerImpl0.getCacheSize());
      assertEquals(true, cacheFileManagerImpl0.isWriteCacheEnabled());
      assertEquals(0L, long0);
      assertEquals(false, cacheFileManagerImpl0.isReadCacheEnabled());
      assertEquals(true, cacheFileManagerImpl0.isCacheEnabled());
  }

  @Test
  public void test15()  throws Throwable  {
      CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl();
      assertNotNull(cacheFileManagerImpl0);
      
      long long0 = cacheFileManagerImpl0.getCacheWriteCount();
      assertEquals(0L, cacheFileManagerImpl0.getCacheUsed());
      assertEquals(4194304L, cacheFileManagerImpl0.getCacheSize());
      assertEquals(true, cacheFileManagerImpl0.isCacheEnabled());
      assertEquals(false, cacheFileManagerImpl0.isReadCacheEnabled());
      assertEquals(true, cacheFileManagerImpl0.isWriteCacheEnabled());
      assertEquals(0L, long0);
  }

  @Test
  public void test16()  throws Throwable  {
      CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl();
      assertNotNull(cacheFileManagerImpl0);
      
      cacheFileManagerImpl0.fileBytesRead(1);
      assertEquals(1L, cacheFileManagerImpl0.getFileReadCount());
      assertEquals(1L, cacheFileManagerImpl0.getBytesReadFromFile());
  }

  @Test
  public void test17()  throws Throwable  {
      CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl();
      assertNotNull(cacheFileManagerImpl0);
      
      CacheFileManagerStatsImpl cacheFileManagerStatsImpl0 = (CacheFileManagerStatsImpl)cacheFileManagerImpl0.getStats();
      assertEquals(true, cacheFileManagerImpl0.isCacheEnabled());
      assertEquals(false, cacheFileManagerImpl0.isReadCacheEnabled());
      assertEquals(4194304L, cacheFileManagerImpl0.getCacheSize());
      assertEquals(true, cacheFileManagerImpl0.isWriteCacheEnabled());
      assertNotNull(cacheFileManagerStatsImpl0);
      assertEquals(0L, cacheFileManagerImpl0.getCacheUsed());
  }

  @Test
  public void test18()  throws Throwable  {
      CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl();
      assertNotNull(cacheFileManagerImpl0);
      
      CacheEntry cacheEntry0 = new CacheEntry(1388);
      cacheFileManagerImpl0.addCacheSpace(cacheEntry0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1388);
      PrintWriter printWriter0 = new PrintWriter((OutputStream) byteArrayOutputStream0);
      IndentWriter indentWriter0 = new IndentWriter(printWriter0);
      // Undeclared exception!
      try {
        cacheFileManagerImpl0.generate(indentWriter0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test19()  throws Throwable  {
      CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl();
      assertNotNull(cacheFileManagerImpl0);
      
      long long0 = cacheFileManagerImpl0.getCacheSize();
      assertEquals(true, cacheFileManagerImpl0.isWriteCacheEnabled());
      assertEquals(0L, cacheFileManagerImpl0.getCacheUsed());
      assertEquals(4194304L, long0);
      assertEquals(false, cacheFileManagerImpl0.isReadCacheEnabled());
      assertEquals(true, cacheFileManagerImpl0.isCacheEnabled());
  }

  @Test
  public void test20()  throws Throwable  {
      int int0 = CacheFileManagerImpl.convertCacheToFileType(1);
      assertEquals(1, int0);
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = CacheFileManagerImpl.convertCacheToFileType((-1943));
      assertEquals(4, int0);
  }

  @Test
  public void test22()  throws Throwable  {
      int int0 = CacheFileManagerImpl.convertCacheToFileType(3);
      assertEquals(3, int0);
  }

  @Test
  public void test23()  throws Throwable  {
      int int0 = CacheFileManagerImpl.convertFileToCacheType(1769157415);
      assertEquals(4, int0);
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = CacheFileManagerImpl.convertFileToCacheType(1);
      assertEquals(1, int0);
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = CacheFileManagerImpl.convertFileToCacheType(3);
      assertEquals(3, int0);
  }

  @Test
  public void test26()  throws Throwable  {
      CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl();
      assertNotNull(cacheFileManagerImpl0);
      
      cacheFileManagerImpl0.initialise(false, false, false, (long) (byte) (-119), (long) 1769157415);
      DirectByteBuffer directByteBuffer0 = DirectByteBufferPool.getBuffer((byte) (-119), 4);
      ReferenceCountedDirectByteBuffer referenceCountedDirectByteBuffer0 = directByteBuffer0.getReferenceCountedBuffer();
      cacheFileManagerImpl0.allocateCacheSpace(1769157415, (CacheFileWithCache) null, (DirectByteBuffer) referenceCountedDirectByteBuffer0, (long) 1769157415, (int) (byte) (-119));
      assertEquals((-119L), cacheFileManagerImpl0.getCacheSize());
      assertEquals(false, cacheFileManagerImpl0.isWriteCacheEnabled());
  }

  @Test
  public void test27()  throws Throwable  {
      CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl();
      assertNotNull(cacheFileManagerImpl0);
      
      cacheFileManagerImpl0.initialise(true, true, true, (long) (byte)123, (long) 10800000);
      assertEquals(123L, cacheFileManagerImpl0.getCacheSize());
      assertEquals(true, cacheFileManagerImpl0.isReadCacheEnabled());
  }

  @Test
  public void test28()  throws Throwable  {
      CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl();
      assertNotNull(cacheFileManagerImpl0);
      
      cacheFileManagerImpl0.initialise(true, false, false, 1582L, 1582L);
      assertEquals(1582L, cacheFileManagerImpl0.getCacheSize());
      assertEquals(false, cacheFileManagerImpl0.isCacheEnabled());
  }

  @Test
  public void test29()  throws Throwable  {
      CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl();
      assertNotNull(cacheFileManagerImpl0);
      
      CacheEntry cacheEntry0 = new CacheEntry(1401);
      cacheFileManagerImpl0.addCacheSpace(cacheEntry0);
      cacheFileManagerImpl0.cacheEntryUsed(cacheEntry0);
      assertEquals(true, cacheFileManagerImpl0.isCacheEnabled());
      assertEquals(true, cacheFileManagerImpl0.isWriteCacheEnabled());
      assertEquals(0L, cacheFileManagerImpl0.getCacheUsed());
      assertEquals(false, cacheFileManagerImpl0.isReadCacheEnabled());
      assertEquals(4194304L, cacheFileManagerImpl0.getCacheSize());
  }

  @Test
  public void test30()  throws Throwable  {
      CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl();
      assertNotNull(cacheFileManagerImpl0);
      
      CacheEntry cacheEntry0 = new CacheEntry(10800000);
      try {
        cacheFileManagerImpl0.cacheEntryUsed(cacheEntry0);
        fail("Expecting exception: CacheFileManagerException");
      } catch(CacheFileManagerException e) {
        /*
         * Cache inconsistency: entry missing on usage
         */
      }
  }

  @Test
  public void test31()  throws Throwable  {
      CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl();
      assertNotNull(cacheFileManagerImpl0);
      
      DirectByteBuffer directByteBuffer0 = DirectByteBufferPool.getBuffer((byte) (-31), 1388);
      CacheEntry cacheEntry0 = cacheFileManagerImpl0.allocateCacheSpace(1388, (CacheFileWithCache) null, directByteBuffer0, (long) (byte) (-31), (int) (byte) (-31));
      cacheFileManagerImpl0.addCacheSpace(cacheEntry0);
      assertEquals((-31L), cacheFileManagerImpl0.getCacheUsed());
      
      cacheFileManagerImpl0.releaseCacheSpace(cacheEntry0);
      assertEquals(4194304L, cacheFileManagerImpl0.getCacheSize());
  }

  @Test
  public void test32()  throws Throwable  {
      CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl();
      assertNotNull(cacheFileManagerImpl0);
      
      DirectByteBuffer directByteBuffer0 = DirectByteBufferPool.getBuffer((byte) (-1), 1);
      CacheEntry cacheEntry0 = cacheFileManagerImpl0.allocateCacheSpace(1, (CacheFileWithCache) null, directByteBuffer0, (long) 1, (int) (byte) (-1));
      try {
        cacheFileManagerImpl0.releaseCacheSpace(cacheEntry0);
        fail("Expecting exception: CacheFileManagerException");
      } catch(CacheFileManagerException e) {
        /*
         * Cache inconsistency: entry missing on removal
         */
      }
  }

  @Test
  public void test33()  throws Throwable  {
      CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl();
      assertNotNull(cacheFileManagerImpl0);
      
      long long0 = cacheFileManagerImpl0.getCacheUsed();
      assertEquals(true, cacheFileManagerImpl0.isCacheEnabled());
      assertEquals(false, cacheFileManagerImpl0.isReadCacheEnabled());
      assertEquals(0L, long0);
      assertEquals(true, cacheFileManagerImpl0.isWriteCacheEnabled());
      assertEquals(4194304L, cacheFileManagerImpl0.getCacheSize());
  }

  @Test
  public void test34()  throws Throwable  {
      CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl();
      assertNotNull(cacheFileManagerImpl0);
      
      cacheFileManagerImpl0.initialise(false, false, false, (long) (byte) (-119), (long) 1769157415);
      long long0 = cacheFileManagerImpl0.getCacheUsed();
      assertEquals((-119L), cacheFileManagerImpl0.getCacheSize());
      assertEquals((-119L), long0);
  }

  @Test
  public void test35()  throws Throwable  {
      CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl();
      assertNotNull(cacheFileManagerImpl0);
      
      long[] longArray0 = new long[4];
      // Undeclared exception!
      try {
        cacheFileManagerImpl0.getBytesInCache((TOTorrent) null, longArray0, longArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Offsets/Lengths are not in ascending order
         */
      }
  }

  @Test
  public void test36()  throws Throwable  {
      CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl();
      assertNotNull(cacheFileManagerImpl0);
      
      long[] longArray0 = new long[6];
      long[] longArray1 = new long[7];
      // Undeclared exception!
      try {
        cacheFileManagerImpl0.getBytesInCache((TOTorrent) null, longArray0, longArray1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Offsets/Lengths mismatch
         */
      }
  }

  @Test
  public void test37()  throws Throwable  {
      CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl();
      assertNotNull(cacheFileManagerImpl0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 1568L;
      // Undeclared exception!
      try {
        cacheFileManagerImpl0.getBytesInCache((TOTorrent) null, longArray0, longArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test38()  throws Throwable  {
      CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl();
      assertNotNull(cacheFileManagerImpl0);
      
      long[] longArray0 = new long[10];
      longArray0[0] = 15012L;
      // Undeclared exception!
      try {
        cacheFileManagerImpl0.getBytesInCache((TOTorrent) null, longArray0, longArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Offsets/Lengths are not in ascending order
         */
      }
  }

  @Test
  public void test39()  throws Throwable  {
      CacheFileManagerImpl cacheFileManagerImpl0 = new CacheFileManagerImpl();
      assertNotNull(cacheFileManagerImpl0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PrintWriter printWriter0 = new PrintWriter((OutputStream) byteArrayOutputStream0);
      IndentWriter indentWriter0 = new IndentWriter(printWriter0);
      cacheFileManagerImpl0.generate(indentWriter0);
      assertEquals(30, byteArrayOutputStream0.size());
      assertEquals(true, cacheFileManagerImpl0.isWriteCacheEnabled());
  }
}
