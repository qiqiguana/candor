/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.peermanager.messaging.bittorrent;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.peermanager.messaging.MessageException;
import com.aelitis.azureus.core.peermanager.messaging.bittorrent.BTCancel;
import org.gudy.azureus2.core3.util.DirectByteBuffer;
import org.gudy.azureus2.core3.util.DirectByteBufferPool;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BTCancelEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BTCancel bTCancel0 = new BTCancel((-9), (-9), (-9), (byte)45);
      byte byte0 = bTCancel0.getVersion();
      assertEquals((byte)45, byte0);
      assertEquals("BT_CANCEL piece #-9:-9->-19", bTCancel0.getDescription());
  }

  @Test
  public void test1()  throws Throwable  {
      BTCancel bTCancel0 = new BTCancel((-9), (-9), (-9), (byte)45);
      DirectByteBuffer directByteBuffer0 = DirectByteBufferPool.getBuffer((byte)45, (byte)45);
      try {
        bTCancel0.deserialize(directByteBuffer0, (byte)45);
        fail("Expecting exception: MessageException");
      } catch(MessageException e) {
        /*
         * [BT_CANCEL] decode error: payload.remaining[45] != 12
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      BTCancel bTCancel0 = new BTCancel((-32), (-32), (-32), (byte)13);
      int int0 = bTCancel0.getType();
      assertEquals(13, bTCancel0.getVersion());
      assertEquals(0, int0);
      assertEquals("BT_CANCEL piece #-32:-32->-65", bTCancel0.getDescription());
  }

  @Test
  public void test3()  throws Throwable  {
      BTCancel bTCancel0 = new BTCancel((-32), (-32), (-32), (byte)13);
      int int0 = bTCancel0.getPieceNumber();
      assertEquals("BT_CANCEL piece #-32:-32->-65", bTCancel0.getDescription());
      assertEquals((-32), int0);
      assertEquals(13, bTCancel0.getVersion());
  }

  @Test
  public void test4()  throws Throwable  {
      BTCancel bTCancel0 = new BTCancel((-421), (-421), (-421), (byte) (-29));
      int int0 = bTCancel0.getLength();
      assertEquals("BT_CANCEL piece #-421:-421->-843", bTCancel0.getDescription());
      assertEquals(-29, bTCancel0.getVersion());
      assertEquals((-421), int0);
  }

  @Test
  public void test5()  throws Throwable  {
      BTCancel bTCancel0 = new BTCancel((-9), (-9), (-9), (byte)45);
      String string0 = bTCancel0.getFeatureID();
      assertEquals("BT1", string0);
      assertEquals("BT_CANCEL piece #-9:-9->-19", bTCancel0.getDescription());
      assertEquals(45, bTCancel0.getVersion());
  }

  @Test
  public void test6()  throws Throwable  {
      BTCancel bTCancel0 = new BTCancel((-9), (-9), (-9), (byte)45);
      byte[] byteArray0 = bTCancel0.getIDBytes();
      assertNotNull(byteArray0);
      assertEquals(45, bTCancel0.getVersion());
      assertEquals("BT_CANCEL piece #-9:-9->-19", bTCancel0.getDescription());
      assertEquals(-9, bTCancel0.getPieceNumber());
  }

  @Test
  public void test7()  throws Throwable  {
      BTCancel bTCancel0 = new BTCancel(19, 19, (int) (byte) (-51), (byte) (-51));
      int int0 = bTCancel0.getFeatureSubID();
      assertEquals(8, int0);
      assertEquals(-51, bTCancel0.getVersion());
      assertEquals("BT_CANCEL piece #19:19->-33", bTCancel0.getDescription());
  }

  @Test
  public void test8()  throws Throwable  {
      BTCancel bTCancel0 = new BTCancel((-32), (-32), (-32), (byte)13);
      int int0 = bTCancel0.getPieceOffset();
      assertEquals(13, bTCancel0.getVersion());
      assertEquals((-32), int0);
      assertEquals("BT_CANCEL piece #-32:-32->-65", bTCancel0.getDescription());
  }

  @Test
  public void test9()  throws Throwable  {
      BTCancel bTCancel0 = new BTCancel((-32), (-32), (-32), (byte)13);
      String string0 = bTCancel0.getDescription();
      String string1 = bTCancel0.getDescription();
      assertNotNull(string1);
      assertEquals("BT_CANCEL piece #-32:-32->-65", string1);
      assertSame(string1, string0);
      assertEquals(13, bTCancel0.getVersion());
  }

  @Test
  public void test10()  throws Throwable  {
      BTCancel bTCancel0 = new BTCancel((-32), (-32), (-32), (byte)13);
      DirectByteBuffer[] directByteBufferArray0 = bTCancel0.getData();
      assertNotNull(directByteBufferArray0);
      
      bTCancel0.getData();
      assertEquals("BT_CANCEL piece #-32:-32->-65", bTCancel0.getDescription());
      assertEquals(13, bTCancel0.getVersion());
  }

  @Test
  public void test11()  throws Throwable  {
      BTCancel bTCancel0 = new BTCancel(19, 19, (int) (byte) (-51), (byte) (-51));
      try {
        bTCancel0.deserialize((DirectByteBuffer) null, (byte) (-51));
        fail("Expecting exception: MessageException");
      } catch(MessageException e) {
        /*
         * [BT_CANCEL] decode error: data == null
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      BTCancel bTCancel0 = new BTCancel((-1353), (-1353), (-1353), (byte)12);
      DirectByteBuffer directByteBuffer0 = DirectByteBufferPool.getBuffer((byte)12, (byte)12);
      BTCancel bTCancel1 = (BTCancel)bTCancel0.deserialize(directByteBuffer0, (byte)12);
      assertEquals(12, bTCancel1.getVersion());
      assertEquals("BT_CANCEL piece #-1353:-1353->-2707", bTCancel0.getDescription());
      assertEquals(0, bTCancel1.getPieceOffset());
      assertNotNull(bTCancel1);
  }

  @Test
  public void test13()  throws Throwable  {
      byte byte0 = (byte)12;
      BTCancel bTCancel0 = new BTCancel((-1353), (-1353), (-1353), (byte)12);
      bTCancel0.destroy();
      DirectByteBuffer directByteBuffer0 = DirectByteBufferPool.getBuffer((byte)12, (byte)12);
      BTCancel bTCancel1 = (BTCancel)bTCancel0.deserialize(directByteBuffer0, (byte)12);
      assertNotNull(bTCancel1);
      
      DirectByteBuffer directByteBuffer1 = DirectByteBufferPool.getBuffer(byte0, byte0);
      BTCancel bTCancel2 = (BTCancel)bTCancel0.deserialize(directByteBuffer1, byte0);
      assertEquals(12, bTCancel0.getVersion());
      assertEquals("BT_CANCEL piece #0:0->-1", bTCancel2.getDescription());
      assertEquals("BT_CANCEL piece #-1353:-1353->-2707", bTCancel0.getDescription());
  }

  @Test
  public void test14()  throws Throwable  {
      BTCancel bTCancel0 = new BTCancel((-421), (-421), (-421), (byte) (-29));
      DirectByteBuffer[] directByteBufferArray0 = bTCancel0.getData();
      assertNotNull(directByteBufferArray0);
      
      bTCancel0.destroy();
      assertEquals("BT_CANCEL piece #-421:-421->-843", bTCancel0.getDescription());
      assertEquals(-29, bTCancel0.getVersion());
      assertEquals(-421, bTCancel0.getPieceOffset());
  }
}
