/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.util.MultiPartDecoder;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MultiPartDecoderEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      MultiPartDecoder multiPartDecoder0 = new MultiPartDecoder();
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try {
        multiPartDecoder0.decode("cX&z@V7*?9$(*Q", (InputStream) byteArrayInputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Incorrect termination of form upload data
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      MultiPartDecoder.FormField multiPartDecoder_FormField0 = new MultiPartDecoder.FormField("-^|p", (Map) null);
      String string0 = multiPartDecoder_FormField0.getName();
      assertEquals("-^|p", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiPartDecoder.FormField multiPartDecoder_FormField0 = new MultiPartDecoder.FormField("&_.uNXGaA<", (Map) hashMap0);
      String string0 = multiPartDecoder_FormField0.getAttribute("&_.uNXGaA<");
      assertNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      MultiPartDecoder multiPartDecoder0 = new MultiPartDecoder();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      MultiPartDecoder.FormField multiPartDecoder_FormField0 = new MultiPartDecoder.FormField((String) null, (Map) hashMap0);
      ByteArrayInputStream byteArrayInputStream0 = (ByteArrayInputStream)multiPartDecoder_FormField0.getInputStream();
      try {
        multiPartDecoder0.decode((String) null, (InputStream) byteArrayInputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Incorrect termination of form upload data
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      MultiPartDecoder multiPartDecoder0 = new MultiPartDecoder();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)45;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try {
        multiPartDecoder0.decode("cX&z@V7*?9$(*Q", (InputStream) byteArrayInputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Incorrect termination of form upload data
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      MultiPartDecoder multiPartDecoder0 = new MultiPartDecoder();
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)45;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try {
        multiPartDecoder0.decode("l,jn", (InputStream) byteArrayInputStream0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      MultiPartDecoder.FormField multiPartDecoder_FormField0 = new MultiPartDecoder.FormField("-^|p", (Map) null);
      File file0 = new File((File) null, "-^|p");
      multiPartDecoder_FormField0.file = file0;
      try {
        multiPartDecoder_FormField0.getString();
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
        /*
         * -^|p (No such file or directory)
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MultiPartDecoder.FormField multiPartDecoder_FormField0 = new MultiPartDecoder.FormField("\"", (Map) hashMap0);
      assertNotNull(multiPartDecoder_FormField0);
      
      byte[] byteArray0 = new byte[4];
      multiPartDecoder_FormField0.write(byteArray0, 1, 1);
      String string0 = multiPartDecoder_FormField0.getString();
      assertEquals("\u0000", multiPartDecoder_FormField0.getString());
      assertNotNull(string0);
      assertEquals("\u0000", string0);
  }

  @Test
  public void test8()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiPartDecoder.FormField multiPartDecoder_FormField0 = new MultiPartDecoder.FormField("&_.uNXGaA<", (Map) hashMap0);
      String string0 = multiPartDecoder_FormField0.getString();
      assertEquals("", string0);
  }

  @Test
  public void test9()  throws Throwable  {
      MultiPartDecoder.FormField multiPartDecoder_FormField0 = new MultiPartDecoder.FormField("-|p", (Map) null);
      multiPartDecoder_FormField0.getInputStream();
      multiPartDecoder_FormField0.destroy();
      assertEquals("-|p", multiPartDecoder_FormField0.getName());
  }

  @Test
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          MultiPartDecoder.FormField multiPartDecoder_FormField0 = new MultiPartDecoder.FormField("-|p", (Map) null);
          File file0 = new File((File) null, "-|p");
          multiPartDecoder_FormField0.file = file0;
          // Undeclared exception!
          try {
            multiPartDecoder_FormField0.destroy();
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission -|p delete)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkDelete(SecurityManager.java:990)
             * java.io.File.delete(File.java:902)
             * com.aelitis.azureus.core.util.MultiPartDecoder$FormField.destroy(MultiPartDecoder.java:340)
             * sun.reflect.GeneratedMethodAccessor70.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
          MultiPartDecoder.FormField multiPartDecoder_FormField0 = new MultiPartDecoder.FormField("", (Map) hashMap0);
          byte[] byteArray0 = new byte[11];
          // Undeclared exception!
          try {
            multiPartDecoder_FormField0.write(byteArray0, (int) (byte)0, 1930);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission /tmp/AZU3914319110430616158.tmp write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.checkAndCreate(File.java:1696)
             * java.io.File.createTempFile(File.java:1792)
             * java.io.File.createTempFile(File.java:1828)
             * com.aelitis.azureus.core.util.MultiPartDecoder$FormField.write(MultiPartDecoder.java:362)
             * sun.reflect.GeneratedMethodAccessor69.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test12()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiPartDecoder.FormField multiPartDecoder_FormField0 = new MultiPartDecoder.FormField("&_.uNXGaA<", (Map) hashMap0);
      multiPartDecoder_FormField0.complete();
      assertEquals("&_.uNXGaA<", multiPartDecoder_FormField0.getName());
  }
}
