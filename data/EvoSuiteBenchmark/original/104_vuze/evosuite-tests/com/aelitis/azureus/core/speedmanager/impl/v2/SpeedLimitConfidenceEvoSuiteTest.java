/*
 * This file was automatically generated by EvoSuite
 */

package com.aelitis.azureus.core.speedmanager.impl.v2;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.speedmanager.impl.v2.SpeedLimitConfidence;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SpeedLimitConfidenceEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SpeedLimitConfidence speedLimitConfidence0 = SpeedLimitConfidence.HIGH;
      boolean boolean0 = speedLimitConfidence0.isGreater(speedLimitConfidence0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      SpeedLimitConfidence speedLimitConfidence0 = SpeedLimitConfidence.HIGH;
      float float0 = speedLimitConfidence0.asEstimateType();
      assertEquals(0.8F, float0, 0.01F);
  }

  @Test
  public void test2()  throws Throwable  {
      SpeedLimitConfidence speedLimitConfidence0 = SpeedLimitConfidence.HIGH;
      String string0 = speedLimitConfidence0.getString();
      assertEquals("HIGH", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      SpeedLimitConfidence speedLimitConfidence0 = SpeedLimitConfidence.HIGH;
      String string0 = speedLimitConfidence0.getInternationalizedString();
      assertNotNull(string0);
      assertEquals("High", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      SpeedLimitConfidence speedLimitConfidence0 = SpeedLimitConfidence.convertType(1.0F);
      assertNotNull(speedLimitConfidence0);
      assertEquals(1.0F, speedLimitConfidence0.asEstimateType(), 0.01F);
  }

  @Test
  public void test5()  throws Throwable  {
      SpeedLimitConfidence speedLimitConfidence0 = SpeedLimitConfidence.convertType((-1.0F));
      assertNotNull(speedLimitConfidence0);
      assertEquals("None", speedLimitConfidence0.getInternationalizedString());
  }

  @Test
  public void test6()  throws Throwable  {
      SpeedLimitConfidence speedLimitConfidence0 = SpeedLimitConfidence.convertType(0.0F);
      assertNotNull(speedLimitConfidence0);
      
      int int0 = speedLimitConfidence0.compareTo((Object) speedLimitConfidence0);
      assertEquals(0, int0);
      assertEquals(0.0F, speedLimitConfidence0.asEstimateType(), 0.01F);
  }

  @Test
  public void test7()  throws Throwable  {
      SpeedLimitConfidence speedLimitConfidence0 = SpeedLimitConfidence.convertType(0.5F);
      assertNotNull(speedLimitConfidence0);
      assertEquals(0.5F, speedLimitConfidence0.asEstimateType(), 0.01F);
  }

  @Test
  public void test8()  throws Throwable  {
      SpeedLimitConfidence speedLimitConfidence0 = SpeedLimitConfidence.convertType(0.8F);
      assertNotNull(speedLimitConfidence0);
      assertEquals(0.8F, speedLimitConfidence0.asEstimateType(), 0.01F);
  }

  @Test
  public void test9()  throws Throwable  {
      SpeedLimitConfidence speedLimitConfidence0 = SpeedLimitConfidence.parseString("High");
      assertEquals(0.8F, speedLimitConfidence0.asEstimateType(), 0.01F);
      assertNotNull(speedLimitConfidence0);
  }

  @Test
  public void test10()  throws Throwable  {
      SpeedLimitConfidence speedLimitConfidence0 = SpeedLimitConfidence.parseString((String) null);
      assertNotNull(speedLimitConfidence0);
      assertEquals("None", speedLimitConfidence0.getInternationalizedString());
  }

  @Test
  public void test11()  throws Throwable  {
      SpeedLimitConfidence speedLimitConfidence0 = SpeedLimitConfidence.parseString("none");
      assertNotNull(speedLimitConfidence0);
      assertEquals("NONE", speedLimitConfidence0.getString());
  }

  @Test
  public void test12()  throws Throwable  {
      SpeedLimitConfidence speedLimitConfidence0 = SpeedLimitConfidence.parseString("LOW");
      assertNotNull(speedLimitConfidence0);
      assertEquals(0.0F, speedLimitConfidence0.asEstimateType(), 0.01F);
  }

  @Test
  public void test13()  throws Throwable  {
      SpeedLimitConfidence speedLimitConfidence0 = SpeedLimitConfidence.parseString("med");
      assertEquals("Medium", speedLimitConfidence0.getInternationalizedString());
      assertNotNull(speedLimitConfidence0);
  }

  @Test
  public void test14()  throws Throwable  {
      SpeedLimitConfidence speedLimitConfidence0 = SpeedLimitConfidence.parseString("p@d0O%Z+qEY;");
      assertNotNull(speedLimitConfidence0);
      assertEquals("None", speedLimitConfidence0.getInternationalizedString());
  }

  @Test
  public void test15()  throws Throwable  {
      SpeedLimitConfidence speedLimitConfidence0 = SpeedLimitConfidence.parseString("Absolute");
      assertNotNull(speedLimitConfidence0);
      assertEquals("Absolute", speedLimitConfidence0.getInternationalizedString());
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = SpeedLimitConfidence.asEstimateTypeString(0.0F);
      assertEquals("Estimate", string0);
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = SpeedLimitConfidence.asEstimateTypeString((-0.1F));
      assertEquals("Unknown", string0);
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = SpeedLimitConfidence.asEstimateTypeString(1.0F);
      assertEquals("Fixed", string0);
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = SpeedLimitConfidence.asEstimateTypeString(1725.5759F);
      assertEquals("", string0);
  }

  @Test
  public void test20()  throws Throwable  {
      SpeedLimitConfidence speedLimitConfidence0 = SpeedLimitConfidence.HIGH;
      SpeedLimitConfidence speedLimitConfidence1 = SpeedLimitConfidence.LOW;
      boolean boolean0 = speedLimitConfidence0.isGreater(speedLimitConfidence1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      SpeedLimitConfidence speedLimitConfidence0 = SpeedLimitConfidence.convertType(0.0F);
      assertNotNull(speedLimitConfidence0);
      
      // Undeclared exception!
      try {
        speedLimitConfidence0.compareTo((Object) "");
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * Only comparable to SpeedLimitConfidence class.
         */
      }
  }
}
