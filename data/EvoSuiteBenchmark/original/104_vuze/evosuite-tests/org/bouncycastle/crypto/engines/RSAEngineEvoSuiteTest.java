/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.crypto.engines;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.math.BigInteger;
import org.bouncycastle.crypto.CipherParameters;
import org.bouncycastle.crypto.DataLengthException;
import org.bouncycastle.crypto.engines.RSAEngine;
import org.bouncycastle.crypto.params.RSAKeyParameters;
import org.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters;
import org.bouncycastle.math.ec.ECConstants;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class RSAEngineEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      RSAEngine rSAEngine0 = new RSAEngine();
      BigInteger bigInteger0 = ECConstants.TWO;
      RSAKeyParameters rSAKeyParameters0 = new RSAKeyParameters(false, bigInteger0, bigInteger0);
      rSAEngine0.init(false, (CipherParameters) rSAKeyParameters0);
      int int0 = rSAEngine0.getOutputBlockSize();
      assertEquals(0, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      RSAEngine rSAEngine0 = new RSAEngine();
      BigInteger bigInteger0 = ECConstants.TWO;
      RSAKeyParameters rSAKeyParameters0 = new RSAKeyParameters(true, bigInteger0, bigInteger0);
      rSAEngine0.init(true, (CipherParameters) rSAKeyParameters0);
      byte[] byteArray0 = new byte[10];
      // Undeclared exception!
      try {
        rSAEngine0.processBlock(byteArray0, 1, (int) (byte)111);
        fail("Expecting exception: DataLengthException");
      } catch(DataLengthException e) {
        /*
         * input too large for RSA cipher.
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      RSAEngine rSAEngine0 = new RSAEngine();
      BigInteger bigInteger0 = ECConstants.TWO;
      RSAKeyParameters rSAKeyParameters0 = new RSAKeyParameters(true, bigInteger0, bigInteger0);
      rSAEngine0.init(true, (CipherParameters) rSAKeyParameters0);
      byte[] byteArray0 = new byte[10];
      byte[] byteArray1 = rSAEngine0.processBlock(byteArray0, 1, 0);
      assertEquals(0, rSAEngine0.getInputBlockSize());
      assertEquals(1, rSAEngine0.getOutputBlockSize());
      assertNotNull(byteArray1);
  }

  @Test
  public void test3()  throws Throwable  {
      RSAEngine rSAEngine0 = new RSAEngine();
      byte[] byteArray0 = new byte[3];
      BigInteger bigInteger0 = ECConstants.FOUR;
      RSAPrivateCrtKeyParameters rSAPrivateCrtKeyParameters0 = new RSAPrivateCrtKeyParameters(bigInteger0, bigInteger0, bigInteger0, bigInteger0, bigInteger0, bigInteger0, bigInteger0, bigInteger0);
      rSAEngine0.init(false, (CipherParameters) rSAPrivateCrtKeyParameters0);
      byte[] byteArray1 = rSAEngine0.processBlock(byteArray0, (int) (byte)0, (int) (byte)0);
      assertEquals(1, rSAEngine0.getInputBlockSize());
      assertNotNull(byteArray1);
  }

  @Test
  public void test4()  throws Throwable  {
      RSAEngine rSAEngine0 = new RSAEngine();
      BigInteger bigInteger0 = ECConstants.TWO;
      RSAKeyParameters rSAKeyParameters0 = new RSAKeyParameters(true, bigInteger0, bigInteger0);
      rSAEngine0.init(true, (CipherParameters) rSAKeyParameters0);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)111;
      byte[] byteArray1 = rSAEngine0.processBlock(byteArray0, 0, 1);
      assertNotNull(byteArray1);
      assertEquals(1, rSAEngine0.getOutputBlockSize());
      assertEquals(0, rSAEngine0.getInputBlockSize());
  }

  @Test
  public void test5()  throws Throwable  {
      RSAEngine rSAEngine0 = new RSAEngine();
      BigInteger bigInteger0 = ECConstants.TWO;
      RSAKeyParameters rSAKeyParameters0 = new RSAKeyParameters(false, bigInteger0, bigInteger0);
      rSAEngine0.init(false, (CipherParameters) rSAKeyParameters0);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)89;
      byte[] byteArray1 = rSAEngine0.processBlock(byteArray0, 0, 2);
      assertNotNull(byteArray1);
      assertEquals(1, rSAEngine0.getInputBlockSize());
  }
}
