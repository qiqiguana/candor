/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.crypto.encodings;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.math.BigInteger;
import org.bouncycastle.crypto.AsymmetricBlockCipher;
import org.bouncycastle.crypto.CipherParameters;
import org.bouncycastle.crypto.InvalidCipherTextException;
import org.bouncycastle.crypto.encodings.ISO9796d1Encoding;
import org.bouncycastle.crypto.engines.RSAEngine;
import org.bouncycastle.crypto.params.DHParameters;
import org.bouncycastle.crypto.params.ParametersWithRandom;
import org.bouncycastle.crypto.params.RSAKeyParameters;
import org.bouncycastle.math.ec.ECConstants;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ISO9796d1EncodingEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ISO9796d1Encoding iSO9796d1Encoding0 = new ISO9796d1Encoding((AsymmetricBlockCipher) null);
      int int0 = iSO9796d1Encoding0.getPadBits();
      assertEquals(0, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      ISO9796d1Encoding iSO9796d1Encoding0 = new ISO9796d1Encoding((AsymmetricBlockCipher) null);
      iSO9796d1Encoding0.getUnderlyingCipher();
      assertEquals(0, iSO9796d1Encoding0.getPadBits());
  }

  @Test
  public void test2()  throws Throwable  {
      RSAEngine rSAEngine0 = new RSAEngine();
      ISO9796d1Encoding iSO9796d1Encoding0 = new ISO9796d1Encoding((AsymmetricBlockCipher) rSAEngine0);
      BigInteger bigInteger0 = ECConstants.ZERO;
      RSAKeyParameters rSAKeyParameters0 = new RSAKeyParameters(true, bigInteger0, bigInteger0);
      iSO9796d1Encoding0.init(true, (CipherParameters) rSAKeyParameters0);
      assertEquals(0, iSO9796d1Encoding0.getInputBlockSize());
      
      ISO9796d1Encoding iSO9796d1Encoding1 = new ISO9796d1Encoding((AsymmetricBlockCipher) rSAEngine0);
      int int0 = iSO9796d1Encoding1.getInputBlockSize();
      assertEquals(0, iSO9796d1Encoding1.getPadBits());
      assertEquals((-1), int0);
  }

  @Test
  public void test3()  throws Throwable  {
      ISO9796d1Encoding iSO9796d1Encoding0 = new ISO9796d1Encoding((AsymmetricBlockCipher) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      DHParameters dHParameters0 = new DHParameters(bigInteger0, bigInteger0);
      ParametersWithRandom parametersWithRandom0 = new ParametersWithRandom((CipherParameters) dHParameters0);
      // Undeclared exception!
      try {
        iSO9796d1Encoding0.init(true, (CipherParameters) parametersWithRandom0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * org.bouncycastle.crypto.params.DHParameters cannot be cast to org.bouncycastle.crypto.params.RSAKeyParameters
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      RSAEngine rSAEngine0 = new RSAEngine();
      ISO9796d1Encoding iSO9796d1Encoding0 = new ISO9796d1Encoding((AsymmetricBlockCipher) rSAEngine0);
      BigInteger bigInteger0 = ECConstants.ZERO;
      RSAKeyParameters rSAKeyParameters0 = new RSAKeyParameters(true, bigInteger0, bigInteger0);
      iSO9796d1Encoding0.init(true, (CipherParameters) rSAKeyParameters0);
      int int0 = iSO9796d1Encoding0.getInputBlockSize();
      assertEquals(0, iSO9796d1Encoding0.getPadBits());
      assertEquals(0, iSO9796d1Encoding0.getInputBlockSize());
      assertEquals(0, rSAEngine0.getOutputBlockSize());
      assertEquals(0, int0);
  }

  @Test
  public void test5()  throws Throwable  {
      RSAEngine rSAEngine0 = new RSAEngine();
      ISO9796d1Encoding iSO9796d1Encoding0 = new ISO9796d1Encoding((AsymmetricBlockCipher) rSAEngine0);
      BigInteger bigInteger0 = ECConstants.ZERO;
      RSAKeyParameters rSAKeyParameters0 = new RSAKeyParameters(true, bigInteger0, bigInteger0);
      iSO9796d1Encoding0.init(true, (CipherParameters) rSAKeyParameters0);
      assertEquals(0, iSO9796d1Encoding0.getInputBlockSize());
      
      ISO9796d1Encoding iSO9796d1Encoding1 = new ISO9796d1Encoding((AsymmetricBlockCipher) rSAEngine0);
      int int0 = iSO9796d1Encoding1.getOutputBlockSize();
      assertEquals(0, int0);
      assertEquals(-1, iSO9796d1Encoding1.getInputBlockSize());
      assertEquals(0, iSO9796d1Encoding1.getPadBits());
  }

  @Test
  public void test6()  throws Throwable  {
      RSAEngine rSAEngine0 = new RSAEngine();
      ISO9796d1Encoding iSO9796d1Encoding0 = new ISO9796d1Encoding((AsymmetricBlockCipher) rSAEngine0);
      BigInteger bigInteger0 = ECConstants.ZERO;
      RSAKeyParameters rSAKeyParameters0 = new RSAKeyParameters(true, bigInteger0, bigInteger0);
      iSO9796d1Encoding0.init(true, (CipherParameters) rSAKeyParameters0);
      int int0 = iSO9796d1Encoding0.getOutputBlockSize();
      assertEquals(0, int0);
      assertEquals(0, iSO9796d1Encoding0.getPadBits());
      assertEquals(0, iSO9796d1Encoding0.getInputBlockSize());
      assertEquals(0, rSAEngine0.getOutputBlockSize());
  }

  @Test
  public void test7()  throws Throwable  {
      RSAEngine rSAEngine0 = new RSAEngine();
      ISO9796d1Encoding iSO9796d1Encoding0 = new ISO9796d1Encoding((AsymmetricBlockCipher) rSAEngine0);
      iSO9796d1Encoding0.setPadBits((int) (byte)0);
      assertEquals(0, iSO9796d1Encoding0.getPadBits());
  }

  @Test
  public void test8()  throws Throwable  {
      ISO9796d1Encoding iSO9796d1Encoding0 = new ISO9796d1Encoding((AsymmetricBlockCipher) null);
      // Undeclared exception!
      try {
        iSO9796d1Encoding0.setPadBits(1012);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * padBits > 7
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      ISO9796d1Encoding iSO9796d1Encoding0 = new ISO9796d1Encoding((AsymmetricBlockCipher) null);
      byte[] byteArray0 = new byte[15];
      // Undeclared exception!
      try {
        iSO9796d1Encoding0.processBlock(byteArray0, (int) (byte) (-104), (int) (byte)0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      RSAEngine rSAEngine0 = new RSAEngine();
      ISO9796d1Encoding iSO9796d1Encoding0 = new ISO9796d1Encoding((AsymmetricBlockCipher) rSAEngine0);
      BigInteger bigInteger0 = ECConstants.ZERO;
      RSAKeyParameters rSAKeyParameters0 = new RSAKeyParameters(true, bigInteger0, bigInteger0);
      iSO9796d1Encoding0.init(true, (CipherParameters) rSAKeyParameters0);
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try {
        iSO9796d1Encoding0.processBlock(byteArray0, (int) (byte) (-11), (int) (byte) (-11));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 22
         */
      }
  }
}
