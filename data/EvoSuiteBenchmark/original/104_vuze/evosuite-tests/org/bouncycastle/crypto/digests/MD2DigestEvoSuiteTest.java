/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.crypto.digests;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.bouncycastle.crypto.digests.MD2Digest;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MD2DigestEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      MD2Digest mD2Digest0 = new MD2Digest();
      MD2Digest mD2Digest1 = new MD2Digest(mD2Digest0);
      assertFalse(mD2Digest1.equals(mD2Digest0));
  }

  @Test
  public void test1()  throws Throwable  {
      MD2Digest mD2Digest0 = new MD2Digest();
      assertNotNull(mD2Digest0);
      
      int int0 = mD2Digest0.getDigestSize();
      assertEquals(16, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      MD2Digest mD2Digest0 = new MD2Digest();
      assertNotNull(mD2Digest0);
      
      String string0 = mD2Digest0.getAlgorithmName();
      assertEquals("MD2", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      MD2Digest mD2Digest0 = new MD2Digest();
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try {
        mD2Digest0.doFinal(byteArray0, (-48));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      MD2Digest mD2Digest0 = new MD2Digest();
      mD2Digest0.update((byte)41);
      byte[] byteArray0 = new byte[24];
      // Undeclared exception!
      try {
        mD2Digest0.update(byteArray0, 0, (int) (byte)41);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      MD2Digest mD2Digest0 = new MD2Digest();
      mD2Digest0.update((byte) (-92));
      byte[] byteArray0 = new byte[2];
      mD2Digest0.update(byteArray0, (int) (byte) (-92), (int) (byte) (-92));
      assertEquals(16, mD2Digest0.getDigestSize());
  }

  @Test
  public void test6()  throws Throwable  {
      MD2Digest mD2Digest0 = new MD2Digest();
      byte[] byteArray0 = new byte[3];
      mD2Digest0.update(byteArray0, 1, 1);
      assertEquals(16, mD2Digest0.getDigestSize());
  }
}
