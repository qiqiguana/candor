/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.crypto.digests;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.bouncycastle.crypto.digests.SHA1Digest;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SHA1DigestEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SHA1Digest sHA1Digest0 = new SHA1Digest();
      byte[] byteArray0 = new byte[49];
      int int0 = sHA1Digest0.doFinal(byteArray0, (int) (byte)20);
      assertEquals(20, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      SHA1Digest sHA1Digest0 = new SHA1Digest();
      assertNotNull(sHA1Digest0);
      
      String string0 = sHA1Digest0.getAlgorithmName();
      assertEquals("SHA-1", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      SHA1Digest sHA1Digest0 = new SHA1Digest();
      assertNotNull(sHA1Digest0);
      
      int int0 = sHA1Digest0.getDigestSize();
      assertEquals(20, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      SHA1Digest sHA1Digest0 = new SHA1Digest();
      SHA1Digest sHA1Digest1 = new SHA1Digest(sHA1Digest0);
      assertEquals(20, sHA1Digest1.getDigestSize());
  }

  @Test
  public void test4()  throws Throwable  {
      SHA1Digest sHA1Digest0 = new SHA1Digest();
      byte[] byteArray0 = new byte[49];
      sHA1Digest0.processWord(byteArray0, (int) (byte)20);
      sHA1Digest0.processWord(byteArray0, (int) (byte)20);
      sHA1Digest0.processWord(byteArray0, (int) (byte)20);
      sHA1Digest0.processWord(byteArray0, (int) (byte)20);
      sHA1Digest0.processWord(byteArray0, (int) (byte)0);
      sHA1Digest0.processWord(byteArray0, (int) (byte)0);
      sHA1Digest0.update(byteArray0, (int) (byte)20, (int) (byte)20);
      sHA1Digest0.update(byteArray0, 1, (int) (byte)20);
      assertEquals(20, sHA1Digest0.getDigestSize());
  }

  @Test
  public void test5()  throws Throwable  {
      SHA1Digest sHA1Digest0 = new SHA1Digest();
      byte[] byteArray0 = new byte[49];
      sHA1Digest0.processWord(byteArray0, (int) (byte)20);
      sHA1Digest0.processWord(byteArray0, (int) (byte)20);
      sHA1Digest0.processWord(byteArray0, (int) (byte)20);
      sHA1Digest0.processWord(byteArray0, (int) (byte)20);
      sHA1Digest0.processWord(byteArray0, (int) (byte)0);
      sHA1Digest0.processWord(byteArray0, (int) (byte)0);
      sHA1Digest0.processWord(byteArray0, (int) (byte)20);
      sHA1Digest0.processWord(byteArray0, (int) (byte)0);
      sHA1Digest0.processWord(byteArray0, (int) (byte)0);
      sHA1Digest0.processWord(byteArray0, (int) (byte)0);
      sHA1Digest0.processWord(byteArray0, (int) (byte)0);
      sHA1Digest0.processWord(byteArray0, (int) (byte)0);
      sHA1Digest0.processWord(byteArray0, (int) (byte)20);
      sHA1Digest0.processWord(byteArray0, (int) (byte)20);
      int int0 = sHA1Digest0.doFinal(byteArray0, (int) (byte)20);
      assertEquals(20, int0);
  }
}
