/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.crypto.encodings;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.math.BigInteger;
import org.bouncycastle.crypto.AsymmetricBlockCipher;
import org.bouncycastle.crypto.CipherParameters;
import org.bouncycastle.crypto.InvalidCipherTextException;
import org.bouncycastle.crypto.encodings.ISO9796d1Encoding;
import org.bouncycastle.crypto.encodings.PKCS1Encoding;
import org.bouncycastle.crypto.engines.RSAEngine;
import org.bouncycastle.crypto.params.ParametersWithRandom;
import org.bouncycastle.crypto.params.RSAKeyParameters;
import org.bouncycastle.math.ec.ECConstants;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PKCS1EncodingEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      RSAEngine rSAEngine0 = new RSAEngine();
      PKCS1Encoding pKCS1Encoding0 = new PKCS1Encoding((AsymmetricBlockCipher) rSAEngine0);
      RSAEngine rSAEngine1 = (RSAEngine)pKCS1Encoding0.getUnderlyingCipher();
      assertSame(rSAEngine0, rSAEngine1);
  }

  @Test
  public void test1()  throws Throwable  {
      RSAEngine rSAEngine0 = new RSAEngine();
      ISO9796d1Encoding iSO9796d1Encoding0 = new ISO9796d1Encoding((AsymmetricBlockCipher) rSAEngine0);
      PKCS1Encoding pKCS1Encoding0 = new PKCS1Encoding((AsymmetricBlockCipher) iSO9796d1Encoding0);
      BigInteger bigInteger0 = ECConstants.ONE;
      RSAKeyParameters rSAKeyParameters0 = new RSAKeyParameters(false, bigInteger0, bigInteger0);
      pKCS1Encoding0.init(true, (CipherParameters) rSAKeyParameters0);
      int int0 = pKCS1Encoding0.getOutputBlockSize();
      assertEquals(1, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      RSAEngine rSAEngine0 = new RSAEngine();
      PKCS1Encoding pKCS1Encoding0 = new PKCS1Encoding((AsymmetricBlockCipher) rSAEngine0);
      ParametersWithRandom parametersWithRandom0 = new ParametersWithRandom((CipherParameters) null);
      // Undeclared exception!
      try {
        pKCS1Encoding0.init(false, (CipherParameters) parametersWithRandom0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      RSAEngine rSAEngine0 = new RSAEngine();
      PKCS1Encoding pKCS1Encoding0 = new PKCS1Encoding((AsymmetricBlockCipher) rSAEngine0);
      BigInteger bigInteger0 = ECConstants.ONE;
      RSAKeyParameters rSAKeyParameters0 = new RSAKeyParameters(false, bigInteger0, bigInteger0);
      PKCS1Encoding pKCS1Encoding1 = new PKCS1Encoding((AsymmetricBlockCipher) rSAEngine0);
      pKCS1Encoding1.init(true, (CipherParameters) rSAKeyParameters0);
      assertEquals(-10, pKCS1Encoding1.getInputBlockSize());
      
      int int0 = pKCS1Encoding0.getInputBlockSize();
      assertEquals(0, int0);
  }

  @Test
  public void test4()  throws Throwable  {
      RSAEngine rSAEngine0 = new RSAEngine();
      PKCS1Encoding pKCS1Encoding0 = new PKCS1Encoding((AsymmetricBlockCipher) rSAEngine0);
      BigInteger bigInteger0 = ECConstants.ONE;
      RSAKeyParameters rSAKeyParameters0 = new RSAKeyParameters(true, bigInteger0, bigInteger0);
      pKCS1Encoding0.init(true, (CipherParameters) rSAKeyParameters0);
      int int0 = pKCS1Encoding0.getInputBlockSize();
      assertEquals(-10, pKCS1Encoding0.getInputBlockSize());
      assertEquals((-10), int0);
  }

  @Test
  public void test5()  throws Throwable  {
      RSAEngine rSAEngine0 = new RSAEngine();
      ISO9796d1Encoding iSO9796d1Encoding0 = new ISO9796d1Encoding((AsymmetricBlockCipher) rSAEngine0);
      PKCS1Encoding pKCS1Encoding0 = new PKCS1Encoding((AsymmetricBlockCipher) rSAEngine0);
      BigInteger bigInteger0 = ECConstants.ONE;
      RSAKeyParameters rSAKeyParameters0 = new RSAKeyParameters(true, bigInteger0, bigInteger0);
      PKCS1Encoding pKCS1Encoding1 = new PKCS1Encoding((AsymmetricBlockCipher) iSO9796d1Encoding0);
      byte[] byteArray0 = new byte[8];
      pKCS1Encoding1.init(true, (CipherParameters) rSAKeyParameters0);
      assertEquals(1, pKCS1Encoding1.getOutputBlockSize());
      
      try {
        pKCS1Encoding0.processBlock(byteArray0, (int) (byte)0, (int) (byte)0);
        fail("Expecting exception: InvalidCipherTextException");
      } catch(InvalidCipherTextException e) {
        /*
         * unknown block type
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      RSAEngine rSAEngine0 = new RSAEngine();
      PKCS1Encoding pKCS1Encoding0 = new PKCS1Encoding((AsymmetricBlockCipher) rSAEngine0);
      BigInteger bigInteger0 = ECConstants.ONE;
      RSAKeyParameters rSAKeyParameters0 = new RSAKeyParameters(true, bigInteger0, bigInteger0);
      PKCS1Encoding pKCS1Encoding1 = new PKCS1Encoding((AsymmetricBlockCipher) rSAEngine0);
      byte[] byteArray0 = new byte[7];
      pKCS1Encoding1.init(true, (CipherParameters) rSAKeyParameters0);
      pKCS1Encoding0.init(false, (CipherParameters) rSAKeyParameters0);
      // Undeclared exception!
      try {
        pKCS1Encoding1.processBlock(byteArray0, (int) (byte) (-1), (int) (byte) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      RSAEngine rSAEngine0 = new RSAEngine();
      PKCS1Encoding pKCS1Encoding0 = new PKCS1Encoding((AsymmetricBlockCipher) rSAEngine0);
      BigInteger bigInteger0 = ECConstants.ONE;
      RSAKeyParameters rSAKeyParameters0 = new RSAKeyParameters(true, bigInteger0, bigInteger0);
      PKCS1Encoding pKCS1Encoding1 = new PKCS1Encoding((AsymmetricBlockCipher) rSAEngine0);
      byte[] byteArray0 = new byte[7];
      pKCS1Encoding1.init(true, (CipherParameters) rSAKeyParameters0);
      pKCS1Encoding0.init(false, (CipherParameters) rSAKeyParameters0);
      // Undeclared exception!
      try {
        pKCS1Encoding1.processBlock(byteArray0, (int) (byte) (-19), (int) (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      RSAEngine rSAEngine0 = new RSAEngine();
      PKCS1Encoding pKCS1Encoding0 = new PKCS1Encoding((AsymmetricBlockCipher) rSAEngine0);
      BigInteger bigInteger0 = ECConstants.ONE;
      RSAKeyParameters rSAKeyParameters0 = new RSAKeyParameters(false, bigInteger0, bigInteger0);
      PKCS1Encoding pKCS1Encoding1 = new PKCS1Encoding((AsymmetricBlockCipher) rSAEngine0);
      byte[] byteArray0 = new byte[7];
      pKCS1Encoding1.init(true, (CipherParameters) rSAKeyParameters0);
      pKCS1Encoding0.init(false, (CipherParameters) rSAKeyParameters0);
      // Undeclared exception!
      try {
        pKCS1Encoding1.processBlock(byteArray0, (int) (byte) (-1), (int) (byte) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      RSAEngine rSAEngine0 = new RSAEngine();
      ISO9796d1Encoding iSO9796d1Encoding0 = new ISO9796d1Encoding((AsymmetricBlockCipher) rSAEngine0);
      PKCS1Encoding pKCS1Encoding0 = new PKCS1Encoding((AsymmetricBlockCipher) iSO9796d1Encoding0);
      BigInteger bigInteger0 = ECConstants.ONE;
      RSAKeyParameters rSAKeyParameters0 = new RSAKeyParameters(false, bigInteger0, bigInteger0);
      PKCS1Encoding pKCS1Encoding1 = new PKCS1Encoding((AsymmetricBlockCipher) rSAEngine0);
      byte[] byteArray0 = new byte[6];
      pKCS1Encoding1.init(true, (CipherParameters) rSAKeyParameters0);
      pKCS1Encoding0.init(false, (CipherParameters) rSAKeyParameters0);
      // Undeclared exception!
      try {
        pKCS1Encoding1.processBlock(byteArray0, (int) (byte)0, (int) (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }
}
