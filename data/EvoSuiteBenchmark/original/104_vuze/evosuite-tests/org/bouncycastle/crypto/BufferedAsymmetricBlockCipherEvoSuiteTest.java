/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.crypto;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.math.BigInteger;
import org.bouncycastle.crypto.AsymmetricBlockCipher;
import org.bouncycastle.crypto.BufferedAsymmetricBlockCipher;
import org.bouncycastle.crypto.CipherParameters;
import org.bouncycastle.crypto.DataLengthException;
import org.bouncycastle.crypto.InvalidCipherTextException;
import org.bouncycastle.crypto.engines.RSAEngine;
import org.bouncycastle.crypto.params.RSAKeyParameters;
import org.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters;
import org.bouncycastle.math.ec.ECConstants;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BufferedAsymmetricBlockCipherEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BufferedAsymmetricBlockCipher bufferedAsymmetricBlockCipher0 = new BufferedAsymmetricBlockCipher((AsymmetricBlockCipher) null);
      AsymmetricBlockCipher asymmetricBlockCipher0 = bufferedAsymmetricBlockCipher0.getUnderlyingCipher();
      assertNull(asymmetricBlockCipher0);
  }

  @Test
  public void test1()  throws Throwable  {
      RSAEngine rSAEngine0 = new RSAEngine();
      BufferedAsymmetricBlockCipher bufferedAsymmetricBlockCipher0 = new BufferedAsymmetricBlockCipher((AsymmetricBlockCipher) rSAEngine0);
      BigInteger bigInteger0 = ECConstants.THREE;
      RSAPrivateCrtKeyParameters rSAPrivateCrtKeyParameters0 = new RSAPrivateCrtKeyParameters(bigInteger0, bigInteger0, bigInteger0, bigInteger0, bigInteger0, bigInteger0, bigInteger0, bigInteger0);
      bufferedAsymmetricBlockCipher0.init(false, (CipherParameters) rSAPrivateCrtKeyParameters0);
      bufferedAsymmetricBlockCipher0.processByte((byte)12);
      assertEquals(1, bufferedAsymmetricBlockCipher0.getBufferPosition());
  }

  @Test
  public void test2()  throws Throwable  {
      RSAEngine rSAEngine0 = new RSAEngine();
      BufferedAsymmetricBlockCipher bufferedAsymmetricBlockCipher0 = new BufferedAsymmetricBlockCipher((AsymmetricBlockCipher) rSAEngine0);
      // Undeclared exception!
      try {
        bufferedAsymmetricBlockCipher0.getInputBlockSize();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      BufferedAsymmetricBlockCipher bufferedAsymmetricBlockCipher0 = new BufferedAsymmetricBlockCipher((AsymmetricBlockCipher) null);
      int int0 = bufferedAsymmetricBlockCipher0.getBufferPosition();
      assertEquals(0, int0);
  }

  @Test
  public void test4()  throws Throwable  {
      BufferedAsymmetricBlockCipher bufferedAsymmetricBlockCipher0 = new BufferedAsymmetricBlockCipher((AsymmetricBlockCipher) null);
      // Undeclared exception!
      try {
        bufferedAsymmetricBlockCipher0.getOutputBlockSize();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      RSAEngine rSAEngine0 = new RSAEngine();
      byte[] byteArray0 = new byte[7];
      BufferedAsymmetricBlockCipher bufferedAsymmetricBlockCipher0 = new BufferedAsymmetricBlockCipher((AsymmetricBlockCipher) rSAEngine0);
      bufferedAsymmetricBlockCipher0.processBytes(byteArray0, 0, 0);
      assertEquals(0, bufferedAsymmetricBlockCipher0.getBufferPosition());
  }

  @Test
  public void test6()  throws Throwable  {
      RSAEngine rSAEngine0 = new RSAEngine();
      BufferedAsymmetricBlockCipher bufferedAsymmetricBlockCipher0 = new BufferedAsymmetricBlockCipher((AsymmetricBlockCipher) rSAEngine0);
      byte[] byteArray0 = new byte[21];
      // Undeclared exception!
      try {
        bufferedAsymmetricBlockCipher0.processBytes(byteArray0, (int) (byte)0, (int) (byte) (-93));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Can't have a negative input length!
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      RSAEngine rSAEngine0 = new RSAEngine();
      BufferedAsymmetricBlockCipher bufferedAsymmetricBlockCipher0 = new BufferedAsymmetricBlockCipher((AsymmetricBlockCipher) rSAEngine0);
      BigInteger bigInteger0 = ECConstants.THREE;
      RSAPrivateCrtKeyParameters rSAPrivateCrtKeyParameters0 = new RSAPrivateCrtKeyParameters(bigInteger0, bigInteger0, bigInteger0, bigInteger0, bigInteger0, bigInteger0, bigInteger0, bigInteger0);
      bufferedAsymmetricBlockCipher0.init(false, (CipherParameters) rSAPrivateCrtKeyParameters0);
      byte[] byteArray0 = new byte[2];
      bufferedAsymmetricBlockCipher0.processBytes(byteArray0, (int) (byte)0, 1);
      assertEquals(1, bufferedAsymmetricBlockCipher0.getBufferPosition());
  }

  @Test
  public void test8()  throws Throwable  {
      RSAEngine rSAEngine0 = new RSAEngine();
      byte[] byteArray0 = new byte[7];
      BufferedAsymmetricBlockCipher bufferedAsymmetricBlockCipher0 = new BufferedAsymmetricBlockCipher((AsymmetricBlockCipher) rSAEngine0);
      BigInteger bigInteger0 = ECConstants.TWO;
      RSAKeyParameters rSAKeyParameters0 = new RSAKeyParameters(true, bigInteger0, bigInteger0);
      bufferedAsymmetricBlockCipher0.init(true, (CipherParameters) rSAKeyParameters0);
      // Undeclared exception!
      try {
        bufferedAsymmetricBlockCipher0.processBytes(byteArray0, (int) (byte)0, 12);
        fail("Expecting exception: DataLengthException");
      } catch(DataLengthException e) {
        /*
         * attempt to process message to long for cipher
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      RSAEngine rSAEngine0 = new RSAEngine();
      BufferedAsymmetricBlockCipher bufferedAsymmetricBlockCipher0 = new BufferedAsymmetricBlockCipher((AsymmetricBlockCipher) rSAEngine0);
      BigInteger bigInteger0 = ECConstants.THREE;
      RSAPrivateCrtKeyParameters rSAPrivateCrtKeyParameters0 = new RSAPrivateCrtKeyParameters(bigInteger0, bigInteger0, bigInteger0, bigInteger0, bigInteger0, bigInteger0, bigInteger0, bigInteger0);
      bufferedAsymmetricBlockCipher0.init(false, (CipherParameters) rSAPrivateCrtKeyParameters0);
      byte[] byteArray0 = bufferedAsymmetricBlockCipher0.doFinal();
      assertEquals(0, rSAEngine0.getOutputBlockSize());
      assertEquals(0, bufferedAsymmetricBlockCipher0.getBufferPosition());
      assertNotNull(byteArray0);
      assertEquals(1, bufferedAsymmetricBlockCipher0.getInputBlockSize());
  }
}
