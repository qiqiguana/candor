/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1.pkcs;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.math.BigInteger;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.BERSequence;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.asn1.pkcs.RC2CBCParameter;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class RC2CBCParameterEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      RC2CBCParameter rC2CBCParameter0 = new RC2CBCParameter(byteArray0);
      assertNotNull(rC2CBCParameter0);
  }

  @Test
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      RC2CBCParameter rC2CBCParameter0 = new RC2CBCParameter(1329, byteArray0);
      byte[] byteArray1 = rC2CBCParameter0.getIV();
      assertSame(byteArray0, byteArray1);
  }

  @Test
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try {
        RC2CBCParameter.getInstance((Object) "DER");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * unknown object in RC2CBCParameter factory
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      BERSequence bERSequence0 = new BERSequence();
      // Undeclared exception!
      try {
        RC2CBCParameter.getInstance((Object) bERSequence0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 0 >= 0
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      BERSequence bERSequence0 = new BERSequence((DEREncodable) null);
      RC2CBCParameter rC2CBCParameter0 = new RC2CBCParameter((ASN1Sequence) bERSequence0);
      BigInteger bigInteger0 = rC2CBCParameter0.getRC2ParameterVersion();
      assertNull(bigInteger0);
  }

  @Test
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      RC2CBCParameter rC2CBCParameter0 = new RC2CBCParameter((int) (byte)15, byteArray0);
      BigInteger bigInteger0 = rC2CBCParameter0.getRC2ParameterVersion();
      assertNotNull(bigInteger0);
      assertEquals(15.0F, bigInteger0.floatValue(), 0.01F);
  }

  @Test
  public void test6()  throws Throwable  {
      BERSequence bERSequence0 = new BERSequence((DEREncodable) null);
      RC2CBCParameter rC2CBCParameter0 = new RC2CBCParameter((ASN1Sequence) bERSequence0);
      assertNotNull(rC2CBCParameter0);
      
      DERSequence dERSequence0 = (DERSequence)rC2CBCParameter0.getDERObject();
      assertEquals(1, dERSequence0.size());
  }

  @Test
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      RC2CBCParameter rC2CBCParameter0 = new RC2CBCParameter(496, byteArray0);
      DERSequence dERSequence0 = (DERSequence)rC2CBCParameter0.getDERObject();
      assertEquals("[496, #0000000000]", dERSequence0.toString());
  }
}
