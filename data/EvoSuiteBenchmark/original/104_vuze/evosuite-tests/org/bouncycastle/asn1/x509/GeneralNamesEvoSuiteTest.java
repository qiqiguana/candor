/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1.x509;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Date;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.ASN1TaggedObject;
import org.bouncycastle.asn1.BERConstructedSequence;
import org.bouncycastle.asn1.BERTaggedObject;
import org.bouncycastle.asn1.DERObject;
import org.bouncycastle.asn1.DERUTCTime;
import org.bouncycastle.asn1.x509.GeneralName;
import org.bouncycastle.asn1.x509.GeneralNames;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class GeneralNamesEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      GeneralNames generalNames0 = new GeneralNames((ASN1Sequence) bERConstructedSequence0);
      BERConstructedSequence bERConstructedSequence1 = (BERConstructedSequence)generalNames0.toASN1Object();
      assertEquals(0, bERConstructedSequence1.getSize());
  }

  @Test
  public void test1()  throws Throwable  {
      Date date0 = new Date(102L);
      DERUTCTime dERUTCTime0 = new DERUTCTime(date0);
      GeneralName generalName0 = new GeneralName((DERObject) dERUTCTime0, 1666);
      GeneralNames generalNames0 = new GeneralNames(generalName0);
      String string0 = generalNames0.toString();
      assertNotNull(string0);
      assertEquals("GeneralNames:\n    1666: 700101000000Z\n", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject(0);
      GeneralNames generalNames0 = GeneralNames.getInstance((ASN1TaggedObject) bERTaggedObject0, false);
      assertEquals("GeneralNames:\n", generalNames0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      GeneralNames generalNames0 = GeneralNames.getInstance((Object) null);
      assertNull(generalNames0);
  }

  @Test
  public void test4()  throws Throwable  {
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      GeneralNames generalNames0 = new GeneralNames((ASN1Sequence) bERConstructedSequence0);
      GeneralNames generalNames1 = GeneralNames.getInstance((Object) generalNames0);
      assertSame(generalNames0, generalNames1);
  }

  @Test
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try {
        GeneralNames.getInstance((Object) "BER");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * illegal object in getInstance: java.lang.String
         */
      }
  }
}
