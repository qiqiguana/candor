/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import org.bouncycastle.asn1.DERInputStream;
import org.bouncycastle.asn1.DERT61String;
import org.bouncycastle.asn1.DERTaggedObject;
import org.bouncycastle.asn1.DERUnknownTag;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DERInputStreamEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1978);
      DERInputStream dERInputStream0 = new DERInputStream((InputStream) pipedInputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte) (-27);
      try {
        dERInputStream0.buildObject((-330), byteArray0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * DER length more than 4 bytes
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(8);
      DERInputStream dERInputStream0 = new DERInputStream((InputStream) pipedInputStream0);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)9;
      DERTaggedObject dERTaggedObject0 = (DERTaggedObject)dERInputStream0.buildObject(1262, byteArray0);
      assertEquals(false, dERTaggedObject0.isEmpty());
  }

  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DERInputStream dERInputStream0 = new DERInputStream((InputStream) byteArrayInputStream0);
      dERInputStream0.readObject();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, dERInputStream0.read());
  }

  @Test
  public void test3()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(8);
      DERInputStream dERInputStream0 = new DERInputStream((InputStream) pipedInputStream0);
      byte[] byteArray0 = new byte[10];
      byteArray0[3] = (byte)58;
      DERTaggedObject dERTaggedObject0 = (DERTaggedObject)dERInputStream0.buildObject(1262, byteArray0);
      assertEquals(14, dERTaggedObject0.getTagNo());
      assertNotNull(dERTaggedObject0);
  }

  @Test
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DERInputStream dERInputStream0 = new DERInputStream((InputStream) byteArrayInputStream0);
      assertEquals(0, dERInputStream0.readLength());
      
      // Undeclared exception!
      DERUnknownTag dERUnknownTag0 = null;
      try {
        dERUnknownTag0 = (DERUnknownTag)dERInputStream0.readObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 0
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      DERInputStream dERInputStream0 = new DERInputStream((InputStream) null);
      byte[] byteArray0 = new byte[9];
      DERUnknownTag dERUnknownTag0 = (DERUnknownTag)dERInputStream0.buildObject(5, byteArray0);
      assertNull(dERUnknownTag0);
  }

  @Test
  public void test6()  throws Throwable  {
      DERInputStream dERInputStream0 = new DERInputStream((InputStream) null);
      byte[] byteArray0 = new byte[10];
      DERUnknownTag dERUnknownTag0 = (DERUnknownTag)dERInputStream0.buildObject(7, byteArray0);
      assertEquals(7, dERUnknownTag0.getTag());
      assertNotNull(dERUnknownTag0);
  }

  @Test
  public void test7()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(8);
      DERInputStream dERInputStream0 = new DERInputStream((InputStream) pipedInputStream0);
      byte[] byteArray0 = new byte[4];
      DERUnknownTag dERUnknownTag0 = (DERUnknownTag)dERInputStream0.buildObject(8, byteArray0);
      assertEquals(8, dERUnknownTag0.getTag());
      assertNotNull(dERUnknownTag0);
  }

  @Test
  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DERInputStream dERInputStream0 = new DERInputStream((InputStream) byteArrayInputStream0);
      dERInputStream0.readObject();
  }

  @Test
  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DERInputStream dERInputStream0 = new DERInputStream((InputStream) byteArrayInputStream0);
      DERT61String dERT61String0 = (DERT61String)dERInputStream0.buildObject((int) (byte)20, byteArray0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", dERT61String0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)23;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DERInputStream dERInputStream0 = new DERInputStream((InputStream) byteArrayInputStream0);
      dERInputStream0.readObject();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(-1, byteArrayInputStream0.read());
  }

  @Test
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DERInputStream dERInputStream0 = new DERInputStream((InputStream) byteArrayInputStream0);
      byteArray0[0] = (byte)29;
      dERInputStream0.readObject();
      assertEquals(-1, dERInputStream0.read());
      assertEquals(-1, byteArrayInputStream0.read());
  }

  @Test
  public void test12()  throws Throwable  {
      FileDescriptor fileDescriptor0 = FileDescriptor.in;
      FileInputStream fileInputStream0 = new FileInputStream(fileDescriptor0);
      DERInputStream dERInputStream0 = new DERInputStream((InputStream) fileInputStream0);
      byte[] byteArray0 = new byte[9];
      DERUnknownTag dERUnknownTag0 = (DERUnknownTag)dERInputStream0.buildObject((int) (byte)41, byteArray0);
      assertNotNull(dERUnknownTag0);
      assertEquals(41, dERUnknownTag0.getTag());
  }

  @Test
  public void test13()  throws Throwable  {
      FileDescriptor fileDescriptor0 = FileDescriptor.in;
      FileInputStream fileInputStream0 = new FileInputStream(fileDescriptor0);
      DERInputStream dERInputStream0 = new DERInputStream((InputStream) fileInputStream0);
      byte[] byteArray0 = new byte[9];
      DERUnknownTag dERUnknownTag0 = (DERUnknownTag)dERInputStream0.buildObject(43, byteArray0);
      assertEquals(43, dERUnknownTag0.getTag());
      assertNotNull(dERUnknownTag0);
  }

  @Test
  public void test14()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1983);
      DERInputStream dERInputStream0 = new DERInputStream((InputStream) pipedInputStream0);
      byte[] byteArray0 = new byte[5];
      try {
        dERInputStream0.buildObject(1983, byteArray0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * unsupported high tag encountered
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1978);
      DERInputStream dERInputStream0 = new DERInputStream((InputStream) pipedInputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-86);
      try {
        dERInputStream0.buildObject((-330), byteArray0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * EOF found when length expected
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-105);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) byteArrayInputStream0, 1348);
      DERInputStream dERInputStream0 = new DERInputStream((InputStream) pushbackInputStream0);
      dERInputStream0.readObject();
  }

  @Test
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) byteArrayInputStream0, 1348);
      DERInputStream dERInputStream0 = new DERInputStream((InputStream) pushbackInputStream0);
      byte[] byteArray1 = new byte[4];
      DERTaggedObject dERTaggedObject0 = (DERTaggedObject)dERInputStream0.buildObject((int) (byte) (-105), byteArray1);
      assertNotNull(dERTaggedObject0);
      assertEquals(23, dERTaggedObject0.getTagNo());
  }

  @Test
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-996), (-996));
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) byteArrayInputStream0, 1422);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) pushbackInputStream0);
      DERInputStream dERInputStream0 = new DERInputStream((InputStream) bufferedInputStream0);
      try {
        dERInputStream0.readObject();
        fail("Expecting exception: EOFException");
      } catch(EOFException e) {
      }
  }
}
