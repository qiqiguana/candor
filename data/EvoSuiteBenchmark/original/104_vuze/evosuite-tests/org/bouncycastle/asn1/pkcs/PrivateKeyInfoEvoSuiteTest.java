/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1.pkcs;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.math.BigInteger;
import org.bouncycastle.asn1.ASN1Set;
import org.bouncycastle.asn1.ASN1TaggedObject;
import org.bouncycastle.asn1.BERTaggedObject;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DEREncodableVector;
import org.bouncycastle.asn1.DERInteger;
import org.bouncycastle.asn1.DERObject;
import org.bouncycastle.asn1.DERSet;
import org.bouncycastle.asn1.DERTaggedObject;
import org.bouncycastle.asn1.pkcs.PrivateKeyInfo;
import org.bouncycastle.asn1.x509.AlgorithmIdentifier;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PrivateKeyInfoEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject((-637), (DEREncodable) null);
      AlgorithmIdentifier algorithmIdentifier0 = AlgorithmIdentifier.getInstance((ASN1TaggedObject) dERTaggedObject0, false);
      DEREncodableVector dEREncodableVector0 = new DEREncodableVector();
      DERSet dERSet0 = new DERSet(dEREncodableVector0);
      PrivateKeyInfo privateKeyInfo0 = new PrivateKeyInfo(algorithmIdentifier0, (DERObject) dERTaggedObject0, (ASN1Set) dERSet0);
      DERTaggedObject dERTaggedObject1 = (DERTaggedObject)privateKeyInfo0.getPrivateKey();
      assertEquals(true, dERTaggedObject1.isExplicit());
  }

  @Test
  public void test1()  throws Throwable  {
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject((-637), (DEREncodable) null);
      AlgorithmIdentifier algorithmIdentifier0 = AlgorithmIdentifier.getInstance((ASN1TaggedObject) dERTaggedObject0, false);
      DEREncodableVector dEREncodableVector0 = new DEREncodableVector();
      DERSet dERSet0 = new DERSet(dEREncodableVector0);
      PrivateKeyInfo privateKeyInfo0 = new PrivateKeyInfo(algorithmIdentifier0, (DERObject) dERTaggedObject0, (ASN1Set) dERSet0);
      DERSet dERSet1 = (DERSet)privateKeyInfo0.getAttributes();
      assertEquals("[]", dERSet1.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      PrivateKeyInfo privateKeyInfo0 = new PrivateKeyInfo((AlgorithmIdentifier) null, (DERObject) null);
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject((-1682), (DEREncodable) privateKeyInfo0);
      // Undeclared exception!
      try {
        PrivateKeyInfo.getInstance((ASN1TaggedObject) dERTaggedObject0, true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject((-637), (DEREncodable) null);
      AlgorithmIdentifier algorithmIdentifier0 = AlgorithmIdentifier.getInstance((ASN1TaggedObject) dERTaggedObject0, false);
      DEREncodableVector dEREncodableVector0 = new DEREncodableVector();
      DERSet dERSet0 = new DERSet(dEREncodableVector0);
      PrivateKeyInfo privateKeyInfo0 = new PrivateKeyInfo(algorithmIdentifier0, (DERObject) dERTaggedObject0, (ASN1Set) dERSet0);
      AlgorithmIdentifier algorithmIdentifier1 = privateKeyInfo0.getAlgorithmId();
      assertSame(algorithmIdentifier0, algorithmIdentifier1);
  }

  @Test
  public void test4()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      DERInteger dERInteger0 = new DERInteger(bigInteger0);
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject(1571, (DEREncodable) dERInteger0);
      // Undeclared exception!
      try {
        PrivateKeyInfo.getInstance((ASN1TaggedObject) bERTaggedObject0, false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * wrong version for private key info
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject((-637), (DEREncodable) null);
      AlgorithmIdentifier algorithmIdentifier0 = AlgorithmIdentifier.getInstance((ASN1TaggedObject) dERTaggedObject0, false);
      DEREncodableVector dEREncodableVector0 = new DEREncodableVector();
      DERSet dERSet0 = new DERSet(dEREncodableVector0);
      PrivateKeyInfo privateKeyInfo0 = new PrivateKeyInfo(algorithmIdentifier0, (DERObject) dERTaggedObject0, (ASN1Set) dERSet0);
      PrivateKeyInfo privateKeyInfo1 = PrivateKeyInfo.getInstance((Object) privateKeyInfo0);
      assertSame(privateKeyInfo1, privateKeyInfo0);
  }

  @Test
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try {
        PrivateKeyInfo.getInstance((Object) "DER");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * unknown object in factory
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject((-637), (DEREncodable) null);
      AlgorithmIdentifier algorithmIdentifier0 = AlgorithmIdentifier.getInstance((ASN1TaggedObject) dERTaggedObject0, false);
      DEREncodableVector dEREncodableVector0 = new DEREncodableVector();
      DERSet dERSet0 = new DERSet(dEREncodableVector0);
      PrivateKeyInfo privateKeyInfo0 = new PrivateKeyInfo(algorithmIdentifier0, (DERObject) dERTaggedObject0, (ASN1Set) dERSet0);
      int int0 = privateKeyInfo0.hashCode();
      assertEquals(179, int0);
  }
}
