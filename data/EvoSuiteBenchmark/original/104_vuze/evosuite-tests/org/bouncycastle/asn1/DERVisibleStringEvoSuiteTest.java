/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.bouncycastle.asn1.ASN1OctetString;
import org.bouncycastle.asn1.ASN1TaggedObject;
import org.bouncycastle.asn1.BERConstructedOctetString;
import org.bouncycastle.asn1.BERTaggedObject;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DERInteger;
import org.bouncycastle.asn1.DERObject;
import org.bouncycastle.asn1.DERTaggedObject;
import org.bouncycastle.asn1.DERVisibleString;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DERVisibleStringEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DERVisibleString dERVisibleString0 = new DERVisibleString("wQpE{BnWP)Soo7W");
      byte[] byteArray0 = dERVisibleString0.getDEREncoded();
      assertNotNull(byteArray0);
      assertEquals("wQpE{BnWP)Soo7W", dERVisibleString0.toString());
      assertEquals("wQpE{BnWP)Soo7W", dERVisibleString0.getString());
  }

  @Test
  public void test1()  throws Throwable  {
      DERVisibleString dERVisibleString0 = new DERVisibleString((String) null);
      String string0 = dERVisibleString0.toString();
      assertNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      DERVisibleString dERVisibleString0 = new DERVisibleString(byteArray0);
      assertNotNull(dERVisibleString0);
      
      int int0 = dERVisibleString0.hashCode();
      assertEquals(0, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject(false, (int) (byte)0, (DEREncodable) null);
      DERVisibleString dERVisibleString0 = DERVisibleString.getInstance((ASN1TaggedObject) dERTaggedObject0, true);
      assertNull(dERVisibleString0);
  }

  @Test
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      DERVisibleString dERVisibleString0 = new DERVisibleString(byteArray0);
      assertNotNull(dERVisibleString0);
      
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject(true, (int) (byte)105, (DEREncodable) dERVisibleString0);
      DERVisibleString dERVisibleString1 = DERVisibleString.getInstance((ASN1TaggedObject) dERTaggedObject0, true);
      assertNotNull(dERVisibleString1);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", dERVisibleString0.toString());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", dERVisibleString1.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject(1);
      BERConstructedOctetString bERConstructedOctetString0 = (BERConstructedOctetString)ASN1OctetString.getInstance((ASN1TaggedObject) bERTaggedObject0, true);
      DERVisibleString dERVisibleString0 = DERVisibleString.getInstance((Object) bERConstructedOctetString0);
      assertEquals("", dERVisibleString0.getString());
  }

  @Test
  public void test6()  throws Throwable  {
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject(0);
      // Undeclared exception!
      try {
        DERVisibleString.getInstance((Object) dERTaggedObject0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * illegal object in getInstance: org.bouncycastle.asn1.DERSequence
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      DERVisibleString dERVisibleString0 = new DERVisibleString("wQpE{BnWP)Soo7W");
      boolean boolean0 = dERVisibleString0.asn1Equals((DERObject) dERVisibleString0);
      assertEquals(true, boolean0);
      assertEquals("wQpE{BnWP)Soo7W", dERVisibleString0.getString());
  }

  @Test
  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      DERVisibleString dERVisibleString0 = new DERVisibleString(byteArray0);
      assertNotNull(dERVisibleString0);
      
      DERInteger dERInteger0 = new DERInteger((-832));
      boolean boolean0 = dERVisibleString0.asn1Equals((DERObject) dERInteger0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000", dERVisibleString0.toString());
      assertEquals(false, boolean0);
  }
}
