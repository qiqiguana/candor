/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1.x509;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.ASN1TaggedObject;
import org.bouncycastle.asn1.BERSequence;
import org.bouncycastle.asn1.BERTaggedObject;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DERIA5String;
import org.bouncycastle.asn1.DERObjectIdentifier;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.asn1.x509.PolicyQualifierId;
import org.bouncycastle.asn1.x509.PolicyQualifierInfo;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PolicyQualifierInfoEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      PolicyQualifierInfo policyQualifierInfo0 = new PolicyQualifierInfo("EOF found inside tag value.");
      PolicyQualifierId policyQualifierId0 = (PolicyQualifierId)policyQualifierInfo0.getPolicyQualifierId();
      PolicyQualifierInfo policyQualifierInfo1 = new PolicyQualifierInfo((DERObjectIdentifier) policyQualifierId0, (DEREncodable) policyQualifierId0);
      assertNotSame(policyQualifierInfo0, policyQualifierInfo1);
  }

  @Test
  public void test1()  throws Throwable  {
      PolicyQualifierInfo policyQualifierInfo0 = new PolicyQualifierInfo("");
      DERIA5String dERIA5String0 = (DERIA5String)policyQualifierInfo0.getQualifier();
      assertNotNull(dERIA5String0);
      assertEquals("", dERIA5String0.getString());
  }

  @Test
  public void test2()  throws Throwable  {
      PolicyQualifierInfo policyQualifierInfo0 = new PolicyQualifierInfo("yyyyMMddHHmmss'Z'");
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject(Integer.MAX_VALUE, (DEREncodable) policyQualifierInfo0);
      DERSequence dERSequence0 = (DERSequence)ASN1Sequence.getInstance((ASN1TaggedObject) bERTaggedObject0, true);
      PolicyQualifierInfo policyQualifierInfo1 = new PolicyQualifierInfo((ASN1Sequence) dERSequence0);
      assertEquals("[1.3.6.1.5.5.7.2.1, yyyyMMddHHmmss'Z']", dERSequence0.toString());
      assertNotNull(policyQualifierInfo1);
      assertTrue(policyQualifierInfo1.equals(policyQualifierInfo0));
  }

  @Test
  public void test3()  throws Throwable  {
      BERSequence bERSequence0 = new BERSequence();
      // Undeclared exception!
      try {
        PolicyQualifierInfo.getInstance((Object) bERSequence0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Bad sequence size: 0
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      PolicyQualifierInfo policyQualifierInfo0 = new PolicyQualifierInfo("EOF found inside tag value.");
      PolicyQualifierInfo policyQualifierInfo1 = PolicyQualifierInfo.getInstance((Object) policyQualifierInfo0);
      assertSame(policyQualifierInfo1, policyQualifierInfo0);
  }

  @Test
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try {
        PolicyQualifierInfo.getInstance((Object) "DER");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * unknown object in getInstance.
         */
      }
  }
}
