/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1.x509;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import java.util.Vector;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.BERConstructedOctetString;
import org.bouncycastle.asn1.BERSequence;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DEREncodableVector;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.asn1.x509.Attribute;
import org.bouncycastle.asn1.x509.SubjectDirectoryAttributes;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SubjectDirectoryAttributesEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DERSequence dERSequence0 = new DERSequence();
      SubjectDirectoryAttributes subjectDirectoryAttributes0 = SubjectDirectoryAttributes.getInstance((Object) dERSequence0);
      Vector<Object> vector0 = subjectDirectoryAttributes0.getAttributes();
      assertEquals(true, vector0.isEmpty());
  }

  @Test
  public void test1()  throws Throwable  {
      SubjectDirectoryAttributes subjectDirectoryAttributes0 = SubjectDirectoryAttributes.getInstance((Object) null);
      assertNull(subjectDirectoryAttributes0);
  }

  @Test
  public void test2()  throws Throwable  {
      DEREncodableVector dEREncodableVector0 = new DEREncodableVector();
      BERSequence bERSequence0 = new BERSequence(dEREncodableVector0);
      SubjectDirectoryAttributes subjectDirectoryAttributes0 = new SubjectDirectoryAttributes((ASN1Sequence) bERSequence0);
      SubjectDirectoryAttributes subjectDirectoryAttributes1 = SubjectDirectoryAttributes.getInstance((Object) subjectDirectoryAttributes0);
      assertSame(subjectDirectoryAttributes1, subjectDirectoryAttributes0);
  }

  @Test
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try {
        SubjectDirectoryAttributes.getInstance((Object) "DER");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * illegal object in getInstance: java.lang.String
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      Vector<Attribute> vector0 = new Vector<Attribute>();
      BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString(vector0);
      BERSequence bERSequence0 = new BERSequence((DEREncodable) bERConstructedOctetString0);
      SubjectDirectoryAttributes subjectDirectoryAttributes0 = null;
      try {
        subjectDirectoryAttributes0 = new SubjectDirectoryAttributes((ASN1Sequence) bERSequence0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * unknown object in getInstance
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      vector0.add((Object) "DER");
      SubjectDirectoryAttributes subjectDirectoryAttributes0 = new SubjectDirectoryAttributes(vector0);
      // Undeclared exception!
      try {
        subjectDirectoryAttributes0.getDERObject();
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      DEREncodableVector dEREncodableVector0 = new DEREncodableVector();
      BERSequence bERSequence0 = new BERSequence(dEREncodableVector0);
      SubjectDirectoryAttributes subjectDirectoryAttributes0 = new SubjectDirectoryAttributes((ASN1Sequence) bERSequence0);
      byte[] byteArray0 = subjectDirectoryAttributes0.getEncoded();
      assertNotNull(byteArray0);
  }
}
