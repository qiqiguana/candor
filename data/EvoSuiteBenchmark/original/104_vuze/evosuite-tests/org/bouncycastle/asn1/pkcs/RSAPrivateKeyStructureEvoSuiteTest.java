/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1.pkcs;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.math.BigInteger;
import org.bouncycastle.asn1.ASN1Encodable;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.ASN1TaggedObject;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DERInteger;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.asn1.DERTaggedObject;
import org.bouncycastle.asn1.pkcs.RSAPrivateKeyStructure;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class RSAPrivateKeyStructureEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      RSAPrivateKeyStructure rSAPrivateKeyStructure0 = new RSAPrivateKeyStructure(bigInteger0, bigInteger0, bigInteger0, bigInteger0, bigInteger0, bigInteger0, bigInteger0, bigInteger0);
      int int0 = rSAPrivateKeyStructure0.getVersion();
      assertEquals(0, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      RSAPrivateKeyStructure rSAPrivateKeyStructure0 = new RSAPrivateKeyStructure(bigInteger0, bigInteger0, bigInteger0, bigInteger0, bigInteger0, bigInteger0, bigInteger0, bigInteger0);
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject(true, 0, (DEREncodable) rSAPrivateKeyStructure0);
      RSAPrivateKeyStructure rSAPrivateKeyStructure1 = RSAPrivateKeyStructure.getInstance((ASN1TaggedObject) dERTaggedObject0, true);
      assertEquals(0, rSAPrivateKeyStructure1.getVersion());
      assertNotNull(rSAPrivateKeyStructure1);
  }

  @Test
  public void test2()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      RSAPrivateKeyStructure rSAPrivateKeyStructure0 = new RSAPrivateKeyStructure(bigInteger0, bigInteger0, bigInteger0, bigInteger0, bigInteger0, bigInteger0, bigInteger0, bigInteger0);
      RSAPrivateKeyStructure rSAPrivateKeyStructure1 = RSAPrivateKeyStructure.getInstance((Object) rSAPrivateKeyStructure0);
      assertNotNull(rSAPrivateKeyStructure1);
      assertEquals(0, rSAPrivateKeyStructure1.getVersion());
  }

  @Test
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try {
        RSAPrivateKeyStructure.getInstance((Object) ":");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * unknown object in factory
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      ASN1Encodable[] aSN1EncodableArray0 = new ASN1Encodable[18];
      BigInteger bigInteger0 = BigInteger.TEN;
      DERInteger dERInteger0 = new DERInteger(bigInteger0);
      aSN1EncodableArray0[0] = (ASN1Encodable) dERInteger0;
      DERSequence dERSequence0 = new DERSequence(aSN1EncodableArray0);
      RSAPrivateKeyStructure rSAPrivateKeyStructure0 = null;
      try {
        rSAPrivateKeyStructure0 = new RSAPrivateKeyStructure((ASN1Sequence) dERSequence0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * wrong version for RSA private key
         */
      }
  }
}
