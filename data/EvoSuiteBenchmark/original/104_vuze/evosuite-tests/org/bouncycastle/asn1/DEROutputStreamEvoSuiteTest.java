/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import org.bouncycastle.asn1.ASN1SequenceParser;
import org.bouncycastle.asn1.BERSequence;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DEREncodableVector;
import org.bouncycastle.asn1.DEROutputStream;
import org.bouncycastle.asn1.DERSequence;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DEROutputStreamEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DEROutputStream dEROutputStream0 = new DEROutputStream((OutputStream) byteArrayOutputStream0);
      byte[] byteArray0 = new byte[136];
      dEROutputStream0.writeEncoded(0, byteArray0);
      assertEquals(139, byteArrayOutputStream0.size());
      assertEquals("\u0000\uFFFD\uFFFD\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DEROutputStream dEROutputStream0 = new DEROutputStream((OutputStream) byteArrayOutputStream0);
      byte[] byteArray0 = new byte[136];
      dEROutputStream0.write(byteArray0, 0, 0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DEROutputStream dEROutputStream0 = new DEROutputStream((OutputStream) byteArrayOutputStream0);
      dEROutputStream0.writeObject((Object) null);
      assertEquals(2, byteArrayOutputStream0.size());
      assertEquals("\u0005\u0000", byteArrayOutputStream0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) byteArrayOutputStream0);
      DEROutputStream dEROutputStream0 = new DEROutputStream((OutputStream) bufferedOutputStream0);
      DEREncodableVector dEREncodableVector0 = new DEREncodableVector();
      DERSequence dERSequence0 = new DERSequence(dEREncodableVector0);
      ASN1SequenceParser aSN1SequenceParser0 = dERSequence0.parser();
      BERSequence bERSequence0 = new BERSequence((DEREncodable) aSN1SequenceParser0);
      dEROutputStream0.writeObject((Object) bERSequence0);
      assertEquals(1, bERSequence0.size());
  }

  @Test
  public void test4()  throws Throwable  {
      DEROutputStream dEROutputStream0 = new DEROutputStream((OutputStream) null);
      try {
        dEROutputStream0.writeObject((Object) "BER");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * object not DEREncodable
         */
      }
  }
}
