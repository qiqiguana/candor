/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1.x509;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.bouncycastle.asn1.DEREncodableVector;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.asn1.x509.Target;
import org.bouncycastle.asn1.x509.Targets;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TargetsEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Target[] targetArray0 = new Target[1];
      Targets targets0 = new Targets(targetArray0);
      byte[] byteArray0 = targets0.getDEREncoded();
      assertNotNull(byteArray0);
  }

  @Test
  public void test1()  throws Throwable  {
      DEREncodableVector dEREncodableVector0 = new DEREncodableVector();
      DERSequence dERSequence0 = new DERSequence(dEREncodableVector0);
      Targets targets0 = Targets.getInstance((Object) dERSequence0);
      Target[] targetArray0 = targets0.getTargets();
      assertNotNull(targetArray0);
  }

  @Test
  public void test2()  throws Throwable  {
      Target[] targetArray0 = new Target[1];
      Targets targets0 = new Targets(targetArray0);
      Targets targets1 = Targets.getInstance((Object) targets0);
      assertSame(targets1, targets0);
  }

  @Test
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try {
        Targets.getInstance((Object) "DER");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * unknown object in factory: class java.lang.String
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      Target[] targetArray0 = new Target[1];
      Targets targets0 = new Targets(targetArray0);
      // Undeclared exception!
      try {
        targets0.getTargets();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
