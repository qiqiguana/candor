/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import java.text.ParseException;
import java.util.Date;
import java.util.Vector;
import org.bouncycastle.asn1.ASN1TaggedObject;
import org.bouncycastle.asn1.BERConstructedOctetString;
import org.bouncycastle.asn1.BERTaggedObject;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DERObject;
import org.bouncycastle.asn1.DERTaggedObject;
import org.bouncycastle.asn1.DERUTCTime;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DERUTCTimeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Date date0 = new Date(0L);
      DERUTCTime dERUTCTime0 = new DERUTCTime(date0);
      byte[] byteArray0 = dERUTCTime0.getEncoded("");
      assertNotNull(byteArray0);
      assertEquals("700101000000Z", dERUTCTime0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      DERUTCTime dERUTCTime0 = null;
      try {
        dERUTCTime0 = new DERUTCTime("o9M-/D");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
        /*
         * String index out of range: 12
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      DERUTCTime dERUTCTime0 = new DERUTCTime(byteArray0);
      assertNotNull(dERUTCTime0);
      
      String string0 = dERUTCTime0.toString();
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      DERUTCTime dERUTCTime0 = new DERUTCTime(byteArray0);
      assertNotNull(dERUTCTime0);
      
      int int0 = dERUTCTime0.hashCode();
      assertEquals(0, int0);
  }

  @Test
  public void test4()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString(vector0);
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject((-788), (DEREncodable) bERConstructedOctetString0);
      DERUTCTime dERUTCTime0 = DERUTCTime.getInstance((ASN1TaggedObject) dERTaggedObject0, false);
      assertEquals("", dERUTCTime0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      Date date0 = new Date(0L);
      DERUTCTime dERUTCTime0 = new DERUTCTime(date0);
      Date date1 = dERUTCTime0.getAdjustedDate();
      assertEquals("19700101000000GMT+00:00", dERUTCTime0.getAdjustedTime());
      assertNotNull(date1);
      assertEquals("700101000000Z", dERUTCTime0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      DERUTCTime dERUTCTime0 = DERUTCTime.getInstance((Object) null);
      assertNull(dERUTCTime0);
  }

  @Test
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      DERUTCTime dERUTCTime0 = new DERUTCTime(byteArray0);
      assertNotNull(dERUTCTime0);
      
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject(true, (int) (byte) (-14), (DEREncodable) dERUTCTime0);
      DERUTCTime dERUTCTime1 = DERUTCTime.getInstance((ASN1TaggedObject) bERTaggedObject0, true);
      assertNotNull(dERUTCTime1);
      assertEquals("[-14]\u0000", bERTaggedObject0.toString());
      assertEquals("\u0000", dERUTCTime1.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      // Undeclared exception!
      try {
        DERUTCTime.getInstance((Object) "Canada");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * illegal object in getInstance: java.lang.String
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      DERUTCTime dERUTCTime0 = null;
      try {
        dERUTCTime0 = new DERUTCTime("{GT_ZZ<IA`+W`qAKz");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid date string: Unparseable date: \"{GT_ZZ<IA`00GMT+W`:qA\"
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      DERUTCTime dERUTCTime0 = null;
      try {
        dERUTCTime0 = new DERUTCTime("@a,>T!qMx`d");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid date string: Unparseable date: \"@a,>T!qMx`00GMT+00:00\"
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Date date0 = new Date();
      DERUTCTime dERUTCTime0 = new DERUTCTime(date0);
      String string0 = dERUTCTime0.getAdjustedTime();
      assertEquals(1372725522385L, date0.getTime());
      assertEquals("20130702003842GMT+00:00", string0);
  }

  @Test
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      DERUTCTime dERUTCTime0 = new DERUTCTime(byteArray0);
      assertNotNull(dERUTCTime0);
      
      boolean boolean0 = dERUTCTime0.asn1Equals((DERObject) dERUTCTime0);
      assertEquals(true, boolean0);
      assertEquals("\u0000", dERUTCTime0.toString());
  }

  @Test
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      DERUTCTime dERUTCTime0 = new DERUTCTime(byteArray0);
      assertNotNull(dERUTCTime0);
      
      boolean boolean0 = dERUTCTime0.asn1Equals((DERObject) null);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", dERUTCTime0.toString());
      assertEquals(false, boolean0);
  }
}
