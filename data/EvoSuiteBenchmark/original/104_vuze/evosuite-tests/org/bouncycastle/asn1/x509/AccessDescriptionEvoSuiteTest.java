/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1.x509;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.bouncycastle.asn1.ASN1Encodable;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.DERObject;
import org.bouncycastle.asn1.DERObjectIdentifier;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.asn1.x509.AccessDescription;
import org.bouncycastle.asn1.x509.GeneralName;
import org.bouncycastle.asn1.x509.X509Name;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class AccessDescriptionEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DERObjectIdentifier dERObjectIdentifier0 = X509Name.CN;
      GeneralName generalName0 = new GeneralName(377, (ASN1Encodable) dERObjectIdentifier0);
      AccessDescription accessDescription0 = new AccessDescription(dERObjectIdentifier0, generalName0);
      GeneralName generalName1 = accessDescription0.getAccessLocation();
      assertEquals("AccessDescription: Oid(2.5.4.3)", accessDescription0.toString());
      assertNotNull(generalName1);
  }

  @Test
  public void test1()  throws Throwable  {
      DERObjectIdentifier dERObjectIdentifier0 = AccessDescription.id_ad_caIssuers;
      GeneralName generalName0 = new GeneralName(36, (ASN1Encodable) dERObjectIdentifier0);
      AccessDescription accessDescription0 = new AccessDescription(dERObjectIdentifier0, generalName0);
      DERSequence dERSequence0 = (DERSequence)accessDescription0.getDERObject();
      assertEquals("[1.3.6.1.5.5.7.48.2, 36: 1.3.6.1.5.5.7.48.2]", dERSequence0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      DERObjectIdentifier dERObjectIdentifier0 = AccessDescription.id_ad_caIssuers;
      GeneralName generalName0 = new GeneralName(36, (ASN1Encodable) dERObjectIdentifier0);
      AccessDescription accessDescription0 = new AccessDescription(dERObjectIdentifier0, generalName0);
      String string0 = accessDescription0.toString();
      assertNotNull(string0);
      assertEquals("AccessDescription: Oid(1.3.6.1.5.5.7.48.2)", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      DERObjectIdentifier dERObjectIdentifier0 = X509Name.CN;
      GeneralName generalName0 = new GeneralName(377, (ASN1Encodable) dERObjectIdentifier0);
      AccessDescription accessDescription0 = new AccessDescription(dERObjectIdentifier0, generalName0);
      DERObjectIdentifier dERObjectIdentifier1 = accessDescription0.getAccessMethod();
      assertNotNull(dERObjectIdentifier1);
      assertEquals("2.5.4.3", dERObjectIdentifier1.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      ASN1Encodable[] aSN1EncodableArray0 = new ASN1Encodable[9];
      DERSequence dERSequence0 = new DERSequence(aSN1EncodableArray0);
      // Undeclared exception!
      try {
        AccessDescription.getInstance((Object) dERSequence0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * wrong number of elements in inner sequence
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      DERObjectIdentifier dERObjectIdentifier0 = X509Name.E;
      GeneralName generalName0 = new GeneralName((DERObject) dERObjectIdentifier0, 0);
      AccessDescription accessDescription0 = new AccessDescription(dERObjectIdentifier0, generalName0);
      AccessDescription accessDescription1 = AccessDescription.getInstance((Object) accessDescription0);
      assertNotNull(accessDescription1);
      assertEquals("AccessDescription: Oid(1.2.840.113549.1.9.1)", accessDescription1.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try {
        AccessDescription.getInstance((Object) "AccessDescription: Oid(1.3.6.1.5.5.7.48.2)");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * unknown object in factory
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      ASN1Encodable[] aSN1EncodableArray0 = new ASN1Encodable[2];
      DERSequence dERSequence0 = new DERSequence(aSN1EncodableArray0);
      AccessDescription accessDescription0 = new AccessDescription((ASN1Sequence) dERSequence0);
      assertNotNull(accessDescription0);
  }
}
