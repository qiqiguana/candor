/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1.pkcs;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.NoSuchElementException;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.BERSequence;
import org.bouncycastle.asn1.DERObjectIdentifier;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.asn1.pkcs.EncryptedPrivateKeyInfo;
import org.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers;
import org.bouncycastle.asn1.x509.AlgorithmIdentifier;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class EncryptedPrivateKeyInfoEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DERObjectIdentifier dERObjectIdentifier0 = PKCSObjectIdentifiers.pkcs_9_at_extendedCertificateAttributes;
      AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier(dERObjectIdentifier0);
      byte[] byteArray0 = new byte[10];
      EncryptedPrivateKeyInfo encryptedPrivateKeyInfo0 = new EncryptedPrivateKeyInfo(algorithmIdentifier0, byteArray0);
      AlgorithmIdentifier algorithmIdentifier1 = encryptedPrivateKeyInfo0.getEncryptionAlgorithm();
      assertSame(algorithmIdentifier1, algorithmIdentifier0);
  }

  @Test
  public void test1()  throws Throwable  {
      DERObjectIdentifier dERObjectIdentifier0 = PKCSObjectIdentifiers.preferSignedData;
      AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier(dERObjectIdentifier0, dERObjectIdentifier0);
      byte[] byteArray0 = new byte[7];
      EncryptedPrivateKeyInfo encryptedPrivateKeyInfo0 = new EncryptedPrivateKeyInfo(algorithmIdentifier0, byteArray0);
      DERSequence dERSequence0 = (DERSequence)encryptedPrivateKeyInfo0.getDERObject();
      assertEquals(2, dERSequence0.size());
  }

  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      EncryptedPrivateKeyInfo encryptedPrivateKeyInfo0 = new EncryptedPrivateKeyInfo((AlgorithmIdentifier) null, byteArray0);
      byte[] byteArray1 = encryptedPrivateKeyInfo0.getEncryptedData();
      assertSame(byteArray1, byteArray0);
  }

  @Test
  public void test3()  throws Throwable  {
      BERSequence bERSequence0 = new BERSequence();
      EncryptedPrivateKeyInfo encryptedPrivateKeyInfo0 = null;
      try {
        encryptedPrivateKeyInfo0 = new EncryptedPrivateKeyInfo((ASN1Sequence) bERSequence0);
        fail("Expecting exception: NoSuchElementException");
      } catch(NoSuchElementException e) {
        /*
         * Vector Enumeration
         */
      }
  }
}
