/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.bouncycastle.asn1.ASN1Encodable;
import org.bouncycastle.asn1.ASN1Set;
import org.bouncycastle.asn1.ASN1SetParser;
import org.bouncycastle.asn1.ASN1TaggedObject;
import org.bouncycastle.asn1.BERConstructedSequence;
import org.bouncycastle.asn1.BERNull;
import org.bouncycastle.asn1.BERSet;
import org.bouncycastle.asn1.BERTaggedObject;
import org.bouncycastle.asn1.DERBoolean;
import org.bouncycastle.asn1.DERConstructedSet;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DEREncodableVector;
import org.bouncycastle.asn1.DERObject;
import org.bouncycastle.asn1.DERObjectIdentifier;
import org.bouncycastle.asn1.DERPrintableString;
import org.bouncycastle.asn1.DERSet;
import org.bouncycastle.asn1.DERT61String;
import org.bouncycastle.asn1.DERTaggedObject;
import org.bouncycastle.asn1.DERUniversalString;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ASN1SetEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DEREncodableVector dEREncodableVector0 = new DEREncodableVector();
      DERSet dERSet0 = new DERSet(dEREncodableVector0);
      assertNotNull(dERSet0);
      
      ASN1SetParser aSN1SetParser0 = dERSet0.parser();
      assertNotNull(aSN1SetParser0);
      
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject(true, 116, (DEREncodable) aSN1SetParser0);
      DERSet dERSet1 = (DERSet)ASN1Set.getInstance((ASN1TaggedObject) dERTaggedObject0, true);
      assertNotNull(dERSet1);
      assertEquals("[]", dERSet1.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      DERSet dERSet0 = new DERSet();
      // Undeclared exception!
      try {
        dERSet0.getObjectAt((-632));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      BERSet bERSet0 = new BERSet();
      String string0 = bERSet0.toString();
      assertEquals("[]", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      ASN1Set aSN1Set0 = ASN1Set.getInstance((Object) null);
      assertNull(aSN1Set0);
  }

  @Test
  public void test4()  throws Throwable  {
      BERSet bERSet0 = new BERSet();
      ASN1SetParser aSN1SetParser0 = bERSet0.parser();
      // Undeclared exception!
      try {
        ASN1Set.getInstance((Object) aSN1SetParser0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * unknown object in getInstance
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      DERT61String dERT61String0 = new DERT61String("|");
      DERConstructedSet dERConstructedSet0 = new DERConstructedSet((DEREncodable) dERT61String0);
      assertNotNull(dERConstructedSet0);
      
      DERConstructedSet dERConstructedSet1 = (DERConstructedSet)ASN1Set.getInstance((Object) dERConstructedSet0);
      assertEquals("[|]", dERConstructedSet0.toString());
      assertNotNull(dERConstructedSet1);
      assertEquals(1, dERConstructedSet1.getSize());
  }

  @Test
  public void test6()  throws Throwable  {
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject(935);
      DERSet dERSet0 = (DERSet)ASN1Set.getInstance((ASN1TaggedObject) dERTaggedObject0, false);
      assertNotNull(dERSet0);
      assertEquals("[]", dERSet0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      DERUniversalString dERUniversalString0 = new DERUniversalString(byteArray0);
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject(false, 116, (DEREncodable) dERUniversalString0);
      // Undeclared exception!
      try {
        ASN1Set.getInstance((ASN1TaggedObject) bERTaggedObject0, true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * object implicit - explicit expected.
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      DERT61String dERT61String0 = new DERT61String("|");
      DERConstructedSet dERConstructedSet0 = new DERConstructedSet((DEREncodable) dERT61String0);
      assertNotNull(dERConstructedSet0);
      
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject(false, (int) (byte) (-24), (DEREncodable) dERConstructedSet0);
      DERConstructedSet dERConstructedSet1 = (DERConstructedSet)ASN1Set.getInstance((ASN1TaggedObject) dERTaggedObject0, false);
      assertNotNull(dERConstructedSet1);
      assertEquals(1, dERConstructedSet1.getSize());
  }

  @Test
  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      DERPrintableString dERPrintableString0 = new DERPrintableString(byteArray0);
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject(false, (int) (byte)0, (DEREncodable) dERPrintableString0);
      // Undeclared exception!
      try {
        ASN1Set.getInstance((ASN1TaggedObject) bERTaggedObject0, false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * unknown object in getInstanceFromTagged
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      DEREncodableVector dEREncodableVector0 = new DEREncodableVector();
      BERSet bERSet0 = new BERSet(dEREncodableVector0);
      DERConstructedSet dERConstructedSet0 = new DERConstructedSet(dEREncodableVector0);
      bERSet0.addObject((DEREncodable) dERConstructedSet0);
      int int0 = bERSet0.hashCode();
      assertEquals(1, bERSet0.size());
      assertEquals(0, int0);
  }

  @Test
  public void test11()  throws Throwable  {
      BERSet bERSet0 = new BERSet();
      byte[] byteArray0 = new byte[2];
      DERBoolean dERBoolean0 = new DERBoolean(byteArray0);
      boolean boolean0 = bERSet0.asn1Equals((DERObject) dERBoolean0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      DEREncodableVector dEREncodableVector0 = new DEREncodableVector();
      BERSet bERSet0 = new BERSet(dEREncodableVector0);
      DERConstructedSet dERConstructedSet0 = new DERConstructedSet(dEREncodableVector0);
      DERConstructedSet dERConstructedSet1 = new DERConstructedSet((DEREncodable) bERSet0);
      bERSet0.addObject((DEREncodable) dERConstructedSet0);
      boolean boolean0 = bERSet0.asn1Equals((DERObject) dERConstructedSet1);
      assertEquals("[[]]", bERSet0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      DERObjectIdentifier dERObjectIdentifier0 = new DERObjectIdentifier(byteArray0);
      DERConstructedSet dERConstructedSet0 = new DERConstructedSet((DEREncodable) dERObjectIdentifier0);
      assertNotNull(dERConstructedSet0);
      
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject((int) (byte)14, (DEREncodable) dERObjectIdentifier0);
      DERSet dERSet0 = (DERSet)ASN1Set.getInstance((ASN1TaggedObject) bERTaggedObject0, false);
      assertNotNull(dERSet0);
      
      boolean boolean0 = dERConstructedSet0.equals((Object) dERSet0);
      assertEquals(true, boolean0);
      assertEquals(1, dERSet0.size());
      assertEquals("[0.0.0.0.0.0.0]", dERSet0.toString());
  }

  @Test
  public void test14()  throws Throwable  {
      ASN1Encodable[] aSN1EncodableArray0 = new ASN1Encodable[10];
      BERNull bERNull0 = new BERNull();
      aSN1EncodableArray0[6] = (ASN1Encodable) bERNull0;
      DERSet dERSet0 = new DERSet(aSN1EncodableArray0);
      assertEquals("[NULL, null, null, null, null, null, null, null, null, null]", dERSet0.toString());
      assertNotNull(dERSet0);
  }

  @Test
  public void test15()  throws Throwable  {
      DEREncodableVector dEREncodableVector0 = new DEREncodableVector();
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      DERConstructedSet dERConstructedSet0 = new DERConstructedSet(dEREncodableVector0);
      ASN1Encodable[] aSN1EncodableArray0 = new ASN1Encodable[10];
      aSN1EncodableArray0[7] = (ASN1Encodable) bERConstructedSequence0;
      aSN1EncodableArray0[8] = (ASN1Encodable) dERConstructedSet0;
      DERSet dERSet0 = new DERSet(aSN1EncodableArray0);
      assertEquals("[null, null, null, null, null, null, null, null, [], []]", dERSet0.toString());
      assertNotNull(dERSet0);
  }
}
