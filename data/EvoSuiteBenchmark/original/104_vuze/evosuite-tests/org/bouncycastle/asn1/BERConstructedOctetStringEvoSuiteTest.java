/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.BufferedOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.util.Enumeration;
import java.util.Vector;
import org.bouncycastle.asn1.ASN1Object;
import org.bouncycastle.asn1.BERConstructedOctetString;
import org.bouncycastle.asn1.BEROutputStream;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DERObject;
import org.bouncycastle.asn1.DEROutputStream;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BERConstructedOctetStringEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[150];
      BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString(byteArray0);
      BERConstructedOctetString bERConstructedOctetString1 = new BERConstructedOctetString((DEREncodable) bERConstructedOctetString0);
      assertEquals("#048196000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", bERConstructedOctetString1.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString((DERObject) null);
      byte[] byteArray0 = bERConstructedOctetString0.getEncoded();
      assertNotNull(byteArray0);
      
      BERConstructedOctetString bERConstructedOctetString1 = (BERConstructedOctetString)ASN1Object.fromByteArray(byteArray0);
      assertNotNull(bERConstructedOctetString1);
      assertEquals("#0500", bERConstructedOctetString1.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[150];
      BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString(byteArray0);
      int int0 = bERConstructedOctetString0.hashCode();
      assertEquals(0, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      Vector<BEROutputStream> vector0 = new Vector<BEROutputStream>();
      BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString(vector0);
      assertNotNull(bERConstructedOctetString0);
      
      Enumeration<Object> enumeration0 = bERConstructedOctetString0.getObjects();
      assertNotNull(enumeration0);
      assertEquals(false, enumeration0.hasMoreElements());
  }

  @Test
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[150];
      BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString(byteArray0);
      byteArray0[17] = (byte)17;
      Enumeration<Object> enumeration0 = bERConstructedOctetString0.getObjects();
      assertEquals(true, enumeration0.hasMoreElements());
  }

  @Test
  public void test5()  throws Throwable  {
      Vector<BEROutputStream> vector0 = new Vector<BEROutputStream>();
      BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString(vector0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      vector0.add((BEROutputStream) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) pipedOutputStream0);
      BEROutputStream bEROutputStream0 = new BEROutputStream((OutputStream) bufferedOutputStream0);
      bERConstructedOctetString0.encode((DEROutputStream) bEROutputStream0);
  }
}
