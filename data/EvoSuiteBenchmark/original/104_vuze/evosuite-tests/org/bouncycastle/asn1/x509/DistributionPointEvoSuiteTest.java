/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1.x509;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.bouncycastle.asn1.ASN1Encodable;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.ASN1TaggedObject;
import org.bouncycastle.asn1.BERTaggedObject;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DERObjectIdentifier;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.asn1.DERTaggedObject;
import org.bouncycastle.asn1.x509.DistributionPoint;
import org.bouncycastle.asn1.x509.DistributionPointName;
import org.bouncycastle.asn1.x509.GeneralNames;
import org.bouncycastle.asn1.x509.ReasonFlags;
import org.bouncycastle.asn1.x509.X509Name;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DistributionPointEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DERObjectIdentifier dERObjectIdentifier0 = X509Name.UnstructuredName;
      DistributionPointName distributionPointName0 = new DistributionPointName((-16), (DEREncodable) dERObjectIdentifier0);
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject((-16), (DEREncodable) distributionPointName0);
      DistributionPoint distributionPoint0 = DistributionPoint.getInstance((ASN1TaggedObject) bERTaggedObject0, false);
      ReasonFlags reasonFlags0 = distributionPoint0.getReasons();
      assertNull(reasonFlags0);
  }

  @Test
  public void test1()  throws Throwable  {
      DERObjectIdentifier dERObjectIdentifier0 = X509Name.SN;
      DistributionPointName distributionPointName0 = new DistributionPointName((-10), (DEREncodable) dERObjectIdentifier0);
      ReasonFlags reasonFlags0 = new ReasonFlags((-10));
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject((-10), (DEREncodable) dERObjectIdentifier0);
      DERSequence dERSequence0 = (DERSequence)ASN1Sequence.getInstance((ASN1TaggedObject) dERTaggedObject0, false);
      GeneralNames generalNames0 = GeneralNames.getInstance((Object) dERSequence0);
      DistributionPoint distributionPoint0 = new DistributionPoint(distributionPointName0, reasonFlags0, generalNames0);
      // Undeclared exception!
      try {
        distributionPoint0.toString();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * unknown object in getInstance
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      DERSequence dERSequence0 = new DERSequence();
      DistributionPoint distributionPoint0 = new DistributionPoint((ASN1Sequence) dERSequence0);
      DistributionPointName distributionPointName0 = distributionPoint0.getDistributionPoint();
      assertNull(distributionPointName0);
  }

  @Test
  public void test3()  throws Throwable  {
      DERSequence dERSequence0 = new DERSequence();
      DistributionPoint distributionPoint0 = new DistributionPoint((ASN1Sequence) dERSequence0);
      GeneralNames generalNames0 = distributionPoint0.getCRLIssuer();
      assertNull(generalNames0);
  }

  @Test
  public void test4()  throws Throwable  {
      DistributionPoint distributionPoint0 = DistributionPoint.getInstance((Object) null);
      assertNull(distributionPoint0);
  }

  @Test
  public void test5()  throws Throwable  {
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject((-1570));
      DistributionPoint distributionPoint0 = DistributionPoint.getInstance((ASN1TaggedObject) bERTaggedObject0, false);
      DistributionPoint distributionPoint1 = DistributionPoint.getInstance((Object) distributionPoint0);
      assertEquals("DistributionPoint: [\n]\n", distributionPoint1.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try {
        DistributionPoint.getInstance((Object) "DistributionPoint: [\n]\n");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Invalid DistributionPoint: java.lang.String
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject(0);
      ASN1Encodable[] aSN1EncodableArray0 = new ASN1Encodable[6];
      aSN1EncodableArray0[0] = (ASN1Encodable) bERTaggedObject0;
      DERSequence dERSequence0 = new DERSequence(aSN1EncodableArray0);
      DistributionPoint distributionPoint0 = null;
      try {
        distributionPoint0 = new DistributionPoint((ASN1Sequence) dERSequence0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * org.bouncycastle.asn1.BERSequence cannot be cast to org.bouncycastle.asn1.ASN1TaggedObject
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      DERObjectIdentifier dERObjectIdentifier0 = X509Name.UnstructuredName;
      DistributionPointName distributionPointName0 = new DistributionPointName(1, (DEREncodable) dERObjectIdentifier0);
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject(1, (DEREncodable) distributionPointName0);
      // Undeclared exception!
      try {
        DistributionPoint.getInstance((ASN1TaggedObject) bERTaggedObject0, false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * illegal object in getInstance: org.bouncycastle.asn1.DERObjectIdentifier
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject((-1570));
      DistributionPoint distributionPoint0 = DistributionPoint.getInstance((ASN1TaggedObject) bERTaggedObject0, false);
      assertNotNull(distributionPoint0);
      
      DERSequence dERSequence0 = (DERSequence)distributionPoint0.toASN1Object();
      assertEquals(0, dERSequence0.size());
  }

  @Test
  public void test10()  throws Throwable  {
      DERObjectIdentifier dERObjectIdentifier0 = X509Name.SN;
      DistributionPointName distributionPointName0 = new DistributionPointName((-10), (DEREncodable) dERObjectIdentifier0);
      ReasonFlags reasonFlags0 = new ReasonFlags((-10));
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject((-10), (DEREncodable) dERObjectIdentifier0);
      DERSequence dERSequence0 = (DERSequence)ASN1Sequence.getInstance((ASN1TaggedObject) dERTaggedObject0, false);
      GeneralNames generalNames0 = GeneralNames.getInstance((Object) dERSequence0);
      DistributionPoint distributionPoint0 = new DistributionPoint(distributionPointName0, reasonFlags0, generalNames0);
      byte[] byteArray0 = distributionPoint0.getDEREncoded();
      assertNotNull(byteArray0);
  }

  @Test
  public void test11()  throws Throwable  {
      DERSequence dERSequence0 = new DERSequence();
      DistributionPoint distributionPoint0 = new DistributionPoint((ASN1Sequence) dERSequence0);
      assertNotNull(distributionPoint0);
      
      String string0 = distributionPoint0.toString();
      assertEquals("DistributionPoint: [\n]\n", string0);
      assertNotNull(string0);
  }
}
