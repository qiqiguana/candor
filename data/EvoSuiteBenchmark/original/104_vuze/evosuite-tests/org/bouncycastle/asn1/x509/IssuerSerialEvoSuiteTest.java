/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1.x509;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.bouncycastle.asn1.ASN1Encodable;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.ASN1TaggedObject;
import org.bouncycastle.asn1.BERConstructedSequence;
import org.bouncycastle.asn1.DERBitString;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DERInteger;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.asn1.DERTaggedObject;
import org.bouncycastle.asn1.x509.GeneralName;
import org.bouncycastle.asn1.x509.GeneralNames;
import org.bouncycastle.asn1.x509.IssuerSerial;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class IssuerSerialEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      GeneralNames generalNames0 = new GeneralNames((GeneralName) null);
      byte[] byteArray0 = new byte[8];
      DERInteger dERInteger0 = new DERInteger(byteArray0);
      IssuerSerial issuerSerial0 = new IssuerSerial(generalNames0, dERInteger0);
      DERBitString dERBitString0 = issuerSerial0.getIssuerUID();
      assertNull(dERBitString0);
  }

  @Test
  public void test1()  throws Throwable  {
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      GeneralNames generalNames0 = new GeneralNames((ASN1Sequence) bERConstructedSequence0);
      DERInteger dERInteger0 = new DERInteger((-1992));
      IssuerSerial issuerSerial0 = new IssuerSerial(generalNames0, dERInteger0);
      DERInteger dERInteger1 = issuerSerial0.getSerial();
      assertEquals("-1992", dERInteger1.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      ASN1Encodable[] aSN1EncodableArray0 = new ASN1Encodable[3];
      DERSequence dERSequence0 = new DERSequence(aSN1EncodableArray0);
      IssuerSerial issuerSerial0 = new IssuerSerial((ASN1Sequence) dERSequence0);
      GeneralNames generalNames0 = issuerSerial0.getIssuer();
      assertNull(generalNames0);
  }

  @Test
  public void test3()  throws Throwable  {
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      GeneralNames generalNames0 = new GeneralNames((ASN1Sequence) bERConstructedSequence0);
      DERInteger dERInteger0 = new DERInteger(1876);
      IssuerSerial issuerSerial0 = new IssuerSerial(generalNames0, dERInteger0);
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject(true, 1876, (DEREncodable) issuerSerial0);
      IssuerSerial issuerSerial1 = IssuerSerial.getInstance((ASN1TaggedObject) dERTaggedObject0, true);
      assertNotSame(issuerSerial1, issuerSerial0);
  }

  @Test
  public void test4()  throws Throwable  {
      IssuerSerial issuerSerial0 = IssuerSerial.getInstance((Object) null);
      assertNull(issuerSerial0);
  }

  @Test
  public void test5()  throws Throwable  {
      GeneralNames generalNames0 = new GeneralNames((GeneralName) null);
      byte[] byteArray0 = new byte[8];
      DERInteger dERInteger0 = new DERInteger(byteArray0);
      IssuerSerial issuerSerial0 = new IssuerSerial(generalNames0, dERInteger0);
      IssuerSerial issuerSerial1 = IssuerSerial.getInstance((Object) issuerSerial0);
      assertSame(issuerSerial1, issuerSerial0);
  }

  @Test
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try {
        IssuerSerial.getInstance((Object) "DER");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * illegal object in getInstance: java.lang.String
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      // Undeclared exception!
      try {
        IssuerSerial.getInstance((Object) bERConstructedSequence0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Bad sequence size: 0
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      ASN1Encodable[] aSN1EncodableArray0 = new ASN1Encodable[3];
      DERSequence dERSequence0 = new DERSequence(aSN1EncodableArray0);
      IssuerSerial issuerSerial0 = new IssuerSerial((ASN1Sequence) dERSequence0);
      assertNotNull(issuerSerial0);
      
      DERBitString dERBitString0 = new DERBitString((DEREncodable) issuerSerial0);
      issuerSerial0.issuerUID = (org.bouncycastle.asn1.DERBitString) dERBitString0;
      int int0 = issuerSerial0.hashCode();
      assertEquals(41, int0);
  }
}
