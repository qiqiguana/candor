/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import org.bouncycastle.asn1.DefiniteLengthInputStream;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DefiniteLengthInputStreamEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DefiniteLengthInputStream definiteLengthInputStream0 = null;
      try {
        definiteLengthInputStream0 = new DefiniteLengthInputStream((InputStream) null, (-680));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * negative lengths not allowed
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DefiniteLengthInputStream definiteLengthInputStream0 = new DefiniteLengthInputStream((InputStream) pipedInputStream0, 0);
      assertNotNull(definiteLengthInputStream0);
      
      int int0 = definiteLengthInputStream0.read();
      assertEquals((-1), int0);
  }

  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) (byte)0, (int) (byte)17);
      DefiniteLengthInputStream definiteLengthInputStream0 = new DefiniteLengthInputStream((InputStream) byteArrayInputStream0, (int) (byte)103);
      definiteLengthInputStream0.read();
  }

  @Test
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) (byte)17, (int) (byte)17);
      DefiniteLengthInputStream definiteLengthInputStream0 = new DefiniteLengthInputStream((InputStream) byteArrayInputStream0, (int) (byte)103);
      try {
        definiteLengthInputStream0.read();
        fail("Expecting exception: EOFException");
      } catch(EOFException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DefiniteLengthInputStream definiteLengthInputStream0 = new DefiniteLengthInputStream((InputStream) pipedInputStream0, 0);
      assertNotNull(definiteLengthInputStream0);
      
      byte[] byteArray0 = new byte[5];
      int int0 = definiteLengthInputStream0.read(byteArray0);
      assertEquals((-1), int0);
  }

  @Test
  public void test5()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      DefiniteLengthInputStream definiteLengthInputStream0 = new DefiniteLengthInputStream((InputStream) pipedInputStream0, 1579);
      pipedOutputStream0.close();
      byte[] byteArray0 = new byte[10];
      try {
        definiteLengthInputStream0.read(byteArray0);
        fail("Expecting exception: EOFException");
      } catch(EOFException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DefiniteLengthInputStream definiteLengthInputStream0 = new DefiniteLengthInputStream((InputStream) byteArrayInputStream0, 1);
      int int0 = definiteLengthInputStream0.read(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals((-1), int0);
  }

  @Test
  public void test7()  throws Throwable  {
      DefiniteLengthInputStream definiteLengthInputStream0 = new DefiniteLengthInputStream((InputStream) null, 0);
      byte[] byteArray0 = definiteLengthInputStream0.toByteArray();
      assertNotNull(byteArray0);
  }

  @Test
  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (int) (byte)1);
      DefiniteLengthInputStream definiteLengthInputStream0 = new DefiniteLengthInputStream((InputStream) byteArrayInputStream0, (int) (byte)117);
      try {
        definiteLengthInputStream0.toByteArray();
        fail("Expecting exception: EOFException");
      } catch(EOFException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DefiniteLengthInputStream definiteLengthInputStream0 = new DefiniteLengthInputStream((InputStream) byteArrayInputStream0, 3);
      definiteLengthInputStream0.toByteArray();
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, byteArrayInputStream0.read());
  }
}
